//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*

Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_ge "archive/zip";_cd "bytes";_ga "errors";_adc "fmt";_c "github.com/unidoc/unioffice";_gb "github.com/unidoc/unioffice/color";_bd "github.com/unidoc/unioffice/common";_gf "github.com/unidoc/unioffice/common/tempstorage";_ab "github.com/unidoc/unioffice/internal/license";_gaf "github.com/unidoc/unioffice/measurement";_ac "github.com/unidoc/unioffice/schema/schemas.microsoft.com/office/activeX";_add "github.com/unidoc/unioffice/schema/soo/dml";_abb "github.com/unidoc/unioffice/schema/soo/dml/picture";_eg "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_ef "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_eb "github.com/unidoc/unioffice/schema/soo/wml";_gd "github.com/unidoc/unioffice/zippkg";_g "image";_ee "image/jpeg";_ad "io";_e "log";_cg "math/rand";_fe "os";_f "path/filepath";_a "strings";_d "unicode";);

// SetTop sets the top border to a specified type, color and thickness.
func (_agdg TableBorders )SetTop (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_agdg ._aeca .Top =_eb .NewCT_Border ();_fgag (_agdg ._aeca .Top ,t ,c ,thickness );};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_cbcd *Document )MailMerge (mergeContent map[string ]string ){_bbbg :=_cbcd .mergeFields ();_bega :=map[Paragraph ][]Run {};for _ ,_dgdb :=range _bbbg {_bdeeg ,_eegc :=mergeContent [_dgdb ._fgaa ];if _eegc {if _dgdb ._adgf {_bdeeg =_a .ToUpper (_bdeeg );}else if _dgdb ._bade {_bdeeg =_a .ToLower (_bdeeg );}else if _dgdb ._gdee {_bdeeg =_a .Title (_bdeeg );}else if _dgdb ._ageaf {_aega :=_cd .Buffer {};for _aaca ,_cbee :=range _bdeeg {if _aaca ==0{_aega .WriteRune (_d .ToUpper (_cbee ));}else {_aega .WriteRune (_cbee );};};_bdeeg =_aega .String ();};if _bdeeg !=""&&_dgdb ._ffea !=""{_bdeeg =_dgdb ._ffea +_bdeeg ;};if _bdeeg !=""&&_dgdb ._dfff !=""{_bdeeg =_bdeeg +_dgdb ._dfff ;};};if _dgdb ._abeec {if len (_dgdb ._dede .FldSimple )==1&&len (_dgdb ._dede .FldSimple [0].EG_PContent )==1&&len (_dgdb ._dede .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_baff :=&_eb .EG_ContentRunContent {};_baff .R =_dgdb ._dede .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_dgdb ._dede .FldSimple =nil ;_fafe :=Run {_cbcd ,_baff .R };_fafe .ClearContent ();_fafe .AddText (_bdeeg );_dgdb ._dede .EG_ContentRunContent =append (_dgdb ._dede .EG_ContentRunContent ,_baff );};}else {_bbcb :=_dgdb ._fcea .Runs ();for _dgg :=_dgdb ._gcaaf ;_dgg <=_dgdb ._fdff ;_dgg ++{if _dgg ==_dgdb ._ccgca +1{_bbcb [_dgg ].ClearContent ();_bbcb [_dgg ].AddText (_bdeeg );}else {_bega [_dgdb ._fcea ]=append (_bega [_dgdb ._fcea ],_bbcb [_dgg ]);};};};};for _cagd ,_eefe :=range _bega {for _ ,_fgdaf :=range _eefe {_cagd .RemoveRun (_fgdaf );};};_cbcd .Settings .RemoveMailMerge ();};

// Paragraphs returns the paragraphs defined in the cell.
func (_fea Cell )Paragraphs ()[]Paragraph {_fbd :=[]Paragraph {};for _ ,_ddd :=range _fea ._dd .EG_BlockLevelElts {for _ ,_gff :=range _ddd .EG_ContentBlockContent {for _ ,_bdb :=range _gff .P {_fbd =append (_fbd ,Paragraph {_fea ._af ,_bdb });};};};return _fbd ;};

// VerticalAlign returns the value of run vertical align.
func (_aabb RunProperties )VerticalAlignment ()_eg .ST_VerticalAlignRun {if _ccgbd :=_aabb ._beee .VertAlign ;_ccgbd !=nil {return _ccgbd .ValAttr ;};return 0;};

// EastAsiaFont returns the name of run font family for East Asia.
func (_facf RunProperties )EastAsiaFont ()string {if _cbfe :=_facf ._beee .RFonts ;_cbfe !=nil {if _cbfe .EastAsiaAttr !=nil {return *_cbfe .EastAsiaAttr ;};};return "";};

// SetWidthPercent sets the table to a width percentage.
func (_fgab TableProperties )SetWidthPercent (pct float64 ){_fgab ._bbbf .TblW =_eb .NewCT_TblWidth ();_fgab ._bbbf .TblW .TypeAttr =_eb .ST_TblWidthPct ;_fgab ._bbbf .TblW .WAttr =&_eb .ST_MeasurementOrPercent {};_fgab ._bbbf .TblW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_fgab ._bbbf .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// SetUnderline controls underline for a run style.
func (_dged RunProperties )SetUnderline (style _eb .ST_Underline ,c _gb .Color ){if style ==_eb .ST_UnderlineUnset {_dged ._beee .U =nil ;}else {_dged ._beee .U =_eb .NewCT_Underline ();_dged ._beee .U .ColorAttr =&_eb .ST_HexColor {};_dged ._beee .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();_dged ._beee .U .ValAttr =style ;};};func (_bbdf *Document )validateBookmarks ()error {_cbf :=make (map[string ]struct{});for _ ,_gfa :=range _bbdf .Bookmarks (){if _ ,_def :=_cbf [_gfa .Name ()];_def {return _adc .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_gfa .Name ());};_cbf [_gfa .Name ()]=struct{}{};};return nil ;};

// SetThemeShade sets the shade based off the theme color.
func (_efc Color )SetThemeShade (s uint8 ){_bdf :=_adc .Sprintf ("\u0025\u0030\u0032\u0078",s );_efc ._db .ThemeShadeAttr =&_bdf ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_acfe CellBorders )SetTop (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_acfe ._acae .Top =_eb .NewCT_Border ();_fgag (_acfe ._acae .Top ,t ,c ,thickness );};

// AddRow adds a row to a table.
func (_dgfb Table )AddRow ()Row {_aaag :=_eb .NewEG_ContentRowContent ();_dgfb ._aefb .EG_ContentRowContent =append (_dgfb ._aefb .EG_ContentRowContent ,_aaag );_aacc :=_eb .NewCT_Row ();_aaag .Tr =append (_aaag .Tr ,_aacc );return Row {_dgfb ._gdbc ,_aacc };};

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_cfe *Document )Close ()error {if _cfe .TmpPath !=""{return _gf .RemoveAll (_cfe .TmpPath );};return nil ;};var _gfcfd =[...]uint8 {0,20,37,58,79};

// SizeValue returns the value of run font size in points.
func (_egeeg RunProperties )SizeValue ()float64 {if _gbedf :=_egeeg ._beee .Sz ;_gbedf !=nil {_fbgfd :=_gbedf .ValAttr ;if _fbgfd .ST_UnsignedDecimalNumber !=nil {return float64 (*_fbgfd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_cggb Paragraph )AddHyperLink ()HyperLink {_bebc :=_eb .NewEG_PContent ();_cggb ._ebg .EG_PContent =append (_cggb ._ebg .EG_PContent ,_bebc );_bebc .Hyperlink =_eb .NewCT_Hyperlink ();return HyperLink {_cggb ._dfbc ,_bebc .Hyperlink };};

// X returns the inner wrapped XML type.
func (_ccg Color )X ()*_eb .CT_Color {return _ccg ._db };func _ceg (_acc *_eb .CT_TblWidth ,_dgd float64 ){_acc .TypeAttr =_eb .ST_TblWidthPct ;_acc .WAttr =&_eb .ST_MeasurementOrPercent {};_acc .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_acc .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (_dgd *50));};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_bebdf *Document ;_ccfg *_eb .CT_FtnEdn ;};

// SetStart sets the cell start margin
func (_acaef CellMargins )SetStart (d _gaf .Distance ){_acaef ._gffa .Start =_eb .NewCT_TblWidth ();_ege (_acaef ._gffa .Start ,d );};

// SetEnabled marks a FormField as enabled or disabled.
func (_daa FormField )SetEnabled (enabled bool ){_ebd :=_eb .NewCT_OnOff ();_ebd .ValAttr =&_eg .ST_OnOff {Bool :&enabled };_daa ._bfbd .Enabled =[]*_eb .CT_OnOff {_ebd };};

// SetSize sets the size of the displayed image on the page.
func (_fd AnchoredDrawing )SetSize (w ,h _gaf .Distance ){_fd ._df .Extent .CxAttr =int64 (float64 (w *_gaf .Pixel72 )/_gaf .EMU );_fd ._df .Extent .CyAttr =int64 (float64 (h *_gaf .Pixel72 )/_gaf .EMU );};func _gdfaa (_acbd *_eb .CT_P ,_acbdc *_eb .CT_Hyperlink ,_bda *TableInfo ,_afa *DrawingInfo ,_efed []*_eb .EG_PContent )[]TextItem {_bdag :=[]TextItem {};for _ ,_bbbc :=range _efed {for _ ,_adegd :=range _bbbc .FldSimple {if _adegd !=nil {_bdag =append (_bdag ,_gdfaa (_acbd ,_acbdc ,_bda ,_afa ,_adegd .EG_PContent )...);};};if _bddd :=_bbbc .Hyperlink ;_bddd !=nil {_bdag =append (_bdag ,_ccgc (_acbd ,_bddd ,_bda ,_afa ,_bddd .EG_ContentRunContent )...);};_bdag =append (_bdag ,_ccgc (_acbd ,nil ,_bda ,_afa ,_bbbc .EG_ContentRunContent )...);};return _bdag ;};func (_gef *Document )save (_dcc _ad .Writer ,_agg string )error {const _dga ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";if _edg :=_gef ._dddb .Validate ();_edg !=nil {_c .Log ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_edg );};_agf :=_c .DocTypeDocument ;if !_ab .GetLicenseKey ().IsLicensed ()&&!_dddbb {_adc .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_adc .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _ga .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_gef ._ba )==0{if len (_agg )> 0{_gef ._ba =_agg ;}else {_dbd ,_aee :=_ab .GenRefId ("\u0064\u0077");if _aee !=nil {_c .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_aee );return _aee ;};_gef ._ba =_dbd ;};};if _cff :=_ab .Track (_gef ._ba ,_dga );_cff !=nil {_adc .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_cff );return _cff ;};_dcd :=_ge .NewWriter (_dcc );defer _dcd .Close ();if _dgbf :=_gd .MarshalXML (_dcd ,_c .BaseRelsFilename ,_gef .Rels .X ());_dgbf !=nil {return _dgbf ;};if _dbb :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .ExtendedPropertiesType ,_gef .AppProperties .X ());_dbb !=nil {return _dbb ;};if _aga :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .CorePropertiesType ,_gef .CoreProperties .X ());_aga !=nil {return _aga ;};if _gef .CustomProperties .X ()!=nil {if _cbc :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .CustomPropertiesType ,_gef .CustomProperties .X ());_cbc !=nil {return _cbc ;};};if _gef .Thumbnail !=nil {_bgd ,_ecb :=_dcd .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _ecb !=nil {return _ecb ;};if _gdc :=_ee .Encode (_bgd ,_gef .Thumbnail ,nil );_gdc !=nil {return _gdc ;};};if _efg :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .SettingsType ,_gef .Settings .X ());_efg !=nil {return _efg ;};_cfc :=_c .AbsoluteFilename (_agf ,_c .OfficeDocumentType ,0);if _gfbf :=_gd .MarshalXML (_dcd ,_cfc ,_gef ._dddb );_gfbf !=nil {return _gfbf ;};if _abc :=_gd .MarshalXML (_dcd ,_gd .RelationsPathFor (_cfc ),_gef ._bdfb .X ());_abc !=nil {return _abc ;};if _gef .Numbering .X ()!=nil {if _ddfeb :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .NumberingType ,_gef .Numbering .X ());_ddfeb !=nil {return _ddfeb ;};};if _aae :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .StylesType ,_gef .Styles .X ());_aae !=nil {return _aae ;};if _gef ._gaa !=nil {if _dfd :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .WebSettingsType ,_gef ._gaa );_dfd !=nil {return _dfd ;};};if _gef ._cef !=nil {if _da :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .FontTableType ,_gef ._cef );_da !=nil {return _da ;};};if _gef ._bfc !=nil {if _fdad :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .EndNotesType ,_gef ._bfc );_fdad !=nil {return _fdad ;};};if _gef ._edeb !=nil {if _gffe :=_gd .MarshalXMLByType (_dcd ,_agf ,_c .FootNotesType ,_gef ._edeb );_gffe !=nil {return _gffe ;};};for _afd ,_edb :=range _gef ._ede {if _efcf :=_gd .MarshalXMLByTypeIndex (_dcd ,_agf ,_c .ThemeType ,_afd +1,_edb );_efcf !=nil {return _efcf ;};};for _fg ,_bff :=range _gef ._bgf {if _fgd :=_gd .MarshalXMLByTypeIndex (_dcd ,_agf ,_c .ControlType ,_fg +1,_bff );_fgd !=nil {return _fgd ;};};for _gafb ,_bca :=range _gef ._bb {_dcdb :=_c .AbsoluteFilename (_agf ,_c .HeaderType ,_gafb +1);if _ggb :=_gd .MarshalXML (_dcd ,_dcdb ,_bca );_ggb !=nil {return _ggb ;};if !_gef ._adf [_gafb ].IsEmpty (){_gd .MarshalXML (_dcd ,_gd .RelationsPathFor (_dcdb ),_gef ._adf [_gafb ].X ());};};for _ada ,_bcb :=range _gef ._ddfb {_cde :=_c .AbsoluteFilename (_agf ,_c .FooterType ,_ada +1);if _agfe :=_gd .MarshalXMLByTypeIndex (_dcd ,_agf ,_c .FooterType ,_ada +1,_bcb );_agfe !=nil {return _agfe ;};if !_gef ._bcca [_ada ].IsEmpty (){_gd .MarshalXML (_dcd ,_gd .RelationsPathFor (_cde ),_gef ._bcca [_ada ].X ());};};for _bgeg ,_bcf :=range _gef .Images {if _eed :=_bd .AddImageToZip (_dcd ,_bcf ,_bgeg +1,_c .DocTypeDocument );_eed !=nil {return _eed ;};};if _dab :=_gd .MarshalXML (_dcd ,_c .ContentTypesFilename ,_gef .ContentTypes .X ());_dab !=nil {return _dab ;};if _bcaf :=_gef .WriteExtraFiles (_dcd );_bcaf !=nil {return _bcaf ;};return _dcd .Close ();};

// Style is a style within the styles.xml file.
type Style struct{_beadf *_eb .CT_Style };

// Font returns the name of run font family.
func (_gbfg RunProperties )Font ()string {if _fdfe :=_gbfg ._beee .RFonts ;_fdfe !=nil {if _fdfe .AsciiAttr !=nil {return *_fdfe .AsciiAttr ;}else if _fdfe .HAnsiAttr !=nil {return *_fdfe .HAnsiAttr ;}else if _fdfe .CsAttr !=nil {return *_fdfe .CsAttr ;};};return "";};

// Cells returns the cells defined in the table.
func (_gcfe Row )Cells ()[]Cell {_bacb :=[]Cell {};for _ ,_ggfdc :=range _gcfe ._ccedf .EG_ContentCellContent {for _ ,_fdcc :=range _ggfdc .Tc {_bacb =append (_bacb ,Cell {_gcfe ._bgcbb ,_fdcc });};if _ggfdc .Sdt !=nil &&_ggfdc .Sdt .SdtContent !=nil {for _ ,_fgeg :=range _ggfdc .Sdt .SdtContent .Tc {_bacb =append (_bacb ,Cell {_gcfe ._bgcbb ,_fgeg });};};};return _bacb ;};

// X returns the inner wrapped XML type.
func (_cbce Style )X ()*_eb .CT_Style {return _cbce ._beadf };func _gaga (_cffb *_eb .CT_Tbl ,_gabf map[string ]string ){for _ ,_eagg :=range _cffb .EG_ContentRowContent {for _ ,_cbfb :=range _eagg .Tr {for _ ,_ebeg :=range _cbfb .EG_ContentCellContent {for _ ,_gcg :=range _ebeg .Tc {for _ ,_fagc :=range _gcg .EG_BlockLevelElts {for _ ,_eeab :=range _fagc .EG_ContentBlockContent {for _ ,_bgbb :=range _eeab .P {_ggea (_bgbb ,_gabf );};for _ ,_addf :=range _eeab .Tbl {_gaga (_addf ,_gabf );};};};};};};};};

// Section is the beginning of a new section.
type Section struct{_ggad *Document ;_faggf *_eb .CT_SectPr ;};

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_dbed FormField )PossibleValues ()[]string {if _dbed ._bfbd .DdList ==nil {return nil ;};_cdbdb :=[]string {};for _ ,_cabe :=range _dbed ._bfbd .DdList .ListEntry {if _cabe ==nil {continue ;};_cdbdb =append (_cdbdb ,_cabe .ValAttr );};return _cdbdb ;};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_fdcac FormField )SetValue (v string ){if _fdcac ._bfbd .DdList !=nil {for _eebf ,_fbba :=range _fdcac .PossibleValues (){if _fbba ==v {_fdcac ._bfbd .DdList .Result =_eb .NewCT_DecimalNumber ();_fdcac ._bfbd .DdList .Result .ValAttr =int64 (_eebf );break ;};};}else if _fdcac ._bfbd .TextInput !=nil {_fdcac ._bcbfb .T =_eb .NewCT_Text ();_fdcac ._bcbfb .T .Content =v ;};};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_gcaa *Document )Endnote (id int64 )Endnote {for _ ,_bfcf :=range _gcaa .Endnotes (){if _bfcf .id ()==id {return _bfcf ;};};return Endnote {};};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_gfbd *Document )HasFootnotes ()bool {return _gfbd ._edeb !=nil };

// Tables returns the tables defined in the header.
func (_becd Header )Tables ()[]Table {_fcd :=[]Table {};if _becd ._dgab ==nil {return nil ;};for _ ,_fbgd :=range _becd ._dgab .EG_ContentBlockContent {for _ ,_gaegd :=range _becd ._ceda .tables (_fbgd ){_fcd =append (_fcd ,_gaegd );};};return _fcd ;};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dgca ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_dgca ._ffge .KeepLines =nil ;}else {_dgca ._ffge .KeepLines =_eb .NewCT_OnOff ();};};

// Clear removes all of the content from within a run.
func (_ffgac Run )Clear (){_ffgac ._ccfe .EG_RunInnerContent =nil };

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_ggeg RunProperties )RStyle ()string {if _ggeg ._beee .RStyle !=nil {return _ggeg ._beee .RStyle .ValAttr ;};return "";};func _bcega (_dcdfd string )mergeFieldInfo {_cdgbc :=[]string {};_fdbae :=_cd .Buffer {};_dcag :=-1;for _aefff ,_agfc :=range _dcdfd {switch _agfc {case ' ':if _fdbae .Len ()!=0{_cdgbc =append (_cdgbc ,_fdbae .String ());};_fdbae .Reset ();case '"':if _dcag !=-1{_cdgbc =append (_cdgbc ,_dcdfd [_dcag +1:_aefff ]);_dcag =-1;}else {_dcag =_aefff ;};default:_fdbae .WriteRune (_agfc );};};if _fdbae .Len ()!=0{_cdgbc =append (_cdgbc ,_fdbae .String ());};_gaae :=mergeFieldInfo {};for _bfcgd :=0;_bfcgd < len (_cdgbc )-1;_bfcgd ++{_babgb :=_cdgbc [_bfcgd ];switch _babgb {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_gaae ._fgaa =_cdgbc [_bfcgd +1];_bfcgd ++;case "\u005c\u0066":_gaae ._dfff =_cdgbc [_bfcgd +1];_bfcgd ++;case "\u005c\u0062":_gaae ._ffea =_cdgbc [_bfcgd +1];_bfcgd ++;case "\u005c\u002a":switch _cdgbc [_bfcgd +1]{case "\u0055\u0070\u0070e\u0072":_gaae ._adgf =true ;case "\u004c\u006f\u0077e\u0072":_gaae ._bade =true ;case "\u0043\u0061\u0070\u0073":_gaae ._gdee =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_gaae ._ageaf =true ;};_bfcgd ++;};};return _gaae ;};

// RemoveParagraph removes a paragraph from the endnote.
func (_ffe Endnote )RemoveParagraph (p Paragraph ){for _ ,_gfga :=range _ffe .content (){for _dgba ,_gfe :=range _gfga .P {if _gfe ==p ._ebg {copy (_gfga .P [_dgba :],_gfga .P [_dgba +1:]);_gfga .P =_gfga .P [0:len (_gfga .P )-1];return ;};};};};

// SetAlignment controls the paragraph alignment
func (_gfbdg ParagraphProperties )SetAlignment (align _eb .ST_Jc ){if align ==_eb .ST_JcUnset {_gfbdg ._ffge .Jc =nil ;}else {_gfbdg ._ffge .Jc =_eb .NewCT_Jc ();_gfbdg ._ffge .Jc .ValAttr =align ;};};

// SetPrimaryStyle marks the style as a primary style.
func (_defae Style )SetPrimaryStyle (b bool ){if b {_defae ._beadf .QFormat =_eb .NewCT_OnOff ();}else {_defae ._beadf .QFormat =nil ;};};func (_efgf Document )mergeFields ()[]mergeFieldInfo {_agbbg :=[]Paragraph {};_aafd :=[]mergeFieldInfo {};for _ ,_eagac :=range _efgf .Tables (){for _ ,_fagcg :=range _eagac .Rows (){for _ ,_effdc :=range _fagcg .Cells (){_agbbg =append (_agbbg ,_effdc .Paragraphs ()...);};};};_agbbg =append (_agbbg ,_efgf .Paragraphs ()...);for _ ,_afad :=range _agbbg {_gccb :=_afad .Runs ();_feb :=-1;_fbcg :=-1;_ecdb :=-1;_babb :=mergeFieldInfo {};for _ ,_fdae :=range _afad ._ebg .EG_PContent {for _ ,_deca :=range _fdae .FldSimple {if _a .Contains (_deca .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_fef :=_bcega (_deca .InstrAttr );_fef ._abeec =true ;_fef ._fcea =_afad ;_fef ._dede =_fdae ;_aafd =append (_aafd ,_fef );};};};for _badd :=0;_badd < len (_gccb );_badd ++{_aacb :=_gccb [_badd ];for _ ,_cffcf :=range _aacb .X ().EG_RunInnerContent {if _cffcf .FldChar !=nil {switch _cffcf .FldChar .FldCharTypeAttr {case _eb .ST_FldCharTypeBegin :_feb =_badd ;case _eb .ST_FldCharTypeSeparate :_fbcg =_badd ;case _eb .ST_FldCharTypeEnd :_ecdb =_badd ;if _babb ._fgaa !=""{_babb ._fcea =_afad ;_babb ._gcaaf =_feb ;_babb ._fdff =_ecdb ;_babb ._ccgca =_fbcg ;_aafd =append (_aafd ,_babb );};_feb =-1;_fbcg =-1;_ecdb =-1;_babb =mergeFieldInfo {};};}else if _cffcf .InstrText !=nil &&_a .Contains (_cffcf .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _feb !=-1&&_ecdb ==-1{_babb =_bcega (_cffcf .InstrText .Content );};};};};};return _aafd ;};

// ClearColor clears the text color.
func (_gefca RunProperties )ClearColor (){_gefca ._beee .Color =nil };

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_bffee TableLook )SetFirstRow (on bool ){if !on {_bffee ._gfaf .FirstRowAttr =&_eg .ST_OnOff {};_bffee ._gfaf .FirstRowAttr .ST_OnOff1 =_eg .ST_OnOff1Off ;}else {_bffee ._gfaf .FirstRowAttr =&_eg .ST_OnOff {};_bffee ._gfaf .FirstRowAttr .ST_OnOff1 =_eg .ST_OnOff1On ;};};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_bfeb FormField )SetChecked (b bool ){if _bfeb ._bfbd .CheckBox ==nil {return ;};if !b {_bfeb ._bfbd .CheckBox .Checked =nil ;}else {_bfeb ._bfbd .CheckBox .Checked =_eb .NewCT_OnOff ();};};

// CellProperties returns the cell properties.
func (_caba TableConditionalFormatting )CellProperties ()CellProperties {if _caba ._egf .TcPr ==nil {_caba ._egf .TcPr =_eb .NewCT_TcPr ();};return CellProperties {_caba ._egf .TcPr };};

// AddBreak adds a line break to a run.
func (_dbgg Run )AddBreak (){_fdafb :=_dbgg .newIC ();_fdafb .Br =_eb .NewCT_Br ()};

// Font returns the name of paragraph font family.
func (_dcgd ParagraphProperties )Font ()string {if _bagg :=_dcgd ._ffge .RPr .RFonts ;_bagg !=nil {if _bagg .AsciiAttr !=nil {return *_bagg .AsciiAttr ;}else if _bagg .HAnsiAttr !=nil {return *_bagg .HAnsiAttr ;}else if _bagg .CsAttr !=nil {return *_bagg .CsAttr ;};};return "";};func (_caaa Run )newIC ()*_eb .EG_RunInnerContent {_dfefa :=_eb .NewEG_RunInnerContent ();_caaa ._ccfe .EG_RunInnerContent =append (_caaa ._ccfe .EG_RunInnerContent ,_dfefa );return _dfefa ;};

// StyleID returns the style ID.
func (_gefac Style )StyleID ()string {if _gefac ._beadf .StyleIdAttr ==nil {return "";};return *_gefac ._beadf .StyleIdAttr ;};

// X returns the inner wrapped XML type.
func (_abfcf ParagraphProperties )X ()*_eb .CT_PPr {return _abfcf ._ffge };

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_baga TableProperties )TableLook ()TableLook {if _baga ._bbbf .TblLook ==nil {_baga ._bbbf .TblLook =_eb .NewCT_TblLook ();};return TableLook {_baga ._bbbf .TblLook };};

// RunProperties controls run styling properties
type RunProperties struct{_beee *_eb .CT_RPr };

// X returns the inner wrapped XML type.
func (_cdfec Header )X ()*_eb .Hdr {return _cdfec ._dgab };

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_ed *Document ;_df *_eb .WdAnchor ;};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_eefc HyperLink )SetTargetByRef (link _bd .Hyperlink ){_eefc ._aab .IdAttr =_c .String (_bd .Relationship (link ).ID ());_eefc ._aab .AnchorAttr =nil ;};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_dfdc NumberingDefinition )MultiLevelType ()_eb .ST_MultiLevelType {if _dfdc ._affe .MultiLevelType !=nil {return _dfdc ._affe .MultiLevelType .ValAttr ;}else {return _eb .ST_MultiLevelTypeUnset ;};};

// SetItalic sets the run to italic.
func (_dfce RunProperties )SetItalic (b bool ){if !b {_dfce ._beee .I =nil ;_dfce ._beee .ICs =nil ;}else {_dfce ._beee .I =_eb .NewCT_OnOff ();_dfce ._beee .ICs =_eb .NewCT_OnOff ();};};

// Outline returns true if run outline is on.
func (_bdae RunProperties )Outline ()bool {return _bacc (_bdae ._beee .Outline )};

// HyperLink is a link within a document.
type HyperLink struct{_cbba *Document ;_aab *_eb .CT_Hyperlink ;};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_gag *Document )Validate ()error {if _gag ==nil ||_gag ._dddb ==nil {return _ga .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");};for _ ,_gcd :=range []func ()error {_gag .validateTableCells ,_gag .validateBookmarks }{if _ggc :=_gcd ();_ggc !=nil {return _ggc ;};};if _fac :=_gag ._dddb .Validate ();_fac !=nil {return _fac ;};return nil ;};

// Paragraphs returns the paragraphs within a structured document tag.
func (_feag StructuredDocumentTag )Paragraphs ()[]Paragraph {if _feag ._cfdc .SdtContent ==nil {return nil ;};_ccabd :=[]Paragraph {};for _ ,_dfdg :=range _feag ._cfdc .SdtContent .P {_ccabd =append (_ccabd ,Paragraph {_feag ._cdbf ,_dfdg });};return _ccabd ;};

// Runs returns all of the runs in a paragraph.
func (_cdaa Paragraph )Runs ()[]Run {_agga :=[]Run {};for _ ,_ggdc :=range _cdaa ._ebg .EG_PContent {for _ ,_cebg :=range _ggdc .EG_ContentRunContent {if _cebg .R !=nil {_agga =append (_agga ,Run {_cdaa ._dfbc ,_cebg .R });};if _cebg .Sdt !=nil &&_cebg .Sdt .SdtContent !=nil {for _ ,_bfad :=range _cebg .Sdt .SdtContent .EG_ContentRunContent {if _bfad .R !=nil {_agga =append (_agga ,Run {_cdaa ._dfbc ,_bfad .R });};};};};};return _agga ;};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_cfgbf InlineDrawing )GetImage ()(_bd .ImageRef ,bool ){_cfcb :=_cfgbf ._dgfd .Graphic .GraphicData .Any ;if len (_cfcb )> 0{_dcgag ,_beage :=_cfcb [0].(*_abb .Pic );if _beage {if _dcgag .BlipFill !=nil &&_dcgag .BlipFill .Blip !=nil &&_dcgag .BlipFill .Blip .EmbedAttr !=nil {return _cfgbf ._bbdc .GetImageByRelID (*_dcgag .BlipFill .Blip .EmbedAttr );};};};return _bd .ImageRef {},false ;};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_cgg AnchoredDrawing )GetImage ()(_bd .ImageRef ,bool ){_bf :=_cgg ._df .Graphic .GraphicData .Any ;if len (_bf )> 0{_gae ,_ca :=_bf [0].(*_abb .Pic );if _ca {if _gae .BlipFill !=nil &&_gae .BlipFill .Blip !=nil &&_gae .BlipFill .Blip .EmbedAttr !=nil {return _cgg ._ed .GetImageByRelID (*_gae .BlipFill .Blip .EmbedAttr );};};};return _bd .ImageRef {},false ;};

// RemoveParagraph removes a paragraph from a footer.
func (_fbgfc Footer )RemoveParagraph (p Paragraph ){for _ ,_fbbg :=range _fbgfc ._facg .EG_ContentBlockContent {for _eefb ,_bddgf :=range _fbbg .P {if _bddgf ==p ._ebg {copy (_fbbg .P [_eefb :],_fbbg .P [_eefb +1:]);_fbbg .P =_fbbg .P [0:len (_fbbg .P )-1];return ;};};};};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_fbafc ParagraphSpacing )SetLineSpacing (d _gaf .Distance ,rule _eb .ST_LineSpacingRule ){if rule ==_eb .ST_LineSpacingRuleUnset {_fbafc ._ccca .LineRuleAttr =_eb .ST_LineSpacingRuleUnset ;_fbafc ._ccca .LineAttr =nil ;}else {_fbafc ._ccca .LineRuleAttr =rule ;_fbafc ._ccca .LineAttr =&_eb .ST_SignedTwipsMeasure {};_fbafc ._ccca .LineAttr .Int64 =_c .Int64 (int64 (d /_gaf .Twips ));};};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_daed Run )IsFootnote ()(bool ,int64 ){if _daed ._ccfe .EG_RunInnerContent !=nil {if _daed ._ccfe .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_daed ._ccfe .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;};

// X returns the inner wrapped XML type.
func (_eade HyperLink )X ()*_eb .CT_Hyperlink {return _eade ._aab };

// Caps returns true if paragraph font is capitalized.
func (_fcdc ParagraphProperties )Caps ()bool {return _bacc (_fcdc ._ffge .RPr .Caps )};

// AddParagraph adds a paragraph to the endnote.
func (_befd Endnote )AddParagraph ()Paragraph {_eecf :=_eb .NewEG_ContentBlockContent ();_gfdf :=len (_befd ._gdfa .EG_BlockLevelElts [0].EG_ContentBlockContent );_befd ._gdfa .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_befd ._gdfa .EG_BlockLevelElts [0].EG_ContentBlockContent ,_eecf );_fcbb :=_eb .NewCT_P ();var _cfgb *_eb .CT_String ;if _gfdf !=0{_ggf :=len (_befd ._gdfa .EG_BlockLevelElts [0].EG_ContentBlockContent [_gfdf -1].P );_cfgb =_befd ._gdfa .EG_BlockLevelElts [0].EG_ContentBlockContent [_gfdf -1].P [_ggf -1].PPr .PStyle ;}else {_cfgb =_eb .NewCT_String ();_cfgb .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_eecf .P =append (_eecf .P ,_fcbb );_edfb :=Paragraph {_befd ._adbf ,_fcbb };_edfb ._ebg .PPr =_eb .NewCT_PPr ();_edfb ._ebg .PPr .PStyle =_cfgb ;_edfb ._ebg .PPr .RPr =_eb .NewCT_ParaRPr ();return _edfb ;};

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_fgfb Run )IsEndnote ()(bool ,int64 ){if _fgfb ._ccfe .EG_RunInnerContent !=nil {if _fgfb ._ccfe .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_fgfb ._ccfe .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};

// X returns the inner wrapped XML type.
func (_de AnchoredDrawing )X ()*_eb .WdAnchor {return _de ._df };

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_dbfa ParagraphSpacing )SetAfterAuto (b bool ){if b {_dbfa ._ccca .AfterAutospacingAttr =&_eg .ST_OnOff {};_dbfa ._ccca .AfterAutospacingAttr .Bool =_c .Bool (true );}else {_dbfa ._ccca .AfterAutospacingAttr =nil ;};};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// Paragraphs returns the paragraphs defined in an endnote.
func (_efbc Endnote )Paragraphs ()[]Paragraph {_cdfda :=[]Paragraph {};for _ ,_dbba :=range _efbc .content (){for _ ,_ggbc :=range _dbba .P {_cdfda =append (_cdfda ,Paragraph {_efbc ._adbf ,_ggbc });};};return _cdfda ;};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_affe *_eb .CT_AbstractNum };

// Properties returns the table properties.
func (_cdgg Table )Properties ()TableProperties {if _cdgg ._aefb .TblPr ==nil {_cdgg ._aefb .TblPr =_eb .NewCT_TblPr ();};return TableProperties {_cdgg ._aefb .TblPr };};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_gfb *Document )BodySection ()Section {if _gfb ._dddb .Body .SectPr ==nil {_gfb ._dddb .Body .SectPr =_eb .NewCT_SectPr ();};return Section {_gfb ,_gfb ._dddb .Body .SectPr };};

// SetStartIndent controls the start indentation.
func (_eafd ParagraphProperties )SetStartIndent (m _gaf .Distance ){if _eafd ._ffge .Ind ==nil {_eafd ._ffge .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_eafd ._ffge .Ind .StartAttr =nil ;}else {_eafd ._ffge .Ind .StartAttr =&_eb .ST_SignedTwipsMeasure {};_eafd ._ffge .Ind .StartAttr .Int64 =_c .Int64 (int64 (m /_gaf .Twips ));};};

// Bold returns true if paragraph font is bold.
func (_gdeed ParagraphProperties )Bold ()bool {_bebda :=_gdeed ._ffge .RPr ;return _bacc (_bebda .B )||_bacc (_bebda .BCs );};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;};

// Properties returns the row properties.
func (_fefd Row )Properties ()RowProperties {if _fefd ._ccedf .TrPr ==nil {_fefd ._ccedf .TrPr =_eb .NewCT_TrPr ();};return RowProperties {_fefd ._ccedf .TrPr };};func _cgad (_adac _ad .ReaderAt ,_fbb int64 ,_dabc string )(*Document ,error ){const _cfd ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";if !_ab .GetLicenseKey ().IsLicensed ()&&!_dddbb {_adc .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_adc .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_ga .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_dad :=New ();_dad .Numbering ._gabd =nil ;if len (_dabc )> 0{_dad ._ba =_dabc ;}else {_gad ,_ggd :=_ab .GenRefId ("\u0064\u0072");if _ggd !=nil {_c .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ggd );return nil ,_ggd ;};_dad ._ba =_gad ;};if _dfba :=_ab .Track (_dad ._ba ,_cfd );_dfba !=nil {_adc .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_dfba );return nil ,_dfba ;};_gab ,_cgd :=_gf .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");if _cgd !=nil {return nil ,_cgd ;};_dad .TmpPath =_gab ;_feea ,_cgd :=_ge .NewReader (_adac ,_fbb );if _cgd !=nil {return nil ,_adc .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_cgd );};_abd :=[]*_ge .File {};_abd =append (_abd ,_feea .File ...);_caf :=false ;for _ ,_fdca :=range _abd {if _fdca .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_caf =true ;break ;};};if _caf {_dad .CreateCustomProperties ();};_ddfbb :=_dad ._dddb .ConformanceAttr ;_cfdb :=_gd .DecodeMap {};_cfdb .SetOnNewRelationshipFunc (_dad .onNewRelationship );_cfdb .AddTarget (_c .ContentTypesFilename ,_dad .ContentTypes .X (),"",0);_cfdb .AddTarget (_c .BaseRelsFilename ,_dad .Rels .X (),"",0);if _ecaf :=_cfdb .Decode (_abd );_ecaf !=nil {return nil ,_ecaf ;};_dad ._dddb .ConformanceAttr =_ddfbb ;for _ ,_bac :=range _abd {if _bac ==nil {continue ;};if _edf :=_dad .AddExtraFileFromZip (_bac );_edf !=nil {return nil ,_edf ;};};if _caf {_dddd :=false ;for _ ,_caac :=range _dad .Rels .X ().Relationship {if _caac .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_dddd =true ;break ;};};if !_dddd {_dad .AddCustomRelationships ();};};return _dad ,nil ;};

// SetVAlignment sets the vertical alignment for an anchored image.
func (_gc AnchoredDrawing )SetVAlignment (v _eb .WdST_AlignV ){_gc ._df .PositionV .Choice =&_eb .WdCT_PosVChoice {};_gc ._df .PositionV .Choice .Align =v ;};

// X returns the inner wrapped XML type.
func (_afefb Paragraph )X ()*_eb .CT_P {return _afefb ._ebg };func (_dgbfe Paragraph )addBeginFldChar (_cfge string )*_eb .CT_FFData {_becce :=_dgbfe .addFldChar ();_becce .FldCharTypeAttr =_eb .ST_FldCharTypeBegin ;_becce .FfData =_eb .NewCT_FFData ();_fdce :=_eb .NewCT_FFName ();_fdce .ValAttr =&_cfge ;_becce .FfData .Name =[]*_eb .CT_FFName {_fdce };return _becce .FfData ;};

// SetAfter sets the spacing that comes after the paragraph.
func (_fdfdb ParagraphSpacing )SetAfter (after _gaf .Distance ){_fdfdb ._ccca .AfterAttr =&_eg .ST_TwipsMeasure {};_fdfdb ._ccca .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_gaf .Twips ));};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_gbbef Fonts )SetEastAsiaTheme (t _eb .ST_Theme ){_gbbef ._faa .EastAsiaThemeAttr =t };func _ceae (_gbfb []*_eb .CT_P ,_eeed *TableInfo ,_aebe *DrawingInfo )[]TextItem {_fed :=[]TextItem {};for _ ,_cadd :=range _gbfb {_fed =append (_fed ,_gdfaa (_cadd ,nil ,_eeed ,_aebe ,_cadd .EG_PContent )...);};return _fed ;};

// SizeValue returns the value of paragraph font size in points.
func (_bcbc ParagraphProperties )SizeValue ()float64 {if _dfbeg :=_bcbc ._ffge .RPr .Sz ;_dfbeg !=nil {_gadg :=_dfbeg .ValAttr ;if _gadg .ST_UnsignedDecimalNumber !=nil {return float64 (*_gadg .ST_UnsignedDecimalNumber )/2;};};return 0.0;};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_fagd Header )Index ()int {for _gfce ,_dcde :=range _fagd ._ceda ._bb {if _dcde ==_fagd ._dgab {return _gfce ;};};return -1;};

// Paragraphs returns the paragraphs defined in a header.
func (_fffa Header )Paragraphs ()[]Paragraph {_bgad :=[]Paragraph {};for _ ,_dbbc :=range _fffa ._dgab .EG_ContentBlockContent {for _ ,_eebfb :=range _dbbc .P {_bgad =append (_bgad ,Paragraph {_fffa ._ceda ,_eebfb });};};for _ ,_bdda :=range _fffa .Tables (){for _ ,_fgdc :=range _bdda .Rows (){for _ ,_agfed :=range _fgdc .Cells (){_bgad =append (_bgad ,_agfed .Paragraphs ()...);};};};return _bgad ;};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_bbdc *Document ;_dgfd *_eb .WdInline ;};

// TableWidth controls width values in table settings.
type TableWidth struct{_fde *_eb .CT_TblWidth };func _fffe (_dbag *_eb .CT_Tbl ,_dde map[string ]string ){for _ ,_efbf :=range _dbag .EG_ContentRowContent {for _ ,_egc :=range _efbf .Tr {for _ ,_fgbe :=range _egc .EG_ContentCellContent {for _ ,_dfe :=range _fgbe .Tc {for _ ,_gagd :=range _dfe .EG_BlockLevelElts {for _ ,_gcea :=range _gagd .EG_ContentBlockContent {for _ ,_aafg :=range _gcea .P {_fdcfc (_aafg ,_dde );};for _ ,_cac :=range _gcea .Tbl {_fffe (_cac ,_dde );};};};};};};};};

// AddTabStop adds a tab stop to the paragraph.
func (_baca ParagraphStyleProperties )AddTabStop (position _gaf .Distance ,justificaton _eb .ST_TabJc ,leader _eb .ST_TabTlc ){if _baca ._agaaf .Tabs ==nil {_baca ._agaaf .Tabs =_eb .NewCT_Tabs ();};_edfbg :=_eb .NewCT_TabStop ();_edfbg .LeaderAttr =leader ;_edfbg .ValAttr =justificaton ;_edfbg .PosAttr .Int64 =_c .Int64 (int64 (position /_gaf .Twips ));_baca ._agaaf .Tabs .Tab =append (_baca ._agaaf .Tabs .Tab ,_edfbg );};func (_gcfb Paragraph )addSeparateFldChar ()*_eb .CT_FldChar {_eagdb :=_gcfb .addFldChar ();_eagdb .FldCharTypeAttr =_eb .ST_FldCharTypeSeparate ;return _eagdb ;};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_geda Paragraph )SetFirstLineIndent (m _gaf .Distance ){_geda .ensurePPr ();_bgcb :=_geda ._ebg .PPr ;if _bgcb .Ind ==nil {_bgcb .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_bgcb .Ind .FirstLineAttr =nil ;}else {_bgcb .Ind .FirstLineAttr =&_eg .ST_TwipsMeasure {};_bgcb .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_gaf .Twips ));};};

// Italic returns true if run font is italic.
func (_agggg RunProperties )Italic ()bool {_abgc :=_agggg ._beee ;return _bacc (_abgc .I )||_bacc (_abgc .ICs );};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_aedc *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _aedc .insertParagraph (relativeTo ,false );};

// SetLeft sets the left border to a specified type, color and thickness.
func (_ec CellBorders )SetLeft (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_ec ._acae .Left =_eb .NewCT_Border ();_fgag (_ec ._acae .Left ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_ceag NumberingDefinition )X ()*_eb .CT_AbstractNum {return _ceag ._affe };

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_eb .CT_P ;Hyperlink *_eb .CT_Hyperlink ;Run *_eb .CT_R ;TableInfo *TableInfo ;};

// SetPageMargins sets the page margins for a section
func (_ceba Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _gaf .Distance ){_ggbe :=_eb .NewCT_PageMar ();_ggbe .TopAttr .Int64 =_c .Int64 (int64 (top /_gaf .Twips ));_ggbe .BottomAttr .Int64 =_c .Int64 (int64 (bottom /_gaf .Twips ));_ggbe .RightAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (right /_gaf .Twips ));_ggbe .LeftAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (left /_gaf .Twips ));_ggbe .HeaderAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (header /_gaf .Twips ));_ggbe .FooterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (footer /_gaf .Twips ));_ggbe .GutterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (gutter /_gaf .Twips ));_ceba ._faggf .PgMar =_ggbe ;};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_acf AnchoredDrawing )SetOffset (x ,y _gaf .Distance ){_acf .SetXOffset (x );_acf .SetYOffset (y )};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_ega AnchoredDrawing )SetYOffset (y _gaf .Distance ){_ega ._df .PositionV .Choice =&_eb .WdCT_PosVChoice {};_ega ._df .PositionV .Choice .PosOffset =_c .Int32 (int32 (y /_gaf .EMU ));};func (_fgcff Paragraph )addInstrText (_ebefa string )*_eb .CT_Text {_fbbgb :=_fgcff .AddRun ();_ecgc :=_fbbgb .X ();_bgceb :=_eb .NewEG_RunInnerContent ();_dcad :=_eb .NewCT_Text ();_bffb :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_dcad .SpaceAttr =&_bffb ;_dcad .Content ="\u0020"+_ebefa +"\u0020";_bgceb .InstrText =_dcad ;_ecgc .EG_RunInnerContent =append (_ecgc .EG_RunInnerContent ,_bgceb );return _dcad ;};

// Shadow returns true if run shadow is on.
func (_deffa RunProperties )Shadow ()bool {return _bacc (_deffa ._beee .Shadow )};

// SetAll sets all of the borders to a given value.
func (_faac TableBorders )SetAll (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_faac .SetBottom (t ,c ,thickness );_faac .SetLeft (t ,c ,thickness );_faac .SetRight (t ,c ,thickness );_faac .SetTop (t ,c ,thickness );_faac .SetInsideHorizontal (t ,c ,thickness );_faac .SetInsideVertical (t ,c ,thickness );};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_gcab ParagraphSpacing )SetBeforeAuto (b bool ){if b {_gcab ._ccca .BeforeAutospacingAttr =&_eg .ST_OnOff {};_gcab ._ccca .BeforeAutospacingAttr .Bool =_c .Bool (true );}else {_gcab ._ccca .BeforeAutospacingAttr =nil ;};};type mergeFieldInfo struct{_fgaa string ;_dfff string ;_ffea string ;_adgf bool ;_bade bool ;_ageaf bool ;_gdee bool ;_fcea Paragraph ;_gcaaf ,_ccgca ,_fdff int ;_dede *_eb .EG_PContent ;_abeec bool ;};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_gdb AnchoredDrawing )SetOrigin (h _eb .WdST_RelFromH ,v _eb .WdST_RelFromV ){_gdb ._df .PositionH .RelativeFromAttr =h ;_gdb ._df .PositionV .RelativeFromAttr =v ;};

// Properties returns the numbering level paragraph properties.
func (_fgea NumberingLevel )Properties ()ParagraphStyleProperties {if _fgea ._acec .PPr ==nil {_fgea ._acec .PPr =_eb .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_fgea ._acec .PPr };};

// AddRun adds a run to a paragraph.
func (_gbgd Paragraph )AddRun ()Run {_agedg :=_eb .NewEG_PContent ();_gbgd ._ebg .EG_PContent =append (_gbgd ._ebg .EG_PContent ,_agedg );_daae :=_eb .NewEG_ContentRunContent ();_agedg .EG_ContentRunContent =append (_agedg .EG_ContentRunContent ,_daae );_ecee :=_eb .NewCT_R ();_daae .R =_ecee ;return Run {_gbgd ._dfbc ,_ecee };};

// RemoveMailMerge removes any mail merge settings
func (_fadd Settings )RemoveMailMerge (){_fadd ._accf .MailMerge =nil };

// Paragraphs returns the paragraphs defined in a footer.
func (_agad Footer )Paragraphs ()[]Paragraph {_dadg :=[]Paragraph {};for _ ,_adgd :=range _agad ._facg .EG_ContentBlockContent {for _ ,_ecff :=range _adgd .P {_dadg =append (_dadg ,Paragraph {_agad ._cbb ,_ecff });};};for _ ,_dbbdb :=range _agad .Tables (){for _ ,_caeaf :=range _dbbdb .Rows (){for _ ,_fdbe :=range _caeaf .Cells (){_dadg =append (_dadg ,_fdbe .Paragraphs ()...);};};};return _dadg ;};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_acdd ParagraphStyleProperties )SetSpacing (before ,after _gaf .Distance ){if _acdd ._agaaf .Spacing ==nil {_acdd ._agaaf .Spacing =_eb .NewCT_Spacing ();};if before ==_gaf .Zero {_acdd ._agaaf .Spacing .BeforeAttr =nil ;}else {_acdd ._agaaf .Spacing .BeforeAttr =&_eg .ST_TwipsMeasure {};_acdd ._agaaf .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_gaf .Twips ));};if after ==_gaf .Zero {_acdd ._agaaf .Spacing .AfterAttr =nil ;}else {_acdd ._agaaf .Spacing .AfterAttr =&_eg .ST_TwipsMeasure {};_acdd ._agaaf .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_gaf .Twips ));};};

// SetFormat sets the numbering format.
func (_gaca NumberingLevel )SetFormat (f _eb .ST_NumberFormat ){if _gaca ._acec .NumFmt ==nil {_gaca ._acec .NumFmt =_eb .NewCT_NumFmt ();};_gaca ._acec .NumFmt .ValAttr =f ;};

// SetSmallCaps sets the run to small caps.
func (_afae RunProperties )SetSmallCaps (b bool ){if !b {_afae ._beee .SmallCaps =nil ;}else {_afae ._beee .SmallCaps =_eb .NewCT_OnOff ();};};

// Endnotes returns the endnotes defined in the document.
func (_fcg *Document )Endnotes ()[]Endnote {_cccd :=[]Endnote {};for _ ,_gafbe :=range _fcg ._bfc .CT_Endnotes .Endnote {_cccd =append (_cccd ,Endnote {_fcg ,_gafbe });};return _cccd ;};func (_eee *Document )validateTableCells ()error {for _ ,_bbb :=range _eee ._dddb .Body .EG_BlockLevelElts {for _ ,_egee :=range _bbb .EG_ContentBlockContent {for _ ,_ffd :=range _egee .Tbl {for _ ,_dbc :=range _ffd .EG_ContentRowContent {for _ ,_cdeb :=range _dbc .Tr {_adcg :=false ;for _ ,_gce :=range _cdeb .EG_ContentCellContent {_ggdg :=false ;for _ ,_beb :=range _gce .Tc {_adcg =true ;for _ ,_cfg :=range _beb .EG_BlockLevelElts {for _ ,_bea :=range _cfg .EG_ContentBlockContent {if len (_bea .P )> 0{_ggdg =true ;break ;};};};};if !_ggdg {return _ga .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_adcg {return _ga .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");};};};};};};return nil ;};

// SetASCIITheme sets the font ASCII Theme.
func (_gbba Fonts )SetASCIITheme (t _eb .ST_Theme ){_gbba ._faa .AsciiThemeAttr =t };

// SetBold sets the run to bold.
func (_fgga RunProperties )SetBold (b bool ){if !b {_fgga ._beee .B =nil ;_fgga ._beee .BCs =nil ;}else {_fgga ._beee .B =_eb .NewCT_OnOff ();_fgga ._beee .BCs =_eb .NewCT_OnOff ();};};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_bcaff ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_bcaff ._agaaf .KeepNext =nil ;}else {_bcaff ._agaaf .KeepNext =_eb .NewCT_OnOff ();};};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_ecgf Run )AddDrawingInline (img _bd .ImageRef )(InlineDrawing ,error ){_agdc :=_ecgf .newIC ();_agdc .Drawing =_eb .NewCT_Drawing ();_eccc :=_eb .NewWdInline ();_bebe :=InlineDrawing {_ecgf ._gbbgd ,_eccc };_eccc .CNvGraphicFramePr =_add .NewCT_NonVisualGraphicFrameProperties ();_agdc .Drawing .Inline =append (_agdc .Drawing .Inline ,_eccc );_eccc .Graphic =_add .NewGraphic ();_eccc .Graphic .GraphicData =_add .NewCT_GraphicalObjectData ();_eccc .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_eccc .DistTAttr =_c .Uint32 (0);_eccc .DistLAttr =_c .Uint32 (0);_eccc .DistBAttr =_c .Uint32 (0);_eccc .DistRAttr =_c .Uint32 (0);_eccc .Extent .CxAttr =int64 (float64 (img .Size ().X *_gaf .Pixel72 )/_gaf .EMU );_eccc .Extent .CyAttr =int64 (float64 (img .Size ().Y *_gaf .Pixel72 )/_gaf .EMU );_dedf :=0x7FFFFFFF&_cg .Uint32 ();_eccc .DocPr .IdAttr =_dedf ;_abbdg :=_abb .NewPic ();_abbdg .NvPicPr .CNvPr .IdAttr =_dedf ;_bdeg :=img .RelID ();if _bdeg ==""{return _bebe ,_ga .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_eccc .Graphic .GraphicData .Any =append (_eccc .Graphic .GraphicData .Any ,_abbdg );_abbdg .BlipFill =_add .NewCT_BlipFillProperties ();_abbdg .BlipFill .Blip =_add .NewCT_Blip ();_abbdg .BlipFill .Blip .EmbedAttr =&_bdeg ;_abbdg .BlipFill .Stretch =_add .NewCT_StretchInfoProperties ();_abbdg .BlipFill .Stretch .FillRect =_add .NewCT_RelativeRect ();_abbdg .SpPr =_add .NewCT_ShapeProperties ();_abbdg .SpPr .Xfrm =_add .NewCT_Transform2D ();_abbdg .SpPr .Xfrm .Off =_add .NewCT_Point2D ();_abbdg .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);_abbdg .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_abbdg .SpPr .Xfrm .Ext =_add .NewCT_PositiveSize2D ();_abbdg .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_gaf .Point );_abbdg .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_gaf .Point );_abbdg .SpPr .PrstGeom =_add .NewCT_PresetGeometry2D ();_abbdg .SpPr .PrstGeom .PrstAttr =_add .ST_ShapeTypeRect ;return _bebe ,nil ;};

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_begb Paragraph )InsertRunAfter (relativeTo Run )Run {return _begb .insertRun (relativeTo ,false )};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_acefe NumberingLevel )RunProperties ()RunProperties {if _acefe ._acec .RPr ==nil {_acefe ._acec .RPr =_eb .NewCT_RPr ();};return RunProperties {_acefe ._acec .RPr };};

// SetCSTheme sets the font complex script theme.
func (_dac Fonts )SetCSTheme (t _eb .ST_Theme ){_dac ._faa .CsthemeAttr =t };

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_ggcac ParagraphProperties )SetFirstLineIndent (m _gaf .Distance ){if _ggcac ._ffge .Ind ==nil {_ggcac ._ffge .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_ggcac ._ffge .Ind .FirstLineAttr =nil ;}else {_ggcac ._ffge .Ind .FirstLineAttr =&_eg .ST_TwipsMeasure {};_ggcac ._ffge .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_gaf .Twips ));};};

// Strike returns true if run is striked.
func (_efaa RunProperties )Strike ()bool {return _bacc (_efaa ._beee .Strike )};

// SetSemiHidden controls if the style is hidden in the UI.
func (_fbea Style )SetSemiHidden (b bool ){if b {_fbea ._beadf .SemiHidden =_eb .NewCT_OnOff ();}else {_fbea ._beadf .SemiHidden =nil ;};};

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_dabgf FormField )IsChecked ()bool {if _dabgf ._bfbd .CheckBox ==nil {return false ;};if _dabgf ._bfbd .CheckBox .Checked !=nil {return true ;};return false ;};func (_ddbc Paragraph )addFldCharsForField (_cgbd ,_cggbc string )FormField {_ecfb :=_ddbc .addBeginFldChar (_cgbd );_agcc :=FormField {_bfbd :_ecfb };_gcaab :=_ddbc ._dfbc .Bookmarks ();_ggbdf :=int64 (len (_gcaab ));if _cgbd !=""{_ddbc .addStartBookmark (_ggbdf ,_cgbd );};_ddbc .addInstrText (_cggbc );_ddbc .addSeparateFldChar ();if _cggbc =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_cbbg :=_ddbc .AddRun ();_becc :=_eb .NewEG_RunInnerContent ();_cbbg ._ccfe .EG_RunInnerContent =[]*_eb .EG_RunInnerContent {_becc };_agcc ._bcbfb =_becc ;};_ddbc .addEndFldChar ();if _cgbd !=""{_ddbc .addEndBookmark (_ggbdf );};return _agcc ;};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_fbfg ParagraphProperties )SetSpacing (before ,after _gaf .Distance ){if _fbfg ._ffge .Spacing ==nil {_fbfg ._ffge .Spacing =_eb .NewCT_Spacing ();};_fbfg ._ffge .Spacing .BeforeAttr =&_eg .ST_TwipsMeasure {};_fbfg ._ffge .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_gaf .Twips ));_fbfg ._ffge .Spacing .AfterAttr =&_eg .ST_TwipsMeasure {};_fbfg ._ffge .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (after /_gaf .Twips ));};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_aceag RunProperties )SetVerticalAlignment (v _eg .ST_VerticalAlignRun ){if v ==_eg .ST_VerticalAlignRunUnset {_aceag ._beee .VertAlign =nil ;}else {_aceag ._beee .VertAlign =_eb .NewCT_VerticalAlignRun ();_aceag ._beee .VertAlign .ValAttr =v ;};};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_deefe TableBorders )SetInsideHorizontal (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_deefe ._aeca .InsideH =_eb .NewCT_Border ();_fgag (_deefe ._aeca .InsideH ,t ,c ,thickness );};

// SetHANSITheme sets the font H ANSI Theme.
func (_gggee Fonts )SetHANSITheme (t _eb .ST_Theme ){_gggee ._faa .HAnsiThemeAttr =t };

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_efbd RunProperties )ItalicValue ()OnOffValue {return _cggc (_efbd ._beee .I )};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_cdgbcf ParagraphProperties )ComplexSizeMeasure ()string {if _badf :=_cdgbcf ._ffge .RPr .SzCs ;_badf !=nil {_bdca :=_badf .ValAttr ;if _bdca .ST_PositiveUniversalMeasure !=nil {return *_bdca .ST_PositiveUniversalMeasure ;};};return "";};

// X returns the internally wrapped *wml.CT_SectPr.
func (_bbg Section )X ()*_eb .CT_SectPr {return _bbg ._faggf };

// Clear resets the numbering.
func (_agfca Numbering )Clear (){_agfca ._gabd .AbstractNum =nil ;_agfca ._gabd .Num =nil ;_agfca ._gabd .NumIdMacAtCleanup =nil ;_agfca ._gabd .NumPicBullet =nil ;};

// AddText adds tet to a run.
func (_ceca Run )AddText (s string ){_fdcd :=_eb .NewEG_RunInnerContent ();_ceca ._ccfe .EG_RunInnerContent =append (_ceca ._ccfe .EG_RunInnerContent ,_fdcd );_fdcd .T =_eb .NewCT_Text ();if _c .NeedsSpacePreserve (s ){_beda :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_fdcd .T .SpaceAttr =&_beda ;};_fdcd .T .Content =s ;};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_cdfe FormField )SetSize (size uint64 ){size *=2;if _cdfe ._bfbd .CheckBox !=nil {_cdfe ._bfbd .CheckBox .Choice =_eb .NewCT_FFCheckBoxChoice ();_cdfe ._bfbd .CheckBox .Choice .Size =_eb .NewCT_HpsMeasure ();_cdfe ._bfbd .CheckBox .Choice .Size .ValAttr =_eb .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };};};

// X returns the inner wrapped XML type.
func (_ggca Fonts )X ()*_eb .CT_Fonts {return _ggca ._faa };func (_cag *Document )onNewRelationship (_bad *_gd .DecodeMap ,_dea ,_adgg string ,_fcaf []*_ge .File ,_egab *_ef .Relationship ,_dbg _gd .Target )error {_edbea :=_c .DocTypeDocument ;switch _adgg {case _c .OfficeDocumentType ,_c .OfficeDocumentTypeStrict :_cag ._dddb =_eb .NewDocument ();_bad .AddTarget (_dea ,_cag ._dddb ,_adgg ,0);_bad .AddTarget (_gd .RelationsPathFor (_dea ),_cag ._bdfb .X (),_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .CorePropertiesType :_bad .AddTarget (_dea ,_cag .CoreProperties .X (),_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .CustomPropertiesType :_bad .AddTarget (_dea ,_cag .CustomProperties .X (),_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .ExtendedPropertiesType ,_c .ExtendedPropertiesTypeStrict :_bad .AddTarget (_dea ,_cag .AppProperties .X (),_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .ThumbnailType ,_c .ThumbnailTypeStrict :for _gffad ,_ggcf :=range _fcaf {if _ggcf ==nil {continue ;};if _ggcf .Name ==_dea {_gbcd ,_gaeg :=_ggcf .Open ();if _gaeg !=nil {return _adc .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_gaeg );};_cag .Thumbnail ,_ ,_gaeg =_g .Decode (_gbcd );_gbcd .Close ();if _gaeg !=nil {return _adc .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_gaeg );};_fcaf [_gffad ]=nil ;};};case _c .SettingsType ,_c .SettingsTypeStrict :_bad .AddTarget (_dea ,_cag .Settings .X (),_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .NumberingType ,_c .NumberingTypeStrict :_cag .Numbering =NewNumbering ();_bad .AddTarget (_dea ,_cag .Numbering .X (),_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .StylesType ,_c .StylesTypeStrict :_cag .Styles .Clear ();_bad .AddTarget (_dea ,_cag .Styles .X (),_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .HeaderType ,_c .HeaderTypeStrict :_afda :=_eb .NewHdr ();_bad .AddTarget (_dea ,_afda ,_adgg ,uint32 (len (_cag ._bb )));_cag ._bb =append (_cag ._bb ,_afda );_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,len (_cag ._bb ));_abdg :=_bd .NewRelationships ();_bad .AddTarget (_gd .RelationsPathFor (_dea ),_abdg .X (),_adgg ,0);_cag ._adf =append (_cag ._adf ,_abdg );case _c .FooterType ,_c .FooterTypeStrict :_ecf :=_eb .NewFtr ();_bad .AddTarget (_dea ,_ecf ,_adgg ,uint32 (len (_cag ._ddfb )));_cag ._ddfb =append (_cag ._ddfb ,_ecf );_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,len (_cag ._ddfb ));_egac :=_bd .NewRelationships ();_bad .AddTarget (_gd .RelationsPathFor (_dea ),_egac .X (),_adgg ,0);_cag ._bcca =append (_cag ._bcca ,_egac );case _c .ThemeType ,_c .ThemeTypeStrict :_bba :=_add .NewTheme ();_bad .AddTarget (_dea ,_bba ,_adgg ,uint32 (len (_cag ._ede )));_cag ._ede =append (_cag ._ede ,_bba );_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,len (_cag ._ede ));case _c .WebSettingsType ,_c .WebSettingsTypeStrict :_cag ._gaa =_eb .NewWebSettings ();_bad .AddTarget (_dea ,_cag ._gaa ,_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .FontTableType ,_c .FontTableTypeStrict :_cag ._cef =_eb .NewFonts ();_bad .AddTarget (_dea ,_cag ._cef ,_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .EndNotesType ,_c .EndNotesTypeStrict :_cag ._bfc =_eb .NewEndnotes ();_bad .AddTarget (_dea ,_cag ._bfc ,_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .FootNotesType ,_c .FootNotesTypeStrict :_cag ._edeb =_eb .NewFootnotes ();_bad .AddTarget (_dea ,_cag ._edeb ,_adgg ,0);_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,0);case _c .ImageType ,_c .ImageTypeStrict :var _cgcd _bd .ImageRef ;for _ddg ,_dfcg :=range _fcaf {if _dfcg ==nil {continue ;};if _dfcg .Name ==_dea {_fbfb ,_begf :=_gd .ExtractToDiskTmp (_dfcg ,_cag .TmpPath );if _begf !=nil {return _begf ;};_bec ,_begf :=_bd .ImageFromStorage (_fbfb );if _begf !=nil {return _begf ;};_cgcd =_bd .MakeImageRef (_bec ,&_cag .DocBase ,_cag ._bdfb );_fcaf [_ddg ]=nil ;};};_fcb :="\u002e"+_a .ToLower (_cgcd .Format ());_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,len (_cag .Images )+1);if _adfc :=_f .Ext (_egab .TargetAttr );_adfc !=_fcb {_egab .TargetAttr =_egab .TargetAttr [0:len (_egab .TargetAttr )-len (_adfc )]+_fcb ;};_cgcd .SetTarget ("\u0077\u006f\u0072d\u002f"+_egab .TargetAttr );_cag .Images =append (_cag .Images ,_cgcd );case _c .ControlType ,_c .ControlTypeStrict :_cdgf :=_ac .NewOcx ();_bad .AddTarget (_dea ,_cdgf ,_adgg ,uint32 (len (_cag ._bgf )));_cag ._bgf =append (_cag ._bgf ,_cdgf );_egab .TargetAttr =_c .RelativeFilename (_edbea ,_dbg .Typ ,_adgg ,len (_cag ._bgf ));default:_c .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_adgg ,_dea );};return nil ;};

// SetOutlineLevel sets the outline level of this style.
func (_aefa ParagraphStyleProperties )SetOutlineLevel (lvl int ){_aefa ._agaaf .OutlineLvl =_eb .NewCT_DecimalNumber ();_aefa ._agaaf .OutlineLvl .ValAttr =int64 (lvl );};

// X returns the inner wrapped XML type.
func (_fcfcg Row )X ()*_eb .CT_Row {return _fcfcg ._ccedf };

// AddTextInput adds text input form field to the paragraph and returns it.
func (_aaed Paragraph )AddTextInput (name string )FormField {_adcfc :=_aaed .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_adcfc ._bfbd .TextInput =_eb .NewCT_FFTextInput ();return _adcfc ;};

// SetImprint sets the run to imprinted text.
func (_fcadg RunProperties )SetImprint (b bool ){if !b {_fcadg ._beee .Imprint =nil ;}else {_fcadg ._beee .Imprint =_eb .NewCT_OnOff ();};};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_acgd Run )DrawingAnchored ()[]AnchoredDrawing {_cdaf :=[]AnchoredDrawing {};for _ ,_fcga :=range _acgd ._ccfe .EG_RunInnerContent {if _fcga .Drawing ==nil {continue ;};for _ ,_dcded :=range _fcga .Drawing .Anchor {_cdaf =append (_cdaf ,AnchoredDrawing {_acgd ._gbbgd ,_dcded });};};return _cdaf ;};

// SetHeader sets a section header.
func (_cegb Section )SetHeader (h Header ,t _eb .ST_HdrFtr ){_adfbf :=_eb .NewEG_HdrFtrReferences ();_cegb ._faggf .EG_HdrFtrReferences =append (_cegb ._faggf .EG_HdrFtrReferences ,_adfbf );_adfbf .HeaderReference =_eb .NewCT_HdrFtrRef ();_adfbf .HeaderReference .TypeAttr =t ;_afefa :=_cegb ._ggad ._bdfb .FindRIDForN (h .Index (),_c .HeaderType );if _afefa ==""{_e .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");};_adfbf .HeaderReference .IdAttr =_afefa ;};

// Italic returns true if paragraph font is italic.
func (_fgbd ParagraphProperties )Italic ()bool {_dfef :=_fgbd ._ffge .RPr ;return _bacc (_dfef .I )||_bacc (_dfef .ICs );};func _befdb (_bgec *_eb .EG_BlockLevelElts ,_gcdba *TableInfo )[]TextItem {_fffec :=[]TextItem {};for _ ,_geb :=range _bgec .EG_ContentBlockContent {if _beaga :=_geb .Sdt ;_beaga !=nil {if _agbb :=_beaga .SdtContent ;_agbb !=nil {_fffec =append (_fffec ,_ceae (_agbb .P ,_gcdba ,nil )...);};};_fffec =append (_fffec ,_ceae (_geb .P ,_gcdba ,nil )...);for _ ,_caeef :=range _geb .Tbl {for _deda ,_dfac :=range _caeef .EG_ContentRowContent {for _ ,_gebc :=range _dfac .Tr {for _ggbd ,_fegg :=range _gebc .EG_ContentCellContent {for _ ,_gbf :=range _fegg .Tc {_fdfc :=&TableInfo {Table :_caeef ,Row :_gebc ,Cell :_gbf ,RowIndex :_deda ,ColIndex :_ggbd };for _ ,_gefe :=range _gbf .EG_BlockLevelElts {_fffec =append (_fffec ,_befdb (_gefe ,_fdfc )...);};};};};};};};return _fffec ;};

// SetStartIndent controls the start indent of the paragraph.
func (_cggbd ParagraphStyleProperties )SetStartIndent (m _gaf .Distance ){if _cggbd ._agaaf .Ind ==nil {_cggbd ._agaaf .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_cggbd ._agaaf .Ind .StartAttr =nil ;}else {_cggbd ._agaaf .Ind .StartAttr =&_eb .ST_SignedTwipsMeasure {};_cggbd ._agaaf .Ind .StartAttr .Int64 =_c .Int64 (int64 (m /_gaf .Twips ));};};

// Text returns the underlying tet in the run.
func (_babba Run )Text ()string {if len (_babba ._ccfe .EG_RunInnerContent )==0{return "";};_adfe :=_cd .Buffer {};for _ ,_bdgd :=range _babba ._ccfe .EG_RunInnerContent {if _bdgd .T !=nil {_adfe .WriteString (_bdgd .T .Content );};if _bdgd .Tab !=nil {_adfe .WriteByte ('\t');};};return _adfe .String ();};

// RightToLeft returns true if run text goes from right to left.
func (_adbg RunProperties )RightToLeft ()bool {return _bacc (_adbg ._beee .Rtl )};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_agd Footer )AddImage (i _bd .Image )(_bd .ImageRef ,error ){var _bed _bd .Relationships ;for _bede ,_abef :=range _agd ._cbb ._ddfb {if _abef ==_agd ._facg {_bed =_agd ._cbb ._bcca [_bede ];};};_ecfg :=_bd .MakeImageRef (i ,&_agd ._cbb .DocBase ,_bed );if i .Data ==nil &&i .Path ==""{return _ecfg ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _ecfg ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _ecfg ,_ga .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_agd ._cbb .Images =append (_agd ._cbb .Images ,_ecfg );_cfgc :=_adc .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_agd ._cbb .Images ),i .Format );_ggfd :=_bed .AddRelationship (_cfgc ,_c .ImageType );_ecfg .SetRelID (_ggfd .X ().IdAttr );return _ecfg ,nil ;};

// GetFooter gets a section Footer for given type
func (_fggb Section )GetFooter (t _eb .ST_HdrFtr )(Footer ,bool ){for _ ,_ggae :=range _fggb ._faggf .EG_HdrFtrReferences {if _ggae .FooterReference .TypeAttr ==t {for _ ,_ebgf :=range _fggb ._ggad .Footers (){_gdd :=_fggb ._ggad ._bdfb .FindRIDForN (_ebgf .Index (),_c .FooterType );if _gdd ==_ggae .FooterReference .IdAttr {return _ebgf ,true ;};};};};return Footer {},false ;};

// IsItalic returns true if the run has been set to italics.
func (_cbbe RunProperties )IsItalic ()bool {return _cbbe .ItalicValue ()==OnOffValueOn };

// Borders allows manipulation of the table borders.
func (_cade TableProperties )Borders ()TableBorders {if _cade ._bbbf .TblBorders ==nil {_cade ._bbbf .TblBorders =_eb .NewCT_TblBorders ();};return TableBorders {_cade ._bbbf .TblBorders };};

// Tables returns the tables defined in the footer.
func (_ggfed Footer )Tables ()[]Table {_ggda :=[]Table {};if _ggfed ._facg ==nil {return nil ;};for _ ,_eaea :=range _ggfed ._facg .EG_ContentBlockContent {for _ ,_ecdc :=range _ggfed ._cbb .tables (_eaea ){_ggda =append (_ggda ,_ecdc );};};return _ggda ;};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_dge Bookmark )SetName (name string ){_dge ._cge .NameAttr =name };

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_fgdgc Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_fgdgc ._accf .UpdateFields =nil ;}else {_fgdgc ._accf .UpdateFields =_eb .NewCT_OnOff ();};};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_badc Paragraph )AddEndnote (text string )Endnote {var _bfgdf int64 ;if _badc ._dfbc .HasEndnotes (){for _ ,_gfcd :=range _badc ._dfbc .Endnotes (){if _gfcd .id ()> _bfgdf {_bfgdf =_gfcd .id ();};};_bfgdf ++;}else {_bfgdf =0;_badc ._dfbc ._bfc =&_eb .Endnotes {};};_agbd :=_eb .NewCT_FtnEdn ();_cbad :=_eb .NewCT_FtnEdnRef ();_cbad .IdAttr =_bfgdf ;_badc ._dfbc ._bfc .CT_Endnotes .Endnote =append (_badc ._dfbc ._bfc .CT_Endnotes .Endnote ,_agbd );_fegf :=_badc .AddRun ();_abfa :=_fegf .Properties ();_abfa .SetStyle ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0041\u006e\u0063\u0068\u006f\u0072");_fegf ._ccfe .EG_RunInnerContent =[]*_eb .EG_RunInnerContent {_eb .NewEG_RunInnerContent ()};_fegf ._ccfe .EG_RunInnerContent [0].EndnoteReference =_cbad ;_gabe :=Endnote {_badc ._dfbc ,_agbd };_gabe ._gdfa .IdAttr =_bfgdf ;_gabe ._gdfa .EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_cegc :=_gabe .AddParagraph ();_cegc .Properties ().SetStyle ("\u0045n\u0064\u006e\u006f\u0074\u0065");_cegc ._ebg .PPr .RPr =_eb .NewCT_ParaRPr ();_gceb :=_cegc .AddRun ();_gceb .AddTab ();_gceb .AddText (text );return _gabe ;};

// SetNextStyle sets the style that the next paragraph will use.
func (_cggcb Style )SetNextStyle (name string ){if name ==""{_cggcb ._beadf .Next =nil ;}else {_cggcb ._beadf .Next =_eb .NewCT_String ();_cggcb ._beadf .Next .ValAttr =name ;};};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_ffgab Paragraph )SetLineSpacing (d _gaf .Distance ,rule _eb .ST_LineSpacingRule ){_ffgab .ensurePPr ();if _ffgab ._ebg .PPr .Spacing ==nil {_ffgab ._ebg .PPr .Spacing =_eb .NewCT_Spacing ();};_dffa :=_ffgab ._ebg .PPr .Spacing ;if rule ==_eb .ST_LineSpacingRuleUnset {_dffa .LineRuleAttr =_eb .ST_LineSpacingRuleUnset ;_dffa .LineAttr =nil ;}else {_dffa .LineRuleAttr =rule ;_dffa .LineAttr =&_eb .ST_SignedTwipsMeasure {};_dffa .LineAttr .Int64 =_c .Int64 (int64 (d /_gaf .Twips ));};};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_gabef TableProperties )SetCellSpacingPercent (pct float64 ){_gabef ._bbbf .TblCellSpacing =_eb .NewCT_TblWidth ();_gabef ._bbbf .TblCellSpacing .TypeAttr =_eb .ST_TblWidthPct ;_gabef ._bbbf .TblCellSpacing .WAttr =&_eb .ST_MeasurementOrPercent {};_gabef ._bbbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_gabef ._bbbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// Paragraphs returns the paragraphs defined in a footnote.
func (_ggcab Footnote )Paragraphs ()[]Paragraph {_dfdee :=[]Paragraph {};for _ ,_ccff :=range _ggcab .content (){for _ ,_acfb :=range _ccff .P {_dfdee =append (_dfdee ,Paragraph {_ggcab ._bebdf ,_acfb });};};return _dfdee ;};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_gbbed Style )TableConditionalFormatting (typ _eb .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_cdgbe :=range _gbbed ._beadf .TblStylePr {if _cdgbe .TypeAttr ==typ {return TableConditionalFormatting {_cdgbe };};};_ccfac :=_eb .NewCT_TblStylePr ();_ccfac .TypeAttr =typ ;_gbbed ._beadf .TblStylePr =append (_gbbed ._beadf .TblStylePr ,_ccfac );return TableConditionalFormatting {_ccfac };};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_gffa *_eb .CT_TcMar };

// SetVerticalMerge controls the vertical merging of cells.
func (_egdc CellProperties )SetVerticalMerge (mergeVal _eb .ST_Merge ){if mergeVal ==_eb .ST_MergeUnset {_egdc ._beg .VMerge =nil ;}else {_egdc ._beg .VMerge =_eb .NewCT_VMerge ();_egdc ._beg .VMerge .ValAttr =mergeVal ;};};func (_affd *Document )insertParagraph (_cefd Paragraph ,_aefgc bool )Paragraph {if _affd ._dddb .Body ==nil {return _affd .AddParagraph ();};_edgc :=_cefd .X ();for _ ,_ceb :=range _affd ._dddb .Body .EG_BlockLevelElts {for _ ,_bfdc :=range _ceb .EG_ContentBlockContent {for _egba ,_gde :=range _bfdc .P {if _gde ==_edgc {_gfge :=_eb .NewCT_P ();_bfdc .P =append (_bfdc .P ,nil );if _aefgc {copy (_bfdc .P [_egba +1:],_bfdc .P [_egba :]);_bfdc .P [_egba ]=_gfge ;}else {copy (_bfdc .P [_egba +2:],_bfdc .P [_egba +1:]);_bfdc .P [_egba +1]=_gfge ;};return Paragraph {_affd ,_gfge };};};for _ ,_geed :=range _bfdc .Tbl {for _ ,_ffga :=range _geed .EG_ContentRowContent {for _ ,_gega :=range _ffga .Tr {for _ ,_gbed :=range _gega .EG_ContentCellContent {for _ ,_cecb :=range _gbed .Tc {for _ ,_eadb :=range _cecb .EG_BlockLevelElts {for _ ,_dcga :=range _eadb .EG_ContentBlockContent {for _ece ,_dgfa :=range _dcga .P {if _dgfa ==_edgc {_acea :=_eb .NewCT_P ();_dcga .P =append (_dcga .P ,nil );if _aefgc {copy (_dcga .P [_ece +1:],_dcga .P [_ece :]);_dcga .P [_ece ]=_acea ;}else {copy (_dcga .P [_ece +2:],_dcga .P [_ece +1:]);_dcga .P [_ece +1]=_acea ;};return Paragraph {_affd ,_acea };};};};};};};};};};if _bfdc .Sdt !=nil &&_bfdc .Sdt .SdtContent !=nil &&_bfdc .Sdt .SdtContent .P !=nil {for _adeg ,_fgcd :=range _bfdc .Sdt .SdtContent .P {if _fgcd ==_edgc {_cgaf :=_eb .NewCT_P ();_bfdc .Sdt .SdtContent .P =append (_bfdc .Sdt .SdtContent .P ,nil );if _aefgc {copy (_bfdc .Sdt .SdtContent .P [_adeg +1:],_bfdc .Sdt .SdtContent .P [_adeg :]);_bfdc .Sdt .SdtContent .P [_adeg ]=_cgaf ;}else {copy (_bfdc .Sdt .SdtContent .P [_adeg +2:],_bfdc .Sdt .SdtContent .P [_adeg +1:]);_bfdc .Sdt .SdtContent .P [_adeg +1]=_cgaf ;};return Paragraph {_affd ,_cgaf };};};};};};return _affd .AddParagraph ();};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_aedb HyperLink )SetTargetBookmark (bm Bookmark ){_aedb ._aab .AnchorAttr =_c .String (bm .Name ());_aedb ._aab .IdAttr =nil ;};

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_gdfd Paragraph )AddDropdownList (name string )FormField {_geae :=_gdfd .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_geae ._bfbd .DdList =_eb .NewCT_FFDDList ();return _geae ;};

// X returns the inner wrapped XML type.
func (_gccbe TableLook )X ()*_eb .CT_TblLook {return _gccbe ._gfaf };

// SetAll sets all of the borders to a given value.
func (_feg CellBorders )SetAll (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_feg .SetBottom (t ,c ,thickness );_feg .SetLeft (t ,c ,thickness );_feg .SetRight (t ,c ,thickness );_feg .SetTop (t ,c ,thickness );_feg .SetInsideHorizontal (t ,c ,thickness );_feg .SetInsideVertical (t ,c ,thickness );};

// Name returns the name of the style if set.
func (_ffae Style )Name ()string {if _ffae ._beadf .Name ==nil {return "";};return _ffae ._beadf .Name .ValAttr ;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_becf ParagraphProperties )SizeMeasure ()string {if _efge :=_becf ._ffge .RPr .Sz ;_efge !=nil {_aaeb :=_efge .ValAttr ;if _aaeb .ST_PositiveUniversalMeasure !=nil {return *_aaeb .ST_PositiveUniversalMeasure ;};};return "";};

// X returns the inner wrapped XML type.
func (_daec ParagraphStyleProperties )X ()*_eb .CT_PPrGeneral {return _daec ._agaaf };

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
func (_gcge Paragraph )RemoveFootnote (id int64 ){_bdab :=_gcge ._dfbc ._edeb ;var _dfeb int ;for _gdgb ,_fgbb :=range _bdab .CT_Footnotes .Footnote {if _fgbb .IdAttr ==id {_dfeb =_gdgb ;};};_dfeb =0;_bdab .CT_Footnotes .Footnote [_dfeb ]=nil ;_bdab .CT_Footnotes .Footnote [_dfeb ]=_bdab .CT_Footnotes .Footnote [len (_bdab .CT_Footnotes .Footnote )-1];_bdab .CT_Footnotes .Footnote =_bdab .CT_Footnotes .Footnote [:len (_bdab .CT_Footnotes .Footnote )-1];var _fbfde Run ;for _ ,_bace :=range _gcge .Runs (){if _gbdce ,_edcb :=_bace .IsFootnote ();_gbdce {if _edcb ==id {_fbfde =_bace ;};};};_gcge .RemoveRun (_fbfde );};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_eagd Header )AddImage (i _bd .Image )(_bd .ImageRef ,error ){var _bafa _bd .Relationships ;for _ccaa ,_bgda :=range _eagd ._ceda ._bb {if _bgda ==_eagd ._dgab {_bafa =_eagd ._ceda ._adf [_ccaa ];};};_ebcba :=_bd .MakeImageRef (i ,&_eagd ._ceda .DocBase ,_bafa );if i .Data ==nil &&i .Path ==""{return _ebcba ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _ebcba ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _ebcba ,_ga .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_eagd ._ceda .Images =append (_eagd ._ceda .Images ,_ebcba );_dfea :=_adc .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_eagd ._ceda .Images ),i .Format );_fgcf :=_bafa .AddRelationship (_dfea ,_c .ImageType );_ebcba .SetRelID (_fgcf .X ().IdAttr );return _ebcba ,nil ;};

// read reads a document from an io.Reader.
func Read (r _ad .ReaderAt ,size int64 )(*Document ,error ){return _cgad (r ,size ,"")};

// IsBold returns true if the run has been set to bold.
func (_bbacd RunProperties )IsBold ()bool {return _bbacd .BoldValue ()==OnOffValueOn };

// Clear clears the styes.
func (_dfge Styles )Clear (){_dfge ._efdd .DocDefaults =nil ;_dfge ._efdd .LatentStyles =nil ;_dfge ._efdd .Style =nil ;};

// Underline returns the type of run underline.
func (_fbgg RunProperties )Underline ()_eb .ST_Underline {if _cfbb :=_fbgg ._beee .U ;_cfbb !=nil {return _cfbb .ValAttr ;};return 0;};

// Table is a table within a document.
type Table struct{_gdbc *Document ;_aefb *_eb .CT_Tbl ;};

// Footers returns the footers defined in the document.
func (_feac *Document )Footers ()[]Footer {_dfa :=[]Footer {};for _ ,_bgfa :=range _feac ._ddfb {_dfa =append (_dfa ,Footer {_feac ,_bgfa });};return _dfa ;};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_fcae Paragraph )InsertRunBefore (relativeTo Run )Run {return _fcae .insertRun (relativeTo ,true )};

// Definitions returns the defined numbering definitions.
func (_agaa Numbering )Definitions ()[]NumberingDefinition {_acfg :=[]NumberingDefinition {};for _ ,_bcegab :=range _agaa ._gabd .AbstractNum {_acfg =append (_acfg ,NumberingDefinition {_bcegab });};return _acfg ;};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_bfbd *_eb .CT_FFData ;_bcbfb *_eb .EG_RunInnerContent ;};

// SetBefore sets the spacing that comes before the paragraph.
func (_gebbb ParagraphSpacing )SetBefore (before _gaf .Distance ){_gebbb ._ccca .BeforeAttr =&_eg .ST_TwipsMeasure {};_gebbb ._ccca .BeforeAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (before /_gaf .Twips ));};

// Footnotes returns the footnotes defined in the document.
func (_cdef *Document )Footnotes ()[]Footnote {_dgf :=[]Footnote {};for _ ,_bbff :=range _cdef ._edeb .CT_Footnotes .Footnote {_dgf =append (_dgf ,Footnote {_cdef ,_bbff });};return _dgf ;};

// InsertRowAfter inserts a row after another row
func (_cbace Table )InsertRowAfter (r Row )Row {for _gbae ,_aded :=range _cbace ._aefb .EG_ContentRowContent {if len (_aded .Tr )> 0&&r .X ()==_aded .Tr [0]{_eddf :=_eb .NewEG_ContentRowContent ();if len (_cbace ._aefb .EG_ContentRowContent )< _gbae +2{return _cbace .AddRow ();};_cbace ._aefb .EG_ContentRowContent =append (_cbace ._aefb .EG_ContentRowContent ,nil );copy (_cbace ._aefb .EG_ContentRowContent [_gbae +2:],_cbace ._aefb .EG_ContentRowContent [_gbae +1:]);_cbace ._aefb .EG_ContentRowContent [_gbae +1]=_eddf ;_geece :=_eb .NewCT_Row ();_eddf .Tr =append (_eddf .Tr ,_geece );return Row {_cbace ._gdbc ,_geece };};};return _cbace .AddRow ();};

// Fonts returns the style's Fonts.
func (_abdffc RunProperties )Fonts ()Fonts {if _abdffc ._beee .RFonts ==nil {_abdffc ._beee .RFonts =_eb .NewCT_Fonts ();};return Fonts {_abdffc ._beee .RFonts };};

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_eb .CT_Drawing ;Width int64 ;Height int64 ;};

// SetStrikeThrough sets the run to strike-through.
func (_adcd RunProperties )SetStrikeThrough (b bool ){if !b {_adcd ._beee .Strike =nil ;}else {_adcd ._beee .Strike =_eb .NewCT_OnOff ();};};

// AddTable adds a table to the table cell.
func (_aa Cell )AddTable ()Table {_ea :=_eb .NewEG_BlockLevelElts ();_aa ._dd .EG_BlockLevelElts =append (_aa ._dd .EG_BlockLevelElts ,_ea );_eea :=_eb .NewEG_ContentBlockContent ();_ea .EG_ContentBlockContent =append (_ea .EG_ContentBlockContent ,_eea );_afe :=_eb .NewCT_Tbl ();_eea .Tbl =append (_eea .Tbl ,_afe );return Table {_aa ._af ,_afe };};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_ggdcd TableBorders )SetBottom (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_ggdcd ._aeca .Bottom =_eb .NewCT_Border ();_fgag (_ggdcd ._aeca .Bottom ,t ,c ,thickness );};

// VerticalAlign returns the value of paragraph vertical align.
func (_cbdf ParagraphProperties )VerticalAlignment ()_eg .ST_VerticalAlignRun {if _dgbc :=_cbdf ._ffge .RPr .VertAlign ;_dgbc !=nil {return _dgbc .ValAttr ;};return 0;};func _bacc (_ebf *_eb .CT_OnOff )bool {return _ebf !=nil };

// SetShading controls the cell shading.
func (_dgeb CellProperties )SetShading (shd _eb .ST_Shd ,foreground ,fill _gb .Color ){if shd ==_eb .ST_ShdUnset {_dgeb ._beg .Shd =nil ;}else {_dgeb ._beg .Shd =_eb .NewCT_Shd ();_dgeb ._beg .Shd .ValAttr =shd ;_dgeb ._beg .Shd .ColorAttr =&_eb .ST_HexColor {};if foreground .IsAuto (){_dgeb ._beg .Shd .ColorAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;}else {_dgeb ._beg .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_dgeb ._beg .Shd .FillAttr =&_eb .ST_HexColor {};if fill .IsAuto (){_dgeb ._beg .Shd .FillAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;}else {_dgeb ._beg .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_eedg *Document ;_ffge *_eb .CT_PPr ;};func (_dabf *Document )InsertTableBefore (relativeTo Paragraph )Table {return _dabf .insertTable (relativeTo ,true );};func (_bffe *Document )insertTable (_ddfed Paragraph ,_cbd bool )Table {_fbfe :=_bffe ._dddb .Body ;if _fbfe ==nil {return _bffe .AddTable ();};_abf :=_ddfed .X ();for _cgb ,_acb :=range _fbfe .EG_BlockLevelElts {for _ ,_cdec :=range _acb .EG_ContentBlockContent {for _gdbd ,_egb :=range _cdec .P {if _egb ==_abf {_cce :=_eb .NewCT_Tbl ();_ccc :=_eb .NewEG_BlockLevelElts ();_gge :=_eb .NewEG_ContentBlockContent ();_ccc .EG_ContentBlockContent =append (_ccc .EG_ContentBlockContent ,_gge );_gge .Tbl =append (_gge .Tbl ,_cce );_fbfe .EG_BlockLevelElts =append (_fbfe .EG_BlockLevelElts ,nil );if _cbd {copy (_fbfe .EG_BlockLevelElts [_cgb +1:],_fbfe .EG_BlockLevelElts [_cgb :]);_fbfe .EG_BlockLevelElts [_cgb ]=_ccc ;if _gdbd !=0{_fdf :=_eb .NewEG_BlockLevelElts ();_aggg :=_eb .NewEG_ContentBlockContent ();_fdf .EG_ContentBlockContent =append (_fdf .EG_ContentBlockContent ,_aggg );_aggg .P =_cdec .P [:_gdbd ];_fbfe .EG_BlockLevelElts =append (_fbfe .EG_BlockLevelElts ,nil );copy (_fbfe .EG_BlockLevelElts [_cgb +1:],_fbfe .EG_BlockLevelElts [_cgb :]);_fbfe .EG_BlockLevelElts [_cgb ]=_fdf ;};_cdec .P =_cdec .P [_gdbd :];}else {copy (_fbfe .EG_BlockLevelElts [_cgb +2:],_fbfe .EG_BlockLevelElts [_cgb +1:]);_fbfe .EG_BlockLevelElts [_cgb +1]=_ccc ;if _gdbd !=len (_cdec .P )-1{_afeg :=_eb .NewEG_BlockLevelElts ();_efee :=_eb .NewEG_ContentBlockContent ();_afeg .EG_ContentBlockContent =append (_afeg .EG_ContentBlockContent ,_efee );_efee .P =_cdec .P [_gdbd +1:];_fbfe .EG_BlockLevelElts =append (_fbfe .EG_BlockLevelElts ,nil );copy (_fbfe .EG_BlockLevelElts [_cgb +3:],_fbfe .EG_BlockLevelElts [_cgb +2:]);_fbfe .EG_BlockLevelElts [_cgb +2]=_afeg ;};_cdec .P =_cdec .P [:_gdbd +1];};return Table {_bffe ,_cce };};};for _ ,_bgea :=range _cdec .Tbl {_gcc :=_gfba (_bgea ,_abf ,_cbd );if _gcc !=nil {return Table {_bffe ,_gcc };};};};};return _bffe .AddTable ();};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_caace RunProperties )CharacterSpacingMeasure ()string {if _bfcc :=_caace ._beee .Spacing ;_bfcc !=nil {_bbbb :=_bfcc .ValAttr ;if _bbbb .ST_UniversalMeasure !=nil {return *_bbbb .ST_UniversalMeasure ;};};return "";};

// SetTopPct sets the cell top margin
func (_cae CellMargins )SetTopPct (pct float64 ){_cae ._gffa .Top =_eb .NewCT_TblWidth ();_ceg (_cae ._gffa .Top ,pct );};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_fbae ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_fbae ._ffge .PageBreakBefore =nil ;}else {_fbae ._ffge .PageBreakBefore =_eb .NewCT_OnOff ();};};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_adb *Document )GetImageByRelID (relID string )(_bd .ImageRef ,bool ){for _ ,_afdg :=range _adb .Images {if _afdg .RelID ()==relID {return _afdg ,true ;};};return _bd .ImageRef {},false ;};

// SetStyle sets the style of a paragraph.
func (_bbcbd ParagraphProperties )SetStyle (s string ){if s ==""{_bbcbd ._ffge .PStyle =nil ;}else {_bbcbd ._ffge .PStyle =_eb .NewCT_String ();_bbcbd ._ffge .PStyle .ValAttr =s ;};};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dgaaa ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_dgaaa ._agaaf .KeepLines =nil ;}else {_dgaaa ._agaaf .KeepLines =_eb .NewCT_OnOff ();};};

// AddParagraph adds a new paragraph to the document body.
func (_bgg *Document )AddParagraph ()Paragraph {_gbd :=_eb .NewEG_BlockLevelElts ();_bgg ._dddb .Body .EG_BlockLevelElts =append (_bgg ._dddb .Body .EG_BlockLevelElts ,_gbd );_cga :=_eb .NewEG_ContentBlockContent ();_gbd .EG_ContentBlockContent =append (_gbd .EG_ContentBlockContent ,_cga );_ccdda :=_eb .NewCT_P ();_cga .P =append (_cga .P ,_ccdda );return Paragraph {_bgg ,_ccdda };};

// SetOutline sets the run to outlined text.
func (_egdde RunProperties )SetOutline (b bool ){if !b {_egdde ._beee .Outline =nil ;}else {_egdde ._beee .Outline =_eb .NewCT_OnOff ();};};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_af *Document ;_dd *_eb .CT_Tc ;};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_eab CellProperties )SetVerticalAlignment (align _eb .ST_VerticalJc ){if align ==_eb .ST_VerticalJcUnset {_eab ._beg .VAlign =nil ;}else {_eab ._beg .VAlign =_eb .NewCT_VerticalJc ();_eab ._beg .VAlign .ValAttr =align ;};};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_gfbc FormField )SetDefaultValue (v string ){if _gfbc ._bfbd .DdList !=nil {for _ccab ,_effb :=range _gfbc .PossibleValues (){if _effb ==v {_gfbc ._bfbd .DdList .Default =_eb .NewCT_DecimalNumber ();_gfbc ._bfbd .DdList .Default .ValAttr =int64 (_ccab );break ;};};};};

// X returns the inner wrapped type
func (_abag CellBorders )X ()*_eb .CT_TcBorders {return _abag ._acae };

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_baa *Document )AddHeader ()Header {_fee :=_eb .NewHdr ();_baa ._bb =append (_baa ._bb ,_fee );_ccd :=_adc .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_baa ._bb ));_baa ._bdfb .AddRelationship (_ccd ,_c .HeaderType );_baa .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ccd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");_baa ._adf =append (_baa ._adf ,_bd .NewRelationships ());return Header {_baa ,_fee };};

// SetLeftPct sets the cell left margin
func (_ead CellMargins )SetLeftPct (pct float64 ){_ead ._gffa .Left =_eb .NewCT_TblWidth ();_ceg (_ead ._gffa .Left ,pct );};

// Settings controls the document settings.
type Settings struct{_accf *_eb .Settings };func _ggea (_fgdg *_eb .CT_P ,_bdfa map[string ]string ){for _ ,_bgce :=range _fgdg .EG_PContent {if _bgce .Hyperlink !=nil &&_bgce .Hyperlink .IdAttr !=nil {if _gafa ,_eeg :=_bdfa [*_bgce .Hyperlink .IdAttr ];_eeg {*_bgce .Hyperlink .IdAttr =_gafa ;};};};};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_aea *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _aea .insertParagraph (relativeTo ,true );};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_gbcb Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_gbcb .ensurePPr ();if _gbcb ._ebg .PPr .NumPr ==nil {_gbcb ._ebg .PPr .NumPr =_eb .NewCT_NumPr ();};_ebff :=_eb .NewCT_DecimalNumber ();_ebff .ValAttr =int64 (abstractNumberID );_gbcb ._ebg .PPr .NumPr .NumId =_ebff ;};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
func (_cdba Paragraph )RemoveEndnote (id int64 ){_begc :=_cdba ._dfbc ._bfc ;var _gbcdd int ;for _bgaed ,_gebf :=range _begc .CT_Endnotes .Endnote {if _gebf .IdAttr ==id {_gbcdd =_bgaed ;};};_gbcdd =0;_begc .CT_Endnotes .Endnote [_gbcdd ]=nil ;_begc .CT_Endnotes .Endnote [_gbcdd ]=_begc .CT_Endnotes .Endnote [len (_begc .CT_Endnotes .Endnote )-1];_begc .CT_Endnotes .Endnote =_begc .CT_Endnotes .Endnote [:len (_begc .CT_Endnotes .Endnote )-1];var _bfdb Run ;for _ ,_bfgdg :=range _cdba .Runs (){if _afaa ,_ged :=_bfgdg .IsEndnote ();_afaa {if _ged ==id {_bfdb =_bfgdg ;};};};_cdba .RemoveRun (_bfdb );};

// SetAlignment controls the paragraph alignment
func (_eefbb ParagraphStyleProperties )SetAlignment (align _eb .ST_Jc ){if align ==_eb .ST_JcUnset {_eefbb ._agaaf .Jc =nil ;}else {_eefbb ._agaaf .Jc =_eb .NewCT_Jc ();_eefbb ._agaaf .Jc .ValAttr =align ;};};

// RunProperties returns the run style properties.
func (_efab Style )RunProperties ()RunProperties {if _efab ._beadf .RPr ==nil {_efab ._beadf .RPr =_eb .NewCT_RPr ();};return RunProperties {_efab ._beadf .RPr };};

// X returns the inner wml.CT_TblBorders
func (_ccaaa TableBorders )X ()*_eb .CT_TblBorders {return _ccaaa ._aeca };

// Clear clears all content within a header
func (_aaef Header )Clear (){_aaef ._dgab .EG_ContentBlockContent =nil };

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_caee *Document )AddFooter ()Footer {_gfc :=_eb .NewFtr ();_caee ._ddfb =append (_caee ._ddfb ,_gfc );_gcb :=_adc .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_caee ._ddfb ));_caee ._bdfb .AddRelationship (_gcb ,_c .FooterType );_caee .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_gcb ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");_caee ._bcca =append (_caee ._bcca ,_bd .NewRelationships ());return Footer {_caee ,_gfc };};

// Shadow returns true if paragraph shadow is on.
func (_gbde ParagraphProperties )Shadow ()bool {return _bacc (_gbde ._ffge .RPr .Shadow )};

// SetSize sets the font size for a run.
func (_caga RunProperties )SetSize (size _gaf .Distance ){_caga ._beee .Sz =_eb .NewCT_HpsMeasure ();_caga ._beee .Sz .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_gaf .HalfPoint ));_caga ._beee .SzCs =_eb .NewCT_HpsMeasure ();_caga ._beee .SzCs .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_gaf .HalfPoint ));};

// SetLeft sets the left border to a specified type, color and thickness.
func (_fgcb TableBorders )SetLeft (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_fgcb ._aeca .Left =_eb .NewCT_Border ();_fgag (_fgcb ._aeca .Left ,t ,c ,thickness );};func (_ecfa Footnote )id ()int64 {return _ecfa ._ccfg .IdAttr };func (_gacd Paragraph )ensurePPr (){if _gacd ._ebg .PPr ==nil {_gacd ._ebg .PPr =_eb .NewCT_PPr ();};};

// ExtractText returns text from the document as a DocText object.
func (_gadba *Document )ExtractText ()*DocText {_fgbc :=[]TextItem {};for _ ,_aeff :=range _gadba ._dddb .Body .EG_BlockLevelElts {_fgbc =append (_fgbc ,_befdb (_aeff ,nil )...);};return &DocText {Items :_fgbc };};const _edfbe ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";func (_eaeac Styles )initializeDocDefaults (){_eaeac ._efdd .DocDefaults =_eb .NewCT_DocDefaults ();_eaeac ._efdd .DocDefaults .RPrDefault =_eb .NewCT_RPrDefault ();_eaeac ._efdd .DocDefaults .RPrDefault .RPr =_eb .NewCT_RPr ();_daaea :=RunProperties {_eaeac ._efdd .DocDefaults .RPrDefault .RPr };_daaea .SetSize (12*_gaf .Point );_daaea .Fonts ().SetASCIITheme (_eb .ST_ThemeMajorAscii );_daaea .Fonts ().SetEastAsiaTheme (_eb .ST_ThemeMajorEastAsia );_daaea .Fonts ().SetHANSITheme (_eb .ST_ThemeMajorHAnsi );_daaea .Fonts ().SetCSTheme (_eb .ST_ThemeMajorBidi );_daaea .X ().Lang =_eb .NewCT_Language ();_daaea .X ().Lang .ValAttr =_c .String ("\u0065\u006e\u002dU\u0053");_daaea .X ().Lang .EastAsiaAttr =_c .String ("\u0065\u006e\u002dU\u0053");_daaea .X ().Lang .BidiAttr =_c .String ("\u0061\u0072\u002dS\u0041");_eaeac ._efdd .DocDefaults .PPrDefault =_eb .NewCT_PPrDefault ();};func (_afgc Paragraph )addEndFldChar ()*_eb .CT_FldChar {_afdag :=_afgc .addFldChar ();_afdag .FldCharTypeAttr =_eb .ST_FldCharTypeEnd ;return _afdag ;};

// Borders allows manipulation of the table borders.
func (_fgfea TableStyleProperties )Borders ()TableBorders {if _fgfea ._fegfa .TblBorders ==nil {_fgfea ._fegfa .TblBorders =_eb .NewCT_TblBorders ();};return TableBorders {_fgfea ._fegfa .TblBorders };};

// SetAlignment sets the paragraph alignment
func (_fbbc NumberingLevel )SetAlignment (j _eb .ST_Jc ){if j ==_eb .ST_JcUnset {_fbbc ._acec .LvlJc =nil ;}else {_fbbc ._acec .LvlJc =_eb .NewCT_Jc ();_fbbc ._acec .LvlJc .ValAttr =j ;};};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_egdcf RunProperties )ComplexSizeValue ()float64 {if _ageea :=_egdcf ._beee .SzCs ;_ageea !=nil {_cbff :=_ageea .ValAttr ;if _cbff .ST_UnsignedDecimalNumber !=nil {return float64 (*_cbff .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// Name returns the name of the field.
func (_cbcg FormField )Name ()string {return *_cbcg ._bfbd .Name [0].ValAttr };

// SetCellSpacing sets the cell spacing within a table.
func (_fcfcc TableProperties )SetCellSpacing (m _gaf .Distance ){_fcfcc ._bbbf .TblCellSpacing =_eb .NewCT_TblWidth ();_fcfcc ._bbbf .TblCellSpacing .TypeAttr =_eb .ST_TblWidthDxa ;_fcfcc ._bbbf .TblCellSpacing .WAttr =&_eb .ST_MeasurementOrPercent {};_fcfcc ._bbbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_fcfcc ._bbbf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (m /_gaf .Dxa ));};func _bdec (_faeg *_eb .CT_Tbl ,_edd ,_efcef map[int64 ]int64 ){for _ ,_ffa :=range _faeg .EG_ContentRowContent {for _ ,_cbgc :=range _ffa .Tr {for _ ,_edea :=range _cbgc .EG_ContentCellContent {for _ ,_gfdb :=range _edea .Tc {for _ ,_gbgc :=range _gfdb .EG_BlockLevelElts {for _ ,_abbb :=range _gbgc .EG_ContentBlockContent {for _ ,_gaad :=range _abbb .P {_bfff (_gaad ,_edd ,_efcef );};for _ ,_agfa :=range _abbb .Tbl {_bdec (_agfa ,_edd ,_efcef );};};};};};};};};

// SetTop sets the cell top margin
func (_ff CellMargins )SetTop (d _gaf .Distance ){_ff ._gffa .Top =_eb .NewCT_TblWidth ();_ege (_ff ._gffa .Top ,d );};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_ffb *Document )FormFields ()[]FormField {_dabg :=[]FormField {};for _ ,_fae :=range _ffb .Paragraphs (){_ccgb :=_fae .Runs ();for _bddg ,_daff :=range _ccgb {for _ ,_eec :=range _daff ._ccfe .EG_RunInnerContent {if _eec .FldChar ==nil ||_eec .FldChar .FfData ==nil {continue ;};if _eec .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeBegin {if len (_eec .FldChar .FfData .Name )==0||_eec .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_fccf :=FormField {_bfbd :_eec .FldChar .FfData };if _eec .FldChar .FfData .TextInput !=nil {for _adff :=_bddg +1;_adff < len (_ccgb )-1;_adff ++{if len (_ccgb [_adff ]._ccfe .EG_RunInnerContent )==0{continue ;};_aaf :=_ccgb [_adff ]._ccfe .EG_RunInnerContent [0];if _aaf .FldChar !=nil &&_aaf .FldChar .FldCharTypeAttr ==_eb .ST_FldCharTypeSeparate {if len (_ccgb [_adff +1]._ccfe .EG_RunInnerContent )==0{continue ;};if _ccgb [_adff +1]._ccfe .EG_RunInnerContent [0].FldChar ==nil {_fccf ._bcbfb =_ccgb [_adff +1]._ccfe .EG_RunInnerContent [0];break ;};};};};_dabg =append (_dabg ,_fccf );};};};};return _dabg ;};

// SetValue sets the width value.
func (_aggbe TableWidth )SetValue (m _gaf .Distance ){_aggbe ._fde .WAttr =&_eb .ST_MeasurementOrPercent {};_aggbe ._fde .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_aggbe ._fde .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (m /_gaf .Twips ));_aggbe ._fde .TypeAttr =_eb .ST_TblWidthDxa ;};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_cb AnchoredDrawing )SetTextWrapSquare (t _eb .WdST_WrapText ){_cb ._df .Choice =&_eb .WdEG_WrapTypeChoice {};_cb ._df .Choice .WrapSquare =_eb .NewWdCT_WrapSquare ();_cb ._df .Choice .WrapSquare .WrapTextAttr =t ;};

// TableProperties are the properties for a table within a document
type TableProperties struct{_bbbf *_eb .CT_TblPr };

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_abeea Style )SetUnhideWhenUsed (b bool ){if b {_abeea ._beadf .UnhideWhenUsed =_eb .NewCT_OnOff ();}else {_abeea ._beadf .UnhideWhenUsed =nil ;};};

// SetBasedOn sets the style that this style is based on.
func (_fcbg Style )SetBasedOn (name string ){if name ==""{_fcbg ._beadf .BasedOn =nil ;}else {_fcbg ._beadf .BasedOn =_eb .NewCT_String ();_fcbg ._beadf .BasedOn .ValAttr =name ;};};

// InitializeDefault constructs the default styles.
func (_gefgc Styles )InitializeDefault (){_gefgc .initializeDocDefaults ();_gefgc .initializeStyleDefaults ();};

// CellBorders are the borders for an individual
type CellBorders struct{_acae *_eb .CT_TcBorders };

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_efgca ParagraphProperties )EastAsiaFont ()string {if _ccddd :=_efgca ._ffge .RPr .RFonts ;_ccddd !=nil {if _ccddd .EastAsiaAttr !=nil {return *_ccddd .EastAsiaAttr ;};};return "";};

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_ffgf ParagraphProperties )AddTabStop (position _gaf .Distance ,justificaton _eb .ST_TabJc ,leader _eb .ST_TabTlc ){if _ffgf ._ffge .Tabs ==nil {_ffgf ._ffge .Tabs =_eb .NewCT_Tabs ();};_geffc :=_eb .NewCT_TabStop ();_geffc .LeaderAttr =leader ;_geffc .ValAttr =justificaton ;_geffc .PosAttr .Int64 =_c .Int64 (int64 (position /_gaf .Twips ));_ffgf ._ffge .Tabs .Tab =append (_ffgf ._ffge .Tabs .Tab ,_geffc );};

// X returns the inner wrapped XML type.
func (_cba Bookmark )X ()*_eb .CT_Bookmark {return _cba ._cge };

// Levels returns all of the numbering levels defined in the definition.
func (_fbac NumberingDefinition )Levels ()[]NumberingLevel {_gbdc :=[]NumberingLevel {};for _ ,_gfbac :=range _fbac ._affe .Lvl {_gbdc =append (_gbdc ,NumberingLevel {_gfbac });};return _gbdc ;};var _dddbb =false ;

// SetHangingIndent controls the hanging indent of the paragraph.
func (_gefce ParagraphStyleProperties )SetHangingIndent (m _gaf .Distance ){if _gefce ._agaaf .Ind ==nil {_gefce ._agaaf .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_gefce ._agaaf .Ind .HangingAttr =nil ;}else {_gefce ._agaaf .Ind .HangingAttr =&_eg .ST_TwipsMeasure {};_gefce ._agaaf .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_gaf .Twips ));};};

// InitializeDefault constructs a default numbering.
func (_ecdd Numbering )InitializeDefault (){_gbag :=_eb .NewCT_AbstractNum ();_gbag .MultiLevelType =_eb .NewCT_MultiLevelType ();_gbag .MultiLevelType .ValAttr =_eb .ST_MultiLevelTypeHybridMultilevel ;_ecdd ._gabd .AbstractNum =append (_ecdd ._gabd .AbstractNum ,_gbag );_gbag .AbstractNumIdAttr =1;const _gfegd =720;const _deab =720;const _caae =360;for _gfced :=0;_gfced < 9;_gfced ++{_fbad :=_eb .NewCT_Lvl ();_fbad .IlvlAttr =int64 (_gfced );_fbad .Start =_eb .NewCT_DecimalNumber ();_fbad .Start .ValAttr =1;_fbad .NumFmt =_eb .NewCT_NumFmt ();_fbad .NumFmt .ValAttr =_eb .ST_NumberFormatBullet ;_fbad .Suff =_eb .NewCT_LevelSuffix ();_fbad .Suff .ValAttr =_eb .ST_LevelSuffixNothing ;_fbad .LvlText =_eb .NewCT_LevelText ();_fbad .LvlText .ValAttr =_c .String ("\uf0b7");_fbad .LvlJc =_eb .NewCT_Jc ();_fbad .LvlJc .ValAttr =_eb .ST_JcLeft ;_fbad .RPr =_eb .NewCT_RPr ();_fbad .RPr .RFonts =_eb .NewCT_Fonts ();_fbad .RPr .RFonts .AsciiAttr =_c .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_fbad .RPr .RFonts .HAnsiAttr =_c .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_fbad .RPr .RFonts .HintAttr =_eb .ST_HintDefault ;_fbad .PPr =_eb .NewCT_PPrGeneral ();_fbgc :=int64 (_gfced *_deab +_gfegd );_fbad .PPr .Ind =_eb .NewCT_Ind ();_fbad .PPr .Ind .LeftAttr =&_eb .ST_SignedTwipsMeasure {};_fbad .PPr .Ind .LeftAttr .Int64 =_c .Int64 (_fbgc );_fbad .PPr .Ind .HangingAttr =&_eg .ST_TwipsMeasure {};_fbad .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (_caae ));_gbag .Lvl =append (_gbag .Lvl ,_fbad );};_cffa :=_eb .NewCT_Num ();_cffa .NumIdAttr =1;_cffa .AbstractNumId =_eb .NewCT_DecimalNumber ();_cffa .AbstractNumId .ValAttr =1;_ecdd ._gabd .Num =append (_ecdd ._gabd .Num ,_cffa );};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_eddg RunProperties )ComplexSizeMeasure ()string {if _fega :=_eddg ._beee .SzCs ;_fega !=nil {_ageag :=_fega .ValAttr ;if _ageag .ST_PositiveUniversalMeasure !=nil {return *_ageag .ST_PositiveUniversalMeasure ;};};return "";};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_decab RunProperties )SizeMeasure ()string {if _cged :=_decab ._beee .Sz ;_cged !=nil {_cecd :=_cged .ValAttr ;if _cecd .ST_PositiveUniversalMeasure !=nil {return *_cecd .ST_PositiveUniversalMeasure ;};};return "";};

// SetBottomPct sets the cell bottom margin
func (_bge CellMargins )SetBottomPct (pct float64 ){_bge ._gffa .Bottom =_eb .NewCT_TblWidth ();_ceg (_bge ._gffa .Bottom ,pct );};

// AddParagraph adds a paragraph to the header.
func (_fecba Header )AddParagraph ()Paragraph {_dbdf :=_eb .NewEG_ContentBlockContent ();_fecba ._dgab .EG_ContentBlockContent =append (_fecba ._dgab .EG_ContentBlockContent ,_dbdf );_cafg :=_eb .NewCT_P ();_dbdf .P =append (_dbdf .P ,_cafg );return Paragraph {_fecba ._ceda ,_cafg };};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_fdafg Paragraph )SetStyle (s string ){_fdafg .ensurePPr ();if s ==""{_fdafg ._ebg .PPr .PStyle =nil ;}else {_fdafg ._ebg .PPr .PStyle =_eb .NewCT_String ();_fdafg ._ebg .PPr .PStyle .ValAttr =s ;};};

// SetWidth sets the cell width to a specified width.
func (_cad CellProperties )SetWidth (d _gaf .Distance ){_cad ._beg .TcW =_eb .NewCT_TblWidth ();_cad ._beg .TcW .TypeAttr =_eb .ST_TblWidthDxa ;_cad ._beg .TcW .WAttr =&_eb .ST_MeasurementOrPercent {};_cad ._beg .TcW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_cad ._beg .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (d /_gaf .Twips ));};

// Rows returns the rows defined in the table.
func (_caeae Table )Rows ()[]Row {_fbff :=[]Row {};for _ ,_gbda :=range _caeae ._aefb .EG_ContentRowContent {for _ ,_gbbad :=range _gbda .Tr {_fbff =append (_fbff ,Row {_caeae ._gdbc ,_gbbad });};if _gbda .Sdt !=nil &&_gbda .Sdt .SdtContent !=nil {for _ ,_egef :=range _gbda .Sdt .SdtContent .Tr {_fbff =append (_fbff ,Row {_caeae ._gdbc ,_egef });};};};return _fbff ;};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_egd CellBorders )SetInsideVertical (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_egd ._acae .InsideV =_eb .NewCT_Border ();_fgag (_egd ._acae .InsideV ,t ,c ,thickness );};

// Margins allows controlling individual cell margins.
func (_ddc CellProperties )Margins ()CellMargins {if _ddc ._beg .TcMar ==nil {_ddc ._beg .TcMar =_eb .NewCT_TcMar ();};return CellMargins {_ddc ._beg .TcMar };};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_cafc ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_cafc ._agaaf .ContextualSpacing =nil ;}else {_cafc ._agaaf .ContextualSpacing =_eb .NewCT_OnOff ();};};

// Emboss returns true if paragraph emboss is on.
func (_dgbb ParagraphProperties )Emboss ()bool {return _bacc (_dgbb ._ffge .RPr .Emboss )};

// UnderlineColor returns the hex color value of run underline.
func (_eadc RunProperties )UnderlineColor ()string {if _faad :=_eadc ._beee .U ;_faad !=nil {_edff :=_faad .ColorAttr ;if _edff !=nil &&_edff .ST_HexColorRGB !=nil {return *_edff .ST_HexColorRGB ;};};return "";};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_egf *_eb .CT_TblStylePr };

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_aeca *_eb .CT_TblBorders };

// SetBottom sets the cell bottom margin
func (_ddf CellMargins )SetBottom (d _gaf .Distance ){_ddf ._gffa .Bottom =_eb .NewCT_TblWidth ();_ege (_ddf ._gffa .Bottom ,d );};func (_bdbg FormFieldType )String ()string {if _bdbg >=FormFieldType (len (_gfcfd )-1){return _adc .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bdbg );};return _edfbe [_gfcfd [_bdbg ]:_gfcfd [_bdbg +1]];};

// X returns the inner wrapped XML type.
func (_ccafg Table )X ()*_eb .CT_Tbl {return _ccafg ._aefb };

// X returns the inner wrapped XML type.
func (_bgdg Run )X ()*_eb .CT_R {return _bgdg ._ccfe };

// SetRight sets the right border to a specified type, color and thickness.
func (_caaeg TableBorders )SetRight (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_caaeg ._aeca .Right =_eb .NewCT_Border ();_fgag (_caaeg ._aeca .Right ,t ,c ,thickness );};

// Text returns text from the document as one string separated with line breaks.
func (_aafc *DocText )Text ()string {_gaaa :=_cd .NewBuffer ([]byte {});for _ ,_bccf :=range _aafc .Items {if _bccf .Text !=""{_gaaa .WriteString (_bccf .Text );_gaaa .WriteString ("\u000a");};};return _gaaa .String ();};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_addfc ParagraphProperties )SetKeepWithNext (b bool ){if !b {_addfc ._ffge .KeepNext =nil ;}else {_addfc ._ffge .KeepNext =_eb .NewCT_OnOff ();};};

// Save writes the document to an io.Writer in the Zip package format.
func (_gda *Document )Save (w _ad .Writer )error {return _gda .save (w ,_gda ._ba )};

// SetLeftIndent controls the left indent of the paragraph.
func (_gcce ParagraphStyleProperties )SetLeftIndent (m _gaf .Distance ){if _gcce ._agaaf .Ind ==nil {_gcce ._agaaf .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_gcce ._agaaf .Ind .LeftAttr =nil ;}else {_gcce ._agaaf .Ind .LeftAttr =&_eb .ST_SignedTwipsMeasure {};_gcce ._agaaf .Ind .LeftAttr .Int64 =_c .Int64 (int64 (m /_gaf .Twips ));};};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// SetEffect sets a text effect on the run.
func (_dbaa RunProperties )SetEffect (e _eb .ST_TextEffect ){if e ==_eb .ST_TextEffectUnset {_dbaa ._beee .Effect =nil ;}else {_dbaa ._beee .Effect =_eb .NewCT_TextEffect ();_dbaa ._beee .Effect .ValAttr =_eb .ST_TextEffectShimmer ;};};func (_befe Endnote )id ()int64 {return _befe ._gdfa .IdAttr };

// RemoveParagraph removes a paragraph from the footnote.
func (_gdge Footnote )RemoveParagraph (p Paragraph ){for _ ,_feeg :=range _gdge .content (){for _fdga ,_cgcf :=range _feeg .P {if _cgcf ==p ._ebg {copy (_feeg .P [_fdga :],_feeg .P [_fdga +1:]);_feeg .P =_feeg .P [0:len (_feeg .P )-1];return ;};};};};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_ccde Paragraph )SetNumberingLevel (listLevel int ){_ccde .ensurePPr ();if _ccde ._ebg .PPr .NumPr ==nil {_ccde ._ebg .PPr .NumPr =_eb .NewCT_NumPr ();};_bgcc :=_eb .NewCT_DecimalNumber ();_bgcc .ValAttr =int64 (listLevel );_ccde ._ebg .PPr .NumPr .Ilvl =_bgcc ;};

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_edfg Paragraph )AddCheckBox (name string )FormField {_ddcc :=_edfg .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_ddcc ._bfbd .CheckBox =_eb .NewCT_FFCheckBox ();return _ddcc ;};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_ddea ParagraphProperties )SetHangingIndent (m _gaf .Distance ){if _ddea ._ffge .Ind ==nil {_ddea ._ffge .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_ddea ._ffge .Ind .HangingAttr =nil ;}else {_ddea ._ffge .Ind .HangingAttr =&_eg .ST_TwipsMeasure {};_ddea ._ffge .Ind .HangingAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (m /_gaf .Twips ));};};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_cfgg RunProperties )CharacterSpacingValue ()int64 {if _cebgf :=_cfgg ._beee .Spacing ;_cebgf !=nil {_gbgb :=_cebgf .ValAttr ;if _gbgb .Int64 !=nil {return *_gbgb .Int64 ;};};return int64 (0);};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_gabd *_eb .Numbering };

// ParagraphProperties returns the paragraph style properties.
func (_adfd Style )ParagraphProperties ()ParagraphStyleProperties {if _adfd ._beadf .PPr ==nil {_adfd ._beadf .PPr =_eb .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_adfd ._beadf .PPr };};

// Bold returns true if run font is bold.
func (_faca RunProperties )Bold ()bool {_ebfg :=_faca ._beee ;return _bacc (_ebfg .B )||_bacc (_ebfg .BCs );};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_aeecd ParagraphProperties )SetHeadingLevel (idx int ){_aeecd .SetStyle (_adc .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _aeecd ._ffge .NumPr ==nil {_aeecd ._ffge .NumPr =_eb .NewCT_NumPr ();};_aeecd ._ffge .NumPr .Ilvl =_eb .NewCT_DecimalNumber ();_aeecd ._ffge .NumPr .Ilvl .ValAttr =int64 (idx );};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_aac *Document )Copy ()(*Document ,error ){_bccg :=_cd .NewBuffer ([]byte {});_cffg :=_aac .save (_bccg ,_aac ._ba );if _cffg !=nil {return nil ,_cffg ;};_gcaf :=_bccg .Bytes ();_bcbf :=_cd .NewReader (_gcaf );return _cgad (_bcbf ,int64 (_bcbf .Len ()),_aac ._ba );};

// SetSize sets the size of the displayed image on the page.
func (_cced InlineDrawing )SetSize (w ,h _gaf .Distance ){_cced ._dgfd .Extent .CxAttr =int64 (float64 (w *_gaf .Pixel72 )/_gaf .EMU );_cced ._dgfd .Extent .CyAttr =int64 (float64 (h *_gaf .Pixel72 )/_gaf .EMU );};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_fegfa *_eb .CT_TblPrBase };

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_dacg TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _dacg ._egf .PPr ==nil {_dacg ._egf .PPr =_eb .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_dacg ._egf .PPr };};

// X returns the inner wrapped XML type.
func (_dafe InlineDrawing )X ()*_eb .WdInline {return _dafe ._dgfd };

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_ebef Paragraph )AddBookmark (name string )Bookmark {_fffb :=_eb .NewEG_PContent ();_cbbb :=_eb .NewEG_ContentRunContent ();_fffb .EG_ContentRunContent =append (_fffb .EG_ContentRunContent ,_cbbb );_beac :=_eb .NewEG_RunLevelElts ();_cbbb .EG_RunLevelElts =append (_cbbb .EG_RunLevelElts ,_beac );_efedd :=_eb .NewEG_RangeMarkupElements ();_fdaa :=_eb .NewCT_Bookmark ();_efedd .BookmarkStart =_fdaa ;_beac .EG_RangeMarkupElements =append (_beac .EG_RangeMarkupElements ,_efedd );_efedd =_eb .NewEG_RangeMarkupElements ();_efedd .BookmarkEnd =_eb .NewCT_MarkupRange ();_beac .EG_RangeMarkupElements =append (_beac .EG_RangeMarkupElements ,_efedd );_ebef ._ebg .EG_PContent =append (_ebef ._ebg .EG_PContent ,_fffb );_deac :=Bookmark {_fdaa };_deac .SetName (name );return _deac ;};

// X returns the inner wrapped XML type.
func (_gg CellProperties )X ()*_eb .CT_TcPr {return _gg ._beg };

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_acbgf NumberingDefinition )AbstractNumberID ()int64 {return _acbgf ._affe .AbstractNumIdAttr };

// X returns the inner wrapped XML type.
func (_agce NumberingLevel )X ()*_eb .CT_Lvl {return _agce ._acec };

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_dda ParagraphProperties )ComplexSizeValue ()float64 {if _cdbg :=_dda ._ffge .RPr .SzCs ;_cdbg !=nil {_bfac :=_cdbg .ValAttr ;if _bfac .ST_UnsignedDecimalNumber !=nil {return float64 (*_bfac .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_egbdc Run )ClearContent (){_egbdc ._ccfe .EG_RunInnerContent =nil };

// Tables returns the tables defined in the document.
func (_ffg *Document )Tables ()[]Table {_aec :=[]Table {};if _ffg ._dddb .Body ==nil {return nil ;};for _ ,_bccb :=range _ffg ._dddb .Body .EG_BlockLevelElts {for _ ,_adfa :=range _bccb .EG_ContentBlockContent {for _ ,_ebcb :=range _ffg .tables (_adfa ){_aec =append (_aec ,_ebcb );};};};return _aec ;};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_faa *_eb .CT_Fonts };func (_bdcg Styles )initializeStyleDefaults (){_feacb :=_bdcg .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_eb .ST_StyleTypeParagraph ,true );_feacb .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_feacb .SetPrimaryStyle (true );_bgeac :=_bdcg .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_eb .ST_StyleTypeCharacter ,true );_bgeac .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");_bgeac .SetUISortOrder (1);_bgeac .SetSemiHidden (true );_bgeac .SetUnhideWhenUsed (true );_edegd :=_bdcg .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_eb .ST_StyleTypeCharacter ,false );_edegd .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");_edegd .SetBasedOn (_bgeac .StyleID ());_edegd .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_edegd .SetUISortOrder (10);_edegd .RunProperties ().Fonts ().SetASCIITheme (_eb .ST_ThemeMajorAscii );_edegd .RunProperties ().Fonts ().SetEastAsiaTheme (_eb .ST_ThemeMajorEastAsia );_edegd .RunProperties ().Fonts ().SetHANSITheme (_eb .ST_ThemeMajorHAnsi );_edegd .RunProperties ().Fonts ().SetCSTheme (_eb .ST_ThemeMajorBidi );_edegd .RunProperties ().SetSize (28*_gaf .Point );_edegd .RunProperties ().SetKerning (14*_gaf .Point );_edegd .RunProperties ().SetCharacterSpacing (-10*_gaf .Twips );_dedd :=_bdcg .AddStyle ("\u0054\u0069\u0074l\u0065",_eb .ST_StyleTypeParagraph ,false );_dedd .SetName ("\u0054\u0069\u0074l\u0065");_dedd .SetBasedOn (_feacb .StyleID ());_dedd .SetNextStyle (_feacb .StyleID ());_dedd .SetLinkedStyle (_edegd .StyleID ());_dedd .SetUISortOrder (10);_dedd .SetPrimaryStyle (true );_dedd .ParagraphProperties ().SetContextualSpacing (true );_dedd .RunProperties ().Fonts ().SetASCIITheme (_eb .ST_ThemeMajorAscii );_dedd .RunProperties ().Fonts ().SetEastAsiaTheme (_eb .ST_ThemeMajorEastAsia );_dedd .RunProperties ().Fonts ().SetHANSITheme (_eb .ST_ThemeMajorHAnsi );_dedd .RunProperties ().Fonts ().SetCSTheme (_eb .ST_ThemeMajorBidi );_dedd .RunProperties ().SetSize (28*_gaf .Point );_dedd .RunProperties ().SetKerning (14*_gaf .Point );_dedd .RunProperties ().SetCharacterSpacing (-10*_gaf .Twips );_gabab :=_bdcg .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_eb .ST_StyleTypeTable ,false );_gabab .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_gabab .SetUISortOrder (99);_gabab .SetSemiHidden (true );_gabab .SetUnhideWhenUsed (true );_gabab .X ().TblPr =_eb .NewCT_TblPrBase ();_caag :=NewTableWidth ();_gabab .X ().TblPr .TblInd =_caag .X ();_caag .SetValue (0*_gaf .Dxa );_gabab .X ().TblPr .TblCellMar =_eb .NewCT_TblCellMar ();_caag =NewTableWidth ();_gabab .X ().TblPr .TblCellMar .Top =_caag .X ();_caag .SetValue (0*_gaf .Dxa );_caag =NewTableWidth ();_gabab .X ().TblPr .TblCellMar .Bottom =_caag .X ();_caag .SetValue (0*_gaf .Dxa );_caag =NewTableWidth ();_gabab .X ().TblPr .TblCellMar .Left =_caag .X ();_caag .SetValue (108*_gaf .Dxa );_caag =NewTableWidth ();_gabab .X ().TblPr .TblCellMar .Right =_caag .X ();_caag .SetValue (108*_gaf .Dxa );_cafa :=_bdcg .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_eb .ST_StyleTypeNumbering ,false );_cafa .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");_cafa .SetUISortOrder (1);_cafa .SetSemiHidden (true );_cafa .SetUnhideWhenUsed (true );_dbaaf :=[]_gaf .Distance {16,13,12,11,11,11,11,11,11};_gedf :=[]_gaf .Distance {240,40,40,40,40,40,40,40,40};for _ebgc :=0;_ebgc < 9;_ebgc ++{_gffg :=_adc .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_ebgc +1);_cfcc :=_bdcg .AddStyle (_gffg +"\u0043\u0068\u0061\u0072",_eb .ST_StyleTypeCharacter ,false );_cfcc .SetName (_adc .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_ebgc +1));_cfcc .SetBasedOn (_bgeac .StyleID ());_cfcc .SetLinkedStyle (_gffg );_cfcc .SetUISortOrder (9+_ebgc );_cfcc .RunProperties ().SetSize (_dbaaf [_ebgc ]*_gaf .Point );_dbaf :=_bdcg .AddStyle (_gffg ,_eb .ST_StyleTypeParagraph ,false );_dbaf .SetName (_adc .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_ebgc +1));_dbaf .SetNextStyle (_feacb .StyleID ());_dbaf .SetLinkedStyle (_dbaf .StyleID ());_dbaf .SetUISortOrder (9+_ebgc );_dbaf .SetPrimaryStyle (true );_dbaf .ParagraphProperties ().SetKeepNext (true );_dbaf .ParagraphProperties ().SetSpacing (_gedf [_ebgc ]*_gaf .Twips ,0);_dbaf .ParagraphProperties ().SetOutlineLevel (_ebgc );_dbaf .RunProperties ().SetSize (_dbaaf [_ebgc ]*_gaf .Point );};};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_gfff TableLook )SetVerticalBanding (on bool ){if !on {_gfff ._gfaf .NoVBandAttr =&_eg .ST_OnOff {};_gfff ._gfaf .NoVBandAttr .ST_OnOff1 =_eg .ST_OnOff1On ;}else {_gfff ._gfaf .NoVBandAttr =&_eg .ST_OnOff {};_gfff ._gfaf .NoVBandAttr .ST_OnOff1 =_eg .ST_OnOff1Off ;};};func (_bbf *Document )InsertTableAfter (relativeTo Paragraph )Table {return _bbf .insertTable (relativeTo ,false );};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_fab *Document )Footnote (id int64 )Footnote {for _ ,_gbc :=range _fab .Footnotes (){if _gbc .id ()==id {return _gbc ;};};return Footnote {};};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_gdgc FormField )Value ()string {if _gdgc ._bfbd .TextInput !=nil &&_gdgc ._bcbfb .T !=nil {return _gdgc ._bcbfb .T .Content ;}else if _gdgc ._bfbd .DdList !=nil &&_gdgc ._bfbd .DdList .Result !=nil {_dbea :=_gdgc .PossibleValues ();_aegb :=int (_gdgc ._bfbd .DdList .Result .ValAttr );if _aegb < len (_dbea ){return _dbea [_aegb ];};}else if _gdgc ._bfbd .CheckBox !=nil {if _gdgc .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};func _ege (_gba *_eb .CT_TblWidth ,_fda _gaf .Distance ){_gba .TypeAttr =_eb .ST_TblWidthDxa ;_gba .WAttr =&_eb .ST_MeasurementOrPercent {};_gba .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_gba .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (_fda /_gaf .Dxa ));};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_ggge *Document )AddImage (i _bd .Image )(_bd .ImageRef ,error ){_aaea :=_bd .MakeImageRef (i ,&_ggge .DocBase ,_ggge ._bdfb );if i .Data ==nil &&i .Path ==""{return _aaea ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _aaea ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _aaea ,_ga .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_gdcb :=_gf .Add (i .Path );if _gdcb !=nil {return _aaea ,_gdcb ;};};_ggge .Images =append (_ggge .Images ,_aaea );_fgdd :=_adc .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_ggge .Images ),i .Format );_gfd :=_ggge ._bdfb .AddRelationship (_fgdd ,_c .ImageType );_ggge .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ggge .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ggge .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ggge .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_ggge .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );_aaea .SetRelID (_gfd .X ().IdAttr );_aaea .SetTarget (_fgdd );return _aaea ,nil ;};

// GetColor returns the color.Color object representing the run color.
func (_dbcdb ParagraphProperties )GetColor ()_gb .Color {if _bgfe :=_dbcdb ._ffge .RPr .Color ;_bgfe !=nil {_cefg :=_bgfe .ValAttr ;if _cefg .ST_HexColorRGB !=nil {return _gb .FromHex (*_cefg .ST_HexColorRGB );};};return _gb .Color {};};

// X returns the inner wrapped XML type.
func (_gfea Footer )X ()*_eb .Ftr {return _gfea ._facg };

// SetAlignment sets the alignment of a table within the page.
func (_geede TableProperties )SetAlignment (align _eb .ST_JcTable ){if align ==_eb .ST_JcTableUnset {_geede ._bbbf .Jc =nil ;}else {_geede ._bbbf .Jc =_eb .NewCT_JcTable ();_geede ._bbbf .Jc .ValAttr =align ;};};

// X returns the inner wrapped XML type.
func (_bgded Endnote )X ()*_eb .CT_FtnEdn {return _bgded ._gdfa };

// SetToolTip sets the tooltip text for a hyperlink.
func (_aebd HyperLink )SetToolTip (text string ){if text ==""{_aebd ._aab .TooltipAttr =nil ;}else {_aebd ._aab .TooltipAttr =_c .String (text );};};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// X returns the inner wrapped XML type.
func (_dedb TableProperties )X ()*_eb .CT_TblPr {return _dedb ._bbbf };

// Emboss returns true if run emboss is on.
func (_afcb RunProperties )Emboss ()bool {return _bacc (_afcb ._beee .Emboss )};func _bfff (_cbfa *_eb .CT_P ,_caef ,_ceaf map[int64 ]int64 ){for _ ,_ecbe :=range _cbfa .EG_PContent {for _ ,_bdef :=range _ecbe .EG_ContentRunContent {if _bdef .R !=nil {for _ ,_adfcd :=range _bdef .R .EG_RunInnerContent {_gcbc :=_adfcd .EndnoteReference ;if _gcbc !=nil &&_gcbc .IdAttr > 0{if _gfdd ,_aeeca :=_ceaf [_gcbc .IdAttr ];_aeeca {_gcbc .IdAttr =_gfdd ;};};_afgd :=_adfcd .FootnoteReference ;if _afgd !=nil &&_afgd .IdAttr > 0{if _gege ,_defa :=_caef [_afgd .IdAttr ];_defa {_afgd .IdAttr =_gege ;};};};};};};};

// Bookmarks returns all of the bookmarks defined in the document.
func (_geff Document )Bookmarks ()[]Bookmark {if _geff ._dddb .Body ==nil {return nil ;};_eabda :=[]Bookmark {};for _ ,_fdbf :=range _geff ._dddb .Body .EG_BlockLevelElts {for _ ,_dccg :=range _fdbf .EG_ContentBlockContent {for _ ,_agb :=range _aecb (_dccg ){_eabda =append (_eabda ,_agb );};};};return _eabda ;};

// Footer is a footer for a document section.
type Footer struct{_cbb *Document ;_facg *_eb .Ftr ;};

// SetText sets the text to be used in bullet mode.
func (_eeda NumberingLevel )SetText (t string ){if t ==""{_eeda ._acec .LvlText =nil ;}else {_eeda ._acec .LvlText =_eb .NewCT_LevelText ();_eeda ._acec .LvlText .ValAttr =_c .String (t );};};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_cdbf *Document ;_cfdc *_eb .CT_SdtBlock ;};

// UnderlineColor returns the hex color value of paragraph underline.
func (_gaef ParagraphProperties )UnderlineColor ()string {if _fgbea :=_gaef ._ffge .RPr .U ;_fgbea !=nil {_efa :=_fgbea .ColorAttr ;if _efa !=nil &&_efa .ST_HexColorRGB !=nil {return *_efa .ST_HexColorRGB ;};};return "";};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_gfegg Run )AddDrawingAnchored (img _bd .ImageRef )(AnchoredDrawing ,error ){_bgca :=_gfegg .newIC ();_bgca .Drawing =_eb .NewCT_Drawing ();_eadg :=_eb .NewWdAnchor ();_cdfdab :=AnchoredDrawing {_gfegg ._gbbgd ,_eadg };_eadg .SimplePosAttr =_c .Bool (false );_eadg .AllowOverlapAttr =true ;_eadg .CNvGraphicFramePr =_add .NewCT_NonVisualGraphicFrameProperties ();_bgca .Drawing .Anchor =append (_bgca .Drawing .Anchor ,_eadg );_eadg .Graphic =_add .NewGraphic ();_eadg .Graphic .GraphicData =_add .NewCT_GraphicalObjectData ();_eadg .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_eadg .SimplePos .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);_eadg .SimplePos .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_eadg .PositionH .RelativeFromAttr =_eb .WdST_RelFromHPage ;_eadg .PositionH .Choice =&_eb .WdCT_PosHChoice {};_eadg .PositionH .Choice .PosOffset =_c .Int32 (0);_eadg .PositionV .RelativeFromAttr =_eb .WdST_RelFromVPage ;_eadg .PositionV .Choice =&_eb .WdCT_PosVChoice {};_eadg .PositionV .Choice .PosOffset =_c .Int32 (0);_eadg .Extent .CxAttr =int64 (float64 (img .Size ().X *_gaf .Pixel72 )/_gaf .EMU );_eadg .Extent .CyAttr =int64 (float64 (img .Size ().Y *_gaf .Pixel72 )/_gaf .EMU );_eadg .Choice =&_eb .WdEG_WrapTypeChoice {};_eadg .Choice .WrapSquare =_eb .NewWdCT_WrapSquare ();_eadg .Choice .WrapSquare .WrapTextAttr =_eb .WdST_WrapTextBothSides ;_gagf :=0x7FFFFFFF&_cg .Uint32 ();_eadg .DocPr .IdAttr =_gagf ;_adfb :=_abb .NewPic ();_adfb .NvPicPr .CNvPr .IdAttr =_gagf ;_deae :=img .RelID ();if _deae ==""{return _cdfdab ,_ga .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_eadg .Graphic .GraphicData .Any =append (_eadg .Graphic .GraphicData .Any ,_adfb );_adfb .BlipFill =_add .NewCT_BlipFillProperties ();_adfb .BlipFill .Blip =_add .NewCT_Blip ();_adfb .BlipFill .Blip .EmbedAttr =&_deae ;_adfb .BlipFill .Stretch =_add .NewCT_StretchInfoProperties ();_adfb .BlipFill .Stretch .FillRect =_add .NewCT_RelativeRect ();_adfb .SpPr =_add .NewCT_ShapeProperties ();_adfb .SpPr .Xfrm =_add .NewCT_Transform2D ();_adfb .SpPr .Xfrm .Off =_add .NewCT_Point2D ();_adfb .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_c .Int64 (0);_adfb .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_c .Int64 (0);_adfb .SpPr .Xfrm .Ext =_add .NewCT_PositiveSize2D ();_adfb .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_gaf .Point );_adfb .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_gaf .Point );_adfb .SpPr .PrstGeom =_add .NewCT_PresetGeometry2D ();_adfb .SpPr .PrstGeom .PrstAttr =_add .ST_ShapeTypeRect ;return _cdfdab ,nil ;};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_cafec RunProperties )SetCharacterSpacing (size _gaf .Distance ){_cafec ._beee .Spacing =_eb .NewCT_SignedTwipsMeasure ();_cafec ._beee .Spacing .ValAttr .Int64 =_c .Int64 (int64 (size /_gaf .Twips ));};

// X returns the inner wrapped XML type.
func (_gfbdf TableStyleProperties )X ()*_eb .CT_TblPrBase {return _gfbdf ._fegfa };

// Type returns the type of the style.
func (_efbde Style )Type ()_eb .ST_StyleType {return _efbde ._beadf .TypeAttr };

// SetColor sets the text color.
func (_dfbcg RunProperties )SetColor (c _gb .Color ){_dfbcg ._beee .Color =_eb .NewCT_Color ();_dfbcg ._beee .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// AddParagraph adds a paragraph to the footer.
func (_bgae Footer )AddParagraph ()Paragraph {_cfgbg :=_eb .NewEG_ContentBlockContent ();_bgae ._facg .EG_ContentBlockContent =append (_bgae ._facg .EG_ContentBlockContent ,_cfgbg );_abbd :=_eb .NewCT_P ();_cfgbg .P =append (_cfgbg .P ,_abbd );return Paragraph {_bgae ._cbb ,_abbd };};

// DoubleStrike returns true if paragraph is double striked.
func (_gebb ParagraphProperties )DoubleStrike ()bool {return _bacc (_gebb ._ffge .RPr .Dstrike )};func _ccgc (_cgfcc *_eb .CT_P ,_beab *_eb .CT_Hyperlink ,_fdbc *TableInfo ,_gaba *DrawingInfo ,_ccb []*_eb .EG_ContentRunContent )[]TextItem {_eaaf :=[]TextItem {};for _ ,_ecdg :=range _ccb {if _dgaa :=_ecdg .R ;_dgaa !=nil {_ddff :=_cd .NewBuffer ([]byte {});for _ ,_bceg :=range _dgaa .EG_RunInnerContent {if _bceg .T !=nil &&_bceg .T .Content !=""{_ddff .WriteString (_bceg .T .Content );};};_eaaf =append (_eaaf ,TextItem {Text :_ddff .String (),DrawingInfo :_gaba ,Paragraph :_cgfcc ,Hyperlink :_beab ,Run :_dgaa ,TableInfo :_fdbc });for _ ,_ggfe :=range _dgaa .Extra {if _bbca ,_gfbag :=_ggfe .(*_eb .AlternateContentRun );_gfbag {_gfcfa :=&DrawingInfo {Drawing :_bbca .Choice .Drawing };for _ ,_eabc :=range _gfcfa .Drawing .Anchor {for _ ,_egdb :=range _eabc .Graphic .GraphicData .Any {if _bebd ,_fgda :=_egdb .(*_eb .WdWsp );_fgda {if _bebd .WChoice !=nil {if _baba :=_bebd .SpPr ;_baba !=nil {if _bcfg :=_baba .Xfrm ;_bcfg !=nil {if _babc :=_bcfg .Ext ;_babc !=nil {_gfcfa .Width =_babc .CxAttr ;_gfcfa .Height =_babc .CyAttr ;};};};for _ ,_bfbf :=range _bebd .WChoice .Txbx .TxbxContent .EG_ContentBlockContent {_eaaf =append (_eaaf ,_ceae (_bfbf .P ,_fdbc ,_gfcfa )...);};};};};};};};};};return _eaaf ;};

// X returns the inner wrapped XML type.
func (_becdd TableWidth )X ()*_eb .CT_TblWidth {return _becdd ._fde };

// X returns the inner wrapped XML type.
func (_gee *Document )X ()*_eb .Document {return _gee ._dddb };func _aecb (_gcf *_eb .EG_ContentBlockContent )[]Bookmark {_eccg :=[]Bookmark {};for _ ,_agff :=range _gcf .P {for _ ,_faf :=range _agff .EG_PContent {for _ ,_eae :=range _faf .EG_ContentRunContent {for _ ,_bbad :=range _eae .EG_RunLevelElts {for _ ,_aggc :=range _bbad .EG_RangeMarkupElements {if _aggc .BookmarkStart !=nil {_eccg =append (_eccg ,Bookmark {_aggc .BookmarkStart });};};};};};};for _ ,_feae :=range _gcf .EG_RunLevelElts {for _ ,_cdgcd :=range _feae .EG_RangeMarkupElements {if _cdgcd .BookmarkStart !=nil {_eccg =append (_eccg ,Bookmark {_cdgcd .BookmarkStart });};};};for _ ,_egbd :=range _gcf .Tbl {for _ ,_eccb :=range _egbd .EG_ContentRowContent {for _ ,_cgbb :=range _eccb .Tr {for _ ,_cee :=range _cgbb .EG_ContentCellContent {for _ ,_efcd :=range _cee .Tc {for _ ,_eabd :=range _efcd .EG_BlockLevelElts {for _ ,_cafd :=range _eabd .EG_ContentBlockContent {for _ ,_fbdb :=range _aecb (_cafd ){_eccg =append (_eccg ,_fbdb );};};};};};};};};return _eccg ;};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_ggdf Footer )Index ()int {for _cdgb ,_dage :=range _ggdf ._cbb ._ddfb {if _dage ==_ggdf ._facg {return _cdgb ;};};return -1;};

// SetTarget sets the URL target of the hyperlink.
func (_ecceb HyperLink )SetTarget (url string ){_eaeb :=_ecceb ._cbba .AddHyperlink (url );_ecceb ._aab .IdAttr =_c .String (_bd .Relationship (_eaeb ).ID ());_ecceb ._aab .AnchorAttr =nil ;};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_bccge Style )SetUISortOrder (order int ){_bccge ._beadf .UiPriority =_eb .NewCT_DecimalNumber ();_bccge ._beadf .UiPriority .ValAttr =int64 (order );};

// SetXOffset sets the X offset for an image relative to the origin.
func (_cdg AnchoredDrawing )SetXOffset (x _gaf .Distance ){_cdg ._df .PositionH .Choice =&_eb .WdCT_PosHChoice {};_cdg ._df .PositionH .Choice .PosOffset =_c .Int32 (int32 (x /_gaf .EMU ));};

// AddPageBreak adds a page break to a run.
func (_fccfd Run )AddPageBreak (){_aeea :=_fccfd .newIC ();_aeea .Br =_eb .NewCT_Br ();_aeea .Br .TypeAttr =_eb .ST_BrTypePage ;};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_dcdf Document )SetStrict (strict bool ){if strict {_dcdf ._dddb .ConformanceAttr =_eg .ST_ConformanceClassStrict ;}else {_dcdf ._dddb .ConformanceAttr =_eg .ST_ConformanceClassTransitional ;};};

// New constructs an empty document that content can be added to.
func New ()*Document {_bbe :=&Document {_dddb :_eb .NewDocument ()};_bbe .ContentTypes =_bd .NewContentTypes ();_bbe ._dddb .Body =_eb .NewCT_Body ();_bbe ._dddb .ConformanceAttr =_eg .ST_ConformanceClassTransitional ;_bbe ._bdfb =_bd .NewRelationships ();_bbe .AppProperties =_bd .NewAppProperties ();_bbe .CoreProperties =_bd .NewCoreProperties ();_bbe .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");_bbe .Settings =NewSettings ();_bbe ._bdfb .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_c .SettingsType );_bbe .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");_bbe .Rels =_bd .NewRelationships ();_bbe .Rels .AddRelationship (_c .RelativeFilename (_c .DocTypeDocument ,"",_c .CorePropertiesType ,0),_c .CorePropertiesType );_bbe .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_c .ExtendedPropertiesType );_bbe .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_c .OfficeDocumentType );_bbe .Numbering =NewNumbering ();_bbe .Numbering .InitializeDefault ();_bbe .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");_bbe ._bdfb .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_c .NumberingType );_bbe .Styles =NewStyles ();_bbe .Styles .InitializeDefault ();_bbe .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");_bbe ._bdfb .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_c .StylesType );_bbe ._dddb .Body =_eb .NewCT_Body ();return _bbe ;};

// Caps returns true if run font is capitalized.
func (_aadb RunProperties )Caps ()bool {return _bacc (_aadb ._beee .Caps )};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_cfccc TableStyleProperties )SetTableIndent (ind _gaf .Distance ){_cfccc ._fegfa .TblInd =_eb .NewCT_TblWidth ();_cfccc ._fegfa .TblInd .TypeAttr =_eb .ST_TblWidthDxa ;_cfccc ._fegfa .TblInd .WAttr =&_eb .ST_MeasurementOrPercent {};_cfccc ._fegfa .TblInd .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_cfccc ._fegfa .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (ind /_gaf .Dxa ));};

// Color returns the style's Color.
func (_bcfb RunProperties )Color ()Color {if _bcfb ._beee .Color ==nil {_bcfb ._beee .Color =_eb .NewCT_Color ();};return Color {_bcfb ._beee .Color };};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_gaced Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_fbfbg :=_gaced .newIC ();_fbfbg .FldChar =_eb .NewCT_FldChar ();_fbfbg .FldChar .FldCharTypeAttr =_eb .ST_FldCharTypeBegin ;if isDirty {_fbfbg .FldChar .DirtyAttr =&_eg .ST_OnOff {};_fbfbg .FldChar .DirtyAttr .Bool =_c .Bool (true );};_fbfbg =_gaced .newIC ();_fbfbg .InstrText =_eb .NewCT_Text ();if fmt !=""{_fbfbg .InstrText .Content =code +"\u0020"+fmt ;}else {_fbfbg .InstrText .Content =code ;};_fbfbg =_gaced .newIC ();_fbfbg .FldChar =_eb .NewCT_FldChar ();_fbfbg .FldChar .FldCharTypeAttr =_eb .ST_FldCharTypeEnd ;};

// Color controls the run or styles color.
type Color struct{_db *_eb .CT_Color };

// SetName marks sets a name attribute for a FormField.
func (_eda FormField )SetName (name string ){_gccd :=_eb .NewCT_FFName ();_gccd .ValAttr =&name ;_eda ._bfbd .Name =[]*_eb .CT_FFName {_gccd };};

// SetName sets the name of the style.
func (_adcb Style )SetName (name string ){_adcb ._beadf .Name =_eb .NewCT_String ();_adcb ._beadf .Name .ValAttr =name ;};

// Row is a row within a table within a document.
type Row struct{_bgcbb *Document ;_ccedf *_eb .CT_Row ;};

// X returns the inner wrapped XML type.
func (_eace Footnote )X ()*_eb .CT_FtnEdn {return _eace ._ccfg };

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_agaaf *_eb .CT_PPrGeneral };

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_gaaea :=_eb .NewSettings ();_gaaea .Compat =_eb .NewCT_Compat ();_dfab :=_eb .NewCT_CompatSetting ();_dfab .NameAttr =_c .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");_dfab .UriAttr =_c .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_dfab .ValAttr =_c .String ("\u0031\u0035");_gaaea .Compat .CompatSetting =append (_gaaea .Compat .CompatSetting ,_dfab );return Settings {_gaaea };};

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_ce AnchoredDrawing )SetHAlignment (h _eb .WdST_AlignH ){_ce ._df .PositionH .Choice =&_eb .WdCT_PosHChoice {};_ce ._df .PositionH .Choice .Align =h ;};

// X returns the inner wrapped XML type.
func (_bcde Settings )X ()*_eb .Settings {return _bcde ._accf };func (_adffg Paragraph )addFldChar ()*_eb .CT_FldChar {_eeba :=_adffg .AddRun ();_abdf :=_eeba .X ();_dgdbd :=_eb .NewEG_RunInnerContent ();_bcce :=_eb .NewCT_FldChar ();_dgdbd .FldChar =_bcce ;_abdf .EG_RunInnerContent =append (_abdf .EG_RunInnerContent ,_dgdbd );return _bcce ;};

// Properties returns the run properties.
func (_edag Run )Properties ()RunProperties {if _edag ._ccfe .RPr ==nil {_edag ._ccfe .RPr =_eb .NewCT_RPr ();};return RunProperties {_edag ._ccfe .RPr };};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_egcf TableBorders )SetInsideVertical (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_egcf ._aeca .InsideV =_eb .NewCT_Border ();_fgag (_egcf ._aeca .InsideV ,t ,c ,thickness );};

// AddDefinition adds a new numbering definition.
func (_cage Numbering )AddDefinition ()NumberingDefinition {_dccgc :=_eb .NewCT_Num ();_gbac :=int64 (1);for _ ,_faeaa :=range _cage .Definitions (){if _faeaa .AbstractNumberID ()>=_gbac {_gbac =_faeaa .AbstractNumberID ()+1;};};_aacec :=int64 (1);for _ ,_eeabb :=range _cage .X ().Num {if _eeabb .NumIdAttr >=_aacec {_aacec =_eeabb .NumIdAttr +1;};};_dccgc .NumIdAttr =_aacec ;_dccgc .AbstractNumId =_eb .NewCT_DecimalNumber ();_dccgc .AbstractNumId .ValAttr =_gbac ;_eefa :=_eb .NewCT_AbstractNum ();_eefa .AbstractNumIdAttr =_gbac ;_cage ._gabd .AbstractNum =append (_cage ._gabd .AbstractNum ,_eefa );_cage ._gabd .Num =append (_cage ._gabd .Num ,_dccgc );return NumberingDefinition {_eefa };};

// InsertRowBefore inserts a row before another row
func (_fbgbg Table )InsertRowBefore (r Row )Row {for _eddb ,_eebc :=range _fbgbg ._aefb .EG_ContentRowContent {if len (_eebc .Tr )> 0&&r .X ()==_eebc .Tr [0]{_gcda :=_eb .NewEG_ContentRowContent ();_fbgbg ._aefb .EG_ContentRowContent =append (_fbgbg ._aefb .EG_ContentRowContent ,nil );copy (_fbgbg ._aefb .EG_ContentRowContent [_eddb +1:],_fbgbg ._aefb .EG_ContentRowContent [_eddb :]);_fbgbg ._aefb .EG_ContentRowContent [_eddb ]=_gcda ;_dgfbc :=_eb .NewCT_Row ();_gcda .Tr =append (_gcda .Tr ,_dgfbc );return Row {_fbgbg ._gdbc ,_dgfbc };};};return _fbgbg .AddRow ();};

// Headers returns the headers defined in the document.
func (_gbe *Document )Headers ()[]Header {_eag :=[]Header {};for _ ,_bgb :=range _gbe ._bb {_eag =append (_eag ,Header {_gbe ,_bgb });};return _eag ;};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_cf CellProperties )SetColumnSpan (cols int ){if cols ==0{_cf ._beg .GridSpan =nil ;}else {_cf ._beg .GridSpan =_eb .NewCT_DecimalNumber ();_cf ._beg .GridSpan .ValAttr =int64 (cols );};};

// RemoveRun removes a child run from a paragraph.
func (_fbbef Paragraph )RemoveRun (r Run ){for _ ,_bddad :=range _fbbef ._ebg .EG_PContent {for _aagc ,_eefed :=range _bddad .EG_ContentRunContent {if _eefed .R ==r ._ccfe {copy (_bddad .EG_ContentRunContent [_aagc :],_bddad .EG_ContentRunContent [_aagc +1:]);_bddad .EG_ContentRunContent =_bddad .EG_ContentRunContent [0:len (_bddad .EG_ContentRunContent )-1];};if _eefed .Sdt !=nil &&_eefed .Sdt .SdtContent !=nil {for _ffeg ,_bcg :=range _eefed .Sdt .SdtContent .EG_ContentRunContent {if _bcg .R ==r ._ccfe {copy (_eefed .Sdt .SdtContent .EG_ContentRunContent [_ffeg :],_eefed .Sdt .SdtContent .EG_ContentRunContent [_ffeg +1:]);_eefed .Sdt .SdtContent .EG_ContentRunContent =_eefed .Sdt .SdtContent .EG_ContentRunContent [0:len (_eefed .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// Paragraph is a paragraph within a document.
type Paragraph struct{_dfbc *Document ;_ebg *_eb .CT_P ;};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_cge *_eb .CT_Bookmark };

// AddParagraph adds a paragraph to the footnote.
func (_bee Footnote )AddParagraph ()Paragraph {_bbac :=_eb .NewEG_ContentBlockContent ();_eegf :=len (_bee ._ccfg .EG_BlockLevelElts [0].EG_ContentBlockContent );_bee ._ccfg .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_bee ._ccfg .EG_BlockLevelElts [0].EG_ContentBlockContent ,_bbac );_ccgbf :=_eb .NewCT_P ();var _faaf *_eb .CT_String ;if _eegf !=0{_aag :=len (_bee ._ccfg .EG_BlockLevelElts [0].EG_ContentBlockContent [_eegf -1].P );_faaf =_bee ._ccfg .EG_BlockLevelElts [0].EG_ContentBlockContent [_eegf -1].P [_aag -1].PPr .PStyle ;}else {_faaf =_eb .NewCT_String ();_faaf .ValAttr ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065";};_bbac .P =append (_bbac .P ,_ccgbf );_acgc :=Paragraph {_bee ._bebdf ,_ccgbf };_acgc ._ebg .PPr =_eb .NewCT_PPr ();_acgc ._ebg .PPr .PStyle =_faaf ;_acgc ._ebg .PPr .RPr =_eb .NewCT_ParaRPr ();return _acgc ;};

// SetRightPct sets the cell right margin
func (_bg CellMargins )SetRightPct (pct float64 ){_bg ._gffa .Right =_eb .NewCT_TblWidth ();_ceg (_bg ._gffa .Right ,pct );};

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_acec *_eb .CT_Lvl };

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_be AnchoredDrawing )SetTextWrapNone (){_be ._df .Choice =&_eb .WdEG_WrapTypeChoice {};_be ._df .Choice .WrapNone =_eb .NewWdCT_WrapNone ();};

// SetRight sets the cell right margin
func (_efe CellMargins )SetRight (d _gaf .Distance ){_efe ._gffa .Right =_eb .NewCT_TblWidth ();_ege (_efe ._gffa .Right ,d );};

// SetWidthPercent sets the cell to a width percentage.
func (_ag CellProperties )SetWidthPercent (pct float64 ){_ag ._beg .TcW =_eb .NewCT_TblWidth ();_ag ._beg .TcW .TypeAttr =_eb .ST_TblWidthPct ;_ag ._beg .TcW .WAttr =&_eb .ST_MeasurementOrPercent {};_ag ._beg .TcW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_ag ._beg .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// Type returns the type of the field.
func (_aggb FormField )Type ()FormFieldType {if _aggb ._bfbd .TextInput !=nil {return FormFieldTypeText ;}else if _aggb ._bfbd .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _aggb ._bfbd .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_bd .DocBase ;_dddb *_eb .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_bb []*_eb .Hdr ;_adf []_bd .Relationships ;_ddfb []*_eb .Ftr ;_bcca []_bd .Relationships ;_bdfb _bd .Relationships ;_ede []*_add .Theme ;_gaa *_eb .WebSettings ;_cef *_eb .Fonts ;_bfc *_eb .Endnotes ;_edeb *_eb .Footnotes ;_bgf []*_ac .Ocx ;_ba string ;};

// SetStyle sets the table style name.
func (_dabcf TableProperties )SetStyle (name string ){if name ==""{_dabcf ._bbbf .TblStyle =nil ;}else {_dabcf ._bbbf .TblStyle =_eb .NewCT_String ();_dabcf ._bbbf .TblStyle .ValAttr =name ;};};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_aba AnchoredDrawing )SetAlignment (h _eb .WdST_AlignH ,v _eb .WdST_AlignV ){_aba .SetHAlignment (h );_aba .SetVAlignment (v );};

// GetColor returns the color.Color object representing the run color.
func (_fegfe RunProperties )GetColor ()_gb .Color {if _geaee :=_fegfe ._beee .Color ;_geaee !=nil {_bcdf :=_geaee .ValAttr ;if _bcdf .ST_HexColorRGB !=nil {return _gb .FromHex (*_bcdf .ST_HexColorRGB );};};return _gb .Color {};};

// Underline returns the type of paragraph underline.
func (_ccfd ParagraphProperties )Underline ()_eb .ST_Underline {if _edab :=_ccfd ._ffge .RPr .U ;_edab !=nil {return _edab .ValAttr ;};return 0;};

// Styles returns all styles.
func (_aecce Styles )Styles ()[]Style {_aeef :=[]Style {};for _ ,_cafb :=range _aecce ._efdd .Style {_aeef =append (_aeef ,Style {_cafb });};return _aeef ;};

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_dbcd *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_fdba :=range _dbcd ._bdfb .X ().Relationship {if _fdba .IdAttr ==idAttr {return _fdba .TargetAttr ;};};return "";};func _gfba (_cbcc *_eb .CT_Tbl ,_afdb *_eb .CT_P ,_dabd bool )*_eb .CT_Tbl {for _ ,_fdgd :=range _cbcc .EG_ContentRowContent {for _ ,_age :=range _fdgd .Tr {for _ ,_cdf :=range _age .EG_ContentCellContent {for _ ,_fge :=range _cdf .Tc {for _fc ,_cbe :=range _fge .EG_BlockLevelElts {for _ ,_cccg :=range _cbe .EG_ContentBlockContent {for _fbge ,_gdca :=range _cccg .P {if _gdca ==_afdb {_gac :=_eb .NewEG_BlockLevelElts ();_ecc :=_eb .NewEG_ContentBlockContent ();_gac .EG_ContentBlockContent =append (_gac .EG_ContentBlockContent ,_ecc );_dcg :=_eb .NewCT_Tbl ();_ecc .Tbl =append (_ecc .Tbl ,_dcg );_fge .EG_BlockLevelElts =append (_fge .EG_BlockLevelElts ,nil );if _dabd {copy (_fge .EG_BlockLevelElts [_fc +1:],_fge .EG_BlockLevelElts [_fc :]);_fge .EG_BlockLevelElts [_fc ]=_gac ;if _fbge !=0{_gefa :=_eb .NewEG_BlockLevelElts ();_dfde :=_eb .NewEG_ContentBlockContent ();_gefa .EG_ContentBlockContent =append (_gefa .EG_ContentBlockContent ,_dfde );_dfde .P =_cccg .P [:_fbge ];_fge .EG_BlockLevelElts =append (_fge .EG_BlockLevelElts ,nil );copy (_fge .EG_BlockLevelElts [_fc +1:],_fge .EG_BlockLevelElts [_fc :]);_fge .EG_BlockLevelElts [_fc ]=_gefa ;};_cccg .P =_cccg .P [_fbge :];}else {copy (_fge .EG_BlockLevelElts [_fc +2:],_fge .EG_BlockLevelElts [_fc +1:]);_fge .EG_BlockLevelElts [_fc +1]=_gac ;if _fbge !=len (_cccg .P )-1{_dae :=_eb .NewEG_BlockLevelElts ();_fdb :=_eb .NewEG_ContentBlockContent ();_dae .EG_ContentBlockContent =append (_dae .EG_ContentBlockContent ,_fdb );_fdb .P =_cccg .P [_fbge +1:];_fge .EG_BlockLevelElts =append (_fge .EG_BlockLevelElts ,nil );copy (_fge .EG_BlockLevelElts [_fc +3:],_fge .EG_BlockLevelElts [_fc +2:]);_fge .EG_BlockLevelElts [_fc +2]=_dae ;}else {_accb :=_eb .NewEG_BlockLevelElts ();_bfd :=_eb .NewEG_ContentBlockContent ();_accb .EG_ContentBlockContent =append (_accb .EG_ContentBlockContent ,_bfd );_bfd .P =[]*_eb .CT_P {_eb .NewCT_P ()};_fge .EG_BlockLevelElts =append (_fge .EG_BlockLevelElts ,nil );copy (_fge .EG_BlockLevelElts [_fc +3:],_fge .EG_BlockLevelElts [_fc +2:]);_fge .EG_BlockLevelElts [_fc +2]=_accb ;};_cccg .P =_cccg .P [:_fbge +1];};return _dcg ;};};for _ ,_agc :=range _cccg .Tbl {_ccdd :=_gfba (_agc ,_afdb ,_dabd );if _ccdd !=nil {return _ccdd ;};};};};};};};};return nil ;};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_aeb *Document )Paragraphs ()[]Paragraph {_geea :=[]Paragraph {};if _aeb ._dddb .Body ==nil {return nil ;};for _ ,_caeee :=range _aeb ._dddb .Body .EG_BlockLevelElts {for _ ,_aeeb :=range _caeee .EG_ContentBlockContent {for _ ,_eca :=range _aeeb .P {_geea =append (_geea ,Paragraph {_aeb ,_eca });};};};for _ ,_bcfa :=range _aeb .Tables (){for _ ,_gged :=range _bcfa .Rows (){for _ ,_cdb :=range _gged .Cells (){_geea =append (_geea ,_cdb .Paragraphs ()...);};};};return _geea ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_badb TableStyleProperties )SetCellSpacingAuto (){_badb ._fegfa .TblCellSpacing =_eb .NewCT_TblWidth ();_badb ._fegfa .TblCellSpacing .TypeAttr =_eb .ST_TblWidthAuto ;};

// SetRowBandSize sets the number of Rows in the row band
func (_gfbb TableStyleProperties )SetRowBandSize (rows int64 ){_gfbb ._fegfa .TblStyleRowBandSize =_eb .NewCT_DecimalNumber ();_gfbb ._fegfa .TblStyleRowBandSize .ValAttr =rows ;};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_egda Document )SetConformance (conformanceAttr _eg .ST_ConformanceClass ){_egda ._dddb .ConformanceAttr =conformanceAttr ;};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_defab ParagraphProperties )AddSection (t _eb .ST_SectionMark )Section {_defab ._ffge .SectPr =_eb .NewCT_SectPr ();if t !=_eb .ST_SectionMarkUnset {_defab ._ffge .SectPr .Type =_eb .NewCT_SectType ();_defab ._ffge .SectPr .Type .ValAttr =t ;};return Section {_defab ._eedg ,_defab ._ffge .SectPr };};

// Properties returns the cell properties.
func (_fbg Cell )Properties ()CellProperties {if _fbg ._dd .TcPr ==nil {_fbg ._dd .TcPr =_eb .NewCT_TcPr ();};return CellProperties {_fbg ._dd .TcPr };};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_afbf TableLook )SetLastRow (on bool ){if !on {_afbf ._gfaf .LastRowAttr =&_eg .ST_OnOff {};_afbf ._gfaf .LastRowAttr .ST_OnOff1 =_eg .ST_OnOff1Off ;}else {_afbf ._gfaf .LastRowAttr =&_eg .ST_OnOff {};_afbf ._gfaf .LastRowAttr .ST_OnOff1 =_eg .ST_OnOff1On ;};};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_dg AnchoredDrawing )SetName (name string ){_dg ._df .DocPr .NameAttr =name ;for _ ,_fb :=range _dg ._df .Graphic .GraphicData .Any {if _caa ,_dfc :=_fb .(*_abb .Pic );_dfc {_caa .NvPicPr .CNvPr .DescrAttr =_c .String (name );};};};

// AddStyle adds a new empty style.
func (_efaad Styles )AddStyle (styleID string ,t _eb .ST_StyleType ,isDefault bool )Style {_fccg :=_eb .NewCT_Style ();_fccg .TypeAttr =t ;if isDefault {_fccg .DefaultAttr =&_eg .ST_OnOff {};_fccg .DefaultAttr .Bool =_c .Bool (isDefault );};_fccg .StyleIdAttr =_c .String (styleID );_efaad ._efdd .Style =append (_efaad ._efdd .Style ,_fccg );return Style {_fccg };};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_cebe RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_cebe ._beee .Dstrike =nil ;}else {_cebe ._beee .Dstrike =_eb .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_gfeg Numbering )X ()*_eb .Numbering {return _gfeg ._gabd };

// ParagraphStyles returns only the paragraph styles.
func (_efga Styles )ParagraphStyles ()[]Style {_dddbd :=[]Style {};for _ ,_fccfg :=range _efga ._efdd .Style {if _fccfg .TypeAttr !=_eb .ST_StyleTypeParagraph {continue ;};_dddbd =append (_dddbd ,Style {_fccfg });};return _dddbd ;};

// SetThemeColor sets the color from the theme.
func (_bdc Color )SetThemeColor (t _eb .ST_ThemeColor ){_bdc ._db .ThemeColorAttr =t };

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_dbcg NumberingDefinition )AddLevel ()NumberingLevel {_dbff :=_eb .NewCT_Lvl ();_dbff .Start =&_eb .CT_DecimalNumber {ValAttr :1};_dbff .IlvlAttr =int64 (len (_dbcg ._affe .Lvl ));_dbcg ._affe .Lvl =append (_dbcg ._affe .Lvl ,_dbff );return NumberingLevel {_dbff };};

// FormFieldType is the type of the form field.
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_ecdbe Paragraph )AddFootnote (text string )Footnote {var _gcfab int64 ;if _ecdbe ._dfbc .HasFootnotes (){for _ ,_afc :=range _ecdbe ._dfbc .Footnotes (){if _afc .id ()> _gcfab {_gcfab =_afc .id ();};};_gcfab ++;}else {_gcfab =0;_ecdbe ._dfbc ._edeb =&_eb .Footnotes {};_ecdbe ._dfbc ._edeb .CT_Footnotes =_eb .CT_Footnotes {};_ecdbe ._dfbc ._edeb .Footnote =make ([]*_eb .CT_FtnEdn ,0);};_aggbb :=_eb .NewCT_FtnEdn ();_dcdgf :=_eb .NewCT_FtnEdnRef ();_dcdgf .IdAttr =_gcfab ;_ecdbe ._dfbc ._edeb .CT_Footnotes .Footnote =append (_ecdbe ._dfbc ._edeb .CT_Footnotes .Footnote ,_aggbb );_bfbaa :=_ecdbe .AddRun ();_dccf :=_bfbaa .Properties ();_dccf .SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0041n\u0063\u0068\u006f\u0072");_bfbaa ._ccfe .EG_RunInnerContent =[]*_eb .EG_RunInnerContent {_eb .NewEG_RunInnerContent ()};_bfbaa ._ccfe .EG_RunInnerContent [0].FootnoteReference =_dcdgf ;_gebg :=Footnote {_ecdbe ._dfbc ,_aggbb };_gebg ._ccfg .IdAttr =_gcfab ;_gebg ._ccfg .EG_BlockLevelElts =[]*_eb .EG_BlockLevelElts {_eb .NewEG_BlockLevelElts ()};_fbgbd :=_gebg .AddParagraph ();_fbgbd .Properties ().SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065");_fbgbd ._ebg .PPr .RPr =_eb .NewCT_ParaRPr ();_acce :=_fbgbd .AddRun ();_acce .AddTab ();_acce .AddText (text );return _gebg ;};func (_fag *Document )tables (_fcc *_eb .EG_ContentBlockContent )[]Table {_cdecd :=[]Table {};for _ ,_fagg :=range _fcc .Tbl {_cdecd =append (_cdecd ,Table {_fag ,_fagg });for _ ,_fbga :=range _fagg .EG_ContentRowContent {for _ ,_eef :=range _fbga .Tr {for _ ,_bga :=range _eef .EG_ContentCellContent {for _ ,_efec :=range _bga .Tc {for _ ,_fce :=range _efec .EG_BlockLevelElts {for _ ,_dgda :=range _fce .EG_ContentBlockContent {for _ ,_bcd :=range _fag .tables (_dgda ){_cdecd =append (_cdecd ,_bcd );};};};};};};};};return _cdecd ;};

// SaveToFile writes the document out to a file.
func (_bbd *Document )SaveToFile (path string )error {_bdd ,_dag :=_fe .Create (path );if _dag !=nil {return _dag ;};defer _bdd .Close ();return _bbd .Save (_bdd );};

// SetEndIndent controls the end indentation.
func (_fbcd ParagraphProperties )SetEndIndent (m _gaf .Distance ){if _fbcd ._ffge .Ind ==nil {_fbcd ._ffge .Ind =_eb .NewCT_Ind ();};if m ==_gaf .Zero {_fbcd ._ffge .Ind .EndAttr =nil ;}else {_fbcd ._ffge .Ind .EndAttr =&_eb .ST_SignedTwipsMeasure {};_fbcd ._ffge .Ind .EndAttr .Int64 =_c .Int64 (int64 (m /_gaf .Twips ));};};

// RemoveParagraph removes a paragraph from a document.
func (_gafc *Document )RemoveParagraph (p Paragraph ){if _gafc ._dddb .Body ==nil {return ;};for _ ,_gbb :=range _gafc ._dddb .Body .EG_BlockLevelElts {for _ ,_egbc :=range _gbb .EG_ContentBlockContent {for _eged ,_cdff :=range _egbc .P {if _cdff ==p ._ebg {copy (_egbc .P [_eged :],_egbc .P [_eged +1:]);_egbc .P =_egbc .P [0:len (_egbc .P )-1];return ;};};if _egbc .Sdt !=nil &&_egbc .Sdt .SdtContent !=nil &&_egbc .Sdt .SdtContent .P !=nil {for _aecf ,_afg :=range _egbc .Sdt .SdtContent .P {if _afg ==p ._ebg {copy (_egbc .P [_aecf :],_egbc .P [_aecf +1:]);_egbc .P =_egbc .P [0:len (_egbc .P )-1];return ;};};};};};for _ ,_bgef :=range _gafc .Tables (){for _ ,_dfcf :=range _bgef .Rows (){for _ ,_agea :=range _dfcf .Cells (){for _ ,_bdg :=range _agea ._dd .EG_BlockLevelElts {for _ ,_cadc :=range _bdg .EG_ContentBlockContent {for _fba ,_dee :=range _cadc .P {if _dee ==p ._ebg {copy (_cadc .P [_fba :],_cadc .P [_fba +1:]);_cadc .P =_cadc .P [0:len (_cadc .P )-1];return ;};};};};};};};for _ ,_bgab :=range _gafc .Headers (){_bgab .RemoveParagraph (p );};for _ ,_dfbd :=range _gafc .Footers (){_dfbd .RemoveParagraph (p );};};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_gga FormField )SetCalcOnExit (calcOnExit bool ){_eece :=_eb .NewCT_OnOff ();_eece .ValAttr =&_eg .ST_OnOff {Bool :&calcOnExit };_gga ._bfbd .CalcOnExit =[]*_eb .CT_OnOff {_eece };};

// SetMultiLevelType sets the multilevel type.
func (_dabcd NumberingDefinition )SetMultiLevelType (t _eb .ST_MultiLevelType ){if t ==_eb .ST_MultiLevelTypeUnset {_dabcd ._affe .MultiLevelType =nil ;}else {_dabcd ._affe .MultiLevelType =_eb .NewCT_MultiLevelType ();_dabcd ._affe .MultiLevelType .ValAttr =t ;};};

// X returns the inner wrapped XML type.
func (_aca Cell )X ()*_eb .CT_Tc {return _aca ._dd };func _cggc (_gbfbc *_eb .CT_OnOff )OnOffValue {if _gbfbc ==nil {return OnOffValueUnset ;};if _gbfbc .ValAttr !=nil &&_gbfbc .ValAttr .Bool !=nil &&*_gbfbc .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_bdfg HyperLink )AddRun ()Run {_fdfb :=_eb .NewEG_ContentRunContent ();_bdfg ._aab .EG_ContentRunContent =append (_bdfg ._aab .EG_ContentRunContent ,_fdfb );_cbcb :=_eb .NewCT_R ();_fdfb .R =_cbcb ;return Run {_bdfg ._cbba ,_cbcb };};

// X returns the inner wrapped XML type.
func (_efgcd TableConditionalFormatting )X ()*_eb .CT_TblStylePr {return _efgcd ._egf };

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to dispay on a separate page.
func (_bgac ParagraphProperties )SetWindowControl (b bool ){if !b {_bgac ._ffge .WidowControl =nil ;}else {_bgac ._ffge .WidowControl =_eb .NewCT_OnOff ();};};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_gaegc RunProperties )BoldValue ()OnOffValue {return _cggc (_gaegc ._beee .B )};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_gbbgd *Document ;_ccfe *_eb .CT_R ;};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_bdgc RunProperties )SetFontFamily (family string ){if _bdgc ._beee .RFonts ==nil {_bdgc ._beee .RFonts =_eb .NewCT_Fonts ();};_bdgc ._beee .RFonts .AsciiAttr =_c .String (family );_bdgc ._beee .RFonts .HAnsiAttr =_c .String (family );_bdgc ._beee .RFonts .EastAsiaAttr =_c .String (family );};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_ecfe TableProperties )SetLayout (l _eb .ST_TblLayoutType ){if l ==_eb .ST_TblLayoutTypeUnset ||l ==_eb .ST_TblLayoutTypeAutofit {_ecfe ._bbbf .TblLayout =nil ;}else {_ecfe ._bbbf .TblLayout =_eb .NewCT_TblLayoutType ();_ecfe ._bbbf .TblLayout .TypeAttr =l ;};};

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_cgfb FormField )SetPossibleValues (values []string ){if _cgfb ._bfbd .DdList !=nil {for _ ,_bgbdd :=range values {_gadbg :=_eb .NewCT_String ();_gadbg .ValAttr =_bgbdd ;_cgfb ._bfbd .DdList .ListEntry =append (_cgfb ._bfbd .DdList .ListEntry ,_gadbg );};};};func (_ccad Footnote )content ()[]*_eb .EG_ContentBlockContent {var _acdb []*_eb .EG_ContentBlockContent ;for _ ,_ddb :=range _ccad ._ccfg .EG_BlockLevelElts {_acdb =append (_acdb ,_ddb .EG_ContentBlockContent ...);};return _acdb ;};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_cded ,_abec :=_fe .Open (filename );if _abec !=nil {return nil ,_adc .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_abec );};defer _cded .Close ();_gafg ,_abec :=_fe .Stat (filename );if _abec !=nil {return nil ,_adc .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_abec );};_ =_gafg ;return Read (_cded ,_gafg .Size ());};

// DoubleStrike returns true if run is double striked.
func (_dbab RunProperties )DoubleStrike ()bool {return _bacc (_dbab ._beee .Dstrike )};func (_bgga Paragraph )addEndBookmark (_abbbb int64 )*_eb .CT_MarkupRange {_feaa :=_eb .NewEG_PContent ();_bgga ._ebg .EG_PContent =append (_bgga ._ebg .EG_PContent ,_feaa );_gefc :=_eb .NewEG_ContentRunContent ();_feed :=_eb .NewEG_RunLevelElts ();_dabb :=_eb .NewEG_RangeMarkupElements ();_bded :=_eb .NewCT_MarkupRange ();_bded .IdAttr =_abbbb ;_dabb .BookmarkEnd =_bded ;_feaa .EG_ContentRunContent =append (_feaa .EG_ContentRunContent ,_gefc );_gefc .EG_RunLevelElts =append (_gefc .EG_RunLevelElts ,_feed );_feed .EG_RangeMarkupElements =append (_feed .EG_RangeMarkupElements ,_dabb );return _bded ;};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_gfaf *_eb .CT_TblLook };

// SetWidth sets the table with to a specified width.
func (_eadcf TableProperties )SetWidth (d _gaf .Distance ){_eadcf ._bbbf .TblW =_eb .NewCT_TblWidth ();_eadcf ._bbbf .TblW .TypeAttr =_eb .ST_TblWidthDxa ;_eadcf ._bbbf .TblW .WAttr =&_eb .ST_MeasurementOrPercent {};_eadcf ._bbbf .TblW .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_eadcf ._bbbf .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (d /_gaf .Twips ));};

// SetKerning sets the run's font kerning.
func (_bgcab RunProperties )SetKerning (size _gaf .Distance ){_bgcab ._beee .Kern =_eb .NewCT_HpsMeasure ();_bgcab ._beee .Kern .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (size /_gaf .HalfPoint ));};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_eb .NewStyles ()}};

// AddCell adds a cell to a row and returns it
func (_dfcgd Row )AddCell ()Cell {_babbb :=_eb .NewEG_ContentCellContent ();_dfcgd ._ccedf .EG_ContentCellContent =append (_dfcgd ._ccedf .EG_ContentCellContent ,_babbb );_aegf :=_eb .NewCT_Tc ();_babbb .Tc =append (_babbb .Tc ,_aegf );return Cell {_dfcgd ._bgcbb ,_aegf };};

// RowProperties are the properties for a row within a table
type RowProperties struct{_gfggc *_eb .CT_TrPr };

// CellProperties are a table cells properties within a document.
type CellProperties struct{_beg *_eb .CT_TcPr };

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_cab Document )AddHyperlink (url string )_bd .Hyperlink {return _cab ._bdfb .AddHyperlink (url )};

// Header is a header for a document section.
type Header struct{_ceda *Document ;_dgab *_eb .Hdr ;};

// Properties returns the paragraph properties.
func (_cgdb Paragraph )Properties ()ParagraphProperties {_cgdb .ensurePPr ();return ParagraphProperties {_cgdb ._dfbc ,_cgdb ._ebg .PPr };};func (_bfba Endnote )content ()[]*_eb .EG_ContentBlockContent {var _fdaf []*_eb .EG_ContentBlockContent ;for _ ,_adge :=range _bfba ._gdfa .EG_BlockLevelElts {_fdaf =append (_fdaf ,_adge .EG_ContentBlockContent ...);};return _fdaf ;};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_gacee *Document )Append (d1orig *Document )error {_ggce ,_faea :=d1orig .Copy ();if _faea !=nil {return _faea ;};_gacee .DocBase =_gacee .DocBase .Append (_ggce .DocBase );if _ggce ._dddb .ConformanceAttr !=_eg .ST_ConformanceClassStrict {_gacee ._dddb .ConformanceAttr =_ggce ._dddb .ConformanceAttr ;};_ecgd :=_gacee ._bdfb .X ().Relationship ;_dba :=_ggce ._bdfb .X ().Relationship ;_effdg :=_ggce ._dddb .Body ;_aaa :=map[string ]string {};_dgdc :=map[int64 ]int64 {};_dgbfd :=map[int64 ]int64 {};for _ ,_gfcf :=range _dba {_aebb :=true ;_cdeg :=_gfcf .IdAttr ;_bfgd :=_gfcf .TargetAttr ;_bddb :=_gfcf .TypeAttr ;_bgc :=_bddb ==_c .ImageType ;_gea :=_bddb ==_c .HyperLinkType ;var _cfeb string ;for _ ,_dgc :=range _ecgd {if _dgc .TypeAttr ==_bddb &&_dgc .TargetAttr ==_bfgd {_aebb =false ;_cfeb =_dgc .IdAttr ;break ;};};if _bgc {_cdbd :="\u0077\u006f\u0072d\u002f"+_bfgd ;for _ ,_abaa :=range _ggce .DocBase .Images {if _abaa .Target ()==_cdbd {_cea ,_cagb :=_bd .ImageFromStorage (_abaa .Path ());if _cagb !=nil {return _cagb ;};_efb ,_cagb :=_gacee .AddImage (_cea );if _cagb !=nil {return _cagb ;};_cfeb =_efb .RelID ();break ;};};}else if _aebb {if _gea {_fgae :=_gacee ._bdfb .AddHyperlink (_bfgd );_cfeb =_bd .Relationship (_fgae ).ID ();}else {_cbdb :=_gacee ._bdfb .AddRelationship (_bfgd ,_bddb );_cfeb =_cbdb .X ().IdAttr ;};};if _cdeg !=_cfeb {_aaa [_cdeg ]=_cfeb ;};};if _effdg .SectPr !=nil {for _ ,_beag :=range _effdg .SectPr .EG_HdrFtrReferences {if _beag .HeaderReference !=nil {if _cdcg ,_ecce :=_aaa [_beag .HeaderReference .IdAttr ];_ecce {_beag .HeaderReference .IdAttr =_cdcg ;_gacee ._adf =append (_gacee ._adf ,_bd .NewRelationships ());};}else if _beag .FooterReference !=nil {if _bab ,_gafgf :=_aaa [_beag .FooterReference .IdAttr ];_gafgf {_beag .FooterReference .IdAttr =_bab ;_gacee ._bcca =append (_gacee ._bcca ,_bd .NewRelationships ());};};};};_cffe ,_fdfd :=_gacee ._bfc ,_ggce ._bfc ;if _cffe !=nil {if _fdfd !=nil {if _cffe .Endnote !=nil {if _fdfd .Endnote !=nil {_caea :=int64 (len (_cffe .Endnote )+1);for _ ,_bdge :=range _fdfd .Endnote {_eacd :=_bdge .IdAttr ;if _eacd > 0{_bdge .IdAttr =_caea ;_cffe .Endnote =append (_cffe .Endnote ,_bdge );_dgbfd [_eacd ]=_caea ;_caea ++;};};};}else {_cffe .Endnote =_fdfd .Endnote ;};};}else if _fdfd !=nil {_cffe =_fdfd ;};_gacee ._bfc =_cffe ;_ecaa ,_gbbg :=_gacee ._edeb ,_ggce ._edeb ;if _ecaa !=nil {if _gbbg !=nil {if _ecaa .Footnote !=nil {if _gbbg .Footnote !=nil {_ddgc :=int64 (len (_ecaa .Footnote )+1);for _ ,_ddda :=range _gbbg .Footnote {_afef :=_ddda .IdAttr ;if _afef > 0{_ddda .IdAttr =_ddgc ;_ecaa .Footnote =append (_ecaa .Footnote ,_ddda );_dgdc [_afef ]=_ddgc ;_ddgc ++;};};};}else {_ecaa .Footnote =_gbbg .Footnote ;};};}else if _gbbg !=nil {_ecaa =_gbbg ;};_gacee ._edeb =_ecaa ;for _ ,_aedg :=range _effdg .EG_BlockLevelElts {for _ ,_gcdb :=range _aedg .EG_ContentBlockContent {for _ ,_fbbe :=range _gcdb .P {_fdcfc (_fbbe ,_aaa );_ggea (_fbbe ,_aaa );_bfff (_fbbe ,_dgdc ,_dgbfd );};for _ ,_dbf :=range _gcdb .Tbl {_fffe (_dbf ,_aaa );_gaga (_dbf ,_aaa );_bdec (_dbf ,_dgdc ,_dgbfd );};};};_gacee ._dddb .Body .EG_BlockLevelElts =append (_gacee ._dddb .Body .EG_BlockLevelElts ,_ggce ._dddb .Body .EG_BlockLevelElts ...);if _gacee ._dddb .Body .SectPr ==nil {_gacee ._dddb .Body .SectPr =_ggce ._dddb .Body .SectPr ;}else {var _bfa ,_ccag bool ;for _ ,_bgbd :=range _gacee ._dddb .Body .SectPr .EG_HdrFtrReferences {if _bgbd .HeaderReference !=nil {_bfa =true ;}else if _bgbd .FooterReference !=nil {_ccag =true ;};};if !_bfa {for _ ,_ddce :=range _ggce ._dddb .Body .SectPr .EG_HdrFtrReferences {if _ddce .HeaderReference !=nil {_gacee ._dddb .Body .SectPr .EG_HdrFtrReferences =append (_gacee ._dddb .Body .SectPr .EG_HdrFtrReferences ,_ddce );break ;};};};if !_ccag {for _ ,_dabe :=range _ggce ._dddb .Body .SectPr .EG_HdrFtrReferences {if _dabe .FooterReference !=nil {_gacee ._dddb .Body .SectPr .EG_HdrFtrReferences =append (_gacee ._dddb .Body .SectPr .EG_HdrFtrReferences ,_dabe );break ;};};};if _gacee ._dddb .Body .SectPr .Cols ==nil &&_ggce ._dddb .Body .SectPr .Cols !=nil {_gacee ._dddb .Body .SectPr .Cols =_ggce ._dddb .Body .SectPr .Cols ;};};_cffc :=_gacee .Numbering ._gabd ;_acgg :=_ggce .Numbering ._gabd ;if _cffc !=nil {if _acgg !=nil {_cffc .NumPicBullet =append (_cffc .NumPicBullet ,_acgg .NumPicBullet ...);_cffc .AbstractNum =append (_cffc .AbstractNum ,_acgg .AbstractNum ...);_cffc .Num =append (_cffc .Num ,_acgg .Num ...);};}else if _acgg !=nil {_cffc =_acgg ;};_gacee .Numbering ._gabd =_cffc ;if _gacee .Styles ._efdd ==nil &&_ggce .Styles ._efdd !=nil {_gacee .Styles ._efdd =_ggce .Styles ._efdd ;};_gacee ._ede =append (_gacee ._ede ,_ggce ._ede ...);_gacee ._bgf =append (_gacee ._bgf ,_ggce ._bgf ...);if len (_gacee ._bb )==0{_gacee ._bb =_ggce ._bb ;};if len (_gacee ._ddfb )==0{_gacee ._ddfb =_ggce ._ddfb ;};_agbg :=_gacee ._gaa ;_feeb :=_ggce ._gaa ;if _agbg !=nil {if _feeb !=nil {if _agbg .Divs !=nil {if _feeb .Divs !=nil {_agbg .Divs .Div =append (_agbg .Divs .Div ,_feeb .Divs .Div ...);};}else {_agbg .Divs =_feeb .Divs ;};};_agbg .Frameset =nil ;}else if _feeb !=nil {_agbg =_feeb ;_agbg .Frameset =nil ;};_gacee ._gaa =_agbg ;_dada :=_gacee ._cef ;_acef :=_ggce ._cef ;if _dada !=nil {if _acef !=nil {if _dada .Font !=nil {if _acef .Font !=nil {for _ ,_dcfb :=range _acef .Font {_babg :=true ;for _ ,_adee :=range _dada .Font {if _adee .NameAttr ==_dcfb .NameAttr {_babg =false ;break ;};};if _babg {_dada .Font =append (_dada .Font ,_dcfb );};};};}else {_dada .Font =_acef .Font ;};};}else if _acef !=nil {_dada =_acef ;};_gacee ._cef =_dada ;return nil ;};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_eeeb Run )AddTab (){_gfae :=_eeeb .newIC ();_gfae .Tab =_eb .NewCT_Empty ()};

// Strike returns true if paragraph is striked.
func (_ccfa ParagraphProperties )Strike ()bool {return _bacc (_ccfa ._ffge .RPr .Strike )};

// Spacing returns the paragraph spacing settings.
func (_cgec ParagraphProperties )Spacing ()ParagraphSpacing {if _cgec ._ffge .Spacing ==nil {_cgec ._ffge .Spacing =_eb .NewCT_Spacing ();};return ParagraphSpacing {_cgec ._ffge .Spacing };};

// X returns the inner wrapped XML type.
func (_aaab RunProperties )X ()*_eb .CT_RPr {return _aaab ._beee };

// SetStyle sets the font size.
func (_bcaa RunProperties )SetStyle (style string ){if style ==""{_bcaa ._beee .RStyle =nil ;}else {_bcaa ._beee .RStyle =_eb .NewCT_String ();_bcaa ._beee .RStyle .ValAttr =style ;};};

// MergeFields returns the list of all mail merge fields found in the document.
func (_ffed Document )MergeFields ()[]string {_fcfe :=map[string ]struct{}{};for _ ,_dedab :=range _ffed .mergeFields (){_fcfe [_dedab ._fgaa ]=struct{}{};};_fbfd :=[]string {};for _cffcc :=range _fcfe {_fbfd =append (_fbfd ,_cffcc );};return _fbfd ;};

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_afbe Section )GetHeader (t _eb .ST_HdrFtr )(Header ,bool ){for _ ,_gagg :=range _afbe ._faggf .EG_HdrFtrReferences {if _gagg .HeaderReference .TypeAttr ==t {for _ ,_effg :=range _afbe ._ggad .Headers (){_fdgc :=_afbe ._ggad ._bdfb .FindRIDForN (_effg .Index (),_c .HeaderType );if _fdgc ==_gagg .HeaderReference .IdAttr {return _effg ,true ;};};};};return Header {},false ;};func _fgag (_cbda *_eb .CT_Border ,_ggaf _eb .ST_Border ,_bdfe _gb .Color ,_feebb _gaf .Distance ){_cbda .ValAttr =_ggaf ;_cbda .ColorAttr =&_eb .ST_HexColor {};if _bdfe .IsAuto (){_cbda .ColorAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;}else {_cbda .ColorAttr .ST_HexColorRGB =_bdfe .AsRGBString ();};if _feebb !=_gaf .Zero {_cbda .SzAttr =_c .Uint64 (uint64 (_feebb /_gaf .Point *8));};};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_gfcb ParagraphProperties )Style ()string {if _gfcb ._ffge .PStyle !=nil {return _gfcb ._ffge .PStyle .ValAttr ;};return "";};

// RightToLeft returns true if paragraph text goes from right to left.
func (_cggce ParagraphProperties )RightToLeft ()bool {return _bacc (_cggce ._ffge .RPr .Rtl )};

// SetWidthAuto sets the the cell width to automatic.
func (_ae CellProperties )SetWidthAuto (){_ae ._beg .TcW =_eb .NewCT_TblWidth ();_ae ._beg .TcW .TypeAttr =_eb .ST_TblWidthAuto ;};

// SetColor sets a specific color or auto.
func (_cca Color )SetColor (v _gb .Color ){if v .IsAuto (){_cca ._db .ValAttr .ST_HexColorAuto =_eb .ST_HexColorAutoAuto ;_cca ._db .ValAttr .ST_HexColorRGB =nil ;}else {_cca ._db .ValAttr .ST_HexColorAuto =_eb .ST_HexColorAutoUnset ;_cca ._db .ValAttr .ST_HexColorRGB =v .AsRGBString ();};};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_ccca *_eb .CT_Spacing };

// AddField adds a field (automatically computed text) to the document.
func (_dgdd Run )AddField (code string ){_dgdd .AddFieldWithFormatting (code ,"",true )};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_bc Bookmark )Name ()string {return _bc ._cge .NameAttr };func _fdcfc (_begg *_eb .CT_P ,_dbbd map[string ]string ){for _ ,_cebd :=range _begg .EG_PContent {for _ ,_adace :=range _cebd .EG_ContentRunContent {if _adace .R !=nil {for _ ,_efef :=range _adace .R .EG_RunInnerContent {_fcad :=_efef .Drawing ;if _fcad !=nil {for _ ,_aaceb :=range _fcad .Anchor {for _ ,_eeaf :=range _aaceb .Graphic .GraphicData .Any {switch _bag :=_eeaf .(type ){case *_abb .Pic :if _bag .BlipFill !=nil &&_bag .BlipFill .Blip !=nil {_eaga (_bag .BlipFill .Blip ,_dbbd );};default:};};};for _ ,_ced :=range _fcad .Inline {for _ ,_edeag :=range _ced .Graphic .GraphicData .Any {switch _eaf :=_edeag .(type ){case *_abb .Pic :if _eaf .BlipFill !=nil &&_eaf .BlipFill .Blip !=nil {_eaga (_eaf .BlipFill .Blip ,_dbbd );};default:};};};};};};};};};

// SetLeft sets the cell left margin
func (_cgf CellMargins )SetLeft (d _gaf .Distance ){_cgf ._gffa .Left =_eb .NewCT_TblWidth ();_ege (_cgf ._gffa .Left ,d );};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_bggd ,_abee :=Open (filename );if _abee !=nil {return nil ,_abee ;};_bggd ._dddb .Body =_eb .NewCT_Body ();return _bggd ,nil ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_abe CellBorders )SetRight (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_abe ._acae .Right =_eb .NewCT_Border ();_fgag (_abe ._acae .Right ,t ,c ,thickness );};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_cedc Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_cedc .ensurePPr ();if _cedc ._ebg .PPr .NumPr ==nil {_cedc ._ebg .PPr .NumPr =_eb .NewCT_NumPr ();};_becg :=_eb .NewCT_DecimalNumber ();_fbfbc :=int64 (-1);for _ ,_faafd :=range _cedc ._dfbc .Numbering ._gabd .Num {if _faafd .AbstractNumId !=nil &&_faafd .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_fbfbc =_faafd .NumIdAttr ;};};if _fbfbc ==-1{_dcef :=_eb .NewCT_Num ();_cedc ._dfbc .Numbering ._gabd .Num =append (_cedc ._dfbc .Numbering ._gabd .Num ,_dcef );_dcef .NumIdAttr =int64 (len (_cedc ._dfbc .Numbering ._gabd .Num ));_dcef .AbstractNumId =_eb .NewCT_DecimalNumber ();_dcef .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_becg .ValAttr =_fbfbc ;_cedc ._ebg .PPr .NumPr .NumId =_becg ;};func (_edgg Paragraph )insertRun (_bcfgc Run ,_agee bool )Run {for _ ,_deff :=range _edgg ._ebg .EG_PContent {for _gdag ,_dfdb :=range _deff .EG_ContentRunContent {if _dfdb .R ==_bcfgc .X (){_bggg :=_eb .NewCT_R ();_deff .EG_ContentRunContent =append (_deff .EG_ContentRunContent ,nil );if _agee {copy (_deff .EG_ContentRunContent [_gdag +1:],_deff .EG_ContentRunContent [_gdag :]);_deff .EG_ContentRunContent [_gdag ]=_eb .NewEG_ContentRunContent ();_deff .EG_ContentRunContent [_gdag ].R =_bggg ;}else {copy (_deff .EG_ContentRunContent [_gdag +2:],_deff .EG_ContentRunContent [_gdag +1:]);_deff .EG_ContentRunContent [_gdag +1]=_eb .NewEG_ContentRunContent ();_deff .EG_ContentRunContent [_gdag +1].R =_bggg ;};return Run {_edgg ._dfbc ,_bggg };};if _dfdb .Sdt !=nil &&_dfdb .Sdt .SdtContent !=nil {for _ ,_aedbf :=range _dfdb .Sdt .SdtContent .EG_ContentRunContent {if _aedbf .R ==_bcfgc .X (){_cdab :=_eb .NewCT_R ();_dfdb .Sdt .SdtContent .EG_ContentRunContent =append (_dfdb .Sdt .SdtContent .EG_ContentRunContent ,nil );if _agee {copy (_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag +1:],_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag :]);_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag ]=_eb .NewEG_ContentRunContent ();_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag ].R =_cdab ;}else {copy (_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag +2:],_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag +1:]);_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag +1]=_eb .NewEG_ContentRunContent ();_dfdb .Sdt .SdtContent .EG_ContentRunContent [_gdag +1].R =_cdab ;};return Run {_edgg ._dfbc ,_cdab };};};};};};return _edgg .AddRun ();};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_eb .CT_Tbl ;Row *_eb .CT_Row ;Cell *_eb .CT_Tc ;RowIndex int ;ColIndex int ;};

// X returns the inner wrapped XML type.
func (_fcgg Styles )X ()*_eb .Styles {return _fcgg ._efdd };

// SetAllCaps sets the run to all caps.
func (_cebge RunProperties )SetAllCaps (b bool ){if !b {_cebge ._beee .Caps =nil ;}else {_cebge ._beee .Caps =_eb .NewCT_OnOff ();};};

// SetFooter sets a section footer.
func (_gaaf Section )SetFooter (f Footer ,t _eb .ST_HdrFtr ){_cccc :=_eb .NewEG_HdrFtrReferences ();_gaaf ._faggf .EG_HdrFtrReferences =append (_gaaf ._faggf .EG_HdrFtrReferences ,_cccc );_cccc .FooterReference =_eb .NewCT_HdrFtrRef ();_cccc .FooterReference .TypeAttr =t ;_agdf :=_gaaf ._ggad ._bdfb .FindRIDForN (f .Index (),_c .FooterType );if _agdf ==""{_e .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");};_cccc .FooterReference .IdAttr =_agdf ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_gdeg TableProperties )SetCellSpacingAuto (){_gdeg ._bbbf .TblCellSpacing =_eb .NewCT_TblWidth ();_gdeg ._bbbf .TblCellSpacing .TypeAttr =_eb .ST_TblWidthAuto ;};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_efdd *_eb .Styles };

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_adcf *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_ebe :=[]StructuredDocumentTag {};for _ ,_fbe :=range _adcf ._dddb .Body .EG_BlockLevelElts {for _ ,_bcad :=range _fbe .EG_ContentBlockContent {if _bcad .Sdt !=nil {_ebe =append (_ebe ,StructuredDocumentTag {_adcf ,_bcad .Sdt });};};};return _ebe ;};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_adbf *Document ;_gdfa *_eb .CT_FtnEdn ;};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_ddcb TableStyleProperties )SetCellSpacingPercent (pct float64 ){_ddcb ._fegfa .TblCellSpacing =_eb .NewCT_TblWidth ();_ddcb ._fegfa .TblCellSpacing .TypeAttr =_eb .ST_TblWidthPct ;_ddcb ._fegfa .TblCellSpacing .WAttr =&_eb .ST_MeasurementOrPercent {};_ddcb ._fegfa .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eb .ST_DecimalNumberOrPercent {};_ddcb ._fegfa .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_c .Int64 (int64 (pct *50));};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_dc CellBorders )SetInsideHorizontal (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_dc ._acae .InsideH =_eb .NewCT_Border ();_fgag (_dc ._acae .InsideH ,t ,c ,thickness );};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_ecca TableLook )SetFirstColumn (on bool ){if !on {_ecca ._gfaf .FirstColumnAttr =&_eg .ST_OnOff {};_ecca ._gfaf .FirstColumnAttr .ST_OnOff1 =_eg .ST_OnOff1Off ;}else {_ecca ._gfaf .FirstColumnAttr =&_eg .ST_OnOff {};_ecca ._gfaf .FirstColumnAttr .ST_OnOff1 =_eg .ST_OnOff1On ;};};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_bfgb :=_eb .NewNumbering ();return Numbering {_bfgb }};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_daee ParagraphProperties )CharacterSpacingValue ()int64 {if _bgge :=_daee ._ffge .RPr .Spacing ;_bgge !=nil {_fdcb :=_bgge .ValAttr ;if _fdcb .Int64 !=nil {return *_fdcb .Int64 ;};};return int64 (0);};func (_ggbf Paragraph )addStartBookmark (_abdff int64 ,_bccba string )*_eb .CT_Bookmark {_geefb :=_eb .NewEG_PContent ();_ggbf ._ebg .EG_PContent =append (_ggbf ._ebg .EG_PContent ,_geefb );_addd :=_eb .NewEG_ContentRunContent ();_ebde :=_eb .NewEG_RunLevelElts ();_ffab :=_eb .NewEG_RangeMarkupElements ();_gedc :=_eb .NewCT_Bookmark ();_gedc .NameAttr =_bccba ;_gedc .IdAttr =_abdff ;_ffab .BookmarkStart =_gedc ;_geefb .EG_ContentRunContent =append (_geefb .EG_ContentRunContent ,_addd );_addd .EG_RunLevelElts =append (_addd .EG_RunLevelElts ,_ebde );_ebde .EG_RangeMarkupElements =append (_ebde .EG_RangeMarkupElements ,_ffab );return _gedc ;};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_dacd Paragraph )Style ()string {if _dacd ._ebg .PPr !=nil &&_dacd ._ebg .PPr .PStyle !=nil {return _dacd ._ebg .PPr .PStyle .ValAttr ;};return "";};

// SetWidthAuto sets the the table width to automatic.
func (_gdbf TableProperties )SetWidthAuto (){_gdbf ._bbbf .TblW =_eb .NewCT_TblWidth ();_gdbf ._bbbf .TblW .TypeAttr =_eb .ST_TblWidthAuto ;};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_eb .NewCT_TblWidth ()}};

// SetEmboss sets the run to embossed text.
func (_agcd RunProperties )SetEmboss (b bool ){if !b {_agcd ._beee .Emboss =nil ;}else {_agcd ._beee .Emboss =_eb .NewCT_OnOff ();};};

// TableProperties returns the table style properties.
func (_cgdbc Style )TableProperties ()TableStyleProperties {if _cgdbc ._beadf .TblPr ==nil {_cgdbc ._beadf .TblPr =_eb .NewCT_TblPrBase ();};return TableStyleProperties {_cgdbc ._beadf .TblPr };};

// RunProperties returns the run properties controlling text formatting within the table.
func (_egge TableConditionalFormatting )RunProperties ()RunProperties {if _egge ._egf .RPr ==nil {_egge ._egf .RPr =_eb .NewCT_RPr ();};return RunProperties {_egge ._egf .RPr };};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_eff CellBorders )SetBottom (t _eb .ST_Border ,c _gb .Color ,thickness _gaf .Distance ){_eff ._acae .Bottom =_eb .NewCT_Border ();_fgag (_eff ._acae .Bottom ,t ,c ,thickness );};

// SetHighlight highlights text in a specified color.
func (_dgae RunProperties )SetHighlight (c _eb .ST_HighlightColor ){_dgae ._beee .Highlight =_eb .NewCT_Highlight ();_dgae ._beee .Highlight .ValAttr =c ;};

// SetHeight allows controlling the height of a row within a table.
func (_cbac RowProperties )SetHeight (ht _gaf .Distance ,rule _eb .ST_HeightRule ){if rule ==_eb .ST_HeightRuleUnset {_cbac ._gfggc .TrHeight =nil ;}else {_fgefd :=_eb .NewCT_Height ();_fgefd .HRuleAttr =rule ;_fgefd .ValAttr =&_eg .ST_TwipsMeasure {};_fgefd .ValAttr .ST_UnsignedDecimalNumber =_c .Uint64 (uint64 (ht /_gaf .Twips ));_cbac ._gfggc .TrHeight =[]*_eb .CT_Height {_fgefd };};};

// Outline returns true if paragraph outline is on.
func (_cfcbf ParagraphProperties )Outline ()bool {return _bacc (_cfcbf ._ffge .RPr .Outline )};func _eaga (_bccd *_add .CT_Blip ,_bfdcb map[string ]string ){if _bccd .EmbedAttr !=nil {if _fbec ,_geec :=_bfdcb [*_bccd .EmbedAttr ];_geec {*_bccd .EmbedAttr =_fbec ;};};};

// SetColumnBandSize sets the number of Columns in the column band
func (_dcgdf TableStyleProperties )SetColumnBandSize (cols int64 ){_dcgdf ._fegfa .TblStyleColBandSize =_eb .NewCT_DecimalNumber ();_dcgdf ._fegfa .TblStyleColBandSize .ValAttr =cols ;};

// AddParagraph adds a paragraph to the table cell.
func (_fbf Cell )AddParagraph ()Paragraph {_gdf :=_eb .NewEG_BlockLevelElts ();_fbf ._dd .EG_BlockLevelElts =append (_fbf ._dd .EG_BlockLevelElts ,_gdf );_ace :=_eb .NewEG_ContentBlockContent ();_gdf .EG_ContentBlockContent =append (_gdf .EG_ContentBlockContent ,_ace );_ebc :=_eb .NewCT_P ();_ace .P =append (_ace .P ,_ebc );return Paragraph {_fbf ._af ,_ebc };};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_gca *Document )HasEndnotes ()bool {return _gca ._bfc !=nil };

// SetStartPct sets the cell start margin
func (_cbg CellMargins )SetStartPct (pct float64 ){_cbg ._gffa .Start =_eb .NewCT_TblWidth ();_ceg (_cbg ._gffa .Start ,pct );};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_deb ParagraphProperties )CharacterSpacingMeasure ()string {if _aead :=_deb ._ffge .RPr .Spacing ;_aead !=nil {_ggag :=_aead .ValAttr ;if _ggag .ST_UniversalMeasure !=nil {return *_ggag .ST_UniversalMeasure ;};};return "";};

// SetLinkedStyle sets the style that this style is linked to.
func (_effbb Style )SetLinkedStyle (name string ){if name ==""{_effbb ._beadf .Link =nil ;}else {_effbb ._beadf .Link =_eb .NewCT_String ();_effbb ._beadf .Link .ValAttr =name ;};};

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_afee TableLook )SetLastColumn (on bool ){if !on {_afee ._gfaf .LastColumnAttr =&_eg .ST_OnOff {};_afee ._gfaf .LastColumnAttr .ST_OnOff1 =_eg .ST_OnOff1Off ;}else {_afee ._gfaf .LastColumnAttr =&_eg .ST_OnOff {};_afee ._gfaf .LastColumnAttr .ST_OnOff1 =_eg .ST_OnOff1On ;};};

// RemoveParagraph removes a paragraph from a footer.
func (_dffg Header )RemoveParagraph (p Paragraph ){for _ ,_dca :=range _dffg ._dgab .EG_ContentBlockContent {for _fadb ,_fbcf :=range _dca .P {if _fbcf ==p ._ebg {copy (_dca .P [_fadb :],_dca .P [_fadb +1:]);_dca .P =_dca .P [0:len (_dca .P )-1];return ;};};};};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_bfaca TableLook )SetHorizontalBanding (on bool ){if !on {_bfaca ._gfaf .NoHBandAttr =&_eg .ST_OnOff {};_bfaca ._gfaf .NoHBandAttr .ST_OnOff1 =_eg .ST_OnOff1On ;}else {_bfaca ._gfaf .NoHBandAttr =&_eg .ST_OnOff {};_bfaca ._gfaf .NoHBandAttr .ST_OnOff1 =_eg .ST_OnOff1Off ;};};

// AddTable adds a new table to the document body.
func (_egdd *Document )AddTable ()Table {_dce :=_eb .NewEG_BlockLevelElts ();_egdd ._dddb .Body .EG_BlockLevelElts =append (_egdd ._dddb .Body .EG_BlockLevelElts ,_dce );_fdg :=_eb .NewEG_ContentBlockContent ();_dce .EG_ContentBlockContent =append (_dce .EG_ContentBlockContent ,_fdg );_bffd :=_eb .NewCT_Tbl ();_fdg .Tbl =append (_fdg .Tbl ,_bffd );return Table {_egdd ,_bffd };};

// Clear clears all content within a footer
func (_cdad Footer )Clear (){_cdad ._facg .EG_ContentBlockContent =nil };

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_gfgg ParagraphProperties )RStyle ()string {if _gfgg ._ffge .RPr .RStyle !=nil {return _gfgg ._ffge .RPr .RStyle .ValAttr ;};return "";};

// SetShadow sets the run to shadowed text.
func (_cffeg RunProperties )SetShadow (b bool ){if !b {_cffeg ._beee .Shadow =nil ;}else {_cffeg ._beee .Shadow =_eb .NewCT_OnOff ();};};

// Borders allows controlling individual cell borders.
func (_cc CellProperties )Borders ()CellBorders {if _cc ._beg .TcBorders ==nil {_cc ._beg .TcBorders =_eb .NewCT_TcBorders ();};return CellBorders {_cc ._beg .TcBorders };};