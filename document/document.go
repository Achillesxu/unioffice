//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*
Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_bc "archive/zip";_ag "bytes";_ca "errors";_cag "fmt";_d "github.com/unidoc/unioffice";_ff "github.com/unidoc/unioffice/color";_aa "github.com/unidoc/unioffice/common";_ab "github.com/unidoc/unioffice/common/axcontrol";_e "github.com/unidoc/unioffice/common/logger";
_ccd "github.com/unidoc/unioffice/common/tempstorage";_gd "github.com/unidoc/unioffice/internal/formatutils";_ac "github.com/unidoc/unioffice/internal/license";_abg "github.com/unidoc/unioffice/measurement";_da "github.com/unidoc/unioffice/schema/schemas.microsoft.com/office/activeX";
_fa "github.com/unidoc/unioffice/schema/soo/dml";_gac "github.com/unidoc/unioffice/schema/soo/dml/chart";_cgd "github.com/unidoc/unioffice/schema/soo/dml/picture";_de "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_fdg "github.com/unidoc/unioffice/schema/soo/pkg/relationships";
_bf "github.com/unidoc/unioffice/schema/soo/wml";_ga "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_ba "github.com/unidoc/unioffice/vmldrawing";_fg "github.com/unidoc/unioffice/zippkg";_g "image";_cc "image/jpeg";_ce "io";_f "math/rand";
_a "os";_bb "path/filepath";_cg "regexp";_fd "strings";_b "unicode";);

// SetPictureWashout set washout to watermark picture.
func (_befe *WatermarkPicture )SetPictureWashout (isWashout bool ){if _befe ._gbdfg !=nil {_feea :=_befe ._gbdfg .EG_ShapeElements ;if len (_feea )> 0&&_feea [0].Imagedata !=nil {if isWashout {_gacaa :="\u0031\u0039\u0036\u0036\u0031\u0066";_efbdg :="\u0032\u0032\u0039\u0033\u0038\u0066";
_feea [0].Imagedata .GainAttr =&_gacaa ;_feea [0].Imagedata .BlacklevelAttr =&_efbdg ;};};};};

// NewWatermarkText generates a new WatermarkText.
func NewWatermarkText ()WatermarkText {_abag :=_ga .NewShapetype ();_caecb :=_ga .NewEG_ShapeElements ();_caecb .Formulas =_bdae ();_caecb .Path =_cfeaf ();_caecb .Textpath =_gbgef ();_caecb .Handles =_ffcd ();_caecb .Lock =_dcfbb ();_abag .EG_ShapeElements =[]*_ga .EG_ShapeElements {_caecb };
var (_aeeag ="_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_egacg ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_bdeaf =float32 (136.0);_cgbdad ="\u0031\u0030\u00380\u0030";_bfdb ="m\u0040\u0037\u002c\u006c\u0040\u0038,\u006d\u0040\u0035\u002c\u0032\u0031\u0036\u0030\u0030l\u0040\u0036\u002c2\u00316\u0030\u0030\u0065";
);_abag .IdAttr =&_aeeag ;_abag .CoordsizeAttr =&_egacg ;_abag .SptAttr =&_bdeaf ;_abag .AdjAttr =&_cgbdad ;_abag .PathAttr =&_bfdb ;_bcgad :=_ga .NewShape ();_dfbde :=_ga .NewEG_ShapeElements ();_dfbde .Textpath =_dabe ();_bcgad .EG_ShapeElements =[]*_ga .EG_ShapeElements {_dfbde };
var (_dgfde ="\u0050\u006f\u0077\u0065\u0072\u0050l\u0075\u0073\u0057\u0061\u0074\u0065\u0072\u004d\u0061\u0072\u006b\u004f\u0062j\u0065\u0063\u0074\u0031\u0033\u0036\u00380\u0030\u0038\u0038\u0036";_bfcef ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";
_fbab ="\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_cecae ="";_dbfad ="\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065f\u0074:\u0030\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074o\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0034\u0036\u0038\u0070\u0074;\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0032\u0033\u0034\u0070\u0074\u003b\u007a\u002d\u0069\u006ede\u0078\u003a\u002d\u0032\u0035\u0031\u0036\u0035\u0031\u0030\u0037\u0032\u003b\u006d\u0073\u006f\u002d\u0077\u0072\u0061\u0070\u002d\u0065\u0064\u0069\u0074\u0065\u0064\u003a\u0066\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0068\u0065\u0069\u0067h\u0074-p\u0065\u0072\u0063\u0065\u006et\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070o\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065l\u0061\u0074\u0069\u0076\u0065:\u006d\u0061\u0072\u0067\u0069n\u003b\u006d\u0073o\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e-\u0076\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065r\u0074\u0069\u0063\u0061\u006c\u002d\u0072e\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063e\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dh\u0065\u0069\u0067\u0068t\u002dp\u0065\u0072\u0063\u0065\u006et\u003a0";
_adadf ="\u0073\u0069\u006c\u0076\u0065\u0072";);_bcgad .IdAttr =&_dgfde ;_bcgad .SpidAttr =&_bfcef ;_bcgad .TypeAttr =&_fbab ;_bcgad .AltAttr =&_cecae ;_bcgad .StyleAttr =&_dbfad ;_bcgad .AllowincellAttr =_de .ST_TrueFalseFalse ;_bcgad .FillcolorAttr =&_adadf ;
_bcgad .StrokedAttr =_de .ST_TrueFalseFalse ;_bfggd :=_bf .NewCT_Picture ();_bfggd .Any =[]_d .Any {_abag ,_bcgad };return WatermarkText {_ccfe :_bfggd ,_feab :_bcgad ,_aadb :_abag };};func _acfe (_bfegf *_bf .CT_P ,_ggcg map[string ]string ){for _ ,_geba :=range _bfegf .EG_PContent {for _ ,_dbggc :=range _geba .EG_ContentRunContent {if _dbggc .R !=nil {for _ ,_gecc :=range _dbggc .R .EG_RunInnerContent {_eddff :=_gecc .Drawing ;
if _eddff !=nil {for _ ,_dfcc :=range _eddff .Anchor {for _ ,_fbgbb :=range _dfcc .Graphic .GraphicData .Any {switch _gdd :=_fbgbb .(type ){case *_cgd .Pic :if _gdd .BlipFill !=nil &&_gdd .BlipFill .Blip !=nil {_ada (_gdd .BlipFill .Blip ,_ggcg );};default:};
};};for _ ,_ade :=range _eddff .Inline {for _ ,_egdac :=range _ade .Graphic .GraphicData .Any {switch _gfec :=_egdac .(type ){case *_cgd .Pic :if _gfec .BlipFill !=nil &&_gfec .BlipFill .Blip !=nil {_ada (_gfec .BlipFill .Blip ,_ggcg );};default:};};};
};};};};};};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_eecea ParagraphBorders )SetBottom (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_eecea ._gdbea .Bottom =_bf .NewCT_Border ();_abfa (_eecea ._gdbea .Bottom ,t ,c ,thickness );};

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_bgad Document )AddHyperlink (url string )_aa .Hyperlink {return _bgad ._bgf .AddHyperlink (url )};

// SetOutline sets the run to outlined text.
func (_ffgcb RunProperties )SetOutline (b bool ){if !b {_ffgcb ._gaffa .Outline =nil ;}else {_ffgcb ._gaffa .Outline =_bf .NewCT_OnOff ();};};

// SetOutlineLevel sets the outline level of this style.
func (_cedfg ParagraphStyleProperties )SetOutlineLevel (lvl int ){_cedfg ._egfe .OutlineLvl =_bf .NewCT_DecimalNumber ();_cedfg ._egfe .OutlineLvl .ValAttr =int64 (lvl );};

// Nodes return the document's element as nodes.
func (_cbfae *Document )Nodes ()Nodes {_deedcc :=[]Node {};for _ ,_adaa :=range _cbfae ._aff .Body .EG_BlockLevelElts {_deedcc =append (_deedcc ,_aebg (_cbfae ,_adaa .EG_ContentBlockContent ,nil )...);};if _cbfae ._aff .Body .SectPr !=nil {_deedcc =append (_deedcc ,Node {_gcedb :_cbfae ._aff .Body .SectPr });
};_aead :=Nodes {_gdbf :_deedcc };return _aead ;};

// SetFollowImageShape sets wrapPath to follow image shape,
// if nil return wrapPath that follow image size.
func (_db AnchorDrawWrapOptions )SetFollowImageShape (val bool ){_db ._cec =val ;if !val {_aaa ,_ed :=_cac ();_db ._cgge =_aaa ;_db ._ee =_ed ;};};

// ParagraphProperties returns the paragraph style properties.
func (_febga Style )ParagraphProperties ()ParagraphStyleProperties {if _febga ._ccecg .PPr ==nil {_febga ._ccecg .PPr =_bf .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_febga ._ccecg .PPr };};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_gfega TableLook )SetVerticalBanding (on bool ){if !on {_gfega ._ceddb .NoVBandAttr =&_de .ST_OnOff {};_gfega ._ceddb .NoVBandAttr .ST_OnOff1 =_de .ST_OnOff1On ;}else {_gfega ._ceddb .NoVBandAttr =&_de .ST_OnOff {};_gfega ._ceddb .NoVBandAttr .ST_OnOff1 =_de .ST_OnOff1Off ;
};};

// Styles returns all styles.
func (_edga Styles )Styles ()[]Style {_bedce :=[]Style {};for _ ,_dgeab :=range _edga ._aebbf .Style {_bedce =append (_bedce ,Style {_dgeab });};return _bedce ;};var _ecg =false ;func (_fddg *Document )syncFootnoteSettings (){_agff :=[]int64 {};_abga :=_fddg .Footnotes ();
for _ ,_dgb :=range _abga {if _dgb .X ().TypeAttr !=_bf .ST_FtnEdnUnset &&_dgb .X ().TypeAttr !=_bf .ST_FtnEdnNormal {_agff =append (_agff ,_dgb .X ().IdAttr );};};_daae :=_fddg .Settings .X ().CT_Settings .FootnotePr ;if _daae ==nil {_daae =_bf .NewCT_FtnDocProps ();
};if len (_agff )==0{_daae .Footnote =nil ;return ;};_daae .Footnote =[]*_bf .CT_FtnEdnSepRef {};for _ ,_dcfe :=range _agff {_eae :=_bf .NewCT_FtnEdnSepRef ();_eae .IdAttr =_dcfe ;_daae .Footnote =append (_daae .Footnote ,_eae );};};

// ReplaceText replace text inside node.
func (_dfac *Nodes )ReplaceText (oldText ,newText string ){for _ ,_aaab :=range _dfac ._gdbf {_aaab .ReplaceText (oldText ,newText );};};

// SetSemiHidden controls if the style is hidden in the UI.
func (_ffec Style )SetSemiHidden (b bool ){if b {_ffec ._ccecg .SemiHidden =_bf .NewCT_OnOff ();}else {_ffec ._ccecg .SemiHidden =nil ;};};

// Paragraphs returns the paragraphs defined in the cell.
func (_feb Cell )Paragraphs ()[]Paragraph {_cbg :=[]Paragraph {};for _ ,_df :=range _feb ._cbe .EG_BlockLevelElts {for _ ,_fgf :=range _df .EG_ContentBlockContent {for _ ,_fcba :=range _fgf .P {_cbg =append (_cbg ,Paragraph {_feb ._ddc ,_fcba });};};};
return _cbg ;};

// SetASCIITheme sets the font ASCII Theme.
func (_ddcab Fonts )SetASCIITheme (t _bf .ST_Theme ){_ddcab ._afga .AsciiThemeAttr =t };

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_aabgf TableStyleProperties )SetCellSpacingPercent (pct float64 ){_aabgf ._efbde .TblCellSpacing =_bf .NewCT_TblWidth ();_aabgf ._efbde .TblCellSpacing .TypeAttr =_bf .ST_TblWidthPct ;_aabgf ._efbde .TblCellSpacing .WAttr =&_bf .ST_MeasurementOrPercent {};
_aabgf ._efbde .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};_aabgf ._efbde .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (pct *50));};

// AddTable adds a new table to the document body.
func (_cfff *Document )AddTable ()Table {_aec :=_bf .NewEG_BlockLevelElts ();_cfff ._aff .Body .EG_BlockLevelElts =append (_cfff ._aff .Body .EG_BlockLevelElts ,_aec );_daee :=_bf .NewEG_ContentBlockContent ();_aec .EG_ContentBlockContent =append (_aec .EG_ContentBlockContent ,_daee );
_agda :=_bf .NewCT_Tbl ();_daee .Tbl =append (_daee .Tbl ,_agda );return Table {_cfff ,_agda };};

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_bf .Ftr )[]TextItem {return _cccbgd (footer .EG_ContentBlockContent ,nil );};

// RemoveParagraph removes a paragraph from a footer.
func (_cgead Header )RemoveParagraph (p Paragraph ){for _ ,_fbce :=range _cgead ._ggab .EG_ContentBlockContent {for _bbec ,_cfca :=range _fbce .P {if _cfca ==p ._dbga {copy (_fbce .P [_bbec :],_fbce .P [_bbec +1:]);_fbce .P =_fbce .P [0:len (_fbce .P )-1];
return ;};};};};

// Borders allows controlling individual cell borders.
func (_dgg CellProperties )Borders ()CellBorders {if _dgg ._fdc .TcBorders ==nil {_dgg ._fdc .TcBorders =_bf .NewCT_TcBorders ();};return CellBorders {_dgg ._fdc .TcBorders };};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_badd Paragraph )SetLineSpacing (d _abg .Distance ,rule _bf .ST_LineSpacingRule ){_badd .ensurePPr ();if _badd ._dbga .PPr .Spacing ==nil {_badd ._dbga .PPr .Spacing =_bf .NewCT_Spacing ();};_daffb :=_badd ._dbga .PPr .Spacing ;if rule ==_bf .ST_LineSpacingRuleUnset {_daffb .LineRuleAttr =_bf .ST_LineSpacingRuleUnset ;
_daffb .LineAttr =nil ;}else {_daffb .LineRuleAttr =rule ;_daffb .LineAttr =&_bf .ST_SignedTwipsMeasure {};_daffb .LineAttr .Int64 =_d .Int64 (int64 (d /_abg .Twips ));};};

// SetAll sets all of the borders to a given value.
func (_dcff ParagraphBorders )SetAll (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_dcff .SetBottom (t ,c ,thickness );_dcff .SetLeft (t ,c ,thickness );_dcff .SetRight (t ,c ,thickness );_dcff .SetTop (t ,c ,thickness );};

// GetRightToLeft returns true if the run text is displayed from right to left.
func (_gffee RunProperties )GetRightToLeft ()bool {return _bffc (_gffee ._gaffa .Rtl )};

// SetMultiLevelType sets the multilevel type.
func (_egagca NumberingDefinition )SetMultiLevelType (t _bf .ST_MultiLevelType ){if t ==_bf .ST_MultiLevelTypeUnset {_egagca ._egcb .MultiLevelType =nil ;}else {_egagca ._egcb .MultiLevelType =_bf .NewCT_MultiLevelType ();_egagca ._egcb .MultiLevelType .ValAttr =t ;
};};

// FontTable returns document fontTable element.
func (_dfce *Document )FontTable ()*_bf .Fonts {return _dfce ._gdb };

// FindNodeByCondition return node based on condition function,
// if wholeElements is true, its will extract childs as next node elements.
func (_fgeee *Nodes )FindNodeByCondition (f func (_fdgb *Node )bool ,wholeElements bool )[]Node {_adda :=[]Node {};for _ ,_abdf :=range _fgeee ._gdbf {if f (&_abdf ){_adda =append (_adda ,_abdf );};if wholeElements {_aebb :=Nodes {_gdbf :_abdf .Children };
_adda =append (_adda ,_aebb .FindNodeByCondition (f ,wholeElements )...);};};return _adda ;};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_ggabf ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_ggabf ._egfe .ContextualSpacing =nil ;}else {_ggabf ._egfe .ContextualSpacing =_bf .NewCT_OnOff ();};};

// GetStyle returns string style of the text in watermark and format it to TextpathStyle.
func (_ebgf *WatermarkText )GetStyle ()_ba .TextpathStyle {_baaec :=_ebgf .getShape ();if _ebgf ._feab !=nil {_dfcb :=_ebgf ._feab .EG_ShapeElements ;if len (_dfcb )> 0&&_dfcb [0].Textpath !=nil {return _ba .NewTextpathStyle (*_dfcb [0].Textpath .StyleAttr );
};}else {_cgfc :=_ebgf .findNode (_baaec ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_agfff :=range _cgfc .Attrs {if _agfff .Name .Local =="\u0073\u0074\u0079l\u0065"{return _ba .NewTextpathStyle (_agfff .Value );};};};return _ba .NewTextpathStyle ("");
};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_bgeeg Run )AddTab (){_effb :=_bgeeg .newIC ();_effb .Tab =_bf .NewCT_Empty ()};func (_aeggf *WatermarkText )findNode (_gfbda *_d .XSDAny ,_acfa string )*_d .XSDAny {for _ ,_abec :=range _gfbda .Nodes {if _abec .XMLName .Local ==_acfa {return _abec ;
};};return nil ;};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_caac *Document )MailMerge (mergeContent map[string ]string ){_gbfd :=_caac .mergeFields ();_gggfb :=map[Paragraph ][]Run {};for _ ,_adbag :=range _gbfd {_gedf ,_fcafb :=mergeContent [_adbag ._egfd ];if _fcafb {if _adbag ._begfa {_gedf =_fd .ToUpper (_gedf );
}else if _adbag ._egdgb {_gedf =_fd .ToLower (_gedf );}else if _adbag ._bfgfb {_gedf =_fd .Title (_gedf );}else if _adbag ._addc {_ecdd :=_ag .Buffer {};for _bagb ,_bfgbb :=range _gedf {if _bagb ==0{_ecdd .WriteRune (_b .ToUpper (_bfgbb ));}else {_ecdd .WriteRune (_bfgbb );
};};_gedf =_ecdd .String ();};if _gedf !=""&&_adbag ._ffega !=""{_gedf =_adbag ._ffega +_gedf ;};if _gedf !=""&&_adbag ._ffcbf !=""{_gedf =_gedf +_adbag ._ffcbf ;};};if _adbag ._efdd {if len (_adbag ._bfba .FldSimple )==1&&len (_adbag ._bfba .FldSimple [0].EG_PContent )==1&&len (_adbag ._bfba .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_ccba :=&_bf .EG_ContentRunContent {};
_ccba .R =_adbag ._bfba .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_adbag ._bfba .FldSimple =nil ;_befa :=Run {_caac ,_ccba .R };_befa .ClearContent ();_befa .AddText (_gedf );_adbag ._bfba .EG_ContentRunContent =append (_adbag ._bfba .EG_ContentRunContent ,_ccba );
};}else {_cfcb :=_adbag ._fgaf .Runs ();for _dded :=_adbag ._ebec ;_dded <=_adbag ._gdfg ;_dded ++{if _dded ==_adbag ._eggd +1{_cfcb [_dded ].ClearContent ();_cfcb [_dded ].AddText (_gedf );}else {_gggfb [_adbag ._fgaf ]=append (_gggfb [_adbag ._fgaf ],_cfcb [_dded ]);
};};};};for _ecdf ,_faec :=range _gggfb {for _ ,_fbbde :=range _faec {_ecdf .RemoveRun (_fbbde );};};_caac .Settings .RemoveMailMerge ();};

// Caps returns true if run font is capitalized.
func (_gcbb RunProperties )Caps ()bool {return _bffc (_gcbb ._gaffa .Caps )};func (_eafac *Document )removeFootnote (_bdf int64 ){_bafa :=_eafac ._edc ;var _bddc int ;for _geea ,_bdag :=range _bafa .CT_Footnotes .Footnote {if _bdag .IdAttr ==_bdf {_bddc =_geea ;
break ;};};_bafa .CT_Footnotes .Footnote [_bddc ]=nil ;_bafa .CT_Footnotes .Footnote [_bddc ]=_bafa .CT_Footnotes .Footnote [len (_bafa .CT_Footnotes .Footnote )-1];_bafa .CT_Footnotes .Footnote =_bafa .CT_Footnotes .Footnote [:len (_bafa .CT_Footnotes .Footnote )-1];
_eafac .reorderFootnote ();_eafac .syncFootnoteSettings ();};

// FindNodeByStyleName return slice of node base on style name.
func (_ebaf *Nodes )FindNodeByStyleName (styleName string )[]Node {_fccf :=[]Node {};for _ ,_bbbbbb :=range _ebaf ._gdbf {switch _cgbdc :=_bbbbbb ._gcedb .(type ){case *Paragraph :if _cgbdc !=nil {if _dgfd ,_dbfe :=_bbbbbb ._gdcag .Styles .SearchStyleByName (styleName );
_dbfe {_baea :=_cgbdc .Style ();if _baea ==_dgfd .StyleID (){_fccf =append (_fccf ,_bbbbbb );};};};case *Table :if _cgbdc !=nil {if _caag ,_gddeg :=_bbbbbb ._gdcag .Styles .SearchStyleByName (styleName );_gddeg {_aefea :=_cgbdc .Style ();if _aefea ==_caag .StyleID (){_fccf =append (_fccf ,_bbbbbb );
};};};};_cedfa :=Nodes {_gdbf :_bbbbbb .Children };_fccf =append (_fccf ,_cedfa .FindNodeByStyleName (styleName )...);};return _fccf ;};func (_geca Paragraph )addFldChar ()*_bf .CT_FldChar {_dbbcc :=_geca .AddRun ();_dbeg :=_dbbcc .X ();_bggfd :=_bf .NewEG_RunInnerContent ();
_geag :=_bf .NewCT_FldChar ();_bggfd .FldChar =_geag ;_dbeg .EG_RunInnerContent =append (_dbeg .EG_RunInnerContent ,_bggfd );return _geag ;};

// HyperLink is a link within a document.
type HyperLink struct{_fadfa *Document ;_agbdc *_bf .CT_Hyperlink ;};

// GetWrapPathStart return wrapPath start value.
func (_gacb AnchorDrawWrapOptions )GetWrapPathStart ()*_fa .CT_Point2D {return _gacb ._cgge };func (_dfdf Footnote )content ()[]*_bf .EG_ContentBlockContent {var _adfcd []*_bf .EG_ContentBlockContent ;for _ ,_ceda :=range _dfdf ._gdcb .EG_BlockLevelElts {_adfcd =append (_adfcd ,_ceda .EG_ContentBlockContent ...);
};return _adfcd ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_bfce *Document )AddImage (i _aa .Image )(_aa .ImageRef ,error ){_gbbd :=_aa .MakeImageRef (i ,&_bfce .DocBase ,_bfce ._bgf );if i .Data ==nil &&i .Path ==""{return _gbbd ,_ca .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");
};if i .Format ==""{return _gbbd ,_ca .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _gbbd ,_ca .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");
};if i .Path !=""{_fbcc :=_ccd .Add (i .Path );if _fbcc !=nil {return _gbbd ,_fbcc ;};};_bfce .Images =append (_bfce .Images ,_gbbd );_fdgcb :=_cag .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_bfce .Images ),i .Format );
_bbag :=_bfce ._bgf .AddRelationship (_fdgcb ,_d .ImageType );_bfce .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bfce .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");
_bfce .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bfce .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_bfce .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );
_gbbd .SetRelID (_bbag .X ().IdAttr );_gbbd .SetTarget (_fdgcb );return _gbbd ,nil ;};

// SetTextStyleItalic set text style of watermark to italic.
func (_cgbcf *WatermarkText )SetTextStyleItalic (value bool ){if _cgbcf ._feab !=nil {_eeafe :=_cgbcf .GetStyle ();_eeafe .SetItalic (value );_cgbcf .SetStyle (_eeafe );};};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_bgfaa ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_bgfaa ._egfe .KeepNext =nil ;}else {_bgfaa ._egfe .KeepNext =_bf .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_fbfc Endnote )X ()*_bf .CT_FtnEdn {return _fbfc ._fabbd };

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_ggcf RunProperties )ItalicValue ()OnOffValue {return _eegfe (_ggcf ._gaffa .I )};

// RightToLeft returns true if run text goes from right to left.
func (_gedb RunProperties )RightToLeft ()bool {return _bffc (_gedb ._gaffa .Rtl )};

// SetTextWrapTopAndBottom sets the text wrap to top and bottom.
func (_gae AnchoredDrawing )SetTextWrapTopAndBottom (){_gae ._fc .Choice =&_bf .WdEG_WrapTypeChoice {};_gae ._fc .Choice .WrapTopAndBottom =_bf .NewWdCT_WrapTopBottom ();_gae ._fc .LayoutInCellAttr =true ;_gae ._fc .AllowOverlapAttr =true ;};

// Clear clears all content within a header
func (_aaaed Header )Clear (){_aaaed ._ggab .EG_ContentBlockContent =nil };

// CellMargins are the margins for an individual cell.
type CellMargins struct{_dcd *_bf .CT_TcMar };

// X returns the inner wrapped XML type.
func (_ecca ParagraphStyleProperties )X ()*_bf .CT_PPrGeneral {return _ecca ._egfe };

// TableWidth controls width values in table settings.
type TableWidth struct{_acgg *_bf .CT_TblWidth };func (_cefcd Paragraph )addStartBookmark (_gfeeb int64 ,_dcda string )*_bf .CT_Bookmark {_gdgb :=_bf .NewEG_PContent ();_cefcd ._dbga .EG_PContent =append (_cefcd ._dbga .EG_PContent ,_gdgb );_aaeb :=_bf .NewEG_ContentRunContent ();
_efdaff :=_bf .NewEG_RunLevelElts ();_dgbaf :=_bf .NewEG_RangeMarkupElements ();_dddb :=_bf .NewCT_Bookmark ();_dddb .NameAttr =_dcda ;_dddb .IdAttr =_gfeeb ;_dgbaf .BookmarkStart =_dddb ;_gdgb .EG_ContentRunContent =append (_gdgb .EG_ContentRunContent ,_aaeb );
_aaeb .EG_RunLevelElts =append (_aaeb .EG_RunLevelElts ,_efdaff );_efdaff .EG_RangeMarkupElements =append (_efdaff .EG_RangeMarkupElements ,_dgbaf );return _dddb ;};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_bef AnchoredDrawing )SetTextWrapNone (){_bef ._fc .Choice =&_bf .WdEG_WrapTypeChoice {};_bef ._fc .Choice .WrapNone =_bf .NewWdCT_WrapNone ();};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";
FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";
FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_aeaf ParagraphProperties )SetHeadingLevel (idx int ){_aeaf .SetStyle (_cag .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _aeaf ._fcdce .NumPr ==nil {_aeaf ._fcdce .NumPr =_bf .NewCT_NumPr ();};_aeaf ._fcdce .NumPr .Ilvl =_bf .NewCT_DecimalNumber ();
_aeaf ._fcdce .NumPr .Ilvl .ValAttr =int64 (idx );};

// SetFirstLineIndent controls the first line indent of the paragraph.
func (_efbgff ParagraphStyleProperties )SetFirstLineIndent (m _abg .Distance ){if _efbgff ._egfe .Ind ==nil {_efbgff ._egfe .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_efbgff ._egfe .Ind .FirstLineAttr =nil ;}else {_efbgff ._egfe .Ind .FirstLineAttr =&_de .ST_TwipsMeasure {};
_efbgff ._egfe .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (m /_abg .Twips ));};};

// SetAllCaps sets the run to all caps.
func (_eaeac RunProperties )SetAllCaps (b bool ){if !b {_eaeac ._gaffa .Caps =nil ;}else {_eaeac ._gaffa .Caps =_bf .NewCT_OnOff ();};};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_ecbac Paragraph )Style ()string {if _ecbac ._dbga .PPr !=nil &&_ecbac ._dbga .PPr .PStyle !=nil {return _ecbac ._dbga .PPr .PStyle .ValAttr ;};return "";};

// X returns the inner wrapped XML type.
func (_bdgb Row )X ()*_bf .CT_Row {return _bdgb ._eedfc };

// ParagraphStyles returns only the paragraph styles.
func (_ceea Styles )ParagraphStyles ()[]Style {_eacdf :=[]Style {};for _ ,_aebba :=range _ceea ._aebbf .Style {if _aebba .TypeAttr !=_bf .ST_StyleTypeParagraph {continue ;};_eacdf =append (_eacdf ,Style {_aebba });};return _eacdf ;};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_agcf NumberingDefinition )MultiLevelType ()_bf .ST_MultiLevelType {if _agcf ._egcb .MultiLevelType !=nil {return _agcf ._egcb .MultiLevelType .ValAttr ;}else {return _bf .ST_MultiLevelTypeUnset ;};};

// SetTopPct sets the cell top margin
func (_eb CellMargins )SetTopPct (pct float64 ){_eb ._dcd .Top =_bf .NewCT_TblWidth ();_eac (_eb ._dcd .Top ,pct );};

// Style is a style within the styles.xml file.
type Style struct{_ccecg *_bf .CT_Style };

// X returns the inner wrapped XML type.
func (_eab *Document )X ()*_bf .Document {return _eab ._aff };

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_cfg *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_fcf :=[]StructuredDocumentTag {};for _ ,_fcg :=range _cfg ._aff .Body .EG_BlockLevelElts {for _ ,_acdgf :=range _fcg .EG_ContentBlockContent {if _acdgf .Sdt !=nil {_fcf =append (_fcf ,StructuredDocumentTag {_cfg ,_acdgf .Sdt });
};};};return _fcf ;};

// DrawingInline return a slice of InlineDrawings.
func (_gddf Run )DrawingInline ()[]InlineDrawing {_fcbab :=[]InlineDrawing {};for _ ,_ageba :=range _gddf ._ccceca .EG_RunInnerContent {if _ageba .Drawing ==nil {continue ;};for _ ,_dgfb :=range _ageba .Drawing .Inline {_fcbab =append (_fcbab ,InlineDrawing {_gddf ._abedg ,_dgfb });
};};return _fcbab ;};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_fadf FormField )SetValue (v string ){if _fadf ._beca .DdList !=nil {for _ecac ,_bdade :=range _fadf .PossibleValues (){if _bdade ==v {_fadf ._beca .DdList .Result =_bf .NewCT_DecimalNumber ();_fadf ._beca .DdList .Result .ValAttr =int64 (_ecac );
break ;};};}else if _fadf ._beca .TextInput !=nil {_fadf ._bfecg .T =_bf .NewCT_Text ();_fadf ._bfecg .T .Content =v ;};};

// AppendNode append node to document element.
func (_gdega *Document )AppendNode (node Node ){_gdega .insertImageFromNode (node );_gdega .insertStyleFromNode (node );for _ ,_abadf :=range node .Children {_gdega .insertImageFromNode (_abadf );_gdega .insertStyleFromNode (_abadf );};switch _degb :=node .X ().(type ){case *Paragraph :_gdega .appendParagraph (nil ,*_degb ,false );
case *Table :_gdega .appendTable (nil ,*_degb ,false );};if node ._gdcag !=nil {if node ._gdcag ._aef !=nil {if _aeea :=_gdega ._bgf .FindRIDForN (0,_d .ThemeType );_aeea ==""{if _bcfg :=node ._gdcag ._bgf .FindRIDForN (0,_d .ThemeType );_bcfg !=""{_gdega ._aef =append (_gdega ._aef ,node ._gdcag ._aef ...);
_gfac :=node ._gdcag ._bgf .GetTargetByRelId (_bcfg );_gdega .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_gfac ,"\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e/\u0076\u006e\u0064.\u006f\u0070e\u006e\u0078\u006d\u006c\u0066\u006fr\u006dat\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0074\u0068\u0065\u006d\u0065\u002b\u0078\u006d\u006c");
_gdega ._bgf .AddRelationship (_gfac ,_d .ThemeType );};};};_cebad :=_gdega ._gdb ;_ecfd :=node ._gdcag ._gdb ;if _cebad !=nil {if _ecfd !=nil {if _cebad .Font !=nil {if _ecfd .Font !=nil {for _ ,_bbaa :=range _ecfd .Font {_gcdab :=true ;for _ ,_eede :=range _cebad .Font {if _eede .NameAttr ==_bbaa .NameAttr {_gcdab =false ;
break ;};};if _gcdab {_cebad .Font =append (_cebad .Font ,_bbaa );};};};}else {_cebad .Font =_ecfd .Font ;};};}else if _ecfd !=nil {_cebad =_ecfd ;};_gdega ._gdb =_cebad ;if _gfgd :=_gdega ._bgf .FindRIDForN (0,_d .FontTableType );_gfgd ==""{_gdega .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006e\u0074T\u0061\u0062\u006c\u0065\u002b\u0078m\u006c");
_gdega ._bgf .AddRelationship ("\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c",_d .FontTableType );};};};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_eaa *Document )Endnote (id int64 )Endnote {for _ ,_cgcd :=range _eaa .Endnotes (){if _cgcd .id ()==id {return _cgcd ;};};return Endnote {};};

// Type returns the type of the style.
func (_cddbe Style )Type ()_bf .ST_StyleType {return _cddbe ._ccecg .TypeAttr };

// Fonts returns the style's Fonts.
func (_abffa RunProperties )Fonts ()Fonts {if _abffa ._gaffa .RFonts ==nil {_abffa ._gaffa .RFonts =_bf .NewCT_Fonts ();};return Fonts {_abffa ._gaffa .RFonts };};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;
FormFieldTypeDropDown ;);

// SetWidthPercent sets the table to a width percentage.
func (_gdbdf TableProperties )SetWidthPercent (pct float64 ){_gdbdf ._daef .TblW =_bf .NewCT_TblWidth ();_gdbdf ._daef .TblW .TypeAttr =_bf .ST_TblWidthPct ;_gdbdf ._daef .TblW .WAttr =&_bf .ST_MeasurementOrPercent {};_gdbdf ._daef .TblW .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};
_gdbdf ._daef .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (pct *50));};

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_ggccg *Document )Close ()error {if _ggccg .TmpPath !=""{return _ccd .RemoveAll (_ggccg .TmpPath );};return nil ;};

// FindNodeByText return node based on matched text and return a slice of node.
func (_dagbg *Nodes )FindNodeByText (text string )[]Node {_ecbdb :=[]Node {};for _ ,_gggdd :=range _dagbg ._gdbf {if _fd .TrimSpace (_gggdd .Text ())==text {_ecbdb =append (_ecbdb ,_gggdd );};_fdfc :=Nodes {_gdbf :_gggdd .Children };_ecbdb =append (_ecbdb ,_fdfc .FindNodeByText (text )...);
};return _ecbdb ;};type listItemInfo struct{FromStyle *Style ;FromParagraph *Paragraph ;AbstractNumId *int64 ;NumberingLevel *NumberingLevel ;};

// RemoveRun removes a child run from a paragraph.
func (_ffafd Paragraph )RemoveRun (r Run ){for _ ,_ggggb :=range _ffafd ._dbga .EG_PContent {for _bbffa ,_fcab :=range _ggggb .EG_ContentRunContent {if _fcab .R ==r ._ccceca {copy (_ggggb .EG_ContentRunContent [_bbffa :],_ggggb .EG_ContentRunContent [_bbffa +1:]);
_ggggb .EG_ContentRunContent =_ggggb .EG_ContentRunContent [0:len (_ggggb .EG_ContentRunContent )-1];};if _fcab .Sdt !=nil &&_fcab .Sdt .SdtContent !=nil {for _dbgfd ,_ffge :=range _fcab .Sdt .SdtContent .EG_ContentRunContent {if _ffge .R ==r ._ccceca {copy (_fcab .Sdt .SdtContent .EG_ContentRunContent [_dbgfd :],_fcab .Sdt .SdtContent .EG_ContentRunContent [_dbgfd +1:]);
_fcab .Sdt .SdtContent .EG_ContentRunContent =_fcab .Sdt .SdtContent .EG_ContentRunContent [0:len (_fcab .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_agfcg :=_bf .NewNumbering ();return Numbering {_agfcg }};func _aaba (_cgc *_bf .CT_Tbl ,_ccbc *_bf .CT_P ,_fcbc bool )*_bf .CT_Tbl {for _ ,_afd :=range _cgc .EG_ContentRowContent {for _ ,_cbba :=range _afd .Tr {for _ ,_bffb :=range _cbba .EG_ContentCellContent {for _ ,_ffgd :=range _bffb .Tc {for _eba ,_acdg :=range _ffgd .EG_BlockLevelElts {for _ ,_gcd :=range _acdg .EG_ContentBlockContent {for _cgcf ,_gfeg :=range _gcd .P {if _gfeg ==_ccbc {_ecf :=_bf .NewEG_BlockLevelElts ();
_fceg :=_bf .NewEG_ContentBlockContent ();_ecf .EG_ContentBlockContent =append (_ecf .EG_ContentBlockContent ,_fceg );_ecb :=_bf .NewCT_Tbl ();_fceg .Tbl =append (_fceg .Tbl ,_ecb );_ffgd .EG_BlockLevelElts =append (_ffgd .EG_BlockLevelElts ,nil );if _fcbc {copy (_ffgd .EG_BlockLevelElts [_eba +1:],_ffgd .EG_BlockLevelElts [_eba :]);
_ffgd .EG_BlockLevelElts [_eba ]=_ecf ;if _cgcf !=0{_fgfg :=_bf .NewEG_BlockLevelElts ();_gcb :=_bf .NewEG_ContentBlockContent ();_fgfg .EG_ContentBlockContent =append (_fgfg .EG_ContentBlockContent ,_gcb );_gcb .P =_gcd .P [:_cgcf ];_ffgd .EG_BlockLevelElts =append (_ffgd .EG_BlockLevelElts ,nil );
copy (_ffgd .EG_BlockLevelElts [_eba +1:],_ffgd .EG_BlockLevelElts [_eba :]);_ffgd .EG_BlockLevelElts [_eba ]=_fgfg ;};_gcd .P =_gcd .P [_cgcf :];}else {copy (_ffgd .EG_BlockLevelElts [_eba +2:],_ffgd .EG_BlockLevelElts [_eba +1:]);_ffgd .EG_BlockLevelElts [_eba +1]=_ecf ;
if _cgcf !=len (_gcd .P )-1{_baga :=_bf .NewEG_BlockLevelElts ();_fdae :=_bf .NewEG_ContentBlockContent ();_baga .EG_ContentBlockContent =append (_baga .EG_ContentBlockContent ,_fdae );_fdae .P =_gcd .P [_cgcf +1:];_ffgd .EG_BlockLevelElts =append (_ffgd .EG_BlockLevelElts ,nil );
copy (_ffgd .EG_BlockLevelElts [_eba +3:],_ffgd .EG_BlockLevelElts [_eba +2:]);_ffgd .EG_BlockLevelElts [_eba +2]=_baga ;}else {_gbg :=_bf .NewEG_BlockLevelElts ();_afg :=_bf .NewEG_ContentBlockContent ();_gbg .EG_ContentBlockContent =append (_gbg .EG_ContentBlockContent ,_afg );
_afg .P =[]*_bf .CT_P {_bf .NewCT_P ()};_ffgd .EG_BlockLevelElts =append (_ffgd .EG_BlockLevelElts ,nil );copy (_ffgd .EG_BlockLevelElts [_eba +3:],_ffgd .EG_BlockLevelElts [_eba +2:]);_ffgd .EG_BlockLevelElts [_eba +2]=_gbg ;};_gcd .P =_gcd .P [:_cgcf +1];
};return _ecb ;};};for _ ,_facf :=range _gcd .Tbl {_bgac :=_aaba (_facf ,_ccbc ,_fcbc );if _bgac !=nil {return _bgac ;};};};};};};};};return nil ;};

// AddWatermarkPicture adds new watermark picture to document.
func (_babbf *Document )AddWatermarkPicture (imageRef _aa .ImageRef )WatermarkPicture {var _cfbcb []Header ;if _gfda ,_ffgg :=_babbf .BodySection ().GetHeader (_bf .ST_HdrFtrDefault );_ffgg {_cfbcb =append (_cfbcb ,_gfda );};if _dbag ,_cgdfe :=_babbf .BodySection ().GetHeader (_bf .ST_HdrFtrEven );
_cgdfe {_cfbcb =append (_cfbcb ,_dbag );};if _eacbf ,_fcgaa :=_babbf .BodySection ().GetHeader (_bf .ST_HdrFtrFirst );_fcgaa {_cfbcb =append (_cfbcb ,_eacbf );};if len (_cfbcb )< 1{_gcc :=_babbf .AddHeader ();_babbf .BodySection ().SetHeader (_gcc ,_bf .ST_HdrFtrDefault );
_cfbcb =append (_cfbcb ,_gcc );};var _ecea error ;_adff :=NewWatermarkPicture ();for _ ,_eabg :=range _cfbcb {imageRef ,_ecea =_eabg .AddImageRef (imageRef );if _ecea !=nil {return WatermarkPicture {};};_ffbg :=_eabg .Paragraphs ();if len (_ffbg )< 1{_aaca :=_eabg .AddParagraph ();
_aaca .AddRun ().AddText ("");};for _ ,_dcab :=range _eabg .X ().EG_ContentBlockContent {for _ ,_cfa :=range _dcab .P {for _ ,_eaae :=range _cfa .EG_PContent {for _ ,_bafd :=range _eaae .EG_ContentRunContent {if _bafd .R ==nil {continue ;};for _ ,_ggbb :=range _bafd .R .EG_RunInnerContent {_ggbb .Pict =_adff ._geed ;
break ;};};};};};};_adff .SetPicture (imageRef );return _adff ;};

// Properties returns the table properties.
func (_dgcad Table )Properties ()TableProperties {if _dgcad ._gbaed .TblPr ==nil {_dgcad ._gbaed .TblPr =_bf .NewCT_TblPr ();};return TableProperties {_dgcad ._gbaed .TblPr };};

// Table is a table within a document.
type Table struct{_daafa *Document ;_gbaed *_bf .CT_Tbl ;};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_ege ,_fbba :=Open (filename );if _fbba !=nil {return nil ,_fbba ;};_ege ._aff .Body =_bf .NewCT_Body ();return _ege ,nil ;};

// SetWidthPercent sets the cell to a width percentage.
func (_cbf CellProperties )SetWidthPercent (pct float64 ){_cbf ._fdc .TcW =_bf .NewCT_TblWidth ();_cbf ._fdc .TcW .TypeAttr =_bf .ST_TblWidthPct ;_cbf ._fdc .TcW .WAttr =&_bf .ST_MeasurementOrPercent {};_cbf ._fdc .TcW .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};
_cbf ._fdc .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (pct *50));};

// ReplaceTextByRegexp replace the text within node using regexp expression.
func (_dfgfc *Node )ReplaceTextByRegexp (rgx *_cg .Regexp ,newText string ){switch _bdggd :=_dfgfc .X ().(type ){case *Paragraph :for _ ,_bgcd :=range _bdggd .Runs (){for _ ,_gfbc :=range _bgcd ._ccceca .EG_RunInnerContent {if _gfbc .T !=nil {_ddea :=_gfbc .T .Content ;
_ddea =rgx .ReplaceAllString (_ddea ,newText );_gfbc .T .Content =_ddea ;};};};};for _ ,_gagc :=range _dfgfc .Children {_gagc .ReplaceTextByRegexp (rgx ,newText );};};func _dgcaf (_aeaa *_bf .CT_Tbl ,_cgdd map[string ]string ){for _ ,_bfcd :=range _aeaa .EG_ContentRowContent {for _ ,_fgcf :=range _bfcd .Tr {for _ ,_dbgd :=range _fgcf .EG_ContentCellContent {for _ ,_gfdd :=range _dbgd .Tc {for _ ,_cbdb :=range _gfdd .EG_BlockLevelElts {for _ ,_bgeb :=range _cbdb .EG_ContentBlockContent {for _ ,_daec :=range _bgeb .P {_gbcc (_daec ,_cgdd );
};for _ ,_bfda :=range _bgeb .Tbl {_dgcaf (_bfda ,_cgdd );};};};};};};};};

// SizeValue returns the value of paragraph font size in points.
func (_adffb ParagraphProperties )SizeValue ()float64 {if _edbe :=_adffb ._fcdce .RPr .Sz ;_edbe !=nil {_gdcda :=_edbe .ValAttr ;if _gdcda .ST_UnsignedDecimalNumber !=nil {return float64 (*_gdcda .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_eaf CellProperties )SetVerticalAlignment (align _bf .ST_VerticalJc ){if align ==_bf .ST_VerticalJcUnset {_eaf ._fdc .VAlign =nil ;}else {_eaf ._fdc .VAlign =_bf .NewCT_VerticalJc ();_eaf ._fdc .VAlign .ValAttr =align ;};};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_agge ParagraphProperties )ComplexSizeValue ()float64 {if _gdcf :=_agge ._fcdce .RPr .SzCs ;_gdcf !=nil {_bfbd :=_gdcf .ValAttr ;if _bfbd .ST_UnsignedDecimalNumber !=nil {return float64 (*_bfbd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_eaeb *Document )FormFields ()[]FormField {_bdfg :=[]FormField {};for _ ,_fedf :=range _eaeb .Paragraphs (){_gec :=_fedf .Runs ();for _fgfb ,_dbb :=range _gec {for _ ,_dfgg :=range _dbb ._ccceca .EG_RunInnerContent {if _dfgg .FldChar ==nil ||_dfgg .FldChar .FfData ==nil {continue ;
};if _dfgg .FldChar .FldCharTypeAttr ==_bf .ST_FldCharTypeBegin {if len (_dfgg .FldChar .FfData .Name )==0||_dfgg .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_dbg :=FormField {_beca :_dfgg .FldChar .FfData };if _dfgg .FldChar .FfData .TextInput !=nil {for _baae :=_fgfb +1;
_baae < len (_gec )-1;_baae ++{if len (_gec [_baae ]._ccceca .EG_RunInnerContent )==0{continue ;};_cfea :=_gec [_baae ]._ccceca .EG_RunInnerContent [0];if _cfea .FldChar !=nil &&_cfea .FldChar .FldCharTypeAttr ==_bf .ST_FldCharTypeSeparate {if len (_gec [_baae +1]._ccceca .EG_RunInnerContent )==0{continue ;
};if _gec [_baae +1]._ccceca .EG_RunInnerContent [0].FldChar ==nil {_dbg ._bfecg =_gec [_baae +1]._ccceca .EG_RunInnerContent [0];break ;};};};};_bdfg =append (_bdfg ,_dbg );};};};};for _ ,_eegg :=range _eaeb .Headers (){for _ ,_ffaf :=range _eegg .Paragraphs (){_fafb :=_ffaf .Runs ();
for _bcdc ,_gcee :=range _fafb {for _ ,_dde :=range _gcee ._ccceca .EG_RunInnerContent {if _dde .FldChar ==nil ||_dde .FldChar .FfData ==nil {continue ;};if _dde .FldChar .FldCharTypeAttr ==_bf .ST_FldCharTypeBegin {if len (_dde .FldChar .FfData .Name )==0||_dde .FldChar .FfData .Name [0].ValAttr ==nil {continue ;
};_ebbd :=FormField {_beca :_dde .FldChar .FfData };if _dde .FldChar .FfData .TextInput !=nil {for _ffabc :=_bcdc +1;_ffabc < len (_fafb )-1;_ffabc ++{if len (_fafb [_ffabc ]._ccceca .EG_RunInnerContent )==0{continue ;};_dffc :=_fafb [_ffabc ]._ccceca .EG_RunInnerContent [0];
if _dffc .FldChar !=nil &&_dffc .FldChar .FldCharTypeAttr ==_bf .ST_FldCharTypeSeparate {if len (_fafb [_ffabc +1]._ccceca .EG_RunInnerContent )==0{continue ;};if _fafb [_ffabc +1]._ccceca .EG_RunInnerContent [0].FldChar ==nil {_ebbd ._bfecg =_fafb [_ffabc +1]._ccceca .EG_RunInnerContent [0];
break ;};};};};_bdfg =append (_bdfg ,_ebbd );};};};};};for _ ,_cbc :=range _eaeb .Footers (){for _ ,_efcc :=range _cbc .Paragraphs (){_febe :=_efcc .Runs ();for _eagea ,_bdagc :=range _febe {for _ ,_eddfa :=range _bdagc ._ccceca .EG_RunInnerContent {if _eddfa .FldChar ==nil ||_eddfa .FldChar .FfData ==nil {continue ;
};if _eddfa .FldChar .FldCharTypeAttr ==_bf .ST_FldCharTypeBegin {if len (_eddfa .FldChar .FfData .Name )==0||_eddfa .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_edgfc :=FormField {_beca :_eddfa .FldChar .FfData };if _eddfa .FldChar .FfData .TextInput !=nil {for _dfgfg :=_eagea +1;
_dfgfg < len (_febe )-1;_dfgfg ++{if len (_febe [_dfgfg ]._ccceca .EG_RunInnerContent )==0{continue ;};_agfc :=_febe [_dfgfg ]._ccceca .EG_RunInnerContent [0];if _agfc .FldChar !=nil &&_agfc .FldChar .FldCharTypeAttr ==_bf .ST_FldCharTypeSeparate {if len (_febe [_dfgfg +1]._ccceca .EG_RunInnerContent )==0{continue ;
};if _febe [_dfgfg +1]._ccceca .EG_RunInnerContent [0].FldChar ==nil {_edgfc ._bfecg =_febe [_dfgfg +1]._ccceca .EG_RunInnerContent [0];break ;};};};};_bdfg =append (_bdfg ,_edgfc );};};};};};return _bdfg ;};func (_ggegf *WatermarkText )getShape ()*_d .XSDAny {return _ggegf .getInnerElement ("\u0073\u0068\u0061p\u0065");
};

// SetLineSpacing controls the line spacing of the paragraph.
func (_dgfdd ParagraphStyleProperties )SetLineSpacing (m _abg .Distance ,rule _bf .ST_LineSpacingRule ){if _dgfdd ._egfe .Spacing ==nil {_dgfdd ._egfe .Spacing =_bf .NewCT_Spacing ();};if rule ==_bf .ST_LineSpacingRuleUnset {_dgfdd ._egfe .Spacing .LineRuleAttr =_bf .ST_LineSpacingRuleUnset ;
_dgfdd ._egfe .Spacing .LineAttr =nil ;}else {_dgfdd ._egfe .Spacing .LineRuleAttr =rule ;_dgfdd ._egfe .Spacing .LineAttr =&_bf .ST_SignedTwipsMeasure {};_dgfdd ._egfe .Spacing .LineAttr .Int64 =_d .Int64 (int64 (m /_abg .Twips ));};};

// RunProperties controls run styling properties.
type RunProperties struct{_gaffa *_bf .CT_RPr };

// TextWithOptions extract text with options.
func (_gcab *DocText )TextWithOptions (options ExtractTextOptions )string {_befc :=make (map[int64 ]map[int64 ]int64 ,0);_egcff :=_ag .NewBuffer ([]byte {});_bfcgg :=int64 (0);_adab :=int64 (0);_eegc :=int64 (0);for _def ,_fdcec :=range _gcab .Items {_gfff :=false ;
if _fdcec .Text !=""{if _def > 0{if _fdcec .Paragraph !=_gcab .Items [_def -1].Paragraph {_gfff =true ;};if !options .RunsOnNewLine &&_gfff {_egcff .WriteString ("\u000a");}else if options .RunsOnNewLine {_egcff .WriteString ("\u000a");};}else {_gfff =true ;
};if options .WithNumbering {if _gfff {for _ ,_gdaf :=range _gcab ._gbdfb {if _gdaf .FromParagraph ==nil {continue ;};if _gdaf .FromParagraph .X ()==_fdcec .Paragraph {if _cgad :=_gdaf .NumberingLevel .X ();_cgad !=nil {if _gdaf .AbstractNumId !=nil &&_gcab ._fadad [*_gdaf .AbstractNumId ][_cgad .IlvlAttr ]> 0{if _ ,_adaac :=_befc [*_gdaf .AbstractNumId ];
_adaac {if _ ,_bccgg :=_befc [*_gdaf .AbstractNumId ][_cgad .IlvlAttr ];_bccgg {_befc [*_gdaf .AbstractNumId ][_cgad .IlvlAttr ]++;}else {_befc [*_gdaf .AbstractNumId ][_cgad .IlvlAttr ]=1;};}else {_befc [*_gdaf .AbstractNumId ]=map[int64 ]int64 {_cgad .IlvlAttr :1};
};if _bfcgg ==_gdaf .NumberingLevel .X ().IlvlAttr &&_cgad .IlvlAttr > 0{_adab ++;}else {_adab =_befc [*_gdaf .AbstractNumId ][_cgad .IlvlAttr ];if _cgad .IlvlAttr > _bfcgg &&_eegc ==*_gdaf .AbstractNumId {_adab =1;};};_dage :="";if _cgad .LvlText .ValAttr !=nil {_dage =*_cgad .LvlText .ValAttr ;
};_fdabf :=_gd .FormatNumberingText (_adab ,_cgad .IlvlAttr ,_dage ,_cgad .NumFmt ,_befc [*_gdaf .AbstractNumId ]);_egcff .WriteString (_fdabf );_gcab ._fadad [*_gdaf .AbstractNumId ][_cgad .IlvlAttr ]--;_bfcgg =_cgad .IlvlAttr ;_eegc =*_gdaf .AbstractNumId ;
if options .NumberingIndent !=""{_egcff .WriteString (options .NumberingIndent );};};};break ;};};};};_egcff .WriteString (_fdcec .Text );};};return _egcff .String ();};

// X returns the inner wrapped type
func (_aba CellBorders )X ()*_bf .CT_TcBorders {return _aba ._eeea };func (_fcacc *WatermarkPicture )findNode (_feca *_d .XSDAny ,_aadce string )*_d .XSDAny {for _ ,_edfd :=range _feca .Nodes {if _edfd .XMLName .Local ==_aadce {return _edfd ;};};return nil ;
};

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_bec *Document )GetImageObjByRelId (relId string )(_aa .Image ,error ){_gfagb :=_bec ._bgf .GetTargetByRelIdAndType (relId ,_d .ImageType );if _gfagb ==""{for _ ,_eeee :=range _bec ._fgea {_gfagb =_eeee .GetTargetByRelIdAndType (relId ,_d .ImageType );
};};if _gfagb ==""{for _ ,_bgdfd :=range _bec ._fb {_gfagb =_bgdfd .GetTargetByRelIdAndType (relId ,_d .ImageType );};};return _bec .DocBase .GetImageBytesByTarget (_gfagb );};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;_gbdfb []listItemInfo ;_fadad map[int64 ]map[int64 ]int64 ;};

// ReplaceTextByRegexp replace text inside node using regexp.
func (_dafg *Nodes )ReplaceTextByRegexp (expr *_cg .Regexp ,newText string ){for _ ,_gggfc :=range _dafg ._gdbf {_gggfc .ReplaceTextByRegexp (expr ,newText );};};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_dedee NumberingLevel )RunProperties ()RunProperties {if _dedee ._dfaa .RPr ==nil {_dedee ._dfaa .RPr =_bf .NewCT_RPr ();};return RunProperties {_dedee ._dfaa .RPr };};

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_bfaeg Section )GetHeader (t _bf .ST_HdrFtr )(Header ,bool ){for _ ,_fdeff :=range _bfaeg ._fgca .EG_HdrFtrReferences {if _fdeff .HeaderReference .TypeAttr ==t {for _ ,_bcag :=range _bfaeg ._efed .Headers (){_feaee :=_bfaeg ._efed ._bgf .FindRIDForN (_bcag .Index (),_d .HeaderType );
if _feaee ==_fdeff .HeaderReference .IdAttr {return _bcag ,true ;};};};};return Header {},false ;};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_dgac RunProperties )CharacterSpacingValue ()int64 {if _edec :=_dgac ._gaffa .Spacing ;_edec !=nil {_efdc :=_edec .ValAttr ;if _efdc .Int64 !=nil {return *_efdc .Int64 ;};};return int64 (0);};

// SetEmboss sets the run to embossed text.
func (_acdb RunProperties )SetEmboss (b bool ){if !b {_acdb ._gaffa .Emboss =nil ;}else {_acdb ._gaffa .Emboss =_bf .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_ggbeg Numbering )X ()*_bf .Numbering {return _ggbeg ._gdegf };

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_faeb Run )AddDrawingInline (img _aa .ImageRef )(InlineDrawing ,error ){_eegd :=_faeb .newIC ();_eegd .Drawing =_bf .NewCT_Drawing ();_fgbfd :=_bf .NewWdInline ();_dfbfc :=InlineDrawing {_faeb ._abedg ,_fgbfd };_fgbfd .CNvGraphicFramePr =_fa .NewCT_NonVisualGraphicFrameProperties ();
_eegd .Drawing .Inline =append (_eegd .Drawing .Inline ,_fgbfd );_fgbfd .Graphic =_fa .NewGraphic ();_fgbfd .Graphic .GraphicData =_fa .NewCT_GraphicalObjectData ();_fgbfd .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_fgbfd .DistTAttr =_d .Uint32 (0);_fgbfd .DistLAttr =_d .Uint32 (0);_fgbfd .DistBAttr =_d .Uint32 (0);_fgbfd .DistRAttr =_d .Uint32 (0);_fgbfd .Extent .CxAttr =int64 (float64 (img .Size ().X *_abg .Pixel72 )/_abg .EMU );_fgbfd .Extent .CyAttr =int64 (float64 (img .Size ().Y *_abg .Pixel72 )/_abg .EMU );
_acfb :=0x7FFFFFFF&_f .Uint32 ();_fgbfd .DocPr .IdAttr =_acfb ;_bcaf :=_cgd .NewPic ();_bcaf .NvPicPr .CNvPr .IdAttr =_acfb ;_fcfd :=img .RelID ();if _fcfd ==""{return _dfbfc ,_ca .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_fgbfd .Graphic .GraphicData .Any =append (_fgbfd .Graphic .GraphicData .Any ,_bcaf );_bcaf .BlipFill =_fa .NewCT_BlipFillProperties ();_bcaf .BlipFill .Blip =_fa .NewCT_Blip ();_bcaf .BlipFill .Blip .EmbedAttr =&_fcfd ;_bcaf .BlipFill .Stretch =_fa .NewCT_StretchInfoProperties ();
_bcaf .BlipFill .Stretch .FillRect =_fa .NewCT_RelativeRect ();_bcaf .SpPr =_fa .NewCT_ShapeProperties ();_bcaf .SpPr .Xfrm =_fa .NewCT_Transform2D ();_bcaf .SpPr .Xfrm .Off =_fa .NewCT_Point2D ();_bcaf .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_d .Int64 (0);
_bcaf .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_d .Int64 (0);_bcaf .SpPr .Xfrm .Ext =_fa .NewCT_PositiveSize2D ();_bcaf .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_abg .Point );_bcaf .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_abg .Point );
_bcaf .SpPr .PrstGeom =_fa .NewCT_PresetGeometry2D ();_bcaf .SpPr .PrstGeom .PrstAttr =_fa .ST_ShapeTypeRect ;return _dfbfc ,nil ;};

// SetCSTheme sets the font complex script theme.
func (_aabge Fonts )SetCSTheme (t _bf .ST_Theme ){_aabge ._afga .CsthemeAttr =t };

// VerticalAlign returns the value of run vertical align.
func (_dadf RunProperties )VerticalAlignment ()_de .ST_VerticalAlignRun {if _ggfg :=_dadf ._gaffa .VertAlign ;_ggfg !=nil {return _ggfg .ValAttr ;};return 0;};var _acaf =[...]uint8 {0,20,37,58,79};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_fgdc ParagraphProperties )CharacterSpacingValue ()int64 {if _fggcb :=_fgdc ._fcdce .RPr .Spacing ;_fggcb !=nil {_dbda :=_fggcb .ValAttr ;if _dbda .Int64 !=nil {return *_dbda .Int64 ;};};return int64 (0);};

// SaveToFile writes the document out to a file.
func (_dedd *Document )SaveToFile (path string )error {_ffab ,_deg :=_a .Create (path );if _deg !=nil {return _deg ;};defer _ffab .Close ();return _dedd .Save (_ffab );};func (_fdabg Document )mergeFields ()[]mergeFieldInfo {_acbg :=[]Paragraph {};_bgcac :=[]mergeFieldInfo {};
for _ ,_ebed :=range _fdabg .Tables (){for _ ,_gfbf :=range _ebed .Rows (){for _ ,_fcec :=range _gfbf .Cells (){_acbg =append (_acbg ,_fcec .Paragraphs ()...);};};};_acbg =append (_acbg ,_fdabg .Paragraphs ()...);for _ ,_fbccb :=range _fdabg .Headers (){_acbg =append (_acbg ,_fbccb .Paragraphs ()...);
for _ ,_fdfa :=range _fbccb .Tables (){for _ ,_ccff :=range _fdfa .Rows (){for _ ,_cfdf :=range _ccff .Cells (){_acbg =append (_acbg ,_cfdf .Paragraphs ()...);};};};};for _ ,_cbebc :=range _fdabg .Footers (){_acbg =append (_acbg ,_cbebc .Paragraphs ()...);
for _ ,_bcdb :=range _cbebc .Tables (){for _ ,_gbdge :=range _bcdb .Rows (){for _ ,_bfca :=range _gbdge .Cells (){_acbg =append (_acbg ,_bfca .Paragraphs ()...);};};};};for _ ,_gbdb :=range _acbg {_efcd :=_gbdb .Runs ();_ccffb :=-1;_bcad :=-1;_bceeg :=-1;
_gecgc :=mergeFieldInfo {};for _ ,_cdcce :=range _gbdb ._dbga .EG_PContent {for _ ,_egef :=range _cdcce .FldSimple {if _fd .Contains (_egef .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_efbg :=_ddcb (_egef .InstrAttr );_efbg ._efdd =true ;
_efbg ._fgaf =_gbdb ;_efbg ._bfba =_cdcce ;_bgcac =append (_bgcac ,_efbg );};};};for _acadf :=0;_acadf < len (_efcd );_acadf ++{_adad :=_efcd [_acadf ];for _ ,_dbbc :=range _adad .X ().EG_RunInnerContent {if _dbbc .FldChar !=nil {switch _dbbc .FldChar .FldCharTypeAttr {case _bf .ST_FldCharTypeBegin :_ccffb =_acadf ;
case _bf .ST_FldCharTypeSeparate :_bcad =_acadf ;case _bf .ST_FldCharTypeEnd :_bceeg =_acadf ;if _gecgc ._egfd !=""{_gecgc ._fgaf =_gbdb ;_gecgc ._ebec =_ccffb ;_gecgc ._gdfg =_bceeg ;_gecgc ._eggd =_bcad ;_bgcac =append (_bgcac ,_gecgc );};_ccffb =-1;
_bcad =-1;_bceeg =-1;_gecgc =mergeFieldInfo {};};}else if _dbbc .InstrText !=nil &&_fd .Contains (_dbbc .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _ccffb !=-1&&_bceeg ==-1{_gecgc =_ddcb (_dbbc .InstrText .Content );
};};};};};return _bgcac ;};func (_bbda *WatermarkText )getInnerElement (_ecfdaf string )*_d .XSDAny {for _ ,_dbgfdb :=range _bbda ._ccfe .Any {_efcde ,_ffggc :=_dbgfdb .(*_d .XSDAny );if _ffggc &&(_efcde .XMLName .Local ==_ecfdaf ||_efcde .XMLName .Local =="\u0076\u003a"+_ecfdaf ){return _efcde ;
};};return nil ;};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_dce *Document )Footnote (id int64 )Footnote {for _ ,_fbee :=range _dce .Footnotes (){if _fbee .id ()==id {return _fbee ;};};return Footnote {};};type mergeFieldInfo struct{_egfd string ;_ffcbf string ;_ffega string ;_begfa bool ;_egdgb bool ;_addc bool ;
_bfgfb bool ;_fgaf Paragraph ;_ebec ,_eggd ,_gdfg int ;_bfba *_bf .EG_PContent ;_efdd bool ;};

// SetName marks sets a name attribute for a FormField.
func (_ecfgf FormField )SetName (name string ){_afcg :=_bf .NewCT_FFName ();_afcg .ValAttr =&name ;_ecfgf ._beca .Name =[]*_bf .CT_FFName {_afcg };};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_ecbfc FormField )SetChecked (b bool ){if _ecbfc ._beca .CheckBox ==nil {return ;};if !b {_ecbfc ._beca .CheckBox .Checked =nil ;}else {_ecbfc ._beca .CheckBox .Checked =_bf .NewCT_OnOff ();};};

// EastAsiaFont returns the name of run font family for East Asia.
func (_dfaac RunProperties )EastAsiaFont ()string {if _daaa :=_dfaac ._gaffa .RFonts ;_daaa !=nil {if _daaa .EastAsiaAttr !=nil {return *_daaa .EastAsiaAttr ;};};return "";};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_faf CellBorders )SetBottom (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_faf ._eeea .Bottom =_bf .NewCT_Border ();_gbfg (_faf ._eeea .Bottom ,t ,c ,thickness );};

// SetEndIndent controls the end indentation.
func (_cafde ParagraphProperties )SetEndIndent (m _abg .Distance ){if _cafde ._fcdce .Ind ==nil {_cafde ._fcdce .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_cafde ._fcdce .Ind .EndAttr =nil ;}else {_cafde ._fcdce .Ind .EndAttr =&_bf .ST_SignedTwipsMeasure {};
_cafde ._fcdce .Ind .EndAttr .Int64 =_d .Int64 (int64 (m /_abg .Twips ));};};

// Pict returns the pict object.
func (_degg *WatermarkText )Pict ()*_bf .CT_Picture {return _degg ._ccfe };func (_feeg Paragraph )addInstrText (_dcbb string )*_bf .CT_Text {_fdaba :=_feeg .AddRun ();_acabg :=_fdaba .X ();_eccdd :=_bf .NewEG_RunInnerContent ();_dcde :=_bf .NewCT_Text ();
_aefd :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_dcde .SpaceAttr =&_aefd ;_dcde .Content ="\u0020"+_dcbb +"\u0020";_eccdd .InstrText =_dcde ;_acabg .EG_RunInnerContent =append (_acabg .EG_RunInnerContent ,_eccdd );return _dcde ;};

// StyleID returns the style ID.
func (_cfae Style )StyleID ()string {if _cfae ._ccecg .StyleIdAttr ==nil {return "";};return *_cfae ._ccecg .StyleIdAttr ;};

// GetSize return the size of anchor on the page.
func (_beg AnchoredDrawing )GetSize ()(_bab ,_bbc int64 ){return _beg ._fc .Extent .CxAttr ,_beg ._fc .Extent .CyAttr ;};

// SetTextWrapTight sets the text wrap to tight with a give wrap type.
func (_ccc AnchoredDrawing )SetTextWrapTight (option *AnchorDrawWrapOptions ){_ccc ._fc .Choice =&_bf .WdEG_WrapTypeChoice {};_ccc ._fc .Choice .WrapTight =_bf .NewWdCT_WrapTight ();_ccc ._fc .Choice .WrapTight .WrapTextAttr =_bf .WdST_WrapTextBothSides ;
_bed :=false ;_ccc ._fc .Choice .WrapTight .WrapPolygon .EditedAttr =&_bed ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_ccc ._fc .Choice .WrapTight .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_ccc ._fc .Choice .WrapTight .WrapPolygon .Start =option .GetWrapPathStart ();
_ccc ._fc .LayoutInCellAttr =true ;_ccc ._fc .AllowOverlapAttr =true ;};

// SetTextWrapThrough sets the text wrap to through with a give wrap type.
func (_dca AnchoredDrawing )SetTextWrapThrough (option *AnchorDrawWrapOptions ){_dca ._fc .Choice =&_bf .WdEG_WrapTypeChoice {};_dca ._fc .Choice .WrapThrough =_bf .NewWdCT_WrapThrough ();_dca ._fc .Choice .WrapThrough .WrapTextAttr =_bf .WdST_WrapTextBothSides ;
_abd :=false ;_dca ._fc .Choice .WrapThrough .WrapPolygon .EditedAttr =&_abd ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_dca ._fc .Choice .WrapThrough .WrapPolygon .Start =option .GetWrapPathStart ();_dca ._fc .Choice .WrapThrough .WrapPolygon .LineTo =option .GetWrapPathLineTo ();
_dca ._fc .LayoutInCellAttr =true ;_dca ._fc .AllowOverlapAttr =true ;};

// SetLinkedStyle sets the style that this style is linked to.
func (_afad Style )SetLinkedStyle (name string ){if name ==""{_afad ._ccecg .Link =nil ;}else {_afad ._ccecg .Link =_bf .NewCT_String ();_afad ._ccecg .Link .ValAttr =name ;};};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_ceddb *_bf .CT_TblLook };func (_fbcf Footnote )id ()int64 {return _fbcf ._gdcb .IdAttr };

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_cccbg *Document )GetImageByRelID (relID string )(_aa .ImageRef ,bool ){_abgg :=_cccbg ._bgf .GetTargetByRelId (relID );_ebdf :="";for _ ,_egcdf :=range _cccbg ._fgea {if _ebdf !=""{break ;};_ebdf =_egcdf .GetTargetByRelId (relID );};for _ ,_egdcd :=range _cccbg .Images {if _egdcd .RelID ()==relID {return _egdcd ,true ;
};if _abgg !=""{_faeg :=_fd .Replace (_egdcd .Target (),"\u0077\u006f\u0072d\u002f","",1);if _faeg ==_abgg {if _egdcd .RelID ()==""{_egdcd .SetRelID (relID );};return _egdcd ,true ;};};if _ebdf !=""{_ffae :=_fd .Replace (_egdcd .Target (),"\u0077\u006f\u0072d\u002f","",1);
if _ffae ==_ebdf {if _egdcd .RelID ()==""{_egdcd .SetRelID (relID );};return _egdcd ,true ;};};};return _aa .ImageRef {},false ;};

// TableProperties returns the table style properties.
func (_beba Style )TableProperties ()TableStyleProperties {if _beba ._ccecg .TblPr ==nil {_beba ._ccecg .TblPr =_bf .NewCT_TblPrBase ();};return TableStyleProperties {_beba ._ccecg .TblPr };};func _deec (_gfdde *Document ,_ggcb []*_bf .CT_P ,_gccge *TableInfo ,_acde *DrawingInfo )[]Node {_ggbgd :=[]Node {};
for _ ,_gcage :=range _ggcb {_ecaf :=Paragraph {_gfdde ,_gcage };_dceb :=Node {_gdcag :_gfdde ,_gcedb :&_ecaf };if _abafg ,_egcdfd :=_gfdde .Styles .SearchStyleById (_ecaf .Style ());_egcdfd {_dceb .Style =_abafg ;};for _ ,_ddcbd :=range _ecaf .Runs (){_dceb .Children =append (_dceb .Children ,Node {_gdcag :_gfdde ,_gcedb :_ddcbd ,AnchoredDrawings :_ddcbd .DrawingAnchored (),InlineDrawings :_ddcbd .DrawingInline ()});
};_ggbgd =append (_ggbgd ,_dceb );};return _ggbgd ;};func (_cfedc *Document )putNode (_fede ,_daea Node ,_adbf bool )bool {_cfedc .insertImageFromNode (_daea );_cfedc .insertStyleFromNode (_daea );switch _ffde :=_daea ._gcedb .(type ){case *Paragraph :if _fgda ,_cddd :=_fede .X ().(*Paragraph );
_cddd {_cfedc .appendParagraph (_fgda ,*_ffde ,_adbf );return true ;}else {for _ ,_agbe :=range _fede .Children {if _ddag :=_cfedc .putNode (_agbe ,_daea ,_adbf );_ddag {break ;};};};case *Table :if _bbcgce ,_dcfg :=_fede .X ().(*Paragraph );_dcfg {_fgac :=_cfedc .appendTable (_bbcgce ,*_ffde ,_adbf );
_fgac ._gbaed =_ffde ._gbaed ;return true ;}else {for _ ,_aegg :=range _fede .Children {if _gdbc :=_cfedc .putNode (_aegg ,_daea ,_adbf );_gdbc {break ;};};};};return false ;};

// SetColor sets a specific color or auto.
func (_dae Color )SetColor (v _ff .Color ){if v .IsAuto (){_dae ._baba .ValAttr .ST_HexColorAuto =_bf .ST_HexColorAutoAuto ;_dae ._baba .ValAttr .ST_HexColorRGB =nil ;}else {_dae ._baba .ValAttr .ST_HexColorAuto =_bf .ST_HexColorAutoUnset ;_dae ._baba .ValAttr .ST_HexColorRGB =v .AsRGBString ();
};};

// GetShapeStyle returns string style of the shape in watermark and format it to ShapeStyle.
func (_cdfa *WatermarkPicture )GetShapeStyle ()_ba .ShapeStyle {if _cdfa ._gbdfg !=nil &&_cdfa ._gbdfg .StyleAttr !=nil {return _ba .NewShapeStyle (*_cdfa ._gbdfg .StyleAttr );};return _ba .NewShapeStyle ("");};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_cedd InlineDrawing )GetImage ()(_aa .ImageRef ,bool ){_afdac :=_cedd ._ggbg .Graphic .GraphicData .Any ;if len (_afdac )> 0{_debg ,_aabga :=_afdac [0].(*_cgd .Pic );if _aabga {if _debg .BlipFill !=nil &&_debg .BlipFill .Blip !=nil &&_debg .BlipFill .Blip .EmbedAttr !=nil {return _cedd ._ebdac .GetImageByRelID (*_debg .BlipFill .Blip .EmbedAttr );
};};};return _aa .ImageRef {},false ;};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_be AnchoredDrawing )SetOrigin (h _bf .WdST_RelFromH ,v _bf .WdST_RelFromV ){_be ._fc .PositionH .RelativeFromAttr =h ;_be ._fc .PositionV .RelativeFromAttr =v ;};func (_egecd Paragraph )insertRun (_ebef Run ,_fgaaf bool )Run {for _ ,_bcec :=range _egecd ._dbga .EG_PContent {for _beegb ,_eddd :=range _bcec .EG_ContentRunContent {if _eddd .R ==_ebef .X (){_fbbca :=_bf .NewCT_R ();
_bcec .EG_ContentRunContent =append (_bcec .EG_ContentRunContent ,nil );if _fgaaf {copy (_bcec .EG_ContentRunContent [_beegb +1:],_bcec .EG_ContentRunContent [_beegb :]);_bcec .EG_ContentRunContent [_beegb ]=_bf .NewEG_ContentRunContent ();_bcec .EG_ContentRunContent [_beegb ].R =_fbbca ;
}else {copy (_bcec .EG_ContentRunContent [_beegb +2:],_bcec .EG_ContentRunContent [_beegb +1:]);_bcec .EG_ContentRunContent [_beegb +1]=_bf .NewEG_ContentRunContent ();_bcec .EG_ContentRunContent [_beegb +1].R =_fbbca ;};return Run {_egecd ._gffg ,_fbbca };
};if _eddd .Sdt !=nil &&_eddd .Sdt .SdtContent !=nil {for _ ,_dcecg :=range _eddd .Sdt .SdtContent .EG_ContentRunContent {if _dcecg .R ==_ebef .X (){_gdbe :=_bf .NewCT_R ();_eddd .Sdt .SdtContent .EG_ContentRunContent =append (_eddd .Sdt .SdtContent .EG_ContentRunContent ,nil );
if _fgaaf {copy (_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb +1:],_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb :]);_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb ]=_bf .NewEG_ContentRunContent ();_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb ].R =_gdbe ;
}else {copy (_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb +2:],_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb +1:]);_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb +1]=_bf .NewEG_ContentRunContent ();_eddd .Sdt .SdtContent .EG_ContentRunContent [_beegb +1].R =_gdbe ;
};return Run {_egecd ._gffg ,_gdbe };};};};};};return _egecd .AddRun ();};

// Type returns the type of the field.
func (_gace FormField )Type ()FormFieldType {if _gace ._beca .TextInput !=nil {return FormFieldTypeText ;}else if _gace ._beca .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _gace ._beca .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;
};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_egfe *_bf .CT_PPrGeneral };

// Endnotes returns the endnotes defined in the document.
func (_fbf *Document )Endnotes ()[]Endnote {_ecc :=[]Endnote {};for _ ,_dgff :=range _fbf ._cbfc .CT_Endnotes .Endnote {_ecc =append (_ecc ,Endnote {_fbf ,_dgff });};return _ecc ;};

// Definitions returns the defined numbering definitions.
func (_cggee Numbering )Definitions ()[]NumberingDefinition {_dfgfcg :=[]NumberingDefinition {};if _cggee ._gdegf !=nil {for _ ,_abfd :=range _cggee ._gdegf .AbstractNum {_dfgfcg =append (_dfgfcg ,NumberingDefinition {_abfd });};};return _dfgfcg ;};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_aebbf *_bf .Styles };

// SetFooter sets a section footer.
func (_gffae Section )SetFooter (f Footer ,t _bf .ST_HdrFtr ){_bafc :=_bf .NewEG_HdrFtrReferences ();_gffae ._fgca .EG_HdrFtrReferences =append (_gffae ._fgca .EG_HdrFtrReferences ,_bafc );_bafc .FooterReference =_bf .NewCT_HdrFtrRef ();_bafc .FooterReference .TypeAttr =t ;
_cfffd :=_gffae ._efed ._bgf .FindRIDForN (f .Index (),_d .FooterType );if _cfffd ==""{_e .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");
};_bafc .FooterReference .IdAttr =_cfffd ;};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_gadb RunProperties )SetCharacterSpacing (size _abg .Distance ){_gadb ._gaffa .Spacing =_bf .NewCT_SignedTwipsMeasure ();_gadb ._gaffa .Spacing .ValAttr .Int64 =_d .Int64 (int64 (size /_abg .Twips ));};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_gbfbg RunProperties )RStyle ()string {if _gbfbg ._gaffa .RStyle !=nil {return _gbfbg ._gaffa .RStyle .ValAttr ;};return "";};

// SetVerticalMerge controls the vertical merging of cells.
func (_eeag CellProperties )SetVerticalMerge (mergeVal _bf .ST_Merge ){if mergeVal ==_bf .ST_MergeUnset {_eeag ._fdc .VMerge =nil ;}else {_eeag ._fdc .VMerge =_bf .NewCT_VMerge ();_eeag ._fdc .VMerge .ValAttr =mergeVal ;};};func (_fdeg *chart )Target ()string {return _fdeg ._fde };


// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_effgc Style )TableConditionalFormatting (typ _bf .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_abcfd :=range _effgc ._ccecg .TblStylePr {if _abcfd .TypeAttr ==typ {return TableConditionalFormatting {_abcfd };};};_gegg :=_bf .NewCT_TblStylePr ();
_gegg .TypeAttr =typ ;_effgc ._ccecg .TblStylePr =append (_effgc ._ccecg .TblStylePr ,_gegg );return TableConditionalFormatting {_gegg };};

// GetFooter gets a section Footer for given type
func (_bbad Section )GetFooter (t _bf .ST_HdrFtr )(Footer ,bool ){for _ ,_fcce :=range _bbad ._fgca .EG_HdrFtrReferences {if _fcce .FooterReference .TypeAttr ==t {for _ ,_afdec :=range _bbad ._efed .Footers (){_accfe :=_bbad ._efed ._bgf .FindRIDForN (_afdec .Index (),_d .FooterType );
if _accfe ==_fcce .FooterReference .IdAttr {return _afdec ,true ;};};};};return Footer {},false ;};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_fddea ParagraphProperties )AddSection (t _bf .ST_SectionMark )Section {_fddea ._fcdce .SectPr =_bf .NewCT_SectPr ();if t !=_bf .ST_SectionMarkUnset {_fddea ._fcdce .SectPr .Type =_bf .NewCT_SectType ();_fddea ._fcdce .SectPr .Type .ValAttr =t ;};
return Section {_fddea ._dega ,_fddea ._fcdce .SectPr };};

// X returns the internally wrapped *wml.CT_SectPr.
func (_bddcf Section )X ()*_bf .CT_SectPr {return _bddcf ._fgca };

// SetRightPct sets the cell right margin
func (_gaa CellMargins )SetRightPct (pct float64 ){_gaa ._dcd .Right =_bf .NewCT_TblWidth ();_eac (_gaa ._dcd .Right ,pct );};

// GetStyleByID returns Style by it's IdAttr.
func (_accda *Document )GetStyleByID (id string )Style {for _ ,_bfcdd :=range _accda .Styles ._aebbf .Style {if _bfcdd .StyleIdAttr !=nil &&*_bfcdd .StyleIdAttr ==id {return Style {_bfcdd };};};return Style {};};

// Rows returns the rows defined in the table.
func (_dffe Table )Rows ()[]Row {_daca :=[]Row {};for _ ,_acbd :=range _dffe ._gbaed .EG_ContentRowContent {for _ ,_gfgaa :=range _acbd .Tr {_daca =append (_daca ,Row {_dffe ._daafa ,_gfgaa });};if _acbd .Sdt !=nil &&_acbd .Sdt .SdtContent !=nil {for _ ,_egaed :=range _acbd .Sdt .SdtContent .Tr {_daca =append (_daca ,Row {_dffe ._daafa ,_egaed });
};};};return _daca ;};

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_fafa *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_aeedd :=range _fafa ._bgf .X ().Relationship {if _aeedd .IdAttr ==idAttr {return _aeedd .TargetAttr ;};};return "";};

// X returns the inner wrapped XML type.
func (_ebfe TableWidth )X ()*_bf .CT_TblWidth {return _ebfe ._acgg };

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_effa ParagraphProperties )SetKeepWithNext (b bool ){if !b {_effa ._fcdce .KeepNext =nil ;}else {_effa ._fcdce .KeepNext =_bf .NewCT_OnOff ();};};

// SetKerning sets the run's font kerning.
func (_ddced RunProperties )SetKerning (size _abg .Distance ){_ddced ._gaffa .Kern =_bf .NewCT_HpsMeasure ();_ddced ._gaffa .Kern .ValAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (size /_abg .HalfPoint ));};

// SetAfterLineSpacing sets spacing below paragraph in line units.
func (_cfdge Paragraph )SetAfterLineSpacing (d _abg .Distance ){_cfdge .ensurePPr ();if _cfdge ._dbga .PPr .Spacing ==nil {_cfdge ._dbga .PPr .Spacing =_bf .NewCT_Spacing ();};_aggc :=_cfdge ._dbga .PPr .Spacing ;_aggc .AfterLinesAttr =_d .Int64 (int64 (d /_abg .Twips ));
};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_dbbb ParagraphSpacing )SetBeforeAuto (b bool ){if b {_dbbb ._dgdbe .BeforeAutospacingAttr =&_de .ST_OnOff {};_dbbb ._dgdbe .BeforeAutospacingAttr .Bool =_d .Bool (true );}else {_dbbb ._dgdbe .BeforeAutospacingAttr =nil ;};};func (_gccc *Document )insertNumberingFromStyleProperties (_cgee Numbering ,_bdad ParagraphStyleProperties ){_cfdb :=_bdad .NumId ();
_affg :=int64 (-1);if _cfdb > -1{for _ ,_gbed :=range _cgee ._gdegf .Num {if _gbed .NumIdAttr ==_cfdb {if _gbed .AbstractNumId !=nil {_affg =_gbed .AbstractNumId .ValAttr ;_eaca :=false ;for _ ,_dcce :=range _gccc .Numbering ._gdegf .Num {if _dcce .NumIdAttr ==_cfdb {_eaca =true ;
break ;};};if !_eaca {_gccc .Numbering ._gdegf .Num =append (_gccc .Numbering ._gdegf .Num ,_gbed );};break ;};};};for _ ,_eaef :=range _cgee ._gdegf .AbstractNum {if _eaef .AbstractNumIdAttr ==_affg {_bacd :=false ;for _ ,_fdbdg :=range _gccc .Numbering ._gdegf .AbstractNum {if _fdbdg .AbstractNumIdAttr ==_affg {_bacd =true ;
break ;};};if !_bacd {_gccc .Numbering ._gdegf .AbstractNum =append (_gccc .Numbering ._gdegf .AbstractNum ,_eaef );};break ;};};};};func _eegfe (_caccg *_bf .CT_OnOff )OnOffValue {if _caccg ==nil {return OnOffValueUnset ;};if _caccg .ValAttr !=nil &&_caccg .ValAttr .Bool !=nil &&*_caccg .ValAttr .Bool ==false {return OnOffValueOff ;
};return OnOffValueOn ;};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_cgggc RunProperties )SetVerticalAlignment (v _de .ST_VerticalAlignRun ){if v ==_de .ST_VerticalAlignRunUnset {_cgggc ._gaffa .VertAlign =nil ;}else {_cgggc ._gaffa .VertAlign =_bf .NewCT_VerticalAlignRun ();_cgggc ._gaffa .VertAlign .ValAttr =v ;
};};

// AddRun adds a run to a paragraph.
func (_fgaa Paragraph )AddRun ()Run {_bcfb :=_bf .NewEG_PContent ();_fgaa ._dbga .EG_PContent =append (_fgaa ._dbga .EG_PContent ,_bcfb );_aeec :=_bf .NewEG_ContentRunContent ();_bcfb .EG_ContentRunContent =append (_bcfb .EG_ContentRunContent ,_aeec );
_gecb :=_bf .NewCT_R ();_aeec .R =_gecb ;return Run {_fgaa ._gffg ,_gecb };};

// ReplaceText replace the text inside node.
func (_ffba *Node )ReplaceText (oldText ,newText string ){switch _cebgb :=_ffba .X ().(type ){case *Paragraph :for _ ,_abbdd :=range _cebgb .Runs (){for _ ,_egagc :=range _abbdd ._ccceca .EG_RunInnerContent {if _egagc .T !=nil {_agdee :=_egagc .T .Content ;
_agdee =_fd .ReplaceAll (_agdee ,oldText ,newText );_egagc .T .Content =_agdee ;};};};};for _ ,_fdba :=range _ffba .Children {_fdba .ReplaceText (oldText ,newText );};};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_adba *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _adba .insertParagraph (relativeTo ,false );};

// AddParagraph adds a paragraph to the table cell.
func (_bad Cell )AddParagraph ()Paragraph {_fce :=_bf .NewEG_BlockLevelElts ();_bad ._cbe .EG_BlockLevelElts =append (_bad ._cbe .EG_BlockLevelElts ,_fce );_ffe :=_bf .NewEG_ContentBlockContent ();_fce .EG_ContentBlockContent =append (_fce .EG_ContentBlockContent ,_ffe );
_eee :=_bf .NewCT_P ();_ffe .P =append (_ffe .P ,_eee );return Paragraph {_bad ._ddc ,_eee };};

// Properties returns the numbering level paragraph properties.
func (_eacaf NumberingLevel )Properties ()ParagraphStyleProperties {if _eacaf ._dfaa .PPr ==nil {_eacaf ._dfaa .PPr =_bf .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_eacaf ._dfaa .PPr };};

// SetAlignment controls the paragraph alignment
func (_abcb ParagraphProperties )SetAlignment (align _bf .ST_Jc ){if align ==_bf .ST_JcUnset {_abcb ._fcdce .Jc =nil ;}else {_abcb ._fcdce .Jc =_bf .NewCT_Jc ();_abcb ._fcdce .Jc .ValAttr =align ;};};

// SetTop sets the cell top margin
func (_eef CellMargins )SetTop (d _abg .Distance ){_eef ._dcd .Top =_bf .NewCT_TblWidth ();_faca (_eef ._dcd .Top ,d );};

// SetAfterSpacing sets spacing below paragraph.
func (_afeb Paragraph )SetAfterSpacing (d _abg .Distance ){_afeb .ensurePPr ();if _afeb ._dbga .PPr .Spacing ==nil {_afeb ._dbga .PPr .Spacing =_bf .NewCT_Spacing ();};_cbedf :=_afeb ._dbga .PPr .Spacing ;_cbedf .AfterAttr =&_de .ST_TwipsMeasure {};_cbedf .AfterAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (d /_abg .Twips ));
};func _dgcf (_dgdc *Document ,_bdcb Paragraph )listItemInfo {if _dgdc .Numbering .X ()==nil {return listItemInfo {};};if len (_dgdc .Numbering .Definitions ())< 1{return listItemInfo {};};_cfad :=_ggdee (_bdcb );if _cfad ==nil {return listItemInfo {};
};_cefba :=_dgdc .GetNumberingLevelByIds (_cfad .NumId .ValAttr ,_cfad .Ilvl .ValAttr );if _abdb :=_cefba .X ();_abdb ==nil {return listItemInfo {};};_cfcg :=int64 (0);for _ ,_bbbbb :=range _dgdc .Numbering ._gdegf .Num {if _bbbbb !=nil &&_bbbbb .NumIdAttr ==_cfad .NumId .ValAttr {_cfcg =_bbbbb .AbstractNumId .ValAttr ;
};};return listItemInfo {FromParagraph :&_bdcb ,AbstractNumId :&_cfcg ,NumberingLevel :&_cefba };};

// Paragraphs returns the paragraphs defined in a footer.
func (_bdac Footer )Paragraphs ()[]Paragraph {_eedc :=[]Paragraph {};for _ ,_gafce :=range _bdac ._cbgde .EG_ContentBlockContent {for _ ,_efda :=range _gafce .P {_eedc =append (_eedc ,Paragraph {_bdac ._dgabc ,_efda });};};for _ ,_acga :=range _bdac .Tables (){for _ ,_fadab :=range _acga .Rows (){for _ ,_eaaa :=range _fadab .Cells (){_eedc =append (_eedc ,_eaaa .Paragraphs ()...);
};};};return _eedc ;};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_aa .DocBase ;_aff *_bf .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_cee []*_bf .Hdr ;_fgea []_aa .Relationships ;_ggf []*_bf .Ftr ;_fb []_aa .Relationships ;_bgf _aa .Relationships ;_aef []*_fa .Theme ;_ccde *_bf .WebSettings ;
_gdb *_bf .Fonts ;_cbfc *_bf .Endnotes ;_edc *_bf .Footnotes ;_gcge []*_ab .Control ;_cdf []*chart ;_abed string ;};

// SetBeforeSpacing sets spacing above paragraph.
func (_fafea Paragraph )SetBeforeSpacing (d _abg .Distance ){_fafea .ensurePPr ();if _fafea ._dbga .PPr .Spacing ==nil {_fafea ._dbga .PPr .Spacing =_bf .NewCT_Spacing ();};_affec :=_fafea ._dbga .PPr .Spacing ;_affec .BeforeAttr =&_de .ST_TwipsMeasure {};
_affec .BeforeAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (d /_abg .Twips ));};func _ecfdd (_ffbed *_bf .CT_P ,_fdac *_bf .CT_Hyperlink ,_cdae *TableInfo ,_faaa *DrawingInfo ,_afdbd []*_bf .EG_PContent )[]TextItem {if len (_afdbd )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_faaa ,Paragraph :_ffbed ,Hyperlink :_fdac ,Run :nil ,TableInfo :_cdae }};
};_bcga :=[]TextItem {};for _ ,_fedd :=range _afdbd {for _ ,_eaggb :=range _fedd .FldSimple {if _eaggb !=nil {_bcga =append (_bcga ,_ecfdd (_ffbed ,_fdac ,_cdae ,_faaa ,_eaggb .EG_PContent )...);};};if _fecc :=_fedd .Hyperlink ;_fecc !=nil {_bcga =append (_bcga ,_gad (_ffbed ,_fecc ,_cdae ,_faaa ,_fecc .EG_ContentRunContent )...);
};_bcga =append (_bcga ,_gad (_ffbed ,nil ,_cdae ,_faaa ,_fedd .EG_ContentRunContent )...);};return _bcga ;};

// SetShapeStyle sets style to the element v:shape in watermark.
func (_bddce *WatermarkPicture )SetShapeStyle (shapeStyle _ba .ShapeStyle ){if _bddce ._gbdfg !=nil {_dbcd :=shapeStyle .String ();_bddce ._gbdfg .StyleAttr =&_dbcd ;};};

// SetStart sets the cell start margin
func (_cff CellMargins )SetStart (d _abg .Distance ){_cff ._dcd .Start =_bf .NewCT_TblWidth ();_faca (_cff ._dcd .Start ,d );};

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_cbdfb TableLook )SetLastColumn (on bool ){if !on {_cbdfb ._ceddb .LastColumnAttr =&_de .ST_OnOff {};_cbdfb ._ceddb .LastColumnAttr .ST_OnOff1 =_de .ST_OnOff1Off ;}else {_cbdfb ._ceddb .LastColumnAttr =&_de .ST_OnOff {};_cbdfb ._ceddb .LastColumnAttr .ST_OnOff1 =_de .ST_OnOff1On ;
};};

// InitializeDefault constructs a default numbering.
func (_gedg Numbering )InitializeDefault (){_bgddf :=_bf .NewCT_AbstractNum ();_bgddf .MultiLevelType =_bf .NewCT_MultiLevelType ();_bgddf .MultiLevelType .ValAttr =_bf .ST_MultiLevelTypeHybridMultilevel ;_gedg ._gdegf .AbstractNum =append (_gedg ._gdegf .AbstractNum ,_bgddf );
_bgddf .AbstractNumIdAttr =1;const _fafad =720;const _egdfb =720;const _caeb =360;for _cacgc :=0;_cacgc < 9;_cacgc ++{_dbbd :=_bf .NewCT_Lvl ();_dbbd .IlvlAttr =int64 (_cacgc );_dbbd .Start =_bf .NewCT_DecimalNumber ();_dbbd .Start .ValAttr =1;_dbbd .NumFmt =_bf .NewCT_NumFmt ();
_dbbd .NumFmt .ValAttr =_bf .ST_NumberFormatBullet ;_dbbd .Suff =_bf .NewCT_LevelSuffix ();_dbbd .Suff .ValAttr =_bf .ST_LevelSuffixNothing ;_dbbd .LvlText =_bf .NewCT_LevelText ();_dbbd .LvlText .ValAttr =_d .String ("\uf0b7");_dbbd .LvlJc =_bf .NewCT_Jc ();
_dbbd .LvlJc .ValAttr =_bf .ST_JcLeft ;_dbbd .RPr =_bf .NewCT_RPr ();_dbbd .RPr .RFonts =_bf .NewCT_Fonts ();_dbbd .RPr .RFonts .AsciiAttr =_d .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_dbbd .RPr .RFonts .HAnsiAttr =_d .String ("\u0053\u0079\u006d\u0062\u006f\u006c");
_dbbd .RPr .RFonts .HintAttr =_bf .ST_HintDefault ;_dbbd .PPr =_bf .NewCT_PPrGeneral ();_debe :=int64 (_cacgc *_egdfb +_fafad );_dbbd .PPr .Ind =_bf .NewCT_Ind ();_dbbd .PPr .Ind .LeftAttr =&_bf .ST_SignedTwipsMeasure {};_dbbd .PPr .Ind .LeftAttr .Int64 =_d .Int64 (_debe );
_dbbd .PPr .Ind .HangingAttr =&_de .ST_TwipsMeasure {};_dbbd .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (_caeb ));_bgddf .Lvl =append (_bgddf .Lvl ,_dbbd );};_badcg :=_bf .NewCT_Num ();_badcg .NumIdAttr =1;_badcg .AbstractNumId =_bf .NewCT_DecimalNumber ();
_badcg .AbstractNumId .ValAttr =1;_gedg ._gdegf .Num =append (_gedg ._gdegf .Num ,_badcg );};

// UnderlineColor returns the hex color value of run underline.
func (_eeda RunProperties )UnderlineColor ()string {if _fefad :=_eeda ._gaffa .U ;_fefad !=nil {_gdcgg :=_fefad .ColorAttr ;if _gdcgg !=nil &&_gdcgg .ST_HexColorRGB !=nil {return *_gdcgg .ST_HexColorRGB ;};};return "";};

// RemoveMailMerge removes any mail merge settings
func (_fcaad Settings )RemoveMailMerge (){_fcaad ._eebg .MailMerge =nil };

// Section return paragraph properties section value.
func (_gffe ParagraphProperties )Section ()(Section ,bool ){if _gffe ._fcdce .SectPr !=nil {return Section {_gffe ._dega ,_gffe ._fcdce .SectPr },true ;};return Section {},false ;};

// SetEnabled marks a FormField as enabled or disabled.
func (_adbbf FormField )SetEnabled (enabled bool ){_eaea :=_bf .NewCT_OnOff ();_eaea .ValAttr =&_de .ST_OnOff {Bool :&enabled };_adbbf ._beca .Enabled =[]*_bf .CT_OnOff {_eaea };};

// X returns the inner wml.CT_PBdr
func (_fegdg ParagraphBorders )X ()*_bf .CT_PBdr {return _fegdg ._gdbea };

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_dfgbb Run )IsFootnote ()(bool ,int64 ){if _dfgbb ._ccceca .EG_RunInnerContent !=nil {if _dfgbb ._ccceca .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_dfgbb ._ccceca .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;
};

// ExtractTextOptions extraction text options.
type ExtractTextOptions struct{

// WithNumbering extract numbering elements if set to `true`.
WithNumbering bool ;

// NumberingIndent default value of numbering indent.
NumberingIndent string ;

// RunsOnNewLine write each of runs text on new line if set to `true`.
RunsOnNewLine bool ;};

// Text return node and its child text,
func (_geab *Node )Text ()string {_adaae :=_ag .NewBuffer ([]byte {});switch _babag :=_geab .X ().(type ){case *Paragraph :for _ ,_eaddf :=range _babag .Runs (){if _eaddf .Text ()!=""{_adaae .WriteString (_eaddf .Text ());_adaae .WriteString ("\u000a");
};};};for _ ,_bfbag :=range _geab .Children {_adaae .WriteString (_bfbag .Text ());};return _adaae .String ();};func (_fefa *Document )insertImageFromNode (_cebd Node ){for _ ,_gbdf :=range _cebd .AnchoredDrawings {if _gccea ,_cfgf :=_gbdf .GetImage ();
_cfgf {_abef ,_aeeb :=_aa .ImageFromFile (_gccea .Path ());if _aeeb !=nil {_e .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_aeeb );};_bffea ,_aeeb :=_fefa .AddImage (_abef );
if _aeeb !=nil {_e .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_aeeb );};_ecbd :=_fefa ._bgf .GetByRelId (_bffea .RelID ());
_ecbd .SetID (_gccea .RelID ());};};for _ ,_geff :=range _cebd .InlineDrawings {if _feae ,_adbb :=_geff .GetImage ();_adbb {_cbce ,_afec :=_aa .ImageFromFile (_feae .Path ());if _afec !=nil {_e .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_afec );
};_cbab ,_afec :=_fefa .AddImage (_cbce );if _afec !=nil {_e .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_afec );
};_cege :=_fefa ._bgf .GetByRelId (_cbab .RelID ());_cege .SetID (_feae .RelID ());};};};

// SetLeft sets the left border to a specified type, color and thickness.
func (_bafb ParagraphBorders )SetLeft (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_bafb ._gdbea .Left =_bf .NewCT_Border ();_abfa (_bafb ._gdbea .Left ,t ,c ,thickness );};

// X return slice of node.
func (_bfcac *Nodes )X ()[]Node {return _bfcac ._gdbf };

// Footer is a footer for a document section.
type Footer struct{_dgabc *Document ;_cbgde *_bf .Ftr ;};const _dfae ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";


// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_dfaa *_bf .CT_Lvl };

// NewAnchorDrawWrapOptions return anchor drawing options property.
func NewAnchorDrawWrapOptions ()*AnchorDrawWrapOptions {_bea :=&AnchorDrawWrapOptions {};if !_bea ._cec {_bd ,_eec :=_cac ();_bea ._cgge =_bd ;_bea ._ee =_eec ;};return _bea ;};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_bf .CT_Tbl ;Row *_bf .CT_Row ;Cell *_bf .CT_Tc ;RowIndex int ;ColIndex int ;};

// Emboss returns true if paragraph emboss is on.
func (_cefbaf ParagraphProperties )Emboss ()bool {return _bffc (_cefbaf ._fcdce .RPr .Emboss )};

// SetTextWrapInFrontOfText sets the text wrap to in front of text.
func (_cb AnchoredDrawing )SetTextWrapInFrontOfText (){_cb ._fc .Choice =&_bf .WdEG_WrapTypeChoice {};_cb ._fc .Choice .WrapNone =_bf .NewWdCT_WrapNone ();_cb ._fc .BehindDocAttr =false ;_cb ._fc .LayoutInCellAttr =true ;_cb ._fc .AllowOverlapAttr =true ;
};

// New constructs an empty document that content can be added to.
func New ()*Document {_cccb :=&Document {_aff :_bf .NewDocument ()};_cccb .ContentTypes =_aa .NewContentTypes ();_cccb ._aff .Body =_bf .NewCT_Body ();_cccb ._aff .ConformanceAttr =_de .ST_ConformanceClassTransitional ;_cccb ._bgf =_aa .NewRelationships ();
_cccb .AppProperties =_aa .NewAppProperties ();_cccb .CoreProperties =_aa .NewCoreProperties ();_cccb .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");
_cccb .Settings =NewSettings ();_cccb ._bgf .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_d .SettingsType );_cccb .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");
_cccb .Rels =_aa .NewRelationships ();_cccb .Rels .AddRelationship (_d .RelativeFilename (_d .DocTypeDocument ,"",_d .CorePropertiesType ,0),_d .CorePropertiesType );_cccb .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_d .ExtendedPropertiesType );
_cccb .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_d .OfficeDocumentType );_cccb .Numbering =NewNumbering ();_cccb .Numbering .InitializeDefault ();_cccb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");
_cccb ._bgf .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_d .NumberingType );_cccb .Styles =NewStyles ();_cccb .Styles .InitializeDefault ();_cccb .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");
_cccb ._bgf .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_d .StylesType );_cccb ._aff .Body =_bf .NewCT_Body ();return _cccb ;};func (_fdgfg *WatermarkText )getShapeType ()*_d .XSDAny {return _fdgfg .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// SetWidth sets the cell width to a specified width.
func (_ae CellProperties )SetWidth (d _abg .Distance ){_ae ._fdc .TcW =_bf .NewCT_TblWidth ();_ae ._fdc .TcW .TypeAttr =_bf .ST_TblWidthDxa ;_ae ._fdc .TcW .WAttr =&_bf .ST_MeasurementOrPercent {};_ae ._fdc .TcW .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};
_ae ._fdc .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (d /_abg .Twips ));};

// SizeValue returns the value of run font size in points.
func (_gaae RunProperties )SizeValue ()float64 {if _fdeee :=_gaae ._gaffa .Sz ;_fdeee !=nil {_eegcg :=_fdeee .ValAttr ;if _eegcg .ST_UnsignedDecimalNumber !=nil {return float64 (*_eegcg .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_ffadf Header )Index ()int {for _afgg ,_aeab :=range _ffadf ._bggab ._cee {if _aeab ==_ffadf ._ggab {return _afgg ;};};return -1;};

// SetStartPct sets the cell start margin
func (_dfb CellMargins )SetStartPct (pct float64 ){_dfb ._dcd .Start =_bf .NewCT_TblWidth ();_eac (_dfb ._dcd .Start ,pct );};func (_bffd Paragraph )addEndFldChar ()*_bf .CT_FldChar {_bggfbc :=_bffd .addFldChar ();_bggfbc .FldCharTypeAttr =_bf .ST_FldCharTypeEnd ;
return _bggfbc ;};

// SetUnderline controls underline for a run style.
func (_dfbdc RunProperties )SetUnderline (style _bf .ST_Underline ,c _ff .Color ){if style ==_bf .ST_UnderlineUnset {_dfbdc ._gaffa .U =nil ;}else {_dfbdc ._gaffa .U =_bf .NewCT_Underline ();_dfbdc ._gaffa .U .ColorAttr =&_bf .ST_HexColor {};_dfbdc ._gaffa .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();
_dfbdc ._gaffa .U .ValAttr =style ;};};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_efbde *_bf .CT_TblPrBase };

// SetXOffset sets the X offset for an image relative to the origin.
func (_ec AnchoredDrawing )SetXOffset (x _abg .Distance ){_ec ._fc .PositionH .Choice =&_bf .WdCT_PosHChoice {};_ec ._fc .PositionH .Choice .PosOffset =_d .Int32 (int32 (x /_abg .EMU ));};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_dfdg TableLook )SetFirstRow (on bool ){if !on {_dfdg ._ceddb .FirstRowAttr =&_de .ST_OnOff {};_dfdg ._ceddb .FirstRowAttr .ST_OnOff1 =_de .ST_OnOff1Off ;}else {_dfdg ._ceddb .FirstRowAttr =&_de .ST_OnOff {};_dfdg ._ceddb .FirstRowAttr .ST_OnOff1 =_de .ST_OnOff1On ;
};};func _gbccg (_dccf *Document )map[int64 ]map[int64 ]int64 {_gbceg :=_dccf .Paragraphs ();_fdgf :=make (map[int64 ]map[int64 ]int64 ,0);for _ ,_agde :=range _gbceg {_debd :=_dgcf (_dccf ,_agde );if _debd .NumberingLevel !=nil &&_debd .AbstractNumId !=nil {_geeb :=*_debd .AbstractNumId ;
if _ ,_aafd :=_fdgf [_geeb ];_aafd {if _ecgaf :=_debd .NumberingLevel .X ();_ecgaf !=nil {if _ ,_fbcb :=_fdgf [_geeb ][_ecgaf .IlvlAttr ];_fbcb {_fdgf [_geeb ][_ecgaf .IlvlAttr ]++;}else {_fdgf [_geeb ][_ecgaf .IlvlAttr ]=1;};};}else {if _efge :=_debd .NumberingLevel .X ();
_efge !=nil {_fdgf [_geeb ]=map[int64 ]int64 {_efge .IlvlAttr :1};};};};};return _fdgf ;};

// Properties returns the paragraph properties.
func (_ccdd Paragraph )Properties ()ParagraphProperties {_ccdd .ensurePPr ();return ParagraphProperties {_ccdd ._gffg ,_ccdd ._dbga .PPr };};

// Italic returns true if paragraph font is italic.
func (_ecfda ParagraphProperties )Italic ()bool {_deaf :=_ecfda ._fcdce .RPr ;return _bffc (_deaf .I )||_bffc (_deaf .ICs );};

// SetLeftPct sets the cell left margin
func (_fgg CellMargins )SetLeftPct (pct float64 ){_fgg ._dcd .Left =_bf .NewCT_TblWidth ();_eac (_fgg ._dcd .Left ,pct );};func (_eacd *chart )RelId ()string {return _eacd ._cae };func _faca (_eda *_bf .CT_TblWidth ,_bce _abg .Distance ){_eda .TypeAttr =_bf .ST_TblWidthDxa ;
_eda .WAttr =&_bf .ST_MeasurementOrPercent {};_eda .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};_eda .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (_bce /_abg .Dxa ));};

// GetNumberingLevelByIds returns a NumberingLevel by its NumId and LevelId attributes
// or an empty one if not found.
func (_dgfg *Document )GetNumberingLevelByIds (numId ,levelId int64 )NumberingLevel {for _ ,_gfcg :=range _dgfg .Numbering ._gdegf .Num {if _gfcg !=nil &&_gfcg .NumIdAttr ==numId {_ccdgf :=_gfcg .AbstractNumId .ValAttr ;for _ ,_fagce :=range _dgfg .Numbering ._gdegf .AbstractNum {if _fagce .AbstractNumIdAttr ==_ccdgf {if _fagce .NumStyleLink !=nil &&len (_fagce .Lvl )==0{if _eddb ,_agbb :=_dgfg .Styles .SearchStyleById (_fagce .NumStyleLink .ValAttr );
_agbb {if _eddb .ParagraphProperties ().NumId ()> -1{return _dgfg .GetNumberingLevelByIds (_eddb .ParagraphProperties ().NumId (),levelId );};};};for _ ,_dcgb :=range _fagce .Lvl {if _dcgb .IlvlAttr ==levelId {return NumberingLevel {_dcgb };};};};};};};
return NumberingLevel {};};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_egefb TableStyleProperties )SetTableIndent (ind _abg .Distance ){_egefb ._efbde .TblInd =_bf .NewCT_TblWidth ();_egefb ._efbde .TblInd .TypeAttr =_bf .ST_TblWidthDxa ;_egefb ._efbde .TblInd .WAttr =&_bf .ST_MeasurementOrPercent {};_egefb ._efbde .TblInd .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};
_egefb ._efbde .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (ind /_abg .Dxa ));};func _egbeb ()*_ga .Path {_egefa :=_ga .NewPath ();_egefa .ExtrusionokAttr =_de .ST_TrueFalseTrue ;_egefa .GradientshapeokAttr =_de .ST_TrueFalseTrue ;
_egefa .ConnecttypeAttr =_ga .OfcST_ConnectTypeRect ;return _egefa ;};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_bgddfb ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_bgddfb ._fcdce .PageBreakBefore =nil ;}else {_bgddfb ._fcdce .PageBreakBefore =_bf .NewCT_OnOff ();};};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_bf .NewStyles ()}};func (_agbd *Document )addEndnoteSeparator (){_ebce :=_bf .NewCT_FtnEdn ();_ebce .IdAttr =-1;_ebce .TypeAttr =_bf .ST_FtnEdnSeparator ;_bcfc :=Footnote {_agbd ,_ebce };_bcfc .X ().EG_BlockLevelElts =[]*_bf .EG_BlockLevelElts {_bf .NewEG_BlockLevelElts ()};
_gfce :=_bcfc .AddParagraph ();_gfce .X ().PPr =nil ;_eeac :=_gfce .AddRun ();_eagb :=_eeac .newIC ();_eagb .Separator =_bf .NewCT_Empty ();_agbd ._cbfc .CT_Endnotes .Endnote =append (_agbd ._cbfc .CT_Endnotes .Endnote ,_ebce );_ebce =_bf .NewCT_FtnEdn ();
_ebce .IdAttr =0;_ebce .TypeAttr =_bf .ST_FtnEdnContinuationSeparator ;_bcfc =Footnote {_agbd ,_ebce };_bcfc .X ().EG_BlockLevelElts =[]*_bf .EG_BlockLevelElts {_bf .NewEG_BlockLevelElts ()};_gfce =_bcfc .AddParagraph ();_gfce .X ().PPr =nil ;_eeac =_gfce .AddRun ();
_eagb =_eeac .newIC ();_eagb .ContinuationSeparator =_bf .NewCT_Empty ();_agbd ._cbfc .CT_Endnotes .Endnote =append (_agbd ._cbfc .CT_Endnotes .Endnote ,_ebce );};

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_cccef *Document )GetTargetByRelId (idAttr string )string {return _cccef ._bgf .GetTargetByRelId (idAttr );};

// Clear content of node element.
func (_agfd *Node )Clear (){_agfd ._gcedb =nil };

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_ddc *Document ;_cbe *_bf .CT_Tc ;};

// Properties returns the row properties.
func (_eaeag Row )Properties ()RowProperties {if _eaeag ._eedfc .TrPr ==nil {_eaeag ._eedfc .TrPr =_bf .NewCT_TrPr ();};return RowProperties {_eaeag ._eedfc .TrPr };};

// Spacing returns the paragraph spacing settings.
func (_fcbd ParagraphProperties )Spacing ()ParagraphSpacing {if _fcbd ._fcdce .Spacing ==nil {_fcbd ._fcdce .Spacing =_bf .NewCT_Spacing ();};return ParagraphSpacing {_fcbd ._fcdce .Spacing };};func _ddcb (_dbac string )mergeFieldInfo {_efdag :=[]string {};
_gdafd :=_ag .Buffer {};_gfea :=-1;for _bdcbc ,_cgade :=range _dbac {switch _cgade {case ' ':if _gdafd .Len ()!=0{_efdag =append (_efdag ,_gdafd .String ());};_gdafd .Reset ();case '"':if _gfea !=-1{_efdag =append (_efdag ,_dbac [_gfea +1:_bdcbc ]);_gfea =-1;
}else {_gfea =_bdcbc ;};default:_gdafd .WriteRune (_cgade );};};if _gdafd .Len ()!=0{_efdag =append (_efdag ,_gdafd .String ());};_ecfba :=mergeFieldInfo {};for _abaf :=0;_abaf < len (_efdag )-1;_abaf ++{_bedfg :=_efdag [_abaf ];switch _bedfg {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_ecfba ._egfd =_efdag [_abaf +1];
_abaf ++;case "\u005c\u0066":_ecfba ._ffcbf =_efdag [_abaf +1];_abaf ++;case "\u005c\u0062":_ecfba ._ffega =_efdag [_abaf +1];_abaf ++;case "\u005c\u002a":switch _efdag [_abaf +1]{case "\u0055\u0070\u0070e\u0072":_ecfba ._begfa =true ;case "\u004c\u006f\u0077e\u0072":_ecfba ._egdgb =true ;
case "\u0043\u0061\u0070\u0073":_ecfba ._bfgfb =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_ecfba ._addc =true ;};_abaf ++;};};return _ecfba ;};

// CellProperties returns the cell properties.
func (_gged TableConditionalFormatting )CellProperties ()CellProperties {if _gged ._dbca .TcPr ==nil {_gged ._dbca .TcPr =_bf .NewCT_TcPr ();};return CellProperties {_gged ._dbca .TcPr };};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_cd AnchoredDrawing )SetTextWrapSquare (t _bf .WdST_WrapText ){_cd ._fc .Choice =&_bf .WdEG_WrapTypeChoice {};_cd ._fc .Choice .WrapSquare =_bf .NewWdCT_WrapSquare ();_cd ._fc .Choice .WrapSquare .WrapTextAttr =t ;};

// Section is the beginning of a new section.
type Section struct{_efed *Document ;_fgca *_bf .CT_SectPr ;};

// RightToLeft returns true if paragraph text goes from right to left.
func (_fbbf ParagraphProperties )RightToLeft ()bool {return _bffc (_fbbf ._fcdce .RPr .Rtl )};

// SetToolTip sets the tooltip text for a hyperlink.
func (_afgb HyperLink )SetToolTip (text string ){if text ==""{_afgb ._agbdc .TooltipAttr =nil ;}else {_afgb ._agbdc .TooltipAttr =_d .String (text );};};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_egge Run )AddDrawingAnchored (img _aa .ImageRef )(AnchoredDrawing ,error ){_edbef :=_egge .newIC ();_edbef .Drawing =_bf .NewCT_Drawing ();_ecfeg :=_bf .NewWdAnchor ();_daga :=AnchoredDrawing {_egge ._abedg ,_ecfeg };_ecfeg .SimplePosAttr =_d .Bool (false );
_ecfeg .AllowOverlapAttr =true ;_ecfeg .CNvGraphicFramePr =_fa .NewCT_NonVisualGraphicFrameProperties ();_edbef .Drawing .Anchor =append (_edbef .Drawing .Anchor ,_ecfeg );_ecfeg .Graphic =_fa .NewGraphic ();_ecfeg .Graphic .GraphicData =_fa .NewCT_GraphicalObjectData ();
_ecfeg .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";
_ecfeg .SimplePos .XAttr .ST_CoordinateUnqualified =_d .Int64 (0);_ecfeg .SimplePos .YAttr .ST_CoordinateUnqualified =_d .Int64 (0);_ecfeg .PositionH .RelativeFromAttr =_bf .WdST_RelFromHPage ;_ecfeg .PositionH .Choice =&_bf .WdCT_PosHChoice {};_ecfeg .PositionH .Choice .PosOffset =_d .Int32 (0);
_ecfeg .PositionV .RelativeFromAttr =_bf .WdST_RelFromVPage ;_ecfeg .PositionV .Choice =&_bf .WdCT_PosVChoice {};_ecfeg .PositionV .Choice .PosOffset =_d .Int32 (0);_ecfeg .Extent .CxAttr =int64 (float64 (img .Size ().X *_abg .Pixel72 )/_abg .EMU );_ecfeg .Extent .CyAttr =int64 (float64 (img .Size ().Y *_abg .Pixel72 )/_abg .EMU );
_ecfeg .Choice =&_bf .WdEG_WrapTypeChoice {};_ecfeg .Choice .WrapSquare =_bf .NewWdCT_WrapSquare ();_ecfeg .Choice .WrapSquare .WrapTextAttr =_bf .WdST_WrapTextBothSides ;_bedg :=0x7FFFFFFF&_f .Uint32 ();_ecfeg .DocPr .IdAttr =_bedg ;_ebdg :=_cgd .NewPic ();
_ebdg .NvPicPr .CNvPr .IdAttr =_bedg ;_dgabe :=img .RelID ();if _dgabe ==""{return _daga ,_ca .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");
};_ecfeg .Graphic .GraphicData .Any =append (_ecfeg .Graphic .GraphicData .Any ,_ebdg );_ebdg .BlipFill =_fa .NewCT_BlipFillProperties ();_ebdg .BlipFill .Blip =_fa .NewCT_Blip ();_ebdg .BlipFill .Blip .EmbedAttr =&_dgabe ;_ebdg .BlipFill .Stretch =_fa .NewCT_StretchInfoProperties ();
_ebdg .BlipFill .Stretch .FillRect =_fa .NewCT_RelativeRect ();_ebdg .SpPr =_fa .NewCT_ShapeProperties ();_ebdg .SpPr .Xfrm =_fa .NewCT_Transform2D ();_ebdg .SpPr .Xfrm .Off =_fa .NewCT_Point2D ();_ebdg .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_d .Int64 (0);
_ebdg .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_d .Int64 (0);_ebdg .SpPr .Xfrm .Ext =_fa .NewCT_PositiveSize2D ();_ebdg .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_abg .Point );_ebdg .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_abg .Point );
_ebdg .SpPr .PrstGeom =_fa .NewCT_PresetGeometry2D ();_ebdg .SpPr .PrstGeom .PrstAttr =_fa .ST_ShapeTypeRect ;return _daga ,nil ;};func (_fab *Document )onNewRelationship (_ffaea *_fg .DecodeMap ,_bfcg ,_dddc string ,_aaae []*_bc .File ,_fgce *_fdg .Relationship ,_cdgg _fg .Target )error {_eccb :=_d .DocTypeDocument ;
switch _dddc {case _d .OfficeDocumentType ,_d .OfficeDocumentTypeStrict :_fab ._aff =_bf .NewDocument ();_ffaea .AddTarget (_bfcg ,_fab ._aff ,_dddc ,0);_ffaea .AddTarget (_fg .RelationsPathFor (_bfcg ),_fab ._bgf .X (),_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);
case _d .CorePropertiesType :_ffaea .AddTarget (_bfcg ,_fab .CoreProperties .X (),_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);case _d .CorePropertiesAltType :_ffaea .AddTarget (_bfcg ,_fab .CoreProperties .X (),_d .CorePropertiesType ,0);
_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_d .CorePropertiesType ,0);case _d .CustomPropertiesType :_ffaea .AddTarget (_bfcg ,_fab .CustomProperties .X (),_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);
case _d .ExtendedPropertiesType ,_d .ExtendedPropertiesTypeStrict :_ffaea .AddTarget (_bfcg ,_fab .AppProperties .X (),_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);case _d .ThumbnailType ,_d .ThumbnailTypeStrict :for _ggde ,_abad :=range _aaae {if _abad ==nil {continue ;
};if _abad .Name ==_bfcg {_bcee ,_dbaeg :=_abad .Open ();if _dbaeg !=nil {return _cag .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_dbaeg );};_fab .Thumbnail ,_ ,_dbaeg =_g .Decode (_bcee );
_bcee .Close ();if _dbaeg !=nil {return _cag .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_dbaeg );};_aaae [_ggde ]=nil ;};};case _d .SettingsType ,_d .SettingsTypeStrict :_ffaea .AddTarget (_bfcg ,_fab .Settings .X (),_dddc ,0);
_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);case _d .NumberingType ,_d .NumberingTypeStrict :_fab .Numbering =NewNumbering ();_ffaea .AddTarget (_bfcg ,_fab .Numbering .X (),_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);
case _d .StylesType ,_d .StylesTypeStrict :_fab .Styles .Clear ();_ffaea .AddTarget (_bfcg ,_fab .Styles .X (),_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);case _d .HeaderType ,_d .HeaderTypeStrict :_efef :=_bf .NewHdr ();
_ffaea .AddTarget (_bfcg ,_efef ,_dddc ,uint32 (len (_fab ._cee )));_fab ._cee =append (_fab ._cee ,_efef );_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,len (_fab ._cee ));_gdaa :=_aa .NewRelationships ();_ffaea .AddTarget (_fg .RelationsPathFor (_bfcg ),_gdaa .X (),_dddc ,0);
_fab ._fgea =append (_fab ._fgea ,_gdaa );case _d .FooterType ,_d .FooterTypeStrict :_bgfb :=_bf .NewFtr ();_ffaea .AddTarget (_bfcg ,_bgfb ,_dddc ,uint32 (len (_fab ._ggf )));_fab ._ggf =append (_fab ._ggf ,_bgfb );_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,len (_fab ._ggf ));
_ecdcf :=_aa .NewRelationships ();_ffaea .AddTarget (_fg .RelationsPathFor (_bfcg ),_ecdcf .X (),_dddc ,0);_fab ._fb =append (_fab ._fb ,_ecdcf );case _d .ThemeType ,_d .ThemeTypeStrict :_fabb :=_fa .NewTheme ();_ffaea .AddTarget (_bfcg ,_fabb ,_dddc ,uint32 (len (_fab ._aef )));
_fab ._aef =append (_fab ._aef ,_fabb );_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,len (_fab ._aef ));case _d .WebSettingsType ,_d .WebSettingsTypeStrict :_fab ._ccde =_bf .NewWebSettings ();_ffaea .AddTarget (_bfcg ,_fab ._ccde ,_dddc ,0);
_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);case _d .FontTableType ,_d .FontTableTypeStrict :_fab ._gdb =_bf .NewFonts ();_ffaea .AddTarget (_bfcg ,_fab ._gdb ,_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);
case _d .EndNotesType ,_d .EndNotesTypeStrict :_fab ._cbfc =_bf .NewEndnotes ();_ffaea .AddTarget (_bfcg ,_fab ._cbfc ,_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);case _d .FootNotesType ,_d .FootNotesTypeStrict :_fab ._edc =_bf .NewFootnotes ();
_ffaea .AddTarget (_bfcg ,_fab ._edc ,_dddc ,0);_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,0);case _d .ImageType ,_d .ImageTypeStrict :var _bbge _aa .ImageRef ;for _egcc ,_eadf :=range _aaae {if _eadf ==nil {continue ;};_acab :=_fd .TrimPrefix (_eadf .Name ,"\u0077\u006f\u0072d\u002f");
if _bggf :=_fd .TrimPrefix (_bfcg ,"\u0077\u006f\u0072d\u002f");_acab ==_bggf {_dcfef ,_fgfe :=_fg .ExtractToDiskTmp (_eadf ,_fab .TmpPath );if _fgfe !=nil {return _fgfe ;};_ggbc ,_fgfe :=_aa .ImageFromStorage (_dcfef );if _fgfe !=nil {return _fgfe ;};
_bbge =_aa .MakeImageRef (_ggbc ,&_fab .DocBase ,_fab ._bgf );_aaae [_egcc ]=nil ;};};if _bbge .Format ()!=""{_ffag :="\u002e"+_fd .ToLower (_bbge .Format ());_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,len (_fab .Images )+1);if _dbagd :=_bb .Ext (_fgce .TargetAttr );
_dbagd !=_ffag {_fgce .TargetAttr =_fgce .TargetAttr [0:len (_fgce .TargetAttr )-len (_dbagd )]+_ffag ;};_bbge .SetTarget ("\u0077\u006f\u0072d\u002f"+_fgce .TargetAttr );_fab .Images =append (_fab .Images ,_bbge );};case _d .ControlType ,_d .ControlTypeStrict :_fefg :=_da .NewOcx ();
_dacf :=_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,len (_fab ._gcge )+1);_ebg :="\u0077\u006f\u0072d\u002f"+_dacf [:len (_dacf )-4]+"\u002e\u0062\u0069\u006e";for _gcca ,_dfbg :=range _aaae {if _dfbg ==nil {continue ;};if _dfbg .Name ==_ebg {_ddef ,_daceg :=_fg .ExtractToDiskTmp (_dfbg ,_fab .TmpPath );
if _daceg !=nil {return _daceg ;};_dbba ,_daceg :=_ab .ImportFromFile (_ddef );if _daceg ==nil {_dbba .TargetAttr =_dacf ;_dbba .Ocx =_fefg ;_fab ._gcge =append (_fab ._gcge ,_dbba );_ffaea .AddTarget (_bfcg ,_fefg ,_dddc ,uint32 (len (_fab ._gcge )));
_fgce .TargetAttr =_dacf ;_aaae [_gcca ]=nil ;}else {_e .Log .Debug ("c\u0061\u006e\u006e\u006f\u0074\u0020r\u0065\u0061\u0064\u0020\u0062\u0069\u006e\u0020\u0066i\u006c\u0065\u003a \u0025s\u0020\u0025\u0073",_ebg ,_daceg .Error ());};break ;};};case _d .ChartType :_acabc :=chart {_gb :_gac .NewChartSpace ()};
_dcca :=uint32 (len (_fab ._cdf ));_ffaea .AddTarget (_bfcg ,_acabc ._gb ,_dddc ,_dcca );_fab ._cdf =append (_fab ._cdf ,&_acabc );_fgce .TargetAttr =_d .RelativeFilename (_eccb ,_cdgg .Typ ,_dddc ,len (_fab ._cdf ));_acabc ._fde =_fgce .TargetAttr ;default:_e .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_dddc ,_bfcg );
};return nil ;};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_ddf AnchoredDrawing )SetYOffset (y _abg .Distance ){_ddf ._fc .PositionV .Choice =&_bf .WdCT_PosVChoice {};_ddf ._fc .PositionV .Choice .PosOffset =_d .Int32 (int32 (y /_abg .EMU ));};

// Settings controls the document settings.
type Settings struct{_eebg *_bf .Settings };

// SetSize sets the size of the displayed image on the page.
func (_bbd InlineDrawing )SetSize (w ,h _abg .Distance ){_bbd ._ggbg .Extent .CxAttr =int64 (float64 (w *_abg .Pixel72 )/_abg .EMU );_bbd ._ggbg .Extent .CyAttr =int64 (float64 (h *_abg .Pixel72 )/_abg .EMU );};

// SetStyle sets the font size.
func (_ccdef RunProperties )SetStyle (style string ){if style ==""{_ccdef ._gaffa .RStyle =nil ;}else {_ccdef ._gaffa .RStyle =_bf .NewCT_String ();_ccdef ._gaffa .RStyle .ValAttr =style ;};};

// AddParagraph adds a paragraph to the header.
func (_faafg Header )AddParagraph ()Paragraph {_cacd :=_bf .NewEG_ContentBlockContent ();_faafg ._ggab .EG_ContentBlockContent =append (_faafg ._ggab .EG_ContentBlockContent ,_cacd );_eacee :=_bf .NewCT_P ();_cacd .P =append (_cacd .P ,_eacee );return Paragraph {_faafg ._bggab ,_eacee };
};func (_gbb *Document )addFootnoteSeparator (){_aecg :=_bf .NewCT_FtnEdn ();_aecg .IdAttr =-1;_aecg .TypeAttr =_bf .ST_FtnEdnSeparator ;_afb :=Footnote {_gbb ,_aecg };_afb .X ().EG_BlockLevelElts =[]*_bf .EG_BlockLevelElts {_bf .NewEG_BlockLevelElts ()};
_efeb :=_afb .AddParagraph ();_efeb .X ().PPr =nil ;_affe :=_efeb .AddRun ();_fbgb :=_affe .newIC ();_fbgb .Separator =_bf .NewCT_Empty ();_gbb ._edc .CT_Footnotes .Footnote =append (_gbb ._edc .CT_Footnotes .Footnote ,_aecg );_aecg =_bf .NewCT_FtnEdn ();
_aecg .IdAttr =0;_aecg .TypeAttr =_bf .ST_FtnEdnContinuationSeparator ;_afb =Footnote {_gbb ,_aecg };_afb .X ().EG_BlockLevelElts =[]*_bf .EG_BlockLevelElts {_bf .NewEG_BlockLevelElts ()};_efeb =_afb .AddParagraph ();_efeb .X ().PPr =nil ;_affe =_efeb .AddRun ();
_fbgb =_affe .newIC ();_fbgb .ContinuationSeparator =_bf .NewCT_Empty ();_gbb ._edc .CT_Footnotes .Footnote =append (_gbb ._edc .CT_Footnotes .Footnote ,_aecg );};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_gbde FormField )SetSize (size uint64 ){size *=2;if _gbde ._beca .CheckBox !=nil {_gbde ._beca .CheckBox .Choice =_bf .NewCT_FFCheckBoxChoice ();_gbde ._beca .CheckBox .Choice .Size =_bf .NewCT_HpsMeasure ();_gbde ._beca .CheckBox .Choice .Size .ValAttr =_bf .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };
};};

// AddStyle adds a new empty style, if styleID is already exists, it will return the style.
func (_agabg Styles )AddStyle (styleID string ,t _bf .ST_StyleType ,isDefault bool )Style {if _ddab ,_dbfg :=_agabg .SearchStyleById (styleID );_dbfg {return _ddab ;};_cdfga :=_bf .NewCT_Style ();_cdfga .TypeAttr =t ;if isDefault {_cdfga .DefaultAttr =&_de .ST_OnOff {};
_cdfga .DefaultAttr .Bool =_d .Bool (isDefault );};_cdfga .StyleIdAttr =_d .String (styleID );_agabg ._aebbf .Style =append (_agabg ._aebbf .Style ,_cdfga );return Style {_cdfga };};

// SetStartIndent controls the start indent of the paragraph.
func (_fddgf ParagraphStyleProperties )SetStartIndent (m _abg .Distance ){if _fddgf ._egfe .Ind ==nil {_fddgf ._egfe .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_fddgf ._egfe .Ind .StartAttr =nil ;}else {_fddgf ._egfe .Ind .StartAttr =&_bf .ST_SignedTwipsMeasure {};
_fddgf ._egfe .Ind .StartAttr .Int64 =_d .Int64 (int64 (m /_abg .Twips ));};};

// Paragraph is a paragraph within a document.
type Paragraph struct{_gffg *Document ;_dbga *_bf .CT_P ;};

// X returns the inner wrapped XML type.
func (_ge Bookmark )X ()*_bf .CT_Bookmark {return _ge ._bcc };

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_agcc NumberingDefinition )AddLevel ()NumberingLevel {_ggfc :=_bf .NewCT_Lvl ();_ggfc .Start =&_bf .CT_DecimalNumber {ValAttr :1};_ggfc .IlvlAttr =int64 (len (_agcc ._egcb .Lvl ));_agcc ._egcb .Lvl =append (_agcc ._egcb .Lvl ,_ggfc );return NumberingLevel {_ggfc };
};

// SearchStyleByName return style by its name.
func (_gefbd Styles )SearchStyleByName (name string )(Style ,bool ){for _ ,_feec :=range _gefbd ._aebbf .Style {if _feec .Name !=nil {if _feec .Name .ValAttr ==name {return Style {_feec },true ;};};};return Style {},false ;};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_dfcea Style )SetUnhideWhenUsed (b bool ){if b {_dfcea ._ccecg .UnhideWhenUsed =_bf .NewCT_OnOff ();}else {_dfcea ._ccecg .UnhideWhenUsed =nil ;};};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_afga *_bf .CT_Fonts };

// Paragraphs returns the paragraphs defined in an endnote.
func (_bgge Endnote )Paragraphs ()[]Paragraph {_dfdb :=[]Paragraph {};for _ ,_gbef :=range _bgge .content (){for _ ,_cbbe :=range _gbef .P {_dfdb =append (_dfdb ,Paragraph {_bgge ._cdccf ,_cbbe });};};return _dfdb ;};

// Underline returns the type of paragraph underline.
func (_gdeb ParagraphProperties )Underline ()_bf .ST_Underline {if _degbc :=_gdeb ._fcdce .RPr .U ;_degbc !=nil {return _degbc .ValAttr ;};return 0;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_cbbea Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_cbbea .ensurePPr ();if _cbbea ._dbga .PPr .NumPr ==nil {_cbbea ._dbga .PPr .NumPr =_bf .NewCT_NumPr ();};_fgdf :=_bf .NewCT_DecimalNumber ();_fgdf .ValAttr =int64 (abstractNumberID );
_cbbea ._dbga .PPr .NumPr .NumId =_fgdf ;};

// AddEndnoteReference adds a footnote reference to a run.
func (_ggae Run )AddEndnoteReference (){_agfg :=_ggae .newIC ();_agfg .EndnoteRef =&_bf .CT_Empty {}};

// SetStyle sets the style of a paragraph.
func (_gefg ParagraphProperties )SetStyle (s string ){if s ==""{_gefg ._fcdce .PStyle =nil ;}else {_gefg ._fcdce .PStyle =_bf .NewCT_String ();_gefg ._fcdce .PStyle .ValAttr =s ;};};func _ddeef ()*_ga .Formulas {_bccec :=_ga .NewFormulas ();_bccec .F =[]*_ga .CT_F {_ba .CreateFormula ("\u0069\u0066 \u006c\u0069\u006e\u0065\u0044\u0072\u0061\u0077\u006e\u0020\u0070\u0069\u0078\u0065\u006c\u004c\u0069\u006e\u0065\u0057\u0069\u0064th\u0020\u0030"),_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0031\u0020\u0030"),_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0031"),_ba .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0032\u0020\u0031\u0020\u0032"),_ba .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0033\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_ba .CreateFormula ("\u0070r\u006f\u0064\u0020\u00403\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0030\u0020\u0031"),_ba .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0036\u0020\u0031\u0020\u0032"),_ba .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0037\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0038\u0020\u0032\u00316\u0030\u0030\u0020\u0030"),_ba .CreateFormula ("\u0070r\u006f\u0064\u0020\u00407\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_ba .CreateFormula ("\u0073u\u006d \u0040\u0031\u0030\u0020\u0032\u0031\u0036\u0030\u0030\u0020\u0030")};
return _bccec ;};

// AddTabStop adds a tab stop to the paragraph.
func (_eegcb ParagraphStyleProperties )AddTabStop (position _abg .Distance ,justificaton _bf .ST_TabJc ,leader _bf .ST_TabTlc ){if _eegcb ._egfe .Tabs ==nil {_eegcb ._egfe .Tabs =_bf .NewCT_Tabs ();};_cgcg :=_bf .NewCT_TabStop ();_cgcg .LeaderAttr =leader ;
_cgcg .ValAttr =justificaton ;_cgcg .PosAttr .Int64 =_d .Int64 (int64 (position /_abg .Twips ));_eegcb ._egfe .Tabs .Tab =append (_eegcb ._egfe .Tabs .Tab ,_cgcg );};

// GetEffect returns the effect of the run.
func (_accf RunProperties )GetEffect ()_bf .ST_TextEffect {if _accf ._gaffa .Effect ==nil {return _bf .ST_TextEffectUnset ;};return _accf ._gaffa .Effect .ValAttr ;};

// SetRowBandSize sets the number of Rows in the row band
func (_fefadd TableStyleProperties )SetRowBandSize (rows int64 ){_fefadd ._efbde .TblStyleRowBandSize =_bf .NewCT_DecimalNumber ();_fefadd ._efbde .TblStyleRowBandSize .ValAttr =rows ;};

// Numbering return numbering that being use by paragraph.
func (_ffegc Paragraph )Numbering ()Numbering {_ffegc .ensurePPr ();_bdcg :=NewNumbering ();if _ffegc ._dbga .PPr .NumPr !=nil {_gfabg :=int64 (-1);_gfgg :=int64 (-1);if _ffegc ._dbga .PPr .NumPr .NumId !=nil {_gfabg =_ffegc ._dbga .PPr .NumPr .NumId .ValAttr ;
};for _ ,_fcddde :=range _ffegc ._gffg .Numbering ._gdegf .Num {if _gfabg < 0{break ;};if _fcddde .NumIdAttr ==_gfabg {if _fcddde .AbstractNumId !=nil {_gfgg =_fcddde .AbstractNumId .ValAttr ;_bdcg ._gdegf .Num =append (_bdcg ._gdegf .Num ,_fcddde );break ;
};};};for _ ,_fafe :=range _ffegc ._gffg .Numbering ._gdegf .AbstractNum {if _gfgg < 0{break ;};if _fafe .AbstractNumIdAttr ==_gfgg {_bdcg ._gdegf .AbstractNum =append (_bdcg ._gdegf .AbstractNum ,_fafe );break ;};};};return _bdcg ;};func (_dfdaa Endnote )content ()[]*_bf .EG_ContentBlockContent {var _cgbg []*_bf .EG_ContentBlockContent ;
for _ ,_gcbea :=range _dfdaa ._fabbd .EG_BlockLevelElts {_cgbg =append (_cgbg ,_gcbea .EG_ContentBlockContent ...);};return _cgbg ;};

// Bold returns true if paragraph font is bold.
func (_abdda ParagraphProperties )Bold ()bool {_eaeaf :=_abdda ._fcdce .RPr ;return _bffc (_eaeaf .B )||_bffc (_eaeaf .BCs );};

// SetBefore sets the spacing that comes before the paragraph.
func (_cdfe ParagraphSpacing )SetBefore (before _abg .Distance ){_cdfe ._dgdbe .BeforeAttr =&_de .ST_TwipsMeasure {};_cdfe ._dgdbe .BeforeAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (before /_abg .Twips ));};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_bgff Run )DrawingAnchored ()[]AnchoredDrawing {_ffefa :=[]AnchoredDrawing {};for _ ,_gdfab :=range _bgff ._ccceca .EG_RunInnerContent {if _gdfab .Drawing ==nil {continue ;};for _ ,_cdee :=range _gdfab .Drawing .Anchor {_ffefa =append (_ffefa ,AnchoredDrawing {_bgff ._abedg ,_cdee });
};};return _ffefa ;};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_fddac HyperLink )AddRun ()Run {_fdegd :=_bf .NewEG_ContentRunContent ();_fddac ._agbdc .EG_ContentRunContent =append (_fddac ._agbdc .EG_ContentRunContent ,_fdegd );_fdffg :=_bf .NewCT_R ();_fdegd .R =_fdffg ;return Run {_fddac ._fadfa ,_fdffg };
};func (_fbadf *Document )validateBookmarks ()error {_dbaf :=make (map[string ]struct{});for _ ,_cfdg :=range _fbadf .Bookmarks (){if _ ,_ead :=_dbaf [_cfdg .Name ()];_ead {return _cag .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_cfdg .Name ());
};_dbaf [_cfdg .Name ()]=struct{}{};};return nil ;};

// X returns the inner wrapped XML type.
func (_dgde NumberingDefinition )X ()*_bf .CT_AbstractNum {return _dgde ._egcb };

// SetHeader sets a section header.
func (_bagae Section )SetHeader (h Header ,t _bf .ST_HdrFtr ){_ggfb :=_bf .NewEG_HdrFtrReferences ();_bagae ._fgca .EG_HdrFtrReferences =append (_bagae ._fgca .EG_HdrFtrReferences ,_ggfb );_ggfb .HeaderReference =_bf .NewCT_HdrFtrRef ();_ggfb .HeaderReference .TypeAttr =t ;
_gaaf :=_bagae ._efed ._bgf .FindRIDForN (h .Index (),_d .HeaderType );if _gaaf ==""{_e .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");
};_ggfb .HeaderReference .IdAttr =_gaaf ;};

// NumId return numbering numId that being use by style properties.
func (_egba ParagraphStyleProperties )NumId ()int64 {if _egba ._egfe .NumPr !=nil {if _egba ._egfe .NumPr .NumId !=nil {return _egba ._egfe .NumPr .NumId .ValAttr ;};};return -1;};

// SetPicture sets the watermark picture.
func (_gfeeg *WatermarkPicture )SetPicture (imageRef _aa .ImageRef ){_acbbb :=imageRef .RelID ();_cgagb :=_gfeeg .getShape ();if _gfeeg ._gbdfg !=nil {_feegb :=_gfeeg ._gbdfg .EG_ShapeElements ;if len (_feegb )> 0&&_feegb [0].Imagedata !=nil {_feegb [0].Imagedata .IdAttr =&_acbbb ;
};}else {_adef :=_gfeeg .findNode (_cgagb ,"\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");for _fggfc ,_beff :=range _adef .Attrs {if _beff .Name .Local =="\u0069\u0064"{_adef .Attrs [_fggfc ].Value =_acbbb ;};};};};

// SetRight sets the right border to a specified type, color and thickness.
func (_dacd ParagraphBorders )SetRight (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_dacd ._gdbea .Right =_bf .NewCT_Border ();_abfa (_dacd ._gdbea .Right ,t ,c ,thickness );};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_egea FormField )SetCalcOnExit (calcOnExit bool ){_gbged :=_bf .NewCT_OnOff ();_gbged .ValAttr =&_de .ST_OnOff {Bool :&calcOnExit };_egea ._beca .CalcOnExit =[]*_bf .CT_OnOff {_gbged };};

// X returns the inner wrapped XML type.
func (_cggedb TableLook )X ()*_bf .CT_TblLook {return _cggedb ._ceddb };

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_fbadc ParagraphProperties )ComplexSizeMeasure ()string {if _acbe :=_fbadc ._fcdce .RPr .SzCs ;_acbe !=nil {_gdfa :=_acbe .ValAttr ;if _gdfa .ST_PositiveUniversalMeasure !=nil {return *_gdfa .ST_PositiveUniversalMeasure ;};};return "";};

// X returns the inner wrapped XML type.
func (_fbega Style )X ()*_bf .CT_Style {return _fbega ._ccecg };

// Color controls the run or styles color.
type Color struct{_baba *_bf .CT_Color };

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_eaaeg TableProperties )SetLayout (l _bf .ST_TblLayoutType ){if l ==_bf .ST_TblLayoutTypeUnset ||l ==_bf .ST_TblLayoutTypeAutofit {_eaaeg ._daef .TblLayout =nil ;}else {_eaaeg ._daef .TblLayout =_bf .NewCT_TblLayoutType ();_eaaeg ._daef .TblLayout .TypeAttr =l ;
};};func (_abgca Endnote )id ()int64 {return _abgca ._fabbd .IdAttr };

// SetAlignment set alignment of paragraph.
func (_ecgb Paragraph )SetAlignment (alignment _bf .ST_Jc ){_ecgb .ensurePPr ();if _ecgb ._dbga .PPr .Jc ==nil {_ecgb ._dbga .PPr .Jc =_bf .NewCT_Jc ();};_ecgb ._dbga .PPr .Jc .ValAttr =alignment ;};

// Paragraphs returns the paragraphs within a structured document tag.
func (_cgbae StructuredDocumentTag )Paragraphs ()[]Paragraph {if _cgbae ._cccgd .SdtContent ==nil {return nil ;};_cgbcg :=[]Paragraph {};for _ ,_agdd :=range _cgbae ._cccgd .SdtContent .P {_cgbcg =append (_cgbcg ,Paragraph {_cgbae ._gbedg ,_agdd });};return _cgbcg ;
};

// SetAll sets all of the borders to a given value.
func (_ega CellBorders )SetAll (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_ega .SetBottom (t ,c ,thickness );_ega .SetLeft (t ,c ,thickness );_ega .SetRight (t ,c ,thickness );_ega .SetTop (t ,c ,thickness );_ega .SetInsideHorizontal (t ,c ,thickness );
_ega .SetInsideVertical (t ,c ,thickness );};

// SetVAlignment sets the vertical alignment for an anchored image.
func (_bfd AnchoredDrawing )SetVAlignment (v _bf .WdST_AlignV ){_bfd ._fc .PositionV .Choice =&_bf .WdCT_PosVChoice {};_bfd ._fc .PositionV .Choice .Align =v ;};

// SetOutlineLvl sets outline level of paragraph.
func (_fgab Paragraph )SetOutlineLvl (lvl int64 ){_fgab .ensurePPr ();if _fgab ._dbga .PPr .OutlineLvl ==nil {_fgab ._dbga .PPr .OutlineLvl =_bf .NewCT_DecimalNumber ();};_cgf :=lvl -1;_fgab ._dbga .PPr .OutlineLvl .ValAttr =_cgf ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_bcdbb ParagraphSpacing )SetLineSpacing (d _abg .Distance ,rule _bf .ST_LineSpacingRule ){if rule ==_bf .ST_LineSpacingRuleUnset {_bcdbb ._dgdbe .LineRuleAttr =_bf .ST_LineSpacingRuleUnset ;_bcdbb ._dgdbe .LineAttr =nil ;}else {_bcdbb ._dgdbe .LineRuleAttr =rule ;
_bcdbb ._dgdbe .LineAttr =&_bf .ST_SignedTwipsMeasure {};_bcdbb ._dgdbe .LineAttr .Int64 =_d .Int64 (int64 (d /_abg .Twips ));};};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_afbc *Document )Append (d1orig *Document )error {_bfgf ,_cddb :=d1orig .Copy ();if _cddb !=nil {return _cddb ;};_afbc .DocBase =_afbc .DocBase .Append (_bfgf .DocBase );if _bfgf ._aff .ConformanceAttr !=_de .ST_ConformanceClassStrict {_afbc ._aff .ConformanceAttr =_bfgf ._aff .ConformanceAttr ;
};_ggeg :=_afbc ._bgf .X ().Relationship ;_effg :=_bfgf ._bgf .X ().Relationship ;_dafbb :=_bfgf ._aff .Body ;_dged :=map[string ]string {};_dbcg :=map[int64 ]int64 {};_dege :=map[int64 ]int64 {};for _ ,_febg :=range _effg {_gcbe :=true ;_cggc :=_febg .IdAttr ;
_ecfbf :=_febg .TargetAttr ;_cbde :=_febg .TypeAttr ;_ccag :=_cbde ==_d .ImageType ;_dagb :=_cbde ==_d .HyperLinkType ;var _facaf string ;for _ ,_gggd :=range _ggeg {if _gggd .TypeAttr ==_cbde &&_gggd .TargetAttr ==_ecfbf {_gcbe =false ;_facaf =_gggd .IdAttr ;
break ;};};if _ccag {_deb :="\u0077\u006f\u0072d\u002f"+_ecfbf ;for _ ,_beacb :=range _bfgf .DocBase .Images {if _beacb .Target ()==_deb {_ffgc ,_baaed :=_aa .ImageFromStorage (_beacb .Path ());if _baaed !=nil {return _baaed ;};_abcc ,_baaed :=_afbc .AddImage (_ffgc );
if _baaed !=nil {return _baaed ;};_facaf =_abcc .RelID ();break ;};};}else if _gcbe {if _dagb {_gagg :=_afbc ._bgf .AddHyperlink (_ecfbf );_facaf =_aa .Relationship (_gagg ).ID ();}else {_fggc :=_afbc ._bgf .AddRelationship (_ecfbf ,_cbde );_facaf =_fggc .X ().IdAttr ;
};};if _cggc !=_facaf {_dged [_cggc ]=_facaf ;};};if _dafbb .SectPr !=nil {for _ ,_ebgb :=range _dafbb .SectPr .EG_HdrFtrReferences {if _ebgb .HeaderReference !=nil {if _abddb ,_ceeg :=_dged [_ebgb .HeaderReference .IdAttr ];_ceeg {_ebgb .HeaderReference .IdAttr =_abddb ;
_afbc ._fgea =append (_afbc ._fgea ,_aa .NewRelationships ());};}else if _ebgb .FooterReference !=nil {if _eaffb ,_egbe :=_dged [_ebgb .FooterReference .IdAttr ];_egbe {_ebgb .FooterReference .IdAttr =_eaffb ;_afbc ._fb =append (_afbc ._fb ,_aa .NewRelationships ());
};};};};_cfbe ,_facag :=_afbc ._cbfc ,_bfgf ._cbfc ;if _cfbe !=nil {if _facag !=nil {if _cfbe .Endnote !=nil {if _facag .Endnote !=nil {_cadba :=int64 (len (_cfbe .Endnote )+1);for _ ,_gdcd :=range _facag .Endnote {_adcf :=_gdcd .IdAttr ;if _adcf > 0{_gdcd .IdAttr =_cadba ;
_cfbe .Endnote =append (_cfbe .Endnote ,_gdcd );_dege [_adcf ]=_cadba ;_cadba ++;};};};}else {_cfbe .Endnote =_facag .Endnote ;};};}else if _facag !=nil {_cfbe =_facag ;};_afbc ._cbfc =_cfbe ;_afeaf ,_ddff :=_afbc ._edc ,_bfgf ._edc ;if _afeaf !=nil {if _ddff !=nil {if _afeaf .Footnote !=nil {if _ddff .Footnote !=nil {_cbca :=int64 (len (_afeaf .Footnote )+1);
for _ ,_cdc :=range _ddff .Footnote {_ecba :=_cdc .IdAttr ;if _ecba > 0{_cdc .IdAttr =_cbca ;_afeaf .Footnote =append (_afeaf .Footnote ,_cdc );_dbcg [_ecba ]=_cbca ;_cbca ++;};};};}else {_afeaf .Footnote =_ddff .Footnote ;};};}else if _ddff !=nil {_afeaf =_ddff ;
};_afbc ._edc =_afeaf ;for _ ,_cgcc :=range _dafbb .EG_BlockLevelElts {for _ ,_ccg :=range _cgcc .EG_ContentBlockContent {for _ ,_geead :=range _ccg .P {_acfe (_geead ,_dged );_gbcc (_geead ,_dged );_ebdc (_geead ,_dbcg ,_dege );};for _ ,_bebd :=range _ccg .Tbl {_gafcd (_bebd ,_dged );
_dgcaf (_bebd ,_dged );_gcga (_bebd ,_dbcg ,_dege );};};};_afbc ._aff .Body .EG_BlockLevelElts =append (_afbc ._aff .Body .EG_BlockLevelElts ,_bfgf ._aff .Body .EG_BlockLevelElts ...);if _afbc ._aff .Body .SectPr ==nil {_afbc ._aff .Body .SectPr =_bfgf ._aff .Body .SectPr ;
}else {var _acdf ,_bgdd bool ;for _ ,_dfbf :=range _afbc ._aff .Body .SectPr .EG_HdrFtrReferences {if _dfbf .HeaderReference !=nil {_acdf =true ;}else if _dfbf .FooterReference !=nil {_bgdd =true ;};};if !_acdf {for _ ,_dadd :=range _bfgf ._aff .Body .SectPr .EG_HdrFtrReferences {if _dadd .HeaderReference !=nil {_afbc ._aff .Body .SectPr .EG_HdrFtrReferences =append (_afbc ._aff .Body .SectPr .EG_HdrFtrReferences ,_dadd );
break ;};};};if !_bgdd {for _ ,_ffgf :=range _bfgf ._aff .Body .SectPr .EG_HdrFtrReferences {if _ffgf .FooterReference !=nil {_afbc ._aff .Body .SectPr .EG_HdrFtrReferences =append (_afbc ._aff .Body .SectPr .EG_HdrFtrReferences ,_ffgf );break ;};};};if _afbc ._aff .Body .SectPr .Cols ==nil &&_bfgf ._aff .Body .SectPr .Cols !=nil {_afbc ._aff .Body .SectPr .Cols =_bfgf ._aff .Body .SectPr .Cols ;
};};_ggacb :=_afbc .Numbering ._gdegf ;_bbbb :=_bfgf .Numbering ._gdegf ;if _ggacb ==nil &&_bbbb !=nil {_ggacb =_bbbb ;};_afbc .Numbering ._gdegf =_ggacb ;if _afbc .Styles ._aebbf ==nil &&_bfgf .Styles ._aebbf !=nil {_afbc .Styles ._aebbf =_bfgf .Styles ._aebbf ;
};_afbc ._aef =append (_afbc ._aef ,_bfgf ._aef ...);_afbc ._gcge =append (_afbc ._gcge ,_bfgf ._gcge ...);if len (_afbc ._cee )==0{_afbc ._cee =_bfgf ._cee ;};if len (_afbc ._ggf )==0{_afbc ._ggf =_bfgf ._ggf ;};_gabe :=_afbc ._ccde ;_acac :=_bfgf ._ccde ;
if _gabe !=nil {if _acac !=nil {if _gabe .Divs !=nil {if _acac .Divs !=nil {_gabe .Divs .Div =append (_gabe .Divs .Div ,_acac .Divs .Div ...);};}else {_gabe .Divs =_acac .Divs ;};};_gabe .Frameset =nil ;}else if _acac !=nil {_gabe =_acac ;_gabe .Frameset =nil ;
};_afbc ._ccde =_gabe ;_egbb :=_afbc ._gdb ;_dgaa :=_bfgf ._gdb ;if _egbb !=nil {if _dgaa !=nil {if _egbb .Font !=nil {if _dgaa .Font !=nil {for _ ,_cfedd :=range _dgaa .Font {_cdce :=true ;for _ ,_agca :=range _egbb .Font {if _agca .NameAttr ==_cfedd .NameAttr {_cdce =false ;
break ;};};if _cdce {_egbb .Font =append (_egbb .Font ,_cfedd );};};};}else {_egbb .Font =_dgaa .Font ;};};}else if _dgaa !=nil {_egbb =_dgaa ;};_afbc ._gdb =_egbb ;return nil ;};

// Themes returns document's themes.
func (_cgac *Document )Themes ()[]*_fa .Theme {return _cgac ._aef };

// SetTextStyleBold set text style of watermark to bold.
func (_egabe *WatermarkText )SetTextStyleBold (value bool ){if _egabe ._feab !=nil {_ceec :=_egabe .GetStyle ();_ceec .SetBold (value );_egabe .SetStyle (_ceec );};};

// X returns the inner wrapped XML type.
func (_gcafa Settings )X ()*_bf .Settings {return _gcafa ._eebg };

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_fcgd HyperLink )SetTargetByRef (link _aa .Hyperlink ){_fcgd ._agbdc .IdAttr =_d .String (_aa .Relationship (link ).ID ());_fcgd ._agbdc .AnchorAttr =nil ;};

// SetAlignment controls the paragraph alignment
func (_afccd ParagraphStyleProperties )SetAlignment (align _bf .ST_Jc ){if align ==_bf .ST_JcUnset {_afccd ._egfe .Jc =nil ;}else {_afccd ._egfe .Jc =_bf .NewCT_Jc ();_afccd ._egfe .Jc .ValAttr =align ;};};

// SetWrapPathStart sets wrapPath start value.
func (_fcb AnchorDrawWrapOptions )SetWrapPathStart (coordinate *_fa .CT_Point2D ){_fcb ._cgge =coordinate ;};

// IgnoreSpaceBetweenParagraphOfSameStyle sets contextual spacing.
func (_bbcc Paragraph )IgnoreSpaceBetweenParagraphOfSameStyle (){_bbcc .ensurePPr ();if _bbcc ._dbga .PPr .ContextualSpacing ==nil {_bbcc ._dbga .PPr .ContextualSpacing =_bf .NewCT_OnOff ();};_bbcc ._dbga .PPr .ContextualSpacing .ValAttr =&_de .ST_OnOff {ST_OnOff1 :_de .ST_OnOff1On };
};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_bcff Paragraph )SetNumberingLevel (listLevel int ){_bcff .ensurePPr ();if _bcff ._dbga .PPr .NumPr ==nil {_bcff ._dbga .PPr .NumPr =_bf .NewCT_NumPr ();};_adbe :=_bf .NewCT_DecimalNumber ();_adbe .ValAttr =int64 (listLevel );_bcff ._dbga .PPr .NumPr .Ilvl =_adbe ;
};

// SetTop sets the top border to a specified type, color and thickness.
func (_cbcd TableBorders )SetTop (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_cbcd ._fbdf .Top =_bf .NewCT_Border ();_gbfg (_cbcd ._fbdf .Top ,t ,c ,thickness );};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_gafaa ParagraphStyleProperties )SetHangingIndent (m _abg .Distance ){if _gafaa ._egfe .Ind ==nil {_gafaa ._egfe .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_gafaa ._egfe .Ind .HangingAttr =nil ;}else {_gafaa ._egfe .Ind .HangingAttr =&_de .ST_TwipsMeasure {};
_gafaa ._egfe .Ind .HangingAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (m /_abg .Twips ));};};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dccd ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_dccd ._egfe .KeepLines =nil ;}else {_dccd ._egfe .KeepLines =_bf .NewCT_OnOff ();};};

// SetBetween sets the between border to a specified type, color and thickness between paragraph.
func (_egaf ParagraphBorders )SetBetween (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_egaf ._gdbea .Between =_bf .NewCT_Border ();_abfa (_egaf ._gdbea .Between ,t ,c ,thickness );};

// Headers returns the headers defined in the document.
func (_fcee *Document )Headers ()[]Header {_gfa :=[]Header {};for _ ,_fda :=range _fcee ._cee {_gfa =append (_gfa ,Header {_fcee ,_fda });};return _gfa ;};

// SetPageSizeAndOrientation sets the page size and orientation for a section.
func (_cadg Section )SetPageSizeAndOrientation (w ,h _abg .Distance ,orientation _bf .ST_PageOrientation ){if _cadg ._fgca .PgSz ==nil {_cadg ._fgca .PgSz =_bf .NewCT_PageSz ();};_cadg ._fgca .PgSz .OrientAttr =orientation ;if orientation ==_bf .ST_PageOrientationLandscape {_cadg ._fgca .PgSz .WAttr =&_de .ST_TwipsMeasure {};
_cadg ._fgca .PgSz .WAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (h /_abg .Twips ));_cadg ._fgca .PgSz .HAttr =&_de .ST_TwipsMeasure {};_cadg ._fgca .PgSz .HAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (w /_abg .Twips ));}else {_cadg ._fgca .PgSz .WAttr =&_de .ST_TwipsMeasure {};
_cadg ._fgca .PgSz .WAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (w /_abg .Twips ));_cadg ._fgca .PgSz .HAttr =&_de .ST_TwipsMeasure {};_cadg ._fgca .PgSz .HAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (h /_abg .Twips ));};};

// SetRight sets the right border to a specified type, color and thickness.
func (_bg CellBorders )SetRight (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_bg ._eeea .Right =_bf .NewCT_Border ();_gbfg (_bg ._eeea .Right ,t ,c ,thickness );};

// RowProperties are the properties for a row within a table
type RowProperties struct{_fgcc *_bf .CT_TrPr };

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_eecc ParagraphProperties )SetHangingIndent (m _abg .Distance ){if _eecc ._fcdce .Ind ==nil {_eecc ._fcdce .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_eecc ._fcdce .Ind .HangingAttr =nil ;}else {_eecc ._fcdce .Ind .HangingAttr =&_de .ST_TwipsMeasure {};
_eecc ._fcdce .Ind .HangingAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (m /_abg .Twips ));};};

// SetValue sets the width value.
func (_caagd TableWidth )SetValue (m _abg .Distance ){_caagd ._acgg .WAttr =&_bf .ST_MeasurementOrPercent {};_caagd ._acgg .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};_caagd ._acgg .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (m /_abg .Twips ));
_caagd ._acgg .TypeAttr =_bf .ST_TblWidthDxa ;};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_aafb RunProperties )SetFontFamily (family string ){if _aafb ._gaffa .RFonts ==nil {_aafb ._gaffa .RFonts =_bf .NewCT_Fonts ();};_aafb ._gaffa .RFonts .AsciiAttr =_d .String (family );_aafb ._gaffa .RFonts .HAnsiAttr =_d .String (family );_aafb ._gaffa .RFonts .EastAsiaAttr =_d .String (family );
};

// RunProperties returns the run properties controlling text formatting within the table.
func (_gaef TableConditionalFormatting )RunProperties ()RunProperties {if _gaef ._dbca .RPr ==nil {_gaef ._dbca .RPr =_bf .NewCT_RPr ();};return RunProperties {_gaef ._dbca .RPr };};

// SetStrikeThrough sets the run to strike-through.
func (_afbbd RunProperties )SetStrikeThrough (b bool ){if !b {_afbbd ._gaffa .Strike =nil ;}else {_afbbd ._gaffa .Strike =_bf .NewCT_OnOff ();};};

// AddParagraph adds a paragraph to the footer.
func (_abbfe Footer )AddParagraph ()Paragraph {_ecag :=_bf .NewEG_ContentBlockContent ();_abbfe ._cbgde .EG_ContentBlockContent =append (_abbfe ._cbgde .EG_ContentBlockContent ,_ecag );_abcgf :=_bf .NewCT_P ();_ecag .P =append (_ecag .P ,_abcgf );return Paragraph {_abbfe ._dgabc ,_abcgf };
};

// GetKerning returns the kerning (character spacing) of a run
func (_agfdd RunProperties )GetKerning ()_abg .Distance {if _agfdd ._gaffa .Kern !=nil {return _abg .Distance (float64 (*_agfdd ._gaffa .Kern .ValAttr .ST_UnsignedDecimalNumber )*_abg .HalfPoint );};return 0;};

// SetSmallCaps sets the run to small caps.
func (_fagca RunProperties )SetSmallCaps (b bool ){if !b {_fagca ._gaffa .SmallCaps =nil ;}else {_fagca ._gaffa .SmallCaps =_bf .NewCT_OnOff ();};};

// Bold returns true if run font is bold.
func (_ceccf RunProperties )Bold ()bool {_defc :=_ceccf ._gaffa ;return _bffc (_defc .B )||_bffc (_defc .BCs );};

// Italic returns true if run font is italic.
func (_cagce RunProperties )Italic ()bool {_cfge :=_cagce ._gaffa ;return _bffc (_cfge .I )||_bffc (_cfge .ICs );};func _ffcd ()*_ga .Handles {_faebe :=_ga .NewHandles ();_acbff :=_ga .NewCT_H ();_gaeff :="\u0023\u0030\u002c\u0062\u006f\u0074\u0074\u006f\u006dR\u0069\u0067\u0068\u0074";
_acbff .PositionAttr =&_gaeff ;_ccdf :="\u0036\u0036\u0032\u0039\u002c\u0031\u0034\u0039\u0037\u0031";_acbff .XrangeAttr =&_ccdf ;_faebe .H =[]*_ga .CT_H {_acbff };return _faebe ;};

// AddRow adds a row to a table.
func (_gfggf Table )AddRow ()Row {_ddegf :=_bf .NewEG_ContentRowContent ();_gfggf ._gbaed .EG_ContentRowContent =append (_gfggf ._gbaed .EG_ContentRowContent ,_ddegf );_afgbb :=_bf .NewCT_Row ();_ddegf .Tr =append (_ddegf .Tr ,_afgbb );return Row {_gfggf ._daafa ,_afgbb };
};

// UnderlineColor returns the hex color value of paragraph underline.
func (_edeg ParagraphProperties )UnderlineColor ()string {if _edegb :=_edeg ._fcdce .RPr .U ;_edegb !=nil {_eedga :=_edegb .ColorAttr ;if _eedga !=nil &&_eedga .ST_HexColorRGB !=nil {return *_eedga .ST_HexColorRGB ;};};return "";};

// X returns the inner wrapped XML type.
func (_edce InlineDrawing )X ()*_bf .WdInline {return _edce ._ggbg };

// Emboss returns true if run emboss is on.
func (_afeaa RunProperties )Emboss ()bool {return _bffc (_afeaa ._gaffa .Emboss )};

// VerticalAlign returns the value of paragraph vertical align.
func (_cfgd ParagraphProperties )VerticalAlignment ()_de .ST_VerticalAlignRun {if _eegag :=_cfgd ._fcdce .RPr .VertAlign ;_eegag !=nil {return _eegag .ValAttr ;};return 0;};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_bcc *_bf .CT_Bookmark };

// ExtractText returns text from the document as a DocText object.
func (_ebda *Document )ExtractText ()*DocText {_ggfe :=[]TextItem {};for _ ,_aabg :=range _ebda ._aff .Body .EG_BlockLevelElts {_ggfe =append (_ggfe ,_cccbgd (_aabg .EG_ContentBlockContent ,nil )...);};var _fcc []listItemInfo ;_aabc :=_ebda .Paragraphs ();
for _ ,_aeb :=range _aabc {_ecfde :=_dgcf (_ebda ,_aeb );_fcc =append (_fcc ,_ecfde );};_bfcga :=_gbccg (_ebda );return &DocText {Items :_ggfe ,_gbdfb :_fcc ,_fadad :_bfcga };};func _gbgef ()*_ga .Textpath {_aeaaf :=_ga .NewTextpath ();_aeaaf .OnAttr =_de .ST_TrueFalseTrue ;
_aeaaf .FitshapeAttr =_de .ST_TrueFalseTrue ;return _aeaaf ;};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_dgdbe *_bf .CT_Spacing };func _dcfbb ()*_ga .OfcLock {_abgcdb :=_ga .NewOfcLock ();_abgcdb .ExtAttr =_ga .ST_ExtEdit ;_abgcdb .TextAttr =_de .ST_TrueFalseTrue ;_abgcdb .ShapetypeAttr =_de .ST_TrueFalseTrue ;return _abgcdb ;
};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_cgda Footer )AddImage (i _aa .Image )(_aa .ImageRef ,error ){var _eadg _aa .Relationships ;for _dgbc ,_faabb :=range _cgda ._dgabc ._ggf {if _faabb ==_cgda ._cbgde {_eadg =_cgda ._dgabc ._fb [_dgbc ];};};_fcefb :=_aa .MakeImageRef (i ,&_cgda ._dgabc .DocBase ,_eadg );
if i .Data ==nil &&i .Path ==""{return _fcefb ,_ca .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _fcefb ,_ca .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _fcefb ,_ca .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_cgda ._dgabc .Images =append (_cgda ._dgabc .Images ,_fcefb );
_aeeg :=_cag .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_cgda ._dgabc .Images ),i .Format );_agbab :=_eadg .AddRelationship (_aeeg ,_d .ImageType );_fcefb .SetRelID (_agbab .X ().IdAttr );return _fcefb ,nil ;
};

// GetText returns text in the watermark.
func (_gcfa *WatermarkText )GetText ()string {_adac :=_gcfa .getShape ();if _gcfa ._feab !=nil {_egaa :=_gcfa ._feab .EG_ShapeElements ;if len (_egaa )> 0&&_egaa [0].Textpath !=nil {return *_egaa [0].Textpath .StringAttr ;};}else {_gfbeg :=_gcfa .findNode (_adac ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");
for _ ,_egcfa :=range _gfbeg .Attrs {if _egcfa .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{return _egcfa .Value ;};};};return "";};

// SetCellSpacing sets the cell spacing within a table.
func (_bdgca TableProperties )SetCellSpacing (m _abg .Distance ){_bdgca ._daef .TblCellSpacing =_bf .NewCT_TblWidth ();_bdgca ._daef .TblCellSpacing .TypeAttr =_bf .ST_TblWidthDxa ;_bdgca ._daef .TblCellSpacing .WAttr =&_bf .ST_MeasurementOrPercent {};
_bdgca ._daef .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};_bdgca ._daef .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (m /_abg .Dxa ));};func (_abbce Run )newIC ()*_bf .EG_RunInnerContent {_gbcfg :=_bf .NewEG_RunInnerContent ();
_abbce ._ccceca .EG_RunInnerContent =append (_abbce ._ccceca .EG_RunInnerContent ,_gbcfg );return _gbcfg ;};

// Paragraphs returns the paragraphs defined in a footnote.
func (_gffc Footnote )Paragraphs ()[]Paragraph {_ffeff :=[]Paragraph {};for _ ,_dbdb :=range _gffc .content (){for _ ,_abcgb :=range _dbdb .P {_ffeff =append (_ffeff ,Paragraph {_gffc ._cbgb ,_abcgb });};};return _ffeff ;};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_agaed Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_gadc :=_agaed .newIC ();_gadc .FldChar =_bf .NewCT_FldChar ();_gadc .FldChar .FldCharTypeAttr =_bf .ST_FldCharTypeBegin ;if isDirty {_gadc .FldChar .DirtyAttr =&_de .ST_OnOff {};
_gadc .FldChar .DirtyAttr .Bool =_d .Bool (true );};_gadc =_agaed .newIC ();_gadc .InstrText =_bf .NewCT_Text ();if fmt !=""{_gadc .InstrText .Content =code +"\u0020"+fmt ;}else {_gadc .InstrText .Content =code ;};_gadc =_agaed .newIC ();_gadc .FldChar =_bf .NewCT_FldChar ();
_gadc .FldChar .FldCharTypeAttr =_bf .ST_FldCharTypeEnd ;};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_gafg *Document )HasEndnotes ()bool {return _gafg ._cbfc !=nil };

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_cffgf FormField )IsChecked ()bool {if _cffgf ._beca .CheckBox ==nil {return false ;};if _cffgf ._beca .CheckBox .Checked !=nil {return true ;};return false ;};func _gbfg (_bfcf *_bf .CT_Border ,_dbgda _bf .ST_Border ,_daeac _ff .Color ,_gaaa _abg .Distance ){_bfcf .ValAttr =_dbgda ;
_bfcf .ColorAttr =&_bf .ST_HexColor {};if _daeac .IsAuto (){_bfcf .ColorAttr .ST_HexColorAuto =_bf .ST_HexColorAutoAuto ;}else {_bfcf .ColorAttr .ST_HexColorRGB =_daeac .AsRGBString ();};if _gaaa !=_abg .Zero {_bfcf .SzAttr =_d .Uint64 (uint64 (_gaaa /_abg .Point *8));
};};func (_cbad *chart )X ()*_gac .ChartSpace {return _cbad ._gb };

// Name returns the name of the field.
func (_dcag FormField )Name ()string {return *_dcag ._beca .Name [0].ValAttr };

// Shadow returns true if paragraph shadow is on.
func (_bfaee ParagraphProperties )Shadow ()bool {return _bffc (_bfaee ._fcdce .RPr .Shadow )};

// Pict returns the pict object.
func (_degae *WatermarkPicture )Pict ()*_bf .CT_Picture {return _degae ._geed };func _gafcd (_egcac *_bf .CT_Tbl ,_ddce map[string ]string ){for _ ,_dda :=range _egcac .EG_ContentRowContent {for _ ,_eggcg :=range _dda .Tr {for _ ,_faff :=range _eggcg .EG_ContentCellContent {for _ ,_gcdd :=range _faff .Tc {for _ ,_fdec :=range _gcdd .EG_BlockLevelElts {for _ ,_gabc :=range _fdec .EG_ContentBlockContent {for _ ,_agab :=range _gabc .P {_acfe (_agab ,_ddce );
};for _ ,_cecf :=range _gabc .Tbl {_gafcd (_cecf ,_ddce );};};};};};};};};

// Row is a row within a table within a document.
type Row struct{_bfeac *Document ;_eedfc *_bf .CT_Row ;};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_bf .NewCT_TblWidth ()}};

// Name returns the name of the style if set.
func (_afdeg Style )Name ()string {if _afdeg ._ccecg .Name ==nil {return "";};return _afdeg ._ccecg .Name .ValAttr ;};

// Paragraphs returns the paragraphs defined in a header.
func (_ecbff Header )Paragraphs ()[]Paragraph {_fgfeb :=[]Paragraph {};for _ ,_aeef :=range _ecbff ._ggab .EG_ContentBlockContent {for _ ,_abddf :=range _aeef .P {_fgfeb =append (_fgfeb ,Paragraph {_ecbff ._bggab ,_abddf });};};for _ ,_bcca :=range _ecbff .Tables (){for _ ,_bggb :=range _bcca .Rows (){for _ ,_fdede :=range _bggb .Cells (){_fgfeb =append (_fgfeb ,_fdede .Paragraphs ()...);
};};};return _fgfeb ;};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_dbfcg Paragraph )AddBookmark (name string )Bookmark {_fddaa :=_bf .NewEG_PContent ();_fffa :=_bf .NewEG_ContentRunContent ();_fddaa .EG_ContentRunContent =append (_fddaa .EG_ContentRunContent ,_fffa );_gggdc :=_bf .NewEG_RunLevelElts ();_fffa .EG_RunLevelElts =append (_fffa .EG_RunLevelElts ,_gggdc );
_dgdg :=_bf .NewEG_RangeMarkupElements ();_ccea :=_bf .NewCT_Bookmark ();_dgdg .BookmarkStart =_ccea ;_gggdc .EG_RangeMarkupElements =append (_gggdc .EG_RangeMarkupElements ,_dgdg );_dgdg =_bf .NewEG_RangeMarkupElements ();_dgdg .BookmarkEnd =_bf .NewCT_MarkupRange ();
_gggdc .EG_RangeMarkupElements =append (_gggdc .EG_RangeMarkupElements ,_dgdg );_dbfcg ._dbga .EG_PContent =append (_dbfcg ._dbga .EG_PContent ,_fddaa );_fdde :=Bookmark {_ccea };_fdde .SetName (name );return _fdde ;};

// RemoveParagraph removes a paragraph from a document.
func (_fcda *Document )RemoveParagraph (p Paragraph ){if _fcda ._aff .Body ==nil {return ;};for _ ,_bfa :=range _fcda ._aff .Body .EG_BlockLevelElts {for _ ,_dab :=range _bfa .EG_ContentBlockContent {for _cbgd ,_edca :=range _dab .P {if _edca ==p ._dbga {copy (_dab .P [_cbgd :],_dab .P [_cbgd +1:]);
_dab .P =_dab .P [0:len (_dab .P )-1];return ;};};if _dab .Sdt !=nil &&_dab .Sdt .SdtContent !=nil &&_dab .Sdt .SdtContent .P !=nil {for _aeed ,_aeg :=range _dab .Sdt .SdtContent .P {if _aeg ==p ._dbga {copy (_dab .P [_aeed :],_dab .P [_aeed +1:]);_dab .P =_dab .P [0:len (_dab .P )-1];
return ;};};};};};for _ ,_adgg :=range _fcda .Tables (){for _ ,_cadbb :=range _adgg .Rows (){for _ ,_faa :=range _cadbb .Cells (){for _ ,_dbae :=range _faa ._cbe .EG_BlockLevelElts {for _ ,_acgc :=range _dbae .EG_ContentBlockContent {for _abbe ,_efb :=range _acgc .P {if _efb ==p ._dbga {copy (_acgc .P [_abbe :],_acgc .P [_abbe +1:]);
_acgc .P =_acgc .P [0:len (_acgc .P )-1];return ;};};};};};};};for _ ,_dcge :=range _fcda .Headers (){_dcge .RemoveParagraph (p );};for _ ,_fbd :=range _fcda .Footers (){_fbd .RemoveParagraph (p );};};

// Underline returns the type of run underline.
func (_dbdc RunProperties )Underline ()_bf .ST_Underline {if _dfbc :=_dbdc ._gaffa .U ;_dfbc !=nil {return _dfbc .ValAttr ;};return 0;};func (_edg *Document )appendTable (_facd *Paragraph ,_efg Table ,_bgdb bool )Table {_bccg :=_edg ._aff .Body ;_gee :=_bf .NewEG_BlockLevelElts ();
_edg ._aff .Body .EG_BlockLevelElts =append (_edg ._aff .Body .EG_BlockLevelElts ,_gee );_fad :=_bf .NewEG_ContentBlockContent ();_gee .EG_ContentBlockContent =append (_gee .EG_ContentBlockContent ,_fad );if _facd !=nil {_gbc :=_facd .X ();for _cbfg ,_egde :=range _bccg .EG_BlockLevelElts {for _ ,_abfc :=range _egde .EG_ContentBlockContent {for _fdd ,_ded :=range _fad .P {if _ded ==_gbc {_egg :=_efg .X ();
_fbe :=_bf .NewEG_BlockLevelElts ();_bfec :=_bf .NewEG_ContentBlockContent ();_fbe .EG_ContentBlockContent =append (_fbe .EG_ContentBlockContent ,_bfec );_bfec .Tbl =append (_bfec .Tbl ,_egg );_bccg .EG_BlockLevelElts =append (_bccg .EG_BlockLevelElts ,nil );
if _bgdb {copy (_bccg .EG_BlockLevelElts [_cbfg +1:],_bccg .EG_BlockLevelElts [_cbfg :]);_bccg .EG_BlockLevelElts [_cbfg ]=_fbe ;if _fdd !=0{_dadb :=_bf .NewEG_BlockLevelElts ();_gda :=_bf .NewEG_ContentBlockContent ();_dadb .EG_ContentBlockContent =append (_dadb .EG_ContentBlockContent ,_gda );
_gda .P =_abfc .P [:_fdd ];_bccg .EG_BlockLevelElts =append (_bccg .EG_BlockLevelElts ,nil );copy (_bccg .EG_BlockLevelElts [_cbfg +1:],_bccg .EG_BlockLevelElts [_cbfg :]);_bccg .EG_BlockLevelElts [_cbfg ]=_dadb ;};_abfc .P =_abfc .P [_fdd :];}else {copy (_bccg .EG_BlockLevelElts [_cbfg +2:],_bccg .EG_BlockLevelElts [_cbfg +1:]);
_bccg .EG_BlockLevelElts [_cbfg +1]=_fbe ;if _fdd !=len (_abfc .P )-1{_eag :=_bf .NewEG_BlockLevelElts ();_aabe :=_bf .NewEG_ContentBlockContent ();_eag .EG_ContentBlockContent =append (_eag .EG_ContentBlockContent ,_aabe );_aabe .P =_abfc .P [_fdd +1:];
_bccg .EG_BlockLevelElts =append (_bccg .EG_BlockLevelElts ,nil );copy (_bccg .EG_BlockLevelElts [_cbfg +3:],_bccg .EG_BlockLevelElts [_cbfg +2:]);_bccg .EG_BlockLevelElts [_cbfg +2]=_eag ;};_abfc .P =_abfc .P [:_fdd +1];};break ;};};for _ ,_fead :=range _abfc .Tbl {_ggbd :=_aaba (_fead ,_gbc ,_bgdb );
if _ggbd !=nil {break ;};};};};}else {_fad .Tbl =append (_fad .Tbl ,_efg .X ());};return Table {_edg ,_efg .X ()};};

// SetBold sets the run to bold.
func (_gcae RunProperties )SetBold (b bool ){if !b {_gcae ._gaffa .B =nil ;_gcae ._gaffa .BCs =nil ;}else {_gcae ._gaffa .B =_bf .NewCT_OnOff ();_gcae ._gaffa .BCs =_bf .NewCT_OnOff ();};};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_fcd CellProperties )SetColumnSpan (cols int ){if cols ==0{_fcd ._fdc .GridSpan =nil ;}else {_fcd ._fdc .GridSpan =_bf .NewCT_DecimalNumber ();_fcd ._fdc .GridSpan .ValAttr =int64 (cols );};};

// AddPageBreak adds a page break to a run.
func (_faadg Run )AddPageBreak (){_fbgg :=_faadg .newIC ();_fbgg .Br =_bf .NewCT_Br ();_fbgg .Br .TypeAttr =_bf .ST_BrTypePage ;};

// SetPageMargins sets the page margins for a section
func (_febd Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _abg .Distance ){_ffgfe :=_bf .NewCT_PageMar ();_ffgfe .TopAttr .Int64 =_d .Int64 (int64 (top /_abg .Twips ));_ffgfe .BottomAttr .Int64 =_d .Int64 (int64 (bottom /_abg .Twips ));
_ffgfe .RightAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (right /_abg .Twips ));_ffgfe .LeftAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (left /_abg .Twips ));_ffgfe .HeaderAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (header /_abg .Twips ));
_ffgfe .FooterAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (footer /_abg .Twips ));_ffgfe .GutterAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (gutter /_abg .Twips ));_febd ._fgca .PgMar =_ffgfe ;};

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_ebga FormField )SetPossibleValues (values []string ){if _ebga ._beca .DdList !=nil {for _ ,_eacf :=range values {_gaagf :=_bf .NewCT_String ();_gaagf .ValAttr =_eacf ;_ebga ._beca .DdList .ListEntry =append (_ebga ._beca .DdList .ListEntry ,_gaagf );
};};};

// Borders allows manipulation of the table borders.
func (_gagdf TableStyleProperties )Borders ()TableBorders {if _gagdf ._efbde .TblBorders ==nil {_gagdf ._efbde .TblBorders =_bf .NewCT_TblBorders ();};return TableBorders {_gagdf ._efbde .TblBorders };};func (_bcbb Paragraph )addSeparateFldChar ()*_bf .CT_FldChar {_ecacd :=_bcbb .addFldChar ();
_ecacd .FldCharTypeAttr =_bf .ST_FldCharTypeSeparate ;return _ecacd ;};var (FootnoteTextStyleId ="\u0046\u006f\u006ft\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_ccdb ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065";
EndnoteTextStyleId ="E\u006e\u0064\u006e\u006f\u0074\u0065\u0054\u0065\u0078\u0074";_cbb ="\u0045\u006ed\u006e\u006f\u0074e\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065";_cgb =uint64 (20););

// Font returns the name of run font family.
func (_debdg RunProperties )Font ()string {if _ecafg :=_debdg ._gaffa .RFonts ;_ecafg !=nil {if _ecafg .AsciiAttr !=nil {return *_ecafg .AsciiAttr ;}else if _ecafg .HAnsiAttr !=nil {return *_ecafg .HAnsiAttr ;}else if _ecafg .CsAttr !=nil {return *_ecafg .CsAttr ;
};};return "";};

// SetBottom sets the cell bottom margin
func (_fgge CellMargins )SetBottom (d _abg .Distance ){_fgge ._dcd .Bottom =_bf .NewCT_TblWidth ();_faca (_fgge ._dcd .Bottom ,d );};

// Footnotes returns the footnotes defined in the document.
func (_cadbd *Document )Footnotes ()[]Footnote {_fdgc :=[]Footnote {};for _ ,_gceg :=range _cadbd ._edc .CT_Footnotes .Footnote {_fdgc =append (_fdgc ,Footnote {_cadbd ,_gceg });};return _fdgc ;};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_daag ParagraphSpacing )SetAfterAuto (b bool ){if b {_daag ._dgdbe .AfterAutospacingAttr =&_de .ST_OnOff {};_daag ._dgdbe .AfterAutospacingAttr .Bool =_d .Bool (true );}else {_daag ._dgdbe .AfterAutospacingAttr =nil ;};};func (_bagf *WatermarkPicture )getShapeType ()*_d .XSDAny {return _bagf .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");
};

// GetWrapPathLineTo return wrapPath lineTo value.
func (_dba AnchorDrawWrapOptions )GetWrapPathLineTo ()[]*_fa .CT_Point2D {return _dba ._ee };

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_bf .Hdr )[]TextItem {return _cccbgd (header .EG_ContentBlockContent ,nil );};

// SetAlignment sets the paragraph alignment
func (_aebf NumberingLevel )SetAlignment (j _bf .ST_Jc ){if j ==_bf .ST_JcUnset {_aebf ._dfaa .LvlJc =nil ;}else {_aebf ._dfaa .LvlJc =_bf .NewCT_Jc ();_aebf ._dfaa .LvlJc .ValAttr =j ;};};

// read reads a document from an io.Reader.
func Read (r _ce .ReaderAt ,size int64 )(*Document ,error ){return _cbeg (r ,size ,"")};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_adfb ParagraphProperties )Style ()string {if _adfb ._fcdce .PStyle !=nil {return _adfb ._fcdce .PStyle .ValAttr ;};return "";};

// Color returns the style's Color.
func (_caaca RunProperties )Color ()Color {if _caaca ._gaffa .Color ==nil {_caaca ._gaffa .Color =_bf .NewCT_Color ();};return Color {_caaca ._gaffa .Color };};

// Control returns an *axcontrol.Control object contained in the run or the nil value in case of no controls.
func (_cecaf Run )Control ()*_ab .Control {if _dbde :=_cecaf ._ccceca .EG_RunInnerContent ;_dbde !=nil {if _abgcd :=_dbde [0].Object ;_abgcd !=nil {if _cbcb :=_abgcd .Choice ;_cbcb !=nil {if _fceab :=_cbcb .Control ;_fceab !=nil {if _fceab .IdAttr !=nil {_ggdec :=_cecaf ._abedg .GetDocRelTargetByID (*_fceab .IdAttr );
for _ ,_dbggcg :=range _cecaf ._abedg ._gcge {if _ggdec ==_dbggcg .TargetAttr {return _dbggcg ;};};};};};};};return nil ;};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_cgea *Document )HasFootnotes ()bool {return _cgea ._edc !=nil };func _cbbad ()*_ga .OfcLock {_dbeb :=_ga .NewOfcLock ();_dbeb .ExtAttr =_ga .ST_ExtEdit ;_dbeb .AspectratioAttr =_de .ST_TrueFalseTrue ;return _dbeb ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_gdf CellBorders )SetInsideHorizontal (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_gdf ._eeea .InsideH =_bf .NewCT_Border ();_gbfg (_gdf ._eeea .InsideH ,t ,c ,thickness );};

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_egcb *_bf .CT_AbstractNum };

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_feagf ,_deedc :=_a .Open (filename );if _deedc !=nil {return nil ,_cag .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_deedc );};defer _feagf .Close ();
_deda ,_deedc :=_a .Stat (filename );if _deedc !=nil {return nil ,_cag .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_deedc );};_ =_deda ;return Read (_feagf ,_deda .Size ());};func (_dfedd Paragraph )addFldCharsForField (_fee ,_bdbe string )FormField {_abcf :=_dfedd .addBeginFldChar (_fee );
_aedca :=FormField {_beca :_abcf };_eaed :=_dfedd ._gffg .Bookmarks ();_bbbcf :=int64 (len (_eaed ));if _fee !=""{_dfedd .addStartBookmark (_bbbcf ,_fee );};_dfedd .addInstrText (_bdbe );_dfedd .addSeparateFldChar ();if _bdbe =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_cedc :=_dfedd .AddRun ();
_cecc :=_bf .NewEG_RunInnerContent ();_cedc ._ccceca .EG_RunInnerContent =[]*_bf .EG_RunInnerContent {_cecc };_aedca ._bfecg =_cecc ;};_dfedd .addEndFldChar ();if _fee !=""{_dfedd .addEndBookmark (_bbbcf );};return _aedca ;};func (_cgfg Paragraph )addBeginFldChar (_aegae string )*_bf .CT_FFData {_bgfeg :=_cgfg .addFldChar ();
_bgfeg .FldCharTypeAttr =_bf .ST_FldCharTypeBegin ;_bgfeg .FfData =_bf .NewCT_FFData ();_fefd :=_bf .NewCT_FFName ();_fefd .ValAttr =&_aegae ;_bgfeg .FfData .Name =[]*_bf .CT_FFName {_fefd };return _bgfeg .FfData ;};

// SetThemeColor sets the color from the theme.
func (_dag Color )SetThemeColor (t _bf .ST_ThemeColor ){_dag ._baba .ThemeColorAttr =t };

// SetRightToLeft sets the run text goes from right to left.
func (_dcga RunProperties )SetRightToLeft (b bool ){if !b {_dcga ._gaffa .Rtl =nil ;}else {_dcga ._gaffa .Rtl =_bf .NewCT_OnOff ();};};func (_daff *Document )tables (_cfc *_bf .EG_ContentBlockContent )[]Table {_abedd :=[]Table {};for _ ,_gea :=range _cfc .Tbl {_abedd =append (_abedd ,Table {_daff ,_gea });
for _ ,_afdb :=range _gea .EG_ContentRowContent {for _ ,_adg :=range _afdb .Tr {for _ ,_abb :=range _adg .EG_ContentCellContent {for _ ,_eeg :=range _abb .Tc {for _ ,_ced :=range _eeg .EG_BlockLevelElts {for _ ,_feag :=range _ced .EG_ContentBlockContent {for _ ,_caed :=range _daff .tables (_feag ){_abedd =append (_abedd ,_caed );
};};};};};};};};return _abedd ;};

// SetFormat sets the numbering format.
func (_gfde NumberingLevel )SetFormat (f _bf .ST_NumberFormat ){if _gfde ._dfaa .NumFmt ==nil {_gfde ._dfaa .NumFmt =_bf .NewCT_NumFmt ();};_gfde ._dfaa .NumFmt .ValAttr =f ;};

// SetSize sets the font size for a run.
func (_agfdf RunProperties )SetSize (size _abg .Distance ){_agfdf ._gaffa .Sz =_bf .NewCT_HpsMeasure ();_agfdf ._gaffa .Sz .ValAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (size /_abg .HalfPoint ));_agfdf ._gaffa .SzCs =_bf .NewCT_HpsMeasure ();_agfdf ._gaffa .SzCs .ValAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (size /_abg .HalfPoint ));
};

// SetWidthAuto sets the the cell width to automatic.
func (_dcc CellProperties )SetWidthAuto (){_dcc ._fdc .TcW =_bf .NewCT_TblWidth ();_dcc ._fdc .TcW .TypeAttr =_bf .ST_TblWidthAuto ;};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_fbag ParagraphProperties )SetSpacing (before ,after _abg .Distance ){if _fbag ._fcdce .Spacing ==nil {_fbag ._fcdce .Spacing =_bf .NewCT_Spacing ();};_fbag ._fcdce .Spacing .BeforeAttr =&_de .ST_TwipsMeasure {};_fbag ._fcdce .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (before /_abg .Twips ));
_fbag ._fcdce .Spacing .AfterAttr =&_de .ST_TwipsMeasure {};_fbag ._fcdce .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (after /_abg .Twips ));};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_eabbbc TableBorders )SetInsideHorizontal (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_eabbbc ._fbdf .InsideH =_bf .NewCT_Border ();_gbfg (_eabbbc ._fbdf .InsideH ,t ,c ,thickness );};

// Borders returns the ParagraphBorders for setting-up border on paragraph.
func (_adgd Paragraph )Borders ()ParagraphBorders {_adgd .ensurePPr ();if _adgd ._dbga .PPr .PBdr ==nil {_adgd ._dbga .PPr .PBdr =_bf .NewCT_PBdr ();};return ParagraphBorders {_adgd ._gffg ,_adgd ._dbga .PPr .PBdr };};

// SetAlignment sets the alignment of a table within the page.
func (_cbcac TableProperties )SetAlignment (align _bf .ST_JcTable ){if align ==_bf .ST_JcTableUnset {_cbcac ._daef .Jc =nil ;}else {_cbcac ._daef .Jc =_bf .NewCT_JcTable ();_cbcac ._daef .Jc .ValAttr =align ;};};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_gdac ParagraphStyleProperties )SetSpacing (before ,after _abg .Distance ){if _gdac ._egfe .Spacing ==nil {_gdac ._egfe .Spacing =_bf .NewCT_Spacing ();};if before ==_abg .Zero {_gdac ._egfe .Spacing .BeforeAttr =nil ;}else {_gdac ._egfe .Spacing .BeforeAttr =&_de .ST_TwipsMeasure {};
_gdac ._egfe .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (before /_abg .Twips ));};if after ==_abg .Zero {_gdac ._egfe .Spacing .AfterAttr =nil ;}else {_gdac ._egfe .Spacing .AfterAttr =&_de .ST_TwipsMeasure {};_gdac ._egfe .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (after /_abg .Twips ));
};};

// AddTable adds a table to the table cell.
func (_daf Cell )AddTable ()Table {_gcg :=_bf .NewEG_BlockLevelElts ();_daf ._cbe .EG_BlockLevelElts =append (_daf ._cbe .EG_BlockLevelElts ,_gcg );_cad :=_bf .NewEG_ContentBlockContent ();_gcg .EG_ContentBlockContent =append (_gcg .EG_ContentBlockContent ,_cad );
_fdf :=_bf .NewCT_Tbl ();_cad .Tbl =append (_cad .Tbl ,_fdf );return Table {_daf ._ddc ,_fdf };};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_gbee *Document )Copy ()(*Document ,error ){_eabe :=_ag .NewBuffer ([]byte {});_fgba :=_gbee .save (_eabe ,_gbee ._abed );if _fgba !=nil {return nil ,_fgba ;};_cefb :=_eabe .Bytes ();_gfcee :=_ag .NewReader (_cefb );return _cbeg (_gfcee ,int64 (_gfcee .Len ()),_gbee ._abed );
};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to display on a separate page.
func (_acgf ParagraphProperties )SetWindowControl (b bool ){if !b {_acgf ._fcdce .WidowControl =nil ;}else {_acgf ._fcdce .WidowControl =_bf .NewCT_OnOff ();};};

// SetImprint sets the run to imprinted text.
func (_dgeda RunProperties )SetImprint (b bool ){if !b {_dgeda ._gaffa .Imprint =nil ;}else {_dgeda ._gaffa .Imprint =_bf .NewCT_OnOff ();};};

// Style return the table style.
func (_aefeb Table )Style ()string {if _aefeb ._gbaed .TblPr !=nil &&_aefeb ._gbaed .TblPr .TblStyle !=nil {return _aefeb ._gbaed .TblPr .TblStyle .ValAttr ;};return "";};

// AddText adds text to a run.
func (_aeeaa Run )AddText (s string ){_cbbd :=_bf .NewEG_RunInnerContent ();_aeeaa ._ccceca .EG_RunInnerContent =append (_aeeaa ._ccceca .EG_RunInnerContent ,_cbbd );_cbbd .T =_bf .NewCT_Text ();if _d .NeedsSpacePreserve (s ){_ceae :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";
_cbbd .T .SpaceAttr =&_ceae ;};_cbbd .T .Content =s ;};func _aaadf (_ddeg []*_bf .CT_P ,_bffaf *TableInfo ,_fcdd *DrawingInfo )[]TextItem {_dece :=[]TextItem {};for _ ,_deeb :=range _ddeg {_dece =append (_dece ,_ecfdd (_deeb ,nil ,_bffaf ,_fcdd ,_deeb .EG_PContent )...);
};return _dece ;};

// SetWidth sets the table with to a specified width.
func (_eeaf TableProperties )SetWidth (d _abg .Distance ){_eeaf ._daef .TblW =_bf .NewCT_TblWidth ();_eeaf ._daef .TblW .TypeAttr =_bf .ST_TblWidthDxa ;_eeaf ._daef .TblW .WAttr =&_bf .ST_MeasurementOrPercent {};_eeaf ._daef .TblW .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};
_eeaf ._daef .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (d /_abg .Twips ));};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_cdccf *Document ;_fabbd *_bf .CT_FtnEdn ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_bceaa TableBorders )SetRight (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_bceaa ._fbdf .Right =_bf .NewCT_Border ();_gbfg (_bceaa ._fbdf .Right ,t ,c ,thickness );};

// FindNodeByText return node based on matched text and return a slice of node.
func (_gefag *Nodes )FindNodeByRegexp (r *_cg .Regexp )[]Node {_bdde :=[]Node {};for _ ,_gecd :=range _gefag ._gdbf {if r .MatchString (_gecd .Text ()){_bdde =append (_bdde ,_gecd );};_geccd :=Nodes {_gdbf :_gecd .Children };_bdde =append (_bdde ,_geccd .FindNodeByRegexp (r )...);
};return _bdde ;};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_edbgb RunProperties )SizeMeasure ()string {if _cdad :=_edbgb ._gaffa .Sz ;_cdad !=nil {_gafgf :=_cdad .ValAttr ;if _gafgf .ST_PositiveUniversalMeasure !=nil {return *_gafgf .ST_PositiveUniversalMeasure ;};};return "";};func (_bgb *WatermarkPicture )getInnerElement (_dgda string )*_d .XSDAny {for _ ,_eeaa :=range _bgb ._geed .Any {_bffcc ,_gega :=_eeaa .(*_d .XSDAny );
if _gega &&(_bffcc .XMLName .Local ==_dgda ||_bffcc .XMLName .Local =="\u0076\u003a"+_dgda ){return _bffcc ;};};return nil ;};

// SetText sets the text to be used in bullet mode.
func (_fddc NumberingLevel )SetText (t string ){if t ==""{_fddc ._dfaa .LvlText =nil ;}else {_fddc ._dfaa .LvlText =_bf .NewCT_LevelText ();_fddc ._dfaa .LvlText .ValAttr =_d .String (t );};};

// // SetBeforeLineSpacing sets spacing above paragraph in line units.
func (_bfaef Paragraph )SetBeforeLineSpacing (d _abg .Distance ){_bfaef .ensurePPr ();if _bfaef ._dbga .PPr .Spacing ==nil {_bfaef ._dbga .PPr .Spacing =_bf .NewCT_Spacing ();};_afbg :=_bfaef ._dbga .PPr .Spacing ;_afbg .BeforeLinesAttr =_d .Int64 (int64 (d /_abg .Twips ));
};

// X returns the inner wrapped XML type.
func (_dffcf Fonts )X ()*_bf .CT_Fonts {return _dffcf ._afga };

// X returns the inner wrapped XML type.
func (_gacg Paragraph )X ()*_bf .CT_P {return _gacg ._dbga };

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_egac RunProperties )BoldValue ()OnOffValue {return _eegfe (_egac ._gaffa .B )};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_ddcg RunProperties )ComplexSizeMeasure ()string {if _gfeag :=_ddcg ._gaffa .SzCs ;_gfeag !=nil {_gfdc :=_gfeag .ValAttr ;if _gfdc .ST_PositiveUniversalMeasure !=nil {return *_gfdc .ST_PositiveUniversalMeasure ;};};return "";};

// X returns the inner wrapped XML type.
func (_adaf Footer )X ()*_bf .Ftr {return _adaf ._cbgde };

// SetHeight allows controlling the height of a row within a table.
func (_dcfd RowProperties )SetHeight (ht _abg .Distance ,rule _bf .ST_HeightRule ){if rule ==_bf .ST_HeightRuleUnset {_dcfd ._fgcc .TrHeight =nil ;}else {_gada :=_bf .NewCT_Height ();_gada .HRuleAttr =rule ;_gada .ValAttr =&_de .ST_TwipsMeasure {};_gada .ValAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (ht /_abg .Twips ));
_dcfd ._fgcc .TrHeight =[]*_bf .CT_Height {_gada };};};

// Tables returns the tables defined in the document.
func (_fgfc *Document )Tables ()[]Table {_bgc :=[]Table {};if _fgfc ._aff .Body ==nil {return nil ;};for _ ,_gdc :=range _fgfc ._aff .Body .EG_BlockLevelElts {for _ ,_dfbb :=range _gdc .EG_ContentBlockContent {for _ ,_cgaf :=range _fgfc .tables (_dfbb ){_bgc =append (_bgc ,_cgaf );
};};};return _bgc ;};

// Font returns the name of paragraph font family.
func (_gedgf ParagraphProperties )Font ()string {if _cafad :=_gedgf ._fcdce .RPr .RFonts ;_cafad !=nil {if _cafad .AsciiAttr !=nil {return *_cafad .AsciiAttr ;}else if _cafad .HAnsiAttr !=nil {return *_cafad .HAnsiAttr ;}else if _cafad .CsAttr !=nil {return *_cafad .CsAttr ;
};};return "";};func (_efgb *Document )reorderFootnote (){_babf :=int64 (1);_acb :=map[int64 ]int64 {};for _ ,_cfbc :=range _efgb ._edc .Footnote {switch _cfbc .TypeAttr {case _bf .ST_FtnEdnSeparator :_cfbc .IdAttr =-1;break ;case _bf .ST_FtnEdnContinuationSeparator :_cfbc .IdAttr =0;
break ;default:_acb [_cfbc .IdAttr ]=_babf ;_cfbc .IdAttr =_babf ;_babf ++;};};for _ ,_cfed :=range _efgb .Paragraphs (){for _ ,_ace :=range _cfed .Runs (){if _aeff ,_fcdc :=_ace .IsFootnote ();_aeff {_ace .X ().EG_RunInnerContent [0].FootnoteReference .IdAttr =_acb [_fcdc ];
};};};};

// X returns the inner wrapped XML type.
func (_gca Cell )X ()*_bf .CT_Tc {return _gca ._cbe };

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_ddbf RunProperties )CharacterSpacingMeasure ()string {if _cfde :=_ddbf ._gaffa .Spacing ;_cfde !=nil {_faggbf :=_cfde .ValAttr ;if _faggbf .ST_UniversalMeasure !=nil {return *_faggbf .ST_UniversalMeasure ;};};return "";};

// AddParagraph adds a paragraph to the footnote.
func (_bdeeg Footnote )AddParagraph ()Paragraph {_ggdd :=_bf .NewEG_ContentBlockContent ();_aeddb :=len (_bdeeg ._gdcb .EG_BlockLevelElts [0].EG_ContentBlockContent );_bdeeg ._gdcb .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_bdeeg ._gdcb .EG_BlockLevelElts [0].EG_ContentBlockContent ,_ggdd );
_eedg :=_bf .NewCT_P ();var _beeg *_bf .CT_String ;if _aeddb !=0{_dcfgc :=len (_bdeeg ._gdcb .EG_BlockLevelElts [0].EG_ContentBlockContent [_aeddb -1].P );_beeg =_bdeeg ._gdcb .EG_BlockLevelElts [0].EG_ContentBlockContent [_aeddb -1].P [_dcfgc -1].PPr .PStyle ;
}else {_beeg =_bf .NewCT_String ();_beeg .ValAttr =FootnoteTextStyleId ;};_ggdd .P =append (_ggdd .P ,_eedg );_afbcb :=Paragraph {_bdeeg ._cbgb ,_eedg };_afbcb ._dbga .PPr =_bf .NewCT_PPr ();_afbcb ._dbga .PPr .PStyle =_beeg ;_afbcb ._dbga .PPr .RPr =_bf .NewCT_ParaRPr ();
return _afbcb ;};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_gaag *Document )AddHeader ()Header {_aad :=_bf .NewHdr ();_gaag ._cee =append (_gaag ._cee ,_aad );_bedf :=_cag .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_gaag ._cee ));_gaag ._bgf .AddRelationship (_bedf ,_d .HeaderType );
_gaag .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_bedf ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_gaag ._fgea =append (_gaag ._fgea ,_aa .NewRelationships ());return Header {_gaag ,_aad };};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_bdbg Paragraph )AddEndnote (text string )Endnote {var _ebdcb int64 ;if _bdbg ._gffg .HasEndnotes (){for _ ,_facfa :=range _bdbg ._gffg .Endnotes (){if _facfa .id ()> _ebdcb {_ebdcb =_facfa .id ();};};_ebdcb ++;}else {_bdbg ._gffg .addEndnotes ();
_ebdcb =1;};_fbcfc :=_bf .NewCT_FtnEdn ();_acdc :=_bf .NewCT_FtnEdnRef ();_acdc .IdAttr =_ebdcb ;_bdbg ._gffg ._cbfc .CT_Endnotes .Endnote =append (_bdbg ._gffg ._cbfc .CT_Endnotes .Endnote ,_fbcfc );_gafa :=_bdbg .AddRun ();_fedea :=_gafa .Properties ();
_fedea .SetStyle (_cbb );_gafa ._ccceca .EG_RunInnerContent =[]*_bf .EG_RunInnerContent {_bf .NewEG_RunInnerContent ()};_gafa ._ccceca .EG_RunInnerContent [0].EndnoteReference =_acdc ;_cfcd :=Endnote {_bdbg ._gffg ,_fbcfc };_cfcd ._fabbd .IdAttr =_ebdcb ;
_cfcd ._fabbd .EG_BlockLevelElts =[]*_bf .EG_BlockLevelElts {_bf .NewEG_BlockLevelElts ()};_bccb :=_cfcd .AddParagraph ();_bccb .Properties ().SetStyle (EndnoteTextStyleId );_bccb ._dbga .PPr .RPr =_bf .NewCT_ParaRPr ();_abgd :=_bccb .AddRun ();_abedda :=_abgd .Properties ();
_abedda .SetStyle (_cbb );_abgd .AddEndnoteReference ();_cebf :=_bccb .AddRun ();_cebf .AddText ("\u0020");_cebf =_bccb .AddRun ();_cebf .AddText (text );return _cfcd ;};

// IsItalic returns true if the run has been set to italics.
func (_dcbd RunProperties )IsItalic ()bool {return _dcbd .ItalicValue ()==OnOffValueOn };func (_abfff *Document )insertStyleFromNode (_gbga Node ){if _gbga .Style .X ()!=nil {if _ ,_ggag :=_abfff .Styles .SearchStyleById (_gbga .Style .StyleID ());!_ggag {_abfff .Styles .InsertStyle (_gbga .Style );
_gabd :=_gbga .Style .ParagraphProperties ();_abfff .insertNumberingFromStyleProperties (_gbga ._gdcag .Numbering ,_gabd );};};};func _gad (_aege *_bf .CT_P ,_dfde *_bf .CT_Hyperlink ,_ecbf *TableInfo ,_gbgeb *DrawingInfo ,_egff []*_bf .EG_ContentRunContent )[]TextItem {_eccd :=[]TextItem {};
for _ ,_cafae :=range _egff {if _gbcb :=_cafae .Sdt ;_gbcb !=nil {if _cbaf :=_gbcb .SdtContent ;_cbaf !=nil {_eccd =append (_eccd ,_gad (_aege ,_dfde ,_ecbf ,_gbgeb ,_cbaf .EG_ContentRunContent )...);};};if _agfb :=_cafae .R ;_agfb !=nil {_dede :=_ag .NewBuffer ([]byte {});
for _ ,_aecc :=range _agfb .EG_RunInnerContent {if _aecc .Br !=nil {_dede .WriteString ("\u000a");};if _aecc .Tab !=nil {_dede .WriteString ("\u0009");};if _aecc .T !=nil {_dede .WriteString (_aecc .T .Content );};if _aecc .Pict !=nil &&len (_aecc .Pict .Any )> 0{for _ ,_cafd :=range _aecc .Pict .Any {if _beea ,_aega :=_cafd .(*_ga .Shape );
_aega {for _ ,_cefc :=range _beea .EG_ShapeElements {if _cdac :=_cefc .Textbox ;_cdac !=nil {if _cdac .TxbxContent !=nil {_eccd =append (_eccd ,_cccbgd (_cdac .TxbxContent .EG_ContentBlockContent ,nil )...);};};};};};};};_eccd =append (_eccd ,TextItem {Text :_dede .String (),DrawingInfo :_gbgeb ,Paragraph :_aege ,Hyperlink :_dfde ,Run :_agfb ,TableInfo :_ecbf });
for _ ,_aaed :=range _agfb .Extra {if _bcgb ,_eegf :=_aaed .(*_bf .AlternateContentRun );_eegf {_bbbba :=&DrawingInfo {Drawing :_bcgb .Choice .Drawing };for _ ,_fbgc :=range _bbbba .Drawing .Anchor {for _ ,_eace :=range _fbgc .Graphic .GraphicData .Any {if _bdfa ,_gcdc :=_eace .(*_bf .WdWsp );
_gcdc {if _bdfa .WChoice !=nil {if _eabgc :=_bdfa .SpPr ;_eabgc !=nil {if _agaeb :=_eabgc .Xfrm ;_agaeb !=nil {if _ecaaf :=_agaeb .Ext ;_ecaaf !=nil {_bbbba .Width =_ecaaf .CxAttr ;_bbbba .Height =_ecaaf .CyAttr ;};};};for _ ,_dafde :=range _bdfa .WChoice .Txbx .TxbxContent .EG_ContentBlockContent {_eccd =append (_eccd ,_aaadf (_dafde .P ,_ecbf ,_bbbba )...);
};};};};};};};};};return _eccd ;};

// SetTextWrapBehindText sets the text wrap to behind text.
func (_cgg AnchoredDrawing )SetTextWrapBehindText (){_cgg ._fc .Choice =&_bf .WdEG_WrapTypeChoice {};_cgg ._fc .Choice .WrapNone =_bf .NewWdCT_WrapNone ();_cgg ._fc .BehindDocAttr =true ;_cgg ._fc .LayoutInCellAttr =true ;_cgg ._fc .AllowOverlapAttr =true ;
};func (_gcgc *Document )save (_bfc _ce .Writer ,_fdgg string )error {const _eafd ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";if _gfd :=_gcgc ._aff .Validate ();_gfd !=nil {_e .Log .Warning ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_gfd );
};_geb :=_d .DocTypeDocument ;if !_ac .GetLicenseKey ().IsLicensed ()&&!_ecg {_cag .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");
_cag .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return _ca .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_gcgc ._abed )==0{if len (_fdgg )> 0{_gcgc ._abed =_fdgg ;}else {_gbe ,_bag :=_ac .GenRefId ("\u0064\u0077");
if _bag !=nil {_e .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_bag );return _bag ;};_gcgc ._abed =_gbe ;};};if _gcggd :=_ac .Track (_gcgc ._abed ,_eafd );_gcggd !=nil {_e .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gcggd );
return _gcggd ;};_cadb :=_bc .NewWriter (_bfc );defer _cadb .Close ();if _aggg :=_fg .MarshalXML (_cadb ,_d .BaseRelsFilename ,_gcgc .Rels .X ());_aggg !=nil {return _aggg ;};if _bda :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .ExtendedPropertiesType ,_gcgc .AppProperties .X ());
_bda !=nil {return _bda ;};if _fea :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .CorePropertiesType ,_gcgc .CoreProperties .X ());_fea !=nil {return _fea ;};if _gcgc .CustomProperties .X ()!=nil {if _bff :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .CustomPropertiesType ,_gcgc .CustomProperties .X ());
_bff !=nil {return _bff ;};};if _gcgc .Thumbnail !=nil {_adf ,_dff :=_cadb .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _dff !=nil {return _dff ;};if _febf :=_cc .Encode (_adf ,_gcgc .Thumbnail ,nil );
_febf !=nil {return _febf ;};};if _bgd :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .SettingsType ,_gcgc .Settings .X ());_bgd !=nil {return _bgd ;};_dgc :=_d .AbsoluteFilename (_geb ,_d .OfficeDocumentType ,0);if _bbf :=_fg .MarshalXML (_cadb ,_dgc ,_gcgc ._aff );
_bbf !=nil {return _bbf ;};if _fga :=_fg .MarshalXML (_cadb ,_fg .RelationsPathFor (_dgc ),_gcgc ._bgf .X ());_fga !=nil {return _fga ;};if _gcgc .Numbering .X ()!=nil {if _cdb :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .NumberingType ,_gcgc .Numbering .X ());
_cdb !=nil {return _cdb ;};};if _dafd :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .StylesType ,_gcgc .Styles .X ());_dafd !=nil {return _dafd ;};if _gcgc ._ccde !=nil {if _cbge :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .WebSettingsType ,_gcgc ._ccde );_cbge !=nil {return _cbge ;
};};if _gcgc ._gdb !=nil {if _bfeg :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .FontTableType ,_gcgc ._gdb );_bfeg !=nil {return _bfeg ;};};if _gcgc ._cbfc !=nil {if _gbd :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .EndNotesType ,_gcgc ._cbfc );_gbd !=nil {return _gbd ;
};};if _gcgc ._edc !=nil {if _ccdbd :=_fg .MarshalXMLByType (_cadb ,_geb ,_d .FootNotesType ,_gcgc ._edc );_ccdbd !=nil {return _ccdbd ;};};for _bgfa ,_gcaf :=range _gcgc ._aef {if _egd :=_fg .MarshalXMLByTypeIndex (_cadb ,_geb ,_d .ThemeType ,_bgfa +1,_gcaf );
_egd !=nil {return _egd ;};};for _dfg ,_gfc :=range _gcgc ._gcge {_bdg ,_aed :=_gfc .ExportToByteArray ();if _aed !=nil {return _aed ;};_gfe :="\u0077\u006f\u0072d\u002f"+_gfc .TargetAttr [:len (_gfc .TargetAttr )-4]+"\u002e\u0062\u0069\u006e";if _bbcg :=_fg .AddFileFromBytes (_cadb ,_gfe ,_bdg );
_bbcg !=nil {return _bbcg ;};if _ddg :=_fg .MarshalXMLByTypeIndex (_cadb ,_geb ,_d .ControlType ,_dfg +1,_gfc .Ocx );_ddg !=nil {return _ddg ;};};for _begf ,_ccb :=range _gcgc ._cee {_gfb :=_d .AbsoluteFilename (_geb ,_d .HeaderType ,_begf +1);if _gaea :=_fg .MarshalXML (_cadb ,_gfb ,_ccb );
_gaea !=nil {return _gaea ;};if !_gcgc ._fgea [_begf ].IsEmpty (){_fg .MarshalXML (_cadb ,_fg .RelationsPathFor (_gfb ),_gcgc ._fgea [_begf ].X ());};};for _caa ,_fff :=range _gcgc ._ggf {_ddgd :=_d .AbsoluteFilename (_geb ,_d .FooterType ,_caa +1);if _ggc :=_fg .MarshalXMLByTypeIndex (_cadb ,_geb ,_d .FooterType ,_caa +1,_fff );
_ggc !=nil {return _ggc ;};if !_gcgc ._fb [_caa ].IsEmpty (){_fg .MarshalXML (_cadb ,_fg .RelationsPathFor (_ddgd ),_gcgc ._fb [_caa ].X ());};};for _dcgd ,_ccdg :=range _gcgc .Images {if _gcf :=_aa .AddImageToZip (_cadb ,_ccdg ,_dcgd +1,_d .DocTypeDocument );
_gcf !=nil {return _gcf ;};};for _acda ,_gaf :=range _gcgc ._cdf {_bfea :=_d .AbsoluteFilename (_geb ,_d .ChartType ,_acda +1);_fg .MarshalXML (_cadb ,_bfea ,_gaf ._gb );};if _agac :=_fg .MarshalXML (_cadb ,_d .ContentTypesFilename ,_gcgc .ContentTypes .X ());
_agac !=nil {return _agac ;};if _bca :=_gcgc .WriteExtraFiles (_cadb );_bca !=nil {return _bca ;};return _cadb .Close ();};

// RemoveParagraph removes a paragraph from the footnote.
func (_beed Footnote )RemoveParagraph (p Paragraph ){for _ ,_gfbd :=range _beed .content (){for _eaad ,_dbfa :=range _gfbd .P {if _dbfa ==p ._dbga {copy (_gfbd .P [_eaad :],_gfbd .P [_eaad +1:]);_gfbd .P =_gfbd .P [0:len (_gfbd .P )-1];return ;};};};};


// SetStyle sets the table style name.
func (_ebea TableProperties )SetStyle (name string ){if name ==""{_ebea ._daef .TblStyle =nil ;}else {_ebea ._daef .TblStyle =_bf .NewCT_String ();_ebea ._daef .TblStyle .ValAttr =name ;};};

// RemoveParagraph removes a paragraph from the endnote.
func (_gbcf Endnote )RemoveParagraph (p Paragraph ){for _ ,_cgeg :=range _gbcf .content (){for _agabd ,_gefa :=range _cgeg .P {if _gefa ==p ._dbga {copy (_cgeg .P [_agabd :],_cgeg .P [_agabd +1:]);_cgeg .P =_cgeg .P [0:len (_cgeg .P )-1];return ;};};};
};

// SetTblHeader set row properties for repeat table row on every new page value.
func (_cbea RowProperties )SetTblHeader (val bool ){if !val {_cbea ._fgcc .TblHeader =nil ;}else {_ffgda :=_bf .NewCT_OnOff ();_cbea ._fgcc .TblHeader =[]*_bf .CT_OnOff {_ffgda };};};

// Cells returns the cells defined in the table.
func (_cdbb Row )Cells ()[]Cell {_gcagf :=[]Cell {};for _ ,_eccg :=range _cdbb ._eedfc .EG_ContentCellContent {for _ ,_cgfe :=range _eccg .Tc {_gcagf =append (_gcagf ,Cell {_cdbb ._bfeac ,_cgfe });};if _eccg .Sdt !=nil &&_eccg .Sdt .SdtContent !=nil {for _ ,_bdace :=range _eccg .Sdt .SdtContent .Tc {_gcagf =append (_gcagf ,Cell {_cdbb ._bfeac ,_bdace });
};};};return _gcagf ;};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_agaeba Paragraph )SetFirstLineIndent (m _abg .Distance ){_agaeba .ensurePPr ();_bace :=_agaeba ._dbga .PPr ;if _bace .Ind ==nil {_bace .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_bace .Ind .FirstLineAttr =nil ;}else {_bace .Ind .FirstLineAttr =&_de .ST_TwipsMeasure {};
_bace .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (m /_abg .Twips ));};};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_abedg *Document ;_ccceca *_bf .CT_R ;};func _cfeaf ()*_ga .Path {_fbgcb :=_ga .NewPath ();_fbgcb .TextpathokAttr =_de .ST_TrueFalseTrue ;_fbgcb .ConnecttypeAttr =_ga .OfcST_ConnectTypeCustom ;_gafdg :="\u0040\u0039\u002c0;\u0040\u0031\u0030\u002c\u0031\u0030\u0038\u0030\u0030;\u00401\u0031,\u00321\u0036\u0030\u0030\u003b\u0040\u0031\u0032\u002c\u0031\u0030\u0038\u0030\u0030";
_fbgcb .ConnectlocsAttr =&_gafdg ;_fggfe :="\u0032\u0037\u0030,\u0031\u0038\u0030\u002c\u0039\u0030\u002c\u0030";_fbgcb .ConnectanglesAttr =&_fggfe ;return _fbgcb ;};

// X returns the inner wrapped XML type.
func (_bcfgd RunProperties )X ()*_bf .CT_RPr {return _bcfgd ._gaffa };func _ggdee (_dfecf Paragraph )*_bf .CT_NumPr {_dfecf .ensurePPr ();if _dfecf ._dbga .PPr .NumPr ==nil {return nil ;};return _dfecf ._dbga .PPr .NumPr ;};

// X returns the inner wrapped XML type.
func (_gedc HyperLink )X ()*_bf .CT_Hyperlink {return _gedc ._agbdc };

// SetHANSITheme sets the font H ANSI Theme.
func (_cdda Fonts )SetHANSITheme (t _bf .ST_Theme ){_cdda ._afga .HAnsiThemeAttr =t };func _dabe ()*_ga .Textpath {_gdce :=_ga .NewTextpath ();_adcfg :="\u0066\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069l\u0079\u003a\u0022\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0022\u003b\u0066\u006f\u006e\u0074\u002d\u0073\u0069\u007a\u0065\u003a\u00366\u0070\u0074;\u0066\u006fn\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003a\u0062\u006f\u006c\u0064;f\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065:\u0069\u0074\u0061\u006c\u0069\u0063";
_gdce .StyleAttr =&_adcfg ;_cabb :="\u0041\u0053\u0041\u0050";_gdce .StringAttr =&_cabb ;return _gdce ;};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_cba Bookmark )Name ()string {return _cba ._bcc .NameAttr };func _cac ()(*_fa .CT_Point2D ,[]*_fa .CT_Point2D ){var (_agg int64 =0;_ea int64 =21600;);_eg :=_fa .ST_Coordinate {ST_CoordinateUnqualified :&_agg ,ST_UniversalMeasure :nil };_aga :=_fa .ST_Coordinate {ST_CoordinateUnqualified :&_ea ,ST_UniversalMeasure :nil };
_acg :=_fa .NewCT_Point2D ();_acg .XAttr =_eg ;_acg .YAttr =_eg ;_abe :=[]*_fa .CT_Point2D {&_fa .CT_Point2D {XAttr :_eg ,YAttr :_aga },&_fa .CT_Point2D {XAttr :_aga ,YAttr :_aga },&_fa .CT_Point2D {XAttr :_aga ,YAttr :_eg },_acg };return _acg ,_abe ;};


// Margins allows controlling individual cell margins.
func (_eacb CellProperties )Margins ()CellMargins {if _eacb ._fdc .TcMar ==nil {_eacb ._fdc .TcMar =_bf .NewCT_TcMar ();};return CellMargins {_eacb ._fdc .TcMar };};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_bdfb TableLook )SetFirstColumn (on bool ){if !on {_bdfb ._ceddb .FirstColumnAttr =&_de .ST_OnOff {};_bdfb ._ceddb .FirstColumnAttr .ST_OnOff1 =_de .ST_OnOff1Off ;}else {_bdfb ._ceddb .FirstColumnAttr =&_de .ST_OnOff {};_bdfb ._ceddb .FirstColumnAttr .ST_OnOff1 =_de .ST_OnOff1On ;
};};

// PutNodeBefore put node to position before relativeTo.
func (_cdca *Document )PutNodeBefore (relativeTo ,node Node ){_cdca .putNode (relativeTo ,node ,true )};

// InsertRowAfter inserts a row after another row
func (_gbbe Table )InsertRowAfter (r Row )Row {for _dcbdb ,_gbfdd :=range _gbbe ._gbaed .EG_ContentRowContent {if len (_gbfdd .Tr )> 0&&r .X ()==_gbfdd .Tr [0]{_bgda :=_bf .NewEG_ContentRowContent ();if len (_gbbe ._gbaed .EG_ContentRowContent )< _dcbdb +2{return _gbbe .AddRow ();
};_gbbe ._gbaed .EG_ContentRowContent =append (_gbbe ._gbaed .EG_ContentRowContent ,nil );copy (_gbbe ._gbaed .EG_ContentRowContent [_dcbdb +2:],_gbbe ._gbaed .EG_ContentRowContent [_dcbdb +1:]);_gbbe ._gbaed .EG_ContentRowContent [_dcbdb +1]=_bgda ;_egab :=_bf .NewCT_Row ();
_bgda .Tr =append (_bgda .Tr ,_egab );return Row {_gbbe ._daafa ,_egab };};};return _gbbe .AddRow ();};

// SetTarget sets the URL target of the hyperlink.
func (_ggega HyperLink )SetTarget (url string ){_gaab :=_ggega ._fadfa .AddHyperlink (url );_ggega ._agbdc .IdAttr =_d .String (_aa .Relationship (_gaab ).ID ());_ggega ._agbdc .AnchorAttr =nil ;};

// Save writes the document to an io.Writer in the Zip package format.
func (_fcef *Document )Save (w _ce .Writer )error {return _fcef .save (w ,_fcef ._abed )};func (_bfega *Document )removeEndnote (_gcdaa int64 ){_bcb :=_bfega ._cbfc ;var _bfgb int ;for _affa ,_feage :=range _bcb .CT_Endnotes .Endnote {if _feage .IdAttr ==_gcdaa {_bfgb =_affa ;
break ;};};_bcb .CT_Endnotes .Endnote [_bfgb ]=nil ;_bcb .CT_Endnotes .Endnote [_bfgb ]=_bcb .CT_Endnotes .Endnote [len (_bcb .CT_Endnotes .Endnote )-1];_bcb .CT_Endnotes .Endnote =_bcb .CT_Endnotes .Endnote [:len (_bcb .CT_Endnotes .Endnote )-1];_bfega .reorderEndnote ();
_bfega .syncEndnoteSettings ();};func (_gdcge Styles )initializeStyleDefaults (){_gfdaa :=_gdcge .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_bf .ST_StyleTypeParagraph ,true );_gfdaa .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_gfdaa .SetPrimaryStyle (true );
_dedae :=_gdcge .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_bf .ST_StyleTypeCharacter ,true );_dedae .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");
_dedae .SetUISortOrder (1);_dedae .SetSemiHidden (true );_dedae .SetUnhideWhenUsed (true );_gfbcc :=_gdcge .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_bf .ST_StyleTypeCharacter ,false );_gfbcc .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");
_gfbcc .SetBasedOn (_dedae .StyleID ());_gfbcc .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_gfbcc .SetUISortOrder (10);_gfbcc .RunProperties ().Fonts ().SetASCIITheme (_bf .ST_ThemeMajorAscii );_gfbcc .RunProperties ().Fonts ().SetEastAsiaTheme (_bf .ST_ThemeMajorEastAsia );
_gfbcc .RunProperties ().Fonts ().SetHANSITheme (_bf .ST_ThemeMajorHAnsi );_gfbcc .RunProperties ().Fonts ().SetCSTheme (_bf .ST_ThemeMajorBidi );_gfbcc .RunProperties ().SetSize (28*_abg .Point );_gfbcc .RunProperties ().SetKerning (14*_abg .Point );_gfbcc .RunProperties ().SetCharacterSpacing (-10*_abg .Twips );
_gdfc :=_gdcge .AddStyle ("\u0054\u0069\u0074l\u0065",_bf .ST_StyleTypeParagraph ,false );_gdfc .SetName ("\u0054\u0069\u0074l\u0065");_gdfc .SetBasedOn (_gfdaa .StyleID ());_gdfc .SetNextStyle (_gfdaa .StyleID ());_gdfc .SetLinkedStyle (_gfbcc .StyleID ());
_gdfc .SetUISortOrder (10);_gdfc .SetPrimaryStyle (true );_gdfc .ParagraphProperties ().SetContextualSpacing (true );_gdfc .RunProperties ().Fonts ().SetASCIITheme (_bf .ST_ThemeMajorAscii );_gdfc .RunProperties ().Fonts ().SetEastAsiaTheme (_bf .ST_ThemeMajorEastAsia );
_gdfc .RunProperties ().Fonts ().SetHANSITheme (_bf .ST_ThemeMajorHAnsi );_gdfc .RunProperties ().Fonts ().SetCSTheme (_bf .ST_ThemeMajorBidi );_gdfc .RunProperties ().SetSize (28*_abg .Point );_gdfc .RunProperties ().SetKerning (14*_abg .Point );_gdfc .RunProperties ().SetCharacterSpacing (-10*_abg .Twips );
_gggda :=_gdcge .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_bf .ST_StyleTypeTable ,false );_gggda .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_gggda .SetUISortOrder (99);_gggda .SetSemiHidden (true );
_gggda .SetUnhideWhenUsed (true );_gggda .X ().TblPr =_bf .NewCT_TblPrBase ();_ccgf :=NewTableWidth ();_gggda .X ().TblPr .TblInd =_ccgf .X ();_ccgf .SetValue (0*_abg .Dxa );_gggda .X ().TblPr .TblCellMar =_bf .NewCT_TblCellMar ();_ccgf =NewTableWidth ();
_gggda .X ().TblPr .TblCellMar .Top =_ccgf .X ();_ccgf .SetValue (0*_abg .Dxa );_ccgf =NewTableWidth ();_gggda .X ().TblPr .TblCellMar .Bottom =_ccgf .X ();_ccgf .SetValue (0*_abg .Dxa );_ccgf =NewTableWidth ();_gggda .X ().TblPr .TblCellMar .Left =_ccgf .X ();
_ccgf .SetValue (108*_abg .Dxa );_ccgf =NewTableWidth ();_gggda .X ().TblPr .TblCellMar .Right =_ccgf .X ();_ccgf .SetValue (108*_abg .Dxa );_aecb :=_gdcge .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_bf .ST_StyleTypeNumbering ,false );_aecb .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");
_aecb .SetUISortOrder (1);_aecb .SetSemiHidden (true );_aecb .SetUnhideWhenUsed (true );_aabf :=[]_abg .Distance {16,13,12,11,11,11,11,11,11};_cfffb :=[]_abg .Distance {240,40,40,40,40,40,40,40,40};for _fffc :=0;_fffc < 9;_fffc ++{_bafg :=_cag .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_fffc +1);
_gfddc :=_gdcge .AddStyle (_bafg +"\u0043\u0068\u0061\u0072",_bf .ST_StyleTypeCharacter ,false );_gfddc .SetName (_cag .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_fffc +1));_gfddc .SetBasedOn (_dedae .StyleID ());
_gfddc .SetLinkedStyle (_bafg );_gfddc .SetUISortOrder (9+_fffc );_gfddc .RunProperties ().SetSize (_aabf [_fffc ]*_abg .Point );_bfcc :=_gdcge .AddStyle (_bafg ,_bf .ST_StyleTypeParagraph ,false );_bfcc .SetName (_cag .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_fffc +1));
_bfcc .SetNextStyle (_gfdaa .StyleID ());_bfcc .SetLinkedStyle (_bfcc .StyleID ());_bfcc .SetUISortOrder (9+_fffc );_bfcc .SetPrimaryStyle (true );_bfcc .ParagraphProperties ().SetKeepNext (true );_bfcc .ParagraphProperties ().SetSpacing (_cfffb [_fffc ]*_abg .Twips ,0);
_bfcc .ParagraphProperties ().SetOutlineLevel (_fffc );_bfcc .RunProperties ().SetSize (_aabf [_fffc ]*_abg .Point );};};

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_bgdbd Run )IsEndnote ()(bool ,int64 ){if _bgdbd ._ccceca .EG_RunInnerContent !=nil {if _bgdbd ._ccceca .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_bgdbd ._ccceca .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;
};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_gefb Paragraph )AddHyperLink ()HyperLink {_ddgb :=_bf .NewEG_PContent ();_gefb ._dbga .EG_PContent =append (_gefb ._dbga .EG_PContent ,_ddgb );_ddgb .Hyperlink =_bf .NewCT_Hyperlink ();return HyperLink {_gefb ._gffg ,_ddgb .Hyperlink };};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_beace Run )ClearContent (){_beace ._ccceca .EG_RunInnerContent =nil };

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_cagb TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _cagb ._dbca .PPr ==nil {_cagb ._dbca .PPr =_bf .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_cagb ._dbca .PPr };};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_dbe CellBorders )SetInsideVertical (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_dbe ._eeea .InsideV =_bf .NewCT_Border ();_gbfg (_dbe ._eeea .InsideV ,t ,c ,thickness );};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_fded *Document )Paragraphs ()[]Paragraph {_deaae :=[]Paragraph {};if _fded ._aff .Body ==nil {return nil ;};for _ ,_cgab :=range _fded ._aff .Body .EG_BlockLevelElts {for _ ,_beb :=range _cgab .EG_ContentBlockContent {for _ ,_dfgc :=range _beb .P {_deaae =append (_deaae ,Paragraph {_fded ,_dfgc });
};};};for _ ,_cge :=range _fded .Tables (){for _ ,_bebe :=range _cge .Rows (){for _ ,_ggg :=range _bebe .Cells (){_deaae =append (_deaae ,_ggg .Paragraphs ()...);};};};return _deaae ;};

// SetProperties sets the `RunProperties` to the `Run` element
func (_cbdf Run )SetProperties (rp RunProperties ){if rp ._gaffa ==nil {_cbdf ._ccceca .RPr =_bf .NewCT_RPr ();}else {_edbed :=&_bf .CT_RPr {};if rp ._gaffa .RStyle !=nil {_edbed .RStyle =&_bf .CT_String {ValAttr :rp ._gaffa .RStyle .ValAttr };};if rp ._gaffa .RFonts !=nil {_edbed .RFonts =&_bf .CT_Fonts {HintAttr :rp ._gaffa .RFonts .HintAttr ,AsciiAttr :rp ._gaffa .RFonts .AsciiAttr ,HAnsiAttr :rp ._gaffa .RFonts .HAnsiAttr ,EastAsiaAttr :rp ._gaffa .RFonts .EastAsiaAttr ,CsAttr :rp ._gaffa .RFonts .CsAttr ,AsciiThemeAttr :rp ._gaffa .RFonts .AsciiThemeAttr ,HAnsiThemeAttr :rp ._gaffa .RFonts .HAnsiThemeAttr ,EastAsiaThemeAttr :rp ._gaffa .RFonts .EastAsiaThemeAttr ,CsthemeAttr :rp ._gaffa .RFonts .CsthemeAttr };
};if rp ._gaffa .B !=nil {_edbed .B =&_bf .CT_OnOff {};if rp ._gaffa .B .ValAttr !=nil {_bade :=*rp ._gaffa .B .ValAttr ;_edbed .B .ValAttr =&_bade ;};};if rp ._gaffa .BCs !=nil {_edbed .BCs =&_bf .CT_OnOff {};if rp ._gaffa .BCs .ValAttr !=nil {_ffdc :=*rp ._gaffa .BCs .ValAttr ;
_edbed .BCs .ValAttr =&_ffdc ;};};if rp ._gaffa .I !=nil {_edbed .I =&_bf .CT_OnOff {};if rp ._gaffa .I .ValAttr !=nil {_dcdbe :=*rp ._gaffa .I .ValAttr ;_edbed .I .ValAttr =&_dcdbe ;};};if rp ._gaffa .ICs !=nil {_edbed .ICs =&_bf .CT_OnOff {};if rp ._gaffa .ICs .ValAttr !=nil {_edeb :=*rp ._gaffa .ICs .ValAttr ;
_edbed .ICs .ValAttr =&_edeb ;};};if rp ._gaffa .Caps !=nil {_edbed .Caps =&_bf .CT_OnOff {};if rp ._gaffa .Caps .ValAttr !=nil {_afdd :=*rp ._gaffa .Caps .ValAttr ;_edbed .Caps .ValAttr =&_afdd ;};};if rp ._gaffa .SmallCaps !=nil {_edbed .SmallCaps =&_bf .CT_OnOff {};
if rp ._gaffa .SmallCaps .ValAttr !=nil {_fdee :=*rp ._gaffa .SmallCaps .ValAttr ;_edbed .SmallCaps .ValAttr =&_fdee ;};};if rp ._gaffa .Strike !=nil {_edbed .Strike =&_bf .CT_OnOff {};if rp ._gaffa .Strike .ValAttr !=nil {_dfcg :=*rp ._gaffa .Strike .ValAttr ;
_edbed .Strike .ValAttr =&_dfcg ;};};if rp ._gaffa .Dstrike !=nil {_edbed .Dstrike =&_bf .CT_OnOff {};if rp ._gaffa .Dstrike .ValAttr !=nil {_dcgdg :=*rp ._gaffa .Dstrike .ValAttr ;_edbed .Dstrike .ValAttr =&_dcgdg ;};};if rp ._gaffa .Outline !=nil {_edbed .Outline =&_bf .CT_OnOff {};
if rp ._gaffa .Outline .ValAttr !=nil {_cged :=*rp ._gaffa .Outline .ValAttr ;_edbed .Outline .ValAttr =&_cged ;};};if rp ._gaffa .Shadow !=nil {_edbed .Shadow =&_bf .CT_OnOff {};if rp ._gaffa .Shadow .ValAttr !=nil {_cbgba :=*rp ._gaffa .Shadow .ValAttr ;
_edbed .Shadow .ValAttr =&_cbgba ;};};if rp ._gaffa .Emboss !=nil {_edbed .Emboss =&_bf .CT_OnOff {};if rp ._gaffa .Emboss .ValAttr !=nil {_fdacg :=*rp ._gaffa .Emboss .ValAttr ;_edbed .Emboss .ValAttr =&_fdacg ;};};if rp ._gaffa .Imprint !=nil {_edbed .Imprint =&_bf .CT_OnOff {};
if rp ._gaffa .Imprint .ValAttr !=nil {_deea :=*rp ._gaffa .Imprint .ValAttr ;_edbed .Imprint .ValAttr =&_deea ;};};if rp ._gaffa .NoProof !=nil {_edbed .NoProof =&_bf .CT_OnOff {};if rp ._gaffa .NoProof .ValAttr !=nil {_gffa :=*rp ._gaffa .NoProof .ValAttr ;
_edbed .NoProof .ValAttr =&_gffa ;};};if rp ._gaffa .SnapToGrid !=nil {_edbed .SnapToGrid =&_bf .CT_OnOff {};if rp ._gaffa .SnapToGrid .ValAttr !=nil {_bfcb :=*rp ._gaffa .SnapToGrid .ValAttr ;_edbed .SnapToGrid .ValAttr =&_bfcb ;};};if rp ._gaffa .Vanish !=nil {_edbed .Vanish =&_bf .CT_OnOff {};
if rp ._gaffa .Vanish .ValAttr !=nil {_aeddc :=*rp ._gaffa .Vanish .ValAttr ;_edbed .Vanish .ValAttr =&_aeddc ;};};if rp ._gaffa .WebHidden !=nil {_edbed .WebHidden =&_bf .CT_OnOff {};if rp ._gaffa .WebHidden .ValAttr !=nil {_gage :=*rp ._gaffa .WebHidden .ValAttr ;
_edbed .WebHidden .ValAttr =&_gage ;};};if rp ._gaffa .Color !=nil {_edbed .Color =&_bf .CT_Color {ValAttr :rp ._gaffa .Color .ValAttr ,ThemeColorAttr :rp ._gaffa .Color .ThemeColorAttr ,ThemeTintAttr :rp ._gaffa .Color .ThemeTintAttr ,ThemeShadeAttr :rp ._gaffa .Color .ThemeShadeAttr };
};if rp ._gaffa .Spacing !=nil {_edbed .Spacing =&_bf .CT_SignedTwipsMeasure {ValAttr :rp ._gaffa .Spacing .ValAttr };};if rp ._gaffa .W !=nil {_edbed .W =&_bf .CT_TextScale {ValAttr :rp ._gaffa .W .ValAttr };};if rp ._gaffa .Kern !=nil {_edbed .Kern =&_bf .CT_HpsMeasure {ValAttr :rp ._gaffa .Kern .ValAttr };
};if rp ._gaffa .Position !=nil {_edbed .Position =&_bf .CT_SignedHpsMeasure {ValAttr :rp ._gaffa .Position .ValAttr };};if rp ._gaffa .Sz !=nil {_edbed .Sz =&_bf .CT_HpsMeasure {ValAttr :rp ._gaffa .Sz .ValAttr };};if rp ._gaffa .SzCs !=nil {_edbed .SzCs =&_bf .CT_HpsMeasure {ValAttr :rp ._gaffa .SzCs .ValAttr };
};if rp ._gaffa .Highlight !=nil {_edbed .Highlight =&_bf .CT_Highlight {ValAttr :rp ._gaffa .Highlight .ValAttr };};if rp ._gaffa .U !=nil {_edbed .U =&_bf .CT_Underline {ValAttr :rp ._gaffa .U .ValAttr ,ColorAttr :rp ._gaffa .U .ColorAttr ,ThemeColorAttr :rp ._gaffa .U .ThemeColorAttr ,ThemeTintAttr :rp ._gaffa .U .ThemeTintAttr ,ThemeShadeAttr :rp ._gaffa .U .ThemeShadeAttr };
};if rp ._gaffa .Effect !=nil {_edbed .Effect =&_bf .CT_TextEffect {ValAttr :rp ._gaffa .Effect .ValAttr };};if rp ._gaffa .Bdr !=nil {_edbed .Bdr =&_bf .CT_Border {ValAttr :rp ._gaffa .Bdr .ValAttr ,ColorAttr :rp ._gaffa .Bdr .ColorAttr ,ThemeColorAttr :rp ._gaffa .Bdr .ThemeColorAttr ,ThemeTintAttr :rp ._gaffa .Bdr .ThemeTintAttr ,ThemeShadeAttr :rp ._gaffa .Bdr .ThemeShadeAttr ,SzAttr :rp ._gaffa .Bdr .SzAttr ,SpaceAttr :rp ._gaffa .Bdr .SpaceAttr ,ShadowAttr :rp ._gaffa .Bdr .ShadowAttr ,FrameAttr :rp ._gaffa .Bdr .FrameAttr };
};if rp ._gaffa .Shd !=nil {_edbed .Shd =&_bf .CT_Shd {ValAttr :rp ._gaffa .Shd .ValAttr ,ColorAttr :rp ._gaffa .Shd .ColorAttr ,ThemeColorAttr :rp ._gaffa .Shd .ThemeColorAttr ,ThemeTintAttr :rp ._gaffa .Shd .ThemeTintAttr ,ThemeShadeAttr :rp ._gaffa .Shd .ThemeShadeAttr ,FillAttr :rp ._gaffa .Shd .FillAttr ,ThemeFillAttr :rp ._gaffa .Shd .ThemeFillAttr ,ThemeFillTintAttr :rp ._gaffa .Shd .ThemeFillTintAttr ,ThemeFillShadeAttr :rp ._gaffa .Shd .ThemeFillShadeAttr };
};if rp ._gaffa .FitText !=nil {_edbed .FitText =&_bf .CT_FitText {ValAttr :rp ._gaffa .FitText .ValAttr ,IdAttr :rp ._gaffa .FitText .IdAttr };};if rp ._gaffa .VertAlign !=nil {_edbed .VertAlign =&_bf .CT_VerticalAlignRun {ValAttr :rp ._gaffa .VertAlign .ValAttr };
};if rp ._gaffa .Rtl !=nil {_edbed .Rtl =&_bf .CT_OnOff {ValAttr :rp ._gaffa .Rtl .ValAttr };};if rp ._gaffa .Cs !=nil {_edbed .Cs =&_bf .CT_OnOff {ValAttr :rp ._gaffa .Cs .ValAttr };};if rp ._gaffa .Em !=nil {_edbed .Em =&_bf .CT_Em {ValAttr :rp ._gaffa .Em .ValAttr };
};if rp ._gaffa .Lang !=nil {_edbed .Lang =&_bf .CT_Language {ValAttr :rp ._gaffa .Lang .ValAttr ,EastAsiaAttr :rp ._gaffa .Lang .EastAsiaAttr ,BidiAttr :rp ._gaffa .Lang .BidiAttr };};if rp ._gaffa .EastAsianLayout !=nil {_edbed .EastAsianLayout =&_bf .CT_EastAsianLayout {IdAttr :rp ._gaffa .EastAsianLayout .IdAttr ,CombineAttr :rp ._gaffa .EastAsianLayout .CombineAttr ,CombineBracketsAttr :rp ._gaffa .EastAsianLayout .CombineBracketsAttr ,VertAttr :rp ._gaffa .EastAsianLayout .VertAttr ,VertCompressAttr :rp ._gaffa .EastAsianLayout .VertCompressAttr };
};if rp ._gaffa .SpecVanish !=nil {_edbed .SpecVanish =&_bf .CT_OnOff {ValAttr :rp ._gaffa .SpecVanish .ValAttr };};if rp ._gaffa .OMath !=nil {_edbed .OMath =&_bf .CT_OnOff {ValAttr :rp ._gaffa .OMath .ValAttr };};_cbdf ._ccceca .RPr =_edbed ;};};

// TableProperties are the properties for a table within a document
type TableProperties struct{_daef *_bf .CT_TblPr };

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_cffgc TableLook )SetHorizontalBanding (on bool ){if !on {_cffgc ._ceddb .NoHBandAttr =&_de .ST_OnOff {};_cffgc ._ceddb .NoHBandAttr .ST_OnOff1 =_de .ST_OnOff1On ;}else {_cffgc ._ceddb .NoHBandAttr =&_de .ST_OnOff {};_cffgc ._ceddb .NoHBandAttr .ST_OnOff1 =_de .ST_OnOff1Off ;
};};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_fgc AnchoredDrawing )GetImage ()(_aa .ImageRef ,bool ){_fgd :=_fgc ._fc .Graphic .GraphicData .Any ;if len (_fgd )> 0{_ffg ,_dc :=_fgd [0].(*_cgd .Pic );if _dc {if _ffg .BlipFill !=nil &&_ffg .BlipFill .Blip !=nil &&_ffg .BlipFill .Blip .EmbedAttr !=nil {return _fgc ._gag .GetImageByRelID (*_ffg .BlipFill .Blip .EmbedAttr );
};};};return _aa .ImageRef {},false ;};

// Tables returns the tables defined in the footer.
func (_cdba Footer )Tables ()[]Table {_dedbb :=[]Table {};if _cdba ._cbgde ==nil {return nil ;};for _ ,_deddf :=range _cdba ._cbgde .EG_ContentBlockContent {for _ ,_dgdb :=range _cdba ._dgabc .tables (_deddf ){_dedbb =append (_dedbb ,_dgdb );};};return _dedbb ;
};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_dbedc NumberingDefinition )AbstractNumberID ()int64 {return _dbedc ._egcb .AbstractNumIdAttr };

// RunProperties returns the run style properties.
func (_ebeba Style )RunProperties ()RunProperties {if _ebeba ._ccecg .RPr ==nil {_ebeba ._ccecg .RPr =_bf .NewCT_RPr ();};return RunProperties {_ebeba ._ccecg .RPr };};

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_bf .CT_P ;Hyperlink *_bf .CT_Hyperlink ;Run *_bf .CT_R ;TableInfo *TableInfo ;};type chart struct{_gb *_gac .ChartSpace ;_cae string ;_fde string ;};

// Text returns the underlying text in the run.
func (_ccfa Run )Text ()string {if len (_ccfa ._ccceca .EG_RunInnerContent )==0{return "";};_faga :=_ag .Buffer {};for _ ,_fbde :=range _ccfa ._ccceca .EG_RunInnerContent {if _fbde .T !=nil {_faga .WriteString (_fbde .T .Content );};if _fbde .Tab !=nil {_faga .WriteByte ('\t');
};};return _faga .String ();};

// SetLeft sets the left border to a specified type, color and thickness.
func (_bddd CellBorders )SetLeft (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_bddd ._eeea .Left =_bf .NewCT_Border ();_gbfg (_bddd ._eeea .Left ,t ,c ,thickness );};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_edac TableBorders )SetInsideVertical (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_edac ._fbdf .InsideV =_bf .NewCT_Border ();_gbfg (_edac ._fbdf .InsideV ,t ,c ,thickness );};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_bced ParagraphProperties )SizeMeasure ()string {if _fcdcg :=_bced ._fcdce .RPr .Sz ;_fcdcg !=nil {_egeg :=_fcdcg .ValAttr ;if _egeg .ST_PositiveUniversalMeasure !=nil {return *_egeg .ST_PositiveUniversalMeasure ;};};return "";};

// X returns the inner wrapped XML type.
func (_cgbda ParagraphProperties )X ()*_bf .CT_PPr {return _cgbda ._fcdce };

// SearchStylesById returns style by its id.
func (_dgcb Styles )SearchStyleById (id string )(Style ,bool ){for _ ,_debda :=range _dgcb ._aebbf .Style {if _debda .StyleIdAttr !=nil {if *_debda .StyleIdAttr ==id {return Style {_debda },true ;};};};return Style {},false ;};

// SetBasedOn sets the style that this style is based on.
func (_bbgda Style )SetBasedOn (name string ){if name ==""{_bbgda ._ccecg .BasedOn =nil ;}else {_bbgda ._ccecg .BasedOn =_bf .NewCT_String ();_bbgda ._ccecg .BasedOn .ValAttr =name ;};};

// SetName sets the name of the style.
func (_ebf Style )SetName (name string ){_ebf ._ccecg .Name =_bf .NewCT_String ();_ebf ._ccecg .Name .ValAttr =name ;};

// FormFieldType is the type of the form field.
//
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// Levels returns all of the numbering levels defined in the definition.
func (_bedc NumberingDefinition )Levels ()[]NumberingLevel {_adfcb :=[]NumberingLevel {};for _ ,_aggd :=range _bedc ._egcb .Lvl {_adfcb =append (_adfcb ,NumberingLevel {_aggd });};return _adfcb ;};

// SetEffect sets a text effect on the run.
func (_gffgd RunProperties )SetEffect (e _bf .ST_TextEffect ){if e ==_bf .ST_TextEffectUnset {_gffgd ._gaffa .Effect =nil ;}else {_gffgd ._gaffa .Effect =_bf .NewCT_TextEffect ();_gffgd ._gaffa .Effect .ValAttr =e ;};};func (_eaeg *Document )getWatermarkHeaderInnerContentPictures ()[]*_bf .CT_Picture {var _fagc []*_bf .CT_Picture ;
for _ ,_begb :=range _eaeg .Headers (){for _ ,_fada :=range _begb .X ().EG_ContentBlockContent {for _ ,_bagd :=range _fada .P {for _ ,_bfge :=range _bagd .EG_PContent {for _ ,_bcfd :=range _bfge .EG_ContentRunContent {if _bcfd .R ==nil {continue ;};for _ ,_ffbe :=range _bcfd .R .EG_RunInnerContent {if _ffbe .Pict ==nil {continue ;
};_cebg :=false ;for _ ,_gdbdg :=range _ffbe .Pict .Any {_cccd ,_fbdgb :=_gdbdg .(*_d .XSDAny );if _fbdgb &&_cccd .XMLName .Local =="\u0073\u0068\u0061p\u0065"{_cebg =true ;};};if _cebg {_fagc =append (_fagc ,_ffbe .Pict );};};};};};};};return _fagc ;};


// X returns the inner wrapped XML type.
func (_fccff Styles )X ()*_bf .Styles {return _fccff ._aebbf };

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_gafd Paragraph )AddDropdownList (name string )FormField {_begfg :=_gafd .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_begfg ._beca .DdList =_bf .NewCT_FFDDList ();return _begfg ;};

// SetRight sets the cell right margin
func (_cbd CellMargins )SetRight (d _abg .Distance ){_cbd ._dcd .Right =_bf .NewCT_TblWidth ();_faca (_cbd ._dcd .Right ,d );};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the endnote ids would be reordered.
func (_aggf Paragraph )RemoveEndnote (id int64 ){for _ ,_cfbbc :=range _aggf .Runs (){if _ecge ,_fdcb :=_cfbbc .IsEndnote ();_ecge {if _fdcb ==id {_aggf .RemoveRun (_cfbbc );break ;};};};_aggf ._gffg .removeEndnote (id );};

// X returns the inner wrapped XML type.
func (_acfd Run )X ()*_bf .CT_R {return _acfd ._ccceca };func _gcga (_affb *_bf .CT_Tbl ,_ggbeb ,_eadd map[int64 ]int64 ){for _ ,_aacd :=range _affb .EG_ContentRowContent {for _ ,_fcaf :=range _aacd .Tr {for _ ,_eeeae :=range _fcaf .EG_ContentCellContent {for _ ,_bfdeb :=range _eeeae .Tc {for _ ,_gegc :=range _bfdeb .EG_BlockLevelElts {for _ ,_gbca :=range _gegc .EG_ContentBlockContent {for _ ,_aaad :=range _gbca .P {_ebdc (_aaad ,_ggbeb ,_eadd );
};for _ ,_fdfb :=range _gbca .Tbl {_gcga (_fdfb ,_ggbeb ,_eadd );};};};};};};};};

// DocRels returns document relationship.
func (_eced *Document )DocRels ()_aa .Relationships {return _eced ._bgf };

// X returns the inner wrapped XML type.
func (_dg AnchoredDrawing )X ()*_bf .WdAnchor {return _dg ._fc };

// SetTop sets the top border to a specified type, color and thickness.
func (_acd CellBorders )SetTop (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_acd ._eeea .Top =_bf .NewCT_Border ();_gbfg (_acd ._eeea .Top ,t ,c ,thickness );};

// ClearColor clears the text color.
func (_bddb RunProperties )ClearColor (){_bddb ._gaffa .Color =nil };func (_ccec Paragraph )ensurePPr (){if _ccec ._dbga .PPr ==nil {_ccec ._dbga .PPr =_bf .NewCT_PPr ();};};

// X returns the inner wrapped XML type.
func (_aca Color )X ()*_bf .CT_Color {return _aca ._baba };

// Properties returns the run properties.
func (_agcd Run )Properties ()RunProperties {if _agcd ._ccceca .RPr ==nil {_agcd ._ccceca .RPr =_bf .NewCT_RPr ();};return RunProperties {_agcd ._ccceca .RPr };};

// MergeFields returns the list of all mail merge fields found in the document.
func (_gdcga Document )MergeFields ()[]string {_cfdgb :=map[string ]struct{}{};for _ ,_efgee :=range _gdcga .mergeFields (){_cfdgb [_efgee ._egfd ]=struct{}{};};_dfdd :=[]string {};for _bcef :=range _cfdgb {_dfdd =append (_dfdd ,_bcef );};return _dfdd ;
};

// SetSize sets the size of the displayed image on the page.
func (_gf AnchoredDrawing )SetSize (w ,h _abg .Distance ){_gf ._fc .Extent .CxAttr =int64 (float64 (w *_abg .Pixel72 )/_abg .EMU );_gf ._fc .Extent .CyAttr =int64 (float64 (h *_abg .Pixel72 )/_abg .EMU );};

// SetShadow sets the run to shadowed text.
func (_cdeee RunProperties )SetShadow (b bool ){if !b {_cdeee ._gaffa .Shadow =nil ;}else {_cdeee ._gaffa .Shadow =_bf .NewCT_OnOff ();};};

// Clear clears the styes.
func (_bfbaf Styles )Clear (){_bfbaf ._aebbf .DocDefaults =nil ;_bfbaf ._aebbf .LatentStyles =nil ;_bfbaf ._aebbf .Style =nil ;};func _aebg (_gdgf *Document ,_bfff []*_bf .EG_ContentBlockContent ,_bggfb *TableInfo )[]Node {_ceee :=[]Node {};for _ ,_dfgea :=range _bfff {if _gedd :=_dfgea .Sdt ;
_gedd !=nil {if _eeff :=_gedd .SdtContent ;_eeff !=nil {_ceee =append (_ceee ,_deec (_gdgf ,_eeff .P ,_bggfb ,nil )...);};};_ceee =append (_ceee ,_deec (_gdgf ,_dfgea .P ,_bggfb ,nil )...);for _ ,_fedb :=range _dfgea .Tbl {_gfbg :=Table {_gdgf ,_fedb };
_eeef ,_ :=_gdgf .Styles .SearchStyleById (_gfbg .Style ());_deaag :=[]Node {};for _gcbc ,_aabef :=range _fedb .EG_ContentRowContent {for _ ,_febgb :=range _aabef .Tr {for _fgcec ,_eeagdd :=range _febgb .EG_ContentCellContent {for _ ,_adea :=range _eeagdd .Tc {_efbgf :=&TableInfo {Table :_fedb ,Row :_febgb ,Cell :_adea ,RowIndex :_gcbc ,ColIndex :_fgcec };
for _ ,_gccg :=range _adea .EG_BlockLevelElts {_deaag =append (_deaag ,_aebg (_gdgf ,_gccg .EG_ContentBlockContent ,_efbgf )...);};};};};};_ceee =append (_ceee ,Node {_gdcag :_gdgf ,_gcedb :&_gfbg ,Style :_eeef ,Children :_deaag });};};return _ceee ;};


// Outline returns true if run outline is on.
func (_cebe RunProperties )Outline ()bool {return _bffc (_cebe ._gaffa .Outline )};

// Strike returns true if run is striked.
func (_aeccg RunProperties )Strike ()bool {return _bffc (_aeccg ._gaffa .Strike )};func (_bga *Document )InsertTableBefore (relativeTo Paragraph )Table {return _bga .insertTable (relativeTo ,true );};func (_acad *Document )addFootnotes (){_acad ._edc =_bf .NewFootnotes ();
_acad ._edc .CT_Footnotes =_bf .CT_Footnotes {};_acad ._edc .Footnote =make ([]*_bf .CT_FtnEdn ,0);_acad .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074n\u006f\u0074\u0065\u0073\u002b\u0078m\u006c");
_acad ._bgf .AddRelationship ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0073\u002e\u0078\u006d\u006c",_d .FootNotesType );_gcfg :=_acad .Styles .AddStyle (FootnoteTextStyleId ,_bf .ST_StyleTypeParagraph ,false );_gcfg .SetName ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_gcfg .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_baaf :=_gcfg .ParagraphProperties ();_baaf .X ().SuppressLineNumbers =&_bf .CT_OnOff {};_deac :=_gcfg .RunProperties ();_deac .X ().Sz =&_bf .CT_HpsMeasure {ValAttr :_bf .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgb }};
_deac .X ().SzCs =&_bf .CT_HpsMeasure {ValAttr :_bf .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgb }};_bcae :=_acad .Styles .AddStyle (_ccdb ,_bf .ST_StyleTypeCharacter ,false );_bcae .SetName ("\u0046o\u006ft\u006e\u006f\u0074\u0065\u0020R\u0065\u0066e\u0072\u0065\u006e\u0063\u0065");
_ceb :=_bcae .RunProperties ();_ceb .X ().VertAlign =&_bf .CT_VerticalAlignRun {ValAttr :_de .ST_VerticalAlignRunSuperscript };_acad .addFootnoteSeparator ();};

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_gfcag Paragraph )InsertRunAfter (relativeTo Run )Run {return _gfcag .insertRun (relativeTo ,false );};

// SetLayoutInCell sets the layoutInCell attribute of anchor.
func (_fe AnchoredDrawing )SetLayoutInCell (val bool ){_fe ._fc .LayoutInCellAttr =val };

// X returns the inner wrapped XML type.
func (_fcac Footnote )X ()*_bf .CT_FtnEdn {return _fcac ._gdcb };func _gbcc (_cega *_bf .CT_P ,_bfae map[string ]string ){for _ ,_dfda :=range _cega .EG_PContent {if _dfda .Hyperlink !=nil &&_dfda .Hyperlink .IdAttr !=nil {if _cda ,_ffafg :=_bfae [*_dfda .Hyperlink .IdAttr ];
_ffafg {*_dfda .Hyperlink .IdAttr =_cda ;};};};};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_fge Bookmark )SetName (name string ){_fge ._bcc .NameAttr =name };func _cccbgd (_fdbf []*_bf .EG_ContentBlockContent ,_ffc *TableInfo )[]TextItem {_dbfd :=[]TextItem {};for _ ,_afcc :=range _fdbf {if _dbgc :=_afcc .Sdt ;_dbgc !=nil {if _ddbe :=_dbgc .SdtContent ;
_ddbe !=nil {_dbfd =append (_dbfd ,_aaadf (_ddbe .P ,_ffc ,nil )...);};};_dbfd =append (_dbfd ,_aaadf (_afcc .P ,_ffc ,nil )...);for _ ,_cab :=range _afcc .Tbl {for _daabb ,_bffaa :=range _cab .EG_ContentRowContent {for _ ,_cggg :=range _bffaa .Tr {for _dgge ,_bagdb :=range _cggg .EG_ContentCellContent {for _ ,_cdcd :=range _bagdb .Tc {_gcfd :=&TableInfo {Table :_cab ,Row :_cggg ,Cell :_cdcd ,RowIndex :_daabb ,ColIndex :_dgge };
for _ ,_fccd :=range _cdcd .EG_BlockLevelElts {_dbfd =append (_dbfd ,_cccbgd (_fccd .EG_ContentBlockContent ,_gcfd )...);};};};};};};};return _dbfd ;};

// SetThemeShade sets the shade based off the theme color.
func (_bfe Color )SetThemeShade (s uint8 ){_ffad :=_cag .Sprintf ("\u0025\u0030\u0032\u0078",s );_bfe ._baba .ThemeShadeAttr =&_ffad ;};

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_ccac ParagraphProperties )AddTabStop (position _abg .Distance ,justificaton _bf .ST_TabJc ,leader _bf .ST_TabTlc ){if _ccac ._fcdce .Tabs ==nil {_ccac ._fcdce .Tabs =_bf .NewCT_Tabs ();};_ddfd :=_bf .NewCT_TabStop ();_ddfd .LeaderAttr =leader ;_ddfd .ValAttr =justificaton ;
_ddfd .PosAttr .Int64 =_d .Int64 (int64 (position /_abg .Twips ));_ccac ._fcdce .Tabs .Tab =append (_ccac ._fcdce .Tabs .Tab ,_ddfd );};func _ebdc (_dbd *_bf .CT_P ,_aagf ,_gggg map[int64 ]int64 ){for _ ,_eaggd :=range _dbd .EG_PContent {for _ ,_cdebc :=range _eaggd .EG_ContentRunContent {if _cdebc .R !=nil {for _ ,_adca :=range _cdebc .R .EG_RunInnerContent {_cagc :=_adca .EndnoteReference ;
if _cagc !=nil &&_cagc .IdAttr > 0{if _gdba ,_eafc :=_gggg [_cagc .IdAttr ];_eafc {_cagc .IdAttr =_gdba ;};};_ebaa :=_adca .FootnoteReference ;if _ebaa !=nil &&_ebaa .IdAttr > 0{if _bcge ,_cfda :=_aagf [_ebaa .IdAttr ];_cfda {_ebaa .IdAttr =_bcge ;};};
};};};};};

// Outline returns true if paragraph outline is on.
func (_dgbe ParagraphProperties )Outline ()bool {return _bffc (_dgbe ._fcdce .RPr .Outline )};

// NewWatermarkPicture generates new WatermarkPicture.
func NewWatermarkPicture ()WatermarkPicture {_eaac :=_ga .NewShapetype ();_babae :=_ga .NewEG_ShapeElements ();_babae .Formulas =_ddeef ();_babae .Path =_egbeb ();_babae .Lock =_cbbad ();_eaac .EG_ShapeElements =[]*_ga .EG_ShapeElements {_babae };var (_ggeb ="\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";
_eegfd ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_cbga =float32 (75.0);_gbcfb ="\u006d\u0040\u0034\u00405l\u0040\u0034\u0040\u0031\u0031\u0040\u0039\u0040\u0031\u0031\u0040\u0039\u0040\u0035x\u0065";);_eaac .IdAttr =&_ggeb ;_eaac .CoordsizeAttr =&_eegfd ;
_eaac .SptAttr =&_cbga ;_eaac .PreferrelativeAttr =_de .ST_TrueFalseTrue ;_eaac .PathAttr =&_gbcfb ;_eaac .FilledAttr =_de .ST_TrueFalseFalse ;_eaac .StrokedAttr =_de .ST_TrueFalseFalse ;_dgdf :=_ga .NewShape ();_cgfeb :=_ga .NewEG_ShapeElements ();_cgfeb .Imagedata =_gggde ();
_dgdf .EG_ShapeElements =[]*_ga .EG_ShapeElements {_cgfeb };var (_cgace ="\u0057\u006f\u0072\u0064\u0050\u0069\u0063\u0074\u0075\u0072e\u0057\u0061\u0074\u0065\u0072\u006d\u0061r\u006b\u0031\u0036\u0033\u0032\u0033\u0031\u0036\u0035\u0039\u0035";_beaa ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";
_fdbdc ="#\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_addb ="";_gacbe ="\u0070os\u0069t\u0069o\u006e\u003a\u0061\u0062\u0073\u006fl\u0075\u0074\u0065\u003bm\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0030\u003bma\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0030\u0070\u0074;\u0068e\u0069\u0067\u0068\u0074\u003a\u0030\u0070\u0074\u003b\u007a\u002d\u0069\u006ed\u0065\u0078:\u002d\u0032\u00351\u0036\u0035\u0038\u0032\u0034\u0030\u003b\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003bm\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002drela\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065\u0072t\u0069c\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e-\u0076\u0065r\u0074\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e";
);_dgdf .IdAttr =&_cgace ;_dgdf .SpidAttr =&_beaa ;_dgdf .TypeAttr =&_fdbdc ;_dgdf .AltAttr =&_addb ;_dgdf .StyleAttr =&_gacbe ;_dgdf .AllowincellAttr =_de .ST_TrueFalseFalse ;_bbcbf :=_bf .NewCT_Picture ();_bbcbf .Any =[]_d .Any {_eaac ,_dgdf };return WatermarkPicture {_geed :_bbcbf ,_gbdfg :_dgdf ,_ecfa :_eaac };
};func (_fdff *Document )validateTableCells ()error {for _ ,_baaa :=range _fdff ._aff .Body .EG_BlockLevelElts {for _ ,_cccc :=range _baaa .EG_ContentBlockContent {for _ ,_agba :=range _cccc .Tbl {for _ ,_ccdc :=range _agba .EG_ContentRowContent {for _ ,_acbf :=range _ccdc .Tr {_bbce :=false ;
for _ ,_fgb :=range _acbf .EG_ContentCellContent {_egae :=false ;for _ ,_dgab :=range _fgb .Tc {_bbce =true ;for _ ,_cdeb :=range _dgab .EG_BlockLevelElts {for _ ,_gfeb :=range _cdeb .EG_ContentBlockContent {if len (_gfeb .P )> 0{_egae =true ;break ;};
};};};if !_egae {return _ca .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_bbce {return _ca .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");
};};};};};};return nil ;};

// SetWrapPathLineTo sets wrapPath lineTo value.
func (_baa AnchorDrawWrapOptions )SetWrapPathLineTo (coordinates []*_fa .CT_Point2D ){_baa ._ee =coordinates ;};

// SetAll sets all of the borders to a given value.
func (_cfdgg TableBorders )SetAll (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_cfdgg .SetBottom (t ,c ,thickness );_cfdgg .SetLeft (t ,c ,thickness );_cfdgg .SetRight (t ,c ,thickness );_cfdgg .SetTop (t ,c ,thickness );_cfdgg .SetInsideHorizontal (t ,c ,thickness );
_cfdgg .SetInsideVertical (t ,c ,thickness );};

// ParagraphBorders allows manipulation of borders on a paragraph.
type ParagraphBorders struct{_gbab *Document ;_gdbea *_bf .CT_PBdr ;};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_fbccf Paragraph )AddFootnote (text string )Footnote {var _bfgec int64 ;if _fbccf ._gffg .HasFootnotes (){for _ ,_fadc :=range _fbccf ._gffg .Footnotes (){if _fadc .id ()> _bfgec {_bfgec =_fadc .id ();};};_bfgec ++;}else {_fbccf ._gffg .addFootnotes ();
_bfgec =1;};_gbeb :=_bf .NewCT_FtnEdn ();_cbege :=_bf .NewCT_FtnEdnRef ();_cbege .IdAttr =_bfgec ;_fbccf ._gffg ._edc .CT_Footnotes .Footnote =append (_fbccf ._gffg ._edc .CT_Footnotes .Footnote ,_gbeb );_ecbg :=_fbccf .AddRun ();_bfdc :=_ecbg .Properties ();
_bfdc .SetStyle (_ccdb );_ecbg ._ccceca .EG_RunInnerContent =[]*_bf .EG_RunInnerContent {_bf .NewEG_RunInnerContent ()};_ecbg ._ccceca .EG_RunInnerContent [0].FootnoteReference =_cbege ;_dfgfcc :=Footnote {_fbccf ._gffg ,_gbeb };_dfgfcc ._gdcb .IdAttr =_bfgec ;
_dfgfcc ._gdcb .EG_BlockLevelElts =[]*_bf .EG_BlockLevelElts {_bf .NewEG_BlockLevelElts ()};_becg :=_dfgfcc .AddParagraph ();_becg .Properties ().SetStyle (FootnoteTextStyleId );_becg ._dbga .PPr .RPr =_bf .NewCT_ParaRPr ();_eafg :=_becg .AddRun ();_edfb :=_eafg .Properties ();
_edfb .SetStyle (_ccdb );_eafg .AddFootnoteReference ();_acag :=_becg .AddRun ();_acag .AddText ("\u0020");_acag =_becg .AddRun ();_acag .AddText (text );return _dfgfcc ;};func (_fag *Document )InsertTableAfter (relativeTo Paragraph )Table {return _fag .insertTable (relativeTo ,false );
};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_ggege TableLook )SetLastRow (on bool ){if !on {_ggege ._ceddb .LastRowAttr =&_de .ST_OnOff {};_ggege ._ceddb .LastRowAttr .ST_OnOff1 =_de .ST_OnOff1Off ;}else {_ggege ._ceddb .LastRowAttr =&_de .ST_OnOff {};_ggege ._ceddb .LastRowAttr .ST_OnOff1 =_de .ST_OnOff1On ;
};};

// SetHighlight highlights text in a specified color.
func (_geaga RunProperties )SetHighlight (c _bf .ST_HighlightColor ){_geaga ._gaffa .Highlight =_bf .NewCT_Highlight ();_geaga ._gaffa .Highlight .ValAttr =c ;};

// AddWatermarkText adds new watermark text to the document.
func (_agc *Document )AddWatermarkText (text string )WatermarkText {var _egec []Header ;if _fecd ,_dfea :=_agc .BodySection ().GetHeader (_bf .ST_HdrFtrDefault );_dfea {_egec =append (_egec ,_fecd );};if _age ,_eece :=_agc .BodySection ().GetHeader (_bf .ST_HdrFtrEven );
_eece {_egec =append (_egec ,_age );};if _cdg ,_dfgf :=_agc .BodySection ().GetHeader (_bf .ST_HdrFtrFirst );_dfgf {_egec =append (_egec ,_cdg );};if len (_egec )< 1{_cbed :=_agc .AddHeader ();_agc .BodySection ().SetHeader (_cbed ,_bf .ST_HdrFtrDefault );
_egec =append (_egec ,_cbed );};_bdb :=NewWatermarkText ();for _ ,_gcdg :=range _egec {_bdea :=_gcdg .Paragraphs ();if len (_bdea )< 1{_bgga :=_gcdg .AddParagraph ();_bgga .AddRun ().AddText ("");};for _ ,_abbcc :=range _gcdg .X ().EG_ContentBlockContent {for _ ,_aabd :=range _abbcc .P {for _ ,_adge :=range _aabd .EG_PContent {for _ ,_adfc :=range _adge .EG_ContentRunContent {if _adfc .R ==nil {continue ;
};for _ ,_gbae :=range _adfc .R .EG_RunInnerContent {_gbae .Pict =_bdb ._ccfe ;break ;};};};};};};_bdb .SetText (text );return _bdb ;};func _egdca (_aeffg *_bf .EG_ContentBlockContent )[]Bookmark {_dfbe :=[]Bookmark {};for _ ,_ccbfa :=range _aeffg .P {for _ ,_ffgb :=range _ccbfa .EG_PContent {for _ ,_dfee :=range _ffgb .EG_ContentRunContent {for _ ,_faed :=range _dfee .EG_RunLevelElts {for _ ,_cecd :=range _faed .EG_RangeMarkupElements {if _cecd .BookmarkStart !=nil {_dfbe =append (_dfbe ,Bookmark {_cecd .BookmarkStart });
};};};};};};for _ ,_bged :=range _aeffg .EG_RunLevelElts {for _ ,_bbfb :=range _bged .EG_RangeMarkupElements {if _bbfb .BookmarkStart !=nil {_dfbe =append (_dfbe ,Bookmark {_bbfb .BookmarkStart });};};};for _ ,_cdef :=range _aeffg .Tbl {for _ ,_dbgg :=range _cdef .EG_ContentRowContent {for _ ,_efff :=range _dbgg .Tr {for _ ,_fdbb :=range _efff .EG_ContentCellContent {for _ ,_eadfb :=range _fdbb .Tc {for _ ,_caeg :=range _eadfb .EG_BlockLevelElts {for _ ,_cgcfa :=range _caeg .EG_ContentBlockContent {for _ ,_cdd :=range _egdca (_cgcfa ){_dfbe =append (_dfbe ,_cdd );
};};};};};};};};return _dfbe ;};

// IsBold returns true if the run has been set to bold.
func (_dgbeg RunProperties )IsBold ()bool {return _dgbeg .BoldValue ()==OnOffValueOn };

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_bf .CT_Drawing ;Width int64 ;Height int64 ;};

// Strike returns true if paragraph is striked.
func (_agfca ParagraphProperties )Strike ()bool {return _bffc (_agfca ._fcdce .RPr .Strike )};

// GetHighlight returns the HighlightColor.
func (_ebbf RunProperties )GetHighlight ()_bf .ST_HighlightColor {if _ebbf ._gaffa .Highlight !=nil {return _ebbf ._gaffa .Highlight .ValAttr ;};return _bf .ST_HighlightColorNone ;};

// Clear resets the numbering.
func (_bcab Numbering )Clear (){_bcab ._gdegf .AbstractNum =nil ;_bcab ._gdegf .Num =nil ;_bcab ._gdegf .NumIdMacAtCleanup =nil ;_bcab ._gdegf .NumPicBullet =nil ;};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_fbeb TableProperties )TableLook ()TableLook {if _fbeb ._daef .TblLook ==nil {_fbeb ._daef .TblLook =_bf .NewCT_TblLook ();};return TableLook {_fbeb ._daef .TblLook };};

// InsertStyle insert style to styles.
func (_ddcaf Styles )InsertStyle (ss Style ){_ddcaf ._aebbf .Style =append (_ddcaf ._aebbf .Style ,ss .X ())};

// Footers returns the footers defined in the document.
func (_fec *Document )Footers ()[]Footer {_dafb :=[]Footer {};for _ ,_dcg :=range _fec ._ggf {_dafb =append (_dafb ,Footer {_fec ,_dcg });};return _dafb ;};

// SetLeft sets the left border to a specified type, color and thickness.
func (_bfaf TableBorders )SetLeft (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_bfaf ._fbdf .Left =_bf .NewCT_Border ();_gbfg (_bfaf ._fbdf .Left ,t ,c ,thickness );};func (_aae *Document )appendParagraph (_cdbd *Paragraph ,_eggc Paragraph ,_bcg bool )Paragraph {_dge :=_bf .NewEG_BlockLevelElts ();
_aae ._aff .Body .EG_BlockLevelElts =append (_aae ._aff .Body .EG_BlockLevelElts ,_dge );_edd :=_bf .NewEG_ContentBlockContent ();_dge .EG_ContentBlockContent =append (_dge .EG_ContentBlockContent ,_edd );if _cdbd !=nil {_cffg :=_cdbd .X ();for _ ,_fddf :=range _aae ._aff .Body .EG_BlockLevelElts {for _ ,_dgca :=range _fddf .EG_ContentBlockContent {for _gbge ,_eega :=range _dgca .P {if _eega ==_cffg {_ddd :=_eggc .X ();
_dgca .P =append (_dgca .P ,nil );if _bcg {copy (_dgca .P [_gbge +1:],_dgca .P [_gbge :]);_dgca .P [_gbge ]=_ddd ;}else {copy (_dgca .P [_gbge +2:],_dgca .P [_gbge +1:]);_dgca .P [_gbge +1]=_ddd ;};break ;};};for _ ,_bcaa :=range _dgca .Tbl {for _ ,_faaf :=range _bcaa .EG_ContentRowContent {for _ ,_cgba :=range _faaf .Tr {for _ ,_dccc :=range _cgba .EG_ContentCellContent {for _ ,_efbd :=range _dccc .Tc {for _ ,_bge :=range _efbd .EG_BlockLevelElts {for _ ,_eaff :=range _bge .EG_ContentBlockContent {for _adbc ,_cffe :=range _eaff .P {if _cffe ==_cffg {_dadc :=_eggc .X ();
_eaff .P =append (_eaff .P ,nil );if _bcg {copy (_eaff .P [_adbc +1:],_eaff .P [_adbc :]);_eaff .P [_adbc ]=_dadc ;}else {copy (_eaff .P [_adbc +2:],_eaff .P [_adbc +1:]);_eaff .P [_adbc +1]=_dadc ;};break ;};};};};};};};};};if _dgca .Sdt !=nil &&_dgca .Sdt .SdtContent !=nil &&_dgca .Sdt .SdtContent .P !=nil {for _baf ,_cea :=range _dgca .Sdt .SdtContent .P {if _cea ==_cffg {_gbgf :=_eggc .X ();
_dgca .Sdt .SdtContent .P =append (_dgca .Sdt .SdtContent .P ,nil );if _bcg {copy (_dgca .Sdt .SdtContent .P [_baf +1:],_dgca .Sdt .SdtContent .P [_baf :]);_dgca .Sdt .SdtContent .P [_baf ]=_gbgf ;}else {copy (_dgca .Sdt .SdtContent .P [_baf +2:],_dgca .Sdt .SdtContent .P [_baf +1:]);
_dgca .Sdt .SdtContent .P [_baf +1]=_gbgf ;};break ;};};};};};}else {_edd .P =append (_edd .P ,_eggc .X ());};_bee :=_eggc .Properties ();if _cde ,_deed :=_bee .Section ();_deed {var (_bcd map[string ]string ;_dbed map[string ]string ;);_fbc :=_cde .X ().EG_HdrFtrReferences ;
for _ ,_fbg :=range _fbc {if _fbg .HeaderReference !=nil {_bcd =map[string ]string {_fbg .HeaderReference .IdAttr :_cde ._efed ._bgf .GetTargetByRelId (_fbg .HeaderReference .IdAttr )};};if _fbg .FooterReference !=nil {_dbed =map[string ]string {_fbg .FooterReference .IdAttr :_cde ._efed ._bgf .GetTargetByRelId (_fbg .FooterReference .IdAttr )};
};};var _bbcgc map[int ]_aa .ImageRef ;for _ ,_bcdg :=range _cde ._efed .Headers (){for _fba ,_fed :=range _bcd {_gcda :=_cag .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_bcdg .Index ()+1));if _gcda ==_fed {_cbeb :=_cag .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_bcdg .Index ());
_aae ._cee =append (_aae ._cee ,_bcdg .X ());_fcbg :=_aae ._bgf .AddRelationship (_cbeb ,_d .HeaderType );_fcbg .SetID (_fba );_aae .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_cbeb ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");
_aae ._fgea =append (_aae ._fgea ,_aa .NewRelationships ());_aea :=_bcdg .Paragraphs ();for _ ,_gfba :=range _aea {for _ ,_afa :=range _gfba .Runs (){_ebc :=_afa .DrawingAnchored ();for _ ,_dcad :=range _ebc {if _fdb ,_ceab :=_dcad .GetImage ();_ceab {_bbcgc =map[int ]_aa .ImageRef {_bcdg .Index ():_fdb };
};};_gfca :=_afa .DrawingInline ();for _ ,_cccg :=range _gfca {if _bffe ,_ceca :=_cccg .GetImage ();_ceca {_bbcgc =map[int ]_aa .ImageRef {_bcdg .Index ():_bffe };};};};};};};};for _gfg ,_gde :=range _bbcgc {for _ ,_gdbg :=range _aae .Headers (){if (_gdbg .Index ()+1)==_gfg {_bdc ,_face :=_aa .ImageFromFile (_gde .Path ());
if _face !=nil {_e .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_face );};if _ ,_face =_gdbg .AddImage (_bdc );_face !=nil {_e .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_face );
};};for _ ,_eddf :=range _gdbg .Paragraphs (){if _dbf ,_ebbg :=_cde ._efed .Styles .SearchStyleById (_eddf .Style ());_ebbg {if _ ,_fcea :=_aae .Styles .SearchStyleById (_eddf .Style ());!_fcea {_aae .Styles .InsertStyle (_dbf );};};};};};var _fdcd map[int ]_aa .ImageRef ;
for _ ,_cgdf :=range _cde ._efed .Footers (){for _ggga ,_bae :=range _dbed {_gba :=_cag .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_cgdf .Index ()+1));if _gba ==_bae {_ggd :=_cag .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_cgdf .Index ());
_aae ._ggf =append (_aae ._ggf ,_cgdf .X ());_dcfa :=_aae ._bgf .AddRelationship (_ggd ,_d .FooterType );_dcfa .SetID (_ggga );_aae .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ggd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_aae ._fb =append (_aae ._fb ,_aa .NewRelationships ());_fbdg :=_cgdf .Paragraphs ();for _ ,_baef :=range _fbdg {for _ ,_ddbg :=range _baef .Runs (){_cgag :=_ddbg .DrawingAnchored ();for _ ,_gdbd :=range _cgag {if _acf ,_eed :=_gdbd .GetImage ();_eed {_fdcd =map[int ]_aa .ImageRef {_cgdf .Index ():_acf };
};};_agfa :=_ddbg .DrawingInline ();for _ ,_efbdd :=range _agfa {if _cfe ,_fca :=_efbdd .GetImage ();_fca {_fdcd =map[int ]_aa .ImageRef {_cgdf .Index ():_cfe };};};};};};};};for _agb ,_gcbfd :=range _fdcd {for _ ,_egf :=range _aae .Footers (){if (_egf .Index ()+1)==_agb {_gge ,_fbec :=_aa .ImageFromFile (_gcbfd .Path ());
if _fbec !=nil {_e .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_fbec );};if _ ,_fbec =_egf .AddImage (_gge );_fbec !=nil {_e .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_fbec );
};};for _ ,_gce :=range _egf .Paragraphs (){if _gcgge ,_abbg :=_cde ._efed .Styles .SearchStyleById (_gce .Style ());_abbg {if _ ,_bfg :=_aae .Styles .SearchStyleById (_gce .Style ());!_bfg {_aae .Styles .InsertStyle (_gcgge );};};};};};};_dfe :=_eggc .Numbering ();
_aae .Numbering ._gdegf .AbstractNum =append (_aae .Numbering ._gdegf .AbstractNum ,_dfe ._gdegf .AbstractNum ...);_aae .Numbering ._gdegf .Num =append (_aae .Numbering ._gdegf .Num ,_dfe ._gdegf .Num ...);return Paragraph {_aae ,_eggc .X ()};};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_bedff RunProperties )ComplexSizeValue ()float64 {if _decgd :=_bedff ._gaffa .SzCs ;_decgd !=nil {_gafcc :=_decgd .ValAttr ;if _gafcc .ST_UnsignedDecimalNumber !=nil {return float64 (*_gafcc .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_efca ParagraphProperties )EastAsiaFont ()string {if _ffca :=_efca ._fcdce .RPr .RFonts ;_ffca !=nil {if _ffca .EastAsiaAttr !=nil {return *_ffca .EastAsiaAttr ;};};return "";};

// SetBehindDoc sets the behindDoc attribute of anchor.
func (_agd AnchoredDrawing )SetBehindDoc (val bool ){_agd ._fc .BehindDocAttr =val };func _eac (_cf *_bf .CT_TblWidth ,_fac float64 ){_cf .TypeAttr =_bf .ST_TblWidthPct ;_cf .WAttr =&_bf .ST_MeasurementOrPercent {};_cf .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};
_cf .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (_fac *50));};

// SetStartIndent controls the start indentation.
func (_bdcgb ParagraphProperties )SetStartIndent (m _abg .Distance ){if _bdcgb ._fcdce .Ind ==nil {_bdcgb ._fcdce .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_bdcgb ._fcdce .Ind .StartAttr =nil ;}else {_bdcgb ._fcdce .Ind .StartAttr =&_bf .ST_SignedTwipsMeasure {};
_bdcgb ._fcdce .Ind .StartAttr .Int64 =_d .Int64 (int64 (m /_abg .Twips ));};};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_cdeg HyperLink )SetTargetBookmark (bm Bookmark ){_cdeg ._agbdc .AnchorAttr =_d .String (bm .Name ());_cdeg ._agbdc .IdAttr =nil ;};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_ebdac *Document ;_ggbg *_bf .WdInline ;};

// SetItalic sets the run to italic.
func (_bcbc RunProperties )SetItalic (b bool ){if !b {_bcbc ._gaffa .I =nil ;_bcbc ._gaffa .ICs =nil ;}else {_bcbc ._gaffa .I =_bf .NewCT_OnOff ();_bcbc ._gaffa .ICs =_bf .NewCT_OnOff ();};};

// CellBorders are the borders for an individual
type CellBorders struct{_eeea *_bf .CT_TcBorders };

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// document.
func (_cadf *Document )GetChartSpaceByRelId (relId string )*_gac .ChartSpace {_aage :=_cadf ._bgf .GetTargetByRelId (relId );for _ ,_bceeb :=range _cadf ._cdf {if _aage ==_bceeb .Target (){return _bceeb ._gb ;};};return nil ;};

// AddParagraph adds a new paragraph to the document body.
func (_cef *Document )AddParagraph ()Paragraph {_ggce :=_bf .NewEG_BlockLevelElts ();_cef ._aff .Body .EG_BlockLevelElts =append (_cef ._aff .Body .EG_BlockLevelElts ,_ggce );_ffd :=_bf .NewEG_ContentBlockContent ();_ggce .EG_ContentBlockContent =append (_ggce .EG_ContentBlockContent ,_ffd );
_cegf :=_bf .NewCT_P ();_ffd .P =append (_ffd .P ,_cegf );return Paragraph {_cef ,_cegf };};func (_bagg Paragraph )addEndBookmark (_dfeec int64 )*_bf .CT_MarkupRange {_aebc :=_bf .NewEG_PContent ();_bagg ._dbga .EG_PContent =append (_bagg ._dbga .EG_PContent ,_aebc );
_faffc :=_bf .NewEG_ContentRunContent ();_edgfb :=_bf .NewEG_RunLevelElts ();_adgf :=_bf .NewEG_RangeMarkupElements ();_bdaa :=_bf .NewCT_MarkupRange ();_bdaa .IdAttr =_dfeec ;_adgf .BookmarkEnd =_bdaa ;_aebc .EG_ContentRunContent =append (_aebc .EG_ContentRunContent ,_faffc );
_faffc .EG_RunLevelElts =append (_faffc .EG_RunLevelElts ,_edgfb );_edgfb .EG_RangeMarkupElements =append (_edgfb .EG_RangeMarkupElements ,_adgf );return _bdaa ;};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_gdegf *_bf .Numbering };

// SetCantSplit set row properties for Can't Split value.
func (_cdfg RowProperties )SetCantSplit (val bool ){if !val {_cdfg ._fgcc .CantSplit =nil ;}else {_faggb :=_bf .NewCT_OnOff ();_cdfg ._fgcc .CantSplit =[]*_bf .CT_OnOff {_faggb };};};func _bdae ()*_ga .Formulas {_fdbdgf :=_ga .NewFormulas ();_fdbdgf .F =[]*_ga .CT_F {_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0023\u0030\u0020\u0030\u00201\u0030\u0038\u0030\u0030"),_ba .CreateFormula ("p\u0072\u006f\u0064\u0020\u0023\u0030\u0020\u0032\u0020\u0031"),_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0031"),_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0032"),_ba .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0033"),_ba .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0033\u0020\u0030"),_ba .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0032\u0031\u00360\u0030\u0020\u0040\u0031"),_ba .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0030\u0020\u0040\u0032"),_ba .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0034\u00202\u0031\u0036\u0030\u0030"),_ba .CreateFormula ("\u006di\u0064\u0020\u0040\u0035\u0020\u00406"),_ba .CreateFormula ("\u006di\u0064\u0020\u0040\u0038\u0020\u00405"),_ba .CreateFormula ("\u006di\u0064\u0020\u0040\u0037\u0020\u00408"),_ba .CreateFormula ("\u006di\u0064\u0020\u0040\u0036\u0020\u00407"),_ba .CreateFormula ("s\u0075\u006d\u0020\u0040\u0036\u0020\u0030\u0020\u0040\u0035")};
return _fdbdgf ;};

// SetNextStyle sets the style that the next paragraph will use.
func (_gffff Style )SetNextStyle (name string ){if name ==""{_gffff ._ccecg .Next =nil ;}else {_gffff ._ccecg .Next =_bf .NewCT_String ();_gffff ._ccecg .Next .ValAttr =name ;};};func _ada (_ecfed *_fa .CT_Blip ,_gccb map[string ]string ){if _ecfed .EmbedAttr !=nil {if _acef ,_ecbc :=_gccb [*_ecfed .EmbedAttr ];
_ecbc {*_ecfed .EmbedAttr =_acef ;};};};

// SetColor sets the text color.
func (_fdbbc RunProperties )SetColor (c _ff .Color ){_fdbbc ._gaffa .Color =_bf .NewCT_Color ();_fdbbc ._gaffa .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_ebb *Document )AddFooter ()Footer {_ebd :=_bf .NewFtr ();_ebb ._ggf =append (_ebb ._ggf ,_ebd );_gagd :=_cag .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_ebb ._ggf ));_ebb ._bgf .AddRelationship (_gagd ,_d .FooterType );
_ebb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_gagd ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");
_ebb ._fb =append (_ebb ._fb ,_aa .NewRelationships ());return Footer {_ebb ,_ebd };};func (_dfcd *WatermarkPicture )getShape ()*_d .XSDAny {return _dfcd .getInnerElement ("\u0073\u0068\u0061p\u0065");};

// X returns the inner wrapped XML type.
func (_edae TableProperties )X ()*_bf .CT_TblPr {return _edae ._daef };

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_fbdf *_bf .CT_TblBorders };

// Header is a header for a document section.
type Header struct{_bggab *Document ;_ggab *_bf .Hdr ;};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_faag Paragraph )InsertRunBefore (relativeTo Run )Run {return _faag .insertRun (relativeTo ,true )};

// X returns the inner wml.CT_TblBorders
func (_cceg TableBorders )X ()*_bf .CT_TblBorders {return _cceg ._fbdf };

// AddCell adds a cell to a row and returns it
func (_gcba Row )AddCell ()Cell {_dddg :=_bf .NewEG_ContentCellContent ();_gcba ._eedfc .EG_ContentCellContent =append (_gcba ._eedfc .EG_ContentCellContent ,_dddg );_cadd :=_bf .NewCT_Tc ();_dddg .Tc =append (_dddg .Tc ,_cadd );return Cell {_gcba ._bfeac ,_cadd };
};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_ceeff Footer )Index ()int {for _aabeb ,_ceefd :=range _ceeff ._dgabc ._ggf {if _ceefd ==_ceeff ._cbgde {return _aabeb ;};};return -1;};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_fdc *_bf .CT_TcPr };

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_af AnchoredDrawing )SetOffset (x ,y _abg .Distance ){_af .SetXOffset (x );_af .SetYOffset (y )};func (_cdge *Document )insertParagraph (_dedb Paragraph ,_dfgcf bool )Paragraph {if _cdge ._aff .Body ==nil {return _cdge .AddParagraph ();};_bgafd :=_dedb .X ();
for _ ,_bacb :=range _cdge ._aff .Body .EG_BlockLevelElts {for _ ,_faef :=range _bacb .EG_ContentBlockContent {for _gdeg ,_daed :=range _faef .P {if _daed ==_bgafd {_ged :=_bf .NewCT_P ();_faef .P =append (_faef .P ,nil );if _dfgcf {copy (_faef .P [_gdeg +1:],_faef .P [_gdeg :]);
_faef .P [_gdeg ]=_ged ;}else {copy (_faef .P [_gdeg +2:],_faef .P [_gdeg +1:]);_faef .P [_gdeg +1]=_ged ;};return Paragraph {_cdge ,_ged };};};for _ ,_bgee :=range _faef .Tbl {for _ ,_cggd :=range _bgee .EG_ContentRowContent {for _ ,_befg :=range _cggd .Tr {for _ ,_eca :=range _befg .EG_ContentCellContent {for _ ,_caf :=range _eca .Tc {for _ ,_ccbf :=range _caf .EG_BlockLevelElts {for _ ,_daab :=range _ccbf .EG_ContentBlockContent {for _fbeg ,_ecfg :=range _daab .P {if _ecfg ==_bgafd {_faac :=_bf .NewCT_P ();
_daab .P =append (_daab .P ,nil );if _dfgcf {copy (_daab .P [_fbeg +1:],_daab .P [_fbeg :]);_daab .P [_fbeg ]=_faac ;}else {copy (_daab .P [_fbeg +2:],_daab .P [_fbeg +1:]);_daab .P [_fbeg +1]=_faac ;};return Paragraph {_cdge ,_faac };};};};};};};};};};
if _faef .Sdt !=nil &&_faef .Sdt .SdtContent !=nil &&_faef .Sdt .SdtContent .P !=nil {for _abgaa ,_baff :=range _faef .Sdt .SdtContent .P {if _baff ==_bgafd {_dabd :=_bf .NewCT_P ();_faef .Sdt .SdtContent .P =append (_faef .Sdt .SdtContent .P ,nil );if _dfgcf {copy (_faef .Sdt .SdtContent .P [_abgaa +1:],_faef .Sdt .SdtContent .P [_abgaa :]);
_faef .Sdt .SdtContent .P [_abgaa ]=_dabd ;}else {copy (_faef .Sdt .SdtContent .P [_abgaa +2:],_faef .Sdt .SdtContent .P [_abgaa +1:]);_faef .Sdt .SdtContent .P [_abgaa +1]=_dabd ;};return Paragraph {_cdge ,_dabd };};};};};};return _cdge .AddParagraph ();
};func _bffc (_cce *_bf .CT_OnOff )bool {return _cce !=nil };func (_edfa FormFieldType )String ()string {if _edfa >=FormFieldType (len (_acaf )-1){return _cag .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_edfa );
};return _dfae [_acaf [_edfa ]:_acaf [_edfa +1]];};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_beca *_bf .CT_FFData ;_bfecg *_bf .EG_RunInnerContent ;};

// DoubleStrike returns true if run is double striked.
func (_gbfb RunProperties )DoubleStrike ()bool {return _bffc (_gbfb ._gaffa .Dstrike )};

// AnchorDrawWrapOptions is options to set
// wrapPolygon for wrap text through and tight.
type AnchorDrawWrapOptions struct{_cec bool ;_cgge *_fa .CT_Point2D ;_ee []*_fa .CT_Point2D ;};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_cgce Fonts )SetEastAsiaTheme (t _bf .ST_Theme ){_cgce ._afga .EastAsiaThemeAttr =t };

// AddBreak adds a line break to a run.
func (_bbbe Run )AddBreak (){_dafda :=_bbbe .newIC ();_dafda .Br =_bf .NewCT_Br ()};

// DoubleStrike returns true if paragraph is double striked.
func (_ggaf ParagraphProperties )DoubleStrike ()bool {return _bffc (_ggaf ._fcdce .RPr .Dstrike )};

// X return element of Node as interface, can be either *Paragraph, *Table and Run.
func (_gcgcf *Node )X ()interface{}{return _gcgcf ._gcedb };

// Footnote is an individual footnote reference within the document.
type Footnote struct{_cbgb *Document ;_gdcb *_bf .CT_FtnEdn ;};func (_dfeg *Document )reorderEndnote (){_afab :=int64 (1);_ccdgc :=map[int64 ]int64 {};for _ ,_ccf :=range _dfeg ._cbfc .Endnote {switch _ccf .TypeAttr {case _bf .ST_FtnEdnSeparator :_ccf .IdAttr =-1;
break ;case _bf .ST_FtnEdnContinuationSeparator :_ccf .IdAttr =0;break ;default:_ccdgc [_ccf .IdAttr ]=_afab ;_ccf .IdAttr =_afab ;_afab ++;};};for _ ,_aedc :=range _dfeg .Paragraphs (){for _ ,_gdg :=range _aedc .Runs (){if _babb ,_bbab :=_gdg .IsEndnote ();
_babb {_gdg .X ().EG_RunInnerContent [0].EndnoteReference .IdAttr =_ccdgc [_bbab ];};};};};

// Text returns text from the document as one string separated with line breaks.
func (_ebdfg *DocText )Text ()string {_cgged :=_ag .NewBuffer ([]byte {});for _ ,_cfce :=range _ebdfg .Items {if _cfce .Text !=""{_cgged .WriteString (_cfce .Text );_cgged .WriteString ("\u000a");};};return _cgged .String ();};

// AddDefinition adds a new numbering definition.
func (_cbbfg Numbering )AddDefinition ()NumberingDefinition {_fddb :=_bf .NewCT_Num ();_gfga :=int64 (1);for _ ,_gcabe :=range _cbbfg .Definitions (){if _gcabe .AbstractNumberID ()>=_gfga {_gfga =_gcabe .AbstractNumberID ()+1;};};_fcddg :=int64 (1);for _ ,_gfcaa :=range _cbbfg .X ().Num {if _gfcaa .NumIdAttr >=_fcddg {_fcddg =_gfcaa .NumIdAttr +1;
};};_fddb .NumIdAttr =_fcddg ;_fddb .AbstractNumId =_bf .NewCT_DecimalNumber ();_fddb .AbstractNumId .ValAttr =_gfga ;_fdfd :=_bf .NewCT_AbstractNum ();_fdfd .AbstractNumIdAttr =_gfga ;_cbbfg ._gdegf .AbstractNum =append (_cbbfg ._gdegf .AbstractNum ,_fdfd );
_cbbfg ._gdegf .Num =append (_cbbfg ._gdegf .Num ,_fddb );return NumberingDefinition {_fdfd };};

// SetRightIndent controls right indent of paragraph.
func (_faaff Paragraph )SetRightIndent (m _abg .Distance ){_faaff .ensurePPr ();_ggfa :=_faaff ._dbga .PPr ;if _ggfa .Ind ==nil {_ggfa .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_ggfa .Ind .RightAttr =nil ;}else {_ggfa .Ind .RightAttr =&_bf .ST_SignedTwipsMeasure {};
_ggfa .Ind .RightAttr .Int64 =_d .Int64 (int64 (m /_abg .Twips ));};};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_edecg :=_bf .NewSettings ();_edecg .Compat =_bf .NewCT_Compat ();_dbafb :=_bf .NewCT_CompatSetting ();_dbafb .NameAttr =_d .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");
_dbafb .UriAttr =_d .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_dbafb .ValAttr =_d .String ("\u0031\u0035");
_edecg .Compat .CompatSetting =append (_edecg .Compat .CompatSetting ,_dbafb );return Settings {_edecg };};

// Shadow returns true if run shadow is on.
func (_cdfb RunProperties )Shadow ()bool {return _bffc (_cdfb ._gaffa .Shadow )};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
//
// After each removal, the rest of the footnote ids would be reordered.
func (_ebdca Paragraph )RemoveFootnote (id int64 ){for _ ,_facg :=range _ebdca .Runs (){if _eggb ,_fcgcd :=_facg .IsFootnote ();_eggb {if _fcgcd ==id {_ebdca .RemoveRun (_facg );break ;};};};_ebdca ._gffg .removeFootnote (id );};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_bdgc ParagraphProperties )RStyle ()string {if _bdgc ._fcdce .RPr .RStyle !=nil {return _bdgc ._fcdce .RPr .RStyle .ValAttr ;};return "";};

// SetColumnBandSize sets the number of Columns in the column band
func (_acbfb TableStyleProperties )SetColumnBandSize (cols int64 ){_acbfb ._efbde .TblStyleColBandSize =_bf .NewCT_DecimalNumber ();_acbfb ._efbde .TblStyleColBandSize .ValAttr =cols ;};

// AddParagraph adds a paragraph to the endnote.
func (_edfc Endnote )AddParagraph ()Paragraph {_bbgd :=_bf .NewEG_ContentBlockContent ();_ccbe :=len (_edfc ._fabbd .EG_BlockLevelElts [0].EG_ContentBlockContent );_edfc ._fabbd .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_edfc ._fabbd .EG_BlockLevelElts [0].EG_ContentBlockContent ,_bbgd );
_fbbc :=_bf .NewCT_P ();var _gdbcg *_bf .CT_String ;if _ccbe !=0{_bfag :=len (_edfc ._fabbd .EG_BlockLevelElts [0].EG_ContentBlockContent [_ccbe -1].P );_gdbcg =_edfc ._fabbd .EG_BlockLevelElts [0].EG_ContentBlockContent [_ccbe -1].P [_bfag -1].PPr .PStyle ;
}else {_gdbcg =_bf .NewCT_String ();_gdbcg .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_bbgd .P =append (_bbgd .P ,_fbbc );_dcb :=Paragraph {_edfc ._cdccf ,_fbbc };_dcb ._dbga .PPr =_bf .NewCT_PPr ();_dcb ._dbga .PPr .PStyle =_gdbcg ;_dcb ._dbga .PPr .RPr =_bf .NewCT_ParaRPr ();
return _dcb ;};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_agbf Style )SetUISortOrder (order int ){_agbf ._ccecg .UiPriority =_bf .NewCT_DecimalNumber ();_agbf ._ccecg .UiPriority .ValAttr =int64 (order );};

// SetAfter sets the spacing that comes after the paragraph.
func (_aegeb ParagraphSpacing )SetAfter (after _abg .Distance ){_aegeb ._dgdbe .AfterAttr =&_de .ST_TwipsMeasure {};_aegeb ._dgdbe .AfterAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (after /_abg .Twips ));};

// X returns the inner wrapped XML type.
func (_gcgd TableStyleProperties )X ()*_bf .CT_TblPrBase {return _gcgd ._efbde };

// Borders allows manipulation of the table borders.
func (_gecaa TableProperties )Borders ()TableBorders {if _gecaa ._daef .TblBorders ==nil {_gecaa ._daef .TblBorders =_bf .NewCT_TblBorders ();};return TableBorders {_gecaa ._daef .TblBorders };};

// GetColor returns the color.Color object representing the run color.
func (_edee ParagraphProperties )GetColor ()_ff .Color {if _efab :=_edee ._fcdce .RPr .Color ;_efab !=nil {_fgec :=_efab .ValAttr ;if _fgec .ST_HexColorRGB !=nil {return _ff .FromHex (*_fgec .ST_HexColorRGB );};};return _ff .Color {};};

// X returns the inner wrapped XML type.
func (_ffaeb Header )X ()*_bf .Hdr {return _ffaeb ._ggab };

// Bookmarks returns all of the bookmarks defined in the document.
func (_abgb Document )Bookmarks ()[]Bookmark {if _abgb ._aff .Body ==nil {return nil ;};_dadcd :=[]Bookmark {};for _ ,_dcef :=range _abgb ._aff .Body .EG_BlockLevelElts {for _ ,_fgee :=range _dcef .EG_ContentBlockContent {for _ ,_cbebdf :=range _egdca (_fgee ){_dadcd =append (_dadcd ,_cbebdf );
};};};return _dadcd ;};func (_ef *Document )insertTable (_gcag Paragraph ,_gfcb bool )Table {_ggcc :=_ef ._aff .Body ;if _ggcc ==nil {return _ef .AddTable ();};_deaa :=_gcag .X ();for _ceef ,_aee :=range _ggcc .EG_BlockLevelElts {for _ ,_abc :=range _aee .EG_ContentBlockContent {for _gdff ,_fecf :=range _abc .P {if _fecf ==_deaa {_bcf :=_bf .NewCT_Tbl ();
_afe :=_bf .NewEG_BlockLevelElts ();_bdge :=_bf .NewEG_ContentBlockContent ();_afe .EG_ContentBlockContent =append (_afe .EG_ContentBlockContent ,_bdge );_bdge .Tbl =append (_bdge .Tbl ,_bcf );_ggcc .EG_BlockLevelElts =append (_ggcc .EG_BlockLevelElts ,nil );
if _gfcb {copy (_ggcc .EG_BlockLevelElts [_ceef +1:],_ggcc .EG_BlockLevelElts [_ceef :]);_ggcc .EG_BlockLevelElts [_ceef ]=_afe ;if _gdff !=0{_adb :=_bf .NewEG_BlockLevelElts ();_accg :=_bf .NewEG_ContentBlockContent ();_adb .EG_ContentBlockContent =append (_adb .EG_ContentBlockContent ,_accg );
_accg .P =_abc .P [:_gdff ];_ggcc .EG_BlockLevelElts =append (_ggcc .EG_BlockLevelElts ,nil );copy (_ggcc .EG_BlockLevelElts [_ceef +1:],_ggcc .EG_BlockLevelElts [_ceef :]);_ggcc .EG_BlockLevelElts [_ceef ]=_adb ;};_abc .P =_abc .P [_gdff :];}else {copy (_ggcc .EG_BlockLevelElts [_ceef +2:],_ggcc .EG_BlockLevelElts [_ceef +1:]);
_ggcc .EG_BlockLevelElts [_ceef +1]=_afe ;if _gdff !=len (_abc .P )-1{_cggf :=_bf .NewEG_BlockLevelElts ();_beac :=_bf .NewEG_ContentBlockContent ();_cggf .EG_ContentBlockContent =append (_cggf .EG_ContentBlockContent ,_beac );_beac .P =_abc .P [_gdff +1:];
_ggcc .EG_BlockLevelElts =append (_ggcc .EG_BlockLevelElts ,nil );copy (_ggcc .EG_BlockLevelElts [_ceef +3:],_ggcc .EG_BlockLevelElts [_ceef +2:]);_ggcc .EG_BlockLevelElts [_ceef +2]=_cggf ;};_abc .P =_abc .P [:_gdff +1];};return Table {_ef ,_bcf };};};
for _ ,_abfg :=range _abc .Tbl {_ggb :=_aaba (_abfg ,_deaa ,_gfcb );if _ggb !=nil {return Table {_ef ,_ggb };};};};};return _ef .AddTable ();};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dgcg ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_dgcg ._fcdce .KeepLines =nil ;}else {_dgcg ._fcdce .KeepLines =_bf .NewCT_OnOff ();};};func (_bffg *Document )syncEndnoteSettings (){_fef :=[]int64 {};_fbad :=_bffg .Endnotes ();for _ ,_ecfb :=range _fbad {if _ecfb .X ().TypeAttr !=_bf .ST_FtnEdnUnset &&_ecfb .X ().TypeAttr !=_bf .ST_FtnEdnNormal {_fef =append (_fef ,_ecfb .X ().IdAttr );
};};_ceba :=_bffg .Settings .X ().CT_Settings .EndnotePr ;if _ceba ==nil {_ceba =_bf .NewCT_EdnDocProps ();};if len (_fef )==0{_ceba .Endnote =nil ;return ;};_ceba .Endnote =[]*_bf .CT_FtnEdnSepRef {};for _ ,_adc :=range _fef {_ebee :=_bf .NewCT_FtnEdnSepRef ();
_ebee .IdAttr =_adc ;_ceba .Endnote =append (_ceba .Endnote ,_ebee );};};

// SetLeftIndent controls the left indent of the paragraph.
func (_afbb ParagraphStyleProperties )SetLeftIndent (m _abg .Distance ){if _afbb ._egfe .Ind ==nil {_afbb ._egfe .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_afbb ._egfe .Ind .LeftAttr =nil ;}else {_afbb ._egfe .Ind .LeftAttr =&_bf .ST_SignedTwipsMeasure {};
_afbb ._egfe .Ind .LeftAttr .Int64 =_d .Int64 (int64 (m /_abg .Twips ));};};

// Clear removes all of the content from within a run.
func (_cfgdd Run )Clear (){_cfgdd ._ccceca .EG_RunInnerContent =nil };

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_dfed Paragraph )SetStyle (s string ){_dfed .ensurePPr ();if s ==""{_dfed ._dbga .PPr .PStyle =nil ;}else {_dfed ._dbga .PPr .PStyle =_bf .NewCT_String ();_dfed ._dbga .PPr .PStyle .ValAttr =s ;};};

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_dbca *_bf .CT_TblStylePr };

// SetShading controls the cell shading.
func (_cgdc CellProperties )SetShading (shd _bf .ST_Shd ,foreground ,fill _ff .Color ){if shd ==_bf .ST_ShdUnset {_cgdc ._fdc .Shd =nil ;}else {_cgdc ._fdc .Shd =_bf .NewCT_Shd ();_cgdc ._fdc .Shd .ValAttr =shd ;_cgdc ._fdc .Shd .ColorAttr =&_bf .ST_HexColor {};
if foreground .IsAuto (){_cgdc ._fdc .Shd .ColorAttr .ST_HexColorAuto =_bf .ST_HexColorAutoAuto ;}else {_cgdc ._fdc .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_cgdc ._fdc .Shd .FillAttr =&_bf .ST_HexColor {};if fill .IsAuto (){_cgdc ._fdc .Shd .FillAttr .ST_HexColorAuto =_bf .ST_HexColorAutoAuto ;
}else {_cgdc ._fdc .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_acc *Document )BodySection ()Section {if _acc ._aff .Body .SectPr ==nil {_acc ._aff .Body .SectPr =_bf .NewCT_SectPr ();};return Section {_acc ,_acc ._aff .Body .SectPr };};

// WatermarkText is watermark text within the document.
type WatermarkText struct{_ccfe *_bf .CT_Picture ;_fged *_ba .TextpathStyle ;_feab *_ga .Shape ;_aadb *_ga .Shapetype ;};

// Caps returns true if paragraph font is capitalized.
func (_fbcfe ParagraphProperties )Caps ()bool {return _bffc (_fbcfe ._fcdce .RPr .Caps )};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_gebg *Document )Validate ()error {if _gebg ==nil ||_gebg ._aff ==nil {return _ca .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");
};for _ ,_fcga :=range []func ()error {_gebg .validateTableCells ,_gebg .validateBookmarks }{if _afea :=_fcga ();_afea !=nil {return _afea ;};};if _egcd :=_gebg ._aff .Validate ();_egcd !=nil {return _egcd ;};return nil ;};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_eadfe FormField )Value ()string {if _eadfe ._beca .TextInput !=nil &&_eadfe ._bfecg .T !=nil {return _eadfe ._bfecg .T .Content ;}else if _eadfe ._beca .DdList !=nil &&_eadfe ._beca .DdList .Result !=nil {_defa :=_eadfe .PossibleValues ();_bgafb :=int (_eadfe ._beca .DdList .Result .ValAttr );
if _bgafb < len (_defa ){return _defa [_bgafb ];};}else if _eadfe ._beca .CheckBox !=nil {if _eadfe .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// X returns the inner wrapped XML type.
func (_feg CellProperties )X ()*_bf .CT_TcPr {return _feg ._fdc };

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_ad AnchoredDrawing )SetHAlignment (h _bf .WdST_AlignH ){_ad ._fc .PositionH .Choice =&_bf .WdCT_PosHChoice {};_ad ._fc .PositionH .Choice .Align =h ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_aabag TableProperties )SetCellSpacingAuto (){_aabag ._daef .TblCellSpacing =_bf .NewCT_TblWidth ();_aabag ._daef .TblCellSpacing .TypeAttr =_bf .ST_TblWidthAuto ;};

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_ddad FormField )PossibleValues ()[]string {if _ddad ._beca .DdList ==nil {return nil ;};_aaea :=[]string {};for _ ,_gabf :=range _ddad ._beca .DdList .ListEntry {if _gabf ==nil {continue ;};_aaea =append (_aaea ,_gabf .ValAttr );};return _aaea ;
};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_gbedg *Document ;_cccgd *_bf .CT_SdtBlock ;};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_eeb FormField )SetDefaultValue (v string ){if _eeb ._beca .DdList !=nil {for _bgfd ,_aced :=range _eeb .PossibleValues (){if _aced ==v {_eeb ._beca .DdList .Default =_bf .NewCT_DecimalNumber ();_eeb ._beca .DdList .Default .ValAttr =int64 (_bgfd );
break ;};};};};

// SetBottomPct sets the cell bottom margin
func (_abdd CellMargins )SetBottomPct (pct float64 ){_abdd ._dcd .Bottom =_bf .NewCT_TblWidth ();_eac (_abdd ._dcd .Bottom ,pct );};

// SetHangingIndent controls special indent of paragraph.
func (_dbcc Paragraph )SetHangingIndent (m _abg .Distance ){_dbcc .ensurePPr ();_bcead :=_dbcc ._dbga .PPr ;if _bcead .Ind ==nil {_bcead .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_bcead .Ind .HangingAttr =nil ;}else {_bcead .Ind .HangingAttr =&_de .ST_TwipsMeasure {};
_bcead .Ind .HangingAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (m /_abg .Twips ));};};func _cbeg (_eagg _ce .ReaderAt ,_baac int64 ,_eff string )(*Document ,error ){const _ecdc ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";
if !_ac .GetLicenseKey ().IsLicensed ()&&!_ecg {_cag .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_cag .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");
return nil ,_ca .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_fgef :=New ();_fgef .Numbering ._gdegf =nil ;if len (_eff )> 0{_fgef ._abed =_eff ;
}else {_ebdb ,_dabcb :=_ac .GenRefId ("\u0064\u0072");if _dabcb !=nil {_e .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_dabcb );return nil ,_dabcb ;};_fgef ._abed =_ebdb ;};if _beda :=_ac .Track (_fgef ._abed ,_ecdc );_beda !=nil {_e .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_beda );
return nil ,_beda ;};_fgeae ,_ecbe :=_ccd .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");if _ecbe !=nil {return nil ,_ecbe ;};_fgef .TmpPath =_fgeae ;_bffa ,_ecbe :=_bc .NewReader (_eagg ,_baac );if _ecbe !=nil {return nil ,_cag .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_ecbe );
};_ebeb :=[]*_bc .File {};_ebeb =append (_ebeb ,_bffa .File ...);_cbbf :=false ;for _ ,_aac :=range _ebeb {if _aac .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_cbbf =true ;
break ;};};if _cbbf {_fgef .CreateCustomProperties ();};_bgec :=_fgef ._aff .ConformanceAttr ;_bgg :=_fg .DecodeMap {};_bgg .SetOnNewRelationshipFunc (_fgef .onNewRelationship );_bgg .AddTarget (_d .ContentTypesFilename ,_fgef .ContentTypes .X (),"",0);
_bgg .AddTarget (_d .BaseRelsFilename ,_fgef .Rels .X (),"",0);if _baec :=_bgg .Decode (_ebeb );_baec !=nil {return nil ,_baec ;};_fgef ._aff .ConformanceAttr =_bgec ;for _ ,_ffeg :=range _ebeb {if _ffeg ==nil {continue ;};if _ffb :=_fgef .AddExtraFileFromZip (_ffeg );
_ffb !=nil {return nil ,_ffb ;};};if _cbbf {_badc :=false ;for _ ,_cecg :=range _fgef .Rels .X ().Relationship {if _cecg .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_badc =true ;
break ;};};if !_badc {_fgef .AddCustomRelationships ();};};return _fgef ,nil ;};

// SetText sets the watermark text.
func (_bfdbc *WatermarkText )SetText (text string ){_gbcfa :=_bfdbc .getShape ();if _bfdbc ._feab !=nil {_bdfge :=_bfdbc ._feab .EG_ShapeElements ;if len (_bdfge )> 0&&_bdfge [0].Textpath !=nil {_bdfge [0].Textpath .StringAttr =&text ;};}else {_addg :=_bfdbc .findNode (_gbcfa ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");
for _fdea ,_cbega :=range _addg .Attrs {if _cbega .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{_addg .Attrs [_fdea ].Value =text ;};};};};

// SetPrimaryStyle marks the style as a primary style.
func (_fbacf Style )SetPrimaryStyle (b bool ){if b {_fbacf ._ccecg .QFormat =_bf .NewCT_OnOff ();}else {_fbacf ._ccecg .QFormat =nil ;};};func (_dgee *WatermarkPicture )getShapeImagedata ()*_d .XSDAny {return _dgee .getInnerElement ("\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");
};

// SetStyle sets style to the text in watermark.
func (_adfe *WatermarkText )SetStyle (style _ba .TextpathStyle ){_cfeb :=_adfe .getShape ();if _adfe ._feab !=nil {_fbcd :=_adfe ._feab .EG_ShapeElements ;if len (_fbcd )> 0&&_fbcd [0].Textpath !=nil {var _fdge =style .String ();_fbcd [0].Textpath .StyleAttr =&_fdge ;
};return ;};_ebfa :=_adfe .findNode (_cfeb ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _bbbbd ,_bedcc :=range _ebfa .Attrs {if _bedcc .Name .Local =="\u0073\u0074\u0079l\u0065"{_ebfa .Attrs [_bbbbd ].Value =style .String ();};};};

// FindNodeByStyleId return slice of node base on style id.
func (_dbfc *Nodes )FindNodeByStyleId (styleId string )[]Node {_dfge :=[]Node {};for _ ,_cagf :=range _dbfc ._gdbf {switch _fdag :=_cagf ._gcedb .(type ){case *Paragraph :if _fdag !=nil &&_fdag .Style ()==styleId {_dfge =append (_dfge ,_cagf );};case *Table :if _fdag !=nil &&_fdag .Style ()==styleId {_dfge =append (_dfge ,_cagf );
};};_abbeg :=Nodes {_gdbf :_cagf .Children };_dfge =append (_dfge ,_abbeg .FindNodeByStyleId (styleId )...);};return _dfge ;};

// AddField adds a field (automatically computed text) to the document.
func (_ebecg Run )AddField (code string ){_ebecg .AddFieldWithFormatting (code ,"",true )};func _abfa (_cccec *_bf .CT_Border ,_dccbe _bf .ST_Border ,_bgecg _ff .Color ,_caaf _abg .Distance ){_cccec .ValAttr =_dccbe ;_cccec .ColorAttr =&_bf .ST_HexColor {};
if _bgecg .IsAuto (){_cccec .ColorAttr .ST_HexColorAuto =_bf .ST_HexColorAutoAuto ;}else {_cccec .ColorAttr .ST_HexColorRGB =_bgecg .AsRGBString ();};if _caaf !=_abg .Zero {_cccec .SzAttr =_d .Uint64 (uint64 (_caaf /_abg .Point *8));};};

// Runs returns all of the runs in a paragraph.
func (_dgdcg Paragraph )Runs ()[]Run {_dgdea :=[]Run {};for _ ,_bedacd :=range _dgdcg ._dbga .EG_PContent {if _bedacd .Hyperlink !=nil &&_bedacd .Hyperlink .EG_ContentRunContent !=nil {for _ ,_gaagfg :=range _bedacd .Hyperlink .EG_ContentRunContent {if _gaagfg .R !=nil {_dgdea =append (_dgdea ,Run {_dgdcg ._gffg ,_gaagfg .R });
};};};for _ ,_bbgf :=range _bedacd .EG_ContentRunContent {if _bbgf .R !=nil {_dgdea =append (_dgdea ,Run {_dgdcg ._gffg ,_bbgf .R });};if _bbgf .Sdt !=nil &&_bbgf .Sdt .SdtContent !=nil {for _ ,_gaed :=range _bbgf .Sdt .SdtContent .EG_ContentRunContent {if _gaed .R !=nil {_dgdea =append (_dgdea ,Run {_dgdcg ._gffg ,_gaed .R });
};};};};};return _dgdea ;};

// InsertRowBefore inserts a row before another row
func (_fbfge Table )InsertRowBefore (r Row )Row {for _eebd ,_bcce :=range _fbfge ._gbaed .EG_ContentRowContent {if len (_bcce .Tr )> 0&&r .X ()==_bcce .Tr [0]{_ddae :=_bf .NewEG_ContentRowContent ();_fbfge ._gbaed .EG_ContentRowContent =append (_fbfge ._gbaed .EG_ContentRowContent ,nil );
copy (_fbfge ._gbaed .EG_ContentRowContent [_eebd +1:],_fbfge ._gbaed .EG_ContentRowContent [_eebd :]);_fbfge ._gbaed .EG_ContentRowContent [_eebd ]=_ddae ;_acbb :=_bf .NewCT_Row ();_ddae .Tr =append (_ddae .Tr ,_acbb );return Row {_fbfge ._daafa ,_acbb };
};};return _fbfge .AddRow ();};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_cddf TableBorders )SetBottom (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_cddf ._fbdf .Bottom =_bf .NewCT_Border ();_gbfg (_cddf ._fbdf .Bottom ,t ,c ,thickness );};

// AddImageRef add ImageRef to header as relationship, returning ImageRef
// that can be used to be placed as header content.
func (_gggc Header )AddImageRef (r _aa .ImageRef )(_aa .ImageRef ,error ){var _gaff _aa .Relationships ;for _affaa ,_bfagb :=range _gggc ._bggab ._cee {if _bfagb ==_gggc ._ggab {_gaff =_gggc ._bggab ._fgea [_affaa ];};};_bgaa :=_gaff .AddRelationship (r .Target (),_d .ImageType );
r .SetRelID (_bgaa .X ().IdAttr );return r ,nil ;};

// AddFootnoteReference adds a footnote reference to a run.
func (_dffd Run )AddFootnoteReference (){_ceccc :=_dffd .newIC ();_ceccc .FootnoteRef =&_bf .CT_Empty {};};

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_babfc Paragraph )AddCheckBox (name string )FormField {_eaba :=_babfc .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_eaba ._beca .CheckBox =_bf .NewCT_FFCheckBox ();return _eaba ;};

// InitializeDefault constructs the default styles.
func (_aged Styles )InitializeDefault (){_aged .initializeDocDefaults ();_aged .initializeStyleDefaults ();};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_aeca ParagraphProperties )CharacterSpacingMeasure ()string {if _ecab :=_aeca ._fcdce .RPr .Spacing ;_ecab !=nil {_adag :=_ecab .ValAttr ;if _adag .ST_UniversalMeasure !=nil {return *_adag .ST_UniversalMeasure ;};};return "";};

// Nodes contains slice of Node element.
type Nodes struct{_gdbf []Node };

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_aacc Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_aacc .ensurePPr ();if _aacc ._dbga .PPr .NumPr ==nil {_aacc ._dbga .PPr .NumPr =_bf .NewCT_NumPr ();};_bdca :=_bf .NewCT_DecimalNumber ();_egeaa :=int64 (-1);for _ ,_edfe :=range _aacc ._gffg .Numbering ._gdegf .Num {if _edfe .AbstractNumId !=nil &&_edfe .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_egeaa =_edfe .NumIdAttr ;
};};if _egeaa ==-1{_eecb :=_bf .NewCT_Num ();_aacc ._gffg .Numbering ._gdegf .Num =append (_aacc ._gffg .Numbering ._gdegf .Num ,_eecb );_eecb .NumIdAttr =int64 (len (_aacc ._gffg .Numbering ._gdegf .Num ));_eecb .AbstractNumId =_bf .NewCT_DecimalNumber ();
_eecb .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_bdca .ValAttr =_egeaa ;_aacc ._dbga .PPr .NumPr .NumId =_bdca ;};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_fcgc Document )SetConformance (conformanceAttr _de .ST_ConformanceClass ){_fcgc ._aff .ConformanceAttr =conformanceAttr ;};

// Imprint returns true if run imprint is on.
func (_aedgg RunProperties )Imprint ()bool {return _bffc (_aedgg ._gaffa .Imprint )};

// SetLeft sets the cell left margin
func (_abf CellMargins )SetLeft (d _abg .Distance ){_abf ._dcd .Left =_bf .NewCT_TblWidth ();_faca (_abf ._dcd .Left ,d );};

// Properties returns the cell properties.
func (_ffa Cell )Properties ()CellProperties {if _ffa ._cbe .TcPr ==nil {_ffa ._cbe .TcPr =_bf .NewCT_TcPr ();};return CellProperties {_ffa ._cbe .TcPr };};func (_dccbec Styles )initializeDocDefaults (){_dccbec ._aebbf .DocDefaults =_bf .NewCT_DocDefaults ();
_dccbec ._aebbf .DocDefaults .RPrDefault =_bf .NewCT_RPrDefault ();_dccbec ._aebbf .DocDefaults .RPrDefault .RPr =_bf .NewCT_RPr ();_caaff :=RunProperties {_dccbec ._aebbf .DocDefaults .RPrDefault .RPr };_caaff .SetSize (12*_abg .Point );_caaff .Fonts ().SetASCIITheme (_bf .ST_ThemeMajorAscii );
_caaff .Fonts ().SetEastAsiaTheme (_bf .ST_ThemeMajorEastAsia );_caaff .Fonts ().SetHANSITheme (_bf .ST_ThemeMajorHAnsi );_caaff .Fonts ().SetCSTheme (_bf .ST_ThemeMajorBidi );_caaff .X ().Lang =_bf .NewCT_Language ();_caaff .X ().Lang .ValAttr =_d .String ("\u0065\u006e\u002dU\u0053");
_caaff .X ().Lang .EastAsiaAttr =_d .String ("\u0065\u006e\u002dU\u0053");_caaff .X ().Lang .BidiAttr =_d .String ("\u0061\u0072\u002dS\u0041");_dccbec ._aebbf .DocDefaults .PPrDefault =_bf .NewCT_PPrDefault ();};

// X returns the inner wrapped XML type.
func (_fgbb TableConditionalFormatting )X ()*_bf .CT_TblStylePr {return _fgbb ._dbca };

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_egdgd *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _egdgd .insertParagraph (relativeTo ,true );};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_fedbg TableStyleProperties )SetCellSpacingAuto (){_fedbg ._efbde .TblCellSpacing =_bf .NewCT_TblWidth ();_fedbg ._efbde .TblCellSpacing .TypeAttr =_bf .ST_TblWidthAuto ;};

// SetAllowOverlapAttr sets the allowOverlap attribute of anchor.
func (_cga AnchoredDrawing )SetAllowOverlapAttr (val bool ){_cga ._fc .AllowOverlapAttr =val };

// Clear clears all content within a footer
func (_effd Footer )Clear (){_effd ._cbgde .EG_ContentBlockContent =nil };

// WatermarkPicture is watermark picture within document.
type WatermarkPicture struct{_geed *_bf .CT_Picture ;_bcdfc *_ba .ShapeStyle ;_gbdfg *_ga .Shape ;_ecfa *_ga .Shapetype ;};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_decg Document )SetStrict (strict bool ){if strict {_decg ._aff .ConformanceAttr =_de .ST_ConformanceClassStrict ;}else {_decg ._aff .ConformanceAttr =_de .ST_ConformanceClassTransitional ;};};

// SetLeftIndent controls left indent of paragraph.
func (_fccb Paragraph )SetLeftIndent (m _abg .Distance ){_fccb .ensurePPr ();_gffb :=_fccb ._dbga .PPr ;if _gffb .Ind ==nil {_gffb .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_gffb .Ind .LeftAttr =nil ;}else {_gffb .Ind .LeftAttr =&_bf .ST_SignedTwipsMeasure {};
_gffb .Ind .LeftAttr .Int64 =_d .Int64 (int64 (m /_abg .Twips ));};};

// X returns the inner wrapped XML type.
func (_babab Table )X ()*_bf .CT_Tbl {return _babab ._gbaed };

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_aace Header )AddImage (i _aa .Image )(_aa .ImageRef ,error ){var _ccfdd _aa .Relationships ;for _ebac ,_cedf :=range _aace ._bggab ._cee {if _cedf ==_aace ._ggab {_ccfdd =_aace ._bggab ._fgea [_ebac ];};};_bcdgf :=_aa .MakeImageRef (i ,&_aace ._bggab .DocBase ,_ccfdd );
if i .Data ==nil &&i .Path ==""{return _bcdgf ,_ca .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _bcdgf ,_ca .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");
};if i .Size .X ==0||i .Size .Y ==0{return _bcdgf ,_ca .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_aace ._bggab .Images =append (_aace ._bggab .Images ,_bcdgf );
_gdegd :=_cag .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_aace ._bggab .Images ),i .Format );_cgeeg :=_ccfdd .AddRelationship (_gdegd ,_d .ImageType );_bcdgf .SetRelID (_cgeeg .X ().IdAttr );
return _bcdgf ,nil ;};

// SetWidthAuto sets the the table width to automatic.
func (_acec TableProperties )SetWidthAuto (){_acec ._daef .TblW =_bf .NewCT_TblWidth ();_acec ._daef .TblW .TypeAttr =_bf .ST_TblWidthAuto ;};

// Node is document element node,
// contains Paragraph or Table element.
type Node struct{_gdcag *Document ;_gcedb interface{};Style Style ;AnchoredDrawings []AnchoredDrawing ;InlineDrawings []InlineDrawing ;Children []Node ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_dccbc ParagraphBorders )SetTop (t _bf .ST_Border ,c _ff .Color ,thickness _abg .Distance ){_dccbc ._gdbea .Top =_bf .NewCT_Border ();_abfa (_dccbc ._gdbea .Top ,t ,c ,thickness );};

// AddTextInput adds text input form field to the paragraph and returns it.
func (_dfgb Paragraph )AddTextInput (name string )FormField {_eabbb :=_dfgb .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_eabbb ._beca .TextInput =_bf .NewCT_FFTextInput ();return _eabbb ;};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_gg AnchoredDrawing )SetAlignment (h _bf .WdST_AlignH ,v _bf .WdST_AlignV ){_gg .SetHAlignment (h );_gg .SetVAlignment (v );};

// Tables returns the tables defined in the header.
func (_dcea Header )Tables ()[]Table {_befcd :=[]Table {};if _dcea ._ggab ==nil {return nil ;};for _ ,_dffg :=range _dcea ._ggab .EG_ContentBlockContent {for _ ,_bccd :=range _dcea ._bggab .tables (_dffg ){_befcd =append (_befcd ,_bccd );};};return _befcd ;
};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_dd AnchoredDrawing )SetName (name string ){_dd ._fc .DocPr .NameAttr =name ;for _ ,_ceg :=range _dd ._fc .Graphic .GraphicData .Any {if _dgf ,_gc :=_ceg .(*_cgd .Pic );_gc {_dgf .NvPicPr .CNvPr .DescrAttr =_d .String (name );};};};

// X returns the inner wrapped XML type.
func (_gagcb NumberingLevel )X ()*_bf .CT_Lvl {return _gagcb ._dfaa };func (_abbc *Document )addEndnotes (){_abbc ._cbfc =_bf .NewEndnotes ();_abbc .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0065\u006e\u0064\u006e\u006f\u0074\u0065\u0073\u002b\u0078\u006d\u006c");
_abbc ._bgf .AddRelationship ("\u002fw\u006fr\u0064\u002f\u0065\u006e\u0064n\u006f\u0074e\u0073\u002e\u0078\u006d\u006c",_d .EndNotesType );_dga :=_abbc .Styles .AddStyle (EndnoteTextStyleId ,_bf .ST_StyleTypeParagraph ,false );_dga .SetName ("\u0045\u006e\u0064n\u006f\u0074\u0065\u0020\u0054\u0065\u0078\u0074");
_dga .SetBasedOn ("\u004e\u006f\u0072\u006d\u0061\u006c");_cece :=_dga .ParagraphProperties ();_cece .X ().SuppressLineNumbers =&_bf .CT_OnOff {};_geg :=_dga .RunProperties ();_geg .X ().Sz =&_bf .CT_HpsMeasure {ValAttr :_bf .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgb }};
_geg .X ().SzCs =&_bf .CT_HpsMeasure {ValAttr :_bf .ST_HpsMeasure {ST_UnsignedDecimalNumber :&_cgb }};_dfga :=_abbc .Styles .AddStyle (_cbb ,_bf .ST_StyleTypeCharacter ,false );_dfga .SetName ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0020\u0052\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
_efa :=_dfga .RunProperties ();_efa .X ().VertAlign =&_bf .CT_VerticalAlignRun {ValAttr :_de .ST_VerticalAlignRunSuperscript };_abbc .addEndnoteSeparator ();};

// PutNodeAfter put node to position after relativeTo.
func (_afdbf *Document )PutNodeAfter (relativeTo ,node Node ){_afdbf .putNode (relativeTo ,node ,false )};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_abbga ParagraphProperties )SetFirstLineIndent (m _abg .Distance ){if _abbga ._fcdce .Ind ==nil {_abbga ._fcdce .Ind =_bf .NewCT_Ind ();};if m ==_abg .Zero {_abbga ._fcdce .Ind .FirstLineAttr =nil ;}else {_abbga ._fcdce .Ind .FirstLineAttr =&_de .ST_TwipsMeasure {};
_abbga ._fcdce .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_d .Uint64 (uint64 (m /_abg .Twips ));};};

// GetColor returns the color.Color object representing the run color.
func (_fdbc RunProperties )GetColor ()_ff .Color {if _fdcbg :=_fdbc ._gaffa .Color ;_fdcbg !=nil {_gdbeg :=_fdcbg .ValAttr ;if _gdbeg .ST_HexColorRGB !=nil {return _ff .FromHex (*_gdbeg .ST_HexColorRGB );};};return _ff .Color {};};func _gggde ()*_ga .Imagedata {_cbbef :=_ga .NewImagedata ();
_geda :="\u0072\u0049\u0064\u0031";_cadbc :="\u0057A\u0054\u0045\u0052\u004d\u0041\u0052K";_cbbef .IdAttr =&_geda ;_cbbef .TitleAttr =&_cadbc ;return _cbbef ;};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_ggca Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_ggca ._eebg .UpdateFields =nil ;}else {_ggca ._eebg .UpdateFields =_bf .NewCT_OnOff ();};};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_dega *Document ;_fcdce *_bf .CT_PPr ;};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_bgcgd RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_bgcgd ._gaffa .Dstrike =nil ;}else {_bgcgd ._gaffa .Dstrike =_bf .NewCT_OnOff ();};};

// RemoveParagraph removes a paragraph from a footer.
func (_ccab Footer )RemoveParagraph (p Paragraph ){for _ ,_fdfbd :=range _ccab ._cbgde .EG_ContentBlockContent {for _cedg ,_cgbc :=range _fdfbd .P {if _cgbc ==p ._dbga {copy (_fdfbd .P [_cedg :],_fdfbd .P [_cedg +1:]);_fdfbd .P =_fdfbd .P [0:len (_fdfbd .P )-1];
return ;};};};};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_dfab TableProperties )SetCellSpacingPercent (pct float64 ){_dfab ._daef .TblCellSpacing =_bf .NewCT_TblWidth ();_dfab ._daef .TblCellSpacing .TypeAttr =_bf .ST_TblWidthPct ;_dfab ._daef .TblCellSpacing .WAttr =&_bf .ST_MeasurementOrPercent {};_dfab ._daef .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_bf .ST_DecimalNumberOrPercent {};
_dfab ._daef .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_d .Int64 (int64 (pct *50));};

// SetPictureSize set watermark picture size with given width and height.
func (_efag *WatermarkPicture )SetPictureSize (width ,height int64 ){if _efag ._gbdfg !=nil {_bdfd :=_efag .GetShapeStyle ();_bdfd .SetWidth (float64 (width )*_abg .Point );_bdfd .SetHeight (float64 (height )*_abg .Point );_efag .SetShapeStyle (_bdfd );
};};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_gag *Document ;_fc *_bf .WdAnchor ;};