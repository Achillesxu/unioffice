//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*

Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_f "archive/zip";_gga "bytes";_ga "errors";_bcf "fmt";_a "github.com/unidoc/unioffice";_fa "github.com/unidoc/unioffice/color";_fc "github.com/unidoc/unioffice/common";_aef "github.com/unidoc/unioffice/common/axcontrol";_bd "github.com/unidoc/unioffice/common/logger";_cf "github.com/unidoc/unioffice/common/tempstorage";_gfa "github.com/unidoc/unioffice/internal/formatutils";_ae "github.com/unidoc/unioffice/internal/license";_bda "github.com/unidoc/unioffice/measurement";_cb "github.com/unidoc/unioffice/schema/schemas.microsoft.com/office/activeX";_fb "github.com/unidoc/unioffice/schema/soo/dml";_ea "github.com/unidoc/unioffice/schema/soo/dml/chart";_cag "github.com/unidoc/unioffice/schema/soo/dml/picture";_aea "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_ec "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_dg "github.com/unidoc/unioffice/schema/soo/wml";_fab "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_e "github.com/unidoc/unioffice/vmldrawing";_ad "github.com/unidoc/unioffice/zippkg";_gf "image";_ca "image/jpeg";_da "io";_b "math/rand";_c "os";_bb "path/filepath";_gg "regexp";_bc "strings";_d "unicode";);

// X returns the inner wrapped XML type.
func (_gdag TableWidth )X ()*_dg .CT_TblWidth {return _gdag ._gdca };

// Borders allows manipulation of the table borders.
func (_caaf TableStyleProperties )Borders ()TableBorders {if _caaf ._cgdg .TblBorders ==nil {_caaf ._cgdg .TblBorders =_dg .NewCT_TblBorders ();};return TableBorders {_caaf ._cgdg .TblBorders };};

// Shadow returns true if run shadow is on.
func (_afag RunProperties )Shadow ()bool {return _bdba (_afag ._eafe .Shadow )};

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_fcbaa RunProperties )SetVerticalAlignment (v _aea .ST_VerticalAlignRun ){if v ==_aea .ST_VerticalAlignRunUnset {_fcbaa ._eafe .VertAlign =nil ;}else {_fcbaa ._eafe .VertAlign =_dg .NewCT_VerticalAlignRun ();_fcbaa ._eafe .VertAlign .ValAttr =v ;};};

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_dagd FormField )PossibleValues ()[]string {if _dagd ._fada .DdList ==nil {return nil ;};_cgeb :=[]string {};for _ ,_deba :=range _dagd ._fada .DdList .ListEntry {if _deba ==nil {continue ;};_cgeb =append (_cgeb ,_deba .ValAttr );};return _cgeb ;};

// SetColor sets the text color.
func (_dbad RunProperties )SetColor (c _fa .Color ){_dbad ._eafe .Color =_dg .NewCT_Color ();_dbad ._eafe .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_geg *Document )HasEndnotes ()bool {return _geg ._abbb !=nil };

// SetSmallCaps sets the run to small caps.
func (_dceg RunProperties )SetSmallCaps (b bool ){if !b {_dceg ._eafe .SmallCaps =nil ;}else {_dceg ._eafe .SmallCaps =_dg .NewCT_OnOff ();};};func (_gcfa Paragraph )insertRun (_gfac Run ,_bcbd bool )Run {for _ ,_fbcc :=range _gcfa ._agbe .EG_PContent {for _adca ,_cgaad :=range _fbcc .EG_ContentRunContent {if _cgaad .R ==_gfac .X (){_cbed :=_dg .NewCT_R ();_fbcc .EG_ContentRunContent =append (_fbcc .EG_ContentRunContent ,nil );if _bcbd {copy (_fbcc .EG_ContentRunContent [_adca +1:],_fbcc .EG_ContentRunContent [_adca :]);_fbcc .EG_ContentRunContent [_adca ]=_dg .NewEG_ContentRunContent ();_fbcc .EG_ContentRunContent [_adca ].R =_cbed ;}else {copy (_fbcc .EG_ContentRunContent [_adca +2:],_fbcc .EG_ContentRunContent [_adca +1:]);_fbcc .EG_ContentRunContent [_adca +1]=_dg .NewEG_ContentRunContent ();_fbcc .EG_ContentRunContent [_adca +1].R =_cbed ;};return Run {_gcfa ._baff ,_cbed };};if _cgaad .Sdt !=nil &&_cgaad .Sdt .SdtContent !=nil {for _ ,_fefcc :=range _cgaad .Sdt .SdtContent .EG_ContentRunContent {if _fefcc .R ==_gfac .X (){_fadc :=_dg .NewCT_R ();_cgaad .Sdt .SdtContent .EG_ContentRunContent =append (_cgaad .Sdt .SdtContent .EG_ContentRunContent ,nil );if _bcbd {copy (_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca +1:],_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca :]);_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca ]=_dg .NewEG_ContentRunContent ();_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca ].R =_fadc ;}else {copy (_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca +2:],_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca +1:]);_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca +1]=_dg .NewEG_ContentRunContent ();_cgaad .Sdt .SdtContent .EG_ContentRunContent [_adca +1].R =_fadc ;};return Run {_gcfa ._baff ,_fadc };};};};};};return _gcfa .AddRun ();};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_aca *Document )Paragraphs ()[]Paragraph {_beag :=[]Paragraph {};if _aca ._fabd .Body ==nil {return nil ;};for _ ,_acdd :=range _aca ._fabd .Body .EG_BlockLevelElts {for _ ,_gbg :=range _acdd .EG_ContentBlockContent {for _ ,_fafdb :=range _gbg .P {_beag =append (_beag ,Paragraph {_aca ,_fafdb });};};};for _ ,_fcc :=range _aca .Tables (){for _ ,_edda :=range _fcc .Rows (){for _ ,_dda :=range _edda .Cells (){_beag =append (_beag ,_dda .Paragraphs ()...);};};};return _beag ;};func _fgacf (_ffegb Paragraph )*_dg .CT_NumPr {_ffegb .ensurePPr ();if _ffegb ._agbe .PPr .NumPr ==nil {return nil ;};return _ffegb ._agbe .PPr .NumPr ;};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_dg .NewStyles ()}};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_abgf *Document ;_eagcd *_dg .WdInline ;};

// EastAsiaFont returns the name of run font family for East Asia.
func (_fgde RunProperties )EastAsiaFont ()string {if _efaaf :=_fgde ._eafe .RFonts ;_efaaf !=nil {if _efaaf .EastAsiaAttr !=nil {return *_efaaf .EastAsiaAttr ;};};return "";};

// SetLineSpacing controls the line spacing of the paragraph.
func (_edga ParagraphStyleProperties )SetLineSpacing (m _bda .Distance ,rule _dg .ST_LineSpacingRule ){if _edga ._cccfb .Spacing ==nil {_edga ._cccfb .Spacing =_dg .NewCT_Spacing ();};if rule ==_dg .ST_LineSpacingRuleUnset {_edga ._cccfb .Spacing .LineRuleAttr =_dg .ST_LineSpacingRuleUnset ;_edga ._cccfb .Spacing .LineAttr =nil ;}else {_edga ._cccfb .Spacing .LineRuleAttr =rule ;_edga ._cccfb .Spacing .LineAttr =&_dg .ST_SignedTwipsMeasure {};_edga ._cccfb .Spacing .LineAttr .Int64 =_a .Int64 (int64 (m /_bda .Twips ));};};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_fbbf TableLook )SetVerticalBanding (on bool ){if !on {_fbbf ._ccbcf .NoVBandAttr =&_aea .ST_OnOff {};_fbbf ._ccbcf .NoVBandAttr .ST_OnOff1 =_aea .ST_OnOff1On ;}else {_fbbf ._ccbcf .NoVBandAttr =&_aea .ST_OnOff {};_fbbf ._ccbcf .NoVBandAttr .ST_OnOff1 =_aea .ST_OnOff1Off ;};};

// SetThemeShade sets the shade based off the theme color.
func (_bfg Color )SetThemeShade (s uint8 ){_ddbb :=_bcf .Sprintf ("\u0025\u0030\u0032\u0078",s );_bfg ._dad .ThemeShadeAttr =&_ddbb ;};

// SetSize sets the font size for a run.
func (_efde RunProperties )SetSize (size _bda .Distance ){_efde ._eafe .Sz =_dg .NewCT_HpsMeasure ();_efde ._eafe .Sz .ValAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (size /_bda .HalfPoint ));_efde ._eafe .SzCs =_dg .NewCT_HpsMeasure ();_efde ._eafe .SzCs .ValAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (size /_bda .HalfPoint ));};

// Paragraph is a paragraph within a document.
type Paragraph struct{_baff *Document ;_agbe *_dg .CT_P ;};

// X returns the inner wrapped XML type.
func (_ag CellProperties )X ()*_dg .CT_TcPr {return _ag ._ff };

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_bbfgaf TableStyleProperties )SetCellSpacingAuto (){_bbfgaf ._cgdg .TblCellSpacing =_dg .NewCT_TblWidth ();_bbfgaf ._cgdg .TblCellSpacing .TypeAttr =_dg .ST_TblWidthAuto ;};func _dbcga (_eeec *_dg .CT_P ,_ccdg *_dg .CT_Hyperlink ,_eabe *TableInfo ,_fcge *DrawingInfo ,_cdcd []*_dg .EG_PContent )[]TextItem {if len (_cdcd )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_fcge ,Paragraph :_eeec ,Hyperlink :_ccdg ,Run :nil ,TableInfo :_eabe }};};_dcbf :=[]TextItem {};for _ ,_bafg :=range _cdcd {for _ ,_ddde :=range _bafg .FldSimple {if _ddde !=nil {_dcbf =append (_dcbf ,_dbcga (_eeec ,_ccdg ,_eabe ,_fcge ,_ddde .EG_PContent )...);};};if _defd :=_bafg .Hyperlink ;_defd !=nil {_dcbf =append (_dcbf ,_cacd (_eeec ,_defd ,_eabe ,_fcge ,_defd .EG_ContentRunContent )...);};_dcbf =append (_dcbf ,_cacd (_eeec ,nil ,_eabe ,_fcge ,_bafg .EG_ContentRunContent )...);};return _dcbf ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_ggffg ParagraphBorders )SetTop (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_ggffg ._feafb .Top =_dg .NewCT_Border ();_fdcgc (_ggffg ._feafb .Top ,t ,c ,thickness );};

// Fonts returns the style's Fonts.
func (_gcedc RunProperties )Fonts ()Fonts {if _gcedc ._eafe .RFonts ==nil {_gcedc ._eafe .RFonts =_dg .NewCT_Fonts ();};return Fonts {_gcedc ._eafe .RFonts };};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_bddc TableProperties )SetCellSpacingAuto (){_bddc ._dbccb .TblCellSpacing =_dg .NewCT_TblWidth ();_bddc ._dbccb .TblCellSpacing .TypeAttr =_dg .ST_TblWidthAuto ;};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_adff *Document )FormFields ()[]FormField {_ebab :=[]FormField {};for _ ,_cebff :=range _adff .Paragraphs (){_cbdc :=_cebff .Runs ();for _ggg ,_dgaf :=range _cbdc {for _ ,_fgee :=range _dgaf ._ceca .EG_RunInnerContent {if _fgee .FldChar ==nil ||_fgee .FldChar .FfData ==nil {continue ;};if _fgee .FldChar .FldCharTypeAttr ==_dg .ST_FldCharTypeBegin {if len (_fgee .FldChar .FfData .Name )==0||_fgee .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_fgeb :=FormField {_fada :_fgee .FldChar .FfData };if _fgee .FldChar .FfData .TextInput !=nil {for _dabc :=_ggg +1;_dabc < len (_cbdc )-1;_dabc ++{if len (_cbdc [_dabc ]._ceca .EG_RunInnerContent )==0{continue ;};_ffeb :=_cbdc [_dabc ]._ceca .EG_RunInnerContent [0];if _ffeb .FldChar !=nil &&_ffeb .FldChar .FldCharTypeAttr ==_dg .ST_FldCharTypeSeparate {if len (_cbdc [_dabc +1]._ceca .EG_RunInnerContent )==0{continue ;};if _cbdc [_dabc +1]._ceca .EG_RunInnerContent [0].FldChar ==nil {_fgeb ._daef =_cbdc [_dabc +1]._ceca .EG_RunInnerContent [0];break ;};};};};_ebab =append (_ebab ,_fgeb );};};};};return _ebab ;};

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_edaca NumberingLevel )RunProperties ()RunProperties {if _edaca ._dggbd .RPr ==nil {_edaca ._dggbd .RPr =_dg .NewCT_RPr ();};return RunProperties {_edaca ._dggbd .RPr };};const _bcdf ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";

// Outline returns true if paragraph outline is on.
func (_fbbd ParagraphProperties )Outline ()bool {return _bdba (_fbbd ._efcd .RPr .Outline )};

// X returns the inner wrapped XML type.
func (_bgd Cell )X ()*_dg .CT_Tc {return _bgd ._ddb };

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_efdde ParagraphProperties )RStyle ()string {if _efdde ._efcd .RPr .RStyle !=nil {return _efdde ._efcd .RPr .RStyle .ValAttr ;};return "";};func _cacb (_bfgce *_fb .CT_Blip ,_gccg map[string ]string ){if _bfgce .EmbedAttr !=nil {if _gdace ,_aedc :=_gccg [*_bfgce .EmbedAttr ];_aedc {*_bfgce .EmbedAttr =_gdace ;};};};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_ecea Run )AddTab (){_fadag :=_ecea .newIC ();_fadag .Tab =_dg .NewCT_Empty ()};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_adbc Footer )AddImage (i _fc .Image )(_fc .ImageRef ,error ){var _fafeg _fc .Relationships ;for _gbbc ,_aacf :=range _adbc ._bccf ._dcfe {if _aacf ==_adbc ._cfaa {_fafeg =_adbc ._bccf ._bcg [_gbbc ];};};_fefb :=_fc .MakeImageRef (i ,&_adbc ._bccf .DocBase ,_fafeg );if i .Data ==nil &&i .Path ==""{return _fefb ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _fefb ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _fefb ,_ga .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_adbc ._bccf .Images =append (_adbc ._bccf .Images ,_fefb );_aead :=_bcf .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_adbc ._bccf .Images ),i .Format );_gffb :=_fafeg .AddRelationship (_aead ,_a .ImageType );_fefb .SetRelID (_gffb .X ().IdAttr );return _fefb ,nil ;};

// NewWatermarkText generates a new WatermarkText.
func NewWatermarkText ()WatermarkText {_afgf :=_fab .NewShapetype ();_eebgf :=_fab .NewEG_ShapeElements ();_eebgf .Formulas =_egfbg ();_eebgf .Path =_cea ();_eebgf .Textpath =_fede ();_eebgf .Handles =_gfgc ();_eebgf .Lock =_gaaf ();_afgf .EG_ShapeElements =[]*_fab .EG_ShapeElements {_eebgf };var (_faffe ="_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_bgbfc ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_cdcea =float32 (136.0);_bafb ="\u0031\u0030\u00380\u0030";_afgff ="m\u0040\u0037\u002c\u006c\u0040\u0038,\u006d\u0040\u0035\u002c\u0032\u0031\u0036\u0030\u0030l\u0040\u0036\u002c2\u00316\u0030\u0030\u0065";);_afgf .IdAttr =&_faffe ;_afgf .CoordsizeAttr =&_bgbfc ;_afgf .SptAttr =&_cdcea ;_afgf .AdjAttr =&_bafb ;_afgf .PathAttr =&_afgff ;_dabg :=_fab .NewShape ();_ebca :=_fab .NewEG_ShapeElements ();_ebca .Textpath =_febdd ();_dabg .EG_ShapeElements =[]*_fab .EG_ShapeElements {_ebca };var (_cddc ="\u0050\u006f\u0077\u0065\u0072\u0050l\u0075\u0073\u0057\u0061\u0074\u0065\u0072\u004d\u0061\u0072\u006b\u004f\u0062j\u0065\u0063\u0074\u0031\u0033\u0036\u00380\u0030\u0038\u0038\u0036";_bcbb ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_ccegb ="\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_fffff ="";_cdfe ="\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065f\u0074:\u0030\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074o\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0034\u0036\u0038\u0070\u0074;\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0032\u0033\u0034\u0070\u0074\u003b\u007a\u002d\u0069\u006ede\u0078\u003a\u002d\u0032\u0035\u0031\u0036\u0035\u0031\u0030\u0037\u0032\u003b\u006d\u0073\u006f\u002d\u0077\u0072\u0061\u0070\u002d\u0065\u0064\u0069\u0074\u0065\u0064\u003a\u0066\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0068\u0065\u0069\u0067h\u0074-p\u0065\u0072\u0063\u0065\u006et\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070o\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065l\u0061\u0074\u0069\u0076\u0065:\u006d\u0061\u0072\u0067\u0069n\u003b\u006d\u0073o\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e-\u0076\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065r\u0074\u0069\u0063\u0061\u006c\u002d\u0072e\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063e\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dh\u0065\u0069\u0067\u0068t\u002dp\u0065\u0072\u0063\u0065\u006et\u003a0";_gbadc ="\u0073\u0069\u006c\u0076\u0065\u0072";);_dabg .IdAttr =&_cddc ;_dabg .SpidAttr =&_bcbb ;_dabg .TypeAttr =&_ccegb ;_dabg .AltAttr =&_fffff ;_dabg .StyleAttr =&_cdfe ;_dabg .AllowincellAttr =_aea .ST_TrueFalseFalse ;_dabg .FillcolorAttr =&_gbadc ;_dabg .StrokedAttr =_aea .ST_TrueFalseFalse ;_cbgca :=_dg .NewCT_Picture ();_cbgca .Any =[]_a .Any {_afgf ,_dabg };return WatermarkText {_fded :_cbgca ,_fgdf :_dabg ,_fccd :_afgf };};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_agbdg RunProperties )ComplexSizeValue ()float64 {if _becf :=_agbdg ._eafe .SzCs ;_becf !=nil {_eeaefe :=_becf .ValAttr ;if _eeaefe .ST_UnsignedDecimalNumber !=nil {return float64 (*_eeaefe .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// StyleID returns the style ID.
func (_ebgg Style )StyleID ()string {if _ebgg ._ddgd .StyleIdAttr ==nil {return "";};return *_ebgg ._ddgd .StyleIdAttr ;};

// Paragraphs returns the paragraphs defined in an endnote.
func (_gdef Endnote )Paragraphs ()[]Paragraph {_ecdb :=[]Paragraph {};for _ ,_cdcg :=range _gdef .content (){for _ ,_gdefg :=range _cdcg .P {_ecdb =append (_ecdb ,Paragraph {_gdef ._efaf ,_gdefg });};};return _ecdb ;};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// FindNodeByText return node based on matched text and return a slice of node.
func (_dbbba *Nodes )FindNodeByRegexp (r *_gg .Regexp )[]Node {_aacb :=[]Node {};for _ ,_bggc :=range _dbbba ._bfcf {if r .MatchString (_bggc .Text ()){_aacb =append (_aacb ,_bggc );};_cfcf :=Nodes {_bfcf :_bggc .Children };_aacb =append (_aacb ,_cfcf .FindNodeByRegexp (r )...);};return _aacb ;};

// X returns the inner wrapped XML type.
func (_gbgd Settings )X ()*_dg .Settings {return _gbgd ._fgfb };

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_dbaaa ParagraphProperties )CharacterSpacingMeasure ()string {if _acdf :=_dbaaa ._efcd .RPr .Spacing ;_acdf !=nil {_beca :=_acdf .ValAttr ;if _beca .ST_UniversalMeasure !=nil {return *_beca .ST_UniversalMeasure ;};};return "";};

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_eed CellProperties )SetVerticalAlignment (align _dg .ST_VerticalJc ){if align ==_dg .ST_VerticalJcUnset {_eed ._ff .VAlign =nil ;}else {_eed ._ff .VAlign =_dg .NewCT_VerticalJc ();_eed ._ff .VAlign .ValAttr =align ;};};

// SetName marks sets a name attribute for a FormField.
func (_gbdg FormField )SetName (name string ){_ggdg :=_dg .NewCT_FFName ();_ggdg .ValAttr =&name ;_gbdg ._fada .Name =[]*_dg .CT_FFName {_ggdg };};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_ffad *_dg .Numbering };

// SetFirstLineIndent controls the first line indent of the paragraph.
func (_ebdb ParagraphStyleProperties )SetFirstLineIndent (m _bda .Distance ){if _ebdb ._cccfb .Ind ==nil {_ebdb ._cccfb .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_ebdb ._cccfb .Ind .FirstLineAttr =nil ;}else {_ebdb ._cccfb .Ind .FirstLineAttr =&_aea .ST_TwipsMeasure {};_ebdb ._cccfb .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (m /_bda .Twips ));};};

// SetLeftPct sets the cell left margin
func (_ddc CellMargins )SetLeftPct (pct float64 ){_ddc ._beg .Left =_dg .NewCT_TblWidth ();_fee (_ddc ._beg .Left ,pct );};

// FindNodeByText return node based on matched text and return a slice of node.
func (_gcgb *Nodes )FindNodeByText (text string )[]Node {_efcf :=[]Node {};for _ ,_efca :=range _gcgb ._bfcf {if _bc .TrimSpace (_efca .Text ())==text {_efcf =append (_efcf ,_efca );};_bgfa :=Nodes {_bfcf :_efca .Children };_efcf =append (_efcf ,_bgfa .FindNodeByText (text )...);};return _efcf ;};

// CellBorders are the borders for an individual
type CellBorders struct{_ab *_dg .CT_TcBorders };func _effe (_cbeg *_dg .CT_Tbl ,_eccc map[string ]string ){for _ ,_eecec :=range _cbeg .EG_ContentRowContent {for _ ,_dffba :=range _eecec .Tr {for _ ,_dfff :=range _dffba .EG_ContentCellContent {for _ ,_fcdb :=range _dfff .Tc {for _ ,_dagb :=range _fcdb .EG_BlockLevelElts {for _ ,_dafc :=range _dagb .EG_ContentBlockContent {for _ ,_gagf :=range _dafc .P {_ggd (_gagf ,_eccc );};for _ ,_afa :=range _dafc .Tbl {_effe (_afa ,_eccc );};};};};};};};};func (_edcdb *Document )insertNumberingFromStyleProperties (_ebeea Numbering ,_ebag ParagraphStyleProperties ){_egbe :=_ebag .NumId ();_adee :=int64 (-1);if _egbe > -1{for _ ,_addge :=range _ebeea ._ffad .Num {if _addge .NumIdAttr ==_egbe {if _addge .AbstractNumId !=nil {_adee =_addge .AbstractNumId .ValAttr ;_ggef :=false ;for _ ,_bgbe :=range _edcdb .Numbering ._ffad .Num {if _bgbe .NumIdAttr ==_egbe {_ggef =true ;break ;};};if !_ggef {_edcdb .Numbering ._ffad .Num =append (_edcdb .Numbering ._ffad .Num ,_addge );};break ;};};};for _ ,_dacce :=range _ebeea ._ffad .AbstractNum {if _dacce .AbstractNumIdAttr ==_adee {_dfbd :=false ;for _ ,_gdff :=range _edcdb .Numbering ._ffad .AbstractNum {if _gdff .AbstractNumIdAttr ==_adee {_dfbd =true ;break ;};};if !_dfbd {_edcdb .Numbering ._ffad .AbstractNum =append (_edcdb .Numbering ._ffad .AbstractNum ,_dacce );};break ;};};};};func _fcad (_ebfb *_dg .CT_P ,_eef map[string ]string ){for _ ,_ffgaa :=range _ebfb .EG_PContent {for _ ,_fafe :=range _ffgaa .EG_ContentRunContent {if _fafe .R !=nil {for _ ,_feed :=range _fafe .R .EG_RunInnerContent {_ebga :=_feed .Drawing ;if _ebga !=nil {for _ ,_eebc :=range _ebga .Anchor {for _ ,_gacf :=range _eebc .Graphic .GraphicData .Any {switch _cgf :=_gacf .(type ){case *_cag .Pic :if _cgf .BlipFill !=nil &&_cgf .BlipFill .Blip !=nil {_cacb (_cgf .BlipFill .Blip ,_eef );};default:};};};for _ ,_bdce :=range _ebga .Inline {for _ ,_defb :=range _bdce .Graphic .GraphicData .Any {switch _aaa :=_defb .(type ){case *_cag .Pic :if _aaa .BlipFill !=nil &&_aaa .BlipFill .Blip !=nil {_cacb (_aaa .BlipFill .Blip ,_eef );};default:};};};};};};};};};

// AddParagraph adds a paragraph to the footer.
func (_fagdg Footer )AddParagraph ()Paragraph {_fcgg :=_dg .NewEG_ContentBlockContent ();_fagdg ._cfaa .EG_ContentBlockContent =append (_fagdg ._cfaa .EG_ContentBlockContent ,_fcgg );_abgag :=_dg .NewCT_P ();_fcgg .P =append (_fcgg .P ,_abgag );return Paragraph {_fagdg ._bccf ,_abgag };};func _bbabf (_gcbb *_dg .CT_P ,_dcab ,_deda map[int64 ]int64 ){for _ ,_gbcb :=range _gcbb .EG_PContent {for _ ,_dbfb :=range _gbcb .EG_ContentRunContent {if _dbfb .R !=nil {for _ ,_bdcb :=range _dbfb .R .EG_RunInnerContent {_aeea :=_bdcb .EndnoteReference ;if _aeea !=nil &&_aeea .IdAttr > 0{if _agfc ,_dfea :=_deda [_aeea .IdAttr ];_dfea {_aeea .IdAttr =_agfc ;};};_eeed :=_bdcb .FootnoteReference ;if _eeed !=nil &&_eeed .IdAttr > 0{if _ffga ,_caga :=_dcab [_eeed .IdAttr ];_caga {_eeed .IdAttr =_ffga ;};};};};};};};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_cebf *Document )GetImageByRelID (relID string )(_fc .ImageRef ,bool ){_fbgf :=_cebf ._eega .GetTargetByRelId (relID );_cbae :="";for _ ,_dfg :=range _cebf ._gbc {if _cbae !=""{break ;};_cbae =_dfg .GetTargetByRelId (relID );};for _ ,_gea :=range _cebf .Images {if _gea .RelID ()==relID {return _gea ,true ;};if _fbgf !=""{_ffgb :=_bc .Replace (_gea .Target (),"\u0077\u006f\u0072d\u002f","",1);if _ffgb ==_fbgf {if _gea .RelID ()==""{_gea .SetRelID (relID );};return _gea ,true ;};};if _cbae !=""{_bacb :=_bc .Replace (_gea .Target (),"\u0077\u006f\u0072d\u002f","",1);if _bacb ==_cbae {if _gea .RelID ()==""{_gea .SetRelID (relID );};return _gea ,true ;};};};return _fc .ImageRef {},false ;};

// SetMultiLevelType sets the multilevel type.
func (_dfbc NumberingDefinition )SetMultiLevelType (t _dg .ST_MultiLevelType ){if t ==_dg .ST_MultiLevelTypeUnset {_dfbc ._ebgf .MultiLevelType =nil ;}else {_dfbc ._ebgf .MultiLevelType =_dg .NewCT_MultiLevelType ();_dfbc ._ebgf .MultiLevelType .ValAttr =t ;};};

// SetLeft sets the left border to a specified type, color and thickness.
func (_geec ParagraphBorders )SetLeft (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_geec ._feafb .Left =_dg .NewCT_Border ();_fdcgc (_geec ._feafb .Left ,t ,c ,thickness );};

// AddRow adds a row to a table.
func (_gdgf Table )AddRow ()Row {_ffeda :=_dg .NewEG_ContentRowContent ();_gdgf ._ebff .EG_ContentRowContent =append (_gdgf ._ebff .EG_ContentRowContent ,_ffeda );_dcdfa :=_dg .NewCT_Row ();_ffeda .Tr =append (_ffeda .Tr ,_dcdfa );return Row {_gdgf ._bddf ,_dcdfa };};func (_faeg *Document )save (_efff _da .Writer ,_fbcf string )error {const _ged ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";if _baa :=_faeg ._fabd .Validate ();_baa !=nil {_bd .Log .Warning ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_baa );};_gdf :=_a .DocTypeDocument ;if !_ae .GetLicenseKey ().IsLicensed ()&&!_ffd {_bcf .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_bcf .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _ga .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_faeg ._gcc )==0{if len (_fbcf )> 0{_faeg ._gcc =_fbcf ;}else {_acc ,_fdca :=_ae .GenRefId ("\u0064\u0077");if _fdca !=nil {_bd .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fdca );return _fdca ;};_faeg ._gcc =_acc ;};};if _eccd :=_ae .Track (_faeg ._gcc ,_ged );_eccd !=nil {_bd .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_eccd );return _eccd ;};_gaa :=_f .NewWriter (_efff );defer _gaa .Close ();if _gfaf :=_ad .MarshalXML (_gaa ,_a .BaseRelsFilename ,_faeg .Rels .X ());_gfaf !=nil {return _gfaf ;};if _bbfa :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .ExtendedPropertiesType ,_faeg .AppProperties .X ());_bbfa !=nil {return _bbfa ;};if _eege :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .CorePropertiesType ,_faeg .CoreProperties .X ());_eege !=nil {return _eege ;};if _faeg .CustomProperties .X ()!=nil {if _bef :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .CustomPropertiesType ,_faeg .CustomProperties .X ());_bef !=nil {return _bef ;};};if _faeg .Thumbnail !=nil {_bgf ,_cbb :=_gaa .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _cbb !=nil {return _cbb ;};if _cfc :=_ca .Encode (_bgf ,_faeg .Thumbnail ,nil );_cfc !=nil {return _cfc ;};};if _aegg :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .SettingsType ,_faeg .Settings .X ());_aegg !=nil {return _aegg ;};_eedb :=_a .AbsoluteFilename (_gdf ,_a .OfficeDocumentType ,0);if _cad :=_ad .MarshalXML (_gaa ,_eedb ,_faeg ._fabd );_cad !=nil {return _cad ;};if _gbcc :=_ad .MarshalXML (_gaa ,_ad .RelationsPathFor (_eedb ),_faeg ._eega .X ());_gbcc !=nil {return _gbcc ;};if _faeg .Numbering .X ()!=nil {if _gcb :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .NumberingType ,_faeg .Numbering .X ());_gcb !=nil {return _gcb ;};};if _agf :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .StylesType ,_faeg .Styles .X ());_agf !=nil {return _agf ;};if _faeg ._fdf !=nil {if _dcg :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .WebSettingsType ,_faeg ._fdf );_dcg !=nil {return _dcg ;};};if _faeg ._egf !=nil {if _aggc :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .FontTableType ,_faeg ._egf );_aggc !=nil {return _aggc ;};};if _faeg ._abbb !=nil {if _adf :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .EndNotesType ,_faeg ._abbb );_adf !=nil {return _adf ;};};if _faeg ._dea !=nil {if _aeb :=_ad .MarshalXMLByType (_gaa ,_gdf ,_a .FootNotesType ,_faeg ._dea );_aeb !=nil {return _aeb ;};};for _aeggd ,_faf :=range _faeg ._cbef {if _fff :=_ad .MarshalXMLByTypeIndex (_gaa ,_gdf ,_a .ThemeType ,_aeggd +1,_faf );_fff !=nil {return _fff ;};};for _cc ,_bega :=range _faeg ._agg {_dfde ,_dgac :=_bega .ExportToByteArray ();if _dgac !=nil {return _dgac ;};_ece :="\u0077\u006f\u0072d\u002f"+_bega .TargetAttr [:len (_bega .TargetAttr )-4]+"\u002e\u0062\u0069\u006e";if _acg :=_ad .AddFileFromBytes (_gaa ,_ece ,_dfde );_acg !=nil {return _acg ;};if _cca :=_ad .MarshalXMLByTypeIndex (_gaa ,_gdf ,_a .ControlType ,_cc +1,_bega .Ocx );_cca !=nil {return _cca ;};};for _gfe ,_cfb :=range _faeg ._agd {_cba :=_a .AbsoluteFilename (_gdf ,_a .HeaderType ,_gfe +1);if _bea :=_ad .MarshalXML (_gaa ,_cba ,_cfb );_bea !=nil {return _bea ;};if !_faeg ._gbc [_gfe ].IsEmpty (){_ad .MarshalXML (_gaa ,_ad .RelationsPathFor (_cba ),_faeg ._gbc [_gfe ].X ());};};for _bcd ,_dgga :=range _faeg ._dcfe {_ddge :=_a .AbsoluteFilename (_gdf ,_a .FooterType ,_bcd +1);if _ecd :=_ad .MarshalXMLByTypeIndex (_gaa ,_gdf ,_a .FooterType ,_bcd +1,_dgga );_ecd !=nil {return _ecd ;};if !_faeg ._bcg [_bcd ].IsEmpty (){_ad .MarshalXML (_gaa ,_ad .RelationsPathFor (_ddge ),_faeg ._bcg [_bcd ].X ());};};for _cfe ,_dgb :=range _faeg .Images {if _fca :=_fc .AddImageToZip (_gaa ,_dgb ,_cfe +1,_a .DocTypeDocument );_fca !=nil {return _fca ;};};for _fgf ,_bab :=range _faeg ._edb {_afd :=_a .AbsoluteFilename (_gdf ,_a .ChartType ,_fgf +1);_ad .MarshalXML (_gaa ,_afd ,_bab ._ega );};if _cgg :=_ad .MarshalXML (_gaa ,_a .ContentTypesFilename ,_faeg .ContentTypes .X ());_cgg !=nil {return _cgg ;};if _abbf :=_faeg .WriteExtraFiles (_gaa );_abbf !=nil {return _abbf ;};return _gaa .Close ();};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_agbca :=_dg .NewNumbering ();return Numbering {_agbca }};

// SetBetween sets the between border to a specified type, color and thickness between paragraph.
func (_bebcg ParagraphBorders )SetBetween (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_bebcg ._feafb .Between =_dg .NewCT_Border ();_fdcgc (_bebcg ._feafb .Between ,t ,c ,thickness );};

// AddField adds a field (automatically computed text) to the document.
func (_efbgf Run )AddField (code string ){_efbgf .AddFieldWithFormatting (code ,"",true )};

// SetKerning sets the run's font kerning.
func (_ddad RunProperties )SetKerning (size _bda .Distance ){_ddad ._eafe .Kern =_dg .NewCT_HpsMeasure ();_ddad ._eafe .Kern .ValAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (size /_bda .HalfPoint ));};

// Emboss returns true if run emboss is on.
func (_agdg RunProperties )Emboss ()bool {return _bdba (_agdg ._eafe .Emboss )};type chart struct{_ega *_ea .ChartSpace ;_eadg string ;_dfe string ;};

// DoubleStrike returns true if run is double striked.
func (_eadc RunProperties )DoubleStrike ()bool {return _bdba (_eadc ._eafe .Dstrike )};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_adegc FormField )SetChecked (b bool ){if _adegc ._fada .CheckBox ==nil {return ;};if !b {_adegc ._fada .CheckBox .Checked =nil ;}else {_adegc ._fada .CheckBox .Checked =_dg .NewCT_OnOff ();};};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_fgg CellProperties )SetColumnSpan (cols int ){if cols ==0{_fgg ._ff .GridSpan =nil ;}else {_fgg ._ff .GridSpan =_dg .NewCT_DecimalNumber ();_fgg ._ff .GridSpan .ValAttr =int64 (cols );};};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_dfeb *Document )AddImage (i _fc .Image )(_fc .ImageRef ,error ){_gdbd :=_fc .MakeImageRef (i ,&_dfeb .DocBase ,_dfeb ._eega );if i .Data ==nil &&i .Path ==""{return _gdbd ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _gdbd ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _gdbd ,_ga .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_ace :=_cf .Add (i .Path );if _ace !=nil {return _gdbd ,_ace ;};};_dfeb .Images =append (_dfeb .Images ,_gdbd );_afb :=_bcf .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_dfeb .Images ),i .Format );_afcc :=_dfeb ._eega .AddRelationship (_afb ,_a .ImageType );_dfeb .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_dfeb .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_dfeb .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_dfeb .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_dfeb .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );_gdbd .SetRelID (_afcc .X ().IdAttr );_gdbd .SetTarget (_afb );return _gdbd ,nil ;};

// Tables returns the tables defined in the header.
func (_ffdec Header )Tables ()[]Table {_eefg :=[]Table {};if _ffdec ._abge ==nil {return nil ;};for _ ,_dbcb :=range _ffdec ._abge .EG_ContentBlockContent {for _ ,_gbdd :=range _ffdec ._fgabf .tables (_dbcb ){_eefg =append (_eefg ,_gbdd );};};return _eefg ;};

// UnderlineColor returns the hex color value of paragraph underline.
func (_cdcdd ParagraphProperties )UnderlineColor ()string {if _abfda :=_cdcdd ._efcd .RPr .U ;_abfda !=nil {_bdcdc :=_abfda .ColorAttr ;if _bdcdc !=nil &&_bdcdc .ST_HexColorRGB !=nil {return *_bdcdc .ST_HexColorRGB ;};};return "";};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_ffce *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _ffce .insertParagraph (relativeTo ,true );};func _bdba (_aeab *_dg .CT_OnOff )bool {return _aeab !=nil };

// RemoveParagraph removes a paragraph from a document.
func (_dddb *Document )RemoveParagraph (p Paragraph ){if _dddb ._fabd .Body ==nil {return ;};for _ ,_bdea :=range _dddb ._fabd .Body .EG_BlockLevelElts {for _ ,_egdc :=range _bdea .EG_ContentBlockContent {for _aabf ,_gbec :=range _egdc .P {if _gbec ==p ._agbe {copy (_egdc .P [_aabf :],_egdc .P [_aabf +1:]);_egdc .P =_egdc .P [0:len (_egdc .P )-1];return ;};};if _egdc .Sdt !=nil &&_egdc .Sdt .SdtContent !=nil &&_egdc .Sdt .SdtContent .P !=nil {for _eece ,_bed :=range _egdc .Sdt .SdtContent .P {if _bed ==p ._agbe {copy (_egdc .P [_eece :],_egdc .P [_eece +1:]);_egdc .P =_egdc .P [0:len (_egdc .P )-1];return ;};};};};};for _ ,_gdfg :=range _dddb .Tables (){for _ ,_adga :=range _gdfg .Rows (){for _ ,_dcff :=range _adga .Cells (){for _ ,_cgb :=range _dcff ._ddb .EG_BlockLevelElts {for _ ,_faed :=range _cgb .EG_ContentBlockContent {for _bcfd ,_fcg :=range _faed .P {if _fcg ==p ._agbe {copy (_faed .P [_bcfd :],_faed .P [_bcfd +1:]);_faed .P =_faed .P [0:len (_faed .P )-1];return ;};};};};};};};for _ ,_gdc :=range _dddb .Headers (){_gdc .RemoveParagraph (p );};for _ ,_dab :=range _dddb .Footers (){_dab .RemoveParagraph (p );};};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_bbca ParagraphProperties )ComplexSizeMeasure ()string {if _dadbc :=_bbca ._efcd .RPr .SzCs ;_dadbc !=nil {_fcbg :=_dadbc .ValAttr ;if _fcbg .ST_PositiveUniversalMeasure !=nil {return *_fcbg .ST_PositiveUniversalMeasure ;};};return "";};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to display on a separate page.
func (_eged ParagraphProperties )SetWindowControl (b bool ){if !b {_eged ._efcd .WidowControl =nil ;}else {_eged ._efcd .WidowControl =_dg .NewCT_OnOff ();};};

// Color returns the style's Color.
func (_gcadc RunProperties )Color ()Color {if _gcadc ._eafe .Color ==nil {_gcadc ._eafe .Color =_dg .NewCT_Color ();};return Color {_gcadc ._eafe .Color };};

// Runs returns all of the runs in a paragraph.
func (_bfbf Paragraph )Runs ()[]Run {_cbagb :=[]Run {};for _ ,_gcbbe :=range _bfbf ._agbe .EG_PContent {if _gcbbe .Hyperlink !=nil &&_gcbbe .Hyperlink .EG_ContentRunContent !=nil {for _ ,_eeac :=range _gcbbe .Hyperlink .EG_ContentRunContent {if _eeac .R !=nil {_cbagb =append (_cbagb ,Run {_bfbf ._baff ,_eeac .R });};};};for _ ,_fcga :=range _gcbbe .EG_ContentRunContent {if _fcga .R !=nil {_cbagb =append (_cbagb ,Run {_bfbf ._baff ,_fcga .R });};if _fcga .Sdt !=nil &&_fcga .Sdt .SdtContent !=nil {for _ ,_gbeb :=range _fcga .Sdt .SdtContent .EG_ContentRunContent {if _gbeb .R !=nil {_cbagb =append (_cbagb ,Run {_bfbf ._baff ,_gbeb .R });};};};};};return _cbagb ;};

// SetEnabled marks a FormField as enabled or disabled.
func (_ffdf FormField )SetEnabled (enabled bool ){_cabc :=_dg .NewCT_OnOff ();_cabc .ValAttr =&_aea .ST_OnOff {Bool :&enabled };_ffdf ._fada .Enabled =[]*_dg .CT_OnOff {_cabc };};

// Paragraphs returns the paragraphs defined in the cell.
func (_eea Cell )Paragraphs ()[]Paragraph {_fed :=[]Paragraph {};for _ ,_fbd :=range _eea ._ddb .EG_BlockLevelElts {for _ ,_gce :=range _fbd .EG_ContentBlockContent {for _ ,_eeg :=range _gce .P {_fed =append (_fed ,Paragraph {_eea ._bf ,_eeg });};};};return _fed ;};func (_fabeg FormFieldType )String ()string {if _fabeg >=FormFieldType (len (_abcg )-1){return _bcf .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fabeg );};return _bcdf [_abcg [_fabeg ]:_abcg [_fabeg +1]];};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_abgbb Document )SetStrict (strict bool ){if strict {_abgbb ._fabd .ConformanceAttr =_aea .ST_ConformanceClassStrict ;}else {_abgbb ._fabd .ConformanceAttr =_aea .ST_ConformanceClassTransitional ;};};

// PutNodeAfter put node to position after relativeTo.
func (_gff *Document )PutNodeAfter (relativeTo ,node Node ){_gff .putNode (relativeTo ,node ,false )};func (_gbe *Document )appendTable (_fdaf *Paragraph ,_cgga Table ,_baaf bool )Table {_fbaf :=_gbe ._fabd .Body ;_ccba :=_dg .NewEG_BlockLevelElts ();_gbe ._fabd .Body .EG_BlockLevelElts =append (_gbe ._fabd .Body .EG_BlockLevelElts ,_ccba );_ced :=_dg .NewEG_ContentBlockContent ();_ccba .EG_ContentBlockContent =append (_ccba .EG_ContentBlockContent ,_ced );if _fdaf !=nil {_dbd :=_fdaf .X ();for _abd ,_fbae :=range _fbaf .EG_BlockLevelElts {for _ ,_aadg :=range _fbae .EG_ContentBlockContent {for _feb ,_cbc :=range _ced .P {if _cbc ==_dbd {_fafg :=_cgga .X ();_bcef :=_dg .NewEG_BlockLevelElts ();_cbd :=_dg .NewEG_ContentBlockContent ();_bcef .EG_ContentBlockContent =append (_bcef .EG_ContentBlockContent ,_cbd );_cbd .Tbl =append (_cbd .Tbl ,_fafg );_fbaf .EG_BlockLevelElts =append (_fbaf .EG_BlockLevelElts ,nil );if _baaf {copy (_fbaf .EG_BlockLevelElts [_abd +1:],_fbaf .EG_BlockLevelElts [_abd :]);_fbaf .EG_BlockLevelElts [_abd ]=_bcef ;if _feb !=0{_ecdg :=_dg .NewEG_BlockLevelElts ();_egef :=_dg .NewEG_ContentBlockContent ();_ecdg .EG_ContentBlockContent =append (_ecdg .EG_ContentBlockContent ,_egef );_egef .P =_aadg .P [:_feb ];_fbaf .EG_BlockLevelElts =append (_fbaf .EG_BlockLevelElts ,nil );copy (_fbaf .EG_BlockLevelElts [_abd +1:],_fbaf .EG_BlockLevelElts [_abd :]);_fbaf .EG_BlockLevelElts [_abd ]=_ecdg ;};_aadg .P =_aadg .P [_feb :];}else {copy (_fbaf .EG_BlockLevelElts [_abd +2:],_fbaf .EG_BlockLevelElts [_abd +1:]);_fbaf .EG_BlockLevelElts [_abd +1]=_bcef ;if _feb !=len (_aadg .P )-1{_ccfc :=_dg .NewEG_BlockLevelElts ();_bgg :=_dg .NewEG_ContentBlockContent ();_ccfc .EG_ContentBlockContent =append (_ccfc .EG_ContentBlockContent ,_bgg );_bgg .P =_aadg .P [_feb +1:];_fbaf .EG_BlockLevelElts =append (_fbaf .EG_BlockLevelElts ,nil );copy (_fbaf .EG_BlockLevelElts [_abd +3:],_fbaf .EG_BlockLevelElts [_abd +2:]);_fbaf .EG_BlockLevelElts [_abd +2]=_ccfc ;};_aadg .P =_aadg .P [:_feb +1];};break ;};};for _ ,_fbed :=range _aadg .Tbl {_fafd :=_bag (_fbed ,_dbd ,_baaf );if _fafd !=nil {break ;};};};};}else {_ced .Tbl =append (_ced .Tbl ,_cgga .X ());};return Table {_gbe ,_cgga .X ()};};

// Properties returns the table properties.
func (_cadgd Table )Properties ()TableProperties {if _cadgd ._ebff .TblPr ==nil {_cadgd ._ebff .TblPr =_dg .NewCT_TblPr ();};return TableProperties {_cadgd ._ebff .TblPr };};

// GetStyleByID returns Style by it's IdAttr.
func (_fdfc *Document )GetStyleByID (id string )Style {for _ ,_cfada :=range _fdfc .Styles ._cfca .Style {if _cfada .StyleIdAttr !=nil &&*_cfada .StyleIdAttr ==id {return Style {_cfada };};};return Style {};};

// SearchStylesById returns style by its id.
func (_gdfc Styles )SearchStyleById (id string )(Style ,bool ){for _ ,_cfgda :=range _gdfc ._cfca .Style {if _cfgda .StyleIdAttr !=nil {if *_cfgda .StyleIdAttr ==id {return Style {_cfgda },true ;};};};return Style {},false ;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_eeada Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_eeada .ensurePPr ();if _eeada ._agbe .PPr .NumPr ==nil {_eeada ._agbe .PPr .NumPr =_dg .NewCT_NumPr ();};_ceece :=_dg .NewCT_DecimalNumber ();_ceece .ValAttr =int64 (abstractNumberID );_eeada ._agbe .PPr .NumPr .NumId =_ceece ;};

// X returns the inner wrapped XML type.
func (_defga Endnote )X ()*_dg .CT_FtnEdn {return _defga ._dggc };

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_ccbcf *_dg .CT_TblLook };

// SetRight sets the right border to a specified type, color and thickness.
func (_ba CellBorders )SetRight (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_ba ._ab .Right =_dg .NewCT_Border ();_eeefg (_ba ._ab .Right ,t ,c ,thickness );};

// Definitions returns the defined numbering definitions.
func (_ecgfc Numbering )Definitions ()[]NumberingDefinition {_ccfca :=[]NumberingDefinition {};if _ecgfc ._ffad !=nil {for _ ,_abff :=range _ecgfc ._ffad .AbstractNum {_ccfca =append (_ccfca ,NumberingDefinition {_abff });};};return _ccfca ;};

// SetText sets the text to be used in bullet mode.
func (_aeeaea NumberingLevel )SetText (t string ){if t ==""{_aeeaea ._dggbd .LvlText =nil ;}else {_aeeaea ._dggbd .LvlText =_dg .NewCT_LevelText ();_aeeaea ._dggbd .LvlText .ValAttr =_a .String (t );};};

// SetStartIndent controls the start indentation.
func (_ggfg ParagraphProperties )SetStartIndent (m _bda .Distance ){if _ggfg ._efcd .Ind ==nil {_ggfg ._efcd .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_ggfg ._efcd .Ind .StartAttr =nil ;}else {_ggfg ._efcd .Ind .StartAttr =&_dg .ST_SignedTwipsMeasure {};_ggfg ._efcd .Ind .StartAttr .Int64 =_a .Int64 (int64 (m /_bda .Twips ));};};func (_aebga *WatermarkPicture )getShapeType ()*_a .XSDAny {return _aebga .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");};

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_ebabg TableLook )SetLastColumn (on bool ){if !on {_ebabg ._ccbcf .LastColumnAttr =&_aea .ST_OnOff {};_ebabg ._ccbcf .LastColumnAttr .ST_OnOff1 =_aea .ST_OnOff1Off ;}else {_ebabg ._ccbcf .LastColumnAttr =&_aea .ST_OnOff {};_ebabg ._ccbcf .LastColumnAttr .ST_OnOff1 =_aea .ST_OnOff1On ;};};

// RemoveParagraph removes a paragraph from a footer.
func (_feee Footer )RemoveParagraph (p Paragraph ){for _ ,_eage :=range _feee ._cfaa .EG_ContentBlockContent {for _beggd ,_ccdca :=range _eage .P {if _ccdca ==p ._agbe {copy (_eage .P [_beggd :],_eage .P [_beggd +1:]);_eage .P =_eage .P [0:len (_eage .P )-1];return ;};};};};

// Text return node and its child text,
func (_cggae *Node )Text ()string {_ddaa :=_gga .NewBuffer ([]byte {});switch _dfdcd :=_cggae .X ().(type ){case *Paragraph :for _ ,_bedb :=range _dfdcd .Runs (){if _bedb .Text ()!=""{_ddaa .WriteString (_bedb .Text ());_ddaa .WriteString ("\u000a");};};};for _ ,_cded :=range _cggae .Children {_ddaa .WriteString (_cded .Text ());};return _ddaa .String ();};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
func (_bgbdd Paragraph )RemoveEndnote (id int64 ){_defca :=_bgbdd ._baff ._abbb ;var _cefe int ;for _feea ,_bcga :=range _defca .CT_Endnotes .Endnote {if _bcga .IdAttr ==id {_cefe =_feea ;};};_cefe =0;_defca .CT_Endnotes .Endnote [_cefe ]=nil ;_defca .CT_Endnotes .Endnote [_cefe ]=_defca .CT_Endnotes .Endnote [len (_defca .CT_Endnotes .Endnote )-1];_defca .CT_Endnotes .Endnote =_defca .CT_Endnotes .Endnote [:len (_defca .CT_Endnotes .Endnote )-1];var _gadb Run ;for _ ,_bebc :=range _bgbdd .Runs (){if _aaegd ,_gdba :=_bebc .IsEndnote ();_aaegd {if _gdba ==id {_gadb =_bebc ;};};};_bgbdd .RemoveRun (_gadb );};

// SetShadow sets the run to shadowed text.
func (_bfca RunProperties )SetShadow (b bool ){if !b {_bfca ._eafe .Shadow =nil ;}else {_bfca ._eafe .Shadow =_dg .NewCT_OnOff ();};};

// RunProperties returns the run properties controlling text formatting within the table.
func (_gaef TableConditionalFormatting )RunProperties ()RunProperties {if _gaef ._adgcda .RPr ==nil {_gaef ._adgcda .RPr =_dg .NewCT_RPr ();};return RunProperties {_gaef ._adgcda .RPr };};

// SetColumnBandSize sets the number of Columns in the column band
func (_fcdbf TableStyleProperties )SetColumnBandSize (cols int64 ){_fcdbf ._cgdg .TblStyleColBandSize =_dg .NewCT_DecimalNumber ();_fcdbf ._cgdg .TblStyleColBandSize .ValAttr =cols ;};

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_beef Document )AddHyperlink (url string )_fc .Hyperlink {return _beef ._eega .AddHyperlink (url )};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_eebcg Fonts )SetEastAsiaTheme (t _dg .ST_Theme ){_eebcg ._dcdg .EastAsiaThemeAttr =t };

// SetOutline sets the run to outlined text.
func (_dcfbc RunProperties )SetOutline (b bool ){if !b {_dcfbc ._eafe .Outline =nil ;}else {_dcfbc ._eafe .Outline =_dg .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_dafdc HyperLink )X ()*_dg .CT_Hyperlink {return _dafdc ._bcdfe };

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_cefbf RunProperties )CharacterSpacingValue ()int64 {if _gcdb :=_cefbf ._eafe .Spacing ;_gcdb !=nil {_ggcg :=_gcdb .ValAttr ;if _ggcg .Int64 !=nil {return *_ggcg .Int64 ;};};return int64 (0);};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_ccaa TableBorders )SetInsideHorizontal (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_ccaa ._bccfe .InsideH =_dg .NewCT_Border ();_eeefg (_ccaa ._bccfe .InsideH ,t ,c ,thickness );};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_babd Paragraph )AddHyperLink ()HyperLink {_eccab :=_dg .NewEG_PContent ();_babd ._agbe .EG_PContent =append (_babd ._agbe .EG_PContent ,_eccab );_eccab .Hyperlink =_dg .NewCT_Hyperlink ();return HyperLink {_babd ._baff ,_eccab .Hyperlink };};

// ReplaceTextByRegexp replace the text within node using regexp expression.
func (_efeaf *Node )ReplaceTextByRegexp (rgx *_gg .Regexp ,newText string ){switch _cagf :=_efeaf .X ().(type ){case *Paragraph :for _ ,_agbbd :=range _cagf .Runs (){for _ ,_afdgb :=range _agbbd ._ceca .EG_RunInnerContent {if _afdgb .T !=nil {_bcgc :=_afdgb .T .Content ;_bcgc =rgx .ReplaceAllString (_bcgc ,newText );_afdgb .T .Content =_bcgc ;};};};};for _ ,_cfbcc :=range _efeaf .Children {_cfbcc .ReplaceTextByRegexp (rgx ,newText );};};

// SetAfterSpacing sets spacing below paragraph.
func (_eede Paragraph )SetAfterSpacing (d _bda .Distance ){_eede .ensurePPr ();if _eede ._agbe .PPr .Spacing ==nil {_eede ._agbe .PPr .Spacing =_dg .NewCT_Spacing ();};_fbbe :=_eede ._agbe .PPr .Spacing ;_fbbe .AfterAttr =&_aea .ST_TwipsMeasure {};_fbbe .AfterAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (d /_bda .Twips ));};

// Numbering return numbering that being use by paragraph.
func (_gbab Paragraph )Numbering ()Numbering {_gbab .ensurePPr ();_fcgga :=NewNumbering ();if _gbab ._agbe .PPr .NumPr !=nil {_gcabf :=int64 (-1);_cddf :=int64 (-1);if _gbab ._agbe .PPr .NumPr .NumId !=nil {_gcabf =_gbab ._agbe .PPr .NumPr .NumId .ValAttr ;};for _ ,_dfef :=range _gbab ._baff .Numbering ._ffad .Num {if _gcabf < 0{break ;};if _dfef .NumIdAttr ==_gcabf {if _dfef .AbstractNumId !=nil {_cddf =_dfef .AbstractNumId .ValAttr ;_fcgga ._ffad .Num =append (_fcgga ._ffad .Num ,_dfef );break ;};};};for _ ,_ffef :=range _gbab ._baff .Numbering ._ffad .AbstractNum {if _cddf < 0{break ;};if _ffef .AbstractNumIdAttr ==_cddf {_fcgga ._ffad .AbstractNum =append (_fcgga ._ffad .AbstractNum ,_ffef );break ;};};};return _fcgga ;};

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_fbafd *Document )HasFootnotes ()bool {return _fbafd ._dea !=nil };

// SetName sets the name of the style.
func (_gfdbf Style )SetName (name string ){_gfdbf ._ddgd .Name =_dg .NewCT_String ();_gfdbf ._ddgd .Name .ValAttr =name ;};

// SetTextWrapTight sets the text wrap to tight with a give wrap type.
func (_fae AnchoredDrawing )SetTextWrapTight (option *AnchorDrawWrapOptions ){_fae ._eg .Choice =&_dg .WdEG_WrapTypeChoice {};_fae ._eg .Choice .WrapTight =_dg .NewWdCT_WrapTight ();_fae ._eg .Choice .WrapTight .WrapTextAttr =_dg .WdST_WrapTextBothSides ;_ggc :=false ;_fae ._eg .Choice .WrapTight .WrapPolygon .EditedAttr =&_ggc ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_fae ._eg .Choice .WrapTight .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_fae ._eg .Choice .WrapTight .WrapPolygon .Start =option .GetWrapPathStart ();_fae ._eg .LayoutInCellAttr =true ;_fae ._eg .AllowOverlapAttr =true ;};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_bgfg Footer )Index ()int {for _ccdcd ,_bbcc :=range _bgfg ._bccf ._dcfe {if _bbcc ==_bgfg ._cfaa {return _ccdcd ;};};return -1;};

// X returns the inner wrapped XML type.
func (_agacf Paragraph )X ()*_dg .CT_P {return _agacf ._agbe };func (_fcf *Document )tables (_ccbd *_dg .EG_ContentBlockContent )[]Table {_gad :=[]Table {};for _ ,_cabb :=range _ccbd .Tbl {_gad =append (_gad ,Table {_fcf ,_cabb });for _ ,_cfeb :=range _cabb .EG_ContentRowContent {for _ ,_ffc :=range _cfeb .Tr {for _ ,_ccf :=range _ffc .EG_ContentCellContent {for _ ,_bbae :=range _ccf .Tc {for _ ,_fba :=range _bbae .EG_BlockLevelElts {for _ ,_egfe :=range _fba .EG_ContentBlockContent {for _ ,_ded :=range _fcf .tables (_egfe ){_gad =append (_gad ,_ded );};};};};};};};};return _gad ;};

// TableProperties returns the table style properties.
func (_eabce Style )TableProperties ()TableStyleProperties {if _eabce ._ddgd .TblPr ==nil {_eabce ._ddgd .TblPr =_dg .NewCT_TblPrBase ();};return TableStyleProperties {_eabce ._ddgd .TblPr };};

// ReplaceText replace the text inside node.
func (_cgcb *Node )ReplaceText (oldText ,newText string ){switch _eedg :=_cgcb .X ().(type ){case *Paragraph :for _ ,_dcdf :=range _eedg .Runs (){for _ ,_aaea :=range _dcdf ._ceca .EG_RunInnerContent {if _aaea .T !=nil {_ggac :=_aaea .T .Content ;_ggac =_bc .ReplaceAll (_ggac ,oldText ,newText );_aaea .T .Content =_ggac ;};};};};for _ ,_gfcc :=range _cgcb .Children {_gfcc .ReplaceText (oldText ,newText );};};

// Clear clears all content within a footer
func (_afdge Footer )Clear (){_afdge ._cfaa .EG_ContentBlockContent =nil };

// Footer is a footer for a document section.
type Footer struct{_bccf *Document ;_cfaa *_dg .Ftr ;};func (_cagea Paragraph )ensurePPr (){if _cagea ._agbe .PPr ==nil {_cagea ._agbe .PPr =_dg .NewCT_PPr ();};};

// SetTextWrapBehindText sets the text wrap to behind text.
func (_fe AnchoredDrawing )SetTextWrapBehindText (){_fe ._eg .Choice =&_dg .WdEG_WrapTypeChoice {};_fe ._eg .Choice .WrapNone =_dg .NewWdCT_WrapNone ();_fe ._eg .BehindDocAttr =true ;_fe ._eg .LayoutInCellAttr =true ;_fe ._eg .AllowOverlapAttr =true ;};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_bcccd TableProperties )TableLook ()TableLook {if _bcccd ._dbccb .TblLook ==nil {_bcccd ._dbccb .TblLook =_dg .NewCT_TblLook ();};return TableLook {_bcccd ._dbccb .TblLook };};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_gfd *Document )AddHeader ()Header {_bfa :=_dg .NewHdr ();_gfd ._agd =append (_gfd ._agd ,_bfa );_bde :=_bcf .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_gfd ._agd ));_gfd ._eega .AddRelationship (_bde ,_a .HeaderType );_gfd .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_bde ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");_gfd ._gbc =append (_gfd ._gbc ,_fc .NewRelationships ());return Header {_gfd ,_bfa };};

// TableWidth controls width values in table settings.
type TableWidth struct{_gdca *_dg .CT_TblWidth };func (_beggde Footnote )id ()int64 {return _beggde ._ggfaf .IdAttr };

// X returns the internally wrapped *wml.CT_SectPr.
func (_daed Section )X ()*_dg .CT_SectPr {return _daed ._begfd };type mergeFieldInfo struct{_gccf string ;_eaace string ;_dgca string ;_bdeac bool ;_begdg bool ;_eagd bool ;_acbe bool ;_cgaa Paragraph ;_fcfg ,_ddfb ,_afaf int ;_aege *_dg .EG_PContent ;_bede bool ;};

// ParagraphStyles returns only the paragraph styles.
func (_dfcaf Styles )ParagraphStyles ()[]Style {_eedbf :=[]Style {};for _ ,_gdae :=range _dfcaf ._cfca .Style {if _gdae .TypeAttr !=_dg .ST_StyleTypeParagraph {continue ;};_eedbf =append (_eedbf ,Style {_gdae });};return _eedbf ;};

// X return element of Node as interface, can be either *Paragraph, *Table and Run.
func (_cfgg *Node )X ()interface{}{return _cfgg ._dbdg };

// Strike returns true if run is striked.
func (_ccbde RunProperties )Strike ()bool {return _bdba (_ccbde ._eafe .Strike )};

// SetAfter sets the spacing that comes after the paragraph.
func (_fbdf ParagraphSpacing )SetAfter (after _bda .Distance ){_fbdf ._fdbd .AfterAttr =&_aea .ST_TwipsMeasure {};_fbdf ._fdbd .AfterAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (after /_bda .Twips ));};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_gbbg NumberingDefinition )AddLevel ()NumberingLevel {_gafac :=_dg .NewCT_Lvl ();_gafac .Start =&_dg .CT_DecimalNumber {ValAttr :1};_gafac .IlvlAttr =int64 (len (_gbbg ._ebgf .Lvl ));_gbbg ._ebgf .Lvl =append (_gbbg ._ebgf .Lvl ,_gafac );return NumberingLevel {_gafac };};func _bcafe ()*_fab .Path {_cdfab :=_fab .NewPath ();_cdfab .ExtrusionokAttr =_aea .ST_TrueFalseTrue ;_cdfab .GradientshapeokAttr =_aea .ST_TrueFalseTrue ;_cdfab .ConnecttypeAttr =_fab .OfcST_ConnectTypeRect ;return _cdfab ;};

// Nodes contains slice of Node element.
type Nodes struct{_bfcf []Node };

// Underline returns the type of paragraph underline.
func (_cgce ParagraphProperties )Underline ()_dg .ST_Underline {if _cabe :=_cgce ._efcd .RPr .U ;_cabe !=nil {return _cabe .ValAttr ;};return 0;};

// Tables returns the tables defined in the document.
func (_ccda *Document )Tables ()[]Table {_fgbgf :=[]Table {};if _ccda ._fabd .Body ==nil {return nil ;};for _ ,_cade :=range _ccda ._fabd .Body .EG_BlockLevelElts {for _ ,_dcgg :=range _cade .EG_ContentBlockContent {for _ ,_daa :=range _ccda .tables (_dcgg ){_fgbgf =append (_fgbgf ,_daa );};};};return _fgbgf ;};func (_bbg *Document )validateBookmarks ()error {_aeda :=make (map[string ]struct{});for _ ,_cee :=range _bbg .Bookmarks (){if _ ,_abc :=_aeda [_cee .Name ()];_abc {return _bcf .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_cee .Name ());};_aeda [_cee .Name ()]=struct{}{};};return nil ;};func _eeefg (_agff *_dg .CT_Border ,_gceec _dg .ST_Border ,_beeagf _fa .Color ,_agagf _bda .Distance ){_agff .ValAttr =_gceec ;_agff .ColorAttr =&_dg .ST_HexColor {};if _beeagf .IsAuto (){_agff .ColorAttr .ST_HexColorAuto =_dg .ST_HexColorAutoAuto ;}else {_agff .ColorAttr .ST_HexColorRGB =_beeagf .AsRGBString ();};if _agagf !=_bda .Zero {_agff .SzAttr =_a .Uint64 (uint64 (_agagf /_bda .Point *8));};};

// SetAlignment controls the paragraph alignment
func (_bdegg ParagraphProperties )SetAlignment (align _dg .ST_Jc ){if align ==_dg .ST_JcUnset {_bdegg ._efcd .Jc =nil ;}else {_bdegg ._efcd .Jc =_dg .NewCT_Jc ();_bdegg ._efcd .Jc .ValAttr =align ;};};

// SetBefore sets the spacing that comes before the paragraph.
func (_aebb ParagraphSpacing )SetBefore (before _bda .Distance ){_aebb ._fdbd .BeforeAttr =&_aea .ST_TwipsMeasure {};_aebb ._fdbd .BeforeAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (before /_bda .Twips ));};

// SetTop sets the cell top margin
func (_dcf CellMargins )SetTop (d _bda .Distance ){_dcf ._beg .Top =_dg .NewCT_TblWidth ();_def (_dcf ._beg .Top ,d );};

// DocRels returns document relationship.
func (_fcgd *Document )DocRels ()_fc .Relationships {return _fcgd ._eega };func (_ccd *Document )insertTable (_eaf Paragraph ,_ffb bool )Table {_dff :=_ccd ._fabd .Body ;if _dff ==nil {return _ccd .AddTable ();};_aad :=_eaf .X ();for _gbdf ,_aab :=range _dff .EG_BlockLevelElts {for _ ,_fcaa :=range _aab .EG_ContentBlockContent {for _eec ,_eda :=range _fcaa .P {if _eda ==_aad {_daea :=_dg .NewCT_Tbl ();_ddgf :=_dg .NewEG_BlockLevelElts ();_cfbd :=_dg .NewEG_ContentBlockContent ();_ddgf .EG_ContentBlockContent =append (_ddgf .EG_ContentBlockContent ,_cfbd );_cfbd .Tbl =append (_cfbd .Tbl ,_daea );_dff .EG_BlockLevelElts =append (_dff .EG_BlockLevelElts ,nil );if _ffb {copy (_dff .EG_BlockLevelElts [_gbdf +1:],_dff .EG_BlockLevelElts [_gbdf :]);_dff .EG_BlockLevelElts [_gbdf ]=_ddgf ;if _eec !=0{_egda :=_dg .NewEG_BlockLevelElts ();_ffe :=_dg .NewEG_ContentBlockContent ();_egda .EG_ContentBlockContent =append (_egda .EG_ContentBlockContent ,_ffe );_ffe .P =_fcaa .P [:_eec ];_dff .EG_BlockLevelElts =append (_dff .EG_BlockLevelElts ,nil );copy (_dff .EG_BlockLevelElts [_gbdf +1:],_dff .EG_BlockLevelElts [_gbdf :]);_dff .EG_BlockLevelElts [_gbdf ]=_egda ;};_fcaa .P =_fcaa .P [_eec :];}else {copy (_dff .EG_BlockLevelElts [_gbdf +2:],_dff .EG_BlockLevelElts [_gbdf +1:]);_dff .EG_BlockLevelElts [_gbdf +1]=_ddgf ;if _eec !=len (_fcaa .P )-1{_fga :=_dg .NewEG_BlockLevelElts ();_gac :=_dg .NewEG_ContentBlockContent ();_fga .EG_ContentBlockContent =append (_fga .EG_ContentBlockContent ,_gac );_gac .P =_fcaa .P [_eec +1:];_dff .EG_BlockLevelElts =append (_dff .EG_BlockLevelElts ,nil );copy (_dff .EG_BlockLevelElts [_gbdf +3:],_dff .EG_BlockLevelElts [_gbdf +2:]);_dff .EG_BlockLevelElts [_gbdf +2]=_fga ;};_fcaa .P =_fcaa .P [:_eec +1];};return Table {_ccd ,_daea };};};for _ ,_acdg :=range _fcaa .Tbl {_gced :=_bag (_acdg ,_aad ,_ffb );if _gced !=nil {return Table {_ccd ,_gced };};};};};return _ccd .AddTable ();};

// Themes returns document's themes.
func (_fdbe *Document )Themes ()[]*_fb .Theme {return _fdbe ._cbef };

// ParagraphBorders allows manipulation of borders on a paragraph.
type ParagraphBorders struct{_edbe *Document ;_feafb *_dg .CT_PBdr ;};

// SetBeforeSpacing sets spacing above paragraph.
func (_fbcg Paragraph )SetBeforeSpacing (d _bda .Distance ){_fbcg .ensurePPr ();if _fbcg ._agbe .PPr .Spacing ==nil {_fbcg ._agbe .PPr .Spacing =_dg .NewCT_Spacing ();};_edef :=_fbcg ._agbe .PPr .Spacing ;_edef .BeforeAttr =&_aea .ST_TwipsMeasure {};_edef .BeforeAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (d /_bda .Twips ));};

// ExtractTextOptions extraction text options.
type ExtractTextOptions struct{

// WithNumbering extract numbering elements if set to `true`.
WithNumbering bool ;

// NumberingIndent default value of numbering indent.
NumberingIndent string ;

// RunsOnNewLine write each of runs text on new line if set to `true`.
RunsOnNewLine bool ;};

// SetBottomPct sets the cell bottom margin
func (_dae CellMargins )SetBottomPct (pct float64 ){_dae ._beg .Bottom =_dg .NewCT_TblWidth ();_fee (_dae ._beg .Bottom ,pct );};

// SetText sets the watermark text.
func (_bgbec *WatermarkText )SetText (text string ){_bffaf :=_bgbec .getShape ();if _bgbec ._fgdf !=nil {_aecd :=_bgbec ._fgdf .EG_ShapeElements ;if len (_aecd )> 0&&_aecd [0].Textpath !=nil {_aecd [0].Textpath .StringAttr =&text ;};}else {_egff :=_bgbec .findNode (_bffaf ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _fccb ,_baaff :=range _egff .Attrs {if _baaff .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{_egff .Attrs [_fccb ].Value =text ;};};};};

// Text returns text from the document as one string separated with line breaks.
func (_dggcb *DocText )Text ()string {_dgafc :=_gga .NewBuffer ([]byte {});for _ ,_beefb :=range _dggcb .Items {if _beefb .Text !=""{_dgafc .WriteString (_beefb .Text );_dgafc .WriteString ("\u000a");};};return _dgafc .String ();};

// SetVAlignment sets the vertical alignment for an anchored image.
func (_ege AnchoredDrawing )SetVAlignment (v _dg .WdST_AlignV ){_ege ._eg .PositionV .Choice =&_dg .WdCT_PosVChoice {};_ege ._eg .PositionV .Choice .Align =v ;};

// X returns the inner wrapped XML type.
func (_ge AnchoredDrawing )X ()*_dg .WdAnchor {return _ge ._eg };

// Strike returns true if paragraph is striked.
func (_fdag ParagraphProperties )Strike ()bool {return _bdba (_fdag ._efcd .RPr .Strike )};

// Footnotes returns the footnotes defined in the document.
func (_fdee *Document )Footnotes ()[]Footnote {_gedg :=[]Footnote {};for _ ,_aebf :=range _fdee ._dea .CT_Footnotes .Footnote {_gedg =append (_gedg ,Footnote {_fdee ,_aebf });};return _gedg ;};

// SetLayoutInCell sets the layoutInCell attribute of anchor.
func (_fgd AnchoredDrawing )SetLayoutInCell (val bool ){_fgd ._eg .LayoutInCellAttr =val };

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_gggee TableStyleProperties )SetCellSpacingPercent (pct float64 ){_gggee ._cgdg .TblCellSpacing =_dg .NewCT_TblWidth ();_gggee ._cgdg .TblCellSpacing .TypeAttr =_dg .ST_TblWidthPct ;_gggee ._cgdg .TblCellSpacing .WAttr =&_dg .ST_MeasurementOrPercent {};_gggee ._cgdg .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_gggee ._cgdg .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (pct *50));};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_bbdd Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_beeag :=_bbdd .newIC ();_beeag .FldChar =_dg .NewCT_FldChar ();_beeag .FldChar .FldCharTypeAttr =_dg .ST_FldCharTypeBegin ;if isDirty {_beeag .FldChar .DirtyAttr =&_aea .ST_OnOff {};_beeag .FldChar .DirtyAttr .Bool =_a .Bool (true );};_beeag =_bbdd .newIC ();_beeag .InstrText =_dg .NewCT_Text ();if fmt !=""{_beeag .InstrText .Content =code +"\u0020"+fmt ;}else {_beeag .InstrText .Content =code ;};_beeag =_bbdd .newIC ();_beeag .FldChar =_dg .NewCT_FldChar ();_beeag .FldChar .FldCharTypeAttr =_dg .ST_FldCharTypeEnd ;};func (_ddcg *chart )X ()*_ea .ChartSpace {return _ddcg ._ega };

// MergeFields returns the list of all mail merge fields found in the document.
func (_acef Document )MergeFields ()[]string {_facb :=map[string ]struct{}{};for _ ,_eedf :=range _acef .mergeFields (){_facb [_eedf ._gccf ]=struct{}{};};_gbbee :=[]string {};for _aebg :=range _facb {_gbbee =append (_gbbee ,_aebg );};return _gbbee ;};

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_ggfad TableLook )SetHorizontalBanding (on bool ){if !on {_ggfad ._ccbcf .NoHBandAttr =&_aea .ST_OnOff {};_ggfad ._ccbcf .NoHBandAttr .ST_OnOff1 =_aea .ST_OnOff1On ;}else {_ggfad ._ccbcf .NoHBandAttr =&_aea .ST_OnOff {};_ggfad ._ccbcf .NoHBandAttr .ST_OnOff1 =_aea .ST_OnOff1Off ;};};

// X returns the inner wrapped XML type.
func (_gecfd Row )X ()*_dg .CT_Row {return _gecfd ._egca };

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
func (_gecfa Paragraph )RemoveFootnote (id int64 ){_dddff :=_gecfa ._baff ._dea ;var _fecb int ;for _bcab ,_aagb :=range _dddff .CT_Footnotes .Footnote {if _aagb .IdAttr ==id {_fecb =_bcab ;};};_fecb =0;_dddff .CT_Footnotes .Footnote [_fecb ]=nil ;_dddff .CT_Footnotes .Footnote [_fecb ]=_dddff .CT_Footnotes .Footnote [len (_dddff .CT_Footnotes .Footnote )-1];_dddff .CT_Footnotes .Footnote =_dddff .CT_Footnotes .Footnote [:len (_dddff .CT_Footnotes .Footnote )-1];var _bagg Run ;for _ ,_edbb :=range _gecfa .Runs (){if _bdec ,_gaad :=_edbb .IsFootnote ();_bdec {if _gaad ==id {_bagg =_edbb ;};};};_gecfa .RemoveRun (_bagg );};

// TextWithOptions extract text with options.
func (_eecb *DocText )TextWithOptions (options ExtractTextOptions )string {_fgab :=make (map[int64 ]map[int64 ]int64 ,0);_bbdc :=_gga .NewBuffer ([]byte {});_gbca :=int64 (0);_gefb :=int64 (0);_cdce :=int64 (0);for _effdf ,_adgc :=range _eecb .Items {_cbfg :=false ;if _adgc .Text !=""{if _effdf > 0{if _adgc .Paragraph !=_eecb .Items [_effdf -1].Paragraph {_cbfg =true ;};if !options .RunsOnNewLine &&_cbfg {_bbdc .WriteString ("\u000a");}else if options .RunsOnNewLine {_bbdc .WriteString ("\u000a");};}else {_cbfg =true ;};if options .WithNumbering {if _cbfg {for _ ,_eeea :=range _eecb ._dacd {if _eeea .FromParagraph ==nil {continue ;};if _eeea .FromParagraph .X ()==_adgc .Paragraph {if _dbfc :=_eeea .NumberingLevel .X ();_dbfc !=nil {if _eeea .AbstractNumId !=nil &&_eecb ._gbfg [*_eeea .AbstractNumId ][_dbfc .IlvlAttr ]> 0{if _ ,_acbc :=_fgab [*_eeea .AbstractNumId ];_acbc {if _ ,_ccge :=_fgab [*_eeea .AbstractNumId ][_dbfc .IlvlAttr ];_ccge {_fgab [*_eeea .AbstractNumId ][_dbfc .IlvlAttr ]++;}else {_fgab [*_eeea .AbstractNumId ][_dbfc .IlvlAttr ]=1;};}else {_fgab [*_eeea .AbstractNumId ]=map[int64 ]int64 {_dbfc .IlvlAttr :1};};if _gbca ==_eeea .NumberingLevel .X ().IlvlAttr &&_dbfc .IlvlAttr > 0{_gefb ++;}else {_gefb =_fgab [*_eeea .AbstractNumId ][_dbfc .IlvlAttr ];if _dbfc .IlvlAttr > _gbca &&_cdce ==*_eeea .AbstractNumId {_gefb =1;};};_dafd :="";if _dbfc .LvlText .ValAttr !=nil {_dafd =*_dbfc .LvlText .ValAttr ;};_bcea :=_gfa .FormatNumberingText (_gefb ,_dbfc .IlvlAttr ,_dafd ,_dbfc .NumFmt ,_fgab [*_eeea .AbstractNumId ]);_bbdc .WriteString (_bcea );_eecb ._gbfg [*_eeea .AbstractNumId ][_dbfc .IlvlAttr ]--;_gbca =_dbfc .IlvlAttr ;_cdce =*_eeea .AbstractNumId ;if options .NumberingIndent !=""{_bbdc .WriteString (options .NumberingIndent );};};};break ;};};};};_bbdc .WriteString (_adgc .Text );};};return _bbdc .String ();};

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_ffbaef TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _ffbaef ._adgcda .PPr ==nil {_ffbaef ._adgcda .PPr =_dg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_ffbaef ._adgcda .PPr };};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_dg .NewCT_TblWidth ()}};

// CellProperties returns the cell properties.
func (_gdddg TableConditionalFormatting )CellProperties ()CellProperties {if _gdddg ._adgcda .TcPr ==nil {_gdddg ._adgcda .TcPr =_dg .NewCT_TcPr ();};return CellProperties {_gdddg ._adgcda .TcPr };};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_cgdg *_dg .CT_TblPrBase };

// SetStartIndent controls the start indent of the paragraph.
func (_gacb ParagraphStyleProperties )SetStartIndent (m _bda .Distance ){if _gacb ._cccfb .Ind ==nil {_gacb ._cccfb .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_gacb ._cccfb .Ind .StartAttr =nil ;}else {_gacb ._cccfb .Ind .StartAttr =&_dg .ST_SignedTwipsMeasure {};_gacb ._cccfb .Ind .StartAttr .Int64 =_a .Int64 (int64 (m /_bda .Twips ));};};

// SetFollowImageShape sets wrapPath to follow image shape,
// if nil return wrapPath that follow image size.
func (_gabg AnchorDrawWrapOptions )SetFollowImageShape (val bool ){_gabg ._dac =val ;if !val {_ecc ,_fabf :=_gc ();_gabg ._gab =_ecc ;_gabg ._dgc =_fabf ;};};

// X returns the inner wrapped XML type.
func (_eccg Fonts )X ()*_dg .CT_Fonts {return _eccg ._dcdg };

// SetCellSpacing sets the cell spacing within a table.
func (_agedd TableProperties )SetCellSpacing (m _bda .Distance ){_agedd ._dbccb .TblCellSpacing =_dg .NewCT_TblWidth ();_agedd ._dbccb .TblCellSpacing .TypeAttr =_dg .ST_TblWidthDxa ;_agedd ._dbccb .TblCellSpacing .WAttr =&_dg .ST_MeasurementOrPercent {};_agedd ._dbccb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_agedd ._dbccb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (m /_bda .Dxa ));};

// Endnotes returns the endnotes defined in the document.
func (_cfg *Document )Endnotes ()[]Endnote {_abbc :=[]Endnote {};for _ ,_gef :=range _cfg ._abbb .CT_Endnotes .Endnote {_abbc =append (_abbc ,Endnote {_cfg ,_gef });};return _abbc ;};func _fee (_aa *_dg .CT_TblWidth ,_faa float64 ){_aa .TypeAttr =_dg .ST_TblWidthPct ;_aa .WAttr =&_dg .ST_MeasurementOrPercent {};_aa .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_aa .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (_faa *50));};

// GetColor returns the color.Color object representing the run color.
func (_gdbef RunProperties )GetColor ()_fa .Color {if _ecfce :=_gdbef ._eafe .Color ;_ecfce !=nil {_eeafc :=_ecfce .ValAttr ;if _eeafc .ST_HexColorRGB !=nil {return _fa .FromHex (*_eeafc .ST_HexColorRGB );};};return _fa .Color {};};func (_acbca Paragraph )addBeginFldChar (_ecagg string )*_dg .CT_FFData {_cdaa :=_acbca .addFldChar ();_cdaa .FldCharTypeAttr =_dg .ST_FldCharTypeBegin ;_cdaa .FfData =_dg .NewCT_FFData ();_fcgdg :=_dg .NewCT_FFName ();_fcgdg .ValAttr =&_ecagg ;_cdaa .FfData .Name =[]*_dg .CT_FFName {_fcgdg };return _cdaa .FfData ;};func (_adaf *Document )insertStyleFromNode (_febf Node ){if _febf .Style .X ()!=nil {if _ ,_cffb :=_adaf .Styles .SearchStyleById (_febf .Style .StyleID ());!_cffb {_adaf .Styles .InsertStyle (_febf .Style );_dfac :=_febf .Style .ParagraphProperties ();_adaf .insertNumberingFromStyleProperties (_febf ._gfc .Numbering ,_dfac );};};};

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_cgbdg RunProperties )SetCharacterSpacing (size _bda .Distance ){_cgbdg ._eafe .Spacing =_dg .NewCT_SignedTwipsMeasure ();_cgbdg ._eafe .Spacing .ValAttr .Int64 =_a .Int64 (int64 (size /_bda .Twips ));};

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_dcfg Run )AddDrawingInline (img _fc .ImageRef )(InlineDrawing ,error ){_cgefa :=_dcfg .newIC ();_cgefa .Drawing =_dg .NewCT_Drawing ();_fabege :=_dg .NewWdInline ();_bbbc :=InlineDrawing {_dcfg ._aeaad ,_fabege };_fabege .CNvGraphicFramePr =_fb .NewCT_NonVisualGraphicFrameProperties ();_cgefa .Drawing .Inline =append (_cgefa .Drawing .Inline ,_fabege );_fabege .Graphic =_fb .NewGraphic ();_fabege .Graphic .GraphicData =_fb .NewCT_GraphicalObjectData ();_fabege .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_fabege .DistTAttr =_a .Uint32 (0);_fabege .DistLAttr =_a .Uint32 (0);_fabege .DistBAttr =_a .Uint32 (0);_fabege .DistRAttr =_a .Uint32 (0);_fabege .Extent .CxAttr =int64 (float64 (img .Size ().X *_bda .Pixel72 )/_bda .EMU );_fabege .Extent .CyAttr =int64 (float64 (img .Size ().Y *_bda .Pixel72 )/_bda .EMU );_cacg :=0x7FFFFFFF&_b .Uint32 ();_fabege .DocPr .IdAttr =_cacg ;_egba :=_cag .NewPic ();_egba .NvPicPr .CNvPr .IdAttr =_cacg ;_caagf :=img .RelID ();if _caagf ==""{return _bbbc ,_ga .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_fabege .Graphic .GraphicData .Any =append (_fabege .Graphic .GraphicData .Any ,_egba );_egba .BlipFill =_fb .NewCT_BlipFillProperties ();_egba .BlipFill .Blip =_fb .NewCT_Blip ();_egba .BlipFill .Blip .EmbedAttr =&_caagf ;_egba .BlipFill .Stretch =_fb .NewCT_StretchInfoProperties ();_egba .BlipFill .Stretch .FillRect =_fb .NewCT_RelativeRect ();_egba .SpPr =_fb .NewCT_ShapeProperties ();_egba .SpPr .Xfrm =_fb .NewCT_Transform2D ();_egba .SpPr .Xfrm .Off =_fb .NewCT_Point2D ();_egba .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_a .Int64 (0);_egba .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_a .Int64 (0);_egba .SpPr .Xfrm .Ext =_fb .NewCT_PositiveSize2D ();_egba .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_bda .Point );_egba .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_bda .Point );_egba .SpPr .PrstGeom =_fb .NewCT_PresetGeometry2D ();_egba .SpPr .PrstGeom .PrstAttr =_fb .ST_ShapeTypeRect ;return _bbbc ,nil ;};

// SetAll sets all of the borders to a given value.
func (_bcee ParagraphBorders )SetAll (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_bcee .SetBottom (t ,c ,thickness );_bcee .SetLeft (t ,c ,thickness );_bcee .SetRight (t ,c ,thickness );_bcee .SetTop (t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_ggbc TableProperties )X ()*_dg .CT_TblPr {return _ggbc ._dbccb };

// GetWrapPathStart return wrapPath start value.
func (_dba AnchorDrawWrapOptions )GetWrapPathStart ()*_fb .CT_Point2D {return _dba ._gab };

// AddTabStop adds a tab stop to the paragraph.
func (_caace ParagraphStyleProperties )AddTabStop (position _bda .Distance ,justificaton _dg .ST_TabJc ,leader _dg .ST_TabTlc ){if _caace ._cccfb .Tabs ==nil {_caace ._cccfb .Tabs =_dg .NewCT_Tabs ();};_faafa :=_dg .NewCT_TabStop ();_faafa .LeaderAttr =leader ;_faafa .ValAttr =justificaton ;_faafa .PosAttr .Int64 =_a .Int64 (int64 (position /_bda .Twips ));_caace ._cccfb .Tabs .Tab =append (_caace ._cccfb .Tabs .Tab ,_faafa );};

// Row is a row within a table within a document.
type Row struct{_gebde *Document ;_egca *_dg .CT_Row ;};

// Text returns the underlying text in the run.
func (_baefa Run )Text ()string {if len (_baefa ._ceca .EG_RunInnerContent )==0{return "";};_aaga :=_gga .Buffer {};for _ ,_ffee :=range _baefa ._ceca .EG_RunInnerContent {if _ffee .T !=nil {_aaga .WriteString (_ffee .T .Content );};if _ffee .Tab !=nil {_aaga .WriteByte ('\t');};};return _aaga .String ();};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_eeadb RunProperties )CharacterSpacingMeasure ()string {if _fecc :=_eeadb ._eafe .Spacing ;_fecc !=nil {_gcdad :=_fecc .ValAttr ;if _gcdad .ST_UniversalMeasure !=nil {return *_gcdad .ST_UniversalMeasure ;};};return "";};

// SetFormat sets the numbering format.
func (_cadd NumberingLevel )SetFormat (f _dg .ST_NumberFormat ){if _cadd ._dggbd .NumFmt ==nil {_cadd ._dggbd .NumFmt =_dg .NewCT_NumFmt ();};_cadd ._dggbd .NumFmt .ValAttr =f ;};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_bagf Style )SetUISortOrder (order int ){_bagf ._ddgd .UiPriority =_dg .NewCT_DecimalNumber ();_bagf ._ddgd .UiPriority .ValAttr =int64 (order );};

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_gbd Bookmark )SetName (name string ){_gbd ._caca .NameAttr =name };

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_gee AnchoredDrawing )SetName (name string ){_gee ._eg .DocPr .NameAttr =name ;for _ ,_cd :=range _gee ._eg .Graphic .GraphicData .Any {if _dfd ,_dga :=_cd .(*_cag .Pic );_dga {_dfd .NvPicPr .CNvPr .DescrAttr =_a .String (name );};};};func _gaaf ()*_fab .OfcLock {_bacfe :=_fab .NewOfcLock ();_bacfe .ExtAttr =_fab .ST_ExtEdit ;_bacfe .TextAttr =_aea .ST_TrueFalseTrue ;_bacfe .ShapetypeAttr =_aea .ST_TrueFalseTrue ;return _bacfe ;};func (_dbeae Paragraph )addSeparateFldChar ()*_dg .CT_FldChar {_ebdef :=_dbeae .addFldChar ();_ebdef .FldCharTypeAttr =_dg .ST_FldCharTypeSeparate ;return _ebdef ;};

// SetTarget sets the URL target of the hyperlink.
func (_cdfbb HyperLink )SetTarget (url string ){_daga :=_cdfbb ._adgab .AddHyperlink (url );_cdfbb ._bcdfe .IdAttr =_a .String (_fc .Relationship (_daga ).ID ());_cdfbb ._bcdfe .AnchorAttr =nil ;};

// GetColor returns the color.Color object representing the run color.
func (_dcabg ParagraphProperties )GetColor ()_fa .Color {if _ddaag :=_dcabg ._efcd .RPr .Color ;_ddaag !=nil {_ecdae :=_ddaag .ValAttr ;if _ecdae .ST_HexColorRGB !=nil {return _fa .FromHex (*_ecdae .ST_HexColorRGB );};};return _fa .Color {};};

// Shadow returns true if paragraph shadow is on.
func (_ddga ParagraphProperties )Shadow ()bool {return _bdba (_ddga ._efcd .RPr .Shadow )};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_fdbee FormField )SetCalcOnExit (calcOnExit bool ){_dadc :=_dg .NewCT_OnOff ();_dadc .ValAttr =&_aea .ST_OnOff {Bool :&calcOnExit };_fdbee ._fada .CalcOnExit =[]*_dg .CT_OnOff {_dadc };};func (_eccca Document )mergeFields ()[]mergeFieldInfo {_cffba :=[]Paragraph {};_febb :=[]mergeFieldInfo {};for _ ,_dgfed :=range _eccca .Tables (){for _ ,_ecgb :=range _dgfed .Rows (){for _ ,_dgcf :=range _ecgb .Cells (){_cffba =append (_cffba ,_dgcf .Paragraphs ()...);};};};_cffba =append (_cffba ,_eccca .Paragraphs ()...);for _ ,_faaff :=range _cffba {_fecf :=_faaff .Runs ();_ffag :=-1;_ebfa :=-1;_ddaf :=-1;_egefe :=mergeFieldInfo {};for _ ,_fddgg :=range _faaff ._agbe .EG_PContent {for _ ,_faab :=range _fddgg .FldSimple {if _bc .Contains (_faab .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_afed :=_edac (_faab .InstrAttr );_afed ._bede =true ;_afed ._cgaa =_faaff ;_afed ._aege =_fddgg ;_febb =append (_febb ,_afed );};};};for _begab :=0;_begab < len (_fecf );_begab ++{_abag :=_fecf [_begab ];for _ ,_babcg :=range _abag .X ().EG_RunInnerContent {if _babcg .FldChar !=nil {switch _babcg .FldChar .FldCharTypeAttr {case _dg .ST_FldCharTypeBegin :_ffag =_begab ;case _dg .ST_FldCharTypeSeparate :_ebfa =_begab ;case _dg .ST_FldCharTypeEnd :_ddaf =_begab ;if _egefe ._gccf !=""{_egefe ._cgaa =_faaff ;_egefe ._fcfg =_ffag ;_egefe ._afaf =_ddaf ;_egefe ._ddfb =_ebfa ;_febb =append (_febb ,_egefe );};_ffag =-1;_ebfa =-1;_ddaf =-1;_egefe =mergeFieldInfo {};};}else if _babcg .InstrText !=nil &&_bc .Contains (_babcg .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _ffag !=-1&&_ddaf ==-1{_egefe =_edac (_babcg .InstrText .Content );};};};};};return _febb ;};

// X returns the inner wrapped XML type.
func (_dfeca Header )X ()*_dg .Hdr {return _dfeca ._abge };

// SetAlignment sets the paragraph alignment
func (_dcgae NumberingLevel )SetAlignment (j _dg .ST_Jc ){if j ==_dg .ST_JcUnset {_dcgae ._dggbd .LvlJc =nil ;}else {_dcgae ._dggbd .LvlJc =_dg .NewCT_Jc ();_dcgae ._dggbd .LvlJc .ValAttr =j ;};};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_dfffg ParagraphStyleProperties )SetSpacing (before ,after _bda .Distance ){if _dfffg ._cccfb .Spacing ==nil {_dfffg ._cccfb .Spacing =_dg .NewCT_Spacing ();};if before ==_bda .Zero {_dfffg ._cccfb .Spacing .BeforeAttr =nil ;}else {_dfffg ._cccfb .Spacing .BeforeAttr =&_aea .ST_TwipsMeasure {};_dfffg ._cccfb .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (before /_bda .Twips ));};if after ==_bda .Zero {_dfffg ._cccfb .Spacing .AfterAttr =nil ;}else {_dfffg ._cccfb .Spacing .AfterAttr =&_aea .ST_TwipsMeasure {};_dfffg ._cccfb .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (after /_bda .Twips ));};};

// SetAlignment sets the alignment of a table within the page.
func (_cfeba TableProperties )SetAlignment (align _dg .ST_JcTable ){if align ==_dg .ST_JcTableUnset {_cfeba ._dbccb .Jc =nil ;}else {_cfeba ._dbccb .Jc =_dg .NewCT_JcTable ();_cfeba ._dbccb .Jc .ValAttr =align ;};};

// AddParagraph adds a new paragraph to the document body.
func (_dbe *Document )AddParagraph ()Paragraph {_ddgb :=_dg .NewEG_BlockLevelElts ();_dbe ._fabd .Body .EG_BlockLevelElts =append (_dbe ._fabd .Body .EG_BlockLevelElts ,_ddgb );_acde :=_dg .NewEG_ContentBlockContent ();_ddgb .EG_ContentBlockContent =append (_ddgb .EG_ContentBlockContent ,_acde );_fgbge :=_dg .NewCT_P ();_acde .P =append (_acde .P ,_fgbge );return Paragraph {_dbe ,_fgbge };};

// AppendNode append node to document element.
func (_deec *Document )AppendNode (node Node ){_deec .insertImageFromNode (node );_deec .insertStyleFromNode (node );for _ ,_bcdec :=range node .Children {_deec .insertImageFromNode (_bcdec );_deec .insertStyleFromNode (_bcdec );};switch _dbcf :=node .X ().(type ){case *Paragraph :_deec .appendParagraph (nil ,*_dbcf ,false );case *Table :_deec .appendTable (nil ,*_dbcf ,false );};if node ._gfc !=nil {if node ._gfc ._cbef !=nil {if _bgbd :=_deec ._eega .FindRIDForN (0,_a .ThemeType );_bgbd ==""{if _aadcg :=node ._gfc ._eega .FindRIDForN (0,_a .ThemeType );_aadcg !=""{_deec ._cbef =append (_deec ._cbef ,node ._gfc ._cbef ...);_aadd :=node ._gfc ._eega .GetTargetByRelId (_aadcg );_deec .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_aadd ,"\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e/\u0076\u006e\u0064.\u006f\u0070e\u006e\u0078\u006d\u006c\u0066\u006fr\u006dat\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0074\u0068\u0065\u006d\u0065\u002b\u0078\u006d\u006c");_deec ._eega .AddRelationship (_aadd ,_a .ThemeType );};};};_bafa :=_deec ._egf ;_dfce :=node ._gfc ._egf ;if _bafa !=nil {if _dfce !=nil {if _bafa .Font !=nil {if _dfce .Font !=nil {for _ ,_fdcf :=range _dfce .Font {_efg :=true ;for _ ,_cfba :=range _bafa .Font {if _cfba .NameAttr ==_fdcf .NameAttr {_efg =false ;break ;};};if _efg {_bafa .Font =append (_bafa .Font ,_fdcf );};};};}else {_bafa .Font =_dfce .Font ;};};}else if _dfce !=nil {_bafa =_dfce ;};_deec ._egf =_bafa ;if _bffe :=_deec ._eega .FindRIDForN (0,_a .FontTableType );_bffe ==""{_deec .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u0066\u006f\u006e\u0074T\u0061\u0062\u006c\u0065\u002b\u0078m\u006c");_deec ._eega .AddRelationship ("\u0066\u006f\u006e\u0074\u0054\u0061\u0062\u006c\u0065\u002e\u0078\u006d\u006c",_a .FontTableType );};};};

// AddWatermarkText adds new watermark text to the document.
func (_dgea *Document )AddWatermarkText (text string )WatermarkText {var _bgde []Header ;if _deg ,_gbfe :=_dgea .BodySection ().GetHeader (_dg .ST_HdrFtrDefault );_gbfe {_bgde =append (_bgde ,_deg );};if _dfec ,_ffeg :=_dgea .BodySection ().GetHeader (_dg .ST_HdrFtrEven );_ffeg {_bgde =append (_bgde ,_dfec );};if _gdfa ,_eba :=_dgea .BodySection ().GetHeader (_dg .ST_HdrFtrFirst );_eba {_bgde =append (_bgde ,_gdfa );};if len (_bgde )< 1{_gdbb :=_dgea .AddHeader ();_dgea .BodySection ().SetHeader (_gdbb ,_dg .ST_HdrFtrDefault );_bgde =append (_bgde ,_gdbb );};_bdg :=NewWatermarkText ();for _ ,_edag :=range _bgde {_gccc :=_edag .Paragraphs ();if len (_gccc )< 1{_bgfc :=_edag .AddParagraph ();_bgfc .AddRun ().AddText ("");};for _ ,_ddca :=range _edag .X ().EG_ContentBlockContent {for _ ,_cbce :=range _ddca .P {for _ ,_aae :=range _cbce .EG_PContent {for _ ,_bge :=range _aae .EG_ContentRunContent {if _bge .R ==nil {continue ;};for _ ,_gcce :=range _bge .R .EG_RunInnerContent {_gcce .Pict =_bdg ._fded ;break ;};};};};};};_bdg .SetText (text );return _bdg ;};

// Properties returns the numbering level paragraph properties.
func (_gecd NumberingLevel )Properties ()ParagraphStyleProperties {if _gecd ._dggbd .PPr ==nil {_gecd ._dggbd .PPr =_dg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_gecd ._dggbd .PPr };};

// SetNextStyle sets the style that the next paragraph will use.
func (_beeec Style )SetNextStyle (name string ){if name ==""{_beeec ._ddgd .Next =nil ;}else {_beeec ._ddgd .Next =_dg .NewCT_String ();_beeec ._ddgd .Next .ValAttr =name ;};};

// SetAllCaps sets the run to all caps.
func (_beead RunProperties )SetAllCaps (b bool ){if !b {_beead ._eafe .Caps =nil ;}else {_beead ._eafe .Caps =_dg .NewCT_OnOff ();};};

// SetWidthPercent sets the cell to a width percentage.
func (_eada CellProperties )SetWidthPercent (pct float64 ){_eada ._ff .TcW =_dg .NewCT_TblWidth ();_eada ._ff .TcW .TypeAttr =_dg .ST_TblWidthPct ;_eada ._ff .TcW .WAttr =&_dg .ST_MeasurementOrPercent {};_eada ._ff .TcW .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_eada ._ff .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (pct *50));};

// Font returns the name of paragraph font family.
func (_cfec ParagraphProperties )Font ()string {if _eeceg :=_cfec ._efcd .RPr .RFonts ;_eeceg !=nil {if _eeceg .AsciiAttr !=nil {return *_eeceg .AsciiAttr ;}else if _eeceg .HAnsiAttr !=nil {return *_eeceg .HAnsiAttr ;}else if _eeceg .CsAttr !=nil {return *_eeceg .CsAttr ;};};return "";};

// SetRowBandSize sets the number of Rows in the row band
func (_dgcc TableStyleProperties )SetRowBandSize (rows int64 ){_dgcc ._cgdg .TblStyleRowBandSize =_dg .NewCT_DecimalNumber ();_dgcc ._cgdg .TblStyleRowBandSize .ValAttr =rows ;};

// X returns the inner wml.CT_PBdr
func (_eabec ParagraphBorders )X ()*_dg .CT_PBdr {return _eabec ._feafb };

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_dg .CT_Tbl ;Row *_dg .CT_Row ;Cell *_dg .CT_Tc ;RowIndex int ;ColIndex int ;};func (_bbeb *WatermarkText )getInnerElement (_gadf string )*_a .XSDAny {for _ ,_egede :=range _bbeb ._fded .Any {_cabfb ,_fdafg :=_egede .(*_a .XSDAny );if _fdafg &&(_cabfb .XMLName .Local ==_gadf ||_cabfb .XMLName .Local =="\u0076\u003a"+_gadf ){return _cabfb ;};};return nil ;};func (_edfcf Paragraph )addFldCharsForField (_bccc ,_cbgfg string )FormField {_faee :=_edfcf .addBeginFldChar (_bccc );_agae :=FormField {_fada :_faee };_fcggb :=_edfcf ._baff .Bookmarks ();_agfb :=int64 (len (_fcggb ));if _bccc !=""{_edfcf .addStartBookmark (_agfb ,_bccc );};_edfcf .addInstrText (_cbgfg );_edfcf .addSeparateFldChar ();if _cbgfg =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_befe :=_edfcf .AddRun ();_bdcda :=_dg .NewEG_RunInnerContent ();_befe ._ceca .EG_RunInnerContent =[]*_dg .EG_RunInnerContent {_bdcda };_agae ._daef =_bdcda ;};_edfcf .addEndFldChar ();if _bccc !=""{_edfcf .addEndBookmark (_agfb );};return _agae ;};func _bgec (_dbcd *_dg .CT_Tbl ,_egea ,_fgcfd map[int64 ]int64 ){for _ ,_bdcba :=range _dbcd .EG_ContentRowContent {for _ ,_dbdf :=range _bdcba .Tr {for _ ,_dcfb :=range _dbdf .EG_ContentCellContent {for _ ,_dbcg :=range _dcfb .Tc {for _ ,_fec :=range _dbcg .EG_BlockLevelElts {for _ ,_dfegg :=range _fec .EG_ContentBlockContent {for _ ,_adegd :=range _dfegg .P {_bbabf (_adegd ,_egea ,_fgcfd );};for _ ,_ccdcb :=range _dfegg .Tbl {_bgec (_ccdcb ,_egea ,_fgcfd );};};};};};};};};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_eggb RunProperties )SizeMeasure ()string {if _fccfd :=_eggb ._eafe .Sz ;_fccfd !=nil {_bagce :=_fccfd .ValAttr ;if _bagce .ST_PositiveUniversalMeasure !=nil {return *_bagce .ST_PositiveUniversalMeasure ;};};return "";};

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_feae FormField )SetPossibleValues (values []string ){if _feae ._fada .DdList !=nil {for _ ,_agea :=range values {_cfdc :=_dg .NewCT_String ();_cfdc .ValAttr =_agea ;_feae ._fada .DdList .ListEntry =append (_feae ._fada .DdList .ListEntry ,_cfdc );};};};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_gefg ParagraphProperties )Style ()string {if _gefg ._efcd .PStyle !=nil {return _gefg ._efcd .PStyle .ValAttr ;};return "";};

// Clear clears all content within a header
func (_aeeae Header )Clear (){_aeeae ._abge .EG_ContentBlockContent =nil };

// NumId return numbering numId that being use by style properties.
func (_dbaaag ParagraphStyleProperties )NumId ()int64 {if _dbaaag ._cccfb .NumPr !=nil {if _dbaaag ._cccfb .NumPr .NumId !=nil {return _dbaaag ._cccfb .NumPr .NumId .ValAttr ;};};return -1;};

// X returns the inner wrapped XML type.
func (_bbec NumberingDefinition )X ()*_dg .CT_AbstractNum {return _bbec ._ebgf };

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_agfbb RunProperties )SetFontFamily (family string ){if _agfbb ._eafe .RFonts ==nil {_agfbb ._eafe .RFonts =_dg .NewCT_Fonts ();};_agfbb ._eafe .RFonts .AsciiAttr =_a .String (family );_agfbb ._eafe .RFonts .HAnsiAttr =_a .String (family );_agfbb ._eafe .RFonts .EastAsiaAttr =_a .String (family );};

// SetStyle sets the style of a paragraph.
func (_bece ParagraphProperties )SetStyle (s string ){if s ==""{_bece ._efcd .PStyle =nil ;}else {_bece ._efcd .PStyle =_dg .NewCT_String ();_bece ._efcd .PStyle .ValAttr =s ;};};

// Paragraphs returns the paragraphs defined in a header.
func (_gdfdg Header )Paragraphs ()[]Paragraph {_agbc :=[]Paragraph {};for _ ,_dddf :=range _gdfdg ._abge .EG_ContentBlockContent {for _ ,_dddg :=range _dddf .P {_agbc =append (_agbc ,Paragraph {_gdfdg ._fgabf ,_dddg });};};for _ ,_bdcc :=range _gdfdg .Tables (){for _ ,_bcaa :=range _bdcc .Rows (){for _ ,_accf :=range _bcaa .Cells (){_agbc =append (_agbc ,_accf .Paragraphs ()...);};};};return _agbc ;};

// Footers returns the footers defined in the document.
func (_cge *Document )Footers ()[]Footer {_edfg :=[]Footer {};for _ ,_gec :=range _cge ._dcfe {_edfg =append (_edfg ,Footer {_cge ,_gec });};return _edfg ;};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_bbfga ParagraphProperties )ComplexSizeValue ()float64 {if _dgcbg :=_bbfga ._efcd .RPr .SzCs ;_dgcbg !=nil {_gffa :=_dgcbg .ValAttr ;if _gffa .ST_UnsignedDecimalNumber !=nil {return float64 (*_gffa .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// X returns the inner wrapped XML type.
func (_cefd TableLook )X ()*_dg .CT_TblLook {return _cefd ._ccbcf };

// AddTextInput adds text input form field to the paragraph and returns it.
func (_adafd Paragraph )AddTextInput (name string )FormField {_ebaf :=_adafd .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_ebaf ._fada .TextInput =_dg .NewCT_FFTextInput ();return _ebaf ;};func (_cbaf Run )newIC ()*_dg .EG_RunInnerContent {_gfgge :=_dg .NewEG_RunInnerContent ();_cbaf ._ceca .EG_RunInnerContent =append (_cbaf ._ceca .EG_RunInnerContent ,_gfgge );return _gfgge ;};

// SetAll sets all of the borders to a given value.
func (_ggbg CellBorders )SetAll (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_ggbg .SetBottom (t ,c ,thickness );_ggbg .SetLeft (t ,c ,thickness );_ggbg .SetRight (t ,c ,thickness );_ggbg .SetTop (t ,c ,thickness );_ggbg .SetInsideHorizontal (t ,c ,thickness );_ggbg .SetInsideVertical (t ,c ,thickness );};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_gdfec TableProperties )SetCellSpacingPercent (pct float64 ){_gdfec ._dbccb .TblCellSpacing =_dg .NewCT_TblWidth ();_gdfec ._dbccb .TblCellSpacing .TypeAttr =_dg .ST_TblWidthPct ;_gdfec ._dbccb .TblCellSpacing .WAttr =&_dg .ST_MeasurementOrPercent {};_gdfec ._dbccb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_gdfec ._dbccb .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (pct *50));};

// ExtractText returns text from the document as a DocText object.
func (_bcgd *Document )ExtractText ()*DocText {_bgaf :=[]TextItem {};for _ ,_eebg :=range _bcgd ._fabd .Body .EG_BlockLevelElts {_bgaf =append (_bgaf ,_gcfg (_eebg .EG_ContentBlockContent ,nil )...);};var _abgbe []listItemInfo ;_fbaeg :=_bcgd .Paragraphs ();for _ ,_afdd :=range _fbaeg {_gbcf :=_gbeg (_bcgd ,_afdd );_abgbe =append (_abgbe ,_gbcf );};_ddbf :=_abdgd (_bcgd );return &DocText {Items :_bgaf ,_dacd :_abgbe ,_gbfg :_ddbf };};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_cgfa InlineDrawing )GetImage ()(_fc .ImageRef ,bool ){_gade :=_cgfa ._eagcd .Graphic .GraphicData .Any ;if len (_gade )> 0{_gfb ,_ggcc :=_gade [0].(*_cag .Pic );if _ggcc {if _gfb .BlipFill !=nil &&_gfb .BlipFill .Blip !=nil &&_gfb .BlipFill .Blip .EmbedAttr !=nil {return _cgfa ._abgf .GetImageByRelID (*_gfb .BlipFill .Blip .EmbedAttr );};};};return _fc .ImageRef {},false ;};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_ggdae TableStyleProperties )SetTableIndent (ind _bda .Distance ){_ggdae ._cgdg .TblInd =_dg .NewCT_TblWidth ();_ggdae ._cgdg .TblInd .TypeAttr =_dg .ST_TblWidthDxa ;_ggdae ._cgdg .TblInd .WAttr =&_dg .ST_MeasurementOrPercent {};_ggdae ._cgdg .TblInd .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_ggdae ._cgdg .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (ind /_bda .Dxa ));};

// Margins allows controlling individual cell margins.
func (_eb CellProperties )Margins ()CellMargins {if _eb ._ff .TcMar ==nil {_eb ._ff .TcMar =_dg .NewCT_TcMar ();};return CellMargins {_eb ._ff .TcMar };};func (_aedac *WatermarkPicture )findNode (_acefb *_a .XSDAny ,_dbfab string )*_a .XSDAny {for _ ,_efdg :=range _acefb .Nodes {if _efdg .XMLName .Local ==_dbfab {return _efdg ;};};return nil ;};

// VerticalAlign returns the value of run vertical align.
func (_ccff RunProperties )VerticalAlignment ()_aea .ST_VerticalAlignRun {if _agdf :=_ccff ._eafe .VertAlign ;_agdf !=nil {return _agdf .ValAttr ;};return 0;};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_beg *_dg .CT_TcMar };

// SetYOffset sets the Y offset for an image relative to the origin.
func (_fbc AnchoredDrawing )SetYOffset (y _bda .Distance ){_fbc ._eg .PositionV .Choice =&_dg .WdCT_PosVChoice {};_fbc ._eg .PositionV .Choice .PosOffset =_a .Int32 (int32 (y /_bda .EMU ));};

// Paragraphs returns the paragraphs defined in a footer.
func (_dged Footer )Paragraphs ()[]Paragraph {_fddb :=[]Paragraph {};for _ ,_dadf :=range _dged ._cfaa .EG_ContentBlockContent {for _ ,_gbecd :=range _dadf .P {_fddb =append (_fddb ,Paragraph {_dged ._bccf ,_gbecd });};};for _ ,_eegf :=range _dged .Tables (){for _ ,_gabec :=range _eegf .Rows (){for _ ,_bbfg :=range _gabec .Cells (){_fddb =append (_fddb ,_bbfg .Paragraphs ()...);};};};return _fddb ;};

// AddParagraph adds a paragraph to the table cell.
func (_af Cell )AddParagraph ()Paragraph {_gcd :=_dg .NewEG_BlockLevelElts ();_af ._ddb .EG_BlockLevelElts =append (_af ._ddb .EG_BlockLevelElts ,_gcd );_edca :=_dg .NewEG_ContentBlockContent ();_gcd .EG_ContentBlockContent =append (_gcd .EG_ContentBlockContent ,_edca );_gfad :=_dg .NewCT_P ();_edca .P =append (_edca .P ,_gfad );return Paragraph {_af ._bf ,_gfad };};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_ceggf TableBorders )SetInsideVertical (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_ceggf ._bccfe .InsideV =_dg .NewCT_Border ();_eeefg (_ceggf ._bccfe .InsideV ,t ,c ,thickness );};

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_bcgg Paragraph )SetStyle (s string ){_bcgg .ensurePPr ();if s ==""{_bcgg ._agbe .PPr .PStyle =nil ;}else {_bcgg ._agbe .PPr .PStyle =_dg .NewCT_String ();_bcgg ._agbe .PPr .PStyle .ValAttr =s ;};};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_dfeg Document )SetConformance (conformanceAttr _aea .ST_ConformanceClass ){_dfeg ._fabd .ConformanceAttr =conformanceAttr ;};

// Italic returns true if run font is italic.
func (_gbcdd RunProperties )Italic ()bool {_agcg :=_gbcdd ._eafe ;return _bdba (_agcg .I )||_bdba (_agcg .ICs );};

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_ggfag *Document ;_efcd *_dg .CT_PPr ;};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_gafc ParagraphSpacing )SetBeforeAuto (b bool ){if b {_gafc ._fdbd .BeforeAutospacingAttr =&_aea .ST_OnOff {};_gafc ._fdbd .BeforeAutospacingAttr .Bool =_a .Bool (true );}else {_gafc ._fdbd .BeforeAutospacingAttr =nil ;};};func _febdd ()*_fab .Textpath {_bgdfe :=_fab .NewTextpath ();_fgcb :="\u0066\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069l\u0079\u003a\u0022\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0022\u003b\u0066\u006f\u006e\u0074\u002d\u0073\u0069\u007a\u0065\u003a\u00366\u0070\u0074;\u0066\u006fn\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003a\u0062\u006f\u006c\u0064;f\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065:\u0069\u0074\u0061\u006c\u0069\u0063";_bgdfe .StyleAttr =&_fgcb ;_fcdg :="\u0041\u0053\u0041\u0050";_bgdfe .StringAttr =&_fcdg ;return _bgdfe ;};

// Underline returns the type of run underline.
func (_eaab RunProperties )Underline ()_dg .ST_Underline {if _befea :=_eaab ._eafe .U ;_befea !=nil {return _befea .ValAttr ;};return 0;};func _bag (_ffg *_dg .CT_Tbl ,_dgcd *_dg .CT_P ,_gabd bool )*_dg .CT_Tbl {for _ ,_aabg :=range _ffg .EG_ContentRowContent {for _ ,_bgc :=range _aabg .Tr {for _ ,_gaac :=range _bgc .EG_ContentCellContent {for _ ,_dfb :=range _gaac .Tc {for _bae ,_bcfb :=range _dfb .EG_BlockLevelElts {for _ ,_fde :=range _bcfb .EG_ContentBlockContent {for _dadb ,_dbf :=range _fde .P {if _dbf ==_dgcd {_eca :=_dg .NewEG_BlockLevelElts ();_eee :=_dg .NewEG_ContentBlockContent ();_eca .EG_ContentBlockContent =append (_eca .EG_ContentBlockContent ,_eee );_abec :=_dg .NewCT_Tbl ();_eee .Tbl =append (_eee .Tbl ,_abec );_dfb .EG_BlockLevelElts =append (_dfb .EG_BlockLevelElts ,nil );if _gabd {copy (_dfb .EG_BlockLevelElts [_bae +1:],_dfb .EG_BlockLevelElts [_bae :]);_dfb .EG_BlockLevelElts [_bae ]=_eca ;if _dadb !=0{_facg :=_dg .NewEG_BlockLevelElts ();_egfg :=_dg .NewEG_ContentBlockContent ();_facg .EG_ContentBlockContent =append (_facg .EG_ContentBlockContent ,_egfg );_egfg .P =_fde .P [:_dadb ];_dfb .EG_BlockLevelElts =append (_dfb .EG_BlockLevelElts ,nil );copy (_dfb .EG_BlockLevelElts [_bae +1:],_dfb .EG_BlockLevelElts [_bae :]);_dfb .EG_BlockLevelElts [_bae ]=_facg ;};_fde .P =_fde .P [_dadb :];}else {copy (_dfb .EG_BlockLevelElts [_bae +2:],_dfb .EG_BlockLevelElts [_bae +1:]);_dfb .EG_BlockLevelElts [_bae +1]=_eca ;if _dadb !=len (_fde .P )-1{_gafe :=_dg .NewEG_BlockLevelElts ();_dfa :=_dg .NewEG_ContentBlockContent ();_gafe .EG_ContentBlockContent =append (_gafe .EG_ContentBlockContent ,_dfa );_dfa .P =_fde .P [_dadb +1:];_dfb .EG_BlockLevelElts =append (_dfb .EG_BlockLevelElts ,nil );copy (_dfb .EG_BlockLevelElts [_bae +3:],_dfb .EG_BlockLevelElts [_bae +2:]);_dfb .EG_BlockLevelElts [_bae +2]=_gafe ;}else {_cda :=_dg .NewEG_BlockLevelElts ();_gfgb :=_dg .NewEG_ContentBlockContent ();_cda .EG_ContentBlockContent =append (_cda .EG_ContentBlockContent ,_gfgb );_gfgb .P =[]*_dg .CT_P {_dg .NewCT_P ()};_dfb .EG_BlockLevelElts =append (_dfb .EG_BlockLevelElts ,nil );copy (_dfb .EG_BlockLevelElts [_bae +3:],_dfb .EG_BlockLevelElts [_bae +2:]);_dfb .EG_BlockLevelElts [_bae +2]=_cda ;};_fde .P =_fde .P [:_dadb +1];};return _abec ;};};for _ ,_geda :=range _fde .Tbl {_cdc :=_bag (_geda ,_dgcd ,_gabd );if _cdc !=nil {return _cdc ;};};};};};};};};return nil ;};

// Properties returns the row properties.
func (_gbcg Row )Properties ()RowProperties {if _gbcg ._egca .TrPr ==nil {_gbcg ._egca .TrPr =_dg .NewCT_TrPr ();};return RowProperties {_gbcg ._egca .TrPr };};

// Spacing returns the paragraph spacing settings.
func (_aabfg ParagraphProperties )Spacing ()ParagraphSpacing {if _aabfg ._efcd .Spacing ==nil {_aabfg ._efcd .Spacing =_dg .NewCT_Spacing ();};return ParagraphSpacing {_aabfg ._efcd .Spacing };};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_cgbac NumberingDefinition )MultiLevelType ()_dg .ST_MultiLevelType {if _cgbac ._ebgf .MultiLevelType !=nil {return _cgbac ._ebgf .MultiLevelType .ValAttr ;}else {return _dg .ST_MultiLevelTypeUnset ;};};

// SetColor sets a specific color or auto.
func (_fgbg Color )SetColor (v _fa .Color ){if v .IsAuto (){_fgbg ._dad .ValAttr .ST_HexColorAuto =_dg .ST_HexColorAutoAuto ;_fgbg ._dad .ValAttr .ST_HexColorRGB =nil ;}else {_fgbg ._dad .ValAttr .ST_HexColorAuto =_dg .ST_HexColorAutoUnset ;_fgbg ._dad .ValAttr .ST_HexColorRGB =v .AsRGBString ();};};func (_bgaef *Document )putNode (_ebcc ,_bebf Node ,_bgddc bool )bool {_bgaef .insertImageFromNode (_bebf );_bgaef .insertStyleFromNode (_bebf );switch _cdbc :=_bebf ._dbdg .(type ){case *Paragraph :if _cbf ,_dage :=_ebcc .X ().(*Paragraph );_dage {_bgaef .appendParagraph (_cbf ,*_cdbc ,_bgddc );return true ;}else {for _ ,_ccgc :=range _ebcc .Children {if _cabf :=_bgaef .putNode (_ccgc ,_bebf ,_bgddc );_cabf {break ;};};};case *Table :if _gcde ,_cbbf :=_ebcc .X ().(*Paragraph );_cbbf {_eaaa :=_bgaef .appendTable (_gcde ,*_cdbc ,_bgddc );_eaaa ._ebff =_cdbc ._ebff ;return true ;}else {for _ ,_cged :=range _ebcc .Children {if _cggb :=_bgaef .putNode (_cged ,_bebf ,_bgddc );_cggb {break ;};};};};return false ;};

// SearchStyleByName return style by its name.
func (_eaabf Styles )SearchStyleByName (name string )(Style ,bool ){for _ ,_adgec :=range _eaabf ._cfca .Style {if _adgec .Name !=nil {if _adgec .Name .ValAttr ==name {return Style {_adgec },true ;};};};return Style {},false ;};

// Caps returns true if paragraph font is capitalized.
func (_acbcf ParagraphProperties )Caps ()bool {return _bdba (_acbcf ._efcd .RPr .Caps )};

// X returns the inner wrapped XML type.
func (_dbaee Styles )X ()*_dg .Styles {return _dbaee ._cfca };

// Borders allows controlling individual cell borders.
func (_bafd CellProperties )Borders ()CellBorders {if _bafd ._ff .TcBorders ==nil {_bafd ._ff .TcBorders =_dg .NewCT_TcBorders ();};return CellBorders {_bafd ._ff .TcBorders };};

// AddCell adds a cell to a row and returns it
func (_ccfcd Row )AddCell ()Cell {_fcefc :=_dg .NewEG_ContentCellContent ();_ccfcd ._egca .EG_ContentCellContent =append (_ccfcd ._egca .EG_ContentCellContent ,_fcefc );_adebe :=_dg .NewCT_Tc ();_fcefc .Tc =append (_fcefc .Tc ,_adebe );return Cell {_ccfcd ._gebde ,_adebe };};

// SizeValue returns the value of paragraph font size in points.
func (_afafa ParagraphProperties )SizeValue ()float64 {if _fgdb :=_afafa ._efcd .RPr .Sz ;_fgdb !=nil {_dggd :=_fgdb .ValAttr ;if _dggd .ST_UnsignedDecimalNumber !=nil {return float64 (*_dggd .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetHangingIndent controls special indent of paragraph.
func (_bcad Paragraph )SetHangingIndent (m _bda .Distance ){_bcad .ensurePPr ();_gcfgd :=_bcad ._agbe .PPr ;if _gcfgd .Ind ==nil {_gcfgd .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_gcfgd .Ind .HangingAttr =nil ;}else {_gcfgd .Ind .HangingAttr =&_aea .ST_TwipsMeasure {};_gcfgd .Ind .HangingAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (m /_bda .Twips ));};};

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_bdbb *Document )GetTargetByRelId (idAttr string )string {return _bdbb ._eega .GetTargetByRelId (idAttr );};

// SetStart sets the cell start margin
func (_bfb CellMargins )SetStart (d _bda .Distance ){_bfb ._beg .Start =_dg .NewCT_TblWidth ();_def (_bfb ._beg .Start ,d );};

// AddPageBreak adds a page break to a run.
func (_bcadg Run )AddPageBreak (){_bdag :=_bcadg .newIC ();_bdag .Br =_dg .NewCT_Br ();_bdag .Br .TypeAttr =_dg .ST_BrTypePage ;};

// X returns the inner wrapped type
func (_cg CellBorders )X ()*_dg .CT_TcBorders {return _cg ._ab };

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_aaeab NumberingDefinition )AbstractNumberID ()int64 {return _aaeab ._ebgf .AbstractNumIdAttr };

// NewAnchorDrawWrapOptions return anchor drawing options property.
func NewAnchorDrawWrapOptions ()*AnchorDrawWrapOptions {_gb :=&AnchorDrawWrapOptions {};if !_gb ._dac {_bdae ,_edf :=_gc ();_gb ._gab =_bdae ;_gb ._dgc =_edf ;};return _gb ;};

// Levels returns all of the numbering levels defined in the definition.
func (_ebebd NumberingDefinition )Levels ()[]NumberingLevel {_aedf :=[]NumberingLevel {};for _ ,_fabc :=range _ebebd ._ebgf .Lvl {_aedf =append (_aedf ,NumberingLevel {_fabc });};return _aedf ;};

// AddRun adds a run to a paragraph.
func (_ecge Paragraph )AddRun ()Run {_cfab :=_dg .NewEG_PContent ();_ecge ._agbe .EG_PContent =append (_ecge ._agbe .EG_PContent ,_cfab );_dbbbd :=_dg .NewEG_ContentRunContent ();_cfab .EG_ContentRunContent =append (_cfab .EG_ContentRunContent ,_dbbbd );_gcad :=_dg .NewCT_R ();_dbbbd .R =_gcad ;return Run {_ecge ._baff ,_gcad };};

// X returns the inner wrapped XML type.
func (_efda Numbering )X ()*_dg .Numbering {return _efda ._ffad };

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_adgcda *_dg .CT_TblStylePr };

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_dggbd *_dg .CT_Lvl };func (_bccd Paragraph )addEndFldChar ()*_dg .CT_FldChar {_fadda :=_bccd .addFldChar ();_fadda .FldCharTypeAttr =_dg .ST_FldCharTypeEnd ;return _fadda ;};

// IgnoreSpaceBetweenParagraphOfSameStyle sets contextual spacing.
func (_ecbg Paragraph )IgnoreSpaceBetweenParagraphOfSameStyle (){_ecbg .ensurePPr ();if _ecbg ._agbe .PPr .ContextualSpacing ==nil {_ecbg ._agbe .PPr .ContextualSpacing =_dg .NewCT_OnOff ();};_ecbg ._agbe .PPr .ContextualSpacing .ValAttr =&_aea .ST_OnOff {ST_OnOff1 :_aea .ST_OnOff1On };};

// AddTable adds a table to the table cell.
func (_cage Cell )AddTable ()Table {_fgba :=_dg .NewEG_BlockLevelElts ();_cage ._ddb .EG_BlockLevelElts =append (_cage ._ddb .EG_BlockLevelElts ,_fgba );_gbda :=_dg .NewEG_ContentBlockContent ();_fgba .EG_ContentBlockContent =append (_fgba .EG_ContentBlockContent ,_gbda );_be :=_dg .NewCT_Tbl ();_gbda .Tbl =append (_gbda .Tbl ,_be );return Table {_cage ._bf ,_be };};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_fg AnchoredDrawing )GetImage ()(_fc .ImageRef ,bool ){_df :=_fg ._eg .Graphic .GraphicData .Any ;if len (_df )> 0{_de ,_ce :=_df [0].(*_cag .Pic );if _ce {if _de .BlipFill !=nil &&_de .BlipFill .Blip !=nil &&_de .BlipFill .Blip .EmbedAttr !=nil {return _fg ._fbf .GetImageByRelID (*_de .BlipFill .Blip .EmbedAttr );};};};return _fc .ImageRef {},false ;};func (_eab *chart )RelId ()string {return _eab ._eadg };

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_ebgf *_dg .CT_AbstractNum };

// GetText returns text in the watermark.
func (_cbacc *WatermarkText )GetText ()string {_dcgeb :=_cbacc .getShape ();if _cbacc ._fgdf !=nil {_fbged :=_cbacc ._fgdf .EG_ShapeElements ;if len (_fbged )> 0&&_fbged [0].Textpath !=nil {return *_fbged [0].Textpath .StringAttr ;};}else {_fagbg :=_cbacc .findNode (_dcgeb ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_dedag :=range _fagbg .Attrs {if _dedag .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{return _dedag .Value ;};};};return "";};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_aafe ParagraphProperties )EastAsiaFont ()string {if _dgd :=_aafe ._efcd .RPr .RFonts ;_dgd !=nil {if _dgd .EastAsiaAttr !=nil {return *_dgd .EastAsiaAttr ;};};return "";};

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_ddgec Paragraph )AddDropdownList (name string )FormField {_baba :=_ddgec .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_baba ._fada .DdList =_dg .NewCT_FFDDList ();return _baba ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_deaef TableBorders )SetTop (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_deaef ._bccfe .Top =_dg .NewCT_Border ();_eeefg (_deaef ._bccfe .Top ,t ,c ,thickness );};

// HyperLink is a link within a document.
type HyperLink struct{_adgab *Document ;_bcdfe *_dg .CT_Hyperlink ;};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_addd *Document )MailMerge (mergeContent map[string ]string ){_fgafb :=_addd .mergeFields ();_eeced :=map[Paragraph ][]Run {};for _ ,_dbcc :=range _fgafb {_bcffb ,_bfaa :=mergeContent [_dbcc ._gccf ];if _bfaa {if _dbcc ._bdeac {_bcffb =_bc .ToUpper (_bcffb );}else if _dbcc ._begdg {_bcffb =_bc .ToLower (_bcffb );}else if _dbcc ._acbe {_bcffb =_bc .Title (_bcffb );}else if _dbcc ._eagd {_afac :=_gga .Buffer {};for _baed ,_agbdb :=range _bcffb {if _baed ==0{_afac .WriteRune (_d .ToUpper (_agbdb ));}else {_afac .WriteRune (_agbdb );};};_bcffb =_afac .String ();};if _bcffb !=""&&_dbcc ._dgca !=""{_bcffb =_dbcc ._dgca +_bcffb ;};if _bcffb !=""&&_dbcc ._eaace !=""{_bcffb =_bcffb +_dbcc ._eaace ;};};if _dbcc ._bede {if len (_dbcc ._aege .FldSimple )==1&&len (_dbcc ._aege .FldSimple [0].EG_PContent )==1&&len (_dbcc ._aege .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_gdfde :=&_dg .EG_ContentRunContent {};_gdfde .R =_dbcc ._aege .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_dbcc ._aege .FldSimple =nil ;_bgddb :=Run {_addd ,_gdfde .R };_bgddb .ClearContent ();_bgddb .AddText (_bcffb );_dbcc ._aege .EG_ContentRunContent =append (_dbcc ._aege .EG_ContentRunContent ,_gdfde );};}else {_adae :=_dbcc ._cgaa .Runs ();for _dfdc :=_dbcc ._fcfg ;_dfdc <=_dbcc ._afaf ;_dfdc ++{if _dfdc ==_dbcc ._ddfb +1{_adae [_dfdc ].ClearContent ();_adae [_dfdc ].AddText (_bcffb );}else {_eeced [_dbcc ._cgaa ]=append (_eeced [_dbcc ._cgaa ],_adae [_dfdc ]);};};};};for _abdgdc ,_cdbad :=range _eeced {for _ ,_bdbbc :=range _cdbad {_abdgdc .RemoveRun (_bdbbc );};};_addd .Settings .RemoveMailMerge ();};

// SetWidthAuto sets the the cell width to automatic.
func (_dee CellProperties )SetWidthAuto (){_dee ._ff .TcW =_dg .NewCT_TblWidth ();_dee ._ff .TcW .TypeAttr =_dg .ST_TblWidthAuto ;};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_dbgef Paragraph )AddEndnote (text string )Endnote {var _gdfab int64 ;if _dbgef ._baff .HasEndnotes (){for _ ,_beecd :=range _dbgef ._baff .Endnotes (){if _beecd .id ()> _gdfab {_gdfab =_beecd .id ();};};_gdfab ++;}else {_gdfab =0;_dbgef ._baff ._abbb =&_dg .Endnotes {};};_bfeeg :=_dg .NewCT_FtnEdn ();_eabaa :=_dg .NewCT_FtnEdnRef ();_eabaa .IdAttr =_gdfab ;_dbgef ._baff ._abbb .CT_Endnotes .Endnote =append (_dbgef ._baff ._abbb .CT_Endnotes .Endnote ,_bfeeg );_ccaf :=_dbgef .AddRun ();_beabc :=_ccaf .Properties ();_beabc .SetStyle ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0041\u006e\u0063\u0068\u006f\u0072");_ccaf ._ceca .EG_RunInnerContent =[]*_dg .EG_RunInnerContent {_dg .NewEG_RunInnerContent ()};_ccaf ._ceca .EG_RunInnerContent [0].EndnoteReference =_eabaa ;_eac :=Endnote {_dbgef ._baff ,_bfeeg };_eac ._dggc .IdAttr =_gdfab ;_eac ._dggc .EG_BlockLevelElts =[]*_dg .EG_BlockLevelElts {_dg .NewEG_BlockLevelElts ()};_egfb :=_eac .AddParagraph ();_egfb .Properties ().SetStyle ("\u0045n\u0064\u006e\u006f\u0074\u0065");_egfb ._agbe .PPr .RPr =_dg .NewCT_ParaRPr ();_fgfca :=_egfb .AddRun ();_fgfca .AddTab ();_fgfca .AddText (text );return _eac ;};

// Properties returns the run properties.
func (_bged Run )Properties ()RunProperties {if _bged ._ceca .RPr ==nil {_bged ._ceca .RPr =_dg .NewCT_RPr ();};return RunProperties {_bged ._ceca .RPr };};func (_gdg *Document )onNewRelationship (_dgfe *_ad .DecodeMap ,_bbfd ,_beaef string ,_age []*_f .File ,_fddg *_ec .Relationship ,_ffa _ad .Target )error {_ecg :=_a .DocTypeDocument ;switch _beaef {case _a .OfficeDocumentType ,_a .OfficeDocumentTypeStrict :_gdg ._fabd =_dg .NewDocument ();_dgfe .AddTarget (_bbfd ,_gdg ._fabd ,_beaef ,0);_dgfe .AddTarget (_ad .RelationsPathFor (_bbfd ),_gdg ._eega .X (),_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .CorePropertiesType :_dgfe .AddTarget (_bbfd ,_gdg .CoreProperties .X (),_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .CustomPropertiesType :_dgfe .AddTarget (_bbfd ,_gdg .CustomProperties .X (),_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .ExtendedPropertiesType ,_a .ExtendedPropertiesTypeStrict :_dgfe .AddTarget (_bbfd ,_gdg .AppProperties .X (),_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .ThumbnailType ,_a .ThumbnailTypeStrict :for _dgcdg ,_caag :=range _age {if _caag ==nil {continue ;};if _caag .Name ==_bbfd {_fbdc ,_cga :=_caag .Open ();if _cga !=nil {return _bcf .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_cga );};_gdg .Thumbnail ,_ ,_cga =_gf .Decode (_fbdc );_fbdc .Close ();if _cga !=nil {return _bcf .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_cga );};_age [_dgcdg ]=nil ;};};case _a .SettingsType ,_a .SettingsTypeStrict :_dgfe .AddTarget (_bbfd ,_gdg .Settings .X (),_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .NumberingType ,_a .NumberingTypeStrict :_gdg .Numbering =NewNumbering ();_dgfe .AddTarget (_bbfd ,_gdg .Numbering .X (),_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .StylesType ,_a .StylesTypeStrict :_gdg .Styles .Clear ();_dgfe .AddTarget (_bbfd ,_gdg .Styles .X (),_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .HeaderType ,_a .HeaderTypeStrict :_daeb :=_dg .NewHdr ();_dgfe .AddTarget (_bbfd ,_daeb ,_beaef ,uint32 (len (_gdg ._agd )));_gdg ._agd =append (_gdg ._agd ,_daeb );_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,len (_gdg ._agd ));_eceg :=_fc .NewRelationships ();_dgfe .AddTarget (_ad .RelationsPathFor (_bbfd ),_eceg .X (),_beaef ,0);_gdg ._gbc =append (_gdg ._gbc ,_eceg );case _a .FooterType ,_a .FooterTypeStrict :_cdec :=_dg .NewFtr ();_dgfe .AddTarget (_bbfd ,_cdec ,_beaef ,uint32 (len (_gdg ._dcfe )));_gdg ._dcfe =append (_gdg ._dcfe ,_cdec );_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,len (_gdg ._dcfe ));_gbae :=_fc .NewRelationships ();_dgfe .AddTarget (_ad .RelationsPathFor (_bbfd ),_gbae .X (),_beaef ,0);_gdg ._bcg =append (_gdg ._bcg ,_gbae );case _a .ThemeType ,_a .ThemeTypeStrict :_bfbcc :=_fb .NewTheme ();_dgfe .AddTarget (_bbfd ,_bfbcc ,_beaef ,uint32 (len (_gdg ._cbef )));_gdg ._cbef =append (_gdg ._cbef ,_bfbcc );_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,len (_gdg ._cbef ));case _a .WebSettingsType ,_a .WebSettingsTypeStrict :_gdg ._fdf =_dg .NewWebSettings ();_dgfe .AddTarget (_bbfd ,_gdg ._fdf ,_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .FontTableType ,_a .FontTableTypeStrict :_gdg ._egf =_dg .NewFonts ();_dgfe .AddTarget (_bbfd ,_gdg ._egf ,_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .EndNotesType ,_a .EndNotesTypeStrict :_gdg ._abbb =_dg .NewEndnotes ();_dgfe .AddTarget (_bbfd ,_gdg ._abbb ,_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .FootNotesType ,_a .FootNotesTypeStrict :_gdg ._dea =_dg .NewFootnotes ();_dgfe .AddTarget (_bbfd ,_gdg ._dea ,_beaef ,0);_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,0);case _a .ImageType ,_a .ImageTypeStrict :var _defea _fc .ImageRef ;for _cfbbd ,_adcd :=range _age {if _adcd ==nil {continue ;};if _adcd .Name ==_bbfd {_eeb ,_edg :=_ad .ExtractToDiskTmp (_adcd ,_gdg .TmpPath );if _edg !=nil {return _edg ;};_dffa ,_edg :=_fc .ImageFromStorage (_eeb );if _edg !=nil {return _edg ;};_defea =_fc .MakeImageRef (_dffa ,&_gdg .DocBase ,_gdg ._eega );_age [_cfbbd ]=nil ;};};if _defea .Format ()!=""{_fcgb :="\u002e"+_bc .ToLower (_defea .Format ());_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,len (_gdg .Images )+1);if _effd :=_bb .Ext (_fddg .TargetAttr );_effd !=_fcgb {_fddg .TargetAttr =_fddg .TargetAttr [0:len (_fddg .TargetAttr )-len (_effd )]+_fcgb ;};_defea .SetTarget ("\u0077\u006f\u0072d\u002f"+_fddg .TargetAttr );_gdg .Images =append (_gdg .Images ,_defea );};case _a .ControlType ,_a .ControlTypeStrict :_fega :=_cb .NewOcx ();_ebbc :=_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,len (_gdg ._agg )+1);_dacg :="\u0077\u006f\u0072d\u002f"+_ebbc [:len (_ebbc )-4]+"\u002e\u0062\u0069\u006e";for _dbgcd ,_afbd :=range _age {if _afbd ==nil {continue ;};if _afbd .Name ==_dacg {_dfca ,_gcee :=_ad .ExtractToDiskTmp (_afbd ,_gdg .TmpPath );if _gcee !=nil {return _gcee ;};_fgcg ,_gcee :=_aef .ImportFromFile (_dfca );if _gcee ==nil {_fgcg .TargetAttr =_ebbc ;_fgcg .Ocx =_fega ;_gdg ._agg =append (_gdg ._agg ,_fgcg );_dgfe .AddTarget (_bbfd ,_fega ,_beaef ,uint32 (len (_gdg ._agg )));_fddg .TargetAttr =_ebbc ;_age [_dbgcd ]=nil ;}else {_bd .Log .Debug ("c\u0061\u006e\u006e\u006f\u0074\u0020r\u0065\u0061\u0064\u0020\u0062\u0069\u006e\u0020\u0066i\u006c\u0065\u003a \u0025s\u0020\u0025\u0073",_dacg ,_gcee .Error ());};break ;};};case _a .ChartType :_abdf :=chart {_ega :_ea .NewChartSpace ()};_gbbe :=uint32 (len (_gdg ._edb ));_dgfe .AddTarget (_bbfd ,_abdf ._ega ,_beaef ,_gbbe );_gdg ._edb =append (_gdg ._edb ,&_abdf );_fddg .TargetAttr =_a .RelativeFilename (_ecg ,_ffa .Typ ,_beaef ,len (_gdg ._edb ));_abdf ._dfe =_fddg .TargetAttr ;default:_bd .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_beaef ,_bbfd );};return nil ;};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_eedbb Style )SetUnhideWhenUsed (b bool ){if b {_eedbb ._ddgd .UnhideWhenUsed =_dg .NewCT_OnOff ();}else {_eedbb ._ddgd .UnhideWhenUsed =nil ;};};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_dcdb ParagraphProperties )AddSection (t _dg .ST_SectionMark )Section {_dcdb ._efcd .SectPr =_dg .NewCT_SectPr ();if t !=_dg .ST_SectionMarkUnset {_dcdb ._efcd .SectPr .Type =_dg .NewCT_SectType ();_dcdb ._efcd .SectPr .Type .ValAttr =t ;};return Section {_dcdb ._ggfag ,_dcdb ._efcd .SectPr };};

// RemoveParagraph removes a paragraph from a footer.
func (_degbe Header )RemoveParagraph (p Paragraph ){for _ ,_ecbc :=range _degbe ._abge .EG_ContentBlockContent {for _bdabc ,_cfbg :=range _ecbc .P {if _cfbg ==p ._agbe {copy (_ecbc .P [_bdabc :],_ecbc .P [_bdabc +1:]);_ecbc .P =_ecbc .P [0:len (_ecbc .P )-1];return ;};};};};

// X returns the inner wrapped XML type.
func (_bbaa NumberingLevel )X ()*_dg .CT_Lvl {return _bbaa ._dggbd };

// Color controls the run or styles color.
type Color struct{_dad *_dg .CT_Color };

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_fcbac FormField )SetValue (v string ){if _fcbac ._fada .DdList !=nil {for _faac ,_bfgb :=range _fcbac .PossibleValues (){if _bfgb ==v {_fcbac ._fada .DdList .Result =_dg .NewCT_DecimalNumber ();_fcbac ._fada .DdList .Result .ValAttr =int64 (_faac );break ;};};}else if _fcbac ._fada .TextInput !=nil {_fcbac ._daef .T =_dg .NewCT_Text ();_fcbac ._daef .T .Content =v ;};};

// X returns the inner wrapped XML type.
func (_bbf *Document )X ()*_dg .Document {return _bbf ._fabd };func (_ebbf *WatermarkPicture )getInnerElement (_ecbb string )*_a .XSDAny {for _ ,_gaacga :=range _ebbf ._dega .Any {_daebb ,_deeg :=_gaacga .(*_a .XSDAny );if _deeg &&(_daebb .XMLName .Local ==_ecbb ||_daebb .XMLName .Local =="\u0076\u003a"+_ecbb ){return _daebb ;};};return nil ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_fagf Header )AddImage (i _fc .Image )(_fc .ImageRef ,error ){var _geggf _fc .Relationships ;for _cgac ,_afee :=range _fagf ._fgabf ._agd {if _afee ==_fagf ._abge {_geggf =_fagf ._fgabf ._gbc [_cgac ];};};_dgecb :=_fc .MakeImageRef (i ,&_fagf ._fgabf .DocBase ,_geggf );if i .Data ==nil &&i .Path ==""{return _dgecb ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _dgecb ,_ga .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _dgecb ,_ga .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_fagf ._fgabf .Images =append (_fagf ._fgabf .Images ,_dgecb );_dgfb :=_bcf .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_fagf ._fgabf .Images ),i .Format );_fgec :=_geggf .AddRelationship (_dgfb ,_a .ImageType );_dgecb .SetRelID (_fgec .X ().IdAttr );return _dgecb ,nil ;};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_aeaad *Document ;_ceca *_dg .CT_R ;};func (_cece *Document )appendParagraph (_abgb *Paragraph ,_aec Paragraph ,_caa bool )Paragraph {_ggcb :=_dg .NewEG_BlockLevelElts ();_cece ._fabd .Body .EG_BlockLevelElts =append (_cece ._fabd .Body .EG_BlockLevelElts ,_ggcb );_bfgc :=_dg .NewEG_ContentBlockContent ();_ggcb .EG_ContentBlockContent =append (_ggcb .EG_ContentBlockContent ,_bfgc );if _abgb !=nil {_cbba :=_abgb .X ();for _ ,_acb :=range _cece ._fabd .Body .EG_BlockLevelElts {for _ ,_decb :=range _acb .EG_ContentBlockContent {for _bfd ,_babg :=range _decb .P {if _babg ==_cbba {_eegad :=_aec .X ();_decb .P =append (_decb .P ,nil );if _caa {copy (_decb .P [_bfd +1:],_decb .P [_bfd :]);_decb .P [_bfd ]=_eegad ;}else {copy (_decb .P [_bfd +2:],_decb .P [_bfd +1:]);_decb .P [_bfd +1]=_eegad ;};break ;};};for _ ,_dedb :=range _decb .Tbl {for _ ,_aee :=range _dedb .EG_ContentRowContent {for _ ,_dcfd :=range _aee .Tr {for _ ,_face :=range _dcfd .EG_ContentCellContent {for _ ,_ggf :=range _face .Tc {for _ ,_gfafc :=range _ggf .EG_BlockLevelElts {for _ ,_fedd :=range _gfafc .EG_ContentBlockContent {for _bfad ,_bffc :=range _fedd .P {if _bffc ==_cbba {_dag :=_aec .X ();_fedd .P =append (_fedd .P ,nil );if _caa {copy (_fedd .P [_bfad +1:],_fedd .P [_bfad :]);_fedd .P [_bfad ]=_dag ;}else {copy (_fedd .P [_bfad +2:],_fedd .P [_bfad +1:]);_fedd .P [_bfad +1]=_dag ;};break ;};};};};};};};};};if _decb .Sdt !=nil &&_decb .Sdt .SdtContent !=nil &&_decb .Sdt .SdtContent .P !=nil {for _fgaf ,_eadag :=range _decb .Sdt .SdtContent .P {if _eadag ==_cbba {_caf :=_aec .X ();_decb .Sdt .SdtContent .P =append (_decb .Sdt .SdtContent .P ,nil );if _caa {copy (_decb .Sdt .SdtContent .P [_fgaf +1:],_decb .Sdt .SdtContent .P [_fgaf :]);_decb .Sdt .SdtContent .P [_fgaf ]=_caf ;}else {copy (_decb .Sdt .SdtContent .P [_fgaf +2:],_decb .Sdt .SdtContent .P [_fgaf +1:]);_decb .Sdt .SdtContent .P [_fgaf +1]=_caf ;};break ;};};};};};}else {_bfgc .P =append (_bfgc .P ,_aec .X ());};_ceb :=_aec .Properties ();if _bgbf ,_ebe :=_ceb .Section ();_ebe {var (_gge map[string ]string ;_fdd map[string ]string ;);_gdac :=_bgbf .X ().EG_HdrFtrReferences ;for _ ,_fabe :=range _gdac {if _fabe .HeaderReference !=nil {_gge =map[string ]string {_fabe .HeaderReference .IdAttr :_bgbf ._affc ._eega .GetTargetByRelId (_fabe .HeaderReference .IdAttr )};};if _fabe .FooterReference !=nil {_fdd =map[string ]string {_fabe .FooterReference .IdAttr :_bgbf ._affc ._eega .GetTargetByRelId (_fabe .FooterReference .IdAttr )};};};var _add map[int ]_fc .ImageRef ;for _ ,_afdg :=range _bgbf ._affc .Headers (){for _edaf ,_cce :=range _gge {_cbdee :=_bcf .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_afdg .Index ()+1));if _cbdee ==_cce {_aba :=_bcf .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_afdg .Index ());_cece ._agd =append (_cece ._agd ,_afdg .X ());_cceg :=_cece ._eega .AddRelationship (_aba ,_a .HeaderType );_cceg .SetID (_edaf );_cece .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_aba ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");_cece ._gbc =append (_cece ._gbc ,_fc .NewRelationships ());_dcggg :=_afdg .Paragraphs ();for _ ,_cggf :=range _dcggg {for _ ,_ade :=range _cggf .Runs (){_fgfg :=_ade .DrawingAnchored ();for _ ,_dcgb :=range _fgfg {if _gca ,_bdee :=_dcgb .GetImage ();_bdee {_add =map[int ]_fc .ImageRef {_afdg .Index ():_gca };};};_dcb :=_ade .DrawingInline ();for _ ,_dbc :=range _dcb {if _bcb ,_gfdf :=_dbc .GetImage ();_gfdf {_add =map[int ]_fc .ImageRef {_afdg .Index ():_bcb };};};};};};};};for _dge ,_abda :=range _add {for _ ,_fce :=range _cece .Headers (){if (_fce .Index ()+1)==_dge {_fafb ,_efa :=_fc .ImageFromFile (_abda .Path ());if _efa !=nil {_bd .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_efa );};if _ ,_efa =_fce .AddImage (_fafb );_efa !=nil {_bd .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_efa );};};for _ ,_aag :=range _fce .Paragraphs (){if _cfbb ,_gaacg :=_bgbf ._affc .Styles .SearchStyleById (_aag .Style ());_gaacg {if _ ,_fef :=_cece .Styles .SearchStyleById (_aag .Style ());!_fef {_cece .Styles .InsertStyle (_cfbb );};};};};};var _afg map[int ]_fc .ImageRef ;for _ ,_debf :=range _bgbf ._affc .Footers (){for _fcdc ,_fffe :=range _fdd {_dbaa :=_bcf .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",(_debf .Index ()+1));if _dbaa ==_fffe {_ecfa :=_bcf .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",_debf .Index ());_cece ._dcfe =append (_cece ._dcfe ,_debf .X ());_cdcf :=_cece ._eega .AddRelationship (_ecfa ,_a .FooterType );_cdcf .SetID (_fcdc );_cece .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_ecfa ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");_cece ._bcg =append (_cece ._bcg ,_fc .NewRelationships ());_baga :=_debf .Paragraphs ();for _ ,_eabc :=range _baga {for _ ,_gfdb :=range _eabc .Runs (){_aeec :=_gfdb .DrawingAnchored ();for _ ,_ecag :=range _aeec {if _bfgd ,_edcaf :=_ecag .GetImage ();_edcaf {_afg =map[int ]_fc .ImageRef {_debf .Index ():_bfgd };};};_fag :=_gfdb .DrawingInline ();for _ ,_ddgbg :=range _fag {if _acf ,_ecfc :=_ddgbg .GetImage ();_ecfc {_afg =map[int ]_fc .ImageRef {_debf .Index ():_acf };};};};};};};};for _bdd ,_fdada :=range _afg {for _ ,_fcfa :=range _cece .Footers (){if (_fcfa .Index ()+1)==_bdd {_cacc ,_fcce :=_fc .ImageFromFile (_fdada .Path ());if _fcce !=nil {_bd .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_fcce );};if _ ,_fcce =_fcfa .AddImage (_cacc );_fcce !=nil {_bd .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_fcce );};};for _ ,_eced :=range _fcfa .Paragraphs (){if _dffd ,_dcfc :=_bgbf ._affc .Styles .SearchStyleById (_eced .Style ());_dcfc {if _ ,_ccca :=_cece .Styles .SearchStyleById (_eced .Style ());!_ccca {_cece .Styles .InsertStyle (_dffd );};};};};};};_edbf :=_aec .Numbering ();_cece .Numbering ._ffad .AbstractNum =append (_cece .Numbering ._ffad .AbstractNum ,_edbf ._ffad .AbstractNum ...);_cece .Numbering ._ffad .Num =append (_cece .Numbering ._ffad .Num ,_edbf ._ffad .Num ...);return Paragraph {_cece ,_aec .X ()};};func (_cbcf Paragraph )addStartBookmark (_cadda int64 ,_bdge string )*_dg .CT_Bookmark {_debab :=_dg .NewEG_PContent ();_cbcf ._agbe .EG_PContent =append (_cbcf ._agbe .EG_PContent ,_debab );_cdedc :=_dg .NewEG_ContentRunContent ();_acag :=_dg .NewEG_RunLevelElts ();_ccbdc :=_dg .NewEG_RangeMarkupElements ();_ddff :=_dg .NewCT_Bookmark ();_ddff .NameAttr =_bdge ;_ddff .IdAttr =_cadda ;_ccbdc .BookmarkStart =_ddff ;_debab .EG_ContentRunContent =append (_debab .EG_ContentRunContent ,_cdedc );_cdedc .EG_RunLevelElts =append (_cdedc .EG_RunLevelElts ,_acag );_acag .EG_RangeMarkupElements =append (_acag .EG_RangeMarkupElements ,_ccbdc );return _ddff ;};

// SetEmboss sets the run to embossed text.
func (_gbecc RunProperties )SetEmboss (b bool ){if !b {_gbecc ._eafe .Emboss =nil ;}else {_gbecc ._eafe .Emboss =_dg .NewCT_OnOff ();};};

// SetAfterLineSpacing sets spacing below paragraph in line units.
func (_feeg Paragraph )SetAfterLineSpacing (d _bda .Distance ){_feeg .ensurePPr ();if _feeg ._agbe .PPr .Spacing ==nil {_feeg ._agbe .PPr .Spacing =_dg .NewCT_Spacing ();};_abcf :=_feeg ._agbe .PPr .Spacing ;_abcf .AfterLinesAttr =_a .Int64 (int64 (d /_bda .Twips ));};

// Style return the table style.
func (_bage Table )Style ()string {if _bage ._ebff .TblPr !=nil &&_bage ._ebff .TblPr .TblStyle !=nil {return _bage ._ebff .TblPr .TblStyle .ValAttr ;};return "";};

// Control returns an *axcontrol.Control object contained in the run or the nil value in case of no controls.
func (_fgbc Run )Control ()*_aef .Control {if _ddba :=_fgbc ._ceca .EG_RunInnerContent ;_ddba !=nil {if _ddfe :=_ddba [0].Object ;_ddfe !=nil {if _gebf :=_ddfe .Choice ;_gebf !=nil {if _afff :=_gebf .Control ;_afff !=nil {if _afff .IdAttr !=nil {_begf :=_fgbc ._aeaad .GetDocRelTargetByID (*_afff .IdAttr );for _ ,_cdfdc :=range _fgbc ._aeaad ._agg {if _begf ==_cdfdc .TargetAttr {return _cdfdc ;};};};};};};};return nil ;};

// RunProperties controls run styling properties
type RunProperties struct{_eafe *_dg .CT_RPr };

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_eeaf FormField )IsChecked ()bool {if _eeaf ._fada .CheckBox ==nil {return false ;};if _eeaf ._fada .CheckBox .Checked !=nil {return true ;};return false ;};

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_egd AnchoredDrawing )SetTextWrapSquare (t _dg .WdST_WrapText ){_egd ._eg .Choice =&_dg .WdEG_WrapTypeChoice {};_egd ._eg .Choice .WrapSquare =_dg .NewWdCT_WrapSquare ();_egd ._eg .Choice .WrapSquare .WrapTextAttr =t ;};

// Headers returns the headers defined in the document.
func (_fda *Document )Headers ()[]Header {_eff :=[]Header {};for _ ,_fac :=range _fda ._agd {_eff =append (_eff ,Header {_fda ,_fac });};return _eff ;};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_dec CellBorders )SetBottom (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_dec ._ab .Bottom =_dg .NewCT_Border ();_eeefg (_dec ._ab .Bottom ,t ,c ,thickness );};func _gfgc ()*_fab .Handles {_dcfbee :=_fab .NewHandles ();_ffceb :=_fab .NewCT_H ();_gdbea :="\u0023\u0030\u002c\u0062\u006f\u0074\u0074\u006f\u006dR\u0069\u0067\u0068\u0074";_ffceb .PositionAttr =&_gdbea ;_ffda :="\u0036\u0036\u0032\u0039\u002c\u0031\u0034\u0039\u0037\u0031";_ffceb .XrangeAttr =&_ffda ;_dcfbee .H =[]*_fab .CT_H {_ffceb };return _dcfbee ;};

// SetWidth sets the table with to a specified width.
func (_gaga TableProperties )SetWidth (d _bda .Distance ){_gaga ._dbccb .TblW =_dg .NewCT_TblWidth ();_gaga ._dbccb .TblW .TypeAttr =_dg .ST_TblWidthDxa ;_gaga ._dbccb .TblW .WAttr =&_dg .ST_MeasurementOrPercent {};_gaga ._dbccb .TblW .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_gaga ._dbccb .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (d /_bda .Twips ));};

// SetTextWrapInFrontOfText sets the text wrap to in front of text.
func (_gd AnchoredDrawing )SetTextWrapInFrontOfText (){_gd ._eg .Choice =&_dg .WdEG_WrapTypeChoice {};_gd ._eg .Choice .WrapNone =_dg .NewWdCT_WrapNone ();_gd ._eg .BehindDocAttr =false ;_gd ._eg .LayoutInCellAttr =true ;_gd ._eg .AllowOverlapAttr =true ;};

// SetTextStyleItalic set text style of watermark to italic.
func (_aebfd *WatermarkText )SetTextStyleItalic (value bool ){if _aebfd ._fgdf !=nil {_febbf :=_aebfd .GetStyle ();_febbf .SetItalic (value );_aebfd .SetStyle (_febbf );};};func (_acaea *Document )getWatermarkHeaderInnerContentPictures ()[]*_dg .CT_Picture {var _gdaf []*_dg .CT_Picture ;for _ ,_ggfd :=range _acaea .Headers (){for _ ,_decd :=range _ggfd .X ().EG_ContentBlockContent {for _ ,_beea :=range _decd .P {for _ ,_acdb :=range _beea .EG_PContent {for _ ,_cbcd :=range _acdb .EG_ContentRunContent {if _cbcd .R ==nil {continue ;};for _ ,_cbac :=range _cbcd .R .EG_RunInnerContent {if _cbac .Pict ==nil {continue ;};_ebeb :=false ;for _ ,_ffdc :=range _cbac .Pict .Any {_eafb ,_ebg :=_ffdc .(*_a .XSDAny );if _ebg &&_eafb .XMLName .Local =="\u0073\u0068\u0061p\u0065"{_ebeb =true ;};};if _ebeb {_gdaf =append (_gdaf ,_cbac .Pict );};};};};};};};return _gdaf ;};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_fgfe *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _fgfe .insertParagraph (relativeTo ,false );};

// Cells returns the cells defined in the table.
func (_aacg Row )Cells ()[]Cell {_bffcf :=[]Cell {};for _ ,_bcdae :=range _aacg ._egca .EG_ContentCellContent {for _ ,_edcg :=range _bcdae .Tc {_bffcf =append (_bffcf ,Cell {_aacg ._gebde ,_edcg });};if _bcdae .Sdt !=nil &&_bcdae .Sdt .SdtContent !=nil {for _ ,_bcce :=range _bcdae .Sdt .SdtContent .Tc {_bffcf =append (_bffcf ,Cell {_aacg ._gebde ,_bcce });};};};return _bffcf ;};

// Styles returns all styles.
func (_eadab Styles )Styles ()[]Style {_acfec :=[]Style {};for _ ,_dcdfe :=range _eadab ._cfca .Style {_acfec =append (_acfec ,Style {_dcdfe });};return _acfec ;};func _debe (_dbea *Document ,_dfgc []*_dg .EG_ContentBlockContent ,_fdaa *TableInfo )[]Node {_fged :=[]Node {};for _ ,_cbgfa :=range _dfgc {if _dfgb :=_cbgfa .Sdt ;_dfgb !=nil {if _cfadf :=_dfgb .SdtContent ;_cfadf !=nil {_fged =append (_fged ,_bcge (_dbea ,_cfadf .P ,_fdaa ,nil )...);};};_fged =append (_fged ,_bcge (_dbea ,_cbgfa .P ,_fdaa ,nil )...);for _ ,_gdacf :=range _cbgfa .Tbl {_aebef :=Table {_dbea ,_gdacf };_dfdcg ,_ :=_dbea .Styles .SearchStyleById (_aebef .Style ());_eadfg :=[]Node {};for _bcfc ,_gdbg :=range _gdacf .EG_ContentRowContent {for _ ,_gbfb :=range _gdbg .Tr {for _cbca ,_egbfc :=range _gbfb .EG_ContentCellContent {for _ ,_bdadb :=range _egbfc .Tc {_fbef :=&TableInfo {Table :_gdacf ,Row :_gbfb ,Cell :_bdadb ,RowIndex :_bcfc ,ColIndex :_cbca };for _ ,_bfcc :=range _bdadb .EG_BlockLevelElts {_eadfg =append (_eadfg ,_debe (_dbea ,_bfcc .EG_ContentBlockContent ,_fbef )...);};};};};};_fged =append (_fged ,Node {_gfc :_dbea ,_dbdg :&_aebef ,Style :_dfdcg ,Children :_eadfg });};};return _fged ;};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_fdga RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_fdga ._eafe .Dstrike =nil ;}else {_fdga ._eafe .Dstrike =_dg .NewCT_OnOff ();};};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_cebb Header )Index ()int {for _adab ,_bbff :=range _cebb ._fgabf ._agd {if _bbff ==_cebb ._abge {return _adab ;};};return -1;};

// Caps returns true if run font is capitalized.
func (_bddea RunProperties )Caps ()bool {return _bdba (_bddea ._eafe .Caps )};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_dbdd *Document ;_ggfaf *_dg .CT_FtnEdn ;};

// SetCSTheme sets the font complex script theme.
func (_dege Fonts )SetCSTheme (t _dg .ST_Theme ){_dege ._dcdg .CsthemeAttr =t };

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_aeeb HyperLink )SetTargetByRef (link _fc .Hyperlink ){_aeeb ._bcdfe .IdAttr =_a .String (_fc .Relationship (link ).ID ());_aeeb ._bcdfe .AnchorAttr =nil ;};func (_fbac *Document )insertImageFromNode (_cgae Node ){for _ ,_abca :=range _cgae .AnchoredDrawings {if _gdegd ,_adag :=_abca .GetImage ();_adag {_defead ,_bcaf :=_fc .ImageFromFile (_gdegd .Path ());if _bcaf !=nil {_bd .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_bcaf );};_ffba ,_bcaf :=_fbac .AddImage (_defead );if _bcaf !=nil {_bd .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_bcaf );};_eebde :=_fbac ._eega .GetByRelId (_ffba .RelID ());_eebde .SetID (_gdegd .RelID ());};};for _ ,_bdfc :=range _cgae .InlineDrawings {if _aebe ,_aabgd :=_bdfc .GetImage ();_aabgd {_aaf ,_ebfd :=_fc .ImageFromFile (_aebe .Path ());if _ebfd !=nil {_bd .Log .Debug ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063r\u0065\u0061\u0074\u0065\u0020\u0069\u006d\u0061\u0067\u0065:\u0020\u0025\u0073",_ebfd );};_ccgcc ,_ebfd :=_fbac .AddImage (_aaf );if _ebfd !=nil {_bd .Log .Debug ("u\u006e\u0061\u0062\u006c\u0065\u0020t\u006f\u0020\u0061\u0064\u0064\u0020i\u006d\u0061\u0067\u0065\u0020\u0074\u006f \u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020%\u0073",_ebfd );};_fbga :=_fbac ._eega .GetByRelId (_ccgcc .RelID ());_fbga .SetID (_aebe .RelID ());};};};

// Settings controls the document settings.
type Settings struct{_fgfb *_dg .Settings };

// SetFooter sets a section footer.
func (_dcbb Section )SetFooter (f Footer ,t _dg .ST_HdrFtr ){_bcdba :=_dg .NewEG_HdrFtrReferences ();_dcbb ._begfd .EG_HdrFtrReferences =append (_dcbb ._begfd .EG_HdrFtrReferences ,_bcdba );_bcdba .FooterReference =_dg .NewCT_HdrFtrRef ();_bcdba .FooterReference .TypeAttr =t ;_aaefb :=_dcbb ._affc ._eega .FindRIDForN (f .Index (),_a .FooterType );if _aaefb ==""{_bd .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");};_bcdba .FooterReference .IdAttr =_aaefb ;};func _gcfg (_dacf []*_dg .EG_ContentBlockContent ,_gebb *TableInfo )[]TextItem {_adcb :=[]TextItem {};for _ ,_bbgd :=range _dacf {if _abdd :=_bbgd .Sdt ;_abdd !=nil {if _agedb :=_abdd .SdtContent ;_agedb !=nil {_adcb =append (_adcb ,_dbgg (_agedb .P ,_gebb ,nil )...);};};_adcb =append (_adcb ,_dbgg (_bbgd .P ,_gebb ,nil )...);for _ ,_dbed :=range _bbgd .Tbl {for _fdfed ,_eegea :=range _dbed .EG_ContentRowContent {for _ ,_gagge :=range _eegea .Tr {for _cafde ,_gecf :=range _gagge .EG_ContentCellContent {for _ ,_cfgf :=range _gecf .Tc {_bcbfd :=&TableInfo {Table :_dbed ,Row :_gagge ,Cell :_cfgf ,RowIndex :_fdfed ,ColIndex :_cafde };for _ ,_eeeg :=range _cfgf .EG_BlockLevelElts {_adcb =append (_adcb ,_gcfg (_eeeg .EG_ContentBlockContent ,_bcbfd )...);};};};};};};};return _adcb ;};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_cbcb Style )TableConditionalFormatting (typ _dg .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_egdbc :=range _cbcb ._ddgd .TblStylePr {if _egdbc .TypeAttr ==typ {return TableConditionalFormatting {_egdbc };};};_faag :=_dg .NewCT_TblStylePr ();_faag .TypeAttr =typ ;_cbcb ._ddgd .TblStylePr =append (_cbcb ._ddgd .TblStylePr ,_faag );return TableConditionalFormatting {_faag };};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_dc AnchoredDrawing )SetOffset (x ,y _bda .Distance ){_dc .SetXOffset (x );_dc .SetYOffset (y )};func (_ggeg Endnote )id ()int64 {return _ggeg ._dggc .IdAttr };

// SetRight sets the right border to a specified type, color and thickness.
func (_eebgg ParagraphBorders )SetRight (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_eebgg ._feafb .Right =_dg .NewCT_Border ();_fdcgc (_eebgg ._feafb .Right ,t ,c ,thickness );};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_cggaae RunProperties )BoldValue ()OnOffValue {return _feabe (_cggaae ._eafe .B )};

// Outline returns true if run outline is on.
func (_gddc RunProperties )Outline ()bool {return _bdba (_gddc ._eafe .Outline )};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_dgg *Document )BodySection ()Section {if _dgg ._fabd .Body .SectPr ==nil {_dgg ._fabd .Body .SectPr =_dg .NewCT_SectPr ();};return Section {_dgg ,_dgg ._fabd .Body .SectPr };};

// GetWrapPathLineTo return wrapPath lineTo value.
func (_gfg AnchorDrawWrapOptions )GetWrapPathLineTo ()[]*_fb .CT_Point2D {return _gfg ._dgc };

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_dbddc Run )IsEndnote ()(bool ,int64 ){if _dbddc ._ceca .EG_RunInnerContent !=nil {if _dbddc ._ceca .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_dbddc ._ceca .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_fada *_dg .CT_FFData ;_daef *_dg .EG_RunInnerContent ;};func _fdcgc (_bgded *_dg .CT_Border ,_acfff _dg .ST_Border ,_cggg _fa .Color ,_bfef _bda .Distance ){_bgded .ValAttr =_acfff ;_bgded .ColorAttr =&_dg .ST_HexColor {};if _cggg .IsAuto (){_bgded .ColorAttr .ST_HexColorAuto =_dg .ST_HexColorAutoAuto ;}else {_bgded .ColorAttr .ST_HexColorRGB =_cggg .AsRGBString ();};if _bfef !=_bda .Zero {_bgded .SzAttr =_a .Uint64 (uint64 (_bfef /_bda .Point *8));};};

// Pict returns the pict object.
func (_gggec *WatermarkText )Pict ()*_dg .CT_Picture {return _gggec ._fded };

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_gdeef ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_gdeef ._cccfb .KeepLines =nil ;}else {_gdeef ._cccfb .KeepLines =_dg .NewCT_OnOff ();};};

// GetNumberingLevelByIds returns a NumberingLevel by its NumId and LevelId attributes
// or an empty one if not found.
func (_fcba *Document )GetNumberingLevelByIds (numId ,levelId int64 )NumberingLevel {for _ ,_cege :=range _fcba .Numbering ._ffad .Num {if _cege !=nil &&_cege .NumIdAttr ==numId {_agbag :=_cege .AbstractNumId .ValAttr ;for _ ,_afbb :=range _fcba .Numbering ._ffad .AbstractNum {if _afbb .AbstractNumIdAttr ==_agbag {if _afbb .NumStyleLink !=nil &&len (_afbb .Lvl )==0{if _fade ,_dgfd :=_fcba .Styles .SearchStyleById (_afbb .NumStyleLink .ValAttr );_dgfd {if _fade .ParagraphProperties ().NumId ()> -1{return _fcba .GetNumberingLevelByIds (_fade .ParagraphProperties ().NumId (),levelId );};};};for _ ,_gggb :=range _afbb .Lvl {if _gggb .IlvlAttr ==levelId {return NumberingLevel {_gggb };};};};};};};return NumberingLevel {};};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_fgabd RunProperties )RStyle ()string {if _fgabd ._eafe .RStyle !=nil {return _fgabd ._eafe .RStyle .ValAttr ;};return "";};

// SetPictureWashout set washout to watermark picture.
func (_bcdfg *WatermarkPicture )SetPictureWashout (isWashout bool ){if _bcdfg ._cbeef !=nil {_fbbed :=_bcdfg ._cbeef .EG_ShapeElements ;if len (_fbbed )> 0&&_fbbed [0].Imagedata !=nil {if isWashout {_cdbcb :="\u0031\u0039\u0036\u0036\u0031\u0066";_fddbe :="\u0032\u0032\u0039\u0033\u0038\u0066";_fbbed [0].Imagedata .GainAttr =&_cdbcb ;_fbbed [0].Imagedata .BlacklevelAttr =&_fddbe ;};};};};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// SetToolTip sets the tooltip text for a hyperlink.
func (_bgbb HyperLink )SetToolTip (text string ){if text ==""{_bgbb ._bcdfe .TooltipAttr =nil ;}else {_bgbb ._bcdfe .TooltipAttr =_a .String (text );};};func _dbda (_addg *_dg .EG_ContentBlockContent )[]Bookmark {_cccf :=[]Bookmark {};for _ ,_fcef :=range _addg .P {for _ ,_eadf :=range _fcef .EG_PContent {for _ ,_fefe :=range _eadf .EG_ContentRunContent {for _ ,_cafe :=range _fefe .EG_RunLevelElts {for _ ,_caef :=range _cafe .EG_RangeMarkupElements {if _caef .BookmarkStart !=nil {_cccf =append (_cccf ,Bookmark {_caef .BookmarkStart });};};};};};};for _ ,_gccde :=range _addg .EG_RunLevelElts {for _ ,_fgac :=range _gccde .EG_RangeMarkupElements {if _fgac .BookmarkStart !=nil {_cccf =append (_cccf ,Bookmark {_fgac .BookmarkStart });};};};for _ ,_gfge :=range _addg .Tbl {for _ ,_begg :=range _gfge .EG_ContentRowContent {for _ ,_gbee :=range _begg .Tr {for _ ,_ggbe :=range _gbee .EG_ContentCellContent {for _ ,_edbd :=range _ggbe .Tc {for _ ,_ffffd :=range _edbd .EG_BlockLevelElts {for _ ,_geb :=range _ffffd .EG_ContentBlockContent {for _ ,_gfef :=range _dbda (_geb ){_cccf =append (_cccf ,_gfef );};};};};};};};};return _cccf ;};

// SetSemiHidden controls if the style is hidden in the UI.
func (_acfee Style )SetSemiHidden (b bool ){if b {_acfee ._ddgd .SemiHidden =_dg .NewCT_OnOff ();}else {_acfee ._ddgd .SemiHidden =nil ;};};

// // SetBeforeLineSpacing sets spacing above paragraph in line units.
func (_dce Paragraph )SetBeforeLineSpacing (d _bda .Distance ){_dce .ensurePPr ();if _dce ._agbe .PPr .Spacing ==nil {_dce ._agbe .PPr .Spacing =_dg .NewCT_Spacing ();};_dbgefb :=_dce ._agbe .PPr .Spacing ;_dbgefb .BeforeLinesAttr =_a .Int64 (int64 (d /_bda .Twips ));};func _gbeg (_efc *Document ,_gccdeb Paragraph )listItemInfo {if _efc .Numbering .X ()==nil {return listItemInfo {};};if len (_efc .Numbering .Definitions ())< 1{return listItemInfo {};};_daefa :=_fgacf (_gccdeb );if _daefa ==nil {return listItemInfo {};};_ebcb :=_efc .GetNumberingLevelByIds (_daefa .NumId .ValAttr ,_daefa .Ilvl .ValAttr );if _ecec :=_ebcb .X ();_ecec ==nil {return listItemInfo {};};_accfg :=int64 (0);for _ ,_egbf :=range _efc .Numbering ._ffad .Num {if _egbf !=nil &&_egbf .NumIdAttr ==_daefa .NumId .ValAttr {_accfg =_egbf .AbstractNumId .ValAttr ;};};return listItemInfo {FromParagraph :&_gccdeb ,AbstractNumId :&_accfg ,NumberingLevel :&_ebcb };};

// AddParagraph adds a paragraph to the endnote.
func (_gdfe Endnote )AddParagraph ()Paragraph {_fceg :=_dg .NewEG_ContentBlockContent ();_bec :=len (_gdfe ._dggc .EG_BlockLevelElts [0].EG_ContentBlockContent );_gdfe ._dggc .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_gdfe ._dggc .EG_BlockLevelElts [0].EG_ContentBlockContent ,_fceg );_dbge :=_dg .NewCT_P ();var _cgde *_dg .CT_String ;if _bec !=0{_adbg :=len (_gdfe ._dggc .EG_BlockLevelElts [0].EG_ContentBlockContent [_bec -1].P );_cgde =_gdfe ._dggc .EG_BlockLevelElts [0].EG_ContentBlockContent [_bec -1].P [_adbg -1].PPr .PStyle ;}else {_cgde =_dg .NewCT_String ();_cgde .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_fceg .P =append (_fceg .P ,_dbge );_dgeee :=Paragraph {_gdfe ._efaf ,_dbge };_dgeee ._agbe .PPr =_dg .NewCT_PPr ();_dgeee ._agbe .PPr .PStyle =_cgde ;_dgeee ._agbe .PPr .RPr =_dg .NewCT_ParaRPr ();return _dgeee ;};

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_cccfb *_dg .CT_PPrGeneral };

// SetCantSplit set row properties for Can't Split value.
func (_ddeba RowProperties )SetCantSplit (val bool ){if !val {_ddeba ._aedfb .CantSplit =nil ;}else {_bdde :=_dg .NewCT_OnOff ();_ddeba ._aedfb .CantSplit =[]*_dg .CT_OnOff {_bdde };};};

// SetRightIndent controls right indent of paragraph.
func (_adebg Paragraph )SetRightIndent (m _bda .Distance ){_adebg .ensurePPr ();_ccga :=_adebg ._agbe .PPr ;if _ccga .Ind ==nil {_ccga .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_ccga .Ind .RightAttr =nil ;}else {_ccga .Ind .RightAttr =&_dg .ST_SignedTwipsMeasure {};_ccga .Ind .RightAttr .Int64 =_a .Int64 (int64 (m /_bda .Twips ));};};

// SetShading controls the cell shading.
func (_cbe CellProperties )SetShading (shd _dg .ST_Shd ,foreground ,fill _fa .Color ){if shd ==_dg .ST_ShdUnset {_cbe ._ff .Shd =nil ;}else {_cbe ._ff .Shd =_dg .NewCT_Shd ();_cbe ._ff .Shd .ValAttr =shd ;_cbe ._ff .Shd .ColorAttr =&_dg .ST_HexColor {};if foreground .IsAuto (){_cbe ._ff .Shd .ColorAttr .ST_HexColorAuto =_dg .ST_HexColorAutoAuto ;}else {_cbe ._ff .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_cbe ._ff .Shd .FillAttr =&_dg .ST_HexColor {};if fill .IsAuto (){_cbe ._ff .Shd .FillAttr .ST_HexColorAuto =_dg .ST_HexColorAutoAuto ;}else {_cbe ._ff .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// SetRightPct sets the cell right margin
func (_ddd CellMargins )SetRightPct (pct float64 ){_ddd ._beg .Right =_dg .NewCT_TblWidth ();_fee (_ddd ._beg .Right ,pct );};

// InsertStyle insert style to styles.
func (_aggbd Styles )InsertStyle (ss Style ){_aggbd ._cfca .Style =append (_aggbd ._cfca .Style ,ss .X ())};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_ebafe Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_ebafe ._fgfb .UpdateFields =nil ;}else {_ebafe ._fgfb .UpdateFields =_dg .NewCT_OnOff ();};};func (_aade Paragraph )addFldChar ()*_dg .CT_FldChar {_fffee :=_aade .AddRun ();_bcdc :=_fffee .X ();_cbee :=_dg .NewEG_RunInnerContent ();_acdab :=_dg .NewCT_FldChar ();_cbee .FldChar =_acdab ;_bcdc .EG_RunInnerContent =append (_bcdc .EG_RunInnerContent ,_cbee );return _acdab ;};

// X returns the inner wrapped XML type.
func (_dfccc ParagraphStyleProperties )X ()*_dg .CT_PPrGeneral {return _dfccc ._cccfb };

// SetHangingIndent controls the hanging indent of the paragraph.
func (_cefbe ParagraphStyleProperties )SetHangingIndent (m _bda .Distance ){if _cefbe ._cccfb .Ind ==nil {_cefbe ._cccfb .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_cefbe ._cccfb .Ind .HangingAttr =nil ;}else {_cefbe ._cccfb .Ind .HangingAttr =&_aea .ST_TwipsMeasure {};_cefbe ._cccfb .Ind .HangingAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (m /_bda .Twips ));};};

// Borders returns the ParagraphBorders for setting-up border on paragraph.
func (_aagd Paragraph )Borders ()ParagraphBorders {_aagd .ensurePPr ();if _aagd ._agbe .PPr .PBdr ==nil {_aagd ._agbe .PPr .PBdr =_dg .NewCT_PBdr ();};return ParagraphBorders {_aagd ._baff ,_aagd ._agbe .PPr .PBdr };};func (_eadgc *chart )Target ()string {return _eadgc ._dfe };func _bcge (_cdab *Document ,_cbagd []*_dg .CT_P ,_afeef *TableInfo ,_fbeda *DrawingInfo )[]Node {_aeeaa :=[]Node {};for _ ,_eggf :=range _cbagd {_aaec :=Paragraph {_cdab ,_eggf };_cdbf :=Node {_gfc :_cdab ,_dbdg :&_aaec };if _edacg ,_agde :=_cdab .Styles .SearchStyleById (_aaec .Style ());_agde {_cdbf .Style =_edacg ;};for _ ,_abgfg :=range _aaec .Runs (){_cdbf .Children =append (_cdbf .Children ,Node {_gfc :_cdab ,_dbdg :_abgfg ,AnchoredDrawings :_abgfg .DrawingAnchored (),InlineDrawings :_abgfg .DrawingInline ()});};_aeeaa =append (_aeeaa ,_cdbf );};return _aeeaa ;};func _aabb (_egada *_dg .CT_Tbl ,_fbfd map[string ]string ){for _ ,_aadb :=range _egada .EG_ContentRowContent {for _ ,_dcda :=range _aadb .Tr {for _ ,_gaab :=range _dcda .EG_ContentCellContent {for _ ,_gaba :=range _gaab .Tc {for _ ,_eaba :=range _gaba .EG_BlockLevelElts {for _ ,_aeegc :=range _eaba .EG_ContentBlockContent {for _ ,_bdf :=range _aeegc .P {_fcad (_bdf ,_fbfd );};for _ ,_cecbg :=range _aeegc .Tbl {_aabb (_cecbg ,_fbfd );};};};};};};};};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_ccef ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_ccef ._cccfb .ContextualSpacing =nil ;}else {_ccef ._cccfb .ContextualSpacing =_dg .NewCT_OnOff ();};};

// SetWidth sets the cell width to a specified width.
func (_fdc CellProperties )SetWidth (d _bda .Distance ){_fdc ._ff .TcW =_dg .NewCT_TblWidth ();_fdc ._ff .TcW .TypeAttr =_dg .ST_TblWidthDxa ;_fdc ._ff .TcW .WAttr =&_dg .ST_MeasurementOrPercent {};_fdc ._ff .TcW .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_fdc ._ff .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (d /_bda .Twips ));};

// Bold returns true if paragraph font is bold.
func (_acbcd ParagraphProperties )Bold ()bool {_cfgdg :=_acbcd ._efcd .RPr ;return _bdba (_cfgdg .B )||_bdba (_cfgdg .BCs );};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_baef ParagraphProperties )SetFirstLineIndent (m _bda .Distance ){if _baef ._efcd .Ind ==nil {_baef ._efcd .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_baef ._efcd .Ind .FirstLineAttr =nil ;}else {_baef ._efcd .Ind .FirstLineAttr =&_aea .ST_TwipsMeasure {};_baef ._efcd .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (m /_bda .Twips ));};};

// FindNodeByCondition return node based on condition function,
// if wholeElements is true, its will extract childs as next node elements.
func (_bcdb *Nodes )FindNodeByCondition (f func (_abdfg *Node )bool ,wholeElements bool )[]Node {_egdd :=[]Node {};for _ ,_eceeb :=range _bcdb ._bfcf {if f (&_eceeb ){_egdd =append (_egdd ,_eceeb );};if wholeElements {_bfag :=Nodes {_bfcf :_eceeb .Children };_egdd =append (_egdd ,_bfag .FindNodeByCondition (f ,wholeElements )...);};};return _egdd ;};

// Emboss returns true if paragraph emboss is on.
func (_fdcgca ParagraphProperties )Emboss ()bool {return _bdba (_fdcgca ._efcd .RPr .Emboss )};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_bedg :=_dg .NewSettings ();_bedg .Compat =_dg .NewCT_Compat ();_edge :=_dg .NewCT_CompatSetting ();_edge .NameAttr =_a .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");_edge .UriAttr =_a .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_edge .ValAttr =_a .String ("\u0031\u0035");_bedg .Compat .CompatSetting =append (_bedg .Compat .CompatSetting ,_edge );return Settings {_bedg };};

// X returns the inner wrapped XML type.
func (_eabecg Style )X ()*_dg .CT_Style {return _eabecg ._ddgd };

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_gecc Section )GetHeader (t _dg .ST_HdrFtr )(Header ,bool ){for _ ,_gbgb :=range _gecc ._begfd .EG_HdrFtrReferences {if _gbgb .HeaderReference .TypeAttr ==t {for _ ,_afcf :=range _gecc ._affc .Headers (){_eedgg :=_gecc ._affc ._eega .FindRIDForN (_afcf .Index (),_a .HeaderType );if _eedgg ==_gbgb .HeaderReference .IdAttr {return _afcf ,true ;};};};};return Header {},false ;};

// X returns the inner wrapped XML type.
func (_gfdd Footnote )X ()*_dg .CT_FtnEdn {return _gfdd ._ggfaf };var _abcg =[...]uint8 {0,20,37,58,79};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_bcc AnchoredDrawing )SetOrigin (h _dg .WdST_RelFromH ,v _dg .WdST_RelFromV ){_bcc ._eg .PositionH .RelativeFromAttr =h ;_bcc ._eg .PositionV .RelativeFromAttr =v ;};

// AddParagraph adds a paragraph to the header.
func (_fdgd Header )AddParagraph ()Paragraph {_bgdf :=_dg .NewEG_ContentBlockContent ();_fdgd ._abge .EG_ContentBlockContent =append (_fdgd ._abge .EG_ContentBlockContent ,_bgdf );_efbg :=_dg .NewCT_P ();_bgdf .P =append (_bgdf .P ,_efbg );return Paragraph {_fdgd ._fgabf ,_efbg };};func (_dgag *WatermarkText )getShapeType ()*_a .XSDAny {return _dgag .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");};

// X returns the inner wrapped XML type.
func (_afccd TableStyleProperties )X ()*_dg .CT_TblPrBase {return _afccd ._cgdg };

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_bfc *Document )AddFooter ()Footer {_gde :=_dg .NewFtr ();_bfc ._dcfe =append (_bfc ._dcfe ,_gde );_bcgf :=_bcf .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_bfc ._dcfe ));_bfc ._eega .AddRelationship (_bcgf ,_a .FooterType );_bfc .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_bcgf ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");_bfc ._bcg =append (_bfc ._bcg ,_fc .NewRelationships ());return Footer {_bfc ,_gde };};

// SetAll sets all of the borders to a given value.
func (_agcf TableBorders )SetAll (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_agcf .SetBottom (t ,c ,thickness );_agcf .SetLeft (t ,c ,thickness );_agcf .SetRight (t ,c ,thickness );_agcf .SetTop (t ,c ,thickness );_agcf .SetInsideHorizontal (t ,c ,thickness );_agcf .SetInsideVertical (t ,c ,thickness );};

// RightToLeft returns true if paragraph text goes from right to left.
func (_agbg ParagraphProperties )RightToLeft ()bool {return _bdba (_agbg ._efcd .RPr .Rtl )};

// X returns the inner wrapped XML type.
func (_ggb Bookmark )X ()*_dg .CT_Bookmark {return _ggb ._caca };

// Save writes the document to an io.Writer in the Zip package format.
func (_adgb *Document )Save (w _da .Writer )error {return _adgb .save (w ,_adgb ._gcc )};

// X returns the inner wrapped XML type.
func (_dbgb Color )X ()*_dg .CT_Color {return _dbgb ._dad };

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_faff ParagraphProperties )SetSpacing (before ,after _bda .Distance ){if _faff ._efcd .Spacing ==nil {_faff ._efcd .Spacing =_dg .NewCT_Spacing ();};_faff ._efcd .Spacing .BeforeAttr =&_aea .ST_TwipsMeasure {};_faff ._efcd .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (before /_bda .Twips ));_faff ._efcd .Spacing .AfterAttr =&_aea .ST_TwipsMeasure {};_faff ._efcd .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (after /_bda .Twips ));};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_feaf HyperLink )AddRun ()Run {_bfee :=_dg .NewEG_ContentRunContent ();_feaf ._bcdfe .EG_ContentRunContent =append (_feaf ._bcdfe .EG_ContentRunContent ,_bfee );_dcbab :=_dg .NewCT_R ();_bfee .R =_dcbab ;return Run {_feaf ._adgab ,_dcbab };};

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_cadf *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_afgg :=range _cadf ._eega .X ().Relationship {if _afgg .IdAttr ==idAttr {return _afgg .TargetAttr ;};};return "";};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_cgcc *Document )Copy ()(*Document ,error ){_bdc :=_gga .NewBuffer ([]byte {});_egg :=_cgcc .save (_bdc ,_cgcc ._gcc );if _egg !=nil {return nil ,_egg ;};_beec :=_bdc .Bytes ();_ceecb :=_gga .NewReader (_beec );return _eagc (_ceecb ,int64 (_ceecb .Len ()),_cgcc ._gcc );};

// SetSize sets the size of the displayed image on the page.
func (_bdeef InlineDrawing )SetSize (w ,h _bda .Distance ){_bdeef ._eagcd .Extent .CxAttr =int64 (float64 (w *_bda .Pixel72 )/_bda .EMU );_bdeef ._eagcd .Extent .CyAttr =int64 (float64 (h *_bda .Pixel72 )/_bda .EMU );};

// Properties returns the cell properties.
func (_ddg Cell )Properties ()CellProperties {if _ddg ._ddb .TcPr ==nil {_ddg ._ddb .TcPr =_dg .NewCT_TcPr ();};return CellProperties {_ddg ._ddb .TcPr };};func _gc ()(*_fb .CT_Point2D ,[]*_fb .CT_Point2D ){var (_gaf int64 =0;_ecf int64 =21600;);_cac :=_fb .ST_Coordinate {ST_CoordinateUnqualified :&_gaf ,ST_UniversalMeasure :nil };_edc :=_fb .ST_Coordinate {ST_CoordinateUnqualified :&_ecf ,ST_UniversalMeasure :nil };_dbg :=_fb .NewCT_Point2D ();_dbg .XAttr =_cac ;_dbg .YAttr =_cac ;_gafd :=[]*_fb .CT_Point2D {&_fb .CT_Point2D {XAttr :_cac ,YAttr :_edc },&_fb .CT_Point2D {XAttr :_edc ,YAttr :_edc },&_fb .CT_Point2D {XAttr :_edc ,YAttr :_cac },_dbg };return _dbg ,_gafd ;};

// SetBold sets the run to bold.
func (_gafdg RunProperties )SetBold (b bool ){if !b {_gafdg ._eafe .B =nil ;_gafdg ._eafe .BCs =nil ;}else {_gafdg ._eafe .B =_dg .NewCT_OnOff ();_gafdg ._eafe .BCs =_dg .NewCT_OnOff ();};};

// DrawingInline return a slice of InlineDrawings.
func (_dgde Run )DrawingInline ()[]InlineDrawing {_bdegc :=[]InlineDrawing {};for _ ,_fagb :=range _dgde ._ceca .EG_RunInnerContent {if _fagb .Drawing ==nil {continue ;};for _ ,_befa :=range _fagb .Drawing .Inline {_bdegc =append (_bdegc ,InlineDrawing {_dgde ._aeaad ,_befa });};};return _bdegc ;};func _cea ()*_fab .Path {_edeeg :=_fab .NewPath ();_edeeg .TextpathokAttr =_aea .ST_TrueFalseTrue ;_edeeg .ConnecttypeAttr =_fab .OfcST_ConnectTypeCustom ;_dcadg :="\u0040\u0039\u002c0;\u0040\u0031\u0030\u002c\u0031\u0030\u0038\u0030\u0030;\u00401\u0031,\u00321\u0036\u0030\u0030\u003b\u0040\u0031\u0032\u002c\u0031\u0030\u0038\u0030\u0030";_edeeg .ConnectlocsAttr =&_dcadg ;_cbeb :="\u0032\u0037\u0030,\u0031\u0038\u0030\u002c\u0039\u0030\u002c\u0030";_edeeg .ConnectanglesAttr =&_cbeb ;return _edeeg ;};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_ebecd FormField )Value ()string {if _ebecd ._fada .TextInput !=nil &&_ebecd ._daef .T !=nil {return _ebecd ._daef .T .Content ;}else if _ebecd ._fada .DdList !=nil &&_ebecd ._fada .DdList .Result !=nil {_dfad :=_ebecd .PossibleValues ();_beee :=int (_ebecd ._fada .DdList .Result .ValAttr );if _beee < len (_dfad ){return _dfad [_beee ];};}else if _ebecd ._fada .CheckBox !=nil {if _ebecd .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// SetValue sets the width value.
func (_ccgccd TableWidth )SetValue (m _bda .Distance ){_ccgccd ._gdca .WAttr =&_dg .ST_MeasurementOrPercent {};_ccgccd ._gdca .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_ccgccd ._gdca .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (m /_bda .Twips ));_ccgccd ._gdca .TypeAttr =_dg .ST_TblWidthDxa ;};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_cgd ,_acae :=_c .Open (filename );if _acae !=nil {return nil ,_bcf .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_acae );};defer _cgd .Close ();_aeeg ,_acae :=_c .Stat (filename );if _acae !=nil {return nil ,_bcf .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_acae );};_ =_aeeg ;return Read (_cgd ,_aeeg .Size ());};func _gfcce ()*_fab .Formulas {_edeea :=_fab .NewFormulas ();_edeea .F =[]*_fab .CT_F {_e .CreateFormula ("\u0069\u0066 \u006c\u0069\u006e\u0065\u0044\u0072\u0061\u0077\u006e\u0020\u0070\u0069\u0078\u0065\u006c\u004c\u0069\u006e\u0065\u0057\u0069\u0064th\u0020\u0030"),_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0031\u0020\u0030"),_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0031"),_e .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0032\u0020\u0031\u0020\u0032"),_e .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0033\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_e .CreateFormula ("\u0070r\u006f\u0064\u0020\u00403\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0030\u0020\u0031"),_e .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0036\u0020\u0031\u0020\u0032"),_e .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0037\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0038\u0020\u0032\u00316\u0030\u0030\u0020\u0030"),_e .CreateFormula ("\u0070r\u006f\u0064\u0020\u00407\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_e .CreateFormula ("\u0073u\u006d \u0040\u0031\u0030\u0020\u0032\u0031\u0036\u0030\u0030\u0020\u0030")};return _edeea ;};

// Nodes return the document's element as nodes.
func (_cfebc *Document )Nodes ()Nodes {_gacg :=[]Node {};for _ ,_cdgb :=range _cfebc ._fabd .Body .EG_BlockLevelElts {_gacg =append (_gacg ,_debe (_cfebc ,_cdgb .EG_ContentBlockContent ,nil )...);};if _cfebc ._fabd .Body .SectPr !=nil {_gacg =append (_gacg ,Node {_dbdg :_cfebc ._fabd .Body .SectPr });};_adgba :=Nodes {_bfcf :_gacg };return _adgba ;};

// RunProperties returns the run style properties.
func (_cgea Style )RunProperties ()RunProperties {if _cgea ._ddgd .RPr ==nil {_cgea ._ddgd .RPr =_dg .NewCT_RPr ();};return RunProperties {_cgea ._ddgd .RPr };};

// Borders allows manipulation of the table borders.
func (_gcaa TableProperties )Borders ()TableBorders {if _gcaa ._dbccb .TblBorders ==nil {_gcaa ._dbccb .TblBorders =_dg .NewCT_TblBorders ();};return TableBorders {_gcaa ._dbccb .TblBorders };};

// RemoveParagraph removes a paragraph from the footnote.
func (_gggc Footnote )RemoveParagraph (p Paragraph ){for _ ,_dcge :=range _gggc .content (){for _dfgf ,_fbge :=range _dcge .P {if _fbge ==p ._agbe {copy (_dcge .P [_dfgf :],_dcge .P [_dfgf +1:]);_dcge .P =_dcge .P [0:len (_dcge .P )-1];return ;};};};};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_dafe ParagraphProperties )CharacterSpacingValue ()int64 {if _dbdfe :=_dafe ._efcd .RPr .Spacing ;_dbdfe !=nil {_dcfca :=_dbdfe .ValAttr ;if _dcfca .Int64 !=nil {return *_dcfca .Int64 ;};};return int64 (0);};

// SetLinkedStyle sets the style that this style is linked to.
func (_agabg Style )SetLinkedStyle (name string ){if name ==""{_agabg ._ddgd .Link =nil ;}else {_agabg ._ddgd .Link =_dg .NewCT_String ();_agabg ._ddgd .Link .ValAttr =name ;};};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_dbaea Paragraph )SetLineSpacing (d _bda .Distance ,rule _dg .ST_LineSpacingRule ){_dbaea .ensurePPr ();if _dbaea ._agbe .PPr .Spacing ==nil {_dbaea ._agbe .PPr .Spacing =_dg .NewCT_Spacing ();};_caacf :=_dbaea ._agbe .PPr .Spacing ;if rule ==_dg .ST_LineSpacingRuleUnset {_caacf .LineRuleAttr =_dg .ST_LineSpacingRuleUnset ;_caacf .LineAttr =nil ;}else {_caacf .LineRuleAttr =rule ;_caacf .LineAttr =&_dg .ST_SignedTwipsMeasure {};_caacf .LineAttr .Int64 =_a .Int64 (int64 (d /_bda .Twips ));};};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_caca *_dg .CT_Bookmark };

// Node is document element node,
// contains Paragraph or Table element.
type Node struct{_gfc *Document ;_dbdg interface{};Style Style ;AnchoredDrawings []AnchoredDrawing ;InlineDrawings []InlineDrawing ;Children []Node ;};

// SetItalic sets the run to italic.
func (_fcfe RunProperties )SetItalic (b bool ){if !b {_fcfe ._eafe .I =nil ;_fcfe ._eafe .ICs =nil ;}else {_fcfe ._eafe .I =_dg .NewCT_OnOff ();_fcfe ._eafe .ICs =_dg .NewCT_OnOff ();};};

// SetPrimaryStyle marks the style as a primary style.
func (_edee Style )SetPrimaryStyle (b bool ){if b {_edee ._ddgd .QFormat =_dg .NewCT_OnOff ();}else {_edee ._ddgd .QFormat =nil ;};};func (_aaffc Styles )initializeStyleDefaults (){_aagbb :=_aaffc .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_dg .ST_StyleTypeParagraph ,true );_aagbb .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_aagbb .SetPrimaryStyle (true );_gfbe :=_aaffc .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_dg .ST_StyleTypeCharacter ,true );_gfbe .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");_gfbe .SetUISortOrder (1);_gfbe .SetSemiHidden (true );_gfbe .SetUnhideWhenUsed (true );_geaa :=_aaffc .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_dg .ST_StyleTypeCharacter ,false );_geaa .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");_geaa .SetBasedOn (_gfbe .StyleID ());_geaa .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_geaa .SetUISortOrder (10);_geaa .RunProperties ().Fonts ().SetASCIITheme (_dg .ST_ThemeMajorAscii );_geaa .RunProperties ().Fonts ().SetEastAsiaTheme (_dg .ST_ThemeMajorEastAsia );_geaa .RunProperties ().Fonts ().SetHANSITheme (_dg .ST_ThemeMajorHAnsi );_geaa .RunProperties ().Fonts ().SetCSTheme (_dg .ST_ThemeMajorBidi );_geaa .RunProperties ().SetSize (28*_bda .Point );_geaa .RunProperties ().SetKerning (14*_bda .Point );_geaa .RunProperties ().SetCharacterSpacing (-10*_bda .Twips );_dffbb :=_aaffc .AddStyle ("\u0054\u0069\u0074l\u0065",_dg .ST_StyleTypeParagraph ,false );_dffbb .SetName ("\u0054\u0069\u0074l\u0065");_dffbb .SetBasedOn (_aagbb .StyleID ());_dffbb .SetNextStyle (_aagbb .StyleID ());_dffbb .SetLinkedStyle (_geaa .StyleID ());_dffbb .SetUISortOrder (10);_dffbb .SetPrimaryStyle (true );_dffbb .ParagraphProperties ().SetContextualSpacing (true );_dffbb .RunProperties ().Fonts ().SetASCIITheme (_dg .ST_ThemeMajorAscii );_dffbb .RunProperties ().Fonts ().SetEastAsiaTheme (_dg .ST_ThemeMajorEastAsia );_dffbb .RunProperties ().Fonts ().SetHANSITheme (_dg .ST_ThemeMajorHAnsi );_dffbb .RunProperties ().Fonts ().SetCSTheme (_dg .ST_ThemeMajorBidi );_dffbb .RunProperties ().SetSize (28*_bda .Point );_dffbb .RunProperties ().SetKerning (14*_bda .Point );_dffbb .RunProperties ().SetCharacterSpacing (-10*_bda .Twips );_dggcf :=_aaffc .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_dg .ST_StyleTypeTable ,false );_dggcf .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_dggcf .SetUISortOrder (99);_dggcf .SetSemiHidden (true );_dggcf .SetUnhideWhenUsed (true );_dggcf .X ().TblPr =_dg .NewCT_TblPrBase ();_ddfcd :=NewTableWidth ();_dggcf .X ().TblPr .TblInd =_ddfcd .X ();_ddfcd .SetValue (0*_bda .Dxa );_dggcf .X ().TblPr .TblCellMar =_dg .NewCT_TblCellMar ();_ddfcd =NewTableWidth ();_dggcf .X ().TblPr .TblCellMar .Top =_ddfcd .X ();_ddfcd .SetValue (0*_bda .Dxa );_ddfcd =NewTableWidth ();_dggcf .X ().TblPr .TblCellMar .Bottom =_ddfcd .X ();_ddfcd .SetValue (0*_bda .Dxa );_ddfcd =NewTableWidth ();_dggcf .X ().TblPr .TblCellMar .Left =_ddfcd .X ();_ddfcd .SetValue (108*_bda .Dxa );_ddfcd =NewTableWidth ();_dggcf .X ().TblPr .TblCellMar .Right =_ddfcd .X ();_ddfcd .SetValue (108*_bda .Dxa );_cabd :=_aaffc .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_dg .ST_StyleTypeNumbering ,false );_cabd .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");_cabd .SetUISortOrder (1);_cabd .SetSemiHidden (true );_cabd .SetUnhideWhenUsed (true );_deee :=[]_bda .Distance {16,13,12,11,11,11,11,11,11};_ecce :=[]_bda .Distance {240,40,40,40,40,40,40,40,40};for _gedc :=0;_gedc < 9;_gedc ++{_ffbae :=_bcf .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_gedc +1);_fgcfa :=_aaffc .AddStyle (_ffbae +"\u0043\u0068\u0061\u0072",_dg .ST_StyleTypeCharacter ,false );_fgcfa .SetName (_bcf .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_gedc +1));_fgcfa .SetBasedOn (_gfbe .StyleID ());_fgcfa .SetLinkedStyle (_ffbae );_fgcfa .SetUISortOrder (9+_gedc );_fgcfa .RunProperties ().SetSize (_deee [_gedc ]*_bda .Point );_eccgb :=_aaffc .AddStyle (_ffbae ,_dg .ST_StyleTypeParagraph ,false );_eccgb .SetName (_bcf .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_gedc +1));_eccgb .SetNextStyle (_aagbb .StyleID ());_eccgb .SetLinkedStyle (_eccgb .StyleID ());_eccgb .SetUISortOrder (9+_gedc );_eccgb .SetPrimaryStyle (true );_eccgb .ParagraphProperties ().SetKeepNext (true );_eccgb .ParagraphProperties ().SetSpacing (_ecce [_gedc ]*_bda .Twips ,0);_eccgb .ParagraphProperties ().SetOutlineLevel (_gedc );_eccgb .RunProperties ().SetSize (_deee [_gedc ]*_bda .Point );};};

// SetVerticalMerge controls the vertical merging of cells.
func (_fgbag CellProperties )SetVerticalMerge (mergeVal _dg .ST_Merge ){if mergeVal ==_dg .ST_MergeUnset {_fgbag ._ff .VMerge =nil ;}else {_fgbag ._ff .VMerge =_dg .NewCT_VMerge ();_fgbag ._ff .VMerge .ValAttr =mergeVal ;};};

// X returns the inner wrapped XML type.
func (_dagg InlineDrawing )X ()*_dg .WdInline {return _dagg ._eagcd };

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_bbdb Paragraph )AddCheckBox (name string )FormField {_abdfd :=_bbdb .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_abdfd ._fada .CheckBox =_dg .NewCT_FFCheckBox ();return _abdfd ;};func _eagc (_agb _da .ReaderAt ,_gagc int64 ,_dggb string )(*Document ,error ){const _baad ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";if !_ae .GetLicenseKey ().IsLicensed ()&&!_ffd {_bcf .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_bcf .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_ga .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_dbgc :=New ();_dbgc .Numbering ._ffad =nil ;if len (_dggb )> 0{_dbgc ._gcc =_dggb ;}else {_dgcb ,_cbg :=_ae .GenRefId ("\u0064\u0072");if _cbg !=nil {_bd .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_cbg );return nil ,_cbg ;};_dbgc ._gcc =_dgcb ;};if _fdb :=_ae .Track (_dbgc ._gcc ,_baad );_fdb !=nil {_bd .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fdb );return nil ,_fdb ;};_adgd ,_feff :=_cf .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");if _feff !=nil {return nil ,_feff ;};_dbgc .TmpPath =_adgd ;_bac ,_feff :=_f .NewReader (_agb ,_gagc );if _feff !=nil {return nil ,_bcf .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_feff );};_gcab :=[]*_f .File {};_gcab =append (_gcab ,_bac .File ...);_ffge :=false ;for _ ,_bcda :=range _gcab {if _bcda .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ffge =true ;break ;};};if _ffge {_dbgc .CreateCustomProperties ();};_adfg :=_dbgc ._fabd .ConformanceAttr ;_gaff :=_ad .DecodeMap {};_gaff .SetOnNewRelationshipFunc (_dbgc .onNewRelationship );_gaff .AddTarget (_a .ContentTypesFilename ,_dbgc .ContentTypes .X (),"",0);_gaff .AddTarget (_a .BaseRelsFilename ,_dbgc .Rels .X (),"",0);if _ecca :=_gaff .Decode (_gcab );_ecca !=nil {return nil ,_ecca ;};_dbgc ._fabd .ConformanceAttr =_adfg ;for _ ,_fgge :=range _gcab {if _fgge ==nil {continue ;};if _acff :=_dbgc .AddExtraFileFromZip (_fgge );_acff !=nil {return nil ,_acff ;};};if _ffge {_fbcd :=false ;for _ ,_gcf :=range _dbgc .Rels .X ().Relationship {if _gcf .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_fbcd =true ;break ;};};if !_fbcd {_dbgc .AddCustomRelationships ();};};return _dbgc ,nil ;};

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_bgage TableProperties )SetLayout (l _dg .ST_TblLayoutType ){if l ==_dg .ST_TblLayoutTypeUnset ||l ==_dg .ST_TblLayoutTypeAutofit {_bgage ._dbccb .TblLayout =nil ;}else {_bgage ._dbccb .TblLayout =_dg .NewCT_TblLayoutType ();_bgage ._dbccb .TblLayout .TypeAttr =l ;};};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_gbdb Bookmark )Name ()string {return _gbdb ._caca .NameAttr };

// GetStyle returns string style of the text in watermark and format it to TextpathStyle.
func (_efcfd *WatermarkText )GetStyle ()_e .TextpathStyle {_bbbf :=_efcfd .getShape ();if _efcfd ._fgdf !=nil {_ggffd :=_efcfd ._fgdf .EG_ShapeElements ;if len (_ggffd )> 0&&_ggffd [0].Textpath !=nil {return _e .NewTextpathStyle (*_ggffd [0].Textpath .StyleAttr );};}else {_ffede :=_efcfd .findNode (_bbbf ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_aaeb :=range _ffede .Attrs {if _aaeb .Name .Local =="\u0073\u0074\u0079l\u0065"{return _e .NewTextpathStyle (_aaeb .Value );};};};return _e .NewTextpathStyle ("");};

// NewWatermarkPicture generates new WatermarkPicture.
func NewWatermarkPicture ()WatermarkPicture {_egge :=_fab .NewShapetype ();_dbefbf :=_fab .NewEG_ShapeElements ();_dbefbf .Formulas =_gfcce ();_dbefbf .Path =_bcafe ();_dbefbf .Lock =_agdff ();_egge .EG_ShapeElements =[]*_fab .EG_ShapeElements {_dbefbf };var (_bdfb ="\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_dfacd ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_dcbe =float32 (75.0);_ebfcg ="\u006d\u0040\u0034\u00405l\u0040\u0034\u0040\u0031\u0031\u0040\u0039\u0040\u0031\u0031\u0040\u0039\u0040\u0035x\u0065";);_egge .IdAttr =&_bdfb ;_egge .CoordsizeAttr =&_dfacd ;_egge .SptAttr =&_dcbe ;_egge .PreferrelativeAttr =_aea .ST_TrueFalseTrue ;_egge .PathAttr =&_ebfcg ;_egge .FilledAttr =_aea .ST_TrueFalseFalse ;_egge .StrokedAttr =_aea .ST_TrueFalseFalse ;_ffac :=_fab .NewShape ();_gcaf :=_fab .NewEG_ShapeElements ();_gcaf .Imagedata =_dgfbf ();_ffac .EG_ShapeElements =[]*_fab .EG_ShapeElements {_gcaf };var (_agfcg ="\u0057\u006f\u0072\u0064\u0050\u0069\u0063\u0074\u0075\u0072e\u0057\u0061\u0074\u0065\u0072\u006d\u0061r\u006b\u0031\u0036\u0033\u0032\u0033\u0031\u0036\u0035\u0039\u0035";_acgf ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_dfdcgc ="#\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_caad ="";_bdaef ="\u0070os\u0069t\u0069o\u006e\u003a\u0061\u0062\u0073\u006fl\u0075\u0074\u0065\u003bm\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0030\u003bma\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0030\u0070\u0074;\u0068e\u0069\u0067\u0068\u0074\u003a\u0030\u0070\u0074\u003b\u007a\u002d\u0069\u006ed\u0065\u0078:\u002d\u0032\u00351\u0036\u0035\u0038\u0032\u0034\u0030\u003b\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003bm\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002drela\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065\u0072t\u0069c\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e-\u0076\u0065r\u0074\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e";);_ffac .IdAttr =&_agfcg ;_ffac .SpidAttr =&_acgf ;_ffac .TypeAttr =&_dfdcgc ;_ffac .AltAttr =&_caad ;_ffac .StyleAttr =&_bdaef ;_ffac .AllowincellAttr =_aea .ST_TrueFalseFalse ;_fddc :=_dg .NewCT_Picture ();_fddc .Any =[]_a .Any {_egge ,_ffac };return WatermarkPicture {_dega :_fddc ,_cbeef :_ffac ,_fdbec :_egge };};

// SetTextWrapTopAndBottom sets the text wrap to top and bottom.
func (_dd AnchoredDrawing )SetTextWrapTopAndBottom (){_dd ._eg .Choice =&_dg .WdEG_WrapTypeChoice {};_dd ._eg .Choice .WrapTopAndBottom =_dg .NewWdCT_WrapTopBottom ();_dd ._eg .LayoutInCellAttr =true ;_dd ._eg .AllowOverlapAttr =true ;};

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_cdfd Run )DrawingAnchored ()[]AnchoredDrawing {_deea :=[]AnchoredDrawing {};for _ ,_fggb :=range _cdfd ._ceca .EG_RunInnerContent {if _fggb .Drawing ==nil {continue ;};for _ ,_dfbe :=range _fggb .Drawing .Anchor {_deea =append (_deea ,AnchoredDrawing {_cdfd ._aeaad ,_dfbe });};};return _deea ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_ead CellBorders )SetInsideHorizontal (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_ead ._ab .InsideH =_dg .NewCT_Border ();_eeefg (_ead ._ab .InsideH ,t ,c ,thickness );};type listItemInfo struct{FromStyle *Style ;FromParagraph *Paragraph ;AbstractNumId *int64 ;NumberingLevel *NumberingLevel ;};

// X returns the inner wml.CT_TblBorders
func (_efeb TableBorders )X ()*_dg .CT_TblBorders {return _efeb ._bccfe };

// SetXOffset sets the X offset for an image relative to the origin.
func (_ed AnchoredDrawing )SetXOffset (x _bda .Distance ){_ed ._eg .PositionH .Choice =&_dg .WdCT_PosHChoice {};_ed ._eg .PositionH .Choice .PosOffset =_a .Int32 (int32 (x /_bda .EMU ));};

// SetOutlineLvl sets outline level of paragraph.
func (_gaadf Paragraph )SetOutlineLvl (lvl int64 ){_gaadf .ensurePPr ();if _gaadf ._agbe .PPr .OutlineLvl ==nil {_gaadf ._agbe .PPr .OutlineLvl =_dg .NewCT_DecimalNumber ();};_deed :=lvl -1;_gaadf ._agbe .PPr .OutlineLvl .ValAttr =_deed ;};

// AddText adds text to a run.
func (_adefe Run )AddText (s string ){_dbac :=_dg .NewEG_RunInnerContent ();_adefe ._ceca .EG_RunInnerContent =append (_adefe ._ceca .EG_RunInnerContent ,_dbac );_dbac .T =_dg .NewCT_Text ();if _a .NeedsSpacePreserve (s ){_egefb :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_dbac .T .SpaceAttr =&_egefb ;};_dbac .T .Content =s ;};

// SetStyle sets the table style name.
func (_abcaf TableProperties )SetStyle (name string ){if name ==""{_abcaf ._dbccb .TblStyle =nil ;}else {_abcaf ._dbccb .TblStyle =_dg .NewCT_String ();_abcaf ._dbccb .TblStyle .ValAttr =name ;};};

// SetUnderline controls underline for a run style.
func (_edcc RunProperties )SetUnderline (style _dg .ST_Underline ,c _fa .Color ){if style ==_dg .ST_UnderlineUnset {_edcc ._eafe .U =nil ;}else {_edcc ._eafe .U =_dg .NewCT_Underline ();_edcc ._eafe .U .ColorAttr =&_dg .ST_HexColor {};_edcc ._eafe .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();_edcc ._eafe .U .ValAttr =style ;};};

// SetBottom sets the cell bottom margin
func (_abe CellMargins )SetBottom (d _bda .Distance ){_abe ._beg .Bottom =_dg .NewCT_TblWidth ();_def (_abe ._beg .Bottom ,d );};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_efaf *Document ;_dggc *_dg .CT_FtnEdn ;};func _agdff ()*_fab .OfcLock {_eaec :=_fab .NewOfcLock ();_eaec .ExtAttr =_fab .ST_ExtEdit ;_eaec .AspectratioAttr =_aea .ST_TrueFalseTrue ;return _eaec ;};

// SetTop sets the top border to a specified type, color and thickness.
func (_fd CellBorders )SetTop (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_fd ._ab .Top =_dg .NewCT_Border ();_eeefg (_fd ._ab .Top ,t ,c ,thickness );};

// SetTopPct sets the cell top margin
func (_baf CellMargins )SetTopPct (pct float64 ){_baf ._beg .Top =_dg .NewCT_TblWidth ();_fee (_baf ._beg .Top ,pct );};

// SetHighlight highlights text in a specified color.
func (_gbea RunProperties )SetHighlight (c _dg .ST_HighlightColor ){_gbea ._eafe .Highlight =_dg .NewCT_Highlight ();_gbea ._eafe .Highlight .ValAttr =c ;};

// Name returns the name of the field.
func (_ebbd FormField )Name ()string {return *_ebbd ._fada .Name [0].ValAttr };

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_gfbda TableLook )SetLastRow (on bool ){if !on {_gfbda ._ccbcf .LastRowAttr =&_aea .ST_OnOff {};_gfbda ._ccbcf .LastRowAttr .ST_OnOff1 =_aea .ST_OnOff1Off ;}else {_gfbda ._ccbcf .LastRowAttr =&_aea .ST_OnOff {};_gfbda ._ccbcf .LastRowAttr .ST_OnOff1 =_aea .ST_OnOff1On ;};};

// AddTable adds a new table to the document body.
func (_bdbd *Document )AddTable ()Table {_acd :=_dg .NewEG_BlockLevelElts ();_bdbd ._fabd .Body .EG_BlockLevelElts =append (_bdbd ._fabd .Body .EG_BlockLevelElts ,_acd );_bbc :=_dg .NewEG_ContentBlockContent ();_acd .EG_ContentBlockContent =append (_acd .EG_ContentBlockContent ,_bbc );_fcd :=_dg .NewCT_Tbl ();_bbc .Tbl =append (_bbc .Tbl ,_fcd );return Table {_bdbd ,_fcd };};func (_bbgdf *WatermarkText )findNode (_adfe *_a .XSDAny ,_ffeeb string )*_a .XSDAny {for _ ,_abfg :=range _adfe .Nodes {if _abfg .XMLName .Local ==_ffeeb {return _abfg ;};};return nil ;};

// X returns the inner wrapped XML type.
func (_dddc Table )X ()*_dg .CT_Tbl {return _dddc ._ebff };

// SetLeftIndent controls left indent of paragraph.
func (_fdec Paragraph )SetLeftIndent (m _bda .Distance ){_fdec .ensurePPr ();_gfada :=_fdec ._agbe .PPr ;if _gfada .Ind ==nil {_gfada .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_gfada .Ind .LeftAttr =nil ;}else {_gfada .Ind .LeftAttr =&_dg .ST_SignedTwipsMeasure {};_gfada .Ind .LeftAttr .Int64 =_a .Int64 (int64 (m /_bda .Twips ));};};

// Table is a table within a document.
type Table struct{_bddf *Document ;_ebff *_dg .CT_Tbl ;};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_fffc RunProperties )ComplexSizeMeasure ()string {if _efaafg :=_fffc ._eafe .SzCs ;_efaafg !=nil {_agfeb :=_efaafg .ValAttr ;if _agfeb .ST_PositiveUniversalMeasure !=nil {return *_agfeb .ST_PositiveUniversalMeasure ;};};return "";};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_dgff *Document )Validate ()error {if _dgff ==nil ||_dgff ._fabd ==nil {return _ga .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");};for _ ,_adbf :=range []func ()error {_dgff .validateTableCells ,_dgff .validateBookmarks }{if _abbcd :=_adbf ();_abbcd !=nil {return _abbcd ;};};if _adef :=_dgff ._fabd .Validate ();_adef !=nil {return _adef ;};return nil ;};

// Bookmarks returns all of the bookmarks defined in the document.
func (_bdgb Document )Bookmarks ()[]Bookmark {if _bdgb ._fabd .Body ==nil {return nil ;};_bcdee :=[]Bookmark {};for _ ,_bcfe :=range _bdgb ._fabd .Body .EG_BlockLevelElts {for _ ,_efaa :=range _bcfe .EG_ContentBlockContent {for _ ,_bggf :=range _dbda (_efaa ){_bcdee =append (_bcdee ,_bggf );};};};return _bcdee ;};

// SetPageMargins sets the page margins for a section
func (_beaf Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _bda .Distance ){_gfgf :=_dg .NewCT_PageMar ();_gfgf .TopAttr .Int64 =_a .Int64 (int64 (top /_bda .Twips ));_gfgf .BottomAttr .Int64 =_a .Int64 (int64 (bottom /_bda .Twips ));_gfgf .RightAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (right /_bda .Twips ));_gfgf .LeftAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (left /_bda .Twips ));_gfgf .HeaderAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (header /_bda .Twips ));_gfgf .FooterAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (footer /_bda .Twips ));_gfgf .GutterAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (gutter /_bda .Twips ));_beaf ._begfd .PgMar =_gfgf ;};

// WatermarkText is watermark text within the document.
type WatermarkText struct{_fded *_dg .CT_Picture ;_dccd *_e .TextpathStyle ;_fgdf *_fab .Shape ;_fccd *_fab .Shapetype ;};

// X returns the inner wrapped XML type.
func (_ggad RunProperties )X ()*_dg .CT_RPr {return _ggad ._eafe };var _ffd =false ;

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_gdbgc Run )AddDrawingAnchored (img _fc .ImageRef )(AnchoredDrawing ,error ){_fbff :=_gdbgc .newIC ();_fbff .Drawing =_dg .NewCT_Drawing ();_deagd :=_dg .NewWdAnchor ();_fgff :=AnchoredDrawing {_gdbgc ._aeaad ,_deagd };_deagd .SimplePosAttr =_a .Bool (false );_deagd .AllowOverlapAttr =true ;_deagd .CNvGraphicFramePr =_fb .NewCT_NonVisualGraphicFrameProperties ();_fbff .Drawing .Anchor =append (_fbff .Drawing .Anchor ,_deagd );_deagd .Graphic =_fb .NewGraphic ();_deagd .Graphic .GraphicData =_fb .NewCT_GraphicalObjectData ();_deagd .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_deagd .SimplePos .XAttr .ST_CoordinateUnqualified =_a .Int64 (0);_deagd .SimplePos .YAttr .ST_CoordinateUnqualified =_a .Int64 (0);_deagd .PositionH .RelativeFromAttr =_dg .WdST_RelFromHPage ;_deagd .PositionH .Choice =&_dg .WdCT_PosHChoice {};_deagd .PositionH .Choice .PosOffset =_a .Int32 (0);_deagd .PositionV .RelativeFromAttr =_dg .WdST_RelFromVPage ;_deagd .PositionV .Choice =&_dg .WdCT_PosVChoice {};_deagd .PositionV .Choice .PosOffset =_a .Int32 (0);_deagd .Extent .CxAttr =int64 (float64 (img .Size ().X *_bda .Pixel72 )/_bda .EMU );_deagd .Extent .CyAttr =int64 (float64 (img .Size ().Y *_bda .Pixel72 )/_bda .EMU );_deagd .Choice =&_dg .WdEG_WrapTypeChoice {};_deagd .Choice .WrapSquare =_dg .NewWdCT_WrapSquare ();_deagd .Choice .WrapSquare .WrapTextAttr =_dg .WdST_WrapTextBothSides ;_efga :=0x7FFFFFFF&_b .Uint32 ();_deagd .DocPr .IdAttr =_efga ;_faffc :=_cag .NewPic ();_faffc .NvPicPr .CNvPr .IdAttr =_efga ;_bfcfa :=img .RelID ();if _bfcfa ==""{return _fgff ,_ga .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_deagd .Graphic .GraphicData .Any =append (_deagd .Graphic .GraphicData .Any ,_faffc );_faffc .BlipFill =_fb .NewCT_BlipFillProperties ();_faffc .BlipFill .Blip =_fb .NewCT_Blip ();_faffc .BlipFill .Blip .EmbedAttr =&_bfcfa ;_faffc .BlipFill .Stretch =_fb .NewCT_StretchInfoProperties ();_faffc .BlipFill .Stretch .FillRect =_fb .NewCT_RelativeRect ();_faffc .SpPr =_fb .NewCT_ShapeProperties ();_faffc .SpPr .Xfrm =_fb .NewCT_Transform2D ();_faffc .SpPr .Xfrm .Off =_fb .NewCT_Point2D ();_faffc .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_a .Int64 (0);_faffc .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_a .Int64 (0);_faffc .SpPr .Xfrm .Ext =_fb .NewCT_PositiveSize2D ();_faffc .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_bda .Point );_faffc .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_bda .Point );_faffc .SpPr .PrstGeom =_fb .NewCT_PresetGeometry2D ();_faffc .SpPr .PrstGeom .PrstAttr =_fb .ST_ShapeTypeRect ;return _fgff ,nil ;};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_fggeg ParagraphSpacing )SetAfterAuto (b bool ){if b {_fggeg ._fdbd .AfterAutospacingAttr =&_aea .ST_OnOff {};_fggeg ._fdbd .AfterAutospacingAttr .Bool =_a .Bool (true );}else {_fggeg ._fdbd .AfterAutospacingAttr =nil ;};};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_fdbd *_dg .CT_Spacing };

// AddParagraph adds a paragraph to the footnote.
func (_ddbg Footnote )AddParagraph ()Paragraph {_cggaa :=_dg .NewEG_ContentBlockContent ();_fgbac :=len (_ddbg ._ggfaf .EG_BlockLevelElts [0].EG_ContentBlockContent );_ddbg ._ggfaf .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_ddbg ._ggfaf .EG_BlockLevelElts [0].EG_ContentBlockContent ,_cggaa );_fgeg :=_dg .NewCT_P ();var _aeggg *_dg .CT_String ;if _fgbac !=0{_fdfa :=len (_ddbg ._ggfaf .EG_BlockLevelElts [0].EG_ContentBlockContent [_fgbac -1].P );_aeggg =_ddbg ._ggfaf .EG_BlockLevelElts [0].EG_ContentBlockContent [_fgbac -1].P [_fdfa -1].PPr .PStyle ;}else {_aeggg =_dg .NewCT_String ();_aeggg .ValAttr ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065";};_cggaa .P =append (_cggaa .P ,_fgeg );_defc :=Paragraph {_ddbg ._dbdd ,_fgeg };_defc ._agbe .PPr =_dg .NewCT_PPr ();_defc ._agbe .PPr .PStyle =_aeggg ;_defc ._agbe .PPr .RPr =_dg .NewCT_ParaRPr ();return _defc ;};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_ff *_dg .CT_TcPr };

// SetStrikeThrough sets the run to strike-through.
func (_cbfa RunProperties )SetStrikeThrough (b bool ){if !b {_cbfa ._eafe .Strike =nil ;}else {_cbfa ._eafe .Strike =_dg .NewCT_OnOff ();};};

// Paragraphs returns the paragraphs within a structured document tag.
func (_ffeee StructuredDocumentTag )Paragraphs ()[]Paragraph {if _ffeee ._afgd .SdtContent ==nil {return nil ;};_befaf :=[]Paragraph {};for _ ,_eaff :=range _ffeee ._afgd .SdtContent .P {_befaf =append (_befaf ,Paragraph {_ffeee ._aebgg ,_eaff });};return _befaf ;};

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_cfca *_dg .Styles };

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_ccfa ParagraphSpacing )SetLineSpacing (d _bda .Distance ,rule _dg .ST_LineSpacingRule ){if rule ==_dg .ST_LineSpacingRuleUnset {_ccfa ._fdbd .LineRuleAttr =_dg .ST_LineSpacingRuleUnset ;_ccfa ._fdbd .LineAttr =nil ;}else {_ccfa ._fdbd .LineRuleAttr =rule ;_ccfa ._fdbd .LineAttr =&_dg .ST_SignedTwipsMeasure {};_ccfa ._fdbd .LineAttr .Int64 =_a .Int64 (int64 (d /_bda .Twips ));};};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_gada Paragraph )AddBookmark (name string )Bookmark {_egbg :=_dg .NewEG_PContent ();_agfe :=_dg .NewEG_ContentRunContent ();_egbg .EG_ContentRunContent =append (_egbg .EG_ContentRunContent ,_agfe );_fbagd :=_dg .NewEG_RunLevelElts ();_agfe .EG_RunLevelElts =append (_agfe .EG_RunLevelElts ,_fbagd );_ceceb :=_dg .NewEG_RangeMarkupElements ();_egfec :=_dg .NewCT_Bookmark ();_ceceb .BookmarkStart =_egfec ;_fbagd .EG_RangeMarkupElements =append (_fbagd .EG_RangeMarkupElements ,_ceceb );_ceceb =_dg .NewEG_RangeMarkupElements ();_ceceb .BookmarkEnd =_dg .NewCT_MarkupRange ();_fbagd .EG_RangeMarkupElements =append (_fbagd .EG_RangeMarkupElements ,_ceceb );_gada ._agbe .EG_PContent =append (_gada ._agbe .EG_PContent ,_egbg );_abbff :=Bookmark {_egfec };_abbff .SetName (name );return _abbff ;};

// InitializeDefault constructs a default numbering.
func (_eaae Numbering )InitializeDefault (){_fagdc :=_dg .NewCT_AbstractNum ();_fagdc .MultiLevelType =_dg .NewCT_MultiLevelType ();_fagdc .MultiLevelType .ValAttr =_dg .ST_MultiLevelTypeHybridMultilevel ;_eaae ._ffad .AbstractNum =append (_eaae ._ffad .AbstractNum ,_fagdc );_fagdc .AbstractNumIdAttr =1;const _edgc =720;const _gfefa =720;const _dded =360;for _ccgca :=0;_ccgca < 9;_ccgca ++{_fedc :=_dg .NewCT_Lvl ();_fedc .IlvlAttr =int64 (_ccgca );_fedc .Start =_dg .NewCT_DecimalNumber ();_fedc .Start .ValAttr =1;_fedc .NumFmt =_dg .NewCT_NumFmt ();_fedc .NumFmt .ValAttr =_dg .ST_NumberFormatBullet ;_fedc .Suff =_dg .NewCT_LevelSuffix ();_fedc .Suff .ValAttr =_dg .ST_LevelSuffixNothing ;_fedc .LvlText =_dg .NewCT_LevelText ();_fedc .LvlText .ValAttr =_a .String ("\uf0b7");_fedc .LvlJc =_dg .NewCT_Jc ();_fedc .LvlJc .ValAttr =_dg .ST_JcLeft ;_fedc .RPr =_dg .NewCT_RPr ();_fedc .RPr .RFonts =_dg .NewCT_Fonts ();_fedc .RPr .RFonts .AsciiAttr =_a .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_fedc .RPr .RFonts .HAnsiAttr =_a .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_fedc .RPr .RFonts .HintAttr =_dg .ST_HintDefault ;_fedc .PPr =_dg .NewCT_PPrGeneral ();_gfdde :=int64 (_ccgca *_gfefa +_edgc );_fedc .PPr .Ind =_dg .NewCT_Ind ();_fedc .PPr .Ind .LeftAttr =&_dg .ST_SignedTwipsMeasure {};_fedc .PPr .Ind .LeftAttr .Int64 =_a .Int64 (_gfdde );_fedc .PPr .Ind .HangingAttr =&_aea .ST_TwipsMeasure {};_fedc .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (_dded ));_fagdc .Lvl =append (_fagdc .Lvl ,_fedc );};_fdef :=_dg .NewCT_Num ();_fdef .NumIdAttr =1;_fdef .AbstractNumId =_dg .NewCT_DecimalNumber ();_fdef .AbstractNumId .ValAttr =1;_eaae ._ffad .Num =append (_eaae ._ffad .Num ,_fdef );};func (_beae *Document )InsertTableAfter (relativeTo Paragraph )Table {return _beae .insertTable (relativeTo ,false );};

// WatermarkPicture is watermark picture within document.
type WatermarkPicture struct{_dega *_dg .CT_Picture ;_eadgg *_e .ShapeStyle ;_cbeef *_fab .Shape ;_fdbec *_fab .Shapetype ;};

// Bold returns true if run font is bold.
func (_adefa RunProperties )Bold ()bool {_ffdee :=_adefa ._eafe ;return _bdba (_ffdee .B )||_bdba (_ffdee .BCs );};func (_ccad Footnote )content ()[]*_dg .EG_ContentBlockContent {var _fdfcb []*_dg .EG_ContentBlockContent ;for _ ,_geca :=range _ccad ._ggfaf .EG_BlockLevelElts {_fdfcb =append (_fdfcb ,_geca .EG_ContentBlockContent ...);};return _fdfcb ;};

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_adaa RunProperties )ItalicValue ()OnOffValue {return _feabe (_adaa ._eafe .I )};

// SetLeft sets the left border to a specified type, color and thickness.
func (_cdg CellBorders )SetLeft (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_cdg ._ab .Left =_dg .NewCT_Border ();_eeefg (_cdg ._ab .Left ,t ,c ,thickness );};func (_eeede *WatermarkPicture )getShape ()*_a .XSDAny {return _eeede .getInnerElement ("\u0073\u0068\u0061p\u0065");};

// X return slice of node.
func (_cccgd *Nodes )X ()[]Node {return _cccgd ._bfcf };

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_dggba ParagraphProperties )SetHeadingLevel (idx int ){_dggba .SetStyle (_bcf .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _dggba ._efcd .NumPr ==nil {_dggba ._efcd .NumPr =_dg .NewCT_NumPr ();};_dggba ._efcd .NumPr .Ilvl =_dg .NewCT_DecimalNumber ();_dggba ._efcd .NumPr .Ilvl .ValAttr =int64 (idx );};func (_bbdf *Document )validateTableCells ()error {for _ ,_dace :=range _bbdf ._fabd .Body .EG_BlockLevelElts {for _ ,_dca :=range _dace .EG_ContentBlockContent {for _ ,_edcd :=range _dca .Tbl {for _ ,_dgfc :=range _edcd .EG_ContentRowContent {for _ ,_gdbed :=range _dgfc .Tr {_defg :=false ;for _ ,_ecff :=range _gdbed .EG_ContentCellContent {_acbd :=false ;for _ ,_ecb :=range _ecff .Tc {_defg =true ;for _ ,_feg :=range _ecb .EG_BlockLevelElts {for _ ,_gbf :=range _feg .EG_ContentBlockContent {if len (_gbf .P )> 0{_acbd =true ;break ;};};};};if !_acbd {return _ga .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_defg {return _ga .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");};};};};};};return nil ;};

// X returns the inner wrapped XML type.
func (_ddbbbf Run )X ()*_dg .CT_R {return _ddbbbf ._ceca };

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_gfaa *Document )Close ()error {if _gfaa .TmpPath !=""{return _cf .RemoveAll (_gfaa .TmpPath );};return nil ;};

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_fbaea ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_fbaea ._efcd .PageBreakBefore =nil ;}else {_fbaea ._efcd .PageBreakBefore =_dg .NewCT_OnOff ();};};

// SetASCIITheme sets the font ASCII Theme.
func (_gegg Fonts )SetASCIITheme (t _dg .ST_Theme ){_gegg ._dcdg .AsciiThemeAttr =t };

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_cec AnchoredDrawing )SetHAlignment (h _dg .WdST_AlignH ){_cec ._eg .PositionH .Choice =&_dg .WdCT_PosHChoice {};_cec ._eg .PositionH .Choice .Align =h ;};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_cgc *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_cdb :=[]StructuredDocumentTag {};for _ ,_dgacd :=range _cgc ._fabd .Body .EG_BlockLevelElts {for _ ,_bebb :=range _dgacd .EG_ContentBlockContent {if _bebb .Sdt !=nil {_cdb =append (_cdb ,StructuredDocumentTag {_cgc ,_bebb .Sdt });};};};return _cdb ;};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_bf *Document ;_ddb *_dg .CT_Tc ;};

// Clear clears the styes.
func (_gbead Styles )Clear (){_gbead ._cfca .DocDefaults =nil ;_gbead ._cfca .LatentStyles =nil ;_gbead ._cfca .Style =nil ;};

// SetImprint sets the run to imprinted text.
func (_acac RunProperties )SetImprint (b bool ){if !b {_acac ._eafe .Imprint =nil ;}else {_acac ._eafe .Imprint =_dg .NewCT_OnOff ();};};

// SizeValue returns the value of run font size in points.
func (_aced RunProperties )SizeValue ()float64 {if _cgfc :=_aced ._eafe .Sz ;_cgfc !=nil {_cdbfa :=_cgfc .ValAttr ;if _cdbfa .ST_UnsignedDecimalNumber !=nil {return float64 (*_cdbfa .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// InsertRowAfter inserts a row after another row
func (_ccddg Table )InsertRowAfter (r Row )Row {for _gbcgd ,_cfbea :=range _ccddg ._ebff .EG_ContentRowContent {if len (_cfbea .Tr )> 0&&r .X ()==_cfbea .Tr [0]{_afaff :=_dg .NewEG_ContentRowContent ();if len (_ccddg ._ebff .EG_ContentRowContent )< _gbcgd +2{return _ccddg .AddRow ();};_ccddg ._ebff .EG_ContentRowContent =append (_ccddg ._ebff .EG_ContentRowContent ,nil );copy (_ccddg ._ebff .EG_ContentRowContent [_gbcgd +2:],_ccddg ._ebff .EG_ContentRowContent [_gbcgd +1:]);_ccddg ._ebff .EG_ContentRowContent [_gbcgd +1]=_afaff ;_dbedf :=_dg .NewCT_Row ();_afaff .Tr =append (_afaff .Tr ,_dbedf );return Row {_ccddg ._bddf ,_dbedf };};};return _ccddg .AddRow ();};

// SaveToFile writes the document out to a file.
func (_fedf *Document )SaveToFile (path string )error {_abaa ,_abaac :=_c .Create (path );if _abaac !=nil {return _abaac ;};defer _abaa .Close ();return _fedf .Save (_abaa );};func _feabe (_gebd *_dg .CT_OnOff )OnOffValue {if _gebd ==nil {return OnOffValueUnset ;};if _gebd .ValAttr !=nil &&_gebd .ValAttr .Bool !=nil &&*_gebd .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// SetTextStyleBold set text style of watermark to bold.
func (_fgdg *WatermarkText )SetTextStyleBold (value bool ){if _fgdg ._fgdf !=nil {_eddb :=_fgdg .GetStyle ();_eddb .SetBold (value );_fgdg .SetStyle (_eddb );};};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_ef AnchoredDrawing )SetAlignment (h _dg .WdST_AlignH ,v _dg .WdST_AlignV ){_ef .SetHAlignment (h );_ef .SetVAlignment (v );};

// SetOutlineLevel sets the outline level of this style.
func (_eefa ParagraphStyleProperties )SetOutlineLevel (lvl int ){_eefa ._cccfb .OutlineLvl =_dg .NewCT_DecimalNumber ();_eefa ._cccfb .OutlineLvl .ValAttr =int64 (lvl );};func (_afbad Styles )initializeDocDefaults (){_afbad ._cfca .DocDefaults =_dg .NewCT_DocDefaults ();_afbad ._cfca .DocDefaults .RPrDefault =_dg .NewCT_RPrDefault ();_afbad ._cfca .DocDefaults .RPrDefault .RPr =_dg .NewCT_RPr ();_agdd :=RunProperties {_afbad ._cfca .DocDefaults .RPrDefault .RPr };_agdd .SetSize (12*_bda .Point );_agdd .Fonts ().SetASCIITheme (_dg .ST_ThemeMajorAscii );_agdd .Fonts ().SetEastAsiaTheme (_dg .ST_ThemeMajorEastAsia );_agdd .Fonts ().SetHANSITheme (_dg .ST_ThemeMajorHAnsi );_agdd .Fonts ().SetCSTheme (_dg .ST_ThemeMajorBidi );_agdd .X ().Lang =_dg .NewCT_Language ();_agdd .X ().Lang .ValAttr =_a .String ("\u0065\u006e\u002dU\u0053");_agdd .X ().Lang .EastAsiaAttr =_a .String ("\u0065\u006e\u002dU\u0053");_agdd .X ().Lang .BidiAttr =_a .String ("\u0061\u0072\u002dS\u0041");_afbad ._cfca .DocDefaults .PPrDefault =_dg .NewCT_PPrDefault ();};

// RemoveRun removes a child run from a paragraph.
func (_cfcgb Paragraph )RemoveRun (r Run ){for _ ,_ggec :=range _cfcgb ._agbe .EG_PContent {for _acbb ,_dgbe :=range _ggec .EG_ContentRunContent {if _dgbe .R ==r ._ceca {copy (_ggec .EG_ContentRunContent [_acbb :],_ggec .EG_ContentRunContent [_acbb +1:]);_ggec .EG_ContentRunContent =_ggec .EG_ContentRunContent [0:len (_ggec .EG_ContentRunContent )-1];};if _dgbe .Sdt !=nil &&_dgbe .Sdt .SdtContent !=nil {for _gcdgg ,_fgbf :=range _dgbe .Sdt .SdtContent .EG_ContentRunContent {if _fgbf .R ==r ._ceca {copy (_dgbe .Sdt .SdtContent .EG_ContentRunContent [_gcdgg :],_dgbe .Sdt .SdtContent .EG_ContentRunContent [_gcdgg +1:]);_dgbe .Sdt .SdtContent .EG_ContentRunContent =_dgbe .Sdt .SdtContent .EG_ContentRunContent [0:len (_dgbe .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// AddBreak adds a line break to a run.
func (_cbgc Run )AddBreak (){_gedb :=_cbgc .newIC ();_gedb .Br =_dg .NewCT_Br ()};

// Paragraphs returns the paragraphs defined in a footnote.
func (_faaf Footnote )Paragraphs ()[]Paragraph {_dedbf :=[]Paragraph {};for _ ,_daeag :=range _faaf .content (){for _ ,_faga :=range _daeag .P {_dedbf =append (_dedbf ,Paragraph {_faaf ._dbdd ,_faga });};};return _dedbf ;};

// New constructs an empty document that content can be added to.
func New ()*Document {_bdb :=&Document {_fabd :_dg .NewDocument ()};_bdb .ContentTypes =_fc .NewContentTypes ();_bdb ._fabd .Body =_dg .NewCT_Body ();_bdb ._fabd .ConformanceAttr =_aea .ST_ConformanceClassTransitional ;_bdb ._eega =_fc .NewRelationships ();_bdb .AppProperties =_fc .NewAppProperties ();_bdb .CoreProperties =_fc .NewCoreProperties ();_bdb .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");_bdb .Settings =NewSettings ();_bdb ._eega .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_a .SettingsType );_bdb .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");_bdb .Rels =_fc .NewRelationships ();_bdb .Rels .AddRelationship (_a .RelativeFilename (_a .DocTypeDocument ,"",_a .CorePropertiesType ,0),_a .CorePropertiesType );_bdb .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_a .ExtendedPropertiesType );_bdb .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_a .OfficeDocumentType );_bdb .Numbering =NewNumbering ();_bdb .Numbering .InitializeDefault ();_bdb .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");_bdb ._eega .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_a .NumberingType );_bdb .Styles =NewStyles ();_bdb .Styles .InitializeDefault ();_bdb .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");_bdb ._eega .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_a .StylesType );_bdb ._fabd .Body =_dg .NewCT_Body ();return _bdb ;};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_aebgg *Document ;_afgd *_dg .CT_SdtBlock ;};

// RightToLeft returns true if run text goes from right to left.
func (_bffa RunProperties )RightToLeft ()bool {return _bdba (_bffa ._eafe .Rtl )};

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_abb CellBorders )SetInsideVertical (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_abb ._ab .InsideV =_dg .NewCT_Border ();_eeefg (_abb ._ab .InsideV ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_affca TableConditionalFormatting )X ()*_dg .CT_TblStylePr {return _affca ._adgcda };

// Rows returns the rows defined in the table.
func (_caagb Table )Rows ()[]Row {_efbdc :=[]Row {};for _ ,_edfgg :=range _caagb ._ebff .EG_ContentRowContent {for _ ,_bbdbd :=range _edfgg .Tr {_efbdc =append (_efbdc ,Row {_caagb ._bddf ,_bbdbd });};if _edfgg .Sdt !=nil &&_edfgg .Sdt .SdtContent !=nil {for _ ,_egfc :=range _edfgg .Sdt .SdtContent .Tr {_efbdc =append (_efbdc ,Row {_caagb ._bddf ,_egfc });};};};return _efbdc ;};

// SetTextWrapThrough sets the text wrap to through with a give wrap type.
func (_ee AnchoredDrawing )SetTextWrapThrough (option *AnchorDrawWrapOptions ){_ee ._eg .Choice =&_dg .WdEG_WrapTypeChoice {};_ee ._eg .Choice .WrapThrough =_dg .NewWdCT_WrapThrough ();_ee ._eg .Choice .WrapThrough .WrapTextAttr =_dg .WdST_WrapTextBothSides ;_fcb :=false ;_ee ._eg .Choice .WrapThrough .WrapPolygon .EditedAttr =&_fcb ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_ee ._eg .Choice .WrapThrough .WrapPolygon .Start =option .GetWrapPathStart ();_ee ._eg .Choice .WrapThrough .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_ee ._eg .LayoutInCellAttr =true ;_ee ._eg .AllowOverlapAttr =true ;};

// Clear resets the numbering.
func (_gdfad Numbering )Clear (){_gdfad ._ffad .AbstractNum =nil ;_gdfad ._ffad .Num =nil ;_gdfad ._ffad .NumIdMacAtCleanup =nil ;_gdfad ._ffad .NumPicBullet =nil ;};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_dcada TableLook )SetFirstRow (on bool ){if !on {_dcada ._ccbcf .FirstRowAttr =&_aea .ST_OnOff {};_dcada ._ccbcf .FirstRowAttr .ST_OnOff1 =_aea .ST_OnOff1Off ;}else {_dcada ._ccbcf .FirstRowAttr =&_aea .ST_OnOff {};_dcada ._ccbcf .FirstRowAttr .ST_OnOff1 =_aea .ST_OnOff1On ;};};func _dgfbf ()*_fab .Imagedata {_egfae :=_fab .NewImagedata ();_gabdd :="\u0072\u0049\u0064\u0031";_cgeg :="\u0057A\u0054\u0045\u0052\u004d\u0041\u0052K";_egfae .IdAttr =&_gabdd ;_egfae .TitleAttr =&_cgeg ;return _egfae ;};

// SetWrapPathLineTo sets wrapPath lineTo value.
func (_daf AnchorDrawWrapOptions )SetWrapPathLineTo (coordinates []*_fb .CT_Point2D ){_daf ._dgc =coordinates ;};

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_ccg *Document )GetImageObjByRelId (relId string )(_fc .Image ,error ){_gacfd :=_ccg ._eega .GetTargetByRelIdAndType (relId ,_a .ImageType );if _gacfd ==""{for _ ,_ebc :=range _ccg ._gbc {_gacfd =_ebc .GetTargetByRelIdAndType (relId ,_a .ImageType );};};if _gacfd ==""{for _ ,_bagd :=range _ccg ._bcg {_gacfd =_bagd .GetTargetByRelIdAndType (relId ,_a .ImageType );};};return _ccg .DocBase .GetImageBytesByTarget (_gacfd );};

// Style is a style within the styles.xml file.
type Style struct{_ddgd *_dg .CT_Style };

// Header is a header for a document section.
type Header struct{_fgabf *Document ;_abge *_dg .Hdr ;};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_gegeg ParagraphProperties )SetKeepWithNext (b bool ){if !b {_gegeg ._efcd .KeepNext =nil ;}else {_gegeg ._efcd .KeepNext =_dg .NewCT_OnOff ();};};

// Section is the beginning of a new section.
type Section struct{_affc *Document ;_begfd *_dg .CT_SectPr ;};func _edac (_fdegc string )mergeFieldInfo {_badg :=[]string {};_eedbd :=_gga .Buffer {};_cbbc :=-1;for _bgag ,_dgcdd :=range _fdegc {switch _dgcdd {case ' ':if _eedbd .Len ()!=0{_badg =append (_badg ,_eedbd .String ());};_eedbd .Reset ();case '"':if _cbbc !=-1{_badg =append (_badg ,_fdegc [_cbbc +1:_bgag ]);_cbbc =-1;}else {_cbbc =_bgag ;};default:_eedbd .WriteRune (_dgcdd );};};if _eedbd .Len ()!=0{_badg =append (_badg ,_eedbd .String ());};_gfbg :=mergeFieldInfo {};for _bdcd :=0;_bdcd < len (_badg )-1;_bdcd ++{_cggfe :=_badg [_bdcd ];switch _cggfe {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_gfbg ._gccf =_badg [_bdcd +1];_bdcd ++;case "\u005c\u0066":_gfbg ._eaace =_badg [_bdcd +1];_bdcd ++;case "\u005c\u0062":_gfbg ._dgca =_badg [_bdcd +1];_bdcd ++;case "\u005c\u002a":switch _badg [_bdcd +1]{case "\u0055\u0070\u0070e\u0072":_gfbg ._bdeac =true ;case "\u004c\u006f\u0077e\u0072":_gfbg ._begdg =true ;case "\u0043\u0061\u0070\u0073":_gfbg ._acbe =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_gfbg ._eagd =true ;};_bdcd ++;};};return _gfbg ;};func (_cgcd *WatermarkText )getShape ()*_a .XSDAny {return _cgcd .getInnerElement ("\u0073\u0068\u0061p\u0065");};

// FindNodeByStyleId return slice of node base on style id.
func (_ddfg *Nodes )FindNodeByStyleId (styleId string )[]Node {_ffgab :=[]Node {};for _ ,_ebde :=range _ddfg ._bfcf {switch _gagb :=_ebde ._dbdg .(type ){case *Paragraph :if _gagb !=nil &&_gagb .Style ()==styleId {_ffgab =append (_ffgab ,_ebde );};case *Table :if _gagb !=nil &&_gagb .Style ()==styleId {_ffgab =append (_ffgab ,_ebde );};};_ggbb :=Nodes {_bfcf :_ebde .Children };_ffgab =append (_ffgab ,_ggbb .FindNodeByStyleId (styleId )...);};return _ffgab ;};

// SetStartPct sets the cell start margin
func (_bbe CellMargins )SetStartPct (pct float64 ){_bbe ._beg .Start =_dg .NewCT_TblWidth ();_fee (_bbe ._beg .Start ,pct );};

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_dg .CT_P ;Hyperlink *_dg .CT_Hyperlink ;Run *_dg .CT_R ;TableInfo *TableInfo ;};func _ggd (_cbag *_dg .CT_P ,_agbbe map[string ]string ){for _ ,_deef :=range _cbag .EG_PContent {if _deef .Hyperlink !=nil &&_deef .Hyperlink .IdAttr !=nil {if _cfgd ,_aabee :=_agbbe [*_deef .Hyperlink .IdAttr ];_aabee {*_deef .Hyperlink .IdAttr =_cfgd ;};};};};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_fggf TableBorders )SetBottom (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_fggf ._bccfe .Bottom =_dg .NewCT_Border ();_eeefg (_fggf ._bccfe .Bottom ,t ,c ,thickness );};

// ParagraphProperties returns the paragraph style properties.
func (_becd Style )ParagraphProperties ()ParagraphStyleProperties {if _becd ._ddgd .PPr ==nil {_becd ._ddgd .PPr =_dg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_becd ._ddgd .PPr };};func (_aafg *WatermarkPicture )getShapeImagedata ()*_a .XSDAny {return _aafg .getInnerElement ("\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");};

// X returns the inner wrapped XML type.
func (_cebce Footer )X ()*_dg .Ftr {return _cebce ._cfaa };const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_dg .Ftr )[]TextItem {return _gcfg (footer .EG_ContentBlockContent ,nil )};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_ecfd ,_aedb :=Open (filename );if _aedb !=nil {return nil ,_aedb ;};_ecfd ._fabd .Body =_dg .NewCT_Body ();return _ecfd ,nil ;};

// AnchorDrawWrapOptions is options to set
// wrapPolygon for wrap text through and tight.
type AnchorDrawWrapOptions struct{_dac bool ;_gab *_fb .CT_Point2D ;_dgc []*_fb .CT_Point2D ;};

// SetHeight allows controlling the height of a row within a table.
func (_dafcc RowProperties )SetHeight (ht _bda .Distance ,rule _dg .ST_HeightRule ){if rule ==_dg .ST_HeightRuleUnset {_dafcc ._aedfb .TrHeight =nil ;}else {_accg :=_dg .NewCT_Height ();_accg .HRuleAttr =rule ;_accg .ValAttr =&_aea .ST_TwipsMeasure {};_accg .ValAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (ht /_bda .Twips ));_dafcc ._aedfb .TrHeight =[]*_dg .CT_Height {_accg };};};

// RemoveMailMerge removes any mail merge settings
func (_cbgcd Settings )RemoveMailMerge (){_cbgcd ._fgfb .MailMerge =nil };

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_bccfe *_dg .CT_TblBorders };

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_bba AnchoredDrawing )SetTextWrapNone (){_bba ._eg .Choice =&_dg .WdEG_WrapTypeChoice {};_bba ._eg .Choice .WrapNone =_dg .NewWdCT_WrapNone ();};func (_eedgc Paragraph )addInstrText (_acea string )*_dg .CT_Text {_gbgg :=_eedgc .AddRun ();_fedfe :=_gbgg .X ();_gcbe :=_dg .NewEG_RunInnerContent ();_dccf :=_dg .NewCT_Text ();_egdb :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_dccf .SpaceAttr =&_egdb ;_dccf .Content ="\u0020"+_acea +"\u0020";_gcbe .InstrText =_dccf ;_fedfe .EG_RunInnerContent =append (_fedfe .EG_RunInnerContent ,_gcbe );return _dccf ;};

// read reads a document from an io.Reader.
func Read (r _da .ReaderAt ,size int64 )(*Document ,error ){return _eagc (r ,size ,"")};

// Name returns the name of the style if set.
func (_gagfa Style )Name ()string {if _gagfa ._ddgd .Name ==nil {return "";};return _gagfa ._ddgd .Name .ValAttr ;};func (_adfgd *Document )insertParagraph (_geag Paragraph ,_bggd bool )Paragraph {if _adfgd ._fabd .Body ==nil {return _adfgd .AddParagraph ();};_fagd :=_geag .X ();for _ ,_gdgb :=range _adfgd ._fabd .Body .EG_BlockLevelElts {for _ ,_fegg :=range _gdgb .EG_ContentBlockContent {for _adeg ,_faeb :=range _fegg .P {if _faeb ==_fagd {_egb :=_dg .NewCT_P ();_fegg .P =append (_fegg .P ,nil );if _bggd {copy (_fegg .P [_adeg +1:],_fegg .P [_adeg :]);_fegg .P [_adeg ]=_egb ;}else {copy (_fegg .P [_adeg +2:],_fegg .P [_adeg +1:]);_fegg .P [_adeg +1]=_egb ;};return Paragraph {_adfgd ,_egb };};};for _ ,_effgf :=range _fegg .Tbl {for _ ,_daca :=range _effgf .EG_ContentRowContent {for _ ,_ecacf :=range _daca .Tr {for _ ,_cdf :=range _ecacf .EG_ContentCellContent {for _ ,_ebebc :=range _cdf .Tc {for _ ,_fafc :=range _ebebc .EG_BlockLevelElts {for _ ,_gbef :=range _fafc .EG_ContentBlockContent {for _cbgg ,_fdfe :=range _gbef .P {if _fdfe ==_fagd {_cecg :=_dg .NewCT_P ();_gbef .P =append (_gbef .P ,nil );if _bggd {copy (_gbef .P [_cbgg +1:],_gbef .P [_cbgg :]);_gbef .P [_cbgg ]=_cecg ;}else {copy (_gbef .P [_cbgg +2:],_gbef .P [_cbgg +1:]);_gbef .P [_cbgg +1]=_cecg ;};return Paragraph {_adfgd ,_cecg };};};};};};};};};};if _fegg .Sdt !=nil &&_fegg .Sdt .SdtContent !=nil &&_fegg .Sdt .SdtContent .P !=nil {for _ggff ,_ccbf :=range _fegg .Sdt .SdtContent .P {if _ccbf ==_fagd {_cbgf :=_dg .NewCT_P ();_fegg .Sdt .SdtContent .P =append (_fegg .Sdt .SdtContent .P ,nil );if _bggd {copy (_fegg .Sdt .SdtContent .P [_ggff +1:],_fegg .Sdt .SdtContent .P [_ggff :]);_fegg .Sdt .SdtContent .P [_ggff ]=_cbgf ;}else {copy (_fegg .Sdt .SdtContent .P [_ggff +2:],_fegg .Sdt .SdtContent .P [_ggff +1:]);_fegg .Sdt .SdtContent .P [_ggff +1]=_cbgf ;};return Paragraph {_adfgd ,_cbgf };};};};};};return _adfgd .AddParagraph ();};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_fbaeb ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_fbaeb ._cccfb .KeepNext =nil ;}else {_fbaeb ._cccfb .KeepNext =_dg .NewCT_OnOff ();};};func (_cbfd Endnote )content ()[]*_dg .EG_ContentBlockContent {var _ecfdg []*_dg .EG_ContentBlockContent ;for _ ,_aedeb :=range _cbfd ._dggc .EG_BlockLevelElts {_ecfdg =append (_ecfdg ,_aedeb .EG_ContentBlockContent ...);};return _ecfdg ;};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;_dacd []listItemInfo ;_gbfg map[int64 ]map[int64 ]int64 ;};

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_dg .Hdr )[]TextItem {return _gcfg (header .EG_ContentBlockContent ,nil )};

// VerticalAlign returns the value of paragraph vertical align.
func (_cbec ParagraphProperties )VerticalAlignment ()_aea .ST_VerticalAlignRun {if _edbbg :=_cbec ._efcd .RPr .VertAlign ;_edbbg !=nil {return _edbbg .ValAttr ;};return 0;};

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_bbffa Paragraph )InsertRunAfter (relativeTo Run )Run {return _bbffa .insertRun (relativeTo ,false );};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_fgecb Run )IsFootnote ()(bool ,int64 ){if _fgecb ._ceca .EG_RunInnerContent !=nil {if _fgecb ._ceca .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_fgecb ._ceca .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_cfdb Paragraph )Style ()string {if _cfdb ._agbe .PPr !=nil &&_cfdb ._agbe .PPr .PStyle !=nil {return _cfdb ._agbe .PPr .PStyle .ValAttr ;};return "";};

// Italic returns true if paragraph font is italic.
func (_bbgda ParagraphProperties )Italic ()bool {_bbdba :=_bbgda ._efcd .RPr ;return _bdba (_bbdba .I )||_bdba (_bbdba .ICs );};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_bcbg *Document )Footnote (id int64 )Footnote {for _ ,_gag :=range _bcbg .Footnotes (){if _gag .id ()==id {return _gag ;};};return Footnote {};};

// SetThemeColor sets the color from the theme.
func (_bbd Color )SetThemeColor (t _dg .ST_ThemeColor ){_bbd ._dad .ThemeColorAttr =t };

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_bgab ParagraphProperties )AddTabStop (position _bda .Distance ,justificaton _dg .ST_TabJc ,leader _dg .ST_TabTlc ){if _bgab ._efcd .Tabs ==nil {_bgab ._efcd .Tabs =_dg .NewCT_Tabs ();};_fgacc :=_dg .NewCT_TabStop ();_fgacc .LeaderAttr =leader ;_fgacc .ValAttr =justificaton ;_fgacc .PosAttr .Int64 =_a .Int64 (int64 (position /_bda .Twips ));_bgab ._efcd .Tabs .Tab =append (_bgab ._efcd .Tabs .Tab ,_fgacc );};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_dbba Run )ClearContent (){_dbba ._ceca .EG_RunInnerContent =nil };

// SetHeader sets a section header.
func (_fffeb Section )SetHeader (h Header ,t _dg .ST_HdrFtr ){_egeaf :=_dg .NewEG_HdrFtrReferences ();_fffeb ._begfd .EG_HdrFtrReferences =append (_fffeb ._begfd .EG_HdrFtrReferences ,_egeaf );_egeaf .HeaderReference =_dg .NewCT_HdrFtrRef ();_egeaf .HeaderReference .TypeAttr =t ;_gdbbf :=_fffeb ._affc ._eega .FindRIDForN (h .Index (),_a .HeaderType );if _gdbbf ==""{_bd .Log .Debug ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");};_egeaf .HeaderReference .IdAttr =_gdbbf ;};

// ReplaceTextByRegexp replace text inside node using regexp.
func (_fdeaa *Nodes )ReplaceTextByRegexp (expr *_gg .Regexp ,newText string ){for _ ,_dgae :=range _fdeaa ._bfcf {_dgae .ReplaceTextByRegexp (expr ,newText );};};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_caagc Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_caagc .ensurePPr ();if _caagc ._agbe .PPr .NumPr ==nil {_caagc ._agbe .PPr .NumPr =_dg .NewCT_NumPr ();};_dgabf :=_dg .NewCT_DecimalNumber ();_fcceg :=int64 (-1);for _ ,_dfgd :=range _caagc ._baff .Numbering ._ffad .Num {if _dfgd .AbstractNumId !=nil &&_dfgd .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_fcceg =_dfgd .NumIdAttr ;};};if _fcceg ==-1{_abfd :=_dg .NewCT_Num ();_caagc ._baff .Numbering ._ffad .Num =append (_caagc ._baff .Numbering ._ffad .Num ,_abfd );_abfd .NumIdAttr =int64 (len (_caagc ._baff .Numbering ._ffad .Num ));_abfd .AbstractNumId =_dg .NewCT_DecimalNumber ();_abfd .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_dgabf .ValAttr =_fcceg ;_caagc ._agbe .PPr .NumPr .NumId =_dgabf ;};

// Type returns the type of the field.
func (_degb FormField )Type ()FormFieldType {if _degb ._fada .TextInput !=nil {return FormFieldTypeText ;}else if _degb ._fada .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _degb ._fada .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;};

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// document.
func (_cebc *Document )GetChartSpaceByRelId (relId string )*_ea .ChartSpace {_gdcc :=_cebc ._eega .GetTargetByRelId (relId );for _ ,_baadd :=range _cebc ._edb {if _gdcc ==_baadd .Target (){return _baadd ._ega ;};};return nil ;};

// SetBasedOn sets the style that this style is based on.
func (_baea Style )SetBasedOn (name string ){if name ==""{_baea ._ddgd .BasedOn =nil ;}else {_baea ._ddgd .BasedOn =_dg .NewCT_String ();_baea ._ddgd .BasedOn .ValAttr =name ;};};

// Pict returns the pict object.
func (_fecce *WatermarkPicture )Pict ()*_dg .CT_Picture {return _fecce ._dega };

// TableProperties are the properties for a table within a document
type TableProperties struct{_dbccb *_dg .CT_TblPr };

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_bbgc Paragraph )SetFirstLineIndent (m _bda .Distance ){_bbgc .ensurePPr ();_cfcb :=_bbgc ._agbe .PPr ;if _cfcb .Ind ==nil {_cfcb .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_cfcb .Ind .FirstLineAttr =nil ;}else {_cfcb .Ind .FirstLineAttr =&_aea .ST_TwipsMeasure {};_cfcb .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (m /_bda .Twips ));};};

// SetPageSizeAndOrientation sets the page size and orientation for a section.
func (_ddcf Section )SetPageSizeAndOrientation (w ,h _bda .Distance ,orientation _dg .ST_PageOrientation ){if _ddcf ._begfd .PgSz ==nil {_ddcf ._begfd .PgSz =_dg .NewCT_PageSz ();};_ddcf ._begfd .PgSz .OrientAttr =orientation ;if orientation ==_dg .ST_PageOrientationLandscape {_ddcf ._begfd .PgSz .WAttr =&_aea .ST_TwipsMeasure {};_ddcf ._begfd .PgSz .WAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (h /_bda .Twips ));_ddcf ._begfd .PgSz .HAttr =&_aea .ST_TwipsMeasure {};_ddcf ._begfd .PgSz .HAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (w /_bda .Twips ));}else {_ddcf ._begfd .PgSz .WAttr =&_aea .ST_TwipsMeasure {};_ddcf ._begfd .PgSz .WAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (w /_bda .Twips ));_ddcf ._begfd .PgSz .HAttr =&_aea .ST_TwipsMeasure {};_ddcf ._begfd .PgSz .HAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (h /_bda .Twips ));};};

// SetHANSITheme sets the font H ANSI Theme.
func (_eabg Fonts )SetHANSITheme (t _dg .ST_Theme ){_eabg ._dcdg .HAnsiThemeAttr =t };

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_dg .CT_Drawing ;Width int64 ;Height int64 ;};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_acda *Document )Endnote (id int64 )Endnote {for _ ,_eegd :=range _acda .Endnotes (){if _eegd .id ()==id {return _eegd ;};};return Endnote {};};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_bebg ParagraphProperties )SetHangingIndent (m _bda .Distance ){if _bebg ._efcd .Ind ==nil {_bebg ._efcd .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_bebg ._efcd .Ind .HangingAttr =nil ;}else {_bebg ._efcd .Ind .HangingAttr =&_aea .ST_TwipsMeasure {};_bebg ._efcd .Ind .HangingAttr .ST_UnsignedDecimalNumber =_a .Uint64 (uint64 (m /_bda .Twips ));};};

// Font returns the name of run font family.
func (_bgfdc RunProperties )Font ()string {if _ebfab :=_bgfdc ._eafe .RFonts ;_ebfab !=nil {if _ebfab .AsciiAttr !=nil {return *_ebfab .AsciiAttr ;}else if _ebfab .HAnsiAttr !=nil {return *_ebfab .HAnsiAttr ;}else if _ebfab .CsAttr !=nil {return *_ebfab .CsAttr ;};};return "";};func _def (_bbab *_dg .CT_TblWidth ,_eeae _bda .Distance ){_bbab .TypeAttr =_dg .ST_TblWidthDxa ;_bbab .WAttr =&_dg .ST_MeasurementOrPercent {};_bbab .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_bbab .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (_eeae /_bda .Dxa ));};

// SetBehindDoc sets the behindDoc attribute of anchor.
func (_db AnchoredDrawing )SetBehindDoc (val bool ){_db ._eg .BehindDocAttr =val };

// Type returns the type of the style.
func (_cdedcg Style )Type ()_dg .ST_StyleType {return _cdedcg ._ddgd .TypeAttr };

// AddStyle adds a new empty style, if styleID is already exists, it will return the style.
func (_fadde Styles )AddStyle (styleID string ,t _dg .ST_StyleType ,isDefault bool )Style {if _ddfc ,_ggbf :=_fadde .SearchStyleById (styleID );_ggbf {return _ddfc ;};_ceea :=_dg .NewCT_Style ();_ceea .TypeAttr =t ;if isDefault {_ceea .DefaultAttr =&_aea .ST_OnOff {};_ceea .DefaultAttr .Bool =_a .Bool (isDefault );};_ceea .StyleIdAttr =_a .String (styleID );_fadde ._cfca .Style =append (_fadde ._cfca .Style ,_ceea );return Style {_ceea };};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_dfcea ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_dfcea ._efcd .KeepLines =nil ;}else {_dfcea ._efcd .KeepLines =_dg .NewCT_OnOff ();};};

// GetFooter gets a section Footer for given type
func (_efed Section )GetFooter (t _dg .ST_HdrFtr )(Footer ,bool ){for _ ,_cagc :=range _efed ._begfd .EG_HdrFtrReferences {if _cagc .FooterReference .TypeAttr ==t {for _ ,_gfdg :=range _efed ._affc .Footers (){_ggffa :=_efed ._affc ._eega .FindRIDForN (_gfdg .Index (),_a .FooterType );if _ggffa ==_cagc .FooterReference .IdAttr {return _gfdg ,true ;};};};};return Footer {},false ;};

// DoubleStrike returns true if paragraph is double striked.
func (_efdc ParagraphProperties )DoubleStrike ()bool {return _bdba (_efdc ._efcd .RPr .Dstrike )};

// SetEffect sets a text effect on the run.
func (_gffe RunProperties )SetEffect (e _dg .ST_TextEffect ){if e ==_dg .ST_TextEffectUnset {_gffe ._eafe .Effect =nil ;}else {_gffe ._eafe .Effect =_dg .NewCT_TextEffect ();_gffe ._eafe .Effect .ValAttr =_dg .ST_TextEffectShimmer ;};};

// Tables returns the tables defined in the footer.
func (_ggfa Footer )Tables ()[]Table {_abfb :=[]Table {};if _ggfa ._cfaa ==nil {return nil ;};for _ ,_gfdba :=range _ggfa ._cfaa .EG_ContentBlockContent {for _ ,_aff :=range _ggfa ._bccf .tables (_gfdba ){_abfb =append (_abfb ,_aff );};};return _abfb ;};

// ClearColor clears the text color.
func (_bcbfdc RunProperties )ClearColor (){_bcbfdc ._eafe .Color =nil };

// SetLeftIndent controls the left indent of the paragraph.
func (_gafca ParagraphStyleProperties )SetLeftIndent (m _bda .Distance ){if _gafca ._cccfb .Ind ==nil {_gafca ._cccfb .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_gafca ._cccfb .Ind .LeftAttr =nil ;}else {_gafca ._cccfb .Ind .LeftAttr =&_dg .ST_SignedTwipsMeasure {};_gafca ._cccfb .Ind .LeftAttr .Int64 =_a .Int64 (int64 (m /_bda .Twips ));};};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_adgcd ParagraphBorders )SetBottom (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_adgcd ._feafb .Bottom =_dg .NewCT_Border ();_fdcgc (_adgcd ._feafb .Bottom ,t ,c ,thickness );};

// UnderlineColor returns the hex color value of run underline.
func (_adcdc RunProperties )UnderlineColor ()string {if _fedfg :=_adcdc ._eafe .U ;_fedfg !=nil {_fbccg :=_fedfg .ColorAttr ;if _fbccg !=nil &&_fbccg .ST_HexColorRGB !=nil {return *_fbccg .ST_HexColorRGB ;};};return "";};

// AddWatermarkPicture adds new watermark picture to document.
func (_ebd *Document )AddWatermarkPicture (imageRef _fc .ImageRef )WatermarkPicture {var _efe []Header ;if _bad ,_eeef :=_ebd .BodySection ().GetHeader (_dg .ST_HdrFtrDefault );_eeef {_efe =append (_efe ,_bad );};if _efea ,_ccbe :=_ebd .BodySection ().GetHeader (_dg .ST_HdrFtrEven );_ccbe {_efe =append (_efe ,_efea );};if _gfga ,_gbb :=_ebd .BodySection ().GetHeader (_dg .ST_HdrFtrFirst );_gbb {_efe =append (_efe ,_gfga );};if len (_efe )< 1{_fea :=_ebd .AddHeader ();_ebd .BodySection ().SetHeader (_fea ,_dg .ST_HdrFtrDefault );_efe =append (_efe ,_fea );};var _aega error ;_bfba :=NewWatermarkPicture ();for _ ,_dgab :=range _efe {imageRef ,_aega =_dgab .AddImageRef (imageRef );if _aega !=nil {return WatermarkPicture {};};_agba :=_dgab .Paragraphs ();if len (_agba )< 1{_cecc :=_dgab .AddParagraph ();_cecc .AddRun ().AddText ("");};for _ ,_ffcdd :=range _dgab .X ().EG_ContentBlockContent {for _ ,_aded :=range _ffcdd .P {for _ ,_feab :=range _aded .EG_PContent {for _ ,_ggeb :=range _feab .EG_ContentRunContent {if _ggeb .R ==nil {continue ;};for _ ,_dgee :=range _ggeb .R .EG_RunInnerContent {_dgee .Pict =_bfba ._dega ;break ;};};};};};};_bfba .SetPicture (imageRef );return _bfba ;};

// SetWrapPathStart sets wrapPath start value.
func (_aeg AnchorDrawWrapOptions )SetWrapPathStart (coordinate *_fb .CT_Point2D ){_aeg ._gab =coordinate ;};

// SetShapeStyle sets style to the element v:shape in watermark.
func (_fdecd *WatermarkPicture )SetShapeStyle (shapeStyle _e .ShapeStyle ){if _fdecd ._cbeef !=nil {_bdcef :=shapeStyle .String ();_fdecd ._cbeef .StyleAttr =&_bdcef ;};};

// GetShapeStyle returns string style of the shape in watermark and format it to ShapeStyle.
func (_fcbc *WatermarkPicture )GetShapeStyle ()_e .ShapeStyle {if _fcbc ._cbeef !=nil &&_fcbc ._cbeef .StyleAttr !=nil {return _e .NewShapeStyle (*_fcbc ._cbeef .StyleAttr );};return _e .NewShapeStyle ("");};

// SetStyle sets style to the text in watermark.
func (_ecbf *WatermarkText )SetStyle (style _e .TextpathStyle ){_ggegg :=_ecbf .getShape ();if _ecbf ._fgdf !=nil {_fffed :=_ecbf ._fgdf .EG_ShapeElements ;if len (_fffed )> 0&&_fffed [0].Textpath !=nil {var _affe =style .String ();_fffed [0].Textpath .StyleAttr =&_affe ;};return ;};_baag :=_ecbf .findNode (_ggegg ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _bgfcd ,_gdddb :=range _baag .Attrs {if _gdddb .Name .Local =="\u0073\u0074\u0079l\u0065"{_baag .Attrs [_bgfcd ].Value =style .String ();};};};

// SetSize sets the size of the displayed image on the page.
func (_eaa AnchoredDrawing )SetSize (w ,h _bda .Distance ){_eaa ._eg .Extent .CxAttr =int64 (float64 (w *_bda .Pixel72 )/_bda .EMU );_eaa ._eg .Extent .CyAttr =int64 (float64 (h *_bda .Pixel72 )/_bda .EMU );};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_fc .DocBase ;_fabd *_dg .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_agd []*_dg .Hdr ;_gbc []_fc .Relationships ;_dcfe []*_dg .Ftr ;_bcg []_fc .Relationships ;_eega _fc .Relationships ;_cbef []*_fb .Theme ;_fdf *_dg .WebSettings ;_egf *_dg .Fonts ;_abbb *_dg .Endnotes ;_dea *_dg .Footnotes ;_agg []*_aef .Control ;_edb []*chart ;_gcc string ;};

// SetRight sets the right border to a specified type, color and thickness.
func (_dagde TableBorders )SetRight (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_dagde ._bccfe .Right =_dg .NewCT_Border ();_eeefg (_dagde ._bccfe .Right ,t ,c ,thickness );};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_eade Paragraph )AddFootnote (text string )Footnote {var _fddbb int64 ;if _eade ._baff .HasFootnotes (){for _ ,_ageda :=range _eade ._baff .Footnotes (){if _ageda .id ()> _fddbb {_fddbb =_ageda .id ();};};_fddbb ++;}else {_fddbb =0;_eade ._baff ._dea =&_dg .Footnotes {};_eade ._baff ._dea .CT_Footnotes =_dg .CT_Footnotes {};_eade ._baff ._dea .Footnote =make ([]*_dg .CT_FtnEdn ,0);};_bggag :=_dg .NewCT_FtnEdn ();_deaf :=_dg .NewCT_FtnEdnRef ();_deaf .IdAttr =_fddbb ;_eade ._baff ._dea .CT_Footnotes .Footnote =append (_eade ._baff ._dea .CT_Footnotes .Footnote ,_bggag );_egfa :=_eade .AddRun ();_aabga :=_egfa .Properties ();_aabga .SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0041n\u0063\u0068\u006f\u0072");_egfa ._ceca .EG_RunInnerContent =[]*_dg .EG_RunInnerContent {_dg .NewEG_RunInnerContent ()};_egfa ._ceca .EG_RunInnerContent [0].FootnoteReference =_deaf ;_daefe :=Footnote {_eade ._baff ,_bggag };_daefe ._ggfaf .IdAttr =_fddbb ;_daefe ._ggfaf .EG_BlockLevelElts =[]*_dg .EG_BlockLevelElts {_dg .NewEG_BlockLevelElts ()};_cgdf :=_daefe .AddParagraph ();_cgdf .Properties ().SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065");_cgdf ._agbe .PPr .RPr =_dg .NewCT_ParaRPr ();_gbag :=_cgdf .AddRun ();_gbag .AddTab ();_gbag .AddText (text );return _daefe ;};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_fbf *Document ;_eg *_dg .WdAnchor ;};

// PutNodeBefore put node to position before relativeTo.
func (_ebee *Document )PutNodeBefore (relativeTo ,node Node ){_ebee .putNode (relativeTo ,node ,true )};

// Properties returns the paragraph properties.
func (_fadd Paragraph )Properties ()ParagraphProperties {_fadd .ensurePPr ();return ParagraphProperties {_fadd ._baff ,_fadd ._agbe .PPr };};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_dcdg *_dg .CT_Fonts };

// SetEndIndent controls the end indentation.
func (_agfbg ParagraphProperties )SetEndIndent (m _bda .Distance ){if _agfbg ._efcd .Ind ==nil {_agfbg ._efcd .Ind =_dg .NewCT_Ind ();};if m ==_bda .Zero {_agfbg ._efcd .Ind .EndAttr =nil ;}else {_agfbg ._efcd .Ind .EndAttr =&_dg .ST_SignedTwipsMeasure {};_agfbg ._efcd .Ind .EndAttr .Int64 =_a .Int64 (int64 (m /_bda .Twips ));};};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_fafgb FormField )SetSize (size uint64 ){size *=2;if _fafgb ._fada .CheckBox !=nil {_fafgb ._fada .CheckBox .Choice =_dg .NewCT_FFCheckBoxChoice ();_fafgb ._fada .CheckBox .Choice .Size =_dg .NewCT_HpsMeasure ();_fafgb ._fada .CheckBox .Choice .Size .ValAttr =_dg .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };};};

// SetWidthAuto sets the the table width to automatic.
func (_bfbe TableProperties )SetWidthAuto (){_bfbe ._dbccb .TblW =_dg .NewCT_TblWidth ();_bfbe ._dbccb .TblW .TypeAttr =_dg .ST_TblWidthAuto ;};

// ReplaceText replace text inside node.
func (_aedd *Nodes )ReplaceText (oldText ,newText string ){for _ ,_gcede :=range _aedd ._bfcf {_gcede .ReplaceText (oldText ,newText );};};

// SetPicture sets the watermark picture.
func (_ebagg *WatermarkPicture )SetPicture (imageRef _fc .ImageRef ){_cagfe :=imageRef .RelID ();_eadcc :=_ebagg .getShape ();if _ebagg ._cbeef !=nil {_gdad :=_ebagg ._cbeef .EG_ShapeElements ;if len (_gdad )> 0&&_gdad [0].Imagedata !=nil {_gdad [0].Imagedata .IdAttr =&_cagfe ;};}else {_dagc :=_ebagg .findNode (_eadcc ,"\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");for _eegff ,_dagcd :=range _dagc .Attrs {if _dagcd .Name .Local =="\u0069\u0064"{_dagc .Attrs [_eegff ].Value =_cagfe ;};};};};func _cacd (_ede *_dg .CT_P ,_eaef *_dg .CT_Hyperlink ,_agfcc *TableInfo ,_bacg *DrawingInfo ,_ebbcf []*_dg .EG_ContentRunContent )[]TextItem {_fbgfg :=[]TextItem {};for _ ,_fagde :=range _ebbcf {if _fgfeb :=_fagde .R ;_fgfeb !=nil {_aaff :=_gga .NewBuffer ([]byte {});for _ ,_ebgaa :=range _fgfeb .EG_RunInnerContent {if _ebgaa .Br !=nil {_aaff .WriteString ("\u000a");};if _ebgaa .Tab !=nil {_aaff .WriteString ("\u0009");};if _ebgaa .T !=nil &&_ebgaa .T .Content !=""{_aaff .WriteString (_ebgaa .T .Content );};};_fbgfg =append (_fbgfg ,TextItem {Text :_aaff .String (),DrawingInfo :_bacg ,Paragraph :_ede ,Hyperlink :_eaef ,Run :_fgfeb ,TableInfo :_agfcc });for _ ,_gegce :=range _fgfeb .Extra {if _fdcb ,_edfec :=_gegce .(*_dg .AlternateContentRun );_edfec {_bfdg :=&DrawingInfo {Drawing :_fdcb .Choice .Drawing };for _ ,_bbb :=range _bfdg .Drawing .Anchor {for _ ,_degd :=range _bbb .Graphic .GraphicData .Any {if _bdedb ,_bggb :=_degd .(*_dg .WdWsp );_bggb {if _bdedb .WChoice !=nil {if _eaddg :=_bdedb .SpPr ;_eaddg !=nil {if _ggda :=_eaddg .Xfrm ;_ggda !=nil {if _gfeg :=_ggda .Ext ;_gfeg !=nil {_bfdg .Width =_gfeg .CxAttr ;_bfdg .Height =_gfeg .CyAttr ;};};};for _ ,_ecgf :=range _bdedb .WChoice .Txbx .TxbxContent .EG_ContentBlockContent {_fbgfg =append (_fbgfg ,_dbgg (_ecgf .P ,_agfcc ,_bfdg )...);};};};};};};};};};return _fbgfg ;};func (_gceb Paragraph )addEndBookmark (_addf int64 )*_dg .CT_MarkupRange {_gaed :=_dg .NewEG_PContent ();_gceb ._agbe .EG_PContent =append (_gceb ._agbe .EG_PContent ,_gaed );_dfgbd :=_dg .NewEG_ContentRunContent ();_dgacf :=_dg .NewEG_RunLevelElts ();_geeg :=_dg .NewEG_RangeMarkupElements ();_cegg :=_dg .NewCT_MarkupRange ();_cegg .IdAttr =_addf ;_geeg .BookmarkEnd =_cegg ;_gaed .EG_ContentRunContent =append (_gaed .EG_ContentRunContent ,_dfgbd );_dfgbd .EG_RunLevelElts =append (_dfgbd .EG_RunLevelElts ,_dgacf );_dgacf .EG_RangeMarkupElements =append (_dgacf .EG_RangeMarkupElements ,_geeg );return _cegg ;};

// RemoveParagraph removes a paragraph from the endnote.
func (_ddea Endnote )RemoveParagraph (p Paragraph ){for _ ,_adagc :=range _ddea .content (){for _dcaa ,_ccgdg :=range _adagc .P {if _ccgdg ==p ._agbe {copy (_adagc .P [_dcaa :],_adagc .P [_dcaa +1:]);_adagc .P =_adagc .P [0:len (_adagc .P )-1];return ;};};};};

// AddDefinition adds a new numbering definition.
func (_fccac Numbering )AddDefinition ()NumberingDefinition {_fgecf :=_dg .NewCT_Num ();_gbad :=int64 (1);for _ ,_gbac :=range _fccac .Definitions (){if _gbac .AbstractNumberID ()>=_gbad {_gbad =_gbac .AbstractNumberID ()+1;};};_dadcc :=int64 (1);for _ ,_feba :=range _fccac .X ().Num {if _feba .NumIdAttr >=_dadcc {_dadcc =_feba .NumIdAttr +1;};};_fgecf .NumIdAttr =_dadcc ;_fgecf .AbstractNumId =_dg .NewCT_DecimalNumber ();_fgecf .AbstractNumId .ValAttr =_gbad ;_abad :=_dg .NewCT_AbstractNum ();_abad .AbstractNumIdAttr =_gbad ;_fccac ._ffad .AbstractNum =append (_fccac ._ffad .AbstractNum ,_abad );_fccac ._ffad .Num =append (_fccac ._ffad .Num ,_fgecf );return NumberingDefinition {_abad };};

// SetRightToLeft sets the run text goes from right to left.
func (_dcgea RunProperties )SetRightToLeft (b bool ){if !b {_dcgea ._eafe .Rtl =nil ;}else {_dcgea ._eafe .Rtl =_dg .NewCT_OnOff ();};};

// SetStyle sets the font size.
func (_bcbfg RunProperties )SetStyle (style string ){if style ==""{_bcbfg ._eafe .RStyle =nil ;}else {_bcbfg ._eafe .RStyle =_dg .NewCT_String ();_bcbfg ._eafe .RStyle .ValAttr =style ;};};

// SetLeft sets the left border to a specified type, color and thickness.
func (_ffbc TableBorders )SetLeft (t _dg .ST_Border ,c _fa .Color ,thickness _bda .Distance ){_ffbc ._bccfe .Left =_dg .NewCT_Border ();_eeefg (_ffbc ._bccfe .Left ,t ,c ,thickness );};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;

// InitializeDefault constructs the default styles.
func (_faaa Styles )InitializeDefault (){_faaa .initializeDocDefaults ();_faaa .initializeStyleDefaults ();};

// RowProperties are the properties for a row within a table
type RowProperties struct{_aedfb *_dg .CT_TrPr };

// X returns the inner wrapped XML type.
func (_dgecg ParagraphProperties )X ()*_dg .CT_PPr {return _dgecg ._efcd };

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_cfcc ParagraphProperties )SizeMeasure ()string {if _fbad :=_cfcc ._efcd .RPr .Sz ;_fbad !=nil {_cgge :=_fbad .ValAttr ;if _cgge .ST_PositiveUniversalMeasure !=nil {return *_cgge .ST_PositiveUniversalMeasure ;};};return "";};

// FindNodeByStyleName return slice of node base on style name.
func (_gcca *Nodes )FindNodeByStyleName (styleName string )[]Node {_abeb :=[]Node {};for _ ,_ffgbg :=range _gcca ._bfcf {switch _adaca :=_ffgbg ._dbdg .(type ){case *Paragraph :if _adaca !=nil {if _edcb ,_ggfab :=_ffgbg ._gfc .Styles .SearchStyleByName (styleName );_ggfab {_febd :=_adaca .Style ();if _febd ==_edcb .StyleID (){_abeb =append (_abeb ,_ffgbg );};};};case *Table :if _adaca !=nil {if _bacf ,_dgeeaa :=_ffgbg ._gfc .Styles .SearchStyleByName (styleName );_dgeeaa {_feecc :=_adaca .Style ();if _feecc ==_bacf .StyleID (){_abeb =append (_abeb ,_ffgbg );};};};};_fbeg :=Nodes {_bfcf :_ffgbg .Children };_abeb =append (_abeb ,_fbeg .FindNodeByStyleName (styleName )...);};return _abeb ;};func (_eag *Document )InsertTableBefore (relativeTo Paragraph )Table {return _eag .insertTable (relativeTo ,true );};func _fede ()*_fab .Textpath {_dbdgf :=_fab .NewTextpath ();_dbdgf .OnAttr =_aea .ST_TrueFalseTrue ;_dbdgf .FitshapeAttr =_aea .ST_TrueFalseTrue ;return _dbdgf ;};

// SetLeft sets the cell left margin
func (_gcda CellMargins )SetLeft (d _bda .Distance ){_gcda ._beg .Left =_dg .NewCT_TblWidth ();_def (_gcda ._beg .Left ,d );};

// InsertRowBefore inserts a row before another row
func (_egae Table )InsertRowBefore (r Row )Row {for _cbbdg ,_fdfbf :=range _egae ._ebff .EG_ContentRowContent {if len (_fdfbf .Tr )> 0&&r .X ()==_fdfbf .Tr [0]{_gfdgf :=_dg .NewEG_ContentRowContent ();_egae ._ebff .EG_ContentRowContent =append (_egae ._ebff .EG_ContentRowContent ,nil );copy (_egae ._ebff .EG_ContentRowContent [_cbbdg +1:],_egae ._ebff .EG_ContentRowContent [_cbbdg :]);_egae ._ebff .EG_ContentRowContent [_cbbdg ]=_gfdgf ;_gbge :=_dg .NewCT_Row ();_gfdgf .Tr =append (_gfdgf .Tr ,_gbge );return Row {_egae ._bddf ,_gbge };};};return _egae .AddRow ();};

// Section return paragraph properties section value.
func (_ebage ParagraphProperties )Section ()(Section ,bool ){if _ebage ._efcd .SectPr !=nil {return Section {_ebage ._ggfag ,_ebage ._efcd .SectPr },true ;};return Section {},false ;};

// Clear removes all of the content from within a run.
func (_bceb Run )Clear (){_bceb ._ceca .EG_RunInnerContent =nil };

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_cdd HyperLink )SetTargetBookmark (bm Bookmark ){_cdd ._bcdfe .AnchorAttr =_a .String (bm .Name ());_cdd ._bcdfe .IdAttr =nil ;};

// GetSize return the size of anchor on the page.
func (_fbe AnchoredDrawing )GetSize ()(_adg ,_cab int64 ){return _fbe ._eg .Extent .CxAttr ,_fbe ._eg .Extent .CyAttr ;};func _abdgd (_eaga *Document )map[int64 ]map[int64 ]int64 {_afba :=_eaga .Paragraphs ();_aeegf :=make (map[int64 ]map[int64 ]int64 ,0);for _ ,_gae :=range _afba {_fccad :=_gbeg (_eaga ,_gae );if _fccad .NumberingLevel !=nil &&_fccad .AbstractNumId !=nil {_eecda :=*_fccad .AbstractNumId ;if _ ,_egcc :=_aeegf [_eecda ];_egcc {if _cbbdf :=_fccad .NumberingLevel .X ();_cbbdf !=nil {if _ ,_gacd :=_aeegf [_eecda ][_cbbdf .IlvlAttr ];_gacd {_aeegf [_eecda ][_cbbdf .IlvlAttr ]++;}else {_aeegf [_eecda ][_cbbdf .IlvlAttr ]=1;};};}else {if _ffegf :=_fccad .NumberingLevel .X ();_ffegf !=nil {_aeegf [_eecda ]=map[int64 ]int64 {_ffegf .IlvlAttr :1};};};};};return _aeegf ;};

// IsItalic returns true if the run has been set to italics.
func (_eccgd RunProperties )IsItalic ()bool {return _eccgd .ItalicValue ()==OnOffValueOn };

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_gdgbd Paragraph )InsertRunBefore (relativeTo Run )Run {return _gdgbd .insertRun (relativeTo ,true );};func _dbgg (_cadg []*_dg .CT_P ,_abaf *TableInfo ,_ddbc *DrawingInfo )[]TextItem {_dbec :=[]TextItem {};for _ ,_bcfbe :=range _cadg {_dbec =append (_dbec ,_dbcga (_bcfbe ,nil ,_abaf ,_ddbc ,_bcfbe .EG_PContent )...);};return _dbec ;};

// AddImageRef add ImageRef to header as relationship, returning ImageRef
// that can be used to be placed as header content.
func (_efbd Header )AddImageRef (r _fc .ImageRef )(_fc .ImageRef ,error ){var _bdad _fc .Relationships ;for _dcag ,_cdag :=range _efbd ._fgabf ._agd {if _cdag ==_efbd ._abge {_bdad =_efbd ._fgabf ._gbc [_dcag ];};};_adeb :=_bdad .AddRelationship (r .Target (),_a .ImageType );r .SetRelID (_adeb .X ().IdAttr );return r ,nil ;};

// FontTable returns document fontTable element.
func (_adac *Document )FontTable ()*_dg .Fonts {return _adac ._egf };

// SetPictureSize set watermark picture size with given width and height.
func (_aagdf *WatermarkPicture )SetPictureSize (width ,height int64 ){if _aagdf ._cbeef !=nil {_gdgc :=_aagdf .GetShapeStyle ();_gdgc .SetWidth (float64 (width )*_bda .Point );_gdgc .SetHeight (float64 (height )*_bda .Point );_aagdf .SetShapeStyle (_gdgc );};};func _egfbg ()*_fab .Formulas {_baafg :=_fab .NewFormulas ();_baafg .F =[]*_fab .CT_F {_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0023\u0030\u0020\u0030\u00201\u0030\u0038\u0030\u0030"),_e .CreateFormula ("p\u0072\u006f\u0064\u0020\u0023\u0030\u0020\u0032\u0020\u0031"),_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0031"),_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0032"),_e .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0033"),_e .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0033\u0020\u0030"),_e .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0032\u0031\u00360\u0030\u0020\u0040\u0031"),_e .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0030\u0020\u0040\u0032"),_e .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0034\u00202\u0031\u0036\u0030\u0030"),_e .CreateFormula ("\u006di\u0064\u0020\u0040\u0035\u0020\u00406"),_e .CreateFormula ("\u006di\u0064\u0020\u0040\u0038\u0020\u00405"),_e .CreateFormula ("\u006di\u0064\u0020\u0040\u0037\u0020\u00408"),_e .CreateFormula ("\u006di\u0064\u0020\u0040\u0036\u0020\u00407"),_e .CreateFormula ("s\u0075\u006d\u0020\u0040\u0036\u0020\u0030\u0020\u0040\u0035")};return _baafg ;};

// SetWidthPercent sets the table to a width percentage.
func (_ffffe TableProperties )SetWidthPercent (pct float64 ){_ffffe ._dbccb .TblW =_dg .NewCT_TblWidth ();_ffffe ._dbccb .TblW .TypeAttr =_dg .ST_TblWidthPct ;_ffffe ._dbccb .TblW .WAttr =&_dg .ST_MeasurementOrPercent {};_ffffe ._dbccb .TblW .WAttr .ST_DecimalNumberOrPercent =&_dg .ST_DecimalNumberOrPercent {};_ffffe ._dbccb .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_a .Int64 (int64 (pct *50));};

// IsBold returns true if the run has been set to bold.
func (_feege RunProperties )IsBold ()bool {return _feege .BoldValue ()==OnOffValueOn };

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_bgbdc Paragraph )SetNumberingLevel (listLevel int ){_bgbdc .ensurePPr ();if _bgbdc ._agbe .PPr .NumPr ==nil {_bgbdc ._agbe .PPr .NumPr =_dg .NewCT_NumPr ();};_aeag :=_dg .NewCT_DecimalNumber ();_aeag .ValAttr =int64 (listLevel );_bgbdc ._agbe .PPr .NumPr .Ilvl =_aeag ;};

// SetAlignment controls the paragraph alignment
func (_abbg ParagraphStyleProperties )SetAlignment (align _dg .ST_Jc ){if align ==_dg .ST_JcUnset {_abbg ._cccfb .Jc =nil ;}else {_abbg ._cccfb .Jc =_dg .NewCT_Jc ();_abbg ._cccfb .Jc .ValAttr =align ;};};

// SetAllowOverlapAttr sets the allowOverlap attribute of anchor.
func (_fgb AnchoredDrawing )SetAllowOverlapAttr (val bool ){_fgb ._eg .AllowOverlapAttr =val };

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_bacgc FormField )SetDefaultValue (v string ){if _bacgc ._fada .DdList !=nil {for _aaef ,_bfff :=range _bacgc .PossibleValues (){if _bfff ==v {_bacgc ._fada .DdList .Default =_dg .NewCT_DecimalNumber ();_bacgc ._fada .DdList .Default .ValAttr =int64 (_aaef );break ;};};};};

// FormFieldType is the type of the form field.
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// SetRight sets the cell right margin
func (_fbfc CellMargins )SetRight (d _bda .Distance ){_fbfc ._beg .Right =_dg .NewCT_TblWidth ();_def (_fbfc ._beg .Right ,d );};

// Clear content of node element.
func (_fafga *Node )Clear (){_fafga ._dbdg =nil };

// SetAlignment set alignment of paragraph.
func (_cgad Paragraph )SetAlignment (alignment _dg .ST_Jc ){_cgad .ensurePPr ();if _cgad ._agbe .PPr .Jc ==nil {_cgad ._agbe .PPr .Jc =_dg .NewCT_Jc ();};_cgad ._agbe .PPr .Jc .ValAttr =alignment ;};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_abbe *Document )Append (d1orig *Document )error {_cbgfd ,_bgcg :=d1orig .Copy ();if _bgcg !=nil {return _bgcg ;};_abbe .DocBase =_abbe .DocBase .Append (_cbgfd .DocBase );if _cbgfd ._fabd .ConformanceAttr !=_aea .ST_ConformanceClassStrict {_abbe ._fabd .ConformanceAttr =_cbgfd ._fabd .ConformanceAttr ;};_cdbe :=_abbe ._eega .X ().Relationship ;_bded :=_cbgfd ._eega .X ().Relationship ;_fafgc :=_cbgfd ._fabd .Body ;_afca :=map[string ]string {};_cccg :=map[int64 ]int64 {};_ddeb :=map[int64 ]int64 {};for _ ,_abf :=range _bded {_abgg :=true ;_fad :=_abf .IdAttr ;_cccc :=_abf .TargetAttr ;_ddeg :=_abf .TypeAttr ;_fgcf :=_ddeg ==_a .ImageType ;_ebf :=_ddeg ==_a .HyperLinkType ;var _bgae string ;for _ ,_cgdc :=range _cdbe {if _cgdc .TypeAttr ==_ddeg &&_cgdc .TargetAttr ==_cccc {_abgg =false ;_bgae =_cgdc .IdAttr ;break ;};};if _fgcf {_feec :="\u0077\u006f\u0072d\u002f"+_cccc ;for _ ,_agac :=range _cbgfd .DocBase .Images {if _agac .Target ()==_feec {_bcfee ,_egdcc :=_fc .ImageFromStorage (_agac .Path ());if _egdcc !=nil {return _egdcc ;};_dbab ,_egdcc :=_abbe .AddImage (_bcfee );if _egdcc !=nil {return _egdcc ;};_bgae =_dbab .RelID ();break ;};};}else if _abgg {if _ebf {_aeac :=_abbe ._eega .AddHyperlink (_cccc );_bgae =_fc .Relationship (_aeac ).ID ();}else {_gdbc :=_abbe ._eega .AddRelationship (_cccc ,_ddeg );_bgae =_gdbc .X ().IdAttr ;};};if _fad !=_bgae {_afca [_fad ]=_bgae ;};};if _fafgc .SectPr !=nil {for _ ,_bgcge :=range _fafgc .SectPr .EG_HdrFtrReferences {if _bgcge .HeaderReference !=nil {if _acaf ,_dcad :=_afca [_bgcge .HeaderReference .IdAttr ];_dcad {_bgcge .HeaderReference .IdAttr =_acaf ;_abbe ._gbc =append (_abbe ._gbc ,_fc .NewRelationships ());};}else if _bgcge .FooterReference !=nil {if _ecda ,_cbbd :=_afca [_bgcge .FooterReference .IdAttr ];_cbbd {_bgcge .FooterReference .IdAttr =_ecda ;_abbe ._bcg =append (_abbe ._bcg ,_fc .NewRelationships ());};};};};_bgdef ,_gccb :=_abbe ._abbb ,_cbgfd ._abbb ;if _bgdef !=nil {if _gccb !=nil {if _bgdef .Endnote !=nil {if _gccb .Endnote !=nil {_eeaef :=int64 (len (_bgdef .Endnote )+1);for _ ,_aceb :=range _gccb .Endnote {_cgef :=_aceb .IdAttr ;if _cgef > 0{_aceb .IdAttr =_eeaef ;_bgdef .Endnote =append (_bgdef .Endnote ,_aceb );_ddeb [_cgef ]=_eeaef ;_eeaef ++;};};};}else {_bgdef .Endnote =_gccb .Endnote ;};};}else if _gccb !=nil {_bgdef =_gccb ;};_abbe ._abbb =_bgdef ;_dbbe ,_fdbb :=_abbe ._dea ,_cbgfd ._dea ;if _dbbe !=nil {if _fdbb !=nil {if _dbbe .Footnote !=nil {if _fdbb .Footnote !=nil {_agdc :=int64 (len (_dbbe .Footnote )+1);for _ ,_bdeg :=range _fdbb .Footnote {_egaf :=_bdeg .IdAttr ;if _egaf > 0{_bdeg .IdAttr =_agdc ;_dbbe .Footnote =append (_dbbe .Footnote ,_bdeg );_cccg [_egaf ]=_agdc ;_agdc ++;};};};}else {_dbbe .Footnote =_fdbb .Footnote ;};};}else if _fdbb !=nil {_dbbe =_fdbb ;};_abbe ._dea =_dbbe ;for _ ,_fcfd :=range _fafgc .EG_BlockLevelElts {for _ ,_gcegf :=range _fcfd .EG_ContentBlockContent {for _ ,_beage :=range _gcegf .P {_fcad (_beage ,_afca );_ggd (_beage ,_afca );_bbabf (_beage ,_cccg ,_ddeb );};for _ ,_cffg :=range _gcegf .Tbl {_aabb (_cffg ,_afca );_effe (_cffg ,_afca );_bgec (_cffg ,_cccg ,_ddeb );};};};_abbe ._fabd .Body .EG_BlockLevelElts =append (_abbe ._fabd .Body .EG_BlockLevelElts ,_cbgfd ._fabd .Body .EG_BlockLevelElts ...);if _abbe ._fabd .Body .SectPr ==nil {_abbe ._fabd .Body .SectPr =_cbgfd ._fabd .Body .SectPr ;}else {var _dbbb ,_fdea bool ;for _ ,_ecee :=range _abbe ._fabd .Body .SectPr .EG_HdrFtrReferences {if _ecee .HeaderReference !=nil {_dbbb =true ;}else if _ecee .FooterReference !=nil {_fdea =true ;};};if !_dbbb {for _ ,_eeba :=range _cbgfd ._fabd .Body .SectPr .EG_HdrFtrReferences {if _eeba .HeaderReference !=nil {_abbe ._fabd .Body .SectPr .EG_HdrFtrReferences =append (_abbe ._fabd .Body .SectPr .EG_HdrFtrReferences ,_eeba );break ;};};};if !_fdea {for _ ,_fdg :=range _cbgfd ._fabd .Body .SectPr .EG_HdrFtrReferences {if _fdg .FooterReference !=nil {_abbe ._fabd .Body .SectPr .EG_HdrFtrReferences =append (_abbe ._fabd .Body .SectPr .EG_HdrFtrReferences ,_fdg );break ;};};};if _abbe ._fabd .Body .SectPr .Cols ==nil &&_cbgfd ._fabd .Body .SectPr .Cols !=nil {_abbe ._fabd .Body .SectPr .Cols =_cbgfd ._fabd .Body .SectPr .Cols ;};};_ceeb :=_abbe .Numbering ._ffad ;_efd :=_cbgfd .Numbering ._ffad ;if _ceeb !=nil {if _efd !=nil {_ceeb .NumPicBullet =append (_ceeb .NumPicBullet ,_efd .NumPicBullet ...);_ceeb .AbstractNum =append (_ceeb .AbstractNum ,_efd .AbstractNum ...);_ceeb .Num =append (_ceeb .Num ,_efd .Num ...);};}else if _efd !=nil {_ceeb =_efd ;};_abbe .Numbering ._ffad =_ceeb ;if _abbe .Styles ._cfca ==nil &&_cbgfd .Styles ._cfca !=nil {_abbe .Styles ._cfca =_cbgfd .Styles ._cfca ;};_abbe ._cbef =append (_abbe ._cbef ,_cbgfd ._cbef ...);_abbe ._agg =append (_abbe ._agg ,_cbgfd ._agg ...);if len (_abbe ._agd )==0{_abbe ._agd =_cbgfd ._agd ;};if len (_abbe ._dcfe )==0{_abbe ._dcfe =_cbgfd ._dcfe ;};_cgefb :=_abbe ._fdf ;_ccbaf :=_cbgfd ._fdf ;if _cgefb !=nil {if _ccbaf !=nil {if _cgefb .Divs !=nil {if _ccbaf .Divs !=nil {_cgefb .Divs .Div =append (_cgefb .Divs .Div ,_ccbaf .Divs .Div ...);};}else {_cgefb .Divs =_ccbaf .Divs ;};};_cgefb .Frameset =nil ;}else if _ccbaf !=nil {_cgefb =_ccbaf ;_cgefb .Frameset =nil ;};_abbe ._fdf =_cgefb ;_bfde :=_abbe ._egf ;_abae :=_cbgfd ._egf ;if _bfde !=nil {if _abae !=nil {if _bfde .Font !=nil {if _abae .Font !=nil {for _ ,_fbbg :=range _abae .Font {_bbcb :=true ;for _ ,_bcfeb :=range _bfde .Font {if _bcfeb .NameAttr ==_fbbg .NameAttr {_bbcb =false ;break ;};};if _bbcb {_bfde .Font =append (_bfde .Font ,_fbbg );};};};}else {_bfde .Font =_abae .Font ;};};}else if _abae !=nil {_bfde =_abae ;};_abbe ._egf =_bfde ;return nil ;};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_feeac TableLook )SetFirstColumn (on bool ){if !on {_feeac ._ccbcf .FirstColumnAttr =&_aea .ST_OnOff {};_feeac ._ccbcf .FirstColumnAttr .ST_OnOff1 =_aea .ST_OnOff1Off ;}else {_feeac ._ccbcf .FirstColumnAttr =&_aea .ST_OnOff {};_feeac ._ccbcf .FirstColumnAttr .ST_OnOff1 =_aea .ST_OnOff1On ;};};