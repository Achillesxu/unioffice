//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

/*

Package document provides creation, reading, and writing of ECMA 376 Open
Office XML documents.

Example:

	doc := document.New()
	para := doc.AddParagraph()
	run := para.AddRun()
	run.SetText("foo")
	doc.SaveToFile("foo.docx")
*/
package document ;import (_gb "archive/zip";_be "bytes";_de "errors";_cg "fmt";_g "github.com/unidoc/unioffice";_ef "github.com/unidoc/unioffice/color";_gg "github.com/unidoc/unioffice/common";_ba "github.com/unidoc/unioffice/common/tempstorage";_gc "github.com/unidoc/unioffice/internal/license";_fd "github.com/unidoc/unioffice/measurement";_bdc "github.com/unidoc/unioffice/schema/schemas.microsoft.com/office/activeX";_fg "github.com/unidoc/unioffice/schema/soo/dml";_dcc "github.com/unidoc/unioffice/schema/soo/dml/chart";_bd "github.com/unidoc/unioffice/schema/soo/dml/picture";_gee "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_a "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_eg "github.com/unidoc/unioffice/schema/soo/wml";_ggg "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_gd "github.com/unidoc/unioffice/vmldrawing";_fb "github.com/unidoc/unioffice/zippkg";_df "image";_bg "image/jpeg";_cb "io";_c "log";_dc "math/rand";_ge "os";_b "path/filepath";_e "strings";_f "unicode";);

// AddHyperlink adds a hyperlink to a document. Adding the hyperlink to a document
// and setting it on a cell is more efficient than setting hyperlinks directly
// on a cell.
func (_fee Document )AddHyperlink (url string )_gg .Hyperlink {return _fee ._ccd .AddHyperlink (url )};

// Borders allows manipulation of the table borders.
func (_adca TableProperties )Borders ()TableBorders {if _adca ._gcdd .TblBorders ==nil {_adca ._gcdd .TblBorders =_eg .NewCT_TblBorders ();};return TableBorders {_adca ._gcdd .TblBorders };};

// InitializeDefault constructs a default numbering.
func (_ggea Numbering )InitializeDefault (){_gdee :=_eg .NewCT_AbstractNum ();_gdee .MultiLevelType =_eg .NewCT_MultiLevelType ();_gdee .MultiLevelType .ValAttr =_eg .ST_MultiLevelTypeHybridMultilevel ;_ggea ._dgbab .AbstractNum =append (_ggea ._dgbab .AbstractNum ,_gdee );_gdee .AbstractNumIdAttr =1;const _edcd =720;const _abde =720;const _fgdg =360;for _ffgef :=0;_ffgef < 9;_ffgef ++{_ebbfc :=_eg .NewCT_Lvl ();_ebbfc .IlvlAttr =int64 (_ffgef );_ebbfc .Start =_eg .NewCT_DecimalNumber ();_ebbfc .Start .ValAttr =1;_ebbfc .NumFmt =_eg .NewCT_NumFmt ();_ebbfc .NumFmt .ValAttr =_eg .ST_NumberFormatBullet ;_ebbfc .Suff =_eg .NewCT_LevelSuffix ();_ebbfc .Suff .ValAttr =_eg .ST_LevelSuffixNothing ;_ebbfc .LvlText =_eg .NewCT_LevelText ();_ebbfc .LvlText .ValAttr =_g .String ("\uf0b7");_ebbfc .LvlJc =_eg .NewCT_Jc ();_ebbfc .LvlJc .ValAttr =_eg .ST_JcLeft ;_ebbfc .RPr =_eg .NewCT_RPr ();_ebbfc .RPr .RFonts =_eg .NewCT_Fonts ();_ebbfc .RPr .RFonts .AsciiAttr =_g .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_ebbfc .RPr .RFonts .HAnsiAttr =_g .String ("\u0053\u0079\u006d\u0062\u006f\u006c");_ebbfc .RPr .RFonts .HintAttr =_eg .ST_HintDefault ;_ebbfc .PPr =_eg .NewCT_PPrGeneral ();_fgefa :=int64 (_ffgef *_abde +_edcd );_ebbfc .PPr .Ind =_eg .NewCT_Ind ();_ebbfc .PPr .Ind .LeftAttr =&_eg .ST_SignedTwipsMeasure {};_ebbfc .PPr .Ind .LeftAttr .Int64 =_g .Int64 (_fgefa );_ebbfc .PPr .Ind .HangingAttr =&_gee .ST_TwipsMeasure {};_ebbfc .PPr .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (_fgdg ));_gdee .Lvl =append (_gdee .Lvl ,_ebbfc );};_dffac :=_eg .NewCT_Num ();_dffac .NumIdAttr =1;_dffac .AbstractNumId =_eg .NewCT_DecimalNumber ();_dffac .AbstractNumId .ValAttr =1;_ggea ._dgbab .Num =append (_ggea ._dgbab .Num ,_dffac );};

// SetLeft sets the left border to a specified type, color and thickness.
func (_ggbcg TableBorders )SetLeft (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_ggbcg ._cddae .Left =_eg .NewCT_Border ();_dgdb (_ggbcg ._cddae .Left ,t ,c ,thickness );};func _bbgc ()*_ggg .Handles {_ecaa :=_ggg .NewHandles ();_caddd :=_ggg .NewCT_H ();_gaaa :="\u0023\u0030\u002c\u0062\u006f\u0074\u0074\u006f\u006dR\u0069\u0067\u0068\u0074";_caddd .PositionAttr =&_gaaa ;_agfdg :="\u0036\u0036\u0032\u0039\u002c\u0031\u0034\u0039\u0037\u0031";_caddd .XrangeAttr =&_agfdg ;_ecaa .H =[]*_ggg .CT_H {_caddd };return _ecaa ;};

// SetLeft sets the left border to a specified type, color and thickness.
func (_ebfd CellBorders )SetLeft (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_ebfd ._cgaa .Left =_eg .NewCT_Border ();_dgdb (_ebfd ._cgaa .Left ,t ,c ,thickness );};

// SetAlignment positions an anchored image via alignment.  Offset is
// incompatible with SetOffset, whichever is called last is applied.
func (_ec AnchoredDrawing )SetAlignment (h _eg .WdST_AlignH ,v _eg .WdST_AlignV ){_ec .SetHAlignment (h );_ec .SetVAlignment (v );};func (_affcb *WatermarkPicture )getShapeImagedata ()*_g .XSDAny {return _affcb .getInnerElement ("\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");};func _cbbg (_bfg *_eg .CT_TblWidth ,_aeg float64 ){_bfg .TypeAttr =_eg .ST_TblWidthPct ;_bfg .WAttr =&_eg .ST_MeasurementOrPercent {};_bfg .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_bfg .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (_aeg *50));};

// SetSpacing sets the spacing that comes before and after the paragraph.
func (_ecfdb ParagraphStyleProperties )SetSpacing (before ,after _fd .Distance ){if _ecfdb ._efcg .Spacing ==nil {_ecfdb ._efcg .Spacing =_eg .NewCT_Spacing ();};if before ==_fd .Zero {_ecfdb ._efcg .Spacing .BeforeAttr =nil ;}else {_ecfdb ._efcg .Spacing .BeforeAttr =&_gee .ST_TwipsMeasure {};_ecfdb ._efcg .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (before /_fd .Twips ));};if after ==_fd .Zero {_ecfdb ._efcg .Spacing .AfterAttr =nil ;}else {_ecfdb ._efcg .Spacing .AfterAttr =&_gee .ST_TwipsMeasure {};_ecfdb ._efcg .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (after /_fd .Twips ));};};

// SetLineSpacing controls the line spacing of the paragraph.
func (_cgcg ParagraphStyleProperties )SetLineSpacing (m _fd .Distance ,rule _eg .ST_LineSpacingRule ){if _cgcg ._efcg .Spacing ==nil {_cgcg ._efcg .Spacing =_eg .NewCT_Spacing ();};if rule ==_eg .ST_LineSpacingRuleUnset {_cgcg ._efcg .Spacing .LineRuleAttr =_eg .ST_LineSpacingRuleUnset ;_cgcg ._efcg .Spacing .LineAttr =nil ;}else {_cgcg ._efcg .Spacing .LineRuleAttr =rule ;_cgcg ._efcg .Spacing .LineAttr =&_eg .ST_SignedTwipsMeasure {};_cgcg ._efcg .Spacing .LineAttr .Int64 =_g .Int64 (int64 (m /_fd .Twips ));};};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_dcff *Document )AddImage (i _gg .Image )(_gg .ImageRef ,error ){_deaa :=_gg .MakeImageRef (i ,&_dcff .DocBase ,_dcff ._ccd );if i .Data ==nil &&i .Path ==""{return _deaa ,_de .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _deaa ,_de .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _deaa ,_de .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_bfa :=_ba .Add (i .Path );if _bfa !=nil {return _deaa ,_bfa ;};};_dcff .Images =append (_dcff .Images ,_deaa );_ecc :=_cg .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_dcff .Images ),i .Format );_ffb :=_dcff ._ccd .AddRelationship (_ecc ,_g .ImageType );_dcff .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_dcff .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_dcff .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_dcff .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_dcff .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );_deaa .SetRelID (_ffb .X ().IdAttr );_deaa .SetTarget (_ecc );return _deaa ,nil ;};

// Endnote returns the endnote based on the ID; this can be used nicely with
// the run.IsEndnote() functionality.
func (_ecbc *Document )Endnote (id int64 )Endnote {for _ ,_beae :=range _ecbc .Endnotes (){if _beae .id ()==id {return _beae ;};};return Endnote {};};

// read reads a document from an io.Reader.
func Read (r _cb .ReaderAt ,size int64 )(*Document ,error ){return _bffb (r ,size ,"")};

// SetCSTheme sets the font complex script theme.
func (_fdbgd Fonts )SetCSTheme (t _eg .ST_Theme ){_fdbgd ._fabcg .CsthemeAttr =t };

// New constructs an empty document that content can be added to.
func New ()*Document {_bcba :=&Document {_bbe :_eg .NewDocument ()};_bcba .ContentTypes =_gg .NewContentTypes ();_bcba ._bbe .Body =_eg .NewCT_Body ();_bcba ._bbe .ConformanceAttr =_gee .ST_ConformanceClassTransitional ;_bcba ._ccd =_gg .NewRelationships ();_bcba .AppProperties =_gg .NewAppProperties ();_bcba .CoreProperties =_gg .NewCoreProperties ();_bcba .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0064\u006f\u0063u\u006d\u0065n\u0074\u002e\u0078\u006d\u006c","\u0061p\u0070\u006c\u0069c\u0061\u0074\u0069o\u006e/v\u006e\u0064\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072dp\u0072o\u0063\u0065\u0073\u0073\u0069\u006eg\u006d\u006c\u002e\u0064\u006fc\u0075\u006d\u0065\u006e\u0074\u002e\u006d\u0061\u0069\u006e\u002bx\u006d\u006c");_bcba .Settings =NewSettings ();_bcba ._ccd .AddRelationship ("\u0073\u0065\u0074t\u0069\u006e\u0067\u0073\u002e\u0078\u006d\u006c",_g .SettingsType );_bcba .ContentTypes .AddOverride ("\u002fw\u006fr\u0064\u002f\u0073\u0065\u0074t\u0069\u006eg\u0073\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061\u0074\u0069o\u006e\u002fv\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006dl\u0066\u006f\u0072\u006da\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c.\u0073\u0065\u0074\u0074\u0069\u006e\u0067\u0073\u002b\u0078\u006d\u006c");_bcba .Rels =_gg .NewRelationships ();_bcba .Rels .AddRelationship (_g .RelativeFilename (_g .DocTypeDocument ,"",_g .CorePropertiesType ,0),_g .CorePropertiesType );_bcba .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c",_g .ExtendedPropertiesType );_bcba .Rels .AddRelationship ("\u0077\u006f\u0072\u0064\u002f\u0064\u006f\u0063\u0075\u006d\u0065\u006et\u002e\u0078\u006d\u006c",_g .OfficeDocumentType );_bcba .Numbering =NewNumbering ();_bcba .Numbering .InitializeDefault ();_bcba .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072d/\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069c\u0061\u0074\u0069\u006f\u006e\u002f\u0076n\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063e\u0073\u0073\u0069\u006e\u0067\u006d\u006c\u002e\u006e\u0075\u006d\u0062e\u0072\u0069\u006e\u0067\u002b\u0078m\u006c");_bcba ._ccd .AddRelationship ("\u006e\u0075\u006d\u0062\u0065\u0072\u0069\u006e\u0067\u002e\u0078\u006d\u006c",_g .NumberingType );_bcba .Styles =NewStyles ();_bcba .Styles .InitializeDefault ();_bcba .ContentTypes .AddOverride ("\u002f\u0077o\u0072\u0064\u002fs\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0073\u0074\u0079\u006ce\u0073\u002b\u0078\u006d\u006c");_bcba ._ccd .AddRelationship ("\u0073\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c",_g .StylesType );_bcba ._bbe .Body =_eg .NewCT_Body ();return _bcba ;};

// Footnote is an individual footnote reference within the document.
type Footnote struct{_aaga *Document ;_fafc *_eg .CT_FtnEdn ;};func _adggb (_cgd *_eg .CT_P ,_dbggf map[string ]string ){for _ ,_gefg :=range _cgd .EG_PContent {if _gefg .Hyperlink !=nil &&_gefg .Hyperlink .IdAttr !=nil {if _effb ,_ffgc :=_dbggf [*_gefg .Hyperlink .IdAttr ];_ffgc {*_gefg .Hyperlink .IdAttr =_effb ;};};};};

// SetTargetBookmark sets the bookmark target of the hyperlink.
func (_agagf HyperLink )SetTargetBookmark (bm Bookmark ){_agagf ._eccf .AnchorAttr =_g .String (bm .Name ());_agagf ._eccf .IdAttr =nil ;};

// AddParagraph adds a paragraph to the footer.
func (_gddg Footer )AddParagraph ()Paragraph {_bdeb :=_eg .NewEG_ContentBlockContent ();_gddg ._dbac .EG_ContentBlockContent =append (_gddg ._dbac .EG_ContentBlockContent ,_bdeb );_cbde :=_eg .NewCT_P ();_bdeb .P =append (_bdeb .P ,_cbde );return Paragraph {_gddg ._ddbab ,_cbde };};

// Margins allows controlling individual cell margins.
func (_dab CellProperties )Margins ()CellMargins {if _dab ._cgb .TcMar ==nil {_dab ._cgb .TcMar =_eg .NewCT_TcMar ();};return CellMargins {_dab ._cgb .TcMar };};

// AddCheckBox adds checkbox form field to the paragraph and returns it.
func (_ceae Paragraph )AddCheckBox (name string )FormField {_caecc :=_ceae .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0043\u0048\u0045\u0043\u004b\u0042\u004f\u0058");_caecc ._aefe .CheckBox =_eg .NewCT_FFCheckBox ();return _caecc ;};

// SetKerning sets the run's font kerning.
func (_edbc RunProperties )SetKerning (size _fd .Distance ){_edbc ._efdg .Kern =_eg .NewCT_HpsMeasure ();_edbc ._efdg .Kern .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (size /_fd .HalfPoint ));};func _faadb ()*_ggg .Textpath {_caae :=_ggg .NewTextpath ();_caae .OnAttr =_gee .ST_TrueFalseTrue ;_caae .FitshapeAttr =_gee .ST_TrueFalseTrue ;return _caae ;};

// SetUnhideWhenUsed controls if a semi hidden style becomes visible when used.
func (_fggd Style )SetUnhideWhenUsed (b bool ){if b {_fggd ._bgdg .UnhideWhenUsed =_eg .NewCT_OnOff ();}else {_fggd ._bgdg .UnhideWhenUsed =nil ;};};

// SetLeftIndent controls left indent of paragraph.
func (_efecb Paragraph )SetLeftIndent (m _fd .Distance ){_efecb .ensurePPr ();_cccg :=_efecb ._ffae .PPr ;if _cccg .Ind ==nil {_cccg .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_cccg .Ind .LeftAttr =nil ;}else {_cccg .Ind .LeftAttr =&_eg .ST_SignedTwipsMeasure {};_cccg .Ind .LeftAttr .Int64 =_g .Int64 (int64 (m /_fd .Twips ));};};

// TableLook is the conditional formatting associated with a table style that
// has been assigned to a table.
type TableLook struct{_dbgfg *_eg .CT_TblLook };

// RemoveRun removes a child run from a paragraph.
func (_dbcc Paragraph )RemoveRun (r Run ){for _ ,_gaec :=range _dbcc ._ffae .EG_PContent {for _cbgg ,_bccab :=range _gaec .EG_ContentRunContent {if _bccab .R ==r ._fced {copy (_gaec .EG_ContentRunContent [_cbgg :],_gaec .EG_ContentRunContent [_cbgg +1:]);_gaec .EG_ContentRunContent =_gaec .EG_ContentRunContent [0:len (_gaec .EG_ContentRunContent )-1];};if _bccab .Sdt !=nil &&_bccab .Sdt .SdtContent !=nil {for _bbbbf ,_daag :=range _bccab .Sdt .SdtContent .EG_ContentRunContent {if _daag .R ==r ._fced {copy (_bccab .Sdt .SdtContent .EG_ContentRunContent [_bbbbf :],_bccab .Sdt .SdtContent .EG_ContentRunContent [_bbbbf +1:]);_bccab .Sdt .SdtContent .EG_ContentRunContent =_bccab .Sdt .SdtContent .EG_ContentRunContent [0:len (_bccab .Sdt .SdtContent .EG_ContentRunContent )-1];};};};};};};

// SetTargetByRef sets the URL target of the hyperlink and is more efficient if a link
// destination will be used many times.
func (_fece HyperLink )SetTargetByRef (link _gg .Hyperlink ){_fece ._eccf .IdAttr =_g .String (_gg .Relationship (link ).ID ());_fece ._eccf .AnchorAttr =nil ;};

// SetKeepWithNext controls if this paragraph should be kept with the next.
func (_ggacg ParagraphProperties )SetKeepWithNext (b bool ){if !b {_ggacg ._cagc .KeepNext =nil ;}else {_ggacg ._cagc .KeepNext =_eg .NewCT_OnOff ();};};

// RightToLeft returns true if run text goes from right to left.
func (_agbda RunProperties )RightToLeft ()bool {return _dfcc (_agbda ._efdg .Rtl )};

// AddDropdownList adds dropdown list form field to the paragraph and returns it.
func (_caacd Paragraph )AddDropdownList (name string )FormField {_agdg :=_caacd .addFldCharsForField (name ,"\u0046\u004f\u0052M\u0044\u0052\u004f\u0050\u0044\u004f\u0057\u004e");_agdg ._aefe .DdList =_eg .NewCT_FFDDList ();return _agdg ;};

// SetASCIITheme sets the font ASCII Theme.
func (_adaa Fonts )SetASCIITheme (t _eg .ST_Theme ){_adaa ._fabcg .AsciiThemeAttr =t };

// SetStyle sets the style of a paragraph and is identical to setting it on the
// paragraph's Properties()
func (_bbgf Paragraph )SetStyle (s string ){_bbgf .ensurePPr ();if s ==""{_bbgf ._ffae .PPr .PStyle =nil ;}else {_bbgf ._ffae .PPr .PStyle =_eg .NewCT_String ();_bbgf ._ffae .PPr .PStyle .ValAttr =s ;};};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_beab *Document )GetImageByRelID (relID string )(_gg .ImageRef ,bool ){for _ ,_cggb :=range _beab .Images {if _cggb .RelID ()==relID {return _cggb ,true ;};};return _gg .ImageRef {},false ;};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_addd ParagraphProperties )ComplexSizeMeasure ()string {if _gcgcf :=_addd ._cagc .RPr .SzCs ;_gcgcf !=nil {_gege :=_gcgcf .ValAttr ;if _gege .ST_PositiveUniversalMeasure !=nil {return *_gege .ST_PositiveUniversalMeasure ;};};return "";};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_acdg ParagraphStyleProperties )SetKeepOnOnePage (b bool ){if !b {_acdg ._efcg .KeepLines =nil ;}else {_acdg ._efcg .KeepLines =_eg .NewCT_OnOff ();};};

// AddPageBreak adds a page break to a run.
func (_egbeg Run )AddPageBreak (){_bcbf :=_egbeg .newIC ();_bcbf .Br =_eg .NewCT_Br ();_bcbf .Br .TypeAttr =_eg .ST_BrTypePage ;};

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_aebd ParagraphSpacing )SetLineSpacing (d _fd .Distance ,rule _eg .ST_LineSpacingRule ){if rule ==_eg .ST_LineSpacingRuleUnset {_aebd ._baaecd .LineRuleAttr =_eg .ST_LineSpacingRuleUnset ;_aebd ._baaecd .LineAttr =nil ;}else {_aebd ._baaecd .LineRuleAttr =rule ;_aebd ._baaecd .LineAttr =&_eg .ST_SignedTwipsMeasure {};_aebd ._baaecd .LineAttr .Int64 =_g .Int64 (int64 (d /_fd .Twips ));};};

// BodySection returns the default body section used for all preceding
// paragraphs until the previous Section. If there is no previous sections, the
// body section applies to the entire document.
func (_bggc *Document )BodySection ()Section {if _bggc ._bbe .Body .SectPr ==nil {_bggc ._bbe .Body .SectPr =_eg .NewCT_SectPr ();};return Section {_bggc ,_bggc ._bbe .Body .SectPr };};

// X returns the inner wrapped XML type.
func (_acda Header )X ()*_eg .Hdr {return _acda ._faac };

// SetHeader sets a section header.
func (_dgbea Section )SetHeader (h Header ,t _eg .ST_HdrFtr ){_ebff :=_eg .NewEG_HdrFtrReferences ();_dgbea ._ccgc .EG_HdrFtrReferences =append (_dgbea ._ccgc .EG_HdrFtrReferences ,_ebff );_ebff .HeaderReference =_eg .NewCT_HdrFtrRef ();_ebff .HeaderReference .TypeAttr =t ;_cdbce :=_dgbea ._gbfe ._ccd .FindRIDForN (h .Index (),_g .HeaderType );if _cdbce ==""{_c .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0068\u0065\u0061\u0064\u0065r \u0049\u0044");};_ebff .HeaderReference .IdAttr =_cdbce ;};

// MultiLevelType returns the multilevel type, or ST_MultiLevelTypeUnset if not set.
func (_bedcc NumberingDefinition )MultiLevelType ()_eg .ST_MultiLevelType {if _bedcc ._cafg .MultiLevelType !=nil {return _bedcc ._cafg .MultiLevelType .ValAttr ;}else {return _eg .ST_MultiLevelTypeUnset ;};};

// Fonts allows manipulating a style or run's fonts.
type Fonts struct{_fabcg *_eg .CT_Fonts };

// Shadow returns true if paragraph shadow is on.
func (_adga ParagraphProperties )Shadow ()bool {return _dfcc (_adga ._cagc .RPr .Shadow )};

// AddFooter creates a Footer associated with the document, but doesn't add it
// to the document for display.
func (_beea *Document )AddFooter ()Footer {_gcb :=_eg .NewFtr ();_beea ._bfe =append (_beea ._bfe ,_gcb );_cfa :=_cg .Sprintf ("\u0066\u006f\u006ft\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_beea ._bfe ));_beea ._ccd .AddRelationship (_cfa ,_g .FooterType );_beea .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_cfa ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0066\u006f\u006f\u0074e\u0072\u002b\u0078\u006d\u006c");_beea ._eab =append (_beea ._eab ,_gg .NewRelationships ());return Footer {_beea ,_gcb };};

// AddParagraph adds a paragraph to the endnote.
func (_ccdd Endnote )AddParagraph ()Paragraph {_fcfb :=_eg .NewEG_ContentBlockContent ();_eegd :=len (_ccdd ._cfcf .EG_BlockLevelElts [0].EG_ContentBlockContent );_ccdd ._cfcf .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_ccdd ._cfcf .EG_BlockLevelElts [0].EG_ContentBlockContent ,_fcfb );_dddde :=_eg .NewCT_P ();var _cba *_eg .CT_String ;if _eegd !=0{_gggcg :=len (_ccdd ._cfcf .EG_BlockLevelElts [0].EG_ContentBlockContent [_eegd -1].P );_cba =_ccdd ._cfcf .EG_BlockLevelElts [0].EG_ContentBlockContent [_eegd -1].P [_gggcg -1].PPr .PStyle ;}else {_cba =_eg .NewCT_String ();_cba .ValAttr ="\u0045n\u0064\u006e\u006f\u0074\u0065";};_fcfb .P =append (_fcfb .P ,_dddde );_dddg :=Paragraph {_ccdd ._cdde ,_dddde };_dddg ._ffae .PPr =_eg .NewCT_PPr ();_dddg ._ffae .PPr .PStyle =_cba ;_dddg ._ffae .PPr .RPr =_eg .NewCT_ParaRPr ();return _dddg ;};

// SetText sets the text to be used in bullet mode.
func (_eggf NumberingLevel )SetText (t string ){if t ==""{_eggf ._dbba .LvlText =nil ;}else {_eggf ._dbba .LvlText =_eg .NewCT_LevelText ();_eggf ._dbba .LvlText .ValAttr =_g .String (t );};};

// SetBold sets the run to bold.
func (_fbba RunProperties )SetBold (b bool ){if !b {_fbba ._efdg .B =nil ;_fbba ._efdg .BCs =nil ;}else {_fbba ._efdg .B =_eg .NewCT_OnOff ();_fbba ._efdg .BCs =_eg .NewCT_OnOff ();};};

// SetOutlineLevel sets the outline level of this style.
func (_bbdc ParagraphStyleProperties )SetOutlineLevel (lvl int ){_bbdc ._efcg .OutlineLvl =_eg .NewCT_DecimalNumber ();_bbdc ._efcg .OutlineLvl .ValAttr =int64 (lvl );};

// GetSize return the size of anchor on the page.
func (_af AnchoredDrawing )GetSize ()(_ee ,_ad int64 ){return _af ._ed .Extent .CxAttr ,_af ._ed .Extent .CyAttr ;};

// SetVerticalMerge controls the vertical merging of cells.
func (_ecb CellProperties )SetVerticalMerge (mergeVal _eg .ST_Merge ){if mergeVal ==_eg .ST_MergeUnset {_ecb ._cgb .VMerge =nil ;}else {_ecb ._cgb .VMerge =_eg .NewCT_VMerge ();_ecb ._cgb .VMerge .ValAttr =mergeVal ;};};

// SetEnabled marks a FormField as enabled or disabled.
func (_gbba FormField )SetEnabled (enabled bool ){_bbbe :=_eg .NewCT_OnOff ();_bbbe .ValAttr =&_gee .ST_OnOff {Bool :&enabled };_gbba ._aefe .Enabled =[]*_eg .CT_OnOff {_bbbe };};

// IsEndnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_fbaa Run )IsEndnote ()(bool ,int64 ){if _fbaa ._fced .EG_RunInnerContent !=nil {if _fbaa ._fced .EG_RunInnerContent [0].EndnoteReference !=nil {return true ,_fbaa ._fced .EG_RunInnerContent [0].EndnoteReference .IdAttr ;};};return false ,0;};func (_fbda *Document )save (_egbf _cb .Writer ,_dca string )error {const _eca ="\u0064o\u0063u\u006d\u0065\u006e\u0074\u003a\u0064\u002e\u0053\u0061\u0076\u0065";if _ebda :=_fbda ._bbe .Validate ();_ebda !=nil {_g .Log ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_ebda );};_cad :=_g .DocTypeDocument ;if !_gc .GetLicenseKey ().IsLicensed ()&&!_fec {_cg .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_cg .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _de .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_fbda ._fbg )==0{if len (_dca )> 0{_fbda ._fbg =_dca ;}else {_daba ,_dee :=_gc .GenRefId ("\u0064\u0077");if _dee !=nil {_g .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_dee );return _dee ;};_fbda ._fbg =_daba ;};};if _fge :=_gc .Track (_fbda ._fbg ,_eca );_fge !=nil {_cg .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_fge );return _fge ;};_dbdb :=_gb .NewWriter (_egbf );defer _dbdb .Close ();if _deee :=_fb .MarshalXML (_dbdb ,_g .BaseRelsFilename ,_fbda .Rels .X ());_deee !=nil {return _deee ;};if _cfc :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .ExtendedPropertiesType ,_fbda .AppProperties .X ());_cfc !=nil {return _cfc ;};if _bada :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .CorePropertiesType ,_fbda .CoreProperties .X ());_bada !=nil {return _bada ;};if _fbda .CustomProperties .X ()!=nil {if _feg :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .CustomPropertiesType ,_fbda .CustomProperties .X ());_feg !=nil {return _feg ;};};if _fbda .Thumbnail !=nil {_gea ,_ace :=_dbdb .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _ace !=nil {return _ace ;};if _aea :=_bg .Encode (_gea ,_fbda .Thumbnail ,nil );_aea !=nil {return _aea ;};};if _dbf :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .SettingsType ,_fbda .Settings .X ());_dbf !=nil {return _dbf ;};_bac :=_g .AbsoluteFilename (_cad ,_g .OfficeDocumentType ,0);if _fcc :=_fb .MarshalXML (_dbdb ,_bac ,_fbda ._bbe );_fcc !=nil {return _fcc ;};if _ada :=_fb .MarshalXML (_dbdb ,_fb .RelationsPathFor (_bac ),_fbda ._ccd .X ());_ada !=nil {return _ada ;};if _fbda .Numbering .X ()!=nil {if _bcd :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .NumberingType ,_fbda .Numbering .X ());_bcd !=nil {return _bcd ;};};if _afb :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .StylesType ,_fbda .Styles .X ());_afb !=nil {return _afb ;};if _fbda ._eea !=nil {if _fdd :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .WebSettingsType ,_fbda ._eea );_fdd !=nil {return _fdd ;};};if _fbda ._ccb !=nil {if _fdf :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .FontTableType ,_fbda ._ccb );_fdf !=nil {return _fdf ;};};if _fbda ._fdb !=nil {if _cbcf :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .EndNotesType ,_fbda ._fdb );_cbcf !=nil {return _cbcf ;};};if _fbda ._gcc !=nil {if _fcb :=_fb .MarshalXMLByType (_dbdb ,_cad ,_g .FootNotesType ,_fbda ._gcc );_fcb !=nil {return _fcb ;};};for _eead ,_dccf :=range _fbda ._fga {if _bebd :=_fb .MarshalXMLByTypeIndex (_dbdb ,_cad ,_g .ThemeType ,_eead +1,_dccf );_bebd !=nil {return _bebd ;};};for _gge ,_eef :=range _fbda ._fgad {if _gda :=_fb .MarshalXMLByTypeIndex (_dbdb ,_cad ,_g .ControlType ,_gge +1,_eef );_gda !=nil {return _gda ;};};for _fea ,_cde :=range _fbda ._abee {_fda :=_g .AbsoluteFilename (_cad ,_g .HeaderType ,_fea +1);if _dag :=_fb .MarshalXML (_dbdb ,_fda ,_cde );_dag !=nil {return _dag ;};if !_fbda ._aaa [_fea ].IsEmpty (){_fb .MarshalXML (_dbdb ,_fb .RelationsPathFor (_fda ),_fbda ._aaa [_fea ].X ());};};for _geff ,_gae :=range _fbda ._bfe {_bbd :=_g .AbsoluteFilename (_cad ,_g .FooterType ,_geff +1);if _eae :=_fb .MarshalXMLByTypeIndex (_dbdb ,_cad ,_g .FooterType ,_geff +1,_gae );_eae !=nil {return _eae ;};if !_fbda ._eab [_geff ].IsEmpty (){_fb .MarshalXML (_dbdb ,_fb .RelationsPathFor (_bbd ),_fbda ._eab [_geff ].X ());};};for _eag ,_dbdd :=range _fbda .Images {if _caa :=_gg .AddImageToZip (_dbdb ,_dbdd ,_eag +1,_g .DocTypeDocument );_caa !=nil {return _caa ;};};for _adec ,_ead :=range _fbda ._dad {_bacb :=_g .AbsoluteFilename (_cad ,_g .ChartType ,_adec +1);_fb .MarshalXML (_dbdb ,_bacb ,_ead ._cgg );};if _ebg :=_fb .MarshalXML (_dbdb ,_g .ContentTypesFilename ,_fbda .ContentTypes .X ());_ebg !=nil {return _ebg ;};if _eee :=_fbda .WriteExtraFiles (_dbdb );_eee !=nil {return _eee ;};return _dbdb .Close ();};

// Caps returns true if paragraph font is capitalized.
func (_ecfd ParagraphProperties )Caps ()bool {return _dfcc (_ecfd ._cagc .RPr .Caps )};

// SetYOffset sets the Y offset for an image relative to the origin.
func (_edf AnchoredDrawing )SetYOffset (y _fd .Distance ){_edf ._ed .PositionV .Choice =&_eg .WdCT_PosVChoice {};_edf ._ed .PositionV .Choice .PosOffset =_g .Int32 (int32 (y /_fd .EMU ));};func (_dbddc Paragraph )addFldChar ()*_eg .CT_FldChar {_gefa :=_dbddc .AddRun ();_ebfa :=_gefa .X ();_gffb :=_eg .NewEG_RunInnerContent ();_eaef :=_eg .NewCT_FldChar ();_gffb .FldChar =_eaef ;_ebfa .EG_RunInnerContent =append (_ebfa .EG_RunInnerContent ,_gffb );return _eaef ;};func (_dbbb Document )mergeFields ()[]mergeFieldInfo {_cfeea :=[]Paragraph {};_dddgg :=[]mergeFieldInfo {};for _ ,_cegae :=range _dbbb .Tables (){for _ ,_fcegf :=range _cegae .Rows (){for _ ,_fgag :=range _fcegf .Cells (){_cfeea =append (_cfeea ,_fgag .Paragraphs ()...);};};};_cfeea =append (_cfeea ,_dbbb .Paragraphs ()...);for _ ,_dagg :=range _cfeea {_daac :=_dagg .Runs ();_aeb :=-1;_cgdf :=-1;_gfdf :=-1;_fegae :=mergeFieldInfo {};for _ ,_becf :=range _dagg ._ffae .EG_PContent {for _ ,_efbg :=range _becf .FldSimple {if _e .Contains (_efbg .InstrAttr ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){_bdfcg :=_ecdbg (_efbg .InstrAttr );_bdfcg ._gfbfc =true ;_bdfcg ._cgdg =_dagg ;_bdfcg ._bcaeg =_becf ;_dddgg =append (_dddgg ,_bdfcg );};};};for _ddgb :=0;_ddgb < len (_daac );_ddgb ++{_bffg :=_daac [_ddgb ];for _ ,_abecf :=range _bffg .X ().EG_RunInnerContent {if _abecf .FldChar !=nil {switch _abecf .FldChar .FldCharTypeAttr {case _eg .ST_FldCharTypeBegin :_aeb =_ddgb ;case _eg .ST_FldCharTypeSeparate :_cgdf =_ddgb ;case _eg .ST_FldCharTypeEnd :_gfdf =_ddgb ;if _fegae ._ebca !=""{_fegae ._cgdg =_dagg ;_fegae ._fgbb =_aeb ;_fegae ._aagd =_gfdf ;_fegae ._gcgc =_cgdf ;_dddgg =append (_dddgg ,_fegae );};_aeb =-1;_cgdf =-1;_gfdf =-1;_fegae =mergeFieldInfo {};};}else if _abecf .InstrText !=nil &&_e .Contains (_abecf .InstrText .Content ,"\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044"){if _aeb !=-1&&_gfdf ==-1{_fegae =_ecdbg (_abecf .InstrText .Content );};};};};};return _dddgg ;};

// SetLeftPct sets the cell left margin
func (_ff CellMargins )SetLeftPct (pct float64 ){_ff ._dge .Left =_eg .NewCT_TblWidth ();_cbbg (_ff ._dge .Left ,pct );};

// IsFootnote returns a bool based on whether the run has a
// footnote or not. Returns both a bool as to whether it has
// a footnote as well as the ID of the footnote.
func (_dcced Run )IsFootnote ()(bool ,int64 ){if _dcced ._fced .EG_RunInnerContent !=nil {if _dcced ._fced .EG_RunInnerContent [0].FootnoteReference !=nil {return true ,_dcced ._fced .EG_RunInnerContent [0].FootnoteReference .IdAttr ;};};return false ,0;};

// GetFooter gets a section Footer for given type
func (_fcge Section )GetFooter (t _eg .ST_HdrFtr )(Footer ,bool ){for _ ,_feag :=range _fcge ._ccgc .EG_HdrFtrReferences {if _feag .FooterReference .TypeAttr ==t {for _ ,_eacc :=range _fcge ._gbfe .Footers (){_dagegd :=_fcge ._gbfe ._ccd .FindRIDForN (_eacc .Index (),_g .FooterType );if _dagegd ==_feag .FooterReference .IdAttr {return _eacc ,true ;};};};};return Footer {},false ;};

// SetWindowControl controls if the first or last line of the paragraph is
// allowed to dispay on a separate page.
func (_bbfa ParagraphProperties )SetWindowControl (b bool ){if !b {_bbfa ._cagc .WidowControl =nil ;}else {_bbfa ._cagc .WidowControl =_eg .NewCT_OnOff ();};};

// SetKeepNext controls if the paragraph is kept with the next paragraph.
func (_gega ParagraphStyleProperties )SetKeepNext (b bool ){if !b {_gega ._efcg .KeepNext =nil ;}else {_gega ._efcg .KeepNext =_eg .NewCT_OnOff ();};};

// HyperLink is a link within a document.
type HyperLink struct{_acaf *Document ;_eccf *_eg .CT_Hyperlink ;};func _abgb ()*_ggg .Imagedata {_baaea :=_ggg .NewImagedata ();_bfdgf :="\u0072\u0049\u0064\u0031";_eddc :="\u0057A\u0054\u0045\u0052\u004d\u0041\u0052K";_baaea .IdAttr =&_bfdgf ;_baaea .TitleAttr =&_eddc ;return _baaea ;};

// RunProperties controls run styling properties
type RunProperties struct{_efdg *_eg .CT_RPr };

// SetRight sets the cell right margin
func (_fag CellMargins )SetRight (d _fd .Distance ){_fag ._dge .Right =_eg .NewCT_TblWidth ();_bcb (_fag ._dge .Right ,d );};

// AddTab adds tab to a run and can be used with the the Paragraph's tab stops.
func (_cdgd Run )AddTab (){_fbfe :=_cdgd .newIC ();_fbfe .Tab =_eg .NewCT_Empty ()};

// SetSpacing sets the spacing that comes before and after the paragraph.
// Deprecated: See Spacing() instead which allows finer control.
func (_cgfd ParagraphProperties )SetSpacing (before ,after _fd .Distance ){if _cgfd ._cagc .Spacing ==nil {_cgfd ._cagc .Spacing =_eg .NewCT_Spacing ();};_cgfd ._cagc .Spacing .BeforeAttr =&_gee .ST_TwipsMeasure {};_cgfd ._cagc .Spacing .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (before /_fd .Twips ));_cgfd ._cagc .Spacing .AfterAttr =&_gee .ST_TwipsMeasure {};_cgfd ._cagc .Spacing .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (after /_fd .Twips ));};

// Endnote is an individual endnote reference within the document.
type Endnote struct{_cdde *Document ;_cfcf *_eg .CT_FtnEdn ;};

// AddCell adds a cell to a row and returns it
func (_acbe Row )AddCell ()Cell {_fege :=_eg .NewEG_ContentCellContent ();_acbe ._cgaf .EG_ContentCellContent =append (_acbe ._cgaf .EG_ContentCellContent ,_fege );_ddgd :=_eg .NewCT_Tc ();_fege .Tc =append (_fege .Tc ,_ddgd );return Cell {_acbe ._becdc ,_ddgd };};

// SetPictureSize set watermark picture size with given width and height.
func (_gdca *WatermarkPicture )SetPictureSize (width ,height int64 ){if _gdca ._aebc !=nil {_gcea :=_gdca .GetShapeStyle ();_gcea .SetWidth (int64 (width *_fd .Point ));_gcea .SetHeight (int64 (height *_fd .Point ));_gdca .SetShapeStyle (_gcea );};};

// Validate validates the structure and in cases where it't possible, the ranges
// of elements within a document. A validation error dones't mean that the
// document won't work in MS Word or LibreOffice, but it's worth checking into.
func (_ccge *Document )Validate ()error {if _ccge ==nil ||_ccge ._bbe ==nil {return _de .New ("\u0064o\u0063\u0075m\u0065\u006e\u0074\u0020n\u006f\u0074\u0020i\u006e\u0069\u0074\u0069\u0061\u006c\u0069\u007a\u0065d \u0063\u006f\u0072r\u0065\u0063t\u006c\u0079\u002c\u0020\u006e\u0069l\u0020\u0062a\u0073\u0065");};for _ ,_agef :=range []func ()error {_ccge .validateTableCells ,_ccge .validateBookmarks }{if _gfae :=_agef ();_gfae !=nil {return _gfae ;};};if _dada :=_ccge ._bbe .Validate ();_dada !=nil {return _dada ;};return nil ;};

// Section is the beginning of a new section.
type Section struct{_gbfe *Document ;_ccgc *_eg .CT_SectPr ;};

// SetNumberingDefinitionByID sets the numbering definition ID directly, which must
// match an ID defined in numbering.xml
func (_dbbg Paragraph )SetNumberingDefinitionByID (abstractNumberID int64 ){_dbbg .ensurePPr ();if _dbbg ._ffae .PPr .NumPr ==nil {_dbbg ._ffae .PPr .NumPr =_eg .NewCT_NumPr ();};_ffea :=_eg .NewCT_DecimalNumber ();_ffea .ValAttr =int64 (abstractNumberID );_dbbg ._ffae .PPr .NumPr .NumId =_ffea ;};

// SetAfter sets the spacing that comes after the paragraph.
func (_agccb ParagraphSpacing )SetAfter (after _fd .Distance ){_agccb ._baaecd .AfterAttr =&_gee .ST_TwipsMeasure {};_agccb ._baaecd .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (after /_fd .Twips ));};

// Cell is a table cell within a document (not a spreadsheet)
type Cell struct{_ggc *Document ;_ccc *_eg .CT_Tc ;};

// OnOffValue represents an on/off value that can also be unset
type OnOffValue byte ;func _befb (_dgd *_fg .CT_Blip ,_edef map[string ]string ){if _dgd .EmbedAttr !=nil {if _abgf ,_dbdda :=_edef [*_dgd .EmbedAttr ];_dbdda {*_dgd .EmbedAttr =_abgf ;};};};

// InsertParagraphAfter adds a new empty paragraph after the relativeTo
// paragraph.
func (_eff *Document )InsertParagraphAfter (relativeTo Paragraph )Paragraph {return _eff .insertParagraph (relativeTo ,false );};

// SetRight sets the right border to a specified type, color and thickness.
func (_ga CellBorders )SetRight (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_ga ._cgaa .Right =_eg .NewCT_Border ();_dgdb (_ga ._cgaa .Right ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_dbgbg HyperLink )X ()*_eg .CT_Hyperlink {return _dbgbg ._eccf };

// SetStyle sets style to the text in watermark.
func (_febbc *WatermarkText )SetStyle (style _gd .TextpathStyle ){_bdbdc :=_febbc .getShape ();if _febbc ._dbcca !=nil {_egae :=_febbc ._dbcca .EG_ShapeElements ;if len (_egae )> 0&&_egae [0].Textpath !=nil {var _dbea =style .String ();_egae [0].Textpath .StyleAttr =&_dbea ;};return ;};_adaab :=_febbc .findNode (_bdbdc ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _abdf ,_egadd :=range _adaab .Attrs {if _egadd .Name .Local =="\u0073\u0074\u0079l\u0065"{_adaab .Attrs [_abdf ].Value =style .String ();};};};func _fbb (_ccg *_eg .CT_Tbl ,_ggcf *_eg .CT_P ,_dgfb bool )*_eg .CT_Tbl {for _ ,_cag :=range _ccg .EG_ContentRowContent {for _ ,_adc :=range _cag .Tr {for _ ,_bddf :=range _adc .EG_ContentCellContent {for _ ,_fad :=range _bddf .Tc {for _acg ,_daa :=range _fad .EG_BlockLevelElts {for _ ,_aed :=range _daa .EG_ContentBlockContent {for _ggcg ,_agc :=range _aed .P {if _agc ==_ggcf {_add :=_eg .NewEG_BlockLevelElts ();_feb :=_eg .NewEG_ContentBlockContent ();_add .EG_ContentBlockContent =append (_add .EG_ContentBlockContent ,_feb );_feaf :=_eg .NewCT_Tbl ();_feb .Tbl =append (_feb .Tbl ,_feaf );_fad .EG_BlockLevelElts =append (_fad .EG_BlockLevelElts ,nil );if _dgfb {copy (_fad .EG_BlockLevelElts [_acg +1:],_fad .EG_BlockLevelElts [_acg :]);_fad .EG_BlockLevelElts [_acg ]=_add ;if _ggcg !=0{_dgc :=_eg .NewEG_BlockLevelElts ();_bea :=_eg .NewEG_ContentBlockContent ();_dgc .EG_ContentBlockContent =append (_dgc .EG_ContentBlockContent ,_bea );_bea .P =_aed .P [:_ggcg ];_fad .EG_BlockLevelElts =append (_fad .EG_BlockLevelElts ,nil );copy (_fad .EG_BlockLevelElts [_acg +1:],_fad .EG_BlockLevelElts [_acg :]);_fad .EG_BlockLevelElts [_acg ]=_dgc ;};_aed .P =_aed .P [_ggcg :];}else {copy (_fad .EG_BlockLevelElts [_acg +2:],_fad .EG_BlockLevelElts [_acg +1:]);_fad .EG_BlockLevelElts [_acg +1]=_add ;if _ggcg !=len (_aed .P )-1{_ecg :=_eg .NewEG_BlockLevelElts ();_ged :=_eg .NewEG_ContentBlockContent ();_ecg .EG_ContentBlockContent =append (_ecg .EG_ContentBlockContent ,_ged );_ged .P =_aed .P [_ggcg +1:];_fad .EG_BlockLevelElts =append (_fad .EG_BlockLevelElts ,nil );copy (_fad .EG_BlockLevelElts [_acg +3:],_fad .EG_BlockLevelElts [_acg +2:]);_fad .EG_BlockLevelElts [_acg +2]=_ecg ;}else {_dec :=_eg .NewEG_BlockLevelElts ();_ecf :=_eg .NewEG_ContentBlockContent ();_dec .EG_ContentBlockContent =append (_dec .EG_ContentBlockContent ,_ecf );_ecf .P =[]*_eg .CT_P {_eg .NewCT_P ()};_fad .EG_BlockLevelElts =append (_fad .EG_BlockLevelElts ,nil );copy (_fad .EG_BlockLevelElts [_acg +3:],_fad .EG_BlockLevelElts [_acg +2:]);_fad .EG_BlockLevelElts [_acg +2]=_dec ;};_aed .P =_aed .P [:_ggcg +1];};return _feaf ;};};for _ ,_becd :=range _aed .Tbl {_aafb :=_fbb (_becd ,_ggcf ,_dgfb );if _aafb !=nil {return _aafb ;};};};};};};};};return nil ;};func (_fbf FormFieldType )String ()string {if _fbf >=FormFieldType (len (_ebfgf )-1){return _cg .Sprintf ("\u0046\u006f\u0072\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fbf );};return _bfeed [_ebfgf [_fbf ]:_ebfgf [_fbf +1]];};

// SetStrict is a shortcut for document.SetConformance,
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_cecb Document )SetStrict (strict bool ){if strict {_cecb ._bbe .ConformanceAttr =_gee .ST_ConformanceClassStrict ;}else {_cecb ._bbe .ConformanceAttr =_gee .ST_ConformanceClassTransitional ;};};func _bdg ()(*_fg .CT_Point2D ,[]*_fg .CT_Point2D ){var (_cfg int64 =0;_dg int64 =21600;);_cc :=_fg .ST_Coordinate {ST_CoordinateUnqualified :&_cfg ,ST_UniversalMeasure :nil };_abe :=_fg .ST_Coordinate {ST_CoordinateUnqualified :&_dg ,ST_UniversalMeasure :nil };_cga :=_fg .NewCT_Point2D ();_cga .XAttr =_cc ;_cga .YAttr =_cc ;_bdf :=[]*_fg .CT_Point2D {&_fg .CT_Point2D {XAttr :_cc ,YAttr :_abe },&_fg .CT_Point2D {XAttr :_abe ,YAttr :_abe },&_fg .CT_Point2D {XAttr :_abe ,YAttr :_cc },_cga };return _cga ,_bdf ;};

// AddBreak adds a line break to a run.
func (_dgbae Run )AddBreak (){_aagde :=_dgbae .newIC ();_aagde .Br =_eg .NewCT_Br ()};

// AddSection adds a new document section with an optional section break.  If t
// is ST_SectionMarkUnset, then no break will be inserted.
func (_faad ParagraphProperties )AddSection (t _eg .ST_SectionMark )Section {_faad ._cagc .SectPr =_eg .NewCT_SectPr ();if t !=_eg .ST_SectionMarkUnset {_faad ._cagc .SectPr .Type =_eg .NewCT_SectType ();_faad ._cagc .SectPr .Type .ValAttr =t ;};return Section {_faad ._deacg ,_faad ._cagc .SectPr };};

// Pict returns the pict object.
func (_dbggcg *WatermarkPicture )Pict ()*_eg .CT_Picture {return _dbggcg ._gfbgg };

// ParagraphStyleProperties is the styling information for a paragraph.
type ParagraphStyleProperties struct{_efcg *_eg .CT_PPrGeneral };func (_cbga *Document )InsertTableAfter (relativeTo Paragraph )Table {return _cbga .insertTable (relativeTo ,false );};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_fgae Paragraph )Style ()string {if _fgae ._ffae .PPr !=nil &&_fgae ._ffae .PPr .PStyle !=nil {return _fgae ._ffae .PPr .PStyle .ValAttr ;};return "";};

// Italic returns true if run font is italic.
func (_feee RunProperties )Italic ()bool {_dcdf :=_feee ._efdg ;return _dfcc (_dcdf .I )||_dfcc (_dcdf .ICs );};

// Clear resets the numbering.
func (_bcaf Numbering )Clear (){_bcaf ._dgbab .AbstractNum =nil ;_bcaf ._dgbab .Num =nil ;_bcaf ._dgbab .NumIdMacAtCleanup =nil ;_bcaf ._dgbab .NumPicBullet =nil ;};

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// document.
func (_bdacb *Document )GetChartSpaceByRelId (relId string )*_dcc .ChartSpace {_gebg :=_bdacb ._ccd .GetTargetByRelId (relId );for _ ,_bde :=range _bdacb ._dad {if _gebg ==_bde .Target (){return _bde ._cgg ;};};return nil ;};

// SetAll sets all of the borders to a given value.
func (_cgce TableBorders )SetAll (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_cgce .SetBottom (t ,c ,thickness );_cgce .SetLeft (t ,c ,thickness );_cgce .SetRight (t ,c ,thickness );_cgce .SetTop (t ,c ,thickness );_cgce .SetInsideHorizontal (t ,c ,thickness );_cgce .SetInsideVertical (t ,c ,thickness );};

// Bookmarks returns all of the bookmarks defined in the document.
func (_ege Document )Bookmarks ()[]Bookmark {if _ege ._bbe .Body ==nil {return nil ;};_feeb :=[]Bookmark {};for _ ,_bga :=range _ege ._bbe .Body .EG_BlockLevelElts {for _ ,_caaf :=range _bga .EG_ContentBlockContent {for _ ,_gcbf :=range _bgfa (_caaf ){_feeb =append (_feeb ,_gcbf );};};};return _feeb ;};

// DrawingInfo is used for keep information about a drawing wrapping a textbox where the text is located.
type DrawingInfo struct{Drawing *_eg .CT_Drawing ;Width int64 ;Height int64 ;};func _caab (_eadd *_eg .CT_Tbl ,_ggab ,_fgc map[int64 ]int64 ){for _ ,_fbac :=range _eadd .EG_ContentRowContent {for _ ,_cegc :=range _fbac .Tr {for _ ,_cccbe :=range _cegc .EG_ContentCellContent {for _ ,_agga :=range _cccbe .Tc {for _ ,_ecdc :=range _agga .EG_BlockLevelElts {for _ ,_gcbg :=range _ecdc .EG_ContentBlockContent {for _ ,_cace :=range _gcbg .P {_fcfg (_cace ,_ggab ,_fgc );};for _ ,_cagf :=range _gcbg .Tbl {_caab (_cagf ,_ggab ,_fgc );};};};};};};};};

// AddRun adds a run to a paragraph.
func (_daacd Paragraph )AddRun ()Run {_cefb :=_eg .NewEG_PContent ();_daacd ._ffae .EG_PContent =append (_daacd ._ffae .EG_PContent ,_cefb );_abc :=_eg .NewEG_ContentRunContent ();_cefb .EG_ContentRunContent =append (_cefb .EG_ContentRunContent ,_abc );_acefb :=_eg .NewCT_R ();_abc .R =_acefb ;return Run {_daacd ._dageg ,_acefb };};

// SetDoubleStrikeThrough sets the run to double strike-through.
func (_dcg RunProperties )SetDoubleStrikeThrough (b bool ){if !b {_dcg ._efdg .Dstrike =nil ;}else {_dcg ._efdg .Dstrike =_eg .NewCT_OnOff ();};};

// X returns the inner wrapped XML type.
func (_cegde TableWidth )X ()*_eg .CT_TblWidth {return _cegde ._acba };

// AddWatermarkPicture adds new watermark picture to document.
func (_ecac *Document )AddWatermarkPicture (imageRef _gg .ImageRef )WatermarkPicture {var _gga []Header ;if _dage ,_bcdf :=_ecac .BodySection ().GetHeader (_eg .ST_HdrFtrDefault );_bcdf {_gga =append (_gga ,_dage );};if _babc ,_gedgf :=_ecac .BodySection ().GetHeader (_eg .ST_HdrFtrEven );_gedgf {_gga =append (_gga ,_babc );};if _babb ,_edcg :=_ecac .BodySection ().GetHeader (_eg .ST_HdrFtrFirst );_edcg {_gga =append (_gga ,_babb );};if len (_gga )< 1{_baae :=_ecac .AddHeader ();_ecac .BodySection ().SetHeader (_baae ,_eg .ST_HdrFtrDefault );_gga =append (_gga ,_baae );};var _cebg error ;_ebab :=NewWatermarkPicture ();for _ ,_dfc :=range _gga {imageRef ,_cebg =_dfc .AddImageRef (imageRef );if _cebg !=nil {return WatermarkPicture {};};_agcc :=_dfc .Paragraphs ();if len (_agcc )< 1{_eded :=_dfc .AddParagraph ();_eded .AddRun ().AddText ("");};for _ ,_dacf :=range _dfc .X ().EG_ContentBlockContent {for _ ,_cgf :=range _dacf .P {for _ ,_gad :=range _cgf .EG_PContent {for _ ,_aeae :=range _gad .EG_ContentRunContent {if _aeae .R ==nil {continue ;};for _ ,_fbga :=range _aeae .R .EG_RunInnerContent {_fbga .Pict =_ebab ._gfbgg ;break ;};};};};};};_ebab .SetPicture (imageRef );return _ebab ;};

// NewSettings constructs a new empty Settings
func NewSettings ()Settings {_beg :=_eg .NewSettings ();_beg .Compat =_eg .NewCT_Compat ();_efagf :=_eg .NewCT_CompatSetting ();_efagf .NameAttr =_g .String ("\u0063\u006f\u006d\u0070\u0061\u0074\u0069\u0062\u0069\u006c\u0069\u0074y\u004d\u006f\u0064\u0065");_efagf .UriAttr =_g .String ("h\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002e\u0063\u006f\u006d\u002f\u006fff\u0069\u0063\u0065/\u0077o\u0072\u0064");_efagf .ValAttr =_g .String ("\u0031\u0035");_beg .Compat .CompatSetting =append (_beg .Compat .CompatSetting ,_efagf );return Settings {_beg };};func (_ffe *chart )Target ()string {return _ffe ._gfc };

// SetWrapPathLineTo sets wrapPath lineTo value.
func (_aac AnchorDrawWrapOptions )SetWrapPathLineTo (coordinates []*_fg .CT_Point2D ){_aac ._dcf =coordinates ;};

// Paragraphs returns the paragraphs defined in a header.
func (_fdfd Header )Paragraphs ()[]Paragraph {_cega :=[]Paragraph {};for _ ,_cfcb :=range _fdfd ._faac .EG_ContentBlockContent {for _ ,_aged :=range _cfcb .P {_cega =append (_cega ,Paragraph {_fdfd ._efff ,_aged });};};for _ ,_befe :=range _fdfd .Tables (){for _ ,_edbea :=range _befe .Rows (){for _ ,_feafa :=range _edbea .Cells (){_cega =append (_cega ,_feafa .Paragraphs ()...);};};};return _cega ;};

// SetWidth sets the cell width to a specified width.
func (_bab CellProperties )SetWidth (d _fd .Distance ){_bab ._cgb .TcW =_eg .NewCT_TblWidth ();_bab ._cgb .TcW .TypeAttr =_eg .ST_TblWidthDxa ;_bab ._cgb .TcW .WAttr =&_eg .ST_MeasurementOrPercent {};_bab ._cgb .TcW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_bab ._cgb .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (d /_fd .Twips ));};

// X returns the inner wrapped XML type.
func (_ccae Footnote )X ()*_eg .CT_FtnEdn {return _ccae ._fafc };func (_ebag *Document )tables (_aaca *_eg .EG_ContentBlockContent )[]Table {_caac :=[]Table {};for _ ,_eed :=range _aaca .Tbl {_caac =append (_caac ,Table {_ebag ,_eed });for _ ,_gaf :=range _eed .EG_ContentRowContent {for _ ,_ecfe :=range _gaf .Tr {for _ ,_egg :=range _ecfe .EG_ContentCellContent {for _ ,_cdc :=range _egg .Tc {for _ ,_acd :=range _cdc .EG_BlockLevelElts {for _ ,_fdfb :=range _acd .EG_ContentBlockContent {for _ ,_gcfb :=range _ebag .tables (_fdfb ){_caac =append (_caac ,_gcfb );};};};};};};};};return _caac ;};

// SetSize sets size attribute for a FormFieldTypeCheckBox in pt.
func (_feeg FormField )SetSize (size uint64 ){size *=2;if _feeg ._aefe .CheckBox !=nil {_feeg ._aefe .CheckBox .Choice =_eg .NewCT_FFCheckBoxChoice ();_feeg ._aefe .CheckBox .Choice .Size =_eg .NewCT_HpsMeasure ();_feeg ._aefe .CheckBox .Choice .Size .ValAttr =_eg .ST_HpsMeasure {ST_UnsignedDecimalNumber :&size };};};

// SetTextStyleBold set text style of watermark to bold.
func (_cfeac *WatermarkText )SetTextStyleBold (value bool ){if _cfeac ._dbcca !=nil {_gfbd :=_cfeac .GetStyle ();_gfbd .SetBold (value );_cfeac .SetStyle (_gfbd );};};

// Tables returns the tables defined in the document.
func (_cdb *Document )Tables ()[]Table {_bae :=[]Table {};if _cdb ._bbe .Body ==nil {return nil ;};for _ ,_bca :=range _cdb ._bbe .Body .EG_BlockLevelElts {for _ ,_cdca :=range _bca .EG_ContentBlockContent {for _ ,_dgbb :=range _cdb .tables (_cdca ){_bae =append (_bae ,_dgbb );};};};return _bae ;};

// SetWidth sets the table with to a specified width.
func (_beac TableProperties )SetWidth (d _fd .Distance ){_beac ._gcdd .TblW =_eg .NewCT_TblWidth ();_beac ._gcdd .TblW .TypeAttr =_eg .ST_TblWidthDxa ;_beac ._gcdd .TblW .WAttr =&_eg .ST_MeasurementOrPercent {};_beac ._gcdd .TblW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_beac ._gcdd .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (d /_fd .Twips ));};

// RemoveMailMerge removes any mail merge settings
func (_agdf Settings )RemoveMailMerge (){_agdf ._cfde .MailMerge =nil };

// ParagraphProperties are the properties for a paragraph.
type ParagraphProperties struct{_deacg *Document ;_cagc *_eg .CT_PPr ;};

// SetToolTip sets the tooltip text for a hyperlink.
func (_bccag HyperLink )SetToolTip (text string ){if text ==""{_bccag ._eccf .TooltipAttr =nil ;}else {_bccag ._eccf .TooltipAttr =_g .String (text );};};

// AnchorDrawWrapOptions is options to set
// wrapPolygon for wrap text through and tight.
type AnchorDrawWrapOptions struct{_bbg bool ;_adg *_fg .CT_Point2D ;_dcf []*_fg .CT_Point2D ;};

// // SetBeforeLineSpacing sets spacing above paragraph in line units.
func (_dcbca Paragraph )SetBeforeLineSpacing (d _fd .Distance ){_dcbca .ensurePPr ();if _dcbca ._ffae .PPr .Spacing ==nil {_dcbca ._ffae .PPr .Spacing =_eg .NewCT_Spacing ();};_dfab :=_dcbca ._ffae .PPr .Spacing ;_dfab .BeforeLinesAttr =_g .Int64 (int64 (d /_fd .Twips ));};

// Emboss returns true if paragraph emboss is on.
func (_bbaee ParagraphProperties )Emboss ()bool {return _dfcc (_bbaee ._cagc .RPr .Emboss )};

// SetLeftIndent controls the left indent of the paragraph.
func (_bead ParagraphStyleProperties )SetLeftIndent (m _fd .Distance ){if _bead ._efcg .Ind ==nil {_bead ._efcg .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_bead ._efcg .Ind .LeftAttr =nil ;}else {_bead ._efcg .Ind .LeftAttr =&_eg .ST_SignedTwipsMeasure {};_bead ._efcg .Ind .LeftAttr .Int64 =_g .Int64 (int64 (m /_fd .Twips ));};};

// SetConformance sets conformance attribute of the document
// as one of these values from github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes:
// ST_ConformanceClassUnset, ST_ConformanceClassStrict or ST_ConformanceClassTransitional.
func (_bdcb Document )SetConformance (conformanceAttr _gee .ST_ConformanceClass ){_bdcb ._bbe .ConformanceAttr =conformanceAttr ;};

// AddTabStop adds a tab stop to the paragraph.  It controls the position of text when using Run.AddTab()
func (_gabb ParagraphProperties )AddTabStop (position _fd .Distance ,justificaton _eg .ST_TabJc ,leader _eg .ST_TabTlc ){if _gabb ._cagc .Tabs ==nil {_gabb ._cagc .Tabs =_eg .NewCT_Tabs ();};_bcgf :=_eg .NewCT_TabStop ();_bcgf .LeaderAttr =leader ;_bcgf .ValAttr =justificaton ;_bcgf .PosAttr .Int64 =_g .Int64 (int64 (position /_fd .Twips ));_gabb ._cagc .Tabs .Tab =append (_gabb ._cagc .Tabs .Tab ,_bcgf );};

// Tables returns the tables defined in the footer.
func (_cbeb Footer )Tables ()[]Table {_bgeb :=[]Table {};if _cbeb ._dbac ==nil {return nil ;};for _ ,_aceg :=range _cbeb ._dbac .EG_ContentBlockContent {for _ ,_accf :=range _cbeb ._ddbab .tables (_aceg ){_bgeb =append (_bgeb ,_accf );};};return _bgeb ;};

// RemoveParagraph removes a paragraph from a footer.
func (_cegcfc Header )RemoveParagraph (p Paragraph ){for _ ,_abdc :=range _cegcfc ._faac .EG_ContentBlockContent {for _cdge ,_adcbb :=range _abdc .P {if _adcbb ==p ._ffae {copy (_abdc .P [_cdge :],_abdc .P [_cdge +1:]);_abdc .P =_abdc .P [0:len (_abdc .P )-1];return ;};};};};

// ClearColor clears the text color.
func (_eeabc RunProperties )ClearColor (){_eeabc ._efdg .Color =nil };

// GetImageObjByRelId returns a common.Image with the associated relation ID in the
// document.
func (_fef *Document )GetImageObjByRelId (relId string )(_gg .Image ,error ){_ecdfc :=_fef ._ccd .GetTargetByRelId (relId );return _fef .DocBase .GetImageBytesByTarget (_ecdfc );};

// SetAlignment set alignment of paragraph.
func (_fadc Paragraph )SetAlignment (alignment _eg .ST_Jc ){_fadc .ensurePPr ();if _fadc ._ffae .PPr .Jc ==nil {_fadc ._ffae .PPr .Jc =_eg .NewCT_Jc ();};_fadc ._ffae .PPr .Jc .ValAttr =alignment ;};func (_fega *Document )onNewRelationship (_bcca *_fb .DecodeMap ,_cae ,_fgb string ,_bbab []*_gb .File ,_gcce *_a .Relationship ,_gce _fb .Target )error {_eec :=_g .DocTypeDocument ;switch _fgb {case _g .OfficeDocumentType ,_g .OfficeDocumentTypeStrict :_fega ._bbe =_eg .NewDocument ();_bcca .AddTarget (_cae ,_fega ._bbe ,_fgb ,0);_bcca .AddTarget (_fb .RelationsPathFor (_cae ),_fega ._ccd .X (),_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .CorePropertiesType :_bcca .AddTarget (_cae ,_fega .CoreProperties .X (),_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .CustomPropertiesType :_bcca .AddTarget (_cae ,_fega .CustomProperties .X (),_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .ExtendedPropertiesType ,_g .ExtendedPropertiesTypeStrict :_bcca .AddTarget (_cae ,_fega .AppProperties .X (),_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .ThumbnailType ,_g .ThumbnailTypeStrict :for _dbfc ,_dbbe :=range _bbab {if _dbbe ==nil {continue ;};if _dbbe .Name ==_cae {_bccaa ,_bed :=_dbbe .Open ();if _bed !=nil {return _cg .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_bed );};_fega .Thumbnail ,_ ,_bed =_df .Decode (_bccaa );_bccaa .Close ();if _bed !=nil {return _cg .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_bed );};_bbab [_dbfc ]=nil ;};};case _g .SettingsType ,_g .SettingsTypeStrict :_bcca .AddTarget (_cae ,_fega .Settings .X (),_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .NumberingType ,_g .NumberingTypeStrict :_fega .Numbering =NewNumbering ();_bcca .AddTarget (_cae ,_fega .Numbering .X (),_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .StylesType ,_g .StylesTypeStrict :_fega .Styles .Clear ();_bcca .AddTarget (_cae ,_fega .Styles .X (),_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .HeaderType ,_g .HeaderTypeStrict :_dfe :=_eg .NewHdr ();_bcca .AddTarget (_cae ,_dfe ,_fgb ,uint32 (len (_fega ._abee )));_fega ._abee =append (_fega ._abee ,_dfe );_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,len (_fega ._abee ));_aedd :=_gg .NewRelationships ();_bcca .AddTarget (_fb .RelationsPathFor (_cae ),_aedd .X (),_fgb ,0);_fega ._aaa =append (_fega ._aaa ,_aedd );case _g .FooterType ,_g .FooterTypeStrict :_fecc :=_eg .NewFtr ();_bcca .AddTarget (_cae ,_fecc ,_fgb ,uint32 (len (_fega ._bfe )));_fega ._bfe =append (_fega ._bfe ,_fecc );_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,len (_fega ._bfe ));_efg :=_gg .NewRelationships ();_bcca .AddTarget (_fb .RelationsPathFor (_cae ),_efg .X (),_fgb ,0);_fega ._eab =append (_fega ._eab ,_efg );case _g .ThemeType ,_g .ThemeTypeStrict :_adbd :=_fg .NewTheme ();_bcca .AddTarget (_cae ,_adbd ,_fgb ,uint32 (len (_fega ._fga )));_fega ._fga =append (_fega ._fga ,_adbd );_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,len (_fega ._fga ));case _g .WebSettingsType ,_g .WebSettingsTypeStrict :_fega ._eea =_eg .NewWebSettings ();_bcca .AddTarget (_cae ,_fega ._eea ,_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .FontTableType ,_g .FontTableTypeStrict :_fega ._ccb =_eg .NewFonts ();_bcca .AddTarget (_cae ,_fega ._ccb ,_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .EndNotesType ,_g .EndNotesTypeStrict :_fega ._fdb =_eg .NewEndnotes ();_bcca .AddTarget (_cae ,_fega ._fdb ,_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .FootNotesType ,_g .FootNotesTypeStrict :_fega ._gcc =_eg .NewFootnotes ();_bcca .AddTarget (_cae ,_fega ._gcc ,_fgb ,0);_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,0);case _g .ImageType ,_g .ImageTypeStrict :var _gfce _gg .ImageRef ;for _afe ,_dbgfd :=range _bbab {if _dbgfd ==nil {continue ;};if _dbgfd .Name ==_cae {_fcbd ,_bcdc :=_fb .ExtractToDiskTmp (_dbgfd ,_fega .TmpPath );if _bcdc !=nil {return _bcdc ;};_gaae ,_bcdc :=_gg .ImageFromStorage (_fcbd );if _bcdc !=nil {return _bcdc ;};_gfce =_gg .MakeImageRef (_gaae ,&_fega .DocBase ,_fega ._ccd );_bbab [_afe ]=nil ;};};_bfc :="\u002e"+_e .ToLower (_gfce .Format ());_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,len (_fega .Images )+1);if _eeaf :=_b .Ext (_gcce .TargetAttr );_eeaf !=_bfc {_gcce .TargetAttr =_gcce .TargetAttr [0:len (_gcce .TargetAttr )-len (_eeaf )]+_bfc ;};_gfce .SetTarget ("\u0077\u006f\u0072d\u002f"+_gcce .TargetAttr );_fega .Images =append (_fega .Images ,_gfce );case _g .ControlType ,_g .ControlTypeStrict :_edg :=_bdc .NewOcx ();_bcca .AddTarget (_cae ,_edg ,_fgb ,uint32 (len (_fega ._fgad )));_fega ._fgad =append (_fega ._fgad ,_edg );_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,len (_fega ._fgad ));case _g .ChartType :_dbca :=chart {_cgg :_dcc .NewChartSpace ()};_eaec :=uint32 (len (_fega ._dad ));_bcca .AddTarget (_cae ,_dbca ._cgg ,_fgb ,_eaec );_fega ._dad =append (_fega ._dad ,&_dbca );_gcce .TargetAttr =_g .RelativeFilename (_eec ,_gce .Typ ,_fgb ,len (_fega ._dad ));_dbca ._gfc =_gcce .TargetAttr ;default:_g .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_fgb ,_cae );};return nil ;};

// SetTextWrapNone unsets text wrapping so the image can float on top of the
// text. When used in conjunction with X/Y Offset relative to the page it can be
// used to place a logo at the top of a page at an absolute position that
// doesn't interfere with text.
func (_cf AnchoredDrawing )SetTextWrapNone (){_cf ._ed .Choice =&_eg .WdEG_WrapTypeChoice {};_cf ._ed .Choice .WrapNone =_eg .NewWdCT_WrapNone ();};func _dcffd (_ffde []*_eg .CT_P ,_cgfg *TableInfo ,_adea *DrawingInfo )[]TextItem {_ffbd :=[]TextItem {};for _ ,_ece :=range _ffde {_ffbd =append (_ffbd ,_gcab (_ece ,nil ,_cgfg ,_adea ,_ece .EG_PContent )...);};return _ffbd ;};

// SetTableIndent sets the Table Indent from the Leading Margin
func (_ebcd TableStyleProperties )SetTableIndent (ind _fd .Distance ){_ebcd ._eggdf .TblInd =_eg .NewCT_TblWidth ();_ebcd ._eggdf .TblInd .TypeAttr =_eg .ST_TblWidthDxa ;_ebcd ._eggdf .TblInd .WAttr =&_eg .ST_MeasurementOrPercent {};_ebcd ._eggdf .TblInd .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_ebcd ._eggdf .TblInd .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (ind /_fd .Dxa ));};

// InsertRowBefore inserts a row before another row
func (_ecddb Table )InsertRowBefore (r Row )Row {for _cced ,_ebbbg :=range _ecddb ._gdae .EG_ContentRowContent {if len (_ebbbg .Tr )> 0&&r .X ()==_ebbbg .Tr [0]{_dcgc :=_eg .NewEG_ContentRowContent ();_ecddb ._gdae .EG_ContentRowContent =append (_ecddb ._gdae .EG_ContentRowContent ,nil );copy (_ecddb ._gdae .EG_ContentRowContent [_cced +1:],_ecddb ._gdae .EG_ContentRowContent [_cced :]);_ecddb ._gdae .EG_ContentRowContent [_cced ]=_dcgc ;_caag :=_eg .NewCT_Row ();_dcgc .Tr =append (_dcgc .Tr ,_caag );return Row {_ecddb ._gdea ,_caag };};};return _ecddb .AddRow ();};

// SetDefaultValue sets the default value of a FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_cefge FormField )SetDefaultValue (v string ){if _cefge ._aefe .DdList !=nil {for _fagf ,_gcda :=range _cefge .PossibleValues (){if _gcda ==v {_cefge ._aefe .DdList .Default =_eg .NewCT_DecimalNumber ();_cefge ._aefe .DdList .Default .ValAttr =int64 (_fagf );break ;};};};};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_dacgfg RunProperties )RStyle ()string {if _dacgfg ._efdg .RStyle !=nil {return _dacgfg ._efdg .RStyle .ValAttr ;};return "";};

// AddTextInput adds text input form field to the paragraph and returns it.
func (_eecg Paragraph )AddTextInput (name string )FormField {_dgbac :=_eecg .addFldCharsForField (name ,"\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054");_dgbac ._aefe .TextInput =_eg .NewCT_FFTextInput ();return _dgbac ;};

// Font returns the name of run font family.
func (_bfea RunProperties )Font ()string {if _acaa :=_bfea ._efdg .RFonts ;_acaa !=nil {if _acaa .AsciiAttr !=nil {return *_acaa .AsciiAttr ;}else if _acaa .HAnsiAttr !=nil {return *_acaa .HAnsiAttr ;}else if _acaa .CsAttr !=nil {return *_acaa .CsAttr ;};};return "";};

// SetOutlineLvl sets outline level of paragraph.
func (_fffdf Paragraph )SetOutlineLvl (lvl int64 ){_fffdf .ensurePPr ();if _fffdf ._ffae .PPr .OutlineLvl ==nil {_fffdf ._ffae .PPr .OutlineLvl =_eg .NewCT_DecimalNumber ();};_bgef :=lvl -1;_fffdf ._ffae .PPr .OutlineLvl .ValAttr =_bgef ;};func (_dbfcg *WatermarkText )findNode (_edcag *_g .XSDAny ,_agdb string )*_g .XSDAny {for _ ,_ebbbb :=range _edcag .Nodes {if _ebbbb .XMLName .Local ==_agdb {return _ebbbb ;};};return nil ;};

// SetColumnSpan sets the number of Grid Columns Spanned by the Cell.  This is used
// to give the appearance of merged cells.
func (_egc CellProperties )SetColumnSpan (cols int ){if cols ==0{_egc ._cgb .GridSpan =nil ;}else {_egc ._cgb .GridSpan =_eg .NewCT_DecimalNumber ();_egc ._cgb .GridSpan .ValAttr =int64 (cols );};};

// Numbering is the document wide numbering styles contained in numbering.xml.
type Numbering struct{_dgbab *_eg .Numbering };

// SetTextWrapSquare sets the text wrap to square with a given wrap type.
func (_bf AnchoredDrawing )SetTextWrapSquare (t _eg .WdST_WrapText ){_bf ._ed .Choice =&_eg .WdEG_WrapTypeChoice {};_bf ._ed .Choice .WrapSquare =_eg .NewWdCT_WrapSquare ();_bf ._ed .Choice .WrapSquare .WrapTextAttr =t ;};

// Clear clears the styes.
func (_bbfb Styles )Clear (){_bbfb ._ceaa .DocDefaults =nil ;_bbfb ._ceaa .LatentStyles =nil ;_bbfb ._ceaa .Style =nil ;};

// Properties returns the paragraph properties.
func (_gedf Paragraph )Properties ()ParagraphProperties {_gedf .ensurePPr ();return ParagraphProperties {_gedf ._dageg ,_gedf ._ffae .PPr };};

// CellMargins are the margins for an individual cell.
type CellMargins struct{_dge *_eg .CT_TcMar };

// PossibleValues returns the possible values for a FormFieldTypeDropDown.
func (_dbgff FormField )PossibleValues ()[]string {if _dbgff ._aefe .DdList ==nil {return nil ;};_egda :=[]string {};for _ ,_fdaed :=range _dbgff ._aefe .DdList .ListEntry {if _fdaed ==nil {continue ;};_egda =append (_egda ,_fdaed .ValAttr );};return _egda ;};func _dgdb (_egaa *_eg .CT_Border ,_dgcce _eg .ST_Border ,_ccbf _ef .Color ,_deaab _fd .Distance ){_egaa .ValAttr =_dgcce ;_egaa .ColorAttr =&_eg .ST_HexColor {};if _ccbf .IsAuto (){_egaa .ColorAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;}else {_egaa .ColorAttr .ST_HexColorRGB =_ccbf .AsRGBString ();};if _deaab !=_fd .Zero {_egaa .SzAttr =_g .Uint64 (uint64 (_deaab /_fd .Point *8));};};

// SetHangingIndent controls special indent of paragraph.
func (_dccd Paragraph )SetHangingIndent (m _fd .Distance ){_dccd .ensurePPr ();_eccdf :=_dccd ._ffae .PPr ;if _eccdf .Ind ==nil {_eccdf .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_eccdf .Ind .HangingAttr =nil ;}else {_eccdf .Ind .HangingAttr =&_gee .ST_TwipsMeasure {};_eccdf .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_fd .Twips ));};};

// AddRun adds a run of text to a hyperlink. This is the text that will be linked.
func (_bffe HyperLink )AddRun ()Run {_ccea :=_eg .NewEG_ContentRunContent ();_bffe ._eccf .EG_ContentRunContent =append (_bffe ._eccf .EG_ContentRunContent ,_ccea );_cbdf :=_eg .NewCT_R ();_ccea .R =_cbdf ;return Run {_bffe ._acaf ,_cbdf };};

// SetFooter sets a section footer.
func (_abbf Section )SetFooter (f Footer ,t _eg .ST_HdrFtr ){_eeae :=_eg .NewEG_HdrFtrReferences ();_abbf ._ccgc .EG_HdrFtrReferences =append (_abbf ._ccgc .EG_HdrFtrReferences ,_eeae );_eeae .FooterReference =_eg .NewCT_HdrFtrRef ();_eeae .FooterReference .TypeAttr =t ;_bbed :=_abbf ._gbfe ._ccd .FindRIDForN (f .Index (),_g .FooterType );if _bbed ==""{_c .Print ("\u0075\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0064\u0065\u0074\u0065\u0072\u006d\u0069\u006e\u0065\u0020\u0066\u006f\u006f\u0074\u0065r \u0049\u0044");};_eeae .FooterReference .IdAttr =_bbed ;};

// SetTextWrapInFrontOfText sets the text wrap to in front of text.
func (_fe AnchoredDrawing )SetTextWrapInFrontOfText (){_fe ._ed .Choice =&_eg .WdEG_WrapTypeChoice {};_fe ._ed .Choice .WrapNone =_eg .NewWdCT_WrapNone ();_fe ._ed .BehindDocAttr =false ;_fe ._ed .LayoutInCellAttr =true ;_fe ._ed .AllowOverlapAttr =true ;};

// SetRightIndent controls right indent of paragraph.
func (_ebge Paragraph )SetRightIndent (m _fd .Distance ){_ebge .ensurePPr ();_bgd :=_ebge ._ffae .PPr ;if _bgd .Ind ==nil {_bgd .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_bgd .Ind .RightAttr =nil ;}else {_bgd .Ind .RightAttr =&_eg .ST_SignedTwipsMeasure {};_bgd .Ind .RightAttr .Int64 =_g .Int64 (int64 (m /_fd .Twips ));};};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_eabda RunProperties )CharacterSpacingMeasure ()string {if _dgabd :=_eabda ._efdg .Spacing ;_dgabd !=nil {_fbfa :=_dgabd .ValAttr ;if _fbfa .ST_UniversalMeasure !=nil {return *_fbfa .ST_UniversalMeasure ;};};return "";};

// VerticalAlign returns the value of paragraph vertical align.
func (_ecde ParagraphProperties )VerticalAlignment ()_gee .ST_VerticalAlignRun {if _bdbf :=_ecde ._cagc .RPr .VertAlign ;_bdbf !=nil {return _bdbf .ValAttr ;};return 0;};

// SetAllowOverlapAttr sets the allowOverlap attribute of anchor.
func (_bb AnchoredDrawing )SetAllowOverlapAttr (val bool ){_bb ._ed .AllowOverlapAttr =val };

// RunProperties returns the run properties controlling text formatting within the table.
func (_bdbfg TableConditionalFormatting )RunProperties ()RunProperties {if _bdbfg ._cdff .RPr ==nil {_bdbfg ._cdff .RPr =_eg .NewCT_RPr ();};return RunProperties {_bdbfg ._cdff .RPr };};

// Tables returns the tables defined in the header.
func (_edac Header )Tables ()[]Table {_beeae :=[]Table {};if _edac ._faac ==nil {return nil ;};for _ ,_dbggc :=range _edac ._faac .EG_ContentBlockContent {for _ ,_efbee :=range _edac ._efff .tables (_dbggc ){_beeae =append (_beeae ,_efbee );};};return _beeae ;};

// Color controls the run or styles color.
type Color struct{_gfbf *_eg .CT_Color };

// SetShading controls the cell shading.
func (_gggb CellProperties )SetShading (shd _eg .ST_Shd ,foreground ,fill _ef .Color ){if shd ==_eg .ST_ShdUnset {_gggb ._cgb .Shd =nil ;}else {_gggb ._cgb .Shd =_eg .NewCT_Shd ();_gggb ._cgb .Shd .ValAttr =shd ;_gggb ._cgb .Shd .ColorAttr =&_eg .ST_HexColor {};if foreground .IsAuto (){_gggb ._cgb .Shd .ColorAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;}else {_gggb ._cgb .Shd .ColorAttr .ST_HexColorRGB =foreground .AsRGBString ();};_gggb ._cgb .Shd .FillAttr =&_eg .ST_HexColor {};if fill .IsAuto (){_gggb ._cgb .Shd .FillAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;}else {_gggb ._cgb .Shd .FillAttr .ST_HexColorRGB =fill .AsRGBString ();};};};

// Index returns the index of the header within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_cce Header )Index ()int {for _feba ,_gfgd :=range _cce ._efff ._abee {if _gfgd ==_cce ._faac {return _feba ;};};return -1;};

// AddTable adds a table to the table cell.
func (_fce Cell )AddTable ()Table {_baa :=_eg .NewEG_BlockLevelElts ();_fce ._ccc .EG_BlockLevelElts =append (_fce ._ccc .EG_BlockLevelElts ,_baa );_ecd :=_eg .NewEG_ContentBlockContent ();_baa .EG_ContentBlockContent =append (_baa .EG_ContentBlockContent ,_ecd );_fab :=_eg .NewCT_Tbl ();_ecd .Tbl =append (_ecd .Tbl ,_fab );return Table {_fce ._ggc ,_fab };};func _ggad ()*_ggg .Path {_cada :=_ggg .NewPath ();_cada .TextpathokAttr =_gee .ST_TrueFalseTrue ;_cada .ConnecttypeAttr =_ggg .OfcST_ConnectTypeCustom ;_fdec :="\u0040\u0039\u002c0;\u0040\u0031\u0030\u002c\u0031\u0030\u0038\u0030\u0030;\u00401\u0031,\u00321\u0036\u0030\u0030\u003b\u0040\u0031\u0032\u002c\u0031\u0030\u0038\u0030\u0030";_cada .ConnectlocsAttr =&_fdec ;_abgg :="\u0032\u0037\u0030,\u0031\u0038\u0030\u002c\u0039\u0030\u002c\u0030";_cada .ConnectanglesAttr =&_abgg ;return _cada ;};

// GetStyleByID returns Style by it's IdAttr.
func (_fbgc *Document )GetStyleByID (id string )Style {for _ ,_bbba :=range _fbgc .Styles ._ceaa .Style {if _bbba .StyleIdAttr !=nil &&*_bbba .StyleIdAttr ==id {return Style {_bbba };};};return Style {};};

// AddLevel adds a new numbering level to a NumberingDefinition.
func (_ddgc NumberingDefinition )AddLevel ()NumberingLevel {_edec :=_eg .NewCT_Lvl ();_edec .Start =&_eg .CT_DecimalNumber {ValAttr :1};_edec .IlvlAttr =int64 (len (_ddgc ._cafg .Lvl ));_ddgc ._cafg .Lvl =append (_ddgc ._cafg .Lvl ,_edec );return NumberingLevel {_edec };};

// RemoveFootnote removes a footnote from both the paragraph and the document
// the requested footnote must be anchored on the paragraph being referenced.
func (_fcbc Paragraph )RemoveFootnote (id int64 ){_acafa :=_fcbc ._dageg ._gcc ;var _dbbea int ;for _ccce ,_ebfdg :=range _acafa .CT_Footnotes .Footnote {if _ebfdg .IdAttr ==id {_dbbea =_ccce ;};};_dbbea =0;_acafa .CT_Footnotes .Footnote [_dbbea ]=nil ;_acafa .CT_Footnotes .Footnote [_dbbea ]=_acafa .CT_Footnotes .Footnote [len (_acafa .CT_Footnotes .Footnote )-1];_acafa .CT_Footnotes .Footnote =_acafa .CT_Footnotes .Footnote [:len (_acafa .CT_Footnotes .Footnote )-1];var _ddbc Run ;for _ ,_bcge :=range _fcbc .Runs (){if _afff ,_accda :=_bcge .IsFootnote ();_afff {if _accda ==id {_ddbc =_bcge ;};};};_fcbc .RemoveRun (_ddbc );};

// SetEndIndent controls the end indentation.
func (_bfgc ParagraphProperties )SetEndIndent (m _fd .Distance ){if _bfgc ._cagc .Ind ==nil {_bfgc ._cagc .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_bfgc ._cagc .Ind .EndAttr =nil ;}else {_bfgc ._cagc .Ind .EndAttr =&_eg .ST_SignedTwipsMeasure {};_bfgc ._cagc .Ind .EndAttr .Int64 =_g .Int64 (int64 (m /_fd .Twips ));};};

// RightToLeft returns true if paragraph text goes from right to left.
func (_efed ParagraphProperties )RightToLeft ()bool {return _dfcc (_efed ._cagc .RPr .Rtl )};func _afcg (_cece *_eg .CT_Tbl ,_gade map[string ]string ){for _ ,_dfad :=range _cece .EG_ContentRowContent {for _ ,_aedbb :=range _dfad .Tr {for _ ,_cacb :=range _aedbb .EG_ContentCellContent {for _ ,_bagg :=range _cacb .Tc {for _ ,_dbga :=range _bagg .EG_BlockLevelElts {for _ ,_dae :=range _dbga .EG_ContentBlockContent {for _ ,_bgb :=range _dae .P {_abge (_bgb ,_gade );};for _ ,_fafe :=range _dae .Tbl {_afcg (_fafe ,_gade );};};};};};};};};

// X returns the inner wrapped XML type.
func (_cfadb Footer )X ()*_eg .Ftr {return _cfadb ._dbac };

// Properties returns the run properties.
func (_face Run )Properties ()RunProperties {if _face ._fced .RPr ==nil {_face ._fced .RPr =_eg .NewCT_RPr ();};return RunProperties {_face ._fced .RPr };};

// SetAfterSpacing sets spacing below paragraph.
func (_bdec Paragraph )SetAfterSpacing (d _fd .Distance ){_bdec .ensurePPr ();if _bdec ._ffae .PPr .Spacing ==nil {_bdec ._ffae .PPr .Spacing =_eg .NewCT_Spacing ();};_acgd :=_bdec ._ffae .PPr .Spacing ;_acgd .AfterAttr =&_gee .ST_TwipsMeasure {};_acgd .AfterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (d /_fd .Twips ));};

// NewStyles constructs a new empty Styles
func NewStyles ()Styles {return Styles {_eg .NewStyles ()}};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_gfcg ParagraphProperties )SizeMeasure ()string {if _ddbd :=_gfcg ._cagc .RPr .Sz ;_ddbd !=nil {_dcbg :=_ddbd .ValAttr ;if _dcbg .ST_PositiveUniversalMeasure !=nil {return *_dcbg .ST_PositiveUniversalMeasure ;};};return "";};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_gaac Header )AddImage (i _gg .Image )(_gg .ImageRef ,error ){var _fffd _gg .Relationships ;for _dce ,_bfec :=range _gaac ._efff ._abee {if _bfec ==_gaac ._faac {_fffd =_gaac ._efff ._aaa [_dce ];};};_adcf :=_gg .MakeImageRef (i ,&_gaac ._efff .DocBase ,_fffd );if i .Data ==nil &&i .Path ==""{return _adcf ,_de .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _adcf ,_de .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _adcf ,_de .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_gaac ._efff .Images =append (_gaac ._efff .Images ,_adcf );_eecd :=_cg .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_gaac ._efff .Images ),i .Format );_ebed :=_fffd .AddRelationship (_eecd ,_g .ImageType );_adcf .SetRelID (_ebed .X ().IdAttr );return _adcf ,nil ;};

// AddTable adds a new table to the document body.
func (_fcd *Document )AddTable ()Table {_gcbc :=_eg .NewEG_BlockLevelElts ();_fcd ._bbe .Body .EG_BlockLevelElts =append (_fcd ._bbe .Body .EG_BlockLevelElts ,_gcbc );_geffc :=_eg .NewEG_ContentBlockContent ();_gcbc .EG_ContentBlockContent =append (_gcbc .EG_ContentBlockContent ,_geffc );_dgb :=_eg .NewCT_Tbl ();_geffc .Tbl =append (_geffc .Tbl ,_dgb );return Table {_fcd ,_dgb };};func (_faff Endnote )content ()[]*_eg .EG_ContentBlockContent {var _fgea []*_eg .EG_ContentBlockContent ;for _ ,_bdef :=range _faff ._cfcf .EG_BlockLevelElts {_fgea =append (_fgea ,_bdef .EG_ContentBlockContent ...);};return _fgea ;};

// GetWrapPathLineTo return wrapPath lineTo value.
func (_cec AnchorDrawWrapOptions )GetWrapPathLineTo ()[]*_fg .CT_Point2D {return _cec ._dcf };

// SetTextWrapBehindText sets the text wrap to behind text.
func (_ce AnchoredDrawing )SetTextWrapBehindText (){_ce ._ed .Choice =&_eg .WdEG_WrapTypeChoice {};_ce ._ed .Choice .WrapNone =_eg .NewWdCT_WrapNone ();_ce ._ed .BehindDocAttr =true ;_ce ._ed .LayoutInCellAttr =true ;_ce ._ed .AllowOverlapAttr =true ;};func _debd (_aacb *_eg .CT_P ,_daaf *_eg .CT_Hyperlink ,_eedd *TableInfo ,_ebacb *DrawingInfo ,_bcgc []*_eg .EG_ContentRunContent )[]TextItem {_adggg :=[]TextItem {};for _ ,_ccfd :=range _bcgc {if _bbad :=_ccfd .R ;_bbad !=nil {_eafc :=_be .NewBuffer ([]byte {});for _ ,_gece :=range _bbad .EG_RunInnerContent {if _gece .T !=nil &&_gece .T .Content !=""{_eafc .WriteString (_gece .T .Content );};};_adggg =append (_adggg ,TextItem {Text :_eafc .String (),DrawingInfo :_ebacb ,Paragraph :_aacb ,Hyperlink :_daaf ,Run :_bbad ,TableInfo :_eedd });for _ ,_fafb :=range _bbad .Extra {if _bbbbg ,_gdbd :=_fafb .(*_eg .AlternateContentRun );_gdbd {_cfac :=&DrawingInfo {Drawing :_bbbbg .Choice .Drawing };for _ ,_fgcb :=range _cfac .Drawing .Anchor {for _ ,_gdde :=range _fgcb .Graphic .GraphicData .Any {if _deeg ,_accad :=_gdde .(*_eg .WdWsp );_accad {if _deeg .WChoice !=nil {if _fgeb :=_deeg .SpPr ;_fgeb !=nil {if _fdda :=_fgeb .Xfrm ;_fdda !=nil {if _cfad :=_fdda .Ext ;_cfad !=nil {_cfac .Width =_cfad .CxAttr ;_cfac .Height =_cfad .CyAttr ;};};};for _ ,_ffcf :=range _deeg .WChoice .Txbx .TxbxContent .EG_ContentBlockContent {_adggg =append (_adggg ,_dcffd (_ffcf .P ,_eedd ,_cfac )...);};};};};};};};};};return _adggg ;};

// SetHeadingLevel sets a heading level and style based on the level to a
// paragraph.  The default styles for a new unioffice document support headings
// from level 1 to 8.
func (_afbb ParagraphProperties )SetHeadingLevel (idx int ){_afbb .SetStyle (_cg .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",idx ));if _afbb ._cagc .NumPr ==nil {_afbb ._cagc .NumPr =_eg .NewCT_NumPr ();};_afbb ._cagc .NumPr .Ilvl =_eg .NewCT_DecimalNumber ();_afbb ._cagc .NumPr .Ilvl .ValAttr =int64 (idx );};

// IsItalic returns true if the run has been set to italics.
func (_fegeg RunProperties )IsItalic ()bool {return _fegeg .ItalicValue ()==OnOffValueOn };

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_dbg CellBorders )SetInsideVertical (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_dbg ._cgaa .InsideV =_eg .NewCT_Border ();_dgdb (_dbg ._cgaa .InsideV ,t ,c ,thickness );};

// SetPrimaryStyle marks the style as a primary style.
func (_fcdd Style )SetPrimaryStyle (b bool ){if b {_fcdd ._bgdg .QFormat =_eg .NewCT_OnOff ();}else {_fcdd ._bgdg .QFormat =nil ;};};func (_fdca *Document )getWatermarkHeaderInnerContentPictures ()[]*_eg .CT_Picture {var _bbc []*_eg .CT_Picture ;for _ ,_cgbg :=range _fdca .Headers (){for _ ,_baaec :=range _cgbg .X ().EG_ContentBlockContent {for _ ,_gggd :=range _baaec .P {for _ ,_bbdf :=range _gggd .EG_PContent {for _ ,_eaaf :=range _bbdf .EG_ContentRunContent {if _eaaf .R ==nil {continue ;};for _ ,_gaa :=range _eaaf .R .EG_RunInnerContent {if _gaa .Pict ==nil {continue ;};_ccca :=false ;for _ ,_feca :=range _gaa .Pict .Any {_efbe ,_edbb :=_feca .(*_g .XSDAny );if _edbb &&_efbe .XMLName .Local =="\u0073\u0068\u0061p\u0065"{_ccca =true ;};};if _ccca {_bbc =append (_bbc ,_gaa .Pict );};};};};};};};return _bbc ;};

// Paragraph is a paragraph within a document.
type Paragraph struct{_dageg *Document ;_ffae *_eg .CT_P ;};

// MailMerge finds mail merge fields and replaces them with the text provided.  It also removes
// the mail merge source info from the document settings.
func (_dddfb *Document )MailMerge (mergeContent map[string ]string ){_bafg :=_dddfb .mergeFields ();_ffdeb :=map[Paragraph ][]Run {};for _ ,_bedc :=range _bafg {_eadga ,_acfb :=mergeContent [_bedc ._ebca ];if _acfb {if _bedc ._eccd {_eadga =_e .ToUpper (_eadga );}else if _bedc ._ggabg {_eadga =_e .ToLower (_eadga );}else if _bedc ._fde {_eadga =_e .Title (_eadga );}else if _bedc ._cfca {_edbeb :=_be .Buffer {};for _ffab ,_dbdeb :=range _eadga {if _ffab ==0{_edbeb .WriteRune (_f .ToUpper (_dbdeb ));}else {_edbeb .WriteRune (_dbdeb );};};_eadga =_edbeb .String ();};if _eadga !=""&&_bedc ._febb !=""{_eadga =_bedc ._febb +_eadga ;};if _eadga !=""&&_bedc ._effbd !=""{_eadga =_eadga +_bedc ._effbd ;};};if _bedc ._gfbfc {if len (_bedc ._bcaeg .FldSimple )==1&&len (_bedc ._bcaeg .FldSimple [0].EG_PContent )==1&&len (_bedc ._bcaeg .FldSimple [0].EG_PContent [0].EG_ContentRunContent )==1{_dbcgg :=&_eg .EG_ContentRunContent {};_dbcgg .R =_bedc ._bcaeg .FldSimple [0].EG_PContent [0].EG_ContentRunContent [0].R ;_bedc ._bcaeg .FldSimple =nil ;_afgbe :=Run {_dddfb ,_dbcgg .R };_afgbe .ClearContent ();_afgbe .AddText (_eadga );_bedc ._bcaeg .EG_ContentRunContent =append (_bedc ._bcaeg .EG_ContentRunContent ,_dbcgg );};}else {_cggd :=_bedc ._cgdg .Runs ();for _ecdcg :=_bedc ._fgbb ;_ecdcg <=_bedc ._aagd ;_ecdcg ++{if _ecdcg ==_bedc ._gcgc +1{_cggd [_ecdcg ].ClearContent ();_cggd [_ecdcg ].AddText (_eadga );}else {_ffdeb [_bedc ._cgdg ]=append (_ffdeb [_bedc ._cgdg ],_cggd [_ecdcg ]);};};};};for _facd ,_cecf :=range _ffdeb {for _ ,_fdeg :=range _cecf {_facd .RemoveRun (_fdeg );};};_dddfb .Settings .RemoveMailMerge ();};

// Properties returns the numbering level paragraph properties.
func (_ebeb NumberingLevel )Properties ()ParagraphStyleProperties {if _ebeb ._dbba .PPr ==nil {_ebeb ._dbba .PPr =_eg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_ebeb ._dbba .PPr };};

// X returns the inner wrapped XML type.
func (_fa AnchoredDrawing )X ()*_eg .WdAnchor {return _fa ._ed };

// SetXOffset sets the X offset for an image relative to the origin.
func (_eb AnchoredDrawing )SetXOffset (x _fd .Distance ){_eb ._ed .PositionH .Choice =&_eg .WdCT_PosHChoice {};_eb ._ed .PositionH .Choice .PosOffset =_g .Int32 (int32 (x /_fd .EMU ));};func (_cdad *WatermarkText )getShape ()*_g .XSDAny {return _cdad .getInnerElement ("\u0073\u0068\u0061p\u0065");};

// SetImprint sets the run to imprinted text.
func (_gacec RunProperties )SetImprint (b bool ){if !b {_gacec ._efdg .Imprint =nil ;}else {_gacec ._efdg .Imprint =_eg .NewCT_OnOff ();};};

// Headers returns the headers defined in the document.
func (_cd *Document )Headers ()[]Header {_ffd :=[]Header {};for _ ,_daf :=range _cd ._abee {_ffd =append (_ffd ,Header {_cd ,_daf });};return _ffd ;};

// UnderlineColor returns the hex color value of run underline.
func (_bagfa RunProperties )UnderlineColor ()string {if _feda :=_bagfa ._efdg .U ;_feda !=nil {_fbggf :=_feda .ColorAttr ;if _fbggf !=nil &&_fbggf .ST_HexColorRGB !=nil {return *_fbggf .ST_HexColorRGB ;};};return "";};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_dgabe TableProperties )SetCellSpacingPercent (pct float64 ){_dgabe ._gcdd .TblCellSpacing =_eg .NewCT_TblWidth ();_dgabe ._gcdd .TblCellSpacing .TypeAttr =_eg .ST_TblWidthPct ;_dgabe ._gcdd .TblCellSpacing .WAttr =&_eg .ST_MeasurementOrPercent {};_dgabe ._gcdd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_dgabe ._gcdd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};

// Paragraphs returns all of the paragraphs in the document body including tables.
func (_eabf *Document )Paragraphs ()[]Paragraph {_gedg :=[]Paragraph {};if _eabf ._bbe .Body ==nil {return nil ;};for _ ,_cfgd :=range _eabf ._bbe .Body .EG_BlockLevelElts {for _ ,_ffge :=range _cfgd .EG_ContentBlockContent {for _ ,_dgbf :=range _ffge .P {_gedg =append (_gedg ,Paragraph {_eabf ,_dgbf });};};};for _ ,_badab :=range _eabf .Tables (){for _ ,_bdfg :=range _badab .Rows (){for _ ,_bcea :=range _bdfg .Cells (){_gedg =append (_gedg ,_bcea .Paragraphs ()...);};};};return _gedg ;};

// IsChecked returns true if a FormFieldTypeCheckBox is checked.
func (_eedae FormField )IsChecked ()bool {if _eedae ._aefe .CheckBox ==nil {return false ;};if _eedae ._aefe .CheckBox .Checked !=nil {return true ;};return false ;};

// EastAsiaFont returns the name of paragraph font family for East Asia.
func (_bbddc ParagraphProperties )EastAsiaFont ()string {if _gegb :=_bbddc ._cagc .RPr .RFonts ;_gegb !=nil {if _gegb .EastAsiaAttr !=nil {return *_gegb .EastAsiaAttr ;};};return "";};

// Settings controls the document settings.
type Settings struct{_cfde *_eg .Settings };

// Paragraphs returns the paragraphs defined in a footer.
func (_cccae Footer )Paragraphs ()[]Paragraph {_cfgf :=[]Paragraph {};for _ ,_eeaa :=range _cccae ._dbac .EG_ContentBlockContent {for _ ,_ddg :=range _eeaa .P {_cfgf =append (_cfgf ,Paragraph {_cccae ._ddbab ,_ddg });};};for _ ,_dbgb :=range _cccae .Tables (){for _ ,_cgcc :=range _dbgb .Rows (){for _ ,_bgbb :=range _cgcc .Cells (){_cfgf =append (_cfgf ,_bgbb .Paragraphs ()...);};};};return _cfgf ;};

// Copy makes a deep copy of the document by saving and reading it back.
// It can be useful to avoid sharing common data between two documents.
func (_abd *Document )Copy ()(*Document ,error ){_fcaf :=_be .NewBuffer ([]byte {});_fcca :=_abd .save (_fcaf ,_abd ._fbg );if _fcca !=nil {return nil ,_fcca ;};_adf :=_fcaf .Bytes ();_fbef :=_be .NewReader (_adf );return _bffb (_fbef ,int64 (_fbef .Len ()),_abd ._fbg );};

// Run is a run of text within a paragraph that shares the same formatting.
type Run struct{_cddd *Document ;_fced *_eg .CT_R ;};

// SizeValue returns the value of run font size in points.
func (_adbf RunProperties )SizeValue ()float64 {if _caff :=_adbf ._efdg .Sz ;_caff !=nil {_geaa :=_caff .ValAttr ;if _geaa .ST_UnsignedDecimalNumber !=nil {return float64 (*_geaa .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// AddFieldWithFormatting adds a field (automatically computed text) to the
// document with field specifc formatting.
func (_aefb Run )AddFieldWithFormatting (code string ,fmt string ,isDirty bool ){_ggabc :=_aefb .newIC ();_ggabc .FldChar =_eg .NewCT_FldChar ();_ggabc .FldChar .FldCharTypeAttr =_eg .ST_FldCharTypeBegin ;if isDirty {_ggabc .FldChar .DirtyAttr =&_gee .ST_OnOff {};_ggabc .FldChar .DirtyAttr .Bool =_g .Bool (true );};_ggabc =_aefb .newIC ();_ggabc .InstrText =_eg .NewCT_Text ();if fmt !=""{_ggabc .InstrText .Content =code +"\u0020"+fmt ;}else {_ggabc .InstrText .Content =code ;};_ggabc =_aefb .newIC ();_ggabc .FldChar =_eg .NewCT_FldChar ();_ggabc .FldChar .FldCharTypeAttr =_eg .ST_FldCharTypeEnd ;};

// CellProperties are a table cells properties within a document.
type CellProperties struct{_cgb *_eg .CT_TcPr };

// Paragraphs returns the paragraphs defined in an endnote.
func (_dabd Endnote )Paragraphs ()[]Paragraph {_ggbe :=[]Paragraph {};for _ ,_gdgef :=range _dabd .content (){for _ ,_bdgb :=range _gdgef .P {_ggbe =append (_ggbe ,Paragraph {_dabd ._cdde ,_bdgb });};};return _ggbe ;};

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_dgfd ParagraphProperties )SetFirstLineIndent (m _fd .Distance ){if _dgfd ._cagc .Ind ==nil {_dgfd ._cagc .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_dgfd ._cagc .Ind .FirstLineAttr =nil ;}else {_dgfd ._cagc .Ind .FirstLineAttr =&_gee .ST_TwipsMeasure {};_dgfd ._cagc .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_fd .Twips ));};};

// Bold returns true if paragraph font is bold.
func (_aacbf ParagraphProperties )Bold ()bool {_dagc :=_aacbf ._cagc .RPr ;return _dfcc (_dagc .B )||_dfcc (_dagc .BCs );};

// StructuredDocumentTags returns the structured document tags in the document
// which are commonly used in document templates.
func (_dbc *Document )StructuredDocumentTags ()[]StructuredDocumentTag {_ggdb :=[]StructuredDocumentTag {};for _ ,_cbd :=range _dbc ._bbe .Body .EG_BlockLevelElts {for _ ,_ddad :=range _cbd .EG_ContentBlockContent {if _ddad .Sdt !=nil {_ggdb =append (_ggdb ,StructuredDocumentTag {_dbc ,_ddad .Sdt });};};};return _ggdb ;};

// Endnotes returns the endnotes defined in the document.
func (_acb *Document )Endnotes ()[]Endnote {_aaea :=[]Endnote {};for _ ,_gaed :=range _acb ._fdb .CT_Endnotes .Endnote {_aaea =append (_aaea ,Endnote {_acb ,_gaed });};return _aaea ;};

// Footers returns the footers defined in the document.
func (_gdg *Document )Footers ()[]Footer {_ffa :=[]Footer {};for _ ,_gfd :=range _gdg ._bfe {_ffa =append (_ffa ,Footer {_gdg ,_gfd });};return _ffa ;};

// Levels returns all of the numbering levels defined in the definition.
func (_ddea NumberingDefinition )Levels ()[]NumberingLevel {_dgcc :=[]NumberingLevel {};for _ ,_ebfb :=range _ddea ._cafg .Lvl {_dgcc =append (_dgcc ,NumberingLevel {_ebfb });};return _dgcc ;};

// ParagraphProperties returns the paragraph style properties.
func (_bbcd Style )ParagraphProperties ()ParagraphStyleProperties {if _bbcd ._bgdg .PPr ==nil {_bbcd ._bgdg .PPr =_eg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_bbcd ._bgdg .PPr };};

// SetHeight allows controlling the height of a row within a table.
func (_afbg RowProperties )SetHeight (ht _fd .Distance ,rule _eg .ST_HeightRule ){if rule ==_eg .ST_HeightRuleUnset {_afbg ._adbb .TrHeight =nil ;}else {_adcbf :=_eg .NewCT_Height ();_adcbf .HRuleAttr =rule ;_adcbf .ValAttr =&_gee .ST_TwipsMeasure {};_adcbf .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (ht /_fd .Twips ));_afbg ._adbb .TrHeight =[]*_eg .CT_Height {_adcbf };};};func (_gbg *Document )InsertTableBefore (relativeTo Paragraph )Table {return _gbg .insertTable (relativeTo ,true );};

// StructuredDocumentTag are a tagged bit of content in a document.
type StructuredDocumentTag struct{_bgeeg *Document ;_fbeac *_eg .CT_SdtBlock ;};

// AddParagraph adds a paragraph to the footnote.
func (_cbcg Footnote )AddParagraph ()Paragraph {_deea :=_eg .NewEG_ContentBlockContent ();_fdag :=len (_cbcg ._fafc .EG_BlockLevelElts [0].EG_ContentBlockContent );_cbcg ._fafc .EG_BlockLevelElts [0].EG_ContentBlockContent =append (_cbcg ._fafc .EG_BlockLevelElts [0].EG_ContentBlockContent ,_deea );_eeda :=_eg .NewCT_P ();var _fbed *_eg .CT_String ;if _fdag !=0{_feaa :=len (_cbcg ._fafc .EG_BlockLevelElts [0].EG_ContentBlockContent [_fdag -1].P );_fbed =_cbcg ._fafc .EG_BlockLevelElts [0].EG_ContentBlockContent [_fdag -1].P [_feaa -1].PPr .PStyle ;}else {_fbed =_eg .NewCT_String ();_fbed .ValAttr ="\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065";};_deea .P =append (_deea .P ,_eeda );_eagd :=Paragraph {_cbcg ._aaga ,_eeda };_eagd ._ffae .PPr =_eg .NewCT_PPr ();_eagd ._ffae .PPr .PStyle =_fbed ;_eagd ._ffae .PPr .RPr =_eg .NewCT_ParaRPr ();return _eagd ;};

// Underline returns the type of run underline.
func (_adbg RunProperties )Underline ()_eg .ST_Underline {if _aabc :=_adbg ._efdg .U ;_aabc !=nil {return _aabc .ValAttr ;};return 0;};

// TableProperties are the properties for a table within a document
type TableProperties struct{_gcdd *_eg .CT_TblPr };

// NumberingLevel is the definition for numbering for a particular level within
// a NumberingDefinition.
type NumberingLevel struct{_dbba *_eg .CT_Lvl };

// SetLastColumn controls the conditional formatting for the last column in a table.
func (_gbbcb TableLook )SetLastColumn (on bool ){if !on {_gbbcb ._dbgfg .LastColumnAttr =&_gee .ST_OnOff {};_gbbcb ._dbgfg .LastColumnAttr .ST_OnOff1 =_gee .ST_OnOff1Off ;}else {_gbbcb ._dbgfg .LastColumnAttr =&_gee .ST_OnOff {};_gbbcb ._dbgfg .LastColumnAttr .ST_OnOff1 =_gee .ST_OnOff1On ;};};

// SetOrigin sets the origin of the image.  It defaults to ST_RelFromHPage and
// ST_RelFromVPage
func (_ded AnchoredDrawing )SetOrigin (h _eg .WdST_RelFromH ,v _eg .WdST_RelFromV ){_ded ._ed .PositionH .RelativeFromAttr =h ;_ded ._ed .PositionV .RelativeFromAttr =v ;};

// SetThemeColor sets the color from the theme.
func (_bce Color )SetThemeColor (t _eg .ST_ThemeColor ){_bce ._gfbf .ThemeColorAttr =t };

// ParagraphProperties returns the paragraph properties controlling text formatting within the table.
func (_cgcea TableConditionalFormatting )ParagraphProperties ()ParagraphStyleProperties {if _cgcea ._cdff .PPr ==nil {_cgcea ._cdff .PPr =_eg .NewCT_PPrGeneral ();};return ParagraphStyleProperties {_cgcea ._cdff .PPr };};

// Strike returns true if paragraph is striked.
func (_adbc ParagraphProperties )Strike ()bool {return _dfcc (_adbc ._cagc .RPr .Strike )};

// SetHangingIndent controls the indentation of the non-first lines in a paragraph.
func (_gcdac ParagraphProperties )SetHangingIndent (m _fd .Distance ){if _gcdac ._cagc .Ind ==nil {_gcdac ._cagc .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_gcdac ._cagc .Ind .HangingAttr =nil ;}else {_gcdac ._cagc .Ind .HangingAttr =&_gee .ST_TwipsMeasure {};_gcdac ._cagc .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_fd .Twips ));};};

// Spacing returns the paragraph spacing settings.
func (_fgcdc ParagraphProperties )Spacing ()ParagraphSpacing {if _fgcdc ._cagc .Spacing ==nil {_fgcdc ._cagc .Spacing =_eg .NewCT_Spacing ();};return ParagraphSpacing {_fgcdc ._cagc .Spacing };};

// SetColumnBandSize sets the number of Columns in the column band
func (_fbbb TableStyleProperties )SetColumnBandSize (cols int64 ){_fbbb ._eggdf .TblStyleColBandSize =_eg .NewCT_DecimalNumber ();_fbbb ._eggdf .TblStyleColBandSize .ValAttr =cols ;};

// X returns the inner wrapped XML type.
func (_cdac Fonts )X ()*_eg .CT_Fonts {return _cdac ._fabcg };

// ExtractText returns text from the document as a DocText object.
func (_gccd *Document )ExtractText ()*DocText {_cbdda :=[]TextItem {};for _ ,_dccfb :=range _gccd ._bbe .Body .EG_BlockLevelElts {_cbdda =append (_cbdda ,_fedb (_dccfb .EG_ContentBlockContent ,nil )...);};return &DocText {Items :_cbdda };};

// SizeValue returns the value of paragraph font size in points.
func (_eecgc ParagraphProperties )SizeValue ()float64 {if _beed :=_eecgc ._cagc .RPr .Sz ;_beed !=nil {_acbc :=_beed .ValAttr ;if _acbc .ST_UnsignedDecimalNumber !=nil {return float64 (*_acbc .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// Table is a table within a document.
type Table struct{_gdea *Document ;_gdae *_eg .CT_Tbl ;};

// SetStart sets the cell start margin
func (_cfga CellMargins )SetStart (d _fd .Distance ){_cfga ._dge .Start =_eg .NewCT_TblWidth ();_bcb (_cfga ._dge .Start ,d );};

// SetBottom sets the cell bottom margin
func (_ebb CellMargins )SetBottom (d _fd .Distance ){_ebb ._dge .Bottom =_eg .NewCT_TblWidth ();_bcb (_ebb ._dge .Bottom ,d );};

// SetAlignment controls the paragraph alignment
func (_bcfg ParagraphStyleProperties )SetAlignment (align _eg .ST_Jc ){if align ==_eg .ST_JcUnset {_bcfg ._efcg .Jc =nil ;}else {_bcfg ._efcg .Jc =_eg .NewCT_Jc ();_bcfg ._efcg .Jc .ValAttr =align ;};};

// RunProperties returns the run style properties.
func (_badag Style )RunProperties ()RunProperties {if _badag ._bgdg .RPr ==nil {_badag ._bgdg .RPr =_eg .NewCT_RPr ();};return RunProperties {_badag ._bgdg .RPr };};

// InsertParagraphBefore adds a new empty paragraph before the relativeTo
// paragraph.
func (_aab *Document )InsertParagraphBefore (relativeTo Paragraph )Paragraph {return _aab .insertParagraph (relativeTo ,true );};

// SetAlignment sets the paragraph alignment
func (_dbadf NumberingLevel )SetAlignment (j _eg .ST_Jc ){if j ==_eg .ST_JcUnset {_dbadf ._dbba .LvlJc =nil ;}else {_dbadf ._dbba .LvlJc =_eg .NewCT_Jc ();_dbadf ._dbba .LvlJc .ValAttr =j ;};};func (_gebgf Paragraph )addBeginFldChar (_dgee string )*_eg .CT_FFData {_agfa :=_gebgf .addFldChar ();_agfa .FldCharTypeAttr =_eg .ST_FldCharTypeBegin ;_agfa .FfData =_eg .NewCT_FFData ();_gecdb :=_eg .NewCT_FFName ();_gecdb .ValAttr =&_dgee ;_agfa .FfData .Name =[]*_eg .CT_FFName {_gecdb };return _agfa .FfData ;};

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_bacba TableBorders )SetInsideHorizontal (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_bacba ._cddae .InsideH =_eg .NewCT_Border ();_dgdb (_bacba ._cddae .InsideH ,t ,c ,thickness );};

// RowProperties are the properties for a row within a table
type RowProperties struct{_adbb *_eg .CT_TrPr };

// RunProperties returns the RunProperties controlling numbering level font, etc.
func (_caaa NumberingLevel )RunProperties ()RunProperties {if _caaa ._dbba .RPr ==nil {_caaa ._dbba .RPr =_eg .NewCT_RPr ();};return RunProperties {_caaa ._dbba .RPr };};

// ItalicValue returns the precise nature of the italic setting (unset, off or on).
func (_bfebb RunProperties )ItalicValue ()OnOffValue {return _ddabg (_bfebb ._efdg .I )};

// Properties returns the row properties.
func (_gffe Row )Properties ()RowProperties {if _gffe ._cgaf .TrPr ==nil {_gffe ._cgaf .TrPr =_eg .NewCT_TrPr ();};return RowProperties {_gffe ._cgaf .TrPr };};func (_aegg Footnote )id ()int64 {return _aegg ._fafc .IdAttr };

// Definitions returns the defined numbering definitions.
func (_bdfe Numbering )Definitions ()[]NumberingDefinition {_fbbe :=[]NumberingDefinition {};for _ ,_befg :=range _bdfe ._dgbab .AbstractNum {_fbbe =append (_fbbe ,NumberingDefinition {_befg });};return _fbbe ;};

// SetFollowImageShape sets wrapPath to follow image shape,
// if nil return wrapPath that follow image size.
func (_afd AnchorDrawWrapOptions )SetFollowImageShape (val bool ){_afd ._bbg =val ;if !val {_adb ,_abf :=_bdg ();_afd ._adg =_adb ;_afd ._dcf =_abf ;};};

// SetPageSizeAndOrientation sets the page size and orientation for a section.
func (_gcdg Section )SetPageSizeAndOrientation (w ,h _fd .Distance ,orientation _eg .ST_PageOrientation ){if _gcdg ._ccgc .PgSz ==nil {_gcdg ._ccgc .PgSz =_eg .NewCT_PageSz ();};_gcdg ._ccgc .PgSz .OrientAttr =orientation ;if orientation ==_eg .ST_PageOrientationLandscape {_gcdg ._ccgc .PgSz .WAttr =&_gee .ST_TwipsMeasure {};_gcdg ._ccgc .PgSz .WAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (h /_fd .Twips ));_gcdg ._ccgc .PgSz .HAttr =&_gee .ST_TwipsMeasure {};_gcdg ._ccgc .PgSz .HAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (w /_fd .Twips ));}else {_gcdg ._ccgc .PgSz .WAttr =&_gee .ST_TwipsMeasure {};_gcdg ._ccgc .PgSz .WAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (w /_fd .Twips ));_gcdg ._ccgc .PgSz .HAttr =&_gee .ST_TwipsMeasure {};_gcdg ._ccgc .PgSz .HAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (h /_fd .Twips ));};};func (_aba *Document )insertTable (_bcf Paragraph ,_dac bool )Table {_cge :=_aba ._bbe .Body ;if _cge ==nil {return _aba .AddTable ();};_ebgd :=_bcf .X ();for _bda ,_cbgaa :=range _cge .EG_BlockLevelElts {for _ ,_gfdb :=range _cbgaa .EG_ContentBlockContent {for _dbe ,_gfbg :=range _gfdb .P {if _gfbg ==_ebgd {_gbf :=_eg .NewCT_Tbl ();_cebb :=_eg .NewEG_BlockLevelElts ();_edb :=_eg .NewEG_ContentBlockContent ();_cebb .EG_ContentBlockContent =append (_cebb .EG_ContentBlockContent ,_edb );_edb .Tbl =append (_edb .Tbl ,_gbf );_cge .EG_BlockLevelElts =append (_cge .EG_BlockLevelElts ,nil );if _dac {copy (_cge .EG_BlockLevelElts [_bda +1:],_cge .EG_BlockLevelElts [_bda :]);_cge .EG_BlockLevelElts [_bda ]=_cebb ;if _dbe !=0{_age :=_eg .NewEG_BlockLevelElts ();_fdcc :=_eg .NewEG_ContentBlockContent ();_age .EG_ContentBlockContent =append (_age .EG_ContentBlockContent ,_fdcc );_fdcc .P =_gfdb .P [:_dbe ];_cge .EG_BlockLevelElts =append (_cge .EG_BlockLevelElts ,nil );copy (_cge .EG_BlockLevelElts [_bda +1:],_cge .EG_BlockLevelElts [_bda :]);_cge .EG_BlockLevelElts [_bda ]=_age ;};_gfdb .P =_gfdb .P [_dbe :];}else {copy (_cge .EG_BlockLevelElts [_bda +2:],_cge .EG_BlockLevelElts [_bda +1:]);_cge .EG_BlockLevelElts [_bda +1]=_cebb ;if _dbe !=len (_gfdb .P )-1{_dedd :=_eg .NewEG_BlockLevelElts ();_egd :=_eg .NewEG_ContentBlockContent ();_dedd .EG_ContentBlockContent =append (_dedd .EG_ContentBlockContent ,_egd );_egd .P =_gfdb .P [_dbe +1:];_cge .EG_BlockLevelElts =append (_cge .EG_BlockLevelElts ,nil );copy (_cge .EG_BlockLevelElts [_bda +3:],_cge .EG_BlockLevelElts [_bda +2:]);_cge .EG_BlockLevelElts [_bda +2]=_dedd ;};_gfdb .P =_gfdb .P [:_dbe +1];};return Table {_aba ,_gbf };};};for _ ,_ecdf :=range _gfdb .Tbl {_efd :=_fbb (_ecdf ,_ebgd ,_dac );if _efd !=nil {return Table {_aba ,_efd };};};};};return _aba .AddTable ();};

// SetSize sets the size of the displayed image on the page.
func (_egf AnchoredDrawing )SetSize (w ,h _fd .Distance ){_egf ._ed .Extent .CxAttr =int64 (float64 (w *_fd .Pixel72 )/_fd .EMU );_egf ._ed .Extent .CyAttr =int64 (float64 (h *_fd .Pixel72 )/_fd .EMU );};

// Text returns text from the document as one string separated with line breaks.
func (_ededd *DocText )Text ()string {_dccga :=_be .NewBuffer ([]byte {});for _ ,_bcgb :=range _ededd .Items {if _bcgb .Text !=""{_dccga .WriteString (_bcgb .Text );_dccga .WriteString ("\u000a");};};return _dccga .String ();};

// CharacterSpacingValue returns the value of characters spacing in twips (1/20 of point).
func (_ccdc ParagraphProperties )CharacterSpacingValue ()int64 {if _gdgca :=_ccdc ._cagc .RPr .Spacing ;_gdgca !=nil {_ebec :=_gdgca .ValAttr ;if _ebec .Int64 !=nil {return *_ebec .Int64 ;};};return int64 (0);};

// NewWatermarkPicture generates new WatermarkPicture.
func NewWatermarkPicture ()WatermarkPicture {_feec :=_ggg .NewShapetype ();_ggabgg :=_ggg .NewEG_ShapeElements ();_ggabgg .Formulas =_cedf ();_ggabgg .Path =_dfgcc ();_ggabgg .Lock =_decg ();_feec .EG_ShapeElements =[]*_ggg .EG_ShapeElements {_ggabgg };var (_edca ="\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_ccef ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_abed =float32 (75.0);_ecea ="\u006d\u0040\u0034\u00405l\u0040\u0034\u0040\u0031\u0031\u0040\u0039\u0040\u0031\u0031\u0040\u0039\u0040\u0035x\u0065";);_feec .IdAttr =&_edca ;_feec .CoordsizeAttr =&_ccef ;_feec .SptAttr =&_abed ;_feec .PreferrelativeAttr =_gee .ST_TrueFalseTrue ;_feec .PathAttr =&_ecea ;_feec .FilledAttr =_gee .ST_TrueFalseFalse ;_feec .StrokedAttr =_gee .ST_TrueFalseFalse ;_agca :=_ggg .NewShape ();_eagb :=_ggg .NewEG_ShapeElements ();_eagb .Imagedata =_abgb ();_agca .EG_ShapeElements =[]*_ggg .EG_ShapeElements {_eagb };var (_cgdgc ="\u0057\u006f\u0072\u0064\u0050\u0069\u0063\u0074\u0075\u0072e\u0057\u0061\u0074\u0065\u0072\u006d\u0061r\u006b\u0031\u0036\u0033\u0032\u0033\u0031\u0036\u0035\u0039\u0035";_ffaeg ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_abcb ="#\u005f\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0037\u0035";_edfg ="";_cbcc ="\u0070os\u0069t\u0069o\u006e\u003a\u0061\u0062\u0073\u006fl\u0075\u0074\u0065\u003bm\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0030\u003bma\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0030\u0070\u0074;\u0068e\u0069\u0067\u0068\u0074\u003a\u0030\u0070\u0074\u003b\u007a\u002d\u0069\u006ed\u0065\u0078:\u002d\u0032\u00351\u0036\u0035\u0038\u0032\u0034\u0030\u003b\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003bm\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002drela\u0074\u0069\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065\u0072t\u0069c\u0061l\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e-\u0076\u0065r\u0074\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e";);_agca .IdAttr =&_cgdgc ;_agca .SpidAttr =&_ffaeg ;_agca .TypeAttr =&_abcb ;_agca .AltAttr =&_edfg ;_agca .StyleAttr =&_cbcc ;_agca .AllowincellAttr =_gee .ST_TrueFalseFalse ;_beaf :=_eg .NewCT_Picture ();_beaf .Any =[]_g .Any {_feec ,_agca };return WatermarkPicture {_gfbgg :_beaf ,_aebc :_agca ,_dbbgb :_feec };};func (_ggcd *Document )validateTableCells ()error {for _ ,_aecc :=range _ggcd ._bbe .Body .EG_BlockLevelElts {for _ ,_deac :=range _aecc .EG_ContentBlockContent {for _ ,_cdcg :=range _deac .Tbl {for _ ,_aef :=range _cdcg .EG_ContentRowContent {for _ ,_aafd :=range _aef .Tr {_efa :=false ;for _ ,_fdae :=range _aafd .EG_ContentCellContent {_feab :=false ;for _ ,_eeg :=range _fdae .Tc {_efa =true ;for _ ,_acgb :=range _eeg .EG_BlockLevelElts {for _ ,_ddaf :=range _acgb .EG_ContentBlockContent {if len (_ddaf .P )> 0{_feab =true ;break ;};};};};if !_feab {return _de .New ("t\u0061\u0062\u006c\u0065\u0020\u0063e\u006c\u006c\u0020\u006d\u0075\u0073t\u0020\u0063\u006f\u006e\u0074\u0061\u0069n\u0020\u0061\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061p\u0068");};};if !_efa {return _de .New ("\u0074\u0061b\u006c\u0065\u0020\u0072\u006f\u0077\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0020ce\u006c\u006c");};};};};};};return nil ;};

// SetTopPct sets the cell top margin
func (_efe CellMargins )SetTopPct (pct float64 ){_efe ._dge .Top =_eg .NewCT_TblWidth ();_cbbg (_efe ._dge .Top ,pct );};func _gcab (_fead *_eg .CT_P ,_eaeg *_eg .CT_Hyperlink ,_gace *TableInfo ,_gfbe *DrawingInfo ,_fcafc []*_eg .EG_PContent )[]TextItem {if len (_fcafc )==0{return []TextItem {TextItem {Text :"",DrawingInfo :_gfbe ,Paragraph :_fead ,Hyperlink :_eaeg ,Run :nil ,TableInfo :_gace }};};_eedg :=[]TextItem {};for _ ,_dcccf :=range _fcafc {for _ ,_ddfe :=range _dcccf .FldSimple {if _ddfe !=nil {_eedg =append (_eedg ,_gcab (_fead ,_eaeg ,_gace ,_gfbe ,_ddfe .EG_PContent )...);};};if _eabg :=_dcccf .Hyperlink ;_eabg !=nil {_eedg =append (_eedg ,_debd (_fead ,_eabg ,_gace ,_gfbe ,_eabg .EG_ContentRunContent )...);};_eedg =append (_eedg ,_debd (_fead ,nil ,_gace ,_gfbe ,_dcccf .EG_ContentRunContent )...);};return _eedg ;};

// GetImage returns the ImageRef associated with an AnchoredDrawing.
func (_gef AnchoredDrawing )GetImage ()(_gg .ImageRef ,bool ){_ea :=_gef ._ed .Graphic .GraphicData .Any ;if len (_ea )> 0{_deb ,_cbb :=_ea [0].(*_bd .Pic );if _cbb {if _deb .BlipFill !=nil &&_deb .BlipFill .Blip !=nil &&_deb .BlipFill .Blip .EmbedAttr !=nil {return _gef ._aa .GetImageByRelID (*_deb .BlipFill .Blip .EmbedAttr );};};};return _gg .ImageRef {},false ;};

// ComplexSizeValue returns the value of run font size for complex fonts in points.
func (_egcf RunProperties )ComplexSizeValue ()float64 {if _abafa :=_egcf ._efdg .SzCs ;_abafa !=nil {_adegg :=_abafa .ValAttr ;if _adegg .ST_UnsignedDecimalNumber !=nil {return float64 (*_adegg .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetEmboss sets the run to embossed text.
func (_bdbd RunProperties )SetEmboss (b bool ){if !b {_bdbd ._efdg .Emboss =nil ;}else {_bdbd ._efdg .Emboss =_eg .NewCT_OnOff ();};};

// X returns the inner wml.CT_TblBorders
func (_fbecg TableBorders )X ()*_eg .CT_TblBorders {return _fbecg ._cddae };

// SetLayout controls the table layout. wml.ST_TblLayoutTypeAutofit corresponds
// to "Automatically resize to fit contents" being checked, while
// wml.ST_TblLayoutTypeFixed corresponds to it being unchecked.
func (_cgbge TableProperties )SetLayout (l _eg .ST_TblLayoutType ){if l ==_eg .ST_TblLayoutTypeUnset ||l ==_eg .ST_TblLayoutTypeAutofit {_cgbge ._gcdd .TblLayout =nil ;}else {_cgbge ._gcdd .TblLayout =_eg .NewCT_TblLayoutType ();_cgbge ._gcdd .TblLayout .TypeAttr =l ;};};

// SetNextStyle sets the style that the next paragraph will use.
func (_bbaeg Style )SetNextStyle (name string ){if name ==""{_bbaeg ._bgdg .Next =nil ;}else {_bbaeg ._bgdg .Next =_eg .NewCT_String ();_bbaeg ._bgdg .Next .ValAttr =name ;};};

// X returns the inner wrapped XML type.
func (_bdae Paragraph )X ()*_eg .CT_P {return _bdae ._ffae };

// SetFirstLineIndent controls the indentation of the first line in a paragraph.
func (_ggccc Paragraph )SetFirstLineIndent (m _fd .Distance ){_ggccc .ensurePPr ();_cdbc :=_ggccc ._ffae .PPr ;if _cdbc .Ind ==nil {_cdbc .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_cdbc .Ind .FirstLineAttr =nil ;}else {_cdbc .Ind .FirstLineAttr =&_gee .ST_TwipsMeasure {};_cdbc .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_fd .Twips ));};};func (_ggcc *Document )validateBookmarks ()error {_eda :=make (map[string ]struct{});for _ ,_cef :=range _ggcc .Bookmarks (){if _ ,_facg :=_eda [_cef .Name ()];_facg {return _cg .Errorf ("d\u0075\u0070\u006c\u0069\u0063\u0061t\u0065\u0020\u0062\u006f\u006f\u006b\u006d\u0061\u0072k\u0020\u0025\u0073 \u0066o\u0075\u006e\u0064",_cef .Name ());};_eda [_cef .Name ()]=struct{}{};};return nil ;};

// AddEndnote will create a new endnote and attach it to the Paragraph in the
// location at the end of the previous run (endnotes create their own run within
// the paragraph. The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the endnote later.
func (_dgfe Paragraph )AddEndnote (text string )Endnote {var _cgcd int64 ;if _dgfe ._dageg .HasEndnotes (){for _ ,_fggf :=range _dgfe ._dageg .Endnotes (){if _fggf .id ()> _cgcd {_cgcd =_fggf .id ();};};_cgcd ++;}else {_cgcd =0;_dgfe ._dageg ._fdb =&_eg .Endnotes {};};_gacg :=_eg .NewCT_FtnEdn ();_cacf :=_eg .NewCT_FtnEdnRef ();_cacf .IdAttr =_cgcd ;_dgfe ._dageg ._fdb .CT_Endnotes .Endnote =append (_dgfe ._dageg ._fdb .CT_Endnotes .Endnote ,_gacg );_gdedd :=_dgfe .AddRun ();_fagg :=_gdedd .Properties ();_fagg .SetStyle ("\u0045\u006e\u0064\u006e\u006f\u0074\u0065\u0041\u006e\u0063\u0068\u006f\u0072");_gdedd ._fced .EG_RunInnerContent =[]*_eg .EG_RunInnerContent {_eg .NewEG_RunInnerContent ()};_gdedd ._fced .EG_RunInnerContent [0].EndnoteReference =_cacf ;_aaaa :=Endnote {_dgfe ._dageg ,_gacg };_aaaa ._cfcf .IdAttr =_cgcd ;_aaaa ._cfcf .EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};_dabba :=_aaaa .AddParagraph ();_dabba .Properties ().SetStyle ("\u0045n\u0064\u006e\u006f\u0074\u0065");_dabba ._ffae .PPr .RPr =_eg .NewCT_ParaRPr ();_aeaf :=_dabba .AddRun ();_aeaf .AddTab ();_aeaf .AddText (text );return _aaaa ;};

// GetHeader gets a section Header for given type t [ST_HdrFtrDefault, ST_HdrFtrEven, ST_HdrFtrFirst]
func (_dcbf Section )GetHeader (t _eg .ST_HdrFtr )(Header ,bool ){for _ ,_afgf :=range _dcbf ._ccgc .EG_HdrFtrReferences {if _afgf .HeaderReference .TypeAttr ==t {for _ ,_bebf :=range _dcbf ._gbfe .Headers (){_gegg :=_dcbf ._gbfe ._ccd .FindRIDForN (_bebf .Index (),_g .HeaderType );if _gegg ==_afgf .HeaderReference .IdAttr {return _bebf ,true ;};};};};return Header {},false ;};

// SetLayoutInCell sets the layoutInCell attribute of anchor.
func (_gba AnchoredDrawing )SetLayoutInCell (val bool ){_gba ._ed .LayoutInCellAttr =val };

// TableConditionalFormatting controls the conditional formatting within a table
// style.
type TableConditionalFormatting struct{_cdff *_eg .CT_TblStylePr };

// Shadow returns true if run shadow is on.
func (_cfcg RunProperties )Shadow ()bool {return _dfcc (_cfcg ._efdg .Shadow )};

// RemoveParagraph removes a paragraph from a document.
func (_gbe *Document )RemoveParagraph (p Paragraph ){if _gbe ._bbe .Body ==nil {return ;};for _ ,_ccba :=range _gbe ._bbe .Body .EG_BlockLevelElts {for _ ,_edfed :=range _ccba .EG_ContentBlockContent {for _fegb ,_fgg :=range _edfed .P {if _fgg ==p ._ffae {copy (_edfed .P [_fegb :],_edfed .P [_fegb +1:]);_edfed .P =_edfed .P [0:len (_edfed .P )-1];return ;};};if _edfed .Sdt !=nil &&_edfed .Sdt .SdtContent !=nil &&_edfed .Sdt .SdtContent .P !=nil {for _abg ,_gbea :=range _edfed .Sdt .SdtContent .P {if _gbea ==p ._ffae {copy (_edfed .P [_abg :],_edfed .P [_abg +1:]);_edfed .P =_edfed .P [0:len (_edfed .P )-1];return ;};};};};};for _ ,_bdac :=range _gbe .Tables (){for _ ,_fbc :=range _bdac .Rows (){for _ ,_aca :=range _fbc .Cells (){for _ ,_abb :=range _aca ._ccc .EG_BlockLevelElts {for _ ,_beeb :=range _abb .EG_ContentBlockContent {for _ggba ,_dea :=range _beeb .P {if _dea ==p ._ffae {copy (_beeb .P [_ggba :],_beeb .P [_ggba +1:]);_beeb .P =_beeb .P [0:len (_beeb .P )-1];return ;};};};};};};};for _ ,_cddc :=range _gbe .Headers (){_cddc .RemoveParagraph (p );};for _ ,_bbb :=range _gbe .Footers (){_bbb .RemoveParagraph (p );};};

// X returns the inner wrapped XML type.
func (_abcda Table )X ()*_eg .CT_Tbl {return _abcda ._gdae };

// SetName sets the name of the style.
func (_cgaad Style )SetName (name string ){_cgaad ._bgdg .Name =_eg .NewCT_String ();_cgaad ._bgdg .Name .ValAttr =name ;};

// X returns the inner wrapped XML type.
func (_eegg TableConditionalFormatting )X ()*_eg .CT_TblStylePr {return _eegg ._cdff };

// SetFormat sets the numbering format.
func (_fdbgc NumberingLevel )SetFormat (f _eg .ST_NumberFormat ){if _fdbgc ._dbba .NumFmt ==nil {_fdbgc ._dbba .NumFmt =_eg .NewCT_NumFmt ();};_fdbgc ._dbba .NumFmt .ValAttr =f ;};

// SetTop sets the cell top margin
func (_ac CellMargins )SetTop (d _fd .Distance ){_ac ._dge .Top =_eg .NewCT_TblWidth ();_bcb (_ac ._dge .Top ,d );};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_eg .CT_Tbl ;Row *_eg .CT_Row ;Cell *_eg .CT_Tc ;RowIndex int ;ColIndex int ;};

// NewNumbering constructs a new numbering.
func NewNumbering ()Numbering {_cadce :=_eg .NewNumbering ();return Numbering {_cadce }};

// TextItem is used for keeping text with references to a paragraph and run or a table, a row and a cell where it is located.
type TextItem struct{Text string ;DrawingInfo *DrawingInfo ;Paragraph *_eg .CT_P ;Hyperlink *_eg .CT_Hyperlink ;Run *_eg .CT_R ;TableInfo *TableInfo ;};

// SetValue sets the value of a FormFieldTypeText or FormFieldTypeDropDown. For
// FormFieldTypeDropDown, the value must be one of the fields possible values.
func (_aggb FormField )SetValue (v string ){if _aggb ._aefe .DdList !=nil {for _cefa ,_caggc :=range _aggb .PossibleValues (){if _caggc ==v {_aggb ._aefe .DdList .Result =_eg .NewCT_DecimalNumber ();_aggb ._aefe .DdList .Result .ValAttr =int64 (_cefa );break ;};};}else if _aggb ._aefe .TextInput !=nil {_aggb ._ccab .T =_eg .NewCT_Text ();_aggb ._ccab .T .Content =v ;};};

// SetPicture sets the watermark picture.
func (_dgca *WatermarkPicture )SetPicture (imageRef _gg .ImageRef ){_aaggg :=imageRef .RelID ();_fdaa :=_dgca .getShape ();if _dgca ._aebc !=nil {_fbdb :=_dgca ._aebc .EG_ShapeElements ;if len (_fbdb )> 0&&_fbdb [0].Imagedata !=nil {_fbdb [0].Imagedata .IdAttr =&_aaggg ;};}else {_fedf :=_dgca .findNode (_fdaa ,"\u0069m\u0061\u0067\u0065\u0064\u0061\u0074a");for _fbgb ,_aebdc :=range _fedf .Attrs {if _aebdc .Name .Local =="\u0069\u0064"{_fedf .Attrs [_fbgb ].Value =_aaggg ;};};};};

// GetStyle returns string style of the text in watermark and format it to TextpathStyle.
func (_fgbdb *WatermarkText )GetStyle ()_gd .TextpathStyle {_affde :=_fgbdb .getShape ();if _fgbdb ._dbcca !=nil {_gefdd :=_fgbdb ._dbcca .EG_ShapeElements ;if len (_gefdd )> 0&&_gefdd [0].Textpath !=nil {return _gd .NewTextpathStyle (*_gefdd [0].Textpath .StyleAttr );};}else {_bfbg :=_fgbdb .findNode (_affde ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_dcfc :=range _bfbg .Attrs {if _dcfc .Name .Local =="\u0073\u0074\u0079l\u0065"{return _gd .NewTextpathStyle (_dcfc .Value );};};};return _gd .NewTextpathStyle ("");};

// Style returns the style for a paragraph, or an empty string if it is unset.
func (_geg ParagraphProperties )Style ()string {if _geg ._cagc .PStyle !=nil {return _geg ._cagc .PStyle .ValAttr ;};return "";};

// Save writes the document to an io.Writer in the Zip package format.
func (_bad *Document )Save (w _cb .Writer )error {return _bad .save (w ,_bad ._fbg )};

// Append appends a document d0 to a document d1. All settings, headers and footers remain the same as in the document d0 if they exist there, otherwise they are taken from the d1.
func (_bdb *Document )Append (d1orig *Document )error {_cfea ,_cbce :=d1orig .Copy ();if _cbce !=nil {return _cbce ;};_bdb .DocBase =_bdb .DocBase .Append (_cfea .DocBase );if _cfea ._bbe .ConformanceAttr !=_gee .ST_ConformanceClassStrict {_bdb ._bbe .ConformanceAttr =_cfea ._bbe .ConformanceAttr ;};_ffc :=_bdb ._ccd .X ().Relationship ;_feede :=_cfea ._ccd .X ().Relationship ;_ecab :=_cfea ._bbe .Body ;_efag :=map[string ]string {};_gaea :=map[int64 ]int64 {};_gcg :=map[int64 ]int64 {};for _ ,_bbea :=range _feede {_fede :=true ;_cac :=_bbea .IdAttr ;_agcf :=_bbea .TargetAttr ;_afgb :=_bbea .TypeAttr ;_gafg :=_afgb ==_g .ImageType ;_bfeb :=_afgb ==_g .HyperLinkType ;var _fff string ;for _ ,_dgff :=range _ffc {if _dgff .TypeAttr ==_afgb &&_dgff .TargetAttr ==_agcf {_fede =false ;_fff =_dgff .IdAttr ;break ;};};if _gafg {_addea :="\u0077\u006f\u0072d\u002f"+_agcf ;for _ ,_ccfe :=range _cfea .DocBase .Images {if _ccfe .Target ()==_addea {_cebe ,_fgf :=_gg .ImageFromStorage (_ccfe .Path ());if _fgf !=nil {return _fgf ;};_ffgga ,_fgf :=_bdb .AddImage (_cebe );if _fgf !=nil {return _fgf ;};_fff =_ffgga .RelID ();break ;};};}else if _fede {if _bfeb {_agfd :=_bdb ._ccd .AddHyperlink (_agcf );_fff =_gg .Relationship (_agfd ).ID ();}else {_aeeg :=_bdb ._ccd .AddRelationship (_agcf ,_afgb );_fff =_aeeg .X ().IdAttr ;};};if _cac !=_fff {_efag [_cac ]=_fff ;};};if _ecab .SectPr !=nil {for _ ,_ddbe :=range _ecab .SectPr .EG_HdrFtrReferences {if _ddbe .HeaderReference !=nil {if _debb ,_dcbd :=_efag [_ddbe .HeaderReference .IdAttr ];_dcbd {_ddbe .HeaderReference .IdAttr =_debb ;_bdb ._aaa =append (_bdb ._aaa ,_gg .NewRelationships ());};}else if _ddbe .FooterReference !=nil {if _adeg ,_ffbf :=_efag [_ddbe .FooterReference .IdAttr ];_ffbf {_ddbe .FooterReference .IdAttr =_adeg ;_bdb ._eab =append (_bdb ._eab ,_gg .NewRelationships ());};};};};_ggdcd ,_bbeg :=_bdb ._fdb ,_cfea ._fdb ;if _ggdcd !=nil {if _bbeg !=nil {if _ggdcd .Endnote !=nil {if _bbeg .Endnote !=nil {_cagg :=int64 (len (_ggdcd .Endnote )+1);for _ ,_afea :=range _bbeg .Endnote {_gbdd :=_afea .IdAttr ;if _gbdd > 0{_afea .IdAttr =_cagg ;_ggdcd .Endnote =append (_ggdcd .Endnote ,_afea );_gcg [_gbdd ]=_cagg ;_cagg ++;};};};}else {_ggdcd .Endnote =_bbeg .Endnote ;};};}else if _bbeg !=nil {_ggdcd =_bbeg ;};_bdb ._fdb =_ggdcd ;_ddbb ,_cfab :=_bdb ._gcc ,_cfea ._gcc ;if _ddbb !=nil {if _cfab !=nil {if _ddbb .Footnote !=nil {if _cfab .Footnote !=nil {_gbgfe :=int64 (len (_ddbb .Footnote )+1);for _ ,_dacfe :=range _cfab .Footnote {_ccbe :=_dacfe .IdAttr ;if _ccbe > 0{_dacfe .IdAttr =_gbgfe ;_ddbb .Footnote =append (_ddbb .Footnote ,_dacfe );_gaea [_ccbe ]=_gbgfe ;_gbgfe ++;};};};}else {_ddbb .Footnote =_cfab .Footnote ;};};}else if _cfab !=nil {_ddbb =_cfab ;};_bdb ._gcc =_ddbb ;for _ ,_gecd :=range _ecab .EG_BlockLevelElts {for _ ,_bgee :=range _gecd .EG_ContentBlockContent {for _ ,_fdg :=range _bgee .P {_abge (_fdg ,_efag );_adggb (_fdg ,_efag );_fcfg (_fdg ,_gaea ,_gcg );};for _ ,_ffbb :=range _bgee .Tbl {_afcg (_ffbb ,_efag );_bcbe (_ffbb ,_efag );_caab (_ffbb ,_gaea ,_gcg );};};};_bdb ._bbe .Body .EG_BlockLevelElts =append (_bdb ._bbe .Body .EG_BlockLevelElts ,_cfea ._bbe .Body .EG_BlockLevelElts ...);if _bdb ._bbe .Body .SectPr ==nil {_bdb ._bbe .Body .SectPr =_cfea ._bbe .Body .SectPr ;}else {var _dgec ,_cafa bool ;for _ ,_dgeb :=range _bdb ._bbe .Body .SectPr .EG_HdrFtrReferences {if _dgeb .HeaderReference !=nil {_dgec =true ;}else if _dgeb .FooterReference !=nil {_cafa =true ;};};if !_dgec {for _ ,_aefc :=range _cfea ._bbe .Body .SectPr .EG_HdrFtrReferences {if _aefc .HeaderReference !=nil {_bdb ._bbe .Body .SectPr .EG_HdrFtrReferences =append (_bdb ._bbe .Body .SectPr .EG_HdrFtrReferences ,_aefc );break ;};};};if !_cafa {for _ ,_eeb :=range _cfea ._bbe .Body .SectPr .EG_HdrFtrReferences {if _eeb .FooterReference !=nil {_bdb ._bbe .Body .SectPr .EG_HdrFtrReferences =append (_bdb ._bbe .Body .SectPr .EG_HdrFtrReferences ,_eeb );break ;};};};if _bdb ._bbe .Body .SectPr .Cols ==nil &&_cfea ._bbe .Body .SectPr .Cols !=nil {_bdb ._bbe .Body .SectPr .Cols =_cfea ._bbe .Body .SectPr .Cols ;};};_cfcc :=_bdb .Numbering ._dgbab ;_gggc :=_cfea .Numbering ._dgbab ;if _cfcc !=nil {if _gggc !=nil {_cfcc .NumPicBullet =append (_cfcc .NumPicBullet ,_gggc .NumPicBullet ...);_cfcc .AbstractNum =append (_cfcc .AbstractNum ,_gggc .AbstractNum ...);_cfcc .Num =append (_cfcc .Num ,_gggc .Num ...);};}else if _gggc !=nil {_cfcc =_gggc ;};_bdb .Numbering ._dgbab =_cfcc ;if _bdb .Styles ._ceaa ==nil &&_cfea .Styles ._ceaa !=nil {_bdb .Styles ._ceaa =_cfea .Styles ._ceaa ;};_bdb ._fga =append (_bdb ._fga ,_cfea ._fga ...);_bdb ._fgad =append (_bdb ._fgad ,_cfea ._fgad ...);if len (_bdb ._abee )==0{_bdb ._abee =_cfea ._abee ;};if len (_bdb ._bfe )==0{_bdb ._bfe =_cfea ._bfe ;};_bgce :=_bdb ._eea ;_ggdda :=_cfea ._eea ;if _bgce !=nil {if _ggdda !=nil {if _bgce .Divs !=nil {if _ggdda .Divs !=nil {_bgce .Divs .Div =append (_bgce .Divs .Div ,_ggdda .Divs .Div ...);};}else {_bgce .Divs =_ggdda .Divs ;};};_bgce .Frameset =nil ;}else if _ggdda !=nil {_bgce =_ggdda ;_bgce .Frameset =nil ;};_bdb ._eea =_bgce ;_ceba :=_bdb ._ccb ;_affb :=_cfea ._ccb ;if _ceba !=nil {if _affb !=nil {if _ceba .Font !=nil {if _affb .Font !=nil {for _ ,_caafg :=range _affb .Font {_dddd :=true ;for _ ,_eegc :=range _ceba .Font {if _eegc .NameAttr ==_caafg .NameAttr {_dddd =false ;break ;};};if _dddd {_ceba .Font =append (_ceba .Font ,_caafg );};};};}else {_ceba .Font =_affb .Font ;};};}else if _affb !=nil {_ceba =_affb ;};_bdb ._ccb =_ceba ;return nil ;};

// AddDrawingAnchored adds an anchored (floating) drawing from an ImageRef.
func (_bcgea Run )AddDrawingAnchored (img _gg .ImageRef )(AnchoredDrawing ,error ){_eaegb :=_bcgea .newIC ();_eaegb .Drawing =_eg .NewCT_Drawing ();_bbaef :=_eg .NewWdAnchor ();_fegaa :=AnchoredDrawing {_bcgea ._cddd ,_bbaef };_bbaef .SimplePosAttr =_g .Bool (false );_bbaef .AllowOverlapAttr =true ;_bbaef .CNvGraphicFramePr =_fg .NewCT_NonVisualGraphicFrameProperties ();_eaegb .Drawing .Anchor =append (_eaegb .Drawing .Anchor ,_bbaef );_bbaef .Graphic =_fg .NewGraphic ();_bbaef .Graphic .GraphicData =_fg .NewCT_GraphicalObjectData ();_bbaef .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_bbaef .SimplePos .XAttr .ST_CoordinateUnqualified =_g .Int64 (0);_bbaef .SimplePos .YAttr .ST_CoordinateUnqualified =_g .Int64 (0);_bbaef .PositionH .RelativeFromAttr =_eg .WdST_RelFromHPage ;_bbaef .PositionH .Choice =&_eg .WdCT_PosHChoice {};_bbaef .PositionH .Choice .PosOffset =_g .Int32 (0);_bbaef .PositionV .RelativeFromAttr =_eg .WdST_RelFromVPage ;_bbaef .PositionV .Choice =&_eg .WdCT_PosVChoice {};_bbaef .PositionV .Choice .PosOffset =_g .Int32 (0);_bbaef .Extent .CxAttr =int64 (float64 (img .Size ().X *_fd .Pixel72 )/_fd .EMU );_bbaef .Extent .CyAttr =int64 (float64 (img .Size ().Y *_fd .Pixel72 )/_fd .EMU );_bbaef .Choice =&_eg .WdEG_WrapTypeChoice {};_bbaef .Choice .WrapSquare =_eg .NewWdCT_WrapSquare ();_bbaef .Choice .WrapSquare .WrapTextAttr =_eg .WdST_WrapTextBothSides ;_cddde :=0x7FFFFFFF&_dc .Uint32 ();_bbaef .DocPr .IdAttr =_cddde ;_fgbd :=_bd .NewPic ();_fgbd .NvPicPr .CNvPr .IdAttr =_cddde ;_aded :=img .RelID ();if _aded ==""{return _fegaa ,_de .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_bbaef .Graphic .GraphicData .Any =append (_bbaef .Graphic .GraphicData .Any ,_fgbd );_fgbd .BlipFill =_fg .NewCT_BlipFillProperties ();_fgbd .BlipFill .Blip =_fg .NewCT_Blip ();_fgbd .BlipFill .Blip .EmbedAttr =&_aded ;_fgbd .BlipFill .Stretch =_fg .NewCT_StretchInfoProperties ();_fgbd .BlipFill .Stretch .FillRect =_fg .NewCT_RelativeRect ();_fgbd .SpPr =_fg .NewCT_ShapeProperties ();_fgbd .SpPr .Xfrm =_fg .NewCT_Transform2D ();_fgbd .SpPr .Xfrm .Off =_fg .NewCT_Point2D ();_fgbd .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_g .Int64 (0);_fgbd .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_g .Int64 (0);_fgbd .SpPr .Xfrm .Ext =_fg .NewCT_PositiveSize2D ();_fgbd .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_fd .Point );_fgbd .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_fd .Point );_fgbd .SpPr .PrstGeom =_fg .NewCT_PresetGeometry2D ();_fgbd .SpPr .PrstGeom .PrstAttr =_fg .ST_ShapeTypeRect ;return _fegaa ,nil ;};

// SetStartIndent controls the start indent of the paragraph.
func (_abfc ParagraphStyleProperties )SetStartIndent (m _fd .Distance ){if _abfc ._efcg .Ind ==nil {_abfc ._efcg .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_abfc ._efcg .Ind .StartAttr =nil ;}else {_abfc ._efcg .Ind .StartAttr =&_eg .ST_SignedTwipsMeasure {};_abfc ._efcg .Ind .StartAttr .Int64 =_g .Int64 (int64 (m /_fd .Twips ));};};

// ParagraphSpacing controls the spacing for a paragraph and its lines.
type ParagraphSpacing struct{_baaecd *_eg .CT_Spacing };

// SetSize sets the size of the displayed image on the page.
func (_bagcf InlineDrawing )SetSize (w ,h _fd .Distance ){_bagcf ._fabe .Extent .CxAttr =int64 (float64 (w *_fd .Pixel72 )/_fd .EMU );_bagcf ._fabe .Extent .CyAttr =int64 (float64 (h *_fd .Pixel72 )/_fd .EMU );};

// SetSmallCaps sets the run to small caps.
func (_cbebg RunProperties )SetSmallCaps (b bool ){if !b {_cbebg ._efdg .SmallCaps =nil ;}else {_cbebg ._efdg .SmallCaps =_eg .NewCT_OnOff ();};};

// Paragraphs returns the paragraphs defined in a footnote.
func (_dacg Footnote )Paragraphs ()[]Paragraph {_cdg :=[]Paragraph {};for _ ,_dagaf :=range _dacg .content (){for _ ,_beff :=range _dagaf .P {_cdg =append (_cdg ,Paragraph {_dacg ._aaga ,_beff });};};return _cdg ;};

// SetBehindDoc sets the behindDoc attribute of anchor.
func (_fac AnchoredDrawing )SetBehindDoc (val bool ){_fac ._ed .BehindDocAttr =val };

// SetVAlignment sets the vertical alignment for an anchored image.
func (_ebd AnchoredDrawing )SetVAlignment (v _eg .WdST_AlignV ){_ebd ._ed .PositionV .Choice =&_eg .WdCT_PosVChoice {};_ebd ._ed .PositionV .Choice .Align =v ;};

// DoubleStrike returns true if paragraph is double striked.
func (_affc ParagraphProperties )DoubleStrike ()bool {return _dfcc (_affc ._cagc .RPr .Dstrike )};

// AddHyperLink adds a new hyperlink to a parapgraph.
func (_dacgf Paragraph )AddHyperLink ()HyperLink {_fdaee :=_eg .NewEG_PContent ();_dacgf ._ffae .EG_PContent =append (_dacgf ._ffae .EG_PContent ,_fdaee );_fdaee .Hyperlink =_eg .NewCT_Hyperlink ();return HyperLink {_dacgf ._dageg ,_fdaee .Hyperlink };};func _decg ()*_ggg .OfcLock {_aeage :=_ggg .NewOfcLock ();_aeage .ExtAttr =_ggg .ST_ExtEdit ;_aeage .AspectratioAttr =_gee .ST_TrueFalseTrue ;return _aeage ;};

// SetFirstLineIndent controls the first line indent of the paragraph.
func (_efgc ParagraphStyleProperties )SetFirstLineIndent (m _fd .Distance ){if _efgc ._efcg .Ind ==nil {_efgc ._efcg .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_efgc ._efcg .Ind .FirstLineAttr =nil ;}else {_efgc ._efcg .Ind .FirstLineAttr =&_gee .ST_TwipsMeasure {};_efgc ._efcg .Ind .FirstLineAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_fd .Twips ));};};

// SizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_afa RunProperties )SizeMeasure ()string {if _daae :=_afa ._efdg .Sz ;_daae !=nil {_caca :=_daae .ValAttr ;if _caca .ST_PositiveUniversalMeasure !=nil {return *_caca .ST_PositiveUniversalMeasure ;};};return "";};

// TableStyleProperties are table properties as defined in a style.
type TableStyleProperties struct{_eggdf *_eg .CT_TblPrBase };

// SetInsideHorizontal sets the interior horizontal borders to a specified type, color and thickness.
func (_cea CellBorders )SetInsideHorizontal (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_cea ._cgaa .InsideH =_eg .NewCT_Border ();_dgdb (_cea ._cgaa .InsideH ,t ,c ,thickness );};

// SetAlignment sets the alignment of a table within the page.
func (_cddf TableProperties )SetAlignment (align _eg .ST_JcTable ){if align ==_eg .ST_JcTableUnset {_cddf ._gcdd .Jc =nil ;}else {_cddf ._gcdd .Jc =_eg .NewCT_JcTable ();_cddf ._gcdd .Jc .ValAttr =align ;};};var _ebfgf =[...]uint8 {0,20,37,58,79};

// Clear clears all content within a header
func (_gcfg Header )Clear (){_gcfg ._faac .EG_ContentBlockContent =nil };

// TableProperties returns the table style properties.
func (_aacbb Style )TableProperties ()TableStyleProperties {if _aacbb ._bgdg .TblPr ==nil {_aacbb ._bgdg .TblPr =_eg .NewCT_TblPrBase ();};return TableStyleProperties {_aacbb ._bgdg .TblPr };};

// FormFields extracts all of the fields from a document.  They can then be
// manipulated via the methods on the field and the document saved.
func (_afcc *Document )FormFields ()[]FormField {_fadb :=[]FormField {};for _ ,_agg :=range _afcc .Paragraphs (){_babbd :=_agg .Runs ();for _gcd ,_fbgg :=range _babbd {for _ ,_adcbe :=range _fbgg ._fced .EG_RunInnerContent {if _adcbe .FldChar ==nil ||_adcbe .FldChar .FfData ==nil {continue ;};if _adcbe .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeBegin {if len (_adcbe .FldChar .FfData .Name )==0||_adcbe .FldChar .FfData .Name [0].ValAttr ==nil {continue ;};_aedb :=FormField {_aefe :_adcbe .FldChar .FfData };if _adcbe .FldChar .FfData .TextInput !=nil {for _dde :=_gcd +1;_dde < len (_babbd )-1;_dde ++{if len (_babbd [_dde ]._fced .EG_RunInnerContent )==0{continue ;};_aga :=_babbd [_dde ]._fced .EG_RunInnerContent [0];if _aga .FldChar !=nil &&_aga .FldChar .FldCharTypeAttr ==_eg .ST_FldCharTypeSeparate {if len (_babbd [_dde +1]._fced .EG_RunInnerContent )==0{continue ;};if _babbd [_dde +1]._fced .EG_RunInnerContent [0].FldChar ==nil {_aedb ._ccab =_babbd [_dde +1]._fced .EG_RunInnerContent [0];break ;};};};};_fadb =append (_fadb ,_aedb );};};};};return _fadb ;};

// Fonts returns the style's Fonts.
func (_dcfb RunProperties )Fonts ()Fonts {if _dcfb ._efdg .RFonts ==nil {_dcfb ._efdg .RFonts =_eg .NewCT_Fonts ();};return Fonts {_dcfb ._efdg .RFonts };};

// Name returns the name of the style if set.
func (_becg Style )Name ()string {if _becg ._bgdg .Name ==nil {return "";};return _becg ._bgdg .Name .ValAttr ;};

// SetUpdateFieldsOnOpen controls if fields are recalculated upon opening the
// document. This is useful for things like a table of contents as the library
// only adds the field code and relies on Word/LibreOffice to actually compute
// the content.
func (_gacd Settings )SetUpdateFieldsOnOpen (b bool ){if !b {_gacd ._cfde .UpdateFields =nil ;}else {_gacd ._cfde .UpdateFields =_eg .NewCT_OnOff ();};};

// SetWrapPathStart sets wrapPath start value.
func (_ade AnchorDrawWrapOptions )SetWrapPathStart (coordinate *_fg .CT_Point2D ){_ade ._adg =coordinate ;};

// X returns the inner wrapped XML type.
func (_adgg Cell )X ()*_eg .CT_Tc {return _adgg ._ccc };func _fcfg (_adgd *_eg .CT_P ,_fbgd ,_cefg map[int64 ]int64 ){for _ ,_gecf :=range _adgd .EG_PContent {for _ ,_eabc :=range _gecf .EG_ContentRunContent {if _eabc .R !=nil {for _ ,_edd :=range _eabc .R .EG_RunInnerContent {_dccg :=_edd .EndnoteReference ;if _dccg !=nil &&_dccg .IdAttr > 0{if _dfcb ,_dgbaa :=_cefg [_dccg .IdAttr ];_dgbaa {_dccg .IdAttr =_dfcb ;};};_ecgb :=_edd .FootnoteReference ;if _ecgb !=nil &&_ecgb .IdAttr > 0{if _ggga ,_baf :=_fbgd [_ecgb .IdAttr ];_baf {_ecgb .IdAttr =_ggga ;};};};};};};};

// Underline returns the type of paragraph underline.
func (_bdece ParagraphProperties )Underline ()_eg .ST_Underline {if _caeec :=_bdece ._cagc .RPr .U ;_caeec !=nil {return _caeec .ValAttr ;};return 0;};

// SetItalic sets the run to italic.
func (_fgaga RunProperties )SetItalic (b bool ){if !b {_fgaga ._efdg .I =nil ;_fgaga ._efdg .ICs =nil ;}else {_fgaga ._efdg .I =_eg .NewCT_OnOff ();_fgaga ._efdg .ICs =_eg .NewCT_OnOff ();};};

// Value returns the tring value of a FormFieldTypeText or FormFieldTypeDropDown.
func (_geda FormField )Value ()string {if _geda ._aefe .TextInput !=nil &&_geda ._ccab .T !=nil {return _geda ._ccab .T .Content ;}else if _geda ._aefe .DdList !=nil &&_geda ._aefe .DdList .Result !=nil {_fbag :=_geda .PossibleValues ();_gbb :=int (_geda ._aefe .DdList .Result .ValAttr );if _gbb < len (_fbag ){return _fbag [_gbb ];};}else if _geda ._aefe .CheckBox !=nil {if _geda .IsChecked (){return "\u0074\u0072\u0075\u0065";};return "\u0066\u0061\u006cs\u0065";};return "";};

// RStyle returns the name of character style.
// It is defined here http://officeopenxml.com/WPstyleCharStyles.php
func (_deeb ParagraphProperties )RStyle ()string {if _deeb ._cagc .RPr .RStyle !=nil {return _deeb ._cagc .RPr .RStyle .ValAttr ;};return "";};

// FormFieldType is the type of the form field.
//go:generate stringer -type=FormFieldType
type FormFieldType byte ;

// Row is a row within a table within a document.
type Row struct{_becdc *Document ;_cgaf *_eg .CT_Row ;};

// DocText is an array of extracted text items which has some methods for representing extracted text.
type DocText struct{Items []TextItem ;};

// SetUISortOrder controls the order the style is displayed in the UI.
func (_abccb Style )SetUISortOrder (order int ){_abccb ._bgdg .UiPriority =_eg .NewCT_DecimalNumber ();_abccb ._bgdg .UiPriority .ValAttr =int64 (order );};

// X returns the inner wrapped XML type.
func (_gfag Numbering )X ()*_eg .Numbering {return _gfag ._dgbab };

// SetVerticalAlignment sets the vertical alignment of content within a table cell.
func (_fdc CellProperties )SetVerticalAlignment (align _eg .ST_VerticalJc ){if align ==_eg .ST_VerticalJcUnset {_fdc ._cgb .VAlign =nil ;}else {_fdc ._cgb .VAlign =_eg .NewCT_VerticalJc ();_fdc ._cgb .VAlign .ValAttr =align ;};};

// SetAllCaps sets the run to all caps.
func (_ccgfe RunProperties )SetAllCaps (b bool ){if !b {_ccgfe ._efdg .Caps =nil ;}else {_ccgfe ._efdg .Caps =_eg .NewCT_OnOff ();};};

// Open opens and reads a document from a file (.docx).
func Open (filename string )(*Document ,error ){_gfaf ,_ebac :=_ge .Open (filename );if _ebac !=nil {return nil ,_cg .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_ebac );};defer _gfaf .Close ();_dcac ,_ebac :=_ge .Stat (filename );if _ebac !=nil {return nil ,_cg .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_ebac );};_ =_dcac ;return Read (_gfaf ,_dcac .Size ());};

// SetAfterAuto controls if spacing after a paragraph is automatically determined.
func (_dgfcf ParagraphSpacing )SetAfterAuto (b bool ){if b {_dgfcf ._baaecd .AfterAutospacingAttr =&_gee .ST_OnOff {};_dgfcf ._baaecd .AfterAutospacingAttr .Bool =_g .Bool (true );}else {_dgfcf ._baaecd .AfterAutospacingAttr =nil ;};};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_fbd CellBorders )SetBottom (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_fbd ._cgaa .Bottom =_eg .NewCT_Border ();_dgdb (_fbd ._cgaa .Bottom ,t ,c ,thickness );};

// AddText adds tet to a run.
func (_acfa Run )AddText (s string ){_edga :=_eg .NewEG_RunInnerContent ();_acfa ._fced .EG_RunInnerContent =append (_acfa ._fced .EG_RunInnerContent ,_edga );_edga .T =_eg .NewCT_Text ();if _g .NeedsSpacePreserve (s ){_ffbg :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_edga .T .SpaceAttr =&_ffbg ;};_edga .T .Content =s ;};

// SetOffset sets the offset of the image relative to the origin, which by
// default this is the top-left corner of the page. Offset is incompatible with
// SetAlignment, whichever is called last is applied.
func (_gfg AnchoredDrawing )SetOffset (x ,y _fd .Distance ){_gfg .SetXOffset (x );_gfg .SetYOffset (y )};

// SetHighlight highlights text in a specified color.
func (_cgda RunProperties )SetHighlight (c _eg .ST_HighlightColor ){_cgda ._efdg .Highlight =_eg .NewCT_Highlight ();_cgda ._efdg .Highlight .ValAttr =c ;};func _ebedd ()*_ggg .Formulas {_cgdbeb :=_ggg .NewFormulas ();_cgdbeb .F =[]*_ggg .CT_F {_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0023\u0030\u0020\u0030\u00201\u0030\u0038\u0030\u0030"),_gd .CreateFormula ("p\u0072\u006f\u0064\u0020\u0023\u0030\u0020\u0032\u0020\u0031"),_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0031"),_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0032"),_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0032\u0031\u0036\u0030\u0030 \u0030\u0020\u0040\u0033"),_gd .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0033\u0020\u0030"),_gd .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0032\u0031\u00360\u0030\u0020\u0040\u0031"),_gd .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0030\u0020\u0040\u0032"),_gd .CreateFormula ("\u0069\u0066\u0020\u0040\u0030\u0020\u0040\u0034\u00202\u0031\u0036\u0030\u0030"),_gd .CreateFormula ("\u006di\u0064\u0020\u0040\u0035\u0020\u00406"),_gd .CreateFormula ("\u006di\u0064\u0020\u0040\u0038\u0020\u00405"),_gd .CreateFormula ("\u006di\u0064\u0020\u0040\u0037\u0020\u00408"),_gd .CreateFormula ("\u006di\u0064\u0020\u0040\u0036\u0020\u00407"),_gd .CreateFormula ("s\u0075\u006d\u0020\u0040\u0036\u0020\u0030\u0020\u0040\u0035")};return _cgdbeb ;};

// Properties returns the table properties.
func (_agcgd Table )Properties ()TableProperties {if _agcgd ._gdae .TblPr ==nil {_agcgd ._gdae .TblPr =_eg .NewCT_TblPr ();};return TableProperties {_agcgd ._gdae .TblPr };};

// NewTableWidth returns a newly intialized TableWidth
func NewTableWidth ()TableWidth {return TableWidth {_eg .NewCT_TblWidth ()}};

// Rows returns the rows defined in the table.
func (_daafb Table )Rows ()[]Row {_bcbg :=[]Row {};for _ ,_befbe :=range _daafb ._gdae .EG_ContentRowContent {for _ ,_feadd :=range _befbe .Tr {_bcbg =append (_bcbg ,Row {_daafb ._gdea ,_feadd });};if _befbe .Sdt !=nil &&_befbe .Sdt .SdtContent !=nil {for _ ,_eaegc :=range _befbe .Sdt .SdtContent .Tr {_bcbg =append (_bcbg ,Row {_daafb ._gdea ,_eaegc });};};};return _bcbg ;};

// StyleID returns the style ID.
func (_cafd Style )StyleID ()string {if _cafd ._bgdg .StyleIdAttr ==nil {return "";};return *_cafd ._bgdg .StyleIdAttr ;};

// SetColor sets the text color.
func (_caga RunProperties )SetColor (c _ef .Color ){_caga ._efdg .Color =_eg .NewCT_Color ();_caga ._efdg .Color .ValAttr .ST_HexColorRGB =c .AsRGBString ();};

// X returns the inner wrapped XML type.
func (_ggb Bookmark )X ()*_eg .CT_Bookmark {return _ggb ._cbe };

// CellBorders are the borders for an individual
type CellBorders struct{_cgaa *_eg .CT_TcBorders };

// SetName sets the name of the bookmark. This is the name that is used to
// reference the bookmark from hyperlinks.
func (_ebf Bookmark )SetName (name string ){_ebf ._cbe .NameAttr =name };

// SetOutline sets the run to outlined text.
func (_dbedc RunProperties )SetOutline (b bool ){if !b {_dbedc ._efdg .Outline =nil ;}else {_dbedc ._efdg .Outline =_eg .NewCT_OnOff ();};};

// ParagraphStyles returns only the paragraph styles.
func (_dffe Styles )ParagraphStyles ()[]Style {_acfe :=[]Style {};for _ ,_bcedg :=range _dffe ._ceaa .Style {if _bcedg .TypeAttr !=_eg .ST_StyleTypeParagraph {continue ;};_acfe =append (_acfe ,Style {_bcedg });};return _acfe ;};

// X returns the inner wrapped XML type.
func (_bdfa Row )X ()*_eg .CT_Row {return _bdfa ._cgaf };

// X returns the inner wrapped XML type.
func (_abea CellProperties )X ()*_eg .CT_TcPr {return _abea ._cgb };

// AddDrawingInline adds an inline drawing from an ImageRef.
func (_dgab Run )AddDrawingInline (img _gg .ImageRef )(InlineDrawing ,error ){_gcbd :=_dgab .newIC ();_gcbd .Drawing =_eg .NewCT_Drawing ();_eaege :=_eg .NewWdInline ();_ddfb :=InlineDrawing {_dgab ._cddd ,_eaege };_eaege .CNvGraphicFramePr =_fg .NewCT_NonVisualGraphicFrameProperties ();_gcbd .Drawing .Inline =append (_gcbd .Drawing .Inline ,_eaege );_eaege .Graphic =_fg .NewGraphic ();_eaege .Graphic .GraphicData =_fg .NewCT_GraphicalObjectData ();_eaege .Graphic .GraphicData .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068e\u006d\u0061\u0073.\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006frg\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006d\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u0070\u0069\u0063\u0074\u0075\u0072\u0065";_eaege .DistTAttr =_g .Uint32 (0);_eaege .DistLAttr =_g .Uint32 (0);_eaege .DistBAttr =_g .Uint32 (0);_eaege .DistRAttr =_g .Uint32 (0);_eaege .Extent .CxAttr =int64 (float64 (img .Size ().X *_fd .Pixel72 )/_fd .EMU );_eaege .Extent .CyAttr =int64 (float64 (img .Size ().Y *_fd .Pixel72 )/_fd .EMU );_bgbd :=0x7FFFFFFF&_dc .Uint32 ();_eaege .DocPr .IdAttr =_bgbd ;_gdbee :=_bd .NewPic ();_gdbee .NvPicPr .CNvPr .IdAttr =_bgbd ;_afbbb :=img .RelID ();if _afbbb ==""{return _ddfb ,_de .New ("\u0063\u006f\u0075\u006c\u0064\u006e\u0027\u0074\u0020\u0066\u0069\u006e\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065\u0020\u0074\u006f\u0020\u0069\u006d\u0061g\u0065\u0020\u0077\u0069\u0074\u0068\u0069\u006e\u0020\u0064\u006f\u0063\u0075m\u0065\u006e\u0074\u0020\u0072\u0065l\u0061\u0074\u0069o\u006e\u0073");};_eaege .Graphic .GraphicData .Any =append (_eaege .Graphic .GraphicData .Any ,_gdbee );_gdbee .BlipFill =_fg .NewCT_BlipFillProperties ();_gdbee .BlipFill .Blip =_fg .NewCT_Blip ();_gdbee .BlipFill .Blip .EmbedAttr =&_afbbb ;_gdbee .BlipFill .Stretch =_fg .NewCT_StretchInfoProperties ();_gdbee .BlipFill .Stretch .FillRect =_fg .NewCT_RelativeRect ();_gdbee .SpPr =_fg .NewCT_ShapeProperties ();_gdbee .SpPr .Xfrm =_fg .NewCT_Transform2D ();_gdbee .SpPr .Xfrm .Off =_fg .NewCT_Point2D ();_gdbee .SpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_g .Int64 (0);_gdbee .SpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_g .Int64 (0);_gdbee .SpPr .Xfrm .Ext =_fg .NewCT_PositiveSize2D ();_gdbee .SpPr .Xfrm .Ext .CxAttr =int64 (img .Size ().X *_fd .Point );_gdbee .SpPr .Xfrm .Ext .CyAttr =int64 (img .Size ().Y *_fd .Point );_gdbee .SpPr .PrstGeom =_fg .NewCT_PresetGeometry2D ();_gdbee .SpPr .PrstGeom .PrstAttr =_fg .ST_ShapeTypeRect ;return _ddfb ,nil ;};

// AddField adds a field (automatically computed text) to the document.
func (_cccea Run )AddField (code string ){_cccea .AddFieldWithFormatting (code ,"",true )};

// SetVerticalBanding controls the conditional formatting for vertical banding.
func (_eacd TableLook )SetVerticalBanding (on bool ){if !on {_eacd ._dbgfg .NoVBandAttr =&_gee .ST_OnOff {};_eacd ._dbgfg .NoVBandAttr .ST_OnOff1 =_gee .ST_OnOff1On ;}else {_eacd ._dbgfg .NoVBandAttr =&_gee .ST_OnOff {};_eacd ._dbgfg .NoVBandAttr .ST_OnOff1 =_gee .ST_OnOff1Off ;};};type mergeFieldInfo struct{_ebca string ;_effbd string ;_febb string ;_eccd bool ;_ggabg bool ;_cfca bool ;_fde bool ;_cgdg Paragraph ;_fgbb ,_gcgc ,_aagd int ;_bcaeg *_eg .EG_PContent ;_gfbfc bool ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_ccag TableStyleProperties )SetCellSpacingAuto (){_ccag ._eggdf .TblCellSpacing =_eg .NewCT_TblWidth ();_ccag ._eggdf .TblCellSpacing .TypeAttr =_eg .ST_TblWidthAuto ;};

// ComplexSizeValue returns the value of paragraph font size for complex fonts in points.
func (_cagfb ParagraphProperties )ComplexSizeValue ()float64 {if _gbag :=_cagfb ._cagc .RPr .SzCs ;_gbag !=nil {_bgbe :=_gbag .ValAttr ;if _bgbe .ST_UnsignedDecimalNumber !=nil {return float64 (*_bgbe .ST_UnsignedDecimalNumber )/2;};};return 0.0;};

// SetTextWrapThrough sets the text wrap to through with a give wrap type.
func (_eba AnchoredDrawing )SetTextWrapThrough (option *AnchorDrawWrapOptions ){_eba ._ed .Choice =&_eg .WdEG_WrapTypeChoice {};_eba ._ed .Choice .WrapThrough =_eg .NewWdCT_WrapThrough ();_eba ._ed .Choice .WrapThrough .WrapTextAttr =_eg .WdST_WrapTextBothSides ;_fed :=false ;_eba ._ed .Choice .WrapThrough .WrapPolygon .EditedAttr =&_fed ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_eba ._ed .Choice .WrapThrough .WrapPolygon .Start =option .GetWrapPathStart ();_eba ._ed .Choice .WrapThrough .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_eba ._ed .LayoutInCellAttr =true ;_eba ._ed .AllowOverlapAttr =true ;};func (_cedc Paragraph )ensurePPr (){if _cedc ._ffae .PPr ==nil {_cedc ._ffae .PPr =_eg .NewCT_PPr ();};};

// Color returns the style's Color.
func (_badbf RunProperties )Color ()Color {if _badbf ._efdg .Color ==nil {_badbf ._efdg .Color =_eg .NewCT_Color ();};return Color {_badbf ._efdg .Color };};func (_dcde *WatermarkPicture )getInnerElement (_gedfg string )*_g .XSDAny {for _ ,_efbd :=range _dcde ._gfbgg .Any {_fcfba ,_bcee :=_efbd .(*_g .XSDAny );if _bcee &&(_fcfba .XMLName .Local ==_gedfg ||_fcfba .XMLName .Local =="\u0076\u003a"+_gedfg ){return _fcfba ;};};return nil ;};

// Name returns the name of the field.
func (_baaf FormField )Name ()string {return *_baaf ._aefe .Name [0].ValAttr };

// SetPageBreakBefore controls if there is a page break before this paragraph.
func (_gacc ParagraphProperties )SetPageBreakBefore (b bool ){if !b {_gacc ._cagc .PageBreakBefore =nil ;}else {_gacc ._cagc .PageBreakBefore =_eg .NewCT_OnOff ();};};

// AddImageRef add ImageRef to header as relationship, returning ImageRef
// that can be used to be placed as header content.
func (_edfb Header )AddImageRef (r _gg .ImageRef )(_gg .ImageRef ,error ){var _effd _gg .Relationships ;for _cgbd ,_dbacf :=range _edfb ._efff ._abee {if _dbacf ==_edfb ._faac {_effd =_edfb ._efff ._aaa [_cgbd ];};};_def :=_effd .AddRelationship (r .Target (),_g .ImageType );r .SetRelID (_def .X ().IdAttr );return r ,nil ;};func (_bbdd Paragraph )addStartBookmark (_gbcd int64 ,_fafba string )*_eg .CT_Bookmark {_ffdf :=_eg .NewEG_PContent ();_bbdd ._ffae .EG_PContent =append (_bbdd ._ffae .EG_PContent ,_ffdf );_cdcga :=_eg .NewEG_ContentRunContent ();_adfbc :=_eg .NewEG_RunLevelElts ();_bfad :=_eg .NewEG_RangeMarkupElements ();_ebdd :=_eg .NewCT_Bookmark ();_ebdd .NameAttr =_fafba ;_ebdd .IdAttr =_gbcd ;_bfad .BookmarkStart =_ebdd ;_ffdf .EG_ContentRunContent =append (_ffdf .EG_ContentRunContent ,_cdcga );_cdcga .EG_RunLevelElts =append (_cdcga .EG_RunLevelElts ,_adfbc );_adfbc .EG_RangeMarkupElements =append (_adfbc .EG_RangeMarkupElements ,_bfad );return _ebdd ;};

// Close closes the document, removing any temporary files that might have been
// created when opening a document.
func (_gfbc *Document )Close ()error {if _gfbc .TmpPath !=""{return _ba .RemoveAll (_gfbc .TmpPath );};return nil ;};func _cedf ()*_ggg .Formulas {_cage :=_ggg .NewFormulas ();_cage .F =[]*_ggg .CT_F {_gd .CreateFormula ("\u0069\u0066 \u006c\u0069\u006e\u0065\u0044\u0072\u0061\u0077\u006e\u0020\u0070\u0069\u0078\u0065\u006c\u004c\u0069\u006e\u0065\u0057\u0069\u0064th\u0020\u0030"),_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0031\u0020\u0030"),_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0030\u0020\u0030\u0020\u0040\u0031"),_gd .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0032\u0020\u0031\u0020\u0032"),_gd .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0033\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_gd .CreateFormula ("\u0070r\u006f\u0064\u0020\u00403\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0030\u0020\u0030\u0020\u0031"),_gd .CreateFormula ("p\u0072\u006f\u0064\u0020\u0040\u0036\u0020\u0031\u0020\u0032"),_gd .CreateFormula ("\u0070r\u006f\u0064\u0020\u0040\u0037\u0020\u0032\u0031\u0036\u0030\u0030 \u0070\u0069\u0078\u0065\u006c\u0057\u0069\u0064\u0074\u0068"),_gd .CreateFormula ("\u0073\u0075\u006d\u0020\u0040\u0038\u0020\u0032\u00316\u0030\u0030\u0020\u0030"),_gd .CreateFormula ("\u0070r\u006f\u0064\u0020\u00407\u0020\u0032\u0031\u0036\u00300\u0020p\u0069x\u0065\u006c\u0048\u0065\u0069\u0067\u0068t"),_gd .CreateFormula ("\u0073u\u006d \u0040\u0031\u0030\u0020\u0032\u0031\u0036\u0030\u0030\u0020\u0030")};return _cage ;};

// Bookmark is a bookmarked location within a document that can be referenced
// with a hyperlink.
type Bookmark struct{_cbe *_eg .CT_Bookmark };

// SetCharacterSpacing sets the run's Character Spacing Adjustment.
func (_gecg RunProperties )SetCharacterSpacing (size _fd .Distance ){_gecg ._efdg .Spacing =_eg .NewCT_SignedTwipsMeasure ();_gecg ._efdg .Spacing .ValAttr .Int64 =_g .Int64 (int64 (size /_fd .Twips ));};type chart struct{_cgg *_dcc .ChartSpace ;_ffg string ;_gfc string ;};

// AddHeader creates a header associated with the document, but doesn't add it
// to the document for display.
func (_agf *Document )AddHeader ()Header {_aaf :=_eg .NewHdr ();_agf ._abee =append (_agf ._abee ,_aaf );_beb :=_cg .Sprintf ("\u0068\u0065\u0061d\u0065\u0072\u0025\u0064\u002e\u0078\u006d\u006c",len (_agf ._abee ));_agf ._ccd .AddRelationship (_beb ,_g .HeaderType );_agf .ContentTypes .AddOverride ("\u002f\u0077\u006f\u0072\u0064\u002f"+_beb ,"\u0061p\u0070l\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064.\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006f\u0066\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0077\u006f\u0072\u0064\u0070\u0072\u006f\u0063\u0065\u0073\u0073\u0069n\u0067\u006d\u006c\u002e\u0068\u0065\u0061\u0064e\u0072\u002b\u0078\u006d\u006c");_agf ._aaa =append (_agf ._aaa ,_gg .NewRelationships ());return Header {_agf ,_aaf };};

// Type returns the type of the style.
func (_afef Style )Type ()_eg .ST_StyleType {return _afef ._bgdg .TypeAttr };

// DrawingAnchored returns a slice of AnchoredDrawings.
func (_egga Run )DrawingAnchored ()[]AnchoredDrawing {_feea :=[]AnchoredDrawing {};for _ ,_baba :=range _egga ._fced .EG_RunInnerContent {if _baba .Drawing ==nil {continue ;};for _ ,_cbcdd :=range _baba .Drawing .Anchor {_feea =append (_feea ,AnchoredDrawing {_egga ._cddd ,_cbcdd });};};return _feea ;};func _fedb (_eeab []*_eg .EG_ContentBlockContent ,_afda *TableInfo )[]TextItem {_egad :=[]TextItem {};for _ ,_fdccg :=range _eeab {if _bgea :=_fdccg .Sdt ;_bgea !=nil {if _dffa :=_bgea .SdtContent ;_dffa !=nil {_egad =append (_egad ,_dcffd (_dffa .P ,_afda ,nil )...);};};_egad =append (_egad ,_dcffd (_fdccg .P ,_afda ,nil )...);for _ ,_aagb :=range _fdccg .Tbl {for _bdda ,_acbg :=range _aagb .EG_ContentRowContent {for _ ,_dgdf :=range _acbg .Tr {for _fgef ,_fgbg :=range _dgdf .EG_ContentCellContent {for _ ,_ffbfg :=range _fgbg .Tc {_cadd :=&TableInfo {Table :_aagb ,Row :_dgdf ,Cell :_ffbfg ,RowIndex :_bdda ,ColIndex :_fgef };for _ ,_dacfa :=range _ffbfg .EG_BlockLevelElts {_egad =append (_egad ,_fedb (_dacfa .EG_ContentBlockContent ,_cadd )...);};};};};};};};return _egad ;};

// NewWatermarkText generates a new WatermarkText.
func NewWatermarkText ()WatermarkText {_fcgd :=_ggg .NewShapetype ();_ffeac :=_ggg .NewEG_ShapeElements ();_ffeac .Formulas =_ebedd ();_ffeac .Path =_ggad ();_ffeac .Textpath =_faadb ();_ffeac .Handles =_bbgc ();_ffeac .Lock =_defb ();_fcgd .EG_ShapeElements =[]*_ggg .EG_ShapeElements {_ffeac };var (_aece ="_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_gccf ="2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030";_cdaca =float32 (136.0);_ggfa ="\u0031\u0030\u00380\u0030";_dacaf ="m\u0040\u0037\u002c\u006c\u0040\u0038,\u006d\u0040\u0035\u002c\u0032\u0031\u0036\u0030\u0030l\u0040\u0036\u002c2\u00316\u0030\u0030\u0065";);_fcgd .IdAttr =&_aece ;_fcgd .CoordsizeAttr =&_gccf ;_fcgd .SptAttr =&_cdaca ;_fcgd .AdjAttr =&_ggfa ;_fcgd .PathAttr =&_dacaf ;_cddg :=_ggg .NewShape ();_ageaa :=_ggg .NewEG_ShapeElements ();_ageaa .Textpath =_ecec ();_cddg .EG_ShapeElements =[]*_ggg .EG_ShapeElements {_ageaa };var (_fgbf ="\u0050\u006f\u0077\u0065\u0072\u0050l\u0075\u0073\u0057\u0061\u0074\u0065\u0072\u004d\u0061\u0072\u006b\u004f\u0062j\u0065\u0063\u0074\u0031\u0033\u0036\u00380\u0030\u0038\u0038\u0036";_dfcd ="\u005f\u0078\u00300\u0030\u0030\u005f\u0073\u0032\u0030\u0035\u0031";_aefed ="\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0031\u0033\u0036";_afbe ="";_dfge ="\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006c\u0075\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065f\u0074:\u0030\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074o\u0070\u003a\u0030\u003b\u0077\u0069\u0064\u0074\u0068\u003a\u0034\u0036\u0038\u0070\u0074;\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0032\u0033\u0034\u0070\u0074\u003b\u007a\u002d\u0069\u006ede\u0078\u003a\u002d\u0032\u0035\u0031\u0036\u0035\u0031\u0030\u0037\u0032\u003b\u006d\u0073\u006f\u002d\u0077\u0072\u0061\u0070\u002d\u0065\u0064\u0069\u0074\u0065\u0064\u003a\u0066\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0068\u0065\u0069\u0067h\u0074-p\u0065\u0072\u0063\u0065\u006et\u003a\u0030\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070o\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065l\u0061\u0074\u0069\u0076\u0065:\u006d\u0061\u0072\u0067\u0069n\u003b\u006d\u0073o\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e-\u0076\u0065\u0072\u0074\u0069\u0063\u0061\u006c\u003a\u0063\u0065\u006e\u0074\u0065\u0072\u003b\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076\u0065r\u0074\u0069\u0063\u0061\u006c\u002d\u0072e\u006c\u0061\u0074i\u0076\u0065\u003a\u006d\u0061\u0072\u0067\u0069\u006e\u003b\u006d\u0073\u006f\u002d\u0077\u0069\u0064\u0074\u0068\u002d\u0070\u0065\u0072\u0063e\u006e\u0074\u003a\u0030\u003b\u006d\u0073\u006f\u002dh\u0065\u0069\u0067\u0068t\u002dp\u0065\u0072\u0063\u0065\u006et\u003a0";_agbgf ="\u0073\u0069\u006c\u0076\u0065\u0072";);_cddg .IdAttr =&_fgbf ;_cddg .SpidAttr =&_dfcd ;_cddg .TypeAttr =&_aefed ;_cddg .AltAttr =&_afbe ;_cddg .StyleAttr =&_dfge ;_cddg .AllowincellAttr =_gee .ST_TrueFalseFalse ;_cddg .FillcolorAttr =&_agbgf ;_cddg .StrokedAttr =_gee .ST_TrueFalseFalse ;_bccaf :=_eg .NewCT_Picture ();_bccaf .Any =[]_g .Any {_fcgd ,_cddg };return WatermarkText {_ebce :_bccaf ,_dbcca :_cddg ,_ffdd :_fcgd };};

// SetStyle sets the style of a paragraph.
func (_dcaga ParagraphProperties )SetStyle (s string ){if s ==""{_dcaga ._cagc .PStyle =nil ;}else {_dcaga ._cagc .PStyle =_eg .NewCT_String ();_dcaga ._cagc .PStyle .ValAttr =s ;};};

// GetWrapPathStart return wrapPath start value.
func (_dcd AnchorDrawWrapOptions )GetWrapPathStart ()*_fg .CT_Point2D {return _dcd ._adg };

// SetRowBandSize sets the number of Rows in the row band
func (_fcdbg TableStyleProperties )SetRowBandSize (rows int64 ){_fcdbg ._eggdf .TblStyleRowBandSize =_eg .NewCT_DecimalNumber ();_fcdbg ._eggdf .TblStyleRowBandSize .ValAttr =rows ;};

// SetWidthPercent sets the cell to a width percentage.
func (_bgg CellProperties )SetWidthPercent (pct float64 ){_bgg ._cgb .TcW =_eg .NewCT_TblWidth ();_bgg ._cgb .TcW .TypeAttr =_eg .ST_TblWidthPct ;_bgg ._cgb .TcW .WAttr =&_eg .ST_MeasurementOrPercent {};_bgg ._cgb .TcW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_bgg ._cgb .TcW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};

// CharacterSpacingValue returns the value of run's characters spacing in twips (1/20 of point).
func (_effa RunProperties )CharacterSpacingValue ()int64 {if _bdedc :=_effa ._efdg .Spacing ;_bdedc !=nil {_fegegd :=_bdedc .ValAttr ;if _fegegd .Int64 !=nil {return *_fegegd .Int64 ;};};return int64 (0);};

// X returns the inner wrapped XML type.
func (_dgf *Document )X ()*_eg .Document {return _dgf ._bbe };

// Outline returns true if paragraph outline is on.
func (_geed ParagraphProperties )Outline ()bool {return _dfcc (_geed ._cagc .RPr .Outline )};

// WatermarkPicture is watermark picture within document.
type WatermarkPicture struct{_gfbgg *_eg .CT_Picture ;_dfde *_gd .ShapeStyle ;_aebc *_ggg .Shape ;_dbbgb *_ggg .Shapetype ;};

// SetUnderline controls underline for a run style.
func (_bbda RunProperties )SetUnderline (style _eg .ST_Underline ,c _ef .Color ){if style ==_eg .ST_UnderlineUnset {_bbda ._efdg .U =nil ;}else {_bbda ._efdg .U =_eg .NewCT_Underline ();_bbda ._efdg .U .ColorAttr =&_eg .ST_HexColor {};_bbda ._efdg .U .ColorAttr .ST_HexColorRGB =c .AsRGBString ();_bbda ._efdg .U .ValAttr =style ;};};

// SetShapeStyle sets style to the element v:shape in watermark.
func (_bffa *WatermarkPicture )SetShapeStyle (shapeStyle _gd .ShapeStyle ){if _bffa ._aebc !=nil {_afcdc :=shapeStyle .String ();_bffa ._aebc .StyleAttr =&_afcdc ;};};

// SetWidthPercent sets the table to a width percentage.
func (_eafb TableProperties )SetWidthPercent (pct float64 ){_eafb ._gcdd .TblW =_eg .NewCT_TblWidth ();_eafb ._gcdd .TblW .TypeAttr =_eg .ST_TblWidthPct ;_eafb ._gcdd .TblW .WAttr =&_eg .ST_MeasurementOrPercent {};_eafb ._gcdd .TblW .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_eafb ._gcdd .TblW .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};

// SetCellSpacingPercent sets the cell spacing within a table to a percent width.
func (_ceaae TableStyleProperties )SetCellSpacingPercent (pct float64 ){_ceaae ._eggdf .TblCellSpacing =_eg .NewCT_TblWidth ();_ceaae ._eggdf .TblCellSpacing .TypeAttr =_eg .ST_TblWidthPct ;_ceaae ._eggdf .TblCellSpacing .WAttr =&_eg .ST_MeasurementOrPercent {};_ceaae ._eggdf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_ceaae ._eggdf .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (pct *50));};

// SetValue sets the width value.
func (_cgac TableWidth )SetValue (m _fd .Distance ){_cgac ._acba .WAttr =&_eg .ST_MeasurementOrPercent {};_cgac ._acba .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_cgac ._acba .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (m /_fd .Twips ));_cgac ._acba .TypeAttr =_eg .ST_TblWidthDxa ;};func _ddabg (_cggf *_eg .CT_OnOff )OnOffValue {if _cggf ==nil {return OnOffValueUnset ;};if _cggf .ValAttr !=nil &&_cggf .ValAttr .Bool !=nil &&*_cggf .ValAttr .Bool ==false {return OnOffValueOff ;};return OnOffValueOn ;};

// SetShadow sets the run to shadowed text.
func (_eece RunProperties )SetShadow (b bool ){if !b {_eece ._efdg .Shadow =nil ;}else {_eece ._efdg .Shadow =_eg .NewCT_OnOff ();};};

// GetNumberingLevelByIds returns a NumberingLevel by its NumId and LevelId attributes
// or an empty one if not found.
func (_deef *Document )GetNumberingLevelByIds (numId ,levelId int64 )NumberingLevel {for _ ,_bagf :=range _deef .Numbering ._dgbab .Num {if _bagf !=nil &&_bagf .NumIdAttr ==numId {_dfaa :=_bagf .AbstractNumId .ValAttr ;for _ ,_cgfb :=range _deef .Numbering ._dgbab .AbstractNum {if _cgfb .AbstractNumIdAttr ==_dfaa {for _ ,_aaed :=range _cgfb .Lvl {if _aaed .IlvlAttr ==levelId {return NumberingLevel {_aaed };};};};};};};return NumberingLevel {};};

// SetFirstColumn controls the conditional formatting for the first column in a table.
func (_ccfa TableLook )SetFirstColumn (on bool ){if !on {_ccfa ._dbgfg .FirstColumnAttr =&_gee .ST_OnOff {};_ccfa ._dbgfg .FirstColumnAttr .ST_OnOff1 =_gee .ST_OnOff1Off ;}else {_ccfa ._dbgfg .FirstColumnAttr =&_gee .ST_OnOff {};_ccfa ._dbgfg .FirstColumnAttr .ST_OnOff1 =_gee .ST_OnOff1On ;};};

// SetBottom sets the bottom border to a specified type, color and thickness.
func (_bfdg TableBorders )SetBottom (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_bfdg ._cddae .Bottom =_eg .NewCT_Border ();_dgdb (_bfdg ._cddae .Bottom ,t ,c ,thickness );};

// SetPageMargins sets the page margins for a section
func (_egaf Section )SetPageMargins (top ,right ,bottom ,left ,header ,footer ,gutter _fd .Distance ){_eaba :=_eg .NewCT_PageMar ();_eaba .TopAttr .Int64 =_g .Int64 (int64 (top /_fd .Twips ));_eaba .BottomAttr .Int64 =_g .Int64 (int64 (bottom /_fd .Twips ));_eaba .RightAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (right /_fd .Twips ));_eaba .LeftAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (left /_fd .Twips ));_eaba .HeaderAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (header /_fd .Twips ));_eaba .FooterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (footer /_fd .Twips ));_eaba .GutterAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (gutter /_fd .Twips ));_egaf ._ccgc .PgMar =_eaba ;};

// Document is a text document that can be written out in the OOXML .docx
// format. It can be opened from a file on disk and modified, or created from
// scratch.
type Document struct{_gg .DocBase ;_bbe *_eg .Document ;Settings Settings ;Numbering Numbering ;Styles Styles ;_abee []*_eg .Hdr ;_aaa []_gg .Relationships ;_bfe []*_eg .Ftr ;_eab []_gg .Relationships ;_ccd _gg .Relationships ;_fga []*_fg .Theme ;_eea *_eg .WebSettings ;_ccb *_eg .Fonts ;_fdb *_eg .Endnotes ;_gcc *_eg .Footnotes ;_fgad []*_bdc .Ocx ;_dad []*chart ;_fbg string ;};

// Borders allows manipulation of the table borders.
func (_eccbb TableStyleProperties )Borders ()TableBorders {if _eccbb ._eggdf .TblBorders ==nil {_eccbb ._eggdf .TblBorders =_eg .NewCT_TblBorders ();};return TableBorders {_eccbb ._eggdf .TblBorders };};

// Outline returns true if run outline is on.
func (_fgce RunProperties )Outline ()bool {return _dfcc (_fgce ._efdg .Outline )};

// Footnotes returns the footnotes defined in the document.
func (_gefd *Document )Footnotes ()[]Footnote {_gfea :=[]Footnote {};for _ ,_ccdg :=range _gefd ._gcc .CT_Footnotes .Footnote {_gfea =append (_gfea ,Footnote {_gefd ,_ccdg });};return _gfea ;};

// Type returns the type of the field.
func (_ggbfa FormField )Type ()FormFieldType {if _ggbfa ._aefe .TextInput !=nil {return FormFieldTypeText ;}else if _ggbfa ._aefe .CheckBox !=nil {return FormFieldTypeCheckBox ;}else if _ggbfa ._aefe .DdList !=nil {return FormFieldTypeDropDown ;};return FormFieldTypeUnknown ;};func _abge (_deda *_eg .CT_P ,_edfedc map[string ]string ){for _ ,_ffdg :=range _deda .EG_PContent {for _ ,_aeff :=range _ffdg .EG_ContentRunContent {if _aeff .R !=nil {for _ ,_ced :=range _aeff .R .EG_RunInnerContent {_cegcf :=_ced .Drawing ;if _cegcf !=nil {for _ ,_eeea :=range _cegcf .Anchor {for _ ,_egec :=range _eeea .Graphic .GraphicData .Any {switch _ggge :=_egec .(type ){case *_bd .Pic :if _ggge .BlipFill !=nil &&_ggge .BlipFill .Blip !=nil {_befb (_ggge .BlipFill .Blip ,_edfedc );};default:};};};for _ ,_bcdg :=range _cegcf .Inline {for _ ,_bced :=range _bcdg .Graphic .GraphicData .Any {switch _ebbb :=_bced .(type ){case *_bd .Pic :if _ebbb .BlipFill !=nil &&_ebbb .BlipFill .Blip !=nil {_befb (_ebbb .BlipFill .Blip ,_edfedc );};default:};};};};};};};};};

// SetBeforeSpacing sets spacing above paragraph.
func (_cgfe Paragraph )SetBeforeSpacing (d _fd .Distance ){_cgfe .ensurePPr ();if _cgfe ._ffae .PPr .Spacing ==nil {_cgfe ._ffae .PPr .Spacing =_eg .NewCT_Spacing ();};_feae :=_cgfe ._ffae .PPr .Spacing ;_feae .BeforeAttr =&_gee .ST_TwipsMeasure {};_feae .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (d /_fd .Twips ));};

// GetShapeStyle returns string style of the shape in watermark and format it to ShapeStyle.
func (_dbbab *WatermarkPicture )GetShapeStyle ()_gd .ShapeStyle {if _dbbab ._aebc !=nil &&_dbbab ._aebc .StyleAttr !=nil {return _gd .NewShapeStyle (*_dbbab ._aebc .StyleAttr );};return _gd .NewShapeStyle ("");};

// TableLook returns the table look, or conditional formatting applied to a table style.
func (_agab TableProperties )TableLook ()TableLook {if _agab ._gcdd .TblLook ==nil {_agab ._gcdd .TblLook =_eg .NewCT_TblLook ();};return TableLook {_agab ._gcdd .TblLook };};

// SetNumberingDefinition sets the numbering definition ID via a NumberingDefinition
// defined in numbering.xml
func (_ccec Paragraph )SetNumberingDefinition (nd NumberingDefinition ){_ccec .ensurePPr ();if _ccec ._ffae .PPr .NumPr ==nil {_ccec ._ffae .PPr .NumPr =_eg .NewCT_NumPr ();};_daca :=_eg .NewCT_DecimalNumber ();_cgeb :=int64 (-1);for _ ,_dfgc :=range _ccec ._dageg .Numbering ._dgbab .Num {if _dfgc .AbstractNumId !=nil &&_dfgc .AbstractNumId .ValAttr ==nd .AbstractNumberID (){_cgeb =_dfgc .NumIdAttr ;};};if _cgeb ==-1{_bage :=_eg .NewCT_Num ();_ccec ._dageg .Numbering ._dgbab .Num =append (_ccec ._dageg .Numbering ._dgbab .Num ,_bage );_bage .NumIdAttr =int64 (len (_ccec ._dageg .Numbering ._dgbab .Num ));_bage .AbstractNumId =_eg .NewCT_DecimalNumber ();_bage .AbstractNumId .ValAttr =nd .AbstractNumberID ();};_daca .ValAttr =_cgeb ;_ccec ._ffae .PPr .NumPr .NumId =_daca ;};func (_becb *chart )RelId ()string {return _becb ._ffg };func _defb ()*_ggg .OfcLock {_fdccge :=_ggg .NewOfcLock ();_fdccge .ExtAttr =_ggg .ST_ExtEdit ;_fdccge .TextAttr =_gee .ST_TrueFalseTrue ;_fdccge .ShapetypeAttr =_gee .ST_TrueFalseTrue ;return _fdccge ;};

// SetFirstRow controls the conditional formatting for the first row in a table.
func (_dadfe TableLook )SetFirstRow (on bool ){if !on {_dadfe ._dbgfg .FirstRowAttr =&_gee .ST_OnOff {};_dadfe ._dbgfg .FirstRowAttr .ST_OnOff1 =_gee .ST_OnOff1Off ;}else {_dadfe ._dbgfg .FirstRowAttr =&_gee .ST_OnOff {};_dadfe ._dbgfg .FirstRowAttr .ST_OnOff1 =_gee .ST_OnOff1On ;};};

// SetEastAsiaTheme sets the font East Asia Theme.
func (_gafgd Fonts )SetEastAsiaTheme (t _eg .ST_Theme ){_gafgd ._fabcg .EastAsiaThemeAttr =t };

// Caps returns true if run font is capitalized.
func (_deae RunProperties )Caps ()bool {return _dfcc (_deae ._efdg .Caps )};

// RemoveEndnote removes a endnote from both the paragraph and the document
// the requested endnote must be anchored on the paragraph being referenced.
func (_deddc Paragraph )RemoveEndnote (id int64 ){_gbga :=_deddc ._dageg ._fdb ;var _adeef int ;for _ffbe ,_cfec :=range _gbga .CT_Endnotes .Endnote {if _cfec .IdAttr ==id {_adeef =_ffbe ;};};_adeef =0;_gbga .CT_Endnotes .Endnote [_adeef ]=nil ;_gbga .CT_Endnotes .Endnote [_adeef ]=_gbga .CT_Endnotes .Endnote [len (_gbga .CT_Endnotes .Endnote )-1];_gbga .CT_Endnotes .Endnote =_gbga .CT_Endnotes .Endnote [:len (_gbga .CT_Endnotes .Endnote )-1];var _abcd Run ;for _ ,_cbeg :=range _deddc .Runs (){if _bbag ,_abaf :=_cbeg .IsEndnote ();_bbag {if _abaf ==id {_abcd =_cbeg ;};};};_deddc .RemoveRun (_abcd );};

// TableBorders allows manipulation of borders on a table.
type TableBorders struct{_cddae *_eg .CT_TblBorders };

// GetDocRelTargetByID returns TargetAttr of document relationship given its IdAttr.
func (_eadg *Document )GetDocRelTargetByID (idAttr string )string {for _ ,_ebbff :=range _eadg ._ccd .X ().Relationship {if _ebbff .IdAttr ==idAttr {return _ebbff .TargetAttr ;};};return "";};

// SetBeforeAuto controls if spacing before a paragraph is automatically determined.
func (_ccac ParagraphSpacing )SetBeforeAuto (b bool ){if b {_ccac ._baaecd .BeforeAutospacingAttr =&_gee .ST_OnOff {};_ccac ._baaecd .BeforeAutospacingAttr .Bool =_g .Bool (true );}else {_ccac ._baaecd .BeforeAutospacingAttr =nil ;};};func (_gcfe Paragraph )addEndBookmark (_gcag int64 )*_eg .CT_MarkupRange {_cdcd :=_eg .NewEG_PContent ();_gcfe ._ffae .EG_PContent =append (_gcfe ._ffae .EG_PContent ,_cdcd );_aeggg :=_eg .NewEG_ContentRunContent ();_eacf :=_eg .NewEG_RunLevelElts ();_daabg :=_eg .NewEG_RangeMarkupElements ();_adfa :=_eg .NewCT_MarkupRange ();_adfa .IdAttr =_gcag ;_daabg .BookmarkEnd =_adfa ;_cdcd .EG_ContentRunContent =append (_cdcd .EG_ContentRunContent ,_aeggg );_aeggg .EG_RunLevelElts =append (_aeggg .EG_RunLevelElts ,_eacf );_eacf .EG_RangeMarkupElements =append (_eacf .EG_RangeMarkupElements ,_daabg );return _adfa ;};

// Name returns the name of the bookmark whcih is the document unique ID that
// identifies the bookmark.
func (_cfe Bookmark )Name ()string {return _cfe ._cbe .NameAttr };

// AddDefinition adds a new numbering definition.
func (_agba Numbering )AddDefinition ()NumberingDefinition {_egacf :=_eg .NewCT_Num ();_ggec :=int64 (1);for _ ,_agbf :=range _agba .Definitions (){if _agbf .AbstractNumberID ()>=_ggec {_ggec =_agbf .AbstractNumberID ()+1;};};_fdcae :=int64 (1);for _ ,_gaab :=range _agba .X ().Num {if _gaab .NumIdAttr >=_fdcae {_fdcae =_gaab .NumIdAttr +1;};};_egacf .NumIdAttr =_fdcae ;_egacf .AbstractNumId =_eg .NewCT_DecimalNumber ();_egacf .AbstractNumId .ValAttr =_ggec ;_bfge :=_eg .NewCT_AbstractNum ();_bfge .AbstractNumIdAttr =_ggec ;_agba ._dgbab .AbstractNum =append (_agba ._dgbab .AbstractNum ,_bfge );_agba ._dgbab .Num =append (_agba ._dgbab .Num ,_egacf );return NumberingDefinition {_bfge };};

// Bold returns true if run font is bold.
func (_fdbfg RunProperties )Bold ()bool {_gecag :=_fdbfg ._efdg ;return _dfcc (_gecag .B )||_dfcc (_gecag .BCs );};

// X returns the inner wrapped XML type.
func (_fbea Color )X ()*_eg .CT_Color {return _fbea ._gfbf };func (_dega Run )newIC ()*_eg .EG_RunInnerContent {_cbgc :=_eg .NewEG_RunInnerContent ();_dega ._fced .EG_RunInnerContent =append (_dega ._fced .EG_RunInnerContent ,_cbgc );return _cbgc ;};

// SetHangingIndent controls the hanging indent of the paragraph.
func (_eced ParagraphStyleProperties )SetHangingIndent (m _fd .Distance ){if _eced ._efcg .Ind ==nil {_eced ._efcg .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_eced ._efcg .Ind .HangingAttr =nil ;}else {_eced ._efcg .Ind .HangingAttr =&_gee .ST_TwipsMeasure {};_eced ._efcg .Ind .HangingAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (m /_fd .Twips ));};};const (FieldCurrentPage ="\u0050\u0041\u0047\u0045";FieldNumberOfPages ="\u004e\u0055\u004d\u0050\u0041\u0047\u0045\u0053";FieldDate ="\u0044\u0041\u0054\u0045";FieldCreateDate ="\u0043\u0052\u0045\u0041\u0054\u0045\u0044\u0041\u0054\u0045";FieldEditTime ="\u0045\u0044\u0049\u0054\u0054\u0049\u004d\u0045";FieldPrintDate ="\u0050R\u0049\u004e\u0054\u0044\u0041\u0054E";FieldSaveDate ="\u0053\u0041\u0056\u0045\u0044\u0041\u0054\u0045";FieldTIme ="\u0054\u0049\u004d\u0045";FieldTOC ="\u0054\u004f\u0043";);

// SetThemeShade sets the shade based off the theme color.
func (_cab Color )SetThemeShade (s uint8 ){_bee :=_cg .Sprintf ("\u0025\u0030\u0032\u0078",s );_cab ._gfbf .ThemeShadeAttr =&_bee ;};

// AnchoredDrawing is an absolutely positioned image within a document page.
type AnchoredDrawing struct{_aa *Document ;_ed *_eg .WdAnchor ;};

// AddParagraph adds a paragraph to the table cell.
func (_ca Cell )AddParagraph ()Paragraph {_bdd :=_eg .NewEG_BlockLevelElts ();_ca ._ccc .EG_BlockLevelElts =append (_ca ._ccc .EG_BlockLevelElts ,_bdd );_dcb :=_eg .NewEG_ContentBlockContent ();_bdd .EG_ContentBlockContent =append (_bdd .EG_ContentBlockContent ,_dcb );_fc :=_eg .NewCT_P ();_dcb .P =append (_dcb .P ,_fc );return Paragraph {_ca ._ggc ,_fc };};

// SetTop sets the top border to a specified type, color and thickness.
func (_feaag TableBorders )SetTop (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_feaag ._cddae .Top =_eg .NewCT_Border ();_dgdb (_feaag ._cddae .Top ,t ,c ,thickness );};

// VerticalAlign returns the value of run vertical align.
func (_gfbea RunProperties )VerticalAlignment ()_gee .ST_VerticalAlignRun {if _bcfb :=_gfbea ._efdg .VertAlign ;_bcfb !=nil {return _bcfb .ValAttr ;};return 0;};

// AbstractNumberID returns the ID that is unique within all numbering
// definitions that is used to assign the definition to a paragraph.
func (_becde NumberingDefinition )AbstractNumberID ()int64 {return _becde ._cafg .AbstractNumIdAttr };func (_adgda Styles )initializeDocDefaults (){_adgda ._ceaa .DocDefaults =_eg .NewCT_DocDefaults ();_adgda ._ceaa .DocDefaults .RPrDefault =_eg .NewCT_RPrDefault ();_adgda ._ceaa .DocDefaults .RPrDefault .RPr =_eg .NewCT_RPr ();_cfbfc :=RunProperties {_adgda ._ceaa .DocDefaults .RPrDefault .RPr };_cfbfc .SetSize (12*_fd .Point );_cfbfc .Fonts ().SetASCIITheme (_eg .ST_ThemeMajorAscii );_cfbfc .Fonts ().SetEastAsiaTheme (_eg .ST_ThemeMajorEastAsia );_cfbfc .Fonts ().SetHANSITheme (_eg .ST_ThemeMajorHAnsi );_cfbfc .Fonts ().SetCSTheme (_eg .ST_ThemeMajorBidi );_cfbfc .X ().Lang =_eg .NewCT_Language ();_cfbfc .X ().Lang .ValAttr =_g .String ("\u0065\u006e\u002dU\u0053");_cfbfc .X ().Lang .EastAsiaAttr =_g .String ("\u0065\u006e\u002dU\u0053");_cfbfc .X ().Lang .BidiAttr =_g .String ("\u0061\u0072\u002dS\u0041");_adgda ._ceaa .DocDefaults .PPrDefault =_eg .NewCT_PPrDefault ();};

// InlineDrawing is an inlined image within a run.
type InlineDrawing struct{_gcgb *Document ;_fabe *_eg .WdInline ;};

// AddRow adds a row to a table.
func (_bega Table )AddRow ()Row {_aggg :=_eg .NewEG_ContentRowContent ();_bega ._gdae .EG_ContentRowContent =append (_bega ._gdae .EG_ContentRowContent ,_aggg );_dfggg :=_eg .NewCT_Row ();_aggg .Tr =append (_aggg .Tr ,_dfggg );return Row {_bega ._gdea ,_dfggg };};

// X returns the inner wrapped XML type.
func (_afeg NumberingLevel )X ()*_eg .CT_Lvl {return _afeg ._dbba };

// SetSemiHidden controls if the style is hidden in the UI.
func (_gcadg Style )SetSemiHidden (b bool ){if b {_gcadg ._bgdg .SemiHidden =_eg .NewCT_OnOff ();}else {_gcadg ._bgdg .SemiHidden =nil ;};};

// SetRightPct sets the cell right margin
func (_gfb CellMargins )SetRightPct (pct float64 ){_gfb ._dge .Right =_eg .NewCT_TblWidth ();_cbbg (_gfb ._dge .Right ,pct );};

// Runs returns all of the runs in a paragraph.
func (_dcdg Paragraph )Runs ()[]Run {_dgce :=[]Run {};for _ ,_dceb :=range _dcdg ._ffae .EG_PContent {if _dceb .Hyperlink !=nil &&_dceb .Hyperlink .EG_ContentRunContent !=nil {for _ ,_caec :=range _dceb .Hyperlink .EG_ContentRunContent {if _caec .R !=nil {_dgce =append (_dgce ,Run {_dcdg ._dageg ,_caec .R });};};};for _ ,_ggce :=range _dceb .EG_ContentRunContent {if _ggce .R !=nil {_dgce =append (_dgce ,Run {_dcdg ._dageg ,_ggce .R });};if _ggce .Sdt !=nil &&_ggce .Sdt .SdtContent !=nil {for _ ,_fcgf :=range _ggce .Sdt .SdtContent .EG_ContentRunContent {if _fcgf .R !=nil {_dgce =append (_dgce ,Run {_dcdg ._dageg ,_fcgf .R });};};};};};return _dgce ;};

// Pict returns the pict object.
func (_affd *WatermarkText )Pict ()*_eg .CT_Picture {return _affd ._ebce };

// GetColor returns the color.Color object representing the run color.
func (_fdad ParagraphProperties )GetColor ()_ef .Color {if _ecga :=_fdad ._cagc .RPr .Color ;_ecga !=nil {_cfbe :=_ecga .ValAttr ;if _cfbe .ST_HexColorRGB !=nil {return _ef .FromHex (*_cfbe .ST_HexColorRGB );};};return _ef .Color {};};const (OnOffValueUnset OnOffValue =iota ;OnOffValueOff ;OnOffValueOn ;);

// SetTextWrapTopAndBottom sets the text wrap to top and bottom.
func (_dd AnchoredDrawing )SetTextWrapTopAndBottom (){_dd ._ed .Choice =&_eg .WdEG_WrapTypeChoice {};_dd ._ed .Choice .WrapTopAndBottom =_eg .NewWdCT_WrapTopBottom ();_dd ._ed .LayoutInCellAttr =true ;_dd ._ed .AllowOverlapAttr =true ;};func (_cdda Styles )initializeStyleDefaults (){_gefe :=_cdda .AddStyle ("\u004e\u006f\u0072\u006d\u0061\u006c",_eg .ST_StyleTypeParagraph ,true );_gefe .SetName ("\u004e\u006f\u0072\u006d\u0061\u006c");_gefe .SetPrimaryStyle (true );_ebcf :=_cdda .AddStyle ("D\u0065f\u0061\u0075\u006c\u0074\u0050\u0061\u0072\u0061g\u0072\u0061\u0070\u0068Fo\u006e\u0074",_eg .ST_StyleTypeCharacter ,true );_ebcf .SetName ("\u0044\u0065\u0066\u0061ul\u0074\u0020\u0050\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0020\u0046\u006fn\u0074");_ebcf .SetUISortOrder (1);_ebcf .SetSemiHidden (true );_ebcf .SetUnhideWhenUsed (true );_edcf :=_cdda .AddStyle ("\u0054i\u0074\u006c\u0065\u0043\u0068\u0061r",_eg .ST_StyleTypeCharacter ,false );_edcf .SetName ("\u0054\u0069\u0074\u006c\u0065\u0020\u0043\u0068\u0061\u0072");_edcf .SetBasedOn (_ebcf .StyleID ());_edcf .SetLinkedStyle ("\u0054\u0069\u0074l\u0065");_edcf .SetUISortOrder (10);_edcf .RunProperties ().Fonts ().SetASCIITheme (_eg .ST_ThemeMajorAscii );_edcf .RunProperties ().Fonts ().SetEastAsiaTheme (_eg .ST_ThemeMajorEastAsia );_edcf .RunProperties ().Fonts ().SetHANSITheme (_eg .ST_ThemeMajorHAnsi );_edcf .RunProperties ().Fonts ().SetCSTheme (_eg .ST_ThemeMajorBidi );_edcf .RunProperties ().SetSize (28*_fd .Point );_edcf .RunProperties ().SetKerning (14*_fd .Point );_edcf .RunProperties ().SetCharacterSpacing (-10*_fd .Twips );_dggb :=_cdda .AddStyle ("\u0054\u0069\u0074l\u0065",_eg .ST_StyleTypeParagraph ,false );_dggb .SetName ("\u0054\u0069\u0074l\u0065");_dggb .SetBasedOn (_gefe .StyleID ());_dggb .SetNextStyle (_gefe .StyleID ());_dggb .SetLinkedStyle (_edcf .StyleID ());_dggb .SetUISortOrder (10);_dggb .SetPrimaryStyle (true );_dggb .ParagraphProperties ().SetContextualSpacing (true );_dggb .RunProperties ().Fonts ().SetASCIITheme (_eg .ST_ThemeMajorAscii );_dggb .RunProperties ().Fonts ().SetEastAsiaTheme (_eg .ST_ThemeMajorEastAsia );_dggb .RunProperties ().Fonts ().SetHANSITheme (_eg .ST_ThemeMajorHAnsi );_dggb .RunProperties ().Fonts ().SetCSTheme (_eg .ST_ThemeMajorBidi );_dggb .RunProperties ().SetSize (28*_fd .Point );_dggb .RunProperties ().SetKerning (14*_fd .Point );_dggb .RunProperties ().SetCharacterSpacing (-10*_fd .Twips );_defa :=_cdda .AddStyle ("T\u0061\u0062\u006c\u0065\u004e\u006f\u0072\u006d\u0061\u006c",_eg .ST_StyleTypeTable ,false );_defa .SetName ("\u004e\u006f\u0072m\u0061\u006c\u0020\u0054\u0061\u0062\u006c\u0065");_defa .SetUISortOrder (99);_defa .SetSemiHidden (true );_defa .SetUnhideWhenUsed (true );_defa .X ().TblPr =_eg .NewCT_TblPrBase ();_dbfa :=NewTableWidth ();_defa .X ().TblPr .TblInd =_dbfa .X ();_dbfa .SetValue (0*_fd .Dxa );_defa .X ().TblPr .TblCellMar =_eg .NewCT_TblCellMar ();_dbfa =NewTableWidth ();_defa .X ().TblPr .TblCellMar .Top =_dbfa .X ();_dbfa .SetValue (0*_fd .Dxa );_dbfa =NewTableWidth ();_defa .X ().TblPr .TblCellMar .Bottom =_dbfa .X ();_dbfa .SetValue (0*_fd .Dxa );_dbfa =NewTableWidth ();_defa .X ().TblPr .TblCellMar .Left =_dbfa .X ();_dbfa .SetValue (108*_fd .Dxa );_dbfa =NewTableWidth ();_defa .X ().TblPr .TblCellMar .Right =_dbfa .X ();_dbfa .SetValue (108*_fd .Dxa );_dbabd :=_cdda .AddStyle ("\u004e\u006f\u004c\u0069\u0073\u0074",_eg .ST_StyleTypeNumbering ,false );_dbabd .SetName ("\u004eo\u0020\u004c\u0069\u0073\u0074");_dbabd .SetUISortOrder (1);_dbabd .SetSemiHidden (true );_dbabd .SetUnhideWhenUsed (true );_cgdb :=[]_fd .Distance {16,13,12,11,11,11,11,11,11};_efdd :=[]_fd .Distance {240,40,40,40,40,40,40,40,40};for _cgfgb :=0;_cgfgb < 9;_cgfgb ++{_bfbdc :=_cg .Sprintf ("\u0048e\u0061\u0064\u0069\u006e\u0067\u0025d",_cgfgb +1);_ebdf :=_cdda .AddStyle (_bfbdc +"\u0043\u0068\u0061\u0072",_eg .ST_StyleTypeCharacter ,false );_ebdf .SetName (_cg .Sprintf ("\u0048e\u0061d\u0069\u006e\u0067\u0020\u0025\u0064\u0020\u0043\u0068\u0061\u0072",_cgfgb +1));_ebdf .SetBasedOn (_ebcf .StyleID ());_ebdf .SetLinkedStyle (_bfbdc );_ebdf .SetUISortOrder (9+_cgfgb );_ebdf .RunProperties ().SetSize (_cgdb [_cgfgb ]*_fd .Point );_cdfg :=_cdda .AddStyle (_bfbdc ,_eg .ST_StyleTypeParagraph ,false );_cdfg .SetName (_cg .Sprintf ("\u0068\u0065\u0061\u0064\u0069\u006e\u0067\u0020\u0025\u0064",_cgfgb +1));_cdfg .SetNextStyle (_gefe .StyleID ());_cdfg .SetLinkedStyle (_cdfg .StyleID ());_cdfg .SetUISortOrder (9+_cgfgb );_cdfg .SetPrimaryStyle (true );_cdfg .ParagraphProperties ().SetKeepNext (true );_cdfg .ParagraphProperties ().SetSpacing (_efdd [_cgfgb ]*_fd .Twips ,0);_cdfg .ParagraphProperties ().SetOutlineLevel (_cgfgb );_cdfg .RunProperties ().SetSize (_cgdb [_cgfgb ]*_fd .Point );};};

// Properties returns the cell properties.
func (_edc Cell )Properties ()CellProperties {if _edc ._ccc .TcPr ==nil {_edc ._ccc .TcPr =_eg .NewCT_TcPr ();};return CellProperties {_edc ._ccc .TcPr };};func _bcbe (_gdc *_eg .CT_Tbl ,_fcef map[string ]string ){for _ ,_dbcg :=range _gdc .EG_ContentRowContent {for _ ,_aaec :=range _dbcg .Tr {for _ ,_dbbf :=range _aaec .EG_ContentCellContent {for _ ,_bfb :=range _dbbf .Tc {for _ ,_eegb :=range _bfb .EG_BlockLevelElts {for _ ,_gaded :=range _eegb .EG_ContentBlockContent {for _ ,_bfeeb :=range _gaded .P {_adggb (_bfeeb ,_fcef );};for _ ,_cgfc :=range _gaded .Tbl {_bcbe (_cgfc ,_fcef );};};};};};};};};

// CharacterSpacingMeasure returns paragraph characters spacing with its measure which can be mm, cm, in, pt, pc or pi.
func (_abgc ParagraphProperties )CharacterSpacingMeasure ()string {if _aaef :=_abgc ._cagc .RPr .Spacing ;_aaef !=nil {_ddbf :=_aaef .ValAttr ;if _ddbf .ST_UniversalMeasure !=nil {return *_ddbf .ST_UniversalMeasure ;};};return "";};

// X returns the inner wrapped XML type.
func (_dbbd Settings )X ()*_eg .Settings {return _dbbd ._cfde };

// X returns the inner wrapped XML type.
func (_cbdb NumberingDefinition )X ()*_eg .CT_AbstractNum {return _cbdb ._cafg };

// X returns the inner wrapped XML type.
func (_ebcg InlineDrawing )X ()*_eg .WdInline {return _ebcg ._fabe };

// SetLineSpacing sets the spacing between lines in a paragraph.
func (_dgda Paragraph )SetLineSpacing (d _fd .Distance ,rule _eg .ST_LineSpacingRule ){_dgda .ensurePPr ();if _dgda ._ffae .PPr .Spacing ==nil {_dgda ._ffae .PPr .Spacing =_eg .NewCT_Spacing ();};_gdac :=_dgda ._ffae .PPr .Spacing ;if rule ==_eg .ST_LineSpacingRuleUnset {_gdac .LineRuleAttr =_eg .ST_LineSpacingRuleUnset ;_gdac .LineAttr =nil ;}else {_gdac .LineRuleAttr =rule ;_gdac .LineAttr =&_eg .ST_SignedTwipsMeasure {};_gdac .LineAttr .Int64 =_g .Int64 (int64 (d /_fd .Twips ));};};

// SetStyle sets the font size.
func (_ebdag RunProperties )SetStyle (style string ){if style ==""{_ebdag ._efdg .RStyle =nil ;}else {_ebdag ._efdg .RStyle =_eg .NewCT_String ();_ebdag ._efdg .RStyle .ValAttr =style ;};};

// SetStrikeThrough sets the run to strike-through.
func (_acde RunProperties )SetStrikeThrough (b bool ){if !b {_acde ._efdg .Strike =nil ;}else {_acde ._efdg .Strike =_eg .NewCT_OnOff ();};};

// SetStartIndent controls the start indentation.
func (_fbbf ParagraphProperties )SetStartIndent (m _fd .Distance ){if _fbbf ._cagc .Ind ==nil {_fbbf ._cagc .Ind =_eg .NewCT_Ind ();};if m ==_fd .Zero {_fbbf ._cagc .Ind .StartAttr =nil ;}else {_fbbf ._cagc .Ind .StartAttr =&_eg .ST_SignedTwipsMeasure {};_fbbf ._cagc .Ind .StartAttr .Int64 =_g .Int64 (int64 (m /_fd .Twips ));};};

// SetStartPct sets the cell start margin
func (_cbg CellMargins )SetStartPct (pct float64 ){_cbg ._dge .Start =_eg .NewCT_TblWidth ();_cbbg (_cbg ._dge .Start ,pct );};func _bgfa (_eefe *_eg .EG_ContentBlockContent )[]Bookmark {_edfee :=[]Bookmark {};for _ ,_fegc :=range _eefe .P {for _ ,_fdfc :=range _fegc .EG_PContent {for _ ,_dfea :=range _fdfc .EG_ContentRunContent {for _ ,_fcebf :=range _dfea .EG_RunLevelElts {for _ ,_ddag :=range _fcebf .EG_RangeMarkupElements {if _ddag .BookmarkStart !=nil {_edfee =append (_edfee ,Bookmark {_ddag .BookmarkStart });};};};};};};for _ ,_bfd :=range _eefe .EG_RunLevelElts {for _ ,_fedc :=range _bfd .EG_RangeMarkupElements {if _fedc .BookmarkStart !=nil {_edfee =append (_edfee ,Bookmark {_fedc .BookmarkStart });};};};for _ ,_fabc :=range _eefe .Tbl {for _ ,_dgcf :=range _fabc .EG_ContentRowContent {for _ ,_bfee :=range _dgcf .Tr {for _ ,_ddba :=range _bfee .EG_ContentCellContent {for _ ,_edgc :=range _ddba .Tc {for _ ,_bbbb :=range _edgc .EG_BlockLevelElts {for _ ,_gbac :=range _bbbb .EG_ContentBlockContent {for _ ,_fcdc :=range _bgfa (_gbac ){_edfee =append (_edfee ,_fcdc );};};};};};};};};return _edfee ;};

// SetCellSpacingAuto sets the cell spacing within a table to automatic.
func (_febaf TableProperties )SetCellSpacingAuto (){_febaf ._gcdd .TblCellSpacing =_eg .NewCT_TblWidth ();_febaf ._gcdd .TblCellSpacing .TypeAttr =_eg .ST_TblWidthAuto ;};

// NewAnchorDrawWrapOptions return anchor drawing options property.
func NewAnchorDrawWrapOptions ()*AnchorDrawWrapOptions {_cbc :=&AnchorDrawWrapOptions {};if !_cbc ._bbg {_ddc ,_ceb :=_bdg ();_cbc ._adg =_ddc ;_cbc ._dcf =_ceb ;};return _cbc ;};

// SetHANSITheme sets the font H ANSI Theme.
func (_egdc Fonts )SetHANSITheme (t _eg .ST_Theme ){_egdc ._fabcg .HAnsiThemeAttr =t };

// HasFootnotes returns a bool based on the presence or abscence of footnotes within
// the document.
func (_acef *Document )HasFootnotes ()bool {return _acef ._gcc !=nil };

// Borders allows controlling individual cell borders.
func (_fbee CellProperties )Borders ()CellBorders {if _fbee ._cgb .TcBorders ==nil {_fbee ._cgb .TcBorders =_eg .NewCT_TcBorders ();};return CellBorders {_fbee ._cgb .TcBorders };};func (_cbbgd Endnote )id ()int64 {return _cbbgd ._cfcf .IdAttr };

// SetVerticalAlignment controls the vertical alignment of the run, this is used
// to control if text is superscript/subscript.
func (_ddcd RunProperties )SetVerticalAlignment (v _gee .ST_VerticalAlignRun ){if v ==_gee .ST_VerticalAlignRunUnset {_ddcd ._efdg .VertAlign =nil ;}else {_ddcd ._efdg .VertAlign =_eg .NewCT_VerticalAlignRun ();_ddcd ._efdg .VertAlign .ValAttr =v ;};};

// X returns the inner wrapped XML type.
func (_fgba TableLook )X ()*_eg .CT_TblLook {return _fgba ._dbgfg };

// Font returns the name of paragraph font family.
func (_bebb ParagraphProperties )Font ()string {if _bfbd :=_bebb ._cagc .RPr .RFonts ;_bfbd !=nil {if _bfbd .AsciiAttr !=nil {return *_bfbd .AsciiAttr ;}else if _bfbd .HAnsiAttr !=nil {return *_bfbd .HAnsiAttr ;}else if _bfbd .CsAttr !=nil {return *_bfbd .CsAttr ;};};return "";};

// ExtractFromHeader returns text from the document header as an array of TextItems.
func ExtractFromHeader (header *_eg .Hdr )[]TextItem {return _fedb (header .EG_ContentBlockContent ,nil )};

// SetKeepOnOnePage controls if all lines in a paragraph are kept on the same
// page.
func (_aade ParagraphProperties )SetKeepOnOnePage (b bool ){if !b {_aade ._cagc .KeepLines =nil ;}else {_aade ._cagc .KeepLines =_eg .NewCT_OnOff ();};};

// GetText returns text in the watermark.
func (_fffed *WatermarkText )GetText ()string {_degb :=_fffed .getShape ();if _fffed ._dbcca !=nil {_fabea :=_fffed ._dbcca .EG_ShapeElements ;if len (_fabea )> 0&&_fabea [0].Textpath !=nil {return *_fabea [0].Textpath .StringAttr ;};}else {_dead :=_fffed .findNode (_degb ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _ ,_bgeab :=range _dead .Attrs {if _bgeab .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{return _bgeab .Value ;};};};return "";};

// UnderlineColor returns the hex color value of paragraph underline.
func (_dced ParagraphProperties )UnderlineColor ()string {if _cafgg :=_dced ._cagc .RPr .U ;_cafgg !=nil {_dgbe :=_cafgg .ColorAttr ;if _dgbe !=nil &&_dgbe .ST_HexColorRGB !=nil {return *_dgbe .ST_HexColorRGB ;};};return "";};

// SetBottomPct sets the cell bottom margin
func (_fceg CellMargins )SetBottomPct (pct float64 ){_fceg ._dge .Bottom =_eg .NewCT_TblWidth ();_cbbg (_fceg ._dge .Bottom ,pct );};

// SetText sets the watermark text.
func (_ddga *WatermarkText )SetText (text string ){_daafba :=_ddga .getShape ();if _ddga ._dbcca !=nil {_bbfd :=_ddga ._dbcca .EG_ShapeElements ;if len (_bbfd )> 0&&_bbfd [0].Textpath !=nil {_bbfd [0].Textpath .StringAttr =&text ;};}else {_aggc :=_ddga .findNode (_daafba ,"\u0074\u0065\u0078\u0074\u0070\u0061\u0074\u0068");for _fafcf ,_accg :=range _aggc .Attrs {if _accg .Name .Local =="\u0073\u0074\u0072\u0069\u006e\u0067"{_aggc .Attrs [_fafcf ].Value =text ;};};};};

// InsertRunBefore inserts a run in the paragraph before the relative run.
func (_ggbd Paragraph )InsertRunBefore (relativeTo Run )Run {return _ggbd .insertRun (relativeTo ,true )};

// RemoveParagraph removes a paragraph from the footnote.
func (_efge Footnote )RemoveParagraph (p Paragraph ){for _ ,_cecbc :=range _efge .content (){for _ffbdb ,_accd :=range _cecbc .P {if _accd ==p ._ffae {copy (_cecbc .P [_ffbdb :],_cecbc .P [_ffbdb +1:]);_cecbc .P =_cecbc .P [0:len (_cecbc .P )-1];return ;};};};};

// Paragraphs returns the paragraphs within a structured document tag.
func (_acae StructuredDocumentTag )Paragraphs ()[]Paragraph {if _acae ._fbeac .SdtContent ==nil {return nil ;};_aeadb :=[]Paragraph {};for _ ,_cefab :=range _acae ._fbeac .SdtContent .P {_aeadb =append (_aeadb ,Paragraph {_acae ._bgeeg ,_cefab });};return _aeadb ;};

// SetBefore sets the spacing that comes before the paragraph.
func (_cceg ParagraphSpacing )SetBefore (before _fd .Distance ){_cceg ._baaecd .BeforeAttr =&_gee .ST_TwipsMeasure {};_cceg ._baaecd .BeforeAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (before /_fd .Twips ));};

// Clear clears all content within a footer
func (_egba Footer )Clear (){_egba ._dbac .EG_ContentBlockContent =nil };

// Cells returns the cells defined in the table.
func (_fefd Row )Cells ()[]Cell {_geefb :=[]Cell {};for _ ,_dcab :=range _fefd ._cgaf .EG_ContentCellContent {for _ ,_afcd :=range _dcab .Tc {_geefb =append (_geefb ,Cell {_fefd ._becdc ,_afcd });};if _dcab .Sdt !=nil &&_dcab .Sdt .SdtContent !=nil {for _ ,_abdb :=range _dcab .Sdt .SdtContent .Tc {_geefb =append (_geefb ,Cell {_fefd ._becdc ,_abdb });};};};return _geefb ;};var _fec =false ;

// Italic returns true if paragraph font is italic.
func (_gaff ParagraphProperties )Italic ()bool {_ffff :=_gaff ._cagc .RPr ;return _dfcc (_ffff .I )||_dfcc (_ffff .ICs );};

// X returns the inner wrapped XML type.
func (_cgae Style )X ()*_eg .CT_Style {return _cgae ._bgdg };

// SetHorizontalBanding controls the conditional formatting for horizontal banding.
func (_gefae TableLook )SetHorizontalBanding (on bool ){if !on {_gefae ._dbgfg .NoHBandAttr =&_gee .ST_OnOff {};_gefae ._dbgfg .NoHBandAttr .ST_OnOff1 =_gee .ST_OnOff1On ;}else {_gefae ._dbgfg .NoHBandAttr =&_gee .ST_OnOff {};_gefae ._dbgfg .NoHBandAttr .ST_OnOff1 =_gee .ST_OnOff1Off ;};};func _dfgcc ()*_ggg .Path {_fddf :=_ggg .NewPath ();_fddf .ExtrusionokAttr =_gee .ST_TrueFalseTrue ;_fddf .GradientshapeokAttr =_gee .ST_TrueFalseTrue ;_fddf .ConnecttypeAttr =_ggg .OfcST_ConnectTypeRect ;return _fddf ;};

// WatermarkText is watermark text within the document.
type WatermarkText struct{_ebce *_eg .CT_Picture ;_ecce *_gd .TextpathStyle ;_dbcca *_ggg .Shape ;_ffdd *_ggg .Shapetype ;};

// Footnote returns the footnote based on the ID; this can be used nicely with
// the run.IsFootnote() functionality.
func (_ede *Document )Footnote (id int64 )Footnote {for _ ,_gde :=range _ede .Footnotes (){if _gde .id ()==id {return _gde ;};};return Footnote {};};const (FormFieldTypeUnknown FormFieldType =iota ;FormFieldTypeText ;FormFieldTypeCheckBox ;FormFieldTypeDropDown ;);

// NumberingDefinition defines a numbering definition for a list of pragraphs.
type NumberingDefinition struct{_cafg *_eg .CT_AbstractNum };

// AddStyle adds a new empty style.
func (_aada Styles )AddStyle (styleID string ,t _eg .ST_StyleType ,isDefault bool )Style {_ceff :=_eg .NewCT_Style ();_ceff .TypeAttr =t ;if isDefault {_ceff .DefaultAttr =&_gee .ST_OnOff {};_ceff .DefaultAttr .Bool =_g .Bool (isDefault );};_ceff .StyleIdAttr =_g .String (styleID );_aada ._ceaa .Style =append (_aada ._ceaa .Style ,_ceff );return Style {_ceff };};

// Text returns the underlying tet in the run.
func (_gbgg Run )Text ()string {if len (_gbgg ._fced .EG_RunInnerContent )==0{return "";};_efcb :=_be .Buffer {};for _ ,_egfa :=range _gbgg ._fced .EG_RunInnerContent {if _egfa .T !=nil {_efcb .WriteString (_egfa .T .Content );};if _egfa .Tab !=nil {_efcb .WriteByte ('\t');};};return _efcb .String ();};

// SetAll sets all of the borders to a given value.
func (_gfe CellBorders )SetAll (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_gfe .SetBottom (t ,c ,thickness );_gfe .SetLeft (t ,c ,thickness );_gfe .SetRight (t ,c ,thickness );_gfe .SetTop (t ,c ,thickness );_gfe .SetInsideHorizontal (t ,c ,thickness );_gfe .SetInsideVertical (t ,c ,thickness );};

// Header is a header for a document section.
type Header struct{_efff *Document ;_faac *_eg .Hdr ;};

// SetTarget sets the URL target of the hyperlink.
func (_dbaa HyperLink )SetTarget (url string ){_ddfa :=_dbaa ._acaf .AddHyperlink (url );_dbaa ._eccf .IdAttr =_g .String (_gg .Relationship (_ddfa ).ID ());_dbaa ._eccf .AnchorAttr =nil ;};

// SetWidthAuto sets the the table width to automatic.
func (_bgbg TableProperties )SetWidthAuto (){_bgbg ._gcdd .TblW =_eg .NewCT_TblWidth ();_bgbg ._gcdd .TblW .TypeAttr =_eg .ST_TblWidthAuto ;};

// SetAlignment controls the paragraph alignment
func (_bfdf ParagraphProperties )SetAlignment (align _eg .ST_Jc ){if align ==_eg .ST_JcUnset {_bfdf ._cagc .Jc =nil ;}else {_bfdf ._cagc .Jc =_eg .NewCT_Jc ();_bfdf ._cagc .Jc .ValAttr =align ;};};func (_geec Paragraph )insertRun (_bfce Run ,_ffef bool )Run {for _ ,_bdcd :=range _geec ._ffae .EG_PContent {for _geca ,_ecgbb :=range _bdcd .EG_ContentRunContent {if _ecgbb .R ==_bfce .X (){_ggbg :=_eg .NewCT_R ();_bdcd .EG_ContentRunContent =append (_bdcd .EG_ContentRunContent ,nil );if _ffef {copy (_bdcd .EG_ContentRunContent [_geca +1:],_bdcd .EG_ContentRunContent [_geca :]);_bdcd .EG_ContentRunContent [_geca ]=_eg .NewEG_ContentRunContent ();_bdcd .EG_ContentRunContent [_geca ].R =_ggbg ;}else {copy (_bdcd .EG_ContentRunContent [_geca +2:],_bdcd .EG_ContentRunContent [_geca +1:]);_bdcd .EG_ContentRunContent [_geca +1]=_eg .NewEG_ContentRunContent ();_bdcd .EG_ContentRunContent [_geca +1].R =_ggbg ;};return Run {_geec ._dageg ,_ggbg };};if _ecgbb .Sdt !=nil &&_ecgbb .Sdt .SdtContent !=nil {for _ ,_gaag :=range _ecgbb .Sdt .SdtContent .EG_ContentRunContent {if _gaag .R ==_bfce .X (){_cgea :=_eg .NewCT_R ();_ecgbb .Sdt .SdtContent .EG_ContentRunContent =append (_ecgbb .Sdt .SdtContent .EG_ContentRunContent ,nil );if _ffef {copy (_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca +1:],_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca :]);_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca ]=_eg .NewEG_ContentRunContent ();_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca ].R =_cgea ;}else {copy (_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca +2:],_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca +1:]);_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca +1]=_eg .NewEG_ContentRunContent ();_ecgbb .Sdt .SdtContent .EG_ContentRunContent [_geca +1].R =_cgea ;};return Run {_geec ._dageg ,_cgea };};};};};};return _geec .AddRun ();};

// AddParagraph adds a paragraph to the header.
func (_faaa Header )AddParagraph ()Paragraph {_aegb :=_eg .NewEG_ContentBlockContent ();_faaa ._faac .EG_ContentBlockContent =append (_faaa ._faac .EG_ContentBlockContent ,_aegb );_fgcd :=_eg .NewCT_P ();_aegb .P =append (_aegb .P ,_fgcd );return Paragraph {_faaa ._efff ,_fgcd };};

// SaveToFile writes the document out to a file.
func (_cbdd *Document )SaveToFile (path string )error {_ebe ,_ccgb :=_ge .Create (path );if _ccgb !=nil {return _ccgb ;};defer _ebe .Close ();return _cbdd .Save (_ebe );};

// InsertRunAfter inserts a run in the paragraph after the relative run.
func (_deed Paragraph )InsertRunAfter (relativeTo Run )Run {return _deed .insertRun (relativeTo ,false )};

// SetLinkedStyle sets the style that this style is linked to.
func (_fded Style )SetLinkedStyle (name string ){if name ==""{_fded ._bgdg .Link =nil ;}else {_fded ._bgdg .Link =_eg .NewCT_String ();_fded ._bgdg .Link .ValAttr =name ;};};func (_afgdc *WatermarkPicture )findNode (_cecff *_g .XSDAny ,_gbbcf string )*_g .XSDAny {for _ ,_gecb :=range _cecff .Nodes {if _gecb .XMLName .Local ==_gbbcf {return _gecb ;};};return nil ;};

// InitializeDefault constructs the default styles.
func (_cbff Styles )InitializeDefault (){_cbff .initializeDocDefaults ();_cbff .initializeStyleDefaults ();};

// Clear removes all of the content from within a run.
func (_ggdg Run )Clear (){_ggdg ._fced .EG_RunInnerContent =nil };

// SetTextWrapTight sets the text wrap to tight with a give wrap type.
func (_ag AnchoredDrawing )SetTextWrapTight (option *AnchorDrawWrapOptions ){_ag ._ed .Choice =&_eg .WdEG_WrapTypeChoice {};_ag ._ed .Choice .WrapTight =_eg .NewWdCT_WrapTight ();_ag ._ed .Choice .WrapTight .WrapTextAttr =_eg .WdST_WrapTextBothSides ;_da :=false ;_ag ._ed .Choice .WrapTight .WrapPolygon .EditedAttr =&_da ;if option ==nil {option =NewAnchorDrawWrapOptions ();};_ag ._ed .Choice .WrapTight .WrapPolygon .LineTo =option .GetWrapPathLineTo ();_ag ._ed .Choice .WrapTight .WrapPolygon .Start =option .GetWrapPathStart ();_ag ._ed .LayoutInCellAttr =true ;_ag ._ed .AllowOverlapAttr =true ;};

// SetName sets the name of the image, visible in the properties of the image
// within Word.
func (_gf AnchoredDrawing )SetName (name string ){_gf ._ed .DocPr .NameAttr =name ;for _ ,_ggd :=range _gf ._ed .Graphic .GraphicData .Any {if _bec ,_ab :=_ggd .(*_bd .Pic );_ab {_bec .NvPicPr .CNvPr .DescrAttr =_g .String (name );};};};

// InsertRowAfter inserts a row after another row
func (_agbg Table )InsertRowAfter (r Row )Row {for _bcdfc ,_gfed :=range _agbg ._gdae .EG_ContentRowContent {if len (_gfed .Tr )> 0&&r .X ()==_gfed .Tr [0]{_abfcb :=_eg .NewEG_ContentRowContent ();if len (_agbg ._gdae .EG_ContentRowContent )< _bcdfc +2{return _agbg .AddRow ();};_agbg ._gdae .EG_ContentRowContent =append (_agbg ._gdae .EG_ContentRowContent ,nil );copy (_agbg ._gdae .EG_ContentRowContent [_bcdfc +2:],_agbg ._gdae .EG_ContentRowContent [_bcdfc +1:]);_agbg ._gdae .EG_ContentRowContent [_bcdfc +1]=_abfcb ;_cddcf :=_eg .NewCT_Row ();_abfcb .Tr =append (_abfcb .Tr ,_cddcf );return Row {_agbg ._gdea ,_cddcf };};};return _agbg .AddRow ();};

// Strike returns true if run is striked.
func (_agcg RunProperties )Strike ()bool {return _dfcc (_agcg ._efdg .Strike )};

// SetMultiLevelType sets the multilevel type.
func (_ecdd NumberingDefinition )SetMultiLevelType (t _eg .ST_MultiLevelType ){if t ==_eg .ST_MultiLevelTypeUnset {_ecdd ._cafg .MultiLevelType =nil ;}else {_ecdd ._cafg .MultiLevelType =_eg .NewCT_MultiLevelType ();_ecdd ._cafg .MultiLevelType .ValAttr =t ;};};

// SetColor sets a specific color or auto.
func (_edfe Color )SetColor (v _ef .Color ){if v .IsAuto (){_edfe ._gfbf .ValAttr .ST_HexColorAuto =_eg .ST_HexColorAutoAuto ;_edfe ._gfbf .ValAttr .ST_HexColorRGB =nil ;}else {_edfe ._gfbf .ValAttr .ST_HexColorAuto =_eg .ST_HexColorAutoUnset ;_edfe ._gfbf .ValAttr .ST_HexColorRGB =v .AsRGBString ();};};

// SetPictureWashout set washout to watermark picture.
func (_eadge *WatermarkPicture )SetPictureWashout (isWashout bool ){if _eadge ._aebc !=nil {_abgeg :=_eadge ._aebc .EG_ShapeElements ;if len (_abgeg )> 0&&_abgeg [0].Imagedata !=nil {if isWashout {_ceef :="\u0031\u0039\u0036\u0036\u0031\u0066";_cdcf :="\u0032\u0032\u0039\u0033\u0038\u0066";_abgeg [0].Imagedata .GainAttr =&_ceef ;_abgeg [0].Imagedata .BlacklevelAttr =&_cdcf ;};};};};

// SetRight sets the right border to a specified type, color and thickness.
func (_daef TableBorders )SetRight (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_daef ._cddae .Right =_eg .NewCT_Border ();_dgdb (_daef ._cddae .Right ,t ,c ,thickness );};func (_cbcgc *WatermarkText )getShapeType ()*_g .XSDAny {return _cbcgc .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");};

// SetTop sets the top border to a specified type, color and thickness.
func (_fbe CellBorders )SetTop (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_fbe ._cgaa .Top =_eg .NewCT_Border ();_dgdb (_fbe ._cgaa .Top ,t ,c ,thickness );};

// SetAfterLineSpacing sets spacing below paragraph in line units.
func (_ecee Paragraph )SetAfterLineSpacing (d _fd .Distance ){_ecee .ensurePPr ();if _ecee ._ffae .PPr .Spacing ==nil {_ecee ._ffae .PPr .Spacing =_eg .NewCT_Spacing ();};_eabd :=_ecee ._ffae .PPr .Spacing ;_eabd .AfterLinesAttr =_g .Int64 (int64 (d /_fd .Twips ));};

// Styles returns all styles.
func (_cgbdb Styles )Styles ()[]Style {_bbbg :=[]Style {};for _ ,_ggdf :=range _cgbdb ._ceaa .Style {_bbbg =append (_bbbg ,Style {_ggdf });};return _bbbg ;};func (_baga *Document )insertParagraph (_cfb Paragraph ,_acefd bool )Paragraph {if _baga ._bbe .Body ==nil {return _baga .AddParagraph ();};_cccab :=_cfb .X ();for _ ,_dbab :=range _baga ._bbe .Body .EG_BlockLevelElts {for _ ,_bbae :=range _dbab .EG_ContentBlockContent {for _daab ,_cbcb :=range _bbae .P {if _cbcb ==_cccab {_geag :=_eg .NewCT_P ();_bbae .P =append (_bbae .P ,nil );if _acefd {copy (_bbae .P [_daab +1:],_bbae .P [_daab :]);_bbae .P [_daab ]=_geag ;}else {copy (_bbae .P [_daab +2:],_bbae .P [_daab +1:]);_bbae .P [_daab +1]=_geag ;};return Paragraph {_baga ,_geag };};};for _ ,_ddb :=range _bbae .Tbl {for _ ,_bge :=range _ddb .EG_ContentRowContent {for _ ,_afba :=range _bge .Tr {for _ ,_ebc :=range _afba .EG_ContentCellContent {for _ ,_acca :=range _ebc .Tc {for _ ,_aabg :=range _acca .EG_BlockLevelElts {for _ ,_fccc :=range _aabg .EG_ContentBlockContent {for _dadaf ,_fdbd :=range _fccc .P {if _fdbd ==_cccab {_eecf :=_eg .NewCT_P ();_fccc .P =append (_fccc .P ,nil );if _acefd {copy (_fccc .P [_dadaf +1:],_fccc .P [_dadaf :]);_fccc .P [_dadaf ]=_eecf ;}else {copy (_fccc .P [_dadaf +2:],_fccc .P [_dadaf +1:]);_fccc .P [_dadaf +1]=_eecf ;};return Paragraph {_baga ,_eecf };};};};};};};};};};if _bbae .Sdt !=nil &&_bbae .Sdt .SdtContent !=nil &&_bbae .Sdt .SdtContent .P !=nil {for _fgadd ,_cee :=range _bbae .Sdt .SdtContent .P {if _cee ==_cccab {_afgd :=_eg .NewCT_P ();_bbae .Sdt .SdtContent .P =append (_bbae .Sdt .SdtContent .P ,nil );if _acefd {copy (_bbae .Sdt .SdtContent .P [_fgadd +1:],_bbae .Sdt .SdtContent .P [_fgadd :]);_bbae .Sdt .SdtContent .P [_fgadd ]=_afgd ;}else {copy (_bbae .Sdt .SdtContent .P [_fgadd +2:],_bbae .Sdt .SdtContent .P [_fgadd +1:]);_bbae .Sdt .SdtContent .P [_fgadd +1]=_afgd ;};return Paragraph {_baga ,_afgd };};};};};};return _baga .AddParagraph ();};

// AddBookmark adds a bookmark to a document that can then be used from a hyperlink. Name is a document
// unique name that identifies the bookmark so it can be referenced from hyperlinks.
func (_dace Paragraph )AddBookmark (name string )Bookmark {_daff :=_eg .NewEG_PContent ();_dbaae :=_eg .NewEG_ContentRunContent ();_daff .EG_ContentRunContent =append (_daff .EG_ContentRunContent ,_dbaae );_gcef :=_eg .NewEG_RunLevelElts ();_dbaae .EG_RunLevelElts =append (_dbaae .EG_RunLevelElts ,_gcef );_cefgg :=_eg .NewEG_RangeMarkupElements ();_cbgad :=_eg .NewCT_Bookmark ();_cefgg .BookmarkStart =_cbgad ;_gcef .EG_RangeMarkupElements =append (_gcef .EG_RangeMarkupElements ,_cefgg );_cefgg =_eg .NewEG_RangeMarkupElements ();_cefgg .BookmarkEnd =_eg .NewCT_MarkupRange ();_gcef .EG_RangeMarkupElements =append (_gcef .EG_RangeMarkupElements ,_cefgg );_dace ._ffae .EG_PContent =append (_dace ._ffae .EG_PContent ,_daff );_baac :=Bookmark {_cbgad };_baac .SetName (name );return _baac ;};func (_cacfd *WatermarkText )getInnerElement (_efbc string )*_g .XSDAny {for _ ,_ffabf :=range _cacfd ._ebce .Any {_ccaee ,_egeg :=_ffabf .(*_g .XSDAny );if _egeg &&(_ccaee .XMLName .Local ==_efbc ||_ccaee .XMLName .Local =="\u0076\u003a"+_efbc ){return _ccaee ;};};return nil ;};

// HasEndnotes returns a bool based on the presence or abscence of endnotes within
// the document.
func (_dfbe *Document )HasEndnotes ()bool {return _dfbe ._fdb !=nil };

// ExtractFromFooter returns text from the document footer as an array of TextItems.
func ExtractFromFooter (footer *_eg .Ftr )[]TextItem {return _fedb (footer .EG_ContentBlockContent ,nil )};

// X returns the internally wrapped *wml.CT_SectPr.
func (_aaaaa Section )X ()*_eg .CT_SectPr {return _aaaaa ._ccgc };

// SetBasedOn sets the style that this style is based on.
func (_ceaec Style )SetBasedOn (name string ){if name ==""{_ceaec ._bgdg .BasedOn =nil ;}else {_ceaec ._bgdg .BasedOn =_eg .NewCT_String ();_ceaec ._bgdg .BasedOn .ValAttr =name ;};};

// SetLastRow controls the conditional formatting for the last row in a table.
// This is called the 'Total' row within Word.
func (_bcbac TableLook )SetLastRow (on bool ){if !on {_bcbac ._dbgfg .LastRowAttr =&_gee .ST_OnOff {};_bcbac ._dbgfg .LastRowAttr .ST_OnOff1 =_gee .ST_OnOff1Off ;}else {_bcbac ._dbgfg .LastRowAttr =&_gee .ST_OnOff {};_bcbac ._dbgfg .LastRowAttr .ST_OnOff1 =_gee .ST_OnOff1On ;};};func (_fgdf *WatermarkPicture )getShapeType ()*_g .XSDAny {return _fgdf .getInnerElement ("\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e");};

// Style is a style within the styles.xml file.
type Style struct{_bgdg *_eg .CT_Style };

// IsBold returns true if the run has been set to bold.
func (_gbcfd RunProperties )IsBold ()bool {return _gbcfd .BoldValue ()==OnOffValueOn };

// TableWidth controls width values in table settings.
type TableWidth struct{_acba *_eg .CT_TblWidth };

// X returns the inner wrapped type
func (_gbd CellBorders )X ()*_eg .CT_TcBorders {return _gbd ._cgaa };

// SetHAlignment sets the horizontal alignment for an anchored image.
func (_bc AnchoredDrawing )SetHAlignment (h _eg .WdST_AlignH ){_bc ._ed .PositionH .Choice =&_eg .WdCT_PosHChoice {};_bc ._ed .PositionH .Choice .Align =h ;};

// SetSize sets the font size for a run.
func (_cegd RunProperties )SetSize (size _fd .Distance ){_cegd ._efdg .Sz =_eg .NewCT_HpsMeasure ();_cegd ._efdg .Sz .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (size /_fd .HalfPoint ));_cegd ._efdg .SzCs =_eg .NewCT_HpsMeasure ();_cegd ._efdg .SzCs .ValAttr .ST_UnsignedDecimalNumber =_g .Uint64 (uint64 (size /_fd .HalfPoint ));};

// SetContextualSpacing controls whether to Ignore Spacing Above and Below When
// Using Identical Styles
func (_eafcd ParagraphStyleProperties )SetContextualSpacing (b bool ){if !b {_eafcd ._efcg .ContextualSpacing =nil ;}else {_eafcd ._efcg .ContextualSpacing =_eg .NewCT_OnOff ();};};

// SetCellSpacing sets the cell spacing within a table.
func (_eaefd TableProperties )SetCellSpacing (m _fd .Distance ){_eaefd ._gcdd .TblCellSpacing =_eg .NewCT_TblWidth ();_eaefd ._gcdd .TblCellSpacing .TypeAttr =_eg .ST_TblWidthDxa ;_eaefd ._gcdd .TblCellSpacing .WAttr =&_eg .ST_MeasurementOrPercent {};_eaefd ._gcdd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_eaefd ._gcdd .TblCellSpacing .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (m /_fd .Dxa ));};

// Footer is a footer for a document section.
type Footer struct{_ddbab *Document ;_dbac *_eg .Ftr ;};

// SetWidthAuto sets the the cell width to automatic.
func (_egb CellProperties )SetWidthAuto (){_egb ._cgb .TcW =_eg .NewCT_TblWidth ();_egb ._cgb .TcW .TypeAttr =_eg .ST_TblWidthAuto ;};

// TableConditionalFormatting returns a conditional formatting object of a given
// type.  Calling this method repeatedly will return the same object.
func (_acff Style )TableConditionalFormatting (typ _eg .ST_TblStyleOverrideType )TableConditionalFormatting {for _ ,_edgca :=range _acff ._bgdg .TblStylePr {if _edgca .TypeAttr ==typ {return TableConditionalFormatting {_edgca };};};_fgcdcd :=_eg .NewCT_TblStylePr ();_fgcdcd .TypeAttr =typ ;_acff ._bgdg .TblStylePr =append (_acff ._bgdg .TblStylePr ,_fgcdcd );return TableConditionalFormatting {_fgcdcd };};

// SetChecked marks a FormFieldTypeCheckBox as checked or unchecked.
func (_cfdc FormField )SetChecked (b bool ){if _cfdc ._aefe .CheckBox ==nil {return ;};if !b {_cfdc ._aefe .CheckBox .Checked =nil ;}else {_cfdc ._aefe .CheckBox .Checked =_eg .NewCT_OnOff ();};};func (_cgag *WatermarkPicture )getShape ()*_g .XSDAny {return _cgag .getInnerElement ("\u0073\u0068\u0061p\u0065");};

// X returns the inner wrapped XML type.
func (_aacf Styles )X ()*_eg .Styles {return _aacf ._ceaa };

// AddWatermarkText adds new watermark text to the document.
func (_adde *Document )AddWatermarkText (text string )WatermarkText {var _becc []Header ;if _gdbe ,_gbgf :=_adde .BodySection ().GetHeader (_eg .ST_HdrFtrDefault );_gbgf {_becc =append (_becc ,_gdbe );};if _dccc ,_ffgg :=_adde .BodySection ().GetHeader (_eg .ST_HdrFtrEven );_ffgg {_becc =append (_becc ,_dccc );};if _cdab ,_abad :=_adde .BodySection ().GetHeader (_eg .ST_HdrFtrFirst );_abad {_becc =append (_becc ,_cdab );};if len (_becc )< 1{_gdec :=_adde .AddHeader ();_adde .BodySection ().SetHeader (_gdec ,_eg .ST_HdrFtrDefault );_becc =append (_becc ,_gdec );};_fba :=NewWatermarkText ();for _ ,_ceg :=range _becc {_efda :=_ceg .Paragraphs ();if len (_efda )< 1{_agea :=_ceg .AddParagraph ();_agea .AddRun ().AddText ("");};for _ ,_ggbc :=range _ceg .X ().EG_ContentBlockContent {for _ ,_dgba :=range _ggbc .P {for _ ,_adee :=range _dgba .EG_PContent {for _ ,_faf :=range _adee .EG_ContentRunContent {if _faf .R ==nil {continue ;};for _ ,_abec :=range _faf .R .EG_RunInnerContent {_abec .Pict =_fba ._ebce ;break ;};};};};};};_fba .SetText (text );return _fba ;};

// IgnoreSpaceBetweenParagraphOfSameStyle sets contextual spacing.
func (_caef Paragraph )IgnoreSpaceBetweenParagraphOfSameStyle (){_caef .ensurePPr ();if _caef ._ffae .PPr .ContextualSpacing ==nil {_caef ._ffae .PPr .ContextualSpacing =_eg .NewCT_OnOff ();};_caef ._ffae .PPr .ContextualSpacing .ValAttr =&_gee .ST_OnOff {ST_OnOff1 :_gee .ST_OnOff1On };};

// X returns the inner wrapped XML type.
func (_ffcc ParagraphStyleProperties )X ()*_eg .CT_PPrGeneral {return _ffcc ._efcg };

// Styles is the document wide styles contained in styles.xml.
type Styles struct{_ceaa *_eg .Styles };

// RemoveParagraph removes a paragraph from a footer.
func (_aeda Footer )RemoveParagraph (p Paragraph ){for _ ,_agb :=range _aeda ._dbac .EG_ContentBlockContent {for _acge ,_caafd :=range _agb .P {if _caafd ==p ._ffae {copy (_agb .P [_acge :],_agb .P [_acge +1:]);_agb .P =_agb .P [0:len (_agb .P )-1];return ;};};};};func (_gcf *chart )X ()*_dcc .ChartSpace {return _gcf ._cgg };

// SetTextStyleItalic set text style of watermark to italic.
func (_gcfgc *WatermarkText )SetTextStyleItalic (value bool ){if _gcfgc ._dbcca !=nil {_babg :=_gcfgc .GetStyle ();_babg .SetItalic (value );_gcfgc .SetStyle (_babg );};};

// SetFontFamily sets the Ascii & HAnsi fonly family for a run.
func (_dgfdc RunProperties )SetFontFamily (family string ){if _dgfdc ._efdg .RFonts ==nil {_dgfdc ._efdg .RFonts =_eg .NewCT_Fonts ();};_dgfdc ._efdg .RFonts .AsciiAttr =_g .String (family );_dgfdc ._efdg .RFonts .HAnsiAttr =_g .String (family );_dgfdc ._efdg .RFonts .EastAsiaAttr =_g .String (family );};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_eadc Footer )AddImage (i _gg .Image )(_gg .ImageRef ,error ){var _ecfaa _gg .Relationships ;for _gaeg ,_cffc :=range _eadc ._ddbab ._bfe {if _cffc ==_eadc ._dbac {_ecfaa =_eadc ._ddbab ._eab [_gaeg ];};};_eadgb :=_gg .MakeImageRef (i ,&_eadc ._ddbab .DocBase ,_ecfaa );if i .Data ==nil &&i .Path ==""{return _eadgb ,_de .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _eadgb ,_de .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _eadgb ,_de .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};_eadc ._ddbab .Images =append (_eadc ._ddbab .Images ,_eadgb );_cadc :=_cg .Sprintf ("\u006d\u0065d\u0069\u0061\u002fi\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",len (_eadc ._ddbab .Images ),i .Format );_egadf :=_ecfaa .AddRelationship (_cadc ,_g .ImageType );_eadgb .SetRelID (_egadf .X ().IdAttr );return _eadgb ,nil ;};

// Index returns the index of the footer within the document.  This is used to
// form its zip packaged filename as well as to match it with its relationship
// ID.
func (_aabda Footer )Index ()int {for _acgc ,_efba :=range _aabda ._ddbab ._bfe {if _efba ==_aabda ._dbac {return _acgc ;};};return -1;};

// BoldValue returns the precise nature of the bold setting (unset, off or on).
func (_adddg RunProperties )BoldValue ()OnOffValue {return _ddabg (_adddg ._efdg .B )};

// ComplexSizeMeasure returns font with its measure which can be mm, cm, in, pt, pc or pi.
func (_bffc RunProperties )ComplexSizeMeasure ()string {if _acbd :=_bffc ._efdg .SzCs ;_acbd !=nil {_abag :=_acbd .ValAttr ;if _abag .ST_PositiveUniversalMeasure !=nil {return *_abag .ST_PositiveUniversalMeasure ;};};return "";};func (_fbagd Paragraph )addSeparateFldChar ()*_eg .CT_FldChar {_cffa :=_fbagd .addFldChar ();_cffa .FldCharTypeAttr =_eg .ST_FldCharTypeSeparate ;return _cffa ;};

// Emboss returns true if run emboss is on.
func (_cgebd RunProperties )Emboss ()bool {return _dfcc (_cgebd ._efdg .Emboss )};

// AddParagraph adds a new paragraph to the document body.
func (_ffdc *Document )AddParagraph ()Paragraph {_dfb :=_eg .NewEG_BlockLevelElts ();_ffdc ._bbe .Body .EG_BlockLevelElts =append (_ffdc ._bbe .Body .EG_BlockLevelElts ,_dfb );_ecfa :=_eg .NewEG_ContentBlockContent ();_dfb .EG_ContentBlockContent =append (_dfb .EG_ContentBlockContent ,_ecfa );_ggf :=_eg .NewCT_P ();_ecfa .P =append (_ecfa .P ,_ggf );return Paragraph {_ffdc ,_ggf };};

// AddTabStop adds a tab stop to the paragraph.
func (_cbad ParagraphStyleProperties )AddTabStop (position _fd .Distance ,justificaton _eg .ST_TabJc ,leader _eg .ST_TabTlc ){if _cbad ._efcg .Tabs ==nil {_cbad ._efcg .Tabs =_eg .NewCT_Tabs ();};_aabb :=_eg .NewCT_TabStop ();_aabb .LeaderAttr =leader ;_aabb .ValAttr =justificaton ;_aabb .PosAttr .Int64 =_g .Int64 (int64 (position /_fd .Twips ));_cbad ._efcg .Tabs .Tab =append (_cbad ._efcg .Tabs .Tab ,_aabb );};

// SetEffect sets a text effect on the run.
func (_ecfdg RunProperties )SetEffect (e _eg .ST_TextEffect ){if e ==_eg .ST_TextEffectUnset {_ecfdg ._efdg .Effect =nil ;}else {_ecfdg ._efdg .Effect =_eg .NewCT_TextEffect ();_ecfdg ._efdg .Effect .ValAttr =_eg .ST_TextEffectShimmer ;};};func (_bbee Paragraph )addEndFldChar ()*_eg .CT_FldChar {_ccgf :=_bbee .addFldChar ();_ccgf .FldCharTypeAttr =_eg .ST_FldCharTypeEnd ;return _ccgf ;};

// CellProperties returns the cell properties.
func (_babf TableConditionalFormatting )CellProperties ()CellProperties {if _babf ._cdff .TcPr ==nil {_babf ._cdff .TcPr =_eg .NewCT_TcPr ();};return CellProperties {_babf ._cdff .TcPr };};

// SetName marks sets a name attribute for a FormField.
func (_acad FormField )SetName (name string ){_cgfcf :=_eg .NewCT_FFName ();_cgfcf .ValAttr =&name ;_acad ._aefe .Name =[]*_eg .CT_FFName {_cgfcf };};

// SetLeft sets the cell left margin
func (_gbc CellMargins )SetLeft (d _fd .Distance ){_gbc ._dge .Left =_eg .NewCT_TblWidth ();_bcb (_gbc ._dge .Left ,d );};

// X returns the inner wrapped XML type.
func (_ccaeg TableProperties )X ()*_eg .CT_TblPr {return _ccaeg ._gcdd };

// X returns the inner wrapped XML type.
func (_adgb Endnote )X ()*_eg .CT_FtnEdn {return _adgb ._cfcf };func _bcb (_geb *_eg .CT_TblWidth ,_aae _fd .Distance ){_geb .TypeAttr =_eg .ST_TblWidthDxa ;_geb .WAttr =&_eg .ST_MeasurementOrPercent {};_geb .WAttr .ST_DecimalNumberOrPercent =&_eg .ST_DecimalNumberOrPercent {};_geb .WAttr .ST_DecimalNumberOrPercent .ST_UnqualifiedPercentage =_g .Int64 (int64 (_aae /_fd .Dxa ));};func _bffb (_bdgd _cb .ReaderAt ,_bcac int64 ,_ggdd string )(*Document ,error ){const _cfgg ="\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002e\u0052\u0065\u0061\u0064";if !_gc .GetLicenseKey ().IsLicensed ()&&!_fec {_cg .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_cg .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_de .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_bddd :=New ();_bddd .Numbering ._dgbab =nil ;if len (_ggdd )> 0{_bddd ._fbg =_ggdd ;}else {_dbeg ,_cabf :=_gc .GenRefId ("\u0064\u0072");if _cabf !=nil {_g .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_cabf );return nil ,_cabf ;};_bddd ._fbg =_dbeg ;};if _bgf :=_gc .Track (_bddd ._fbg ,_cfgg );_bgf !=nil {_cg .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_bgf );return nil ,_bgf ;};_bcbab ,_bacd :=_ba .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0064\u006f\u0063\u0078");if _bacd !=nil {return nil ,_bacd ;};_bddd .TmpPath =_bcbab ;_eaab ,_bacd :=_gb .NewReader (_bdgd ,_bcac );if _bacd !=nil {return nil ,_cg .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_bacd );};_bdfc :=[]*_gb .File {};_bdfc =append (_bdfc ,_eaab .File ...);_cfgdf :=false ;for _ ,_ebfe :=range _bdfc {if _ebfe .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_cfgdf =true ;break ;};};if _cfgdf {_bddd .CreateCustomProperties ();};_eedc :=_bddd ._bbe .ConformanceAttr ;_dbde :=_fb .DecodeMap {};_dbde .SetOnNewRelationshipFunc (_bddd .onNewRelationship );_dbde .AddTarget (_g .ContentTypesFilename ,_bddd .ContentTypes .X (),"",0);_dbde .AddTarget (_g .BaseRelsFilename ,_bddd .Rels .X (),"",0);if _dabaf :=_dbde .Decode (_bdfc );_dabaf !=nil {return nil ,_dabaf ;};_bddd ._bbe .ConformanceAttr =_eedc ;for _ ,_dff :=range _bdfc {if _dff ==nil {continue ;};if _bgc :=_bddd .AddExtraFileFromZip (_dff );_bgc !=nil {return nil ,_bgc ;};};if _cfgdf {_ebbf :=false ;for _ ,_bbf :=range _bddd .Rels .X ().Relationship {if _bbf .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ebbf =true ;break ;};};if !_ebbf {_bddd .AddCustomRelationships ();};};return _bddd ,nil ;};func (_baca Footnote )content ()[]*_eg .EG_ContentBlockContent {var _bagc []*_eg .EG_ContentBlockContent ;for _ ,_aagc :=range _baca ._fafc .EG_BlockLevelElts {_bagc =append (_bagc ,_aagc .EG_ContentBlockContent ...);};return _bagc ;};func (_agbb Paragraph )addFldCharsForField (_dfgg ,_dgbg string )FormField {_bcbec :=_agbb .addBeginFldChar (_dfgg );_cbaa :=FormField {_aefe :_bcbec };_cbbf :=_agbb ._dageg .Bookmarks ();_cdbg :=int64 (len (_cbbf ));if _dfgg !=""{_agbb .addStartBookmark (_cdbg ,_dfgg );};_agbb .addInstrText (_dgbg );_agbb .addSeparateFldChar ();if _dgbg =="\u0046\u004f\u0052\u004d\u0054\u0045\u0058\u0054"{_bgac :=_agbb .AddRun ();_cgde :=_eg .NewEG_RunInnerContent ();_bgac ._fced .EG_RunInnerContent =[]*_eg .EG_RunInnerContent {_cgde };_cbaa ._ccab =_cgde ;};_agbb .addEndFldChar ();if _dfgg !=""{_agbb .addEndBookmark (_cdbg );};return _cbaa ;};

// Paragraphs returns the paragraphs defined in the cell.
func (_db Cell )Paragraphs ()[]Paragraph {_efb :=[]Paragraph {};for _ ,_gfa :=range _db ._ccc .EG_BlockLevelElts {for _ ,_dbd :=range _gfa .EG_ContentBlockContent {for _ ,_bdcc :=range _dbd .P {_efb =append (_efb ,Paragraph {_db ._ggc ,_bdcc });};};};return _efb ;};

// FormField is a form within a document. It references the document, so changes
// to the form field wil be reflected in the document if it is saved.
type FormField struct{_aefe *_eg .CT_FFData ;_ccab *_eg .EG_RunInnerContent ;};

// X returns the inner wrapped XML type.
func (_bdgdc Run )X ()*_eg .CT_R {return _bdgdc ._fced };

// GetTargetByRelId returns a target path with the associated relation ID in the
// document.
func (_cecg *Document )GetTargetByRelId (idAttr string )string {return _cecg ._ccd .GetTargetByRelId (idAttr );};

// OpenTemplate opens a document, removing all content so it can be used as a
// template.  Since Word removes unused styles from a document upon save, to
// create a template in Word add a paragraph with every style of interest.  When
// opened with OpenTemplate the document's styles will be available but the
// content will be gone.
func OpenTemplate (filename string )(*Document ,error ){_afc ,_eadf :=Open (filename );if _eadf !=nil {return nil ,_eadf ;};_afc ._bbe .Body =_eg .NewCT_Body ();return _afc ,nil ;};

// X returns the inner wrapped XML type.
func (_fedg TableStyleProperties )X ()*_eg .CT_TblPrBase {return _fedg ._eggdf };

// SetInsideVertical sets the interior vertical borders to a specified type, color and thickness.
func (_fegg TableBorders )SetInsideVertical (t _eg .ST_Border ,c _ef .Color ,thickness _fd .Distance ){_fegg ._cddae .InsideV =_eg .NewCT_Border ();_dgdb (_fegg ._cddae .InsideV ,t ,c ,thickness );};

// X returns the inner wrapped XML type.
func (_acged ParagraphProperties )X ()*_eg .CT_PPr {return _acged ._cagc };func _dfcc (_gcfc *_eg .CT_OnOff )bool {return _gcfc !=nil };

// GetColor returns the color.Color object representing the run color.
func (_gdcc RunProperties )GetColor ()_ef .Color {if _dadg :=_gdcc ._efdg .Color ;_dadg !=nil {_bded :=_dadg .ValAttr ;if _bded .ST_HexColorRGB !=nil {return _ef .FromHex (*_bded .ST_HexColorRGB );};};return _ef .Color {};};

// EastAsiaFont returns the name of run font family for East Asia.
func (_cadf RunProperties )EastAsiaFont ()string {if _ceca :=_cadf ._efdg .RFonts ;_ceca !=nil {if _ceca .EastAsiaAttr !=nil {return *_ceca .EastAsiaAttr ;};};return "";};

// RemoveParagraph removes a paragraph from the endnote.
func (_bdbbg Endnote )RemoveParagraph (p Paragraph ){for _ ,_fgd :=range _bdbbg .content (){for _fgec ,_gbdc :=range _fgd .P {if _gbdc ==p ._ffae {copy (_fgd .P [_fgec :],_fgd .P [_fgec +1:]);_fgd .P =_fgd .P [0:len (_fgd .P )-1];return ;};};};};

// SetNumberingLevel sets the numbering level of a paragraph.  If used, then the
// NumberingDefinition must also be set via SetNumberingDefinition or
// SetNumberingDefinitionByID.
func (_bbbaa Paragraph )SetNumberingLevel (listLevel int ){_bbbaa .ensurePPr ();if _bbbaa ._ffae .PPr .NumPr ==nil {_bbbaa ._ffae .PPr .NumPr =_eg .NewCT_NumPr ();};_cfcd :=_eg .NewCT_DecimalNumber ();_cfcd .ValAttr =int64 (listLevel );_bbbaa ._ffae .PPr .NumPr .Ilvl =_cfcd ;};

// SetCalcOnExit marks if a FormField should be CalcOnExit or not.
func (_cgfa FormField )SetCalcOnExit (calcOnExit bool ){_fabg :=_eg .NewCT_OnOff ();_fabg .ValAttr =&_gee .ST_OnOff {Bool :&calcOnExit };_cgfa ._aefe .CalcOnExit =[]*_eg .CT_OnOff {_fabg };};

// ClearContent clears any content in the run (text, tabs, breaks, etc.)
func (_bfdc Run )ClearContent (){_bfdc ._fced .EG_RunInnerContent =nil };

// X returns the inner wrapped XML type.
func (_bece RunProperties )X ()*_eg .CT_RPr {return _bece ._efdg };const _bfeed ="\u0046\u006f\u0072\u006d\u0046\u0069\u0065l\u0064\u0054\u0079\u0070\u0065\u0055\u006e\u006b\u006e\u006f\u0077\u006e\u0046\u006fr\u006dF\u0069\u0065\u006c\u0064\u0054\u0079p\u0065\u0054\u0065\u0078\u0074\u0046\u006fr\u006d\u0046\u0069\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0043\u0068\u0065\u0063\u006b\u0042\u006f\u0078\u0046\u006f\u0072\u006d\u0046i\u0065\u006c\u0064\u0054\u0079\u0070\u0065\u0044\u0072\u006f\u0070\u0044\u006fw\u006e";func (_cfce Paragraph )addInstrText (_fcegc string )*_eg .CT_Text {_bdbc :=_cfce .AddRun ();_abcc :=_bdbc .X ();_ggac :=_eg .NewEG_RunInnerContent ();_dafdg :=_eg .NewCT_Text ();_ecda :="\u0070\u0072\u0065\u0073\u0065\u0072\u0076\u0065";_dafdg .SpaceAttr =&_ecda ;_dafdg .Content ="\u0020"+_fcegc +"\u0020";_ggac .InstrText =_dafdg ;_abcc .EG_RunInnerContent =append (_abcc .EG_RunInnerContent ,_ggac );return _dafdg ;};

// MergeFields returns the list of all mail merge fields found in the document.
func (_aafa Document )MergeFields ()[]string {_fcdbe :=map[string ]struct{}{};for _ ,_dfga :=range _aafa .mergeFields (){_fcdbe [_dfga ._ebca ]=struct{}{};};_bfeg :=[]string {};for _cdfd :=range _fcdbe {_bfeg =append (_bfeg ,_cdfd );};return _bfeg ;};

// SetStyle sets the table style name.
func (_cgdbe TableProperties )SetStyle (name string ){if name ==""{_cgdbe ._gcdd .TblStyle =nil ;}else {_cgdbe ._gcdd .TblStyle =_eg .NewCT_String ();_cgdbe ._gcdd .TblStyle .ValAttr =name ;};};func _ecdbg (_gbcf string )mergeFieldInfo {_egbfg :=[]string {};_edaf :=_be .Buffer {};_cgeg :=-1;for _gbaf ,_eaaeb :=range _gbcf {switch _eaaeb {case ' ':if _edaf .Len ()!=0{_egbfg =append (_egbfg ,_edaf .String ());};_edaf .Reset ();case '"':if _cgeg !=-1{_egbfg =append (_egbfg ,_gbcf [_cgeg +1:_gbaf ]);_cgeg =-1;}else {_cgeg =_gbaf ;};default:_edaf .WriteRune (_eaaeb );};};if _edaf .Len ()!=0{_egbfg =append (_egbfg ,_edaf .String ());};_acec :=mergeFieldInfo {};for _dede :=0;_dede < len (_egbfg )-1;_dede ++{_afccc :=_egbfg [_dede ];switch _afccc {case "\u004d\u0045\u0052\u0047\u0045\u0046\u0049\u0045\u004c\u0044":_acec ._ebca =_egbfg [_dede +1];_dede ++;case "\u005c\u0066":_acec ._effbd =_egbfg [_dede +1];_dede ++;case "\u005c\u0062":_acec ._febb =_egbfg [_dede +1];_dede ++;case "\u005c\u002a":switch _egbfg [_dede +1]{case "\u0055\u0070\u0070e\u0072":_acec ._eccd =true ;case "\u004c\u006f\u0077e\u0072":_acec ._ggabg =true ;case "\u0043\u0061\u0070\u0073":_acec ._fde =true ;case "\u0046\u0069\u0072\u0073\u0074\u0043\u0061\u0070":_acec ._cfca =true ;};_dede ++;};};return _acec ;};func _ecec ()*_ggg .Textpath {_acdgf :=_ggg .NewTextpath ();_adbbc :="\u0066\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069l\u0079\u003a\u0022\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0022\u003b\u0066\u006f\u006e\u0074\u002d\u0073\u0069\u007a\u0065\u003a\u00366\u0070\u0074;\u0066\u006fn\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003a\u0062\u006f\u006c\u0064;f\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065:\u0069\u0074\u0061\u006c\u0069\u0063";_acdgf .StyleAttr =&_adbbc ;_baafg :="\u0041\u0053\u0041\u0050";_acdgf .StringAttr =&_baafg ;return _acdgf ;};

// DoubleStrike returns true if run is double striked.
func (_bgbf RunProperties )DoubleStrike ()bool {return _dfcc (_bgbf ._efdg .Dstrike )};

// AddFootnote will create a new footnote and attach it to the Paragraph in the
// location at the end of the previous run (footnotes create their own run within
// the paragraph). The text given to the function is simply a convenience helper,
// paragraphs and runs can always be added to the text of the footnote later.
func (_fcefd Paragraph )AddFootnote (text string )Footnote {var _caaab int64 ;if _fcefd ._dageg .HasFootnotes (){for _ ,_gab :=range _fcefd ._dageg .Footnotes (){if _gab .id ()> _caaab {_caaab =_gab .id ();};};_caaab ++;}else {_caaab =0;_fcefd ._dageg ._gcc =&_eg .Footnotes {};_fcefd ._dageg ._gcc .CT_Footnotes =_eg .CT_Footnotes {};_fcefd ._dageg ._gcc .Footnote =make ([]*_eg .CT_FtnEdn ,0);};_ffda :=_eg .NewCT_FtnEdn ();_dcce :=_eg .NewCT_FtnEdnRef ();_dcce .IdAttr =_caaab ;_fcefd ._dageg ._gcc .CT_Footnotes .Footnote =append (_fcefd ._dageg ._gcc .CT_Footnotes .Footnote ,_ffda );_fabgf :=_fcefd .AddRun ();_gdgc :=_fabgf .Properties ();_gdgc .SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065\u0041n\u0063\u0068\u006f\u0072");_fabgf ._fced .EG_RunInnerContent =[]*_eg .EG_RunInnerContent {_eg .NewEG_RunInnerContent ()};_fabgf ._fced .EG_RunInnerContent [0].FootnoteReference =_dcce ;_aefd :=Footnote {_fcefd ._dageg ,_ffda };_aefd ._fafc .IdAttr =_caaab ;_aefd ._fafc .EG_BlockLevelElts =[]*_eg .EG_BlockLevelElts {_eg .NewEG_BlockLevelElts ()};_ffee :=_aefd .AddParagraph ();_ffee .Properties ().SetStyle ("\u0046\u006f\u006f\u0074\u006e\u006f\u0074\u0065");_ffee ._ffae .PPr .RPr =_eg .NewCT_ParaRPr ();_dgaf :=_ffee .AddRun ();_dgaf .AddTab ();_dgaf .AddText (text );return _aefd ;};

// GetImage returns the ImageRef associated with an InlineDrawing.
func (_bggdc InlineDrawing )GetImage ()(_gg .ImageRef ,bool ){_eacb :=_bggdc ._fabe .Graphic .GraphicData .Any ;if len (_eacb )> 0{_adgcc ,_agbd :=_eacb [0].(*_bd .Pic );if _agbd {if _adgcc .BlipFill !=nil &&_adgcc .BlipFill .Blip !=nil &&_adgcc .BlipFill .Blip .EmbedAttr !=nil {return _bggdc ._gcgb .GetImageByRelID (*_adgcc .BlipFill .Blip .EmbedAttr );};};};return _gg .ImageRef {},false ;};

// SetPossibleValues sets possible values for a FormFieldTypeDropDown.
func (_fadd FormField )SetPossibleValues (values []string ){if _fadd ._aefe .DdList !=nil {for _ ,_fcdb :=range values {_ggaa :=_eg .NewCT_String ();_ggaa .ValAttr =_fcdb ;_fadd ._aefe .DdList .ListEntry =append (_fadd ._aefe .DdList .ListEntry ,_ggaa );};};};