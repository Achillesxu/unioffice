//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_e "encoding/xml";_c "fmt";_ab "github.com/unidoc/unioffice";_g "github.com/unidoc/unioffice/common/logger";);type ElementsGroupChoice struct{Any []*Any ;};type Any struct{SimpleLiteral };func (_eac *ElementsGroupChoice )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {if _eac .Any !=nil {_gb :=_e .StartElement {Name :_e .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};for _ ,_ecg :=range _eac .Any {e .EncodeElement (_ecg ,_gb );};};return nil ;};

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_gf *Any )ValidateWithPath (path string )error {if _db :=_gf .SimpleLiteral .ValidateWithPath (path );_db !=nil {return _db ;};return nil ;};type ElementContainer struct{Choice []*ElementsGroupChoice ;};func (_bc *ElementContainer )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";e .EncodeToken (start );if _bc .Choice !=nil {for _ ,_bg :=range _bc .Choice {_bg .MarshalXML (e ,_e .StartElement {});};};e .EncodeToken (_e .EndElement {Name :start .Name });return nil ;};

// Validate validates the ElementContainer and its children
func (_ee *ElementContainer )Validate ()error {return _ee .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_cf *SimpleLiteral )ValidateWithPath (path string )error {return nil };func (_egg *SimpleLiteral )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {for {_eca ,_ef :=d .Token ();if _ef !=nil {return _c .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_ef );};if _bdd ,_dfd :=_eca .(_e .EndElement );_dfd &&_bdd .Name ==start .Name {break ;};};return nil ;};

// Validate validates the SimpleLiteral and its children
func (_fg *SimpleLiteral )Validate ()error {return _fg .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};func (_ecf *ElementsGroupChoice )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_bac :for {_adag ,_eae :=d .Token ();if _eae !=nil {return _eae ;};switch _ceb :=_adag .(type ){case _e .StartElement :switch _ceb .Name {case _e .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_gc :=NewAny ();if _cc :=d .DecodeElement (_gc ,&_ceb );_cc !=nil {return _cc ;};_ecf .Any =append (_ecf .Any ,_gc );default:_g .Log .Debug ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072ou\u0070\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076",_ceb .Name );if _dbb :=d .Skip ();_dbb !=nil {return _dbb ;};};case _e .EndElement :break _bac ;case _e .CharData :};};return nil ;};

// Validate validates the Any and its children
func (_ad *Any )Validate ()error {return _ad .ValidateWithPath ("\u0041\u006e\u0079")};func (_fbf *SimpleLiteral )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {e .EncodeToken (start );e .EncodeToken (_e .EndElement {Name :start .Name });return nil ;};func (_fa *ElementsGroup )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_df :for {_ec ,_bca :=d .Token ();if _bca !=nil {return _bca ;};switch _ac :=_ec .(type ){case _e .StartElement :switch _ac .Name {case _e .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_da :=NewElementsGroupChoice ();if _ede :=d .DecodeElement (&_da .Any ,&_ac );_ede !=nil {return _ede ;};_fa .Choice =append (_fa .Choice ,_da );default:_g .Log .Debug ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_ac .Name );if _geb :=d .Skip ();_geb !=nil {return _geb ;};};case _e .EndElement :break _df ;case _e .CharData :};};return nil ;};func (_af *Any )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {return _af .SimpleLiteral .MarshalXML (e ,start );};func NewAny ()*Any {_cd :=&Any {};_cd .SimpleLiteral =*NewSimpleLiteral ();return _cd };

// ValidateWithPath validates the ElementsGroupChoice and its children, prefixing error messages with path
func (_fb *ElementsGroupChoice )ValidateWithPath (path string )error {for _dc ,_gcg :=range _fb .Any {if _edg :=_gcg .ValidateWithPath (_c .Sprintf ("\u0025\u0073\u002f\u0041\u006e\u0079\u005b\u0025\u0064\u005d",path ,_dc ));_edg !=nil {return _edg ;};};return nil ;};

// Validate validates the ElementsGroupChoice and its children
func (_gef *ElementsGroupChoice )Validate ()error {return _gef .ValidateWithPath ("\u0045\u006c\u0065\u006den\u0074\u0073\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u006f\u0069\u0063\u0065");};func NewElementsGroupChoice ()*ElementsGroupChoice {_eec :=&ElementsGroupChoice {};return _eec };func NewSimpleLiteral ()*SimpleLiteral {_feg :=&SimpleLiteral {};return _feg };func NewElementsGroup ()*ElementsGroup {_cec :=&ElementsGroup {};return _cec };type ElementsGroup struct{Choice []*ElementsGroupChoice ;};

// Validate validates the ElementsGroup and its children
func (_adb *ElementsGroup )Validate ()error {return _adb .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};func (_fe *ElementsGroup )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {if _fe .Choice !=nil {for _ ,_aa :=range _fe .Choice {_aa .MarshalXML (e ,_e .StartElement {});};};return nil ;};func NewElementContainer ()*ElementContainer {_bd :=&ElementContainer {};return _bd };func (_de *ElementContainer )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_ge :for {_gff ,_ba :=d .Token ();if _ba !=nil {return _ba ;};switch _ed :=_gff .(type ){case _e .StartElement :switch _ed .Name {case _e .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_dd :=NewElementsGroupChoice ();if _gd :=d .DecodeElement (&_dd .Any ,&_ed );_gd !=nil {return _gd ;};_de .Choice =append (_de .Choice ,_dd );default:_g .Log .Debug ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_ed .Name );if _ada :=d .Skip ();_ada !=nil {return _ada ;};};case _e .EndElement :break _ge ;case _e .CharData :};};return nil ;};

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_bcc *ElementsGroup )ValidateWithPath (path string )error {for _aag ,_gebc :=range _bcc .Choice {if _afa :=_gebc .ValidateWithPath (_c .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_aag ));_afa !=nil {return _afa ;};};return nil ;};

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_gdg *ElementContainer )ValidateWithPath (path string )error {for _ce ,_cb :=range _gdg .Choice {if _ged :=_cb .ValidateWithPath (_c .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_ce ));_ged !=nil {return _ged ;};};return nil ;};type SimpleLiteral struct{};func (_ea *Any )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_ea .SimpleLiteral =*NewSimpleLiteral ();for {_ca ,_f :=d .Token ();if _f !=nil {return _c .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_f );};if _d ,_b :=_ca .(_e .EndElement );_b &&_d .Name ==start .Name {break ;};};return nil ;};func init (){_ab .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );_ab .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );_ab .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_ab .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );};