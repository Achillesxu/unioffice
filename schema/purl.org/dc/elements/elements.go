//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_ef "encoding/xml";_d "fmt";_eg "github.com/unidoc/unioffice";);func (_bab *SimpleLiteral )MarshalXML (e *_ef .Encoder ,start _ef .StartElement )error {e .EncodeToken (start );e .EncodeToken (_ef .EndElement {Name :start .Name });return nil ;};func (_baf *ElementsGroupChoice )UnmarshalXML (d *_ef .Decoder ,start _ef .StartElement )error {_gag :for {_fbg ,_dbg :=d .Token ();if _dbg !=nil {return _dbg ;};switch _bg :=_fbg .(type ){case _ef .StartElement :switch _bg .Name {case _ef .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_be :=NewAny ();if _fgb :=d .DecodeElement (_be ,&_bg );_fgb !=nil {return _fgb ;};_baf .Any =append (_baf .Any ,_be );default:_eg .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072ou\u0070\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076",_bg .Name );if _adgg :=d .Skip ();_adgg !=nil {return _adgg ;};};case _ef .EndElement :break _gag ;case _ef .CharData :};};return nil ;};func (_g *Any )MarshalXML (e *_ef .Encoder ,start _ef .StartElement )error {return _g .SimpleLiteral .MarshalXML (e ,start );};

// Validate validates the ElementsGroupChoice and its children
func (_fda *ElementsGroupChoice )Validate ()error {return _fda .ValidateWithPath ("\u0045\u006c\u0065\u006den\u0074\u0073\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u006f\u0069\u0063\u0065");};type ElementContainer struct{Choice []*ElementsGroupChoice ;};func NewElementsGroup ()*ElementsGroup {_ed :=&ElementsGroup {};return _ed };func NewElementContainer ()*ElementContainer {_ega :=&ElementContainer {};return _ega };func NewElementsGroupChoice ()*ElementsGroupChoice {_gf :=&ElementsGroupChoice {};return _gf };type SimpleLiteral struct{};

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_feg *Any )ValidateWithPath (path string )error {if _dd :=_feg .SimpleLiteral .ValidateWithPath (path );_dd !=nil {return _dd ;};return nil ;};func (_df *ElementsGroupChoice )MarshalXML (e *_ef .Encoder ,start _ef .StartElement )error {if _df .Any !=nil {_cc :=_ef .StartElement {Name :_ef .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};for _ ,_cg :=range _df .Any {e .EncodeElement (_cg ,_cc );};};return nil ;};func (_c *Any )UnmarshalXML (d *_ef .Decoder ,start _ef .StartElement )error {_c .SimpleLiteral =*NewSimpleLiteral ();for {_a ,_b :=d .Token ();if _b !=nil {return _d .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_b );};if _f ,_fe :=_a .(_ef .EndElement );_fe &&_f .Name ==start .Name {break ;};};return nil ;};func (_gcf *ElementContainer )MarshalXML (e *_ef .Encoder ,start _ef .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";e .EncodeToken (start );if _gcf .Choice !=nil {for _ ,_egac :=range _gcf .Choice {_egac .MarshalXML (e ,_ef .StartElement {});};};e .EncodeToken (_ef .EndElement {Name :start .Name });return nil ;};

// Validate validates the ElementsGroup and its children
func (_bae *ElementsGroup )Validate ()error {return _bae .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};

// Validate validates the SimpleLiteral and its children
func (_dea *SimpleLiteral )Validate ()error {return _dea .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};func (_ge *ElementContainer )UnmarshalXML (d *_ef .Decoder ,start _ef .StartElement )error {_ad :for {_ba ,_aa :=d .Token ();if _aa !=nil {return _aa ;};switch _ga :=_ba .(type ){case _ef .StartElement :switch _ga .Name {case _ef .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_db :=NewElementsGroupChoice ();if _ce :=d .DecodeElement (&_db .Any ,&_ga );_ce !=nil {return _ce ;};_ge .Choice =append (_ge .Choice ,_db );default:_eg .Log ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_ga .Name );if _bc :=d .Skip ();_bc !=nil {return _bc ;};};case _ef .EndElement :break _ad ;case _ef .CharData :};};return nil ;};

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_fd *ElementsGroup )ValidateWithPath (path string )error {for _gae ,_eef :=range _fd .Choice {if _egc :=_eef .ValidateWithPath (_d .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_gae ));_egc !=nil {return _egc ;};};return nil ;};func (_eca *ElementsGroup )MarshalXML (e *_ef .Encoder ,start _ef .StartElement )error {if _eca .Choice !=nil {for _ ,_gd :=range _eca .Choice {_gd .MarshalXML (e ,_ef .StartElement {});};};return nil ;};

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_ec *ElementContainer )ValidateWithPath (path string )error {for _ee ,_fb :=range _ec .Choice {if _geb :=_fb .ValidateWithPath (_d .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_ee ));_geb !=nil {return _geb ;};};return nil ;};func NewSimpleLiteral ()*SimpleLiteral {_bac :=&SimpleLiteral {};return _bac };type ElementsGroup struct{Choice []*ElementsGroupChoice ;};

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_ade *SimpleLiteral )ValidateWithPath (path string )error {return nil };type Any struct{SimpleLiteral };

// Validate validates the ElementContainer and its children
func (_adg *ElementContainer )Validate ()error {return _adg .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};

// ValidateWithPath validates the ElementsGroupChoice and its children, prefixing error messages with path
func (_fc *ElementsGroupChoice )ValidateWithPath (path string )error {for _cd ,_de :=range _fc .Any {if _dc :=_de .ValidateWithPath (_d .Sprintf ("\u0025\u0073\u002f\u0041\u006e\u0079\u005b\u0025\u0064\u005d",path ,_cd ));_dc !=nil {return _dc ;};};return nil ;};

// Validate validates the Any and its children
func (_gc *Any )Validate ()error {return _gc .ValidateWithPath ("\u0041\u006e\u0079")};func NewAny ()*Any {_dg :=&Any {};_dg .SimpleLiteral =*NewSimpleLiteral ();return _dg };func (_eda *SimpleLiteral )UnmarshalXML (d *_ef .Decoder ,start _ef .StartElement )error {for {_egca ,_ecc :=d .Token ();if _ecc !=nil {return _d .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_ecc );};if _cgf ,_edg :=_egca .(_ef .EndElement );_edg &&_cgf .Name ==start .Name {break ;};};return nil ;};func (_ab *ElementsGroup )UnmarshalXML (d *_ef .Decoder ,start _ef .StartElement )error {_cf :for {_eed ,_cb :=d .Token ();if _cb !=nil {return _cb ;};switch _abc :=_eed .(type ){case _ef .StartElement :switch _abc .Name {case _ef .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_af :=NewElementsGroupChoice ();if _fea :=d .DecodeElement (&_af .Any ,&_abc );_fea !=nil {return _fea ;};_ab .Choice =append (_ab .Choice ,_af );default:_eg .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_abc .Name );if _fg :=d .Skip ();_fg !=nil {return _fg ;};};case _ef .EndElement :break _cf ;case _ef .CharData :};};return nil ;};type ElementsGroupChoice struct{Any []*Any ;};func init (){_eg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );_eg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );_eg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_eg .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );};