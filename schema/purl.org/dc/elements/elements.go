//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package elements ;import (_df "encoding/xml";_g "fmt";_a "github.com/unidoc/unioffice";);

// ValidateWithPath validates the ElementsGroup and its children, prefixing error messages with path
func (_af *ElementsGroup )ValidateWithPath (path string )error {for _feb ,_fde :=range _af .Choice {if _gf :=_fde .ValidateWithPath (_g .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_feb ));_gf !=nil {return _gf ;};};return nil ;};func NewElementsGroupChoice ()*ElementsGroupChoice {_gcc :=&ElementsGroupChoice {};return _gcc };func (_ge *Any )MarshalXML (e *_df .Encoder ,start _df .StartElement )error {return _ge .SimpleLiteral .MarshalXML (e ,start );};

// ValidateWithPath validates the SimpleLiteral and its children, prefixing error messages with path
func (_geg *SimpleLiteral )ValidateWithPath (path string )error {return nil };func (_ag *ElementContainer )MarshalXML (e *_df .Encoder ,start _df .StartElement )error {start .Name .Local ="\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072";e .EncodeToken (start );if _ag .Choice !=nil {for _ ,_bf :=range _ag .Choice {_bf .MarshalXML (e ,_df .StartElement {});};};e .EncodeToken (_df .EndElement {Name :start .Name });return nil ;};func NewAny ()*Any {_de :=&Any {};_de .SimpleLiteral =*NewSimpleLiteral ();return _de };

// ValidateWithPath validates the Any and its children, prefixing error messages with path
func (_dee *Any )ValidateWithPath (path string )error {if _dd :=_dee .SimpleLiteral .ValidateWithPath (path );_dd !=nil {return _dd ;};return nil ;};func (_cf *ElementsGroupChoice )UnmarshalXML (d *_df .Decoder ,start _df .StartElement )error {_gg :for {_ebb ,_ee :=d .Token ();if _ee !=nil {return _ee ;};switch _adb :=_ebb .(type ){case _df .StartElement :switch _adb .Name {case _df .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_afg :=NewAny ();if _gba :=d .DecodeElement (_afg ,&_adb );_gba !=nil {return _gba ;};_cf .Any =append (_cf .Any ,_afg );default:_a .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020o\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072ou\u0070\u0043\u0068\u006f\u0069\u0063\u0065\u0020\u0025\u0076",_adb .Name );if _bcc :=d .Skip ();_bcc !=nil {return _bcc ;};};case _df .EndElement :break _gg ;case _df .CharData :};};return nil ;};type Any struct{SimpleLiteral };

// Validate validates the ElementContainer and its children
func (_eb *ElementContainer )Validate ()error {return _eb .ValidateWithPath ("\u0045\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072");};func (_fec *ElementsGroup )MarshalXML (e *_df .Encoder ,start _df .StartElement )error {if _fec .Choice !=nil {for _ ,_agf :=range _fec .Choice {_agf .MarshalXML (e ,_df .StartElement {});};};return nil ;};

// Validate validates the Any and its children
func (_b *Any )Validate ()error {return _b .ValidateWithPath ("\u0041\u006e\u0079")};func NewElementsGroup ()*ElementsGroup {_bc :=&ElementsGroup {};return _bc };func NewSimpleLiteral ()*SimpleLiteral {_edc :=&SimpleLiteral {};return _edc };func (_abe *SimpleLiteral )UnmarshalXML (d *_df .Decoder ,start _df .StartElement )error {for {_gbe ,_ddd :=d .Token ();if _ddd !=nil {return _g .Errorf ("\u0070a\u0072\u0073\u0069\u006eg\u0020\u0053\u0069\u006d\u0070l\u0065L\u0069t\u0065\u0072\u0061\u006c\u003a\u0020\u0025s",_ddd );};if _ecb ,_aa :=_gbe .(_df .EndElement );_aa &&_ecb .Name ==start .Name {break ;};};return nil ;};

// ValidateWithPath validates the ElementsGroupChoice and its children, prefixing error messages with path
func (_bbd *ElementsGroupChoice )ValidateWithPath (path string )error {for _fef ,_eec :=range _bbd .Any {if _cbe :=_eec .ValidateWithPath (_g .Sprintf ("\u0025\u0073\u002f\u0041\u006e\u0079\u005b\u0025\u0064\u005d",path ,_fef ));_cbe !=nil {return _cbe ;};};return nil ;};func (_e *ElementContainer )UnmarshalXML (d *_df .Decoder ,start _df .StartElement )error {_ddc :for {_fb ,_dg :=d .Token ();if _dg !=nil {return _dg ;};switch _dff :=_fb .(type ){case _df .StartElement :switch _dff .Name {case _df .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_ec :=NewElementsGroupChoice ();if _ff :=d .DecodeElement (&_ec .Any ,&_dff );_ff !=nil {return _ff ;};_e .Choice =append (_e .Choice ,_ec );default:_a .Log ("\u0073\u006b\u0069\u0070\u0070i\u006e\u0067\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065d\u0020\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072\u0020\u0025v",_dff .Name );if _bb :=d .Skip ();_bb !=nil {return _bb ;};};case _df .EndElement :break _ddc ;case _df .CharData :};};return nil ;};

// Validate validates the ElementsGroup and its children
func (_bee *ElementsGroup )Validate ()error {return _bee .ValidateWithPath ("\u0045\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070");};

// Validate validates the SimpleLiteral and its children
func (_bfe *SimpleLiteral )Validate ()error {return _bfe .ValidateWithPath ("\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c");};func (_eab *ElementsGroupChoice )MarshalXML (e *_df .Encoder ,start _df .StartElement )error {if _eab .Any !=nil {_ad :=_df .StartElement {Name :_df .Name {Local :"\u0064\u0063\u003a\u0061\u006e\u0079"}};for _ ,_ced :=range _eab .Any {e .EncodeElement (_ced ,_ad );};};return nil ;};type SimpleLiteral struct{};func (_ga *ElementsGroup )UnmarshalXML (d *_df .Decoder ,start _df .StartElement )error {_dea :for {_ce ,_ed :=d .Token ();if _ed !=nil {return _ed ;};switch _cc :=_ce .(type ){case _df .StartElement :switch _cc .Name {case _df .Name {Space :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f",Local :"\u0061\u006e\u0079"}:_fd :=NewElementsGroupChoice ();if _eg :=d .DecodeElement (&_fd .Any ,&_cc );_eg !=nil {return _eg ;};_ga .Choice =append (_ga .Choice ,_fd );default:_a .Log ("\u0073\u006b\u0069\u0070\u0070\u0069\u006e\u0067 \u0075\u006e\u0073up\u0070\u006f\u0072\u0074\u0065\u0064 \u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u006f\u006e\u0020\u0045\u006c\u0065\u006de\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070 \u0025\u0076",_cc .Name );if _ea :=d .Skip ();_ea !=nil {return _ea ;};};case _df .EndElement :break _dea ;case _df .CharData :};};return nil ;};func (_ab *Any )UnmarshalXML (d *_df .Decoder ,start _df .StartElement )error {_ab .SimpleLiteral =*NewSimpleLiteral ();for {_c ,_dc :=d .Token ();if _dc !=nil {return _g .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0041\u006e\u0079\u003a\u0020\u0025\u0073",_dc );};if _f ,_fe :=_c .(_df .EndElement );_fe &&_f .Name ==start .Name {break ;};};return nil ;};

// ValidateWithPath validates the ElementContainer and its children, prefixing error messages with path
func (_ae *ElementContainer )ValidateWithPath (path string )error {for _dec ,_gc :=range _ae .Choice {if _dfd :=_gc .ValidateWithPath (_g .Sprintf ("\u0025\u0073\u002f\u0043\u0068\u006f\u0069\u0063\u0065\u005b\u0025\u0064\u005d",path ,_dec ));_dfd !=nil {return _dfd ;};};return nil ;};type ElementsGroupChoice struct{Any []*Any ;};type ElementContainer struct{Choice []*ElementsGroupChoice ;};func (_ba *SimpleLiteral )MarshalXML (e *_df .Encoder ,start _df .StartElement )error {e .EncodeToken (start );e .EncodeToken (_df .EndElement {Name :start .Name });return nil ;};

// Validate validates the ElementsGroupChoice and its children
func (_bfb *ElementsGroupChoice )Validate ()error {return _bfb .ValidateWithPath ("\u0045\u006c\u0065\u006den\u0074\u0073\u0047\u0072\u006f\u0075\u0070\u0043\u0068\u006f\u0069\u0063\u0065");};type ElementsGroup struct{Choice []*ElementsGroupChoice ;};func NewElementContainer ()*ElementContainer {_fg :=&ElementContainer {};return _fg };func init (){_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0053\u0069\u006d\u0070\u006c\u0065\u004c\u0069\u0074\u0065\u0072\u0061\u006c",NewSimpleLiteral );_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006ce\u006d\u0065\u006et\u0043\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",NewElementContainer );_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0061\u006e\u0079",NewAny );_a .RegisterConstructor ("\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0070\u0075\u0072\u006c\u002e\u006f\u0072\u0067/\u0064c\u002f\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u002f\u0031\u002e\u0031\u002f","\u0065\u006c\u0065\u006d\u0065\u006e\u0074\u0073\u0047\u0072\u006f\u0075\u0070",NewElementsGroup );};