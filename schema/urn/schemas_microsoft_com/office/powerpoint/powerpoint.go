//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_c "encoding/xml";_g "fmt";_a "github.com/unidoc/unioffice";);func NewTextdata ()*Textdata {_bg :=&Textdata {};_bg .CT_Rel =*NewCT_Rel ();return _bg };

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_ef *CT_Empty )ValidateWithPath (path string )error {return nil };func (_e *CT_Empty )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {for {_ga ,_ag :=d .Token ();if _ag !=nil {return _g .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_ag );};if _b ,_gc :=_ga .(_c .EndElement );_gc &&_b .Name ==start .Name {break ;};};return nil ;};

// Validate validates the CT_Rel and its children
func (_dfd *CT_Rel )Validate ()error {return _dfd .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};type CT_Rel struct{IdAttr *string ;};func NewIscomment ()*Iscomment {_gb :=&Iscomment {};_gb .CT_Empty =*NewCT_Empty ();return _gb };func (_ed *Iscomment )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_ed .CT_Empty =*NewCT_Empty ();for {_efg ,_eda :=d .Token ();if _eda !=nil {return _g .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_eda );};if _gba ,_cf :=_efg .(_c .EndElement );_cf &&_gba .Name ==start .Name {break ;};};return nil ;};func (_dg *Textdata )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _dg .CT_Rel .MarshalXML (e ,start );};

// Validate validates the Iscomment and its children
func (_db *Iscomment )Validate ()error {return _db .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};type CT_Empty struct{};func (_fa *CT_Rel )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {for _ ,_ced :=range start .Attr {if _ced .Name .Local =="\u0069\u0064"{_fg ,_ca :=_ced .Value ,error (nil );if _ca !=nil {return _ca ;};_fa .IdAttr =&_fg ;continue ;};};for {_cc ,_age :=d .Token ();if _age !=nil {return _g .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_age );};if _ac ,_aff :=_cc .(_c .EndElement );_aff &&_ac .Name ==start .Name {break ;};};return nil ;};

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_cb *Iscomment )ValidateWithPath (path string )error {if _fe :=_cb .CT_Empty .ValidateWithPath (path );_fe !=nil {return _fe ;};return nil ;};func NewCT_Rel ()*CT_Rel {_af :=&CT_Rel {};return _af };func (_df *CT_Rel )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {if _df .IdAttr !=nil {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0069\u0064"},Value :_g .Sprintf ("\u0025\u0076",*_df .IdAttr )});};e .EncodeToken (start );e .EncodeToken (_c .EndElement {Name :start .Name });return nil ;};type Iscomment struct{CT_Empty };

// Validate validates the Textdata and its children
func (_bf *Textdata )Validate ()error {return _bf .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_d *CT_Empty )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {e .EncodeToken (start );e .EncodeToken (_c .EndElement {Name :start .Name });return nil ;};func (_cd *Iscomment )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _cd .CT_Empty .MarshalXML (e ,start );};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_fde *CT_Rel )ValidateWithPath (path string )error {return nil };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_bgef *Textdata )ValidateWithPath (path string )error {if _dae :=_bgef .CT_Rel .ValidateWithPath (path );_dae !=nil {return _dae ;};return nil ;};type Textdata struct{CT_Rel };

// Validate validates the CT_Empty and its children
func (_fd *CT_Empty )Validate ()error {return _fd .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func NewCT_Empty ()*CT_Empty {_ce :=&CT_Empty {};return _ce };func (_cda *Textdata )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_cda .CT_Rel =*NewCT_Rel ();for _ ,_bb :=range start .Attr {if _bb .Name .Local =="\u0069\u0064"{_gf ,_da :=_bb .Value ,error (nil );if _da !=nil {return _da ;};_cda .IdAttr =&_gf ;continue ;};};for {_ccd ,_bge :=d .Token ();if _bge !=nil {return _g .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_bge );};if _de ,_daa :=_ccd .(_c .EndElement );_daa &&_de .Name ==start .Name {break ;};};return nil ;};func init (){_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );_a .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );};