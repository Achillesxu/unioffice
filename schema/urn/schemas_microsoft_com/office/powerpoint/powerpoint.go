//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_e "encoding/xml";_b "fmt";_ad "github.com/unidoc/unioffice";);type CT_Empty struct{};func NewIscomment ()*Iscomment {_bfb :=&Iscomment {};_bfb .CT_Empty =*NewCT_Empty ();return _bfb };type Iscomment struct{CT_Empty };func NewCT_Rel ()*CT_Rel {_eb :=&CT_Rel {};return _eb };type Textdata struct{CT_Rel };func NewTextdata ()*Textdata {_ead :=&Textdata {};_ead .CT_Rel =*NewCT_Rel ();return _ead };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_ae *Textdata )ValidateWithPath (path string )error {if _ada :=_ae .CT_Rel .ValidateWithPath (path );_ada !=nil {return _ada ;};return nil ;};func (_f *CT_Empty )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {for {_ea ,_d :=d .Token ();if _d !=nil {return _b .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_d );};if _ab ,_be :=_ea .(_e .EndElement );_be &&_ab .Name ==start .Name {break ;};};return nil ;};

// Validate validates the CT_Empty and its children
func (_fb *CT_Empty )Validate ()error {return _fb .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func (_ee *CT_Empty )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {e .EncodeToken (start );e .EncodeToken (_e .EndElement {Name :start .Name });return nil ;};

// Validate validates the Textdata and its children
func (_fc *Textdata )Validate ()error {return _fc .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_fg *Textdata )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_fg .CT_Rel =*NewCT_Rel ();for _ ,_gdd :=range start .Attr {if _gdd .Name .Local =="\u0069\u0064"{_eef ,_bd :=_gdd .Value ,error (nil );if _bd !=nil {return _bd ;};_fg .IdAttr =&_eef ;continue ;};};for {_dc ,_bde :=d .Token ();if _bde !=nil {return _b .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_bde );};if _gbb ,_bdc :=_dc .(_e .EndElement );_bdc &&_gbb .Name ==start .Name {break ;};};return nil ;};func (_fe *CT_Rel )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {if _fe .IdAttr !=nil {start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0069\u0064"},Value :_b .Sprintf ("\u0025\u0076",*_fe .IdAttr )});};e .EncodeToken (start );e .EncodeToken (_e .EndElement {Name :start .Name });return nil ;};func (_bf *CT_Rel )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {for _ ,_bc :=range start .Attr {if _bc .Name .Local =="\u0069\u0064"{_c ,_adf :=_bc .Value ,error (nil );if _adf !=nil {return _adf ;};_bf .IdAttr =&_c ;continue ;};};for {_abe ,_gd :=d .Token ();if _gd !=nil {return _b .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_gd );};if _fa ,_df :=_abe .(_e .EndElement );_df &&_fa .Name ==start .Name {break ;};};return nil ;};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_cd *CT_Rel )ValidateWithPath (path string )error {return nil };func (_db *Iscomment )UnmarshalXML (d *_e .Decoder ,start _e .StartElement )error {_db .CT_Empty =*NewCT_Empty ();for {_cf ,_ca :=d .Token ();if _ca !=nil {return _b .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_ca );};if _ebe ,_bfe :=_cf .(_e .EndElement );_bfe &&_ebe .Name ==start .Name {break ;};};return nil ;};

// Validate validates the CT_Rel and its children
func (_cb *CT_Rel )Validate ()error {return _cb .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};func NewCT_Empty ()*CT_Empty {_g :=&CT_Empty {};return _g };func (_gb *Iscomment )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _gb .CT_Empty .MarshalXML (e ,start );};type CT_Rel struct{IdAttr *string ;};func (_bcg *Textdata )MarshalXML (e *_e .Encoder ,start _e .StartElement )error {start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _bcg .CT_Rel .MarshalXML (e ,start );};

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_eaa *Iscomment )ValidateWithPath (path string )error {if _da :=_eaa .CT_Empty .ValidateWithPath (path );_da !=nil {return _da ;};return nil ;};

// Validate validates the Iscomment and its children
func (_cbb *Iscomment )Validate ()error {return _cbb .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_eae *CT_Empty )ValidateWithPath (path string )error {return nil };func init (){_ad .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );_ad .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );_ad .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );_ad .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );};