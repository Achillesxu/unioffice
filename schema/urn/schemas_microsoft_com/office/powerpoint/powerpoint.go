//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_c "encoding/xml";_f "fmt";_gg "github.com/unidoc/unioffice";);type CT_Empty struct{};func (_ec *CT_Empty )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {e .EncodeToken (start );e .EncodeToken (_c .EndElement {Name :start .Name });return nil ;};func NewCT_Empty ()*CT_Empty {_e :=&CT_Empty {};return _e };func (_bea *Iscomment )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _bea .CT_Empty .MarshalXML (e ,start );};func (_bc *CT_Rel )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {if _bc .IdAttr !=nil {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0069\u0064"},Value :_f .Sprintf ("\u0025\u0076",*_bc .IdAttr )});};e .EncodeToken (start );e .EncodeToken (_c .EndElement {Name :start .Name });return nil ;};func (_cde *Textdata )MarshalXML (e *_c .Encoder ,start _c .StartElement )error {start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_c .Attr {Name :_c .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _cde .CT_Rel .MarshalXML (e ,start );};

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_fa *Iscomment )ValidateWithPath (path string )error {if _af :=_fa .CT_Empty .ValidateWithPath (path );_af !=nil {return _af ;};return nil ;};

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_ee *Textdata )ValidateWithPath (path string )error {if _da :=_ee .CT_Rel .ValidateWithPath (path );_da !=nil {return _da ;};return nil ;};

// Validate validates the Textdata and its children
func (_cad *Textdata )Validate ()error {return _cad .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_dg *Iscomment )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_dg .CT_Empty =*NewCT_Empty ();for {_ce ,_fc :=d .Token ();if _fc !=nil {return _f .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_fc );};if _ba ,_fdb :=_ce .(_c .EndElement );_fdb &&_ba .Name ==start .Name {break ;};};return nil ;};func NewCT_Rel ()*CT_Rel {_eg :=&CT_Rel {};return _eg };

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_bg *CT_Empty )ValidateWithPath (path string )error {return nil };type Iscomment struct{CT_Empty };type CT_Rel struct{IdAttr *string ;};func (_dd *Textdata )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {_dd .CT_Rel =*NewCT_Rel ();for _ ,_dc :=range start .Attr {if _dc .Name .Local =="\u0069\u0064"{_bcf ,_ca :=_dc .Value ,error (nil );if _ca !=nil {return _ca ;};_dd .IdAttr =&_bcf ;continue ;};};for {_fag ,_dga :=d .Token ();if _dga !=nil {return _f .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_dga );};if _aec ,_ga :=_fag .(_c .EndElement );_ga &&_aec .Name ==start .Name {break ;};};return nil ;};func (_a *CT_Empty )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {for {_gb ,_aa :=d .Token ();if _aa !=nil {return _f .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_aa );};if _ge ,_ab :=_gb .(_c .EndElement );_ab &&_ge .Name ==start .Name {break ;};};return nil ;};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_ae *CT_Rel )ValidateWithPath (path string )error {return nil };func NewTextdata ()*Textdata {_aab :=&Textdata {};_aab .CT_Rel =*NewCT_Rel ();return _aab };

// Validate validates the CT_Rel and its children
func (_fb *CT_Rel )Validate ()error {return _fb .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};func (_fe *CT_Rel )UnmarshalXML (d *_c .Decoder ,start _c .StartElement )error {for _ ,_ef :=range start .Attr {if _ef .Name .Local =="\u0069\u0064"{_cd ,_gee :=_ef .Value ,error (nil );if _gee !=nil {return _gee ;};_fe .IdAttr =&_cd ;continue ;};};for {_ag ,_d :=d .Token ();if _d !=nil {return _f .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_d );};if _bd ,_fd :=_ag .(_c .EndElement );_fd &&_bd .Name ==start .Name {break ;};};return nil ;};func NewIscomment ()*Iscomment {_be :=&Iscomment {};_be .CT_Empty =*NewCT_Empty ();return _be };type Textdata struct{CT_Rel };

// Validate validates the CT_Empty and its children
func (_b *CT_Empty )Validate ()error {return _b .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};

// Validate validates the Iscomment and its children
func (_aae *Iscomment )Validate ()error {return _aae .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func init (){_gg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );_gg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );_gg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );_gg .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );};