//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package powerpoint ;import (_d "encoding/xml";_da "fmt";_g "github.com/unidoc/unioffice";);func (_fd *Iscomment )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_fd .CT_Empty =*NewCT_Empty ();for {_ag ,_fdg :=d .Token ();if _fdg !=nil {return _da .Errorf ("p\u0061\u0072\u0073\u0069ng\u0020I\u0073\u0063\u006f\u006d\u006de\u006e\u0074\u003a\u0020\u0025\u0073",_fdg );};if _bd ,_ee :=_ag .(_d .EndElement );_ee &&_bd .Name ==start .Name {break ;};};return nil ;};

// ValidateWithPath validates the CT_Rel and its children, prefixing error messages with path
func (_gc *CT_Rel )ValidateWithPath (path string )error {return nil };type CT_Empty struct{};func NewCT_Rel ()*CT_Rel {_fa :=&CT_Rel {};return _fa };type Iscomment struct{CT_Empty };

// ValidateWithPath validates the Iscomment and its children, prefixing error messages with path
func (_ca *Iscomment )ValidateWithPath (path string )error {if _aga :=_ca .CT_Empty .ValidateWithPath (path );_aga !=nil {return _aga ;};return nil ;};

// ValidateWithPath validates the CT_Empty and its children, prefixing error messages with path
func (_ef *CT_Empty )ValidateWithPath (path string )error {return nil };

// ValidateWithPath validates the Textdata and its children, prefixing error messages with path
func (_gcd *Textdata )ValidateWithPath (path string )error {if _faf :=_gcd .CT_Rel .ValidateWithPath (path );_faf !=nil {return _faf ;};return nil ;};func NewIscomment ()*Iscomment {_aaa :=&Iscomment {};_aaa .CT_Empty =*NewCT_Empty ();return _aaa };func (_a *CT_Empty )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {for {_c ,_e :=d .Token ();if _e !=nil {return _da .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0043\u0054\u005fE\u006d\u0070\u0074\u0079: \u0025\u0073",_e );};if _ge ,_ab :=_c .(_d .EndElement );_ab &&_ge .Name ==start .Name {break ;};};return nil ;};type CT_Rel struct{IdAttr *string ;};func (_cd *Textdata )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {_cd .CT_Rel =*NewCT_Rel ();for _ ,_gec :=range start .Attr {if _gec .Name .Local =="\u0069\u0064"{_eef ,_be :=_gec .Value ,error (nil );if _be !=nil {return _be ;};_cd .IdAttr =&_eef ;continue ;};};for {_bdb ,_fe :=d .Token ();if _fe !=nil {return _da .Errorf ("p\u0061r\u0073\u0069\u006e\u0067\u0020\u0054\u0065\u0078t\u0064\u0061\u0074\u0061: \u0025\u0073",_fe );};if _eg ,_gda :=_bdb .(_d .EndElement );_gda &&_eg .Name ==start .Name {break ;};};return nil ;};func (_cc *CT_Rel )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {if _cc .IdAttr !=nil {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0069\u0064"},Value :_da .Sprintf ("\u0025\u0076",*_cc .IdAttr )});};e .EncodeToken (start );e .EncodeToken (_d .EndElement {Name :start .Name });return nil ;};

// Validate validates the Textdata and its children
func (_gdb *Textdata )Validate ()error {return _gdb .ValidateWithPath ("\u0054\u0065\u0078\u0074\u0064\u0061\u0074\u0061");};func (_ga *CT_Empty )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {e .EncodeToken (start );e .EncodeToken (_d .EndElement {Name :start .Name });return nil ;};func NewCT_Empty ()*CT_Empty {_dad :=&CT_Empty {};return _dad };type Textdata struct{CT_Rel };

// Validate validates the CT_Empty and its children
func (_fc *CT_Empty )Validate ()error {return _fc .ValidateWithPath ("\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079");};func (_ed *Iscomment )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0069s\u0063\u006f\u006d\u006d\u0065\u006et";return _ed .CT_Empty .MarshalXML (e ,start );};

// Validate validates the CT_Rel and its children
func (_bf *CT_Rel )Validate ()error {return _bf .ValidateWithPath ("\u0043\u0054\u005f\u0052\u0065\u006c");};func NewTextdata ()*Textdata {_cce :=&Textdata {};_cce .CT_Rel =*NewCT_Rel ();return _cce };func (_cg *Textdata )MarshalXML (e *_d .Encoder ,start _d .StartElement )error {start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074"});start .Attr =append (start .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});start .Name .Local ="\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061";return _cg .CT_Rel .MarshalXML (e ,start );};

// Validate validates the Iscomment and its children
func (_ged *Iscomment )Validate ()error {return _ged .ValidateWithPath ("\u0049s\u0063\u006f\u006d\u006d\u0065\u006et");};func (_gad *CT_Rel )UnmarshalXML (d *_d .Decoder ,start _d .StartElement )error {for _ ,_gd :=range start .Attr {if _gd .Name .Local =="\u0069\u0064"{_dc ,_bg :=_gd .Value ,error (nil );if _bg !=nil {return _bg ;};_gad .IdAttr =&_dc ;continue ;};};for {_abe ,_fb :=d .Token ();if _fb !=nil {return _da .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u0043T\u005f\u0052e\u006c\u003a\u0020\u0025\u0073",_fb );};if _aa ,_cf :=_abe .(_d .EndElement );_cf &&_aa .Name ==start .Name {break ;};};return nil ;};func init (){_g .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0045\u006d\u0070\u0074\u0079",NewCT_Empty );_g .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0043\u0054\u005f\u0052\u0065\u006c",NewCT_Rel );_g .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0069s\u0063\u006f\u006d\u006d\u0065\u006et",NewIscomment );_g .RegisterConstructor ("\u0075\u0072\u006e\u003a\u0073\u0063\u0068e\u006d\u0061\u0073-\u006d\u0069\u0063\u0072o\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u0070\u006f\u0077\u0065\u0072\u0070\u006f\u0069\u006e\u0074","\u0074\u0065\u0078\u0074\u0064\u0061\u0074\u0061",NewTextdata );};