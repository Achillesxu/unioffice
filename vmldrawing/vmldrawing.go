//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package vmldrawing ;import (_ce "encoding/xml";_f "fmt";_b "github.com/unidoc/unioffice";_gb "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_e "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/office/excel";_ga "github.com/unidoc/unioffice/schema/urn/schemas_microsoft_com/vml";_c "strconv";_g "strings";);

// ToString generate string of TextpathStyle.
func (_gd *TextpathStyle )String ()string {_be :="";_be +=_f .Sprintf ("\u0066o\u006et\u002d\u0066\u0061\u006d\u0069\u006c\u0079\u003a\u0025\u0073\u003b",_gd ._aae );_be +=_f .Sprintf ("\u0066o\u006et\u002d\u0073\u0069\u007a\u0065\u003a\u0025\u0064\u0070\u0074\u003b",_gd ._bad );if _gd ._deac {_be +=_f .Sprintf ("\u0066o\u006et\u002d\u0073\u0074\u0079\u006ce\u003a\u0069t\u0061\u006c\u0069\u0063\u003b");};if _gd ._dga {_be +=_f .Sprintf ("\u0066\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074\u003ab\u006f\u006c\u0064\u003b");};return _be ;};

// CreateFormula creates F element for typeFormulas.
func CreateFormula (s string )*_ga .CT_F {_fdd :=_ga .NewCT_F ();_fdd .EqnAttr =&s ;return _fdd };func (_ad *Container )MarshalXML (e *_ce .Encoder ,start _ce .StartElement )error {start .Attr =append (start .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0076"},Value :"\u0075\u0072n\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006f\u006d:v\u006d\u006c"});start .Attr =append (start .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u006f"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006di\u0063\u0072\u006f\u0073\u006f\u0066t\u002d\u0063\u006f\u006d\u003a\u006f\u0066\u0066\u0069\u0063\u0065\u003a\u006ff\u0066\u0069\u0063\u0065"});start .Attr =append (start .Attr ,_ce .Attr {Name :_ce .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078"},Value :"\u0075\u0072\u006e\u003a\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002d\u006d\u0069\u0063\u0072\u006f\u0073\u006f\u0066\u0074\u002d\u0063\u006fm\u003a\u006f\u0066\u0066\u0069c\u0065\u003ae\u0078\u0063\u0065\u006c"});start .Name .Local ="\u0078\u006d\u006c";e .EncodeToken (start );if _ad .Layout !=nil {_de :=_ce .StartElement {Name :_ce .Name {Local :"\u006f\u003a\u0073\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074"}};e .EncodeElement (_ad .Layout ,_de );};if _ad .ShapeType !=nil {_ec :=_ce .StartElement {Name :_ce .Name {Local :"v\u003a\u0073\u0068\u0061\u0070\u0065\u0074\u0079\u0070\u0065"}};e .EncodeElement (_ad .ShapeType ,_ec );};for _ ,_dd :=range _ad .Shape {_db :=_ce .StartElement {Name :_ce .Name {Local :"\u0076:\u0073\u0068\u0061\u0070\u0065"}};e .EncodeElement (_dd ,_db );};return e .EncodeToken (_ce .EndElement {Name :start .Name });};

// FontSize returns fontSize of the text.
func (_gc *TextpathStyle )FontSize ()int64 {return _gc ._bad };

// Width return width of shape.
func (_gaa *ShapeStyle )Width ()int64 {return _gaa ._ef };

// SetFontSize sets text's fontSize.
func (_eec *TextpathStyle )SetFontSize (fontSize int64 ){_eec ._bad =fontSize };

// NewCommentShape creates a new comment shape for a given cell index.  The
// indices here are zero based.
func NewCommentShape (col ,row int64 )*_ga .Shape {_a :=_ga .NewShape ();_a .IdAttr =_b .String (_f .Sprintf ("\u0063\u0073\u005f\u0025\u0064\u005f\u0025\u0064",col ,row ));_a .TypeAttr =_b .String ("\u0023\u005f\u00780\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");_a .StyleAttr =_b .String ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0061\u0062\u0073\u006f\u006cu\u0074\u0065\u003b\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074:\u0038\u0030\u0070\u0074;\u006d\u0061\u0072\u0067\u0069n-\u0074o\u0070\u003a\u0032pt\u003b\u0077\u0069\u0064\u0074\u0068\u003a1\u0030\u0034\u0070\u0074\u003b\u0068\u0065\u0069\u0067\u0068\u0074\u003a\u0037\u0036\u0070\u0074\u003b\u007a\u002d\u0069\u006e\u0064\u0065x\u003a\u0031\u003bv\u0069\u0073\u0069\u0062\u0069\u006c\u0069t\u0079\u003a\u0068\u0069\u0064\u0064\u0065\u006e");_a .FillcolorAttr =_b .String ("\u0023f\u0062\u0066\u0036\u0064\u0036");_a .StrokecolorAttr =_b .String ("\u0023e\u0064\u0065\u0061\u0061\u0031");_fd :=_ga .NewEG_ShapeElements ();_fd .Fill =_ga .NewFill ();_fd .Fill .Color2Attr =_b .String ("\u0023f\u0062\u0066\u0065\u0038\u0032");_fd .Fill .AngleAttr =_b .Float64 (-180);_fd .Fill .TypeAttr =_ga .ST_FillTypeGradient ;_fd .Fill .Fill =_ga .NewOfcFill ();_fd .Fill .Fill .ExtAttr =_ga .ST_ExtView ;_fd .Fill .Fill .TypeAttr =_ga .OfcST_FillTypeGradientUnscaled ;_a .EG_ShapeElements =append (_a .EG_ShapeElements ,_fd );_bb :=_ga .NewEG_ShapeElements ();_bb .Shadow =_ga .NewShadow ();_bb .Shadow .OnAttr =_gb .ST_TrueFalseT ;_bb .Shadow .ObscuredAttr =_gb .ST_TrueFalseT ;_a .EG_ShapeElements =append (_a .EG_ShapeElements ,_bb );_ff :=_ga .NewEG_ShapeElements ();_ff .Path =_ga .NewPath ();_ff .Path .ConnecttypeAttr =_ga .OfcST_ConnectTypeNone ;_a .EG_ShapeElements =append (_a .EG_ShapeElements ,_ff );_gf :=_ga .NewEG_ShapeElements ();_gf .Textbox =_ga .NewTextbox ();_gf .Textbox .StyleAttr =_b .String ("\u006d\u0073\u006f\u002ddi\u0072\u0065\u0063\u0074\u0069\u006f\u006e\u002d\u0061\u006c\u0074\u003a\u0061\u0075t\u006f");_a .EG_ShapeElements =append (_a .EG_ShapeElements ,_gf );_ba :=_ga .NewEG_ShapeElements ();_ba .ClientData =_e .NewClientData ();_ba .ClientData .ObjectTypeAttr =_e .ST_ObjectTypeNote ;_ba .ClientData .MoveWithCells =_gb .ST_TrueFalseBlankT ;_ba .ClientData .SizeWithCells =_gb .ST_TrueFalseBlankT ;_ba .ClientData .Anchor =_b .String ("\u0031,\u0020\u0031\u0035\u002c\u0020\u0030\u002c\u0020\u0032\u002c\u00202\u002c\u0020\u0035\u0034\u002c\u0020\u0035\u002c\u0020\u0033");_ba .ClientData .AutoFill =_gb .ST_TrueFalseBlankFalse ;_ba .ClientData .Row =_b .Int64 (row );_ba .ClientData .Column =_b .Int64 (col );_a .EG_ShapeElements =append (_a .EG_ShapeElements ,_ba );return _a ;};

// ToString formatting ShapeStyle to string.
func (_bfg *ShapeStyle )String ()string {_deg :="";_deg +=_f .Sprintf ("\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u003a\u0025\u0073\u003b",_bfg ._fae );_deg +=_f .Sprintf ("\u006da\u0072g\u0069\u006e\u002d\u006c\u0065\u0066\u0074\u003a\u0025\u0064\u003b",_bfg ._ab );_deg +=_f .Sprintf ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006fp\u003a\u0025\u0064\u003b",_bfg ._ccb );_deg +=_f .Sprintf ("w\u0069\u0064\u0074\u0068\u003a\u0025\u0064\u0070\u0074\u003b",_bfg ._ef );_deg +=_f .Sprintf ("\u0068\u0065\u0069g\u0068\u0074\u003a\u0025\u0064\u0070\u0074\u003b",_bfg ._ac );_deg +=_f .Sprintf ("z\u002d\u0069\u006e\u0064\u0065\u0078\u003a\u0025\u0064\u003b",_bfg ._cce );_deg +=_f .Sprintf ("m\u0073\u006f\u002d\u0070\u006f\u0073i\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069z\u006f\u006e\u0074a\u006c:\u0025\u0073\u003b",_bfg ._adb );_deg +=_f .Sprintf ("\u006d\u0073o-\u0070\u006f\u0073i\u0074\u0069\u006f\u006e-ho\u0072iz\u006f\u006e\u0074\u0061\u006c\u002d\u0072el\u0061\u0074\u0069\u0076\u0065\u003a\u0025s\u003b",_bfg ._aa );_deg +=_f .Sprintf ("\u006ds\u006f\u002d\u0070\u006fs\u0069\u0074\u0069\u006f\u006e-\u0076e\u0072t\u0069\u0063\u0061\u006c\u003a\u0025\u0073;",_bfg ._ca );_deg +=_f .Sprintf ("\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0076e\u0072t\u0069c\u0061l\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065\u003a\u0025\u0073\u003b",_bfg ._eb );return _deg ;};

// NewShapeStyle accept value of string style attribute in v:shape and format it to generate ShapeStyle.
func NewShapeStyle (style string )ShapeStyle {_bd :=ShapeStyle {_ef :0,_ac :0};_bfd :=_g .Split (style ,"\u003b");for _ ,_dae :=range _bfd {_dea :=_g .Split (_dae ,"\u003a");if len (_dea )!=2{continue ;};switch _dea [0]{case "\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e":_bd ._fae =_dea [1];break ;case "m\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074":_bd ._ab ,_ =_c .ParseInt (_dea [1],10,64);break ;case "\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070":_bd ._ccb ,_ =_c .ParseInt (_dea [1],10,64);break ;case "\u0077\u0069\u0064t\u0068":_bd ._ef ,_ =_c .ParseInt (_g .ReplaceAll (_dea [1],"\u0070\u0074",""),10,64);break ;case "\u0068\u0065\u0069\u0067\u0068\u0074":_bd ._ac ,_ =_c .ParseInt (_g .ReplaceAll (_dea [1],"\u0070\u0074",""),10,64);break ;case "\u007a-\u0069\u006e\u0064\u0065\u0078":_bd ._cce ,_ =_c .ParseInt (_dea [1],10,64);break ;case "\u006d\u0073\u006f-p\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006f\u0072\u0069\u007a\u006f\u006e\u0074\u0061\u006c":_bd ._adb =_dea [1];break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u002d\u0068\u006fr\u0069z\u006f\u006e\u0074\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_bd ._aa =_dea [1];break ;case "m\u0073\u006f\u002d\u0070os\u0069t\u0069\u006f\u006e\u002d\u0076e\u0072\u0074\u0069\u0063\u0061\u006c":_bd ._ca =_dea [1];break ;case "\u006d\u0073\u006f\u002d\u0070\u006f\u0073\u0069\u0074\u0069o\u006e\u002d\u0076\u0065\u0072\u0074\u0069c\u0061\u006c\u002d\u0072\u0065\u006c\u0061\u0074\u0069\u0076\u0065":_bd ._eb =_dea [1];break ;};};return _bd ;};func NewContainer ()*Container {return &Container {}};

// SetFontFamily sets text's fontFamily.
func (_fb *TextpathStyle )SetFontFamily (fontFamily string ){_fb ._aae =fontFamily };

// NewCommentDrawing constructs a new comment drawing.
func NewCommentDrawing ()*Container {_cc :=NewContainer ();_cc .Layout =_ga .NewOfcShapelayout ();_cc .Layout .ExtAttr =_ga .ST_ExtEdit ;_cc .Layout .Idmap =_ga .NewOfcCT_IdMap ();_cc .Layout .Idmap .DataAttr =_b .String ("\u0031");_cc .Layout .Idmap .ExtAttr =_ga .ST_ExtEdit ;_cc .ShapeType =_ga .NewShapetype ();_cc .ShapeType .IdAttr =_b .String ("_\u0078\u0030\u0030\u0030\u0030\u005f\u0074\u0032\u0030\u0032");_cc .ShapeType .CoordsizeAttr =_b .String ("2\u0031\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030");_cc .ShapeType .SptAttr =_b .Float32 (202);_cc .ShapeType .PathAttr =_b .String ("\u006d\u0030\u002c0l\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u00321\u00360\u0030,\u00321\u0036\u0030\u0030\u002c\u0032\u0031\u0036\u0030\u0030\u002c\u0030\u0078\u0065");_dg :=_ga .NewEG_ShapeElements ();_cc .ShapeType .EG_ShapeElements =append (_cc .ShapeType .EG_ShapeElements ,_dg );_dg .Path =_ga .NewPath ();_dg .Path .GradientshapeokAttr =_gb .ST_TrueFalseT ;_dg .Path .ConnecttypeAttr =_ga .OfcST_ConnectTypeRect ;return _cc ;};

// SetItalic sets text to italic.
func (_adg *TextpathStyle )SetItalic (italic bool ){_adg ._deac =italic };

// NewTextpathStyle accept value of string style attribute of element v:textpath and format it to generate TextpathStyle.
func NewTextpathStyle (style string )TextpathStyle {_dc :=TextpathStyle {_aae :"\u0022C\u0061\u006c\u0069\u0062\u0072\u0069\"",_bad :44,_dga :false ,_deac :false };_ebc :=_g .Split (style ,"\u003b");for _ ,_bbe :=range _ebc {_cf :=_g .Split (_bbe ,"\u003a");if len (_cf )!=2{continue ;};switch _cf [0]{case "f\u006f\u006e\u0074\u002d\u0066\u0061\u006d\u0069\u006c\u0079":_dc ._aae =_cf [1];break ;case "\u0066o\u006e\u0074\u002d\u0073\u0069\u007ae":_dc ._bad ,_ =_c .ParseInt (_g .ReplaceAll (_cf [1],"\u0070\u0074",""),10,64);break ;case "f\u006f\u006e\u0074\u002d\u0077\u0065\u0069\u0067\u0068\u0074":_dc ._dga =_cf [1]=="\u0062\u006f\u006c\u0064";break ;case "\u0066\u006f\u006e\u0074\u002d\u0073\u0074\u0079\u006c\u0065":_dc ._deac =_cf [1]=="\u0069\u0074\u0061\u006c\u0069\u0063";break ;};};return _dc ;};

// Height return height of shape.
func (_cd *ShapeStyle )Height ()int64 {return _cd ._ac };func (_cg *Container )UnmarshalXML (d *_ce .Decoder ,start _ce .StartElement )error {_cg .Shape =nil ;_ag :for {_fe ,_df :=d .Token ();if _df !=nil {return _df ;};switch _fa :=_fe .(type ){case _ce .StartElement :switch _fa .Name .Local {case "s\u0068\u0061\u0070\u0065\u006c\u0061\u0079\u006f\u0075\u0074":_cg .Layout =_ga .NewOfcShapelayout ();if _ffd :=d .DecodeElement (_cg .Layout ,&_fa );_ffd !=nil {return _ffd ;};case "\u0073h\u0061\u0070\u0065\u0074\u0079\u0070e":_cg .ShapeType =_ga .NewShapetype ();if _bf :=d .DecodeElement (_cg .ShapeType ,&_fa );_bf !=nil {return _bf ;};case "\u0073\u0068\u0061p\u0065":_fef :=_ga .NewShape ();if _bfb :=d .DecodeElement (_fef ,&_fa );_bfb !=nil {return _bfb ;};_cg .Shape =append (_cg .Shape ,_fef );};case _ce .EndElement :break _ag ;};};return nil ;};

// IsBold returns true if text is bold.
func (_afb *TextpathStyle )IsBold ()bool {return _afb ._dga };

// SetBold sets text to bold.
func (_abg *TextpathStyle )SetBold (bold bool ){_abg ._dga =bold };

// TextpathStyle is style attribute of element v:textpath.
type TextpathStyle struct{_aae string ;_bad int64 ;_dga bool ;_deac bool ;};

// SetHeight set height of shape.
func (_cge *ShapeStyle )SetHeight (height int64 ){_cge ._ac =height };type Container struct{Layout *_ga .OfcShapelayout ;ShapeType *_ga .Shapetype ;Shape []*_ga .Shape ;};

// ShapeStyle is style attribute of v:shape element.
type ShapeStyle struct{_fae string ;_ab int64 ;_ccb int64 ;_ef int64 ;_ac int64 ;_cce int64 ;_adb string ;_aa string ;_ca string ;_eb string ;};

// FontFamily returns fontFamily of the text.
func (_bg *TextpathStyle )FontFamily ()string {return _bg ._aae };

// IsItalic returns true if text is italic.
func (_eg *TextpathStyle )IsItalic ()bool {return _eg ._deac };

// SetWidth set width of shape.
func (_fg *ShapeStyle )SetWidth (width int64 ){_fg ._ef =width };