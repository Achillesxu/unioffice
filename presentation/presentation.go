//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_ega "archive/zip";_add "bytes";_eb "encoding/xml";_ag "errors";_bcc "fmt";_efa "github.com/unidoc/unioffice";_ad "github.com/unidoc/unioffice/common";_ed "github.com/unidoc/unioffice/common/logger";_bc "github.com/unidoc/unioffice/common/tempstorage";_bb "github.com/unidoc/unioffice/drawing";_eg "github.com/unidoc/unioffice/internal/license";_a "github.com/unidoc/unioffice/measurement";_fg "github.com/unidoc/unioffice/schema/soo/dml";_ef "github.com/unidoc/unioffice/schema/soo/dml/chart";_g "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_b "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_geb "github.com/unidoc/unioffice/schema/soo/pml";_ca "github.com/unidoc/unioffice/zippkg";_eff "image";_cab "image/jpeg";_ge "io";_ec "math";_edg "os";_f "path";_bbe "sort";_d "strconv";_c "strings";);

// HtmlPubPr returns the HtmlPubPr property.
func (_bacb PresentationProperties )HtmlPubPr ()*_geb .CT_HtmlPublishProperties {return _bacb ._fff .HtmlPubPr ;};

// Properties returns the properties of the TextBox.
func (_bgf Image )Properties ()_bb .ShapeProperties {if _bgf ._cge .SpPr ==nil {_bgf ._cge .SpPr =_fg .NewCT_ShapeProperties ();};return _bb .MakeShapeProperties (_bgf ._cge .SpPr );};

// Image is an image within a slide.
type Image struct{_cge *_geb .CT_Picture };

// X returns the inner wrapped XML type.
func (_dga PresentationProperties )X ()*_geb .PresentationPr {return _dga ._fff };

// SlideMasters returns the slide masters defined in the presentation.
func (_gbede *Presentation )SlideMasters ()[]SlideMaster {_dcfg :=[]SlideMaster {};for _afe ,_gfc :=range _gbede ._dee {_dcfg =append (_dcfg ,SlideMaster {_gbede ,_gbede ._adce [_afe ],_gfc });};return _dcfg ;};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_fdg Slide )AddImageToRels (img _ad .ImageRef )string {_bed :=0;for _fggd ,_ddae :=range _fdg ._dfbd .Images {if _ddae ==img {_bed =_fggd +1;break ;};};var _dcge string ;for _ddfd ,_addf :=range _fdg ._dfbd .Slides (){if _addf ._fea ==_fdg ._fea {_efeb :=_bcc .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_bed ,img .Format ());_acc :=_fdg ._dfbd ._dec [_ddfd ].AddRelationship (_efeb ,_efa .ImageType );_dcge =_acc .ID ();};};return _dcge ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_gdd *Presentation )AddImage (i _ad .Image )(_ad .ImageRef ,error ){_ecgg :=_ad .MakeImageRef (i ,&_gdd .DocBase ,_gdd ._gbb );if i .Data ==nil &&i .Path ==""{return _ecgg ,_ag .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _ecgg ,_ag .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _ecgg ,_ag .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_aba :=_bc .Add (i .Path );if _aba !=nil {return _ecgg ,_aba ;};};_gdd .Images =append (_gdd .Images ,_ecgg );_gdd .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_gdd .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_gdd .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_gdd .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_gdd .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _ecgg ,nil ;};

// NotesTextViewPr returns the NotesTextViewPr property.
func (_bcdee ViewProperties )NotesTextViewPr ()*_geb .CT_NotesTextViewProperties {return _bcdee ._fgb .NotesTextViewPr ;};

// Less is for implementing sorting of two locations. Symbols share the same location if they are in the same paragraph or table. One location is 'less' than another first by y coordinate, if y coordinates are equal or differ by less than yEpsilon, then x coordinates are compared, then if they are also equal, indexes of locations in the table are compared, then positions of locations in a paragraph.
func (_df sort2d )Less (i ,j int )bool {_cb ,_ff :=_df [i ],_df [j ];_dgf ,_ce :=_cb ._be ,_ff ._be ;_bba ,_cac :=len (_dgf )-1,len (_ce )-1;_fb ,_bcf :=0,0;for {_baa ,_edc ,_bce ,_fdf ,_bbad ,_ceg ,_eaf ,_bgg :=_dgf [_fb ]._bd ,_ce [_bcf ]._bd ,_dgf [_fb ]._edga ,_ce [_bcf ]._edga ,_dgf [_fb ]._gc ,_ce [_bcf ]._gc ,_dgf [_fb ]._gg ,_ce [_bcf ]._gg ;if _baa ==_edc ||((_ec .Abs (float64 (_baa )-float64 (_edc ))< _dada )&&((_baa >=_edc &&_baa <=_fdf )||(_edc >=_baa &&_edc <=_bce ))&&(_eaf < _ceg ||_bbad > _bgg )){if _bbad ==_ceg {if _fb < _bba &&_bcf < _cac {_fb ++;_bcf ++;continue ;};if _fb >=_bba &&_bcf >=_cac {break ;};return _fb >=_bba ;}else {return _bbad < _ceg ;};}else {return _baa < _edc ;};};_dadc ,_bbcb ,_ffd ,_fgd :=_cb ._gd ,_ff ._gd ,_cb ._dc ,_ff ._dc ;if _dadc ==_bbcb {return _ffd <=_fgd ;};return _dadc < _bbcb ;};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_bgc PlaceHolder )Clear (){_bgc .ClearAll ();_af :=_fg .NewCT_TextParagraph ();_bgc ._bab .TxBody .P =[]*_fg .CT_TextParagraph {_af };_af .EndParaRPr =_fg .NewCT_TextCharacterProperties ();_af .EndParaRPr .LangAttr =_efa .String ("\u0065\u006e\u002dU\u0053");};

// Index returns the placeholder index
func (_fbe PlaceHolder )Index ()uint32 {if _fbe ._bab .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_fbe ._bab .NvSpPr .NvPr .Ph .IdxAttr ;};

// SorterViewPr returns the SorterViewPr property.
func (_decc ViewProperties )SorterViewPr ()*_geb .CT_SlideSorterViewProperties {return _decc ._fgb .SorterViewPr ;};func _aa (_db *Presentation ,_gecc *_geb .CT_Shape ,_bcd *_geb .CT_GraphicalObjectFrame ,_dda *TableInfo ,_ada *_fg .CT_Transform2D ,_eeb int ,_bda []rectangle ,_gf []*_fg .CT_TextParagraph )[]*TextItem {_ae :=[]*TextItem {};var _ccdb ,_bac ,_fga ,_ggd ,_da ,_cceb int64 ;_bef :=_ada ==nil ;_cdb :=0;for _ ,_bdb :=range _gf {for _ ,_gb :=range _bdb .EG_TextRun {if _gcc :=_gb .R ;_gcc !=nil {if !_bef {if _ada .Off !=nil {if _bfe :=_ada .Ext ;_bfe !=nil {_da ,_cceb =_bfe .CxAttr ,_bfe .CyAttr ;};if _ccc :=_ada .Off .XAttr .ST_CoordinateUnqualified ;_ccc !=nil {_ccdb =*_ccc ;_bac =_ccdb +_da ;_bef =true ;};if _gac :=_ada .Off .YAttr .ST_CoordinateUnqualified ;_gac !=nil {_fga =*_gac ;_ggd =_fga +_cceb ;_bef =true ;};};};_dad :=append ([]rectangle {},_bda ...);_dad =append (_dad ,rectangle {_gc :_ccdb ,_gg :_bac ,_bd :_fga ,_edga :_ggd });_ae =append (_ae ,&TextItem {Presentation :_db ,Shape :_gecc ,GraphicFrame :_bcd ,TableInfo :_dda ,Paragraph :_bdb ,Run :_gcc ,Text :_gcc .T ,_be :_dad ,_gd :_eeb ,_dc :_cdb });_cdb ++;};};};return _ae ;};

// ExtLst returns the ExtLst property.
func (_egf ViewProperties )ExtLst ()*_geb .CT_ExtensionList {return _egf ._fgb .ExtLst };

// Type returns the type of the slide layout.
func (_aacb SlideLayout )Type ()_geb .ST_SlideLayoutType {return _aacb ._gbc .TypeAttr };

// ExtractText returns text from a presentation as a PresentationText object.
func (_bbc *Presentation )ExtractText ()*PresentationText {_dg :=[]*SlideText {};for _ ,_ba :=range _bbc .Slides (){_fab :=_ba .ExtractText ();if _fab !=nil {_dg =append (_dg ,_fab );};};return &PresentationText {Slides :_dg };};func (_ddf *Presentation )onNewRelationship (_cee *_ca .DecodeMap ,_ccag ,_fbeb string ,_babd []*_ega .File ,_cfg *_b .Relationship ,_gde _ca .Target )error {_eec :=_efa .DocTypePresentation ;switch _fbeb {case _efa .OfficeDocumentType :_ddf ._bdd =_geb .NewPresentation ();_cee .AddTarget (_ccag ,_ddf ._bdd ,_fbeb ,0);_cee .AddTarget (_ca .RelationsPathFor (_ccag ),_ddf ._gbb .X (),_fbeb ,0);_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,0);case _efa .CorePropertiesType :_cee .AddTarget (_ccag ,_ddf .CoreProperties .X (),_fbeb ,0);_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,0);case _efa .CustomPropertiesType :_cee .AddTarget (_ccag ,_ddf .CustomProperties .X (),_fbeb ,0);_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,0);case _efa .PresentationPropertiesType :_cee .AddTarget (_ccag ,_ddf ._bfd .X (),_fbeb ,0);_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,0);case _efa .ViewPropertiesType :_cee .AddTarget (_ccag ,_ddf ._bgb .X (),_fbeb ,0);_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,0);case _efa .TableStylesType :_cee .AddTarget (_ccag ,_ddf ._cf .X (),_fbeb ,0);_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,0);case _efa .HyperLinkType :_gbf :=_fg .NewCT_Hyperlink ();_dde :=uint32 (len (_ddf ._cda ));_cee .AddTarget (_ccag ,_gbf ,_fbeb ,_dde );_ddf ._cda =append (_ddf ._cda ,_gbf );case _efa .CustomXMLType :_ddaf :=&_efa .XSDAny {};_dfb :=uint32 (len (_ddf ._eab ));_cee .AddTarget (_ccag ,_ddaf ,_fbeb ,_dfb );_ddf ._eab =append (_ddf ._eab ,_ddaf );_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._eab ));case _efa .ChartType :_fagb :=chart {_gee :_ef .NewChartSpace ()};_bbabb :=uint32 (len (_ddf ._abe ));_cee .AddTarget (_ccag ,_fagb ._gee ,_fbeb ,_bbabb );_ddf ._abe =append (_ddf ._abe ,&_fagb );_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._abe ));_fagb ._ece =_cfg .TargetAttr ;case _efa .HandoutMasterType :_badg :=_geb .NewHandoutMaster ();_cedd :=uint32 (len (_ddf ._dfe ));_cee .AddTarget (_ccag ,_badg ,_fbeb ,_cedd );_ddf ._dfe =append (_ddf ._dfe ,_badg );_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._dfe ));case _efa .NotesMasterType :_aece :=_geb .NewNotesMaster ();_ace :=uint32 (len (_ddf ._dbb ));_cee .AddTarget (_ccag ,_aece ,_fbeb ,_ace );_ddf ._dbb =append (_ddf ._dbb ,_aece );_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._dbb ));case _efa .ExtendedPropertiesType :_cee .AddTarget (_ccag ,_ddf .AppProperties .X (),_fbeb ,0);_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,0);case _efa .SlideType :_ecgd :=_geb .NewSld ();_ddf ._bfg =append (_ddf ._bfg ,_ecgd );_cee .AddTarget (_ccag ,_ecgd ,_fbeb ,uint32 (len (_ddf ._bfg )));_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._bfg ));_acdb :=_ad .NewRelationships ();_cee .AddTarget (_ca .RelationsPathFor (_ccag ),_acdb .X (),_fbeb ,0);_ddf ._dec =append (_ddf ._dec ,_acdb );case _efa .SlideMasterType :_fcf :=_geb .NewSldMaster ();if !_cee .AddTarget (_ccag ,_fcf ,_fbeb ,uint32 (len (_ddf ._dee )+1)){return nil ;};_ddf ._dee =append (_ddf ._dee ,_fcf );_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._dee ));_bfcb :=_ad .NewRelationships ();_cee .AddTarget (_ca .RelationsPathFor (_ccag ),_bfcb .X (),_fbeb ,0);_ddf ._adce =append (_ddf ._adce ,_bfcb );case _efa .SlideLayoutType :_gggfe :=_geb .NewSldLayout ();if !_cee .AddTarget (_ccag ,_gggfe ,_fbeb ,uint32 (len (_ddf ._gea )+1)){return nil ;};_ddf ._gea =append (_ddf ._gea ,_gggfe );_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._gea ));_cfac :=_ad .NewRelationships ();_cee .AddTarget (_ca .RelationsPathFor (_ccag ),_cfac .X (),_fbeb ,0);_ddf ._ced =append (_ddf ._ced ,_cfac );case _efa .ThumbnailType :for _edd ,_dgg :=range _babd {if _dgg ==nil {continue ;};if _dgg .Name ==_ccag {_adcf ,_cef :=_dgg .Open ();if _cef !=nil {return _bcc .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_cef );};_ddf .Thumbnail ,_ ,_cef =_eff .Decode (_adcf );_adcf .Close ();if _cef !=nil {return _bcc .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_cef );};_babd [_edd ]=nil ;};};case _efa .ThemeType :_cbga :=_fg .NewTheme ();if !_cee .AddTarget (_ccag ,_cbga ,_fbeb ,uint32 (len (_ddf ._bbef )+1)){return nil ;};_ddf ._bbef =append (_ddf ._bbef ,_cbga );_cfg .TargetAttr =_efa .RelativeFilename (_eec ,_gde .Typ ,_fbeb ,len (_ddf ._bbef ));_eac :=_ad .NewRelationships ();_cee .AddTarget (_ca .RelationsPathFor (_ccag ),_eac .X (),_fbeb ,0);_ddf ._dcb =append (_ddf ._dcb ,_eac );case _efa .ImageType :_ccag =_f .Clean (_ccag );if _eacf ,_bdga :=_ddf ._cca [_ccag ];_bdga {_cfg .TargetAttr =_eacf ;return nil ;};_eabf :="";for _ebe ,_gfe :=range _babd {if _gfe ==nil {continue ;};if _gfe .Name ==_ccag {_adag ,_ebef :=_ca .ExtractToDiskTmp (_gfe ,_ddf .TmpPath );if _ebef !=nil {return _ebef ;};_cadb ,_ebef :=_ad .ImageFromStorage (_adag );if _ebef !=nil {return _ebef ;};_eabf =_cadb .Format ;_gaae :=_ad .MakeImageRef (_cadb ,&_ddf .DocBase ,_ddf ._gbb );_gaae .SetTarget ("\u002e\u002e\u002f"+_ccag [4:]);_ddf .Images =append (_ddf .Images ,_gaae );_babd [_ebe ]=nil ;_cee .RecordIndex (_ccag ,len (_ddf .Images ));break ;};};_eba :=_cee .IndexFor (_ccag );_cfg .TargetAttr =_efa .RelativeImageFilename (_eec ,_gde .Typ ,_fbeb ,_eba ,_eabf );_ddf ._cca [_ccag ]=_cfg .TargetAttr ;default:_ed .Log .Debug ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_fbeb ,_ccag );};return nil ;};

// NormalViewPr returns the NormalViewPr property.
func (_caad ViewProperties )NormalViewPr ()*_geb .CT_NormalViewProperties {return _caad ._fgb .NormalViewPr ;};

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_fgb :_geb .NewViewPr ()}};

// Text returns text from a slide as one string separated with line breaks.
func (_abc *SlideText )Text ()string {_agee :=_add .NewBuffer ([]byte {});for _ ,_ddb :=range _abc .Items {if _ddb .Text !=""{_agee .WriteString (_ddb .Text );_agee .WriteString ("\u000a");};};return _agee .String ();};

// SetWidth sets width of slide screen size with given value in EMU units.
func (_deeba *SlideScreenSize )SetWidth (val int32 ){_deeba [0]=val };

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_bec ,_ecaf :=Open (fn );if _ecaf !=nil {return nil ,_ecaf ;};return _bec ,nil ;};

// AddTable adds an empty table to a slide.
func (_gcdgc Slide )AddTable ()*_ad .Table {_begc :=_geb .NewCT_GroupShapeChoice ();_gcdgc ._fea .CSld .SpTree .Choice =append (_gcdgc ._fea .CSld .SpTree .Choice ,_begc );_cggb :=_geb .NewCT_GraphicalObjectFrame ();_begc .GraphicFrame =append (_begc .GraphicFrame ,_cggb );_cggb .Xfrm .Off =_fg .NewCT_Point2D ();_ebeff :=int64 (1);_cggb .Xfrm .Off .XAttr =_fg .ST_Coordinate {ST_CoordinateUnqualified :&_ebeff };_cggb .Xfrm .Off .YAttr =_fg .ST_Coordinate {ST_CoordinateUnqualified :&_ebeff };_bbgg :=_cggb .Graphic .CT_GraphicalObject .GraphicData ;_bbgg .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_dacg :=_ad .NewTableWithXfrm (_cggb .Xfrm );_bbgg .Any =append (_bbgg .Any ,_dacg .X ());return _dacg ;};

// AddParagraph adds a new paragraph to a placeholder.
func (_fae PlaceHolder )AddParagraph ()_bb .Paragraph {_fef :=_bb .MakeParagraph (_fg .NewCT_TextParagraph ());_fae ._bab .TxBody .P =append (_fae ._bab .TxBody .P ,_fef .X ());return _fef ;};

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_defc TextBox )SetOffsetY (offY float64 ){_bgdc :=_defc .getOff ();_bagd :=_a .ToEMU (offY );_bgdc .YAttr =_fg .ST_Coordinate {ST_CoordinateUnqualified :&_bagd };};

// Presentation is the a presentation base document.
type Presentation struct{_ad .DocBase ;_bdd *_geb .Presentation ;_gbb _ad .Relationships ;_bfg []*_geb .Sld ;_dec []_ad .Relationships ;_dee []*_geb .SldMaster ;_adce []_ad .Relationships ;_gea []*_geb .SldLayout ;_ced []_ad .Relationships ;_bbef []*_fg .Theme ;_dcb []_ad .Relationships ;_cf _ad .TableStyles ;_bfd PresentationProperties ;_bgb ViewProperties ;_cda []*_fg .CT_Hyperlink ;_abe []*chart ;_dfe []*_geb .HandoutMaster ;_dbb []*_geb .NotesMaster ;_eab []*_efa .XSDAny ;_cca map[string ]string ;_beg string ;};func (_fac *Slide )ensureClrMap (){if len (_fac ._dfbd ._dee )==0||len (_fac ._dfbd ._bbef )==0{return ;};_eggb :=_fac ._dfbd ._dee [0];_bcdc :=_eggb .ClrMap ;if _beee :=_fac ._fea .ClrMapOvr ;_beee !=nil {if _faff :=_beee .Choice ;_faff !=nil {if _faff .MasterClrMapping ==nil {if _gdad :=_faff .OverrideClrMapping ;_gdad !=nil {if _gdad .Bg1Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Bg1Attr =_gdad .Bg1Attr ;};if _gdad .Tx1Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Tx1Attr =_gdad .Tx1Attr ;};if _gdad .Bg2Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Bg2Attr =_gdad .Bg2Attr ;};if _gdad .Tx2Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Tx2Attr =_gdad .Tx2Attr ;};if _gdad .Accent1Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Accent1Attr =_gdad .Accent1Attr ;};if _gdad .Accent2Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Accent2Attr =_gdad .Accent2Attr ;};if _gdad .Accent3Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Accent3Attr =_gdad .Accent3Attr ;};if _gdad .Accent4Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Accent4Attr =_gdad .Accent4Attr ;};if _gdad .Accent5Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Accent5Attr =_gdad .Accent5Attr ;};if _gdad .Accent6Attr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .Accent6Attr =_gdad .Accent6Attr ;};if _gdad .HlinkAttr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .HlinkAttr =_gdad .HlinkAttr ;};if _gdad .FolHlinkAttr !=_fg .ST_ColorSchemeIndexUnset {_bcdc .FolHlinkAttr =_gdad .FolHlinkAttr ;};};};};};_fac ._cbc =_bcdc ;};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_gdg PlaceHolder )Paragraphs ()[]_bb .Paragraph {_gcb :=[]_bb .Paragraph {};for _ ,_de :=range _gdg ._bab .TxBody .P {_gcb =append (_gcb ,_bb .MakeParagraph (_de ));};return _gcb ;};

// AddParagraph adds a paragraph to the text box
func (_edbd TextBox )AddParagraph ()_bb .Paragraph {_cdf :=_fg .NewCT_TextParagraph ();_edbd ._eecb .TxBody .P =append (_edbd ._eecb .TxBody .P ,_cdf );return _bb .MakeParagraph (_cdf );};func (_feb sort2d )Len ()int {return len (_feb )};

// Slides returns the slides in the presentation.
func (_ffb *Presentation )Slides ()[]Slide {_gad :=[]Slide {};for _bgd ,_dgef :=range _ffb ._bfg {_gad =append (_gad ,Slide {_ffb ._bdd .SldIdLst .SldId [_bgd ],_dgef ,_ffb ,nil });};return _gad ;};

// GetTextBoxes returns a list of all text boxes from a slide.
func (_acfa Slide )GetTextBoxes ()[]*TextBox {_cbfa :=[]*TextBox {};_ebcda :=_acfa ._fea .CSld .SpTree .Choice ;for _ ,_aacc :=range _ebcda {for _ ,_dfg :=range _aacc .Sp {if _dfg .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_dfg .NvSpPr .CNvSpPr .TxBoxAttr {_cbfa =append (_cbfa ,&TextBox {_dfg });};};};return _cbfa ;};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_bae SlideMaster )SlideLayouts ()[]SlideLayout {_ffa :=map[string ]int {};_cbca :=[]SlideLayout {};for _ ,_bbca :=range _bae ._afff .Relationships (){_dbcc :=_c .Replace (_bbca .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_dbcc =_c .Replace (_dbcc ,"\u002e\u0078\u006d\u006c","",-1);if _eddd ,_dfc :=_d .ParseInt (_dbcc ,10,32);_dfc ==nil {_ffa [_bbca .ID ()]=int (_eddd );};};for _ ,_bebe :=range _bae ._affc .SldLayoutIdLst .SldLayoutId {if _cgbe ,_bacbf :=_ffa [_bebe .RIdAttr ];_bacbf {_effe :=_bae ._dged ._gea [_cgbe -1];_cbca =append (_cbca ,SlideLayout {_effe });};};return _cbca ;};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_fgfb *Presentation )SaveAsTemplate (w _ge .Writer )error {return _fgfb .save (w ,true )};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_ecff *Presentation )SaveToFileAsTemplate (path string )error {return _ecff .saveToFile (path ,true );};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_gbc *_geb .SldLayout };

// OutlineViewPr returns the OutlineViewPr property.
func (_bgad ViewProperties )OutlineViewPr ()*_geb .CT_OutlineViewProperties {return _bgad ._fgb .OutlineViewPr ;};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_fddg Slide )GetPlaceholder (t _geb .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_dgba :=range _fddg ._fea .CSld .SpTree .Choice {for _ ,_dbef :=range _dgba .Sp {if _dbef .NvSpPr !=nil &&_dbef .NvSpPr .NvPr !=nil &&_dbef .NvSpPr .NvPr .Ph !=nil {if _dbef .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_dbef ,_fddg ._fea },nil ;};};};};return PlaceHolder {},_ag .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// WebPr returns the WebPr property.
func (_gaac PresentationProperties )WebPr ()*_geb .CT_WebProperties {return _gaac ._fff .WebPr };

// Read reads a document from an io.Reader.
func Read (r _ge .ReaderAt ,size int64 )(*Presentation ,error ){const _ccaa ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_eg .GetLicenseKey ().IsLicensed ()&&!_dbg {_bcc .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_bcc .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_ag .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_bde :=_gbe ();_cgdc ,_afed :=_eg .GenRefId ("\u0070\u0072");if _afed !=nil {_ed .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_afed );return nil ,_afed ;};_bde ._beg =_cgdc ;if _fee :=_eg .Track (_bde ._beg ,_ccaa );_fee !=nil {_ed .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_fee );return nil ,_fee ;};_deg ,_afed :=_bc .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _afed !=nil {return nil ,_afed ;};_bde .TmpPath =_deg ;_fcbd ,_afed :=_ega .NewReader (r ,size );if _afed !=nil {return nil ,_bcc .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_afed );};_ffgc :=[]*_ega .File {};_ffgc =append (_ffgc ,_fcbd .File ...);_aff :=false ;for _ ,_cdac :=range _ffgc {if _cdac .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_aff =true ;break ;};};if _aff {_bde .CreateCustomProperties ();};_gcdg :=_ca .DecodeMap {};_gcdg .SetOnNewRelationshipFunc (_bde .onNewRelationship );_gcdg .AddTarget (_efa .ContentTypesFilename ,_bde .ContentTypes .X (),"",0);_gcdg .AddTarget (_efa .BaseRelsFilename ,_bde .Rels .X (),"",0);if _cgga :=_gcdg .Decode (_ffgc );_cgga !=nil {return nil ,_cgga ;};for _ ,_afg :=range _ffgc {if _afg ==nil {continue ;};if _dcdc :=_bde .AddExtraFileFromZip (_afg );_dcdc !=nil {return nil ,_dcdc ;};};if _aff {_bggd :=false ;for _ ,_dcde :=range _bde .Rels .X ().Relationship {if _dcde .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_bggd =true ;break ;};};if !_bggd {_bde .AddCustomRelationships ();};};return _bde ,nil ;};

// Name returns the name of the slide layout.
func (_dcaf SlideLayout )Name ()string {if _dcaf ._gbc .CSld !=nil &&_dcaf ._gbc .CSld .NameAttr !=nil {return *_dcaf ._gbc .CSld .NameAttr ;};return "";};

// AddTextBox adds an empty textbox to a slide.
func (_afb Slide )AddTextBox ()TextBox {_fabd :=_geb .NewCT_GroupShapeChoice ();_afb ._fea .CSld .SpTree .Choice =append (_afb ._fea .CSld .SpTree .Choice ,_fabd );_gcde :=_geb .NewCT_Shape ();_fabd .Sp =append (_fabd .Sp ,_gcde );_gcde .SpPr =_fg .NewCT_ShapeProperties ();_gcde .SpPr .Xfrm =_fg .NewCT_Transform2D ();_gcde .SpPr .PrstGeom =_fg .NewCT_PresetGeometry2D ();_gcde .SpPr .PrstGeom .PrstAttr =_fg .ST_ShapeTypeRect ;_gcde .NvSpPr =_geb .NewCT_ShapeNonVisual ();_gcde .NvSpPr .CNvSpPr =_fg .NewCT_NonVisualDrawingShapeProps ();_gcgc :=true ;_gcde .NvSpPr .CNvSpPr .TxBoxAttr =&_gcgc ;_gcde .TxBody =_fg .NewCT_TextBody ();_gcde .TxBody .BodyPr =_fg .NewCT_TextBodyProperties ();_gcde .TxBody .BodyPr .WrapAttr =_fg .ST_TextWrappingTypeSquare ;_gcde .TxBody .BodyPr .SpAutoFit =_fg .NewCT_TextShapeAutofit ();_fefg :=TextBox {_gcde };_fefg .Properties ().SetWidth (3*_a .Inch );_fefg .Properties ().SetHeight (1*_a .Inch );_fefg .Properties ().SetPosition (0,0);return _fefg ;};func (_dbe sort2d )Swap (i ,j int ){_dbe [i ],_dbe [j ]=_dbe [j ],_dbe [i ]};

// Slide represents a slide of a presentation.
type Slide struct{_cabe *_geb .CT_SlideIdListEntry ;_fea *_geb .Sld ;_dfbd *Presentation ;_cbc *_fg .CT_ColorMapping ;};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_geb .CT_Shape ;GraphicFrame *_geb .CT_GraphicalObjectFrame ;Paragraph *_fg .CT_TextParagraph ;Run *_fg .CT_RegularTextRun ;TableInfo *TableInfo ;_be []rectangle ;_gd int ;_dc int ;};

// NotesViewPr returns the NotesViewPr property.
func (_caf ViewProperties )NotesViewPr ()*_geb .CT_NotesViewProperties {return _caf ._fgb .NotesViewPr };func (_edab *Presentation )save (_gbd _ge .Writer ,_gcbd bool )error {const _gcca ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _efe :=_edab ._bdd .Validate ();_efe !=nil {_ed .Log .Debug ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_efe );};if !_eg .GetLicenseKey ().IsLicensed ()&&!_dbg {_bcc .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_bcc .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _ag .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_edab ._beg )==0{_aac ,_edb :=_eg .GenRefId ("\u0070\u0077");if _edb !=nil {_ed .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_edb );return _edb ;};_edab ._beg =_aac ;};if _gfd :=_eg .Track (_edab ._beg ,_gcca );_gfd !=nil {_ed .Log .Error ("\u0045R\u0052\u004f\u0052\u003a\u0020\u0025v",_gfd );return _gfd ;};if _gcbd {_edab .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_edab .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_edab .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_edab .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_efbc :=_efa .DocTypePresentation ;_dcc :=_ega .NewWriter (_gbd );defer _dcc .Close ();if _abca :=_ca .MarshalXML (_dcc ,_efa .BaseRelsFilename ,_edab .Rels .X ());_abca !=nil {return _abca ;};if _abeg :=_ca .MarshalXMLByType (_dcc ,_efbc ,_efa .ExtendedPropertiesType ,_edab .AppProperties .X ());_abeg !=nil {return _abeg ;};if _ffeg :=_ca .MarshalXMLByType (_dcc ,_efbc ,_efa .CorePropertiesType ,_edab .CoreProperties .X ());_ffeg !=nil {return _ffeg ;};if _cgb :=_ca .MarshalXMLByType (_dcc ,_efbc ,_efa .PresentationPropertiesType ,_edab ._bfd .X ());_cgb !=nil {return _cgb ;};if _edad :=_ca .MarshalXMLByType (_dcc ,_efbc ,_efa .ViewPropertiesType ,_edab ._bgb .X ());_edad !=nil {return _edad ;};if _bdbg :=_ca .MarshalXMLByType (_dcc ,_efbc ,_efa .TableStylesType ,_edab ._cf .X ());_bdbg !=nil {return _bdbg ;};if _edab .CustomProperties .X ()!=nil {if _ded :=_ca .MarshalXMLByType (_dcc ,_efbc ,_efa .CustomPropertiesType ,_edab .CustomProperties .X ());_ded !=nil {return _ded ;};};if _edab .Thumbnail !=nil {_bgfg ,_ccef :=_dcc .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _ccef !=nil {return _ccef ;};if _fbec :=_cab .Encode (_bgfg ,_edab .Thumbnail ,nil );_fbec !=nil {return _fbec ;};};_dba :=_efa .AbsoluteFilename (_efbc ,_efa .OfficeDocumentType ,0);if _decg :=_ca .MarshalXML (_dcc ,_dba ,_edab ._bdd );_decg !=nil {return _decg ;};if _aed :=_ca .MarshalXML (_dcc ,_ca .RelationsPathFor (_dba ),_edab ._gbb .X ());_aed !=nil {return _aed ;};for _bff ,_gbae :=range _edab ._bfg {_ggdd :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideType ,_bff +1);_ca .MarshalXML (_dcc ,_ggdd ,_gbae );if !_edab ._dec [_bff ].IsEmpty (){_bgbc :=_ca .RelationsPathFor (_ggdd );_ca .MarshalXML (_dcc ,_bgbc ,_edab ._dec [_bff ].X ());};};for _dgd ,_fcgg :=range _edab ._dee {_acf :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideMasterType ,_dgd +1);_ca .MarshalXML (_dcc ,_acf ,_fcgg );if !_edab ._adce [_dgd ].IsEmpty (){_fdc :=_ca .RelationsPathFor (_acf );_ca .MarshalXML (_dcc ,_fdc ,_edab ._adce [_dgd ].X ());};};for _bgef ,_cfa :=range _edab ._gea {_dcdg :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideLayoutType ,_bgef +1);_ca .MarshalXML (_dcc ,_dcdg ,_cfa );if !_edab ._ced [_bgef ].IsEmpty (){_aab :=_ca .RelationsPathFor (_dcdg );_ca .MarshalXML (_dcc ,_aab ,_edab ._ced [_bgef ].X ());};};for _ebcd ,_cfe :=range _edab ._bbef {_efag :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .ThemeType ,_ebcd +1);_ca .MarshalXML (_dcc ,_efag ,_cfe );if !_edab ._dcb [_ebcd ].IsEmpty (){_fde :=_ca .RelationsPathFor (_efag );_ca .MarshalXML (_dcc ,_fde ,_edab ._dcb [_ebcd ].X ());};};for _bcg ,_bea :=range _edab ._abe {_cfb :=_efa .AbsoluteFilename (_efbc ,_efa .ChartType ,_bcg +1);_ca .MarshalXML (_dcc ,_cfb ,_bea );};for _abcag ,_aabe :=range _edab ._dfe {_bcde :=_efa .AbsoluteFilename (_efbc ,_efa .HandoutMasterType ,_abcag +1);_ca .MarshalXML (_dcc ,_bcde ,_aabe );};for _fec ,_fbfb :=range _edab ._dbb {_bffe :=_efa .AbsoluteFilename (_efbc ,_efa .NotesMasterType ,_fec +1);_ca .MarshalXML (_dcc ,_bffe ,_fbfb );};for _cea ,_acdc :=range _edab ._eab {_aae :=_efa .AbsoluteFilename (_efbc ,_efa .CustomXMLType ,_cea +1);_ca .MarshalXML (_dcc ,_aae ,_acdc );};for _dcbc ,_cbf :=range _edab .Images {if _cabg :=_ad .AddImageToZip (_dcc ,_cbf ,_dcbc +1,_efa .DocTypePresentation );_cabg !=nil {return _cabg ;};};_edab .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_edab .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_edab .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_edab .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _adac :=_ca .MarshalXML (_dcc ,_efa .ContentTypesFilename ,_edab .ContentTypes .X ());_adac !=nil {return _adac ;};if _fbeg :=_edab .WriteExtraFiles (_dcc );_fbeg !=nil {return _fbeg ;};return nil ;};

// Save writes the presentation out to a writer in the Zip package format
func (_eegc *Presentation )Save (w _ge .Writer )error {return _eegc .save (w ,false )};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_fgb *_geb .ViewPr };

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_aaa Slide )ValidateWithPath (path string )error {if _effb :=_aaa ._fea .ValidateWithPath (path );_effb !=nil {return _effb ;};for _ ,_egg :=range _aaa ._fea .CSld .SpTree .Choice {for _ ,_gbg :=range _egg .Sp {if _gbg .TxBody !=nil {if len (_gbg .TxBody .P )==0{return _ag .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_agd *Slide )GetColorBySchemeColor (schClr _fg .ST_SchemeColorVal )*_fg .CT_Color {_agd .ensureClrMap ();_gdgf :=_agd ._cbc ;if _gdgf ==nil {return nil ;};var _ffdc _fg .ST_ColorSchemeIndex ;switch schClr .String (){case "\u0062\u0067\u0031":_ffdc =_gdgf .Bg1Attr ;case "\u0062\u0067\u0032":_ffdc =_gdgf .Bg2Attr ;case "\u0074\u0078\u0031":_ffdc =_gdgf .Tx1Attr ;case "\u0074\u0078\u0032":_ffdc =_gdgf .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ffdc =_gdgf .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ffdc =_gdgf .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ffdc =_gdgf .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ffdc =_gdgf .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ffdc =_gdgf .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ffdc =_gdgf .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_ffdc =_gdgf .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ffdc =_gdgf .FolHlinkAttr ;case "\u0064\u006b\u0031":_ffdc =_fg .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_ffdc =_fg .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_ffdc =_fg .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_ffdc =_fg .ST_ColorSchemeIndexLt2 ;default:_ffdc =_fg .ST_ColorSchemeIndexUnset ;};_bfdf :=_agd ._dfbd ._bbef [0];_bfa :=_bfdf .ThemeElements ;if _bfa ==nil {return nil ;};var _gdgb *_fg .CT_Color ;_aecb :=_bfa .ClrScheme ;switch _ffdc .String (){case "\u0064\u006b\u0031":_gdgb =_aecb .Dk1 ;case "\u0064\u006b\u0032":_gdgb =_aecb .Dk2 ;case "\u006c\u0074\u0031":_gdgb =_aecb .Lt1 ;case "\u006c\u0074\u0032":_gdgb =_aecb .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_gdgb =_aecb .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_gdgb =_aecb .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_gdgb =_aecb .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_gdgb =_aecb .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_gdgb =_aecb .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_gdgb =_aecb .Accent6 ;case "\u0068\u006c\u0069n\u006b":_gdgb =_aecb .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_gdgb =_aecb .FolHlink ;default:return nil ;};return _gdgb ;};

// TextBox is a text box within a slide.
type TextBox struct{_eecb *_geb .CT_Shape };

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_bdc *Presentation )Close ()error {if _bdc .TmpPath !=""{return _bc .RemoveAll (_bdc .TmpPath );};return nil ;};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_bab *_geb .CT_Shape ;_cged *_geb .Sld ;};

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_becc TextBox )SetOffsetX (offX float64 ){_fbd :=_becc .getOff ();_dfeb :=_a .ToEMU (offX );_fbd .XAttr =_fg .ST_Coordinate {ST_CoordinateUnqualified :&_dfeb };};

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_fff *_geb .PresentationPr };

// NewSlideScreenSize returns slide screen size with default MS PowerPoint slide screen size 16x9.
func NewSlideScreenSize ()SlideScreenSize {return NewSlideScreenSizeWithValue (SlideScreenSize16x9 [0],SlideScreenSize16x9 [1]);};

// PlaceHolders returns all of the content place holders within a given slide.
func (_agae Slide )PlaceHolders ()[]PlaceHolder {_gadg :=[]PlaceHolder {};for _ ,_befd :=range _agae ._fea .CSld .SpTree .Choice {for _ ,_efeg :=range _befd .Sp {if _efeg .NvSpPr !=nil &&_efeg .NvSpPr .NvPr !=nil &&_efeg .NvSpPr .NvPr .Ph !=nil {_gadg =append (_gadg ,PlaceHolder {_efeg ,_agae ._fea });};};};return _gadg ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_dfec *Presentation )GetImageByRelID (relID string )(_ad .ImageRef ,bool ){for _ ,_abd :=range _dfec .Images {if _abd .RelID ()==relID {return _abd ,true ;};};return _ad .ImageRef {},false ;};

// ShowPr returns the ShowPr property.
func (_ggba PresentationProperties )ShowPr ()*_geb .CT_ShowProperties {return _ggba ._fff .ShowPr };

// AddImage adds an image textbox to a slide.
func (_fge Slide )AddImage (img _ad .ImageRef )Image {_cdad :=_geb .NewCT_GroupShapeChoice ();_fge ._fea .CSld .SpTree .Choice =append (_fge ._fea .CSld .SpTree .Choice ,_cdad );_eggc :=_geb .NewCT_Picture ();_cdad .Pic =append (_cdad .Pic ,_eggc );_eggc .NvPicPr .CNvPicPr =_fg .NewCT_NonVisualPictureProperties ();_eggc .NvPicPr .CNvPicPr .PicLocks =_fg .NewCT_PictureLocking ();_eggc .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_efa .Bool (true );_eggc .BlipFill =_fg .NewCT_BlipFillProperties ();_eggc .BlipFill .Blip =_fg .NewCT_Blip ();_efbf :=_fge .AddImageToRels (img );_eggc .BlipFill .Blip .EmbedAttr =_efa .String (_efbf );_eggc .BlipFill .Stretch =_fg .NewCT_StretchInfoProperties ();_eggc .BlipFill .Stretch .FillRect =_fg .NewCT_RelativeRect ();_eggc .SpPr =_fg .NewCT_ShapeProperties ();_eggc .SpPr .PrstGeom =_fg .NewCT_PresetGeometry2D ();_eggc .SpPr .PrstGeom .PrstAttr =_fg .ST_ShapeTypeRect ;_fbb :=Image {_eggc };_agc :=img .Size ();_fbb .Properties ().SetWidth (_a .Distance (_agc .X )*_a .Pixel72 );_fbb .Properties ().SetHeight (_a .Distance (_agc .Y )*_a .Pixel72 );_fbb .Properties ().SetPosition (0,0);return _fbb ;};

// RemoveSlide removes a slide from a presentation.
func (_aaf *Presentation )RemoveSlide (s Slide )error {_ffef :=false ;_gfg :=0;for _gbef ,_ccbd :=range _aaf ._bfg {if _ccbd ==s ._fea {if _aaf ._bdd .SldIdLst .SldId [_gbef ]!=s ._cabe {return _ag .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_aaf ._bfg [_gbef :],_aaf ._bfg [_gbef +1:]);_aaf ._bfg =_aaf ._bfg [0:len (_aaf ._bfg )-1];copy (_aaf ._dec [_gbef :],_aaf ._dec [_gbef +1:]);_aaf ._dec =_aaf ._dec [0:len (_aaf ._dec )-1];copy (_aaf ._bdd .SldIdLst .SldId [_gbef :],_aaf ._bdd .SldIdLst .SldId [_gbef +1:]);_aaf ._bdd .SldIdLst .SldId =_aaf ._bdd .SldIdLst .SldId [0:len (_aaf ._bdd .SldIdLst .SldId )-1];_ffef =true ;_gfg =_gbef ;};};if !_ffef {return _ag .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_ffg :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideType ,0);return _aaf .ContentTypes .RemoveOverrideByIndex (_ffg ,_gfg );};var _dbg =false ;

// ClrMru returns the ClrMru property.
func (_dcf PresentationProperties )ClrMru ()*_fg .CT_ColorMRU {return _dcf ._fff .ClrMru };

// ShowCommentsAttr returns the WebPr property.
func (_ffab ViewProperties )ShowCommentsAttr ()*bool {return _ffab ._fgb .ShowCommentsAttr };

// X returns the inner wrapped XML type.
func (_fffa SlideLayout )X ()*_geb .SldLayout {return _fffa ._gbc };

// Presentation returns a slide's presentation.
func (_abgd Slide )Presentation ()*Presentation {return _abgd ._dfbd };type rectangle struct{_gc int64 ;_bd int64 ;_gg int64 ;_edga int64 ;};

// Size returns slide size value as SlideScreenSize.
func (_cfdgd *SlideSize )Size ()SlideScreenSize {return SlideScreenSize {_cfdgd ._gebe .CxAttr ,_cfdgd ._gebe .CyAttr };};

// AddSlide adds a new slide to the presentation.
func (_fda *Presentation )AddSlide ()Slide {_dca :=_geb .NewCT_SlideIdListEntry ();_dca .IdAttr =_fda .nextSlideID ();_fda ._bdd .SldIdLst .SldId =append (_fda ._bdd .SldIdLst .SldId ,_dca );_gcg :=_geb .NewSld ();_gcg .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_gcg .CSld .SpTree .GrpSpPr .Xfrm =_fg .NewCT_GroupTransform2D ();_gcg .CSld .SpTree .GrpSpPr .Xfrm .Off =_fg .NewCT_Point2D ();_gcg .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_efa .Int64 (0);_gcg .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_efa .Int64 (0);_gcg .CSld .SpTree .GrpSpPr .Xfrm .Ext =_fg .NewCT_PositiveSize2D ();_gcg .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_a .Point );_gcg .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_a .Point );_gcg .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_gcg .CSld .SpTree .GrpSpPr .Xfrm .Off ;_gcg .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_gcg .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_fda ._bfg =append (_fda ._bfg ,_gcg );_bcfc :=_fda ._gbb .AddAutoRelationship (_efa .DocTypePresentation ,_efa .OfficeDocumentType ,len (_fda ._bfg ),_efa .SlideType );_dca .RIdAttr =_bcfc .ID ();_babb :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideType ,len (_fda ._bfg ));_fda .ContentTypes .AddOverride (_babb ,_efa .SlideContentType );_bbab :=_ad .NewRelationships ();_fda ._dec =append (_fda ._dec ,_bbab );_bbab .AddAutoRelationship (_efa .DocTypePresentation ,_efa .SlideType ,len (_fda ._gea ),_efa .SlideLayoutType );return Slide {_dca ,_gcg ,_fda ,nil };};

// X returns the inner wrapped XML type.
func (_dedc Slide )X ()*_geb .Sld {return _dedc ._fea };

// Remove removes a placeholder from a presentation.
func (_ddg PlaceHolder )Remove ()error {for _cec ,_fggg :=range _ddg ._cged .CSld .SpTree .Choice {for _ ,_bge :=range _fggg .Sp {if _bge ==_ddg ._bab {copy (_ddg ._cged .CSld .SpTree .Choice [_cec :],_ddg ._cged .CSld .SpTree .Choice [_cec +1:]);_ddg ._cged .CSld .SpTree .Choice =_ddg ._cged .CSld .SpTree .Choice [0:len (_ddg ._cged .CSld .SpTree .Choice )-1];return nil ;};};};return _ag .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};

// Properties returns the properties of the TextBox.
func (_defb TextBox )Properties ()_bb .ShapeProperties {if _defb ._eecb .SpPr ==nil {_defb ._eecb .SpPr =_fg .NewCT_ShapeProperties ();};return _bb .MakeShapeProperties (_defb ._eecb .SpPr );};

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_abg Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_cacb :=range _abg ._fea .CSld .SpTree .Choice {for _ ,_efg :=range _cacb .Sp {if _efg .NvSpPr !=nil &&_efg .NvSpPr .NvPr !=nil &&_efg .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_efg .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_efg .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_efg .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_efg ,_abg ._fea },nil ;};};};};return PlaceHolder {},_ag .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// NewSlideScreenSizeWithValue returns slide screen size with given width and height.
// Width and Height value is in EMU units, use our measurement.ToEMU to convert the -
// width and height value.
func NewSlideScreenSizeWithValue (width ,height int32 )SlideScreenSize {return SlideScreenSize {width ,height };};func (_dbefa *Slide )getSlideRels ()_ad .Relationships {_agb :=_dbefa ._dfbd ;for _dbf ,_efd :=range _agb .Slides (){if *_dbefa ._fea ==*_efd ._fea {return _agb ._dec [len (_agb ._dec )-_dbf -1];};};return _ad .Relationships {};};

// SaveToFile writes the Presentation out to a file.
func (_gefd *Presentation )SaveToFile (path string )error {return _gefd .saveToFile (path ,false )};

// Width returns slide screen size width in EMU units.
func (_bcef *SlideScreenSize )Width ()int32 {return _bcef [0]};var (SlideScreenSize16x9 =SlideScreenSize {12192000,6858000};SlideScreenSize4x3 =SlideScreenSize {9144000,6858000};SlideScreenSizeA4 =SlideScreenSize {9906000,6858000};);

// SlideSize returns presentation slide size.
func (_dcg *Presentation )SlideSize ()SlideSize {if _dcg ._bdd .SldSz ==nil {_dcg ._bdd .SldSz =_geb .NewCT_SlideSize ();};return SlideSize {_dcg ._bdd .SldSz ,_dcg };};

// SlideScreenSize represents the slide screen size as a 2 element array
// representing the width and height in EMU units.
type SlideScreenSize [2]int32 ;func _ggc (_fd *Presentation ,_bg []*_geb .CT_GroupShapeChoice ,_ea []rectangle ,_caba []*TextItem )[]*TextItem {for _ ,_gdf :=range _bg {_dgb :=append ([]rectangle {},_ea ...);for _ ,_eag :=range _gdf .Sp {_caba =append (_caba ,_aa (_fd ,_eag ,nil ,nil ,_eag .SpPr .Xfrm ,0,_ea ,_eag .TxBody .P )...);};for _ ,_cc :=range _gdf .GraphicFrame {if _cc !=nil &&_cc .Graphic !=nil &&_cc .Graphic .GraphicData !=nil {_fdd :=_cc .Xfrm ;for _ ,_gef :=range _cc .Graphic .GraphicData .Any {if _fgg ,_fc :=_gef .(*_fg .Tbl );_fc {_cce :=&_fgg .CT_Table ;_ebb :=0;for _ab ,_age :=range _fgg .Tr {for _ecb ,_ga :=range _age .Tc {_eca :=&TableInfo {Table :_cce ,Row :_age ,Cell :_ga ,RowIndex :_ab ,ColIndex :_ecb };_caba =append (_caba ,_aa (_fd ,nil ,_cc ,_eca ,_fdd ,_ebb ,_ea ,_ga .TxBody .P )...);_ebb ++;};};};};};};for _ ,_dcd :=range _gdf .GrpSp {if _dcd .GrpSpPr !=nil {_gec :=_dcd .GrpSpPr .Xfrm ;var _ecf ,_ccd int64 ;if _gec .Off !=nil {_cg ,_dd :=_gec .Off .XAttr .ST_CoordinateUnqualified ,_gec .Off .YAttr .ST_CoordinateUnqualified ;if _cg !=nil &&_dd !=nil {if _efb :=_gec .Ext ;_efb !=nil {_ecf ,_ccd =_efb .CxAttr ,_efb .CyAttr ;};_dgb =append (_dgb ,rectangle {_gc :*_cg ,_bd :*_dd ,_gg :*_cg +_ecf ,_edga :*_dd +_ccd });};};};_caba =_ggc (_fd ,_dcd .Choice ,_dgb ,_caba );};};return _caba ;};func (_fcc *Presentation )nextSlideID ()uint32 {_dag :=uint32 (256);for _ ,_gfb :=range _fcc ._bdd .SldIdLst .SldId {if _gfb .IdAttr >=_dag {_dag =_gfb .IdAttr +1;};};return _dag ;};func (_ee *chart )RelId ()string {return _ee ._ebd };

// X returns the inner wrapped XML type.
func (_dgab SlideMaster )X ()*_geb .SldMaster {return _dgab ._affc };

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_cggg *Presentation )GetTableStyleById (id string )*_fg .CT_TableStyle {_aeg :=_cggg ._cf .TblStyle ();for _ ,_bfb :=range _aeg {if _bfb .StyleIdAttr ==id {return _bfb ;};};return nil ;};

// ExtractText returns text from a slide as a SlideText object.
func (_adc *Slide )ExtractText ()*SlideText {_ecg :=_ggc (_adc ._dfbd ,_adc ._fea .CSld .SpTree .Choice ,[]rectangle {},[]*TextItem {});_bbe .Sort (sort2d (_ecg ));return &SlideText {Items :_ecg };};

// X returns the inner wrapped XML type.
func (_dafe *SlideSize )X ()*_geb .CT_SlideSize {return _dafe ._gebe };type chart struct{_gee *_ef .ChartSpace ;_ebd string ;_ece string ;};func (_fa *chart )X ()*_ef .ChartSpace {return _fa ._gee };

// X returns the inner wrapped XML type.
func (_gfbe ViewProperties )X ()*_geb .ViewPr {return _gfbe ._fgb };

// SlideLayouts returns the slide layouts defined in the presentation.
func (_cae *Presentation )SlideLayouts ()[]SlideLayout {_geea :=[]SlideLayout {};for _ ,_becd :=range _cae ._gea {_geea =append (_geea ,SlideLayout {_becd });};return _geea ;};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_fff :_geb .NewPresentationPr ()};};

// SetHeight sets height of slide screen size with given value in EMU units.
func (_ecbc *SlideScreenSize )SetHeight (val int32 ){_ecbc [1]=val };

// X returns TextBox's underlying *pml.CT_Shape.
func (_fdcd TextBox )X ()*_geb .CT_Shape {return _fdcd ._eecb };func (_gfef TextBox )getOff ()*_fg .CT_Point2D {if _gfef ._eecb .SpPr ==nil {_gfef ._eecb .SpPr =_fg .NewCT_ShapeProperties ();};if _gfef ._eecb .SpPr .Xfrm ==nil {_gfef ._eecb .SpPr .Xfrm =_fg .NewCT_Transform2D ();};if _gfef ._eecb .SpPr .Xfrm .Off ==nil {_gfef ._eecb .SpPr .Xfrm .Off =_fg .NewCT_Point2D ();};return _gfef ._eecb .SpPr .Xfrm .Off ;};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};func _geaf (_fgge []*_geb .CT_GroupShapeChoice )[]*_geb .CT_GroupShapeChoice {var _cedf []*_geb .CT_GroupShapeChoice ;for _ ,_agaa :=range _fgge {if len (_agaa .Pic )==0{_cedf =append (_cedf ,_agaa );};};return _cedf ;};func (_cad *Presentation )saveToFile (_bffa string ,_faa bool )error {_caa ,_fad :=_edg .Create (_bffa );if _fad !=nil {return _fad ;};defer _caa .Close ();return _cad .save (_caa ,_faa );};func (_bcb *chart )Target ()string {return _bcb ._ece };

// X returns the inner wrapped XML type.
func (_ede *Presentation )X ()*_geb .Presentation {return _ede ._bdd };

// SetSize sets the slide size, take argument of SlideScreenSize.
func (_ecgb *SlideSize )SetSize (sz SlideScreenSize ){_ecgb ._gebe .CxAttr =sz [0];_ecgb ._gebe .CyAttr =sz [1];};

// Text returns text from a presentation as one string separated with line breaks.
func (_ac *PresentationText )Text ()string {_ade :=_add .NewBuffer ([]byte {});for _ ,_aec :=range _ac .Slides {_ade .WriteString (_aec .Text ());};return _ade .String ();};type sort2d []*TextItem ;

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_dged *Presentation ;_afff _ad .Relationships ;_affc *_geb .SldMaster ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// slide.
func (_fbea *Slide )GetImageByRelID (relID string )(_ad .ImageRef ,bool ){_eef :=_fbea .getSlideRels ();if (_eef ==_ad .Relationships {}){return _ad .ImageRef {},false ;};var _ddfe string ;for _ ,_ccg :=range _eef .X ().Relationship {if _ccg .IdAttr ==relID {_ddfe =_ccg .TargetAttr ;break ;};};for _ ,_adf :=range _fbea ._dfbd .Images {if _adf .Target ()==_ddfe {return _adf ,true ;};};return _ad .ImageRef {},false ;};

// SlideViewPr returns the SlideViewPr property.
func (_eafbb ViewProperties )SlideViewPr ()*_geb .CT_SlideViewProperties {return _eafbb ._fgb .SlideViewPr ;};

// X returns the inner wrapped XML type.
func (_gfa PlaceHolder )X ()*_geb .CT_Shape {return _gfa ._bab };

// Height returns slide screen size height in EMU units.
func (_cead *SlideScreenSize )Height ()int32 {return _cead [1]};

// GetSlideLayout returns a slide layout related to the slide.
func (_faf *Slide )GetSlideLayout ()*_geb .SldLayout {for _ceded ,_eabfg :=range _faf ._dfbd .Slides (){if *_faf ==_eabfg {return _faf ._dfbd ._gea [len (_faf ._dfbd .Slides ())-_ceded -1];};};return nil ;};

// ExtLst returns the ExtLst property.
func (_ebg PresentationProperties )ExtLst ()*_geb .CT_ExtensionList {return _ebg ._fff .ExtLst };

// Type returns the placeholder type
func (_daf PlaceHolder )Type ()_geb .ST_PlaceholderType {return _daf ._bab .NvSpPr .NvPr .Ph .TypeAttr };

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_fbg *Presentation )GetColorBySchemeColor (schClr _fg .ST_SchemeColorVal )*_fg .CT_Color {if len (_fbg ._dee )==0||len (_fbg ._bbef )==0{return nil ;};var _ecda _fg .ST_ColorSchemeIndex ;_efae :=_fbg ._dee [0];_dgfb :=_efae .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_ecda =_dgfb .Bg1Attr ;case "\u0062\u0067\u0032":_ecda =_dgfb .Bg2Attr ;case "\u0074\u0078\u0031":_ecda =_dgfb .Tx1Attr ;case "\u0074\u0078\u0032":_ecda =_dgfb .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ecda =_dgfb .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ecda =_dgfb .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ecda =_dgfb .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ecda =_dgfb .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ecda =_dgfb .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ecda =_dgfb .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_ecda =_dgfb .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ecda =_dgfb .FolHlinkAttr ;case "\u0064\u006b\u0031":_ecda =_fg .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_ecda =_fg .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_ecda =_fg .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_ecda =_fg .ST_ColorSchemeIndexLt2 ;default:_ecda =_fg .ST_ColorSchemeIndexUnset ;};_faec :=_fbg ._bbef [0];_ebdd :=_faec .ThemeElements ;if _ebdd ==nil {return nil ;};var _bfdd *_fg .CT_Color ;_bage :=_ebdd .ClrScheme ;switch _ecda .String (){case "\u0064\u006b\u0031":_bfdd =_bage .Dk1 ;case "\u0064\u006b\u0032":_bfdd =_bage .Dk2 ;case "\u006c\u0074\u0031":_bfdd =_bage .Lt1 ;case "\u006c\u0074\u0032":_bfdd =_bage .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_bfdd =_bage .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_bfdd =_bage .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_bfdd =_bage .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_bfdd =_bage .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_bfdd =_bage .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_bfdd =_bage .Accent6 ;case "\u0068\u006c\u0069n\u006b":_bfdd =_bage .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_bfdd =_bage .FolHlink ;default:return nil ;};return _bfdd ;};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_gcdf *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_ccdf ,_cdcd :=_gcdf .AddSlideWithLayout (l );for _ ,_eeg :=range _ccdf .PlaceHolders (){_eeg .Clear ();switch _eeg .Type (){case _geb .ST_PlaceholderTypeFtr ,_geb .ST_PlaceholderTypeDt ,_geb .ST_PlaceholderTypeSldNum :_eeg .Remove ();};};return _ccdf ,_cdcd ;};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_ecc ,_bbadc :=_edg .Open (filename );if _bbadc !=nil {return nil ,_bcc .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_bbadc );};defer _ecc .Close ();_fgf ,_bbadc :=_edg .Stat (filename );if _bbadc !=nil {return nil ,_bcc .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_bbadc );};_ =_fgf ;return Read (_ecc ,_fgf .Size ());};func (_bag *Presentation )Validate ()error {if _egaa :=_bag ._bdd .Validate ();_egaa !=nil {return _egaa ;};for _cfdg ,_cgde :=range _bag .Slides (){if _bbg :=_cgde .ValidateWithPath (_bcc .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_cfdg ));_bbg !=nil {return _bbg ;};};for _fcdg ,_dbea :=range _bag ._dee {if _ccce :=_dbea .ValidateWithPath (_bcc .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_fcdg ));_ccce !=nil {return _ccce ;};};for _adg ,_gbeg :=range _bag ._gea {if _bcgc :=_gbeg .ValidateWithPath (_bcc .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_adg ));_bcgc !=nil {return _bcgc ;};};return nil ;};

// New initializes and reurns a new presentation
func New ()*Presentation {_cgg :=_gbe ();_cgg .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_cgg .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_cgg .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_cgg .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_cgg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_cgg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_cgg .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_cgg ._bdd .SldMasterIdLst =_geb .NewCT_SlideMasterIdList ();_fcd :=_geb .NewSldMaster ();_fcd .ClrMap .Bg1Attr =_fg .ST_ColorSchemeIndexLt1 ;_fcd .ClrMap .Bg2Attr =_fg .ST_ColorSchemeIndexLt2 ;_fcd .ClrMap .Tx1Attr =_fg .ST_ColorSchemeIndexDk1 ;_fcd .ClrMap .Tx2Attr =_fg .ST_ColorSchemeIndexDk2 ;_fcd .ClrMap .Accent1Attr =_fg .ST_ColorSchemeIndexAccent1 ;_fcd .ClrMap .Accent2Attr =_fg .ST_ColorSchemeIndexAccent2 ;_fcd .ClrMap .Accent3Attr =_fg .ST_ColorSchemeIndexAccent3 ;_fcd .ClrMap .Accent4Attr =_fg .ST_ColorSchemeIndexAccent4 ;_fcd .ClrMap .Accent5Attr =_fg .ST_ColorSchemeIndexAccent5 ;_fcd .ClrMap .Accent6Attr =_fg .ST_ColorSchemeIndexAccent6 ;_fcd .ClrMap .HlinkAttr =_fg .ST_ColorSchemeIndexHlink ;_fcd .ClrMap .FolHlinkAttr =_fg .ST_ColorSchemeIndexFolHlink ;_cgg ._dee =append (_cgg ._dee ,_fcd );_faee :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideMasterType ,1);_cgg .ContentTypes .AddOverride (_faee ,_efa .SlideMasterContentType );_cbg :=_cgg ._gbb .AddAutoRelationship (_efa .DocTypePresentation ,_efa .OfficeDocumentType ,1,_efa .SlideMasterType );_bbd :=_geb .NewCT_SlideMasterIdListEntry ();_bbd .IdAttr =_efa .Uint32 (2147483648);_bbd .RIdAttr =_cbg .ID ();_cgg ._bdd .SldMasterIdLst .SldMasterId =append (_cgg ._bdd .SldMasterIdLst .SldMasterId ,_bbd );_febe :=_ad .NewRelationships ();_cgg ._adce =append (_cgg ._adce ,_febe );_bga :=_geb .NewSldLayout ();_fcb :=_febe .AddAutoRelationship (_efa .DocTypePresentation ,_efa .SlideMasterType ,1,_efa .SlideLayoutType );_ffe :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideLayoutType ,1);_cgg .ContentTypes .AddOverride (_ffe ,_efa .SlideLayoutContentType );_febe .AddAutoRelationship (_efa .DocTypePresentation ,_efa .SlideMasterType ,1,_efa .ThemeType );_cgg ._gea =append (_cgg ._gea ,_bga );_fcd .SldLayoutIdLst =_geb .NewCT_SlideLayoutIdList ();_cede :=_geb .NewCT_SlideLayoutIdListEntry ();_cede .IdAttr =_efa .Uint32 (2147483649);_cede .RIdAttr =_fcb .ID ();_fcd .SldLayoutIdLst .SldLayoutId =append (_fcd .SldLayoutIdLst .SldLayoutId ,_cede );_cgd :=_ad .NewRelationships ();_cgg ._ced =append (_cgg ._ced ,_cgd );_cgd .AddAutoRelationship (_efa .DocTypePresentation ,_efa .SlideType ,1,_efa .SlideMasterType );_cgg ._bdd .NotesSz .CxAttr =6858000;_cgg ._bdd .NotesSz .CyAttr =9144000;_cdaf :=_fg .NewTheme ();_cdaf .NameAttr =_efa .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_cdaf .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_cdaf .ThemeElements .ClrScheme .Dk1 .SysClr =_fg .NewCT_SystemColor ();_cdaf .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_efa .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_cdaf .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_fg .ST_SystemColorValWindowText ;_cdaf .ThemeElements .ClrScheme .Lt1 .SysClr =_fg .NewCT_SystemColor ();_cdaf .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_efa .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_cdaf .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_fg .ST_SystemColorValWindow ;_cdaf .ThemeElements .ClrScheme .Dk2 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_cdaf .ThemeElements .ClrScheme .Lt2 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_cdaf .ThemeElements .ClrScheme .Accent1 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_cdaf .ThemeElements .ClrScheme .Accent2 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_cdaf .ThemeElements .ClrScheme .Accent3 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_cdaf .ThemeElements .ClrScheme .Accent4 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_cdaf .ThemeElements .ClrScheme .Accent5 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_cdaf .ThemeElements .ClrScheme .Accent6 .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_cdaf .ThemeElements .ClrScheme .Hlink .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_cdaf .ThemeElements .ClrScheme .FolHlink .SrgbClr =_fg .NewCT_SRgbColor ();_cdaf .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_cdaf .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_cdaf .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_cdaf .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_cdaf .ThemeElements .FmtScheme .NameAttr =_efa .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_fcg :=_fg .NewEG_FillProperties ();_cdaf .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_cdaf .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_fcg );_fcg .SolidFill =&_fg .CT_SolidColorFillProperties {SchemeClr :&_fg .CT_SchemeColor {ValAttr :_fg .ST_SchemeColorValPhClr }};_fcg =_fg .NewEG_FillProperties ();_cdaf .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_cdaf .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_fcg );_cdaf .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_cdaf .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_fcg );_fcg .GradFill =&_fg .CT_GradientFillProperties {RotWithShapeAttr :_efa .Bool (true ),GsLst :&_fg .CT_GradientStopList {},Lin :&_fg .CT_LinearShadeProperties {}};_fcg .GradFill .Lin .AngAttr =_efa .Int32 (5400000);_fcg .GradFill .Lin .ScaledAttr =_efa .Bool (false );_fefc :=_fg .NewCT_GradientStop ();_fefc .PosAttr .ST_PositiveFixedPercentageDecimal =_efa .Int32 (0);_fefc .SchemeClr =&_fg .CT_SchemeColor {ValAttr :_fg .ST_SchemeColorValPhClr };_fcg .GradFill .GsLst .Gs =append (_fcg .GradFill .GsLst .Gs ,_fefc );_fefc =_fg .NewCT_GradientStop ();_fefc .PosAttr .ST_PositiveFixedPercentageDecimal =_efa .Int32 (50000);_fefc .SchemeClr =&_fg .CT_SchemeColor {ValAttr :_fg .ST_SchemeColorValPhClr };_fcg .GradFill .GsLst .Gs =append (_fcg .GradFill .GsLst .Gs ,_fefc );_cdaf .ThemeElements .FmtScheme .LnStyleLst =_fg .NewCT_LineStyleList ();for _fag :=0;_fag < 3;_fag ++{_bace :=_fg .NewCT_LineProperties ();_bace .WAttr =_efa .Int32 (int32 (6350*(_fag +1)));_bace .CapAttr =_fg .ST_LineCapFlat ;_bace .CmpdAttr =_fg .ST_CompoundLineSng ;_bace .AlgnAttr =_fg .ST_PenAlignmentCtr ;_cdaf .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_cdaf .ThemeElements .FmtScheme .LnStyleLst .Ln ,_bace );};_cdaf .ThemeElements .FmtScheme .EffectStyleLst =_fg .NewCT_EffectStyleList ();for _gdb :=0;_gdb < 3;_gdb ++{_abb :=_fg .NewCT_EffectStyleItem ();_abb .EffectLst =_fg .NewCT_EffectList ();_cdaf .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_cdaf .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_abb );};_cfd :=_fg .NewEG_FillProperties ();_cfd .SolidFill =&_fg .CT_SolidColorFillProperties {SchemeClr :&_fg .CT_SchemeColor {ValAttr :_fg .ST_SchemeColorValPhClr }};_cdaf .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_cdaf .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_cfd );_cdaf .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_cdaf .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_cfd );_cdaf .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_cdaf .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fcg );_cgg ._bbef =append (_cgg ._bbef ,_cdaf );_ebbfg :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .ThemeType ,1);_cgg .ContentTypes .AddOverride (_ebbfg ,_efa .ThemeContentType );_cgg ._gbb .AddAutoRelationship (_efa .DocTypePresentation ,_efa .OfficeDocumentType ,1,_efa .ThemeType );_acd :=_ad .NewRelationships ();_cgg ._dcb =append (_cgg ._dcb ,_acd );return _cgg ;};

// LastViewAttr returns the LastViewAttr property.
func (_fce ViewProperties )LastViewAttr ()_geb .ST_ViewType {return _fce ._fgb .LastViewAttr };

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_aga *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_afa :=_geb .NewCT_SlideIdListEntry ();_afa .IdAttr =256;for _ ,_ggg :=range _aga ._bdd .SldIdLst .SldId {if _ggg .IdAttr >=_afa .IdAttr {_afa .IdAttr =_ggg .IdAttr +1;};};_aga ._bdd .SldIdLst .SldId =append (_aga ._bdd .SldIdLst .SldId ,_afa );_gbed :=_geb .NewSld ();_dge :=_add .Buffer {};_fbf :=_eb .NewEncoder (&_dge );_def :=_eb .StartElement {Name :_eb .Name {Local :"\u0073\u006c\u0069d\u0065"}};_def .Attr =append (_def .Attr ,_eb .Attr {Name :_eb .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_def .Attr =append (_def .Attr ,_eb .Attr {Name :_eb .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_def .Attr =append (_def .Attr ,_eb .Attr {Name :_eb .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_def .Attr =append (_def .Attr ,_eb .Attr {Name :_eb .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_def .Attr =append (_def .Attr ,_eb .Attr {Name :_eb .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_def .Attr =append (_def .Attr ,_eb .Attr {Name :_eb .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _aeb :=l ._gbc .CSld .MarshalXML (_fbf ,_def );_aeb !=nil {return Slide {},_aeb ;};_fbf .Flush ();_ccb :=_eb .NewDecoder (&_dge );_gbed .CSld =_geb .NewCT_CommonSlideData ();if _dgfc :=_ccb .Decode (_gbed .CSld );_dgfc !=nil {return Slide {},_dgfc ;};_gbed .CSld .NameAttr =nil ;_gbed .CSld .SpTree .Choice =_geaf (_gbed .CSld .SpTree .Choice );_aga ._bfg =append (_aga ._bfg ,_gbed );_gba :=_aga ._gbb .AddAutoRelationship (_efa .DocTypePresentation ,_efa .OfficeDocumentType ,len (_aga ._bfg ),_efa .SlideType );_afa .RIdAttr =_gba .ID ();_gab :=_efa .AbsoluteFilename (_efa .DocTypePresentation ,_efa .SlideType ,len (_aga ._bfg ));_aga .ContentTypes .AddOverride (_gab ,_efa .SlideContentType );_bdgc :=_ad .NewRelationships ();_aga ._dec =append (_aga ._dec ,_bdgc );_cdc :=len (_aga ._dec )-1;for _bee ,_gcd :=range _aga ._gea {if _gcd ==l .X (){_eda :=_aga ._ced [_bee ];for _ ,_ebbfga :=range _eda .X ().Relationship {if _ebbfga .TypeAttr !=_efa .SlideMasterType {_aga ._dec [_cdc ].X ().Relationship =append (_aga ._dec [_cdc ].X ().Relationship ,_ebbfga );};};_bdgc .AddAutoRelationship (_efa .DocTypePresentation ,_efa .SlideType ,_bee +1,_efa .SlideLayoutType );};};_gdgd :=Slide {_afa ,_gbed ,_aga ,nil };return _gdgd ,nil ;};

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};const _dada float64 =500000;

// PrnPr returns the PrnPr property.
func (_eafb PresentationProperties )PrnPr ()*_geb .CT_PrintProperties {return _eafb ._fff .PrnPr };

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_ecd PlaceHolder )ClearAll (){_ecd ._bab .SpPr =_fg .NewCT_ShapeProperties ();_ecd ._bab .TxBody =_fg .NewCT_TextBody ();_ecd ._bab .TxBody .LstStyle =_fg .NewCT_TextListStyle ();};

// GridSpacing returns the GridSpacing property.
func (_aaec ViewProperties )GridSpacing ()*_fg .CT_PositiveSize2D {return _aaec ._fgb .GridSpacing };

// GetChartSpaceByRelId returns a *crt.ChartSpace with the associated relation ID in the
// slide.
func (_aee *Slide )GetChartSpaceByRelId (relId string )*_ef .ChartSpace {_efc :=_aee .getSlideRels ();if (_efc ==_ad .Relationships {}){return nil ;};_eddf :=_efc .GetTargetByRelId (relId );for _ ,_gga :=range _aee ._dfbd ._abe {if _eddf ==_gga .Target (){return _gga ._gee ;};};return nil ;};

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_beb PlaceHolder )SetText (text string ){_beb .Clear ();_ebc :=_fg .NewEG_TextRun ();_ebc .R =_fg .NewCT_RegularTextRun ();_ebc .R .T =text ;if len (_beb ._bab .TxBody .P )==0{_beb ._bab .TxBody .P =append (_beb ._bab .TxBody .P ,_fg .NewCT_TextParagraph ());};_beb ._bab .TxBody .P [0].EG_TextRun =nil ;_beb ._bab .TxBody .P [0].EG_TextRun =append (_beb ._bab .TxBody .P [0].EG_TextRun ,_ebc );};

// SlideSize represents a slide size of a presentation.
type SlideSize struct{_gebe *_geb .CT_SlideSize ;_cga *Presentation ;};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_fg .CT_Table ;Row *_fg .CT_TableRow ;Cell *_fg .CT_TableCell ;RowIndex int ;ColIndex int ;};func _gbe ()*Presentation {_ebbg :=&Presentation {_bdd :_geb .NewPresentation ()};_ebbg ._bdd .SldIdLst =_geb .NewCT_SlideIdList ();_ebbg ._bdd .ConformanceAttr =_g .ST_ConformanceClassTransitional ;_ebbg .AppProperties =_ad .NewAppProperties ();_ebbg .CoreProperties =_ad .NewCoreProperties ();_ebbg ._cf =_ad .NewTableStyles ();_ebbg .ContentTypes =_ad .NewContentTypes ();_ebbg .Rels =_ad .NewRelationships ();_ebbg ._gbb =_ad .NewRelationships ();_ebbg ._bfd =NewPresentationProperties ();_ebbg ._bgb =NewViewProperties ();_ebbg ._cca =map[string ]string {};return _ebbg ;};

// SetTextAnchor controls the text anchoring
func (_bbabd TextBox )SetTextAnchor (a _fg .ST_TextAnchoringType ){_bbabd ._eecb .TxBody .BodyPr =_fg .NewCT_TextBodyProperties ();_bbabd ._eecb .TxBody .BodyPr .AnchorAttr =a ;};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_eege *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_ggge :=range _eege ._gea {if _ggge .CSld .NameAttr !=nil &&name ==*_ggge .CSld .NameAttr {return SlideLayout {_ggge },nil ;};};return SlideLayout {},_ag .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// Themes returns an array of presentation themes.
func (_bege *Presentation )Themes ()[]*_fg .Theme {return _bege ._bbef };