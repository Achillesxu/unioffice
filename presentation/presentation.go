//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_gf "archive/zip";_d "bytes";_e "encoding/xml";_cd "errors";_cg "fmt";_eee "github.com/unidoc/unioffice";_gae "github.com/unidoc/unioffice/common";_fb "github.com/unidoc/unioffice/common/tempstorage";_eb "github.com/unidoc/unioffice/drawing";_ee "github.com/unidoc/unioffice/internal/license";_gaa "github.com/unidoc/unioffice/measurement";_fe "github.com/unidoc/unioffice/schema/soo/dml";_b "github.com/unidoc/unioffice/schema/soo/dml/chart";_fd "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_gd "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_bb "github.com/unidoc/unioffice/schema/soo/pml";_gg "github.com/unidoc/unioffice/zippkg";_gab "image";_ga "image/jpeg";_dg "io";_db "log";_gfe "os";_f "path";_aa "sort";_c "strconv";_g "strings";);

// TextBox is a text box within a slide.
type TextBox struct{_cea *_bb .CT_Shape };

// X returns the inner wrapped XML type.
func (_egf PresentationProperties )X ()*_bb .PresentationPr {return _egf ._ccf };

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_acc PlaceHolder )Clear (){_acc .ClearAll ();_ggag :=_fe .NewCT_TextParagraph ();_acc ._agc .TxBody .P =[]*_fe .CT_TextParagraph {_ggag };_ggag .EndParaRPr =_fe .NewCT_TextCharacterProperties ();_ggag .EndParaRPr .LangAttr =_eee .String ("\u0065\u006e\u002dU\u0053");};

// GetTextBoxes returns a list of all text boxes from a slide.
func (_bfabe Slide )GetTextBoxes ()[]*TextBox {_eeeg :=[]*TextBox {};_cac :=_bfabe ._fead .CSld .SpTree .Choice ;for _ ,_gec :=range _cac {for _ ,_gdeb :=range _gec .Sp {if _gdeb .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_gdeb .NvSpPr .CNvSpPr .TxBoxAttr {_eeeg =append (_eeeg ,&TextBox {_gdeb });};};};return _eeeg ;};

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_dgcc TextBox )SetOffsetX (offX float64 ){_bfb :=_dgcc .getOff ();_dgac :=_gaa .ToEMU (offX );_bfb .XAttr =_fe .ST_Coordinate {ST_CoordinateUnqualified :&_dgac };};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_ceeab *Presentation )AddImage (i _gae .Image )(_gae .ImageRef ,error ){_bebe :=_gae .MakeImageRef (i ,&_ceeab .DocBase ,_ceeab ._ecef );if i .Data ==nil &&i .Path ==""{return _bebe ,_cd .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _bebe ,_cd .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _bebe ,_cd .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_eea :=_fb .Add (i .Path );if _eea !=nil {return _bebe ,_eea ;};};_ceeab .Images =append (_ceeab .Images ,_bebe );_ceeab .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ceeab .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ceeab .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ceeab .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_ceeab .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _bebe ,nil ;};

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_daca *Presentation )GetTableStyleById (id string )*_fe .CT_TableStyle {_gfbe :=_daca ._acfd .TblStyle ();for _ ,_eda :=range _gfbe {if _eda .StyleIdAttr ==id {return _eda ;};};return nil ;};

// PrnPr returns the PrnPr property.
func (_fcg PresentationProperties )PrnPr ()*_bb .CT_PrintProperties {return _fcg ._ccf .PrnPr };

// X returns the inner wrapped XML type.
func (_baef ViewProperties )X ()*_bb .ViewPr {return _baef ._gdf };

// SaveToFile writes the Presentation out to a file.
func (_bdeg *Presentation )SaveToFile (path string )error {return _bdeg .saveToFile (path ,false )};

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_bbb PlaceHolder )ClearAll (){_bbb ._agc .SpPr =_fe .NewCT_ShapeProperties ();_bbb ._agc .TxBody =_fe .NewCT_TextBody ();_bbb ._agc .TxBody .LstStyle =_fe .NewCT_TextListStyle ();};

// X returns the inner wrapped XML type.
func (_gdg SlideLayout )X ()*_bb .SldLayout {return _gdg ._eacg };

// LastViewAttr returns the LastViewAttr property.
func (_fff ViewProperties )LastViewAttr ()_bb .ST_ViewType {return _fff ._gdf .LastViewAttr };

// Slide represents a slide of a presentation.
type Slide struct{_fge *_bb .CT_SlideIdListEntry ;_fead *_bb .Sld ;_dce *Presentation ;};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_ccf :_bb .NewPresentationPr ()};};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_eac Slide )ValidateWithPath (path string )error {if _fabfe :=_eac ._fead .ValidateWithPath (path );_fabfe !=nil {return _fabfe ;};for _ ,_aacc :=range _eac ._fead .CSld .SpTree .Choice {for _ ,_ebe :=range _aacc .Sp {if _ebe .TxBody !=nil {if len (_ebe .TxBody .P )==0{return _cd .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// OutlineViewPr returns the OutlineViewPr property.
func (_ggga ViewProperties )OutlineViewPr ()*_bb .CT_OutlineViewProperties {return _ggga ._gdf .OutlineViewPr ;};

// ExtractText returns text from a slide as a SlideText object.
func (_dd *Slide )ExtractText ()*SlideText {_fbe :=_dd ._dce ;_cdb :=[]*TextItem {};for _ ,_gc :=range _dd ._fead .CSld .SpTree .Choice {for _ ,_bf :=range _gc .Sp {_cdb =append (_cdb ,_ecf (_fbe ,_bf ,nil ,nil ,_bf .SpPr .Xfrm ,0,_bf .TxBody .P )...);};for _ ,_dgc :=range _gc .GraphicFrame {if _dgc !=nil &&_dgc .Graphic !=nil &&_dgc .Graphic .GraphicData !=nil {_fae :=_dgc .Xfrm ;for _ ,_fea :=range _dgc .Graphic .GraphicData .Any {if _ad ,_gda :=_fea .(*_fe .Tbl );_gda {_bg :=&_ad .CT_Table ;_af :=0;for _bfd ,_fbd :=range _ad .Tr {for _ea ,_gdc :=range _fbd .Tc {_fad :=&TableInfo {Table :_bg ,Row :_fbd ,Cell :_gdc ,RowIndex :_bfd ,ColIndex :_ea };_cdb =append (_cdb ,_ecf (_fbe ,nil ,_dgc ,_fad ,_fae ,_af ,_gdc .TxBody .P )...);_af ++;};};};};};};};_aa .Sort (sort2d (_cdb ));return &SlideText {Items :_cdb };};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_eca *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_eedc :=_bb .NewCT_SlideIdListEntry ();_eedc .IdAttr =256;for _ ,_bee :=range _eca ._dcg .SldIdLst .SldId {if _bee .IdAttr >=_eedc .IdAttr {_eedc .IdAttr =_bee .IdAttr +1;};};_eca ._dcg .SldIdLst .SldId =append (_eca ._dcg .SldIdLst .SldId ,_eedc );_cdc :=_bb .NewSld ();_agbd :=_d .Buffer {};_gcgf :=_e .NewEncoder (&_agbd );_fce :=_e .StartElement {Name :_e .Name {Local :"\u0073\u006c\u0069d\u0065"}};_fce .Attr =append (_fce .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_fce .Attr =append (_fce .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_fce .Attr =append (_fce .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_fce .Attr =append (_fce .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_fce .Attr =append (_fce .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_fce .Attr =append (_fce .Attr ,_e .Attr {Name :_e .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _cgf :=l ._eacg .CSld .MarshalXML (_gcgf ,_fce );_cgf !=nil {return Slide {},_cgf ;};_gcgf .Flush ();_gaf :=_e .NewDecoder (&_agbd );_cdc .CSld =_bb .NewCT_CommonSlideData ();if _ccb :=_gaf .Decode (_cdc .CSld );_ccb !=nil {return Slide {},_ccb ;};_cdc .CSld .NameAttr =nil ;_cdc .CSld .SpTree .Choice =_ecfa (_cdc .CSld .SpTree .Choice );_eca ._fag =append (_eca ._fag ,_cdc );_fadc :=_eca ._ecef .AddAutoRelationship (_eee .DocTypePresentation ,_eee .OfficeDocumentType ,len (_eca ._fag ),_eee .SlideType );_eedc .RIdAttr =_fadc .ID ();_adg :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideType ,len (_eca ._fag ));_eca .ContentTypes .AddOverride (_adg ,_eee .SlideContentType );_ddf :=_gae .NewRelationships ();_eca ._gaae =append (_eca ._gaae ,_ddf );_edf :=len (_eca ._gaae )-1;for _ggd ,_ecd :=range _eca ._bad {if _ecd ==l .X (){_bacf :=_eca ._bac [_ggd ];for _ ,_fcf :=range _bacf .X ().Relationship {if _fcf .TypeAttr !=_eee .SlideMasterType {_eca ._gaae [_edf ].X ().Relationship =append (_eca ._gaae [_edf ].X ().Relationship ,_fcf );};};_ddf .AddAutoRelationship (_eee .DocTypePresentation ,_eee .SlideType ,_ggd +1,_eee .SlideLayoutType );};};_ggdb :=Slide {_eedc ,_cdc ,_eca };return _ggdb ,nil ;};

// ExtLst returns the ExtLst property.
func (_gdcb PresentationProperties )ExtLst ()*_bb .CT_ExtensionList {return _gdcb ._ccf .ExtLst };

// Remove removes a placeholder from a presentation.
func (_gcc PlaceHolder )Remove ()error {for _cef ,_gaaf :=range _gcc ._eaa .CSld .SpTree .Choice {for _ ,_dee :=range _gaaf .Sp {if _dee ==_gcc ._agc {copy (_gcc ._eaa .CSld .SpTree .Choice [_cef :],_gcc ._eaa .CSld .SpTree .Choice [_cef +1:]);_gcc ._eaa .CSld .SpTree .Choice =_gcc ._eaa .CSld .SpTree .Choice [0:len (_gcc ._eaa .CSld .SpTree .Choice )-1];return nil ;};};};return _cd .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};

// ShowCommentsAttr returns the WebPr property.
func (_gcf ViewProperties )ShowCommentsAttr ()*bool {return _gcf ._gdf .ShowCommentsAttr };

// SorterViewPr returns the SorterViewPr property.
func (_adcf ViewProperties )SorterViewPr ()*_bb .CT_SlideSorterViewProperties {return _adcf ._gdf .SorterViewPr ;};

// Type returns the type of the slide layout.
func (_dcde SlideLayout )Type ()_bb .ST_SlideLayoutType {return _dcde ._eacg .TypeAttr };

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_fgdf Slide )AddImageToRels (img _gae .ImageRef )string {_faa :=0;for _dae ,_fgg :=range _fgdf ._dce .Images {if _fgg ==img {_faa =_dae +1;break ;};};var _aaa string ;for _gcce ,_fda :=range _fgdf ._dce .Slides (){if _fda ._fead ==_fgdf ._fead {_eecf :=_cg .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_faa ,img .Format ());_ceba :=_fgdf ._dce ._gaae [_gcce ].AddRelationship (_eecf ,_eee .ImageType );_aaa =_ceba .ID ();};};return _aaa ;};

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_ggdc *Presentation )GetColorBySchemeColor (schClr _fe .ST_SchemeColorVal )*_fe .CT_Color {if len (_ggdc ._dgg )==0||len (_ggdc ._gcb )==0{return nil ;};var _fabf _fe .ST_ColorSchemeIndex ;_fbc :=_ggdc ._dgg [0];_eecc :=_fbc .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_fabf =_eecc .Bg1Attr ;case "\u0062\u0067\u0032":_fabf =_eecc .Bg2Attr ;case "\u0074\u0078\u0031":_fabf =_eecc .Tx1Attr ;case "\u0074\u0078\u0032":_fabf =_eecc .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_fabf =_eecc .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_fabf =_eecc .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_fabf =_eecc .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_fabf =_eecc .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_fabf =_eecc .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_fabf =_eecc .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_fabf =_eecc .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_fabf =_eecc .FolHlinkAttr ;case "\u0064\u006b\u0031":_fabf =_fe .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_fabf =_fe .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_fabf =_fe .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_fabf =_fe .ST_ColorSchemeIndexLt2 ;default:_fabf =_fe .ST_ColorSchemeIndexUnset ;};_ffb :=_ggdc ._gcb [0];_dcbc :=_ffb .ThemeElements ;if _dcbc ==nil {return nil ;};var _egfc *_fe .CT_Color ;_ceff :=_dcbc .ClrScheme ;switch _fabf .String (){case "\u0064\u006b\u0031":_egfc =_ceff .Dk1 ;case "\u0064\u006b\u0032":_egfc =_ceff .Dk2 ;case "\u006c\u0074\u0031":_egfc =_ceff .Lt1 ;case "\u006c\u0074\u0032":_egfc =_ceff .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_egfc =_ceff .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_egfc =_ceff .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_egfc =_ceff .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_egfc =_ceff .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_egfc =_ceff .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_egfc =_ceff .Accent6 ;case "\u0068\u006c\u0069n\u006b":_egfc =_ceff .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_egfc =_ceff .FolHlink ;default:return nil ;};return _egfc ;};

// X returns the inner wrapped XML type.
func (_ebab *Presentation )X ()*_bb .Presentation {return _ebab ._dcg };

// SlideMasters returns the slide masters defined in the presentation.
func (_ggb *Presentation )SlideMasters ()[]SlideMaster {_eaaa :=[]SlideMaster {};for _abba ,_eedg :=range _ggb ._dgg {_eaaa =append (_eaaa ,SlideMaster {_ggb ,_ggb ._gee [_abba ],_eedg });};return _eaaa ;};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_eacg *_bb .SldLayout };

// Type returns the placeholder type
func (_ff PlaceHolder )Type ()_bb .ST_PlaceholderType {return _ff ._agc .NvSpPr .NvPr .Ph .TypeAttr };

// WebPr returns the WebPr property.
func (_aeg PresentationProperties )WebPr ()*_bb .CT_WebProperties {return _aeg ._ccf .WebPr };func _ecf (_aca *Presentation ,_ddd *_bb .CT_Shape ,_ddg *_bb .CT_GraphicalObjectFrame ,_agd *TableInfo ,_efb *_fe .CT_Transform2D ,_ace int ,_fc []*_fe .CT_TextParagraph )[]*TextItem {_be :=[]*TextItem {};var _aae ,_bbe int64 ;_cee :=_efb ==nil ;_fg :=0;for _ ,_ae :=range _fc {for _ ,_gca :=range _ae .EG_TextRun {if _agdf :=_gca .R ;_agdf !=nil {if !_cee {if _efb .Off !=nil {if _eg :=_efb .Off .XAttr .ST_CoordinateUnqualified ;_eg !=nil {_aae =*_eg ;_cee =true ;};if _adc :=_efb .Off .YAttr .ST_CoordinateUnqualified ;_adc !=nil {_bbe =*_adc ;_cee =true ;};};};_be =append (_be ,&TextItem {Presentation :_aca ,Shape :_ddd ,GraphicFrame :_ddg ,TableInfo :_agd ,Paragraph :_ae ,Run :_agdf ,Text :_agdf .T ,_ec :_aae ,_bd :_bbe ,_fdc :_ace ,_cgg :_fg });_fg ++;};};};return _be ;};

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_df PlaceHolder )SetText (text string ){_df .Clear ();_da :=_fe .NewEG_TextRun ();_da .R =_fe .NewCT_RegularTextRun ();_da .R .T =text ;if len (_df ._agc .TxBody .P )==0{_df ._agc .TxBody .P =append (_df ._agc .TxBody .P ,_fe .NewCT_TextParagraph ());};_df ._agc .TxBody .P [0].EG_TextRun =nil ;_df ._agc .TxBody .P [0].EG_TextRun =append (_df ._agc .TxBody .P [0].EG_TextRun ,_da );};func (_cfc *Presentation )saveToFile (_bdb string ,_aga bool )error {_gfc ,_cgbdf :=_gfe .Create (_bdb );if _cgbdf !=nil {return _cgbdf ;};defer _gfc .Close ();return _cfc .save (_gfc ,_aga );};func (_cbc *Presentation )nextSlideID ()uint32 {_dbb :=uint32 (256);for _ ,_aac :=range _cbc ._dcg .SldIdLst .SldId {if _aac .IdAttr >=_dbb {_dbb =_aac .IdAttr +1;};};return _dbb ;};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_cdf *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_bgc ,_gfd :=_cdf .AddSlideWithLayout (l );for _ ,_ab :=range _bgc .PlaceHolders (){_ab .Clear ();switch _ab .Type (){case _bb .ST_PlaceholderTypeFtr ,_bb .ST_PlaceholderTypeDt ,_bb .ST_PlaceholderTypeSldNum :_ab .Remove ();};};return _bgc ,_gfd ;};func _dcc ()*Presentation {_efd :=&Presentation {_dcg :_bb .NewPresentation ()};_efd ._dcg .SldIdLst =_bb .NewCT_SlideIdList ();_efd ._dcg .ConformanceAttr =_fd .ST_ConformanceClassTransitional ;_efd .AppProperties =_gae .NewAppProperties ();_efd .CoreProperties =_gae .NewCoreProperties ();_efd ._acfd =_gae .NewTableStyles ();_efd .ContentTypes =_gae .NewContentTypes ();_efd .Rels =_gae .NewRelationships ();_efd ._ecef =_gae .NewRelationships ();_efd ._bde =NewPresentationProperties ();_efd ._bfab =NewViewProperties ();_efd ._agb =map[string ]string {};return _efd ;};

// Slides returns the slides in the presentation.
func (_gbca *Presentation )Slides ()[]Slide {_eff :=[]Slide {};for _ffc ,_dbfb :=range _gbca ._fag {_eff =append (_eff ,Slide {_gbca ._dcg .SldIdLst .SldId [_ffc ],_dbfb ,_gbca });};return _eff ;};

// NotesTextViewPr returns the NotesTextViewPr property.
func (_bdf ViewProperties )NotesTextViewPr ()*_bb .CT_NotesTextViewProperties {return _bdf ._gdf .NotesTextViewPr ;};

// RemoveSlide removes a slide from a presentation.
func (_eeb *Presentation )RemoveSlide (s Slide )error {_gabc :=false ;_dgaa :=0;for _bfcb ,_dcb :=range _eeb ._fag {if _dcb ==s ._fead {if _eeb ._dcg .SldIdLst .SldId [_bfcb ]!=s ._fge {return _cd .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_eeb ._fag [_bfcb :],_eeb ._fag [_bfcb +1:]);_eeb ._fag =_eeb ._fag [0:len (_eeb ._fag )-1];copy (_eeb ._gaae [_bfcb :],_eeb ._gaae [_bfcb +1:]);_eeb ._gaae =_eeb ._gaae [0:len (_eeb ._gaae )-1];copy (_eeb ._dcg .SldIdLst .SldId [_bfcb :],_eeb ._dcg .SldIdLst .SldId [_bfcb +1:]);_eeb ._dcg .SldIdLst .SldId =_eeb ._dcg .SldIdLst .SldId [0:len (_eeb ._dcg .SldIdLst .SldId )-1];_gabc =true ;_dgaa =_bfcb ;};};if !_gabc {return _cd .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_gcab :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideType ,0);return _eeb .ContentTypes .RemoveOverrideByIndex (_gcab ,_dgaa );};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_fe .CT_Table ;Row *_fe .CT_TableRow ;Cell *_fe .CT_TableCell ;RowIndex int ;ColIndex int ;};

// AddTable adds an empty table to a slide.
func (_gbd Slide )AddTable ()*_gae .Table {_bfca :=_bb .NewCT_GroupShapeChoice ();_gbd ._fead .CSld .SpTree .Choice =append (_gbd ._fead .CSld .SpTree .Choice ,_bfca );_dgf :=_bb .NewCT_GraphicalObjectFrame ();_bfca .GraphicFrame =append (_bfca .GraphicFrame ,_dgf );_dgf .Xfrm .Off =_fe .NewCT_Point2D ();_eefef :=int64 (1);_dgf .Xfrm .Off .XAttr =_fe .ST_Coordinate {ST_CoordinateUnqualified :&_eefef };_dgf .Xfrm .Off .YAttr =_fe .ST_Coordinate {ST_CoordinateUnqualified :&_eefef };_ede :=_dgf .Graphic .CT_GraphicalObject .GraphicData ;_ede .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_bfgc :=_gae .NewTableWithXfrm (_dgf .Xfrm );_ede .Any =append (_ede .Any ,_bfgc .X ());return _bfgc ;};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_bag *Presentation )GetImageByRelID (relID string )(_gae .ImageRef ,bool ){for _ ,_agabd :=range _bag .Images {if _agabd .RelID ()==relID {return _agabd ,true ;};};return _gae .ImageRef {},false ;};

// ShowPr returns the ShowPr property.
func (_ecfc PresentationProperties )ShowPr ()*_bb .CT_ShowProperties {return _ecfc ._ccf .ShowPr };func (_gddd sort2d )Less (i ,j int )bool {_ef ,_dbf :=_gddd [i ],_gddd [j ];_cf ,_dc ,_gac ,_dba ,_gb ,_cc ,_ag ,_bge :=_ef ._ec ,_dbf ._ec ,_ef ._bd ,_dbf ._bd ,_ef ._fdc ,_dbf ._fdc ,_ef ._cgg ,_dbf ._cgg ;if _gac ==_dba {if _cf ==_dc {if _gb ==_cc {return _ag <=_bge ;};return _gb < _cc ;};return _cf < _dc ;};return _gac < _dba ;};

// HtmlPubPr returns the HtmlPubPr property.
func (_ba PresentationProperties )HtmlPubPr ()*_bb .CT_HtmlPublishProperties {return _ba ._ccf .HtmlPubPr ;};

// Text returns text from a presentation as one string separated with line breaks.
func (_afe *PresentationText )Text ()string {_dbfe :=_d .NewBuffer ([]byte {});for _ ,_ced :=range _afe .Slides {_dbfe .WriteString (_ced .Text ());};return _dbfe .String ();};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_adfg ,_afa :=_gfe .Open (filename );if _afa !=nil {return nil ,_cg .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_afa );};defer _adfg .Close ();_bfg ,_afa :=_gfe .Stat (filename );if _afa !=nil {return nil ,_cg .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_afa );};_ =_bfg ;return Read (_adfg ,_bfg .Size ());};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_agcg *Presentation )SaveAsTemplate (w _dg .Writer )error {return _agcg .save (w ,true )};

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_eadb *Presentation )Close ()error {if _eadb .TmpPath !=""{return _fb .RemoveAll (_eadb .TmpPath );};return nil ;};

// Presentation is the a presentation base document.
type Presentation struct{_gae .DocBase ;_dcg *_bb .Presentation ;_ecef _gae .Relationships ;_fag []*_bb .Sld ;_gaae []_gae .Relationships ;_dgg []*_bb .SldMaster ;_gee []_gae .Relationships ;_bad []*_bb .SldLayout ;_bac []_gae .Relationships ;_gcb []*_fe .Theme ;_aeb []_gae .Relationships ;_acfd _gae .TableStyles ;_bde PresentationProperties ;_bfab ViewProperties ;_dfd []*_fe .CT_Hyperlink ;_feag []*_b .ChartSpace ;_fde []*_bb .HandoutMaster ;_add []*_bb .NotesMaster ;_bfc []*_eee .XSDAny ;_agb map[string ]string ;_gce string ;};

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_ccd Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_eeg :=range _ccd ._fead .CSld .SpTree .Choice {for _ ,_aacb :=range _eeg .Sp {if _aacb .NvSpPr !=nil &&_aacb .NvSpPr .NvPr !=nil &&_aacb .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_aacb .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_aacb .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_aacb .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_aacb ,_ccd ._fead },nil ;};};};};return PlaceHolder {},_cd .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// Name returns the name of the slide layout.
func (_aef SlideLayout )Name ()string {if _aef ._eacg .CSld !=nil &&_aef ._eacg .CSld .NameAttr !=nil {return *_aef ._eacg .CSld .NameAttr ;};return "";};func (_dbcc *Presentation )Validate ()error {if _cbf :=_dbcc ._dcg .Validate ();_cbf !=nil {return _cbf ;};for _cgbc ,_dded :=range _dbcc .Slides (){if _geb :=_dded .ValidateWithPath (_cg .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_cgbc ));_geb !=nil {return _geb ;};};for _fab ,_ecfg :=range _dbcc ._dgg {if _cfae :=_ecfg .ValidateWithPath (_cg .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_fab ));_cfae !=nil {return _cfae ;};};for _ebgf ,_dbfef :=range _dbcc ._bad {if _aecg :=_dbfef .ValidateWithPath (_cg .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_ebgf ));_aecg !=nil {return _aecg ;};};return nil ;};

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_gfcf TextBox )SetOffsetY (offY float64 ){_badaa :=_gfcf .getOff ();_cgged :=_gaa .ToEMU (offY );_badaa .YAttr =_fe .ST_Coordinate {ST_CoordinateUnqualified :&_cgged };};

// SlideViewPr returns the SlideViewPr property.
func (_bdcb ViewProperties )SlideViewPr ()*_bb .CT_SlideViewProperties {return _bdcb ._gdf .SlideViewPr };var _deec =false ;func (_cb sort2d )Swap (i ,j int ){_cb [i ],_cb [j ]=_cb [j ],_cb [i ]};

// AddParagraph adds a new paragraph to a placeholder.
func (_beg PlaceHolder )AddParagraph ()_eb .Paragraph {_ddgb :=_eb .MakeParagraph (_fe .NewCT_TextParagraph ());_beg ._agc .TxBody .P =append (_beg ._agc .TxBody .P ,_ddgb .X ());return _ddgb ;};

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_ccf *_bb .PresentationPr };

// Save writes the presentation out to a writer in the Zip package format
func (_cag *Presentation )Save (w _dg .Writer )error {return _cag .save (w ,false )};

// X returns TextBox's underlying *pml.CT_Shape.
func (_cedd TextBox )X ()*_bb .CT_Shape {return _cedd ._cea };

// AddSlide adds a new slide to the presentation.
func (_bae *Presentation )AddSlide ()Slide {_gaee :=_bb .NewCT_SlideIdListEntry ();_gaee .IdAttr =_bae .nextSlideID ();_bae ._dcg .SldIdLst .SldId =append (_bae ._dcg .SldIdLst .SldId ,_gaee );_ada :=_bb .NewSld ();_ada .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_ada .CSld .SpTree .GrpSpPr .Xfrm =_fe .NewCT_GroupTransform2D ();_ada .CSld .SpTree .GrpSpPr .Xfrm .Off =_fe .NewCT_Point2D ();_ada .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_eee .Int64 (0);_ada .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_eee .Int64 (0);_ada .CSld .SpTree .GrpSpPr .Xfrm .Ext =_fe .NewCT_PositiveSize2D ();_ada .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_gaa .Point );_ada .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_gaa .Point );_ada .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_ada .CSld .SpTree .GrpSpPr .Xfrm .Off ;_ada .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_ada .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_bae ._fag =append (_bae ._fag ,_ada );_dbc :=_bae ._ecef .AddAutoRelationship (_eee .DocTypePresentation ,_eee .OfficeDocumentType ,len (_bae ._fag ),_eee .SlideType );_gaee .RIdAttr =_dbc .ID ();_eefe :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideType ,len (_bae ._fag ));_bae .ContentTypes .AddOverride (_eefe ,_eee .SlideContentType );_gea :=_gae .NewRelationships ();_bae ._gaae =append (_bae ._gaae ,_gea );_gea .AddAutoRelationship (_eee .DocTypePresentation ,_eee .SlideType ,len (_bae ._bad ),_eee .SlideLayoutType );return Slide {_gaee ,_ada ,_bae };};

// SetTextAnchor controls the text anchoring
func (_ffda TextBox )SetTextAnchor (a _fe .ST_TextAnchoringType ){_ffda ._cea .TxBody .BodyPr =_fe .NewCT_TextBodyProperties ();_ffda ._cea .TxBody .BodyPr .AnchorAttr =a ;};

// Index returns the placeholder index
func (_gbg PlaceHolder )Index ()uint32 {if _gbg ._agc .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_gbg ._agc .NvSpPr .NvPr .Ph .IdxAttr ;};

// Read reads a document from an io.Reader.
func Read (r _dg .ReaderAt ,size int64 )(*Presentation ,error ){const _cbg ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_ee .GetLicenseKey ().IsLicensed ()&&!_deec {_cg .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_cg .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_cd .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_ffdc :=_dcc ();_edc ,_edd :=_ee .GenRefId ("\u0070\u0072");if _edd !=nil {_eee .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_edd );return nil ,_edd ;};_ffdc ._gce =_edc ;if _ceb :=_ee .Track (_ffdc ._gce ,_cbg );_ceb !=nil {_cg .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ceb );return nil ,_ceb ;};_ecgb ,_edd :=_fb .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _edd !=nil {return nil ,_edd ;};_ffdc .TmpPath =_ecgb ;_dfdg ,_edd :=_gf .NewReader (r ,size );if _edd !=nil {return nil ,_cg .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_edd );};_edaf :=[]*_gf .File {};_edaf =append (_edaf ,_dfdg .File ...);_ggbb :=false ;for _ ,_bab :=range _edaf {if _bab .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ggbb =true ;break ;};};if _ggbb {_ffdc .CreateCustomProperties ();};_fade :=_gg .DecodeMap {};_fade .SetOnNewRelationshipFunc (_ffdc .onNewRelationship );_fade .AddTarget (_eee .ContentTypesFilename ,_ffdc .ContentTypes .X (),"",0);_fade .AddTarget (_eee .BaseRelsFilename ,_ffdc .Rels .X (),"",0);if _cfg :=_fade .Decode (_edaf );_cfg !=nil {return nil ,_cfg ;};for _ ,_bada :=range _edaf {if _bada ==nil {continue ;};if _cafa :=_ffdc .AddExtraFileFromZip (_bada );_cafa !=nil {return nil ,_cafa ;};};if _ggbb {_ebca :=false ;for _ ,_beac :=range _ffdc .Rels .X ().Relationship {if _beac .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ebca =true ;break ;};};if !_ebca {_ffdc .AddCustomRelationships ();};};return _ffdc ,nil ;};

// X returns the inner wrapped XML type.
func (_gge PlaceHolder )X ()*_bb .CT_Shape {return _gge ._agc };func (_baf TextBox )getOff ()*_fe .CT_Point2D {if _baf ._cea .SpPr ==nil {_baf ._cea .SpPr =_fe .NewCT_ShapeProperties ();};if _baf ._cea .SpPr .Xfrm ==nil {_baf ._cea .SpPr .Xfrm =_fe .NewCT_Transform2D ();};if _baf ._cea .SpPr .Xfrm .Off ==nil {_baf ._cea .SpPr .Xfrm .Off =_fe .NewCT_Point2D ();};return _baf ._cea .SpPr .Xfrm .Off ;};

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_gacf ,_afd :=Open (fn );if _afd !=nil {return nil ,_afd ;};return _gacf ,nil ;};

// AddImage adds an image textbox to a slide.
func (_afef Slide )AddImage (img _gae .ImageRef )Image {_feac :=_bb .NewCT_GroupShapeChoice ();_afef ._fead .CSld .SpTree .Choice =append (_afef ._fead .CSld .SpTree .Choice ,_feac );_edbe :=_bb .NewCT_Picture ();_feac .Pic =append (_feac .Pic ,_edbe );_edbe .NvPicPr .CNvPicPr =_fe .NewCT_NonVisualPictureProperties ();_edbe .NvPicPr .CNvPicPr .PicLocks =_fe .NewCT_PictureLocking ();_edbe .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_eee .Bool (true );_edbe .BlipFill =_fe .NewCT_BlipFillProperties ();_edbe .BlipFill .Blip =_fe .NewCT_Blip ();_eccc :=_afef .AddImageToRels (img );_edbe .BlipFill .Blip .EmbedAttr =_eee .String (_eccc );_edbe .BlipFill .Stretch =_fe .NewCT_StretchInfoProperties ();_edbe .BlipFill .Stretch .FillRect =_fe .NewCT_RelativeRect ();_edbe .SpPr =_fe .NewCT_ShapeProperties ();_edbe .SpPr .PrstGeom =_fe .NewCT_PresetGeometry2D ();_edbe .SpPr .PrstGeom .PrstAttr =_fe .ST_ShapeTypeRect ;_bbea :=Image {_edbe };_eebc :=img .Size ();_bbea .Properties ().SetWidth (_gaa .Distance (_eebc .X )*_gaa .Pixel72 );_bbea .Properties ().SetHeight (_gaa .Distance (_eebc .Y )*_gaa .Pixel72 );_bbea .Properties ().SetPosition (0,0);return _bbea ;};func (_bc *Presentation )save (_dac _dg .Writer ,_fdf bool )error {const _cfb ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _gef :=_bc ._dcg .Validate ();_gef !=nil {_db .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_gef );};if !_ee .GetLicenseKey ().IsLicensed ()&&!_deec {_cg .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_cg .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _cd .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_bc ._gce )==0{_acab ,_cdag :=_ee .GenRefId ("\u0070\u0077");if _cdag !=nil {_eee .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_cdag );return _cdag ;};_bc ._gce =_acab ;};if _faf :=_ee .Track (_bc ._gce ,_cfb );_faf !=nil {_cg .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_faf );return _faf ;};if _fdf {_bc .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_bc .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_bc .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_bc .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_dgae :=_eee .DocTypePresentation ;_bcd :=_gf .NewWriter (_dac );defer _bcd .Close ();if _aec :=_gg .MarshalXML (_bcd ,_eee .BaseRelsFilename ,_bc .Rels .X ());_aec !=nil {return _aec ;};if _gaaff :=_gg .MarshalXMLByType (_bcd ,_dgae ,_eee .ExtendedPropertiesType ,_bc .AppProperties .X ());_gaaff !=nil {return _gaaff ;};if _edb :=_gg .MarshalXMLByType (_bcd ,_dgae ,_eee .CorePropertiesType ,_bc .CoreProperties .X ());_edb !=nil {return _edb ;};if _aea :=_gg .MarshalXMLByType (_bcd ,_dgae ,_eee .PresentationPropertiesType ,_bc ._bde .X ());_aea !=nil {return _aea ;};if _cfe :=_gg .MarshalXMLByType (_bcd ,_dgae ,_eee .ViewPropertiesType ,_bc ._bfab .X ());_cfe !=nil {return _cfe ;};if _dge :=_gg .MarshalXMLByType (_bcd ,_dgae ,_eee .TableStylesType ,_bc ._acfd .X ());_dge !=nil {return _dge ;};if _bc .CustomProperties .X ()!=nil {if _bbd :=_gg .MarshalXMLByType (_bcd ,_dgae ,_eee .CustomPropertiesType ,_bc .CustomProperties .X ());_bbd !=nil {return _bbd ;};};if _bc .Thumbnail !=nil {_dag ,_gdab :=_bcd .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _gdab !=nil {return _gdab ;};if _cagd :=_ga .Encode (_dag ,_bc .Thumbnail ,nil );_cagd !=nil {return _cagd ;};};_caa :=_eee .AbsoluteFilename (_dgae ,_eee .OfficeDocumentType ,0);if _fcfe :=_gg .MarshalXML (_bcd ,_caa ,_bc ._dcg );_fcfe !=nil {return _fcfe ;};if _acd :=_gg .MarshalXML (_bcd ,_gg .RelationsPathFor (_caa ),_bc ._ecef .X ());_acd !=nil {return _acd ;};for _dbaa ,_aee :=range _bc ._fag {_ecg :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideType ,_dbaa +1);_gg .MarshalXML (_bcd ,_ecg ,_aee );if !_bc ._gaae [_dbaa ].IsEmpty (){_ade :=_gg .RelationsPathFor (_ecg );_gg .MarshalXML (_bcd ,_ade ,_bc ._gaae [_dbaa ].X ());};};for _cgd ,_eedd :=range _bc ._dgg {_gcd :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideMasterType ,_cgd +1);_gg .MarshalXML (_bcd ,_gcd ,_eedd );if !_bc ._gee [_cgd ].IsEmpty (){_baa :=_gg .RelationsPathFor (_gcd );_gg .MarshalXML (_bcd ,_baa ,_bc ._gee [_cgd ].X ());};};for _gba ,_dfa :=range _bc ._bad {_fdb :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideLayoutType ,_gba +1);_gg .MarshalXML (_bcd ,_fdb ,_dfa );if !_bc ._bac [_gba ].IsEmpty (){_ffd :=_gg .RelationsPathFor (_fdb );_gg .MarshalXML (_bcd ,_ffd ,_bc ._bac [_gba ].X ());};};for _fcgc ,_adgf :=range _bc ._gcb {_afg :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .ThemeType ,_fcgc +1);_gg .MarshalXML (_bcd ,_afg ,_adgf );if !_bc ._aeb [_fcgc ].IsEmpty (){_bdc :=_gg .RelationsPathFor (_afg );_gg .MarshalXML (_bcd ,_bdc ,_bc ._aeb [_fcgc ].X ());};};for _fdfc ,_cge :=range _bc ._feag {_afdf :=_eee .AbsoluteFilename (_dgae ,_eee .ChartType ,_fdfc +1);_gg .MarshalXML (_bcd ,_afdf ,_cge );};for _ecc ,_cedf :=range _bc ._fde {_agdd :=_eee .AbsoluteFilename (_dgae ,_eee .HandoutMasterType ,_ecc +1);_gg .MarshalXML (_bcd ,_agdd ,_cedf );};for _dde ,_ggdd :=range _bc ._add {_fcd :=_eee .AbsoluteFilename (_dgae ,_eee .NotesMasterType ,_dde +1);_gg .MarshalXML (_bcd ,_fcd ,_ggdd );};for _abe ,_ceg :=range _bc ._bfc {_gfb :=_eee .AbsoluteFilename (_dgae ,_eee .CustomXMLType ,_abe +1);_gg .MarshalXML (_bcd ,_gfb ,_ceg );};for _cgbd ,_abb :=range _bc .Images {if _cagg :=_gae .AddImageToZip (_bcd ,_abb ,_cgbd +1,_eee .DocTypePresentation );_cagg !=nil {return _cagg ;};};_bc .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bc .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bc .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bc .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _feg :=_gg .MarshalXML (_bcd ,_eee .ContentTypesFilename ,_bc .ContentTypes .X ());_feg !=nil {return _feg ;};if _defc :=_bc .WriteExtraFiles (_bcd );_defc !=nil {return _defc ;};return nil ;};

// X returns the inner wrapped XML type.
func (_cacd SlideMaster )X ()*_bb .SldMaster {return _cacd ._cca };func (_agab *Presentation )onNewRelationship (_fcfea *_gg .DecodeMap ,_cedb ,_deg string ,_cefb []*_gf .File ,_ecce *_gd .Relationship ,_abbf _gg .Target )error {_cff :=_eee .DocTypePresentation ;switch _deg {case _eee .OfficeDocumentType :_agab ._dcg =_bb .NewPresentation ();_fcfea .AddTarget (_cedb ,_agab ._dcg ,_deg ,0);_fcfea .AddTarget (_gg .RelationsPathFor (_cedb ),_agab ._ecef .X (),_deg ,0);_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,0);case _eee .CorePropertiesType :_fcfea .AddTarget (_cedb ,_agab .CoreProperties .X (),_deg ,0);_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,0);case _eee .CustomPropertiesType :_fcfea .AddTarget (_cedb ,_agab .CustomProperties .X (),_deg ,0);_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,0);case _eee .PresentationPropertiesType :_fcfea .AddTarget (_cedb ,_agab ._bde .X (),_deg ,0);_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,0);case _eee .ViewPropertiesType :_fcfea .AddTarget (_cedb ,_agab ._bfab .X (),_deg ,0);_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,0);case _eee .TableStylesType :_fcfea .AddTarget (_cedb ,_agab ._acfd .X (),_deg ,0);_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,0);case _eee .HyperLinkType :_gdcef :=_fe .NewCT_Hyperlink ();_fgbb :=uint32 (len (_agab ._dfd ));_fcfea .AddTarget (_cedb ,_gdcef ,_deg ,_fgbb );_agab ._dfd =append (_agab ._dfd ,_gdcef );case _eee .CustomXMLType :_ged :=&_eee .XSDAny {};_bgee :=uint32 (len (_agab ._bfc ));_fcfea .AddTarget (_cedb ,_ged ,_deg ,_bgee );_agab ._bfc =append (_agab ._bfc ,_ged );_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._bfc ));case _eee .ChartType :_fdd :=_b .NewChartSpace ();_bff :=uint32 (len (_agab ._feag ));_fcfea .AddTarget (_cedb ,_fdd ,_deg ,_bff );_agab ._feag =append (_agab ._feag ,_fdd );_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._feag ));case _eee .HandoutMasterType :_eaaad :=_bb .NewHandoutMaster ();_gdde :=uint32 (len (_agab ._fde ));_fcfea .AddTarget (_cedb ,_eaaad ,_deg ,_gdde );_agab ._fde =append (_agab ._fde ,_eaaad );_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._fde ));case _eee .NotesMasterType :_fcfd :=_bb .NewNotesMaster ();_cefba :=uint32 (len (_agab ._add ));_fcfea .AddTarget (_cedb ,_fcfd ,_deg ,_cefba );_agab ._add =append (_agab ._add ,_fcfd );_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._add ));case _eee .ExtendedPropertiesType :_fcfea .AddTarget (_cedb ,_agab .AppProperties .X (),_deg ,0);_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,0);case _eee .SlideType :_cceb :=_bb .NewSld ();_agab ._fag =append (_agab ._fag ,_cceb );_fcfea .AddTarget (_cedb ,_cceb ,_deg ,uint32 (len (_agab ._fag )));_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._fag ));_bgca :=_gae .NewRelationships ();_fcfea .AddTarget (_gg .RelationsPathFor (_cedb ),_bgca .X (),_deg ,0);_agab ._gaae =append (_agab ._gaae ,_bgca );case _eee .SlideMasterType :_aad :=_bb .NewSldMaster ();if !_fcfea .AddTarget (_cedb ,_aad ,_deg ,uint32 (len (_agab ._dgg )+1)){return nil ;};_agab ._dgg =append (_agab ._dgg ,_aad );_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._dgg ));_cbdf :=_gae .NewRelationships ();_fcfea .AddTarget (_gg .RelationsPathFor (_cedb ),_cbdf .X (),_deg ,0);_agab ._gee =append (_agab ._gee ,_cbdf );case _eee .SlideLayoutType :_gfdg :=_bb .NewSldLayout ();if !_fcfea .AddTarget (_cedb ,_gfdg ,_deg ,uint32 (len (_agab ._bad )+1)){return nil ;};_agab ._bad =append (_agab ._bad ,_gfdg );_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._bad ));_bea :=_gae .NewRelationships ();_fcfea .AddTarget (_gg .RelationsPathFor (_cedb ),_bea .X (),_deg ,0);_agab ._bac =append (_agab ._bac ,_bea );case _eee .ThumbnailType :for _ggg ,_afdb :=range _cefb {if _afdb ==nil {continue ;};if _afdb .Name ==_cedb {_gcad ,_gebg :=_afdb .Open ();if _gebg !=nil {return _cg .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_gebg );};_agab .Thumbnail ,_ ,_gebg =_gab .Decode (_gcad );_gcad .Close ();if _gebg !=nil {return _cg .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_gebg );};_cefb [_ggg ]=nil ;};};case _eee .ThemeType :_gcgc :=_fe .NewTheme ();if !_fcfea .AddTarget (_cedb ,_gcgc ,_deg ,uint32 (len (_agab ._gcb )+1)){return nil ;};_agab ._gcb =append (_agab ._gcb ,_gcgc );_ecce .TargetAttr =_eee .RelativeFilename (_cff ,_abbf .Typ ,_deg ,len (_agab ._gcb ));_deecg :=_gae .NewRelationships ();_fcfea .AddTarget (_gg .RelationsPathFor (_cedb ),_deecg .X (),_deg ,0);_agab ._aeb =append (_agab ._aeb ,_deecg );case _eee .ImageType :_cedb =_f .Clean (_cedb );if _cgge ,_defg :=_agab ._agb [_cedb ];_defg {_ecce .TargetAttr =_cgge ;return nil ;};_dgd :="";for _abc ,_cdac :=range _cefb {if _cdac ==nil {continue ;};if _cdac .Name ==_cedb {_gdef ,_gbc :=_gg .ExtractToDiskTmp (_cdac ,_agab .TmpPath );if _gbc !=nil {return _gbc ;};_adcb ,_gbc :=_gae .ImageFromStorage (_gdef );if _gbc !=nil {return _gbc ;};_dgd =_adcb .Format ;_defb :=_gae .MakeImageRef (_adcb ,&_agab .DocBase ,_agab ._ecef );_agab .Images =append (_agab .Images ,_defb );_cefb [_abc ]=nil ;_fcfea .RecordIndex (_cedb ,len (_agab .Images ));break ;};};_cdce :=_fcfea .IndexFor (_cedb );_ecce .TargetAttr =_eee .RelativeImageFilename (_cff ,_abbf .Typ ,_deg ,_cdce ,_dgd );_agab ._agb [_cedb ]=_ecce .TargetAttr ;default:_eee .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_deg ,_cedb );};return nil ;};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_agc *_bb .CT_Shape ;_eaa *_bb .Sld ;};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_bb .CT_Shape ;GraphicFrame *_bb .CT_GraphicalObjectFrame ;Paragraph *_fe .CT_TextParagraph ;Run *_fe .CT_RegularTextRun ;TableInfo *TableInfo ;_ec int64 ;_bd int64 ;_fdc int ;_cgg int ;};type sort2d []*TextItem ;

// NormalViewPr returns the NormalViewPr property.
func (_gag ViewProperties )NormalViewPr ()*_bb .CT_NormalViewProperties {return _gag ._gdf .NormalViewPr };

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// Text returns text from a slide as one string separated with line breaks.
func (_acac *SlideText )Text ()string {_ge :=_d .NewBuffer ([]byte {});for _ ,_bfa :=range _acac .Items {if _bfa .Text !=""{_ge .WriteString (_bfa .Text );_ge .WriteString ("\u000a");};};return _ge .String ();};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_gdf *_bb .ViewPr };

// GetLayoutByName retrieves a slide layout given a layout name.
func (_dfc *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_fgd :=range _dfc ._bad {if _fgd .CSld .NameAttr !=nil &&name ==*_fgd .CSld .NameAttr {return SlideLayout {_fgd },nil ;};};return SlideLayout {},_cd .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// GridSpacing returns the GridSpacing property.
func (_ecb ViewProperties )GridSpacing ()*_fe .CT_PositiveSize2D {return _ecb ._gdf .GridSpacing };

// PlaceHolders returns all of the content place holders within a given slide.
func (_bfe Slide )PlaceHolders ()[]PlaceHolder {_afaa :=[]PlaceHolder {};for _ ,_dad :=range _bfe ._fead .CSld .SpTree .Choice {for _ ,_afea :=range _dad .Sp {if _afea .NvSpPr !=nil &&_afea .NvSpPr .NvPr !=nil &&_afea .NvSpPr .NvPr .Ph !=nil {_afaa =append (_afaa ,PlaceHolder {_afea ,_bfe ._fead });};};};return _afaa ;};

// NotesViewPr returns the NotesViewPr property.
func (_fbcg ViewProperties )NotesViewPr ()*_bb .CT_NotesViewProperties {return _fbcg ._gdf .NotesViewPr };

// AddParagraph adds a paragraph to the text box
func (_gddc TextBox )AddParagraph ()_eb .Paragraph {_dgea :=_fe .NewCT_TextParagraph ();_gddc ._cea .TxBody .P =append (_gddc ._cea .TxBody .P ,_dgea );return _eb .MakeParagraph (_dgea );};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_acbf *Presentation )SlideLayouts ()[]SlideLayout {_ggf :=[]SlideLayout {};for _ ,_fdg :=range _acbf ._bad {_ggf =append (_ggf ,SlideLayout {_fdg });};return _ggf ;};func _ecfa (_dgaf []*_bb .CT_GroupShapeChoice )[]*_bb .CT_GroupShapeChoice {var _beb []*_bb .CT_GroupShapeChoice ;for _ ,_eced :=range _dgaf {if len (_eced .Pic )==0{_beb =append (_beb ,_eced );};};return _beb ;};

// Properties returns the properties of the TextBox.
func (_acf Image )Properties ()_eb .ShapeProperties {if _acf ._eed .SpPr ==nil {_acf ._eed .SpPr =_fe .NewCT_ShapeProperties ();};return _eb .MakeShapeProperties (_acf ._eed .SpPr );};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_eedgf Slide )GetPlaceholder (t _bb .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_bgb :=range _eedgf ._fead .CSld .SpTree .Choice {for _ ,_cgbe :=range _bgb .Sp {if _cgbe .NvSpPr !=nil &&_cgbe .NvSpPr .NvPr !=nil &&_cgbe .NvSpPr .NvPr .Ph !=nil {if _cgbe .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_cgbe ,_eedgf ._fead },nil ;};};};};return PlaceHolder {},_cd .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// Properties returns the properties of the TextBox.
func (_daf TextBox )Properties ()_eb .ShapeProperties {if _daf ._cea .SpPr ==nil {_daf ._cea .SpPr =_fe .NewCT_ShapeProperties ();};return _eb .MakeShapeProperties (_daf ._cea .SpPr );};

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_gdf :_bb .NewViewPr ()}};

// ExtLst returns the ExtLst property.
func (_dbg ViewProperties )ExtLst ()*_bb .CT_ExtensionList {return _dbg ._gdf .ExtLst };func (_fec sort2d )Len ()int {return len (_fec )};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_eeed SlideMaster )SlideLayouts ()[]SlideLayout {_bfae :=map[string ]int {};_dfae :=[]SlideLayout {};for _ ,_deb :=range _eeed ._gded .Relationships (){_dadd :=_g .Replace (_deb .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_dadd =_g .Replace (_dadd ,"\u002e\u0078\u006d\u006c","",-1);if _cdbe ,_dbeb :=_c .ParseInt (_dadd ,10,32);_dbeb ==nil {_bfae [_deb .ID ()]=int (_cdbe );};};for _ ,_bcde :=range _eeed ._cca .SldLayoutIdLst .SldLayoutId {if _aff ,_fecg :=_bfae [_bcde .RIdAttr ];_fecg {_fbce :=_eeed ._aacf ._bad [_aff -1];_dfae =append (_dfae ,SlideLayout {_fbce });};};return _dfae ;};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_dcd *Presentation )SaveToFileAsTemplate (path string )error {return _dcd .saveToFile (path ,true )};

// ClrMru returns the ClrMru property.
func (_feb PresentationProperties )ClrMru ()*_fe .CT_ColorMRU {return _feb ._ccf .ClrMru };

// AddTextBox adds an empty textbox to a slide.
func (_ebb Slide )AddTextBox ()TextBox {_dfe :=_bb .NewCT_GroupShapeChoice ();_ebb ._fead .CSld .SpTree .Choice =append (_ebb ._fead .CSld .SpTree .Choice ,_dfe );_aaef :=_bb .NewCT_Shape ();_dfe .Sp =append (_dfe .Sp ,_aaef );_aaef .SpPr =_fe .NewCT_ShapeProperties ();_aaef .SpPr .Xfrm =_fe .NewCT_Transform2D ();_aaef .SpPr .PrstGeom =_fe .NewCT_PresetGeometry2D ();_aaef .SpPr .PrstGeom .PrstAttr =_fe .ST_ShapeTypeRect ;_aaef .NvSpPr =_bb .NewCT_ShapeNonVisual ();_aaef .NvSpPr .CNvSpPr =_fe .NewCT_NonVisualDrawingShapeProps ();_cegc :=true ;_aaef .NvSpPr .CNvSpPr .TxBoxAttr =&_cegc ;_aaef .TxBody =_fe .NewCT_TextBody ();_aaef .TxBody .BodyPr =_fe .NewCT_TextBodyProperties ();_aaef .TxBody .BodyPr .WrapAttr =_fe .ST_TextWrappingTypeSquare ;_aaef .TxBody .BodyPr .SpAutoFit =_fe .NewCT_TextShapeAutofit ();_dfef :=TextBox {_aaef };_dfef .Properties ().SetWidth (3*_gaa .Inch );_dfef .Properties ().SetHeight (1*_gaa .Inch );_dfef .Properties ().SetPosition (0,0);return _dfef ;};

// New initializes and reurns a new presentation
func New ()*Presentation {_agg :=_dcc ();_agg .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_agg .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_agg .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_agg .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_agg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_agg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_agg .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_agg ._dcg .SldMasterIdLst =_bb .NewCT_SlideMasterIdList ();_dgcf :=_bb .NewSldMaster ();_dgcf .ClrMap .Bg1Attr =_fe .ST_ColorSchemeIndexLt1 ;_dgcf .ClrMap .Bg2Attr =_fe .ST_ColorSchemeIndexLt2 ;_dgcf .ClrMap .Tx1Attr =_fe .ST_ColorSchemeIndexDk1 ;_dgcf .ClrMap .Tx2Attr =_fe .ST_ColorSchemeIndexDk2 ;_dgcf .ClrMap .Accent1Attr =_fe .ST_ColorSchemeIndexAccent1 ;_dgcf .ClrMap .Accent2Attr =_fe .ST_ColorSchemeIndexAccent2 ;_dgcf .ClrMap .Accent3Attr =_fe .ST_ColorSchemeIndexAccent3 ;_dgcf .ClrMap .Accent4Attr =_fe .ST_ColorSchemeIndexAccent4 ;_dgcf .ClrMap .Accent5Attr =_fe .ST_ColorSchemeIndexAccent5 ;_dgcf .ClrMap .Accent6Attr =_fe .ST_ColorSchemeIndexAccent6 ;_dgcf .ClrMap .HlinkAttr =_fe .ST_ColorSchemeIndexHlink ;_dgcf .ClrMap .FolHlinkAttr =_fe .ST_ColorSchemeIndexFolHlink ;_agg ._dgg =append (_agg ._dgg ,_dgcf );_cbb :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideMasterType ,1);_agg .ContentTypes .AddOverride (_cbb ,_eee .SlideMasterContentType );_cdd :=_agg ._ecef .AddAutoRelationship (_eee .DocTypePresentation ,_eee .OfficeDocumentType ,1,_eee .SlideMasterType );_dgcd :=_bb .NewCT_SlideMasterIdListEntry ();_dgcd .IdAttr =_eee .Uint32 (2147483648);_dgcd .RIdAttr =_cdd .ID ();_agg ._dcg .SldMasterIdLst .SldMasterId =append (_agg ._dcg .SldMasterIdLst .SldMasterId ,_dgcd );_def :=_gae .NewRelationships ();_agg ._gee =append (_agg ._gee ,_def );_gdce :=_bb .NewSldLayout ();_acb :=_def .AddAutoRelationship (_eee .DocTypePresentation ,_eee .SlideMasterType ,1,_eee .SlideLayoutType );_ebg :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .SlideLayoutType ,1);_agg .ContentTypes .AddOverride (_ebg ,_eee .SlideLayoutContentType );_def .AddAutoRelationship (_eee .DocTypePresentation ,_eee .SlideMasterType ,1,_eee .ThemeType );_agg ._bad =append (_agg ._bad ,_gdce );_dgcf .SldLayoutIdLst =_bb .NewCT_SlideLayoutIdList ();_aggc :=_bb .NewCT_SlideLayoutIdListEntry ();_aggc .IdAttr =_eee .Uint32 (2147483649);_aggc .RIdAttr =_acb .ID ();_dgcf .SldLayoutIdLst .SldLayoutId =append (_dgcf .SldLayoutIdLst .SldLayoutId ,_aggc );_ead :=_gae .NewRelationships ();_agg ._bac =append (_agg ._bac ,_ead );_ead .AddAutoRelationship (_eee .DocTypePresentation ,_eee .SlideType ,1,_eee .SlideMasterType );_agg ._dcg .NotesSz .CxAttr =6858000;_agg ._dcg .NotesSz .CyAttr =9144000;_ebc :=_fe .NewTheme ();_ebc .NameAttr =_eee .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_ebc .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_ebc .ThemeElements .ClrScheme .Dk1 .SysClr =_fe .NewCT_SystemColor ();_ebc .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_eee .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_ebc .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_fe .ST_SystemColorValWindowText ;_ebc .ThemeElements .ClrScheme .Lt1 .SysClr =_fe .NewCT_SystemColor ();_ebc .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_eee .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_ebc .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_fe .ST_SystemColorValWindow ;_ebc .ThemeElements .ClrScheme .Dk2 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_ebc .ThemeElements .ClrScheme .Lt2 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_ebc .ThemeElements .ClrScheme .Accent1 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_ebc .ThemeElements .ClrScheme .Accent2 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_ebc .ThemeElements .ClrScheme .Accent3 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_ebc .ThemeElements .ClrScheme .Accent4 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_ebc .ThemeElements .ClrScheme .Accent5 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_ebc .ThemeElements .ClrScheme .Accent6 .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_ebc .ThemeElements .ClrScheme .Hlink .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_ebc .ThemeElements .ClrScheme .FolHlink .SrgbClr =_fe .NewCT_SRgbColor ();_ebc .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_ebc .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_ebc .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_ebc .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_ebc .ThemeElements .FmtScheme .NameAttr =_eee .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_fgc :=_fe .NewEG_FillProperties ();_ebc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ebc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_fgc );_fgc .SolidFill =&_fe .CT_SolidColorFillProperties {SchemeClr :&_fe .CT_SchemeColor {ValAttr :_fe .ST_SchemeColorValPhClr }};_fgc =_fe .NewEG_FillProperties ();_ebc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ebc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_fgc );_ebc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ebc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_fgc );_fgc .GradFill =&_fe .CT_GradientFillProperties {RotWithShapeAttr :_eee .Bool (true ),GsLst :&_fe .CT_GradientStopList {},Lin :&_fe .CT_LinearShadeProperties {}};_fgc .GradFill .Lin .AngAttr =_eee .Int32 (5400000);_fgc .GradFill .Lin .ScaledAttr =_eee .Bool (false );_dga :=_fe .NewCT_GradientStop ();_dga .PosAttr .ST_PositiveFixedPercentageDecimal =_eee .Int32 (0);_dga .SchemeClr =&_fe .CT_SchemeColor {ValAttr :_fe .ST_SchemeColorValPhClr };_fgc .GradFill .GsLst .Gs =append (_fgc .GradFill .GsLst .Gs ,_dga );_dga =_fe .NewCT_GradientStop ();_dga .PosAttr .ST_PositiveFixedPercentageDecimal =_eee .Int32 (50000);_dga .SchemeClr =&_fe .CT_SchemeColor {ValAttr :_fe .ST_SchemeColorValPhClr };_fgc .GradFill .GsLst .Gs =append (_fgc .GradFill .GsLst .Gs ,_dga );_ebc .ThemeElements .FmtScheme .LnStyleLst =_fe .NewCT_LineStyleList ();for _eef :=0;_eef < 3;_eef ++{_cfd :=_fe .NewCT_LineProperties ();_cfd .WAttr =_eee .Int32 (int32 (6350*(_eef +1)));_cfd .CapAttr =_fe .ST_LineCapFlat ;_cfd .CmpdAttr =_fe .ST_CompoundLineSng ;_cfd .AlgnAttr =_fe .ST_PenAlignmentCtr ;_ebc .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_ebc .ThemeElements .FmtScheme .LnStyleLst .Ln ,_cfd );};_ebc .ThemeElements .FmtScheme .EffectStyleLst =_fe .NewCT_EffectStyleList ();for _gccg :=0;_gccg < 3;_gccg ++{_ceea :=_fe .NewCT_EffectStyleItem ();_ceea .EffectLst =_fe .NewCT_EffectList ();_ebc .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_ebc .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_ceea );};_fgb :=_fe .NewEG_FillProperties ();_fgb .SolidFill =&_fe .CT_SolidColorFillProperties {SchemeClr :&_fe .CT_SchemeColor {ValAttr :_fe .ST_SchemeColorValPhClr }};_ebc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ebc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fgb );_ebc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ebc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fgb );_ebc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ebc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fgc );_agg ._gcb =append (_agg ._gcb ,_ebc );_dbae :=_eee .AbsoluteFilename (_eee .DocTypePresentation ,_eee .ThemeType ,1);_agg .ContentTypes .AddOverride (_dbae ,_eee .ThemeContentType );_agg ._ecef .AddAutoRelationship (_eee .DocTypePresentation ,_eee .OfficeDocumentType ,1,_eee .ThemeType );_caf :=_gae .NewRelationships ();_agg ._aeb =append (_agg ._aeb ,_caf );return _agg ;};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_eaf PlaceHolder )Paragraphs ()[]_eb .Paragraph {_cfa :=[]_eb .Paragraph {};for _ ,_eba :=range _eaf ._agc .TxBody .P {_cfa =append (_cfa ,_eb .MakeParagraph (_eba ));};return _cfa ;};

// X returns the inner wrapped XML type.
func (_bdbe Slide )X ()*_bb .Sld {return _bdbe ._fead };

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_aacf *Presentation ;_gded _gae .Relationships ;_cca *_bb .SldMaster ;};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};

// Image is an image within a slide.
type Image struct{_eed *_bb .CT_Picture };

// ExtractText returns text from a presentation as a PresentationText object.
func (_gga *Presentation )ExtractText ()*PresentationText {_ce :=[]*SlideText {};for _ ,_ed :=range _gga .Slides (){_dgb :=_ed .ExtractText ();if _dgb !=nil {_ce =append (_ce ,_dgb );};};return &PresentationText {Slides :_ce };};