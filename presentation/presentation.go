//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_ge "archive/zip";_ag "bytes";_d "encoding/xml";_f "errors";_af "fmt";_egb "github.com/unidoc/unioffice";_egc "github.com/unidoc/unioffice/common";_ea "github.com/unidoc/unioffice/common/tempstorage";_ace "github.com/unidoc/unioffice/drawing";_eg "github.com/unidoc/unioffice/internal/license";_df "github.com/unidoc/unioffice/measurement";_dbb "github.com/unidoc/unioffice/schema/soo/dml";_age "github.com/unidoc/unioffice/schema/soo/dml/chart";_ff "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_gf "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_aff "github.com/unidoc/unioffice/schema/soo/pml";_da "github.com/unidoc/unioffice/zippkg";_b "image";_ae "image/jpeg";_ac "io";_g "log";_aa "os";_ce "path";_db "sort";_e "strconv";_c "strings";);

// AddParagraph adds a paragraph to the text box
func (_dgad TextBox )AddParagraph ()_ace .Paragraph {_cbcg :=_dbb .NewCT_TextParagraph ();_dgad ._deff .TxBody .P =append (_dgad ._deff .TxBody .P ,_cbcg );return _ace .MakeParagraph (_cbcg );};

// NormalViewPr returns the NormalViewPr property.
func (_fcfg ViewProperties )NormalViewPr ()*_aff .CT_NormalViewProperties {return _fcfg ._aadb .NormalViewPr ;};

// NotesViewPr returns the NotesViewPr property.
func (_agea ViewProperties )NotesViewPr ()*_aff .CT_NotesViewProperties {return _agea ._aadb .NotesViewPr ;};

// Presentation is the a presentation base document.
type Presentation struct{_egc .DocBase ;_dbe *_aff .Presentation ;_aaa _egc .Relationships ;_bgb []*_aff .Sld ;_ead []_egc .Relationships ;_bfbb []*_aff .SldMaster ;_ccd []_egc .Relationships ;_dgb []*_aff .SldLayout ;_fcb []_egc .Relationships ;_ecd []*_dbb .Theme ;_ecc []_egc .Relationships ;_egee _egc .TableStyles ;_bbf PresentationProperties ;_fd ViewProperties ;_afa []*_dbb .CT_Hyperlink ;_ccf []*_age .ChartSpace ;_fbb []*_aff .HandoutMaster ;_fab []*_aff .NotesMaster ;_acef []*_egb .XSDAny ;_gcf map[string ]string ;_gece string ;};

// Type returns the placeholder type
func (_efb PlaceHolder )Type ()_aff .ST_PlaceholderType {return _efb ._bbe .NvSpPr .NvPr .Ph .TypeAttr };

// ExtLst returns the ExtLst property.
func (_aea PresentationProperties )ExtLst ()*_aff .CT_ExtensionList {return _aea ._aeb .ExtLst };

// Text returns text from a presentation as one string separated with line breaks.
func (_cc *PresentationText )Text ()string {_dff :=_ag .NewBuffer ([]byte {});for _ ,_bc :=range _cc .Slides {_dff .WriteString (_bc .Text ());};return _dff .String ();};

// Save writes the presentation out to a writer in the Zip package format
func (_fda *Presentation )Save (w _ac .Writer )error {return _fda .save (w ,false )};var _gdg =false ;

// Remove removes a placeholder from a presentation.
func (_cdbd PlaceHolder )Remove ()error {for _fc ,_aedg :=range _cdbd ._gbc .CSld .SpTree .Choice {for _ ,_ece :=range _aedg .Sp {if _ece ==_cdbd ._bbe {copy (_cdbd ._gbc .CSld .SpTree .Choice [_fc :],_cdbd ._gbc .CSld .SpTree .Choice [_fc +1:]);_cdbd ._gbc .CSld .SpTree .Choice =_cdbd ._gbc .CSld .SpTree .Choice [0:len (_cdbd ._gbc .CSld .SpTree .Choice )-1];return nil ;};};};return _f .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};

// X returns the inner wrapped XML type.
func (_egcf SlideLayout )X ()*_aff .SldLayout {return _egcf ._bacf };func (_aec *Presentation )saveToFile (_dgd string ,_gdb bool )error {_gcae ,_gfe :=_aa .Create (_dgd );if _gfe !=nil {return _gfe ;};defer _gcae .Close ();return _aec .save (_gcae ,_gdb );};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_dfdd PlaceHolder )Paragraphs ()[]_ace .Paragraph {_egde :=[]_ace .Paragraph {};for _ ,_cdff :=range _dfdd ._bbe .TxBody .P {_egde =append (_egde ,_ace .MakeParagraph (_cdff ));};return _egde ;};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_cgec Slide )AddImageToRels (img _egc .ImageRef )string {_eef :=0;for _eefb ,_fbfg :=range _cgec ._aggb .Images {if _fbfg ==img {_eef =_eefb +1;break ;};};var _fbbe string ;for _dfge ,_bgec :=range _cgec ._aggb .Slides (){if _bgec ._aga ==_cgec ._aga {_baf :=_af .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_eef ,img .Format ());_acbc :=_cgec ._aggb ._ead [_dfge ].AddRelationship (_baf ,_egb .ImageType );_fbbe =_acbc .ID ();};};return _fbbe ;};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_acbb SlideMaster )SlideLayouts ()[]SlideLayout {_fcae :=map[string ]int {};_bfdc :=[]SlideLayout {};for _ ,_edge :=range _acbb ._affe .Relationships (){_cbeg :=_c .Replace (_edge .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_cbeg =_c .Replace (_cbeg ,"\u002e\u0078\u006d\u006c","",-1);if _acaa ,_bee :=_e .ParseInt (_cbeg ,10,32);_bee ==nil {_fcae [_edge .ID ()]=int (_acaa );};};for _ ,_ebed :=range _acbb ._bbdc .SldLayoutIdLst .SldLayoutId {if _afcf ,_agdb :=_fcae [_ebed .RIdAttr ];_agdb {_cggf :=_acbb ._adb ._dgb [_afcf -1];_bfdc =append (_bfdc ,SlideLayout {_cggf });};};return _bfdc ;};

// Read reads a document from an io.Reader.
func Read (r _ac .ReaderAt ,size int64 )(*Presentation ,error ){const _fagb ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_eg .GetLicenseKey ().IsLicensed ()&&!_gdg {_af .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_af .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_f .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_cfaa :=_dac ();_gfeg ,_bfee :=_eg .GenRefId ("\u0070\u0072");if _bfee !=nil {_egb .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_bfee );return nil ,_bfee ;};_cfaa ._gece =_gfeg ;if _cefg :=_eg .Track (_cfaa ._gece ,_fagb );_cefg !=nil {_af .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_cefg );return nil ,_cefg ;};_bbea ,_bfee :=_ea .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _bfee !=nil {return nil ,_bfee ;};_cfaa .TmpPath =_bbea ;_gae ,_bfee :=_ge .NewReader (r ,size );if _bfee !=nil {return nil ,_af .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_bfee );};_fdef :=[]*_ge .File {};_fdef =append (_fdef ,_gae .File ...);_acd :=false ;for _ ,_abb :=range _fdef {if _abb .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_acd =true ;break ;};};if _acd {_cfaa .CreateCustomProperties ();};_bbfd :=_da .DecodeMap {};_bbfd .SetOnNewRelationshipFunc (_cfaa .onNewRelationship );_bbfd .AddTarget (_egb .ContentTypesFilename ,_cfaa .ContentTypes .X (),"",0);_bbfd .AddTarget (_egb .BaseRelsFilename ,_cfaa .Rels .X (),"",0);if _cfee :=_bbfd .Decode (_fdef );_cfee !=nil {return nil ,_cfee ;};for _ ,_gdca :=range _fdef {if _gdca ==nil {continue ;};if _afb :=_cfaa .AddExtraFileFromZip (_gdca );_afb !=nil {return nil ,_afb ;};};if _acd {_aacb :=false ;for _ ,_bbfg :=range _cfaa .Rels .X ().Relationship {if _bbfg .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_aacb =true ;break ;};};if !_aacb {_cfaa .AddCustomRelationships ();};};return _cfaa ,nil ;};func (_eea sort2d )Less (i ,j int )bool {_ffb ,_afe :=_eea [i ],_eea [j ];_egg ,_cga ,_ceb ,_cee ,_edc ,_fag ,_cdf ,_gcc :=_ffb ._ef ,_afe ._ef ,_ffb ._eb ,_afe ._eb ,_ffb ._bf ,_afe ._bf ,_ffb ._de ,_afe ._de ;if _ceb ==_cee {if _egg ==_cga {if _edc ==_fag {return _cdf <=_gcc ;};return _edc < _fag ;};return _egg < _cga ;};return _ceb < _cee ;};

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_aed ,_egcg :=Open (fn );if _egcg !=nil {return nil ,_egcg ;};return _aed ,nil ;};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_bacf *_aff .SldLayout };

// SorterViewPr returns the SorterViewPr property.
func (_dfbc ViewProperties )SorterViewPr ()*_aff .CT_SlideSorterViewProperties {return _dfbc ._aadb .SorterViewPr ;};func (_ceba TextBox )getOff ()*_dbb .CT_Point2D {if _ceba ._deff .SpPr ==nil {_ceba ._deff .SpPr =_dbb .NewCT_ShapeProperties ();};if _ceba ._deff .SpPr .Xfrm ==nil {_ceba ._deff .SpPr .Xfrm =_dbb .NewCT_Transform2D ();};if _ceba ._deff .SpPr .Xfrm .Off ==nil {_ceba ._deff .SpPr .Xfrm .Off =_dbb .NewCT_Point2D ();};return _ceba ._deff .SpPr .Xfrm .Off ;};

// Type returns the type of the slide layout.
func (_adde SlideLayout )Type ()_aff .ST_SlideLayoutType {return _adde ._bacf .TypeAttr };

// X returns the inner wrapped XML type.
func (_gbe *Presentation )X ()*_aff .Presentation {return _gbe ._dbe };

// RemoveSlide removes a slide from a presentation.
func (_dab *Presentation )RemoveSlide (s Slide )error {_aad :=false ;_aaec :=0;for _ede ,_bae :=range _dab ._bgb {if _bae ==s ._aga {if _dab ._dbe .SldIdLst .SldId [_ede ]!=s ._ccdd {return _f .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_dab ._bgb [_ede :],_dab ._bgb [_ede +1:]);_dab ._bgb =_dab ._bgb [0:len (_dab ._bgb )-1];copy (_dab ._ead [_ede :],_dab ._ead [_ede +1:]);_dab ._ead =_dab ._ead [0:len (_dab ._ead )-1];copy (_dab ._dbe .SldIdLst .SldId [_ede :],_dab ._dbe .SldIdLst .SldId [_ede +1:]);_dab ._dbe .SldIdLst .SldId =_dab ._dbe .SldIdLst .SldId [0:len (_dab ._dbe .SldIdLst .SldId )-1];_aad =true ;_aaec =_ede ;};};if !_aad {return _f .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_ebf :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideType ,0);return _dab .ContentTypes .RemoveOverrideByIndex (_ebf ,_aaec );};func (_fga *Presentation )onNewRelationship (_dfb *_da .DecodeMap ,_dfg ,_acca string ,_bcc []*_ge .File ,_abd *_gf .Relationship ,_ddcc _da .Target )error {_ggdf :=_egb .DocTypePresentation ;switch _acca {case _egb .OfficeDocumentType :_fga ._dbe =_aff .NewPresentation ();_dfb .AddTarget (_dfg ,_fga ._dbe ,_acca ,0);_dfb .AddTarget (_da .RelationsPathFor (_dfg ),_fga ._aaa .X (),_acca ,0);_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,0);case _egb .CorePropertiesType :_dfb .AddTarget (_dfg ,_fga .CoreProperties .X (),_acca ,0);_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,0);case _egb .CustomPropertiesType :_dfb .AddTarget (_dfg ,_fga .CustomProperties .X (),_acca ,0);_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,0);case _egb .PresentationPropertiesType :_dfb .AddTarget (_dfg ,_fga ._bbf .X (),_acca ,0);_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,0);case _egb .ViewPropertiesType :_dfb .AddTarget (_dfg ,_fga ._fd .X (),_acca ,0);_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,0);case _egb .TableStylesType :_dfb .AddTarget (_dfg ,_fga ._egee .X (),_acca ,0);_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,0);case _egb .HyperLinkType :_afag :=_dbb .NewCT_Hyperlink ();_fea :=uint32 (len (_fga ._afa ));_dfb .AddTarget (_dfg ,_afag ,_acca ,_fea );_fga ._afa =append (_fga ._afa ,_afag );case _egb .CustomXMLType :_cded :=&_egb .XSDAny {};_dgcg :=uint32 (len (_fga ._acef ));_dfb .AddTarget (_dfg ,_cded ,_acca ,_dgcg );_fga ._acef =append (_fga ._acef ,_cded );_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._acef ));case _egb .ChartType :_dcac :=_age .NewChartSpace ();_gdc :=uint32 (len (_fga ._ccf ));_dfb .AddTarget (_dfg ,_dcac ,_acca ,_gdc );_fga ._ccf =append (_fga ._ccf ,_dcac );_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._ccf ));case _egb .HandoutMasterType :_gac :=_aff .NewHandoutMaster ();_fbf :=uint32 (len (_fga ._fbb ));_dfb .AddTarget (_dfg ,_gac ,_acca ,_fbf );_fga ._fbb =append (_fga ._fbb ,_gac );_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._fbb ));case _egb .NotesMasterType :_gcfa :=_aff .NewNotesMaster ();_cdfca :=uint32 (len (_fga ._fab ));_dfb .AddTarget (_dfg ,_gcfa ,_acca ,_cdfca );_fga ._fab =append (_fga ._fab ,_gcfa );_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._fab ));case _egb .ExtendedPropertiesType :_dfb .AddTarget (_dfg ,_fga .AppProperties .X (),_acca ,0);_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,0);case _egb .SlideType :_add :=_aff .NewSld ();_fga ._bgb =append (_fga ._bgb ,_add );_dfb .AddTarget (_dfg ,_add ,_acca ,uint32 (len (_fga ._bgb )));_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._bgb ));_cgf :=_egc .NewRelationships ();_dfb .AddTarget (_da .RelationsPathFor (_dfg ),_cgf .X (),_acca ,0);_fga ._ead =append (_fga ._ead ,_cgf );case _egb .SlideMasterType :_ggb :=_aff .NewSldMaster ();if !_dfb .AddTarget (_dfg ,_ggb ,_acca ,uint32 (len (_fga ._bfbb )+1)){return nil ;};_fga ._bfbb =append (_fga ._bfbb ,_ggb );_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._bfbb ));_ceeb :=_egc .NewRelationships ();_dfb .AddTarget (_da .RelationsPathFor (_dfg ),_ceeb .X (),_acca ,0);_fga ._ccd =append (_fga ._ccd ,_ceeb );case _egb .SlideLayoutType :_eadf :=_aff .NewSldLayout ();if !_dfb .AddTarget (_dfg ,_eadf ,_acca ,uint32 (len (_fga ._dgb )+1)){return nil ;};_fga ._dgb =append (_fga ._dgb ,_eadf );_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._dgb ));_gge :=_egc .NewRelationships ();_dfb .AddTarget (_da .RelationsPathFor (_dfg ),_gge .X (),_acca ,0);_fga ._fcb =append (_fga ._fcb ,_gge );case _egb .ThumbnailType :for _fabcc ,_bfg :=range _bcc {if _bfg ==nil {continue ;};if _bfg .Name ==_dfg {_cef ,_edfe :=_bfg .Open ();if _edfe !=nil {return _af .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_edfe );};_fga .Thumbnail ,_ ,_edfe =_b .Decode (_cef );_cef .Close ();if _edfe !=nil {return _af .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_edfe );};_bcc [_fabcc ]=nil ;};};case _egb .ThemeType :_bbdf :=_dbb .NewTheme ();if !_dfb .AddTarget (_dfg ,_bbdf ,_acca ,uint32 (len (_fga ._ecd )+1)){return nil ;};_fga ._ecd =append (_fga ._ecd ,_bbdf );_abd .TargetAttr =_egb .RelativeFilename (_ggdf ,_ddcc .Typ ,_acca ,len (_fga ._ecd ));_dbg :=_egc .NewRelationships ();_dfb .AddTarget (_da .RelationsPathFor (_dfg ),_dbg .X (),_acca ,0);_fga ._ecc =append (_fga ._ecc ,_dbg );case _egb .ImageType :_dfg =_ce .Clean (_dfg );if _deb ,_gecf :=_fga ._gcf [_dfg ];_gecf {_abd .TargetAttr =_deb ;return nil ;};_eabdd :="";for _dea ,_bgbg :=range _bcc {if _bgbg ==nil {continue ;};if _bgbg .Name ==_dfg {_dbbc ,_gag :=_da .ExtractToDiskTmp (_bgbg ,_fga .TmpPath );if _gag !=nil {return _gag ;};_fcd ,_gag :=_egc .ImageFromStorage (_dbbc );if _gag !=nil {return _gag ;};_eabdd =_fcd .Format ;_ada :=_egc .MakeImageRef (_fcd ,&_fga .DocBase ,_fga ._aaa );_fga .Images =append (_fga .Images ,_ada );_bcc [_dea ]=nil ;_dfb .RecordIndex (_dfg ,len (_fga .Images ));break ;};};_faa :=_dfb .IndexFor (_dfg );_abd .TargetAttr =_egb .RelativeImageFilename (_ggdf ,_ddcc .Typ ,_acca ,_faa ,_eabdd );_fga ._gcf [_dfg ]=_abd .TargetAttr ;default:_egb .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_acca ,_dfg );};return nil ;};

// LastViewAttr returns the LastViewAttr property.
func (_cbg ViewProperties )LastViewAttr ()_aff .ST_ViewType {return _cbg ._aadb .LastViewAttr };

// Slide represents a slide of a presentation.
type Slide struct{_ccdd *_aff .CT_SlideIdListEntry ;_aga *_aff .Sld ;_aggb *Presentation ;};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_edce *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_ggd ,_ebc :=_edce .AddSlideWithLayout (l );for _ ,_dffc :=range _ggd .PlaceHolders (){_dffc .Clear ();switch _dffc .Type (){case _aff .ST_PlaceholderTypeFtr ,_aff .ST_PlaceholderTypeDt ,_aff .ST_PlaceholderTypeSldNum :_dffc .Remove ();};};return _ggd ,_ebc ;};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_bef ,_edg :=_aa .Open (filename );if _edg !=nil {return nil ,_af .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_edg );};defer _bef .Close ();_eabd ,_edg :=_aa .Stat (filename );if _edg !=nil {return nil ,_af .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_edg );};_ =_eabd ;return Read (_bef ,_eabd .Size ());};

// NotesTextViewPr returns the NotesTextViewPr property.
func (_ebcc ViewProperties )NotesTextViewPr ()*_aff .CT_NotesTextViewProperties {return _ebcc ._aadb .NotesTextViewPr ;};

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_gec PlaceHolder )ClearAll (){_gec ._bbe .SpPr =_dbb .NewCT_ShapeProperties ();_gec ._bbe .TxBody =_dbb .NewCT_TextBody ();_gec ._bbe .TxBody .LstStyle =_dbb .NewCT_TextListStyle ();};

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_gefa TextBox )SetOffsetY (offY float64 ){_ecda :=_gefa .getOff ();_feac :=_df .ToEMU (offY );_ecda .YAttr =_dbb .ST_Coordinate {ST_CoordinateUnqualified :&_feac };};

// X returns the inner wrapped XML type.
func (_affb PlaceHolder )X ()*_aff .CT_Shape {return _affb ._bbe };

// Properties returns the properties of the TextBox.
func (_eeab Image )Properties ()_ace .ShapeProperties {if _eeab ._acc .SpPr ==nil {_eeab ._acc .SpPr =_dbb .NewCT_ShapeProperties ();};return _ace .MakeShapeProperties (_eeab ._acc .SpPr );};

// ExtractText returns text from a slide as a SlideText object.
func (_egf *Slide )ExtractText ()*SlideText {_bb :=_egf ._aggb ;_bfb :=[]*TextItem {};for _ ,_gfg :=range _egf ._aga .CSld .SpTree .Choice {for _ ,_ed :=range _gfg .Sp {_bfb =append (_bfb ,_afg (_bb ,_ed ,nil ,nil ,_ed .SpPr .Xfrm ,0,_ed .TxBody .P )...);};for _ ,_fa :=range _gfg .GraphicFrame {if _fa !=nil &&_fa .Graphic !=nil &&_fa .Graphic .GraphicData !=nil {_dcc :=_fa .Xfrm ;for _ ,_cf :=range _fa .Graphic .GraphicData .Any {if _ee ,_bg :=_cf .(*_dbb .Tbl );_bg {_cg :=&_ee .CT_Table ;_ebb :=0;for _ad ,_cdb :=range _ee .Tr {for _bbd ,_ca :=range _cdb .Tc {_bbdg :=&TableInfo {Table :_cg ,Row :_cdb ,Cell :_ca ,RowIndex :_ad ,ColIndex :_bbd };_bfb =append (_bfb ,_afg (_bb ,nil ,_fa ,_bbdg ,_dcc ,_ebb ,_ca .TxBody .P )...);_ebb ++;};};};};};};};_db .Sort (sort2d (_bfb ));return &SlideText {Items :_bfb };};

// ExtractText returns text from a presentation as a PresentationText object.
func (_fb *Presentation )ExtractText ()*PresentationText {_ba :=[]*SlideText {};for _ ,_cd :=range _fb .Slides (){_dc :=_cd .ExtractText ();if _dc !=nil {_ba =append (_ba ,_dc );};};return &PresentationText {Slides :_ba };};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_bdc PlaceHolder )Clear (){_bdc .ClearAll ();_ga :=_dbb .NewCT_TextParagraph ();_bdc ._bbe .TxBody .P =[]*_dbb .CT_TextParagraph {_ga };_ga .EndParaRPr =_dbb .NewCT_TextCharacterProperties ();_ga .EndParaRPr .LangAttr =_egb .String ("\u0065\u006e\u002dU\u0053");};

// SlideViewPr returns the SlideViewPr property.
func (_abde ViewProperties )SlideViewPr ()*_aff .CT_SlideViewProperties {return _abde ._aadb .SlideViewPr ;};func _dac ()*Presentation {_afgd :=&Presentation {_dbe :_aff .NewPresentation ()};_afgd ._dbe .SldIdLst =_aff .NewCT_SlideIdList ();_afgd ._dbe .ConformanceAttr =_ff .ST_ConformanceClassTransitional ;_afgd .AppProperties =_egc .NewAppProperties ();_afgd .CoreProperties =_egc .NewCoreProperties ();_afgd ._egee =_egc .NewTableStyles ();_afgd .ContentTypes =_egc .NewContentTypes ();_afgd .Rels =_egc .NewRelationships ();_afgd ._aaa =_egc .NewRelationships ();_afgd ._bbf =NewPresentationProperties ();_afgd ._fd =NewViewProperties ();_afgd ._gcf =map[string ]string {};return _afgd ;};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_fdag Slide )GetPlaceholder (t _aff .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_ega :=range _fdag ._aga .CSld .SpTree .Choice {for _ ,_gccd :=range _ega .Sp {if _gccd .NvSpPr !=nil &&_gccd .NvSpPr .NvPr !=nil &&_gccd .NvSpPr .NvPr .Ph !=nil {if _gccd .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_gccd ,_fdag ._aga },nil ;};};};};return PlaceHolder {},_f .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// OutlineViewPr returns the OutlineViewPr property.
func (_cgdc ViewProperties )OutlineViewPr ()*_aff .CT_OutlineViewProperties {return _cgdc ._aadb .OutlineViewPr ;};func (_aefe *Presentation )Validate ()error {if _cgd :=_aefe ._dbe .Validate ();_cgd !=nil {return _cgd ;};for _gbb ,_gbf :=range _aefe .Slides (){if _fcf :=_gbf .ValidateWithPath (_af .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_gbb ));_fcf !=nil {return _fcf ;};};for _gefb ,_ebdg :=range _aefe ._bfbb {if _geb :=_ebdg .ValidateWithPath (_af .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_gefb ));_geb !=nil {return _geb ;};};for _ccb ,_ccad :=range _aefe ._dgb {if _egeg :=_ccad .ValidateWithPath (_af .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_ccb ));_egeg !=nil {return _egeg ;};};return nil ;};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_dgg *Presentation )SlideLayouts ()[]SlideLayout {_cdef :=[]SlideLayout {};for _ ,_afad :=range _dgg ._dgb {_cdef =append (_cdef ,SlideLayout {_afad });};return _cdef ;};

// SaveToFile writes the Presentation out to a file.
func (_dcf *Presentation )SaveToFile (path string )error {return _dcf .saveToFile (path ,false )};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_dbb .CT_Table ;Row *_dbb .CT_TableRow ;Cell *_dbb .CT_TableCell ;RowIndex int ;ColIndex int ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_fgag *Presentation )AddImage (i _egc .Image )(_egc .ImageRef ,error ){_ecef :=_egc .MakeImageRef (i ,&_fgag .DocBase ,_fgag ._aaa );if i .Data ==nil &&i .Path ==""{return _ecef ,_f .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _ecef ,_f .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _ecef ,_f .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_dccf :=_ea .Add (i .Path );if _dccf !=nil {return _ecef ,_dccf ;};};_fgag .Images =append (_fgag .Images ,_ecef );_fgag .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_fgag .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fgag .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_fgag .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_fgag .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _ecef ,nil ;};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_aeb :_aff .NewPresentationPr ()};};

// Name returns the name of the slide layout.
func (_geec SlideLayout )Name ()string {if _geec ._bacf .CSld !=nil &&_geec ._bacf .CSld .NameAttr !=nil {return *_geec ._bacf .CSld .NameAttr ;};return "";};

// X returns the inner wrapped XML type.
func (_afge SlideMaster )X ()*_aff .SldMaster {return _afge ._bbdc };

// AddParagraph adds a new paragraph to a placeholder.
func (_daa PlaceHolder )AddParagraph ()_ace .Paragraph {_bcb :=_ace .MakeParagraph (_dbb .NewCT_TextParagraph ());_daa ._bbe .TxBody .P =append (_daa ._bbe .TxBody .P ,_bcb .X ());return _bcb ;};func (_edbd *Presentation )nextSlideID ()uint32 {_fee :=uint32 (256);for _ ,_eag :=range _edbd ._dbe .SldIdLst .SldId {if _eag .IdAttr >=_fee {_fee =_eag .IdAttr +1;};};return _fee ;};

// ShowCommentsAttr returns the WebPr property.
func (_agb ViewProperties )ShowCommentsAttr ()*bool {return _agb ._aadb .ShowCommentsAttr };func (_edf sort2d )Swap (i ,j int ){_edf [i ],_edf [j ]=_edf [j ],_edf [i ]};

// X returns the inner wrapped XML type.
func (_cedb ViewProperties )X ()*_aff .ViewPr {return _cedb ._aadb };

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_eff *Presentation )GetColorBySchemeColor (schClr _dbb .ST_SchemeColorVal )*_dbb .CT_Color {if len (_eff ._bfbb )==0||len (_eff ._ecd )==0{return nil ;};var _egeb _dbb .ST_ColorSchemeIndex ;_fff :=_eff ._bfbb [0];_abe :=_fff .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_egeb =_abe .Bg1Attr ;case "\u0062\u0067\u0032":_egeb =_abe .Bg2Attr ;case "\u0074\u0078\u0031":_egeb =_abe .Tx1Attr ;case "\u0074\u0078\u0032":_egeb =_abe .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_egeb =_abe .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_egeb =_abe .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_egeb =_abe .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_egeb =_abe .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_egeb =_abe .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_egeb =_abe .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_egeb =_abe .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_egeb =_abe .FolHlinkAttr ;case "\u0064\u006b\u0031":_egeb =_dbb .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_egeb =_dbb .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_egeb =_dbb .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_egeb =_dbb .ST_ColorSchemeIndexLt2 ;default:_egeb =_dbb .ST_ColorSchemeIndexUnset ;};_fad :=_eff ._ecd [0];_dfeg :=_fad .ThemeElements ;if _dfeg ==nil {return nil ;};var _ceee *_dbb .CT_Color ;_caac :=_dfeg .ClrScheme ;switch _egeb .String (){case "\u0064\u006b\u0031":_ceee =_caac .Dk1 ;case "\u0064\u006b\u0032":_ceee =_caac .Dk2 ;case "\u006c\u0074\u0031":_ceee =_caac .Lt1 ;case "\u006c\u0074\u0032":_ceee =_caac .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ceee =_caac .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ceee =_caac .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ceee =_caac .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ceee =_caac .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ceee =_caac .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ceee =_caac .Accent6 ;case "\u0068\u006c\u0069n\u006b":_ceee =_caac .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ceee =_caac .FolHlink ;default:return nil ;};return _ceee ;};

// X returns TextBox's underlying *pml.CT_Shape.
func (_bdcb TextBox )X ()*_aff .CT_Shape {return _bdcb ._deff };

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// HtmlPubPr returns the HtmlPubPr property.
func (_ecg PresentationProperties )HtmlPubPr ()*_aff .CT_HtmlPublishProperties {return _ecg ._aeb .HtmlPubPr ;};

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_bcad *Presentation )Close ()error {if _bcad .TmpPath !=""{return _ea .RemoveAll (_bcad .TmpPath );};return nil ;};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_abeb Slide )ValidateWithPath (path string )error {if _cdbc :=_abeb ._aga .ValidateWithPath (path );_cdbc !=nil {return _cdbc ;};for _ ,_beb :=range _abeb ._aga .CSld .SpTree .Choice {for _ ,_bed :=range _beb .Sp {if _bed .TxBody !=nil {if len (_bed .TxBody .P )==0{return _f .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// PlaceHolders returns all of the content place holders within a given slide.
func (_bea Slide )PlaceHolders ()[]PlaceHolder {_fdf :=[]PlaceHolder {};for _ ,_eadc :=range _bea ._aga .CSld .SpTree .Choice {for _ ,_fcg :=range _eadc .Sp {if _fcg .NvSpPr !=nil &&_fcg .NvSpPr .NvPr !=nil &&_fcg .NvSpPr .NvPr .Ph !=nil {_fdf =append (_fdf ,PlaceHolder {_fcg ,_bea ._aga });};};};return _fdf ;};

// X returns the inner wrapped XML type.
func (_dg PresentationProperties )X ()*_aff .PresentationPr {return _dg ._aeb };

// SlideMasters returns the slide masters defined in the presentation.
func (_dfdf *Presentation )SlideMasters ()[]SlideMaster {_afd :=[]SlideMaster {};for _bdbb ,_accg :=range _dfdf ._bfbb {_afd =append (_afd ,SlideMaster {_dfdf ,_dfdf ._ccd [_bdbb ],_accg });};return _afd ;};type sort2d []*TextItem ;

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_eac PlaceHolder )SetText (text string ){_eac .Clear ();_fca :=_dbb .NewEG_TextRun ();_fca .R =_dbb .NewCT_RegularTextRun ();_fca .R .T =text ;if len (_eac ._bbe .TxBody .P )==0{_eac ._bbe .TxBody .P =append (_eac ._bbe .TxBody .P ,_dbb .NewCT_TextParagraph ());};_eac ._bbe .TxBody .P [0].EG_TextRun =nil ;_eac ._bbe .TxBody .P [0].EG_TextRun =append (_eac ._bbe .TxBody .P [0].EG_TextRun ,_fca );};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_acf *Presentation )SaveToFileAsTemplate (path string )error {return _acf .saveToFile (path ,true )};

// New initializes and reurns a new presentation
func New ()*Presentation {_aead :=_dac ();_aead .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_aead .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_aead .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_aead .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_aead .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_aead .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_aead .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_aead ._dbe .SldMasterIdLst =_aff .NewCT_SlideMasterIdList ();_bad :=_aff .NewSldMaster ();_bad .ClrMap .Bg1Attr =_dbb .ST_ColorSchemeIndexLt1 ;_bad .ClrMap .Bg2Attr =_dbb .ST_ColorSchemeIndexLt2 ;_bad .ClrMap .Tx1Attr =_dbb .ST_ColorSchemeIndexDk1 ;_bad .ClrMap .Tx2Attr =_dbb .ST_ColorSchemeIndexDk2 ;_bad .ClrMap .Accent1Attr =_dbb .ST_ColorSchemeIndexAccent1 ;_bad .ClrMap .Accent2Attr =_dbb .ST_ColorSchemeIndexAccent2 ;_bad .ClrMap .Accent3Attr =_dbb .ST_ColorSchemeIndexAccent3 ;_bad .ClrMap .Accent4Attr =_dbb .ST_ColorSchemeIndexAccent4 ;_bad .ClrMap .Accent5Attr =_dbb .ST_ColorSchemeIndexAccent5 ;_bad .ClrMap .Accent6Attr =_dbb .ST_ColorSchemeIndexAccent6 ;_bad .ClrMap .HlinkAttr =_dbb .ST_ColorSchemeIndexHlink ;_bad .ClrMap .FolHlinkAttr =_dbb .ST_ColorSchemeIndexFolHlink ;_aead ._bfbb =append (_aead ._bfbb ,_bad );_dae :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideMasterType ,1);_aead .ContentTypes .AddOverride (_dae ,_egb .SlideMasterContentType );_bfd :=_aead ._aaa .AddAutoRelationship (_egb .DocTypePresentation ,_egb .OfficeDocumentType ,1,_egb .SlideMasterType );_eaf :=_aff .NewCT_SlideMasterIdListEntry ();_eaf .IdAttr =_egb .Uint32 (2147483648);_eaf .RIdAttr =_bfd .ID ();_aead ._dbe .SldMasterIdLst .SldMasterId =append (_aead ._dbe .SldMasterIdLst .SldMasterId ,_eaf );_gcfg :=_egc .NewRelationships ();_aead ._ccd =append (_aead ._ccd ,_gcfg );_agc :=_aff .NewSldLayout ();_gcb :=_gcfg .AddAutoRelationship (_egb .DocTypePresentation ,_egb .SlideMasterType ,1,_egb .SlideLayoutType );_agg :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideLayoutType ,1);_aead .ContentTypes .AddOverride (_agg ,_egb .SlideLayoutContentType );_gcfg .AddAutoRelationship (_egb .DocTypePresentation ,_egb .SlideMasterType ,1,_egb .ThemeType );_aead ._dgb =append (_aead ._dgb ,_agc );_bad .SldLayoutIdLst =_aff .NewCT_SlideLayoutIdList ();_gg :=_aff .NewCT_SlideLayoutIdListEntry ();_gg .IdAttr =_egb .Uint32 (2147483649);_gg .RIdAttr =_gcb .ID ();_bad .SldLayoutIdLst .SldLayoutId =append (_bad .SldLayoutIdLst .SldLayoutId ,_gg );_ddg :=_egc .NewRelationships ();_aead ._fcb =append (_aead ._fcb ,_ddg );_ddg .AddAutoRelationship (_egb .DocTypePresentation ,_egb .SlideType ,1,_egb .SlideMasterType );_aead ._dbe .NotesSz .CxAttr =6858000;_aead ._dbe .NotesSz .CyAttr =9144000;_dfc :=_dbb .NewTheme ();_dfc .NameAttr =_egb .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_dfc .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_dfc .ThemeElements .ClrScheme .Dk1 .SysClr =_dbb .NewCT_SystemColor ();_dfc .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_egb .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_dfc .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_dbb .ST_SystemColorValWindowText ;_dfc .ThemeElements .ClrScheme .Lt1 .SysClr =_dbb .NewCT_SystemColor ();_dfc .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_egb .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_dfc .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_dbb .ST_SystemColorValWindow ;_dfc .ThemeElements .ClrScheme .Dk2 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_dfc .ThemeElements .ClrScheme .Lt2 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_dfc .ThemeElements .ClrScheme .Accent1 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_dfc .ThemeElements .ClrScheme .Accent2 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_dfc .ThemeElements .ClrScheme .Accent3 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_dfc .ThemeElements .ClrScheme .Accent4 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_dfc .ThemeElements .ClrScheme .Accent5 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_dfc .ThemeElements .ClrScheme .Accent6 .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_dfc .ThemeElements .ClrScheme .Hlink .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_dfc .ThemeElements .ClrScheme .FolHlink .SrgbClr =_dbb .NewCT_SRgbColor ();_dfc .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_dfc .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_dfc .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_dfc .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_dfc .ThemeElements .FmtScheme .NameAttr =_egb .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_dcca :=_dbb .NewEG_FillProperties ();_dfc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_dfc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_dcca );_dcca .SolidFill =&_dbb .CT_SolidColorFillProperties {SchemeClr :&_dbb .CT_SchemeColor {ValAttr :_dbb .ST_SchemeColorValPhClr }};_dcca =_dbb .NewEG_FillProperties ();_dfc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_dfc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_dcca );_dfc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_dfc .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_dcca );_dcca .GradFill =&_dbb .CT_GradientFillProperties {RotWithShapeAttr :_egb .Bool (true ),GsLst :&_dbb .CT_GradientStopList {},Lin :&_dbb .CT_LinearShadeProperties {}};_dcca .GradFill .Lin .AngAttr =_egb .Int32 (5400000);_dcca .GradFill .Lin .ScaledAttr =_egb .Bool (false );_gceg :=_dbb .NewCT_GradientStop ();_gceg .PosAttr .ST_PositiveFixedPercentageDecimal =_egb .Int32 (0);_gceg .SchemeClr =&_dbb .CT_SchemeColor {ValAttr :_dbb .ST_SchemeColorValPhClr };_dcca .GradFill .GsLst .Gs =append (_dcca .GradFill .GsLst .Gs ,_gceg );_gceg =_dbb .NewCT_GradientStop ();_gceg .PosAttr .ST_PositiveFixedPercentageDecimal =_egb .Int32 (50000);_gceg .SchemeClr =&_dbb .CT_SchemeColor {ValAttr :_dbb .ST_SchemeColorValPhClr };_dcca .GradFill .GsLst .Gs =append (_dcca .GradFill .GsLst .Gs ,_gceg );_dfc .ThemeElements .FmtScheme .LnStyleLst =_dbb .NewCT_LineStyleList ();for _bfbf :=0;_bfbf < 3;_bfbf ++{_dad :=_dbb .NewCT_LineProperties ();_dad .WAttr =_egb .Int32 (int32 (6350*(_bfbf +1)));_dad .CapAttr =_dbb .ST_LineCapFlat ;_dad .CmpdAttr =_dbb .ST_CompoundLineSng ;_dad .AlgnAttr =_dbb .ST_PenAlignmentCtr ;_dfc .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_dfc .ThemeElements .FmtScheme .LnStyleLst .Ln ,_dad );};_dfc .ThemeElements .FmtScheme .EffectStyleLst =_dbb .NewCT_EffectStyleList ();for _bde :=0;_bde < 3;_bde ++{_fdg :=_dbb .NewCT_EffectStyleItem ();_fdg .EffectLst =_dbb .NewCT_EffectList ();_dfc .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_dfc .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_fdg );};_fde :=_dbb .NewEG_FillProperties ();_fde .SolidFill =&_dbb .CT_SolidColorFillProperties {SchemeClr :&_dbb .CT_SchemeColor {ValAttr :_dbb .ST_SchemeColorValPhClr }};_dfc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_dfc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fde );_dfc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_dfc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_fde );_dfc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_dfc .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_dcca );_aead ._ecd =append (_aead ._ecd ,_dfc );_fac :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .ThemeType ,1);_aead .ContentTypes .AddOverride (_fac ,_egb .ThemeContentType );_aead ._aaa .AddAutoRelationship (_egb .DocTypePresentation ,_egb .OfficeDocumentType ,1,_egb .ThemeType );_fabc :=_egc .NewRelationships ();_aead ._ecc =append (_aead ._ecc ,_fabc );return _aead ;};

// ExtLst returns the ExtLst property.
func (_dcff ViewProperties )ExtLst ()*_aff .CT_ExtensionList {return _dcff ._aadb .ExtLst };

// ClrMru returns the ClrMru property.
func (_aef PresentationProperties )ClrMru ()*_dbb .CT_ColorMRU {return _aef ._aeb .ClrMru };

// WebPr returns the WebPr property.
func (_dbd PresentationProperties )WebPr ()*_aff .CT_WebProperties {return _dbd ._aeb .WebPr };

// GetTextBoxes returns a list of all text boxes from a slide.
func (_ggba Slide )GetTextBoxes ()[]*TextBox {_gee :=[]*TextBox {};_dbgf :=_ggba ._aga .CSld .SpTree .Choice ;for _ ,_geed :=range _dbgf {for _ ,_feb :=range _geed .Sp {if _feb .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_feb .NvSpPr .CNvSpPr .TxBoxAttr {_gee =append (_gee ,&TextBox {_feb });};};};return _gee ;};

// Index returns the placeholder index
func (_ab PlaceHolder )Index ()uint32 {if _ab ._bbe .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_ab ._bbe .NvSpPr .NvPr .Ph .IdxAttr ;};

// SetTextAnchor controls the text anchoring
func (_efcf TextBox )SetTextAnchor (a _dbb .ST_TextAnchoringType ){_efcf ._deff .TxBody .BodyPr =_dbb .NewCT_TextBodyProperties ();_efcf ._deff .TxBody .BodyPr .AnchorAttr =a ;};

// TextBox is a text box within a slide.
type TextBox struct{_deff *_aff .CT_Shape };

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_adb *Presentation ;_affe _egc .Relationships ;_bbdc *_aff .SldMaster ;};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_aag *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_fcbg :=range _aag ._dgb {if _fcbg .CSld .NameAttr !=nil &&name ==*_fcbg .CSld .NameAttr {return SlideLayout {_fcbg },nil ;};};return SlideLayout {},_f .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_aadb *_aff .ViewPr };func (_baa sort2d )Len ()int {return len (_baa )};

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_aeb *_aff .PresentationPr };

// Properties returns the properties of the TextBox.
func (_ebdfd TextBox )Properties ()_ace .ShapeProperties {if _ebdfd ._deff .SpPr ==nil {_ebdfd ._deff .SpPr =_dbb .NewCT_ShapeProperties ();};return _ace .MakeShapeProperties (_ebdfd ._deff .SpPr );};func _afg (_cec *Presentation ,_gce *_aff .CT_Shape ,_dbbe *_aff .CT_GraphicalObjectFrame ,_ffa *TableInfo ,_aee *_dbb .CT_Transform2D ,_be int ,_cb []*_dbb .CT_TextParagraph )[]*TextItem {_bd :=[]*TextItem {};var _egd ,_egbb int64 ;_gd :=_aee ==nil ;_fg :=0;for _ ,_ec :=range _cb {for _ ,_dce :=range _ec .EG_TextRun {if _dca :=_dce .R ;_dca !=nil {if !_gd {if _aee .Off !=nil {if _ecb :=_aee .Off .XAttr .ST_CoordinateUnqualified ;_ecb !=nil {_egd =*_ecb ;_gd =true ;};if _bdf :=_aee .Off .YAttr .ST_CoordinateUnqualified ;_bdf !=nil {_egbb =*_bdf ;_gd =true ;};};};_bd =append (_bd ,&TextItem {Presentation :_cec ,Shape :_gce ,GraphicFrame :_dbbe ,TableInfo :_ffa ,Paragraph :_ec ,Run :_dca ,Text :_dca .T ,_ef :_egd ,_eb :_egbb ,_bf :_be ,_de :_fg });_fg ++;};};};return _bd ;};

// Slides returns the slides in the presentation.
func (_dec *Presentation )Slides ()[]Slide {_adeg :=[]Slide {};for _egcd ,_egeec :=range _dec ._bgb {_adeg =append (_adeg ,Slide {_dec ._dbe .SldIdLst .SldId [_egcd ],_egeec ,_dec });};return _adeg ;};

// GridSpacing returns the GridSpacing property.
func (_edd ViewProperties )GridSpacing ()*_dbb .CT_PositiveSize2D {return _edd ._aadb .GridSpacing };

// Image is an image within a slide.
type Image struct{_acc *_aff .CT_Picture };

// AddSlide adds a new slide to the presentation.
func (_cgc *Presentation )AddSlide ()Slide {_dba :=_aff .NewCT_SlideIdListEntry ();_dba .IdAttr =_cgc .nextSlideID ();_cgc ._dbe .SldIdLst .SldId =append (_cgc ._dbe .SldIdLst .SldId ,_dba );_aae :=_aff .NewSld ();_aae .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_aae .CSld .SpTree .GrpSpPr .Xfrm =_dbb .NewCT_GroupTransform2D ();_aae .CSld .SpTree .GrpSpPr .Xfrm .Off =_dbb .NewCT_Point2D ();_aae .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_egb .Int64 (0);_aae .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_egb .Int64 (0);_aae .CSld .SpTree .GrpSpPr .Xfrm .Ext =_dbb .NewCT_PositiveSize2D ();_aae .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_df .Point );_aae .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_df .Point );_aae .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_aae .CSld .SpTree .GrpSpPr .Xfrm .Off ;_aae .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_aae .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_cgc ._bgb =append (_cgc ._bgb ,_aae );_faba :=_cgc ._aaa .AddAutoRelationship (_egb .DocTypePresentation ,_egb .OfficeDocumentType ,len (_cgc ._bgb ),_egb .SlideType );_dba .RIdAttr =_faba .ID ();_ded :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideType ,len (_cgc ._bgb ));_cgc .ContentTypes .AddOverride (_ded ,_egb .SlideContentType );_eceb :=_egc .NewRelationships ();_cgc ._ead =append (_cgc ._ead ,_eceb );_eceb .AddAutoRelationship (_egb .DocTypePresentation ,_egb .SlideType ,len (_cgc ._dgb ),_egb .SlideLayoutType );return Slide {_dba ,_aae ,_cgc };};

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_faf TextBox )SetOffsetX (offX float64 ){_cbf :=_faf .getOff ();_abc :=_df .ToEMU (offX );_cbf .XAttr =_dbb .ST_Coordinate {ST_CoordinateUnqualified :&_abc };};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_bgg *Presentation )SaveAsTemplate (w _ac .Writer )error {return _bgg .save (w ,true )};

// AddImage adds an image textbox to a slide.
func (_beaf Slide )AddImage (img _egc .ImageRef )Image {_dcbd :=_aff .NewCT_GroupShapeChoice ();_beaf ._aga .CSld .SpTree .Choice =append (_beaf ._aga .CSld .SpTree .Choice ,_dcbd );_fce :=_aff .NewCT_Picture ();_dcbd .Pic =append (_dcbd .Pic ,_fce );_fce .NvPicPr .CNvPicPr =_dbb .NewCT_NonVisualPictureProperties ();_fce .NvPicPr .CNvPicPr .PicLocks =_dbb .NewCT_PictureLocking ();_fce .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_egb .Bool (true );_fce .BlipFill =_dbb .NewCT_BlipFillProperties ();_fce .BlipFill .Blip =_dbb .NewCT_Blip ();_dcfc :=_beaf .AddImageToRels (img );_fce .BlipFill .Blip .EmbedAttr =_egb .String (_dcfc );_fce .BlipFill .Stretch =_dbb .NewCT_StretchInfoProperties ();_fce .BlipFill .Stretch .FillRect =_dbb .NewCT_RelativeRect ();_fce .SpPr =_dbb .NewCT_ShapeProperties ();_fce .SpPr .PrstGeom =_dbb .NewCT_PresetGeometry2D ();_fce .SpPr .PrstGeom .PrstAttr =_dbb .ST_ShapeTypeRect ;_abed :=Image {_fce };_dgdf :=img .Size ();_abed .Properties ().SetWidth (_df .Distance (_dgdf .X )*_df .Pixel72 );_abed .Properties ().SetHeight (_df .Distance (_dgdf .Y )*_df .Pixel72 );_abed .Properties ().SetPosition (0,0);return _abed ;};func (_ebg *Presentation )save (_ddc _ac .Writer ,_cdfc bool )error {const _gef ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _aac :=_ebg ._dbe .Validate ();_aac !=nil {_g .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_aac );};if !_eg .GetLicenseKey ().IsLicensed ()&&!_gdg {_af .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_af .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _f .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_ebg ._gece )==0{_ced ,_ecbg :=_eg .GenRefId ("\u0070\u0077");if _ecbg !=nil {_egb .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ecbg );return _ecbg ;};_ebg ._gece =_ced ;};if _aeg :=_eg .Track (_ebg ._gece ,_gef );_aeg !=nil {_af .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_aeg );return _aeg ;};if _cdfc {_ebg .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ebg .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_ebg .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ebg .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_gcd :=_egb .DocTypePresentation ;_aedf :=_ge .NewWriter (_ddc );defer _aedf .Close ();if _fae :=_da .MarshalXML (_aedf ,_egb .BaseRelsFilename ,_ebg .Rels .X ());_fae !=nil {return _fae ;};if _cdec :=_da .MarshalXMLByType (_aedf ,_gcd ,_egb .ExtendedPropertiesType ,_ebg .AppProperties .X ());_cdec !=nil {return _cdec ;};if _ecbd :=_da .MarshalXMLByType (_aedf ,_gcd ,_egb .CorePropertiesType ,_ebg .CoreProperties .X ());_ecbd !=nil {return _ecbd ;};if _bcbc :=_da .MarshalXMLByType (_aedf ,_gcd ,_egb .PresentationPropertiesType ,_ebg ._bbf .X ());_bcbc !=nil {return _bcbc ;};if _aca :=_da .MarshalXMLByType (_aedf ,_gcd ,_egb .ViewPropertiesType ,_ebg ._fd .X ());_aca !=nil {return _aca ;};if _bbb :=_da .MarshalXMLByType (_aedf ,_gcd ,_egb .TableStylesType ,_ebg ._egee .X ());_bbb !=nil {return _bbb ;};if _ebg .CustomProperties .X ()!=nil {if _dfe :=_da .MarshalXMLByType (_aedf ,_gcd ,_egb .CustomPropertiesType ,_ebg .CustomProperties .X ());_dfe !=nil {return _dfe ;};};if _ebg .Thumbnail !=nil {_dag ,_ade :=_aedf .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _ade !=nil {return _ade ;};if _fabe :=_ae .Encode (_dag ,_ebg .Thumbnail ,nil );_fabe !=nil {return _fabe ;};};_agee :=_egb .AbsoluteFilename (_gcd ,_egb .OfficeDocumentType ,0);if _gfb :=_da .MarshalXML (_aedf ,_agee ,_ebg ._dbe );_gfb !=nil {return _gfb ;};if _cca :=_da .MarshalXML (_aedf ,_da .RelationsPathFor (_agee ),_ebg ._aaa .X ());_cca !=nil {return _cca ;};for _bdb ,_dbaa :=range _ebg ._bgb {_feef :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideType ,_bdb +1);_da .MarshalXML (_aedf ,_feef ,_dbaa );if !_ebg ._ead [_bdb ].IsEmpty (){_daf :=_da .RelationsPathFor (_feef );_da .MarshalXML (_aedf ,_daf ,_ebg ._ead [_bdb ].X ());};};for _ebe ,_cdac :=range _ebg ._bfbb {_cfad :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideMasterType ,_ebe +1);_da .MarshalXML (_aedf ,_cfad ,_cdac );if !_ebg ._ccd [_ebe ].IsEmpty (){_aedd :=_da .RelationsPathFor (_cfad );_da .MarshalXML (_aedf ,_aedd ,_ebg ._ccd [_ebe ].X ());};};for _bca ,_gaf :=range _ebg ._dgb {_bcd :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideLayoutType ,_bca +1);_da .MarshalXML (_aedf ,_bcd ,_gaf );if !_ebg ._fcb [_bca ].IsEmpty (){_dfdg :=_da .RelationsPathFor (_bcd );_da .MarshalXML (_aedf ,_dfdg ,_ebg ._fcb [_bca ].X ());};};for _bcaa ,_cfe :=range _ebg ._ecd {_baca :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .ThemeType ,_bcaa +1);_da .MarshalXML (_aedf ,_baca ,_cfe );if !_ebg ._ecc [_bcaa ].IsEmpty (){_cfd :=_da .RelationsPathFor (_baca );_da .MarshalXML (_aedf ,_cfd ,_ebg ._ecc [_bcaa ].X ());};};for _cbe ,_fdc :=range _ebg ._ccf {_gcbg :=_egb .AbsoluteFilename (_gcd ,_egb .ChartType ,_cbe +1);_da .MarshalXML (_aedf ,_gcbg ,_fdc );};for _eed ,_acb :=range _ebg ._fbb {_bfc :=_egb .AbsoluteFilename (_gcd ,_egb .HandoutMasterType ,_eed +1);_da .MarshalXML (_aedf ,_bfc ,_acb );};for _dga ,_ebdf :=range _ebg ._fab {_egea :=_egb .AbsoluteFilename (_gcd ,_egb .NotesMasterType ,_dga +1);_da .MarshalXML (_aedf ,_egea ,_ebdf );};for _dfa ,_dbdc :=range _ebg ._acef {_dbf :=_egb .AbsoluteFilename (_gcd ,_egb .CustomXMLType ,_dfa +1);_da .MarshalXML (_aedf ,_dbf ,_dbdc );};for _ecbc ,_bfda :=range _ebg .Images {if _facf :=_egc .AddImageToZip (_aedf ,_bfda ,_ecbc +1,_egb .DocTypePresentation );_facf !=nil {return _facf ;};};_ebg .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ebg .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ebg .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ebg .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _cgg :=_da .MarshalXML (_aedf ,_egb .ContentTypesFilename ,_ebg .ContentTypes .X ());_cgg !=nil {return _cgg ;};if _cdc :=_ebg .WriteExtraFiles (_aedf );_cdc !=nil {return _cdc ;};return nil ;};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_aff .CT_Shape ;GraphicFrame *_aff .CT_GraphicalObjectFrame ;Paragraph *_dbb .CT_TextParagraph ;Run *_dbb .CT_RegularTextRun ;TableInfo *TableInfo ;_ef int64 ;_eb int64 ;_bf int ;_de int ;};

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_bag *Presentation )GetTableStyleById (id string )*_dbb .CT_TableStyle {_dbgd :=_bag ._egee .TblStyle ();for _ ,_dffg :=range _dbgd {if _dffg .StyleIdAttr ==id {return _dffg ;};};return nil ;};

// Text returns text from a slide as one string separated with line breaks.
func (_eab *SlideText )Text ()string {_dd :=_ag .NewBuffer ([]byte {});for _ ,_bfe :=range _eab .Items {if _bfe .Text !=""{_dd .WriteString (_bfe .Text );_dd .WriteString ("\u000a");};};return _dd .String ();};

// AddTextBox adds an empty textbox to a slide.
func (_faaa Slide )AddTextBox ()TextBox {_begf :=_aff .NewCT_GroupShapeChoice ();_faaa ._aga .CSld .SpTree .Choice =append (_faaa ._aga .CSld .SpTree .Choice ,_begf );_cfed :=_aff .NewCT_Shape ();_begf .Sp =append (_begf .Sp ,_cfed );_cfed .SpPr =_dbb .NewCT_ShapeProperties ();_cfed .SpPr .Xfrm =_dbb .NewCT_Transform2D ();_cfed .SpPr .PrstGeom =_dbb .NewCT_PresetGeometry2D ();_cfed .SpPr .PrstGeom .PrstAttr =_dbb .ST_ShapeTypeRect ;_cfed .NvSpPr =_aff .NewCT_ShapeNonVisual ();_cfed .NvSpPr .CNvSpPr =_dbb .NewCT_NonVisualDrawingShapeProps ();_baeg :=true ;_cfed .NvSpPr .CNvSpPr .TxBoxAttr =&_baeg ;_cfed .TxBody =_dbb .NewCT_TextBody ();_cfed .TxBody .BodyPr =_dbb .NewCT_TextBodyProperties ();_cfed .TxBody .BodyPr .WrapAttr =_dbb .ST_TextWrappingTypeSquare ;_cfed .TxBody .BodyPr .SpAutoFit =_dbb .NewCT_TextShapeAutofit ();_gga :=TextBox {_cfed };_gga .Properties ().SetWidth (3*_df .Inch );_gga .Properties ().SetHeight (1*_df .Inch );_gga .Properties ().SetPosition (0,0);return _gga ;};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_egcc *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_efg :=_aff .NewCT_SlideIdListEntry ();_efg .IdAttr =256;for _ ,_cbb :=range _egcc ._dbe .SldIdLst .SldId {if _cbb .IdAttr >=_efg .IdAttr {_efg .IdAttr =_cbb .IdAttr +1;};};_egcc ._dbe .SldIdLst .SldId =append (_egcc ._dbe .SldIdLst .SldId ,_efg );_bgd :=_aff .NewSld ();_cbc :=_ag .Buffer {};_eafd :=_d .NewEncoder (&_cbc );_dade :=_d .StartElement {Name :_d .Name {Local :"\u0073\u006c\u0069d\u0065"}};_dade .Attr =append (_dade .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dade .Attr =append (_dade .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_dade .Attr =append (_dade .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dade .Attr =append (_dade .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_dade .Attr =append (_dade .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_dade .Attr =append (_dade .Attr ,_d .Attr {Name :_d .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _dgc :=l ._bacf .CSld .MarshalXML (_eafd ,_dade );_dgc !=nil {return Slide {},_dgc ;};_eafd .Flush ();_cad :=_d .NewDecoder (&_cbc );_bgd .CSld =_aff .NewCT_CommonSlideData ();if _gbcf :=_cad .Decode (_bgd .CSld );_gbcf !=nil {return Slide {},_gbcf ;};_bgd .CSld .NameAttr =nil ;_bgd .CSld .SpTree .Choice =_ebab (_bgd .CSld .SpTree .Choice );_egcc ._bgb =append (_egcc ._bgb ,_bgd );_geg :=_egcc ._aaa .AddAutoRelationship (_egb .DocTypePresentation ,_egb .OfficeDocumentType ,len (_egcc ._bgb ),_egb .SlideType );_efg .RIdAttr =_geg .ID ();_afac :=_egb .AbsoluteFilename (_egb .DocTypePresentation ,_egb .SlideType ,len (_egcc ._bgb ));_egcc .ContentTypes .AddOverride (_afac ,_egb .SlideContentType );_ffg :=_egc .NewRelationships ();_egcc ._ead =append (_egcc ._ead ,_ffg );_bgbd :=len (_egcc ._ead )-1;for _ged ,_caa :=range _egcc ._dgb {if _caa ==l .X (){_dbc :=_egcc ._fcb [_ged ];for _ ,_eage :=range _dbc .X ().Relationship {if _eage .TypeAttr !=_egb .SlideMasterType {_egcc ._ead [_bgbd ].X ().Relationship =append (_egcc ._ead [_bgbd ].X ().Relationship ,_eage );};};_ffg .AddAutoRelationship (_egb .DocTypePresentation ,_egb .SlideType ,_ged +1,_egb .SlideLayoutType );};};_fbg :=Slide {_efg ,_bgd ,_egcc };return _fbg ,nil ;};

// ShowPr returns the ShowPr property.
func (_bac PresentationProperties )ShowPr ()*_aff .CT_ShowProperties {return _bac ._aeb .ShowPr };

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_bce Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_afc :=range _bce ._aga .CSld .SpTree .Choice {for _ ,_begg :=range _afc .Sp {if _begg .NvSpPr !=nil &&_begg .NvSpPr .NvPr !=nil &&_begg .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_begg .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_begg .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_begg .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_begg ,_bce ._aga },nil ;};};};};return PlaceHolder {},_f .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_bbe *_aff .CT_Shape ;_gbc *_aff .Sld ;};

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_aadb :_aff .NewViewPr ()}};

// X returns the inner wrapped XML type.
func (_gbg Slide )X ()*_aff .Sld {return _gbg ._aga };

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_beg *Presentation )GetImageByRelID (relID string )(_egc .ImageRef ,bool ){for _ ,_bge :=range _beg .Images {if _bge .RelID ()==relID {return _bge ,true ;};};return _egc .ImageRef {},false ;};

// PrnPr returns the PrnPr property.
func (_gab PresentationProperties )PrnPr ()*_aff .CT_PrintProperties {return _gab ._aeb .PrnPr };

// AddTable adds an empty table to a slide.
func (_cdba Slide )AddTable ()*_egc .Table {_ecga :=_aff .NewCT_GroupShapeChoice ();_cdba ._aga .CSld .SpTree .Choice =append (_cdba ._aga .CSld .SpTree .Choice ,_ecga );_bdd :=_aff .NewCT_GraphicalObjectFrame ();_ecga .GraphicFrame =append (_ecga .GraphicFrame ,_bdd );_bdd .Xfrm .Off =_dbb .NewCT_Point2D ();_bbg :=int64 (1);_bdd .Xfrm .Off .XAttr =_dbb .ST_Coordinate {ST_CoordinateUnqualified :&_bbg };_bdd .Xfrm .Off .YAttr =_dbb .ST_Coordinate {ST_CoordinateUnqualified :&_bbg };_ebdc :=_bdd .Graphic .CT_GraphicalObject .GraphicData ;_ebdc .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_dda :=_egc .NewTableWithXfrm (_bdd .Xfrm );_ebdc .Any =append (_ebdc .Any ,_dda .X ());return _dda ;};func _ebab (_eda []*_aff .CT_GroupShapeChoice )[]*_aff .CT_GroupShapeChoice {var _bgc []*_aff .CT_GroupShapeChoice ;for _ ,_cde :=range _eda {if len (_cde .Pic )==0{_bgc =append (_bgc ,_cde );};};return _bgc ;};