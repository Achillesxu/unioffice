//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_ga "archive/zip";_b "bytes";_ad "encoding/xml";_gac "errors";_gg "fmt";_dd "github.com/unidoc/unioffice";_f "github.com/unidoc/unioffice/common";_ggd "github.com/unidoc/unioffice/common/tempstorage";_bc "github.com/unidoc/unioffice/drawing";_gacg "github.com/unidoc/unioffice/internal/license";_ea "github.com/unidoc/unioffice/measurement";_ac "github.com/unidoc/unioffice/schema/soo/dml";_acg "github.com/unidoc/unioffice/schema/soo/dml/chart";_gf "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_ef "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_ff "github.com/unidoc/unioffice/schema/soo/pml";_e "github.com/unidoc/unioffice/zippkg";_g "image";_ae "image/jpeg";_a "io";_c "log";_bb "math";_gd "os";_bf "path";_bgg "sort";_dc "strconv";_bg "strings";);

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_dbde :_ff .NewViewPr ()}};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_efbc :_ff .NewPresentationPr ()};};

// ClrMru returns the ClrMru property.
func (_baa PresentationProperties )ClrMru ()*_ac .CT_ColorMRU {return _baa ._efbc .ClrMru };func (_gad sort2d )Swap (i ,j int ){_gad [i ],_gad [j ]=_gad [j ],_gad [i ]};

// New initializes and reurns a new presentation
func New ()*Presentation {_gdbg :=_afd ();_gdbg .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_gdbg .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_gdbg .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_gdbg .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_gdbg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_gdbg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_gdbg .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_gdbg ._fbec .SldMasterIdLst =_ff .NewCT_SlideMasterIdList ();_ffa :=_ff .NewSldMaster ();_ffa .ClrMap .Bg1Attr =_ac .ST_ColorSchemeIndexLt1 ;_ffa .ClrMap .Bg2Attr =_ac .ST_ColorSchemeIndexLt2 ;_ffa .ClrMap .Tx1Attr =_ac .ST_ColorSchemeIndexDk1 ;_ffa .ClrMap .Tx2Attr =_ac .ST_ColorSchemeIndexDk2 ;_ffa .ClrMap .Accent1Attr =_ac .ST_ColorSchemeIndexAccent1 ;_ffa .ClrMap .Accent2Attr =_ac .ST_ColorSchemeIndexAccent2 ;_ffa .ClrMap .Accent3Attr =_ac .ST_ColorSchemeIndexAccent3 ;_ffa .ClrMap .Accent4Attr =_ac .ST_ColorSchemeIndexAccent4 ;_ffa .ClrMap .Accent5Attr =_ac .ST_ColorSchemeIndexAccent5 ;_ffa .ClrMap .Accent6Attr =_ac .ST_ColorSchemeIndexAccent6 ;_ffa .ClrMap .HlinkAttr =_ac .ST_ColorSchemeIndexHlink ;_ffa .ClrMap .FolHlinkAttr =_ac .ST_ColorSchemeIndexFolHlink ;_gdbg ._aeg =append (_gdbg ._aeg ,_ffa );_eff :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideMasterType ,1);_gdbg .ContentTypes .AddOverride (_eff ,_dd .SlideMasterContentType );_begb :=_gdbg ._cbag .AddAutoRelationship (_dd .DocTypePresentation ,_dd .OfficeDocumentType ,1,_dd .SlideMasterType );_aea :=_ff .NewCT_SlideMasterIdListEntry ();_aea .IdAttr =_dd .Uint32 (2147483648);_aea .RIdAttr =_begb .ID ();_gdbg ._fbec .SldMasterIdLst .SldMasterId =append (_gdbg ._fbec .SldMasterIdLst .SldMasterId ,_aea );_abd :=_f .NewRelationships ();_gdbg ._bfca =append (_gdbg ._bfca ,_abd );_edb :=_ff .NewSldLayout ();_gca :=_abd .AddAutoRelationship (_dd .DocTypePresentation ,_dd .SlideMasterType ,1,_dd .SlideLayoutType );_dbb :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideLayoutType ,1);_gdbg .ContentTypes .AddOverride (_dbb ,_dd .SlideLayoutContentType );_abd .AddAutoRelationship (_dd .DocTypePresentation ,_dd .SlideMasterType ,1,_dd .ThemeType );_gdbg ._ada =append (_gdbg ._ada ,_edb );_ffa .SldLayoutIdLst =_ff .NewCT_SlideLayoutIdList ();_aae :=_ff .NewCT_SlideLayoutIdListEntry ();_aae .IdAttr =_dd .Uint32 (2147483649);_aae .RIdAttr =_gca .ID ();_ffa .SldLayoutIdLst .SldLayoutId =append (_ffa .SldLayoutIdLst .SldLayoutId ,_aae );_fdg :=_f .NewRelationships ();_gdbg ._gab =append (_gdbg ._gab ,_fdg );_fdg .AddAutoRelationship (_dd .DocTypePresentation ,_dd .SlideType ,1,_dd .SlideMasterType );_gdbg ._fbec .NotesSz .CxAttr =6858000;_gdbg ._fbec .NotesSz .CyAttr =9144000;_bbe :=_ac .NewTheme ();_bbe .NameAttr =_dd .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_bbe .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_bbe .ThemeElements .ClrScheme .Dk1 .SysClr =_ac .NewCT_SystemColor ();_bbe .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_dd .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_bbe .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_ac .ST_SystemColorValWindowText ;_bbe .ThemeElements .ClrScheme .Lt1 .SysClr =_ac .NewCT_SystemColor ();_bbe .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_dd .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_bbe .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_ac .ST_SystemColorValWindow ;_bbe .ThemeElements .ClrScheme .Dk2 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_bbe .ThemeElements .ClrScheme .Lt2 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_bbe .ThemeElements .ClrScheme .Accent1 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_bbe .ThemeElements .ClrScheme .Accent2 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_bbe .ThemeElements .ClrScheme .Accent3 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_bbe .ThemeElements .ClrScheme .Accent4 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_bbe .ThemeElements .ClrScheme .Accent5 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_bbe .ThemeElements .ClrScheme .Accent6 .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_bbe .ThemeElements .ClrScheme .Hlink .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_bbe .ThemeElements .ClrScheme .FolHlink .SrgbClr =_ac .NewCT_SRgbColor ();_bbe .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_bbe .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_bbe .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_bbe .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_bbe .ThemeElements .FmtScheme .NameAttr =_dd .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_gabd :=_ac .NewEG_FillProperties ();_bbe .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_bbe .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_gabd );_gabd .SolidFill =&_ac .CT_SolidColorFillProperties {SchemeClr :&_ac .CT_SchemeColor {ValAttr :_ac .ST_SchemeColorValPhClr }};_gabd =_ac .NewEG_FillProperties ();_bbe .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_bbe .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_gabd );_bbe .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_bbe .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_gabd );_gabd .GradFill =&_ac .CT_GradientFillProperties {RotWithShapeAttr :_dd .Bool (true ),GsLst :&_ac .CT_GradientStopList {},Lin :&_ac .CT_LinearShadeProperties {}};_gabd .GradFill .Lin .AngAttr =_dd .Int32 (5400000);_gabd .GradFill .Lin .ScaledAttr =_dd .Bool (false );_eegf :=_ac .NewCT_GradientStop ();_eegf .PosAttr .ST_PositiveFixedPercentageDecimal =_dd .Int32 (0);_eegf .SchemeClr =&_ac .CT_SchemeColor {ValAttr :_ac .ST_SchemeColorValPhClr };_gabd .GradFill .GsLst .Gs =append (_gabd .GradFill .GsLst .Gs ,_eegf );_eegf =_ac .NewCT_GradientStop ();_eegf .PosAttr .ST_PositiveFixedPercentageDecimal =_dd .Int32 (50000);_eegf .SchemeClr =&_ac .CT_SchemeColor {ValAttr :_ac .ST_SchemeColorValPhClr };_gabd .GradFill .GsLst .Gs =append (_gabd .GradFill .GsLst .Gs ,_eegf );_bbe .ThemeElements .FmtScheme .LnStyleLst =_ac .NewCT_LineStyleList ();for _gdcd :=0;_gdcd < 3;_gdcd ++{_bdb :=_ac .NewCT_LineProperties ();_bdb .WAttr =_dd .Int32 (int32 (6350*(_gdcd +1)));_bdb .CapAttr =_ac .ST_LineCapFlat ;_bdb .CmpdAttr =_ac .ST_CompoundLineSng ;_bdb .AlgnAttr =_ac .ST_PenAlignmentCtr ;_bbe .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_bbe .ThemeElements .FmtScheme .LnStyleLst .Ln ,_bdb );};_bbe .ThemeElements .FmtScheme .EffectStyleLst =_ac .NewCT_EffectStyleList ();for _gaf :=0;_gaf < 3;_gaf ++{_aef :=_ac .NewCT_EffectStyleItem ();_aef .EffectLst =_ac .NewCT_EffectList ();_bbe .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_bbe .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_aef );};_ddf :=_ac .NewEG_FillProperties ();_ddf .SolidFill =&_ac .CT_SolidColorFillProperties {SchemeClr :&_ac .CT_SchemeColor {ValAttr :_ac .ST_SchemeColorValPhClr }};_bbe .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_bbe .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ddf );_bbe .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_bbe .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ddf );_bbe .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_bbe .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_gabd );_gdbg ._ffb =append (_gdbg ._ffb ,_bbe );_bac :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .ThemeType ,1);_gdbg .ContentTypes .AddOverride (_bac ,_dd .ThemeContentType );_gdbg ._cbag .AddAutoRelationship (_dd .DocTypePresentation ,_dd .OfficeDocumentType ,1,_dd .ThemeType );_afe :=_f .NewRelationships ();_gdbg ._bga =append (_gdbg ._bga ,_afe );return _gdbg ;};

// OutlineViewPr returns the OutlineViewPr property.
func (_daca ViewProperties )OutlineViewPr ()*_ff .CT_OutlineViewProperties {return _daca ._dbde .OutlineViewPr ;};

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_cda ,_geec :=Open (fn );if _geec !=nil {return nil ,_geec ;};return _cda ,nil ;};

// Type returns the placeholder type
func (_cbe PlaceHolder )Type ()_ff .ST_PlaceholderType {return _cbe ._fcb .NvSpPr .NvPr .Ph .TypeAttr };

// SetTextAnchor controls the text anchoring
func (_gcfb TextBox )SetTextAnchor (a _ac .ST_TextAnchoringType ){_gcfb ._gfeg .TxBody .BodyPr =_ac .NewCT_TextBodyProperties ();_gcfb ._gfeg .TxBody .BodyPr .AnchorAttr =a ;};

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_eed PlaceHolder )SetText (text string ){_eed .Clear ();_ccb :=_ac .NewEG_TextRun ();_ccb .R =_ac .NewCT_RegularTextRun ();_ccb .R .T =text ;if len (_eed ._fcb .TxBody .P )==0{_eed ._fcb .TxBody .P =append (_eed ._fcb .TxBody .P ,_ac .NewCT_TextParagraph ());};_eed ._fcb .TxBody .P [0].EG_TextRun =nil ;_eed ._fcb .TxBody .P [0].EG_TextRun =append (_eed ._fcb .TxBody .P [0].EG_TextRun ,_ccb );};

// SaveToFile writes the Presentation out to a file.
func (_dad *Presentation )SaveToFile (path string )error {return _dad .saveToFile (path ,false )};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_fgaf *_ff .SldLayout };

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_cdg *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_dgg ,_agg :=_cdg .AddSlideWithLayout (l );for _ ,_fgb :=range _dgg .PlaceHolders (){_fgb .Clear ();switch _fgb .Type (){case _ff .ST_PlaceholderTypeFtr ,_ff .ST_PlaceholderTypeDt ,_ff .ST_PlaceholderTypeSldNum :_fgb .Remove ();};};return _dgg ,_agg ;};

// Index returns the placeholder index
func (_bdf PlaceHolder )Index ()uint32 {if _bdf ._fcb .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_bdf ._fcb .NvSpPr .NvPr .Ph .IdxAttr ;};

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_afb Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_fga :=range _afb ._gba .CSld .SpTree .Choice {for _ ,_adbf :=range _fga .Sp {if _adbf .NvSpPr !=nil &&_adbf .NvSpPr .NvPr !=nil &&_adbf .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_adbf .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_adbf .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_adbf .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_adbf ,_afb ._gba },nil ;};};};};return PlaceHolder {},_gac .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_abf Slide )ValidateWithPath (path string )error {if _cebc :=_abf ._gba .ValidateWithPath (path );_cebc !=nil {return _cebc ;};for _ ,_ceec :=range _abf ._gba .CSld .SpTree .Choice {for _ ,_efe :=range _ceec .Sp {if _efe .TxBody !=nil {if len (_efe .TxBody .P )==0{return _gac .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_ffgd *Presentation )GetTableStyleById (id string )*_ac .CT_TableStyle {_cac :=_ffgd ._deg .TblStyle ();for _ ,_ffaf :=range _cac {if _ffaf .StyleIdAttr ==id {return _ffaf ;};};return nil ;};

// Text returns text from a slide as one string separated with line breaks.
func (_gga *SlideText )Text ()string {_ed :=_b .NewBuffer ([]byte {});for _ ,_bbg :=range _gga .Items {if _bbg .Text !=""{_ed .WriteString (_bbg .Text );_ed .WriteString ("\u000a");};};return _ed .String ();};

// X returns TextBox's underlying *pml.CT_Shape.
func (_ccfb TextBox )X ()*_ff .CT_Shape {return _ccfb ._gfeg };

// X returns the inner wrapped XML type.
func (_abg PlaceHolder )X ()*_ff .CT_Shape {return _abg ._fcb };

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_fgba *Presentation )Close ()error {if _fgba .TmpPath !=""{return _ggd .RemoveAll (_fgba .TmpPath );};return nil ;};

// WebPr returns the WebPr property.
func (_eged PresentationProperties )WebPr ()*_ff .CT_WebProperties {return _eged ._efbc .WebPr };

// Save writes the presentation out to a writer in the Zip package format
func (_dabf *Presentation )Save (w _a .Writer )error {return _dabf .save (w ,false )};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_ac .CT_Table ;Row *_ac .CT_TableRow ;Cell *_ac .CT_TableCell ;RowIndex int ;ColIndex int ;};type sort2d []*TextItem ;

// AddParagraph adds a new paragraph to a placeholder.
func (_daeg PlaceHolder )AddParagraph ()_bc .Paragraph {_aee :=_bc .MakeParagraph (_ac .NewCT_TextParagraph ());_daeg ._fcb .TxBody .P =append (_daeg ._fcb .TxBody .P ,_aee .X ());return _aee ;};const _eec float64 =500000;

// X returns the inner wrapped XML type.
func (_degd *Presentation )X ()*_ff .Presentation {return _degd ._fbec };

// RemoveSlide removes a slide from a presentation.
func (_caae *Presentation )RemoveSlide (s Slide )error {_acfg :=false ;_bgc :=0;for _bfeb ,_bggd :=range _caae ._fd {if _bggd ==s ._gba {if _caae ._fbec .SldIdLst .SldId [_bfeb ]!=s ._eee {return _gac .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_caae ._fd [_bfeb :],_caae ._fd [_bfeb +1:]);_caae ._fd =_caae ._fd [0:len (_caae ._fd )-1];copy (_caae ._ce [_bfeb :],_caae ._ce [_bfeb +1:]);_caae ._ce =_caae ._ce [0:len (_caae ._ce )-1];copy (_caae ._fbec .SldIdLst .SldId [_bfeb :],_caae ._fbec .SldIdLst .SldId [_bfeb +1:]);_caae ._fbec .SldIdLst .SldId =_caae ._fbec .SldIdLst .SldId [0:len (_caae ._fbec .SldIdLst .SldId )-1];_acfg =true ;_bgc =_bfeb ;};};if !_acfg {return _gac .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_deab :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideType ,0);return _caae .ContentTypes .RemoveOverrideByIndex (_deab ,_bgc );};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_bdc ,_bcb :=_gd .Open (filename );if _bcb !=nil {return nil ,_gg .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_bcb );};defer _bdc .Close ();_dfe ,_bcb :=_gd .Stat (filename );if _bcb !=nil {return nil ,_gg .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_bcb );};_ =_dfe ;return Read (_bdc ,_dfe .Size ());};

// Presentation is the a presentation base document.
type Presentation struct{_f .DocBase ;_fbec *_ff .Presentation ;_cbag _f .Relationships ;_fd []*_ff .Sld ;_ce []_f .Relationships ;_aeg []*_ff .SldMaster ;_bfca []_f .Relationships ;_ada []*_ff .SldLayout ;_gab []_f .Relationships ;_ffb []*_ac .Theme ;_bga []_f .Relationships ;_deg _f .TableStyles ;_ccd PresentationProperties ;_dg ViewProperties ;_bdfb []*_ac .CT_Hyperlink ;_bcd []*_acg .ChartSpace ;_degb []*_ff .HandoutMaster ;_bfe []*_ff .NotesMaster ;_cec []*_dd .XSDAny ;_cce map[string ]string ;_gcg string ;};

// Slides returns the slides in the presentation.
func (_fac *Presentation )Slides ()[]Slide {_agag :=[]Slide {};for _cdb ,_eag :=range _fac ._fd {_agag =append (_agag ,Slide {_fac ._fbec .SldIdLst .SldId [_cdb ],_eag ,_fac });};return _agag ;};

// Less is for implementing sorting of two locations. Symbols share the same location if they are in the same paragraph or table. One location is 'less' than another first by y coordinate, if y coordinates are equal or differ by less than yEpsilon, then x coordinates are compared, then if they are also equal, indexes of locations in the table are compared, then positions of locations in a paragraph.
func (_bcg sort2d )Less (i ,j int )bool {_gdc ,_cfg :=_bcg [i ],_bcg [j ];_edf ,_ede :=_gdc ._da ,_cfg ._da ;_cff ,_fbe :=len (_edf )-1,len (_ede )-1;_fgf ,_acc :=0,0;for {_ffcge ,_fce ,_ffd ,_gbc ,_eda ,_fa ,_bcf ,_bbgb :=_edf [_fgf ]._dae ,_ede [_acc ]._dae ,_edf [_fgf ]._ge ,_ede [_acc ]._ge ,_edf [_fgf ]._bbc ,_ede [_acc ]._bbc ,_edf [_fgf ]._ca ,_ede [_acc ]._ca ;if _ffcge ==_fce ||((_bb .Abs (float64 (_ffcge )-float64 (_fce ))< _eec )&&((_ffcge >=_fce &&_ffcge <=_gbc )||(_fce >=_ffcge &&_fce <=_ffd ))&&(_bcf < _fa ||_eda > _bbgb )){if _eda ==_fa {if _fgf < _cff &&_acc < _fbe {_fgf ++;_acc ++;continue ;};if _fgf >=_cff &&_acc >=_fbe {break ;};return _fgf >=_cff ;}else {return _eda < _fa ;};}else {return _ffcge < _fce ;};};_ag ,_ddc ,_aed ,_eab :=_gdc ._fff ,_cfg ._fff ,_gdc ._ffc ,_cfg ._ffc ;if _ag ==_ddc {return _aed <=_eab ;};return _ag < _ddc ;};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};func _dfa (_cgd []*_ff .CT_GroupShapeChoice )[]*_ff .CT_GroupShapeChoice {var _afec []*_ff .CT_GroupShapeChoice ;for _ ,_bca :=range _cgd {if len (_bca .Pic )==0{_afec =append (_afec ,_bca );};};return _afec ;};func _gged (_fge *Presentation ,_gbb *_ff .CT_Shape ,_fc *_ff .CT_GraphicalObjectFrame ,_eega *TableInfo ,_bbd *_ac .CT_Transform2D ,_cc int ,_eg []rectangle ,_fe []*_ac .CT_TextParagraph )[]*TextItem {_bggga :=[]*TextItem {};var _caa ,_ffcg ,_ab ,_bdg ,_ade ,_bddf int64 ;_cd :=_bbd ==nil ;_ege :=0;for _ ,_bec :=range _fe {for _ ,_ggee :=range _bec .EG_TextRun {if _cdc :=_ggee .R ;_cdc !=nil {if !_cd {if _bbd .Off !=nil {if _aec :=_bbd .Ext ;_aec !=nil {_ade ,_bddf =_aec .CxAttr ,_aec .CyAttr ;};if _cba :=_bbd .Off .XAttr .ST_CoordinateUnqualified ;_cba !=nil {_caa =*_cba ;_ffcg =_caa +_ade ;_cd =true ;};if _caee :=_bbd .Off .YAttr .ST_CoordinateUnqualified ;_caee !=nil {_ab =*_caee ;_bdg =_ab +_bddf ;_cd =true ;};};};_dbc :=append ([]rectangle {},_eg ...);_dbc =append (_dbc ,rectangle {_bbc :_caa ,_ca :_ffcg ,_dae :_ab ,_ge :_bdg });_bggga =append (_bggga ,&TextItem {Presentation :_fge ,Shape :_gbb ,GraphicFrame :_fc ,TableInfo :_eega ,Paragraph :_bec ,Run :_cdc ,Text :_cdc .T ,_da :_dbc ,_fff :_cc ,_ffc :_ege });_ege ++;};};};return _bggga ;};

// ExtLst returns the ExtLst property.
func (_fae ViewProperties )ExtLst ()*_ff .CT_ExtensionList {return _fae ._dbde .ExtLst };

// X returns the inner wrapped XML type.
func (_ggaa SlideLayout )X ()*_ff .SldLayout {return _ggaa ._fgaf };

// AddSlide adds a new slide to the presentation.
func (_abdd *Presentation )AddSlide ()Slide {_deb :=_ff .NewCT_SlideIdListEntry ();_deb .IdAttr =_abdd .nextSlideID ();_abdd ._fbec .SldIdLst .SldId =append (_abdd ._fbec .SldIdLst .SldId ,_deb );_daea :=_ff .NewSld ();_daea .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_daea .CSld .SpTree .GrpSpPr .Xfrm =_ac .NewCT_GroupTransform2D ();_daea .CSld .SpTree .GrpSpPr .Xfrm .Off =_ac .NewCT_Point2D ();_daea .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_dd .Int64 (0);_daea .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_dd .Int64 (0);_daea .CSld .SpTree .GrpSpPr .Xfrm .Ext =_ac .NewCT_PositiveSize2D ();_daea .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_ea .Point );_daea .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_ea .Point );_daea .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_daea .CSld .SpTree .GrpSpPr .Xfrm .Off ;_daea .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_daea .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_abdd ._fd =append (_abdd ._fd ,_daea );_dba :=_abdd ._cbag .AddAutoRelationship (_dd .DocTypePresentation ,_dd .OfficeDocumentType ,len (_abdd ._fd ),_dd .SlideType );_deb .RIdAttr =_dba .ID ();_bdbe :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideType ,len (_abdd ._fd ));_abdd .ContentTypes .AddOverride (_bdbe ,_dd .SlideContentType );_gce :=_f .NewRelationships ();_abdd ._ce =append (_abdd ._ce ,_gce );_gce .AddAutoRelationship (_dd .DocTypePresentation ,_dd .SlideType ,len (_abdd ._ada ),_dd .SlideLayoutType );return Slide {_deb ,_daea ,_abdd };};

// SlideViewPr returns the SlideViewPr property.
func (_dafb ViewProperties )SlideViewPr ()*_ff .CT_SlideViewProperties {return _dafb ._dbde .SlideViewPr };

// Name returns the name of the slide layout.
func (_bggcc SlideLayout )Name ()string {if _bggcc ._fgaf .CSld !=nil &&_bggcc ._fgaf .CSld .NameAttr !=nil {return *_bggcc ._fgaf .CSld .NameAttr ;};return "";};

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_beb *Presentation )GetColorBySchemeColor (schClr _ac .ST_SchemeColorVal )*_ac .CT_Color {if len (_beb ._aeg )==0||len (_beb ._ffb )==0{return nil ;};var _ebef _ac .ST_ColorSchemeIndex ;_fcf :=_beb ._aeg [0];_bee :=_fcf .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_ebef =_bee .Bg1Attr ;case "\u0062\u0067\u0032":_ebef =_bee .Bg2Attr ;case "\u0074\u0078\u0031":_ebef =_bee .Tx1Attr ;case "\u0074\u0078\u0032":_ebef =_bee .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ebef =_bee .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ebef =_bee .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ebef =_bee .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ebef =_bee .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ebef =_bee .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ebef =_bee .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_ebef =_bee .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ebef =_bee .FolHlinkAttr ;case "\u0064\u006b\u0031":_ebef =_ac .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_ebef =_ac .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_ebef =_ac .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_ebef =_ac .ST_ColorSchemeIndexLt2 ;default:_ebef =_ac .ST_ColorSchemeIndexUnset ;};_gcea :=_beb ._ffb [0];_bfbf :=_gcea .ThemeElements ;if _bfbf ==nil {return nil ;};var _fbef *_ac .CT_Color ;_abbc :=_bfbf .ClrScheme ;switch _ebef .String (){case "\u0064\u006b\u0031":_fbef =_abbc .Dk1 ;case "\u0064\u006b\u0032":_fbef =_abbc .Dk2 ;case "\u006c\u0074\u0031":_fbef =_abbc .Lt1 ;case "\u006c\u0074\u0032":_fbef =_abbc .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_fbef =_abbc .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_fbef =_abbc .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_fbef =_abbc .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_fbef =_abbc .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_fbef =_abbc .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_fbef =_abbc .Accent6 ;case "\u0068\u006c\u0069n\u006b":_fbef =_abbc .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_fbef =_abbc .FolHlink ;default:return nil ;};return _fbef ;};

// LastViewAttr returns the LastViewAttr property.
func (_bcae ViewProperties )LastViewAttr ()_ff .ST_ViewType {return _bcae ._dbde .LastViewAttr };

// AddImage adds an image textbox to a slide.
func (_gff Slide )AddImage (img _f .ImageRef )Image {_cdbe :=_ff .NewCT_GroupShapeChoice ();_gff ._gba .CSld .SpTree .Choice =append (_gff ._gba .CSld .SpTree .Choice ,_cdbe );_ecd :=_ff .NewCT_Picture ();_cdbe .Pic =append (_cdbe .Pic ,_ecd );_ecd .NvPicPr .CNvPicPr =_ac .NewCT_NonVisualPictureProperties ();_ecd .NvPicPr .CNvPicPr .PicLocks =_ac .NewCT_PictureLocking ();_ecd .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_dd .Bool (true );_ecd .BlipFill =_ac .NewCT_BlipFillProperties ();_ecd .BlipFill .Blip =_ac .NewCT_Blip ();_egde :=_gff .AddImageToRels (img );_ecd .BlipFill .Blip .EmbedAttr =_dd .String (_egde );_ecd .BlipFill .Stretch =_ac .NewCT_StretchInfoProperties ();_ecd .BlipFill .Stretch .FillRect =_ac .NewCT_RelativeRect ();_ecd .SpPr =_ac .NewCT_ShapeProperties ();_ecd .SpPr .PrstGeom =_ac .NewCT_PresetGeometry2D ();_ecd .SpPr .PrstGeom .PrstAttr =_ac .ST_ShapeTypeRect ;_bdac :=Image {_ecd };_cacc :=img .Size ();_bdac .Properties ().SetWidth (_ea .Distance (_cacc .X )*_ea .Pixel72 );_bdac .Properties ().SetHeight (_ea .Distance (_cacc .Y )*_ea .Pixel72 );_bdac .Properties ().SetPosition (0,0);return _bdac ;};

// ExtractText returns text from a slide as a SlideText object.
func (_eb *Slide )ExtractText ()*SlideText {_dab :=_geg (_eb ._gcf ,_eb ._gba .CSld .SpTree .Choice ,[]rectangle {},[]*TextItem {});_bgg .Sort (sort2d (_dab ));return &SlideText {Items :_dab };};

// NotesTextViewPr returns the NotesTextViewPr property.
func (_ebg ViewProperties )NotesTextViewPr ()*_ff .CT_NotesTextViewProperties {return _ebg ._dbde .NotesTextViewPr ;};

// Properties returns the properties of the TextBox.
func (_dec Image )Properties ()_bc .ShapeProperties {if _dec ._acd .SpPr ==nil {_dec ._acd .SpPr =_ac .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_dec ._acd .SpPr );};

// Remove removes a placeholder from a presentation.
func (_aeb PlaceHolder )Remove ()error {for _cag ,_dff :=range _aeb ._ebe .CSld .SpTree .Choice {for _ ,_efb :=range _dff .Sp {if _efb ==_aeb ._fcb {copy (_aeb ._ebe .CSld .SpTree .Choice [_cag :],_aeb ._ebe .CSld .SpTree .Choice [_cag +1:]);_aeb ._ebe .CSld .SpTree .Choice =_aeb ._ebe .CSld .SpTree .Choice [0:len (_aeb ._ebe .CSld .SpTree .Choice )-1];return nil ;};};};return _gac .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};func (_dfac *Presentation )onNewRelationship (_ccg *_e .DecodeMap ,_cgg ,_dfff string ,_daeb []*_ga .File ,_gcb *_ef .Relationship ,_fdc _e .Target )error {_aba :=_dd .DocTypePresentation ;switch _dfff {case _dd .OfficeDocumentType :_dfac ._fbec =_ff .NewPresentation ();_ccg .AddTarget (_cgg ,_dfac ._fbec ,_dfff ,0);_ccg .AddTarget (_e .RelationsPathFor (_cgg ),_dfac ._cbag .X (),_dfff ,0);_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,0);case _dd .CorePropertiesType :_ccg .AddTarget (_cgg ,_dfac .CoreProperties .X (),_dfff ,0);_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,0);case _dd .CustomPropertiesType :_ccg .AddTarget (_cgg ,_dfac .CustomProperties .X (),_dfff ,0);_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,0);case _dd .PresentationPropertiesType :_ccg .AddTarget (_cgg ,_dfac ._ccd .X (),_dfff ,0);_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,0);case _dd .ViewPropertiesType :_ccg .AddTarget (_cgg ,_dfac ._dg .X (),_dfff ,0);_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,0);case _dd .TableStylesType :_ccg .AddTarget (_cgg ,_dfac ._deg .X (),_dfff ,0);_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,0);case _dd .HyperLinkType :_efbee :=_ac .NewCT_Hyperlink ();_ddg :=uint32 (len (_dfac ._bdfb ));_ccg .AddTarget (_cgg ,_efbee ,_dfff ,_ddg );_dfac ._bdfb =append (_dfac ._bdfb ,_efbee );case _dd .CustomXMLType :_eadf :=&_dd .XSDAny {};_aggb :=uint32 (len (_dfac ._cec ));_ccg .AddTarget (_cgg ,_eadf ,_dfff ,_aggb );_dfac ._cec =append (_dfac ._cec ,_eadf );_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._cec ));case _dd .ChartType :_abe :=_acg .NewChartSpace ();_aaff :=uint32 (len (_dfac ._bcd ));_ccg .AddTarget (_cgg ,_abe ,_dfff ,_aaff );_dfac ._bcd =append (_dfac ._bcd ,_abe );_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._bcd ));case _dd .HandoutMasterType :_cagcc :=_ff .NewHandoutMaster ();_bbfc :=uint32 (len (_dfac ._degb ));_ccg .AddTarget (_cgg ,_cagcc ,_dfff ,_bbfc );_dfac ._degb =append (_dfac ._degb ,_cagcc );_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._degb ));case _dd .NotesMasterType :_efa :=_ff .NewNotesMaster ();_gbec :=uint32 (len (_dfac ._bfe ));_ccg .AddTarget (_cgg ,_efa ,_dfff ,_gbec );_dfac ._bfe =append (_dfac ._bfe ,_efa );_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._bfe ));case _dd .ExtendedPropertiesType :_ccg .AddTarget (_cgg ,_dfac .AppProperties .X (),_dfff ,0);_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,0);case _dd .SlideType :_fed :=_ff .NewSld ();_dfac ._fd =append (_dfac ._fd ,_fed );_ccg .AddTarget (_cgg ,_fed ,_dfff ,uint32 (len (_dfac ._fd )));_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._fd ));_agdd :=_f .NewRelationships ();_ccg .AddTarget (_e .RelationsPathFor (_cgg ),_agdd .X (),_dfff ,0);_dfac ._ce =append (_dfac ._ce ,_agdd );case _dd .SlideMasterType :_gbbf :=_ff .NewSldMaster ();if !_ccg .AddTarget (_cgg ,_gbbf ,_dfff ,uint32 (len (_dfac ._aeg )+1)){return nil ;};_dfac ._aeg =append (_dfac ._aeg ,_gbbf );_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._aeg ));_bgab :=_f .NewRelationships ();_ccg .AddTarget (_e .RelationsPathFor (_cgg ),_bgab .X (),_dfff ,0);_dfac ._bfca =append (_dfac ._bfca ,_bgab );case _dd .SlideLayoutType :_ega :=_ff .NewSldLayout ();if !_ccg .AddTarget (_cgg ,_ega ,_dfff ,uint32 (len (_dfac ._ada )+1)){return nil ;};_dfac ._ada =append (_dfac ._ada ,_ega );_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._ada ));_bgd :=_f .NewRelationships ();_ccg .AddTarget (_e .RelationsPathFor (_cgg ),_bgd .X (),_dfff ,0);_dfac ._gab =append (_dfac ._gab ,_bgd );case _dd .ThumbnailType :for _fabf ,_aab :=range _daeb {if _aab ==nil {continue ;};if _aab .Name ==_cgg {_fec ,_ecf :=_aab .Open ();if _ecf !=nil {return _gg .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_ecf );};_dfac .Thumbnail ,_ ,_ecf =_g .Decode (_fec );_fec .Close ();if _ecf !=nil {return _gg .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_ecf );};_daeb [_fabf ]=nil ;};};case _dd .ThemeType :_ceb :=_ac .NewTheme ();if !_ccg .AddTarget (_cgg ,_ceb ,_dfff ,uint32 (len (_dfac ._ffb )+1)){return nil ;};_dfac ._ffb =append (_dfac ._ffb ,_ceb );_gcb .TargetAttr =_dd .RelativeFilename (_aba ,_fdc .Typ ,_dfff ,len (_dfac ._ffb ));_cee :=_f .NewRelationships ();_ccg .AddTarget (_e .RelationsPathFor (_cgg ),_cee .X (),_dfff ,0);_dfac ._bga =append (_dfac ._bga ,_cee );case _dd .ImageType :_cgg =_bf .Clean (_cgg );if _egg ,_ebc :=_dfac ._cce [_cgg ];_ebc {_gcb .TargetAttr =_egg ;return nil ;};_cbdb :="";for _gaa ,_gfb :=range _daeb {if _gfb ==nil {continue ;};if _gfb .Name ==_cgg {_decd ,_dbfd :=_e .ExtractToDiskTmp (_gfb ,_dfac .TmpPath );if _dbfd !=nil {return _dbfd ;};_dea ,_dbfd :=_f .ImageFromStorage (_decd );if _dbfd !=nil {return _dbfd ;};_cbdb =_dea .Format ;_cfc :=_f .MakeImageRef (_dea ,&_dfac .DocBase ,_dfac ._cbag );_dfac .Images =append (_dfac .Images ,_cfc );_daeb [_gaa ]=nil ;_ccg .RecordIndex (_cgg ,len (_dfac .Images ));break ;};};_caeg :=_ccg .IndexFor (_cgg );_gcb .TargetAttr =_dd .RelativeImageFilename (_aba ,_fdc .Typ ,_dfff ,_caeg ,_cbdb );_dfac ._cce [_cgg ]=_gcb .TargetAttr ;default:_dd .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_dfff ,_cgg );};return nil ;};

// X returns the inner wrapped XML type.
func (_gfag SlideMaster )X ()*_ff .SldMaster {return _gfag ._aagb };type rectangle struct{_bbc int64 ;_dae int64 ;_ca int64 ;_ge int64 ;};

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_gdf SlideMaster )SlideLayouts ()[]SlideLayout {_bcbb :=map[string ]int {};_adgd :=[]SlideLayout {};for _ ,_ffbg :=range _gdf ._efcd .Relationships (){_ebcc :=_bg .Replace (_ffbg .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_ebcc =_bg .Replace (_ebcc ,"\u002e\u0078\u006d\u006c","",-1);if _abdg ,_ecbf :=_dc .ParseInt (_ebcc ,10,32);_ecbf ==nil {_bcbb [_ffbg .ID ()]=int (_abdg );};};for _ ,_dde :=range _gdf ._aagb .SldLayoutIdLst .SldLayoutId {if _dbdd ,_adbd :=_bcbb [_dde .RIdAttr ];_adbd {_cefd :=_gdf ._gade ._ada [_dbdd -1];_adgd =append (_adgd ,SlideLayout {_cefd });};};return _adgd ;};

// AddParagraph adds a paragraph to the text box
func (_gefc TextBox )AddParagraph ()_bc .Paragraph {_cdfb :=_ac .NewCT_TextParagraph ();_gefc ._gfeg .TxBody .P =append (_gefc ._gfeg .TxBody .P ,_cdfb );return _bc .MakeParagraph (_cdfb );};func (_edfb *Presentation )Validate ()error {if _edgg :=_edfb ._fbec .Validate ();_edgg !=nil {return _edgg ;};for _aeaf ,_edfc :=range _edfb .Slides (){if _cagc :=_edfc .ValidateWithPath (_gg .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_aeaf ));_cagc !=nil {return _cagc ;};};for _afeg ,_cdff :=range _edfb ._aeg {if _dgfg :=_cdff .ValidateWithPath (_gg .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_afeg ));_dgfg !=nil {return _dgfg ;};};for _bda ,_cab :=range _edfb ._ada {if _abcc :=_cab .ValidateWithPath (_gg .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_bda ));_abcc !=nil {return _abcc ;};};return nil ;};

// HtmlPubPr returns the HtmlPubPr property.
func (_bfc PresentationProperties )HtmlPubPr ()*_ff .CT_HtmlPublishProperties {return _bfc ._efbc .HtmlPubPr ;};

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_add TextBox )SetOffsetY (offY float64 ){_agdde :=_add .getOff ();_efg :=_ea .ToEMU (offY );_agdde .YAttr =_ac .ST_Coordinate {ST_CoordinateUnqualified :&_efg };};

// SorterViewPr returns the SorterViewPr property.
func (_edfd ViewProperties )SorterViewPr ()*_ff .CT_SlideSorterViewProperties {return _edfd ._dbde .SorterViewPr ;};

// Read reads a document from an io.Reader.
func Read (r _a .ReaderAt ,size int64 )(*Presentation ,error ){const _fef ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_gacg .GetLicenseKey ().IsLicensed ()&&!_gdbc {_gg .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_gg .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_gac .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_becf :=_afd ();_dgb ,_caca :=_gacg .GenRefId ("\u0070\u0072");if _caca !=nil {_dd .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_caca );return nil ,_caca ;};_becf ._gcg =_dgb ;if _dbg :=_gacg .Track (_becf ._gcg ,_fef );_dbg !=nil {_gg .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_dbg );return nil ,_dbg ;};_egd ,_caca :=_ggd .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _caca !=nil {return nil ,_caca ;};_becf .TmpPath =_egd ;_gafg ,_caca :=_ga .NewReader (r ,size );if _caca !=nil {return nil ,_gg .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_caca );};_agb :=[]*_ga .File {};_agb =append (_agb ,_gafg .File ...);_gde :=false ;for _ ,_begc :=range _agb {if _begc .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_gde =true ;break ;};};if _gde {_becf .CreateCustomProperties ();};_gae :=_e .DecodeMap {};_gae .SetOnNewRelationshipFunc (_becf .onNewRelationship );_gae .AddTarget (_dd .ContentTypesFilename ,_becf .ContentTypes .X (),"",0);_gae .AddTarget (_dd .BaseRelsFilename ,_becf .Rels .X (),"",0);if _cggc :=_gae .Decode (_agb );_cggc !=nil {return nil ,_cggc ;};for _ ,_dfad :=range _agb {if _dfad ==nil {continue ;};if _gcd :=_becf .AddExtraFileFromZip (_dfad );_gcd !=nil {return nil ,_gcd ;};};if _gde {_eedc :=false ;for _ ,_fba :=range _becf .Rels .X ().Relationship {if _fba .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_eedc =true ;break ;};};if !_eedc {_becf .AddCustomRelationships ();};};return _becf ,nil ;};

// AddTextBox adds an empty textbox to a slide.
func (_fbae Slide )AddTextBox ()TextBox {_fceg :=_ff .NewCT_GroupShapeChoice ();_fbae ._gba .CSld .SpTree .Choice =append (_fbae ._gba .CSld .SpTree .Choice ,_fceg );_gdbf :=_ff .NewCT_Shape ();_fceg .Sp =append (_fceg .Sp ,_gdbf );_gdbf .SpPr =_ac .NewCT_ShapeProperties ();_gdbf .SpPr .Xfrm =_ac .NewCT_Transform2D ();_gdbf .SpPr .PrstGeom =_ac .NewCT_PresetGeometry2D ();_gdbf .SpPr .PrstGeom .PrstAttr =_ac .ST_ShapeTypeRect ;_gdbf .NvSpPr =_ff .NewCT_ShapeNonVisual ();_gdbf .NvSpPr .CNvSpPr =_ac .NewCT_NonVisualDrawingShapeProps ();_ccec :=true ;_gdbf .NvSpPr .CNvSpPr .TxBoxAttr =&_ccec ;_gdbf .TxBody =_ac .NewCT_TextBody ();_gdbf .TxBody .BodyPr =_ac .NewCT_TextBodyProperties ();_gdbf .TxBody .BodyPr .WrapAttr =_ac .ST_TextWrappingTypeSquare ;_gdbf .TxBody .BodyPr .SpAutoFit =_ac .NewCT_TextShapeAutofit ();_gec :=TextBox {_gdbf };_gec .Properties ().SetWidth (3*_ea .Inch );_gec .Properties ().SetHeight (1*_ea .Inch );_gec .Properties ().SetPosition (0,0);return _gec ;};func (_egf *Presentation )nextSlideID ()uint32 {_eef :=uint32 (256);for _ ,_age :=range _egf ._fbec .SldIdLst .SldId {if _age .IdAttr >=_eef {_eef =_age .IdAttr +1;};};return _eef ;};

// Type returns the type of the slide layout.
func (_edgge SlideLayout )Type ()_ff .ST_SlideLayoutType {return _edgge ._fgaf .TypeAttr };

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_gade *Presentation ;_efcd _f .Relationships ;_aagb *_ff .SldMaster ;};

// GridSpacing returns the GridSpacing property.
func (_gcbf ViewProperties )GridSpacing ()*_ac .CT_PositiveSize2D {return _gcbf ._dbde .GridSpacing };

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_geb Slide )AddImageToRels (img _f .ImageRef )string {_cafa :=0;for _cfge ,_cgae :=range _geb ._gcf .Images {if _cgae ==img {_cafa =_cfge +1;break ;};};var _bdgg string ;for _bgfg ,_fdgb :=range _geb ._gcf .Slides (){if _fdgb ._gba ==_geb ._gba {_cgbd :=_gg .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_cafa ,img .Format ());_fad :=_geb ._gcf ._ce [_bgfg ].AddRelationship (_cgbd ,_dd .ImageType );_bdgg =_fad .ID ();};};return _bdgg ;};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_fcb *_ff .CT_Shape ;_ebe *_ff .Sld ;};

// Properties returns the properties of the TextBox.
func (_faa TextBox )Properties ()_bc .ShapeProperties {if _faa ._gfeg .SpPr ==nil {_faa ._gfeg .SpPr =_ac .NewCT_ShapeProperties ();};return _bc .MakeShapeProperties (_faa ._gfeg .SpPr );};func (_cef *Presentation )saveToFile (_dfb string ,_agdc bool )error {_aac ,_bgbe :=_gd .Create (_dfb );if _bgbe !=nil {return _bgbe ;};defer _aac .Close ();return _cef .save (_aac ,_agdc );};func _afd ()*Presentation {_dafa :=&Presentation {_fbec :_ff .NewPresentation ()};_dafa ._fbec .SldIdLst =_ff .NewCT_SlideIdList ();_dafa ._fbec .ConformanceAttr =_gf .ST_ConformanceClassTransitional ;_dafa .AppProperties =_f .NewAppProperties ();_dafa .CoreProperties =_f .NewCoreProperties ();_dafa ._deg =_f .NewTableStyles ();_dafa .ContentTypes =_f .NewContentTypes ();_dafa .Rels =_f .NewRelationships ();_dafa ._cbag =_f .NewRelationships ();_dafa ._ccd =NewPresentationProperties ();_dafa ._dg =NewViewProperties ();_dafa ._cce =map[string ]string {};return _dafa ;};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_efc PlaceHolder )Paragraphs ()[]_bc .Paragraph {_bea :=[]_bc .Paragraph {};for _ ,_cbg :=range _efc ._fcb .TxBody .P {_bea =append (_bea ,_bc .MakeParagraph (_cbg ));};return _bea ;};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_egc *Presentation )SaveToFileAsTemplate (path string )error {return _egc .saveToFile (path ,true )};

// X returns the inner wrapped XML type.
func (_ecc Slide )X ()*_ff .Sld {return _ecc ._gba };

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_ff .CT_Shape ;GraphicFrame *_ff .CT_GraphicalObjectFrame ;Paragraph *_ac .CT_TextParagraph ;Run *_ac .CT_RegularTextRun ;TableInfo *TableInfo ;_da []rectangle ;_fff int ;_ffc int ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_bed *Presentation )AddImage (i _f .Image )(_f .ImageRef ,error ){_abce :=_f .MakeImageRef (i ,&_bed .DocBase ,_bed ._cbag );if i .Data ==nil &&i .Path ==""{return _abce ,_gac .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _abce ,_gac .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _abce ,_gac .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_afee :=_ggd .Add (i .Path );if _afee !=nil {return _abce ,_afee ;};};_bed .Images =append (_bed .Images ,_abce );_bed .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bed .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bed .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bed .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_bed .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _abce ,nil ;};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_adbc Slide )GetPlaceholder (t _ff .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_ggbd :=range _adbc ._gba .CSld .SpTree .Choice {for _ ,_cga :=range _ggbd .Sp {if _cga .NvSpPr !=nil &&_cga .NvSpPr .NvPr !=nil &&_cga .NvSpPr .NvPr .Ph !=nil {if _cga .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_cga ,_adbc ._gba },nil ;};};};};return PlaceHolder {},_gac .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};var _gdbc =false ;

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_bggc PlaceHolder )ClearAll (){_bggc ._fcb .SpPr =_ac .NewCT_ShapeProperties ();_bggc ._fcb .TxBody =_ac .NewCT_TextBody ();_bggc ._fcb .TxBody .LstStyle =_ac .NewCT_TextListStyle ();};

// AddTable adds an empty table to a slide.
func (_cacf Slide )AddTable ()*_f .Table {_baad :=_ff .NewCT_GroupShapeChoice ();_cacf ._gba .CSld .SpTree .Choice =append (_cacf ._gba .CSld .SpTree .Choice ,_baad );_cgeg :=_ff .NewCT_GraphicalObjectFrame ();_baad .GraphicFrame =append (_baad .GraphicFrame ,_cgeg );_cgeg .Xfrm .Off =_ac .NewCT_Point2D ();_ecb :=int64 (1);_cgeg .Xfrm .Off .XAttr =_ac .ST_Coordinate {ST_CoordinateUnqualified :&_ecb };_cgeg .Xfrm .Off .YAttr =_ac .ST_Coordinate {ST_CoordinateUnqualified :&_ecb };_gedg :=_cgeg .Graphic .CT_GraphicalObject .GraphicData ;_gedg .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_gadb :=_f .NewTableWithXfrm (_cgeg .Xfrm );_gedg .Any =append (_gedg .Any ,_gadb .X ());return _gadb ;};

// Text returns text from a presentation as one string separated with line breaks.
func (_cbaf *PresentationText )Text ()string {_ec :=_b .NewBuffer ([]byte {});for _ ,_gc :=range _cbaf .Slides {_ec .WriteString (_gc .Text ());};return _ec .String ();};

// NotesViewPr returns the NotesViewPr property.
func (_dfab ViewProperties )NotesViewPr ()*_ff .CT_NotesViewProperties {return _dfab ._dbde .NotesViewPr };

// ShowCommentsAttr returns the WebPr property.
func (_bfg ViewProperties )ShowCommentsAttr ()*bool {return _bfg ._dbde .ShowCommentsAttr };func (_egb sort2d )Len ()int {return len (_egb )};

// GetTextBoxes returns a list of all text boxes from a slide.
func (_aeff Slide )GetTextBoxes ()[]*TextBox {_ddbg :=[]*TextBox {};_caab :=_aeff ._gba .CSld .SpTree .Choice ;for _ ,_cgc :=range _caab {for _ ,_cdbd :=range _cgc .Sp {if _cdbd .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_cdbd .NvSpPr .CNvSpPr .TxBoxAttr {_ddbg =append (_ddbg ,&TextBox {_cdbd });};};};return _ddbg ;};

// PlaceHolders returns all of the content place holders within a given slide.
func (_bcfa Slide )PlaceHolders ()[]PlaceHolder {_bce :=[]PlaceHolder {};for _ ,_decg :=range _bcfa ._gba .CSld .SpTree .Choice {for _ ,_abeb :=range _decg .Sp {if _abeb .NvSpPr !=nil &&_abeb .NvSpPr .NvPr !=nil &&_abeb .NvSpPr .NvPr .Ph !=nil {_bce =append (_bce ,PlaceHolder {_abeb ,_bcfa ._gba });};};};return _bce ;};func (_ecae *Presentation )save (_dgf _a .Writer ,_gdab bool )error {const _gfe ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _bggcf :=_ecae ._fbec .Validate ();_bggcf !=nil {_c .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_bggcf );};if !_gacg .GetLicenseKey ().IsLicensed ()&&!_gdbc {_gg .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_gg .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _gac .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_ecae ._gcg )==0{_ddb ,_ced :=_gacg .GenRefId ("\u0070\u0077");if _ced !=nil {_dd .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ced );return _ced ;};_ecae ._gcg =_ddb ;};if _ffca :=_gacg .Track (_ecae ._gcg ,_gfe );_ffca !=nil {_gg .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ffca );return _ffca ;};if _gdab {_ecae .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ecae .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_ecae .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ecae .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_bacc :=_dd .DocTypePresentation ;_ged :=_ga .NewWriter (_dgf );defer _ged .Close ();if _gcca :=_e .MarshalXML (_ged ,_dd .BaseRelsFilename ,_ecae .Rels .X ());_gcca !=nil {return _gcca ;};if _edg :=_e .MarshalXMLByType (_ged ,_bacc ,_dd .ExtendedPropertiesType ,_ecae .AppProperties .X ());_edg !=nil {return _edg ;};if _ded :=_e .MarshalXMLByType (_ged ,_bacc ,_dd .CorePropertiesType ,_ecae .CoreProperties .X ());_ded !=nil {return _ded ;};if _acf :=_e .MarshalXMLByType (_ged ,_bacc ,_dd .PresentationPropertiesType ,_ecae ._ccd .X ());_acf !=nil {return _acf ;};if _adb :=_e .MarshalXMLByType (_ged ,_bacc ,_dd .ViewPropertiesType ,_ecae ._dg .X ());_adb !=nil {return _adb ;};if _afcg :=_e .MarshalXMLByType (_ged ,_bacc ,_dd .TableStylesType ,_ecae ._deg .X ());_afcg !=nil {return _afcg ;};if _ecae .CustomProperties .X ()!=nil {if _bae :=_e .MarshalXMLByType (_ged ,_bacc ,_dd .CustomPropertiesType ,_ecae .CustomProperties .X ());_bae !=nil {return _bae ;};};if _ecae .Thumbnail !=nil {_aebg ,_agaf :=_ged .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _agaf !=nil {return _agaf ;};if _ddcg :=_ae .Encode (_aebg ,_ecae .Thumbnail ,nil );_ddcg !=nil {return _ddcg ;};};_cdd :=_dd .AbsoluteFilename (_bacc ,_dd .OfficeDocumentType ,0);if _agc :=_e .MarshalXML (_ged ,_cdd ,_ecae ._fbec );_agc !=nil {return _agc ;};if _dbe :=_e .MarshalXML (_ged ,_e .RelationsPathFor (_cdd ),_ecae ._cbag .X ());_dbe !=nil {return _dbe ;};for _caeb ,_efbe :=range _ecae ._fd {_bbbd :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideType ,_caeb +1);_e .MarshalXML (_ged ,_bbbd ,_efbe );if !_ecae ._ce [_caeb ].IsEmpty (){_agd :=_e .RelationsPathFor (_bbbd );_e .MarshalXML (_ged ,_agd ,_ecae ._ce [_caeb ].X ());};};for _cffd ,_bge :=range _ecae ._aeg {_agcd :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideMasterType ,_cffd +1);_e .MarshalXML (_ged ,_agcd ,_bge );if !_ecae ._bfca [_cffd ].IsEmpty (){_bgf :=_e .RelationsPathFor (_agcd );_e .MarshalXML (_ged ,_bgf ,_ecae ._bfca [_cffd ].X ());};};for _cca ,_efd :=range _ecae ._ada {_deda :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideLayoutType ,_cca +1);_e .MarshalXML (_ged ,_deda ,_efd );if !_ecae ._gab [_cca ].IsEmpty (){_bfb :=_e .RelationsPathFor (_deda );_e .MarshalXML (_ged ,_bfb ,_ecae ._gab [_cca ].X ());};};for _efff ,_bgee :=range _ecae ._ffb {_fdd :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .ThemeType ,_efff +1);_e .MarshalXML (_ged ,_fdd ,_bgee );if !_ecae ._bga [_efff ].IsEmpty (){_cdf :=_e .RelationsPathFor (_fdd );_e .MarshalXML (_ged ,_cdf ,_ecae ._bga [_efff ].X ());};};for _eac ,_cecd :=range _ecae ._bcd {_dccg :=_dd .AbsoluteFilename (_bacc ,_dd .ChartType ,_eac +1);_e .MarshalXML (_ged ,_dccg ,_cecd );};for _ffg ,_dgc :=range _ecae ._degb {_ffbd :=_dd .AbsoluteFilename (_bacc ,_dd .HandoutMasterType ,_ffg +1);_e .MarshalXML (_ged ,_ffbd ,_dgc );};for _cfgc ,_abbg :=range _ecae ._bfe {_afca :=_dd .AbsoluteFilename (_bacc ,_dd .NotesMasterType ,_cfgc +1);_e .MarshalXML (_ged ,_afca ,_abbg );};for _bef ,_cgb :=range _ecae ._cec {_eabb :=_dd .AbsoluteFilename (_bacc ,_dd .CustomXMLType ,_bef +1);_e .MarshalXML (_ged ,_eabb ,_cgb );};for _fgbg ,_decc :=range _ecae .Images {if _aag :=_f .AddImageToZip (_ged ,_decc ,_fgbg +1,_dd .DocTypePresentation );_aag !=nil {return _aag ;};};_ecae .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ecae .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ecae .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ecae .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _fgd :=_e .MarshalXML (_ged ,_dd .ContentTypesFilename ,_ecae .ContentTypes .X ());_fgd !=nil {return _fgd ;};if _bdfd :=_ecae .WriteExtraFiles (_ged );_bdfd !=nil {return _bdfd ;};return nil ;};

// ExtractText returns text from a presentation as a PresentationText object.
func (_af *Presentation )ExtractText ()*PresentationText {_aa :=[]*SlideText {};for _ ,_gge :=range _af .Slides (){_gef :=_gge .ExtractText ();if _gef !=nil {_aa =append (_aa ,_gef );};};return &PresentationText {Slides :_aa };};

// X returns the inner wrapped XML type.
func (_cefe ViewProperties )X ()*_ff .ViewPr {return _cefe ._dbde };

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_ccf PlaceHolder )Clear (){_ccf .ClearAll ();_dac :=_ac .NewCT_TextParagraph ();_ccf ._fcb .TxBody .P =[]*_ac .CT_TextParagraph {_dac };_dac .EndParaRPr =_ac .NewCT_TextCharacterProperties ();_dac .EndParaRPr .LangAttr =_dd .String ("\u0065\u006e\u002dU\u0053");};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_fea *Presentation )GetImageByRelID (relID string )(_f .ImageRef ,bool ){for _ ,_dgee :=range _fea .Images {if _dgee .RelID ()==relID {return _dgee ,true ;};};return _f .ImageRef {},false ;};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_eca *Presentation )SaveAsTemplate (w _a .Writer )error {return _eca .save (w ,true )};

// Slide represents a slide of a presentation.
type Slide struct{_eee *_ff .CT_SlideIdListEntry ;_gba *_ff .Sld ;_gcf *Presentation ;};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_dbde *_ff .ViewPr };

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_gfa *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_abc :=_ff .NewCT_SlideIdListEntry ();_abc .IdAttr =256;for _ ,_bbf :=range _gfa ._fbec .SldIdLst .SldId {if _bbf .IdAttr >=_abc .IdAttr {_abc .IdAttr =_bbf .IdAttr +1;};};_gfa ._fbec .SldIdLst .SldId =append (_gfa ._fbec .SldIdLst .SldId ,_abc );_dga :=_ff .NewSld ();_gbe :=_b .Buffer {};_cbd :=_ad .NewEncoder (&_gbe );_bbed :=_ad .StartElement {Name :_ad .Name {Local :"\u0073\u006c\u0069d\u0065"}};_bbed .Attr =append (_bbed .Attr ,_ad .Attr {Name :_ad .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_bbed .Attr =append (_bbed .Attr ,_ad .Attr {Name :_ad .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_bbed .Attr =append (_bbed .Attr ,_ad .Attr {Name :_ad .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_bbed .Attr =append (_bbed .Attr ,_ad .Attr {Name :_ad .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_bbed .Attr =append (_bbed .Attr ,_ad .Attr {Name :_ad .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_bbed .Attr =append (_bbed .Attr ,_ad .Attr {Name :_ad .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _abb :=l ._fgaf .CSld .MarshalXML (_cbd ,_bbed );_abb !=nil {return Slide {},_abb ;};_cbd .Flush ();_eeb :=_ad .NewDecoder (&_gbe );_dga .CSld =_ff .NewCT_CommonSlideData ();if _aga :=_eeb .Decode (_dga .CSld );_aga !=nil {return Slide {},_aga ;};_dga .CSld .NameAttr =nil ;_dga .CSld .SpTree .Choice =_dfa (_dga .CSld .SpTree .Choice );_gfa ._fd =append (_gfa ._fd ,_dga );_ffae :=_gfa ._cbag .AddAutoRelationship (_dd .DocTypePresentation ,_dd .OfficeDocumentType ,len (_gfa ._fd ),_dd .SlideType );_abc .RIdAttr =_ffae .ID ();_cffa :=_dd .AbsoluteFilename (_dd .DocTypePresentation ,_dd .SlideType ,len (_gfa ._fd ));_gfa .ContentTypes .AddOverride (_cffa ,_dd .SlideContentType );_adc :=_f .NewRelationships ();_gfa ._ce =append (_gfa ._ce ,_adc );_affc :=len (_gfa ._ce )-1;for _gag ,_fab :=range _gfa ._ada {if _fab ==l .X (){_feb :=_gfa ._gab [_gag ];for _ ,_bfcg :=range _feb .X ().Relationship {if _bfcg .TypeAttr !=_dd .SlideMasterType {_gfa ._ce [_affc ].X ().Relationship =append (_gfa ._ce [_affc ].X ().Relationship ,_bfcg );};};_adc .AddAutoRelationship (_dd .DocTypePresentation ,_dd .SlideType ,_gag +1,_dd .SlideLayoutType );};};_cfd :=Slide {_abc ,_dga ,_gfa };return _cfd ,nil ;};

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_agge TextBox )SetOffsetX (offX float64 ){_bdfcc :=_agge .getOff ();_aggeg :=_ea .ToEMU (offX );_bdfcc .XAttr =_ac .ST_Coordinate {ST_CoordinateUnqualified :&_aggeg };};

// X returns the inner wrapped XML type.
func (_ace PresentationProperties )X ()*_ff .PresentationPr {return _ace ._efbc };

// Image is an image within a slide.
type Image struct{_acd *_ff .CT_Picture };

// PrnPr returns the PrnPr property.
func (_dbf PresentationProperties )PrnPr ()*_ff .CT_PrintProperties {return _dbf ._efbc .PrnPr };

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_efbc *_ff .PresentationPr };

// ExtLst returns the ExtLst property.
func (_eecf PresentationProperties )ExtLst ()*_ff .CT_ExtensionList {return _eecf ._efbc .ExtLst };

// SlideMasters returns the slide masters defined in the presentation.
func (_cddc *Presentation )SlideMasters ()[]SlideMaster {_eaf :=[]SlideMaster {};for _dge ,_ebb :=range _cddc ._aeg {_eaf =append (_eaf ,SlideMaster {_cddc ,_cddc ._bfca [_dge ],_ebb });};return _eaf ;};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_cgeb *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_gadf :=range _cgeb ._ada {if _gadf .CSld .NameAttr !=nil &&name ==*_gadf .CSld .NameAttr {return SlideLayout {_gadf },nil ;};};return SlideLayout {},_gac .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// NormalViewPr returns the NormalViewPr property.
func (_gdd ViewProperties )NormalViewPr ()*_ff .CT_NormalViewProperties {return _gdd ._dbde .NormalViewPr ;};

// TextBox is a text box within a slide.
type TextBox struct{_gfeg *_ff .CT_Shape };func _geg (_cae *Presentation ,_bd []*_ff .CT_GroupShapeChoice ,_gee []rectangle ,_be []*TextItem )[]*TextItem {for _ ,_db :=range _bd {_cg :=append ([]rectangle {},_gee ...);for _ ,_dbd :=range _db .Sp {_be =append (_be ,_gged (_cae ,_dbd ,nil ,nil ,_dbd .SpPr .Xfrm ,0,_gee ,_dbd .TxBody .P )...);};for _ ,_beg :=range _db .GraphicFrame {if _beg !=nil &&_beg .Graphic !=nil &&_beg .Graphic .GraphicData !=nil {_de :=_beg .Xfrm ;for _ ,_bgb :=range _beg .Graphic .GraphicData .Any {if _fg ,_ead :=_bgb .(*_ac .Tbl );_ead {_aaf :=&_fg .CT_Table ;_eeg :=0;for _bggg ,_afc :=range _fg .Tr {for _afff ,_gb :=range _afc .Tc {_caf :=&TableInfo {Table :_aaf ,Row :_afc ,Cell :_gb ,RowIndex :_bggg ,ColIndex :_afff };_be =append (_be ,_gged (_cae ,nil ,_beg ,_caf ,_de ,_eeg ,_gee ,_gb .TxBody .P )...);_eeg ++;};};};};};};for _ ,_df :=range _db .GrpSp {if _df .GrpSpPr !=nil {_ba :=_df .GrpSpPr .Xfrm ;var _dabb ,_adg int64 ;if _ba .Off !=nil {_affd ,_fb :=_ba .Off .XAttr .ST_CoordinateUnqualified ,_ba .Off .YAttr .ST_CoordinateUnqualified ;if _affd !=nil &&_fb !=nil {if _ggb :=_ba .Ext ;_ggb !=nil {_dabb ,_adg =_ggb .CxAttr ,_ggb .CyAttr ;};_cg =append (_cg ,rectangle {_bbc :*_affd ,_dae :*_fb ,_ca :*_affd +_dabb ,_ge :*_fb +_adg });};};};_be =_geg (_cae ,_df .Choice ,_cg ,_be );};};return _be ;};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_dege *Presentation )SlideLayouts ()[]SlideLayout {_ggea :=[]SlideLayout {};for _ ,_dgeg :=range _dege ._ada {_ggea =append (_ggea ,SlideLayout {_dgeg });};return _ggea ;};func (_adad TextBox )getOff ()*_ac .CT_Point2D {if _adad ._gfeg .SpPr ==nil {_adad ._gfeg .SpPr =_ac .NewCT_ShapeProperties ();};if _adad ._gfeg .SpPr .Xfrm ==nil {_adad ._gfeg .SpPr .Xfrm =_ac .NewCT_Transform2D ();};if _adad ._gfeg .SpPr .Xfrm .Off ==nil {_adad ._gfeg .SpPr .Xfrm .Off =_ac .NewCT_Point2D ();};return _adad ._gfeg .SpPr .Xfrm .Off ;};

// ShowPr returns the ShowPr property.
func (_abge PresentationProperties )ShowPr ()*_ff .CT_ShowProperties {return _abge ._efbc .ShowPr };