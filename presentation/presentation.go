//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_fd "archive/zip";_ga "bytes";_fa "encoding/xml";_e "errors";_ag "fmt";_db "github.com/unidoc/unioffice";_fc "github.com/unidoc/unioffice/common";_ba "github.com/unidoc/unioffice/common/tempstorage";_fad "github.com/unidoc/unioffice/drawing";_df "github.com/unidoc/unioffice/internal/license";_bb "github.com/unidoc/unioffice/measurement";_ad "github.com/unidoc/unioffice/schema/soo/dml";_b "github.com/unidoc/unioffice/schema/soo/dml/chart";_ff "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_ae "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_bf "github.com/unidoc/unioffice/schema/soo/pml";_ac "github.com/unidoc/unioffice/zippkg";_f "image";_gb "image/jpeg";_c "io";_a "log";_dd "math";_gae "os";_d "path";_eg "sort";_gd "strconv";_gg "strings";);

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_gdg *Presentation )GetTableStyleById (id string )*_ad .CT_TableStyle {_ggd :=_gdg ._bfd .TblStyle ();for _ ,_gba :=range _ggd {if _gba .StyleIdAttr ==id {return _gba ;};};return nil ;};

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_ggc PlaceHolder )SetText (text string ){_ggc .Clear ();_dgg :=_ad .NewEG_TextRun ();_dgg .R =_ad .NewCT_RegularTextRun ();_dgg .R .T =text ;if len (_ggc ._bdde .TxBody .P )==0{_ggc ._bdde .TxBody .P =append (_ggc ._bdde .TxBody .P ,_ad .NewCT_TextParagraph ());};_ggc ._bdde .TxBody .P [0].EG_TextRun =nil ;_ggc ._bdde .TxBody .P [0].EG_TextRun =append (_ggc ._bdde .TxBody .P [0].EG_TextRun ,_dgg );};

// GetTextBoxes returns a list of all text boxes from a slide.
func (_fgcc Slide )GetTextBoxes ()[]*TextBox {_cbace :=[]*TextBox {};_fde :=_fgcc ._ggdf .CSld .SpTree .Choice ;for _ ,_efcdb :=range _fde {for _ ,_dgba :=range _efcdb .Sp {if _dgba .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_dgba .NvSpPr .CNvSpPr .TxBoxAttr {_cbace =append (_cbace ,&TextBox {_dgba });};};};return _cbace ;};func (_agaf sort2d )Swap (i ,j int ){_agaf [i ],_agaf [j ]=_agaf [j ],_agaf [i ]};

// Slide represents a slide of a presentation.
type Slide struct{_dgd *_bf .CT_SlideIdListEntry ;_ggdf *_bf .Sld ;_bdab *Presentation ;};

// RemoveSlide removes a slide from a presentation.
func (_agagg *Presentation )RemoveSlide (s Slide )error {_acd :=false ;_gab :=0;for _bbb ,_adc :=range _agagg ._afg {if _adc ==s ._ggdf {if _agagg ._acgd .SldIdLst .SldId [_bbb ]!=s ._dgd {return _e .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_agagg ._afg [_bbb :],_agagg ._afg [_bbb +1:]);_agagg ._afg =_agagg ._afg [0:len (_agagg ._afg )-1];copy (_agagg ._egd [_bbb :],_agagg ._egd [_bbb +1:]);_agagg ._egd =_agagg ._egd [0:len (_agagg ._egd )-1];copy (_agagg ._acgd .SldIdLst .SldId [_bbb :],_agagg ._acgd .SldIdLst .SldId [_bbb +1:]);_agagg ._acgd .SldIdLst .SldId =_agagg ._acgd .SldIdLst .SldId [0:len (_agagg ._acgd .SldIdLst .SldId )-1];_acd =true ;_gab =_bbb ;};};if !_acd {return _e .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_aefe :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideType ,0);return _agagg .ContentTypes .RemoveOverrideByIndex (_aefe ,_gab );};

// ExtractText returns text from a presentation as a PresentationText object.
func (_bc *Presentation )ExtractText ()*PresentationText {_ffd :=[]*SlideText {};for _ ,_acg :=range _bc .Slides (){_ca :=_acg .ExtractText ();if _ca !=nil {_ffd =append (_ffd ,_ca );};};return &PresentationText {Slides :_ffd };};

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_bafa *Presentation ;_fbga _fc .Relationships ;_fdga *_bf .SldMaster ;};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_ad .CT_Table ;Row *_ad .CT_TableRow ;Cell *_ad .CT_TableCell ;RowIndex int ;ColIndex int ;};

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_bgb Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_efcb :=range _bgb ._ggdf .CSld .SpTree .Choice {for _ ,_faeb :=range _efcb .Sp {if _faeb .NvSpPr !=nil &&_faeb .NvSpPr .NvPr !=nil &&_faeb .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_faeb .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_faeb .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_faeb .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_faeb ,_bgb ._ggdf },nil ;};};};};return PlaceHolder {},_e .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// AddParagraph adds a paragraph to the text box
func (_abbf TextBox )AddParagraph ()_fad .Paragraph {_cfbf :=_ad .NewCT_TextParagraph ();_abbf ._gcbg .TxBody .P =append (_abbf ._gcbg .TxBody .P ,_cfbf );return _fad .MakeParagraph (_cfbf );};

// Properties returns the properties of the TextBox.
func (_aca Image )Properties ()_fad .ShapeProperties {if _aca ._ecb .SpPr ==nil {_aca ._ecb .SpPr =_ad .NewCT_ShapeProperties ();};return _fad .MakeShapeProperties (_aca ._ecb .SpPr );};

// Read reads a document from an io.Reader.
func Read (r _c .ReaderAt ,size int64 )(*Presentation ,error ){const _aagc ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_df .GetLicenseKey ().IsLicensed ()&&!_bgfff {_ag .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_ag .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_e .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_adec :=_afe ();_dfc ,_eda :=_df .GenRefId ("\u0070\u0072");if _eda !=nil {_db .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_eda );return nil ,_eda ;};_adec ._fcdb =_dfc ;if _afd :=_df .Track (_adec ._fcdb ,_aagc );_afd !=nil {_ag .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_afd );return nil ,_afd ;};_dbc ,_eda :=_ba .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _eda !=nil {return nil ,_eda ;};_adec .TmpPath =_dbc ;_ebbea ,_eda :=_fd .NewReader (r ,size );if _eda !=nil {return nil ,_ag .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_eda );};_gac :=[]*_fd .File {};_gac =append (_gac ,_ebbea .File ...);_abea :=false ;for _ ,_cgcf :=range _gac {if _cgcf .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_abea =true ;break ;};};if _abea {_adec .CreateCustomProperties ();};_dfcb :=_ac .DecodeMap {};_dfcb .SetOnNewRelationshipFunc (_adec .onNewRelationship );_dfcb .AddTarget (_db .ContentTypesFilename ,_adec .ContentTypes .X (),"",0);_dfcb .AddTarget (_db .BaseRelsFilename ,_adec .Rels .X (),"",0);if _cab :=_dfcb .Decode (_gac );_cab !=nil {return nil ,_cab ;};for _ ,_aee :=range _gac {if _aee ==nil {continue ;};if _acbd :=_adec .AddExtraFileFromZip (_aee );_acbd !=nil {return nil ,_acbd ;};};if _abea {_egdd :=false ;for _ ,_cbdd :=range _adec .Rels .X ().Relationship {if _cbdd .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_egdd =true ;break ;};};if !_egdd {_adec .AddCustomRelationships ();};};return _adec ,nil ;};func (_cgcg TextBox )getOff ()*_ad .CT_Point2D {if _cgcg ._gcbg .SpPr ==nil {_cgcg ._gcbg .SpPr =_ad .NewCT_ShapeProperties ();};if _cgcg ._gcbg .SpPr .Xfrm ==nil {_cgcg ._gcbg .SpPr .Xfrm =_ad .NewCT_Transform2D ();};if _cgcg ._gcbg .SpPr .Xfrm .Off ==nil {_cgcg ._gcbg .SpPr .Xfrm .Off =_ad .NewCT_Point2D ();};return _cgcg ._gcbg .SpPr .Xfrm .Off ;};type rectangle struct{_da int64 ;_af int64 ;_ee int64 ;_ffe int64 ;};func (_dac *Presentation )saveToFile (_gfbg string ,_cga bool )error {_cade ,_eefd :=_gae .Create (_gfbg );if _eefd !=nil {return _eefd ;};defer _cade .Close ();return _dac .save (_cade ,_cga );};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_edg ,_cce :=_gae .Open (filename );if _cce !=nil {return nil ,_ag .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cce );};defer _edg .Close ();_cfbg ,_cce :=_gae .Stat (filename );if _cce !=nil {return nil ,_ag .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_cce );};_ =_cfbg ;return Read (_edg ,_cfbg .Size ());};

// AddTextBox adds an empty textbox to a slide.
func (_agca Slide )AddTextBox ()TextBox {_dbdf :=_bf .NewCT_GroupShapeChoice ();_agca ._ggdf .CSld .SpTree .Choice =append (_agca ._ggdf .CSld .SpTree .Choice ,_dbdf );_gcgc :=_bf .NewCT_Shape ();_dbdf .Sp =append (_dbdf .Sp ,_gcgc );_gcgc .SpPr =_ad .NewCT_ShapeProperties ();_gcgc .SpPr .Xfrm =_ad .NewCT_Transform2D ();_gcgc .SpPr .PrstGeom =_ad .NewCT_PresetGeometry2D ();_gcgc .SpPr .PrstGeom .PrstAttr =_ad .ST_ShapeTypeRect ;_gcgc .NvSpPr =_bf .NewCT_ShapeNonVisual ();_gcgc .NvSpPr .CNvSpPr =_ad .NewCT_NonVisualDrawingShapeProps ();_defd :=true ;_gcgc .NvSpPr .CNvSpPr .TxBoxAttr =&_defd ;_gcgc .TxBody =_ad .NewCT_TextBody ();_gcgc .TxBody .BodyPr =_ad .NewCT_TextBodyProperties ();_gcgc .TxBody .BodyPr .WrapAttr =_ad .ST_TextWrappingTypeSquare ;_gcgc .TxBody .BodyPr .SpAutoFit =_ad .NewCT_TextShapeAutofit ();_gdbb :=TextBox {_gcgc };_gdbb .Properties ().SetWidth (3*_bb .Inch );_gdbb .Properties ().SetHeight (1*_bb .Inch );_gdbb .Properties ().SetPosition (0,0);return _gdbb ;};

// Text returns text from a presentation as one string separated with line breaks.
func (_caf *PresentationText )Text ()string {_cfb :=_ga .NewBuffer ([]byte {});for _ ,_bcc :=range _caf .Slides {_cfb .WriteString (_bcc .Text ());};return _cfb .String ();};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};

// TextBox is a text box within a slide.
type TextBox struct{_gcbg *_bf .CT_Shape };

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_gfc PlaceHolder )ClearAll (){_gfc ._bdde .SpPr =_ad .NewCT_ShapeProperties ();_gfc ._bdde .TxBody =_ad .NewCT_TextBody ();_gfc ._bdde .TxBody .LstStyle =_ad .NewCT_TextListStyle ();};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_gbe PlaceHolder )Clear (){_gbe .ClearAll ();_caff :=_ad .NewCT_TextParagraph ();_gbe ._bdde .TxBody .P =[]*_ad .CT_TextParagraph {_caff };_caff .EndParaRPr =_ad .NewCT_TextCharacterProperties ();_caff .EndParaRPr .LangAttr =_db .String ("\u0065\u006e\u002dU\u0053");};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_ddc *Presentation )SaveToFileAsTemplate (path string )error {return _ddc .saveToFile (path ,true )};

// Type returns the placeholder type
func (_fef PlaceHolder )Type ()_bf .ST_PlaceholderType {return _fef ._bdde .NvSpPr .NvPr .Ph .TypeAttr };

// Less is for implementing sorting of two locations. Symbols share the same location if they are in the same paragraph or table. One location is 'less' than another first by y coordinate, if y coordinates are equal or differ by less than yEpsilon, then x coordinates are compared, then if they are also equal, indexes of locations in the table are compared, then positions of locations in a paragraph.
func (_ge sort2d )Less (i ,j int )bool {_dc ,_edc :=_ge [i ],_ge [j ];_gag ,_cbg :=_dc ._cc ,_edc ._cc ;_bba ,_ddb :=len (_gag )-1,len (_cbg )-1;_bbca ,_egf :=0,0;for {_bdd ,_aggf ,_fca ,_abf ,_agee ,_bff ,_efd ,_gcd :=_gag [_bbca ]._af ,_cbg [_egf ]._af ,_gag [_bbca ]._ffe ,_cbg [_egf ]._ffe ,_gag [_bbca ]._da ,_cbg [_egf ]._da ,_gag [_bbca ]._ee ,_cbg [_egf ]._ee ;if _bdd ==_aggf ||((_dd .Abs (float64 (_bdd )-float64 (_aggf ))< _fbg )&&((_bdd >=_aggf &&_bdd <=_abf )||(_aggf >=_bdd &&_aggf <=_fca ))&&(_efd < _bff ||_agee > _gcd )){if _agee ==_bff {if _bbca < _bba &&_egf < _ddb {_bbca ++;_egf ++;continue ;};if _bbca >=_bba &&_egf >=_ddb {break ;};return _bbca >=_bba ;}else {return _agee < _bff ;};}else {return _bdd < _aggf ;};};_fab ,_bgd ,_gge ,_fag :=_dc ._eb ,_edc ._eb ,_dc ._ggg ,_edc ._ggg ;if _fab ==_bgd {return _gge <=_fag ;};return _fab < _bgd ;};

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_bgbc SlideMaster )SlideLayouts ()[]SlideLayout {_ecbb :=map[string ]int {};_adac :=[]SlideLayout {};for _ ,_gbea :=range _bgbc ._fbga .Relationships (){_beb :=_gg .Replace (_gbea .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_beb =_gg .Replace (_beb ,"\u002e\u0078\u006d\u006c","",-1);if _cfde ,_adfb :=_gd .ParseInt (_beb ,10,32);_adfb ==nil {_ecbb [_gbea .ID ()]=int (_cfde );};};for _ ,_deaf :=range _bgbc ._fdga .SldLayoutIdLst .SldLayoutId {if _ggga ,_efbe :=_ecbb [_deaf .RIdAttr ];_efbe {_gfea :=_bgbc ._bafa ._bcb [_ggga -1];_adac =append (_adac ,SlideLayout {_gfea });};};return _adac ;};

// AddSlide adds a new slide to the presentation.
func (_gaa *Presentation )AddSlide ()Slide {_fea :=_bf .NewCT_SlideIdListEntry ();_fea .IdAttr =_gaa .nextSlideID ();_gaa ._acgd .SldIdLst .SldId =append (_gaa ._acgd .SldIdLst .SldId ,_fea );_fcdg :=_bf .NewSld ();_fcdg .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_fcdg .CSld .SpTree .GrpSpPr .Xfrm =_ad .NewCT_GroupTransform2D ();_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Off =_ad .NewCT_Point2D ();_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_db .Int64 (0);_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_db .Int64 (0);_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Ext =_ad .NewCT_PositiveSize2D ();_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_bb .Point );_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_bb .Point );_fcdg .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Off ;_fcdg .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_fcdg .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_gaa ._afg =append (_gaa ._afg ,_fcdg );_cgc :=_gaa ._eag .AddAutoRelationship (_db .DocTypePresentation ,_db .OfficeDocumentType ,len (_gaa ._afg ),_db .SlideType );_fea .RIdAttr =_cgc .ID ();_efb :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideType ,len (_gaa ._afg ));_gaa .ContentTypes .AddOverride (_efb ,_db .SlideContentType );_edd :=_fc .NewRelationships ();_gaa ._egd =append (_gaa ._egd ,_edd );_edd .AddAutoRelationship (_db .DocTypePresentation ,_db .SlideType ,len (_gaa ._bcb ),_db .SlideLayoutType );return Slide {_fea ,_fcdg ,_gaa };};

// AddParagraph adds a new paragraph to a placeholder.
func (_cbc PlaceHolder )AddParagraph ()_fad .Paragraph {_fcdc :=_fad .MakeParagraph (_ad .NewCT_TextParagraph ());_cbc ._bdde .TxBody .P =append (_cbc ._bdde .TxBody .P ,_fcdc .X ());return _fcdc ;};

// ClrMru returns the ClrMru property.
func (_gdb PresentationProperties )ClrMru ()*_ad .CT_ColorMRU {return _gdb ._ged .ClrMru };

// Type returns the type of the slide layout.
func (_afgc SlideLayout )Type ()_bf .ST_SlideLayoutType {return _afgc ._efe .TypeAttr };func (_bbe *Presentation )save (_bbg _c .Writer ,_gcee bool )error {const _fcaf ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _gaaa :=_bbe ._acgd .Validate ();_gaaa !=nil {_a .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_gaaa );};if !_df .GetLicenseKey ().IsLicensed ()&&!_bgfff {_ag .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_ag .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _e .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_bbe ._fcdb )==0{_fbd ,_caef :=_df .GenRefId ("\u0070\u0077");if _caef !=nil {_db .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_caef );return _caef ;};_bbe ._fcdb =_fbd ;};if _ceb :=_df .Track (_bbe ._fcdb ,_fcaf );_ceb !=nil {_ag .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ceb );return _ceb ;};if _gcee {_bbe .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_bbe .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_bbe .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_bbe .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_ddg :=_db .DocTypePresentation ;_cca :=_fd .NewWriter (_bbg );defer _cca .Close ();if _bdae :=_ac .MarshalXML (_cca ,_db .BaseRelsFilename ,_bbe .Rels .X ());_bdae !=nil {return _bdae ;};if _aec :=_ac .MarshalXMLByType (_cca ,_ddg ,_db .ExtendedPropertiesType ,_bbe .AppProperties .X ());_aec !=nil {return _aec ;};if _gcbc :=_ac .MarshalXMLByType (_cca ,_ddg ,_db .CorePropertiesType ,_bbe .CoreProperties .X ());_gcbc !=nil {return _gcbc ;};if _dfa :=_ac .MarshalXMLByType (_cca ,_ddg ,_db .PresentationPropertiesType ,_bbe ._geda .X ());_dfa !=nil {return _dfa ;};if _gcg :=_ac .MarshalXMLByType (_cca ,_ddg ,_db .ViewPropertiesType ,_bbe ._gedb .X ());_gcg !=nil {return _gcg ;};if _fbdf :=_ac .MarshalXMLByType (_cca ,_ddg ,_db .TableStylesType ,_bbe ._bfd .X ());_fbdf !=nil {return _fbdf ;};if _bbe .CustomProperties .X ()!=nil {if _fcg :=_ac .MarshalXMLByType (_cca ,_ddg ,_db .CustomPropertiesType ,_bbe .CustomProperties .X ());_fcg !=nil {return _fcg ;};};if _bbe .Thumbnail !=nil {_dcdd ,_ebgd :=_cca .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _ebgd !=nil {return _ebgd ;};if _afag :=_gb .Encode (_dcdd ,_bbe .Thumbnail ,nil );_afag !=nil {return _afag ;};};_dce :=_db .AbsoluteFilename (_ddg ,_db .OfficeDocumentType ,0);if _bgc :=_ac .MarshalXML (_cca ,_dce ,_bbe ._acgd );_bgc !=nil {return _bgc ;};if _beg :=_ac .MarshalXML (_cca ,_ac .RelationsPathFor (_dce ),_bbe ._eag .X ());_beg !=nil {return _beg ;};for _cfef ,_bbf :=range _bbe ._afg {_gde :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideType ,_cfef +1);_ac .MarshalXML (_cca ,_gde ,_bbf );if !_bbe ._egd [_cfef ].IsEmpty (){_baf :=_ac .RelationsPathFor (_gde );_ac .MarshalXML (_cca ,_baf ,_bbe ._egd [_cfef ].X ());};};for _bde ,_ddbd :=range _bbe ._bga {_bbcb :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideMasterType ,_bde +1);_ac .MarshalXML (_cca ,_bbcb ,_ddbd );if !_bbe ._dgag [_bde ].IsEmpty (){_ebb :=_ac .RelationsPathFor (_bbcb );_ac .MarshalXML (_cca ,_ebb ,_bbe ._dgag [_bde ].X ());};};for _fdbc ,_fgg :=range _bbe ._bcb {_fcgg :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideLayoutType ,_fdbc +1);_ac .MarshalXML (_cca ,_fcgg ,_fgg );if !_bbe ._aac [_fdbc ].IsEmpty (){_eggg :=_ac .RelationsPathFor (_fcgg );_ac .MarshalXML (_cca ,_eggg ,_bbe ._aac [_fdbc ].X ());};};for _dge ,_eee :=range _bbe ._cbac {_fffb :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .ThemeType ,_dge +1);_ac .MarshalXML (_cca ,_fffb ,_eee );if !_bbe ._ceg [_dge ].IsEmpty (){_eef :=_ac .RelationsPathFor (_fffb );_ac .MarshalXML (_cca ,_eef ,_bbe ._ceg [_dge ].X ());};};for _eca ,_ada :=range _bbe ._caea {_gbb :=_db .AbsoluteFilename (_ddg ,_db .ChartType ,_eca +1);_ac .MarshalXML (_cca ,_gbb ,_ada );};for _fbfe ,_dcc :=range _bbe ._gdd {_ecab :=_db .AbsoluteFilename (_ddg ,_db .HandoutMasterType ,_fbfe +1);_ac .MarshalXML (_cca ,_ecab ,_dcc );};for _acaa ,_abc :=range _bbe ._efge {_bfff :=_db .AbsoluteFilename (_ddg ,_db .NotesMasterType ,_acaa +1);_ac .MarshalXML (_cca ,_bfff ,_abc );};for _cgb ,_ddf :=range _bbe ._fee {_bee :=_db .AbsoluteFilename (_ddg ,_db .CustomXMLType ,_cgb +1);_ac .MarshalXML (_cca ,_bee ,_ddf );};for _abfa ,_dec :=range _bbe .Images {if _cea :=_fc .AddImageToZip (_cca ,_dec ,_abfa +1,_db .DocTypePresentation );_cea !=nil {return _cea ;};};_bbe .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_bbe .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bbe .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_bbe .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _dbe :=_ac .MarshalXML (_cca ,_db .ContentTypesFilename ,_bbe .ContentTypes .X ());_dbe !=nil {return _dbe ;};if _caeg :=_bbe .WriteExtraFiles (_cca );_caeg !=nil {return _caeg ;};return nil ;};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_cfg Slide )AddImageToRels (img _fc .ImageRef )string {_bfbc :=0;for _eaa ,_geag :=range _cfg ._bdab .Images {if _geag ==img {_bfbc =_eaa +1;break ;};};var _gdfe string ;for _bgbd ,_efcd :=range _cfg ._bdab .Slides (){if _efcd ._ggdf ==_cfg ._ggdf {_agf :=_ag .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_bfbc ,img .Format ());_cadc :=_cfg ._bdab ._egd [_bgbd ].AddRelationship (_agf ,_db .ImageType );_gdfe =_cadc .ID ();};};return _gdfe ;};

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_adg *Presentation )GetColorBySchemeColor (schClr _ad .ST_SchemeColorVal )*_ad .CT_Color {if len (_adg ._bga )==0||len (_adg ._cbac )==0{return nil ;};var _dcddb _ad .ST_ColorSchemeIndex ;_bdc :=_adg ._bga [0];_cffg :=_bdc .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_dcddb =_cffg .Bg1Attr ;case "\u0062\u0067\u0032":_dcddb =_cffg .Bg2Attr ;case "\u0074\u0078\u0031":_dcddb =_cffg .Tx1Attr ;case "\u0074\u0078\u0032":_dcddb =_cffg .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_dcddb =_cffg .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_dcddb =_cffg .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_dcddb =_cffg .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_dcddb =_cffg .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_dcddb =_cffg .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_dcddb =_cffg .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_dcddb =_cffg .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_dcddb =_cffg .FolHlinkAttr ;case "\u0064\u006b\u0031":_dcddb =_ad .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_dcddb =_ad .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_dcddb =_ad .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_dcddb =_ad .ST_ColorSchemeIndexLt2 ;default:_dcddb =_ad .ST_ColorSchemeIndexUnset ;};_afbb :=_adg ._cbac [0];_ceag :=_afbb .ThemeElements ;if _ceag ==nil {return nil ;};var _ebcg *_ad .CT_Color ;_afea :=_ceag .ClrScheme ;switch _dcddb .String (){case "\u0064\u006b\u0031":_ebcg =_afea .Dk1 ;case "\u0064\u006b\u0032":_ebcg =_afea .Dk2 ;case "\u006c\u0074\u0031":_ebcg =_afea .Lt1 ;case "\u006c\u0074\u0032":_ebcg =_afea .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ebcg =_afea .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ebcg =_afea .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ebcg =_afea .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ebcg =_afea .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ebcg =_afea .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ebcg =_afea .Accent6 ;case "\u0068\u006c\u0069n\u006b":_ebcg =_afea .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ebcg =_afea .FolHlink ;default:return nil ;};return _ebcg ;};

// HtmlPubPr returns the HtmlPubPr property.
func (_baa PresentationProperties )HtmlPubPr ()*_bf .CT_HtmlPublishProperties {return _baa ._ged .HtmlPubPr ;};

// PrnPr returns the PrnPr property.
func (_def PresentationProperties )PrnPr ()*_bf .CT_PrintProperties {return _def ._ged .PrnPr };

// AddTable adds an empty table to a slide.
func (_ebcd Slide )AddTable ()*_fc .Table {_gga :=_bf .NewCT_GroupShapeChoice ();_ebcd ._ggdf .CSld .SpTree .Choice =append (_ebcd ._ggdf .CSld .SpTree .Choice ,_gga );_gaeb :=_bf .NewCT_GraphicalObjectFrame ();_gga .GraphicFrame =append (_gga .GraphicFrame ,_gaeb );_gaeb .Xfrm .Off =_ad .NewCT_Point2D ();_ebba :=int64 (1);_gaeb .Xfrm .Off .XAttr =_ad .ST_Coordinate {ST_CoordinateUnqualified :&_ebba };_gaeb .Xfrm .Off .YAttr =_ad .ST_Coordinate {ST_CoordinateUnqualified :&_ebba };_caaa :=_gaeb .Graphic .CT_GraphicalObject .GraphicData ;_caaa .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_daa :=_fc .NewTableWithXfrm (_gaeb .Xfrm );_caaa .Any =append (_caaa .Any ,_daa .X ());return _daa ;};

// Save writes the presentation out to a writer in the Zip package format
func (_agag *Presentation )Save (w _c .Writer )error {return _agag .save (w ,false )};

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_bdef *Presentation )Close ()error {if _bdef .TmpPath !=""{return _ba .RemoveAll (_bdef .TmpPath );};return nil ;};const _fbg float64 =500000;var _bgfff =false ;

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_bdde *_bf .CT_Shape ;_fbe *_bf .Sld ;};func _adf (_gf *Presentation ,_fda *_bf .CT_Shape ,_be *_bf .CT_GraphicalObjectFrame ,_fg *TableInfo ,_bcd *_ad .CT_Transform2D ,_efc int ,_fade []rectangle ,_bfb []*_ad .CT_TextParagraph )[]*TextItem {_bd :=[]*TextItem {};var _bg ,_efg ,_age ,_dfd ,_cbe ,_bad int64 ;_gc :=_bcd ==nil ;_cba :=0;for _ ,_ea :=range _bfb {for _ ,_bgf :=range _ea .EG_TextRun {if _acb :=_bgf .R ;_acb !=nil {if !_gc {if _bcd .Off !=nil {if _ded :=_bcd .Ext ;_ded !=nil {_cbe ,_bad =_ded .CxAttr ,_ded .CyAttr ;};if _cde :=_bcd .Off .XAttr .ST_CoordinateUnqualified ;_cde !=nil {_bg =*_cde ;_efg =_bg +_cbe ;_gc =true ;};if _ccbd :=_bcd .Off .YAttr .ST_CoordinateUnqualified ;_ccbd !=nil {_age =*_ccbd ;_dfd =_age +_bad ;_gc =true ;};};};_aga :=append ([]rectangle {},_fade ...);_aga =append (_aga ,rectangle {_da :_bg ,_ee :_efg ,_af :_age ,_ffe :_dfd });_bd =append (_bd ,&TextItem {Presentation :_gf ,Shape :_fda ,GraphicFrame :_be ,TableInfo :_fg ,Paragraph :_ea ,Run :_acb ,Text :_acb .T ,_cc :_aga ,_eb :_efc ,_ggg :_cba });_cba ++;};};};return _bd ;};

// LastViewAttr returns the LastViewAttr property.
func (_gfd ViewProperties )LastViewAttr ()_bf .ST_ViewType {return _gfd ._aacf .LastViewAttr };

// GetLayoutByName retrieves a slide layout given a layout name.
func (_geg *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_daef :=range _geg ._bcb {if _daef .CSld .NameAttr !=nil &&name ==*_daef .CSld .NameAttr {return SlideLayout {_daef },nil ;};};return SlideLayout {},_e .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// Remove removes a placeholder from a presentation.
func (_gaef PlaceHolder )Remove ()error {for _gfb ,_aef :=range _gaef ._fbe .CSld .SpTree .Choice {for _ ,_bge :=range _aef .Sp {if _bge ==_gaef ._bdde {copy (_gaef ._fbe .CSld .SpTree .Choice [_gfb :],_gaef ._fbe .CSld .SpTree .Choice [_gfb +1:]);_gaef ._fbe .CSld .SpTree .Choice =_gaef ._fbe .CSld .SpTree .Choice [0:len (_gaef ._fbe .CSld .SpTree .Choice )-1];return nil ;};};};return _e .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};

// SorterViewPr returns the SorterViewPr property.
func (_dfbc ViewProperties )SorterViewPr ()*_bf .CT_SlideSorterViewProperties {return _dfbc ._aacf .SorterViewPr ;};

// Properties returns the properties of the TextBox.
func (_fced TextBox )Properties ()_fad .ShapeProperties {if _fced ._gcbg .SpPr ==nil {_fced ._gcbg .SpPr =_ad .NewCT_ShapeProperties ();};return _fad .MakeShapeProperties (_fced ._gcbg .SpPr );};

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_ece *Presentation )GetImageByRelID (relID string )(_fc .ImageRef ,bool ){for _ ,_fbgd :=range _ece .Images {if _fbgd .RelID ()==relID {return _fbgd ,true ;};};return _fc .ImageRef {},false ;};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_bbac Slide )ValidateWithPath (path string )error {if _bddg :=_bbac ._ggdf .ValidateWithPath (path );_bddg !=nil {return _bddg ;};for _ ,_afcc :=range _bbac ._ggdf .CSld .SpTree .Choice {for _ ,_ddga :=range _afcc .Sp {if _ddga .TxBody !=nil {if len (_ddga .TxBody .P )==0{return _e .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// X returns the inner wrapped XML type.
func (_abaa Slide )X ()*_bf .Sld {return _abaa ._ggdf };

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_ecfg Slide )GetPlaceholder (t _bf .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_fbfa :=range _ecfg ._ggdf .CSld .SpTree .Choice {for _ ,_agbg :=range _fbfa .Sp {if _agbg .NvSpPr !=nil &&_agbg .NvSpPr .NvPr !=nil &&_agbg .NvSpPr .NvPr .Ph !=nil {if _agbg .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_agbg ,_ecfg ._ggdf },nil ;};};};};return PlaceHolder {},_e .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_caad *Presentation )AddImage (i _fc .Image )(_fc .ImageRef ,error ){_fdc :=_fc .MakeImageRef (i ,&_caad .DocBase ,_caad ._eag );if i .Data ==nil &&i .Path ==""{return _fdc ,_e .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _fdc ,_e .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _fdc ,_e .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_bfe :=_ba .Add (i .Path );if _bfe !=nil {return _fdc ,_bfe ;};};_caad .Images =append (_caad .Images ,_fdc );_caad .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_caad .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_caad .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_caad .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_caad .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _fdc ,nil ;};

// NotesViewPr returns the NotesViewPr property.
func (_gfcb ViewProperties )NotesViewPr ()*_bf .CT_NotesViewProperties {return _gfcb ._aacf .NotesViewPr };func _afe ()*Presentation {_ffcef :=&Presentation {_acgd :_bf .NewPresentation ()};_ffcef ._acgd .SldIdLst =_bf .NewCT_SlideIdList ();_ffcef ._acgd .ConformanceAttr =_ff .ST_ConformanceClassTransitional ;_ffcef .AppProperties =_fc .NewAppProperties ();_ffcef .CoreProperties =_fc .NewCoreProperties ();_ffcef ._bfd =_fc .NewTableStyles ();_ffcef .ContentTypes =_fc .NewContentTypes ();_ffcef .Rels =_fc .NewRelationships ();_ffcef ._eag =_fc .NewRelationships ();_ffcef ._geda =NewPresentationProperties ();_ffcef ._gedb =NewViewProperties ();_ffcef ._fcdf =map[string ]string {};return _ffcef ;};

// X returns TextBox's underlying *pml.CT_Shape.
func (_egbe TextBox )X ()*_bf .CT_Shape {return _egbe ._gcbg };

// ExtLst returns the ExtLst property.
func (_cfe PresentationProperties )ExtLst ()*_bf .CT_ExtensionList {return _cfe ._ged .ExtLst };

// SlideMasters returns the slide masters defined in the presentation.
func (_eeg *Presentation )SlideMasters ()[]SlideMaster {_ggeb :=[]SlideMaster {};for _gafg ,_agb :=range _eeg ._bga {_ggeb =append (_ggeb ,SlideMaster {_eeg ,_eeg ._dgag [_gafg ],_agb });};return _ggeb ;};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_bf .CT_Shape ;GraphicFrame *_bf .CT_GraphicalObjectFrame ;Paragraph *_ad .CT_TextParagraph ;Run *_ad .CT_RegularTextRun ;TableInfo *TableInfo ;_cc []rectangle ;_eb int ;_ggg int ;};func _agg (_ccb *Presentation ,_ed []*_bf .CT_GroupShapeChoice ,_fce []rectangle ,_ec []*TextItem )[]*TextItem {for _ ,_ebg :=range _ed {_ef :=append ([]rectangle {},_fce ...);for _ ,_cd :=range _ebg .Sp {_ec =append (_ec ,_adf (_ccb ,_cd ,nil ,nil ,_cd .SpPr .Xfrm ,0,_fce ,_cd .TxBody .P )...);};for _ ,_cb :=range _ebg .GraphicFrame {if _cb !=nil &&_cb .Graphic !=nil &&_cb .Graphic .GraphicData !=nil {_ecf :=_cb .Xfrm ;for _ ,_dag :=range _cb .Graphic .GraphicData .Any {if _bbc ,_ecd :=_dag .(*_ad .Tbl );_ecd {_fcd :=&_bbc .CT_Table ;_fff :=0;for _aaa ,_dg :=range _bbc .Tr {for _afc ,_ebdc :=range _dg .Tc {_cdb :=&TableInfo {Table :_fcd ,Row :_dg ,Cell :_ebdc ,RowIndex :_aaa ,ColIndex :_afc };_ec =append (_ec ,_adf (_ccb ,nil ,_cb ,_cdb ,_ecf ,_fff ,_fce ,_ebdc .TxBody .P )...);_fff ++;};};};};};};for _ ,_cag :=range _ebg .GrpSp {if _cag .GrpSpPr !=nil {_fe :=_cag .GrpSpPr .Xfrm ;var _fcc ,_bag int64 ;if _fe .Off !=nil {_gaf ,_de :=_fe .Off .XAttr .ST_CoordinateUnqualified ,_fe .Off .YAttr .ST_CoordinateUnqualified ;if _gaf !=nil &&_de !=nil {if _bfc :=_fe .Ext ;_bfc !=nil {_fcc ,_bag =_bfc .CxAttr ,_bfc .CyAttr ;};_ef =append (_ef ,rectangle {_da :*_gaf ,_af :*_de ,_ee :*_gaf +_fcc ,_ffe :*_de +_bag });};};};_ec =_agg (_ccb ,_cag .Choice ,_ef ,_ec );};};return _ec ;};

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_acbe TextBox )SetOffsetY (offY float64 ){_gdgg :=_acbe .getOff ();_ddbgd :=_bb .ToEMU (offY );_gdgg .YAttr =_ad .ST_Coordinate {ST_CoordinateUnqualified :&_ddbgd };};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_efe *_bf .SldLayout };

// SlideViewPr returns the SlideViewPr property.
func (_cgcd ViewProperties )SlideViewPr ()*_bf .CT_SlideViewProperties {return _cgcd ._aacf .SlideViewPr };

// NotesTextViewPr returns the NotesTextViewPr property.
func (_gcdc ViewProperties )NotesTextViewPr ()*_bf .CT_NotesTextViewProperties {return _gcdc ._aacf .NotesTextViewPr ;};

// NormalViewPr returns the NormalViewPr property.
func (_bgadb ViewProperties )NormalViewPr ()*_bf .CT_NormalViewProperties {return _bgadb ._aacf .NormalViewPr ;};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_ccc *Presentation )SaveAsTemplate (w _c .Writer )error {return _ccc .save (w ,true )};

// OutlineViewPr returns the OutlineViewPr property.
func (_cgee ViewProperties )OutlineViewPr ()*_bf .CT_OutlineViewProperties {return _cgee ._aacf .OutlineViewPr ;};

// ExtractText returns text from a slide as a SlideText object.
func (_cae *Slide )ExtractText ()*SlideText {_aa :=_agg (_cae ._bdab ,_cae ._ggdf .CSld .SpTree .Choice ,[]rectangle {},[]*TextItem {});_eg .Sort (sort2d (_aa ));return &SlideText {Items :_aa };};

// Slides returns the slides in the presentation.
func (_fagf *Presentation )Slides ()[]Slide {_gdca :=[]Slide {};for _fgf ,_fedb :=range _fagf ._afg {_gdca =append (_gdca ,Slide {_fagf ._acgd .SldIdLst .SldId [_fgf ],_fedb ,_fagf });};return _gdca ;};

// New initializes and reurns a new presentation
func New ()*Presentation {_ddbg :=_afe ();_ddbg .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ddbg .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_ddbg .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_ddbg .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_ddbg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_ddbg .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_ddbg .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_ddbg ._acgd .SldMasterIdLst =_bf .NewCT_SlideMasterIdList ();_gggg :=_bf .NewSldMaster ();_gggg .ClrMap .Bg1Attr =_ad .ST_ColorSchemeIndexLt1 ;_gggg .ClrMap .Bg2Attr =_ad .ST_ColorSchemeIndexLt2 ;_gggg .ClrMap .Tx1Attr =_ad .ST_ColorSchemeIndexDk1 ;_gggg .ClrMap .Tx2Attr =_ad .ST_ColorSchemeIndexDk2 ;_gggg .ClrMap .Accent1Attr =_ad .ST_ColorSchemeIndexAccent1 ;_gggg .ClrMap .Accent2Attr =_ad .ST_ColorSchemeIndexAccent2 ;_gggg .ClrMap .Accent3Attr =_ad .ST_ColorSchemeIndexAccent3 ;_gggg .ClrMap .Accent4Attr =_ad .ST_ColorSchemeIndexAccent4 ;_gggg .ClrMap .Accent5Attr =_ad .ST_ColorSchemeIndexAccent5 ;_gggg .ClrMap .Accent6Attr =_ad .ST_ColorSchemeIndexAccent6 ;_gggg .ClrMap .HlinkAttr =_ad .ST_ColorSchemeIndexHlink ;_gggg .ClrMap .FolHlinkAttr =_ad .ST_ColorSchemeIndexFolHlink ;_ddbg ._bga =append (_ddbg ._bga ,_gggg );_cge :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideMasterType ,1);_ddbg .ContentTypes .AddOverride (_cge ,_db .SlideMasterContentType );_fbf :=_ddbg ._eag .AddAutoRelationship (_db .DocTypePresentation ,_db .OfficeDocumentType ,1,_db .SlideMasterType );_eba :=_bf .NewCT_SlideMasterIdListEntry ();_eba .IdAttr =_db .Uint32 (2147483648);_eba .RIdAttr =_fbf .ID ();_ddbg ._acgd .SldMasterIdLst .SldMasterId =append (_ddbg ._acgd .SldMasterIdLst .SldMasterId ,_eba );_fbed :=_fc .NewRelationships ();_ddbg ._dgag =append (_ddbg ._dgag ,_fbed );_cfc :=_bf .NewSldLayout ();_faa :=_fbed .AddAutoRelationship (_db .DocTypePresentation ,_db .SlideMasterType ,1,_db .SlideLayoutType );_afa :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideLayoutType ,1);_ddbg .ContentTypes .AddOverride (_afa ,_db .SlideLayoutContentType );_fbed .AddAutoRelationship (_db .DocTypePresentation ,_db .SlideMasterType ,1,_db .ThemeType );_ddbg ._bcb =append (_ddbg ._bcb ,_cfc );_gggg .SldLayoutIdLst =_bf .NewCT_SlideLayoutIdList ();_bgff :=_bf .NewCT_SlideLayoutIdListEntry ();_bgff .IdAttr =_db .Uint32 (2147483649);_bgff .RIdAttr =_faa .ID ();_gggg .SldLayoutIdLst .SldLayoutId =append (_gggg .SldLayoutIdLst .SldLayoutId ,_bgff );_bdb :=_fc .NewRelationships ();_ddbg ._aac =append (_ddbg ._aac ,_bdb );_bdb .AddAutoRelationship (_db .DocTypePresentation ,_db .SlideType ,1,_db .SlideMasterType );_ddbg ._acgd .NotesSz .CxAttr =6858000;_ddbg ._acgd .NotesSz .CyAttr =9144000;_ggcg :=_ad .NewTheme ();_ggcg .NameAttr =_db .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_ggcg .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_ggcg .ThemeElements .ClrScheme .Dk1 .SysClr =_ad .NewCT_SystemColor ();_ggcg .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_db .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_ggcg .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_ad .ST_SystemColorValWindowText ;_ggcg .ThemeElements .ClrScheme .Lt1 .SysClr =_ad .NewCT_SystemColor ();_ggcg .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_db .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_ggcg .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_ad .ST_SystemColorValWindow ;_ggcg .ThemeElements .ClrScheme .Dk2 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_ggcg .ThemeElements .ClrScheme .Lt2 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_ggcg .ThemeElements .ClrScheme .Accent1 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_ggcg .ThemeElements .ClrScheme .Accent2 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_ggcg .ThemeElements .ClrScheme .Accent3 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_ggcg .ThemeElements .ClrScheme .Accent4 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_ggcg .ThemeElements .ClrScheme .Accent5 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_ggcg .ThemeElements .ClrScheme .Accent6 .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_ggcg .ThemeElements .ClrScheme .Hlink .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_ggcg .ThemeElements .ClrScheme .FolHlink .SrgbClr =_ad .NewCT_SRgbColor ();_ggcg .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_ggcg .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_ggcg .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_ggcg .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_ggcg .ThemeElements .FmtScheme .NameAttr =_db .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_ggcd :=_ad .NewEG_FillProperties ();_ggcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ggcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ggcd );_ggcd .SolidFill =&_ad .CT_SolidColorFillProperties {SchemeClr :&_ad .CT_SchemeColor {ValAttr :_ad .ST_SchemeColorValPhClr }};_ggcd =_ad .NewEG_FillProperties ();_ggcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ggcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ggcd );_ggcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_ggcg .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_ggcd );_ggcd .GradFill =&_ad .CT_GradientFillProperties {RotWithShapeAttr :_db .Bool (true ),GsLst :&_ad .CT_GradientStopList {},Lin :&_ad .CT_LinearShadeProperties {}};_ggcd .GradFill .Lin .AngAttr =_db .Int32 (5400000);_ggcd .GradFill .Lin .ScaledAttr =_db .Bool (false );_faad :=_ad .NewCT_GradientStop ();_faad .PosAttr .ST_PositiveFixedPercentageDecimal =_db .Int32 (0);_faad .SchemeClr =&_ad .CT_SchemeColor {ValAttr :_ad .ST_SchemeColorValPhClr };_ggcd .GradFill .GsLst .Gs =append (_ggcd .GradFill .GsLst .Gs ,_faad );_faad =_ad .NewCT_GradientStop ();_faad .PosAttr .ST_PositiveFixedPercentageDecimal =_db .Int32 (50000);_faad .SchemeClr =&_ad .CT_SchemeColor {ValAttr :_ad .ST_SchemeColorValPhClr };_ggcd .GradFill .GsLst .Gs =append (_ggcd .GradFill .GsLst .Gs ,_faad );_ggcg .ThemeElements .FmtScheme .LnStyleLst =_ad .NewCT_LineStyleList ();for _gce :=0;_gce < 3;_gce ++{_bed :=_ad .NewCT_LineProperties ();_bed .WAttr =_db .Int32 (int32 (6350*(_gce +1)));_bed .CapAttr =_ad .ST_LineCapFlat ;_bed .CmpdAttr =_ad .ST_CompoundLineSng ;_bed .AlgnAttr =_ad .ST_PenAlignmentCtr ;_ggcg .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_ggcg .ThemeElements .FmtScheme .LnStyleLst .Ln ,_bed );};_ggcg .ThemeElements .FmtScheme .EffectStyleLst =_ad .NewCT_EffectStyleList ();for _abe :=0;_abe < 3;_abe ++{_ddbgf :=_ad .NewCT_EffectStyleItem ();_ddbgf .EffectLst =_ad .NewCT_EffectList ();_ggcg .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_ggcg .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_ddbgf );};_ffa :=_ad .NewEG_FillProperties ();_ffa .SolidFill =&_ad .CT_SolidColorFillProperties {SchemeClr :&_ad .CT_SchemeColor {ValAttr :_ad .ST_SchemeColorValPhClr }};_ggcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ggcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ffa );_ggcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ggcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ffa );_ggcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_ggcg .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_ggcd );_ddbg ._cbac =append (_ddbg ._cbac ,_ggcg );_fbfb :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .ThemeType ,1);_ddbg .ContentTypes .AddOverride (_fbfb ,_db .ThemeContentType );_ddbg ._eag .AddAutoRelationship (_db .DocTypePresentation ,_db .OfficeDocumentType ,1,_db .ThemeType );_gec :=_fc .NewRelationships ();_ddbg ._ceg =append (_ddbg ._ceg ,_gec );return _ddbg ;};func _dca (_cff []*_bf .CT_GroupShapeChoice )[]*_bf .CT_GroupShapeChoice {var _gda []*_bf .CT_GroupShapeChoice ;for _ ,_acf :=range _cff {if len (_acf .Pic )==0{_gda =append (_gda ,_acf );};};return _gda ;};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_dggg PlaceHolder )Paragraphs ()[]_fad .Paragraph {_fage :=[]_fad .Paragraph {};for _ ,_cg :=range _dggg ._bdde .TxBody .P {_fage =append (_fage ,_fad .MakeParagraph (_cg ));};return _fage ;};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_aacf *_bf .ViewPr };

// PlaceHolders returns all of the content place holders within a given slide.
func (_bcca Slide )PlaceHolders ()[]PlaceHolder {_cafd :=[]PlaceHolder {};for _ ,_fac :=range _bcca ._ggdf .CSld .SpTree .Choice {for _ ,_gdac :=range _fac .Sp {if _gdac .NvSpPr !=nil &&_gdac .NvSpPr .NvPr !=nil &&_gdac .NvSpPr .NvPr .Ph !=nil {_cafd =append (_cafd ,PlaceHolder {_gdac ,_bcca ._ggdf });};};};return _cafd ;};

// X returns the inner wrapped XML type.
func (_dfb SlideLayout )X ()*_bf .SldLayout {return _dfb ._efe };

// SaveToFile writes the Presentation out to a file.
func (_fgd *Presentation )SaveToFile (path string )error {return _fgd .saveToFile (path ,false )};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_geb *Presentation )SlideLayouts ()[]SlideLayout {_abcd :=[]SlideLayout {};for _ ,_gdc :=range _geb ._bcb {_abcd =append (_abcd ,SlideLayout {_gdc });};return _abcd ;};

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_gfbe TextBox )SetOffsetX (offX float64 ){_fdabf :=_gfbe .getOff ();_cbf :=_bb .ToEMU (offX );_fdabf .XAttr =_ad .ST_Coordinate {ST_CoordinateUnqualified :&_cbf };};

// ShowPr returns the ShowPr property.
func (_caa PresentationProperties )ShowPr ()*_bf .CT_ShowProperties {return _caa ._ged .ShowPr };func (_cdd *Presentation )nextSlideID ()uint32 {_edf :=uint32 (256);for _ ,_gcb :=range _cdd ._acgd .SldIdLst .SldId {if _gcb .IdAttr >=_edf {_edf =_gcb .IdAttr +1;};};return _edf ;};func (_fae *Presentation )Validate ()error {if _gagf :=_fae ._acgd .Validate ();_gagf !=nil {return _gagf ;};for _cfd ,_gfe :=range _fae .Slides (){if _edgb :=_gfe .ValidateWithPath (_ag .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_cfd ));_edgb !=nil {return _edgb ;};};for _cec ,_beeg :=range _fae ._bga {if _bcdb :=_beeg .ValidateWithPath (_ag .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_cec ));_bcdb !=nil {return _bcdb ;};};for _ecfe ,_fba :=range _fae ._bcb {if _gecb :=_fba .ValidateWithPath (_ag .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_ecfe ));_gecb !=nil {return _gecb ;};};return nil ;};

// WebPr returns the WebPr property.
func (_cad PresentationProperties )WebPr ()*_bf .CT_WebProperties {return _cad ._ged .WebPr };

// Index returns the placeholder index
func (_gbc PlaceHolder )Index ()uint32 {if _gbc ._bdde .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_gbc ._bdde .NvSpPr .NvPr .Ph .IdxAttr ;};

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_aacf :_bf .NewViewPr ()}};

// ExtLst returns the ExtLst property.
func (_afga ViewProperties )ExtLst ()*_bf .CT_ExtensionList {return _afga ._aacf .ExtLst };

// Image is an image within a slide.
type Image struct{_ecb *_bf .CT_Picture };

// X returns the inner wrapped XML type.
func (_acc ViewProperties )X ()*_bf .ViewPr {return _acc ._aacf };

// Text returns text from a slide as one string separated with line breaks.
func (_fdab *SlideText )Text ()string {_bda :=_ga .NewBuffer ([]byte {});for _ ,_dga :=range _fdab .Items {if _dga .Text !=""{_bda .WriteString (_dga .Text );_bda .WriteString ("\u000a");};};return _bda .String ();};func (_ffce sort2d )Len ()int {return len (_ffce )};

// SetTextAnchor controls the text anchoring
func (_bbfg TextBox )SetTextAnchor (a _ad .ST_TextAnchoringType ){_bbfg ._gcbg .TxBody .BodyPr =_ad .NewCT_TextBodyProperties ();_bbfg ._gcbg .TxBody .BodyPr .AnchorAttr =a ;};

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_ged *_bf .PresentationPr };

// AddImage adds an image textbox to a slide.
func (_edb Slide )AddImage (img _fc .ImageRef )Image {_eegc :=_bf .NewCT_GroupShapeChoice ();_edb ._ggdf .CSld .SpTree .Choice =append (_edb ._ggdf .CSld .SpTree .Choice ,_eegc );_bfg :=_bf .NewCT_Picture ();_eegc .Pic =append (_eegc .Pic ,_bfg );_bfg .NvPicPr .CNvPicPr =_ad .NewCT_NonVisualPictureProperties ();_bfg .NvPicPr .CNvPicPr .PicLocks =_ad .NewCT_PictureLocking ();_bfg .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_db .Bool (true );_bfg .BlipFill =_ad .NewCT_BlipFillProperties ();_bfg .BlipFill .Blip =_ad .NewCT_Blip ();_agad :=_edb .AddImageToRels (img );_bfg .BlipFill .Blip .EmbedAttr =_db .String (_agad );_bfg .BlipFill .Stretch =_ad .NewCT_StretchInfoProperties ();_bfg .BlipFill .Stretch .FillRect =_ad .NewCT_RelativeRect ();_bfg .SpPr =_ad .NewCT_ShapeProperties ();_bfg .SpPr .PrstGeom =_ad .NewCT_PresetGeometry2D ();_bfg .SpPr .PrstGeom .PrstAttr =_ad .ST_ShapeTypeRect ;_aff :=Image {_bfg };_gea :=img .Size ();_aff .Properties ().SetWidth (_bb .Distance (_gea .X )*_bb .Pixel72 );_aff .Properties ().SetHeight (_bb .Distance (_gea .Y )*_bb .Pixel72 );_aff .Properties ().SetPosition (0,0);return _aff ;};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_ged :_bf .NewPresentationPr ()};};

// X returns the inner wrapped XML type.
func (_cfa PresentationProperties )X ()*_bf .PresentationPr {return _cfa ._ged };

// X returns the inner wrapped XML type.
func (_egfa *Presentation )X ()*_bf .Presentation {return _egfa ._acgd };func (_aecg *Presentation )onNewRelationship (_dbea *_ac .DecodeMap ,_cged ,_bfca string ,_cfcg []*_fd .File ,_afge *_ae .Relationship ,_bccg _ac .Target )error {_ebc :=_db .DocTypePresentation ;switch _bfca {case _db .OfficeDocumentType :_aecg ._acgd =_bf .NewPresentation ();_dbea .AddTarget (_cged ,_aecg ._acgd ,_bfca ,0);_dbea .AddTarget (_ac .RelationsPathFor (_cged ),_aecg ._eag .X (),_bfca ,0);_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,0);case _db .CorePropertiesType :_dbea .AddTarget (_cged ,_aecg .CoreProperties .X (),_bfca ,0);_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,0);case _db .CustomPropertiesType :_dbea .AddTarget (_cged ,_aecg .CustomProperties .X (),_bfca ,0);_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,0);case _db .PresentationPropertiesType :_dbea .AddTarget (_cged ,_aecg ._geda .X (),_bfca ,0);_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,0);case _db .ViewPropertiesType :_dbea .AddTarget (_cged ,_aecg ._gedb .X (),_bfca ,0);_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,0);case _db .TableStylesType :_dbea .AddTarget (_cged ,_aecg ._bfd .X (),_bfca ,0);_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,0);case _db .HyperLinkType :_fceb :=_ad .NewCT_Hyperlink ();_bgda :=uint32 (len (_aecg ._egg ));_dbea .AddTarget (_cged ,_fceb ,_bfca ,_bgda );_aecg ._egg =append (_aecg ._egg ,_fceb );case _db .CustomXMLType :_bec :=&_db .XSDAny {};_bdbb :=uint32 (len (_aecg ._fee ));_dbea .AddTarget (_cged ,_bec ,_bfca ,_bdbb );_aecg ._fee =append (_aecg ._fee ,_bec );_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._fee ));case _db .ChartType :_gfce :=_b .NewChartSpace ();_dedc :=uint32 (len (_aecg ._caea ));_dbea .AddTarget (_cged ,_gfce ,_bfca ,_dedc );_aecg ._caea =append (_aecg ._caea ,_gfce );_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._caea ));case _db .HandoutMasterType :_feag :=_bf .NewHandoutMaster ();_feea :=uint32 (len (_aecg ._gdd ));_dbea .AddTarget (_cged ,_feag ,_bfca ,_feea );_aecg ._gdd =append (_aecg ._gdd ,_feag );_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._gdd ));case _db .NotesMasterType :_begb :=_bf .NewNotesMaster ();_eeef :=uint32 (len (_aecg ._efge ));_dbea .AddTarget (_cged ,_begb ,_bfca ,_eeef );_aecg ._efge =append (_aecg ._efge ,_begb );_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._efge ));case _db .ExtendedPropertiesType :_dbea .AddTarget (_cged ,_aecg .AppProperties .X (),_bfca ,0);_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,0);case _db .SlideType :_cadee :=_bf .NewSld ();_aecg ._afg =append (_aecg ._afg ,_cadee );_dbea .AddTarget (_cged ,_cadee ,_bfca ,uint32 (len (_aecg ._afg )));_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._afg ));_dae :=_fc .NewRelationships ();_dbea .AddTarget (_ac .RelationsPathFor (_cged ),_dae .X (),_bfca ,0);_aecg ._egd =append (_aecg ._egd ,_dae );case _db .SlideMasterType :_afcg :=_bf .NewSldMaster ();if !_dbea .AddTarget (_cged ,_afcg ,_bfca ,uint32 (len (_aecg ._bga )+1)){return nil ;};_aecg ._bga =append (_aecg ._bga ,_afcg );_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._bga ));_fcafc :=_fc .NewRelationships ();_dbea .AddTarget (_ac .RelationsPathFor (_cged ),_fcafc .X (),_bfca ,0);_aecg ._dgag =append (_aecg ._dgag ,_fcafc );case _db .SlideLayoutType :_agc :=_bf .NewSldLayout ();if !_dbea .AddTarget (_cged ,_agc ,_bfca ,uint32 (len (_aecg ._bcb )+1)){return nil ;};_aecg ._bcb =append (_aecg ._bcb ,_agc );_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._bcb ));_cgbe :=_fc .NewRelationships ();_dbea .AddTarget (_ac .RelationsPathFor (_cged ),_cgbe .X (),_bfca ,0);_aecg ._aac =append (_aecg ._aac ,_cgbe );case _db .ThumbnailType :for _dde ,_ebbe :=range _cfcg {if _ebbe ==nil {continue ;};if _ebbe .Name ==_cged {_fed ,_afbd :=_ebbe .Open ();if _afbd !=nil {return _ag .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_afbd );};_aecg .Thumbnail ,_ ,_afbd =_f .Decode (_fed );_fed .Close ();if _afbd !=nil {return _ag .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_afbd );};_cfcg [_dde ]=nil ;};};case _db .ThemeType :_bea :=_ad .NewTheme ();if !_dbea .AddTarget (_cged ,_bea ,_bfca ,uint32 (len (_aecg ._cbac )+1)){return nil ;};_aecg ._cbac =append (_aecg ._cbac ,_bea );_afge .TargetAttr =_db .RelativeFilename (_ebc ,_bccg .Typ ,_bfca ,len (_aecg ._cbac ));_ceba :=_fc .NewRelationships ();_dbea .AddTarget (_ac .RelationsPathFor (_cged ),_ceba .X (),_bfca ,0);_aecg ._ceg =append (_aecg ._ceg ,_ceba );case _db .ImageType :_cged =_d .Clean (_cged );if _egda ,_fgaef :=_aecg ._fcdf [_cged ];_fgaef {_afge .TargetAttr =_egda ;return nil ;};_bgad :="";for _dgb ,_fbfg :=range _cfcg {if _fbfg ==nil {continue ;};if _fbfg .Name ==_cged {_gdcg ,_fgag :=_ac .ExtractToDiskTmp (_fbfg ,_aecg .TmpPath );if _fgag !=nil {return _fgag ;};_cdea ,_fgag :=_fc .ImageFromStorage (_gdcg );if _fgag !=nil {return _fgag ;};_bgad =_cdea .Format ;_afab :=_fc .MakeImageRef (_cdea ,&_aecg .DocBase ,_aecg ._eag );_aecg .Images =append (_aecg .Images ,_afab );_cfcg [_dgb ]=nil ;_dbea .RecordIndex (_cged ,len (_aecg .Images ));break ;};};_bedf :=_dbea .IndexFor (_cged );_afge .TargetAttr =_db .RelativeImageFilename (_ebc ,_bccg .Typ ,_bfca ,_bedf ,_bgad );_aecg ._fcdf [_cged ]=_afge .TargetAttr ;default:_db .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_bfca ,_cged );};return nil ;};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_bbcd *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_ggf :=_bf .NewCT_SlideIdListEntry ();_ggf .IdAttr =256;for _ ,_eac :=range _bbcd ._acgd .SldIdLst .SldId {if _eac .IdAttr >=_ggf .IdAttr {_ggf .IdAttr =_eac .IdAttr +1;};};_bbcd ._acgd .SldIdLst .SldId =append (_bbcd ._acgd .SldIdLst .SldId ,_ggf );_fga :=_bf .NewSld ();_dabd :=_ga .Buffer {};_efa :=_fa .NewEncoder (&_dabd );_dabe :=_fa .StartElement {Name :_fa .Name {Local :"\u0073\u006c\u0069d\u0065"}};_dabe .Attr =append (_dabe .Attr ,_fa .Attr {Name :_fa .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dabe .Attr =append (_dabe .Attr ,_fa .Attr {Name :_fa .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_dabe .Attr =append (_dabe .Attr ,_fa .Attr {Name :_fa .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_dabe .Attr =append (_dabe .Attr ,_fa .Attr {Name :_fa .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_dabe .Attr =append (_dabe .Attr ,_fa .Attr {Name :_fa .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_dabe .Attr =append (_dabe .Attr ,_fa .Attr {Name :_fa .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _efdd :=l ._efe .CSld .MarshalXML (_efa ,_dabe );_efdd !=nil {return Slide {},_efdd ;};_efa .Flush ();_ade :=_fa .NewDecoder (&_dabd );_fga .CSld =_bf .NewCT_CommonSlideData ();if _gcf :=_ade .Decode (_fga .CSld );_gcf !=nil {return Slide {},_gcf ;};_fga .CSld .NameAttr =nil ;_fga .CSld .SpTree .Choice =_dca (_fga .CSld .SpTree .Choice );_bbcd ._afg =append (_bbcd ._afg ,_fga );_bffc :=_bbcd ._eag .AddAutoRelationship (_db .DocTypePresentation ,_db .OfficeDocumentType ,len (_bbcd ._afg ),_db .SlideType );_ggf .RIdAttr =_bffc .ID ();_fgae :=_db .AbsoluteFilename (_db .DocTypePresentation ,_db .SlideType ,len (_bbcd ._afg ));_bbcd .ContentTypes .AddOverride (_fgae ,_db .SlideContentType );_aag :=_fc .NewRelationships ();_bbcd ._egd =append (_bbcd ._egd ,_aag );_ecdc :=len (_bbcd ._egd )-1;for _agd ,_cbd :=range _bbcd ._bcb {if _cbd ==l .X (){_dbd :=_bbcd ._aac [_agd ];for _ ,_afb :=range _dbd .X ().Relationship {if _afb .TypeAttr !=_db .SlideMasterType {_bbcd ._egd [_ecdc ].X ().Relationship =append (_bbcd ._egd [_ecdc ].X ().Relationship ,_afb );};};_aag .AddAutoRelationship (_db .DocTypePresentation ,_db .SlideType ,_agd +1,_db .SlideLayoutType );};};_fdb :=Slide {_ggf ,_fga ,_bbcd };return _fdb ,nil ;};

// Presentation is the a presentation base document.
type Presentation struct{_fc .DocBase ;_acgd *_bf .Presentation ;_eag _fc .Relationships ;_afg []*_bf .Sld ;_egd []_fc .Relationships ;_bga []*_bf .SldMaster ;_dgag []_fc .Relationships ;_bcb []*_bf .SldLayout ;_aac []_fc .Relationships ;_cbac []*_ad .Theme ;_ceg []_fc .Relationships ;_bfd _fc .TableStyles ;_geda PresentationProperties ;_gedb ViewProperties ;_egg []*_ad .CT_Hyperlink ;_caea []*_b .ChartSpace ;_gdd []*_bf .HandoutMaster ;_efge []*_bf .NotesMaster ;_fee []*_db .XSDAny ;_fcdf map[string ]string ;_fcdb string ;};

// ShowCommentsAttr returns the WebPr property.
func (_fadec ViewProperties )ShowCommentsAttr ()*bool {return _fadec ._aacf .ShowCommentsAttr };

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_dea ,_egb :=Open (fn );if _egb !=nil {return nil ,_egb ;};return _dea ,nil ;};type sort2d []*TextItem ;

// Name returns the name of the slide layout.
func (_bce SlideLayout )Name ()string {if _bce ._efe .CSld !=nil &&_bce ._efe .CSld .NameAttr !=nil {return *_bce ._efe .CSld .NameAttr ;};return "";};

// GridSpacing returns the GridSpacing property.
func (_cgd ViewProperties )GridSpacing ()*_ad .CT_PositiveSize2D {return _cgd ._aacf .GridSpacing };

// X returns the inner wrapped XML type.
func (_bgbb SlideMaster )X ()*_bf .SldMaster {return _bgbb ._fdga };

// X returns the inner wrapped XML type.
func (_ce PlaceHolder )X ()*_bf .CT_Shape {return _ce ._bdde };

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_deda *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_eaf ,_bac :=_deda .AddSlideWithLayout (l );for _ ,_bfdb :=range _eaf .PlaceHolders (){_bfdb .Clear ();switch _bfdb .Type (){case _bf .ST_PlaceholderTypeFtr ,_bf .ST_PlaceholderTypeDt ,_bf .ST_PlaceholderTypeSldNum :_bfdb .Remove ();};};return _eaf ,_bac ;};