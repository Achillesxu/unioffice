//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package presentation ;import (_fa "archive/zip";_e "bytes";_db "encoding/xml";_c "errors";_faa "fmt";_aa "github.com/unidoc/unioffice";_fefd "github.com/unidoc/unioffice/common";_gcb "github.com/unidoc/unioffice/common/tempstorage";_ac "github.com/unidoc/unioffice/drawing";_dfa "github.com/unidoc/unioffice/internal/license";_de "github.com/unidoc/unioffice/measurement";_fd "github.com/unidoc/unioffice/schema/soo/dml";_ffc "github.com/unidoc/unioffice/schema/soo/dml/chart";_ga "github.com/unidoc/unioffice/schema/soo/ofc/sharedTypes";_ff "github.com/unidoc/unioffice/schema/soo/pkg/relationships";_bfe "github.com/unidoc/unioffice/schema/soo/pml";_a "github.com/unidoc/unioffice/zippkg";_fef "image";_fe "image/jpeg";_df "io";_fg "log";_bf "os";_d "path";_gc "sort";_g "strconv";_b "strings";);func (_dbd *Presentation )nextSlideID ()uint32 {_dcb :=uint32 (256);for _ ,_dbb :=range _dbd ._dgb .SldIdLst .SldId {if _dbb .IdAttr >=_dcb {_dcb =_dbb .IdAttr +1;};};return _dcb ;};

// Read reads a document from an io.Reader.
func Read (r _df .ReaderAt ,size int64 )(*Presentation ,error ){const _ddfc ="\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e:\u0052\u0065\u0061\u0064";if !_dfa .GetLicenseKey ().IsLicensed ()&&!_bcba {_faa .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_faa .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return nil ,_c .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};_edcbg :=_dfb ();_dde ,_bdcg :=_dfa .GenRefId ("\u0070\u0072");if _bdcg !=nil {_aa .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_bdcg );return nil ,_bdcg ;};_edcbg ._gbb =_dde ;if _cfc :=_dfa .Track (_edcbg ._gbb ,_ddfc );_cfc !=nil {_faa .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_cfc );return nil ,_cfc ;};_cfcf ,_bdcg :=_gcb .TempDir ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065-\u0070\u0070\u0074\u0078");if _bdcg !=nil {return nil ,_bdcg ;};_edcbg .TmpPath =_cfcf ;_ecbd ,_bdcg :=_fa .NewReader (r ,size );if _bdcg !=nil {return nil ,_faa .Errorf ("\u0070a\u0072s\u0069\u006e\u0067\u0020\u007a\u0069\u0070\u003a\u0020\u0025\u0073",_bdcg );};_gcab :=[]*_fa .File {};_gcab =append (_gcab ,_ecbd .File ...);_ecbe :=false ;for _ ,_aabf :=range _gcab {if _aabf .FileHeader .Name =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_ecbe =true ;break ;};};if _ecbe {_edcbg .CreateCustomProperties ();};_bbbf :=_a .DecodeMap {};_bbbf .SetOnNewRelationshipFunc (_edcbg .onNewRelationship );_bbbf .AddTarget (_aa .ContentTypesFilename ,_edcbg .ContentTypes .X (),"",0);_bbbf .AddTarget (_aa .BaseRelsFilename ,_edcbg .Rels .X (),"",0);if _aebf :=_bbbf .Decode (_gcab );_aebf !=nil {return nil ,_aebf ;};for _ ,_efcf :=range _gcab {if _efcf ==nil {continue ;};if _fedb :=_edcbg .AddExtraFileFromZip (_efcf );_fedb !=nil {return nil ,_fedb ;};};if _ecbe {_aabeg :=false ;for _ ,_degd :=range _edcbg .Rels .X ().Relationship {if _degd .TargetAttr =="\u0064\u006f\u0063\u0050ro\u0070\u0073\u002f\u0063\u0075\u0073\u0074\u006f\u006d\u002e\u0078\u006d\u006c"{_aabeg =true ;break ;};};if !_aabeg {_edcbg .AddCustomRelationships ();};};return _edcbg ,nil ;};

// X returns the inner wrapped XML type.
func (_gcd PlaceHolder )X ()*_bfe .CT_Shape {return _gcd ._fed };

// ExtLst returns the ExtLst property.
func (_bbd PresentationProperties )ExtLst ()*_bfe .CT_ExtensionList {return _bbd ._adf .ExtLst };func _ed (_ab *Presentation ,_gd *_bfe .CT_Shape ,_aff *_bfe .CT_GraphicalObjectFrame ,_dff *TableInfo ,_dbc *_fd .CT_Transform2D ,_edg int ,_dd []*_fd .CT_TextParagraph )[]*TextItem {_ddf :=[]*TextItem {};var _ffb ,_fdb int64 ;_efd :=_dbc ==nil ;_be :=0;for _ ,_ede :=range _dd {for _ ,_gbc :=range _ede .EG_TextRun {if _cded :=_gbc .R ;_cded !=nil {if !_efd {if _dbc .Off !=nil {if _gae :=_dbc .Off .XAttr .ST_CoordinateUnqualified ;_gae !=nil {_ffb =*_gae ;_efd =true ;};if _gg :=_dbc .Off .YAttr .ST_CoordinateUnqualified ;_gg !=nil {_fdb =*_gg ;_efd =true ;};};};_ddf =append (_ddf ,&TextItem {Presentation :_ab ,Shape :_gd ,GraphicFrame :_aff ,TableInfo :_dff ,Paragraph :_ede ,Run :_cded ,Text :_cded .T ,_da :_ffb ,_ag :_fdb ,_dc :_edg ,_ce :_be });_be ++;};};};return _ddf ;};

// SaveAsTemplate writes the presentation out to a writer in the Zip package format as a template
func (_bcb *Presentation )SaveAsTemplate (w _df .Writer )error {return _bcb .save (w ,true )};

// Presentation is the a presentation base document.
type Presentation struct{_fefd .DocBase ;_dgb *_bfe .Presentation ;_efc _fefd .Relationships ;_dcc []*_bfe .Sld ;_egag []_fefd .Relationships ;_bae []*_bfe .SldMaster ;_gbg []_fefd .Relationships ;_ace []*_bfe .SldLayout ;_bcda []_fefd .Relationships ;_fbb []*_fd .Theme ;_fgba []_fefd .Relationships ;_fbc _fefd .TableStyles ;_aag PresentationProperties ;_ded ViewProperties ;_dga []*_fd .CT_Hyperlink ;_aga []*_ffc .ChartSpace ;_edgg []*_bfe .HandoutMaster ;_ddc []*_bfe .NotesMaster ;_fgbb []*_aa .XSDAny ;_cff map[string ]string ;_gbb string ;};

// GetTableStyleById returns *dml.CT_TableStyle by its style id.
func (_agg *Presentation )GetTableStyleById (id string )*_fd .CT_TableStyle {_dfgg :=_agg ._fbc .TblStyle ();for _ ,_aef :=range _dfgg {if _aef .StyleIdAttr ==id {return _aef ;};};return nil ;};

// AddImage adds an image to the document package, returning a reference that
// can be used to add the image to a run and place it in the document contents.
func (_eebg *Presentation )AddImage (i _fefd .Image )(_fefd .ImageRef ,error ){_cgde :=_fefd .MakeImageRef (i ,&_eebg .DocBase ,_eebg ._efc );if i .Data ==nil &&i .Path ==""{return _cgde ,_c .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0064\u0061t\u0061\u0020\u006f\u0072\u0020\u0061\u0020\u0070\u0061\u0074\u0068");};if i .Format ==""{return _cgde ,_c .New ("\u0069\u006d\u0061\u0067\u0065\u0020\u006d\u0075\u0073\u0074 \u0068\u0061\u0076\u0065\u0020\u0061\u0020v\u0061\u006c\u0069\u0064\u0020\u0066\u006f\u0072\u006d\u0061\u0074");};if i .Size .X ==0||i .Size .Y ==0{return _cgde ,_c .New ("\u0069\u006d\u0061\u0067e\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065 \u0061 \u0076\u0061\u006c\u0069\u0064\u0020\u0073i\u007a\u0065");};if i .Path !=""{_adge :=_gcb .Add (i .Path );if _adge !=nil {return _cgde ,_adge ;};};_eebg .Images =append (_eebg .Images ,_cgde );_eebg .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_eebg .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_eebg .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_eebg .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");_eebg .ContentTypes .EnsureDefault (i .Format ,"\u0069\u006d\u0061\u0067\u0065\u002f"+i .Format );return _cgde ,nil ;};

// PresentationText is an array of extracted text items which has some methods for representing extracted text.
type PresentationText struct{Slides []*SlideText ;};

// SlideMasters returns the slide masters defined in the presentation.
func (_ecc *Presentation )SlideMasters ()[]SlideMaster {_badd :=[]SlideMaster {};for _ecfe ,_egagf :=range _ecc ._bae {_badd =append (_badd ,SlideMaster {_ecc ,_ecc ._gbg [_ecfe ],_egagf });};return _badd ;};

// Save writes the presentation out to a writer in the Zip package format
func (_fga *Presentation )Save (w _df .Writer )error {return _fga .save (w ,false )};

// PlaceHolder is a place holder from a slide.
type PlaceHolder struct{_fed *_bfe .CT_Shape ;_dfe *_bfe .Sld ;};

// Close closes the presentation, removing any temporary files that might have been
// created when opening a document.
func (_fbbc *Presentation )Close ()error {if _fbbc .TmpPath !=""{return _gcb .RemoveAll (_fbbc .TmpPath );};return nil ;};

// Type returns the placeholder type
func (_egf PlaceHolder )Type ()_bfe .ST_PlaceholderType {return _egf ._fed .NvSpPr .NvPr .Ph .TypeAttr };

// X returns the inner wrapped XML type.
func (_cafb Slide )X ()*_bfe .Sld {return _cafb ._ggc };

// X returns the inner wrapped XML type.
func (_egd *Presentation )X ()*_bfe .Presentation {return _egd ._dgb };

// GetImageByRelID returns an ImageRef with the associated relation ID in the
// document.
func (_afbf *Presentation )GetImageByRelID (relID string )(_fefd .ImageRef ,bool ){for _ ,_ffdf :=range _afbf .Images {if _ffdf .RelID ()==relID {return _ffdf ,true ;};};return _fefd .ImageRef {},false ;};

// ExtractText returns text from a presentation as a PresentationText object.
func (_dg *Presentation )ExtractText ()*PresentationText {_gcc :=[]*SlideText {};for _ ,_ceb :=range _dg .Slides (){_eg :=_ceb .ExtractText ();if _eg !=nil {_gcc =append (_gcc ,_eg );};};return &PresentationText {Slides :_gcc };};var _bcba =false ;

// ClearAll completely clears a placeholder. To be useable, at least one
// paragraph must be added after ClearAll via AddParagraph.
func (_egfa PlaceHolder )ClearAll (){_egfa ._fed .SpPr =_fd .NewCT_ShapeProperties ();_egfa ._fed .TxBody =_fd .NewCT_TextBody ();_egfa ._fed .TxBody .LstStyle =_fd .NewCT_TextListStyle ();};

// OutlineViewPr returns the OutlineViewPr property.
func (_becd ViewProperties )OutlineViewPr ()*_bfe .CT_OutlineViewProperties {return _becd ._geabe .OutlineViewPr ;};

// SetOffsetY sets vertical offset of text box in distance units (see measurement package).
func (_acbd TextBox )SetOffsetY (offY float64 ){_aggb :=_acbd .getOff ();_ebfe :=_de .ToEMU (offY );_aggb .YAttr =_fd .ST_Coordinate {ST_CoordinateUnqualified :&_ebfe };};

// ValidateWithPath validates the slide passing path informaton for a better
// error message.
func (_ecfd Slide )ValidateWithPath (path string )error {if _fbe :=_ecfd ._ggc .ValidateWithPath (path );_fbe !=nil {return _fbe ;};for _ ,_gaec :=range _ecfd ._ggc .CSld .SpTree .Choice {for _ ,_eab :=range _gaec .Sp {if _eab .TxBody !=nil {if len (_eab .TxBody .P )==0{return _c .New (path +"\u0020\u003a \u0073\u006c\u0069\u0064\u0065 \u0073\u0068\u0061\u0070\u0065 \u0077\u0069\u0074\u0068\u0020\u0061\u0020\u0074\u0078\u0062\u006f\u0064\u0079\u0020\u006d\u0075\u0073\u0074\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0070\u0061\u0072\u0061\u0067\u0072\u0061\u0070\u0068\u0073");};};};};return nil ;};

// OpenTemplate opens a template file.
func OpenTemplate (fn string )(*Presentation ,error ){_ea ,_ecf :=Open (fn );if _ecf !=nil {return nil ,_ecf ;};return _ea ,nil ;};

// AddImageToRels adds an image relationship to a slide without putting image on the slide.
func (_gad Slide )AddImageToRels (img _fefd .ImageRef )string {_dee :=0;for _cbdf ,_bagf :=range _gad ._edga .Images {if _bagf ==img {_dee =_cbdf +1;break ;};};var _bfg string ;for _bbgf ,_cbcf :=range _gad ._edga .Slides (){if _cbcf ._ggc ==_gad ._ggc {_cef :=_faa .Sprintf ("\u002e\u002e\u002f\u006ded\u0069\u0061\u002f\u0069\u006d\u0061\u0067\u0065\u0025\u0064\u002e\u0025\u0073",_dee ,img .Format ());_bba :=_gad ._edga ._egag [_bbgf ].AddRelationship (_cef ,_aa .ImageType );_bfg =_bba .ID ();};};return _bfg ;};

// Index returns the placeholder index
func (_afb PlaceHolder )Index ()uint32 {if _afb ._fed .NvSpPr .NvPr .Ph .IdxAttr ==nil {return 0;};return *_afb ._fed .NvSpPr .NvPr .Ph .IdxAttr ;};

// SlideText is an array of extracted text items which has some methods for representing extracted text from a slide.
type SlideText struct{Items []*TextItem ;};

// PrnPr returns the PrnPr property.
func (_gff PresentationProperties )PrnPr ()*_bfe .CT_PrintProperties {return _gff ._adf .PrnPr };

// GetColorBySchemeColor returns *dml.CT_Color mapped to scheme colors like dk1, lt1 etc. depending on what theme is used in the presentation.
func (_fff *Presentation )GetColorBySchemeColor (schClr _fd .ST_SchemeColorVal )*_fd .CT_Color {if len (_fff ._bae )==0||len (_fff ._fbb )==0{return nil ;};var _gbgg _fd .ST_ColorSchemeIndex ;_fda :=_fff ._bae [0];_dea :=_fda .ClrMap ;switch schClr .String (){case "\u0062\u0067\u0031":_gbgg =_dea .Bg1Attr ;case "\u0062\u0067\u0032":_gbgg =_dea .Bg2Attr ;case "\u0074\u0078\u0031":_gbgg =_dea .Tx1Attr ;case "\u0074\u0078\u0032":_gbgg =_dea .Tx2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_gbgg =_dea .Accent1Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_gbgg =_dea .Accent2Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_gbgg =_dea .Accent3Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_gbgg =_dea .Accent4Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_gbgg =_dea .Accent5Attr ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_gbgg =_dea .Accent6Attr ;case "\u0068\u006c\u0069n\u006b":_gbgg =_dea .HlinkAttr ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_gbgg =_dea .FolHlinkAttr ;case "\u0064\u006b\u0031":_gbgg =_fd .ST_ColorSchemeIndexDk1 ;case "\u0064\u006b\u0032":_gbgg =_fd .ST_ColorSchemeIndexDk2 ;case "\u006c\u0074\u0031":_gbgg =_fd .ST_ColorSchemeIndexLt1 ;case "\u006c\u0074\u0032":_gbgg =_fd .ST_ColorSchemeIndexLt2 ;default:_gbgg =_fd .ST_ColorSchemeIndexUnset ;};_eba :=_fff ._fbb [0];_bgaa :=_eba .ThemeElements ;if _bgaa ==nil {return nil ;};var _ggad *_fd .CT_Color ;_cdf :=_bgaa .ClrScheme ;switch _gbgg .String (){case "\u0064\u006b\u0031":_ggad =_cdf .Dk1 ;case "\u0064\u006b\u0032":_ggad =_cdf .Dk2 ;case "\u006c\u0074\u0031":_ggad =_cdf .Lt1 ;case "\u006c\u0074\u0032":_ggad =_cdf .Lt2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0031":_ggad =_cdf .Accent1 ;case "\u0061c\u0063\u0065\u006e\u0074\u0032":_ggad =_cdf .Accent2 ;case "\u0061c\u0063\u0065\u006e\u0074\u0033":_ggad =_cdf .Accent3 ;case "\u0061c\u0063\u0065\u006e\u0074\u0034":_ggad =_cdf .Accent4 ;case "\u0061c\u0063\u0065\u006e\u0074\u0035":_ggad =_cdf .Accent5 ;case "\u0061c\u0063\u0065\u006e\u0074\u0036":_ggad =_cdf .Accent6 ;case "\u0068\u006c\u0069n\u006b":_ggad =_cdf .Hlink ;case "\u0066\u006f\u006c\u0048\u006c\u0069\u006e\u006b":_ggad =_cdf .FolHlink ;default:return nil ;};return _ggad ;};

// SaveToFile writes the Presentation out to a file.
func (_gdb *Presentation )SaveToFile (path string )error {return _gdb .saveToFile (path ,false )};func (_aadc *Presentation )saveToFile (_fdg string ,_fgag bool )error {_afbb ,_bcbc :=_bf .Create (_fdg );if _bcbc !=nil {return _bcbc ;};defer _afbb .Close ();return _aadc .save (_afbb ,_fgag );};

// GetLayoutByName retrieves a slide layout given a layout name.
func (_bebe *Presentation )GetLayoutByName (name string )(SlideLayout ,error ){for _ ,_ebg :=range _bebe ._ace {if _ebg .CSld .NameAttr !=nil &&name ==*_ebg .CSld .NameAttr {return SlideLayout {_ebg },nil ;};};return SlideLayout {},_c .New ("\u0075\u006eab\u006c\u0065\u0020t\u006f\u0020\u0066\u0069nd \u006cay\u006f\u0075\u0074\u0020\u0077\u0069\u0074h \u0074\u0068\u0061\u0074\u0020\u006e\u0061m\u0065");};

// NotesViewPr returns the NotesViewPr property.
func (_efdd ViewProperties )NotesViewPr ()*_bfe .CT_NotesViewProperties {return _efdd ._geabe .NotesViewPr ;};

// TableInfo is used for keep information about a table, a row and a cell where the text is located.
type TableInfo struct{Table *_fd .CT_Table ;Row *_fd .CT_TableRow ;Cell *_fd .CT_TableCell ;RowIndex int ;ColIndex int ;};

// PresentationProperties contains document specific properties.
type PresentationProperties struct{_adf *_bfe .PresentationPr };

// SetOffsetX sets horizontal offset of text box in distance units (see measurement package).
func (_eed TextBox )SetOffsetX (offX float64 ){_cbg :=_eed .getOff ();_cfd :=_de .ToEMU (offX );_cbg .XAttr =_fd .ST_Coordinate {ST_CoordinateUnqualified :&_cfd };};

// AddImage adds an image textbox to a slide.
func (_cae Slide )AddImage (img _fefd .ImageRef )Image {_dda :=_bfe .NewCT_GroupShapeChoice ();_cae ._ggc .CSld .SpTree .Choice =append (_cae ._ggc .CSld .SpTree .Choice ,_dda );_aebda :=_bfe .NewCT_Picture ();_dda .Pic =append (_dda .Pic ,_aebda );_aebda .NvPicPr .CNvPicPr =_fd .NewCT_NonVisualPictureProperties ();_aebda .NvPicPr .CNvPicPr .PicLocks =_fd .NewCT_PictureLocking ();_aebda .NvPicPr .CNvPicPr .PicLocks .NoChangeAspectAttr =_aa .Bool (true );_aebda .BlipFill =_fd .NewCT_BlipFillProperties ();_aebda .BlipFill .Blip =_fd .NewCT_Blip ();_gdbe :=_cae .AddImageToRels (img );_aebda .BlipFill .Blip .EmbedAttr =_aa .String (_gdbe );_aebda .BlipFill .Stretch =_fd .NewCT_StretchInfoProperties ();_aebda .BlipFill .Stretch .FillRect =_fd .NewCT_RelativeRect ();_aebda .SpPr =_fd .NewCT_ShapeProperties ();_aebda .SpPr .PrstGeom =_fd .NewCT_PresetGeometry2D ();_aebda .SpPr .PrstGeom .PrstAttr =_fd .ST_ShapeTypeRect ;_bgb :=Image {_aebda };_ccf :=img .Size ();_bgb .Properties ().SetWidth (_de .Distance (_ccf .X )*_de .Pixel72 );_bgb .Properties ().SetHeight (_de .Distance (_ccf .Y )*_de .Pixel72 );_bgb .Properties ().SetPosition (0,0);return _bgb ;};

// Slide represents a slide of a presentation.
type Slide struct{_gece *_bfe .CT_SlideIdListEntry ;_ggc *_bfe .Sld ;_edga *Presentation ;};

// GetTextBoxes returns a list of all text boxes from a slide.
func (_babg Slide )GetTextBoxes ()[]*TextBox {_ggda :=[]*TextBox {};_bgbf :=_babg ._ggc .CSld .SpTree .Choice ;for _ ,_adbc :=range _bgbf {for _ ,_fgg :=range _adbc .Sp {if _fgg .NvSpPr .CNvSpPr .TxBoxAttr !=nil &&*_fgg .NvSpPr .CNvSpPr .TxBoxAttr {_ggda =append (_ggda ,&TextBox {_fgg });};};};return _ggda ;};

// AddTable adds an empty table to a slide.
func (_ebfd Slide )AddTable ()*_fefd .Table {_gddg :=_bfe .NewCT_GroupShapeChoice ();_ebfd ._ggc .CSld .SpTree .Choice =append (_ebfd ._ggc .CSld .SpTree .Choice ,_gddg );_cfe :=_bfe .NewCT_GraphicalObjectFrame ();_gddg .GraphicFrame =append (_gddg .GraphicFrame ,_cfe );_cfe .Xfrm .Off =_fd .NewCT_Point2D ();_fee :=int64 (1);_cfe .Xfrm .Off .XAttr =_fd .ST_Coordinate {ST_CoordinateUnqualified :&_fee };_cfe .Xfrm .Off .YAttr =_fd .ST_Coordinate {ST_CoordinateUnqualified :&_fee };_cgfg :=_cfe .Graphic .CT_GraphicalObject .GraphicData ;_cgfg .UriAttr ="\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073.\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067\u006dl/\u0032\u0030\u0030\u0036\u002f\u0074\u0061\u0062\u006c\u0065";_dedb :=_fefd .NewTableWithXfrm (_cfe .Xfrm );_cgfg .Any =append (_cgfg .Any ,_dedb .X ());return _dedb ;};func (_dae sort2d )Len ()int {return len (_dae )};func (_agc sort2d )Swap (i ,j int ){_agc [i ],_agc [j ]=_agc [j ],_agc [i ]};

// AddParagraph adds a new paragraph to a placeholder.
func (_caf PlaceHolder )AddParagraph ()_ac .Paragraph {_cb :=_ac .MakeParagraph (_fd .NewCT_TextParagraph ());_caf ._fed .TxBody .P =append (_caf ._fed .TxBody .P ,_cb .X ());return _cb ;};

// SlideLayout is a layout from which slides can be created.
type SlideLayout struct{_bcfe *_bfe .SldLayout };func _dfb ()*Presentation {_baec :=&Presentation {_dgb :_bfe .NewPresentation ()};_baec ._dgb .SldIdLst =_bfe .NewCT_SlideIdList ();_baec ._dgb .ConformanceAttr =_ga .ST_ConformanceClassTransitional ;_baec .AppProperties =_fefd .NewAppProperties ();_baec .CoreProperties =_fefd .NewCoreProperties ();_baec ._fbc =_fefd .NewTableStyles ();_baec .ContentTypes =_fefd .NewContentTypes ();_baec .Rels =_fefd .NewRelationships ();_baec ._efc =_fefd .NewRelationships ();_baec ._aag =NewPresentationProperties ();_baec ._ded =NewViewProperties ();_baec ._cff =map[string ]string {};return _baec ;};

// SaveToFileAsTemplate writes the Presentation out to a file as a template.
func (_ggf *Presentation )SaveToFileAsTemplate (path string )error {return _ggf .saveToFile (path ,true )};

// X returns TextBox's underlying *pml.CT_Shape.
func (_eaf TextBox )X ()*_bfe .CT_Shape {return _eaf ._deff };

// Text returns text from a presentation as one string separated with line breaks.
func (_ebc *PresentationText )Text ()string {_fdc :=_e .NewBuffer ([]byte {});for _ ,_fb :=range _ebc .Slides {_fdc .WriteString (_fb .Text ());};return _fdc .String ();};

// Image is an image within a slide.
type Image struct{_dgc *_bfe .CT_Picture };

// Properties returns the properties of the TextBox.
func (_cgff TextBox )Properties ()_ac .ShapeProperties {if _cgff ._deff .SpPr ==nil {_cgff ._deff .SpPr =_fd .NewCT_ShapeProperties ();};return _ac .MakeShapeProperties (_cgff ._deff .SpPr );};

// SorterViewPr returns the SorterViewPr property.
func (_ggfe ViewProperties )SorterViewPr ()*_bfe .CT_SlideSorterViewProperties {return _ggfe ._geabe .SorterViewPr ;};

// X returns the inner wrapped XML type.
func (_ggbb ViewProperties )X ()*_bfe .ViewPr {return _ggbb ._geabe };

// LastViewAttr returns the LastViewAttr property.
func (_cce ViewProperties )LastViewAttr ()_bfe .ST_ViewType {return _cce ._geabe .LastViewAttr };

// New initializes and reurns a new presentation
func New ()*Presentation {_gfed :=_dfb ();_gfed .ContentTypes .AddOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_gfed .Rels .AddRelationship ("\u0064\u006f\u0063\u0050\u0072\u006f\u0070\u0073\u002f\u0063\u006f\u0072e\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0070\u0061\u0063\u006ba\u0067\u0065\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006d\u0065\u0074\u0061\u0064\u0061\u0074\u0061/\u0063\u006f\u0072\u0065\u002d\u0070\u0072\u006f\u0070e\u0072\u0074i\u0065\u0073");_gfed .Rels .AddRelationship ("\u0064\u006fc\u0050\u0072\u006fp\u0073\u002f\u0061\u0070\u0070\u002e\u0078\u006d\u006c","\u0068t\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002eo\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073.\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074i\u006f\u006e\u0073\u0068\u0069p\u0073\u002f\u0065x\u0074\u0065\u006e\u0064\u0065d\u002d\u0070\u0072\u006f\u0070\u0065\u0072\u0074\u0069\u0065\u0073");_gfed .Rels .AddRelationship ("p\u0070t\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074a\u0074\u0069\u006f\u006e.x\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072g\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006fc\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068\u0069\u0070\u0073\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074");_gfed .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0070\u0072\u0065\u0073\u0050\u0072\u006f\u0070\u0073");_gfed .Rels .AddRelationship ("\u0070\u0070\u0074\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070s\u002e\u0078\u006d\u006c","ht\u0074\u0070\u003a\u002f\u002f\u0073\u0063he\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006da\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006et\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073\u0068i\u0070s\u002f\u0076\u0069\u0065\u0077\u0050\u0072\u006f\u0070\u0073");_gfed .Rels .AddRelationship ("\u0070\u0070\u0074\u002fta\u0062\u006c\u0065\u0053\u0074\u0079\u006c\u0065\u0073\u002e\u0078\u006d\u006c","\u0068\u0074\u0074\u0070\u003a\u002f\u002fs\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006cf\u006fr\u006d\u0061\u0074\u0073\u002e\u006fr\u0067\u002f\u006f\u0066\u0066\u0069\u0063e\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0072\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073\u002f\u0074\u0061\u0062\u006c\u0065\u0053\u0074\u0079\u006ce\u0073");_gfed ._dgb .SldMasterIdLst =_bfe .NewCT_SlideMasterIdList ();_egb :=_bfe .NewSldMaster ();_egb .ClrMap .Bg1Attr =_fd .ST_ColorSchemeIndexLt1 ;_egb .ClrMap .Bg2Attr =_fd .ST_ColorSchemeIndexLt2 ;_egb .ClrMap .Tx1Attr =_fd .ST_ColorSchemeIndexDk1 ;_egb .ClrMap .Tx2Attr =_fd .ST_ColorSchemeIndexDk2 ;_egb .ClrMap .Accent1Attr =_fd .ST_ColorSchemeIndexAccent1 ;_egb .ClrMap .Accent2Attr =_fd .ST_ColorSchemeIndexAccent2 ;_egb .ClrMap .Accent3Attr =_fd .ST_ColorSchemeIndexAccent3 ;_egb .ClrMap .Accent4Attr =_fd .ST_ColorSchemeIndexAccent4 ;_egb .ClrMap .Accent5Attr =_fd .ST_ColorSchemeIndexAccent5 ;_egb .ClrMap .Accent6Attr =_fd .ST_ColorSchemeIndexAccent6 ;_egb .ClrMap .HlinkAttr =_fd .ST_ColorSchemeIndexHlink ;_egb .ClrMap .FolHlinkAttr =_fd .ST_ColorSchemeIndexFolHlink ;_gfed ._bae =append (_gfed ._bae ,_egb );_cdgd :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideMasterType ,1);_gfed .ContentTypes .AddOverride (_cdgd ,_aa .SlideMasterContentType );_cab :=_gfed ._efc .AddAutoRelationship (_aa .DocTypePresentation ,_aa .OfficeDocumentType ,1,_aa .SlideMasterType );_cac :=_bfe .NewCT_SlideMasterIdListEntry ();_cac .IdAttr =_aa .Uint32 (2147483648);_cac .RIdAttr =_cab .ID ();_gfed ._dgb .SldMasterIdLst .SldMasterId =append (_gfed ._dgb .SldMasterIdLst .SldMasterId ,_cac );_adc :=_fefd .NewRelationships ();_gfed ._gbg =append (_gfed ._gbg ,_adc );_aabd :=_bfe .NewSldLayout ();_fbca :=_adc .AddAutoRelationship (_aa .DocTypePresentation ,_aa .SlideMasterType ,1,_aa .SlideLayoutType );_dbee :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideLayoutType ,1);_gfed .ContentTypes .AddOverride (_dbee ,_aa .SlideLayoutContentType );_adc .AddAutoRelationship (_aa .DocTypePresentation ,_aa .SlideMasterType ,1,_aa .ThemeType );_gfed ._ace =append (_gfed ._ace ,_aabd );_egb .SldLayoutIdLst =_bfe .NewCT_SlideLayoutIdList ();_ffe :=_bfe .NewCT_SlideLayoutIdListEntry ();_ffe .IdAttr =_aa .Uint32 (2147483649);_ffe .RIdAttr =_fbca .ID ();_egb .SldLayoutIdLst .SldLayoutId =append (_egb .SldLayoutIdLst .SldLayoutId ,_ffe );_ee :=_fefd .NewRelationships ();_gfed ._bcda =append (_gfed ._bcda ,_ee );_ee .AddAutoRelationship (_aa .DocTypePresentation ,_aa .SlideType ,1,_aa .SlideMasterType );_gfed ._dgb .NotesSz .CxAttr =6858000;_gfed ._dgb .NotesSz .CyAttr =9144000;_bea :=_fd .NewTheme ();_bea .NameAttr =_aa .String ("\u0075n\u0069o\u0066\u0066\u0069\u0063\u0065\u0020\u0054\u0068\u0065\u006d\u0065");_bea .ThemeElements .ClrScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_bea .ThemeElements .ClrScheme .Dk1 .SysClr =_fd .NewCT_SystemColor ();_bea .ThemeElements .ClrScheme .Dk1 .SysClr .LastClrAttr =_aa .String ("\u0030\u0030\u0030\u0030\u0030\u0030");_bea .ThemeElements .ClrScheme .Dk1 .SysClr .ValAttr =_fd .ST_SystemColorValWindowText ;_bea .ThemeElements .ClrScheme .Lt1 .SysClr =_fd .NewCT_SystemColor ();_bea .ThemeElements .ClrScheme .Lt1 .SysClr .LastClrAttr =_aa .String ("\u0066\u0066\u0066\u0066\u0066\u0066");_bea .ThemeElements .ClrScheme .Lt1 .SysClr .ValAttr =_fd .ST_SystemColorValWindow ;_bea .ThemeElements .ClrScheme .Dk2 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Dk2 .SrgbClr .ValAttr ="\u0034\u0034\u0035\u0034\u0036\u0061";_bea .ThemeElements .ClrScheme .Lt2 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Lt2 .SrgbClr .ValAttr ="\u0065\u0037\u0065\u0037\u0065\u0036";_bea .ThemeElements .ClrScheme .Accent1 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Accent1 .SrgbClr .ValAttr ="\u0034\u0034\u0037\u0032\u0063\u0034";_bea .ThemeElements .ClrScheme .Accent2 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Accent2 .SrgbClr .ValAttr ="\u0065\u0064\u0037\u0064\u0033\u0031";_bea .ThemeElements .ClrScheme .Accent3 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Accent3 .SrgbClr .ValAttr ="\u0061\u0035\u0061\u0035\u0061\u0035";_bea .ThemeElements .ClrScheme .Accent4 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Accent4 .SrgbClr .ValAttr ="\u0066\u0066\u0063\u0030\u0030\u0030";_bea .ThemeElements .ClrScheme .Accent5 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Accent5 .SrgbClr .ValAttr ="\u0035\u0062\u0039\u0062\u0064\u0035";_bea .ThemeElements .ClrScheme .Accent6 .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Accent6 .SrgbClr .ValAttr ="\u0037\u0030\u0061\u0064\u0034\u0037";_bea .ThemeElements .ClrScheme .Hlink .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .Hlink .SrgbClr .ValAttr ="\u0030\u0035\u0036\u0033\u0063\u0031";_bea .ThemeElements .ClrScheme .FolHlink .SrgbClr =_fd .NewCT_SRgbColor ();_bea .ThemeElements .ClrScheme .FolHlink .SrgbClr .ValAttr ="\u0039\u0035\u0034\u0066\u0037\u0032";_bea .ThemeElements .FontScheme .NameAttr ="\u004f\u0066\u0066\u0069\u0063\u0065";_bea .ThemeElements .FontScheme .MajorFont .Latin .TypefaceAttr ="\u0043\u0061\u006c\u0069\u0062\u0072\u0069\u0020\u004c\u0069\u0067\u0068\u0074";_bea .ThemeElements .FontScheme .MinorFont .Latin .TypefaceAttr ="\u0043a\u006c\u0069\u0062\u0072\u0069";_bea .ThemeElements .FmtScheme .NameAttr =_aa .String ("\u004f\u0066\u0066\u0069\u0063\u0065");_cbe :=_fd .NewEG_FillProperties ();_bea .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_bea .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_cbe );_cbe .SolidFill =&_fd .CT_SolidColorFillProperties {SchemeClr :&_fd .CT_SchemeColor {ValAttr :_fd .ST_SchemeColorValPhClr }};_cbe =_fd .NewEG_FillProperties ();_bea .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_bea .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_cbe );_bea .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties =append (_bea .ThemeElements .FmtScheme .FillStyleLst .EG_FillProperties ,_cbe );_cbe .GradFill =&_fd .CT_GradientFillProperties {RotWithShapeAttr :_aa .Bool (true ),GsLst :&_fd .CT_GradientStopList {},Lin :&_fd .CT_LinearShadeProperties {}};_cbe .GradFill .Lin .AngAttr =_aa .Int32 (5400000);_cbe .GradFill .Lin .ScaledAttr =_aa .Bool (false );_fbf :=_fd .NewCT_GradientStop ();_fbf .PosAttr .ST_PositiveFixedPercentageDecimal =_aa .Int32 (0);_fbf .SchemeClr =&_fd .CT_SchemeColor {ValAttr :_fd .ST_SchemeColorValPhClr };_cbe .GradFill .GsLst .Gs =append (_cbe .GradFill .GsLst .Gs ,_fbf );_fbf =_fd .NewCT_GradientStop ();_fbf .PosAttr .ST_PositiveFixedPercentageDecimal =_aa .Int32 (50000);_fbf .SchemeClr =&_fd .CT_SchemeColor {ValAttr :_fd .ST_SchemeColorValPhClr };_cbe .GradFill .GsLst .Gs =append (_cbe .GradFill .GsLst .Gs ,_fbf );_bea .ThemeElements .FmtScheme .LnStyleLst =_fd .NewCT_LineStyleList ();for _ggg :=0;_ggg < 3;_ggg ++{_ae :=_fd .NewCT_LineProperties ();_ae .WAttr =_aa .Int32 (int32 (6350*(_ggg +1)));_ae .CapAttr =_fd .ST_LineCapFlat ;_ae .CmpdAttr =_fd .ST_CompoundLineSng ;_ae .AlgnAttr =_fd .ST_PenAlignmentCtr ;_bea .ThemeElements .FmtScheme .LnStyleLst .Ln =append (_bea .ThemeElements .FmtScheme .LnStyleLst .Ln ,_ae );};_bea .ThemeElements .FmtScheme .EffectStyleLst =_fd .NewCT_EffectStyleList ();for _dfgc :=0;_dfgc < 3;_dfgc ++{_cgf :=_fd .NewCT_EffectStyleItem ();_cgf .EffectLst =_fd .NewCT_EffectList ();_bea .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle =append (_bea .ThemeElements .FmtScheme .EffectStyleLst .EffectStyle ,_cgf );};_aca :=_fd .NewEG_FillProperties ();_aca .SolidFill =&_fd .CT_SolidColorFillProperties {SchemeClr :&_fd .CT_SchemeColor {ValAttr :_fd .ST_SchemeColorValPhClr }};_bea .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_bea .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_aca );_bea .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_bea .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_aca );_bea .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties =append (_bea .ThemeElements .FmtScheme .BgFillStyleLst .EG_FillProperties ,_cbe );_gfed ._fbb =append (_gfed ._fbb ,_bea );_gga :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .ThemeType ,1);_gfed .ContentTypes .AddOverride (_gga ,_aa .ThemeContentType );_gfed ._efc .AddAutoRelationship (_aa .DocTypePresentation ,_aa .OfficeDocumentType ,1,_aa .ThemeType );_cfb :=_fefd .NewRelationships ();_gfed ._fgba =append (_gfed ._fgba ,_cfb );return _gfed ;};

// SetText sets the text of a placeholder for the initial paragraph. This is a
// shortcut method that is useful for things like titles which only contain a
// single paragraph.
func (_edc PlaceHolder )SetText (text string ){_edc .Clear ();_dfg :=_fd .NewEG_TextRun ();_dfg .R =_fd .NewCT_RegularTextRun ();_dfg .R .T =text ;if len (_edc ._fed .TxBody .P )==0{_edc ._fed .TxBody .P =append (_edc ._fed .TxBody .P ,_fd .NewCT_TextParagraph ());};_edc ._fed .TxBody .P [0].EG_TextRun =nil ;_edc ._fed .TxBody .P [0].EG_TextRun =append (_edc ._fed .TxBody .P [0].EG_TextRun ,_dfg );};

// HtmlPubPr returns the HtmlPubPr property.
func (_deg PresentationProperties )HtmlPubPr ()*_bfe .CT_HtmlPublishProperties {return _deg ._adf .HtmlPubPr ;};

// PlaceHolders returns all of the content place holders within a given slide.
func (_afd Slide )PlaceHolders ()[]PlaceHolder {_aceb :=[]PlaceHolder {};for _ ,_egaf :=range _afd ._ggc .CSld .SpTree .Choice {for _ ,_ffgd :=range _egaf .Sp {if _ffgd .NvSpPr !=nil &&_ffgd .NvSpPr .NvPr !=nil &&_ffgd .NvSpPr .NvPr .Ph !=nil {_aceb =append (_aceb ,PlaceHolder {_ffgd ,_afd ._ggc });};};};return _aceb ;};

// ShowCommentsAttr returns the WebPr property.
func (_aagc ViewProperties )ShowCommentsAttr ()*bool {return _aagc ._geabe .ShowCommentsAttr };type sort2d []*TextItem ;

// Slides returns the slides in the presentation.
func (_caa *Presentation )Slides ()[]Slide {_egc :=[]Slide {};for _cca ,_bdbd :=range _caa ._dcc {_egc =append (_egc ,Slide {_caa ._dgb .SldIdLst .SldId [_cca ],_bdbd ,_caa });};return _egc ;};

// GetPlaceholderByIndex returns a placeholder given its index.  If there are multiplace
// placeholders of the same index, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_cabb Slide )GetPlaceholderByIndex (idx uint32 )(PlaceHolder ,error ){for _ ,_ffbg :=range _cabb ._ggc .CSld .SpTree .Choice {for _ ,_bdgg :=range _ffbg .Sp {if _bdgg .NvSpPr !=nil &&_bdgg .NvSpPr .NvPr !=nil &&_bdgg .NvSpPr .NvPr .Ph !=nil {if (idx ==0&&_bdgg .NvSpPr .NvPr .Ph .IdxAttr ==nil )||(_bdgg .NvSpPr .NvPr .Ph .IdxAttr !=nil &&*_bdgg .NvSpPr .NvPr .Ph .IdxAttr ==idx ){return PlaceHolder {_bdgg ,_cabb ._ggc },nil ;};};};};return PlaceHolder {},_c .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// ExtLst returns the ExtLst property.
func (_ggbbg ViewProperties )ExtLst ()*_bfe .CT_ExtensionList {return _ggbbg ._geabe .ExtLst };

// X returns the inner wrapped XML type.
func (_def PresentationProperties )X ()*_bfe .PresentationPr {return _def ._adf };

// ExtractText returns text from a slide as a SlideText object.
func (_gcf *Slide )ExtractText ()*SlideText {_bb :=_gcf ._edga ;_gb :=[]*TextItem {};for _ ,_ec :=range _gcf ._ggc .CSld .SpTree .Choice {for _ ,_cc :=range _ec .Sp {_gb =append (_gb ,_ed (_bb ,_cc ,nil ,nil ,_cc .SpPr .Xfrm ,0,_cc .TxBody .P )...);};for _ ,_aad :=range _ec .GraphicFrame {if _aad !=nil &&_aad .Graphic !=nil &&_aad .Graphic .GraphicData !=nil {_cd :=_aad .Xfrm ;for _ ,_gcce :=range _aad .Graphic .GraphicData .Any {if _gf ,_gcca :=_gcce .(*_fd .Tbl );_gcca {_gbd :=&_gf .CT_Table ;_dbe :=0;for _eb ,_ega :=range _gf .Tr {for _fge ,_af :=range _ega .Tc {_acg :=&TableInfo {Table :_gbd ,Row :_ega ,Cell :_af ,RowIndex :_eb ,ColIndex :_fge };_gb =append (_gb ,_ed (_bb ,nil ,_aad ,_acg ,_cd ,_dbe ,_af .TxBody .P )...);_dbe ++;};};};};};};};_gc .Sort (sort2d (_gb ));return &SlideText {Items :_gb };};

// Paragraphs returns the paragraphs defined in the placeholder.
func (_fgb PlaceHolder )Paragraphs ()[]_ac .Paragraph {_ad :=[]_ac .Paragraph {};for _ ,_edgb :=range _fgb ._fed .TxBody .P {_ad =append (_ad ,_ac .MakeParagraph (_edgb ));};return _ad ;};

// ClrMru returns the ClrMru property.
func (_cdg PresentationProperties )ClrMru ()*_fd .CT_ColorMRU {return _cdg ._adf .ClrMru };

// Type returns the type of the slide layout.
func (_fde SlideLayout )Type ()_bfe .ST_SlideLayoutType {return _fde ._bcfe .TypeAttr };

// WebPr returns the WebPr property.
func (_aged PresentationProperties )WebPr ()*_bfe .CT_WebProperties {return _aged ._adf .WebPr };

// GridSpacing returns the GridSpacing property.
func (_gfcf ViewProperties )GridSpacing ()*_fd .CT_PositiveSize2D {return _gfcf ._geabe .GridSpacing };

// RemoveSlide removes a slide from a presentation.
func (_cdd *Presentation )RemoveSlide (s Slide )error {_gcde :=false ;_adca :=0;for _caad ,_facc :=range _cdd ._dcc {if _facc ==s ._ggc {if _cdd ._dgb .SldIdLst .SldId [_caad ]!=s ._gece {return _c .New ("i\u006e\u0063\u006f\u006e\u0073\u0069s\u0074\u0065\u006e\u0063\u0079\u0020i\u006e\u0020\u0073\u006c\u0069\u0064\u0065s\u0020\u0061\u006e\u0064\u0020\u0049\u0044\u0020\u006c\u0069s\u0074");};copy (_cdd ._dcc [_caad :],_cdd ._dcc [_caad +1:]);_cdd ._dcc =_cdd ._dcc [0:len (_cdd ._dcc )-1];copy (_cdd ._egag [_caad :],_cdd ._egag [_caad +1:]);_cdd ._egag =_cdd ._egag [0:len (_cdd ._egag )-1];copy (_cdd ._dgb .SldIdLst .SldId [_caad :],_cdd ._dgb .SldIdLst .SldId [_caad +1:]);_cdd ._dgb .SldIdLst .SldId =_cdd ._dgb .SldIdLst .SldId [0:len (_cdd ._dgb .SldIdLst .SldId )-1];_gcde =true ;_adca =_caad ;};};if !_gcde {return _c .New ("u\u006ea\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0073li\u0064\u0065");};_fca :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideType ,0);return _cdd .ContentTypes .RemoveOverrideByIndex (_fca ,_adca );};

// Text returns text from a slide as one string separated with line breaks.
func (_efa *SlideText )Text ()string {_dfd :=_e .NewBuffer ([]byte {});for _ ,_dce :=range _efa .Items {if _dce .Text !=""{_dfd .WriteString (_dce .Text );_dfd .WriteString ("\u000a");};};return _dfd .String ();};

// AddDefaultSlideWithLayout tries to replicate what PowerPoint does when
// inserting a slide with a new style by clearing placeholder content and removing
// some placeholders.  Use AddSlideWithLayout if you need more control.
func (_ccd *Presentation )AddDefaultSlideWithLayout (l SlideLayout )(Slide ,error ){_dbbb ,_bdc :=_ccd .AddSlideWithLayout (l );for _ ,_dbbe :=range _dbbb .PlaceHolders (){_dbbe .Clear ();switch _dbbe .Type (){case _bfe .ST_PlaceholderTypeFtr ,_bfe .ST_PlaceholderTypeDt ,_bfe .ST_PlaceholderTypeSldNum :_dbbe .Remove ();};};return _dbbb ,_bdc ;};

// Name returns the name of the slide layout.
func (_adfc SlideLayout )Name ()string {if _adfc ._bcfe .CSld !=nil &&_adfc ._bcfe .CSld .NameAttr !=nil {return *_adfc ._bcfe .CSld .NameAttr ;};return "";};

// Clear clears the placeholder contents and adds a single empty paragraph.  The
// empty paragrah is required by PowerPoint or it will report the file as being
// invalid.
func (_afg PlaceHolder )Clear (){_afg .ClearAll ();_gba :=_fd .NewCT_TextParagraph ();_afg ._fed .TxBody .P =[]*_fd .CT_TextParagraph {_gba };_gba .EndParaRPr =_fd .NewCT_TextCharacterProperties ();_gba .EndParaRPr .LangAttr =_aa .String ("\u0065\u006e\u002dU\u0053");};

// Properties returns the properties of the TextBox.
func (_ca Image )Properties ()_ac .ShapeProperties {if _ca ._dgc .SpPr ==nil {_ca ._dgc .SpPr =_fd .NewCT_ShapeProperties ();};return _ac .MakeShapeProperties (_ca ._dgc .SpPr );};

// AddSlide adds a new slide to the presentation.
func (_ebb *Presentation )AddSlide ()Slide {_aaf :=_bfe .NewCT_SlideIdListEntry ();_aaf .IdAttr =_ebb .nextSlideID ();_ebb ._dgb .SldIdLst .SldId =append (_ebb ._dgb .SldIdLst .SldId ,_aaf );_baef :=_bfe .NewSld ();_baef .CSld .SpTree .NvGrpSpPr .CNvPr .IdAttr =1;_baef .CSld .SpTree .GrpSpPr .Xfrm =_fd .NewCT_GroupTransform2D ();_baef .CSld .SpTree .GrpSpPr .Xfrm .Off =_fd .NewCT_Point2D ();_baef .CSld .SpTree .GrpSpPr .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_aa .Int64 (0);_baef .CSld .SpTree .GrpSpPr .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_aa .Int64 (0);_baef .CSld .SpTree .GrpSpPr .Xfrm .Ext =_fd .NewCT_PositiveSize2D ();_baef .CSld .SpTree .GrpSpPr .Xfrm .Ext .CxAttr =int64 (0*_de .Point );_baef .CSld .SpTree .GrpSpPr .Xfrm .Ext .CyAttr =int64 (0*_de .Point );_baef .CSld .SpTree .GrpSpPr .Xfrm .ChOff =_baef .CSld .SpTree .GrpSpPr .Xfrm .Off ;_baef .CSld .SpTree .GrpSpPr .Xfrm .ChExt =_baef .CSld .SpTree .GrpSpPr .Xfrm .Ext ;_ebb ._dcc =append (_ebb ._dcc ,_baef );_ceg :=_ebb ._efc .AddAutoRelationship (_aa .DocTypePresentation ,_aa .OfficeDocumentType ,len (_ebb ._dcc ),_aa .SlideType );_aaf .RIdAttr =_ceg .ID ();_cgfe :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideType ,len (_ebb ._dcc ));_ebb .ContentTypes .AddOverride (_cgfe ,_aa .SlideContentType );_cgb :=_fefd .NewRelationships ();_ebb ._egag =append (_ebb ._egag ,_cgb );_cgb .AddAutoRelationship (_aa .DocTypePresentation ,_aa .SlideType ,len (_ebb ._ace ),_aa .SlideLayoutType );return Slide {_aaf ,_baef ,_ebb };};

// Remove removes a placeholder from a presentation.
func (_ge PlaceHolder )Remove ()error {for _gcfc ,_gfe :=range _ge ._dfe .CSld .SpTree .Choice {for _ ,_dfef :=range _gfe .Sp {if _dfef ==_ge ._fed {copy (_ge ._dfe .CSld .SpTree .Choice [_gcfc :],_ge ._dfe .CSld .SpTree .Choice [_gcfc +1:]);_ge ._dfe .CSld .SpTree .Choice =_ge ._dfe .CSld .SpTree .Choice [0:len (_ge ._dfe .CSld .SpTree .Choice )-1];return nil ;};};};return _c .New ("\u0070\u006c\u0061\u0063\u0065\u0068\u006f\u006c\u0064\u0065r\u0020\u006e\u006f\u0074\u0020\u0066\u006fu\u006e\u0064\u0020\u0069\u006e\u0020\u0073\u006c\u0069\u0064\u0065");};

// SlideMaster is the slide master for a presentation.
type SlideMaster struct{_acd *Presentation ;_aadf _fefd .Relationships ;_bgca *_bfe .SldMaster ;};

// TextItem is used for keeping text with references to a paragraph and run, a shape or a table, a row and a cell where it is located.
type TextItem struct{Text string ;Presentation *Presentation ;Shape *_bfe .CT_Shape ;GraphicFrame *_bfe .CT_GraphicalObjectFrame ;Paragraph *_fd .CT_TextParagraph ;Run *_fd .CT_RegularTextRun ;TableInfo *TableInfo ;_da int64 ;_ag int64 ;_dc int ;_ce int ;};func (_baf TextBox )getOff ()*_fd .CT_Point2D {if _baf ._deff .SpPr ==nil {_baf ._deff .SpPr =_fd .NewCT_ShapeProperties ();};if _baf ._deff .SpPr .Xfrm ==nil {_baf ._deff .SpPr .Xfrm =_fd .NewCT_Transform2D ();};if _baf ._deff .SpPr .Xfrm .Off ==nil {_baf ._deff .SpPr .Xfrm .Off =_fd .NewCT_Point2D ();};return _baf ._deff .SpPr .Xfrm .Off ;};

// SlideViewPr returns the SlideViewPr property.
func (_ffbd ViewProperties )SlideViewPr ()*_bfe .CT_SlideViewProperties {return _ffbd ._geabe .SlideViewPr ;};

// AddTextBox adds an empty textbox to a slide.
func (_bca Slide )AddTextBox ()TextBox {_cegg :=_bfe .NewCT_GroupShapeChoice ();_bca ._ggc .CSld .SpTree .Choice =append (_bca ._ggc .CSld .SpTree .Choice ,_cegg );_ade :=_bfe .NewCT_Shape ();_cegg .Sp =append (_cegg .Sp ,_ade );_ade .SpPr =_fd .NewCT_ShapeProperties ();_ade .SpPr .Xfrm =_fd .NewCT_Transform2D ();_ade .SpPr .PrstGeom =_fd .NewCT_PresetGeometry2D ();_ade .SpPr .PrstGeom .PrstAttr =_fd .ST_ShapeTypeRect ;_ade .NvSpPr =_bfe .NewCT_ShapeNonVisual ();_ade .NvSpPr .CNvSpPr =_fd .NewCT_NonVisualDrawingShapeProps ();_bbg :=true ;_ade .NvSpPr .CNvSpPr .TxBoxAttr =&_bbg ;_ade .TxBody =_fd .NewCT_TextBody ();_ade .TxBody .BodyPr =_fd .NewCT_TextBodyProperties ();_ade .TxBody .BodyPr .WrapAttr =_fd .ST_TextWrappingTypeSquare ;_ade .TxBody .BodyPr .SpAutoFit =_fd .NewCT_TextShapeAutofit ();_ebaf :=TextBox {_ade };_ebaf .Properties ().SetWidth (3*_de .Inch );_ebaf .Properties ().SetHeight (1*_de .Inch );_ebaf .Properties ().SetPosition (0,0);return _ebaf ;};

// NewViewProperties constructs a new ViewProperties.
func NewViewProperties ()ViewProperties {return ViewProperties {_geabe :_bfe .NewViewPr ()}};

// GetPlaceholder returns a placeholder given its type.  If there are multiplace
// placeholders of the same type, this method returns the first one.  You must use the
// PlaceHolders() method to access the others.
func (_deaf Slide )GetPlaceholder (t _bfe .ST_PlaceholderType )(PlaceHolder ,error ){for _ ,_bada :=range _deaf ._ggc .CSld .SpTree .Choice {for _ ,_ebef :=range _bada .Sp {if _ebef .NvSpPr !=nil &&_ebef .NvSpPr .NvPr !=nil &&_ebef .NvSpPr .NvPr .Ph !=nil {if _ebef .NvSpPr .NvPr .Ph .TypeAttr ==t {return PlaceHolder {_ebef ,_deaf ._ggc },nil ;};};};};return PlaceHolder {},_c .New ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0066i\u006e\u0064\u0020\u0070\u006c\u0061\u0063\u0065\u0068\u006fl\u0064\u0065\u0072");};

// NormalViewPr returns the NormalViewPr property.
func (_aded ViewProperties )NormalViewPr ()*_bfe .CT_NormalViewProperties {return _aded ._geabe .NormalViewPr ;};

// Open opens and reads a document from a file (.pptx).
func Open (filename string )(*Presentation ,error ){_gdg ,_gdd :=_bf .Open (filename );if _gdd !=nil {return nil ,_faa .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_gdd );};defer _gdg .Close ();_ecb ,_gdd :=_bf .Stat (filename );if _gdd !=nil {return nil ,_faa .Errorf ("e\u0072r\u006f\u0072\u0020\u006f\u0070\u0065\u006e\u0069n\u0067\u0020\u0025\u0073: \u0025\u0073",filename ,_gdd );};_ =_ecb ;return Read (_gdg ,_ecb .Size ());};func (_bd sort2d )Less (i ,j int )bool {_bc ,_bcg :=_bd [i ],_bd [j ];_bcd ,_cg ,_cde ,_fdf ,_ef ,_aabe ,_faf ,_bg :=_bc ._da ,_bcg ._da ,_bc ._ag ,_bcg ._ag ,_bc ._dc ,_bcg ._dc ,_bc ._ce ,_bcg ._ce ;if _cde ==_fdf {if _bcd ==_cg {if _ef ==_aabe {return _faf <=_bg ;};return _ef < _aabe ;};return _bcd < _cg ;};return _cde < _fdf ;};

// X returns the inner wrapped XML type.
func (_afbfa SlideMaster )X ()*_bfe .SldMaster {return _afbfa ._bgca };

// NotesTextViewPr returns the NotesTextViewPr property.
func (_gbge ViewProperties )NotesTextViewPr ()*_bfe .CT_NotesTextViewProperties {return _gbge ._geabe .NotesTextViewPr ;};

// X returns the inner wrapped XML type.
func (_egea SlideLayout )X ()*_bfe .SldLayout {return _egea ._bcfe };func (_fbd *Presentation )onNewRelationship (_fgc *_a .DecodeMap ,_cgge ,_cfgg string ,_ceaa []*_fa .File ,_gge *_ff .Relationship ,_dbf _a .Target )error {_abba :=_aa .DocTypePresentation ;switch _cfgg {case _aa .OfficeDocumentType :_fbd ._dgb =_bfe .NewPresentation ();_fgc .AddTarget (_cgge ,_fbd ._dgb ,_cfgg ,0);_fgc .AddTarget (_a .RelationsPathFor (_cgge ),_fbd ._efc .X (),_cfgg ,0);_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,0);case _aa .CorePropertiesType :_fgc .AddTarget (_cgge ,_fbd .CoreProperties .X (),_cfgg ,0);_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,0);case _aa .CustomPropertiesType :_fgc .AddTarget (_cgge ,_fbd .CustomProperties .X (),_cfgg ,0);_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,0);case _aa .PresentationPropertiesType :_fgc .AddTarget (_cgge ,_fbd ._aag .X (),_cfgg ,0);_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,0);case _aa .ViewPropertiesType :_fgc .AddTarget (_cgge ,_fbd ._ded .X (),_cfgg ,0);_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,0);case _aa .TableStylesType :_fgc .AddTarget (_cgge ,_fbd ._fbc .X (),_cfgg ,0);_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,0);case _aa .HyperLinkType :_cfbb :=_fd .NewCT_Hyperlink ();_cgc :=uint32 (len (_fbd ._dga ));_fgc .AddTarget (_cgge ,_cfbb ,_cfgg ,_cgc );_fbd ._dga =append (_fbd ._dga ,_cfbb );case _aa .CustomXMLType :_dgg :=&_aa .XSDAny {};_bfeg :=uint32 (len (_fbd ._fgbb ));_fgc .AddTarget (_cgge ,_dgg ,_cfgg ,_bfeg );_fbd ._fgbb =append (_fbd ._fgbb ,_dgg );_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._fgbb ));case _aa .ChartType :_bcgd :=_ffc .NewChartSpace ();_aebc :=uint32 (len (_fbd ._aga ));_fgc .AddTarget (_cgge ,_bcgd ,_cfgg ,_aebc );_fbd ._aga =append (_fbd ._aga ,_bcgd );_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._aga ));case _aa .HandoutMasterType :_cgbf :=_bfe .NewHandoutMaster ();_bag :=uint32 (len (_fbd ._edgg ));_fgc .AddTarget (_cgge ,_cgbf ,_cfgg ,_bag );_fbd ._edgg =append (_fbd ._edgg ,_cgbf );_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._edgg ));case _aa .NotesMasterType :_cabe :=_bfe .NewNotesMaster ();_bgc :=uint32 (len (_fbd ._ddc ));_fgc .AddTarget (_cgge ,_cabe ,_cfgg ,_bgc );_fbd ._ddc =append (_fbd ._ddc ,_cabe );_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._ddc ));case _aa .ExtendedPropertiesType :_fgc .AddTarget (_cgge ,_fbd .AppProperties .X (),_cfgg ,0);_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,0);case _aa .SlideType :_daf :=_bfe .NewSld ();_fbd ._dcc =append (_fbd ._dcc ,_daf );_fgc .AddTarget (_cgge ,_daf ,_cfgg ,uint32 (len (_fbd ._dcc )));_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._dcc ));_ffg :=_fefd .NewRelationships ();_fgc .AddTarget (_a .RelationsPathFor (_cgge ),_ffg .X (),_cfgg ,0);_fbd ._egag =append (_fbd ._egag ,_ffg );case _aa .SlideMasterType :_ggd :=_bfe .NewSldMaster ();if !_fgc .AddTarget (_cgge ,_ggd ,_cfgg ,uint32 (len (_fbd ._bae )+1)){return nil ;};_fbd ._bae =append (_fbd ._bae ,_ggd );_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._bae ));_dfbe :=_fefd .NewRelationships ();_fgc .AddTarget (_a .RelationsPathFor (_cgge ),_dfbe .X (),_cfgg ,0);_fbd ._gbg =append (_fbd ._gbg ,_dfbe );case _aa .SlideLayoutType :_cdc :=_bfe .NewSldLayout ();if !_fgc .AddTarget (_cgge ,_cdc ,_cfgg ,uint32 (len (_fbd ._ace )+1)){return nil ;};_fbd ._ace =append (_fbd ._ace ,_cdc );_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._ace ));_dag :=_fefd .NewRelationships ();_fgc .AddTarget (_a .RelationsPathFor (_cgge ),_dag .X (),_cfgg ,0);_fbd ._bcda =append (_fbd ._bcda ,_dag );case _aa .ThumbnailType :for _dafc ,_bbed :=range _ceaa {if _bbed ==nil {continue ;};if _bbed .Name ==_cgge {_ccg ,_bdb :=_bbed .Open ();if _bdb !=nil {return _faa .Errorf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0061\u0064\u0069\u006e\u0067\u0020\u0074\u0068\u0075m\u0062\u006e\u0061i\u006c:\u0020\u0025\u0073",_bdb );};_fbd .Thumbnail ,_ ,_bdb =_fef .Decode (_ccg );_ccg .Close ();if _bdb !=nil {return _faa .Errorf ("\u0065\u0072\u0072\u006fr\u0020\u0064\u0065\u0063\u006f\u0064\u0069\u006e\u0067\u0020t\u0068u\u006d\u0062\u006e\u0061\u0069\u006c\u003a \u0025\u0073",_bdb );};_ceaa [_dafc ]=nil ;};};case _aa .ThemeType :_bcbd :=_fd .NewTheme ();if !_fgc .AddTarget (_cgge ,_bcbd ,_cfgg ,uint32 (len (_fbd ._fbb )+1)){return nil ;};_fbd ._fbb =append (_fbd ._fbb ,_bcbd );_gge .TargetAttr =_aa .RelativeFilename (_abba ,_dbf .Typ ,_cfgg ,len (_fbd ._fbb ));_cbd :=_fefd .NewRelationships ();_fgc .AddTarget (_a .RelationsPathFor (_cgge ),_cbd .X (),_cfgg ,0);_fbd ._fgba =append (_fbd ._fgba ,_cbd );case _aa .ImageType :_cgge =_d .Clean (_cgge );if _dbed ,_edcb :=_fbd ._cff [_cgge ];_edcb {_gge .TargetAttr =_dbed ;return nil ;};_ddcbc :="";for _ccc ,_bdbf :=range _ceaa {if _bdbf ==nil {continue ;};if _bdbf .Name ==_cgge {_gfd ,_edgf :=_a .ExtractToDiskTmp (_bdbf ,_fbd .TmpPath );if _edgf !=nil {return _edgf ;};_ebe ,_edgf :=_fefd .ImageFromStorage (_gfd );if _edgf !=nil {return _edgf ;};_ddcbc =_ebe .Format ;_beac :=_fefd .MakeImageRef (_ebe ,&_fbd .DocBase ,_fbd ._efc );_fbd .Images =append (_fbd .Images ,_beac );_ceaa [_ccc ]=nil ;_fgc .RecordIndex (_cgge ,len (_fbd .Images ));break ;};};_ebee :=_fgc .IndexFor (_cgge );_gge .TargetAttr =_aa .RelativeImageFilename (_abba ,_dbf .Typ ,_cfgg ,_ebee ,_ddcbc );_fbd ._cff [_cgge ]=_gge .TargetAttr ;default:_aa .Log ("\u0075\u006e\u0073\u0075\u0070p\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u006c\u0061\u0074\u0069\u006fn\u0073\u0068\u0069\u0070\u0020\u0074\u0079\u0070\u0065\u003a\u0020\u0025\u0073\u0020\u0074\u0067\u0074\u003a\u0020\u0025\u0073",_cfgg ,_cgge );};return nil ;};

// AddParagraph adds a paragraph to the text box
func (_gfc TextBox )AddParagraph ()_ac .Paragraph {_dcdf :=_fd .NewCT_TextParagraph ();_gfc ._deff .TxBody .P =append (_gfc ._deff .TxBody .P ,_dcdf );return _ac .MakeParagraph (_dcdf );};

// ViewProperties contains presentation specific properties.
type ViewProperties struct{_geabe *_bfe .ViewPr };

// SlideLayouts returns a slice of all layouts in SlideMaster.
func (_ccaf SlideMaster )SlideLayouts ()[]SlideLayout {_cdcc :=map[string ]int {};_adfa :=[]SlideLayout {};for _ ,_baefd :=range _ccaf ._aadf .Relationships (){_addc :=_b .Replace (_baefd .Target (),".\u002e\u002f\u0073\u006c\u0069\u0064e\u004c\u0061\u0079\u006f\u0075\u0074\u0073\u002f\u0073l\u0069\u0064\u0065L\u0061y\u006f\u0075\u0074","",-1);_addc =_b .Replace (_addc ,"\u002e\u0078\u006d\u006c","",-1);if _bdab ,_bfgf :=_g .ParseInt (_addc ,10,32);_bfgf ==nil {_cdcc [_baefd .ID ()]=int (_bdab );};};for _ ,_eea :=range _ccaf ._bgca .SldLayoutIdLst .SldLayoutId {if _adcag ,_dfaf :=_cdcc [_eea .RIdAttr ];_dfaf {_ddfb :=_ccaf ._acd ._ace [_adcag -1];_adfa =append (_adfa ,SlideLayout {_ddfb });};};return _adfa ;};

// TextBox is a text box within a slide.
type TextBox struct{_deff *_bfe .CT_Shape };

// SetTextAnchor controls the text anchoring
func (_bbef TextBox )SetTextAnchor (a _fd .ST_TextAnchoringType ){_bbef ._deff .TxBody .BodyPr =_fd .NewCT_TextBodyProperties ();_bbef ._deff .TxBody .BodyPr .AnchorAttr =a ;};

// ShowPr returns the ShowPr property.
func (_gea PresentationProperties )ShowPr ()*_bfe .CT_ShowProperties {return _gea ._adf .ShowPr };func (_bcfc *Presentation )Validate ()error {if _effd :=_bcfc ._dgb .Validate ();_effd !=nil {return _effd ;};for _agd ,_fgeg :=range _bcfc .Slides (){if _cgbdg :=_fgeg .ValidateWithPath (_faa .Sprintf ("\u0053l\u0069\u0064\u0065\u005b\u0025\u0064]",_agd ));_cgbdg !=nil {return _cgbdg ;};};for _egbg ,_adg :=range _bcfc ._bae {if _fac :=_adg .ValidateWithPath (_faa .Sprintf ("\u0053l\u0069d\u0065\u004d\u0061\u0073\u0074\u0065\u0072\u005b\u0025\u0064\u005d",_egbg ));_fac !=nil {return _fac ;};};for _fce ,_ffa :=range _bcfc ._ace {if _adcf :=_ffa .ValidateWithPath (_faa .Sprintf ("\u0053l\u0069d\u0065\u004c\u0061\u0079\u006f\u0075\u0074\u005b\u0025\u0064\u005d",_fce ));_adcf !=nil {return _adcf ;};};return nil ;};func _gfg (_egdf []*_bfe .CT_GroupShapeChoice )[]*_bfe .CT_GroupShapeChoice {var _gccc []*_bfe .CT_GroupShapeChoice ;for _ ,_cge :=range _egdf {if len (_cge .Pic )==0{_gccc =append (_gccc ,_cge );};};return _gccc ;};

// AddSlideWithLayout adds a new slide with content copied from a layout.  Normally you should
// use AddDefaultSlideWithLayout as it will do some post processing similar to PowerPoint to
// clear place holder text, etc.
func (_dfaa *Presentation )AddSlideWithLayout (l SlideLayout )(Slide ,error ){_fc :=_bfe .NewCT_SlideIdListEntry ();_fc .IdAttr =256;for _ ,_bbb :=range _dfaa ._dgb .SldIdLst .SldId {if _bbb .IdAttr >=_fc .IdAttr {_fc .IdAttr =_bbb .IdAttr +1;};};_dfaa ._dgb .SldIdLst .SldId =append (_dfaa ._dgb .SldIdLst .SldId ,_fc );_fcc :=_bfe .NewSld ();_dgaa :=_e .Buffer {};_eff :=_db .NewEncoder (&_dgaa );_bbe :=_db .StartElement {Name :_db .Name {Local :"\u0073\u006c\u0069d\u0065"}};_bbe .Attr =append (_bbe .Attr ,_db .Attr {Name :_db .Name {Local :"\u0078\u006d\u006cn\u0073"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_bbe .Attr =append (_bbe .Attr ,_db .Attr {Name :_db .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0061"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065m\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006cf\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u0064\u0072\u0061\u0077\u0069\u006e\u0067m\u006c\u002f\u0032\u0030\u0030\u0036\u002f\u006d\u0061\u0069\u006e"});_bbe .Attr =append (_bbe .Attr ,_db .Attr {Name :_db .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0070"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u0073\u0063\u0068\u0065\u006d\u0061\u0073\u002e\u006f\u0070\u0065\u006e\u0078m\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002eo\u0072\u0067\u002f\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069o\u006e\u006d\u006c\u002f\u0032\u00300\u0036\u002f\u006da\u0069\u006e"});_bbe .Attr =append (_bbe .Attr ,_db .Attr {Name :_db .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0072"},Value :"\u0068\u0074\u0074\u0070\u003a\u002f/\u0073\u0063\u0068\u0065\u006da\u0073\u002e\u006f\u0070\u0065\u006ex\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002e\u006f\u0072\u0067\u002f\u006f\u0066\u0066\u0069c\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002fr\u0065\u006c\u0061\u0074\u0069\u006f\u006e\u0073h\u0069\u0070\u0073"});_bbe .Attr =append (_bbe .Attr ,_db .Attr {Name :_db .Name {Local :"\u0078\u006d\u006c\u006e\u0073\u003a\u0073\u0068"},Value :"\u0068\u0074\u0074\u0070\u003a/\u002f\u0073\u0063\u0068\u0065m\u0061s\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072\u006d\u0061\u0074\u0073\u002e\u006f\u0072\u0067/\u006f\u0066\u0066\u0069\u0063\u0065\u0044\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u002f\u0032\u0030\u0030\u0036\u002f\u0073\u0068\u0061\u0072e\u0064\u0054\u0079\u0070\u0065\u0073"});_bbe .Attr =append (_bbe .Attr ,_db .Attr {Name :_db .Name {Local :"\u0078m\u006c\u006e\u0073\u003a\u0078\u006dl"},Value :"\u0068\u0074tp\u003a\u002f\u002fw\u0077\u0077\u002e\u00773.o\u0072g/\u0058\u004d\u004c\u002f\u0031\u0039\u00398/\u006e\u0061\u006d\u0065\u0073\u0070\u0061c\u0065"});if _cfg :=l ._bcfe .CSld .MarshalXML (_eff ,_bbe );_cfg !=nil {return Slide {},_cfg ;};_eff .Flush ();_adb :=_db .NewDecoder (&_dgaa );_fcc .CSld =_bfe .NewCT_CommonSlideData ();if _aee :=_adb .Decode (_fcc .CSld );_aee !=nil {return Slide {},_aee ;};_fcc .CSld .NameAttr =nil ;_fcc .CSld .SpTree .Choice =_gfg (_fcc .CSld .SpTree .Choice );_dfaa ._dcc =append (_dfaa ._dcc ,_fcc );_efdf :=_dfaa ._efc .AddAutoRelationship (_aa .DocTypePresentation ,_aa .OfficeDocumentType ,len (_dfaa ._dcc ),_aa .SlideType );_fc .RIdAttr =_efdf .ID ();_gaf :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideType ,len (_dfaa ._dcc ));_dfaa .ContentTypes .AddOverride (_gaf ,_aa .SlideContentType );_bad :=_fefd .NewRelationships ();_dfaa ._egag =append (_dfaa ._egag ,_bad );_aed :=len (_dfaa ._egag )-1;for _geab ,_abf :=range _dfaa ._ace {if _abf ==l .X (){_cea :=_dfaa ._bcda [_geab ];for _ ,_beb :=range _cea .X ().Relationship {if _beb .TypeAttr !=_aa .SlideMasterType {_dfaa ._egag [_aed ].X ().Relationship =append (_dfaa ._egag [_aed ].X ().Relationship ,_beb );};};_bad .AddAutoRelationship (_aa .DocTypePresentation ,_aa .SlideType ,_geab +1,_aa .SlideLayoutType );};};_eee :=Slide {_fc ,_fcc ,_dfaa };return _eee ,nil ;};func (_ddb *Presentation )save (_abg _df .Writer ,_abb bool )error {const _ffcb ="\u0050\u0072\u0065\u0073en\u0074\u0061\u0074\u0069\u006f\u006e\u003a\u0070\u002e\u0053\u0061\u0076\u0065";if _edd :=_ddb ._dgb .Validate ();_edd !=nil {_fg .Printf ("\u0076\u0061\u006c\u0069\u0064\u0061\u0074\u0069\u006f\u006e\u0020\u0065\u0072\u0072\u006fr\u0020i\u006e\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u003a\u0020\u0025\u0073",_edd );};if !_dfa .GetLicenseKey ().IsLicensed ()&&!_bcba {_faa .Println ("\u0055\u006e\u006ci\u0063\u0065\u006e\u0073e\u0064\u0020\u0076\u0065\u0072\u0073\u0069o\u006e\u0020\u006f\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065");_faa .Println ("\u002d\u0020\u0047e\u0074\u0020\u0061\u0020\u0074\u0072\u0069\u0061\u006c\u0020\u006c\u0069\u0063\u0065\u006e\u0073\u0065\u0020\u006f\u006e\u0020\u0068\u0074\u0074\u0070\u0073\u003a\u002f\u002fu\u006e\u0069\u0064\u006f\u0063\u002e\u0069\u006f");return _c .New ("\u0075\u006e\u0069\u006f\u0066\u0066\u0069\u0063\u0065\u0020\u006ci\u0063\u0065\u006e\u0073\u0065\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0064");};if len (_ddb ._gbb )==0{_edf ,_ggb :=_dfa .GenRefId ("\u0070\u0077");if _ggb !=nil {_aa .Log ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_ggb );return _ggb ;};_ddb ._gbb =_edf ;};if _gab :=_dfa .Track (_ddb ._gbb ,_ffcb );_gab !=nil {_faa .Printf ("\u0045\u0052\u0052\u004f\u0052\u003a\u0020\u0025\u0076\u000a",_gab );return _gab ;};if _abb {_ddb .ContentTypes .RemoveOverride ("\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ddb .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");}else {_ddb .ContentTypes .RemoveOverride ("\u0061\u0070pl\u0069\u0063\u0061\u0074\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066o\u0072\u006d\u0061\u0074s\u002d\u006f\u0066\u0066ic\u0065\u0064o\u0063u\u006d\u0065\u006e\u0074\u002e\u0070r\u0065\u0073\u0065n\u0074\u0061t\u0069\u006f\u006e\u006d\u006c\u002e\u0074\u0065\u006d\u0070\u006c\u0061\u0074\u0065.\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");_ddb .ContentTypes .EnsureOverride ("/\u0070\u0070\u0074\u002fpr\u0065s\u0065\u006e\u0074\u0061\u0074i\u006f\u006e\u002e\u0078\u006d\u006c","\u0061\u0070\u0070\u006c\u0069\u0063\u0061t\u0069\u006f\u006e\u002f\u0076\u006e\u0064\u002e\u006f\u0070\u0065\u006e\u0078\u006d\u006c\u0066\u006f\u0072m\u0061\u0074\u0073\u002d\u006ff\u0066\u0069\u0063\u0065\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u006d\u006c\u002e\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e\u002e\u006d\u0061\u0069\u006e\u002b\u0078\u006d\u006c");};_eeec :=_aa .DocTypePresentation ;_gbbgg :=_fa .NewWriter (_abg );defer _gbbgg .Close ();if _bcf :=_a .MarshalXML (_gbbgg ,_aa .BaseRelsFilename ,_ddb .Rels .X ());_bcf !=nil {return _bcf ;};if _cgbd :=_a .MarshalXMLByType (_gbbgg ,_eeec ,_aa .ExtendedPropertiesType ,_ddb .AppProperties .X ());_cgbd !=nil {return _cgbd ;};if _aeb :=_a .MarshalXMLByType (_gbbgg ,_eeec ,_aa .CorePropertiesType ,_ddb .CoreProperties .X ());_aeb !=nil {return _aeb ;};if _acc :=_a .MarshalXMLByType (_gbbgg ,_eeec ,_aa .PresentationPropertiesType ,_ddb ._aag .X ());_acc !=nil {return _acc ;};if _fec :=_a .MarshalXMLByType (_gbbgg ,_eeec ,_aa .ViewPropertiesType ,_ddb ._ded .X ());_fec !=nil {return _fec ;};if _bec :=_a .MarshalXMLByType (_gbbgg ,_eeec ,_aa .TableStylesType ,_ddb ._fbc .X ());_bec !=nil {return _bec ;};if _ddb .CustomProperties .X ()!=nil {if _ged :=_a .MarshalXMLByType (_gbbgg ,_eeec ,_aa .CustomPropertiesType ,_ddb .CustomProperties .X ());_ged !=nil {return _ged ;};};if _ddb .Thumbnail !=nil {_dffaf ,_bdg :=_gbbgg .Create ("\u0064\u006f\u0063Pr\u006f\u0070\u0073\u002f\u0074\u0068\u0075\u006d\u0062\u006e\u0061\u0069\u006c\u002e\u006a\u0070\u0065\u0067");if _bdg !=nil {return _bdg ;};if _caca :=_fe .Encode (_dffaf ,_ddb .Thumbnail ,nil );_caca !=nil {return _caca ;};};_cfa :=_aa .AbsoluteFilename (_eeec ,_aa .OfficeDocumentType ,0);if _efg :=_a .MarshalXML (_gbbgg ,_cfa ,_ddb ._dgb );_efg !=nil {return _efg ;};if _cdb :=_a .MarshalXML (_gbbgg ,_a .RelationsPathFor (_cfa ),_ddb ._efc .X ());_cdb !=nil {return _cdb ;};for _adbb ,_afc :=range _ddb ._dcc {_baa :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideType ,_adbb +1);_a .MarshalXML (_gbbgg ,_baa ,_afc );if !_ddb ._egag [_adbb ].IsEmpty (){_bac :=_a .RelationsPathFor (_baa );_a .MarshalXML (_gbbgg ,_bac ,_ddb ._egag [_adbb ].X ());};};for _ggbc ,_fefdd :=range _ddb ._bae {_aba :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideMasterType ,_ggbc +1);_a .MarshalXML (_gbbgg ,_aba ,_fefdd );if !_ddb ._gbg [_ggbc ].IsEmpty (){_ffec :=_a .RelationsPathFor (_aba );_a .MarshalXML (_gbbgg ,_ffec ,_ddb ._gbg [_ggbc ].X ());};};for _bga ,_eda :=range _ddb ._ace {_gaeb :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .SlideLayoutType ,_bga +1);_a .MarshalXML (_gbbgg ,_gaeb ,_eda );if !_ddb ._bcda [_bga ].IsEmpty (){_add :=_a .RelationsPathFor (_gaeb );_a .MarshalXML (_gbbgg ,_add ,_ddb ._bcda [_bga ].X ());};};for _ddcb ,_bge :=range _ddb ._fbb {_deb :=_aa .AbsoluteFilename (_aa .DocTypePresentation ,_aa .ThemeType ,_ddcb +1);_a .MarshalXML (_gbbgg ,_deb ,_bge );if !_ddb ._fgba [_ddcb ].IsEmpty (){_cfbf :=_a .RelationsPathFor (_deb );_a .MarshalXML (_gbbgg ,_cfbf ,_ddb ._fgba [_ddcb ].X ());};};for _dbbbb ,_aafc :=range _ddb ._aga {_gec :=_aa .AbsoluteFilename (_eeec ,_aa .ChartType ,_dbbbb +1);_a .MarshalXML (_gbbgg ,_gec ,_aafc );};for _ddce ,_fbg :=range _ddb ._edgg {_afa :=_aa .AbsoluteFilename (_eeec ,_aa .HandoutMasterType ,_ddce +1);_a .MarshalXML (_gbbgg ,_afa ,_fbg );};for _ffd ,_efe :=range _ddb ._ddc {_acb :=_aa .AbsoluteFilename (_eeec ,_aa .NotesMasterType ,_ffd +1);_a .MarshalXML (_gbbgg ,_acb ,_efe );};for _dccd ,_dada :=range _ddb ._fgbb {_eeb :=_aa .AbsoluteFilename (_eeec ,_aa .CustomXMLType ,_dccd +1);_a .MarshalXML (_gbbgg ,_eeb ,_dada );};for _cfad ,_dgce :=range _ddb .Images {if _ege :=_fefd .AddImageToZip (_gbbgg ,_dgce ,_cfad +1,_aa .DocTypePresentation );_ege !=nil {return _ege ;};};_ddb .ContentTypes .EnsureDefault ("\u0070\u006e\u0067","\u0069m\u0061\u0067\u0065\u002f\u0070\u006eg");_ddb .ContentTypes .EnsureDefault ("\u006a\u0070\u0065\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ddb .ContentTypes .EnsureDefault ("\u006a\u0070\u0067","\u0069\u006d\u0061\u0067\u0065\u002f\u006a\u0070\u0065\u0067");_ddb .ContentTypes .EnsureDefault ("\u0077\u006d\u0066","i\u006d\u0061\u0067\u0065\u002f\u0078\u002d\u0077\u006d\u0066");if _aeg :=_a .MarshalXML (_gbbgg ,_aa .ContentTypesFilename ,_ddb .ContentTypes .X ());_aeg !=nil {return _aeg ;};if _cgd :=_ddb .WriteExtraFiles (_gbbgg );_cgd !=nil {return _cgd ;};return nil ;};

// SlideLayouts returns the slide layouts defined in the presentation.
func (_aeef *Presentation )SlideLayouts ()[]SlideLayout {_afga :=[]SlideLayout {};for _ ,_aeeg :=range _aeef ._ace {_afga =append (_afga ,SlideLayout {_aeeg });};return _afga ;};

// NewPresentationProperties constructs a new PresentationProperties.
func NewPresentationProperties ()PresentationProperties {return PresentationProperties {_adf :_bfe .NewPresentationPr ()};};