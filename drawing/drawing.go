//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_a "github.com/unidoc/unioffice";_e "github.com/unidoc/unioffice/color";_ae "github.com/unidoc/unioffice/measurement";_c "github.com/unidoc/unioffice/schema/soo/dml";);

// AddBreak adds a new line break to a paragraph.
func (_ag Paragraph )AddBreak (){_dg :=_c .NewEG_TextRun ();_dg .Br =_c .NewCT_TextLineBreak ();_ag ._cbd .EG_TextRun =append (_ag ._cbd .EG_TextRun ,_dg );};

// Properties returns the run's properties.
func (_dc Run )Properties ()RunProperties {if _dc ._ed .R ==nil {_dc ._ed .R =_c .NewCT_RegularTextRun ();};if _dc ._ed .R .RPr ==nil {_dc ._ed .R .RPr =_c .NewCT_TextCharacterProperties ();};return RunProperties {_dc ._ed .R .RPr };};

// SetPosition sets the position of the shape.
func (_fg ShapeProperties )SetPosition (x ,y _ae .Distance ){_fg .ensureXfrm ();if _fg ._ab .Xfrm .Off ==nil {_fg ._ab .Xfrm .Off =_c .NewCT_Point2D ();};_fg ._ab .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_a .Int64 (int64 (x /_ae .EMU ));_fg ._ab .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_a .Int64 (int64 (y /_ae .EMU ));};

// SetAlign controls the paragraph alignment
func (_ebg ParagraphProperties )SetAlign (a _c .ST_TextAlignType ){_ebg ._fa .AlgnAttr =a };

// SetHeight sets the height of the shape.
func (_be ShapeProperties )SetHeight (h _ae .Distance ){_be .ensureXfrm ();if _be ._ab .Xfrm .Ext ==nil {_be ._ab .Xfrm .Ext =_c .NewCT_PositiveSize2D ();};_be ._ab .Xfrm .Ext .CyAttr =int64 (h /_ae .EMU );};type ShapeProperties struct{_ab *_c .CT_ShapeProperties };

// Run is a run within a paragraph.
type Run struct{_ed *_c .EG_TextRun };

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_c .CT_TextParagraph )Paragraph {return Paragraph {x }};func MakeShapeProperties (x *_c .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_fa *_c .CT_TextParagraphProperties ;};func (_cb LineProperties )clearFill (){_cb ._gf .NoFill =nil ;_cb ._gf .GradFill =nil ;_cb ._gf .SolidFill =nil ;_cb ._gf .PattFill =nil ;};

// SetGeometry sets the shape type of the shape
func (_ccb ShapeProperties )SetGeometry (g _c .ST_ShapeType ){if _ccb ._ab .PrstGeom ==nil {_ccb ._ab .PrstGeom =_c .NewCT_PresetGeometry2D ();};_ccb ._ab .PrstGeom .PrstAttr =g ;};

// SetJoin sets the line join style.
func (_gb LineProperties )SetJoin (e LineJoin ){_gb ._gf .Round =nil ;_gb ._gf .Miter =nil ;_gb ._gf .Bevel =nil ;switch e {case LineJoinRound :_gb ._gf .Round =_c .NewCT_LineJoinRound ();case LineJoinBevel :_gb ._gf .Bevel =_c .NewCT_LineJoinBevel ();case LineJoinMiter :_gb ._gf .Miter =_c .NewCT_LineJoinMiterProperties ();};};

// SetSolidFill controls the text color of a run.
func (_fcf RunProperties )SetSolidFill (c _e .Color ){_fcf ._ad .NoFill =nil ;_fcf ._ad .BlipFill =nil ;_fcf ._ad .GradFill =nil ;_fcf ._ad .GrpFill =nil ;_fcf ._ad .PattFill =nil ;_fcf ._ad .SolidFill =_c .NewCT_SolidColorFillProperties ();_fcf ._ad .SolidFill .SrgbClr =_c .NewCT_SRgbColor ();_fcf ._ad .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};func (_d LineProperties )SetSolidFill (c _e .Color ){_d .clearFill ();_d ._gf .SolidFill =_c .NewCT_SolidColorFillProperties ();_d ._gf .SolidFill .SrgbClr =_c .NewCT_SRgbColor ();_d ._gf .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// Properties returns the paragraph properties.
func (_ef Paragraph )Properties ()ParagraphProperties {if _ef ._cbd .PPr ==nil {_ef ._cbd .PPr =_c .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_ef ._cbd .PPr );};func (_ca ShapeProperties )SetNoFill (){_ca .clearFill ();_ca ._ab .NoFill =_c .NewCT_NoFillProperties ()};

// X returns the inner wrapped XML type.
func (_b LineProperties )X ()*_c .CT_LineProperties {return _b ._gf };

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_c .EG_TextRun )Run {return Run {x }};

// SetSize sets the width and height of the shape.
func (_aga ShapeProperties )SetSize (w ,h _ae .Distance ){_aga .SetWidth (w );_aga .SetHeight (h )};

// X returns the inner wrapped XML type.
func (_cc Paragraph )X ()*_c .CT_TextParagraph {return _cc ._cbd };

// RunProperties controls the run properties.
type RunProperties struct{_ad *_c .CT_TextCharacterProperties ;};func (_dbb ShapeProperties )SetSolidFill (c _e .Color ){_dbb .clearFill ();_dbb ._ab .SolidFill =_c .NewCT_SolidColorFillProperties ();_dbb ._ab .SolidFill .SrgbClr =_c .NewCT_SRgbColor ();_dbb ._ab .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetSize sets the font size of the run text
func (_bd RunProperties )SetSize (sz _ae .Distance ){_bd ._ad .SzAttr =_a .Int32 (int32 (sz /_ae .HundredthPoint ));};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;LineJoinMiter ;);

// SetBold controls the bolding of a run.
func (_bc RunProperties )SetBold (b bool ){_bc ._ad .BAttr =_a .Bool (b )};

// SetNumbered controls if bullets are numbered or not.
func (_fag ParagraphProperties )SetNumbered (scheme _c .ST_TextAutonumberScheme ){if scheme ==_c .ST_TextAutonumberSchemeUnset {_fag ._fa .BuAutoNum =nil ;}else {_fag ._fa .BuAutoNum =_c .NewCT_TextAutonumberBullet ();_fag ._fa .BuAutoNum .TypeAttr =scheme ;};};func (_efa ShapeProperties )clearFill (){_efa ._ab .NoFill =nil ;_efa ._ab .BlipFill =nil ;_efa ._ab .GradFill =nil ;_efa ._ab .GrpFill =nil ;_efa ._ab .SolidFill =nil ;_efa ._ab .PattFill =nil ;};

// SetText sets the run's text contents.
func (_efd Run )SetText (s string ){_efd ._ed .Br =nil ;_efd ._ed .Fld =nil ;if _efd ._ed .R ==nil {_efd ._ed .R =_c .NewCT_RegularTextRun ();};_efd ._ed .R .T =s ;};

// X returns the inner wrapped XML type.
func (_db Run )X ()*_c .EG_TextRun {return _db ._ed };

// SetBulletChar sets the bullet character for the paragraph.
func (_gba ParagraphProperties )SetBulletChar (c string ){if c ==""{_gba ._fa .BuChar =nil ;}else {_gba ._fa .BuChar =_c .NewCT_TextCharBullet ();_gba ._fa .BuChar .CharAttr =c ;};};func (_ec ShapeProperties )LineProperties ()LineProperties {if _ec ._ab .Ln ==nil {_ec ._ab .Ln =_c .NewCT_LineProperties ();};return LineProperties {_ec ._ab .Ln };};

// SetFont controls the font of a run.
func (_ge RunProperties )SetFont (s string ){_ge ._ad .Latin =_c .NewCT_TextFont ();_ge ._ad .Latin .TypefaceAttr =s ;};

// X returns the inner wrapped XML type.
func (_fc ParagraphProperties )X ()*_c .CT_TextParagraphProperties {return _fc ._fa };

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_cbf ShapeProperties )SetFlipHorizontal (b bool ){_cbf .ensureXfrm ();if !b {_cbf ._ab .Xfrm .FlipHAttr =nil ;}else {_cbf ._ab .Xfrm .FlipHAttr =_a .Bool (true );};};

// LineJoin is the type of line join
type LineJoin byte ;

// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_c .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};

// SetLevel sets the level of indentation of a paragraph.
func (_eb ParagraphProperties )SetLevel (idx int32 ){_eb ._fa .LvlAttr =_a .Int32 (idx )};

// X returns the inner wrapped XML type.
func (_cf ShapeProperties )X ()*_c .CT_ShapeProperties {return _cf ._ab };

// SetBulletFont controls the font for the bullet character.
func (_df ParagraphProperties )SetBulletFont (f string ){if f ==""{_df ._fa .BuFont =nil ;}else {_df ._fa .BuFont =_c .NewCT_TextFont ();_df ._fa .BuFont .TypefaceAttr =f ;};};

// GetPosition gets the position of the shape in EMU.
func (_bea ShapeProperties )GetPosition ()(int64 ,int64 ){_bea .ensureXfrm ();if _bea ._ab .Xfrm .Off ==nil {_bea ._ab .Xfrm .Off =_c .NewCT_Point2D ();};return *_bea ._ab .Xfrm .Off .XAttr .ST_CoordinateUnqualified ,*_bea ._ab .Xfrm .Off .YAttr .ST_CoordinateUnqualified ;};func (_eg LineProperties )SetNoFill (){_eg .clearFill ();_eg ._gf .NoFill =_c .NewCT_NoFillProperties ()};

// Paragraph is a paragraph within a document.
type Paragraph struct{_cbd *_c .CT_TextParagraph };

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_f LineProperties )SetWidth (w _ae .Distance ){_f ._gf .WAttr =_a .Int32 (int32 (w /_ae .EMU ))};

// AddRun adds a new run to a paragraph.
func (_gg Paragraph )AddRun ()Run {_ee :=MakeRun (_c .NewEG_TextRun ());_gg ._cbd .EG_TextRun =append (_gg ._cbd .EG_TextRun ,_ee .X ());return _ee ;};func (_af ShapeProperties )ensureXfrm (){if _af ._ab .Xfrm ==nil {_af ._ab .Xfrm =_c .NewCT_Transform2D ();};};

// SetWidth sets the width of the shape.
func (_bb ShapeProperties )SetWidth (w _ae .Distance ){_bb .ensureXfrm ();if _bb ._ab .Xfrm .Ext ==nil {_bb ._ab .Xfrm .Ext =_c .NewCT_PositiveSize2D ();};_bb ._ab .Xfrm .Ext .CxAttr =int64 (w /_ae .EMU );};type LineProperties struct{_gf *_c .CT_LineProperties };

// SetFlipVertical controls if the shape is flipped vertically.
func (_bg ShapeProperties )SetFlipVertical (b bool ){_bg .ensureXfrm ();if !b {_bg ._ab .Xfrm .FlipVAttr =nil ;}else {_bg ._ab .Xfrm .FlipVAttr =_a .Bool (true );};};

// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_c .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};