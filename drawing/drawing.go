//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_d "github.com/unidoc/unioffice";_da "github.com/unidoc/unioffice/color";_ga "github.com/unidoc/unioffice/measurement";_gd "github.com/unidoc/unioffice/schema/soo/dml";);

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_ea *_gd .CT_TextParagraphProperties ;};

// X returns the inner wrapped XML type.
func (_ce Paragraph )X ()*_gd .CT_TextParagraph {return _ce ._c };

// Properties returns the paragraph properties.
func (_caf Paragraph )Properties ()ParagraphProperties {if _caf ._c .PPr ==nil {_caf ._c .PPr =_gd .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_caf ._c .PPr );};func (_ge ShapeProperties )LineProperties ()LineProperties {if _ge ._ecf .Ln ==nil {_ge ._ecf .Ln =_gd .NewCT_LineProperties ();};return LineProperties {_ge ._ecf .Ln };};func (_cedf ShapeProperties )SetNoFill (){_cedf .clearFill ();_cedf ._ecf .NoFill =_gd .NewCT_NoFillProperties ();};

// SetFlipVertical controls if the shape is flipped vertically.
func (_adb ShapeProperties )SetFlipVertical (b bool ){_adb .ensureXfrm ();if !b {_adb ._ecf .Xfrm .FlipVAttr =nil ;}else {_adb ._ecf .Xfrm .FlipVAttr =_d .Bool (true );};};

// LineJoin is the type of line join
type LineJoin byte ;

// Properties returns the run's properties.
func (_cef Run )Properties ()RunProperties {if _cef ._bd .R ==nil {_cef ._bd .R =_gd .NewCT_RegularTextRun ();};if _cef ._bd .R .RPr ==nil {_cef ._bd .R .RPr =_gd .NewCT_TextCharacterProperties ();};return RunProperties {_cef ._bd .R .RPr };};

// SetText sets the run's text contents.
func (_fd Run )SetText (s string ){_fd ._bd .Br =nil ;_fd ._bd .Fld =nil ;if _fd ._bd .R ==nil {_fd ._bd .R =_gd .NewCT_RegularTextRun ();};_fd ._bd .R .T =s ;};

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_gd .EG_TextRun )Run {return Run {x }};

// X returns the inner wrapped XML type.
func (_bda ShapeProperties )X ()*_gd .CT_ShapeProperties {return _bda ._ecf };

// X returns the inner wrapped XML type.
func (_gdb LineProperties )X ()*_gd .CT_LineProperties {return _gdb ._a };

// SetAlign controls the paragraph alignment
func (_aba ParagraphProperties )SetAlign (a _gd .ST_TextAlignType ){_aba ._ea .AlgnAttr =a };

// SetPosition sets the position of the shape.
func (_gbg ShapeProperties )SetPosition (x ,y _ga .Distance ){_gbg .ensureXfrm ();if _gbg ._ecf .Xfrm .Off ==nil {_gbg ._ecf .Xfrm .Off =_gd .NewCT_Point2D ();};_gbg ._ecf .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_d .Int64 (int64 (x /_ga .EMU ));_gbg ._ecf .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_d .Int64 (int64 (y /_ga .EMU ));};func (_b LineProperties )SetSolidFill (c _da .Color ){_b .clearFill ();_b ._a .SolidFill =_gd .NewCT_SolidColorFillProperties ();_b ._a .SolidFill .SrgbClr =_gd .NewCT_SRgbColor ();_b ._a .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetNumbered controls if bullets are numbered or not.
func (_fe ParagraphProperties )SetNumbered (scheme _gd .ST_TextAutonumberScheme ){if scheme ==_gd .ST_TextAutonumberSchemeUnset {_fe ._ea .BuAutoNum =nil ;}else {_fe ._ea .BuAutoNum =_gd .NewCT_TextAutonumberBullet ();_fe ._ea .BuAutoNum .TypeAttr =scheme ;};};func (_dd ShapeProperties )ensureXfrm (){if _dd ._ecf .Xfrm ==nil {_dd ._ecf .Xfrm =_gd .NewCT_Transform2D ();};};

// SetBulletChar sets the bullet character for the paragraph.
func (_ced ParagraphProperties )SetBulletChar (c string ){if c ==""{_ced ._ea .BuChar =nil ;}else {_ced ._ea .BuChar =_gd .NewCT_TextCharBullet ();_ced ._ea .BuChar .CharAttr =c ;};};

// SetLevel sets the level of indentation of a paragraph.
func (_ab ParagraphProperties )SetLevel (idx int32 ){_ab ._ea .LvlAttr =_d .Int32 (idx )};

// AddBreak adds a new line break to a paragraph.
func (_gbe Paragraph )AddBreak (){_ca :=_gd .NewEG_TextRun ();_ca .Br =_gd .NewCT_TextLineBreak ();_gbe ._c .EG_TextRun =append (_gbe ._c .EG_TextRun ,_ca );};

// RunProperties controls the run properties.
type RunProperties struct{_cf *_gd .CT_TextCharacterProperties ;};

// Run is a run within a paragraph.
type Run struct{_bd *_gd .EG_TextRun };

// SetSolidFill controls the text color of a run.
func (_gbc RunProperties )SetSolidFill (c _da .Color ){_gbc ._cf .NoFill =nil ;_gbc ._cf .BlipFill =nil ;_gbc ._cf .GradFill =nil ;_gbc ._cf .GrpFill =nil ;_gbc ._cf .PattFill =nil ;_gbc ._cf .SolidFill =_gd .NewCT_SolidColorFillProperties ();_gbc ._cf .SolidFill .SrgbClr =_gd .NewCT_SRgbColor ();_gbc ._cf .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// Paragraph is a paragraph within a document.
type Paragraph struct{_c *_gd .CT_TextParagraph };

// AddRun adds a new run to a paragraph.
func (_e Paragraph )AddRun ()Run {_fa :=MakeRun (_gd .NewEG_TextRun ());_e ._c .EG_TextRun =append (_e ._c .EG_TextRun ,_fa .X ());return _fa ;};

// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_gd .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};

// X returns the inner wrapped XML type.
func (_bdb Run )X ()*_gd .EG_TextRun {return _bdb ._bd };

// SetHeight sets the height of the shape.
func (_gc ShapeProperties )SetHeight (h _ga .Distance ){_gc .ensureXfrm ();if _gc ._ecf .Xfrm .Ext ==nil {_gc ._ecf .Xfrm .Ext =_gd .NewCT_PositiveSize2D ();};_gc ._ecf .Xfrm .Ext .CyAttr =int64 (h /_ga .EMU );};

// SetJoin sets the line join style.
func (_gb LineProperties )SetJoin (e LineJoin ){_gb ._a .Round =nil ;_gb ._a .Miter =nil ;_gb ._a .Bevel =nil ;switch e {case LineJoinRound :_gb ._a .Round =_gd .NewCT_LineJoinRound ();case LineJoinBevel :_gb ._a .Bevel =_gd .NewCT_LineJoinBevel ();case LineJoinMiter :_gb ._a .Miter =_gd .NewCT_LineJoinMiterProperties ();};};

// SetWidth sets the width of the shape.
func (_cc ShapeProperties )SetWidth (w _ga .Distance ){_cc .ensureXfrm ();if _cc ._ecf .Xfrm .Ext ==nil {_cc ._ecf .Xfrm .Ext =_gd .NewCT_PositiveSize2D ();};_cc ._ecf .Xfrm .Ext .CxAttr =int64 (w /_ga .EMU );};

// GetPosition gets the position of the shape in EMU.
func (_ba ShapeProperties )GetPosition ()(int64 ,int64 ){_ba .ensureXfrm ();if _ba ._ecf .Xfrm .Off ==nil {_ba ._ecf .Xfrm .Off =_gd .NewCT_Point2D ();};return *_ba ._ecf .Xfrm .Off .XAttr .ST_CoordinateUnqualified ,*_ba ._ecf .Xfrm .Off .YAttr .ST_CoordinateUnqualified ;};

// SetFont controls the font of a run.
func (_gf RunProperties )SetFont (s string ){_gf ._cf .Latin =_gd .NewCT_TextFont ();_gf ._cf .Latin .TypefaceAttr =s ;};

// SetGeometry sets the shape type of the shape
func (_gg ShapeProperties )SetGeometry (g _gd .ST_ShapeType ){if _gg ._ecf .PrstGeom ==nil {_gg ._ecf .PrstGeom =_gd .NewCT_PresetGeometry2D ();};_gg ._ecf .PrstGeom .PrstAttr =g ;};func (_fga LineProperties )SetNoFill (){_fga .clearFill ();_fga ._a .NoFill =_gd .NewCT_NoFillProperties ();};

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_f LineProperties )SetWidth (w _ga .Distance ){_f ._a .WAttr =_d .Int32 (int32 (w /_ga .EMU ))};func (_bdg ShapeProperties )clearFill (){_bdg ._ecf .NoFill =nil ;_bdg ._ecf .BlipFill =nil ;_bdg ._ecf .GradFill =nil ;_bdg ._ecf .GrpFill =nil ;_bdg ._ecf .SolidFill =nil ;_bdg ._ecf .PattFill =nil ;};func MakeShapeProperties (x *_gd .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};

// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_gd .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};

// X returns the inner wrapped XML type.
func (_ec ParagraphProperties )X ()*_gd .CT_TextParagraphProperties {return _ec ._ea };

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_aa ShapeProperties )SetFlipHorizontal (b bool ){_aa .ensureXfrm ();if !b {_aa ._ecf .Xfrm .FlipHAttr =nil ;}else {_aa ._ecf .Xfrm .FlipHAttr =_d .Bool (true );};};func (_af ShapeProperties )SetSolidFill (c _da .Color ){_af .clearFill ();_af ._ecf .SolidFill =_gd .NewCT_SolidColorFillProperties ();_af ._ecf .SolidFill .SrgbClr =_gd .NewCT_SRgbColor ();_af ._ecf .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};const (LineJoinRound LineJoin =iota ;LineJoinBevel ;LineJoinMiter ;);

// SetBold controls the bolding of a run.
func (_dcf RunProperties )SetBold (b bool ){_dcf ._cf .BAttr =_d .Bool (b )};

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_gd .CT_TextParagraph )Paragraph {return Paragraph {x }};

// SetSize sets the font size of the run text
func (_ag RunProperties )SetSize (sz _ga .Distance ){_ag ._cf .SzAttr =_d .Int32 (int32 (sz /_ga .HundredthPoint ));};type ShapeProperties struct{_ecf *_gd .CT_ShapeProperties };

// SetSize sets the width and height of the shape.
func (_ad ShapeProperties )SetSize (w ,h _ga .Distance ){_ad .SetWidth (w );_ad .SetHeight (h )};

// SetBulletFont controls the font for the bullet character.
func (_dc ParagraphProperties )SetBulletFont (f string ){if f ==""{_dc ._ea .BuFont =nil ;}else {_dc ._ea .BuFont =_gd .NewCT_TextFont ();_dc ._ea .BuFont .TypefaceAttr =f ;};};type LineProperties struct{_a *_gd .CT_LineProperties };func (_fg LineProperties )clearFill (){_fg ._a .NoFill =nil ;_fg ._a .GradFill =nil ;_fg ._a .SolidFill =nil ;_fg ._a .PattFill =nil ;};