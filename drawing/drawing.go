//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package drawing ;import (_cb "github.com/unidoc/unioffice";_ce "github.com/unidoc/unioffice/color";_fc "github.com/unidoc/unioffice/measurement";_ae "github.com/unidoc/unioffice/schema/soo/dml";);

// SetNumbered controls if bullets are numbered or not.
func (_dg ParagraphProperties )SetNumbered (scheme _ae .ST_TextAutonumberScheme ){if scheme ==_ae .ST_TextAutonumberSchemeUnset {_dg ._b .BuAutoNum =nil ;}else {_dg ._b .BuAutoNum =_ae .NewCT_TextAutonumberBullet ();_dg ._b .BuAutoNum .TypeAttr =scheme ;};};

// MakeParagraph constructs a new paragraph wrapper.
func MakeParagraph (x *_ae .CT_TextParagraph )Paragraph {return Paragraph {x }};

// SetSize sets the font size of the run text
func (_fb RunProperties )SetSize (sz _fc .Distance ){_fb ._bc .SzAttr =_cb .Int32 (int32 (sz /_fc .HundredthPoint ));};

// SetAlign controls the paragraph alignment
func (_a ParagraphProperties )SetAlign (a _ae .ST_TextAlignType ){_a ._b .AlgnAttr =a };func (_bca LineProperties )SetSolidFill (c _ce .Color ){_bca .clearFill ();_bca ._f .SolidFill =_ae .NewCT_SolidColorFillProperties ();_bca ._f .SolidFill .SrgbClr =_ae .NewCT_SRgbColor ();_bca ._f .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetWidth sets the width of the shape.
func (_db ShapeProperties )SetWidth (w _fc .Distance ){_db .ensureXfrm ();if _db ._ag .Xfrm .Ext ==nil {_db ._ag .Xfrm .Ext =_ae .NewCT_PositiveSize2D ();};_db ._ag .Xfrm .Ext .CxAttr =int64 (w /_fc .EMU );};

// SetFlipVertical controls if the shape is flipped vertically.
func (_g ShapeProperties )SetFlipVertical (b bool ){_g .ensureXfrm ();if !b {_g ._ag .Xfrm .FlipVAttr =nil ;}else {_g ._ag .Xfrm .FlipVAttr =_cb .Bool (true );};};

// MakeRun constructs a new Run wrapper.
func MakeRun (x *_ae .EG_TextRun )Run {return Run {x }};

// SetBulletChar sets the bullet character for the paragraph.
func (_fd ParagraphProperties )SetBulletChar (c string ){if c ==""{_fd ._b .BuChar =nil ;}else {_fd ._b .BuChar =_ae .NewCT_TextCharBullet ();_fd ._b .BuChar .CharAttr =c ;};};

// SetHeight sets the height of the shape.
func (_e ShapeProperties )SetHeight (h _fc .Distance ){_e .ensureXfrm ();if _e ._ag .Xfrm .Ext ==nil {_e ._ag .Xfrm .Ext =_ae .NewCT_PositiveSize2D ();};_e ._ag .Xfrm .Ext .CyAttr =int64 (h /_fc .EMU );};

// SetSize sets the width and height of the shape.
func (_bbc ShapeProperties )SetSize (w ,h _fc .Distance ){_bbc .SetWidth (w );_bbc .SetHeight (h )};

// SetText sets the run's text contents.
func (_cd Run )SetText (s string ){_cd ._bd .Br =nil ;_cd ._bd .Fld =nil ;if _cd ._bd .R ==nil {_cd ._bd .R =_ae .NewCT_RegularTextRun ();};_cd ._bd .R .T =s ;};

// Run is a run within a paragraph.
type Run struct{_bd *_ae .EG_TextRun };

// X returns the inner wrapped XML type.
func (_dce Paragraph )X ()*_ae .CT_TextParagraph {return _dce ._fg };

// X returns the inner wrapped XML type.
func (_fe ParagraphProperties )X ()*_ae .CT_TextParagraphProperties {return _fe ._b };

// SetGeometry sets the shape type of the shape
func (_df ShapeProperties )SetGeometry (g _ae .ST_ShapeType ){if _df ._ag .PrstGeom ==nil {_df ._ag .PrstGeom =_ae .NewCT_PresetGeometry2D ();};_df ._ag .PrstGeom .PrstAttr =g ;};

// SetPosition sets the position of the shape.
func (_cf ShapeProperties )SetPosition (x ,y _fc .Distance ){_cf .ensureXfrm ();if _cf ._ag .Xfrm .Off ==nil {_cf ._ag .Xfrm .Off =_ae .NewCT_Point2D ();};_cf ._ag .Xfrm .Off .XAttr .ST_CoordinateUnqualified =_cb .Int64 (int64 (x /_fc .EMU ));_cf ._ag .Xfrm .Off .YAttr .ST_CoordinateUnqualified =_cb .Int64 (int64 (y /_fc .EMU ));};type ShapeProperties struct{_ag *_ae .CT_ShapeProperties };func (_af LineProperties )SetNoFill (){_af .clearFill ();_af ._f .NoFill =_ae .NewCT_NoFillProperties ()};

// ParagraphProperties allows controlling paragraph properties.
type ParagraphProperties struct{_b *_ae .CT_TextParagraphProperties ;};

// SetFont controls the font of a run.
func (_cff RunProperties )SetFont (s string ){_cff ._bc .Latin =_ae .NewCT_TextFont ();_cff ._bc .Latin .TypefaceAttr =s ;};func (_bb ShapeProperties )SetNoFill (){_bb .clearFill ();_bb ._ag .NoFill =_ae .NewCT_NoFillProperties ();};

// MakeRunProperties constructs a new RunProperties wrapper.
func MakeRunProperties (x *_ae .CT_TextCharacterProperties )RunProperties {return RunProperties {x }};

// RunProperties controls the run properties.
type RunProperties struct{_bc *_ae .CT_TextCharacterProperties ;};func (_ec ShapeProperties )ensureXfrm (){if _ec ._ag .Xfrm ==nil {_ec ._ag .Xfrm =_ae .NewCT_Transform2D ();};};

// SetSolidFill controls the text color of a run.
func (_dd RunProperties )SetSolidFill (c _ce .Color ){_dd ._bc .NoFill =nil ;_dd ._bc .BlipFill =nil ;_dd ._bc .GradFill =nil ;_dd ._bc .GrpFill =nil ;_dd ._bc .PattFill =nil ;_dd ._bc .SolidFill =_ae .NewCT_SolidColorFillProperties ();_dd ._bc .SolidFill .SrgbClr =_ae .NewCT_SRgbColor ();_dd ._bc .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// X returns the inner wrapped XML type.
func (_ed Run )X ()*_ae .EG_TextRun {return _ed ._bd };

// Paragraph is a paragraph within a document.
type Paragraph struct{_fg *_ae .CT_TextParagraph };

// X returns the inner wrapped XML type.
func (_fcd ShapeProperties )X ()*_ae .CT_ShapeProperties {return _fcd ._ag };

// Properties returns the run's properties.
func (_aef Run )Properties ()RunProperties {if _aef ._bd .R ==nil {_aef ._bd .R =_ae .NewCT_RegularTextRun ();};if _aef ._bd .R .RPr ==nil {_aef ._bd .R .RPr =_ae .NewCT_TextCharacterProperties ();};return RunProperties {_aef ._bd .R .RPr };};func (_dcf ShapeProperties )clearFill (){_dcf ._ag .NoFill =nil ;_dcf ._ag .BlipFill =nil ;_dcf ._ag .GradFill =nil ;_dcf ._ag .GrpFill =nil ;_dcf ._ag .SolidFill =nil ;_dcf ._ag .PattFill =nil ;};

// SetBold controls the bolding of a run.
func (_da RunProperties )SetBold (b bool ){_da ._bc .BAttr =_cb .Bool (b )};

// SetWidth sets the line width, MS products treat zero as the minimum width
// that can be displayed.
func (_ee LineProperties )SetWidth (w _fc .Distance ){_ee ._f .WAttr =_cb .Int32 (int32 (w /_fc .EMU ))};

// Properties returns the paragraph properties.
func (_ab Paragraph )Properties ()ParagraphProperties {if _ab ._fg .PPr ==nil {_ab ._fg .PPr =_ae .NewCT_TextParagraphProperties ();};return MakeParagraphProperties (_ab ._fg .PPr );};

// LineJoin is the type of line join
type LineJoin byte ;const (LineJoinRound LineJoin =iota ;LineJoinBevel ;LineJoinMiter ;);

// AddRun adds a new run to a paragraph.
func (_ge Paragraph )AddRun ()Run {_gf :=MakeRun (_ae .NewEG_TextRun ());_ge ._fg .EG_TextRun =append (_ge ._fg .EG_TextRun ,_gf .X ());return _gf ;};

// MakeParagraphProperties constructs a new ParagraphProperties wrapper.
func MakeParagraphProperties (x *_ae .CT_TextParagraphProperties )ParagraphProperties {return ParagraphProperties {x };};

// AddBreak adds a new line break to a paragraph.
func (_gff Paragraph )AddBreak (){_d :=_ae .NewEG_TextRun ();_d .Br =_ae .NewCT_TextLineBreak ();_gff ._fg .EG_TextRun =append (_gff ._fg .EG_TextRun ,_d );};func (_dc ShapeProperties )LineProperties ()LineProperties {if _dc ._ag .Ln ==nil {_dc ._ag .Ln =_ae .NewCT_LineProperties ();};return LineProperties {_dc ._ag .Ln };};func MakeShapeProperties (x *_ae .CT_ShapeProperties )ShapeProperties {return ShapeProperties {x }};func (_be ShapeProperties )SetSolidFill (c _ce .Color ){_be .clearFill ();_be ._ag .SolidFill =_ae .NewCT_SolidColorFillProperties ();_be ._ag .SolidFill .SrgbClr =_ae .NewCT_SRgbColor ();_be ._ag .SolidFill .SrgbClr .ValAttr =*c .AsRGBString ();};

// SetBulletFont controls the font for the bullet character.
func (_eaa ParagraphProperties )SetBulletFont (f string ){if f ==""{_eaa ._b .BuFont =nil ;}else {_eaa ._b .BuFont =_ae .NewCT_TextFont ();_eaa ._b .BuFont .TypefaceAttr =f ;};};type LineProperties struct{_f *_ae .CT_LineProperties };

// SetLevel sets the level of indentation of a paragraph.
func (_ea ParagraphProperties )SetLevel (idx int32 ){_ea ._b .LvlAttr =_cb .Int32 (idx )};

// SetJoin sets the line join style.
func (_c LineProperties )SetJoin (e LineJoin ){_c ._f .Round =nil ;_c ._f .Miter =nil ;_c ._f .Bevel =nil ;switch e {case LineJoinRound :_c ._f .Round =_ae .NewCT_LineJoinRound ();case LineJoinBevel :_c ._f .Bevel =_ae .NewCT_LineJoinBevel ();case LineJoinMiter :_c ._f .Miter =_ae .NewCT_LineJoinMiterProperties ();};};

// SetFlipHorizontal controls if the shape is flipped horizontally.
func (_ad ShapeProperties )SetFlipHorizontal (b bool ){_ad .ensureXfrm ();if !b {_ad ._ag .Xfrm .FlipHAttr =nil ;}else {_ad ._ag .Xfrm .FlipHAttr =_cb .Bool (true );};};func (_ca LineProperties )clearFill (){_ca ._f .NoFill =nil ;_ca ._f .GradFill =nil ;_ca ._f .SolidFill =nil ;_ca ._f .PattFill =nil ;};

// X returns the inner wrapped XML type.
func (_eea LineProperties )X ()*_ae .CT_LineProperties {return _eea ._f };