//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_b "fmt";_f "github.com/unidoc/unioffice";_g "github.com/unidoc/unioffice/color";_fb "github.com/unidoc/unioffice/drawing";_bg "github.com/unidoc/unioffice/measurement";_dg "github.com/unidoc/unioffice/schema/soo/dml";_a "github.com/unidoc/unioffice/schema/soo/dml/chart";_d "math/rand";);

// AddSeries adds a default series to an Radar chart.
func (_ccff RadarChart )AddSeries ()RadarChartSeries {_cace :=_ccff .nextColor (len (_ccff ._bfcd .Ser ));_gdf :=_a .NewCT_RadarSer ();_ccff ._bfcd .Ser =append (_ccff ._bfcd .Ser ,_gdf );_gdf .Idx .ValAttr =uint32 (len (_ccff ._bfcd .Ser )-1);_gdf .Order .ValAttr =uint32 (len (_ccff ._bfcd .Ser )-1);_eeb :=RadarChartSeries {_gdf };_eeb .InitializeDefaults ();_eeb .Properties ().SetSolidFill (_cace );return _eeb ;};

// AddAxis adds an axis to a Surface chart.
func (_aeedf Surface3DChart )AddAxis (axis Axis ){_bcddc :=_a .NewCT_UnsignedInt ();_bcddc .ValAttr =axis .AxisID ();_aeedf ._bcg .AxId =append (_aeedf ._bcg .AxId ,_bcddc );};

// InitializeDefaults the bar chart to its defaults
func (_afa PieChart )InitializeDefaults (){_afa ._dac .VaryColors =_a .NewCT_Boolean ();_afa ._dac .VaryColors .ValAttr =_f .Bool (true );};

// Properties returns the bar chart series shape properties.
func (_dcf PieChartSeries )Properties ()_fb .ShapeProperties {if _dcf ._ade .SpPr ==nil {_dcf ._ade .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_dcf ._ade .SpPr );};

// Properties returns the Bubble chart series shape properties.
func (_efc BubbleChartSeries )Properties ()_fb .ShapeProperties {if _efc ._cdg .SpPr ==nil {_efc ._cdg .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_efc ._cdg .SpPr );};func (_bgd Legend )Properties ()_fb .ShapeProperties {if _bgd ._abc .SpPr ==nil {_bgd ._abc .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_bgd ._abc .SpPr );};type ScatterChart struct{chartBase ;_fce *_a .CT_ScatterChart ;};func (_eef DataLabels )SetShowValue (b bool ){_eef .ensureChoice ();_eef ._bgg .Choice .ShowVal =_a .NewCT_Boolean ();_eef ._bgg .Choice .ShowVal .ValAttr =_f .Bool (b );};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_cbef *_a .CT_Pie3DChart ;};

// Order returns the order of the series
func (_gac LineChartSeries )Order ()uint32 {return _gac ._fgfb .Order .ValAttr };

// Properties returns the bar chart series shape properties.
func (_gab BarChartSeries )Properties ()_fb .ShapeProperties {if _gab ._ag .SpPr ==nil {_gab ._ag .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_gab ._ag .SpPr );};

// X returns the inner wrapped XML type.
func (_be DoughnutChart )X ()*_a .CT_DoughnutChart {return _be ._fde };func (_ddg StockChart )AddAxis (axis Axis ){_gbg :=_a .NewCT_UnsignedInt ();_gbg .ValAttr =axis .AxisID ();_ddg ._ffbff .AxId =append (_ddg ._ffbff .AxId ,_gbg );};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_ag *_a .CT_BarSer };

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_dca Chart )AddDoughnutChart ()DoughnutChart {_ee :=_a .NewCT_PlotAreaChoice ();_dca ._gec .Chart .PlotArea .Choice =append (_dca ._gec .Chart .PlotArea .Choice ,_ee );_ee .DoughnutChart =_a .NewCT_DoughnutChart ();_cab :=DoughnutChart {_fde :_ee .DoughnutChart };_cab .InitializeDefaults ();return _cab ;};

// AddArea3DChart adds a new area chart to a chart.
func (_ebf Chart )AddArea3DChart ()Area3DChart {_fee (_ebf ._gec .Chart );_bda :=_a .NewCT_PlotAreaChoice ();_ebf ._gec .Chart .PlotArea .Choice =append (_ebf ._gec .Chart .PlotArea .Choice ,_bda );_bda .Area3DChart =_a .NewCT_Area3DChart ();_bba :=Area3DChart {_db :_bda .Area3DChart };_bba .InitializeDefaults ();return _bba ;};

// SetText sets the series text
func (_abe ScatterChartSeries )SetText (s string ){_abe ._abgb .Tx =_a .NewCT_SerTx ();_abe ._abgb .Tx .Choice .V =&s ;};func (_dbb NumberDataSource )SetReference (s string ){_dbb .ensureChoice ();if _dbb ._ecc .Choice .NumRef ==nil {_dbb ._ecc .Choice .NumRef =_a .NewCT_NumRef ();};_dbb ._ecc .Choice .NumRef .F =s ;};func (_feb nullAxis )AxisID ()uint32 {return 0};func (_acd SeriesAxis )AxisID ()uint32 {return _acd ._fadd .AxId .ValAttr };

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_ade *_a .CT_PieSer };

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_fc BubbleChartSeries )InitializeDefaults (){};

// SetValues is used to set the source data to a set of values.
func (_gca CategoryAxisDataSource )SetValues (v []string ){_gca ._bf .Choice =_a .NewCT_AxDataSourceChoice ();_gca ._bf .Choice .StrLit =_a .NewCT_StrData ();_gca ._bf .Choice .StrLit .PtCount =_a .NewCT_UnsignedInt ();_gca ._bf .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _gda ,_aagc :=range v {_gca ._bf .Choice .StrLit .Pt =append (_gca ._bf .Choice .StrLit .Pt ,&_a .CT_StrVal {IdxAttr :uint32 (_gda ),V :_aagc });};};func (_bdf ValueAxis )MajorGridLines ()GridLines {if _bdf ._adfg .MajorGridlines ==nil {_bdf ._adfg .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_bdf ._adfg .MajorGridlines };};func (_abcc SurfaceChartSeries )Values ()NumberDataSource {if _abcc ._fcb .Val ==nil {_abcc ._fcb .Val =_a .NewCT_NumDataSource ();};_caec :=MakeNumberDataSource (_abcc ._fcb .Val );_caec .CreateEmptyNumberCache ();return _caec ;};

// X returns the inner wrapped XML type.
func (_cb AreaChartSeries )X ()*_a .CT_AreaSer {return _cb ._ea };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_fde *_a .CT_DoughnutChart ;};

// CategoryAxis returns the category data source.
func (_bcf BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bcf ._ag .Cat ==nil {_bcf ._ag .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_bcf ._ag .Cat );};func (_bcdf ValueAxis )SetCrosses (axis Axis ){_bcdf ._adfg .CrossAx .ValAttr =axis .AxisID ()};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_fgc *_a .CT_Bar3DChart ;};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_cbc Chart )AddLine3DChart ()Line3DChart {_fee (_cbc ._gec .Chart );_gbe :=_a .NewCT_PlotAreaChoice ();_cbc ._gec .Chart .PlotArea .Choice =append (_cbc ._gec .Chart .PlotArea .Choice ,_gbe );_gbe .Line3DChart =_a .NewCT_Line3DChart ();_gbe .Line3DChart .Grouping =_a .NewCT_Grouping ();_gbe .Line3DChart .Grouping .ValAttr =_a .ST_GroupingStandard ;return Line3DChart {_dce :_gbe .Line3DChart };};

// X returns the inner wrapped XML type.
func (_cee Marker )X ()*_a .CT_Marker {return _cee ._aeed };

// AddSeries adds a default series to an Pie chart.
func (_efca PieOfPieChart )AddSeries ()PieChartSeries {_gbcd :=_a .NewCT_PieSer ();_efca ._gabb .Ser =append (_efca ._gabb .Ser ,_gbcd );_gbcd .Idx .ValAttr =uint32 (len (_efca ._gabb .Ser )-1);_gbcd .Order .ValAttr =uint32 (len (_efca ._gabb .Ser )-1);_deg :=PieChartSeries {_gbcd };_deg .InitializeDefaults ();return _deg ;};func (_dee DateAxis )MajorGridLines ()GridLines {if _dee ._dfc .MajorGridlines ==nil {_dee ._dfc .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_dee ._dfc .MajorGridlines };};func (_ge AreaChart )AddAxis (axis Axis ){_cf :=_a .NewCT_UnsignedInt ();_cf .ValAttr =axis .AxisID ();_ge ._baa .AxId =append (_ge ._baa .AxId ,_cf );};func (_ccgc ValueAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_ccgc ._adfg .MinorTickMark =nil ;}else {_ccgc ._adfg .MinorTickMark =_a .NewCT_TickMark ();_ccgc ._adfg .MinorTickMark .ValAttr =m ;};};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_db *_a .CT_Area3DChart ;};

// AddSeries adds a default series to a line chart.
func (_eed LineChart )AddSeries ()LineChartSeries {_aeaf :=_eed .nextColor (len (_eed ._bagd .Ser ));_cg :=_a .NewCT_LineSer ();_eed ._bagd .Ser =append (_eed ._bagd .Ser ,_cg );_cg .Idx .ValAttr =uint32 (len (_eed ._bagd .Ser )-1);_cg .Order .ValAttr =uint32 (len (_eed ._bagd .Ser )-1);_eaf :=LineChartSeries {_cg };_eaf .InitializeDefaults ();_eaf .Properties ().LineProperties ().SetSolidFill (_aeaf );return _eaf ;};func MakeNumberDataSource (x *_a .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// AddRadarChart adds a new radar chart to a chart.
func (_edc Chart )AddRadarChart ()RadarChart {_adf :=_a .NewCT_PlotAreaChoice ();_edc ._gec .Chart .PlotArea .Choice =append (_edc ._gec .Chart .PlotArea .Choice ,_adf );_adf .RadarChart =_a .NewCT_RadarChart ();_fgf :=RadarChart {_bfcd :_adf .RadarChart };_fgf .InitializeDefaults ();return _fgf ;};

// AddSeries adds a default series to a Surface chart.
func (_bdg SurfaceChart )AddSeries ()SurfaceChartSeries {_aeafb :=_bdg .nextColor (len (_bdg ._gfaa .Ser ));_gbfd :=_a .NewCT_SurfaceSer ();_bdg ._gfaa .Ser =append (_bdg ._gfaa .Ser ,_gbfd );_gbfd .Idx .ValAttr =uint32 (len (_bdg ._gfaa .Ser )-1);_gbfd .Order .ValAttr =uint32 (len (_bdg ._gfaa .Ser )-1);_fdd :=SurfaceChartSeries {_gbfd };_fdd .InitializeDefaults ();_fdd .Properties ().LineProperties ().SetSolidFill (_aeafb );return _fdd ;};

// X returns the inner wrapped XML type.
func (_gdd GridLines )X ()*_a .CT_ChartLines {return _gdd ._gbc };

// AddSeries adds a default series to an Pie chart.
func (_gff PieChart )AddSeries ()PieChartSeries {_cdbc :=_a .NewCT_PieSer ();_gff ._dac .Ser =append (_gff ._dac .Ser ,_cdbc );_cdbc .Idx .ValAttr =uint32 (len (_gff ._dac .Ser )-1);_cdbc .Order .ValAttr =uint32 (len (_gff ._dac .Ser )-1);_abb :=PieChartSeries {_cdbc };_abb .InitializeDefaults ();return _abb ;};func (_gdag DataLabels )SetPosition (p _a .ST_DLblPos ){_gdag .ensureChoice ();_gdag ._bgg .Choice .DLblPos =_a .NewCT_DLblPos ();_gdag ._bgg .Choice .DLblPos .ValAttr =p ;};func (_fad Marker )Properties ()_fb .ShapeProperties {if _fad ._aeed .SpPr ==nil {_fad ._aeed .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_fad ._aeed .SpPr );};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_cbd CategoryAxisDataSource )SetLabelReference (s string ){_cbd ._bf .Choice =_a .NewCT_AxDataSourceChoice ();_cbd ._bf .Choice .StrRef =_a .NewCT_StrRef ();_cbd ._bf .Choice .StrRef .F =s ;};

// Properties returns the line chart series shape properties.
func (_ccf LineChartSeries )Properties ()_fb .ShapeProperties {if _ccf ._fgfb .SpPr ==nil {_ccf ._fgfb .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_ccf ._fgfb .SpPr );};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_ega Chart )AddBar3DChart ()Bar3DChart {_fee (_ega ._gec .Chart );_gdb :=_a .NewCT_PlotAreaChoice ();_ega ._gec .Chart .PlotArea .Choice =append (_ega ._gec .Chart .PlotArea .Choice ,_gdb );_gdb .Bar3DChart =_a .NewCT_Bar3DChart ();_gdb .Bar3DChart .Grouping =_a .NewCT_BarGrouping ();_gdb .Bar3DChart .Grouping .ValAttr =_a .ST_BarGroupingStandard ;_fd :=Bar3DChart {_fgc :_gdb .Bar3DChart };_fd .InitializeDefaults ();return _fd ;};

// SetText sets the series text.
func (_gg BubbleChartSeries )SetText (s string ){_gg ._cdg .Tx =_a .NewCT_SerTx ();_gg ._cdg .Tx .Choice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_daa DoughnutChart )InitializeDefaults (){_daa ._fde .VaryColors =_a .NewCT_Boolean ();_daa ._fde .VaryColors .ValAttr =_f .Bool (true );_daa ._fde .HoleSize =_a .NewCT_HoleSize ();_daa ._fde .HoleSize .ValAttr =&_a .ST_HoleSize {};_daa ._fde .HoleSize .ValAttr .ST_HoleSizeUByte =_f .Uint8 (50);};

// SetDirection changes the direction of the bar chart (bar or column).
func (_ac BarChart )SetDirection (d _a .ST_BarDir ){_ac ._bd .BarDir .ValAttr =d };

// AddAxis adds an axis to a line chart.
func (_ggdd Line3DChart )AddAxis (axis Axis ){_ebcg :=_a .NewCT_UnsignedInt ();_ebcg .ValAttr =axis .AxisID ();_ggdd ._dce .AxId =append (_ggdd ._dce .AxId ,_ebcg );};func MakeSeriesAxis (x *_a .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// AddTitle sets a new title on the chart.
func (_eae Chart )AddTitle ()Title {_eae ._gec .Chart .Title =_a .NewCT_Title ();_eae ._gec .Chart .Title .Overlay =_a .NewCT_Boolean ();_eae ._gec .Chart .Title .Overlay .ValAttr =_f .Bool (false );_eae ._gec .Chart .AutoTitleDeleted =_a .NewCT_Boolean ();_eae ._gec .Chart .AutoTitleDeleted .ValAttr =_f .Bool (false );_gfd :=MakeTitle (_eae ._gec .Chart .Title );_gfd .InitializeDefaults ();return _gfd ;};

// X returns the inner wrapped XML type.
func (_eff Line3DChart )X ()*_a .CT_Line3DChart {return _eff ._dce };

// InitializeDefaults initializes a bar chart series to the default values.
func (_bcc BarChartSeries )InitializeDefaults (){};func (_ged Title )InitializeDefaults (){_ged .SetText ("\u0054\u0069\u0074l\u0065");_ged .RunProperties ().SetSize (16*_bg .Point );_ged .RunProperties ().SetSolidFill (_g .Black );_ged .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_ged .RunProperties ().SetBold (false );};

// X returns the inner wrapped XML type.
func (_fbfb SurfaceChartSeries )X ()*_a .CT_SurfaceSer {return _fbfb ._fcb };func (_bdb LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bdb ._fgfb .Cat ==nil {_bdb ._fgfb .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_bdb ._fgfb .Cat );};func (_gabc Marker )SetSymbol (s _a .ST_MarkerStyle ){if s ==_a .ST_MarkerStyleUnset {_gabc ._aeed .Symbol =nil ;}else {_gabc ._aeed .Symbol =_a .NewCT_MarkerStyle ();_gabc ._aeed .Symbol .ValAttr =s ;};};func (_fdg DateAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_fdg ._dfc .MajorTickMark =nil ;}else {_fdg ._dfc .MajorTickMark =_a .NewCT_TickMark ();_fdg ._dfc .MajorTickMark .ValAttr =m ;};};func (_gcd DateAxis )AxisID ()uint32 {return _gcd ._dfc .AxId .ValAttr };

// SetType sets the type the secone pie to either pie or bar
func (_bdbb PieOfPieChart )SetType (t _a .ST_OfPieType ){_bdbb ._gabb .OfPieType .ValAttr =t };

// InitializeDefaults the bar chart to its defaults
func (_fba BarChart )InitializeDefaults (){_fba .SetDirection (_a .ST_BarDirCol )};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_bae Chart )AddPieOfPieChart ()PieOfPieChart {_afg :=_a .NewCT_PlotAreaChoice ();_bae ._gec .Chart .PlotArea .Choice =append (_bae ._gec .Chart .PlotArea .Choice ,_afg );_afg .OfPieChart =_a .NewCT_OfPieChart ();_fa :=PieOfPieChart {_gabb :_afg .OfPieChart };_fa .InitializeDefaults ();return _fa ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_bd *_a .CT_BarChart ;};

// X returns the inner wrapped XML type.
func (_fca DateAxis )X ()*_a .CT_DateAx {return _fca ._dfc };

// InitializeDefaults the Stock chart to its defaults
func (_eedf StockChart )InitializeDefaults (){_eedf ._ffbff .HiLowLines =_a .NewCT_ChartLines ();_eedf ._ffbff .UpDownBars =_a .NewCT_UpDownBars ();_eedf ._ffbff .UpDownBars .GapWidth =_a .NewCT_GapAmount ();_eedf ._ffbff .UpDownBars .GapWidth .ValAttr =&_a .ST_GapAmount {};_eedf ._ffbff .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_f .Uint16 (150);_eedf ._ffbff .UpDownBars .UpBars =_a .NewCT_UpDownBar ();_eedf ._ffbff .UpDownBars .DownBars =_a .NewCT_UpDownBar ();};func (_ffbg DataLabels )SetShowLegendKey (b bool ){_ffbg .ensureChoice ();_ffbg ._bgg .Choice .ShowLegendKey =_a .NewCT_Boolean ();_ffbg ._bgg .Choice .ShowLegendKey .ValAttr =_f .Bool (b );};

// AddSeries adds a default series to a Scatter chart.
func (_feg ScatterChart )AddSeries ()ScatterChartSeries {_cddf :=_feg .nextColor (len (_feg ._fce .Ser ));_bff :=_a .NewCT_ScatterSer ();_feg ._fce .Ser =append (_feg ._fce .Ser ,_bff );_bff .Idx .ValAttr =uint32 (len (_feg ._fce .Ser )-1);_bff .Order .ValAttr =uint32 (len (_feg ._fce .Ser )-1);_cga :=ScatterChartSeries {_bff };_cga .InitializeDefaults ();_cga .Marker ().Properties ().LineProperties ().SetSolidFill (_cddf );_cga .Marker ().Properties ().SetSolidFill (_cddf );return _cga ;};

// InitializeDefaults initializes an Radar series to the default values.
func (_dag RadarChartSeries )InitializeDefaults (){};type Marker struct{_aeed *_a .CT_Marker };

// X returns the inner wrapped XML type.
func (_dgc Legend )X ()*_a .CT_Legend {return _dgc ._abc };

// Index returns the index of the series
func (_acc LineChartSeries )Index ()uint32 {return _acc ._fgfb .Idx .ValAttr };

// SetIndex sets the index of the series
func (_bec LineChartSeries )SetIndex (idx uint32 ){_bec ._fgfb .Idx .ValAttr =idx };func (_bgfd DataLabels )SetShowCategoryName (b bool ){_bgfd .ensureChoice ();_bgfd ._bgg .Choice .ShowCatName =_a .NewCT_Boolean ();_bgfd ._bgg .Choice .ShowCatName .ValAttr =_f .Bool (b );};

// Values returns the value data source.
func (_gcb BubbleChartSeries )Values ()NumberDataSource {if _gcb ._cdg .YVal ==nil {_gcb ._cdg .YVal =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_gcb ._cdg .YVal );};

// Order returns the order of the series
func (_cfgg SurfaceChartSeries )Order ()uint32 {return _cfgg ._fcb .Order .ValAttr };

// SetText sets the series text.
func (_edd PieChartSeries )SetText (s string ){_edd ._ade .Tx =_a .NewCT_SerTx ();_edd ._ade .Tx .Choice .V =&s ;};type DateAxis struct{_dfc *_a .CT_DateAx };func (_ec DateAxis )SetCrosses (axis Axis ){_ec ._dfc .CrossAx .ValAttr =axis .AxisID ()};func MakeMarker (x *_a .CT_Marker )Marker {return Marker {x }};func (_bfd DataLabels )SetShowSeriesName (b bool ){_bfd .ensureChoice ();_bfd ._bgg .Choice .ShowSerName =_a .NewCT_Boolean ();_bfd ._bgg .Choice .ShowSerName .ValAttr =_f .Bool (b );};type LineChart struct{chartBase ;_bagd *_a .CT_LineChart ;};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_gfaa *_a .CT_SurfaceChart ;};func (_age chartBase )nextColor (_ace int )_g .Color {return _cag [_ace %len (_cag )]};func (_ggg ValueAxis )AxisID ()uint32 {return _ggg ._adfg .AxId .ValAttr };

// AddPie3DChart adds a new pie chart to a chart.
func (_bagc Chart )AddPie3DChart ()Pie3DChart {_fee (_bagc ._gec .Chart );_bbag :=_a .NewCT_PlotAreaChoice ();_bagc ._gec .Chart .PlotArea .Choice =append (_bagc ._gec .Chart .PlotArea .Choice ,_bbag );_bbag .Pie3DChart =_a .NewCT_Pie3DChart ();_cac :=Pie3DChart {_cbef :_bbag .Pie3DChart };_cac .InitializeDefaults ();return _cac ;};

// X returns the inner wrapped XML type.
func (_ddb ScatterChart )X ()*_a .CT_ScatterChart {return _ddb ._fce };type GridLines struct{_gbc *_a .CT_ChartLines };func (_bbab ScatterChart )InitializeDefaults (){_bbab ._fce .ScatterStyle .ValAttr =_a .ST_ScatterStyleMarker ;};func (_geb CategoryAxis )InitializeDefaults (){_geb .SetPosition (_a .ST_AxPosB );_geb .SetMajorTickMark (_a .ST_TickMarkOut );_geb .SetMinorTickMark (_a .ST_TickMarkIn );_geb .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_geb .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_g .LightGray );_geb .Properties ().LineProperties ().SetSolidFill (_g .Black );};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_cdg *_a .CT_BubbleSer };func (_bcfg CategoryAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_bcfg ._bde .MinorTickMark =nil ;}else {_bcfg ._bde .MinorTickMark =_a .NewCT_TickMark ();_bcfg ._bde .MinorTickMark .ValAttr =m ;};};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_add Chart )SetDisplayBlanksAs (v _a .ST_DispBlanksAs ){_add ._gec .Chart .DispBlanksAs =_a .NewCT_DispBlanksAs ();_add ._gec .Chart .DispBlanksAs .ValAttr =v ;};

// InitializeDefaults initializes an area series to the default values.
func (_ffb AreaChartSeries )InitializeDefaults (){};func MakeValueAxis (x *_a .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_gfg DateAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_gfg ._dfc .TickLblPos =nil ;}else {_gfg ._dfc .TickLblPos =_a .NewCT_TickLblPos ();_gfg ._dfc .TickLblPos .ValAttr =p ;};};

// Properties returns the bar chart series shape properties.
func (_bcd AreaChartSeries )Properties ()_fb .ShapeProperties {if _bcd ._ea .SpPr ==nil {_bcd ._ea .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_bcd ._ea .SpPr );};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_a .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// AddSeries adds a default series to a line chart.
func (_bfa Line3DChart )AddSeries ()LineChartSeries {_aeae :=_bfa .nextColor (len (_bfa ._dce .Ser ));_gddb :=_a .NewCT_LineSer ();_bfa ._dce .Ser =append (_bfa ._dce .Ser ,_gddb );_gddb .Idx .ValAttr =uint32 (len (_bfa ._dce .Ser )-1);_gddb .Order .ValAttr =uint32 (len (_bfa ._dce .Ser )-1);_dgf :=LineChartSeries {_gddb };_dgf .InitializeDefaults ();_dgf .Properties ().LineProperties ().SetSolidFill (_aeae );_dgf .Properties ().SetSolidFill (_aeae );return _dgf ;};

// X returns the inner wrapped XML type.
func (_gbbb Surface3DChart )X ()*_a .CT_Surface3DChart {return _gbbb ._bcg };

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_abgb *_a .CT_ScatterSer };func (_gbb CategoryAxis )MajorGridLines ()GridLines {if _gbb ._bde .MajorGridlines ==nil {_gbb ._bde .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_gbb ._bde .MajorGridlines };};func (_cad Marker )SetSize (sz uint8 ){_cad ._aeed .Size =_a .NewCT_MarkerSize ();_cad ._aeed .Size .ValAttr =&sz ;};

// AddSeries adds a default series to an Pie3D chart.
func (_cae Pie3DChart )AddSeries ()PieChartSeries {_gag :=_a .NewCT_PieSer ();_cae ._cbef .Ser =append (_cae ._cbef .Ser ,_gag );_gag .Idx .ValAttr =uint32 (len (_cae ._cbef .Ser )-1);_gag .Order .ValAttr =uint32 (len (_cae ._cbef .Ser )-1);_dga :=PieChartSeries {_gag };_dga .InitializeDefaults ();return _dga ;};func (_dab ScatterChartSeries )Values ()NumberDataSource {if _dab ._abgb .YVal ==nil {_dab ._abgb .YVal =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_dab ._abgb .YVal );};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_fbef NumberDataSource )CreateEmptyNumberCache (){_fbef .ensureChoice ();if _fbef ._ecc .Choice .NumRef ==nil {_fbef ._ecc .Choice .NumRef =_a .NewCT_NumRef ();};_fbef ._ecc .Choice .NumLit =nil ;_fbef ._ecc .Choice .NumRef .NumCache =_a .NewCT_NumData ();_fbef ._ecc .Choice .NumRef .NumCache .PtCount =_a .NewCT_UnsignedInt ();_fbef ._ecc .Choice .NumRef .NumCache .PtCount .ValAttr =0;};func (_bdad Surface3DChart )InitializeDefaults (){_bdad ._bcg .Wireframe =_a .NewCT_Boolean ();_bdad ._bcg .Wireframe .ValAttr =_f .Bool (false );_bdad ._bcg .BandFmts =_a .NewCT_BandFmts ();for _afb :=0;_afb < 15;_afb ++{_dgca :=_a .NewCT_BandFmt ();_dgca .Idx .ValAttr =uint32 (_afb );_dgca .SpPr =_dg .NewCT_ShapeProperties ();_aega :=_fb .MakeShapeProperties (_dgca .SpPr );_aega .SetSolidFill (_bdad .nextColor (_afb ));_bdad ._bcg .BandFmts .BandFmt =append (_bdad ._bcg .BandFmts .BandFmt ,_dgca );};};

// Labels returns the data label properties.
func (_fda LineChartSeries )Labels ()DataLabels {if _fda ._fgfb .DLbls ==nil {_fda ._fgfb .DLbls =_a .NewCT_DLbls ();};return MakeDataLabels (_fda ._fgfb .DLbls );};

// AddAreaChart adds a new area chart to a chart.
func (_abg Chart )AddAreaChart ()AreaChart {_def :=_a .NewCT_PlotAreaChoice ();_abg ._gec .Chart .PlotArea .Choice =append (_abg ._gec .Chart .PlotArea .Choice ,_def );_def .AreaChart =_a .NewCT_AreaChart ();_geg :=AreaChart {_baa :_def .AreaChart };_geg .InitializeDefaults ();return _geg ;};

// X returns the inner wrapped XML type.
func (_dcee PieOfPieChart )X ()*_a .CT_OfPieChart {return _dcee ._gabb };

// X returns the inner wrapped XML type.
func (_acb Chart )X ()*_a .ChartSpace {return _acb ._gec };

// X returns the inner wrapped XML type.
func (_ae AreaChart )X ()*_a .CT_AreaChart {return _ae ._baa };func (_gf CategoryAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_gf ._bde .TickLblPos =nil ;}else {_gf ._bde .TickLblPos =_a .NewCT_TickLblPos ();_gf ._bde .TickLblPos .ValAttr =p ;};};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_baa *_a .CT_AreaChart ;};

// AddSeries adds a default series to a bar chart.
func (_cd BarChart )AddSeries ()BarChartSeries {_fbf :=_cd .nextColor (len (_cd ._bd .Ser ));_aag :=_a .NewCT_BarSer ();_cd ._bd .Ser =append (_cd ._bd .Ser ,_aag );_aag .Idx .ValAttr =uint32 (len (_cd ._bd .Ser )-1);_aag .Order .ValAttr =uint32 (len (_cd ._bd .Ser )-1);_cdd :=BarChartSeries {_aag };_cdd .InitializeDefaults ();_cdd .Properties ().SetSolidFill (_fbf );return _cdd ;};func (_eag SeriesAxis )InitializeDefaults (){};

// CategoryAxis returns the category data source.
func (_gcbb RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gcbb ._dbfca .Cat ==nil {_gcbb ._dbfca .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_gcbb ._dbfca .Cat );};

// SetText sets the series text
func (_gge LineChartSeries )SetText (s string ){_gge ._fgfb .Tx =_a .NewCT_SerTx ();_gge ._fgfb .Tx .Choice .V =&s ;};func (_gd CategoryAxis )SetPosition (p _a .ST_AxPos ){_gd ._bde .AxPos =_a .NewCT_AxPos ();_gd ._bde .AxPos .ValAttr =p ;};

// AddAxis adds an axis to a Scatter chart.
func (_daca ScatterChart )AddAxis (axis Axis ){_bbb :=_a .NewCT_UnsignedInt ();_bbb .ValAttr =axis .AxisID ();_daca ._fce .AxId =append (_daca ._fce .AxId ,_bbb );};

// Index returns the index of the series
func (_bce ScatterChartSeries )Index ()uint32 {return _bce ._abgb .Idx .ValAttr };type nullAxis byte ;func _fee (_cbe *_a .CT_Chart ){_cbe .View3D =_a .NewCT_View3D ();_cbe .View3D .RotX =_a .NewCT_RotX ();_cbe .View3D .RotX .ValAttr =_f .Int8 (15);_cbe .View3D .RotY =_a .NewCT_RotY ();_cbe .View3D .RotY .ValAttr =_f .Uint16 (20);_cbe .View3D .RAngAx =_a .NewCT_Boolean ();_cbe .View3D .RAngAx .ValAttr =_f .Bool (false );_cbe .Floor =_a .NewCT_Surface ();_cbe .Floor .Thickness =_a .NewCT_Thickness ();_cbe .Floor .Thickness .ValAttr .Uint32 =_f .Uint32 (0);_cbe .SideWall =_a .NewCT_Surface ();_cbe .SideWall .Thickness =_a .NewCT_Thickness ();_cbe .SideWall .Thickness .ValAttr .Uint32 =_f .Uint32 (0);_cbe .BackWall =_a .NewCT_Surface ();_cbe .BackWall .Thickness =_a .NewCT_Thickness ();_cbe .BackWall .Thickness .ValAttr .Uint32 =_f .Uint32 (0);};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_ea *_a .CT_AreaSer };

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_bcg *_a .CT_Surface3DChart ;};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_bfcd *_a .CT_RadarChart ;};

// AddAxis adds an axis to a line chart.
func (_gfb LineChart )AddAxis (axis Axis ){_dfcc :=_a .NewCT_UnsignedInt ();_dfcc .ValAttr =axis .AxisID ();_gfb ._bagd .AxId =append (_gfb ._bagd .AxId ,_dfcc );};

// Values returns the value data source.
func (_dgd BarChartSeries )Values ()NumberDataSource {if _dgd ._ag .Val ==nil {_dgd ._ag .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_dgd ._ag .Val );};func MakeTitle (x *_a .CT_Title )Title {return Title {x }};

// Properties returns the chart's shape properties.
func (_aeg Chart )Properties ()_fb .ShapeProperties {if _aeg ._gec .SpPr ==nil {_aeg ._gec .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_aeg ._gec .SpPr );};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_fgfb *_a .CT_LineSer };

// Marker returns the marker properties.
func (_fac LineChartSeries )Marker ()Marker {if _fac ._fgfb .Marker ==nil {_fac ._fgfb .Marker =_a .NewCT_Marker ();};return MakeMarker (_fac ._fgfb .Marker );};func (_bga ValueAxis )Properties ()_fb .ShapeProperties {if _bga ._adfg .SpPr ==nil {_bga ._adfg .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_bga ._adfg .SpPr );};func (_bgc CategoryAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_bgc ._bde .MajorTickMark =nil ;}else {_bgc ._bde .MajorTickMark =_a .NewCT_TickMark ();_bgc ._bde .MajorTickMark .ValAttr =m ;};};func (_bdbba SurfaceChart )InitializeDefaults (){_bdbba ._gfaa .Wireframe =_a .NewCT_Boolean ();_bdbba ._gfaa .Wireframe .ValAttr =_f .Bool (false );_bdbba ._gfaa .BandFmts =_a .NewCT_BandFmts ();for _agf :=0;_agf < 15;_agf ++{_fgg :=_a .NewCT_BandFmt ();_fgg .Idx .ValAttr =uint32 (_agf );_fgg .SpPr =_dg .NewCT_ShapeProperties ();_ecdb :=_fb .MakeShapeProperties (_fgg .SpPr );_ecdb .SetSolidFill (_bdbba .nextColor (_agf ));_bdbba ._gfaa .BandFmts .BandFmt =append (_bdbba ._gfaa .BandFmts .BandFmt ,_fgg );};};type ValueAxis struct{_adfg *_a .CT_ValAx };

// RemoveTitle removes any existing title from the chart.
func (_caca Chart )RemoveTitle (){_caca ._gec .Chart .Title =nil ;_caca ._gec .Chart .AutoTitleDeleted =_a .NewCT_Boolean ();_caca ._gec .Chart .AutoTitleDeleted .ValAttr =_f .Bool (true );};

// X returns the inner wrapped XML type.
func (_gaee PieChart )X ()*_a .CT_PieChart {return _gaee ._dac };func (_ffa Legend )SetOverlay (b bool ){_ffa ._abc .Overlay =_a .NewCT_Boolean ();_ffa ._abc .Overlay .ValAttr =_f .Bool (b );};func (_aef LineChartSeries )Values ()NumberDataSource {if _aef ._fgfb .Val ==nil {_aef ._fgfb .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_aef ._fgfb .Val );};

// Marker returns the marker properties.
func (_gfa ScatterChartSeries )Marker ()Marker {if _gfa ._abgb .Marker ==nil {_gfa ._abgb .Marker =_a .NewCT_Marker ();};return MakeMarker (_gfa ._abgb .Marker );};

// X returns the inner wrapped XML type.
func (_dc BarChartSeries )X ()*_a .CT_BarSer {return _dc ._ag };

// X returns the inner wrapped XML type.
func (_ffbb StockChart )X ()*_a .CT_StockChart {return _ffbb ._ffbff };func (_aeaef RadarChart )AddAxis (axis Axis ){_acf :=_a .NewCT_UnsignedInt ();_acf .ValAttr =axis .AxisID ();_aeaef ._bfcd .AxId =append (_aeaef ._bfcd .AxId ,_acf );};func (_cba ValueAxis )SetPosition (p _a .ST_AxPos ){_cba ._adfg .AxPos =_a .NewCT_AxPos ();_cba ._adfg .AxPos .ValAttr =p ;};

// AddPieChart adds a new pie chart to a chart.
func (_ccg Chart )AddPieChart ()PieChart {_afe :=_a .NewCT_PlotAreaChoice ();_ccg ._gec .Chart .PlotArea .Choice =append (_ccg ._gec .Chart .PlotArea .Choice ,_afe );_afe .PieChart =_a .NewCT_PieChart ();_ebc :=PieChart {_dac :_afe .PieChart };_ebc .InitializeDefaults ();return _ebc ;};func (_dbff LineChartSeries )InitializeDefaults (){_dbff .Properties ().LineProperties ().SetWidth (1*_bg .Point );_dbff .Properties ().LineProperties ().SetSolidFill (_g .Black );_dbff .Properties ().LineProperties ().SetJoin (_fb .LineJoinRound );_dbff .Marker ().SetSymbol (_a .ST_MarkerStyleNone );_dbff .Labels ().SetShowLegendKey (false );_dbff .Labels ().SetShowValue (false );_dbff .Labels ().SetShowPercent (false );_dbff .Labels ().SetShowCategoryName (false );_dbff .Labels ().SetShowSeriesName (false );_dbff .Labels ().SetShowLeaderLines (false );};

// SetOrder sets the order of the series
func (_cdc LineChartSeries )SetOrder (idx uint32 ){_cdc ._fgfb .Order .ValAttr =idx };func (_ddfb DataLabels )SetShowLeaderLines (b bool ){_ddfb .ensureChoice ();_ddfb ._bgg .Choice .ShowLeaderLines =_a .NewCT_Boolean ();_ddfb ._bgg .Choice .ShowLeaderLines .ValAttr =_f .Bool (b );};

// SetIndex sets the index of the series
func (_gbac ScatterChartSeries )SetIndex (idx uint32 ){_gbac ._abgb .Idx .ValAttr =idx };

// AddSeries adds a default series to an area chart.
func (_aea AreaChart )AddSeries ()AreaChartSeries {_c :=_aea .nextColor (len (_aea ._baa .Ser ));_de :=_a .NewCT_AreaSer ();_aea ._baa .Ser =append (_aea ._baa .Ser ,_de );_de .Idx .ValAttr =uint32 (len (_aea ._baa .Ser )-1);_de .Order .ValAttr =uint32 (len (_aea ._baa .Ser )-1);_ab :=AreaChartSeries {_de };_ab .InitializeDefaults ();_ab .Properties ().SetSolidFill (_c );return _ab ;};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_dac *_a .CT_PieChart ;};

// AddSeries adds a default series to an Doughnut chart.
func (_agg DoughnutChart )AddSeries ()PieChartSeries {_cca :=_a .NewCT_PieSer ();_agg ._fde .Ser =append (_agg ._fde .Ser ,_cca );_cca .Idx .ValAttr =uint32 (len (_agg ._fde .Ser )-1);_cca .Order .ValAttr =uint32 (len (_agg ._fde .Ser )-1);_gcc :=PieChartSeries {_cca };_gcc .InitializeDefaults ();return _gcc ;};

// AddBarChart adds a new bar chart to a chart.
func (_edg Chart )AddBarChart ()BarChart {_bcb :=_a .NewCT_PlotAreaChoice ();_edg ._gec .Chart .PlotArea .Choice =append (_edg ._gec .Chart .PlotArea .Choice ,_bcb );_bcb .BarChart =_a .NewCT_BarChart ();_bcb .BarChart .Grouping =_a .NewCT_BarGrouping ();_bcb .BarChart .Grouping .ValAttr =_a .ST_BarGroupingStandard ;_aff :=BarChart {_bd :_bcb .BarChart };_aff .InitializeDefaults ();return _aff ;};

// X returns the inner wrapped XML type.
func (_fed SeriesAxis )X ()*_a .CT_SerAx {return _fed ._fadd };

// CategoryAxis returns the category data source.
func (_dd BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dd ._cdg .XVal ==nil {_dd ._cdg .XVal =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_dd ._cdg .XVal );};var _cag =[]_g .Color {_g .RGB (0x33,0x66,0xcc),_g .RGB (0xDC,0x39,0x12),_g .RGB (0xFF,0x99,0x00),_g .RGB (0x10,0x96,0x18),_g .RGB (0x99,0x00,0x99),_g .RGB (0x3B,0x3E,0xAC),_g .RGB (0x00,0x99,0xC6),_g .RGB (0xDD,0x44,0x77),_g .RGB (0x66,0xAA,0x00),_g .RGB (0xB8,0x2E,0x2E),_g .RGB (0x31,0x63,0x95),_g .RGB (0x99,0x44,0x99),_g .RGB (0x22,0xAA,0x99),_g .RGB (0xAA,0xAA,0x11),_g .RGB (0x66,0x33,0xCC),_g .RGB (0xE6,0x73,0x00),_g .RGB (0x8B,0x07,0x07),_g .RGB (0x32,0x92,0x62),_g .RGB (0x55,0x74,0xA6),_g .RGB (0x3B,0x3E,0xAC)};

// SetText sets the series text.
func (_ga AreaChartSeries )SetText (s string ){_ga ._ea .Tx =_a .NewCT_SerTx ();_ga ._ea .Tx .Choice .V =&s };

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_gabb *_a .CT_OfPieChart ;};

// SetOrder sets the order of the series
func (_ggbg ScatterChartSeries )SetOrder (idx uint32 ){_ggbg ._abgb .Order .ValAttr =idx };func (_faf Title )RunProperties ()_fb .RunProperties {if _faf ._gbff .Tx ==nil {_faf .SetText ("");};if _faf ._gbff .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_faf ._gbff .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_dg .NewCT_TextCharacterProperties ();};return _fb .MakeRunProperties (_faf ._gbff .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func (_fdef SurfaceChartSeries )InitializeDefaults (){_fdef .Properties ().LineProperties ().SetWidth (1*_bg .Point );_fdef .Properties ().LineProperties ().SetSolidFill (_g .Black );_fdef .Properties ().LineProperties ().SetJoin (_fb .LineJoinRound );};func (_aad ScatterChartSeries )SetSmooth (b bool ){_aad ._abgb .Smooth =_a .NewCT_Boolean ();_aad ._abgb .Smooth .ValAttr =&b ;};func (_bad DataLabels )ensureChoice (){if _bad ._bgg .Choice ==nil {_bad ._bgg .Choice =_a .NewCT_DLblsChoice ();};};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_cbdg CategoryAxisDataSource )SetNumberReference (s string ){_cbdg ._bf .Choice =_a .NewCT_AxDataSourceChoice ();_cbdg ._bf .Choice .NumRef =_a .NewCT_NumRef ();_cbdg ._bf .Choice .NumRef .F =s ;};type CategoryAxis struct{_bde *_a .CT_CatAx };func MakeLegend (l *_a .CT_Legend )Legend {return Legend {l }};type SurfaceChartSeries struct{_fcb *_a .CT_SurfaceSer };

// SetValues sets values directly on a source.
func (_afd NumberDataSource )SetValues (v []float64 ){_afd .ensureChoice ();_afd ._ecc .Choice .NumRef =nil ;_afd ._ecc .Choice .NumLit =_a .NewCT_NumData ();_afd ._ecc .Choice .NumLit .PtCount =_a .NewCT_UnsignedInt ();_afd ._ecc .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _dec ,_cdbe :=range v {_afd ._ecc .Choice .NumLit .Pt =append (_afd ._ecc .Choice .NumLit .Pt ,&_a .CT_NumVal {IdxAttr :uint32 (_dec ),V :_b .Sprintf ("\u0025\u0067",_cdbe )});};};

// X returns the inner wrapped XML type.
func (_caa LineChart )X ()*_a .CT_LineChart {return _caa ._bagd };

// X returns the inner wrapped XML type.
func (_ccgd PieChartSeries )X ()*_a .CT_PieSer {return _ccgd ._ade };

// AddSeries adds a default series to an area chart.
func (_ba Area3DChart )AddSeries ()AreaChartSeries {_ad :=_ba .nextColor (len (_ba ._db .Ser ));_da :=_a .NewCT_AreaSer ();_ba ._db .Ser =append (_ba ._db .Ser ,_da );_da .Idx .ValAttr =uint32 (len (_ba ._db .Ser )-1);_da .Order .ValAttr =uint32 (len (_ba ._db .Ser )-1);_ada :=AreaChartSeries {_da };_ada .InitializeDefaults ();_ada .Properties ().SetSolidFill (_ad );return _ada ;};func (_fgb Bar3DChart )AddAxis (axis Axis ){_bgf :=_a .NewCT_UnsignedInt ();_bgf .ValAttr =axis .AxisID ();_fgb ._fgc .AxId =append (_fgb ._fgc .AxId ,_bgf );};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_bccf PieChartSeries )SetExplosion (v uint32 ){_bccf ._ade .Explosion =_a .NewCT_UnsignedInt ();_bccf ._ade .Explosion .ValAttr =v ;};func (_gabf Title )ParagraphProperties ()_fb .ParagraphProperties {if _gabf ._gbff .Tx ==nil {_gabf .SetText ("");};if _gabf ._gbff .Tx .Choice .Rich .P [0].PPr ==nil {_gabf ._gbff .Tx .Choice .Rich .P [0].PPr =_dg .NewCT_TextParagraphProperties ();};return _fb .MakeParagraphProperties (_gabf ._gbff .Tx .Choice .Rich .P [0].PPr );};func (_cfg BarChart )AddAxis (axis Axis ){_eg :=_a .NewCT_UnsignedInt ();_eg .ValAttr =axis .AxisID ();_cfg ._bd .AxId =append (_cfg ._bd .AxId ,_eg );};type SeriesAxis struct{_fadd *_a .CT_SerAx };func (_aee CategoryAxis )SetCrosses (axis Axis ){_aee ._bde .Choice =_a .NewEG_AxSharedChoice ();_aee ._bde .Choice .Crosses =_a .NewCT_Crosses ();_aee ._bde .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_aee ._bde .CrossAx .ValAttr =axis .AxisID ();};

// AddBubbleChart adds a new bubble chart.
func (_ebcc Chart )AddBubbleChart ()BubbleChart {_ffbf :=_a .NewCT_PlotAreaChoice ();_ebcc ._gec .Chart .PlotArea .Choice =append (_ebcc ._gec .Chart .PlotArea .Choice ,_ffbf );_ffbf .BubbleChart =_a .NewCT_BubbleChart ();_ffc :=BubbleChart {_dcd :_ffbf .BubbleChart };_ffc .InitializeDefaults ();return _ffc ;};

// X returns the inner wrapped XML type.
func (_caee ScatterChartSeries )X ()*_a .CT_ScatterSer {return _caee ._abgb };

// AddSeries adds a default series to a Bubble chart.
func (_bag BubbleChart )AddSeries ()BubbleChartSeries {_fbab :=_bag .nextColor (len (_bag ._dcd .Ser ));_af :=_a .NewCT_BubbleSer ();_bag ._dcd .Ser =append (_bag ._dcd .Ser ,_af );_af .Idx .ValAttr =uint32 (len (_bag ._dcd .Ser )-1);_af .Order .ValAttr =uint32 (len (_bag ._dcd .Ser )-1);_fbe :=BubbleChartSeries {_af };_fbe .InitializeDefaults ();_fbe .Properties ().SetSolidFill (_fbab );return _fbe ;};func (_adaa Legend )SetPosition (p _a .ST_LegendPos ){if p ==_a .ST_LegendPosUnset {_adaa ._abc .LegendPos =nil ;}else {_adaa ._abc .LegendPos =_a .NewCT_LegendPos ();_adaa ._abc .LegendPos .ValAttr =p ;};};

// Index returns the index of the series
func (_gbgc SurfaceChartSeries )Index ()uint32 {return _gbgc ._fcb .Idx .ValAttr };func (_aefg ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aefg ._abgb .XVal ==nil {_aefg ._abgb .XVal =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_aefg ._abgb .XVal );};func MakeDataLabels (x *_a .CT_DLbls )DataLabels {return DataLabels {x }};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_egd DoughnutChart )SetHoleSize (pct uint8 ){if _egd ._fde .HoleSize ==nil {_egd ._fde .HoleSize =_a .NewCT_HoleSize ();};if _egd ._fde .HoleSize .ValAttr ==nil {_egd ._fde .HoleSize .ValAttr =&_a .ST_HoleSize {};};_egd ._fde .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_dbf Chart )AddSurface3DChart ()Surface3DChart {_dcg :=_a .NewCT_PlotAreaChoice ();_dbf ._gec .Chart .PlotArea .Choice =append (_dbf ._gec .Chart .PlotArea .Choice ,_dcg );_dcg .Surface3DChart =_a .NewCT_Surface3DChart ();_fee (_dbf ._gec .Chart );_fgbc :=Surface3DChart {_bcg :_dcg .Surface3DChart };_fgbc .InitializeDefaults ();return _fgbc ;};type Title struct{_gbff *_a .CT_Title };

// SetText sets the series text.
func (_ca BarChartSeries )SetText (s string ){_ca ._ag .Tx =_a .NewCT_SerTx ();_ca ._ag .Tx .Choice .V =&s };

// Chart is a generic chart.
type Chart struct{_gec *_a .ChartSpace };

// X returns the inner wrapped XML type.
func (_aa Area3DChart )X ()*_a .CT_Area3DChart {return _aa ._db };func (_ece ValueAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_ece ._adfg .TickLblPos =nil ;}else {_ece ._adfg .TickLblPos =_a .NewCT_TickLblPos ();_ece ._adfg .TickLblPos .ValAttr =p ;};};

// InitializeDefaults initializes an Pie series to the default values.
func (_fcc PieChartSeries )InitializeDefaults (){};

// AddDateAxis adds a value axis to the chart.
func (_geaa Chart )AddDateAxis ()DateAxis {_cbcb :=_a .NewCT_DateAx ();if _geaa ._gec .Chart .PlotArea .CChoice ==nil {_geaa ._gec .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_cbcb .AxId =_a .NewCT_UnsignedInt ();_cbcb .AxId .ValAttr =0x7FFFFFFF&_d .Uint32 ();_geaa ._gec .Chart .PlotArea .CChoice .DateAx =append (_geaa ._gec .Chart .PlotArea .CChoice .DateAx ,_cbcb );_cbcb .Delete =_a .NewCT_Boolean ();_cbcb .Delete .ValAttr =_f .Bool (false );_cbcb .Scaling =_a .NewCT_Scaling ();_cbcb .Scaling .Orientation =_a .NewCT_Orientation ();_cbcb .Scaling .Orientation .ValAttr =_a .ST_OrientationMinMax ;_cbcb .Choice =&_a .EG_AxSharedChoice {};_cbcb .Choice .Crosses =_a .NewCT_Crosses ();_cbcb .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_bbac :=DateAxis {_cbcb };_bbac .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_g .LightGray );_bbac .SetMajorTickMark (_a .ST_TickMarkOut );_bbac .SetMinorTickMark (_a .ST_TickMarkIn );_bbac .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_bbac .Properties ().LineProperties ().SetSolidFill (_g .Black );_bbac .SetPosition (_a .ST_AxPosL );return _bbac ;};func (_bfc Chart )AddSeriesAxis ()SeriesAxis {_ggf :=_a .NewCT_SerAx ();if _bfc ._gec .Chart .PlotArea .CChoice ==nil {_bfc ._gec .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_ggf .AxId =_a .NewCT_UnsignedInt ();_ggf .AxId .ValAttr =0x7FFFFFFF&_d .Uint32 ();_bfc ._gec .Chart .PlotArea .CChoice .SerAx =append (_bfc ._gec .Chart .PlotArea .CChoice .SerAx ,_ggf );_ggf .Delete =_a .NewCT_Boolean ();_ggf .Delete .ValAttr =_f .Bool (false );_cdgc :=MakeSeriesAxis (_ggf );_cdgc .InitializeDefaults ();return _cdgc ;};

// X returns the inner wrapped XML type.
func (_fdc SurfaceChart )X ()*_a .CT_SurfaceChart {return _fdc ._gfaa };

// Labels returns the data label properties.
func (_ffac ScatterChartSeries )Labels ()DataLabels {if _ffac ._abgb .DLbls ==nil {_ffac ._abgb .DLbls =_a .NewCT_DLbls ();};return MakeDataLabels (_ffac ._abgb .DLbls );};

// SetText sets the series text.
func (_badd RadarChartSeries )SetText (s string ){_badd ._dbfca .Tx =_a .NewCT_SerTx ();_badd ._dbfca .Tx .Choice .V =&s ;};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_bf *_a .CT_AxDataSource };func (_cea GridLines )Properties ()_fb .ShapeProperties {if _cea ._gbc .SpPr ==nil {_cea ._gbc .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_cea ._gbc .SpPr );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_ffbff *_a .CT_StockChart ;};

// InitializeDefaults the bar chart to its defaults
func (_cfb PieOfPieChart )InitializeDefaults (){_cfb ._gabb .VaryColors =_a .NewCT_Boolean ();_cfb ._gabb .VaryColors .ValAttr =_f .Bool (true );_cfb .SetType (_a .ST_OfPieTypePie );_cfb ._gabb .SecondPieSize =_a .NewCT_SecondPieSize ();_cfb ._gabb .SecondPieSize .ValAttr =&_a .ST_SecondPieSize {};_cfb ._gabb .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_f .Uint16 (75);_afec :=_a .NewCT_ChartLines ();_afec .SpPr =_dg .NewCT_ShapeProperties ();_bfdc :=_fb .MakeShapeProperties (_afec .SpPr );_bfdc .LineProperties ().SetSolidFill (_g .Auto );_cfb ._gabb .SerLines =append (_cfb ._gabb .SerLines ,_afec );};

// AddCategoryAxis adds a category axis.
func (_df Chart )AddCategoryAxis ()CategoryAxis {_ce :=_a .NewCT_CatAx ();if _df ._gec .Chart .PlotArea .CChoice ==nil {_df ._gec .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_ce .AxId =_a .NewCT_UnsignedInt ();_ce .AxId .ValAttr =0x7FFFFFFF&_d .Uint32 ();_df ._gec .Chart .PlotArea .CChoice .CatAx =append (_df ._gec .Chart .PlotArea .CChoice .CatAx ,_ce );_ce .Auto =_a .NewCT_Boolean ();_ce .Auto .ValAttr =_f .Bool (true );_ce .Delete =_a .NewCT_Boolean ();_ce .Delete .ValAttr =_f .Bool (false );_ccb :=MakeCategoryAxis (_ce );_ccb .InitializeDefaults ();return _ccb ;};

// X returns the inner wrapped XML type.
func (_cfe BarChart )X ()*_a .CT_BarChart {return _cfe ._bd };

// InitializeDefaults the bar chart to its defaults
func (_ffbac Pie3DChart )InitializeDefaults (){_ffbac ._cbef .VaryColors =_a .NewCT_Boolean ();_ffbac ._cbef .VaryColors .ValAttr =_f .Bool (true );};

// X returns the inner wrapped XML type.
func (_ef BubbleChart )X ()*_a .CT_BubbleChart {return _ef ._dcd };

// CategoryAxis returns the category data source.
func (_aeb PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aeb ._ade .Cat ==nil {_aeb ._ade .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_aeb ._ade .Cat );};

// X returns the inner wrapped XML type.
func (_abf RadarChartSeries )X ()*_a .CT_RadarSer {return _abf ._dbfca };func (_eccg ValueAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_eccg ._adfg .MajorTickMark =nil ;}else {_eccg ._adfg .MajorTickMark =_a .NewCT_TickMark ();_eccg ._adfg .MajorTickMark .ValAttr =m ;};};

// InitializeDefaults the Bubble chart to its defaults
func (_fbbf BubbleChart )InitializeDefaults (){};type DataLabels struct{_bgg *_a .CT_DLbls };

// SetText sets the series text
func (_baddg SurfaceChartSeries )SetText (s string ){_baddg ._fcb .Tx =_a .NewCT_SerTx ();_baddg ._fcb .Tx .Choice .V =&s ;};

// AddStockChart adds a new stock chart.
func (_ed Chart )AddStockChart ()StockChart {_bcdd :=_a .NewCT_PlotAreaChoice ();_ed ._gec .Chart .PlotArea .Choice =append (_ed ._gec .Chart .PlotArea .Choice ,_bcdd );_bcdd .StockChart =_a .NewCT_StockChart ();_gce :=StockChart {_ffbff :_bcdd .StockChart };_gce .InitializeDefaults ();return _gce ;};func (_fcd CategoryAxis )Properties ()_fb .ShapeProperties {if _fcd ._bde .SpPr ==nil {_fcd ._bde .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_fcd ._bde .SpPr );};

// AddLineChart adds a new line chart to a chart.
func (_gae Chart )AddLineChart ()LineChart {_bb :=_a .NewCT_PlotAreaChoice ();_gae ._gec .Chart .PlotArea .Choice =append (_gae ._gec .Chart .PlotArea .Choice ,_bb );_bb .LineChart =_a .NewCT_LineChart ();_bb .LineChart .Grouping =_a .NewCT_Grouping ();_bb .LineChart .Grouping .ValAttr =_a .ST_GroupingStandard ;return LineChart {_bagd :_bb .LineChart };};func (_bed SeriesAxis )SetCrosses (axis Axis ){_bed ._fadd .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_ecf LineChartSeries )X ()*_a .CT_LineSer {return _ecf ._fgfb };func (_ff Area3DChart )AddAxis (axis Axis ){_fe :=_a .NewCT_UnsignedInt ();_fe .ValAttr =axis .AxisID ();_ff ._db .AxId =append (_ff ._db .AxId ,_fe );};

// X returns the inner wrapped XML type.
func (_cc BubbleChartSeries )X ()*_a .CT_BubbleSer {return _cc ._cdg };

// RemoveLegend removes the legend if the chart has one.
func (_gbd Chart )RemoveLegend (){_gbd ._gec .Chart .Legend =nil };

// Properties returns the line chart series shape properties.
func (_dcad ScatterChartSeries )Properties ()_fb .ShapeProperties {if _dcad ._abgb .SpPr ==nil {_dcad ._abgb .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_dcad ._abgb .SpPr );};type Legend struct{_abc *_a .CT_Legend };

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_dcd *_a .CT_BubbleChart ;};

// InitializeDefaults the bar chart to its defaults
func (_gea Bar3DChart )InitializeDefaults (){_gea .SetDirection (_a .ST_BarDirCol )};func (_eb CategoryAxis )AxisID ()uint32 {return _eb ._bde .AxId .ValAttr };

// Values returns the bubble size data source.
func (_ddf BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ddf ._cdg .BubbleSize ==nil {_ddf ._cdg .BubbleSize =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_ddf ._cdg .BubbleSize );};

// AddValueAxis adds a value axis to the chart.
func (_bbf Chart )AddValueAxis ()ValueAxis {_dbfc :=_a .NewCT_ValAx ();if _bbf ._gec .Chart .PlotArea .CChoice ==nil {_bbf ._gec .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_dbfc .AxId =_a .NewCT_UnsignedInt ();_dbfc .AxId .ValAttr =0x7FFFFFFF&_d .Uint32 ();_bbf ._gec .Chart .PlotArea .CChoice .ValAx =append (_bbf ._gec .Chart .PlotArea .CChoice .ValAx ,_dbfc );_dbfc .Delete =_a .NewCT_Boolean ();_dbfc .Delete .ValAttr =_f .Bool (false );_dbfc .Scaling =_a .NewCT_Scaling ();_dbfc .Scaling .Orientation =_a .NewCT_Orientation ();_dbfc .Scaling .Orientation .ValAttr =_a .ST_OrientationMinMax ;_dbfc .Choice =&_a .EG_AxSharedChoice {};_dbfc .Choice .Crosses =_a .NewCT_Crosses ();_dbfc .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_dbfc .CrossBetween =_a .NewCT_CrossBetween ();_dbfc .CrossBetween .ValAttr =_a .ST_CrossBetweenBetween ;_fgbd :=MakeValueAxis (_dbfc );_fgbd .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_g .LightGray );_fgbd .SetMajorTickMark (_a .ST_TickMarkOut );_fgbd .SetMinorTickMark (_a .ST_TickMarkIn );_fgbd .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_fgbd .Properties ().LineProperties ().SetSolidFill (_g .Black );_fgbd .SetPosition (_a .ST_AxPosL );return _fgbd ;};

// InitializeDefaults the bar chart to its defaults
func (_bc Area3DChart )InitializeDefaults (){};

// SetIndex sets the index of the series
func (_ffd SurfaceChartSeries )SetIndex (idx uint32 ){_ffd ._fcb .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_fedf Title )X ()*_a .CT_Title {return _fedf ._gbff };type Line3DChart struct{chartBase ;_dce *_a .CT_Line3DChart ;};

// AddScatterChart adds a scatter (X/Y) chart.
func (_bgcg Chart )AddScatterChart ()ScatterChart {_egc :=_a .NewCT_PlotAreaChoice ();_bgcg ._gec .Chart .PlotArea .Choice =append (_bgcg ._gec .Chart .PlotArea .Choice ,_egc );_egc .ScatterChart =_a .NewCT_ScatterChart ();_cdb :=ScatterChart {_fce :_egc .ScatterChart };_cdb .InitializeDefaults ();return _cdb ;};func (_ffba LineChartSeries )SetSmooth (b bool ){_ffba ._fgfb .Smooth =_a .NewCT_Boolean ();_ffba ._fgfb .Smooth .ValAttr =&b ;};func (_efcb Legend )InitializeDefaults (){_efcb .SetPosition (_a .ST_LegendPosR );_efcb .SetOverlay (false );_efcb .Properties ().SetNoFill ();_efcb .Properties ().LineProperties ().SetNoFill ();};func MakeCategoryAxis (x *_a .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// SetDirection changes the direction of the bar chart (bar or column).
func (_gb Bar3DChart )SetDirection (d _a .ST_BarDir ){_gb ._fgc .BarDir .ValAttr =d };

// Order returns the order of the series
func (_cde ScatterChartSeries )Order ()uint32 {return _cde ._abgb .Order .ValAttr };func (_cage ScatterChartSeries )InitializeDefaults (){_cage .Properties ().LineProperties ().SetNoFill ();_cage .Marker ().SetSymbol (_a .ST_MarkerStyleAuto );_cage .Labels ().SetShowLegendKey (false );_cage .Labels ().SetShowValue (true );_cage .Labels ().SetShowPercent (false );_cage .Labels ().SetShowCategoryName (false );_cage .Labels ().SetShowSeriesName (false );_cage .Labels ().SetShowLeaderLines (false );};

// Values returns the value data source.
func (_bgdg RadarChartSeries )Values ()NumberDataSource {if _bgdg ._dbfca .Val ==nil {_bgdg ._dbfca .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_bgdg ._dbfca .Val );};

// Properties returns the line chart series shape properties.
func (_gbeb SurfaceChartSeries )Properties ()_fb .ShapeProperties {if _gbeb ._fcb .SpPr ==nil {_gbeb ._fcb .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_gbeb ._fcb .SpPr );};func (_cfc DataLabels )SetShowPercent (b bool ){_cfc .ensureChoice ();_cfc ._bgg .Choice .ShowPercent =_a .NewCT_Boolean ();_cfc ._bgg .Choice .ShowPercent .ValAttr =_f .Bool (b );};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_dbfca *_a .CT_RadarSer };

// Properties returns the bar chart series shape properties.
func (_gffc RadarChartSeries )Properties ()_fb .ShapeProperties {if _gffc ._dbfca .SpPr ==nil {_gffc ._dbfca .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_gffc ._dbfca .SpPr );};

// AddSeries adds a default series to a bar chart.
func (_gba Bar3DChart )AddSeries ()BarChartSeries {_fbb :=_gba .nextColor (len (_gba ._fgc .Ser ));_gc :=_a .NewCT_BarSer ();_gba ._fgc .Ser =append (_gba ._fgc .Ser ,_gc );_gc .Idx .ValAttr =uint32 (len (_gba ._fgc .Ser )-1);_gc .Order .ValAttr =uint32 (len (_gba ._fgc .Ser )-1);_fgd :=BarChartSeries {_gc };_fgd .InitializeDefaults ();_fgd .Properties ().SetSolidFill (_fbb );return _fgd ;};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_aba Chart )AddLegend ()Legend {_aba ._gec .Chart .Legend =_a .NewCT_Legend ();_aae :=MakeLegend (_aba ._gec .Chart .Legend );_aae .InitializeDefaults ();return _aae ;};

// Values returns the value data source.
func (_ggb PieChartSeries )Values ()NumberDataSource {if _ggb ._ade .Val ==nil {_ggb ._ade .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_ggb ._ade .Val );};

// X returns the inner wrapped XML type.
func (_gddd ValueAxis )X ()*_a .CT_ValAx {return _gddd ._adfg };

// X returns the inner wrapped XML type.
func (_bfb Pie3DChart )X ()*_a .CT_Pie3DChart {return _bfb ._cbef };

// AddSeries adds a default series to a Stock chart.
func (_cgd StockChart )AddSeries ()LineChartSeries {_eebe :=_a .NewCT_LineSer ();_cgd ._ffbff .Ser =append (_cgd ._ffbff .Ser ,_eebe );_eebe .Idx .ValAttr =uint32 (len (_cgd ._ffbff .Ser )-1);_eebe .Order .ValAttr =uint32 (len (_cgd ._ffbff .Ser )-1);_aab :=LineChartSeries {_eebe };_aab .Values ().CreateEmptyNumberCache ();_aab .Properties ().LineProperties ().SetNoFill ();return _aab ;};

// CategoryAxis returns the category data source.
func (_fg AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fg ._ea .Cat ==nil {_fg ._ea .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_fg ._ea .Cat );};func (_bggf DateAxis )Properties ()_fb .ShapeProperties {if _bggf ._dfc .SpPr ==nil {_bggf ._dfc .SpPr =_dg .NewCT_ShapeProperties ();};return _fb .MakeShapeProperties (_bggf ._dfc .SpPr );};func (_ggeb Title )SetText (s string ){if _ggeb ._gbff .Tx ==nil {_ggeb ._gbff .Tx =_a .NewCT_Tx ();};if _ggeb ._gbff .Tx .Choice .Rich ==nil {_ggeb ._gbff .Tx .Choice .Rich =_dg .NewCT_TextBody ();};var _adb *_dg .CT_TextParagraph ;if len (_ggeb ._gbff .Tx .Choice .Rich .P )==0{_adb =_dg .NewCT_TextParagraph ();_ggeb ._gbff .Tx .Choice .Rich .P =[]*_dg .CT_TextParagraph {_adb };}else {_adb =_ggeb ._gbff .Tx .Choice .Rich .P [0];};var _deb *_dg .EG_TextRun ;if len (_adb .EG_TextRun )==0{_deb =_dg .NewEG_TextRun ();_adb .EG_TextRun =[]*_dg .EG_TextRun {_deb };}else {_deb =_adb .EG_TextRun [0];};if _deb .R ==nil {_deb .R =_dg .NewCT_RegularTextRun ();};_deb .R .T =s ;};func (_cgg NumberDataSource )ensureChoice (){if _cgg ._ecc .Choice ==nil {_cgg ._ecc .Choice =_a .NewCT_NumDataSourceChoice ();};};

// SetOrder sets the order of the series
func (_ddc SurfaceChartSeries )SetOrder (idx uint32 ){_ddc ._fcb .Order .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_aec AreaChart )InitializeDefaults (){};

// InitializeDefaults the bar chart to its defaults
func (_abca RadarChart )InitializeDefaults (){_abca ._bfcd .RadarStyle .ValAttr =_a .ST_RadarStyleMarker };func (_bbc DateAxis )SetPosition (p _a .ST_AxPos ){_bbc ._dfc .AxPos =_a .NewCT_AxPos ();_bbc ._dfc .AxPos .ValAttr =p ;};

// AddSurfaceChart adds a new surface chart to a chart.
func (_dbad Chart )AddSurfaceChart ()SurfaceChart {_gbf :=_a .NewCT_PlotAreaChoice ();_dbad ._gec .Chart .PlotArea .Choice =append (_dbad ._gec .Chart .PlotArea .Choice ,_gbf );_gbf .SurfaceChart =_a .NewCT_SurfaceChart ();_fee (_dbad ._gec .Chart );_dbad ._gec .Chart .View3D .RotX .ValAttr =_f .Int8 (90);_dbad ._gec .Chart .View3D .RotY .ValAttr =_f .Uint16 (0);_dbad ._gec .Chart .View3D .Perspective =_a .NewCT_Perspective ();_dbad ._gec .Chart .View3D .Perspective .ValAttr =_f .Uint8 (0);_ggd :=SurfaceChart {_gfaa :_gbf .SurfaceChart };_ggd .InitializeDefaults ();return _ggd ;};type chartBase struct{};type NumberDataSource struct{_ecc *_a .CT_NumDataSource };

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// Values returns the value data source.
func (_cfa AreaChartSeries )Values ()NumberDataSource {if _cfa ._ea .Val ==nil {_cfa ._ea .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_cfa ._ea .Val );};func MakeChart (x *_a .ChartSpace )Chart {return Chart {x }};func (_ecfe SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ecfe ._fcb .Cat ==nil {_ecfe ._fcb .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_ecfe ._fcb .Cat );};var NullAxis Axis =nullAxis (0);func (_baec DateAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_baec ._dfc .MinorTickMark =nil ;}else {_baec ._dfc .MinorTickMark =_a .NewCT_TickMark ();_baec ._dfc .MinorTickMark .ValAttr =m ;};};

// AddSeries adds a default series to a Surface chart.
func (_bccc Surface3DChart )AddSeries ()SurfaceChartSeries {_ecd :=_bccc .nextColor (len (_bccc ._bcg .Ser ));_ecfb :=_a .NewCT_SurfaceSer ();_bccc ._bcg .Ser =append (_bccc ._bcg .Ser ,_ecfb );_ecfb .Idx .ValAttr =uint32 (len (_bccc ._bcg .Ser )-1);_ecfb .Order .ValAttr =uint32 (len (_bccc ._bcg .Ser )-1);_aggc :=SurfaceChartSeries {_ecfb };_aggc .InitializeDefaults ();_aggc .Properties ().LineProperties ().SetSolidFill (_ecd );return _aggc ;};

// X returns the inner wrapped XML type.
func (_dba Bar3DChart )X ()*_a .CT_Bar3DChart {return _dba ._fgc };

// X returns the inner wrapped XML type.
func (_bcbf RadarChart )X ()*_a .CT_RadarChart {return _bcbf ._bfcd };func (_fbea BubbleChart )AddAxis (axis Axis ){_fbfd :=_a .NewCT_UnsignedInt ();_fbfd .ValAttr =axis .AxisID ();_fbea ._dcd .AxId =append (_fbea ._dcd .AxId ,_fbfd );};

// AddAxis adds an axis to a Surface chart.
func (_bgfde SurfaceChart )AddAxis (axis Axis ){_agd :=_a .NewCT_UnsignedInt ();_agd .ValAttr =axis .AxisID ();_bgfde ._gfaa .AxId =append (_bgfde ._gfaa .AxId ,_agd );};