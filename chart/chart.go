//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_e "fmt";_ge "github.com/unidoc/unioffice";_fg "github.com/unidoc/unioffice/color";_ec "github.com/unidoc/unioffice/drawing";_a "github.com/unidoc/unioffice/measurement";_gdb "github.com/unidoc/unioffice/schema/soo/dml";_gd "github.com/unidoc/unioffice/schema/soo/dml/chart";_f "math/rand";);

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_ecdb CategoryAxisDataSource )SetNumberReference (s string ){_ecdb ._gf .Choice =_gd .NewCT_AxDataSourceChoice ();_ecdb ._gf .Choice .NumRef =_gd .NewCT_NumRef ();_ecdb ._gf .Choice .NumRef .F =s ;};func MakeLegend (l *_gd .CT_Legend )Legend {return Legend {l }};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_ga *_gd .CT_BubbleChart ;};

// Index returns the index of the series
func (_cefb SurfaceChartSeries )Index ()uint32 {return _cefb ._gdc .Idx .ValAttr };

// CategoryAxis returns the category data source.
func (_fgg BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fgg ._aac .Cat ==nil {_fgg ._aac .Cat =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_fgg ._aac .Cat );};

// SetText sets the series text.
func (_aabb PieChartSeries )SetText (s string ){_aabb ._cdg .Tx =_gd .NewCT_SerTx ();_aabb ._cdg .Tx .Choice .V =&s ;};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_ag *_gd .CT_Area3DChart ;};type CategoryAxis struct{_ggc *_gd .CT_CatAx };

// X returns the inner wrapped XML type.
func (_bg AreaChart )X ()*_gd .CT_AreaChart {return _bg ._db };

// X returns the inner wrapped XML type.
func (_ffffa Surface3DChart )X ()*_gd .CT_Surface3DChart {return _ffffa ._ddc };

// CategoryAxis returns the category data source.
func (_bggb PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bggb ._cdg .Cat ==nil {_bggb ._cdg .Cat =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_bggb ._cdg .Cat );};func (_eee DataLabels )SetShowCategoryName (b bool ){_eee .ensureChoice ();_eee ._bdf .Choice .ShowCatName =_gd .NewCT_Boolean ();_eee ._bdf .Choice .ShowCatName .ValAttr =_ge .Bool (b );};

// AddCategoryAxis adds a category axis.
func (_eef Chart )AddCategoryAxis ()CategoryAxis {_dafa :=_gd .NewCT_CatAx ();if _eef ._fa .Chart .PlotArea .CChoice ==nil {_eef ._fa .Chart .PlotArea .CChoice =_gd .NewCT_PlotAreaChoice1 ();};_dafa .AxId =_gd .NewCT_UnsignedInt ();_dafa .AxId .ValAttr =0x7FFFFFFF&_f .Uint32 ();_eef ._fa .Chart .PlotArea .CChoice .CatAx =append (_eef ._fa .Chart .PlotArea .CChoice .CatAx ,_dafa );_dafa .Auto =_gd .NewCT_Boolean ();_dafa .Auto .ValAttr =_ge .Bool (true );_dafa .Delete =_gd .NewCT_Boolean ();_dafa .Delete .ValAttr =_ge .Bool (false );_ba :=MakeCategoryAxis (_dafa );_ba .InitializeDefaults ();return _ba ;};func MakeValueAxis (x *_gd .CT_ValAx )ValueAxis {return ValueAxis {x }};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_fdb Chart )SetDisplayBlanksAs (v _gd .ST_DispBlanksAs ){_fdb ._fa .Chart .DispBlanksAs =_gd .NewCT_DispBlanksAs ();_fdb ._fa .Chart .DispBlanksAs .ValAttr =v ;};type Line3DChart struct{chartBase ;_ced *_gd .CT_Line3DChart ;};

// AddTitle sets a new title on the chart.
func (_ddd Chart )AddTitle ()Title {_ddd ._fa .Chart .Title =_gd .NewCT_Title ();_ddd ._fa .Chart .Title .Overlay =_gd .NewCT_Boolean ();_ddd ._fa .Chart .Title .Overlay .ValAttr =_ge .Bool (false );_ddd ._fa .Chart .AutoTitleDeleted =_gd .NewCT_Boolean ();_ddd ._fa .Chart .AutoTitleDeleted .ValAttr =_ge .Bool (false );_feag :=MakeTitle (_ddd ._fa .Chart .Title );_feag .InitializeDefaults ();return _feag ;};

// CategoryAxis returns the category data source.
func (_bf AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bf ._ad .Cat ==nil {_bf ._ad .Cat =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_bf ._ad .Cat );};func (_fbe BarChart )AddAxis (axis Axis ){_gcb :=_gd .NewCT_UnsignedInt ();_gcb .ValAttr =axis .AxisID ();_fbe ._gee .AxId =append (_fbe ._gee .AxId ,_gcb );};

// X returns the inner wrapped XML type.
func (_bgf ScatterChartSeries )X ()*_gd .CT_ScatterSer {return _bgf ._ggb };

// AddBarChart adds a new bar chart to a chart.
func (_bc Chart )AddBarChart ()BarChart {_dca :=_gd .NewCT_PlotAreaChoice ();_bc ._fa .Chart .PlotArea .Choice =append (_bc ._fa .Chart .PlotArea .Choice ,_dca );_dca .BarChart =_gd .NewCT_BarChart ();_dca .BarChart .Grouping =_gd .NewCT_BarGrouping ();_dca .BarChart .Grouping .ValAttr =_gd .ST_BarGroupingStandard ;_fag :=BarChart {_gee :_dca .BarChart };_fag .InitializeDefaults ();return _fag ;};func (_aeca GridLines )Properties ()_ec .ShapeProperties {if _aeca ._ffd .SpPr ==nil {_aeca ._ffd .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_aeca ._ffd .SpPr );};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_caf *_gd .CT_OfPieChart ;};

// X returns the inner wrapped XML type.
func (_ccba DateAxis )X ()*_gd .CT_DateAx {return _ccba ._geg };var NullAxis Axis =nullAxis (0);type Title struct{_gdde *_gd .CT_Title };func (_ecg DataLabels )SetShowValue (b bool ){_ecg .ensureChoice ();_ecg ._bdf .Choice .ShowVal =_gd .NewCT_Boolean ();_ecg ._bdf .Choice .ShowVal .ValAttr =_ge .Bool (b );};func (_cgf CategoryAxis )AxisID ()uint32 {return _cgf ._ggc .AxId .ValAttr };

// AddRadarChart adds a new radar chart to a chart.
func (_faa Chart )AddRadarChart ()RadarChart {_agdb :=_gd .NewCT_PlotAreaChoice ();_faa ._fa .Chart .PlotArea .Choice =append (_faa ._fa .Chart .PlotArea .Choice ,_agdb );_agdb .RadarChart =_gd .NewCT_RadarChart ();_daf :=RadarChart {_acd :_agdb .RadarChart };_daf .InitializeDefaults ();return _daf ;};

// RemoveTitle removes any existing title from the chart.
func (_gdaa Chart )RemoveTitle (){_gdaa ._fa .Chart .Title =nil ;_gdaa ._fa .Chart .AutoTitleDeleted =_gd .NewCT_Boolean ();_gdaa ._fa .Chart .AutoTitleDeleted .ValAttr =_ge .Bool (true );};

// InitializeDefaults the bar chart to its defaults
func (_be AreaChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_fdag StockChart )X ()*_gd .CT_StockChart {return _fdag ._ddeg };

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_gf *_gd .CT_AxDataSource };

// Properties returns the bar chart series shape properties.
func (_bab PieChartSeries )Properties ()_ec .ShapeProperties {if _bab ._cdg .SpPr ==nil {_bab ._cdg .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_bab ._cdg .SpPr );};func (_fgc CategoryAxis )InitializeDefaults (){_fgc .SetPosition (_gd .ST_AxPosB );_fgc .SetMajorTickMark (_gd .ST_TickMarkOut );_fgc .SetMinorTickMark (_gd .ST_TickMarkIn );_fgc .SetTickLabelPosition (_gd .ST_TickLblPosNextTo );_fgc .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_fg .LightGray );_fgc .Properties ().LineProperties ().SetSolidFill (_fg .Black );};

// X returns the inner wrapped XML type.
func (_ee BarChartSeries )X ()*_gd .CT_BarSer {return _ee ._aac };func (_aacb Marker )SetSize (sz uint8 ){_aacb ._ebb .Size =_gd .NewCT_MarkerSize ();_aacb ._ebb .Size .ValAttr =&sz ;};

// AddAxis adds an axis to a Surface chart.
func (_dbag SurfaceChart )AddAxis (axis Axis ){_decb :=_gd .NewCT_UnsignedInt ();_decb .ValAttr =axis .AxisID ();_dbag ._fecf .AxId =append (_dbag ._fecf .AxId ,_decb );};

// X returns the inner wrapped XML type.
func (_baf ValueAxis )X ()*_gd .CT_ValAx {return _baf ._cge };type SeriesAxis struct{_aaca *_gd .CT_SerAx };func (_cfg AreaChart )AddAxis (axis Axis ){_ega :=_gd .NewCT_UnsignedInt ();_ega .ValAttr =axis .AxisID ();_cfg ._db .AxId =append (_cfg ._db .AxId ,_ega );};

// AddPie3DChart adds a new pie chart to a chart.
func (_edb Chart )AddPie3DChart ()Pie3DChart {_gade (_edb ._fa .Chart );_fbg :=_gd .NewCT_PlotAreaChoice ();_edb ._fa .Chart .PlotArea .Choice =append (_edb ._fa .Chart .PlotArea .Choice ,_fbg );_fbg .Pie3DChart =_gd .NewCT_Pie3DChart ();_gef :=Pie3DChart {_cdaa :_fbg .Pie3DChart };_gef .InitializeDefaults ();return _gef ;};

// AddScatterChart adds a scatter (X/Y) chart.
func (_ac Chart )AddScatterChart ()ScatterChart {_ccb :=_gd .NewCT_PlotAreaChoice ();_ac ._fa .Chart .PlotArea .Choice =append (_ac ._fa .Chart .PlotArea .Choice ,_ccb );_ccb .ScatterChart =_gd .NewCT_ScatterChart ();_fgd :=ScatterChart {_abb :_ccb .ScatterChart };_fgd .InitializeDefaults ();return _fgd ;};func MakeTitle (x *_gd .CT_Title )Title {return Title {x }};

// Marker returns the marker properties.
func (_dbae LineChartSeries )Marker ()Marker {if _dbae ._dab .Marker ==nil {_dbae ._dab .Marker =_gd .NewCT_Marker ();};return MakeMarker (_dbae ._dab .Marker );};

// InitializeDefaults the bar chart to its defaults
func (_gga PieOfPieChart )InitializeDefaults (){_gga ._caf .VaryColors =_gd .NewCT_Boolean ();_gga ._caf .VaryColors .ValAttr =_ge .Bool (true );_gga .SetType (_gd .ST_OfPieTypePie );_gga ._caf .SecondPieSize =_gd .NewCT_SecondPieSize ();_gga ._caf .SecondPieSize .ValAttr =&_gd .ST_SecondPieSize {};_gga ._caf .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_ge .Uint16 (75);_ddf :=_gd .NewCT_ChartLines ();_ddf .SpPr =_gdb .NewCT_ShapeProperties ();_gab :=_ec .MakeShapeProperties (_ddf .SpPr );_gab .LineProperties ().SetSolidFill (_fg .Auto );_gga ._caf .SerLines =append (_gga ._caf .SerLines ,_ddf );};

// Order returns the order of the series
func (_eed ScatterChartSeries )Order ()uint32 {return _eed ._ggb .Order .ValAttr };func (_beg Title )InitializeDefaults (){_beg .SetText ("\u0054\u0069\u0074l\u0065");_beg .RunProperties ().SetSize (16*_a .Point );_beg .RunProperties ().SetSolidFill (_fg .Black );_beg .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_beg .RunProperties ().SetBold (false );};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_ad *_gd .CT_AreaSer };func (_bbd ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bbd ._ggb .XVal ==nil {_bbd ._ggb .XVal =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_bbd ._ggb .XVal );};type NumberDataSource struct{_ege *_gd .CT_NumDataSource };func (_ead DataLabels )ensureChoice (){if _ead ._bdf .Choice ==nil {_ead ._bdf .Choice =_gd .NewCT_DLblsChoice ();};};

// InitializeDefaults the bar chart to its defaults
func (_eac Bar3DChart )InitializeDefaults (){_eac .SetDirection (_gd .ST_BarDirCol )};func (_fbb DataLabels )SetShowSeriesName (b bool ){_fbb .ensureChoice ();_fbb ._bdf .Choice .ShowSerName =_gd .NewCT_Boolean ();_fbb ._bdf .Choice .ShowSerName .ValAttr =_ge .Bool (b );};type ValueAxis struct{_cge *_gd .CT_ValAx };

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_gd .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// AddSeries adds a default series to an area chart.
func (_eg Area3DChart )AddSeries ()AreaChartSeries {_gb :=_eg .nextColor (len (_eg ._ag .Ser ));_c :=_gd .NewCT_AreaSer ();_eg ._ag .Ser =append (_eg ._ag .Ser ,_c );_c .Idx .ValAttr =uint32 (len (_eg ._ag .Ser )-1);_c .Order .ValAttr =uint32 (len (_eg ._ag .Ser )-1);_gc :=AreaChartSeries {_c };_gc .InitializeDefaults ();_gc .Properties ().SetSolidFill (_gb );return _gc ;};

// AddPieChart adds a new pie chart to a chart.
func (_gfg Chart )AddPieChart ()PieChart {_gcg :=_gd .NewCT_PlotAreaChoice ();_gfg ._fa .Chart .PlotArea .Choice =append (_gfg ._fa .Chart .PlotArea .Choice ,_gcg );_gcg .PieChart =_gd .NewCT_PieChart ();_dde :=PieChart {_abgc :_gcg .PieChart };_dde .InitializeDefaults ();return _dde ;};

// AddSeries adds a default series to a line chart.
func (_gdbg LineChart )AddSeries ()LineChartSeries {_aaee :=_gdbg .nextColor (len (_gdbg ._afb .Ser ));_ecgd :=_gd .NewCT_LineSer ();_gdbg ._afb .Ser =append (_gdbg ._afb .Ser ,_ecgd );_ecgd .Idx .ValAttr =uint32 (len (_gdbg ._afb .Ser )-1);_ecgd .Order .ValAttr =uint32 (len (_gdbg ._afb .Ser )-1);_gea :=LineChartSeries {_ecgd };_gea .InitializeDefaults ();_gea .Properties ().LineProperties ().SetSolidFill (_aaee );return _gea ;};func (_fed chartBase )nextColor (_bbc int )_fg .Color {return _aef [_bbc %len (_aef )]};

// AddAxis adds an axis to a Surface chart.
func (_aagf Surface3DChart )AddAxis (axis Axis ){_gge :=_gd .NewCT_UnsignedInt ();_gge .ValAttr =axis .AxisID ();_aagf ._ddc .AxId =append (_aagf ._ddc .AxId ,_gge );};

// X returns the inner wrapped XML type.
func (_eae BubbleChartSeries )X ()*_gd .CT_BubbleSer {return _eae ._cef };

// X returns the inner wrapped XML type.
func (_bcce PieChart )X ()*_gd .CT_PieChart {return _bcce ._abgc };

// AddSeries adds a default series to an Doughnut chart.
func (_gacf DoughnutChart )AddSeries ()PieChartSeries {_dec :=_gd .NewCT_PieSer ();_gacf ._dba .Ser =append (_gacf ._dba .Ser ,_dec );_dec .Idx .ValAttr =uint32 (len (_gacf ._dba .Ser )-1);_dec .Order .ValAttr =uint32 (len (_gacf ._dba .Ser )-1);_bfe :=PieChartSeries {_dec };_bfe .InitializeDefaults ();return _bfe ;};

// X returns the inner wrapped XML type.
func (_abg Bar3DChart )X ()*_gd .CT_Bar3DChart {return _abg ._cg };

// AddAxis adds an axis to a Scatter chart.
func (_dfff ScatterChart )AddAxis (axis Axis ){_aabd :=_gd .NewCT_UnsignedInt ();_aabd .ValAttr =axis .AxisID ();_dfff ._abb .AxId =append (_dfff ._abb .AxId ,_aabd );};

// SetText sets the series text.
func (_eea BubbleChartSeries )SetText (s string ){_eea ._cef .Tx =_gd .NewCT_SerTx ();_eea ._cef .Tx .Choice .V =&s ;};

// SetText sets the series text
func (_ebbf ScatterChartSeries )SetText (s string ){_ebbf ._ggb .Tx =_gd .NewCT_SerTx ();_ebbf ._ggb .Tx .Choice .V =&s ;};

// RemoveLegend removes the legend if the chart has one.
func (_bed Chart )RemoveLegend (){_bed ._fa .Chart .Legend =nil };

// SetText sets the series text.
func (_fgb AreaChartSeries )SetText (s string ){_fgb ._ad .Tx =_gd .NewCT_SerTx ();_fgb ._ad .Tx .Choice .V =&s ;};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_ebf Chart )AddLegend ()Legend {_ebf ._fa .Chart .Legend =_gd .NewCT_Legend ();_eba :=MakeLegend (_ebf ._fa .Chart .Legend );_eba .InitializeDefaults ();return _eba ;};func (_ecga DateAxis )SetPosition (p _gd .ST_AxPos ){_ecga ._geg .AxPos =_gd .NewCT_AxPos ();_ecga ._geg .AxPos .ValAttr =p ;};

// Properties returns the Bubble chart series shape properties.
func (_efg BubbleChartSeries )Properties ()_ec .ShapeProperties {if _efg ._cef .SpPr ==nil {_efg ._cef .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_efg ._cef .SpPr );};

// SetValues sets values directly on a source.
func (_bfdf NumberDataSource )SetValues (v []float64 ){_bfdf .ensureChoice ();_bfdf ._ege .Choice .NumRef =nil ;_bfdf ._ege .Choice .NumLit =_gd .NewCT_NumData ();_bfdf ._ege .Choice .NumLit .PtCount =_gd .NewCT_UnsignedInt ();_bfdf ._ege .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _cfab ,_dac :=range v {_bfdf ._ege .Choice .NumLit .Pt =append (_bfdf ._ege .Choice .NumLit .Pt ,&_gd .CT_NumVal {IdxAttr :uint32 (_cfab ),V :_e .Sprintf ("\u0025\u0067",_dac )});};};

// X returns the inner wrapped XML type.
func (_bbcg DoughnutChart )X ()*_gd .CT_DoughnutChart {return _bbcg ._dba };

// InitializeDefaults the bar chart to its defaults
func (_cc BarChart )InitializeDefaults (){_cc .SetDirection (_gd .ST_BarDirCol )};type DateAxis struct{_geg *_gd .CT_DateAx };

// SetText sets the series text
func (_gfa LineChartSeries )SetText (s string ){_gfa ._dab .Tx =_gd .NewCT_SerTx ();_gfa ._dab .Tx .Choice .V =&s ;};

// Values returns the value data source.
func (_bde PieChartSeries )Values ()NumberDataSource {if _bde ._cdg .Val ==nil {_bde ._cdg .Val =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_bde ._cdg .Val );};type nullAxis byte ;func MakeMarker (x *_gd .CT_Marker )Marker {return Marker {x }};func (_adfa Marker )SetSymbol (s _gd .ST_MarkerStyle ){if s ==_gd .ST_MarkerStyleUnset {_adfa ._ebb .Symbol =nil ;}else {_adfa ._ebb .Symbol =_gd .NewCT_MarkerStyle ();_adfa ._ebb .Symbol .ValAttr =s ;};};

// InitializeDefaults initializes an Radar series to the default values.
func (_gdbgf RadarChartSeries )InitializeDefaults (){};

// Values returns the bubble size data source.
func (_gda BubbleChartSeries )BubbleSizes ()NumberDataSource {if _gda ._cef .BubbleSize ==nil {_gda ._cef .BubbleSize =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_gda ._cef .BubbleSize );};

// X returns the inner wrapped XML type.
func (_gbc BarChart )X ()*_gd .CT_BarChart {return _gbc ._gee };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_dba *_gd .CT_DoughnutChart ;};

// InitializeDefaults the bar chart to its defaults
func (_ggd Pie3DChart )InitializeDefaults (){_ggd ._cdaa .VaryColors =_gd .NewCT_Boolean ();_ggd ._cdaa .VaryColors .ValAttr =_ge .Bool (true );};func (_bea DateAxis )MajorGridLines ()GridLines {if _bea ._geg .MajorGridlines ==nil {_bea ._geg .MajorGridlines =_gd .NewCT_ChartLines ();};return GridLines {_bea ._geg .MajorGridlines };};type chartBase struct{};func (_eaef ValueAxis )SetPosition (p _gd .ST_AxPos ){_eaef ._cge .AxPos =_gd .NewCT_AxPos ();_eaef ._cge .AxPos .ValAttr =p ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_cdaa *_gd .CT_Pie3DChart ;};

// Index returns the index of the series
func (_ddb ScatterChartSeries )Index ()uint32 {return _ddb ._ggb .Idx .ValAttr };

// InitializeDefaults the Stock chart to its defaults
func (_cec StockChart )InitializeDefaults (){_cec ._ddeg .HiLowLines =_gd .NewCT_ChartLines ();_cec ._ddeg .UpDownBars =_gd .NewCT_UpDownBars ();_cec ._ddeg .UpDownBars .GapWidth =_gd .NewCT_GapAmount ();_cec ._ddeg .UpDownBars .GapWidth .ValAttr =&_gd .ST_GapAmount {};_cec ._ddeg .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_ge .Uint16 (150);_cec ._ddeg .UpDownBars .UpBars =_gd .NewCT_UpDownBar ();_cec ._ddeg .UpDownBars .DownBars =_gd .NewCT_UpDownBar ();};func (_cga ValueAxis )SetTickLabelPosition (p _gd .ST_TickLblPos ){if p ==_gd .ST_TickLblPosUnset {_cga ._cge .TickLblPos =nil ;}else {_cga ._cge .TickLblPos =_gd .NewCT_TickLblPos ();_cga ._cge .TickLblPos .ValAttr =p ;};};

// Properties returns the bar chart series shape properties.
func (_cfa BarChartSeries )Properties ()_ec .ShapeProperties {if _cfa ._aac .SpPr ==nil {_cfa ._aac .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_cfa ._aac .SpPr );};type LineChart struct{chartBase ;_afb *_gd .CT_LineChart ;};

// SetText sets the series text.
func (_efdd RadarChartSeries )SetText (s string ){_efdd ._beb .Tx =_gd .NewCT_SerTx ();_efdd ._beb .Tx .Choice .V =&s ;};type DataLabels struct{_bdf *_gd .CT_DLbls };

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_aac *_gd .CT_BarSer };

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_cef *_gd .CT_BubbleSer };func (_cad StockChart )AddAxis (axis Axis ){_bgfe :=_gd .NewCT_UnsignedInt ();_bgfe .ValAttr =axis .AxisID ();_cad ._ddeg .AxId =append (_cad ._ddeg .AxId ,_bgfe );};

// SetIndex sets the index of the series
func (_beaa ScatterChartSeries )SetIndex (idx uint32 ){_beaa ._ggb .Idx .ValAttr =idx };

// Properties returns the line chart series shape properties.
func (_bgca SurfaceChartSeries )Properties ()_ec .ShapeProperties {if _bgca ._gdc .SpPr ==nil {_bgca ._gdc .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_bgca ._gdc .SpPr );};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_cfc NumberDataSource )CreateEmptyNumberCache (){_cfc .ensureChoice ();if _cfc ._ege .Choice .NumRef ==nil {_cfc ._ege .Choice .NumRef =_gd .NewCT_NumRef ();};_cfc ._ege .Choice .NumLit =nil ;_cfc ._ege .Choice .NumRef .NumCache =_gd .NewCT_NumData ();_cfc ._ege .Choice .NumRef .NumCache .PtCount =_gd .NewCT_UnsignedInt ();_cfc ._ege .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// X returns the inner wrapped XML type.
func (_dad PieChartSeries )X ()*_gd .CT_PieSer {return _dad ._cdg };

// Marker returns the marker properties.
func (_bfa ScatterChartSeries )Marker ()Marker {if _bfa ._ggb .Marker ==nil {_bfa ._ggb .Marker =_gd .NewCT_Marker ();};return MakeMarker (_bfa ._ggb .Marker );};func (_gdae DataLabels )SetShowPercent (b bool ){_gdae .ensureChoice ();_gdae ._bdf .Choice .ShowPercent =_gd .NewCT_Boolean ();_gdae ._bdf .Choice .ShowPercent .ValAttr =_ge .Bool (b );};func (_ef BubbleChart )AddAxis (axis Axis ){_aee :=_gd .NewCT_UnsignedInt ();_aee .ValAttr =axis .AxisID ();_ef ._ga .AxId =append (_ef ._ga .AxId ,_aee );};func (_fab SurfaceChartSeries )InitializeDefaults (){_fab .Properties ().LineProperties ().SetWidth (1*_a .Point );_fab .Properties ().LineProperties ().SetSolidFill (_fg .Black );_fab .Properties ().LineProperties ().SetJoin (_ec .LineJoinRound );};var _aef =[]_fg .Color {_fg .RGB (0x33,0x66,0xcc),_fg .RGB (0xDC,0x39,0x12),_fg .RGB (0xFF,0x99,0x00),_fg .RGB (0x10,0x96,0x18),_fg .RGB (0x99,0x00,0x99),_fg .RGB (0x3B,0x3E,0xAC),_fg .RGB (0x00,0x99,0xC6),_fg .RGB (0xDD,0x44,0x77),_fg .RGB (0x66,0xAA,0x00),_fg .RGB (0xB8,0x2E,0x2E),_fg .RGB (0x31,0x63,0x95),_fg .RGB (0x99,0x44,0x99),_fg .RGB (0x22,0xAA,0x99),_fg .RGB (0xAA,0xAA,0x11),_fg .RGB (0x66,0x33,0xCC),_fg .RGB (0xE6,0x73,0x00),_fg .RGB (0x8B,0x07,0x07),_fg .RGB (0x32,0x92,0x62),_fg .RGB (0x55,0x74,0xA6),_fg .RGB (0x3B,0x3E,0xAC)};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_dab *_gd .CT_LineSer };

// InitializeDefaults the Bubble chart to its defaults
func (_ed BubbleChart )InitializeDefaults (){};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_fbea CategoryAxisDataSource )SetLabelReference (s string ){_fbea ._gf .Choice =_gd .NewCT_AxDataSourceChoice ();_fbea ._gf .Choice .StrRef =_gd .NewCT_StrRef ();_fbea ._gf .Choice .StrRef .F =s ;};

// X returns the inner wrapped XML type.
func (_cfgd Marker )X ()*_gd .CT_Marker {return _cfgd ._ebb };

// X returns the inner wrapped XML type.
func (_gba RadarChart )X ()*_gd .CT_RadarChart {return _gba ._acd };func (_ece SurfaceChart )InitializeDefaults (){_ece ._fecf .Wireframe =_gd .NewCT_Boolean ();_ece ._fecf .Wireframe .ValAttr =_ge .Bool (false );_ece ._fecf .BandFmts =_gd .NewCT_BandFmts ();for _fcf :=0;_fcf < 15;_fcf ++{_aefe :=_gd .NewCT_BandFmt ();_aefe .Idx .ValAttr =uint32 (_fcf );_aefe .SpPr =_gdb .NewCT_ShapeProperties ();_bfda :=_ec .MakeShapeProperties (_aefe .SpPr );_bfda .SetSolidFill (_ece .nextColor (_fcf ));_ece ._fecf .BandFmts .BandFmt =append (_ece ._fecf .BandFmts .BandFmt ,_aefe );};};

// SetValues is used to set the source data to a set of values.
func (_bff CategoryAxisDataSource )SetValues (v []string ){_bff ._gf .Choice =_gd .NewCT_AxDataSourceChoice ();_bff ._gf .Choice .StrLit =_gd .NewCT_StrData ();_bff ._gf .Choice .StrLit .PtCount =_gd .NewCT_UnsignedInt ();_bff ._gf .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _de ,_aae :=range v {_bff ._gf .Choice .StrLit .Pt =append (_bff ._gf .Choice .StrLit .Pt ,&_gd .CT_StrVal {IdxAttr :uint32 (_de ),V :_aae });};};

// SetType sets the type the secone pie to either pie or bar
func (_ebae PieOfPieChart )SetType (t _gd .ST_OfPieType ){_ebae ._caf .OfPieType .ValAttr =t };func MakeDataLabels (x *_gd .CT_DLbls )DataLabels {return DataLabels {x }};func (_dcbg ScatterChartSeries )InitializeDefaults (){_dcbg .Properties ().LineProperties ().SetNoFill ();_dcbg .Marker ().SetSymbol (_gd .ST_MarkerStyleAuto );_dcbg .Labels ().SetShowLegendKey (false );_dcbg .Labels ().SetShowValue (true );_dcbg .Labels ().SetShowPercent (false );_dcbg .Labels ().SetShowCategoryName (false );_dcbg .Labels ().SetShowSeriesName (false );_dcbg .Labels ().SetShowLeaderLines (false );};type GridLines struct{_ffd *_gd .CT_ChartLines };

// AddAxis adds an axis to a line chart.
func (_aag LineChart )AddAxis (axis Axis ){_ccbd :=_gd .NewCT_UnsignedInt ();_ccbd .ValAttr =axis .AxisID ();_aag ._afb .AxId =append (_aag ._afb .AxId ,_ccbd );};func (_abbg Surface3DChart )InitializeDefaults (){_abbg ._ddc .Wireframe =_gd .NewCT_Boolean ();_abbg ._ddc .Wireframe .ValAttr =_ge .Bool (false );_abbg ._ddc .BandFmts =_gd .NewCT_BandFmts ();for _gfb :=0;_gfb < 15;_gfb ++{_dbb :=_gd .NewCT_BandFmt ();_dbb .Idx .ValAttr =uint32 (_gfb );_dbb .SpPr =_gdb .NewCT_ShapeProperties ();_cdga :=_ec .MakeShapeProperties (_dbb .SpPr );_cdga .SetSolidFill (_abbg .nextColor (_gfb ));_abbg ._ddc .BandFmts .BandFmt =append (_abbg ._ddc .BandFmts .BandFmt ,_dbb );};};

// AddSeries adds a default series to an Pie chart.
func (_bge PieOfPieChart )AddSeries ()PieChartSeries {_bdc :=_gd .NewCT_PieSer ();_bge ._caf .Ser =append (_bge ._caf .Ser ,_bdc );_bdc .Idx .ValAttr =uint32 (len (_bge ._caf .Ser )-1);_bdc .Order .ValAttr =uint32 (len (_bge ._caf .Ser )-1);_dea :=PieChartSeries {_bdc };_dea .InitializeDefaults ();return _dea ;};

// AddSeries adds a default series to a bar chart.
func (_egb BarChart )AddSeries ()BarChartSeries {_ca :=_egb .nextColor (len (_egb ._gee .Ser ));_df :=_gd .NewCT_BarSer ();_egb ._gee .Ser =append (_egb ._gee .Ser ,_df );_df .Idx .ValAttr =uint32 (len (_egb ._gee .Ser )-1);_df .Order .ValAttr =uint32 (len (_egb ._gee .Ser )-1);_cd :=BarChartSeries {_df };_cd .InitializeDefaults ();_cd .Properties ().SetSolidFill (_ca );return _cd ;};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_ddeg *_gd .CT_StockChart ;};

// SetIndex sets the index of the series
func (_fced LineChartSeries )SetIndex (idx uint32 ){_fced ._dab .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_gdg LineChart )X ()*_gd .CT_LineChart {return _gdg ._afb };

// AddLine3DChart adds a new 3D line chart to a chart.
func (_efa Chart )AddLine3DChart ()Line3DChart {_gade (_efa ._fa .Chart );_ded :=_gd .NewCT_PlotAreaChoice ();_efa ._fa .Chart .PlotArea .Choice =append (_efa ._fa .Chart .PlotArea .Choice ,_ded );_ded .Line3DChart =_gd .NewCT_Line3DChart ();_ded .Line3DChart .Grouping =_gd .NewCT_Grouping ();_ded .Line3DChart .Grouping .ValAttr =_gd .ST_GroupingStandard ;return Line3DChart {_ced :_ded .Line3DChart };};

// AddSeries adds a default series to a Surface chart.
func (_ebe SurfaceChart )AddSeries ()SurfaceChartSeries {_edc :=_ebe .nextColor (len (_ebe ._fecf .Ser ));_cdcd :=_gd .NewCT_SurfaceSer ();_ebe ._fecf .Ser =append (_ebe ._fecf .Ser ,_cdcd );_cdcd .Idx .ValAttr =uint32 (len (_ebe ._fecf .Ser )-1);_cdcd .Order .ValAttr =uint32 (len (_ebe ._fecf .Ser )-1);_bdg :=SurfaceChartSeries {_cdcd };_bdg .InitializeDefaults ();_bdg .Properties ().LineProperties ().SetSolidFill (_edc );return _bdg ;};

// X returns the inner wrapped XML type.
func (_dfb RadarChartSeries )X ()*_gd .CT_RadarSer {return _dfb ._beb };

// Index returns the index of the series
func (_edef LineChartSeries )Index ()uint32 {return _edef ._dab .Idx .ValAttr };

// SetText sets the series text
func (_cefe SurfaceChartSeries )SetText (s string ){_cefe ._gdc .Tx =_gd .NewCT_SerTx ();_cefe ._gdc .Tx .Choice .V =&s ;};

// AddSeries adds a default series to a line chart.
func (_egc Line3DChart )AddSeries ()LineChartSeries {_bdd :=_egc .nextColor (len (_egc ._ced .Ser ));_bbb :=_gd .NewCT_LineSer ();_egc ._ced .Ser =append (_egc ._ced .Ser ,_bbb );_bbb .Idx .ValAttr =uint32 (len (_egc ._ced .Ser )-1);_bbb .Order .ValAttr =uint32 (len (_egc ._ced .Ser )-1);_fce :=LineChartSeries {_bbb };_fce .InitializeDefaults ();_fce .Properties ().LineProperties ().SetSolidFill (_bdd );_fce .Properties ().SetSolidFill (_bdd );return _fce ;};func (_gggc ValueAxis )Properties ()_ec .ShapeProperties {if _gggc ._cge .SpPr ==nil {_gggc ._cge .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_gggc ._cge .SpPr );};func (_daa SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _daa ._gdc .Cat ==nil {_daa ._gdc .Cat =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_daa ._gdc .Cat );};func _gade (_cefd *_gd .CT_Chart ){_cefd .View3D =_gd .NewCT_View3D ();_cefd .View3D .RotX =_gd .NewCT_RotX ();_cefd .View3D .RotX .ValAttr =_ge .Int8 (15);_cefd .View3D .RotY =_gd .NewCT_RotY ();_cefd .View3D .RotY .ValAttr =_ge .Uint16 (20);_cefd .View3D .RAngAx =_gd .NewCT_Boolean ();_cefd .View3D .RAngAx .ValAttr =_ge .Bool (false );_cefd .Floor =_gd .NewCT_Surface ();_cefd .Floor .Thickness =_gd .NewCT_Thickness ();_cefd .Floor .Thickness .ValAttr .Uint32 =_ge .Uint32 (0);_cefd .SideWall =_gd .NewCT_Surface ();_cefd .SideWall .Thickness =_gd .NewCT_Thickness ();_cefd .SideWall .Thickness .ValAttr .Uint32 =_ge .Uint32 (0);_cefd .BackWall =_gd .NewCT_Surface ();_cefd .BackWall .Thickness =_gd .NewCT_Thickness ();_cefd .BackWall .Thickness .ValAttr .Uint32 =_ge .Uint32 (0);};

// X returns the inner wrapped XML type.
func (_gad BubbleChart )X ()*_gd .CT_BubbleChart {return _gad ._ga };

// InitializeDefaults initializes an Pie series to the default values.
func (_dfd PieChartSeries )InitializeDefaults (){};

// SetDirection changes the direction of the bar chart (bar or column).
func (_fb BarChart )SetDirection (d _gd .ST_BarDir ){_fb ._gee .BarDir .ValAttr =d };

// AddDateAxis adds a value axis to the chart.
func (_acc Chart )AddDateAxis ()DateAxis {_fea :=_gd .NewCT_DateAx ();if _acc ._fa .Chart .PlotArea .CChoice ==nil {_acc ._fa .Chart .PlotArea .CChoice =_gd .NewCT_PlotAreaChoice1 ();};_fea .AxId =_gd .NewCT_UnsignedInt ();_fea .AxId .ValAttr =0x7FFFFFFF&_f .Uint32 ();_acc ._fa .Chart .PlotArea .CChoice .DateAx =append (_acc ._fa .Chart .PlotArea .CChoice .DateAx ,_fea );_fea .Delete =_gd .NewCT_Boolean ();_fea .Delete .ValAttr =_ge .Bool (false );_fea .Scaling =_gd .NewCT_Scaling ();_fea .Scaling .Orientation =_gd .NewCT_Orientation ();_fea .Scaling .Orientation .ValAttr =_gd .ST_OrientationMinMax ;_fea .Choice =&_gd .EG_AxSharedChoice {};_fea .Choice .Crosses =_gd .NewCT_Crosses ();_fea .Choice .Crosses .ValAttr =_gd .ST_CrossesAutoZero ;_baa :=DateAxis {_fea };_baa .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_fg .LightGray );_baa .SetMajorTickMark (_gd .ST_TickMarkOut );_baa .SetMinorTickMark (_gd .ST_TickMarkIn );_baa .SetTickLabelPosition (_gd .ST_TickLblPosNextTo );_baa .Properties ().LineProperties ().SetSolidFill (_fg .Black );_baa .SetPosition (_gd .ST_AxPosL );return _baa ;};type Legend struct{_gcd *_gd .CT_Legend };

// Labels returns the data label properties.
func (_aaga LineChartSeries )Labels ()DataLabels {if _aaga ._dab .DLbls ==nil {_aaga ._dab .DLbls =_gd .NewCT_DLbls ();};return MakeDataLabels (_aaga ._dab .DLbls );};

// AddSeries adds a default series to a Stock chart.
func (_efc StockChart )AddSeries ()LineChartSeries {_geeag :=_gd .NewCT_LineSer ();_efc ._ddeg .Ser =append (_efc ._ddeg .Ser ,_geeag );_geeag .Idx .ValAttr =uint32 (len (_efc ._ddeg .Ser )-1);_geeag .Order .ValAttr =uint32 (len (_efc ._ddeg .Ser )-1);_add :=LineChartSeries {_geeag };_add .Values ().CreateEmptyNumberCache ();_add .Properties ().LineProperties ().SetNoFill ();return _add ;};

// SetOrder sets the order of the series
func (_ebd LineChartSeries )SetOrder (idx uint32 ){_ebd ._dab .Order .ValAttr =idx };

// Labels returns the data label properties.
func (_gaf ScatterChartSeries )Labels ()DataLabels {if _gaf ._ggb .DLbls ==nil {_gaf ._ggb .DLbls =_gd .NewCT_DLbls ();};return MakeDataLabels (_gaf ._ggb .DLbls );};

// AddSeries adds a default series to a bar chart.
func (_agg Bar3DChart )AddSeries ()BarChartSeries {_dbg :=_agg .nextColor (len (_agg ._cg .Ser ));_bec :=_gd .NewCT_BarSer ();_agg ._cg .Ser =append (_agg ._cg .Ser ,_bec );_bec .Idx .ValAttr =uint32 (len (_agg ._cg .Ser )-1);_bec .Order .ValAttr =uint32 (len (_agg ._cg .Ser )-1);_aab :=BarChartSeries {_bec };_aab .InitializeDefaults ();_aab .Properties ().SetSolidFill (_dbg );return _aab ;};func (_gacc LineChartSeries )SetSmooth (b bool ){_gacc ._dab .Smooth =_gd .NewCT_Boolean ();_gacc ._dab .Smooth .ValAttr =&b ;};func (_bba ScatterChartSeries )Values ()NumberDataSource {if _bba ._ggb .YVal ==nil {_bba ._ggb .YVal =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_bba ._ggb .YVal );};

// AddLineChart adds a new line chart to a chart.
func (_dg Chart )AddLineChart ()LineChart {_ffff :=_gd .NewCT_PlotAreaChoice ();_dg ._fa .Chart .PlotArea .Choice =append (_dg ._fa .Chart .PlotArea .Choice ,_ffff );_ffff .LineChart =_gd .NewCT_LineChart ();_ffff .LineChart .Grouping =_gd .NewCT_Grouping ();_ffff .LineChart .Grouping .ValAttr =_gd .ST_GroupingStandard ;return LineChart {_afb :_ffff .LineChart };};func (_fgdc Title )ParagraphProperties ()_ec .ParagraphProperties {if _fgdc ._gdde .Tx ==nil {_fgdc .SetText ("");};if _fgdc ._gdde .Tx .Choice .Rich .P [0].PPr ==nil {_fgdc ._gdde .Tx .Choice .Rich .P [0].PPr =_gdb .NewCT_TextParagraphProperties ();};return _ec .MakeParagraphProperties (_fgdc ._gdde .Tx .Choice .Rich .P [0].PPr );};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_cdg *_gd .CT_PieSer };

// SetOrder sets the order of the series
func (_fda ScatterChartSeries )SetOrder (idx uint32 ){_fda ._ggb .Order .ValAttr =idx };

// AddSeries adds a default series to a Bubble chart.
func (_bgg BubbleChart )AddSeries ()BubbleChartSeries {_ecb :=_bgg .nextColor (len (_bgg ._ga .Ser ));_cfad :=_gd .NewCT_BubbleSer ();_bgg ._ga .Ser =append (_bgg ._ga .Ser ,_cfad );_cfad .Idx .ValAttr =uint32 (len (_bgg ._ga .Ser )-1);_cfad .Order .ValAttr =uint32 (len (_bgg ._ga .Ser )-1);_afd :=BubbleChartSeries {_cfad };_afd .InitializeDefaults ();_afd .Properties ().SetSolidFill (_ecb );return _afd ;};

// Values returns the value data source.
func (_fff AreaChartSeries )Values ()NumberDataSource {if _fff ._ad .Val ==nil {_fff ._ad .Val =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_fff ._ad .Val );};func (_dcbb Legend )InitializeDefaults (){_dcbb .SetPosition (_gd .ST_LegendPosR );_dcbb .SetOverlay (false );_dcbb .Properties ().SetNoFill ();_dcbb .Properties ().LineProperties ().SetNoFill ();};

// AddSeries adds a default series to an Radar chart.
func (_efd RadarChart )AddSeries ()RadarChartSeries {_efb :=_efd .nextColor (len (_efd ._acd .Ser ));_fgcb :=_gd .NewCT_RadarSer ();_efd ._acd .Ser =append (_efd ._acd .Ser ,_fgcb );_fgcb .Idx .ValAttr =uint32 (len (_efd ._acd .Ser )-1);_fgcb .Order .ValAttr =uint32 (len (_efd ._acd .Ser )-1);_fbgg :=RadarChartSeries {_fgcb };_fbgg .InitializeDefaults ();_fbgg .Properties ().SetSolidFill (_efb );return _fbgg ;};func (_gege LineChartSeries )InitializeDefaults (){_gege .Properties ().LineProperties ().SetWidth (1*_a .Point );_gege .Properties ().LineProperties ().SetSolidFill (_fg .Black );_gege .Properties ().LineProperties ().SetJoin (_ec .LineJoinRound );_gege .Marker ().SetSymbol (_gd .ST_MarkerStyleNone );_gege .Labels ().SetShowLegendKey (false );_gege .Labels ().SetShowValue (false );_gege .Labels ().SetShowPercent (false );_gege .Labels ().SetShowCategoryName (false );_gege .Labels ().SetShowSeriesName (false );_gege .Labels ().SetShowLeaderLines (false );};func (_baad Chart )AddSeriesAxis ()SeriesAxis {_abf :=_gd .NewCT_SerAx ();if _baad ._fa .Chart .PlotArea .CChoice ==nil {_baad ._fa .Chart .PlotArea .CChoice =_gd .NewCT_PlotAreaChoice1 ();};_abf .AxId =_gd .NewCT_UnsignedInt ();_abf .AxId .ValAttr =0x7FFFFFFF&_f .Uint32 ();_baad ._fa .Chart .PlotArea .CChoice .SerAx =append (_baad ._fa .Chart .PlotArea .CChoice .SerAx ,_abf );_abf .Delete =_gd .NewCT_Boolean ();_abf .Delete .ValAttr =_ge .Bool (false );_abd :=MakeSeriesAxis (_abf );_abd .InitializeDefaults ();return _abd ;};func (_ede DateAxis )SetMajorTickMark (m _gd .ST_TickMark ){if m ==_gd .ST_TickMarkUnset {_ede ._geg .MajorTickMark =nil ;}else {_ede ._geg .MajorTickMark =_gd .NewCT_TickMark ();_ede ._geg .MajorTickMark .ValAttr =m ;};};func (_eaa Legend )Properties ()_ec .ShapeProperties {if _eaa ._gcd .SpPr ==nil {_eaa ._gcd .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_eaa ._gcd .SpPr );};func (_ccaa Title )SetText (s string ){if _ccaa ._gdde .Tx ==nil {_ccaa ._gdde .Tx =_gd .NewCT_Tx ();};if _ccaa ._gdde .Tx .Choice .Rich ==nil {_ccaa ._gdde .Tx .Choice .Rich =_gdb .NewCT_TextBody ();};var _edgd *_gdb .CT_TextParagraph ;if len (_ccaa ._gdde .Tx .Choice .Rich .P )==0{_edgd =_gdb .NewCT_TextParagraph ();_ccaa ._gdde .Tx .Choice .Rich .P =[]*_gdb .CT_TextParagraph {_edgd };}else {_edgd =_ccaa ._gdde .Tx .Choice .Rich .P [0];};var _adfag *_gdb .EG_TextRun ;if len (_edgd .EG_TextRun )==0{_adfag =_gdb .NewEG_TextRun ();_edgd .EG_TextRun =[]*_gdb .EG_TextRun {_adfag };}else {_adfag =_edgd .EG_TextRun [0];};if _adfag .R ==nil {_adfag .R =_gdb .NewCT_RegularTextRun ();};_adfag .R .T =s ;};func (_dee NumberDataSource )SetReference (s string ){_dee .ensureChoice ();if _dee ._ege .Choice .NumRef ==nil {_dee ._ege .Choice .NumRef =_gd .NewCT_NumRef ();};_dee ._ege .Choice .NumRef .F =s ;};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_beb *_gd .CT_RadarSer };type SurfaceChartSeries struct{_gdc *_gd .CT_SurfaceSer };

// AddSeries adds a default series to a Scatter chart.
func (_bbg ScatterChart )AddSeries ()ScatterChartSeries {_cea :=_bbg .nextColor (len (_bbg ._abb .Ser ));_ggdg :=_gd .NewCT_ScatterSer ();_bbg ._abb .Ser =append (_bbg ._abb .Ser ,_ggdg );_ggdg .Idx .ValAttr =uint32 (len (_bbg ._abb .Ser )-1);_ggdg .Order .ValAttr =uint32 (len (_bbg ._abb .Ser )-1);_gbg :=ScatterChartSeries {_ggdg };_gbg .InitializeDefaults ();_gbg .Marker ().Properties ().LineProperties ().SetSolidFill (_cea );_gbg .Marker ().Properties ().SetSolidFill (_cea );return _gbg ;};func (_edd LineChartSeries )Values ()NumberDataSource {if _edd ._dab .Val ==nil {_edd ._dab .Val =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_edd ._dab .Val );};

// X returns the inner wrapped XML type.
func (_gbb PieOfPieChart )X ()*_gd .CT_OfPieChart {return _gbb ._caf };func (_dff DataLabels )SetPosition (p _gd .ST_DLblPos ){_dff .ensureChoice ();_dff ._bdf .Choice .DLblPos =_gd .NewCT_DLblPos ();_dff ._bdf .Choice .DLblPos .ValAttr =p ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_gg Bar3DChart )SetDirection (d _gd .ST_BarDir ){_gg ._cg .BarDir .ValAttr =d };

// AddSeries adds a default series to an Pie3D chart.
func (_eefe Pie3DChart )AddSeries ()PieChartSeries {_fgce :=_gd .NewCT_PieSer ();_eefe ._cdaa .Ser =append (_eefe ._cdaa .Ser ,_fgce );_fgce .Idx .ValAttr =uint32 (len (_eefe ._cdaa .Ser )-1);_fgce .Order .ValAttr =uint32 (len (_eefe ._cdaa .Ser )-1);_fbbc :=PieChartSeries {_fgce };_fbbc .InitializeDefaults ();return _fbbc ;};func MakeChart (x *_gd .ChartSpace )Chart {return Chart {x }};

// Order returns the order of the series
func (_cda LineChartSeries )Order ()uint32 {return _cda ._dab .Order .ValAttr };func (_eaea ScatterChart )InitializeDefaults (){_eaea ._abb .ScatterStyle .ValAttr =_gd .ST_ScatterStyleMarker ;};

// X returns the inner wrapped XML type.
func (_aec AreaChartSeries )X ()*_gd .CT_AreaSer {return _aec ._ad };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_db *_gd .CT_AreaChart ;};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_gfe Chart )AddSurface3DChart ()Surface3DChart {_bfd :=_gd .NewCT_PlotAreaChoice ();_gfe ._fa .Chart .PlotArea .Choice =append (_gfe ._fa .Chart .PlotArea .Choice ,_bfd );_bfd .Surface3DChart =_gd .NewCT_Surface3DChart ();_gade (_gfe ._fa .Chart );_def :=Surface3DChart {_ddc :_bfd .Surface3DChart };_def .InitializeDefaults ();return _def ;};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_aeeg DoughnutChart )SetHoleSize (pct uint8 ){if _aeeg ._dba .HoleSize ==nil {_aeeg ._dba .HoleSize =_gd .NewCT_HoleSize ();};if _aeeg ._dba .HoleSize .ValAttr ==nil {_aeeg ._dba .HoleSize .ValAttr =&_gd .ST_HoleSize {};};_aeeg ._dba .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};

// AddAxis adds an axis to a line chart.
func (_bbf Line3DChart )AddAxis (axis Axis ){_gcf :=_gd .NewCT_UnsignedInt ();_gcf .ValAttr =axis .AxisID ();_bbf ._ced .AxId =append (_bbf ._ced .AxId ,_gcf );};

// X returns the inner wrapped XML type.
func (_eaf SurfaceChart )X ()*_gd .CT_SurfaceChart {return _eaf ._fecf };

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_fd Chart )AddDoughnutChart ()DoughnutChart {_aeb :=_gd .NewCT_PlotAreaChoice ();_fd ._fa .Chart .PlotArea .Choice =append (_fd ._fa .Chart .PlotArea .Choice ,_aeb );_aeb .DoughnutChart =_gd .NewCT_DoughnutChart ();_eb :=DoughnutChart {_dba :_aeb .DoughnutChart };_eb .InitializeDefaults ();return _eb ;};func (_fdbf RadarChart )AddAxis (axis Axis ){_bad :=_gd .NewCT_UnsignedInt ();_bad .ValAttr =axis .AxisID ();_fdbf ._acd .AxId =append (_fdbf ._acd .AxId ,_bad );};

// CategoryAxis returns the category data source.
func (_bedf RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bedf ._beb .Cat ==nil {_bedf ._beb .Cat =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_bedf ._beb .Cat );};func (_ecdbf Title )RunProperties ()_ec .RunProperties {if _ecdbf ._gdde .Tx ==nil {_ecdbf .SetText ("");};if _ecdbf ._gdde .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_ecdbf ._gdde .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_gdb .NewCT_TextCharacterProperties ();};return _ec .MakeRunProperties (_ecdbf ._gdde .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};

// AddBubbleChart adds a new bubble chart.
func (_cb Chart )AddBubbleChart ()BubbleChart {_cdf :=_gd .NewCT_PlotAreaChoice ();_cb ._fa .Chart .PlotArea .Choice =append (_cb ._fa .Chart .PlotArea .Choice ,_cdf );_cdf .BubbleChart =_gd .NewCT_BubbleChart ();_cgd :=BubbleChart {_ga :_cdf .BubbleChart };_cgd .InitializeDefaults ();return _cgd ;};

// Order returns the order of the series
func (_fbba SurfaceChartSeries )Order ()uint32 {return _fbba ._gdc .Order .ValAttr };func (_fga nullAxis )AxisID ()uint32 {return 0};

// Values returns the value data source.
func (_cca BarChartSeries )Values ()NumberDataSource {if _cca ._aac .Val ==nil {_cca ._aac .Val =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_cca ._aac .Val );};func (_da CategoryAxis )SetMinorTickMark (m _gd .ST_TickMark ){if m ==_gd .ST_TickMarkUnset {_da ._ggc .MinorTickMark =nil ;}else {_da ._ggc .MinorTickMark =_gd .NewCT_TickMark ();_da ._ggc .MinorTickMark .ValAttr =m ;};};

// InitializeDefaults the bar chart to its defaults
func (_gae RadarChart )InitializeDefaults (){_gae ._acd .RadarStyle .ValAttr =_gd .ST_RadarStyleMarker };func (_ebg ValueAxis )SetCrosses (axis Axis ){_ebg ._cge .CrossAx .ValAttr =axis .AxisID ()};func (_bgc SeriesAxis )SetCrosses (axis Axis ){_bgc ._aaca .CrossAx .ValAttr =axis .AxisID ()};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};func (_aggf CategoryAxis )SetMajorTickMark (m _gd .ST_TickMark ){if m ==_gd .ST_TickMarkUnset {_aggf ._ggc .MajorTickMark =nil ;}else {_aggf ._ggc .MajorTickMark =_gd .NewCT_TickMark ();_aggf ._ggc .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_gdd SeriesAxis )X ()*_gd .CT_SerAx {return _gdd ._aaca };

// X returns the inner wrapped XML type.
func (_acg ScatterChart )X ()*_gd .CT_ScatterChart {return _acg ._abb };

// X returns the inner wrapped XML type.
func (_gbd GridLines )X ()*_gd .CT_ChartLines {return _gbd ._ffd };func (_cgg CategoryAxis )SetTickLabelPosition (p _gd .ST_TickLblPos ){if p ==_gd .ST_TickLblPosUnset {_cgg ._ggc .TickLblPos =nil ;}else {_cgg ._ggc .TickLblPos =_gd .NewCT_TickLblPos ();_cgg ._ggc .TickLblPos .ValAttr =p ;};};

// X returns the inner wrapped XML type.
func (_fgda LineChartSeries )X ()*_gd .CT_LineSer {return _fgda ._dab };type Marker struct{_ebb *_gd .CT_Marker };

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_fcec PieChartSeries )SetExplosion (v uint32 ){_fcec ._cdg .Explosion =_gd .NewCT_UnsignedInt ();_fcec ._cdg .Explosion .ValAttr =v ;};

// AddArea3DChart adds a new area chart to a chart.
func (_cdc Chart )AddArea3DChart ()Area3DChart {_gade (_cdc ._fa .Chart );_fc :=_gd .NewCT_PlotAreaChoice ();_cdc ._fa .Chart .PlotArea .Choice =append (_cdc ._fa .Chart .PlotArea .Choice ,_fc );_fc .Area3DChart =_gd .NewCT_Area3DChart ();_bd :=Area3DChart {_ag :_fc .Area3DChart };_bd .InitializeDefaults ();return _bd ;};func (_gca CategoryAxis )MajorGridLines ()GridLines {if _gca ._ggc .MajorGridlines ==nil {_gca ._ggc .MajorGridlines =_gd .NewCT_ChartLines ();};return GridLines {_gca ._ggc .MajorGridlines };};

// AddSeries adds a default series to an Pie chart.
func (_eace PieChart )AddSeries ()PieChartSeries {_fcd :=_gd .NewCT_PieSer ();_eace ._abgc .Ser =append (_eace ._abgc .Ser ,_fcd );_fcd .Idx .ValAttr =uint32 (len (_eace ._abgc .Ser )-1);_fcd .Order .ValAttr =uint32 (len (_eace ._abgc .Ser )-1);_dcbf :=PieChartSeries {_fcd };_dcbf .InitializeDefaults ();return _dcbf ;};func (_ade DataLabels )SetShowLeaderLines (b bool ){_ade .ensureChoice ();_ade ._bdf .Choice .ShowLeaderLines =_gd .NewCT_Boolean ();_ade ._bdf .Choice .ShowLeaderLines .ValAttr =_ge .Bool (b );};func (_ggab SeriesAxis )InitializeDefaults (){};

// InitializeDefaults initializes a bar chart series to the default values.
func (_cdd BarChartSeries )InitializeDefaults (){};func (_adf CategoryAxis )Properties ()_ec .ShapeProperties {if _adf ._ggc .SpPr ==nil {_adf ._ggc .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_adf ._ggc .SpPr );};

// InitializeDefaults the bar chart to its defaults
func (_d Area3DChart )InitializeDefaults (){};

// AddSeries adds a default series to an area chart.
func (_ff AreaChart )AddSeries ()AreaChartSeries {_ea :=_ff .nextColor (len (_ff ._db .Ser ));_ae :=_gd .NewCT_AreaSer ();_ff ._db .Ser =append (_ff ._db .Ser ,_ae );_ae .Idx .ValAttr =uint32 (len (_ff ._db .Ser )-1);_ae .Order .ValAttr =uint32 (len (_ff ._db .Ser )-1);_ecd :=AreaChartSeries {_ae };_ecd .InitializeDefaults ();_ecd .Properties ().SetSolidFill (_ea );return _ecd ;};func MakeSeriesAxis (x *_gd .CT_SerAx )SeriesAxis {return SeriesAxis {x }};func (_ged ScatterChartSeries )SetSmooth (b bool ){_ged ._ggb .Smooth =_gd .NewCT_Boolean ();_ged ._ggb .Smooth .ValAttr =&b ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_cg *_gd .CT_Bar3DChart ;};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_fecf *_gd .CT_SurfaceChart ;};func (_fggf DateAxis )SetCrosses (axis Axis ){_fggf ._geg .CrossAx .ValAttr =axis .AxisID ()};

// AddSeries adds a default series to a Surface chart.
func (_afbg Surface3DChart )AddSeries ()SurfaceChartSeries {_bfb :=_afbg .nextColor (len (_afbg ._ddc .Ser ));_edg :=_gd .NewCT_SurfaceSer ();_afbg ._ddc .Ser =append (_afbg ._ddc .Ser ,_edg );_edg .Idx .ValAttr =uint32 (len (_afbg ._ddc .Ser )-1);_edg .Order .ValAttr =uint32 (len (_afbg ._ddc .Ser )-1);_bddf :=SurfaceChartSeries {_edg };_bddf .InitializeDefaults ();_bddf .Properties ().LineProperties ().SetSolidFill (_bfb );return _bddf ;};func (_daff SeriesAxis )AxisID ()uint32 {return _daff ._aaca .AxId .ValAttr };

// CategoryAxis returns the category data source.
func (_dc BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dc ._cef .XVal ==nil {_dc ._cef .XVal =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_dc ._cef .XVal );};func (_geb DateAxis )SetTickLabelPosition (p _gd .ST_TickLblPos ){if p ==_gd .ST_TickLblPosUnset {_geb ._geg .TickLblPos =nil ;}else {_geb ._geg .TickLblPos =_gd .NewCT_TickLblPos ();_geb ._geg .TickLblPos .ValAttr =p ;};};

// Properties returns the chart's shape properties.
func (_dcb Chart )Properties ()_ec .ShapeProperties {if _dcb ._fa .SpPr ==nil {_dcb ._fa .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_dcb ._fa .SpPr );};func (_fec DateAxis )SetMinorTickMark (m _gd .ST_TickMark ){if m ==_gd .ST_TickMarkUnset {_fec ._geg .MinorTickMark =nil ;}else {_fec ._geg .MinorTickMark =_gd .NewCT_TickMark ();_fec ._geg .MinorTickMark .ValAttr =m ;};};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_abgc *_gd .CT_PieChart ;};func (_cce SurfaceChartSeries )Values ()NumberDataSource {if _cce ._gdc .Val ==nil {_cce ._gdc .Val =_gd .NewCT_NumDataSource ();};_bbba :=MakeNumberDataSource (_cce ._gdc .Val );_bbba .CreateEmptyNumberCache ();return _bbba ;};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_ddc *_gd .CT_Surface3DChart ;};

// SetText sets the series text.
func (_ggf BarChartSeries )SetText (s string ){_ggf ._aac .Tx =_gd .NewCT_SerTx ();_ggf ._aac .Tx .Choice .V =&s ;};

// AddStockChart adds a new stock chart.
func (_dgc Chart )AddStockChart ()StockChart {_ecdd :=_gd .NewCT_PlotAreaChoice ();_dgc ._fa .Chart .PlotArea .Choice =append (_dgc ._fa .Chart .PlotArea .Choice ,_ecdd );_ecdd .StockChart =_gd .NewCT_StockChart ();_cfd :=StockChart {_ddeg :_ecdd .StockChart };_cfd .InitializeDefaults ();return _cfd ;};type ScatterChart struct{chartBase ;_abb *_gd .CT_ScatterChart ;};

// AddAreaChart adds a new area chart to a chart.
func (_fe Chart )AddAreaChart ()AreaChart {_gbf :=_gd .NewCT_PlotAreaChoice ();_fe ._fa .Chart .PlotArea .Choice =append (_fe ._fa .Chart .PlotArea .Choice ,_gbf );_gbf .AreaChart =_gd .NewCT_AreaChart ();_gcba :=AreaChart {_db :_gbf .AreaChart };_gcba .InitializeDefaults ();return _gcba ;};

// X returns the inner wrapped XML type.
func (_dda Legend )X ()*_gd .CT_Legend {return _dda ._gcd };func (_eag DateAxis )Properties ()_ec .ShapeProperties {if _eag ._geg .SpPr ==nil {_eag ._geg .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_eag ._geg .SpPr );};func (_dd Bar3DChart )AddAxis (axis Axis ){_ce :=_gd .NewCT_UnsignedInt ();_ce .ValAttr =axis .AxisID ();_dd ._cg .AxId =append (_dd ._cg .AxId ,_ce );};func (_gbdc Marker )Properties ()_ec .ShapeProperties {if _gbdc ._ebb .SpPr ==nil {_gbdc ._ebb .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_gbdc ._ebb .SpPr );};

// Values returns the value data source.
func (_aff RadarChartSeries )Values ()NumberDataSource {if _aff ._beb .Val ==nil {_aff ._beb .Val =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_aff ._beb .Val );};

// InitializeDefaults initializes an area series to the default values.
func (_ab AreaChartSeries )InitializeDefaults (){};

// Properties returns the line chart series shape properties.
func (_cgdc ScatterChartSeries )Properties ()_ec .ShapeProperties {if _cgdc ._ggb .SpPr ==nil {_cgdc ._ggb .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_cgdc ._ggb .SpPr );};func (_gaa DataLabels )SetShowLegendKey (b bool ){_gaa .ensureChoice ();_gaa ._bdf .Choice .ShowLegendKey =_gd .NewCT_Boolean ();_gaa ._bdf .Choice .ShowLegendKey .ValAttr =_ge .Bool (b );};

// Chart is a generic chart.
type Chart struct{_fa *_gd .ChartSpace };func (_ggfb Legend )SetPosition (p _gd .ST_LegendPos ){if p ==_gd .ST_LegendPosUnset {_ggfb ._gcd .LegendPos =nil ;}else {_ggfb ._gcd .LegendPos =_gd .NewCT_LegendPos ();_ggfb ._gcd .LegendPos .ValAttr =p ;};};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_gee *_gd .CT_BarChart ;};

// Properties returns the bar chart series shape properties.
func (_ccbf RadarChartSeries )Properties ()_ec .ShapeProperties {if _ccbf ._beb .SpPr ==nil {_ccbf ._beb .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_ccbf ._beb .SpPr );};

// X returns the inner wrapped XML type.
func (_bada SurfaceChartSeries )X ()*_gd .CT_SurfaceSer {return _bada ._gdc };

// SetIndex sets the index of the series
func (_geaf SurfaceChartSeries )SetIndex (idx uint32 ){_geaf ._gdc .Idx .ValAttr =idx };func (_af Area3DChart )AddAxis (axis Axis ){_cf :=_gd .NewCT_UnsignedInt ();_cf .ValAttr =axis .AxisID ();_af ._ag .AxId =append (_af ._ag .AxId ,_cf );};

// Properties returns the bar chart series shape properties.
func (_aa AreaChartSeries )Properties ()_ec .ShapeProperties {if _aa ._ad .SpPr ==nil {_aa ._ad .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_aa ._ad .SpPr );};func (_gcac LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gcac ._dab .Cat ==nil {_gcac ._dab .Cat =_gd .NewCT_AxDataSource ();};return MakeAxisDataSource (_gcac ._dab .Cat );};func MakeCategoryAxis (x *_gd .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// X returns the inner wrapped XML type.
func (_aecf Pie3DChart )X ()*_gd .CT_Pie3DChart {return _aecf ._cdaa };

// AddPieOfPieChart adds a new pie chart to a chart.
func (_ccg Chart )AddPieOfPieChart ()PieOfPieChart {_gac :=_gd .NewCT_PlotAreaChoice ();_ccg ._fa .Chart .PlotArea .Choice =append (_ccg ._fa .Chart .PlotArea .Choice ,_gac );_gac .OfPieChart =_gd .NewCT_OfPieChart ();_ffe :=PieOfPieChart {_caf :_gac .OfPieChart };_ffe .InitializeDefaults ();return _ffe ;};func (_egaf CategoryAxis )SetCrosses (axis Axis ){_egaf ._ggc .Choice =_gd .NewEG_AxSharedChoice ();_egaf ._ggc .Choice .Crosses =_gd .NewCT_Crosses ();_egaf ._ggc .Choice .Crosses .ValAttr =_gd .ST_CrossesAutoZero ;_egaf ._ggc .CrossAx .ValAttr =axis .AxisID ();};

// X returns the inner wrapped XML type.
func (_adg Chart )X ()*_gd .ChartSpace {return _adg ._fa };func (_edda ValueAxis )SetMinorTickMark (m _gd .ST_TickMark ){if m ==_gd .ST_TickMarkUnset {_edda ._cge .MinorTickMark =nil ;}else {_edda ._cge .MinorTickMark =_gd .NewCT_TickMark ();_edda ._cge .MinorTickMark .ValAttr =m ;};};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_agd BubbleChartSeries )InitializeDefaults (){};func (_egf ValueAxis )SetMajorTickMark (m _gd .ST_TickMark ){if m ==_gd .ST_TickMarkUnset {_egf ._cge .MajorTickMark =nil ;}else {_egf ._cge .MajorTickMark =_gd .NewCT_TickMark ();_egf ._cge .MajorTickMark .ValAttr =m ;};};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_ggb *_gd .CT_ScatterSer };

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_acd *_gd .CT_RadarChart ;};

// X returns the inner wrapped XML type.
func (_ddab Title )X ()*_gd .CT_Title {return _ddab ._gdde };func (_bag NumberDataSource )ensureChoice (){if _bag ._ege .Choice ==nil {_bag ._ege .Choice =_gd .NewCT_NumDataSourceChoice ();};};

// AddValueAxis adds a value axis to the chart.
func (_aabg Chart )AddValueAxis ()ValueAxis {_geea :=_gd .NewCT_ValAx ();if _aabg ._fa .Chart .PlotArea .CChoice ==nil {_aabg ._fa .Chart .PlotArea .CChoice =_gd .NewCT_PlotAreaChoice1 ();};_geea .AxId =_gd .NewCT_UnsignedInt ();_geea .AxId .ValAttr =0x7FFFFFFF&_f .Uint32 ();_aabg ._fa .Chart .PlotArea .CChoice .ValAx =append (_aabg ._fa .Chart .PlotArea .CChoice .ValAx ,_geea );_geea .Delete =_gd .NewCT_Boolean ();_geea .Delete .ValAttr =_ge .Bool (false );_geea .Scaling =_gd .NewCT_Scaling ();_geea .Scaling .Orientation =_gd .NewCT_Orientation ();_geea .Scaling .Orientation .ValAttr =_gd .ST_OrientationMinMax ;_geea .Choice =&_gd .EG_AxSharedChoice {};_geea .Choice .Crosses =_gd .NewCT_Crosses ();_geea .Choice .Crosses .ValAttr =_gd .ST_CrossesAutoZero ;_geea .CrossBetween =_gd .NewCT_CrossBetween ();_geea .CrossBetween .ValAttr =_gd .ST_CrossBetweenBetween ;_bcc :=MakeValueAxis (_geea );_bcc .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_fg .LightGray );_bcc .SetMajorTickMark (_gd .ST_TickMarkOut );_bcc .SetMinorTickMark (_gd .ST_TickMarkIn );_bcc .SetTickLabelPosition (_gd .ST_TickLblPosNextTo );_bcc .Properties ().LineProperties ().SetSolidFill (_fg .Black );_bcc .SetPosition (_gd .ST_AxPosL );return _bcc ;};func (_dbf ValueAxis )MajorGridLines ()GridLines {if _dbf ._cge .MajorGridlines ==nil {_dbf ._cge .MajorGridlines =_gd .NewCT_ChartLines ();};return GridLines {_dbf ._cge .MajorGridlines };};

// InitializeDefaults the bar chart to its defaults
func (_cbb PieChart )InitializeDefaults (){_cbb ._abgc .VaryColors =_gd .NewCT_Boolean ();_cbb ._abgc .VaryColors .ValAttr =_ge .Bool (true );};func (_gfc ValueAxis )AxisID ()uint32 {return _gfc ._cge .AxId .ValAttr };func MakeNumberDataSource (x *_gd .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// InitializeDefaults the bar chart to its defaults
func (_agde DoughnutChart )InitializeDefaults (){_agde ._dba .VaryColors =_gd .NewCT_Boolean ();_agde ._dba .VaryColors .ValAttr =_ge .Bool (true );_agde ._dba .HoleSize =_gd .NewCT_HoleSize ();_agde ._dba .HoleSize .ValAttr =&_gd .ST_HoleSize {};_agde ._dba .HoleSize .ValAttr .ST_HoleSizeUByte =_ge .Uint8 (50);};func (_bb CategoryAxis )SetPosition (p _gd .ST_AxPos ){_bb ._ggc .AxPos =_gd .NewCT_AxPos ();_bb ._ggc .AxPos .ValAttr =p ;};func (_ebad Legend )SetOverlay (b bool ){_ebad ._gcd .Overlay =_gd .NewCT_Boolean ();_ebad ._gcd .Overlay .ValAttr =_ge .Bool (b );};

// X returns the inner wrapped XML type.
func (_b Area3DChart )X ()*_gd .CT_Area3DChart {return _b ._ag };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_fffa Chart )AddBar3DChart ()Bar3DChart {_gade (_fffa ._fa .Chart );_afdf :=_gd .NewCT_PlotAreaChoice ();_fffa ._fa .Chart .PlotArea .Choice =append (_fffa ._fa .Chart .PlotArea .Choice ,_afdf );_afdf .Bar3DChart =_gd .NewCT_Bar3DChart ();_afdf .Bar3DChart .Grouping =_gd .NewCT_BarGrouping ();_afdf .Bar3DChart .Grouping .ValAttr =_gd .ST_BarGroupingStandard ;_gdad :=Bar3DChart {_cg :_afdf .Bar3DChart };_gdad .InitializeDefaults ();return _gdad ;};

// Properties returns the line chart series shape properties.
func (_fbeb LineChartSeries )Properties ()_ec .ShapeProperties {if _fbeb ._dab .SpPr ==nil {_fbeb ._dab .SpPr =_gdb .NewCT_ShapeProperties ();};return _ec .MakeShapeProperties (_fbeb ._dab .SpPr );};

// SetOrder sets the order of the series
func (_gbdb SurfaceChartSeries )SetOrder (idx uint32 ){_gbdb ._gdc .Order .ValAttr =idx };func (_ggg DateAxis )AxisID ()uint32 {return _ggg ._geg .AxId .ValAttr };

// AddSurfaceChart adds a new surface chart to a chart.
func (_aad Chart )AddSurfaceChart ()SurfaceChart {_dgf :=_gd .NewCT_PlotAreaChoice ();_aad ._fa .Chart .PlotArea .Choice =append (_aad ._fa .Chart .PlotArea .Choice ,_dgf );_dgf .SurfaceChart =_gd .NewCT_SurfaceChart ();_gade (_aad ._fa .Chart );_aad ._fa .Chart .View3D .RotX .ValAttr =_ge .Int8 (90);_aad ._fa .Chart .View3D .RotY .ValAttr =_ge .Uint16 (0);_aad ._fa .Chart .View3D .Perspective =_gd .NewCT_Perspective ();_aad ._fa .Chart .View3D .Perspective .ValAttr =_ge .Uint8 (0);_gbe :=SurfaceChart {_fecf :_dgf .SurfaceChart };_gbe .InitializeDefaults ();return _gbe ;};

// Values returns the value data source.
func (_aecg BubbleChartSeries )Values ()NumberDataSource {if _aecg ._cef .YVal ==nil {_aecg ._cef .YVal =_gd .NewCT_NumDataSource ();};return MakeNumberDataSource (_aecg ._cef .YVal );};

// X returns the inner wrapped XML type.
func (_fde Line3DChart )X ()*_gd .CT_Line3DChart {return _fde ._ced };