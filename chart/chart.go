//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_dd "fmt";_a "github.com/unidoc/unioffice";_gcb "github.com/unidoc/unioffice/color";_gcc "github.com/unidoc/unioffice/drawing";_gc "github.com/unidoc/unioffice/measurement";_dde "github.com/unidoc/unioffice/schema/soo/dml";_d "github.com/unidoc/unioffice/schema/soo/dml/chart";_ga "math/rand";);

// X returns the inner wrapped XML type.
func (_f Area3DChart )X ()*_d .CT_Area3DChart {return _f ._e };func (_gbg CategoryAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_gbg ._def .TickLblPos =nil ;}else {_gbg ._def .TickLblPos =_d .NewCT_TickLblPos ();_gbg ._def .TickLblPos .ValAttr =p ;};};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_bdb *_d .CT_RadarSer };

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_e *_d .CT_Area3DChart ;};func (_dbfc DateAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_dbfc ._bbg .MinorTickMark =nil ;}else {_dbfc ._bbg .MinorTickMark =_d .NewCT_TickMark ();_dbfc ._bbg .MinorTickMark .ValAttr =m ;};};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_ede *_d .CT_BubbleChart ;};

// SetText sets the series text.
func (_cgg PieChartSeries )SetText (s string ){_cgg ._cfea .Tx =_d .NewCT_SerTx ();_cgg ._cfea .Tx .Choice .V =&s ;};func (_geda SeriesAxis )SetCrosses (axis Axis ){_geda ._dgc .CrossAx .ValAttr =axis .AxisID ()};func (_de Bar3DChart )AddAxis (axis Axis ){_geg :=_d .NewCT_UnsignedInt ();_geg .ValAttr =axis .AxisID ();_de ._gdab .AxId =append (_de ._gdab .AxId ,_geg );};func MakeSeriesAxis (x *_d .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// X returns the inner wrapped XML type.
func (_fe AreaChartSeries )X ()*_d .CT_AreaSer {return _fe ._gda };func (_bce DateAxis )SetPosition (p _d .ST_AxPos ){_bce ._bbg .AxPos =_d .NewCT_AxPos ();_bce ._bbg .AxPos .ValAttr =p ;};func (_feg DateAxis )MajorGridLines ()GridLines {if _feg ._bbg .MajorGridlines ==nil {_feg ._bbg .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_feg ._bbg .MajorGridlines };};type chartBase struct{};

// AddBarChart adds a new bar chart to a chart.
func (_ged Chart )AddBarChart ()BarChart {_dg :=_d .NewCT_PlotAreaChoice ();_ged ._da .Chart .PlotArea .Choice =append (_ged ._da .Chart .PlotArea .Choice ,_dg );_dg .BarChart =_d .NewCT_BarChart ();_dg .BarChart .Grouping =_d .NewCT_BarGrouping ();_dg .BarChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_adb :=BarChart {_eb :_dg .BarChart };_adb .InitializeDefaults ();return _adb ;};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_dbe *_d .CT_DoughnutChart ;};type Line3DChart struct{chartBase ;_dcg *_d .CT_Line3DChart ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_eb *_d .CT_BarChart ;};

// AddBubbleChart adds a new bubble chart.
func (_dbc Chart )AddBubbleChart ()BubbleChart {_begd :=_d .NewCT_PlotAreaChoice ();_dbc ._da .Chart .PlotArea .Choice =append (_dbc ._da .Chart .PlotArea .Choice ,_begd );_begd .BubbleChart =_d .NewCT_BubbleChart ();_abf :=BubbleChart {_ede :_begd .BubbleChart };_abf .InitializeDefaults ();return _abf ;};

// AddSurfaceChart adds a new surface chart to a chart.
func (_fde Chart )AddSurfaceChart ()SurfaceChart {_baf :=_d .NewCT_PlotAreaChoice ();_fde ._da .Chart .PlotArea .Choice =append (_fde ._da .Chart .PlotArea .Choice ,_baf );_baf .SurfaceChart =_d .NewCT_SurfaceChart ();_ef (_fde ._da .Chart );_fde ._da .Chart .View3D .RotX .ValAttr =_a .Int8 (90);_fde ._da .Chart .View3D .RotY .ValAttr =_a .Uint16 (0);_fde ._da .Chart .View3D .Perspective =_d .NewCT_Perspective ();_fde ._da .Chart .View3D .Perspective .ValAttr =_a .Uint8 (0);_ade :=SurfaceChart {_abbf :_baf .SurfaceChart };_ade .InitializeDefaults ();return _ade ;};

// SetText sets the series text.
func (_deb BarChartSeries )SetText (s string ){_deb ._aeg .Tx =_d .NewCT_SerTx ();_deb ._aeg .Tx .Choice .V =&s ;};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_aeg *_d .CT_BarSer };

// X returns the inner wrapped XML type.
func (_fec BubbleChart )X ()*_d .CT_BubbleChart {return _fec ._ede };

// Properties returns the bar chart series shape properties.
func (_feb AreaChartSeries )Properties ()_gcc .ShapeProperties {if _feb ._gda .SpPr ==nil {_feb ._gda .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_feb ._gda .SpPr );};

// AddAxis adds an axis to a Surface chart.
func (_abec SurfaceChart )AddAxis (axis Axis ){_dbaf :=_d .NewCT_UnsignedInt ();_dbaf .ValAttr =axis .AxisID ();_abec ._abbf .AxId =append (_abec ._abbf .AxId ,_dbaf );};func (_cbgc LineChartSeries )SetSmooth (b bool ){_cbgc ._dcb .Smooth =_d .NewCT_Boolean ();_cbgc ._dcb .Smooth .ValAttr =&b ;};

// AddRadarChart adds a new radar chart to a chart.
func (_bbe Chart )AddRadarChart ()RadarChart {_ffd :=_d .NewCT_PlotAreaChoice ();_bbe ._da .Chart .PlotArea .Choice =append (_bbe ._da .Chart .PlotArea .Choice ,_ffd );_ffd .RadarChart =_d .NewCT_RadarChart ();_egg :=RadarChart {_faf :_ffd .RadarChart };_egg .InitializeDefaults ();return _egg ;};

// InitializeDefaults initializes an Pie series to the default values.
func (_accg PieChartSeries )InitializeDefaults (){};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_gaa Chart )AddPieOfPieChart ()PieOfPieChart {_cfc :=_d .NewCT_PlotAreaChoice ();_gaa ._da .Chart .PlotArea .Choice =append (_gaa ._da .Chart .PlotArea .Choice ,_cfc );_cfc .OfPieChart =_d .NewCT_OfPieChart ();_dge :=PieOfPieChart {_aad :_cfc .OfPieChart };_dge .InitializeDefaults ();return _dge ;};

// Properties returns the line chart series shape properties.
func (_ebac ScatterChartSeries )Properties ()_gcc .ShapeProperties {if _ebac ._bcce .SpPr ==nil {_ebac ._bcce .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_ebac ._bcce .SpPr );};func _ef (_bac *_d .CT_Chart ){_bac .View3D =_d .NewCT_View3D ();_bac .View3D .RotX =_d .NewCT_RotX ();_bac .View3D .RotX .ValAttr =_a .Int8 (15);_bac .View3D .RotY =_d .NewCT_RotY ();_bac .View3D .RotY .ValAttr =_a .Uint16 (20);_bac .View3D .RAngAx =_d .NewCT_Boolean ();_bac .View3D .RAngAx .ValAttr =_a .Bool (false );_bac .Floor =_d .NewCT_Surface ();_bac .Floor .Thickness =_d .NewCT_Thickness ();_bac .Floor .Thickness .ValAttr .Uint32 =_a .Uint32 (0);_bac .SideWall =_d .NewCT_Surface ();_bac .SideWall .Thickness =_d .NewCT_Thickness ();_bac .SideWall .Thickness .ValAttr .Uint32 =_a .Uint32 (0);_bac .BackWall =_d .NewCT_Surface ();_bac .BackWall .Thickness =_d .NewCT_Thickness ();_bac .BackWall .Thickness .ValAttr .Uint32 =_a .Uint32 (0);};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_cfea *_d .CT_PieSer };

// SetIndex sets the index of the series
func (_efb LineChartSeries )SetIndex (idx uint32 ){_efb ._dcb .Idx .ValAttr =idx };func MakeValueAxis (x *_d .CT_ValAx )ValueAxis {return ValueAxis {x }};

// X returns the inner wrapped XML type.
func (_ed BarChartSeries )X ()*_d .CT_BarSer {return _ed ._aeg };func (_edfb SurfaceChart )InitializeDefaults (){_edfb ._abbf .Wireframe =_d .NewCT_Boolean ();_edfb ._abbf .Wireframe .ValAttr =_a .Bool (false );_edfb ._abbf .BandFmts =_d .NewCT_BandFmts ();for _ffb :=0;_ffb < 15;_ffb ++{_cge :=_d .NewCT_BandFmt ();_cge .Idx .ValAttr =uint32 (_ffb );_cge .SpPr =_dde .NewCT_ShapeProperties ();_egb :=_gcc .MakeShapeProperties (_cge .SpPr );_egb .SetSolidFill (_edfb .nextColor (_ffb ));_edfb ._abbf .BandFmts .BandFmt =append (_edfb ._abbf .BandFmts .BandFmt ,_cge );};};

// AddAxis adds an axis to a line chart.
func (_ggee LineChart )AddAxis (axis Axis ){_efd :=_d .NewCT_UnsignedInt ();_efd .ValAttr =axis .AxisID ();_ggee ._bfa .AxId =append (_ggee ._bfa .AxId ,_efd );};

// X returns the inner wrapped XML type.
func (_cac PieChartSeries )X ()*_d .CT_PieSer {return _cac ._cfea };

// SetValues is used to set the source data to a set of values.
func (_cg CategoryAxisDataSource )SetValues (v []string ){_cg ._aff .Choice =_d .NewCT_AxDataSourceChoice ();_cg ._aff .Choice .StrLit =_d .NewCT_StrData ();_cg ._aff .Choice .StrLit .PtCount =_d .NewCT_UnsignedInt ();_cg ._aff .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _dc ,_gec :=range v {_cg ._aff .Choice .StrLit .Pt =append (_cg ._aff .Choice .StrLit .Pt ,&_d .CT_StrVal {IdxAttr :uint32 (_dc ),V :_gec });};};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_fc Chart )SetDisplayBlanksAs (v _d .ST_DispBlanksAs ){_fc ._da .Chart .DispBlanksAs =_d .NewCT_DispBlanksAs ();_fc ._da .Chart .DispBlanksAs .ValAttr =v ;};

// AddPieChart adds a new pie chart to a chart.
func (_bf Chart )AddPieChart ()PieChart {_cdg :=_d .NewCT_PlotAreaChoice ();_bf ._da .Chart .PlotArea .Choice =append (_bf ._da .Chart .PlotArea .Choice ,_cdg );_cdg .PieChart =_d .NewCT_PieChart ();_gad :=PieChart {_egac :_cdg .PieChart };_gad .InitializeDefaults ();return _gad ;};

// AddLineChart adds a new line chart to a chart.
func (_cfe Chart )AddLineChart ()LineChart {_eee :=_d .NewCT_PlotAreaChoice ();_cfe ._da .Chart .PlotArea .Choice =append (_cfe ._da .Chart .PlotArea .Choice ,_eee );_eee .LineChart =_d .NewCT_LineChart ();_eee .LineChart .Grouping =_d .NewCT_Grouping ();_eee .LineChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return LineChart {_bfa :_eee .LineChart };};

// AddSeries adds a default series to a Scatter chart.
func (_dagc ScatterChart )AddSeries ()ScatterChartSeries {_cdcf :=_dagc .nextColor (len (_dagc ._eeb .Ser ));_ada :=_d .NewCT_ScatterSer ();_dagc ._eeb .Ser =append (_dagc ._eeb .Ser ,_ada );_ada .Idx .ValAttr =uint32 (len (_dagc ._eeb .Ser )-1);_ada .Order .ValAttr =uint32 (len (_dagc ._eeb .Ser )-1);_gcee :=ScatterChartSeries {_ada };_gcee .InitializeDefaults ();_gcee .Marker ().Properties ().LineProperties ().SetSolidFill (_cdcf );_gcee .Marker ().Properties ().SetSolidFill (_cdcf );return _gcee ;};func (_aec DataLabels )SetShowPercent (b bool ){_aec .ensureChoice ();_aec ._bgf .Choice .ShowPercent =_d .NewCT_Boolean ();_aec ._bgf .Choice .ShowPercent .ValAttr =_a .Bool (b );};

// InitializeDefaults the bar chart to its defaults
func (_eg Bar3DChart )InitializeDefaults (){_eg .SetDirection (_d .ST_BarDirCol )};

// AddSeries adds a default series to a Bubble chart.
func (_af BubbleChart )AddSeries ()BubbleChartSeries {_cbg :=_af .nextColor (len (_af ._ede .Ser ));_baa :=_d .NewCT_BubbleSer ();_af ._ede .Ser =append (_af ._ede .Ser ,_baa );_baa .Idx .ValAttr =uint32 (len (_af ._ede .Ser )-1);_baa .Order .ValAttr =uint32 (len (_af ._ede .Ser )-1);_bb :=BubbleChartSeries {_baa };_bb .InitializeDefaults ();_bb .Properties ().SetSolidFill (_cbg );return _bb ;};

// X returns the inner wrapped XML type.
func (_gecc LineChartSeries )X ()*_d .CT_LineSer {return _gecc ._dcb };

// Order returns the order of the series
func (_cacb SurfaceChartSeries )Order ()uint32 {return _cacb ._cdb .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_gac ScatterChart )X ()*_d .CT_ScatterChart {return _gac ._eeb };func (_gcba DataLabels )SetShowValue (b bool ){_gcba .ensureChoice ();_gcba ._bgf .Choice .ShowVal =_d .NewCT_Boolean ();_gcba ._bgf .Choice .ShowVal .ValAttr =_a .Bool (b );};type ValueAxis struct{_edbb *_d .CT_ValAx };func (_ceg CategoryAxis )Properties ()_gcc .ShapeProperties {if _ceg ._def .SpPr ==nil {_ceg ._def .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_ceg ._def .SpPr );};func (_gea BarChart )AddAxis (axis Axis ){_ee :=_d .NewCT_UnsignedInt ();_ee .ValAttr =axis .AxisID ();_gea ._eb .AxId =append (_gea ._eb .AxId ,_ee );};

// Values returns the bubble size data source.
func (_cce BubbleChartSeries )BubbleSizes ()NumberDataSource {if _cce ._gge .BubbleSize ==nil {_cce ._gge .BubbleSize =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_cce ._gge .BubbleSize );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_ba Bar3DChart )SetDirection (d _d .ST_BarDir ){_ba ._gdab .BarDir .ValAttr =d };

// SetText sets the series text.
func (_gggg RadarChartSeries )SetText (s string ){_gggg ._bdb .Tx =_d .NewCT_SerTx ();_gggg ._bdb .Tx .Choice .V =&s ;};func (_gb Area3DChart )AddAxis (axis Axis ){_gfe :=_d .NewCT_UnsignedInt ();_gfe .ValAttr =axis .AxisID ();_gb ._e .AxId =append (_gb ._e .AxId ,_gfe );};

// X returns the inner wrapped XML type.
func (_gbgf Chart )X ()*_d .ChartSpace {return _gbgf ._da };

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_aad *_d .CT_OfPieChart ;};func (_fab DataLabels )SetShowLegendKey (b bool ){_fab .ensureChoice ();_fab ._bgf .Choice .ShowLegendKey =_d .NewCT_Boolean ();_fab ._bgf .Choice .ShowLegendKey .ValAttr =_a .Bool (b );};type DataLabels struct{_bgf *_d .CT_DLbls };

// InitializeDefaults the bar chart to its defaults
func (_aab BarChart )InitializeDefaults (){_aab .SetDirection (_d .ST_BarDirCol )};func (_edc DataLabels )SetShowLeaderLines (b bool ){_edc .ensureChoice ();_edc ._bgf .Choice .ShowLeaderLines =_d .NewCT_Boolean ();_edc ._bgf .Choice .ShowLeaderLines .ValAttr =_a .Bool (b );};func (_afe LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _afe ._dcb .Cat ==nil {_afe ._dcb .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_afe ._dcb .Cat );};

// AddSeries adds a default series to an Doughnut chart.
func (_ace DoughnutChart )AddSeries ()PieChartSeries {_ceb :=_d .NewCT_PieSer ();_ace ._dbe .Ser =append (_ace ._dbe .Ser ,_ceb );_ceb .Idx .ValAttr =uint32 (len (_ace ._dbe .Ser )-1);_ceb .Order .ValAttr =uint32 (len (_ace ._dbe .Ser )-1);_cbf :=PieChartSeries {_ceb };_cbf .InitializeDefaults ();return _cbf ;};

// X returns the inner wrapped XML type.
func (_cff BubbleChartSeries )X ()*_d .CT_BubbleSer {return _cff ._gge };

// InitializeDefaults the bar chart to its defaults
func (_bgg DoughnutChart )InitializeDefaults (){_bgg ._dbe .VaryColors =_d .NewCT_Boolean ();_bgg ._dbe .VaryColors .ValAttr =_a .Bool (true );_bgg ._dbe .HoleSize =_d .NewCT_HoleSize ();_bgg ._dbe .HoleSize .ValAttr =&_d .ST_HoleSize {};_bgg ._dbe .HoleSize .ValAttr .ST_HoleSizeUByte =_a .Uint8 (50);};type Marker struct{_ddb *_d .CT_Marker };type GridLines struct{_cbb *_d .CT_ChartLines };

// SetOrder sets the order of the series
func (_adbd LineChartSeries )SetOrder (idx uint32 ){_adbd ._dcb .Order .ValAttr =idx };

// Labels returns the data label properties.
func (_dddg LineChartSeries )Labels ()DataLabels {if _dddg ._dcb .DLbls ==nil {_dddg ._dcb .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_dddg ._dcb .DLbls );};

// AddScatterChart adds a scatter (X/Y) chart.
func (_acb Chart )AddScatterChart ()ScatterChart {_bbdg :=_d .NewCT_PlotAreaChoice ();_acb ._da .Chart .PlotArea .Choice =append (_acb ._da .Chart .PlotArea .Choice ,_bbdg );_bbdg .ScatterChart =_d .NewCT_ScatterChart ();_fb :=ScatterChart {_eeb :_bbdg .ScatterChart };_fb .InitializeDefaults ();return _fb ;};

// Values returns the value data source.
func (_egfe RadarChartSeries )Values ()NumberDataSource {if _egfe ._bdb .Val ==nil {_egfe ._bdb .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_egfe ._bdb .Val );};type CategoryAxis struct{_def *_d .CT_CatAx };func MakeMarker (x *_d .CT_Marker )Marker {return Marker {x }};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_bea CategoryAxisDataSource )SetNumberReference (s string ){_bea ._aff .Choice =_d .NewCT_AxDataSourceChoice ();_bea ._aff .Choice .NumRef =_d .NewCT_NumRef ();_bea ._aff .Choice .NumRef .F =s ;};func (_egdd DateAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_egdd ._bbg .TickLblPos =nil ;}else {_egdd ._bbg .TickLblPos =_d .NewCT_TickLblPos ();_egdd ._bbg .TickLblPos .ValAttr =p ;};};

// Index returns the index of the series
func (_gdd SurfaceChartSeries )Index ()uint32 {return _gdd ._cdb .Idx .ValAttr };

// SetText sets the series text
func (_geff SurfaceChartSeries )SetText (s string ){_geff ._cdb .Tx =_d .NewCT_SerTx ();_geff ._cdb .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_agd GridLines )X ()*_d .CT_ChartLines {return _agd ._cbb };

// X returns the inner wrapped XML type.
func (_ggg PieOfPieChart )X ()*_d .CT_OfPieChart {return _ggg ._aad };

// SetValues sets values directly on a source.
func (_fae NumberDataSource )SetValues (v []float64 ){_fae .ensureChoice ();_fae ._afa .Choice .NumRef =nil ;_fae ._afa .Choice .NumLit =_d .NewCT_NumData ();_fae ._afa .Choice .NumLit .PtCount =_d .NewCT_UnsignedInt ();_fae ._afa .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _caa ,_dac :=range v {_fae ._afa .Choice .NumLit .Pt =append (_fae ._afa .Choice .NumLit .Pt ,&_d .CT_NumVal {IdxAttr :uint32 (_caa ),V :_dd .Sprintf ("\u0025\u0067",_dac )});};};

// AddAxis adds an axis to a Scatter chart.
func (_aga ScatterChart )AddAxis (axis Axis ){_fea :=_d .NewCT_UnsignedInt ();_fea .ValAttr =axis .AxisID ();_aga ._eeb .AxId =append (_aga ._eeb .AxId ,_fea );};func (_ccb Title )InitializeDefaults (){_ccb .SetText ("\u0054\u0069\u0074l\u0065");_ccb .RunProperties ().SetSize (16*_gc .Point );_ccb .RunProperties ().SetSolidFill (_gcb .Black );_ccb .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_ccb .RunProperties ().SetBold (false );};

// Properties returns the line chart series shape properties.
func (_agf LineChartSeries )Properties ()_gcc .ShapeProperties {if _agf ._dcb .SpPr ==nil {_agf ._dcb .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_agf ._dcb .SpPr );};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_ca *_d .CT_AreaChart ;};

// Values returns the value data source.
func (_gcd AreaChartSeries )Values ()NumberDataSource {if _gcd ._gda .Val ==nil {_gcd ._gda .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_gcd ._gda .Val );};func (_eba Marker )SetSymbol (s _d .ST_MarkerStyle ){if s ==_d .ST_MarkerStyleUnset {_eba ._ddb .Symbol =nil ;}else {_eba ._ddb .Symbol =_d .NewCT_MarkerStyle ();_eba ._ddb .Symbol .ValAttr =s ;};};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_abbf *_d .CT_SurfaceChart ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_aag *_d .CT_Pie3DChart ;};func (_eeec LineChartSeries )Values ()NumberDataSource {if _eeec ._dcb .Val ==nil {_eeec ._dcb .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_eeec ._dcb .Val );};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_ccf NumberDataSource )CreateEmptyNumberCache (){_ccf .ensureChoice ();if _ccf ._afa .Choice .NumRef ==nil {_ccf ._afa .Choice .NumRef =_d .NewCT_NumRef ();};_ccf ._afa .Choice .NumLit =nil ;_ccf ._afa .Choice .NumRef .NumCache =_d .NewCT_NumData ();_ccf ._afa .Choice .NumRef .NumCache .PtCount =_d .NewCT_UnsignedInt ();_ccf ._afa .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// X returns the inner wrapped XML type.
func (_bae ScatterChartSeries )X ()*_d .CT_ScatterSer {return _bae ._bcce };func (_cec CategoryAxis )SetPosition (p _d .ST_AxPos ){_cec ._def .AxPos =_d .NewCT_AxPos ();_cec ._def .AxPos .ValAttr =p ;};

// SetText sets the series text
func (_acfg LineChartSeries )SetText (s string ){_acfg ._dcb .Tx =_d .NewCT_SerTx ();_acfg ._dcb .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_edf Marker )X ()*_d .CT_Marker {return _edf ._ddb };

// AddPie3DChart adds a new pie chart to a chart.
func (_gfd Chart )AddPie3DChart ()Pie3DChart {_ef (_gfd ._da .Chart );_fg :=_d .NewCT_PlotAreaChoice ();_gfd ._da .Chart .PlotArea .Choice =append (_gfd ._da .Chart .PlotArea .Choice ,_fg );_fg .Pie3DChart =_d .NewCT_Pie3DChart ();_ddd :=Pie3DChart {_aag :_fg .Pie3DChart };_ddd .InitializeDefaults ();return _ddd ;};func (_eac Legend )InitializeDefaults (){_eac .SetPosition (_d .ST_LegendPosR );_eac .SetOverlay (false );_eac .Properties ().SetNoFill ();_eac .Properties ().LineProperties ().SetNoFill ();};func (_ebf SurfaceChartSeries )Values ()NumberDataSource {if _ebf ._cdb .Val ==nil {_ebf ._cdb .Val =_d .NewCT_NumDataSource ();};_bdec :=MakeNumberDataSource (_ebf ._cdb .Val );_bdec .CreateEmptyNumberCache ();return _bdec ;};func MakeDataLabels (x *_d .CT_DLbls )DataLabels {return DataLabels {x }};

// AddValueAxis adds a value axis to the chart.
func (_dbf Chart )AddValueAxis ()ValueAxis {_cdc :=_d .NewCT_ValAx ();if _dbf ._da .Chart .PlotArea .CChoice ==nil {_dbf ._da .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_cdc .AxId =_d .NewCT_UnsignedInt ();_cdc .AxId .ValAttr =0x7FFFFFFF&_ga .Uint32 ();_dbf ._da .Chart .PlotArea .CChoice .ValAx =append (_dbf ._da .Chart .PlotArea .CChoice .ValAx ,_cdc );_cdc .Delete =_d .NewCT_Boolean ();_cdc .Delete .ValAttr =_a .Bool (false );_cdc .Scaling =_d .NewCT_Scaling ();_cdc .Scaling .Orientation =_d .NewCT_Orientation ();_cdc .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_cdc .Choice =&_d .EG_AxSharedChoice {};_cdc .Choice .Crosses =_d .NewCT_Crosses ();_cdc .Choice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;_cdc .CrossBetween =_d .NewCT_CrossBetween ();_cdc .CrossBetween .ValAttr =_d .ST_CrossBetweenBetween ;_fgb :=MakeValueAxis (_cdc );_fgb .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gcb .LightGray );_fgb .SetMajorTickMark (_d .ST_TickMarkOut );_fgb .SetMinorTickMark (_d .ST_TickMarkIn );_fgb .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_fgb .Properties ().LineProperties ().SetSolidFill (_gcb .Black );_fgb .SetPosition (_d .ST_AxPosL );return _fgb ;};

// AddSeries adds a default series to an Pie chart.
func (_fdec PieChart )AddSeries ()PieChartSeries {_eeeg :=_d .NewCT_PieSer ();_fdec ._egac .Ser =append (_fdec ._egac .Ser ,_eeeg );_eeeg .Idx .ValAttr =uint32 (len (_fdec ._egac .Ser )-1);_eeeg .Order .ValAttr =uint32 (len (_fdec ._egac .Ser )-1);_bfb :=PieChartSeries {_eeeg };_bfb .InitializeDefaults ();return _bfb ;};

// InitializeDefaults the bar chart to its defaults
func (_debf PieChart )InitializeDefaults (){_debf ._egac .VaryColors =_d .NewCT_Boolean ();_debf ._egac .VaryColors .ValAttr =_a .Bool (true );};func (_ffab ScatterChart )InitializeDefaults (){_ffab ._eeb .ScatterStyle .ValAttr =_d .ST_ScatterStyleMarker ;};

// InitializeDefaults the bar chart to its defaults
func (_adbg PieOfPieChart )InitializeDefaults (){_adbg ._aad .VaryColors =_d .NewCT_Boolean ();_adbg ._aad .VaryColors .ValAttr =_a .Bool (true );_adbg .SetType (_d .ST_OfPieTypePie );_adbg ._aad .SecondPieSize =_d .NewCT_SecondPieSize ();_adbg ._aad .SecondPieSize .ValAttr =&_d .ST_SecondPieSize {};_adbg ._aad .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_a .Uint16 (75);_geccb :=_d .NewCT_ChartLines ();_geccb .SpPr =_dde .NewCT_ShapeProperties ();_agea :=_gcc .MakeShapeProperties (_geccb .SpPr );_agea .LineProperties ().SetSolidFill (_gcb .Auto );_adbg ._aad .SerLines =append (_adbg ._aad .SerLines ,_geccb );};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_gge *_d .CT_BubbleSer };func (_ebee DataLabels )SetPosition (p _d .ST_DLblPos ){_ebee .ensureChoice ();_ebee ._bgf .Choice .DLblPos =_d .NewCT_DLblPos ();_ebee ._bgf .Choice .DLblPos .ValAttr =p ;};

// SetOrder sets the order of the series
func (_cgc ScatterChartSeries )SetOrder (idx uint32 ){_cgc ._bcce .Order .ValAttr =idx };

// InitializeDefaults initializes an area series to the default values.
func (_ac AreaChartSeries )InitializeDefaults (){};

// AddSeries adds a default series to a bar chart.
func (_ad BarChart )AddSeries ()BarChartSeries {_ce :=_ad .nextColor (len (_ad ._eb .Ser ));_beg :=_d .NewCT_BarSer ();_ad ._eb .Ser =append (_ad ._eb .Ser ,_beg );_beg .Idx .ValAttr =uint32 (len (_ad ._eb .Ser )-1);_beg .Order .ValAttr =uint32 (len (_ad ._eb .Ser )-1);_fd :=BarChartSeries {_beg };_fd .InitializeDefaults ();_fd .Properties ().SetSolidFill (_ce );return _fd ;};

// AddSeries adds a default series to a line chart.
func (_acc Line3DChart )AddSeries ()LineChartSeries {_dcd :=_acc .nextColor (len (_acc ._dcg .Ser ));_fef :=_d .NewCT_LineSer ();_acc ._dcg .Ser =append (_acc ._dcg .Ser ,_fef );_fef .Idx .ValAttr =uint32 (len (_acc ._dcg .Ser )-1);_fef .Order .ValAttr =uint32 (len (_acc ._dcg .Ser )-1);_gbgg :=LineChartSeries {_fef };_gbgg .InitializeDefaults ();_gbgg .Properties ().LineProperties ().SetSolidFill (_dcd );_gbgg .Properties ().SetSolidFill (_dcd );return _gbgg ;};func MakeCategoryAxis (x *_d .CT_CatAx )CategoryAxis {return CategoryAxis {x }};func (_gdaf DateAxis )Properties ()_gcc .ShapeProperties {if _gdaf ._bbg .SpPr ==nil {_gdaf ._bbg .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_gdaf ._bbg .SpPr );};

// CategoryAxis returns the category data source.
func (_beb BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _beb ._gge .XVal ==nil {_beb ._gge .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_beb ._gge .XVal );};func (_efde ValueAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_efde ._edbb .MajorTickMark =nil ;}else {_efde ._edbb .MajorTickMark =_d .NewCT_TickMark ();_efde ._edbb .MajorTickMark .ValAttr =m ;};};func (_bdeb ValueAxis )SetCrosses (axis Axis ){_bdeb ._edbb .CrossAx .ValAttr =axis .AxisID ()};

// SetText sets the series text
func (_adad ScatterChartSeries )SetText (s string ){_adad ._bcce .Tx =_d .NewCT_SerTx ();_adad ._bcce .Tx .Choice .V =&s ;};var _fcc =[]_gcb .Color {_gcb .RGB (0x33,0x66,0xcc),_gcb .RGB (0xDC,0x39,0x12),_gcb .RGB (0xFF,0x99,0x00),_gcb .RGB (0x10,0x96,0x18),_gcb .RGB (0x99,0x00,0x99),_gcb .RGB (0x3B,0x3E,0xAC),_gcb .RGB (0x00,0x99,0xC6),_gcb .RGB (0xDD,0x44,0x77),_gcb .RGB (0x66,0xAA,0x00),_gcb .RGB (0xB8,0x2E,0x2E),_gcb .RGB (0x31,0x63,0x95),_gcb .RGB (0x99,0x44,0x99),_gcb .RGB (0x22,0xAA,0x99),_gcb .RGB (0xAA,0xAA,0x11),_gcb .RGB (0x66,0x33,0xCC),_gcb .RGB (0xE6,0x73,0x00),_gcb .RGB (0x8B,0x07,0x07),_gcb .RGB (0x32,0x92,0x62),_gcb .RGB (0x55,0x74,0xA6),_gcb .RGB (0x3B,0x3E,0xAC)};func (_fgg ScatterChartSeries )SetSmooth (b bool ){_fgg ._bcce .Smooth =_d .NewCT_Boolean ();_fgg ._bcce .Smooth .ValAttr =&b ;};

// AddTitle sets a new title on the chart.
func (_fgf Chart )AddTitle ()Title {_fgf ._da .Chart .Title =_d .NewCT_Title ();_fgf ._da .Chart .Title .Overlay =_d .NewCT_Boolean ();_fgf ._da .Chart .Title .Overlay .ValAttr =_a .Bool (false );_fgf ._da .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();_fgf ._da .Chart .AutoTitleDeleted .ValAttr =_a .Bool (false );_ggf :=MakeTitle (_fgf ._da .Chart .Title );_ggf .InitializeDefaults ();return _ggf ;};func MakeTitle (x *_d .CT_Title )Title {return Title {x }};

// X returns the inner wrapped XML type.
func (_cdgg SurfaceChartSeries )X ()*_d .CT_SurfaceSer {return _cdgg ._cdb };func MakeNumberDataSource (x *_d .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// Marker returns the marker properties.
func (_caaa ScatterChartSeries )Marker ()Marker {if _caaa ._bcce .Marker ==nil {_caaa ._bcce .Marker =_d .NewCT_Marker ();};return MakeMarker (_caaa ._bcce .Marker );};

// CategoryAxis returns the category data source.
func (_cb BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cb ._aeg .Cat ==nil {_cb ._aeg .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_cb ._aeg .Cat );};func (_ag CategoryAxis )InitializeDefaults (){_ag .SetPosition (_d .ST_AxPosB );_ag .SetMajorTickMark (_d .ST_TickMarkOut );_ag .SetMinorTickMark (_d .ST_TickMarkIn );_ag .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_ag .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gcb .LightGray );_ag .Properties ().LineProperties ().SetSolidFill (_gcb .Black );};func (_daa Surface3DChart )InitializeDefaults (){_daa ._dbbc .Wireframe =_d .NewCT_Boolean ();_daa ._dbbc .Wireframe .ValAttr =_a .Bool (false );_daa ._dbbc .BandFmts =_d .NewCT_BandFmts ();for _cda :=0;_cda < 15;_cda ++{_ggc :=_d .NewCT_BandFmt ();_ggc .Idx .ValAttr =uint32 (_cda );_ggc .SpPr =_dde .NewCT_ShapeProperties ();_ggdf :=_gcc .MakeShapeProperties (_ggc .SpPr );_ggdf .SetSolidFill (_daa .nextColor (_cda ));_daa ._dbbc .BandFmts .BandFmt =append (_daa ._dbbc .BandFmts .BandFmt ,_ggc );};};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_eaf PieChartSeries )SetExplosion (v uint32 ){_eaf ._cfea .Explosion =_d .NewCT_UnsignedInt ();_eaf ._cfea .Explosion .ValAttr =v ;};

// Index returns the index of the series
func (_bcceg ScatterChartSeries )Index ()uint32 {return _bcceg ._bcce .Idx .ValAttr };

// AddSeries adds a default series to an area chart.
func (_gf Area3DChart )AddSeries ()AreaChartSeries {_gg :=_gf .nextColor (len (_gf ._e .Ser ));_gd :=_d .NewCT_AreaSer ();_gf ._e .Ser =append (_gf ._e .Ser ,_gd );_gd .Idx .ValAttr =uint32 (len (_gf ._e .Ser )-1);_gd .Order .ValAttr =uint32 (len (_gf ._e .Ser )-1);_ab :=AreaChartSeries {_gd };_ab .InitializeDefaults ();_ab .Properties ().SetSolidFill (_gg );return _ab ;};

// AddAxis adds an axis to a line chart.
func (_cgf Line3DChart )AddAxis (axis Axis ){_ecd :=_d .NewCT_UnsignedInt ();_ecd .ValAttr =axis .AxisID ();_cgf ._dcg .AxId =append (_cgf ._dcg .AxId ,_ecd );};

// InitializeDefaults the Bubble chart to its defaults
func (_gbb BubbleChart )InitializeDefaults (){};func (_fabb Marker )Properties ()_gcc .ShapeProperties {if _fabb ._ddb .SpPr ==nil {_fabb ._ddb .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_fabb ._ddb .SpPr );};

// X returns the inner wrapped XML type.
func (_fa Bar3DChart )X ()*_d .CT_Bar3DChart {return _fa ._gdab };

// X returns the inner wrapped XML type.
func (_cgd Title )X ()*_d .CT_Title {return _cgd ._cee };

// AddSeries adds a default series to a Surface chart.
func (_abaf SurfaceChart )AddSeries ()SurfaceChartSeries {_dbbe :=_abaf .nextColor (len (_abaf ._abbf .Ser ));_dbcd :=_d .NewCT_SurfaceSer ();_abaf ._abbf .Ser =append (_abaf ._abbf .Ser ,_dbcd );_dbcd .Idx .ValAttr =uint32 (len (_abaf ._abbf .Ser )-1);_dbcd .Order .ValAttr =uint32 (len (_abaf ._abbf .Ser )-1);_eeff :=SurfaceChartSeries {_dbcd };_eeff .InitializeDefaults ();_eeff .Properties ().LineProperties ().SetSolidFill (_dbbe );return _eeff ;};

// X returns the inner wrapped XML type.
func (_cdfa RadarChartSeries )X ()*_d .CT_RadarSer {return _cdfa ._bdb };

// X returns the inner wrapped XML type.
func (_bfe DateAxis )X ()*_d .CT_DateAx {return _bfe ._bbg };

// Values returns the value data source.
func (_fdg BarChartSeries )Values ()NumberDataSource {if _fdg ._aeg .Val ==nil {_fdg ._aeg .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_fdg ._aeg .Val );};

// X returns the inner wrapped XML type.
func (_cc AreaChart )X ()*_d .CT_AreaChart {return _cc ._ca };

// RemoveLegend removes the legend if the chart has one.
func (_gfc Chart )RemoveLegend (){_gfc ._da .Chart .Legend =nil };func (_gbc CategoryAxis )SetCrosses (axis Axis ){_gbc ._def .Choice =_d .NewEG_AxSharedChoice ();_gbc ._def .Choice .Crosses =_d .NewCT_Crosses ();_gbc ._def .Choice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;_gbc ._def .CrossAx .ValAttr =axis .AxisID ();};

// AddSeries adds a default series to a Stock chart.
func (_agc StockChart )AddSeries ()LineChartSeries {_egdc :=_d .NewCT_LineSer ();_agc ._ggd .Ser =append (_agc ._ggd .Ser ,_egdc );_egdc .Idx .ValAttr =uint32 (len (_agc ._ggd .Ser )-1);_egdc .Order .ValAttr =uint32 (len (_agc ._ggd .Ser )-1);_fgbb :=LineChartSeries {_egdc };_fgbb .Values ().CreateEmptyNumberCache ();_fgbb .Properties ().LineProperties ().SetNoFill ();return _fgbb ;};

// Index returns the index of the series
func (_dcf LineChartSeries )Index ()uint32 {return _dcf ._dcb .Idx .ValAttr };

// X returns the inner wrapped XML type.
func (_aage Pie3DChart )X ()*_d .CT_Pie3DChart {return _aage ._aag };func (_faa ScatterChartSeries )Values ()NumberDataSource {if _faa ._bcce .YVal ==nil {_faa ._bcce .YVal =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_faa ._bcce .YVal );};func (_cdde ValueAxis )AxisID ()uint32 {return _cdde ._edbb .AxId .ValAttr };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_ddef Chart )AddBar3DChart ()Bar3DChart {_ef (_ddef ._da .Chart );_ddf :=_d .NewCT_PlotAreaChoice ();_ddef ._da .Chart .PlotArea .Choice =append (_ddef ._da .Chart .PlotArea .Choice ,_ddf );_ddf .Bar3DChart =_d .NewCT_Bar3DChart ();_ddf .Bar3DChart .Grouping =_d .NewCT_BarGrouping ();_ddf .Bar3DChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_dee :=Bar3DChart {_gdab :_ddf .Bar3DChart };_dee .InitializeDefaults ();return _dee ;};

// Marker returns the marker properties.
func (_cbca LineChartSeries )Marker ()Marker {if _cbca ._dcb .Marker ==nil {_cbca ._dcb .Marker =_d .NewCT_Marker ();};return MakeMarker (_cbca ._dcb .Marker );};

// X returns the inner wrapped XML type.
func (_egf Line3DChart )X ()*_d .CT_Line3DChart {return _egf ._dcg };

// InitializeDefaults initializes an Radar series to the default values.
func (_bbeg RadarChartSeries )InitializeDefaults (){};

// InitializeDefaults the bar chart to its defaults
func (_c Area3DChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_acbd Surface3DChart )X ()*_d .CT_Surface3DChart {return _acbd ._dbbc };

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_dcb *_d .CT_LineSer };func (_cdf CategoryAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_cdf ._def .MinorTickMark =nil ;}else {_cdf ._def .MinorTickMark =_d .NewCT_TickMark ();_cdf ._def .MinorTickMark .ValAttr =m ;};};

// AddStockChart adds a new stock chart.
func (_bg Chart )AddStockChart ()StockChart {_cbc :=_d .NewCT_PlotAreaChoice ();_bg ._da .Chart .PlotArea .Choice =append (_bg ._da .Chart .PlotArea .Choice ,_cbc );_cbc .StockChart =_d .NewCT_StockChart ();_ecf :=StockChart {_ggd :_cbc .StockChart };_ecf .InitializeDefaults ();return _ecf ;};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_gda *_d .CT_AreaSer };

// AddDateAxis adds a value axis to the chart.
func (_ced Chart )AddDateAxis ()DateAxis {_adg :=_d .NewCT_DateAx ();if _ced ._da .Chart .PlotArea .CChoice ==nil {_ced ._da .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_adg .AxId =_d .NewCT_UnsignedInt ();_adg .AxId .ValAttr =0x7FFFFFFF&_ga .Uint32 ();_ced ._da .Chart .PlotArea .CChoice .DateAx =append (_ced ._da .Chart .PlotArea .CChoice .DateAx ,_adg );_adg .Delete =_d .NewCT_Boolean ();_adg .Delete .ValAttr =_a .Bool (false );_adg .Scaling =_d .NewCT_Scaling ();_adg .Scaling .Orientation =_d .NewCT_Orientation ();_adg .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_adg .Choice =&_d .EG_AxSharedChoice {};_adg .Choice .Crosses =_d .NewCT_Crosses ();_adg .Choice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;_bgb :=DateAxis {_adg };_bgb .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_gcb .LightGray );_bgb .SetMajorTickMark (_d .ST_TickMarkOut );_bgb .SetMinorTickMark (_d .ST_TickMarkIn );_bgb .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_bgb .Properties ().LineProperties ().SetSolidFill (_gcb .Black );_bgb .SetPosition (_d .ST_AxPosL );return _bgb ;};func (_ceac chartBase )nextColor (_afb int )_gcb .Color {return _fcc [_afb %len (_fcc )]};var NullAxis Axis =nullAxis (0);func (_edb LineChartSeries )InitializeDefaults (){_edb .Properties ().LineProperties ().SetWidth (1*_gc .Point );_edb .Properties ().LineProperties ().SetSolidFill (_gcb .Black );_edb .Properties ().LineProperties ().SetJoin (_gcc .LineJoinRound );_edb .Marker ().SetSymbol (_d .ST_MarkerStyleNone );_edb .Labels ().SetShowLegendKey (false );_edb .Labels ().SetShowValue (false );_edb .Labels ().SetShowPercent (false );_edb .Labels ().SetShowCategoryName (false );_edb .Labels ().SetShowSeriesName (false );_edb .Labels ().SetShowLeaderLines (false );};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_bcce *_d .CT_ScatterSer };func (_df DateAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_df ._bbg .MajorTickMark =nil ;}else {_df ._bbg .MajorTickMark =_d .NewCT_TickMark ();_df ._bbg .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_bgd PieChart )X ()*_d .CT_PieChart {return _bgd ._egac };

// AddSeries adds a default series to a Surface chart.
func (_cdd Surface3DChart )AddSeries ()SurfaceChartSeries {_gefd :=_cdd .nextColor (len (_cdd ._dbbc .Ser ));_fgbe :=_d .NewCT_SurfaceSer ();_cdd ._dbbc .Ser =append (_cdd ._dbbc .Ser ,_fgbe );_fgbe .Idx .ValAttr =uint32 (len (_cdd ._dbbc .Ser )-1);_fgbe .Order .ValAttr =uint32 (len (_cdd ._dbbc .Ser )-1);_ggac :=SurfaceChartSeries {_fgbe };_ggac .InitializeDefaults ();_ggac .Properties ().LineProperties ().SetSolidFill (_gefd );return _ggac ;};

// RemoveTitle removes any existing title from the chart.
func (_adc Chart )RemoveTitle (){_adc ._da .Chart .Title =nil ;_adc ._da .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();_adc ._da .Chart .AutoTitleDeleted .ValAttr =_a .Bool (true );};

// AddAreaChart adds a new area chart to a chart.
func (_bdf Chart )AddAreaChart ()AreaChart {_dag :=_d .NewCT_PlotAreaChoice ();_bdf ._da .Chart .PlotArea .Choice =append (_bdf ._da .Chart .PlotArea .Choice ,_dag );_dag .AreaChart =_d .NewCT_AreaChart ();_defg :=AreaChart {_ca :_dag .AreaChart };_defg .InitializeDefaults ();return _defg ;};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_fffd Chart )AddDoughnutChart ()DoughnutChart {_debb :=_d .NewCT_PlotAreaChoice ();_fffd ._da .Chart .PlotArea .Choice =append (_fffd ._da .Chart .PlotArea .Choice ,_debb );_debb .DoughnutChart =_d .NewCT_DoughnutChart ();_dbb :=DoughnutChart {_dbe :_debb .DoughnutChart };_dbb .InitializeDefaults ();return _dbb ;};

// CategoryAxis returns the category data source.
func (_gbd AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gbd ._gda .Cat ==nil {_gbd ._gda .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_gbd ._gda .Cat );};

// Order returns the order of the series
func (_baag LineChartSeries )Order ()uint32 {return _baag ._dcb .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_fabd SeriesAxis )X ()*_d .CT_SerAx {return _fabd ._dgc };

// InitializeDefaults the bar chart to its defaults
func (_dbeb Pie3DChart )InitializeDefaults (){_dbeb ._aag .VaryColors =_d .NewCT_Boolean ();_dbeb ._aag .VaryColors .ValAttr =_a .Bool (true );};

// SetType sets the type the secone pie to either pie or bar
func (_bde PieOfPieChart )SetType (t _d .ST_OfPieType ){_bde ._aad .OfPieType .ValAttr =t };

// AddArea3DChart adds a new area chart to a chart.
func (_abea Chart )AddArea3DChart ()Area3DChart {_ef (_abea ._da .Chart );_gga :=_d .NewCT_PlotAreaChoice ();_abea ._da .Chart .PlotArea .Choice =append (_abea ._da .Chart .PlotArea .Choice ,_gga );_gga .Area3DChart =_d .NewCT_Area3DChart ();_gdf :=Area3DChart {_e :_gga .Area3DChart };_gdf .InitializeDefaults ();return _gdf ;};func (_ffae SurfaceChartSeries )InitializeDefaults (){_ffae .Properties ().LineProperties ().SetWidth (1*_gc .Point );_ffae .Properties ().LineProperties ().SetSolidFill (_gcb .Black );_ffae .Properties ().LineProperties ().SetJoin (_gcc .LineJoinRound );};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_cdgf Chart )AddSurface3DChart ()Surface3DChart {_ead :=_d .NewCT_PlotAreaChoice ();_cdgf ._da .Chart .PlotArea .Choice =append (_cdgf ._da .Chart .PlotArea .Choice ,_ead );_ead .Surface3DChart =_d .NewCT_Surface3DChart ();_ef (_cdgf ._da .Chart );_gfdd :=Surface3DChart {_dbbc :_ead .Surface3DChart };_gfdd .InitializeDefaults ();return _gfdd ;};func (_abb ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _abb ._bcce .XVal ==nil {_abb ._bcce .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_abb ._bcce .XVal );};type nullAxis byte ;func (_abe AreaChart )AddAxis (axis Axis ){_bc :=_d .NewCT_UnsignedInt ();_bc .ValAttr =axis .AxisID ();_abe ._ca .AxId =append (_abe ._ca .AxId ,_bc );};func (_gcde Marker )SetSize (sz uint8 ){_gcde ._ddb .Size =_d .NewCT_MarkerSize ();_gcde ._ddb .Size .ValAttr =&sz ;};func (_gffg Title )ParagraphProperties ()_gcc .ParagraphProperties {if _gffg ._cee .Tx ==nil {_gffg .SetText ("");};if _gffg ._cee .Tx .Choice .Rich .P [0].PPr ==nil {_gffg ._cee .Tx .Choice .Rich .P [0].PPr =_dde .NewCT_TextParagraphProperties ();};return _gcc .MakeParagraphProperties (_gffg ._cee .Tx .Choice .Rich .P [0].PPr );};func (_gcg GridLines )Properties ()_gcc .ShapeProperties {if _gcg ._cbb .SpPr ==nil {_gcg ._cbb .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_gcg ._cbb .SpPr );};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_gdab *_d .CT_Bar3DChart ;};func (_fdcf SeriesAxis )AxisID ()uint32 {return _fdcf ._dgc .AxId .ValAttr };func (_adee RadarChart )AddAxis (axis Axis ){_bag :=_d .NewCT_UnsignedInt ();_bag .ValAttr =axis .AxisID ();_adee ._faf .AxId =append (_adee ._faf .AxId ,_bag );};

// Properties returns the Bubble chart series shape properties.
func (_debc BubbleChartSeries )Properties ()_gcc .ShapeProperties {if _debc ._gge .SpPr ==nil {_debc ._gge .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_debc ._gge .SpPr );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_bee BarChart )SetDirection (d _d .ST_BarDir ){_bee ._eb .BarDir .ValAttr =d };

// InitializeDefaults the bar chart to its defaults
func (_aba AreaChart )InitializeDefaults (){};

// AddCategoryAxis adds a category axis.
func (_aac Chart )AddCategoryAxis ()CategoryAxis {_gece :=_d .NewCT_CatAx ();if _aac ._da .Chart .PlotArea .CChoice ==nil {_aac ._da .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_gece .AxId =_d .NewCT_UnsignedInt ();_gece .AxId .ValAttr =0x7FFFFFFF&_ga .Uint32 ();_aac ._da .Chart .PlotArea .CChoice .CatAx =append (_aac ._da .Chart .PlotArea .CChoice .CatAx ,_gece );_gece .Auto =_d .NewCT_Boolean ();_gece .Auto .ValAttr =_a .Bool (true );_gece .Delete =_d .NewCT_Boolean ();_gece .Delete .ValAttr =_a .Bool (false );_cea :=MakeCategoryAxis (_gece );_cea .InitializeDefaults ();return _cea ;};func (_egd CategoryAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_egd ._def .MajorTickMark =nil ;}else {_egd ._def .MajorTickMark =_d .NewCT_TickMark ();_egd ._def .MajorTickMark .ValAttr =m ;};};type NumberDataSource struct{_afa *_d .CT_NumDataSource };

// Properties returns the bar chart series shape properties.
func (_bd BarChartSeries )Properties ()_gcc .ShapeProperties {if _bd ._aeg .SpPr ==nil {_bd ._aeg .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_bd ._aeg .SpPr );};func (_dfd SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dfd ._cdb .Cat ==nil {_dfd ._cdb .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_dfd ._cdb .Cat );};

// Properties returns the bar chart series shape properties.
func (_bcc RadarChartSeries )Properties ()_gcc .ShapeProperties {if _bcc ._bdb .SpPr ==nil {_bcc ._bdb .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_bcc ._bdb .SpPr );};

// X returns the inner wrapped XML type.
func (_bbdd SurfaceChart )X ()*_d .CT_SurfaceChart {return _bbdd ._abbf };

// Properties returns the line chart series shape properties.
func (_edbd SurfaceChartSeries )Properties ()_gcc .ShapeProperties {if _edbd ._cdb .SpPr ==nil {_edbd ._cdb .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_edbd ._cdb .SpPr );};func (_gde DateAxis )SetCrosses (axis Axis ){_gde ._bbg .CrossAx .ValAttr =axis .AxisID ()};

// Properties returns the bar chart series shape properties.
func (_dgb PieChartSeries )Properties ()_gcc .ShapeProperties {if _dgb ._cfea .SpPr ==nil {_dgb ._cfea .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_dgb ._cfea .SpPr );};

// AddSeries adds a default series to an Pie chart.
func (_afc PieOfPieChart )AddSeries ()PieChartSeries {_eef :=_d .NewCT_PieSer ();_afc ._aad .Ser =append (_afc ._aad .Ser ,_eef );_eef .Idx .ValAttr =uint32 (len (_afc ._aad .Ser )-1);_eef .Order .ValAttr =uint32 (len (_afc ._aad .Ser )-1);_bcfa :=PieChartSeries {_eef };_bcfa .InitializeDefaults ();return _bcfa ;};

// Values returns the value data source.
func (_cfg BubbleChartSeries )Values ()NumberDataSource {if _cfg ._gge .YVal ==nil {_cfg ._gge .YVal =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_cfg ._gge .YVal );};

// AddSeries adds a default series to an Pie3D chart.
func (_fdc Pie3DChart )AddSeries ()PieChartSeries {_ega :=_d .NewCT_PieSer ();_fdc ._aag .Ser =append (_fdc ._aag .Ser ,_ega );_ega .Idx .ValAttr =uint32 (len (_fdc ._aag .Ser )-1);_ega .Order .ValAttr =uint32 (len (_fdc ._aag .Ser )-1);_gfce :=PieChartSeries {_ega };_gfce .InitializeDefaults ();return _gfce ;};func (_agda Legend )SetPosition (p _d .ST_LegendPos ){if p ==_d .ST_LegendPosUnset {_agda ._cga .LegendPos =nil ;}else {_agda ._cga .LegendPos =_d .NewCT_LegendPos ();_agda ._cga .LegendPos .ValAttr =p ;};};func (_ec nullAxis )AxisID ()uint32 {return 0};

// SetText sets the series text.
func (_ffe AreaChartSeries )SetText (s string ){_ffe ._gda .Tx =_d .NewCT_SerTx ();_ffe ._gda .Tx .Choice .V =&s ;};type LineChart struct{chartBase ;_bfa *_d .CT_LineChart ;};func (_agdc ValueAxis )SetPosition (p _d .ST_AxPos ){_agdc ._edbb .AxPos =_d .NewCT_AxPos ();_agdc ._edbb .AxPos .ValAttr =p ;};func (_caac ValueAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_caac ._edbb .MinorTickMark =nil ;}else {_caac ._edbb .MinorTickMark =_d .NewCT_TickMark ();_caac ._edbb .MinorTickMark .ValAttr =m ;};};

// SetOrder sets the order of the series
func (_adcd SurfaceChartSeries )SetOrder (idx uint32 ){_adcd ._cdb .Order .ValAttr =idx };func (_fbd DataLabels )ensureChoice (){if _fbd ._bgf .Choice ==nil {_fbd ._bgf .Choice =_d .NewCT_DLblsChoice ();};};type SurfaceChartSeries struct{_cdb *_d .CT_SurfaceSer };

// X returns the inner wrapped XML type.
func (_fag DoughnutChart )X ()*_d .CT_DoughnutChart {return _fag ._dbe };func (_aacb Title )RunProperties ()_gcc .RunProperties {if _aacb ._cee .Tx ==nil {_aacb .SetText ("");};if _aacb ._cee .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_aacb ._cee .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_dde .NewCT_TextCharacterProperties ();};return _gcc .MakeRunProperties (_aacb ._cee .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func (_gdc BubbleChart )AddAxis (axis Axis ){_fda :=_d .NewCT_UnsignedInt ();_fda .ValAttr =axis .AxisID ();_gdc ._ede .AxId =append (_gdc ._ede .AxId ,_fda );};func (_efa ValueAxis )MajorGridLines ()GridLines {if _efa ._edbb .MajorGridlines ==nil {_efa ._edbb .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_efa ._edbb .MajorGridlines };};type ScatterChart struct{chartBase ;_eeb *_d .CT_ScatterChart ;};func (_bbd CategoryAxis )AxisID ()uint32 {return _bbd ._def .AxId .ValAttr };

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_egac *_d .CT_PieChart ;};

// AddSeries adds a default series to a line chart.
func (_accd LineChart )AddSeries ()LineChartSeries {_gff :=_accd .nextColor (len (_accd ._bfa .Ser ));_eda :=_d .NewCT_LineSer ();_accd ._bfa .Ser =append (_accd ._bfa .Ser ,_eda );_eda .Idx .ValAttr =uint32 (len (_accd ._bfa .Ser )-1);_eda .Order .ValAttr =uint32 (len (_accd ._bfa .Ser )-1);_dbac :=LineChartSeries {_eda };_dbac .InitializeDefaults ();_dbac .Properties ().LineProperties ().SetSolidFill (_gff );return _dbac ;};func (_dca Title )SetText (s string ){if _dca ._cee .Tx ==nil {_dca ._cee .Tx =_d .NewCT_Tx ();};if _dca ._cee .Tx .Choice .Rich ==nil {_dca ._cee .Tx .Choice .Rich =_dde .NewCT_TextBody ();};var _ebgc *_dde .CT_TextParagraph ;if len (_dca ._cee .Tx .Choice .Rich .P )==0{_ebgc =_dde .NewCT_TextParagraph ();_dca ._cee .Tx .Choice .Rich .P =[]*_dde .CT_TextParagraph {_ebgc };}else {_ebgc =_dca ._cee .Tx .Choice .Rich .P [0];};var _fdd *_dde .EG_TextRun ;if len (_ebgc .EG_TextRun )==0{_fdd =_dde .NewEG_TextRun ();_ebgc .EG_TextRun =[]*_dde .EG_TextRun {_fdd };}else {_fdd =_ebgc .EG_TextRun [0];};if _fdd .R ==nil {_fdd .R =_dde .NewCT_RegularTextRun ();};_fdd .R .T =s ;};func (_aef Legend )SetOverlay (b bool ){_aef ._cga .Overlay =_d .NewCT_Boolean ();_aef ._cga .Overlay .ValAttr =_a .Bool (b );};type Title struct{_cee *_d .CT_Title };

// CategoryAxis returns the category data source.
func (_dad RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dad ._bdb .Cat ==nil {_dad ._bdb .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_dad ._bdb .Cat );};

// X returns the inner wrapped XML type.
func (_bdff StockChart )X ()*_d .CT_StockChart {return _bdff ._ggd };

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_ebg BubbleChartSeries )InitializeDefaults (){};

// AddSeries adds a default series to an area chart.
func (_b AreaChart )AddSeries ()AreaChartSeries {_ff :=_b .nextColor (len (_b ._ca .Ser ));_db :=_d .NewCT_AreaSer ();_b ._ca .Ser =append (_b ._ca .Ser ,_db );_db .Idx .ValAttr =uint32 (len (_b ._ca .Ser )-1);_db .Order .ValAttr =uint32 (len (_b ._ca .Ser )-1);_ae :=AreaChartSeries {_db };_ae .InitializeDefaults ();_ae .Properties ().SetSolidFill (_ff );return _ae ;};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_gbgc Chart )AddLegend ()Legend {_gbgc ._da .Chart .Legend =_d .NewCT_Legend ();_gef :=MakeLegend (_gbgc ._da .Chart .Legend );_gef .InitializeDefaults ();return _gef ;};

// SetIndex sets the index of the series
func (_agb ScatterChartSeries )SetIndex (idx uint32 ){_agb ._bcce .Idx .ValAttr =idx };

// InitializeDefaults the Stock chart to its defaults
func (_eag StockChart )InitializeDefaults (){_eag ._ggd .HiLowLines =_d .NewCT_ChartLines ();_eag ._ggd .UpDownBars =_d .NewCT_UpDownBars ();_eag ._ggd .UpDownBars .GapWidth =_d .NewCT_GapAmount ();_eag ._ggd .UpDownBars .GapWidth .ValAttr =&_d .ST_GapAmount {};_eag ._ggd .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_a .Uint16 (150);_eag ._ggd .UpDownBars .UpBars =_d .NewCT_UpDownBar ();_eag ._ggd .UpDownBars .DownBars =_d .NewCT_UpDownBar ();};func (_fgbbe ValueAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_fgbbe ._edbb .TickLblPos =nil ;}else {_fgbbe ._edbb .TickLblPos =_d .NewCT_TickLblPos ();_fgbbe ._edbb .TickLblPos .ValAttr =p ;};};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_ebe CategoryAxisDataSource )SetLabelReference (s string ){_ebe ._aff .Choice =_d .NewCT_AxDataSourceChoice ();_ebe ._aff .Choice .StrRef =_d .NewCT_StrRef ();_ebe ._aff .Choice .StrRef .F =s ;};

// Properties returns the chart's shape properties.
func (_bcf Chart )Properties ()_gcc .ShapeProperties {if _bcf ._da .SpPr ==nil {_bcf ._da .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_bcf ._da .SpPr );};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_dbbc *_d .CT_Surface3DChart ;};func (_gaae DataLabels )SetShowCategoryName (b bool ){_gaae .ensureChoice ();_gaae ._bgf .Choice .ShowCatName =_d .NewCT_Boolean ();_gaae ._bgf .Choice .ShowCatName .ValAttr =_a .Bool (b );};func MakeChart (x *_d .ChartSpace )Chart {return Chart {x }};

// Values returns the value data source.
func (_ffaa PieChartSeries )Values ()NumberDataSource {if _ffaa ._cfea .Val ==nil {_ffaa ._cfea .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ffaa ._cfea .Val );};func (_gfa ScatterChartSeries )InitializeDefaults (){_gfa .Properties ().LineProperties ().SetNoFill ();_gfa .Marker ().SetSymbol (_d .ST_MarkerStyleAuto );_gfa .Labels ().SetShowLegendKey (false );_gfa .Labels ().SetShowValue (true );_gfa .Labels ().SetShowPercent (false );_gfa .Labels ().SetShowCategoryName (false );_gfa .Labels ().SetShowSeriesName (false );_gfa .Labels ().SetShowLeaderLines (false );};

// Order returns the order of the series
func (_edec ScatterChartSeries )Order ()uint32 {return _edec ._bcce .Order .ValAttr };

// SetText sets the series text.
func (_cd BubbleChartSeries )SetText (s string ){_cd ._gge .Tx =_d .NewCT_SerTx ();_cd ._gge .Tx .Choice .V =&s ;};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_aff *_d .CT_AxDataSource };func (_cag Chart )AddSeriesAxis ()SeriesAxis {_ffc :=_d .NewCT_SerAx ();if _cag ._da .Chart .PlotArea .CChoice ==nil {_cag ._da .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_ffc .AxId =_d .NewCT_UnsignedInt ();_ffc .AxId .ValAttr =0x7FFFFFFF&_ga .Uint32 ();_cag ._da .Chart .PlotArea .CChoice .SerAx =append (_cag ._da .Chart .PlotArea .CChoice .SerAx ,_ffc );_ffc .Delete =_d .NewCT_Boolean ();_ffc .Delete .ValAttr =_a .Bool (false );_ffef :=MakeSeriesAxis (_ffc );_ffef .InitializeDefaults ();return _ffef ;};type DateAxis struct{_bbg *_d .CT_DateAx };

// Labels returns the data label properties.
func (_ggb ScatterChartSeries )Labels ()DataLabels {if _ggb ._bcce .DLbls ==nil {_ggb ._bcce .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_ggb ._bcce .DLbls );};

// AddAxis adds an axis to a Surface chart.
func (_febf Surface3DChart )AddAxis (axis Axis ){_dfg :=_d .NewCT_UnsignedInt ();_dfg .ValAttr =axis .AxisID ();_febf ._dbbc .AxId =append (_febf ._dbbc .AxId ,_dfg );};func (_afeg SeriesAxis )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_cf BarChart )X ()*_d .CT_BarChart {return _cf ._eb };func (_abfd StockChart )AddAxis (axis Axis ){_bafa :=_d .NewCT_UnsignedInt ();_bafa .ValAttr =axis .AxisID ();_abfd ._ggd .AxId =append (_abfd ._ggd .AxId ,_bafa );};func (_dgd ValueAxis )Properties ()_gcc .ShapeProperties {if _dgd ._edbb .SpPr ==nil {_dgd ._edbb .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_dgd ._edbb .SpPr );};func (_afbg NumberDataSource )SetReference (s string ){_afbg .ensureChoice ();if _afbg ._afa .Choice .NumRef ==nil {_afbg ._afa .Choice .NumRef =_d .NewCT_NumRef ();};_afbg ._afa .Choice .NumRef .F =s ;};

// InitializeDefaults initializes a bar chart series to the default values.
func (_fff BarChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_abc RadarChart )X ()*_d .CT_RadarChart {return _abc ._faf };func (_bbf DataLabels )SetShowSeriesName (b bool ){_bbf .ensureChoice ();_bbf ._bgf .Choice .ShowSerName =_d .NewCT_Boolean ();_bbf ._bgf .Choice .ShowSerName .ValAttr =_a .Bool (b );};type SeriesAxis struct{_dgc *_d .CT_SerAx };func (_ebed DateAxis )AxisID ()uint32 {return _ebed ._bbg .AxId .ValAttr };

// AddSeries adds a default series to an Radar chart.
func (_dea RadarChart )AddSeries ()RadarChartSeries {_afef :=_dea .nextColor (len (_dea ._faf .Ser ));_abeg :=_d .NewCT_RadarSer ();_dea ._faf .Ser =append (_dea ._faf .Ser ,_abeg );_abeg .Idx .ValAttr =uint32 (len (_dea ._faf .Ser )-1);_abeg .Order .ValAttr =uint32 (len (_dea ._faf .Ser )-1);_bab :=RadarChartSeries {_abeg };_bab .InitializeDefaults ();_bab .Properties ().SetSolidFill (_afef );return _bab ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_d .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_gce DoughnutChart )SetHoleSize (pct uint8 ){if _gce ._dbe .HoleSize ==nil {_gce ._dbe .HoleSize =_d .NewCT_HoleSize ();};if _gce ._dbe .HoleSize .ValAttr ==nil {_gce ._dbe .HoleSize .ValAttr =&_d .ST_HoleSize {};};_gce ._dbe .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};type Legend struct{_cga *_d .CT_Legend };func (_acf CategoryAxis )MajorGridLines ()GridLines {if _acf ._def .MajorGridlines ==nil {_acf ._def .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_acf ._def .MajorGridlines };};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_ea Chart )AddLine3DChart ()Line3DChart {_ef (_ea ._da .Chart );_affd :=_d .NewCT_PlotAreaChoice ();_ea ._da .Chart .PlotArea .Choice =append (_ea ._da .Chart .PlotArea .Choice ,_affd );_affd .Line3DChart =_d .NewCT_Line3DChart ();_affd .Line3DChart .Grouping =_d .NewCT_Grouping ();_affd .Line3DChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return Line3DChart {_dcg :_affd .Line3DChart };};

// X returns the inner wrapped XML type.
func (_ebfa ValueAxis )X ()*_d .CT_ValAx {return _ebfa ._edbb };

// AddSeries adds a default series to a bar chart.
func (_be Bar3DChart )AddSeries ()BarChartSeries {_ge :=_be .nextColor (len (_be ._gdab .Ser ));_dba :=_d .NewCT_BarSer ();_be ._gdab .Ser =append (_be ._gdab .Ser ,_dba );_dba .Idx .ValAttr =uint32 (len (_be ._gdab .Ser )-1);_dba .Order .ValAttr =uint32 (len (_be ._gdab .Ser )-1);_aa :=BarChartSeries {_dba };_aa .InitializeDefaults ();_aa .Properties ().SetSolidFill (_ge );return _aa ;};

// X returns the inner wrapped XML type.
func (_ffa Legend )X ()*_d .CT_Legend {return _ffa ._cga };

// Chart is a generic chart.
type Chart struct{_da *_d .ChartSpace };

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_faf *_d .CT_RadarChart ;};

// SetIndex sets the index of the series
func (_beaf SurfaceChartSeries )SetIndex (idx uint32 ){_beaf ._cdb .Idx .ValAttr =idx };func (_ebgg NumberDataSource )ensureChoice (){if _ebgg ._afa .Choice ==nil {_ebgg ._afa .Choice =_d .NewCT_NumDataSourceChoice ();};};func (_gdec Legend )Properties ()_gcc .ShapeProperties {if _gdec ._cga .SpPr ==nil {_gdec ._cga .SpPr =_dde .NewCT_ShapeProperties ();};return _gcc .MakeShapeProperties (_gdec ._cga .SpPr );};

// X returns the inner wrapped XML type.
func (_age LineChart )X ()*_d .CT_LineChart {return _age ._bfa };

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_ggd *_d .CT_StockChart ;};func MakeLegend (l *_d .CT_Legend )Legend {return Legend {l }};

// InitializeDefaults the bar chart to its defaults
func (_ddec RadarChart )InitializeDefaults (){_ddec ._faf .RadarStyle .ValAttr =_d .ST_RadarStyleMarker };

// CategoryAxis returns the category data source.
func (_afd PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _afd ._cfea .Cat ==nil {_afd ._cfea .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_afd ._cfea .Cat );};