//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_g "fmt";_d "github.com/unidoc/unioffice";_e "github.com/unidoc/unioffice/color";_ba "github.com/unidoc/unioffice/drawing";_bb "github.com/unidoc/unioffice/measurement";_ca "github.com/unidoc/unioffice/schema/soo/dml";_c "github.com/unidoc/unioffice/schema/soo/dml/chart";
_dc "math/rand";);

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_c .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};func (_bda nullAxis )AxisID ()uint32 {return 0};type CategoryAxis struct{_gd *_c .CT_CatAx };func (_afcd Title )SetText (s string ){if _afcd ._cfbc .Tx ==nil {_afcd ._cfbc .Tx =_c .NewCT_Tx ();
};if _afcd ._cfbc .Tx .Choice .Rich ==nil {_afcd ._cfbc .Tx .Choice .Rich =_ca .NewCT_TextBody ();};var _dcg *_ca .CT_TextParagraph ;if len (_afcd ._cfbc .Tx .Choice .Rich .P )==0{_dcg =_ca .NewCT_TextParagraph ();_afcd ._cfbc .Tx .Choice .Rich .P =[]*_ca .CT_TextParagraph {_dcg };
}else {_dcg =_afcd ._cfbc .Tx .Choice .Rich .P [0];};var _gef *_ca .EG_TextRun ;if len (_dcg .EG_TextRun )==0{_gef =_ca .NewEG_TextRun ();_dcg .EG_TextRun =[]*_ca .EG_TextRun {_gef };}else {_gef =_dcg .EG_TextRun [0];};if _gef .R ==nil {_gef .R =_ca .NewCT_RegularTextRun ();
};_gef .R .T =s ;};func MakeTitle (x *_c .CT_Title )Title {return Title {x }};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_ege Chart )SetDisplayBlanksAs (v _c .ST_DispBlanksAs ){_ege ._gcd .Chart .DispBlanksAs =_c .NewCT_DispBlanksAs ();_ege ._gcd .Chart .DispBlanksAs .ValAttr =v ;};

// AddDateAxis adds a value axis to the chart.
func (_gad Chart )AddDateAxis ()DateAxis {_ceg :=_c .NewCT_DateAx ();if _gad ._gcd .Chart .PlotArea .CChoice ==nil {_gad ._gcd .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_ceg .AxId =_c .NewCT_UnsignedInt ();_ceg .AxId .ValAttr =0x7FFFFFFF&_dc .Uint32 ();
_gad ._gcd .Chart .PlotArea .CChoice .DateAx =append (_gad ._gcd .Chart .PlotArea .CChoice .DateAx ,_ceg );_ceg .Delete =_c .NewCT_Boolean ();_ceg .Delete .ValAttr =_d .Bool (false );_ceg .Scaling =_c .NewCT_Scaling ();_ceg .Scaling .Orientation =_c .NewCT_Orientation ();
_ceg .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_ceg .Choice =&_c .EG_AxSharedChoice {};_ceg .Choice .Crosses =_c .NewCT_Crosses ();_ceg .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_edf :=DateAxis {_ceg };_edf .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_e .LightGray );
_edf .SetMajorTickMark (_c .ST_TickMarkOut );_edf .SetMinorTickMark (_c .ST_TickMarkIn );_edf .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_edf .Properties ().LineProperties ().SetSolidFill (_e .Black );_edf .SetPosition (_c .ST_AxPosL );return _edf ;
};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_afb *_c .CT_AxDataSource };

// Properties returns the bar chart series shape properties.
func (_abb BarChartSeries )Properties ()_ba .ShapeProperties {if _abb ._fc .SpPr ==nil {_abb ._fc .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_abb ._fc .SpPr );};func (_fabc Marker )Properties ()_ba .ShapeProperties {if _fabc ._fed .SpPr ==nil {_fabc ._fed .SpPr =_ca .NewCT_ShapeProperties ();
};return _ba .MakeShapeProperties (_fabc ._fed .SpPr );};func (_aeeg Legend )SetPosition (p _c .ST_LegendPos ){if p ==_c .ST_LegendPosUnset {_aeeg ._gec .LegendPos =nil ;}else {_aeeg ._gec .LegendPos =_c .NewCT_LegendPos ();_aeeg ._gec .LegendPos .ValAttr =p ;
};};

// AddBubbleChart adds a new bubble chart.
func (_bce Chart )AddBubbleChart ()BubbleChart {_fdfg :=_c .NewCT_PlotAreaChoice ();_bce ._gcd .Chart .PlotArea .Choice =append (_bce ._gcd .Chart .PlotArea .Choice ,_fdfg );_fdfg .BubbleChart =_c .NewCT_BubbleChart ();_bae :=BubbleChart {_efda :_fdfg .BubbleChart };
_bae .InitializeDefaults ();return _bae ;};

// AddSeries adds a default series to an Radar chart.
func (_bbb RadarChart )AddSeries ()RadarChartSeries {_aggb :=_bbb .nextColor (len (_bbb ._badd .Ser ));_gca :=_c .NewCT_RadarSer ();_bbb ._badd .Ser =append (_bbb ._badd .Ser ,_gca );_gca .Idx .ValAttr =uint32 (len (_bbb ._badd .Ser )-1);_gca .Order .ValAttr =uint32 (len (_bbb ._badd .Ser )-1);
_egg :=RadarChartSeries {_gca };_egg .InitializeDefaults ();_egg .Properties ().SetSolidFill (_aggb );return _egg ;};

// Values returns the value data source.
func (_bdaf BarChartSeries )Values ()NumberDataSource {if _bdaf ._fc .Val ==nil {_bdaf ._fc .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_bdaf ._fc .Val );};

// AddPie3DChart adds a new pie chart to a chart.
func (_cad Chart )AddPie3DChart ()Pie3DChart {_ed (_cad ._gcd .Chart );_fg :=_c .NewCT_PlotAreaChoice ();_cad ._gcd .Chart .PlotArea .Choice =append (_cad ._gcd .Chart .PlotArea .Choice ,_fg );_fg .Pie3DChart =_c .NewCT_Pie3DChart ();_fcd :=Pie3DChart {_cee :_fg .Pie3DChart };
_fcd .InitializeDefaults ();return _fcd ;};func (_cfd Marker )SetSize (sz uint8 ){_cfd ._fed .Size =_c .NewCT_MarkerSize ();_cfd ._fed .Size .ValAttr =&sz ;};func (_egd CategoryAxis )InitializeDefaults (){_egd .SetPosition (_c .ST_AxPosB );_egd .SetMajorTickMark (_c .ST_TickMarkOut );
_egd .SetMinorTickMark (_c .ST_TickMarkIn );_egd .SetTickLabelPosition (_c .ST_TickLblPosNextTo );_egd .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_e .LightGray );_egd .Properties ().LineProperties ().SetSolidFill (_e .Black );};

// AddSeries adds a default series to an area chart.
func (_f AreaChart )AddSeries ()AreaChartSeries {_bd :=_f .nextColor (len (_f ._ae .Ser ));_eba :=_c .NewCT_AreaSer ();_f ._ae .Ser =append (_f ._ae .Ser ,_eba );_eba .Idx .ValAttr =uint32 (len (_f ._ae .Ser )-1);_eba .Order .ValAttr =uint32 (len (_f ._ae .Ser )-1);
_ge :=AreaChartSeries {_eba };_ge .InitializeDefaults ();_ge .Properties ().SetSolidFill (_bd );return _ge ;};var NullAxis Axis =nullAxis (0);

// X returns the inner wrapped XML type.
func (_aabd GridLines )X ()*_c .CT_ChartLines {return _aabd ._bca };

// SetDirection changes the direction of the bar chart (bar or column).
func (_eg BarChart )SetDirection (d _c .ST_BarDir ){_eg ._ag .BarDir .ValAttr =d };

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_bad *_c .CT_Area3DChart ;};

// AddSeries adds a default series to an area chart.
func (_gc Area3DChart )AddSeries ()AreaChartSeries {_ea :=_gc .nextColor (len (_gc ._bad .Ser ));_bg :=_c .NewCT_AreaSer ();_gc ._bad .Ser =append (_gc ._bad .Ser ,_bg );_bg .Idx .ValAttr =uint32 (len (_gc ._bad .Ser )-1);_bg .Order .ValAttr =uint32 (len (_gc ._bad .Ser )-1);
_eb :=AreaChartSeries {_bg };_eb .InitializeDefaults ();_eb .Properties ().SetSolidFill (_ea );return _eb ;};func (_cfg DateAxis )SetPosition (p _c .ST_AxPos ){_cfg ._cea .AxPos =_c .NewCT_AxPos ();_cfg ._cea .AxPos .ValAttr =p ;};

// Index returns the index of the series
func (_edad SurfaceChartSeries )Index ()uint32 {return _edad ._cbg .Idx .ValAttr };type DateAxis struct{_cea *_c .CT_DateAx };func (_gcg CategoryAxis )MajorGridLines ()GridLines {if _gcg ._gd .MajorGridlines ==nil {_gcg ._gd .MajorGridlines =_c .NewCT_ChartLines ();
};return GridLines {_gcg ._gd .MajorGridlines };};func (_afbe Chart )AddSeriesAxis ()SeriesAxis {_eff :=_c .NewCT_SerAx ();if _afbe ._gcd .Chart .PlotArea .CChoice ==nil {_afbe ._gcd .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_eff .AxId =_c .NewCT_UnsignedInt ();
_eff .AxId .ValAttr =0x7FFFFFFF&_dc .Uint32 ();_afbe ._gcd .Chart .PlotArea .CChoice .SerAx =append (_afbe ._gcd .Chart .PlotArea .CChoice .SerAx ,_eff );_eff .Delete =_c .NewCT_Boolean ();_eff .Delete .ValAttr =_d .Bool (false );_ebb :=MakeSeriesAxis (_eff );
_ebb .InitializeDefaults ();return _ebb ;};

// Properties returns the bar chart series shape properties.
func (_bfc RadarChartSeries )Properties ()_ba .ShapeProperties {if _bfc ._befg .SpPr ==nil {_bfc ._befg .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_bfc ._befg .SpPr );};

// SetText sets the series text.
func (_gcfd RadarChartSeries )SetText (s string ){_gcfd ._befg .Tx =_c .NewCT_SerTx ();_gcfd ._befg .Tx .Choice .V =&s ;};

// AddAxis adds an axis to a Surface chart.
func (_adc SurfaceChart )AddAxis (axis Axis ){_gfgg :=_c .NewCT_UnsignedInt ();_gfgg .ValAttr =axis .AxisID ();_adc ._ddab .AxId =append (_adc ._ddab .AxId ,_gfgg );};

// InitializeDefaults the bar chart to its defaults
func (_bc Area3DChart )InitializeDefaults (){};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_fbcc *_c .CT_StockChart ;};

// AddSeries adds a default series to a Scatter chart.
func (_eeea ScatterChart )AddSeries ()ScatterChartSeries {_bdf :=_eeea .nextColor (len (_eeea ._ccc .Ser ));_bcc :=_c .NewCT_ScatterSer ();_eeea ._ccc .Ser =append (_eeea ._ccc .Ser ,_bcc );_bcc .Idx .ValAttr =uint32 (len (_eeea ._ccc .Ser )-1);_bcc .Order .ValAttr =uint32 (len (_eeea ._ccc .Ser )-1);
_abde :=ScatterChartSeries {_bcc };_abde .InitializeDefaults ();_abde .Marker ().Properties ().LineProperties ().SetSolidFill (_bdf );_abde .Marker ().Properties ().SetSolidFill (_bdf );return _abde ;};

// AddSurfaceChart adds a new surface chart to a chart.
func (_bga Chart )AddSurfaceChart ()SurfaceChart {_dbb :=_c .NewCT_PlotAreaChoice ();_bga ._gcd .Chart .PlotArea .Choice =append (_bga ._gcd .Chart .PlotArea .Choice ,_dbb );_dbb .SurfaceChart =_c .NewCT_SurfaceChart ();_ed (_bga ._gcd .Chart );_bga ._gcd .Chart .View3D .RotX .ValAttr =_d .Int8 (90);
_bga ._gcd .Chart .View3D .RotY .ValAttr =_d .Uint16 (0);_bga ._gcd .Chart .View3D .Perspective =_c .NewCT_Perspective ();_bga ._gcd .Chart .View3D .Perspective .ValAttr =_d .Uint8 (0);_cfb :=SurfaceChart {_ddab :_dbb .SurfaceChart };_cfb .InitializeDefaults ();
return _cfb ;};func (_dff CategoryAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_dff ._gd .TickLblPos =nil ;}else {_dff ._gd .TickLblPos =_c .NewCT_TickLblPos ();_dff ._gd .TickLblPos .ValAttr =p ;};};

// AddStockChart adds a new stock chart.
func (_efeb Chart )AddStockChart ()StockChart {_bbga :=_c .NewCT_PlotAreaChoice ();_efeb ._gcd .Chart .PlotArea .Choice =append (_efeb ._gcd .Chart .PlotArea .Choice ,_bbga );_bbga .StockChart =_c .NewCT_StockChart ();_dfb :=StockChart {_fbcc :_bbga .StockChart };
_dfb .InitializeDefaults ();return _dfb ;};

// SetOrder sets the order of the series
func (_cag ScatterChartSeries )SetOrder (idx uint32 ){_cag ._ecdc .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_feee PieChart )X ()*_c .CT_PieChart {return _feee ._ecf };

// X returns the inner wrapped XML type.
func (_cef Marker )X ()*_c .CT_Marker {return _cef ._fed };

// AddSeries adds a default series to a Bubble chart.
func (_efe BubbleChart )AddSeries ()BubbleChartSeries {_bag :=_efe .nextColor (len (_efe ._efda .Ser ));_gbag :=_c .NewCT_BubbleSer ();_efe ._efda .Ser =append (_efe ._efda .Ser ,_gbag );_gbag .Idx .ValAttr =uint32 (len (_efe ._efda .Ser )-1);_gbag .Order .ValAttr =uint32 (len (_efe ._efda .Ser )-1);
_gee :=BubbleChartSeries {_gbag };_gee .InitializeDefaults ();_gee .Properties ().SetSolidFill (_bag );return _gee ;};

// AddSeries adds a default series to a Surface chart.
func (_gfdb SurfaceChart )AddSeries ()SurfaceChartSeries {_aed :=_gfdb .nextColor (len (_gfdb ._ddab .Ser ));_beff :=_c .NewCT_SurfaceSer ();_gfdb ._ddab .Ser =append (_gfdb ._ddab .Ser ,_beff );_beff .Idx .ValAttr =uint32 (len (_gfdb ._ddab .Ser )-1);
_beff .Order .ValAttr =uint32 (len (_gfdb ._ddab .Ser )-1);_egcb :=SurfaceChartSeries {_beff };_egcb .InitializeDefaults ();_egcb .Properties ().LineProperties ().SetSolidFill (_aed );return _egcb ;};func (_bbg AreaChart )AddAxis (axis Axis ){_fa :=_c .NewCT_UnsignedInt ();
_fa .ValAttr =axis .AxisID ();_bbg ._ae .AxId =append (_bbg ._ae .AxId ,_fa );};func (_ccb SeriesAxis )AxisID ()uint32 {return _ccb ._gbfb .AxId .ValAttr };

// CategoryAxis returns the category data source.
func (_ccga PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ccga ._gdac .Cat ==nil {_ccga ._gdac .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_ccga ._gdac .Cat );};

// AddSeries adds a default series to a Surface chart.
func (_caff Surface3DChart )AddSeries ()SurfaceChartSeries {_egf :=_caff .nextColor (len (_caff ._dgge .Ser ));_adb :=_c .NewCT_SurfaceSer ();_caff ._dgge .Ser =append (_caff ._dgge .Ser ,_adb );_adb .Idx .ValAttr =uint32 (len (_caff ._dgge .Ser )-1);_adb .Order .ValAttr =uint32 (len (_caff ._dgge .Ser )-1);
_ddcce :=SurfaceChartSeries {_adb };_ddcce .InitializeDefaults ();_ddcce .Properties ().LineProperties ().SetSolidFill (_egf );return _ddcce ;};

// SetText sets the series text.
func (_abe BubbleChartSeries )SetText (s string ){_abe ._agg .Tx =_c .NewCT_SerTx ();_abe ._agg .Tx .Choice .V =&s ;};

// Labels returns the data label properties.
func (_fggg ScatterChartSeries )Labels ()DataLabels {if _fggg ._ecdc .DLbls ==nil {_fggg ._ecdc .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_fggg ._ecdc .DLbls );};

// SetText sets the series text.
func (_dd AreaChartSeries )SetText (s string ){_dd ._eag .Tx =_c .NewCT_SerTx ();_dd ._eag .Tx .Choice .V =&s ;};func (_fbc NumberDataSource )SetReference (s string ){_fbc .ensureChoice ();if _fbc ._eaa .Choice .NumRef ==nil {_fbc ._eaa .Choice .NumRef =_c .NewCT_NumRef ();
};_fbc ._eaa .Choice .NumRef .F =s ;};

// AddCategoryAxis adds a category axis.
func (_egec Chart )AddCategoryAxis ()CategoryAxis {_ddc :=_c .NewCT_CatAx ();if _egec ._gcd .Chart .PlotArea .CChoice ==nil {_egec ._gcd .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_ddc .AxId =_c .NewCT_UnsignedInt ();_ddc .AxId .ValAttr =0x7FFFFFFF&_dc .Uint32 ();
_egec ._gcd .Chart .PlotArea .CChoice .CatAx =append (_egec ._gcd .Chart .PlotArea .CChoice .CatAx ,_ddc );_ddc .Auto =_c .NewCT_Boolean ();_ddc .Auto .ValAttr =_d .Bool (true );_ddc .Delete =_c .NewCT_Boolean ();_ddc .Delete .ValAttr =_d .Bool (false );
_gg :=MakeCategoryAxis (_ddc );_gg .InitializeDefaults ();return _gg ;};

// AddSeries adds a default series to an Pie chart.
func (_bfd PieOfPieChart )AddSeries ()PieChartSeries {_gab :=_c .NewCT_PieSer ();_bfd ._ged .Ser =append (_bfd ._ged .Ser ,_gab );_gab .Idx .ValAttr =uint32 (len (_bfd ._ged .Ser )-1);_gab .Order .ValAttr =uint32 (len (_bfd ._ged .Ser )-1);_fedf :=PieChartSeries {_gab };
_fedf .InitializeDefaults ();return _fedf ;};

// SetOrder sets the order of the series
func (_dced LineChartSeries )SetOrder (idx uint32 ){_dced ._gebe .Order .ValAttr =idx };

// Labels returns the data label properties.
func (_cfga LineChartSeries )Labels ()DataLabels {if _cfga ._gebe .DLbls ==nil {_cfga ._gebe .DLbls =_c .NewCT_DLbls ();};return MakeDataLabels (_cfga ._gebe .DLbls );};func (_dffd DateAxis )SetCrosses (axis Axis ){_dffd ._cea .CrossAx .ValAttr =axis .AxisID ()};


// Values returns the bubble size data source.
func (_dce BubbleChartSeries )BubbleSizes ()NumberDataSource {if _dce ._agg .BubbleSize ==nil {_dce ._agg .BubbleSize =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_dce ._agg .BubbleSize );};

// X returns the inner wrapped XML type.
func (_fea StockChart )X ()*_c .CT_StockChart {return _fea ._fbcc };

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_ded Chart )AddLegend ()Legend {_ded ._gcd .Chart .Legend =_c .NewCT_Legend ();_ebc :=MakeLegend (_ded ._gcd .Chart .Legend );_ebc .InitializeDefaults ();return _ebc ;};func (_cec SurfaceChart )InitializeDefaults (){_cec ._ddab .Wireframe =_c .NewCT_Boolean ();
_cec ._ddab .Wireframe .ValAttr =_d .Bool (false );_cec ._ddab .BandFmts =_c .NewCT_BandFmts ();for _dee :=0;_dee < 15;_dee ++{_eaba :=_c .NewCT_BandFmt ();_eaba .Idx .ValAttr =uint32 (_dee );_eaba .SpPr =_ca .NewCT_ShapeProperties ();_bdcg :=_ba .MakeShapeProperties (_eaba .SpPr );
_bdcg .SetSolidFill (_cec .nextColor (_dee ));_cec ._ddab .BandFmts .BandFmt =append (_cec ._ddab .BandFmts .BandFmt ,_eaba );};};

// X returns the inner wrapped XML type.
func (_gece ScatterChart )X ()*_c .CT_ScatterChart {return _gece ._ccc };func _ed (_eca *_c .CT_Chart ){_eca .View3D =_c .NewCT_View3D ();_eca .View3D .RotX =_c .NewCT_RotX ();_eca .View3D .RotX .ValAttr =_d .Int8 (15);_eca .View3D .RotY =_c .NewCT_RotY ();
_eca .View3D .RotY .ValAttr =_d .Uint16 (20);_eca .View3D .RAngAx =_c .NewCT_Boolean ();_eca .View3D .RAngAx .ValAttr =_d .Bool (false );_eca .Floor =_c .NewCT_Surface ();_eca .Floor .Thickness =_c .NewCT_Thickness ();_eca .Floor .Thickness .ValAttr .Uint32 =_d .Uint32 (0);
_eca .SideWall =_c .NewCT_Surface ();_eca .SideWall .Thickness =_c .NewCT_Thickness ();_eca .SideWall .Thickness .ValAttr .Uint32 =_d .Uint32 (0);_eca .BackWall =_c .NewCT_Surface ();_eca .BackWall .Thickness =_c .NewCT_Thickness ();_eca .BackWall .Thickness .ValAttr .Uint32 =_d .Uint32 (0);
};func (_gcb DataLabels )SetShowSeriesName (b bool ){_gcb .ensureChoice ();_gcb ._aef .Choice .ShowSerName =_c .NewCT_Boolean ();_gcb ._aef .Choice .ShowSerName .ValAttr =_d .Bool (b );};

// Properties returns the line chart series shape properties.
func (_facf LineChartSeries )Properties ()_ba .ShapeProperties {if _facf ._gebe .SpPr ==nil {_facf ._gebe .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_facf ._gebe .SpPr );};

// AddLineChart adds a new line chart to a chart.
func (_aab Chart )AddLineChart ()LineChart {_ec :=_c .NewCT_PlotAreaChoice ();_aab ._gcd .Chart .PlotArea .Choice =append (_aab ._gcd .Chart .PlotArea .Choice ,_ec );_ec .LineChart =_c .NewCT_LineChart ();_ec .LineChart .Grouping =_c .NewCT_Grouping ();
_ec .LineChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return LineChart {_efec :_ec .LineChart };};

// InitializeDefaults the Bubble chart to its defaults
func (_dcc BubbleChart )InitializeDefaults (){};func MakeChart (x *_c .ChartSpace )Chart {return Chart {x }};func (_abdc DateAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_abdc ._cea .MajorTickMark =nil ;}else {_abdc ._cea .MajorTickMark =_c .NewCT_TickMark ();
_abdc ._cea .MajorTickMark .ValAttr =m ;};};func (_fbg DateAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_fbg ._cea .TickLblPos =nil ;}else {_fbg ._cea .TickLblPos =_c .NewCT_TickLblPos ();_fbg ._cea .TickLblPos .ValAttr =p ;
};};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_eee CategoryAxisDataSource )SetLabelReference (s string ){_eee ._afb .Choice =_c .NewCT_AxDataSourceChoice ();_eee ._afb .Choice .StrRef =_c .NewCT_StrRef ();_eee ._afb .Choice .StrRef .F =s ;};func (_bde Bar3DChart )AddAxis (axis Axis ){_ff :=_c .NewCT_UnsignedInt ();
_ff .ValAttr =axis .AxisID ();_bde ._gf .AxId =append (_bde ._gf .AxId ,_ff );};func MakeSeriesAxis (x *_c .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// X returns the inner wrapped XML type.
func (_fcf DateAxis )X ()*_c .CT_DateAx {return _fcf ._cea };

// X returns the inner wrapped XML type.
func (_gced ValueAxis )X ()*_c .CT_ValAx {return _gced ._bcd };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_bgg *_c .CT_DoughnutChart ;};func (_af BarChart )AddAxis (axis Axis ){_cae :=_c .NewCT_UnsignedInt ();_cae .ValAttr =axis .AxisID ();_af ._ag .AxId =append (_af ._ag .AxId ,_cae );};

// X returns the inner wrapped XML type.
func (_fbb LineChart )X ()*_c .CT_LineChart {return _fbb ._efec };func (_agad Marker )SetSymbol (s _c .ST_MarkerStyle ){if s ==_c .ST_MarkerStyleUnset {_agad ._fed .Symbol =nil ;}else {_agad ._fed .Symbol =_c .NewCT_MarkerStyle ();_agad ._fed .Symbol .ValAttr =s ;
};};

// SetValues is used to set the source data to a set of values.
func (_gfg CategoryAxisDataSource )SetValues (v []string ){_gfg ._afb .Choice =_c .NewCT_AxDataSourceChoice ();_gfg ._afb .Choice .StrLit =_c .NewCT_StrData ();_gfg ._afb .Choice .StrLit .PtCount =_c .NewCT_UnsignedInt ();_gfg ._afb .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));
for _geb ,_bgb :=range v {_gfg ._afb .Choice .StrLit .Pt =append (_gfg ._afb .Choice .StrLit .Pt ,&_c .CT_StrVal {IdxAttr :uint32 (_geb ),V :_bgb });};};

// AddAxis adds an axis to a line chart.
func (_deb LineChart )AddAxis (axis Axis ){_efa :=_c .NewCT_UnsignedInt ();_efa .ValAttr =axis .AxisID ();_deb ._efec .AxId =append (_deb ._efec .AxId ,_efa );};

// InitializeDefaults initializes an Radar series to the default values.
func (_acb RadarChartSeries )InitializeDefaults (){};func MakeValueAxis (x *_c .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_bfe Legend )SetOverlay (b bool ){_bfe ._gec .Overlay =_c .NewCT_Boolean ();_bfe ._gec .Overlay .ValAttr =_d .Bool (b );};


// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_eagc Chart )AddDoughnutChart ()DoughnutChart {_ccf :=_c .NewCT_PlotAreaChoice ();_eagc ._gcd .Chart .PlotArea .Choice =append (_eagc ._gcd .Chart .PlotArea .Choice ,_ccf );_ccf .DoughnutChart =_c .NewCT_DoughnutChart ();_afd :=DoughnutChart {_bgg :_ccf .DoughnutChart };
_afd .InitializeDefaults ();return _afd ;};type LineChart struct{chartBase ;_efec *_c .CT_LineChart ;};

// RemoveLegend removes the legend if the chart has one.
func (_ggg Chart )RemoveLegend (){_ggg ._gcd .Chart .Legend =nil };

// AddTitle sets a new title on the chart.
func (_ddg Chart )AddTitle ()Title {_ddg ._gcd .Chart .Title =_c .NewCT_Title ();_ddg ._gcd .Chart .Title .Overlay =_c .NewCT_Boolean ();_ddg ._gcd .Chart .Title .Overlay .ValAttr =_d .Bool (false );_ddg ._gcd .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();
_ddg ._gcd .Chart .AutoTitleDeleted .ValAttr =_d .Bool (false );_gbae :=MakeTitle (_ddg ._gcd .Chart .Title );_gbae .InitializeDefaults ();return _gbae ;};

// X returns the inner wrapped XML type.
func (_cf Area3DChart )X ()*_c .CT_Area3DChart {return _cf ._bad };

// AddSeries adds a default series to an Pie3D chart.
func (_agdb Pie3DChart )AddSeries ()PieChartSeries {_aaa :=_c .NewCT_PieSer ();_agdb ._cee .Ser =append (_agdb ._cee .Ser ,_aaa );_aaa .Idx .ValAttr =uint32 (len (_agdb ._cee .Ser )-1);_aaa .Order .ValAttr =uint32 (len (_agdb ._cee .Ser )-1);_fdgf :=PieChartSeries {_aaa };
_fdgf .InitializeDefaults ();return _fdgf ;};func (_bfg CategoryAxis )SetCrosses (axis Axis ){_bfg ._gd .Choice =_c .NewEG_AxSharedChoice ();_bfg ._gd .Choice .Crosses =_c .NewCT_Crosses ();_bfg ._gd .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_bfg ._gd .CrossAx .ValAttr =axis .AxisID ();
};func (_bdce ValueAxis )AxisID ()uint32 {return _bdce ._bcd .AxId .ValAttr };

// X returns the inner wrapped XML type.
func (_eac Chart )X ()*_c .ChartSpace {return _eac ._gcd };func (_fgga SeriesAxis )SetCrosses (axis Axis ){_fgga ._gbfb .CrossAx .ValAttr =axis .AxisID ()};

// Order returns the order of the series
func (_ecff SurfaceChartSeries )Order ()uint32 {return _ecff ._cbg .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_bgd BarChartSeries )X ()*_c .CT_BarSer {return _bgd ._fc };func (_a Area3DChart )AddAxis (axis Axis ){_bcf :=_c .NewCT_UnsignedInt ();_bcf .ValAttr =axis .AxisID ();_a ._bad .AxId =append (_a ._bad .AxId ,_bcf );};func (_bff ValueAxis )MajorGridLines ()GridLines {if _bff ._bcd .MajorGridlines ==nil {_bff ._bcd .MajorGridlines =_c .NewCT_ChartLines ();
};return GridLines {_bff ._bcd .MajorGridlines };};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_gf *_c .CT_Bar3DChart ;};

// X returns the inner wrapped XML type.
func (_de AreaChartSeries )X ()*_c .CT_AreaSer {return _de ._eag };var _gcgb =[]_e .Color {_e .RGB (0x33,0x66,0xcc),_e .RGB (0xDC,0x39,0x12),_e .RGB (0xFF,0x99,0x00),_e .RGB (0x10,0x96,0x18),_e .RGB (0x99,0x00,0x99),_e .RGB (0x3B,0x3E,0xAC),_e .RGB (0x00,0x99,0xC6),_e .RGB (0xDD,0x44,0x77),_e .RGB (0x66,0xAA,0x00),_e .RGB (0xB8,0x2E,0x2E),_e .RGB (0x31,0x63,0x95),_e .RGB (0x99,0x44,0x99),_e .RGB (0x22,0xAA,0x99),_e .RGB (0xAA,0xAA,0x11),_e .RGB (0x66,0x33,0xCC),_e .RGB (0xE6,0x73,0x00),_e .RGB (0x8B,0x07,0x07),_e .RGB (0x32,0x92,0x62),_e .RGB (0x55,0x74,0xA6),_e .RGB (0x3B,0x3E,0xAC)};


// Properties returns the line chart series shape properties.
func (_eae ScatterChartSeries )Properties ()_ba .ShapeProperties {if _eae ._ecdc .SpPr ==nil {_eae ._ecdc .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_eae ._ecdc .SpPr );};

// Properties returns the chart's shape properties.
func (_fgc Chart )Properties ()_ba .ShapeProperties {if _fgc ._gcd .SpPr ==nil {_fgc ._gcd .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_fgc ._gcd .SpPr );};func (_baga SeriesAxis )InitializeDefaults (){};func (_cg ScatterChartSeries )SetSmooth (b bool ){_cg ._ecdc .Smooth =_c .NewCT_Boolean ();
_cg ._ecdc .Smooth .ValAttr =&b ;};func (_cegd LineChartSeries )Values ()NumberDataSource {if _cegd ._gebe .Val ==nil {_cegd ._gebe .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_cegd ._gebe .Val );};func (_gbf LineChartSeries )InitializeDefaults (){_gbf .Properties ().LineProperties ().SetWidth (1*_bb .Point );
_gbf .Properties ().LineProperties ().SetSolidFill (_e .Black );_gbf .Properties ().LineProperties ().SetJoin (_ba .LineJoinRound );_gbf .Marker ().SetSymbol (_c .ST_MarkerStyleNone );_gbf .Labels ().SetShowLegendKey (false );_gbf .Labels ().SetShowValue (false );
_gbf .Labels ().SetShowPercent (false );_gbf .Labels ().SetShowCategoryName (false );_gbf .Labels ().SetShowSeriesName (false );_gbf .Labels ().SetShowLeaderLines (false );};func (_gecb Title )RunProperties ()_ba .RunProperties {if _gecb ._cfbc .Tx ==nil {_gecb .SetText ("");
};if _gecb ._cfbc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_gecb ._cfbc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_ca .NewCT_TextCharacterProperties ();};return _ba .MakeRunProperties (_gecb ._cfbc .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );
};

// SetText sets the series text
func (_gfc ScatterChartSeries )SetText (s string ){_gfc ._ecdc .Tx =_c .NewCT_SerTx ();_gfc ._ecdc .Tx .Choice .V =&s ;};func (_gcf LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gcf ._gebe .Cat ==nil {_gcf ._gebe .Cat =_c .NewCT_AxDataSource ();
};return MakeAxisDataSource (_gcf ._gebe .Cat );};

// X returns the inner wrapped XML type.
func (_abdca SurfaceChartSeries )X ()*_c .CT_SurfaceSer {return _abdca ._cbg };

// X returns the inner wrapped XML type.
func (_edef RadarChart )X ()*_c .CT_RadarChart {return _edef ._badd };

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_ag *_c .CT_BarChart ;};

// AddSeries adds a default series to a line chart.
func (_gggc Line3DChart )AddSeries ()LineChartSeries {_fgf :=_gggc .nextColor (len (_gggc ._ccg .Ser ));_fdcb :=_c .NewCT_LineSer ();_gggc ._ccg .Ser =append (_gggc ._ccg .Ser ,_fdcb );_fdcb .Idx .ValAttr =uint32 (len (_gggc ._ccg .Ser )-1);_fdcb .Order .ValAttr =uint32 (len (_gggc ._ccg .Ser )-1);
_fce :=LineChartSeries {_fdcb };_fce .InitializeDefaults ();_fce .Properties ().LineProperties ().SetSolidFill (_fgf );_fce .Properties ().SetSolidFill (_fgf );return _fce ;};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_eag *_c .CT_AreaSer };

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_gebe *_c .CT_LineSer };func (_eecg Legend )InitializeDefaults (){_eecg .SetPosition (_c .ST_LegendPosR );_eecg .SetOverlay (false );_eecg .Properties ().SetNoFill ();_eecg .Properties ().LineProperties ().SetNoFill ();};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_ddab *_c .CT_SurfaceChart ;};type Marker struct{_fed *_c .CT_Marker };

// Values returns the value data source.
func (_fbbf RadarChartSeries )Values ()NumberDataSource {if _fbbf ._befg .Val ==nil {_fbbf ._befg .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_fbbf ._befg .Val );};

// InitializeDefaults the bar chart to its defaults
func (_bgc DoughnutChart )InitializeDefaults (){_bgc ._bgg .VaryColors =_c .NewCT_Boolean ();_bgc ._bgg .VaryColors .ValAttr =_d .Bool (true );_bgc ._bgg .HoleSize =_c .NewCT_HoleSize ();_bgc ._bgg .HoleSize .ValAttr =&_c .ST_HoleSize {};_bgc ._bgg .HoleSize .ValAttr .ST_HoleSizeUByte =_d .Uint8 (50);
};

// InitializeDefaults initializes an Pie series to the default values.
func (_eagce PieChartSeries )InitializeDefaults (){};type GridLines struct{_bca *_c .CT_ChartLines };

// InitializeDefaults the Stock chart to its defaults
func (_eda StockChart )InitializeDefaults (){_eda ._fbcc .HiLowLines =_c .NewCT_ChartLines ();_eda ._fbcc .UpDownBars =_c .NewCT_UpDownBars ();_eda ._fbcc .UpDownBars .GapWidth =_c .NewCT_GapAmount ();_eda ._fbcc .UpDownBars .GapWidth .ValAttr =&_c .ST_GapAmount {};
_eda ._fbcc .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_d .Uint16 (150);_eda ._fbcc .UpDownBars .UpBars =_c .NewCT_UpDownBar ();_eda ._fbcc .UpDownBars .DownBars =_c .NewCT_UpDownBar ();};

// X returns the inner wrapped XML type.
func (_fab LineChartSeries )X ()*_c .CT_LineSer {return _fab ._gebe };

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_dgca PieChartSeries )SetExplosion (v uint32 ){_dgca ._gdac .Explosion =_c .NewCT_UnsignedInt ();_dgca ._gdac .Explosion .ValAttr =v ;};func (_cbd DataLabels )SetPosition (p _c .ST_DLblPos ){_cbd .ensureChoice ();_cbd ._aef .Choice .DLblPos =_c .NewCT_DLblPos ();
_cbd ._aef .Choice .DLblPos .ValAttr =p ;};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_befg *_c .CT_RadarSer };

// CategoryAxis returns the category data source.
func (_cead RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cead ._befg .Cat ==nil {_cead ._befg .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_cead ._befg .Cat );};

// Order returns the order of the series
func (_gdc LineChartSeries )Order ()uint32 {return _gdc ._gebe .Order .ValAttr };

// InitializeDefaults the bar chart to its defaults
func (_eed Pie3DChart )InitializeDefaults (){_eed ._cee .VaryColors =_c .NewCT_Boolean ();_eed ._cee .VaryColors .ValAttr =_d .Bool (true );};func (_fda DataLabels )SetShowCategoryName (b bool ){_fda .ensureChoice ();_fda ._aef .Choice .ShowCatName =_c .NewCT_Boolean ();
_fda ._aef .Choice .ShowCatName .ValAttr =_d .Bool (b );};

// Chart is a generic chart.
type Chart struct{_gcd *_c .ChartSpace };

// Index returns the index of the series
func (_gbe ScatterChartSeries )Index ()uint32 {return _gbe ._ecdc .Idx .ValAttr };func (_fdb CategoryAxis )SetPosition (p _c .ST_AxPos ){_fdb ._gd .AxPos =_c .NewCT_AxPos ();_fdb ._gd .AxPos .ValAttr =p ;};func (_fbe ValueAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_fbe ._bcd .MinorTickMark =nil ;
}else {_fbe ._bcd .MinorTickMark =_c .NewCT_TickMark ();_fbe ._bcd .MinorTickMark .ValAttr =m ;};};func (_dcegf DateAxis )AxisID ()uint32 {return _dcegf ._cea .AxId .ValAttr };func (_cfc SurfaceChartSeries )InitializeDefaults (){_cfc .Properties ().LineProperties ().SetWidth (1*_bb .Point );
_cfc .Properties ().LineProperties ().SetSolidFill (_e .Black );_cfc .Properties ().LineProperties ().SetJoin (_ba .LineJoinRound );};

// X returns the inner wrapped XML type.
func (_ce BubbleChart )X ()*_c .CT_BubbleChart {return _ce ._efda };func (_dceg DataLabels )SetShowLeaderLines (b bool ){_dceg .ensureChoice ();_dceg ._aef .Choice .ShowLeaderLines =_c .NewCT_Boolean ();_dceg ._aef .Choice .ShowLeaderLines .ValAttr =_d .Bool (b );
};func (_bcb LineChartSeries )SetSmooth (b bool ){_bcb ._gebe .Smooth =_c .NewCT_Boolean ();_bcb ._gebe .Smooth .ValAttr =&b ;};

// SetText sets the series text.
func (_bbd BarChartSeries )SetText (s string ){_bbd ._fc .Tx =_c .NewCT_SerTx ();_bbd ._fc .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_fb BubbleChartSeries )X ()*_c .CT_BubbleSer {return _fb ._agg };

// X returns the inner wrapped XML type.
func (_fdc DoughnutChart )X ()*_c .CT_DoughnutChart {return _fdc ._bgg };

// AddSeries adds a default series to an Pie chart.
func (_eab PieChart )AddSeries ()PieChartSeries {_gfd :=_c .NewCT_PieSer ();_eab ._ecf .Ser =append (_eab ._ecf .Ser ,_gfd );_gfd .Idx .ValAttr =uint32 (len (_eab ._ecf .Ser )-1);_gfd .Order .ValAttr =uint32 (len (_eab ._ecf .Ser )-1);_cedc :=PieChartSeries {_gfd };
_cedc .InitializeDefaults ();return _cedc ;};

// X returns the inner wrapped XML type.
func (_df BarChart )X ()*_c .CT_BarChart {return _df ._ag };func (_eefgg Title )ParagraphProperties ()_ba .ParagraphProperties {if _eefgg ._cfbc .Tx ==nil {_eefgg .SetText ("");};if _eefgg ._cfbc .Tx .Choice .Rich .P [0].PPr ==nil {_eefgg ._cfbc .Tx .Choice .Rich .P [0].PPr =_ca .NewCT_TextParagraphProperties ();
};return _ba .MakeParagraphProperties (_eefgg ._cfbc .Tx .Choice .Rich .P [0].PPr );};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_efda *_c .CT_BubbleChart ;};

// SetType sets the type the secone pie to either pie or bar
func (_ccff PieOfPieChart )SetType (t _c .ST_OfPieType ){_ccff ._ged .OfPieType .ValAttr =t };

// SetValues sets values directly on a source.
func (_bagf NumberDataSource )SetValues (v []float64 ){_bagf .ensureChoice ();_bagf ._eaa .Choice .NumRef =nil ;_bagf ._eaa .Choice .NumLit =_c .NewCT_NumData ();_bagf ._eaa .Choice .NumLit .PtCount =_c .NewCT_UnsignedInt ();_bagf ._eaa .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));
for _dbe ,_fgg :=range v {_bagf ._eaa .Choice .NumLit .Pt =append (_bagf ._eaa .Choice .NumLit .Pt ,&_c .CT_NumVal {IdxAttr :uint32 (_dbe ),V :_g .Sprintf ("\u0025\u0067",_fgg )});};};func (_aeb ValueAxis )SetPosition (p _c .ST_AxPos ){_aeb ._bcd .AxPos =_c .NewCT_AxPos ();
_aeb ._bcd .AxPos .ValAttr =p ;};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_fdf CategoryAxisDataSource )SetNumberReference (s string ){_fdf ._afb .Choice =_c .NewCT_AxDataSourceChoice ();_fdf ._afb .Choice .NumRef =_c .NewCT_NumRef ();_fdf ._afb .Choice .NumRef .F =s ;};

// AddSeries adds a default series to a Stock chart.
func (_ebd StockChart )AddSeries ()LineChartSeries {_afea :=_c .NewCT_LineSer ();_ebd ._fbcc .Ser =append (_ebd ._fbcc .Ser ,_afea );_afea .Idx .ValAttr =uint32 (len (_ebd ._fbcc .Ser )-1);_afea .Order .ValAttr =uint32 (len (_ebd ._fbcc .Ser )-1);_bdgb :=LineChartSeries {_afea };
_bdgb .Values ().CreateEmptyNumberCache ();_bdgb .Properties ().LineProperties ().SetNoFill ();return _bdgb ;};

// InitializeDefaults the bar chart to its defaults
func (_be AreaChart )InitializeDefaults (){};func (_edc NumberDataSource )ensureChoice (){if _edc ._eaa .Choice ==nil {_edc ._eaa .Choice =_c .NewCT_NumDataSourceChoice ();};};func (_ee CategoryAxis )Properties ()_ba .ShapeProperties {if _ee ._gd .SpPr ==nil {_ee ._gd .SpPr =_ca .NewCT_ShapeProperties ();
};return _ba .MakeShapeProperties (_ee ._gd .SpPr );};func (_cagb ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cagb ._ecdc .XVal ==nil {_cagb ._ecdc .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_cagb ._ecdc .XVal );};


// X returns the inner wrapped XML type.
func (_fdba SurfaceChart )X ()*_c .CT_SurfaceChart {return _fdba ._ddab };

// Marker returns the marker properties.
func (_bcgf ScatterChartSeries )Marker ()Marker {if _bcgf ._ecdc .Marker ==nil {_bcgf ._ecdc .Marker =_c .NewCT_Marker ();};return MakeMarker (_bcgf ._ecdc .Marker );};

// Properties returns the line chart series shape properties.
func (_aca SurfaceChartSeries )Properties ()_ba .ShapeProperties {if _aca ._cbg .SpPr ==nil {_aca ._cbg .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_aca ._cbg .SpPr );};type Line3DChart struct{chartBase ;_ccg *_c .CT_Line3DChart ;
};

// InitializeDefaults the bar chart to its defaults
func (_agae RadarChart )InitializeDefaults (){_agae ._badd .RadarStyle .ValAttr =_c .ST_RadarStyleMarker };

// X returns the inner wrapped XML type.
func (_acg Legend )X ()*_c .CT_Legend {return _acg ._gec };

// X returns the inner wrapped XML type.
func (_egc Surface3DChart )X ()*_c .CT_Surface3DChart {return _egc ._dgge };

// AddAxis adds an axis to a Scatter chart.
func (_dbd ScatterChart )AddAxis (axis Axis ){_fcee :=_c .NewCT_UnsignedInt ();_fcee .ValAttr =axis .AxisID ();_dbd ._ccc .AxId =append (_dbd ._ccc .AxId ,_fcee );};

// AddPieChart adds a new pie chart to a chart.
func (_fcb Chart )AddPieChart ()PieChart {_ebe :=_c .NewCT_PlotAreaChoice ();_fcb ._gcd .Chart .PlotArea .Choice =append (_fcb ._gcd .Chart .PlotArea .Choice ,_ebe );_ebe .PieChart =_c .NewCT_PieChart ();_gde :=PieChart {_ecf :_ebe .PieChart };_gde .InitializeDefaults ();
return _gde ;};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_age BubbleChartSeries )InitializeDefaults (){};type ValueAxis struct{_bcd *_c .CT_ValAx };

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_ecdc *_c .CT_ScatterSer };

// AddPieOfPieChart adds a new pie chart to a chart.
func (_dgc Chart )AddPieOfPieChart ()PieOfPieChart {_aaf :=_c .NewCT_PlotAreaChoice ();_dgc ._gcd .Chart .PlotArea .Choice =append (_dgc ._gcd .Chart .PlotArea .Choice ,_aaf );_aaf .OfPieChart =_c .NewCT_OfPieChart ();_fff :=PieOfPieChart {_ged :_aaf .OfPieChart };
_fff .InitializeDefaults ();return _fff ;};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_dgge *_c .CT_Surface3DChart ;};

// Index returns the index of the series
func (_fdfc LineChartSeries )Index ()uint32 {return _fdfc ._gebe .Idx .ValAttr };func (_db CategoryAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_db ._gd .MajorTickMark =nil ;}else {_db ._gd .MajorTickMark =_c .NewCT_TickMark ();
_db ._gd .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_bggg PieChartSeries )X ()*_c .CT_PieSer {return _bggg ._gdac };func MakeCategoryAxis (x *_c .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// X returns the inner wrapped XML type.
func (_dfe ScatterChartSeries )X ()*_c .CT_ScatterSer {return _dfe ._ecdc };func (_ggf RadarChart )AddAxis (axis Axis ){_dda :=_c .NewCT_UnsignedInt ();_dda .ValAttr =axis .AxisID ();_ggf ._badd .AxId =append (_ggf ._badd .AxId ,_dda );};func (_dfbf Legend )Properties ()_ba .ShapeProperties {if _dfbf ._gec .SpPr ==nil {_dfbf ._gec .SpPr =_ca .NewCT_ShapeProperties ();
};return _ba .MakeShapeProperties (_dfbf ._gec .SpPr );};func (_aaac ScatterChartSeries )InitializeDefaults (){_aaac .Properties ().LineProperties ().SetNoFill ();_aaac .Marker ().SetSymbol (_c .ST_MarkerStyleAuto );_aaac .Labels ().SetShowLegendKey (false );
_aaac .Labels ().SetShowValue (true );_aaac .Labels ().SetShowPercent (false );_aaac .Labels ().SetShowCategoryName (false );_aaac .Labels ().SetShowSeriesName (false );_aaac .Labels ().SetShowLeaderLines (false );};func (_cdad Title )InitializeDefaults (){_cdad .SetText ("\u0054\u0069\u0074l\u0065");
_cdad .RunProperties ().SetSize (16*_bb .Point );_cdad .RunProperties ().SetSolidFill (_e .Black );_cdad .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_cdad .RunProperties ().SetBold (false );};func MakeDataLabels (x *_c .CT_DLbls )DataLabels {return DataLabels {x }};


// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_badd *_c .CT_RadarChart ;};type NumberDataSource struct{_eaa *_c .CT_NumDataSource };

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_ga Chart )AddSurface3DChart ()Surface3DChart {_agf :=_c .NewCT_PlotAreaChoice ();_ga ._gcd .Chart .PlotArea .Choice =append (_ga ._gcd .Chart .PlotArea .Choice ,_agf );_agf .Surface3DChart =_c .NewCT_Surface3DChart ();_ed (_ga ._gcd .Chart );_bgdf :=Surface3DChart {_dgge :_agf .Surface3DChart };
_bgdf .InitializeDefaults ();return _bgdf ;};

// X returns the inner wrapped XML type.
func (_cc AreaChart )X ()*_c .CT_AreaChart {return _cc ._ae };

// RemoveTitle removes any existing title from the chart.
func (_bef Chart )RemoveTitle (){_bef ._gcd .Chart .Title =nil ;_bef ._gcd .Chart .AutoTitleDeleted =_c .NewCT_Boolean ();_bef ._gcd .Chart .AutoTitleDeleted .ValAttr =_d .Bool (true );};

// Order returns the order of the series
func (_ebag ScatterChartSeries )Order ()uint32 {return _ebag ._ecdc .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_gff Title )X ()*_c .CT_Title {return _gff ._cfbc };func MakeMarker (x *_c .CT_Marker )Marker {return Marker {x }};

// Values returns the value data source.
func (_bgde PieChartSeries )Values ()NumberDataSource {if _bgde ._gdac .Val ==nil {_bgde ._gdac .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_bgde ._gdac .Val );};

// AddSeries adds a default series to a line chart.
func (_cbc LineChart )AddSeries ()LineChartSeries {_cfbg :=_cbc .nextColor (len (_cbc ._efec .Ser ));_fca :=_c .NewCT_LineSer ();_cbc ._efec .Ser =append (_cbc ._efec .Ser ,_fca );_fca .Idx .ValAttr =uint32 (len (_cbc ._efec .Ser )-1);_fca .Order .ValAttr =uint32 (len (_cbc ._efec .Ser )-1);
_ecd :=LineChartSeries {_fca };_ecd .InitializeDefaults ();_ecd .Properties ().LineProperties ().SetSolidFill (_cfbg );return _ecd ;};

// AddAreaChart adds a new area chart to a chart.
func (_ffbb Chart )AddAreaChart ()AreaChart {_cfa :=_c .NewCT_PlotAreaChoice ();_ffbb ._gcd .Chart .PlotArea .Choice =append (_ffbb ._gcd .Chart .PlotArea .Choice ,_cfa );_cfa .AreaChart =_c .NewCT_AreaChart ();_gda :=AreaChart {_ae :_cfa .AreaChart };
_gda .InitializeDefaults ();return _gda ;};

// AddValueAxis adds a value axis to the chart.
func (_dae Chart )AddValueAxis ()ValueAxis {_ffe :=_c .NewCT_ValAx ();if _dae ._gcd .Chart .PlotArea .CChoice ==nil {_dae ._gcd .Chart .PlotArea .CChoice =_c .NewCT_PlotAreaChoice1 ();};_ffe .AxId =_c .NewCT_UnsignedInt ();_ffe .AxId .ValAttr =0x7FFFFFFF&_dc .Uint32 ();
_dae ._gcd .Chart .PlotArea .CChoice .ValAx =append (_dae ._gcd .Chart .PlotArea .CChoice .ValAx ,_ffe );_ffe .Delete =_c .NewCT_Boolean ();_ffe .Delete .ValAttr =_d .Bool (false );_ffe .Scaling =_c .NewCT_Scaling ();_ffe .Scaling .Orientation =_c .NewCT_Orientation ();
_ffe .Scaling .Orientation .ValAttr =_c .ST_OrientationMinMax ;_ffe .Choice =&_c .EG_AxSharedChoice {};_ffe .Choice .Crosses =_c .NewCT_Crosses ();_ffe .Choice .Crosses .ValAttr =_c .ST_CrossesAutoZero ;_ffe .CrossBetween =_c .NewCT_CrossBetween ();_ffe .CrossBetween .ValAttr =_c .ST_CrossBetweenBetween ;
_ac :=MakeValueAxis (_ffe );_ac .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_e .LightGray );_ac .SetMajorTickMark (_c .ST_TickMarkOut );_ac .SetMinorTickMark (_c .ST_TickMarkIn );_ac .SetTickLabelPosition (_c .ST_TickLblPosNextTo );
_ac .Properties ().LineProperties ().SetSolidFill (_e .Black );_ac .SetPosition (_c .ST_AxPosL );return _ac ;};

// AddArea3DChart adds a new area chart to a chart.
func (_egdd Chart )AddArea3DChart ()Area3DChart {_ed (_egdd ._gcd .Chart );_efc :=_c .NewCT_PlotAreaChoice ();_egdd ._gcd .Chart .PlotArea .Choice =append (_egdd ._gcd .Chart .PlotArea .Choice ,_efc );_efc .Area3DChart =_c .NewCT_Area3DChart ();_bcg :=Area3DChart {_bad :_efc .Area3DChart };
_bcg .InitializeDefaults ();return _bcg ;};

// SetText sets the series text
func (_ddgg SurfaceChartSeries )SetText (s string ){_ddgg ._cbg .Tx =_c .NewCT_SerTx ();_ddgg ._cbg .Tx .Choice .V =&s ;};

// InitializeDefaults initializes an area series to the default values.
func (_fe AreaChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_da Bar3DChart )X ()*_c .CT_Bar3DChart {return _da ._gf };type SurfaceChartSeries struct{_cbg *_c .CT_SurfaceSer };

// Values returns the value data source.
func (_ced BubbleChartSeries )Values ()NumberDataSource {if _ced ._agg .YVal ==nil {_ced ._agg .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ced ._agg .YVal );};

// SetOrder sets the order of the series
func (_fgge SurfaceChartSeries )SetOrder (idx uint32 ){_fgge ._cbg .Order .ValAttr =idx };type DataLabels struct{_aef *_c .CT_DLbls };func (_aga chartBase )nextColor (_gac int )_e .Color {return _gcgb [_gac %len (_gcgb )]};type SeriesAxis struct{_gbfb *_c .CT_SerAx };
func (_gage ValueAxis )SetMajorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_gage ._bcd .MajorTickMark =nil ;}else {_gage ._bcd .MajorTickMark =_c .NewCT_TickMark ();_gage ._bcd .MajorTickMark .ValAttr =m ;};};func (_aeec ScatterChart )InitializeDefaults (){_aeec ._ccc .ScatterStyle .ValAttr =_c .ST_ScatterStyleMarker ;
};

// Marker returns the marker properties.
func (_ffec LineChartSeries )Marker ()Marker {if _ffec ._gebe .Marker ==nil {_ffec ._gebe .Marker =_c .NewCT_Marker ();};return MakeMarker (_ffec ._gebe .Marker );};

// AddScatterChart adds a scatter (X/Y) chart.
func (_fee Chart )AddScatterChart ()ScatterChart {_ecb :=_c .NewCT_PlotAreaChoice ();_fee ._gcd .Chart .PlotArea .Choice =append (_fee ._gcd .Chart .PlotArea .Choice ,_ecb );_ecb .ScatterChart =_c .NewCT_ScatterChart ();_afc :=ScatterChart {_ccc :_ecb .ScatterChart };
_afc .InitializeDefaults ();return _afc ;};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_bdc NumberDataSource )CreateEmptyNumberCache (){_bdc .ensureChoice ();if _bdc ._eaa .Choice .NumRef ==nil {_bdc ._eaa .Choice .NumRef =_c .NewCT_NumRef ();};_bdc ._eaa .Choice .NumLit =nil ;_bdc ._eaa .Choice .NumRef .NumCache =_c .NewCT_NumData ();
_bdc ._eaa .Choice .NumRef .NumCache .PtCount =_c .NewCT_UnsignedInt ();_bdc ._eaa .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// CategoryAxis returns the category data source.
func (_fd BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fd ._agg .XVal ==nil {_fd ._agg .XVal =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_fd ._agg .XVal );};

// InitializeDefaults the bar chart to its defaults
func (_bf Bar3DChart )InitializeDefaults (){_bf .SetDirection (_c .ST_BarDirCol )};

// AddSeries adds a default series to an Doughnut chart.
func (_aee DoughnutChart )AddSeries ()PieChartSeries {_egef :=_c .NewCT_PieSer ();_aee ._bgg .Ser =append (_aee ._bgg .Ser ,_egef );_egef .Idx .ValAttr =uint32 (len (_aee ._bgg .Ser )-1);_egef .Order .ValAttr =uint32 (len (_aee ._bgg .Ser )-1);_gga :=PieChartSeries {_egef };
_gga .InitializeDefaults ();return _gga ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_cee *_c .CT_Pie3DChart ;};type chartBase struct{};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_ged *_c .CT_OfPieChart ;};func (_gag Surface3DChart )InitializeDefaults (){_gag ._dgge .Wireframe =_c .NewCT_Boolean ();_gag ._dgge .Wireframe .ValAttr =_d .Bool (false );_gag ._dgge .BandFmts =_c .NewCT_BandFmts ();
for _cdfg :=0;_cdfg < 15;_cdfg ++{_gecg :=_c .NewCT_BandFmt ();_gecg .Idx .ValAttr =uint32 (_cdfg );_gecg .SpPr =_ca .NewCT_ShapeProperties ();_dca :=_ba .MakeShapeProperties (_gecg .SpPr );_dca .SetSolidFill (_gag .nextColor (_cdfg ));_gag ._dgge .BandFmts .BandFmt =append (_gag ._dgge .BandFmts .BandFmt ,_gecg );
};};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_abdb Chart )AddBar3DChart ()Bar3DChart {_ed (_abdb ._gcd .Chart );_fbf :=_c .NewCT_PlotAreaChoice ();_abdb ._gcd .Chart .PlotArea .Choice =append (_abdb ._gcd .Chart .PlotArea .Choice ,_fbf );_fbf .Bar3DChart =_c .NewCT_Bar3DChart ();_fbf .Bar3DChart .Grouping =_c .NewCT_BarGrouping ();
_fbf .Bar3DChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_ffd :=Bar3DChart {_gf :_fbf .Bar3DChart };_ffd .InitializeDefaults ();return _ffd ;};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_agg *_c .CT_BubbleSer };

// Properties returns the Bubble chart series shape properties.
func (_bbf BubbleChartSeries )Properties ()_ba .ShapeProperties {if _bbf ._agg .SpPr ==nil {_bbf ._agg .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_bbf ._agg .SpPr );};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_cd Chart )AddLine3DChart ()Line3DChart {_ed (_cd ._gcd .Chart );_gfgc :=_c .NewCT_PlotAreaChoice ();_cd ._gcd .Chart .PlotArea .Choice =append (_cd ._gcd .Chart .PlotArea .Choice ,_gfgc );_gfgc .Line3DChart =_c .NewCT_Line3DChart ();_gfgc .Line3DChart .Grouping =_c .NewCT_Grouping ();
_gfgc .Line3DChart .Grouping .ValAttr =_c .ST_GroupingStandard ;return Line3DChart {_ccg :_gfgc .Line3DChart };};

// SetIndex sets the index of the series
func (_ddcc ScatterChartSeries )SetIndex (idx uint32 ){_ddcc ._ecdc .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_aec SeriesAxis )X ()*_c .CT_SerAx {return _aec ._gbfb };

// Properties returns the bar chart series shape properties.
func (_aa AreaChartSeries )Properties ()_ba .ShapeProperties {if _aa ._eag .SpPr ==nil {_aa ._eag .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_aa ._eag .SpPr );};func (_ebcb ValueAxis )SetTickLabelPosition (p _c .ST_TickLblPos ){if p ==_c .ST_TickLblPosUnset {_ebcb ._bcd .TickLblPos =nil ;
}else {_ebcb ._bcd .TickLblPos =_c .NewCT_TickLblPos ();_ebcb ._bcd .TickLblPos .ValAttr =p ;};};

// SetIndex sets the index of the series
func (_acbg SurfaceChartSeries )SetIndex (idx uint32 ){_acbg ._cbg .Idx .ValAttr =idx };

// SetIndex sets the index of the series
func (_dgg LineChartSeries )SetIndex (idx uint32 ){_dgg ._gebe .Idx .ValAttr =idx };func (_ddf DateAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_ddf ._cea .MinorTickMark =nil ;}else {_ddf ._cea .MinorTickMark =_c .NewCT_TickMark ();
_ddf ._cea .MinorTickMark .ValAttr =m ;};};func (_bgcb GridLines )Properties ()_ba .ShapeProperties {if _bgcb ._bca .SpPr ==nil {_bgcb ._bca .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_bgcb ._bca .SpPr );};type ScatterChart struct{chartBase ;
_ccc *_c .CT_ScatterChart ;};

// X returns the inner wrapped XML type.
func (_dcce RadarChartSeries )X ()*_c .CT_RadarSer {return _dcce ._befg };

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_gdac *_c .CT_PieSer };

// X returns the inner wrapped XML type.
func (_cdf Pie3DChart )X ()*_c .CT_Pie3DChart {return _cdf ._cee };

// CategoryAxis returns the category data source.
func (_gba BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gba ._fc .Cat ==nil {_gba ._fc .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_gba ._fc .Cat );};func (_cda DataLabels )SetShowPercent (b bool ){_cda .ensureChoice ();_cda ._aef .Choice .ShowPercent =_c .NewCT_Boolean ();
_cda ._aef .Choice .ShowPercent .ValAttr =_d .Bool (b );};type nullAxis byte ;

// InitializeDefaults the bar chart to its defaults
func (_dg BarChart )InitializeDefaults (){_dg .SetDirection (_c .ST_BarDirCol )};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_fc *_c .CT_BarSer };

// AddBarChart adds a new bar chart to a chart.
func (_efg Chart )AddBarChart ()BarChart {_daf :=_c .NewCT_PlotAreaChoice ();_efg ._gcd .Chart .PlotArea .Choice =append (_efg ._gcd .Chart .PlotArea .Choice ,_daf );_daf .BarChart =_c .NewCT_BarChart ();_daf .BarChart .Grouping =_c .NewCT_BarGrouping ();
_daf .BarChart .Grouping .ValAttr =_c .ST_BarGroupingStandard ;_cdd :=BarChart {_ag :_daf .BarChart };_cdd .InitializeDefaults ();return _cdd ;};func (_eef DataLabels )ensureChoice (){if _eef ._aef .Choice ==nil {_eef ._aef .Choice =_c .NewCT_DLblsChoice ();
};};

// InitializeDefaults initializes a bar chart series to the default values.
func (_gce BarChartSeries )InitializeDefaults (){};func (_aebf ValueAxis )SetCrosses (axis Axis ){_aebf ._bcd .CrossAx .ValAttr =axis .AxisID ()};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_ecf *_c .CT_PieChart ;};func MakeNumberDataSource (x *_c .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// SetText sets the series text.
func (_fabd PieChartSeries )SetText (s string ){_fabd ._gdac .Tx =_c .NewCT_SerTx ();_fabd ._gdac .Tx .Choice .V =&s ;};func (_bgaa SurfaceChartSeries )Values ()NumberDataSource {if _bgaa ._cbg .Val ==nil {_bgaa ._cbg .Val =_c .NewCT_NumDataSource ();};
_bba :=MakeNumberDataSource (_bgaa ._cbg .Val );_bba .CreateEmptyNumberCache ();return _bba ;};

// AddAxis adds an axis to a line chart.
func (_fgfd Line3DChart )AddAxis (axis Axis ){_fdg :=_c .NewCT_UnsignedInt ();_fdg .ValAttr =axis .AxisID ();_fgfd ._ccg .AxId =append (_fgfd ._ccg .AxId ,_fdg );};func (_bfdc StockChart )AddAxis (axis Axis ){_edg :=_c .NewCT_UnsignedInt ();_edg .ValAttr =axis .AxisID ();
_bfdc ._fbcc .AxId =append (_bfdc ._fbcc .AxId ,_edg );};

// X returns the inner wrapped XML type.
func (_efb Line3DChart )X ()*_c .CT_Line3DChart {return _efb ._ccg };func (_abd CategoryAxis )SetMinorTickMark (m _c .ST_TickMark ){if m ==_c .ST_TickMarkUnset {_abd ._gd .MinorTickMark =nil ;}else {_abd ._gd .MinorTickMark =_c .NewCT_TickMark ();_abd ._gd .MinorTickMark .ValAttr =m ;
};};func (_cde ScatterChartSeries )Values ()NumberDataSource {if _cde ._ecdc .YVal ==nil {_cde ._ecdc .YVal =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_cde ._ecdc .YVal );};func (_fbga SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fbga ._cbg .Cat ==nil {_fbga ._cbg .Cat =_c .NewCT_AxDataSource ();
};return MakeAxisDataSource (_fbga ._cbg .Cat );};func (_bdg DataLabels )SetShowLegendKey (b bool ){_bdg .ensureChoice ();_bdg ._aef .Choice .ShowLegendKey =_c .NewCT_Boolean ();_bdg ._aef .Choice .ShowLegendKey .ValAttr =_d .Bool (b );};

// Values returns the value data source.
func (_ab AreaChartSeries )Values ()NumberDataSource {if _ab ._eag .Val ==nil {_ab ._eag .Val =_c .NewCT_NumDataSource ();};return MakeNumberDataSource (_ab ._eag .Val );};func (_afe BubbleChart )AddAxis (axis Axis ){_ffb :=_c .NewCT_UnsignedInt ();_ffb .ValAttr =axis .AxisID ();
_afe ._efda .AxId =append (_afe ._efda .AxId ,_ffb );};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_caf DoughnutChart )SetHoleSize (pct uint8 ){if _caf ._bgg .HoleSize ==nil {_caf ._bgg .HoleSize =_c .NewCT_HoleSize ();};if _caf ._bgg .HoleSize .ValAttr ==nil {_caf ._bgg .HoleSize .ValAttr =&_c .ST_HoleSize {};};_caf ._bgg .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;
};

// SetText sets the series text
func (_agd LineChartSeries )SetText (s string ){_agd ._gebe .Tx =_c .NewCT_SerTx ();_agd ._gebe .Tx .Choice .V =&s ;};func (_cb CategoryAxis )AxisID ()uint32 {return _cb ._gd .AxId .ValAttr };

// InitializeDefaults the bar chart to its defaults
func (_afg PieOfPieChart )InitializeDefaults (){_afg ._ged .VaryColors =_c .NewCT_Boolean ();_afg ._ged .VaryColors .ValAttr =_d .Bool (true );_afg .SetType (_c .ST_OfPieTypePie );_afg ._ged .SecondPieSize =_c .NewCT_SecondPieSize ();_afg ._ged .SecondPieSize .ValAttr =&_c .ST_SecondPieSize {};
_afg ._ged .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_d .Uint16 (75);_bbgag :=_c .NewCT_ChartLines ();_bbgag .SpPr =_ca .NewCT_ShapeProperties ();_bea :=_ba .MakeShapeProperties (_bbgag .SpPr );_bea .LineProperties ().SetSolidFill (_e .Auto );_afg ._ged .SerLines =append (_afg ._ged .SerLines ,_bbgag );
};

// AddAxis adds an axis to a Surface chart.
func (_eaeb Surface3DChart )AddAxis (axis Axis ){_dfbe :=_c .NewCT_UnsignedInt ();_dfbe .ValAttr =axis .AxisID ();_eaeb ._dgge .AxId =append (_eaeb ._dgge .AxId ,_dfbe );};

// AddRadarChart adds a new radar chart to a chart.
func (_gcde Chart )AddRadarChart ()RadarChart {_ad :=_c .NewCT_PlotAreaChoice ();_gcde ._gcd .Chart .PlotArea .Choice =append (_gcde ._gcd .Chart .PlotArea .Choice ,_ad );_ad .RadarChart =_c .NewCT_RadarChart ();_eec :=RadarChart {_badd :_ad .RadarChart };
_eec .InitializeDefaults ();return _eec ;};

// InitializeDefaults the bar chart to its defaults
func (_abc PieChart )InitializeDefaults (){_abc ._ecf .VaryColors =_c .NewCT_Boolean ();_abc ._ecf .VaryColors .ValAttr =_d .Bool (true );};func (_ddfe DateAxis )Properties ()_ba .ShapeProperties {if _ddfe ._cea .SpPr ==nil {_ddfe ._cea .SpPr =_ca .NewCT_ShapeProperties ();
};return _ba .MakeShapeProperties (_ddfe ._cea .SpPr );};type Title struct{_cfbc *_c .CT_Title };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_ae *_c .CT_AreaChart ;};func (_ffg ValueAxis )Properties ()_ba .ShapeProperties {if _ffg ._bcd .SpPr ==nil {_ffg ._bcd .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_ffg ._bcd .SpPr );};

// X returns the inner wrapped XML type.
func (_eefg PieOfPieChart )X ()*_c .CT_OfPieChart {return _eefg ._ged };

// AddSeries adds a default series to a bar chart.
func (_ef Bar3DChart )AddSeries ()BarChartSeries {_feb :=_ef .nextColor (len (_ef ._gf .Ser ));_gb :=_c .NewCT_BarSer ();_ef ._gf .Ser =append (_ef ._gf .Ser ,_gb );_gb .Idx .ValAttr =uint32 (len (_ef ._gf .Ser )-1);_gb .Order .ValAttr =uint32 (len (_ef ._gf .Ser )-1);
_gfa :=BarChartSeries {_gb };_gfa .InitializeDefaults ();_gfa .Properties ().SetSolidFill (_feb );return _gfa ;};

// CategoryAxis returns the category data source.
func (_fag AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fag ._eag .Cat ==nil {_fag ._eag .Cat =_c .NewCT_AxDataSource ();};return MakeAxisDataSource (_fag ._eag .Cat );};func (_ede DateAxis )MajorGridLines ()GridLines {if _ede ._cea .MajorGridlines ==nil {_ede ._cea .MajorGridlines =_c .NewCT_ChartLines ();
};return GridLines {_ede ._cea .MajorGridlines };};

// AddSeries adds a default series to a bar chart.
func (_dec BarChart )AddSeries ()BarChartSeries {_beg :=_dec .nextColor (len (_dec ._ag .Ser ));_deg :=_c .NewCT_BarSer ();_dec ._ag .Ser =append (_dec ._ag .Ser ,_deg );_deg .Idx .ValAttr =uint32 (len (_dec ._ag .Ser )-1);_deg .Order .ValAttr =uint32 (len (_dec ._ag .Ser )-1);
_efd :=BarChartSeries {_deg };_efd .InitializeDefaults ();_efd .Properties ().SetSolidFill (_beg );return _efd ;};func (_gbaa DataLabels )SetShowValue (b bool ){_gbaa .ensureChoice ();_gbaa ._aef .Choice .ShowVal =_c .NewCT_Boolean ();_gbaa ._aef .Choice .ShowVal .ValAttr =_d .Bool (b );
};type Legend struct{_gec *_c .CT_Legend };

// Properties returns the bar chart series shape properties.
func (_bdgg PieChartSeries )Properties ()_ba .ShapeProperties {if _bdgg ._gdac .SpPr ==nil {_bdgg ._gdac .SpPr =_ca .NewCT_ShapeProperties ();};return _ba .MakeShapeProperties (_bdgg ._gdac .SpPr );};func MakeLegend (l *_c .CT_Legend )Legend {return Legend {l }};


// SetDirection changes the direction of the bar chart (bar or column).
func (_fac Bar3DChart )SetDirection (d _c .ST_BarDir ){_fac ._gf .BarDir .ValAttr =d };