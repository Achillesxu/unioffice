//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_d "fmt";_c "github.com/unidoc/unioffice";_fa "github.com/unidoc/unioffice/color";_af "github.com/unidoc/unioffice/drawing";_b "github.com/unidoc/unioffice/measurement";_e "github.com/unidoc/unioffice/schema/soo/dml";_f "github.com/unidoc/unioffice/schema/soo/dml/chart";_ag "math/rand";);

// AddArea3DChart adds a new area chart to a chart.
func (_eeg Chart )AddArea3DChart ()Area3DChart {_fbc (_eeg ._cfad .Chart );_efe :=_f .NewCT_PlotAreaChoice ();_eeg ._cfad .Chart .PlotArea .Choice =append (_eeg ._cfad .Chart .PlotArea .Choice ,_efe );_efe .Area3DChart =_f .NewCT_Area3DChart ();_efd :=Area3DChart {_da :_efe .Area3DChart };_efd .InitializeDefaults ();return _efd ;};func (_gff CategoryAxis )SetMinorTickMark (m _f .ST_TickMark ){if m ==_f .ST_TickMarkUnset {_gff ._gfb .MinorTickMark =nil ;}else {_gff ._gfb .MinorTickMark =_f .NewCT_TickMark ();_gff ._gfb .MinorTickMark .ValAttr =m ;};};func (_gcdb SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gcdb ._bfe .Cat ==nil {_gcdb ._bfe .Cat =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_gcdb ._bfe .Cat );};func (_add LineChartSeries )SetSmooth (b bool ){_add ._eee .Smooth =_f .NewCT_Boolean ();_add ._eee .Smooth .ValAttr =&b ;};type CategoryAxis struct{_gfb *_f .CT_CatAx };func (_adab DataLabels )SetShowPercent (b bool ){_adab .ensureChoice ();_adab ._aeg .Choice .ShowPercent =_f .NewCT_Boolean ();_adab ._aeg .Choice .ShowPercent .ValAttr =_c .Bool (b );};func (_ccab SurfaceChartSeries )Values ()NumberDataSource {if _ccab ._bfe .Val ==nil {_ccab ._bfe .Val =_f .NewCT_NumDataSource ();};_gea :=MakeNumberDataSource (_ccab ._bfe .Val );_gea .CreateEmptyNumberCache ();return _gea ;};

// AddSeries adds a default series to a bar chart.
func (_fe Bar3DChart )AddSeries ()BarChartSeries {_ec :=_fe .nextColor (len (_fe ._ef .Ser ));_ff :=_f .NewCT_BarSer ();_fe ._ef .Ser =append (_fe ._ef .Ser ,_ff );_ff .Idx .ValAttr =uint32 (len (_fe ._ef .Ser )-1);_ff .Order .ValAttr =uint32 (len (_fe ._ef .Ser )-1);_fga :=BarChartSeries {_ff };_fga .InitializeDefaults ();_fga .Properties ().SetSolidFill (_ec );return _fga ;};

// X returns the inner wrapped XML type.
func (_baag PieChart )X ()*_f .CT_PieChart {return _baag ._gbf };func (_fgcg DateAxis )SetTickLabelPosition (p _f .ST_TickLblPos ){if p ==_f .ST_TickLblPosUnset {_fgcg ._geee .TickLblPos =nil ;}else {_fgcg ._geee .TickLblPos =_f .NewCT_TickLblPos ();_fgcg ._geee .TickLblPos .ValAttr =p ;};};

// CategoryAxis returns the category data source.
func (_bb BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bb ._bad .Cat ==nil {_bb ._bad .Cat =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_bb ._bad .Cat );};func (_gfgee Title )SetText (s string ){if _gfgee ._dgf .Tx ==nil {_gfgee ._dgf .Tx =_f .NewCT_Tx ();};if _gfgee ._dgf .Tx .Choice .Rich ==nil {_gfgee ._dgf .Tx .Choice .Rich =_e .NewCT_TextBody ();};var _fce *_e .CT_TextParagraph ;if len (_gfgee ._dgf .Tx .Choice .Rich .P )==0{_fce =_e .NewCT_TextParagraph ();_gfgee ._dgf .Tx .Choice .Rich .P =[]*_e .CT_TextParagraph {_fce };}else {_fce =_gfgee ._dgf .Tx .Choice .Rich .P [0];};var _bcbb *_e .EG_TextRun ;if len (_fce .EG_TextRun )==0{_bcbb =_e .NewEG_TextRun ();_fce .EG_TextRun =[]*_e .EG_TextRun {_bcbb };}else {_bcbb =_fce .EG_TextRun [0];};if _bcbb .R ==nil {_bcbb .R =_e .NewCT_RegularTextRun ();};_bcbb .R .T =s ;};func (_fbg CategoryAxis )SetPosition (p _f .ST_AxPos ){_fbg ._gfb .AxPos =_f .NewCT_AxPos ();_fbg ._gfb .AxPos .ValAttr =p ;};

// X returns the inner wrapped XML type.
func (_abf Line3DChart )X ()*_f .CT_Line3DChart {return _abf ._ddc };

// InitializeDefaults initializes an Pie series to the default values.
func (_fdb PieChartSeries )InitializeDefaults (){};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_fg *_f .CT_AreaSer };

// SetOrder sets the order of the series
func (_ggd SurfaceChartSeries )SetOrder (idx uint32 ){_ggd ._bfe .Order .ValAttr =idx };

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_ef *_f .CT_Bar3DChart ;};type DataLabels struct{_aeg *_f .CT_DLbls };func (_gb CategoryAxis )MajorGridLines ()GridLines {if _gb ._gfb .MajorGridlines ==nil {_gb ._gfb .MajorGridlines =_f .NewCT_ChartLines ();};return GridLines {_gb ._gfb .MajorGridlines };};

// X returns the inner wrapped XML type.
func (_bfb ScatterChartSeries )X ()*_f .CT_ScatterSer {return _bfb ._abd };func (_ged nullAxis )AxisID ()uint32 {return 0};

// X returns the inner wrapped XML type.
func (_fdgc Chart )X ()*_f .ChartSpace {return _fdgc ._cfad };

// Values returns the bubble size data source.
func (_cfa BubbleChartSeries )BubbleSizes ()NumberDataSource {if _cfa ._agca .BubbleSize ==nil {_cfa ._agca .BubbleSize =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_cfa ._agca .BubbleSize );};

// Marker returns the marker properties.
func (_be LineChartSeries )Marker ()Marker {if _be ._eee .Marker ==nil {_be ._eee .Marker =_f .NewCT_Marker ();};return MakeMarker (_be ._eee .Marker );};func (_gdf LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gdf ._eee .Cat ==nil {_gdf ._eee .Cat =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_gdf ._eee .Cat );};func (_ggc Chart )AddSeriesAxis ()SeriesAxis {_agg :=_f .NewCT_SerAx ();if _ggc ._cfad .Chart .PlotArea .CChoice ==nil {_ggc ._cfad .Chart .PlotArea .CChoice =_f .NewCT_PlotAreaChoice1 ();};_agg .AxId =_f .NewCT_UnsignedInt ();_agg .AxId .ValAttr =0x7FFFFFFF&_ag .Uint32 ();_ggc ._cfad .Chart .PlotArea .CChoice .SerAx =append (_ggc ._cfad .Chart .PlotArea .CChoice .SerAx ,_agg );_agg .Delete =_f .NewCT_Boolean ();_agg .Delete .ValAttr =_c .Bool (false );_bcde :=MakeSeriesAxis (_agg );_bcde .InitializeDefaults ();return _bcde ;};

// AddValueAxis adds a value axis to the chart.
func (_fgc Chart )AddValueAxis ()ValueAxis {_cfec :=_f .NewCT_ValAx ();if _fgc ._cfad .Chart .PlotArea .CChoice ==nil {_fgc ._cfad .Chart .PlotArea .CChoice =_f .NewCT_PlotAreaChoice1 ();};_cfec .AxId =_f .NewCT_UnsignedInt ();_cfec .AxId .ValAttr =0x7FFFFFFF&_ag .Uint32 ();_fgc ._cfad .Chart .PlotArea .CChoice .ValAx =append (_fgc ._cfad .Chart .PlotArea .CChoice .ValAx ,_cfec );_cfec .Delete =_f .NewCT_Boolean ();_cfec .Delete .ValAttr =_c .Bool (false );_cfec .Scaling =_f .NewCT_Scaling ();_cfec .Scaling .Orientation =_f .NewCT_Orientation ();_cfec .Scaling .Orientation .ValAttr =_f .ST_OrientationMinMax ;_cfec .Choice =&_f .EG_AxSharedChoice {};_cfec .Choice .Crosses =_f .NewCT_Crosses ();_cfec .Choice .Crosses .ValAttr =_f .ST_CrossesAutoZero ;_cfec .CrossBetween =_f .NewCT_CrossBetween ();_cfec .CrossBetween .ValAttr =_f .ST_CrossBetweenBetween ;_dbc :=MakeValueAxis (_cfec );_dbc .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_fa .LightGray );_dbc .SetMajorTickMark (_f .ST_TickMarkOut );_dbc .SetMinorTickMark (_f .ST_TickMarkIn );_dbc .SetTickLabelPosition (_f .ST_TickLblPosNextTo );_dbc .Properties ().LineProperties ().SetSolidFill (_fa .Black );_dbc .SetPosition (_f .ST_AxPosL );return _dbc ;};

// SetValues sets values directly on a source.
func (_gba NumberDataSource )SetValues (v []float64 ){_gba .ensureChoice ();_gba ._gbe .Choice .NumRef =nil ;_gba ._gbe .Choice .NumLit =_f .NewCT_NumData ();_gba ._gbe .Choice .NumLit .PtCount =_f .NewCT_UnsignedInt ();_gba ._gbe .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _dggd ,_ebc :=range v {_gba ._gbe .Choice .NumLit .Pt =append (_gba ._gbe .Choice .NumLit .Pt ,&_f .CT_NumVal {IdxAttr :uint32 (_dggd ),V :_d .Sprintf ("\u0025\u0067",_ebc )});};};

// AddSeries adds a default series to an Pie chart.
func (_eegc PieOfPieChart )AddSeries ()PieChartSeries {_acbf :=_f .NewCT_PieSer ();_eegc ._cge .Ser =append (_eegc ._cge .Ser ,_acbf );_acbf .Idx .ValAttr =uint32 (len (_eegc ._cge .Ser )-1);_acbf .Order .ValAttr =uint32 (len (_eegc ._cge .Ser )-1);_gda :=PieChartSeries {_acbf };_gda .InitializeDefaults ();return _gda ;};

// X returns the inner wrapped XML type.
func (_bgg RadarChartSeries )X ()*_f .CT_RadarSer {return _bgg ._abe };func (_gggc GridLines )Properties ()_af .ShapeProperties {if _gggc ._aee .SpPr ==nil {_gggc ._aee .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_gggc ._aee .SpPr );};

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_cge *_f .CT_OfPieChart ;};

// AddAxis adds an axis to a line chart.
func (_fgg Line3DChart )AddAxis (axis Axis ){_bdb :=_f .NewCT_UnsignedInt ();_bdb .ValAttr =axis .AxisID ();_fgg ._ddc .AxId =append (_fgg ._ddc .AxId ,_bdb );};func (_bfa NumberDataSource )ensureChoice (){if _bfa ._gbe .Choice ==nil {_bfa ._gbe .Choice =_f .NewCT_NumDataSourceChoice ();};};

// AddBubbleChart adds a new bubble chart.
func (_dea Chart )AddBubbleChart ()BubbleChart {_egd :=_f .NewCT_PlotAreaChoice ();_dea ._cfad .Chart .PlotArea .Choice =append (_dea ._cfad .Chart .PlotArea .Choice ,_egd );_egd .BubbleChart =_f .NewCT_BubbleChart ();_dcc :=BubbleChart {_efb :_egd .BubbleChart };_dcc .InitializeDefaults ();return _dcc ;};func (_fdg CategoryAxis )AxisID ()uint32 {return _fdg ._gfb .AxId .ValAttr };

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_ceaf Chart )AddDoughnutChart ()DoughnutChart {_cacc :=_f .NewCT_PlotAreaChoice ();_ceaf ._cfad .Chart .PlotArea .Choice =append (_ceaf ._cfad .Chart .PlotArea .Choice ,_cacc );_cacc .DoughnutChart =_f .NewCT_DoughnutChart ();_gde :=DoughnutChart {_gcef :_cacc .DoughnutChart };_gde .InitializeDefaults ();return _gde ;};

// AddCategoryAxis adds a category axis.
func (_gcd Chart )AddCategoryAxis ()CategoryAxis {_fab :=_f .NewCT_CatAx ();if _gcd ._cfad .Chart .PlotArea .CChoice ==nil {_gcd ._cfad .Chart .PlotArea .CChoice =_f .NewCT_PlotAreaChoice1 ();};_fab .AxId =_f .NewCT_UnsignedInt ();_fab .AxId .ValAttr =0x7FFFFFFF&_ag .Uint32 ();_gcd ._cfad .Chart .PlotArea .CChoice .CatAx =append (_gcd ._cfad .Chart .PlotArea .CChoice .CatAx ,_fab );_fab .Auto =_f .NewCT_Boolean ();_fab .Auto .ValAttr =_c .Bool (true );_fab .Delete =_f .NewCT_Boolean ();_fab .Delete .ValAttr =_c .Bool (false );_agf :=MakeCategoryAxis (_fab );_agf .InitializeDefaults ();return _agf ;};

// X returns the inner wrapped XML type.
func (_eae PieChartSeries )X ()*_f .CT_PieSer {return _eae ._dafg };

// Properties returns the bar chart series shape properties.
func (_bcccd RadarChartSeries )Properties ()_af .ShapeProperties {if _bcccd ._abe .SpPr ==nil {_bcccd ._abe .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_bcccd ._abe .SpPr );};func MakeMarker (x *_f .CT_Marker )Marker {return Marker {x }};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_da *_f .CT_Area3DChart ;};

// X returns the inner wrapped XML type.
func (_ceed SurfaceChart )X ()*_f .CT_SurfaceChart {return _ceed ._aaaa };

// AddSeries adds a default series to a Bubble chart.
func (_dg BubbleChart )AddSeries ()BubbleChartSeries {_gf :=_dg .nextColor (len (_dg ._efb .Ser ));_cac :=_f .NewCT_BubbleSer ();_dg ._efb .Ser =append (_dg ._efb .Ser ,_cac );_cac .Idx .ValAttr =uint32 (len (_dg ._efb .Ser )-1);_cac .Order .ValAttr =uint32 (len (_dg ._efb .Ser )-1);_bc :=BubbleChartSeries {_cac };_bc .InitializeDefaults ();_bc .Properties ().SetSolidFill (_gf );return _bc ;};

// AddSurfaceChart adds a new surface chart to a chart.
func (_db Chart )AddSurfaceChart ()SurfaceChart {_aaa :=_f .NewCT_PlotAreaChoice ();_db ._cfad .Chart .PlotArea .Choice =append (_db ._cfad .Chart .PlotArea .Choice ,_aaa );_aaa .SurfaceChart =_f .NewCT_SurfaceChart ();_fbc (_db ._cfad .Chart );_db ._cfad .Chart .View3D .RotX .ValAttr =_c .Int8 (90);_db ._cfad .Chart .View3D .RotY .ValAttr =_c .Uint16 (0);_db ._cfad .Chart .View3D .Perspective =_f .NewCT_Perspective ();_db ._cfad .Chart .View3D .Perspective .ValAttr =_c .Uint8 (0);_ebb :=SurfaceChart {_aaaa :_aaa .SurfaceChart };_ebb .InitializeDefaults ();return _ebb ;};

// Properties returns the chart's shape properties.
func (_acg Chart )Properties ()_af .ShapeProperties {if _acg ._cfad .SpPr ==nil {_acg ._cfad .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_acg ._cfad .SpPr );};type SurfaceChartSeries struct{_bfe *_f .CT_SurfaceSer };

// SetDirection changes the direction of the bar chart (bar or column).
func (_dab BarChart )SetDirection (d _f .ST_BarDir ){_dab ._ed .BarDir .ValAttr =d };

// Order returns the order of the series
func (_fae LineChartSeries )Order ()uint32 {return _fae ._eee .Order .ValAttr };

// SetValues is used to set the source data to a set of values.
func (_dadb CategoryAxisDataSource )SetValues (v []string ){_dadb ._dag .Choice =_f .NewCT_AxDataSourceChoice ();_dadb ._dag .Choice .StrLit =_f .NewCT_StrData ();_dadb ._dag .Choice .StrLit .PtCount =_f .NewCT_UnsignedInt ();_dadb ._dag .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _agce ,_bdd :=range v {_dadb ._dag .Choice .StrLit .Pt =append (_dadb ._dag .Choice .StrLit .Pt ,&_f .CT_StrVal {IdxAttr :uint32 (_agce ),V :_bdd });};};func (_dfgg DateAxis )AxisID ()uint32 {return _dfgg ._geee .AxId .ValAttr };

// Properties returns the bar chart series shape properties.
func (_edc BarChartSeries )Properties ()_af .ShapeProperties {if _edc ._bad .SpPr ==nil {_edc ._bad .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_edc ._bad .SpPr );};

// AddPie3DChart adds a new pie chart to a chart.
func (_geb Chart )AddPie3DChart ()Pie3DChart {_fbc (_geb ._cfad .Chart );_ggfd :=_f .NewCT_PlotAreaChoice ();_geb ._cfad .Chart .PlotArea .Choice =append (_geb ._cfad .Chart .PlotArea .Choice ,_ggfd );_ggfd .Pie3DChart =_f .NewCT_Pie3DChart ();_bcd :=Pie3DChart {_acbg :_ggfd .Pie3DChart };_bcd .InitializeDefaults ();return _bcd ;};

// InitializeDefaults the bar chart to its defaults
func (_ad AreaChart )InitializeDefaults (){};func (_gca SurfaceChart )InitializeDefaults (){_gca ._aaaa .Wireframe =_f .NewCT_Boolean ();_gca ._aaaa .Wireframe .ValAttr =_c .Bool (false );_gca ._aaaa .BandFmts =_f .NewCT_BandFmts ();for _agb :=0;_agb < 15;_agb ++{_dee :=_f .NewCT_BandFmt ();_dee .Idx .ValAttr =uint32 (_agb );_dee .SpPr =_e .NewCT_ShapeProperties ();_ggbg :=_af .MakeShapeProperties (_dee .SpPr );_ggbg .SetSolidFill (_gca .nextColor (_agb ));_gca ._aaaa .BandFmts .BandFmt =append (_gca ._aaaa .BandFmts .BandFmt ,_dee );};};func (_aad Legend )SetPosition (p _f .ST_LegendPos ){if p ==_f .ST_LegendPosUnset {_aad ._bff .LegendPos =nil ;}else {_aad ._bff .LegendPos =_f .NewCT_LegendPos ();_aad ._bff .LegendPos .ValAttr =p ;};};

// X returns the inner wrapped XML type.
func (_cbb ValueAxis )X ()*_f .CT_ValAx {return _cbb ._abdb };

// X returns the inner wrapped XML type.
func (_fad BarChartSeries )X ()*_f .CT_BarSer {return _fad ._bad };

// Order returns the order of the series
func (_edg ScatterChartSeries )Order ()uint32 {return _edg ._abd .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_gad StockChart )X ()*_f .CT_StockChart {return _gad ._cgff };func (_cc Bar3DChart )AddAxis (axis Axis ){_ffg :=_f .NewCT_UnsignedInt ();_ffg .ValAttr =axis .AxisID ();_cc ._ef .AxId =append (_cc ._ef .AxId ,_ffg );};func (_abg DataLabels )SetShowSeriesName (b bool ){_abg .ensureChoice ();_abg ._aeg .Choice .ShowSerName =_f .NewCT_Boolean ();_abg ._aeg .Choice .ShowSerName .ValAttr =_c .Bool (b );};var _fec =[]_fa .Color {_fa .RGB (0x33,0x66,0xcc),_fa .RGB (0xDC,0x39,0x12),_fa .RGB (0xFF,0x99,0x00),_fa .RGB (0x10,0x96,0x18),_fa .RGB (0x99,0x00,0x99),_fa .RGB (0x3B,0x3E,0xAC),_fa .RGB (0x00,0x99,0xC6),_fa .RGB (0xDD,0x44,0x77),_fa .RGB (0x66,0xAA,0x00),_fa .RGB (0xB8,0x2E,0x2E),_fa .RGB (0x31,0x63,0x95),_fa .RGB (0x99,0x44,0x99),_fa .RGB (0x22,0xAA,0x99),_fa .RGB (0xAA,0xAA,0x11),_fa .RGB (0x66,0x33,0xCC),_fa .RGB (0xE6,0x73,0x00),_fa .RGB (0x8B,0x07,0x07),_fa .RGB (0x32,0x92,0x62),_fa .RGB (0x55,0x74,0xA6),_fa .RGB (0x3B,0x3E,0xAC)};

// AddAxis adds an axis to a Scatter chart.
func (_afbb ScatterChart )AddAxis (axis Axis ){_abef :=_f .NewCT_UnsignedInt ();_abef .ValAttr =axis .AxisID ();_afbb ._bdbd .AxId =append (_afbb ._bdbd .AxId ,_abef );};

// X returns the inner wrapped XML type.
func (_gcgca Title )X ()*_f .CT_Title {return _gcgca ._dgf };func (_dcgga SeriesAxis )AxisID ()uint32 {return _dcgga ._fbda .AxId .ValAttr };

// AddScatterChart adds a scatter (X/Y) chart.
func (_dca Chart )AddScatterChart ()ScatterChart {_aea :=_f .NewCT_PlotAreaChoice ();_dca ._cfad .Chart .PlotArea .Choice =append (_dca ._cfad .Chart .PlotArea .Choice ,_aea );_aea .ScatterChart =_f .NewCT_ScatterChart ();_dbg :=ScatterChart {_bdbd :_aea .ScatterChart };_dbg .InitializeDefaults ();return _dbg ;};var NullAxis Axis =nullAxis (0);

// X returns the inner wrapped XML type.
func (_ddb PieOfPieChart )X ()*_f .CT_OfPieChart {return _ddb ._cge };

// SetText sets the series text
func (_dcbdf SurfaceChartSeries )SetText (s string ){_dcbdf ._bfe .Tx =_f .NewCT_SerTx ();_dcbdf ._bfe .Tx .Choice .V =&s ;};

// Properties returns the line chart series shape properties.
func (_dbfe LineChartSeries )Properties ()_af .ShapeProperties {if _dbfe ._eee .SpPr ==nil {_dbfe ._eee .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_dbfe ._eee .SpPr );};

// Labels returns the data label properties.
func (_ebdb ScatterChartSeries )Labels ()DataLabels {if _ebdb ._abd .DLbls ==nil {_ebdb ._abd .DLbls =_f .NewCT_DLbls ();};return MakeDataLabels (_ebdb ._abd .DLbls );};func (_dce DateAxis )SetPosition (p _f .ST_AxPos ){_dce ._geee .AxPos =_f .NewCT_AxPos ();_dce ._geee .AxPos .ValAttr =p ;};type Marker struct{_dcg *_f .CT_Marker };

// InitializeDefaults the bar chart to its defaults
func (_gcefb DoughnutChart )InitializeDefaults (){_gcefb ._gcef .VaryColors =_f .NewCT_Boolean ();_gcefb ._gcef .VaryColors .ValAttr =_c .Bool (true );_gcefb ._gcef .HoleSize =_f .NewCT_HoleSize ();_gcefb ._gcef .HoleSize .ValAttr =&_f .ST_HoleSize {};_gcefb ._gcef .HoleSize .ValAttr .ST_HoleSizeUByte =_c .Uint8 (50);};func (_gga Title )RunProperties ()_af .RunProperties {if _gga ._dgf .Tx ==nil {_gga .SetText ("");};if _gga ._dgf .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_gga ._dgf .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_e .NewCT_TextCharacterProperties ();};return _af .MakeRunProperties (_gga ._dgf .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func MakeTitle (x *_f .CT_Title )Title {return Title {x }};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_efb *_f .CT_BubbleChart ;};func (_bcbc ValueAxis )SetCrosses (axis Axis ){_bcbc ._abdb .CrossAx .ValAttr =axis .AxisID ()};

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_aaaa *_f .CT_SurfaceChart ;};func _fbc (_aaf *_f .CT_Chart ){_aaf .View3D =_f .NewCT_View3D ();_aaf .View3D .RotX =_f .NewCT_RotX ();_aaf .View3D .RotX .ValAttr =_c .Int8 (15);_aaf .View3D .RotY =_f .NewCT_RotY ();_aaf .View3D .RotY .ValAttr =_c .Uint16 (20);_aaf .View3D .RAngAx =_f .NewCT_Boolean ();_aaf .View3D .RAngAx .ValAttr =_c .Bool (false );_aaf .Floor =_f .NewCT_Surface ();_aaf .Floor .Thickness =_f .NewCT_Thickness ();_aaf .Floor .Thickness .ValAttr .Uint32 =_c .Uint32 (0);_aaf .SideWall =_f .NewCT_Surface ();_aaf .SideWall .Thickness =_f .NewCT_Thickness ();_aaf .SideWall .Thickness .ValAttr .Uint32 =_c .Uint32 (0);_aaf .BackWall =_f .NewCT_Surface ();_aaf .BackWall .Thickness =_f .NewCT_Thickness ();_aaf .BackWall .Thickness .ValAttr .Uint32 =_c .Uint32 (0);};func (_dae Title )ParagraphProperties ()_af .ParagraphProperties {if _dae ._dgf .Tx ==nil {_dae .SetText ("");};if _dae ._dgf .Tx .Choice .Rich .P [0].PPr ==nil {_dae ._dgf .Tx .Choice .Rich .P [0].PPr =_e .NewCT_TextParagraphProperties ();};return _af .MakeParagraphProperties (_dae ._dgf .Tx .Choice .Rich .P [0].PPr );};

// AddSeries adds a default series to a Stock chart.
func (_efbg StockChart )AddSeries ()LineChartSeries {_ebfe :=_f .NewCT_LineSer ();_efbg ._cgff .Ser =append (_efbg ._cgff .Ser ,_ebfe );_ebfe .Idx .ValAttr =uint32 (len (_efbg ._cgff .Ser )-1);_ebfe .Order .ValAttr =uint32 (len (_efbg ._cgff .Ser )-1);_fcg :=LineChartSeries {_ebfe };_fcg .Values ().CreateEmptyNumberCache ();_fcg .Properties ().LineProperties ().SetNoFill ();return _fcg ;};func (_ead DataLabels )ensureChoice (){if _ead ._aeg .Choice ==nil {_ead ._aeg .Choice =_f .NewCT_DLblsChoice ();};};func (_gcc DateAxis )MajorGridLines ()GridLines {if _gcc ._geee .MajorGridlines ==nil {_gcc ._geee .MajorGridlines =_f .NewCT_ChartLines ();};return GridLines {_gcc ._geee .MajorGridlines };};

// AddSeries adds a default series to an Pie3D chart.
func (_ebd Pie3DChart )AddSeries ()PieChartSeries {_dcb :=_f .NewCT_PieSer ();_ebd ._acbg .Ser =append (_ebd ._acbg .Ser ,_dcb );_dcb .Idx .ValAttr =uint32 (len (_ebd ._acbg .Ser )-1);_dcb .Order .ValAttr =uint32 (len (_ebd ._acbg .Ser )-1);_cbda :=PieChartSeries {_dcb };_cbda .InitializeDefaults ();return _cbda ;};type Legend struct{_bff *_f .CT_Legend };

// X returns the inner wrapped XML type.
func (_gfe SurfaceChartSeries )X ()*_f .CT_SurfaceSer {return _gfe ._bfe };func (_caf Marker )SetSize (sz uint8 ){_caf ._dcg .Size =_f .NewCT_MarkerSize ();_caf ._dcg .Size .ValAttr =&sz ;};

// SetText sets the series text.
func (_fb BarChartSeries )SetText (s string ){_fb ._bad .Tx =_f .NewCT_SerTx ();_fb ._bad .Tx .Choice .V =&s ;};

// AddSeries adds a default series to an Pie chart.
func (_gcgc PieChart )AddSeries ()PieChartSeries {_bccc :=_f .NewCT_PieSer ();_gcgc ._gbf .Ser =append (_gcgc ._gbf .Ser ,_bccc );_bccc .Idx .ValAttr =uint32 (len (_gcgc ._gbf .Ser )-1);_bccc .Order .ValAttr =uint32 (len (_gcgc ._gbf .Ser )-1);_cddf :=PieChartSeries {_bccc };_cddf .InitializeDefaults ();return _cddf ;};func (_ecc DataLabels )SetShowLeaderLines (b bool ){_ecc .ensureChoice ();_ecc ._aeg .Choice .ShowLeaderLines =_f .NewCT_Boolean ();_ecc ._aeg .Choice .ShowLeaderLines .ValAttr =_c .Bool (b );};func (_bcb DateAxis )Properties ()_af .ShapeProperties {if _bcb ._geee .SpPr ==nil {_bcb ._geee .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_bcb ._geee .SpPr );};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_eee *_f .CT_LineSer };

// X returns the inner wrapped XML type.
func (_dgg BubbleChartSeries )X ()*_f .CT_BubbleSer {return _dgg ._agca };

// CategoryAxis returns the category data source.
func (_ded BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ded ._agca .XVal ==nil {_ded ._agca .XVal =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_ded ._agca .XVal );};func MakeSeriesAxis (x *_f .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// AddAreaChart adds a new area chart to a chart.
func (_bbe Chart )AddAreaChart ()AreaChart {_bga :=_f .NewCT_PlotAreaChoice ();_bbe ._cfad .Chart .PlotArea .Choice =append (_bbe ._cfad .Chart .PlotArea .Choice ,_bga );_bga .AreaChart =_f .NewCT_AreaChart ();_ggb :=AreaChart {_cg :_bga .AreaChart };_ggb .InitializeDefaults ();return _ggb ;};func (_gedd DateAxis )SetCrosses (axis Axis ){_gedd ._geee .CrossAx .ValAttr =axis .AxisID ()};

// SetIndex sets the index of the series
func (_aabg SurfaceChartSeries )SetIndex (idx uint32 ){_aabg ._bfe .Idx .ValAttr =idx };func (_bbgb ValueAxis )SetPosition (p _f .ST_AxPos ){_bbgb ._abdb .AxPos =_f .NewCT_AxPos ();_bbgb ._abdb .AxPos .ValAttr =p ;};func (_fdge DataLabels )SetShowCategoryName (b bool ){_fdge .ensureChoice ();_fdge ._aeg .Choice .ShowCatName =_f .NewCT_Boolean ();_fdge ._aeg .Choice .ShowCatName .ValAttr =_c .Bool (b );};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_dcbd *_f .CT_Surface3DChart ;};func (_eagd DataLabels )SetShowLegendKey (b bool ){_eagd .ensureChoice ();_eagd ._aeg .Choice .ShowLegendKey =_f .NewCT_Boolean ();_eagd ._aeg .Choice .ShowLegendKey .ValAttr =_c .Bool (b );};func (_gc CategoryAxis )Properties ()_af .ShapeProperties {if _gc ._gfb .SpPr ==nil {_gc ._gfb .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_gc ._gfb .SpPr );};

// SetText sets the series text.
func (_baf AreaChartSeries )SetText (s string ){_baf ._fg .Tx =_f .NewCT_SerTx ();_baf ._fg .Tx .Choice .V =&s ;};func (_cdg CategoryAxis )SetMajorTickMark (m _f .ST_TickMark ){if m ==_f .ST_TickMarkUnset {_cdg ._gfb .MajorTickMark =nil ;}else {_cdg ._gfb .MajorTickMark =_f .NewCT_TickMark ();_cdg ._gfb .MajorTickMark .ValAttr =m ;};};type chartBase struct{};

// AddStockChart adds a new stock chart.
func (_gbg Chart )AddStockChart ()StockChart {_fgd :=_f .NewCT_PlotAreaChoice ();_gbg ._cfad .Chart .PlotArea .Choice =append (_gbg ._cfad .Chart .PlotArea .Choice ,_fgd );_fgd .StockChart =_f .NewCT_StockChart ();_ee :=StockChart {_cgff :_fgd .StockChart };_ee .InitializeDefaults ();return _ee ;};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_aff DoughnutChart )SetHoleSize (pct uint8 ){if _aff ._gcef .HoleSize ==nil {_aff ._gcef .HoleSize =_f .NewCT_HoleSize ();};if _aff ._gcef .HoleSize .ValAttr ==nil {_aff ._gcef .HoleSize .ValAttr =&_f .ST_HoleSize {};};_aff ._gcef .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};

// X returns the inner wrapped XML type.
func (_dfa LineChart )X ()*_f .CT_LineChart {return _dfa ._aae };

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_agca *_f .CT_BubbleSer };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_cg *_f .CT_AreaChart ;};func (_aeea ScatterChartSeries )SetSmooth (b bool ){_aeea ._abd .Smooth =_f .NewCT_Boolean ();_aeea ._abd .Smooth .ValAttr =&b ;};func (_eff LineChartSeries )InitializeDefaults (){_eff .Properties ().LineProperties ().SetWidth (1*_b .Point );_eff .Properties ().LineProperties ().SetSolidFill (_fa .Black );_eff .Properties ().LineProperties ().SetJoin (_af .LineJoinRound );_eff .Marker ().SetSymbol (_f .ST_MarkerStyleNone );_eff .Labels ().SetShowLegendKey (false );_eff .Labels ().SetShowValue (false );_eff .Labels ().SetShowPercent (false );_eff .Labels ().SetShowCategoryName (false );_eff .Labels ().SetShowSeriesName (false );_eff .Labels ().SetShowLeaderLines (false );};

// AddSeries adds a default series to a Surface chart.
func (_ddf SurfaceChart )AddSeries ()SurfaceChartSeries {_effa :=_ddf .nextColor (len (_ddf ._aaaa .Ser ));_bab :=_f .NewCT_SurfaceSer ();_ddf ._aaaa .Ser =append (_ddf ._aaaa .Ser ,_bab );_bab .Idx .ValAttr =uint32 (len (_ddf ._aaaa .Ser )-1);_bab .Order .ValAttr =uint32 (len (_ddf ._aaaa .Ser )-1);_fdd :=SurfaceChartSeries {_bab };_fdd .InitializeDefaults ();_fdd .Properties ().LineProperties ().SetSolidFill (_effa );return _fdd ;};

// X returns the inner wrapped XML type.
func (_fcdb DateAxis )X ()*_f .CT_DateAx {return _fcdb ._geee };func (_ace Marker )Properties ()_af .ShapeProperties {if _ace ._dcg .SpPr ==nil {_ace ._dcg .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_ace ._dcg .SpPr );};

// X returns the inner wrapped XML type.
func (_aa Bar3DChart )X ()*_f .CT_Bar3DChart {return _aa ._ef };

// AddLineChart adds a new line chart to a chart.
func (_adb Chart )AddLineChart ()LineChart {_fac :=_f .NewCT_PlotAreaChoice ();_adb ._cfad .Chart .PlotArea .Choice =append (_adb ._cfad .Chart .PlotArea .Choice ,_fac );_fac .LineChart =_f .NewCT_LineChart ();_fac .LineChart .Grouping =_f .NewCT_Grouping ();_fac .LineChart .Grouping .ValAttr =_f .ST_GroupingStandard ;return LineChart {_aae :_fac .LineChart };};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_gag CategoryAxisDataSource )SetLabelReference (s string ){_gag ._dag .Choice =_f .NewCT_AxDataSourceChoice ();_gag ._dag .Choice .StrRef =_f .NewCT_StrRef ();_gag ._dag .Choice .StrRef .F =s ;};

// AddSeries adds a default series to a Surface chart.
func (_afg Surface3DChart )AddSeries ()SurfaceChartSeries {_bdf :=_afg .nextColor (len (_afg ._dcbd .Ser ));_eab :=_f .NewCT_SurfaceSer ();_afg ._dcbd .Ser =append (_afg ._dcbd .Ser ,_eab );_eab .Idx .ValAttr =uint32 (len (_afg ._dcbd .Ser )-1);_eab .Order .ValAttr =uint32 (len (_afg ._dcbd .Ser )-1);_cdf :=SurfaceChartSeries {_eab };_cdf .InitializeDefaults ();_cdf .Properties ().LineProperties ().SetSolidFill (_bdf );return _cdf ;};

// InitializeDefaults the bar chart to its defaults
func (_ac BarChart )InitializeDefaults (){_ac .SetDirection (_f .ST_BarDirCol )};type Title struct{_dgf *_f .CT_Title };func (_cfed Marker )SetSymbol (s _f .ST_MarkerStyle ){if s ==_f .ST_MarkerStyleUnset {_cfed ._dcg .Symbol =nil ;}else {_cfed ._dcg .Symbol =_f .NewCT_MarkerStyle ();_cfed ._dcg .Symbol .ValAttr =s ;};};

// AddSeries adds a default series to an area chart.
func (_fc Area3DChart )AddSeries ()AreaChartSeries {_fca :=_fc .nextColor (len (_fc ._da .Ser ));_de :=_f .NewCT_AreaSer ();_fc ._da .Ser =append (_fc ._da .Ser ,_de );_de .Idx .ValAttr =uint32 (len (_fc ._da .Ser )-1);_de .Order .ValAttr =uint32 (len (_fc ._da .Ser )-1);_bg :=AreaChartSeries {_de };_bg .InitializeDefaults ();_bg .Properties ().SetSolidFill (_fca );return _bg ;};

// InitializeDefaults the bar chart to its defaults
func (_caa Pie3DChart )InitializeDefaults (){_caa ._acbg .VaryColors =_f .NewCT_Boolean ();_caa ._acbg .VaryColors .ValAttr =_c .Bool (true );};func (_fea NumberDataSource )SetReference (s string ){_fea .ensureChoice ();if _fea ._gbe .Choice .NumRef ==nil {_fea ._gbe .Choice .NumRef =_f .NewCT_NumRef ();};_fea ._gbe .Choice .NumRef .F =s ;};func (_fbd DateAxis )SetMajorTickMark (m _f .ST_TickMark ){if m ==_f .ST_TickMarkUnset {_fbd ._geee .MajorTickMark =nil ;}else {_fbd ._geee .MajorTickMark =_f .NewCT_TickMark ();_fbd ._geee .MajorTickMark .ValAttr =m ;};};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_bad *_f .CT_BarSer };func (_cbdg ScatterChartSeries )Values ()NumberDataSource {if _cbdg ._abd .YVal ==nil {_cbdg ._abd .YVal =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_cbdg ._abd .YVal );};

// Order returns the order of the series
func (_acfd SurfaceChartSeries )Order ()uint32 {return _acfd ._bfe .Order .ValAttr };

// AddSeries adds a default series to a Scatter chart.
func (_faf ScatterChart )AddSeries ()ScatterChartSeries {_fbae :=_faf .nextColor (len (_faf ._bdbd .Ser ));_dgc :=_f .NewCT_ScatterSer ();_faf ._bdbd .Ser =append (_faf ._bdbd .Ser ,_dgc );_dgc .Idx .ValAttr =uint32 (len (_faf ._bdbd .Ser )-1);_dgc .Order .ValAttr =uint32 (len (_faf ._bdbd .Ser )-1);_fdbg :=ScatterChartSeries {_dgc };_fdbg .InitializeDefaults ();_fdbg .Marker ().Properties ().LineProperties ().SetSolidFill (_fbae );_fdbg .Marker ().Properties ().SetSolidFill (_fbae );return _fdbg ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_f .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// Labels returns the data label properties.
func (_dfac LineChartSeries )Labels ()DataLabels {if _dfac ._eee .DLbls ==nil {_dfac ._eee .DLbls =_f .NewCT_DLbls ();};return MakeDataLabels (_dfac ._eee .DLbls );};func (_edb DataLabels )SetShowValue (b bool ){_edb .ensureChoice ();_edb ._aeg .Choice .ShowVal =_f .NewCT_Boolean ();_edb ._aeg .Choice .ShowVal .ValAttr =_c .Bool (b );};type nullAxis byte ;

// InitializeDefaults initializes an Radar series to the default values.
func (_bed RadarChartSeries )InitializeDefaults (){};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// AddSeries adds a default series to an area chart.
func (_cd AreaChart )AddSeries ()AreaChartSeries {_gg :=_cd .nextColor (len (_cd ._cg .Ser ));_df :=_f .NewCT_AreaSer ();_cd ._cg .Ser =append (_cd ._cg .Ser ,_df );_df .Idx .ValAttr =uint32 (len (_cd ._cg .Ser )-1);_df .Order .ValAttr =uint32 (len (_cd ._cg .Ser )-1);_ge :=AreaChartSeries {_df };_ge .InitializeDefaults ();_ge .Properties ().SetSolidFill (_gg );return _ge ;};

// SetText sets the series text.
func (_bee RadarChartSeries )SetText (s string ){_bee ._abe .Tx =_f .NewCT_SerTx ();_bee ._abe .Tx .Choice .V =&s ;};func (_gcg Legend )Properties ()_af .ShapeProperties {if _gcg ._bff .SpPr ==nil {_gcg ._bff .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_gcg ._bff .SpPr );};

// CategoryAxis returns the category data source.
func (_aab PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _aab ._dafg .Cat ==nil {_aab ._dafg .Cat =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_aab ._dafg .Cat );};

// X returns the inner wrapped XML type.
func (_cacd SeriesAxis )X ()*_f .CT_SerAx {return _cacd ._fbda };type DateAxis struct{_geee *_f .CT_DateAx };

// AddRadarChart adds a new radar chart to a chart.
func (_aec Chart )AddRadarChart ()RadarChart {_cfc :=_f .NewCT_PlotAreaChoice ();_aec ._cfad .Chart .PlotArea .Choice =append (_aec ._cfad .Chart .PlotArea .Choice ,_cfc );_cfc .RadarChart =_f .NewCT_RadarChart ();_cea :=RadarChart {_ggfda :_cfc .RadarChart };_cea .InitializeDefaults ();return _cea ;};func (_gce DateAxis )SetMinorTickMark (m _f .ST_TickMark ){if m ==_f .ST_TickMarkUnset {_gce ._geee .MinorTickMark =nil ;}else {_gce ._geee .MinorTickMark =_f .NewCT_TickMark ();_gce ._geee .MinorTickMark .ValAttr =m ;};};func (_dcd LineChartSeries )Values ()NumberDataSource {if _dcd ._eee .Val ==nil {_dcd ._eee .Val =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_dcd ._eee .Val );};

// CategoryAxis returns the category data source.
func (_cdb AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _cdb ._fg .Cat ==nil {_cdb ._fg .Cat =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_cdb ._fg .Cat );};

// InitializeDefaults the bar chart to its defaults
func (_g Area3DChart )InitializeDefaults (){};

// InitializeDefaults the bar chart to its defaults
func (_ae Bar3DChart )InitializeDefaults (){_ae .SetDirection (_f .ST_BarDirCol )};

// X returns the inner wrapped XML type.
func (_eege ScatterChart )X ()*_f .CT_ScatterChart {return _eege ._bdbd };

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_gfd CategoryAxisDataSource )SetNumberReference (s string ){_gfd ._dag .Choice =_f .NewCT_AxDataSourceChoice ();_gfd ._dag .Choice .NumRef =_f .NewCT_NumRef ();_gfd ._dag .Choice .NumRef .F =s ;};

// RemoveTitle removes any existing title from the chart.
func (_egc Chart )RemoveTitle (){_egc ._cfad .Chart .Title =nil ;_egc ._cfad .Chart .AutoTitleDeleted =_f .NewCT_Boolean ();_egc ._cfad .Chart .AutoTitleDeleted .ValAttr =_c .Bool (true );};

// AddSeries adds a default series to a bar chart.
func (_ga BarChart )AddSeries ()BarChartSeries {_ada :=_ga .nextColor (len (_ga ._ed .Ser ));_gd :=_f .NewCT_BarSer ();_ga ._ed .Ser =append (_ga ._ed .Ser ,_gd );_gd .Idx .ValAttr =uint32 (len (_ga ._ed .Ser )-1);_gd .Order .ValAttr =uint32 (len (_ga ._ed .Ser )-1);_gab :=BarChartSeries {_gd };_gab .InitializeDefaults ();_gab .Properties ().SetSolidFill (_ada );return _gab ;};

// X returns the inner wrapped XML type.
func (_cgfe RadarChart )X ()*_f .CT_RadarChart {return _cgfe ._ggfda };

// SetOrder sets the order of the series
func (_gddd ScatterChartSeries )SetOrder (idx uint32 ){_gddd ._abd .Order .ValAttr =idx };

// CategoryAxis returns the category data source.
func (_gbd RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gbd ._abe .Cat ==nil {_gbd ._abe .Cat =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_gbd ._abe .Cat );};func (_eb BarChart )AddAxis (axis Axis ){_dfg :=_f .NewCT_UnsignedInt ();_dfg .ValAttr =axis .AxisID ();_eb ._ed .AxId =append (_eb ._ed .AxId ,_dfg );};

// SetText sets the series text.
func (_eag BubbleChartSeries )SetText (s string ){_eag ._agca .Tx =_f .NewCT_SerTx ();_eag ._agca .Tx .Choice .V =&s ;};

// AddPieChart adds a new pie chart to a chart.
func (_acb Chart )AddPieChart ()PieChart {_fdf :=_f .NewCT_PlotAreaChoice ();_acb ._cfad .Chart .PlotArea .Choice =append (_acb ._cfad .Chart .PlotArea .Choice ,_fdf );_fdf .PieChart =_f .NewCT_PieChart ();_gcf :=PieChart {_gbf :_fdf .PieChart };_gcf .InitializeDefaults ();return _gcf ;};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_acbg *_f .CT_Pie3DChart ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_ed *_f .CT_BarChart ;};

// Values returns the value data source.
func (_acc BubbleChartSeries )Values ()NumberDataSource {if _acc ._agca .YVal ==nil {_acc ._agca .YVal =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_acc ._agca .YVal );};

// SetText sets the series text
func (_fcf LineChartSeries )SetText (s string ){_fcf ._eee .Tx =_f .NewCT_SerTx ();_fcf ._eee .Tx .Choice .V =&s ;};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_abe *_f .CT_RadarSer };

// X returns the inner wrapped XML type.
func (_bd BubbleChart )X ()*_f .CT_BubbleChart {return _bd ._efb };func (_fcgc SurfaceChartSeries )InitializeDefaults (){_fcgc .Properties ().LineProperties ().SetWidth (1*_b .Point );_fcgc .Properties ().LineProperties ().SetSolidFill (_fa .Black );_fcgc .Properties ().LineProperties ().SetJoin (_af .LineJoinRound );};func (_aebe Surface3DChart )InitializeDefaults (){_aebe ._dcbd .Wireframe =_f .NewCT_Boolean ();_aebe ._dcbd .Wireframe .ValAttr =_c .Bool (false );_aebe ._dcbd .BandFmts =_f .NewCT_BandFmts ();for _def :=0;_def < 15;_def ++{_dcad :=_f .NewCT_BandFmt ();_dcad .Idx .ValAttr =uint32 (_def );_dcad .SpPr =_e .NewCT_ShapeProperties ();_cbe :=_af .MakeShapeProperties (_dcad .SpPr );_cbe .SetSolidFill (_aebe .nextColor (_def ));_aebe ._dcbd .BandFmts .BandFmt =append (_aebe ._dcbd .BandFmts .BandFmt ,_dcad );};};

// Properties returns the line chart series shape properties.
func (_cafa ScatterChartSeries )Properties ()_af .ShapeProperties {if _cafa ._abd .SpPr ==nil {_cafa ._abd .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_cafa ._abd .SpPr );};

// Properties returns the bar chart series shape properties.
func (_cf AreaChartSeries )Properties ()_af .ShapeProperties {if _cf ._fg .SpPr ==nil {_cf ._fg .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_cf ._fg .SpPr );};func (_cca SeriesAxis )InitializeDefaults (){};func (_fgb ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fgb ._abd .XVal ==nil {_fgb ._abd .XVal =_f .NewCT_AxDataSource ();};return MakeAxisDataSource (_fgb ._abd .XVal );};type ValueAxis struct{_abdb *_f .CT_ValAx };

// AddAxis adds an axis to a Surface chart.
func (_eedc Surface3DChart )AddAxis (axis Axis ){_ddcg :=_f .NewCT_UnsignedInt ();_ddcg .ValAttr =axis .AxisID ();_eedc ._dcbd .AxId =append (_eedc ._dcbd .AxId ,_ddcg );};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_bbf Chart )AddLegend ()Legend {_bbf ._cfad .Chart .Legend =_f .NewCT_Legend ();_ebe :=MakeLegend (_bbf ._cfad .Chart .Legend );_ebe .InitializeDefaults ();return _ebe ;};

// X returns the inner wrapped XML type.
func (_eba Legend )X ()*_f .CT_Legend {return _eba ._bff };func (_fdce CategoryAxis )SetCrosses (axis Axis ){_fdce ._gfb .Choice =_f .NewEG_AxSharedChoice ();_fdce ._gfb .Choice .Crosses =_f .NewCT_Crosses ();_fdce ._gfb .Choice .Crosses .ValAttr =_f .ST_CrossesAutoZero ;_fdce ._gfb .CrossAx .ValAttr =axis .AxisID ();};

// InitializeDefaults the bar chart to its defaults
func (_gfge RadarChart )InitializeDefaults (){_gfge ._ggfda .RadarStyle .ValAttr =_f .ST_RadarStyleMarker ;};

// InitializeDefaults the Stock chart to its defaults
func (_cdga StockChart )InitializeDefaults (){_cdga ._cgff .HiLowLines =_f .NewCT_ChartLines ();_cdga ._cgff .UpDownBars =_f .NewCT_UpDownBars ();_cdga ._cgff .UpDownBars .GapWidth =_f .NewCT_GapAmount ();_cdga ._cgff .UpDownBars .GapWidth .ValAttr =&_f .ST_GapAmount {};_cdga ._cgff .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_c .Uint16 (150);_cdga ._cgff .UpDownBars .UpBars =_f .NewCT_UpDownBar ();_cdga ._cgff .UpDownBars .DownBars =_f .NewCT_UpDownBar ();};

// Values returns the value data source.
func (_dgb RadarChartSeries )Values ()NumberDataSource {if _dgb ._abe .Val ==nil {_dgb ._abe .Val =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_dgb ._abe .Val );};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_bbg Chart )AddPieOfPieChart ()PieOfPieChart {_cbd :=_f .NewCT_PlotAreaChoice ();_bbg ._cfad .Chart .PlotArea .Choice =append (_bbg ._cfad .Chart .PlotArea .Choice ,_cbd );_cbd .OfPieChart =_f .NewCT_OfPieChart ();_ggg :=PieOfPieChart {_cge :_cbd .OfPieChart };_ggg .InitializeDefaults ();return _ggg ;};

// X returns the inner wrapped XML type.
func (_ebee Surface3DChart )X ()*_f .CT_Surface3DChart {return _ebee ._dcbd };

// Properties returns the Bubble chart series shape properties.
func (_fdc BubbleChartSeries )Properties ()_af .ShapeProperties {if _fdc ._agca .SpPr ==nil {_fdc ._agca .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_fdc ._agca .SpPr );};func (_ebff ValueAxis )SetMajorTickMark (m _f .ST_TickMark ){if m ==_f .ST_TickMarkUnset {_ebff ._abdb .MajorTickMark =nil ;}else {_ebff ._abdb .MajorTickMark =_f .NewCT_TickMark ();_ebff ._abdb .MajorTickMark .ValAttr =m ;};};func (_aabd Title )InitializeDefaults (){_aabd .SetText ("\u0054\u0069\u0074l\u0065");_aabd .RunProperties ().SetSize (16*_b .Point );_aabd .RunProperties ().SetSolidFill (_fa .Black );_aabd .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_aabd .RunProperties ().SetBold (false );};

// InitializeDefaults the bar chart to its defaults
func (_ecb PieOfPieChart )InitializeDefaults (){_ecb ._cge .VaryColors =_f .NewCT_Boolean ();_ecb ._cge .VaryColors .ValAttr =_c .Bool (true );_ecb .SetType (_f .ST_OfPieTypePie );_ecb ._cge .SecondPieSize =_f .NewCT_SecondPieSize ();_ecb ._cge .SecondPieSize .ValAttr =&_f .ST_SecondPieSize {};_ecb ._cge .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_c .Uint16 (75);_fba :=_f .NewCT_ChartLines ();_fba .SpPr =_e .NewCT_ShapeProperties ();_bacc :=_af .MakeShapeProperties (_fba .SpPr );_bacc .LineProperties ().SetSolidFill (_fa .Auto );_ecb ._cge .SerLines =append (_ecb ._cge .SerLines ,_fba );};

// Values returns the value data source.
func (_fd BarChartSeries )Values ()NumberDataSource {if _fd ._bad .Val ==nil {_fd ._bad .Val =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_fd ._bad .Val );};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_deaa NumberDataSource )CreateEmptyNumberCache (){_deaa .ensureChoice ();if _deaa ._gbe .Choice .NumRef ==nil {_deaa ._gbe .Choice .NumRef =_f .NewCT_NumRef ();};_deaa ._gbe .Choice .NumLit =nil ;_deaa ._gbe .Choice .NumRef .NumCache =_f .NewCT_NumData ();_deaa ._gbe .Choice .NumRef .NumCache .PtCount =_f .NewCT_UnsignedInt ();_deaa ._gbe .Choice .NumRef .NumCache .PtCount .ValAttr =0;};func (_dcf RadarChart )AddAxis (axis Axis ){_bdbg :=_f .NewCT_UnsignedInt ();_bdbg .ValAttr =axis .AxisID ();_dcf ._ggfda .AxId =append (_dcf ._ggfda .AxId ,_bdbg );};

// X returns the inner wrapped XML type.
func (_fcd AreaChartSeries )X ()*_f .CT_AreaSer {return _fcd ._fg };type LineChart struct{chartBase ;_aae *_f .CT_LineChart ;};

// AddSeries adds a default series to a line chart.
func (_aca LineChart )AddSeries ()LineChartSeries {_ece :=_aca .nextColor (len (_aca ._aae .Ser ));_cba :=_f .NewCT_LineSer ();_aca ._aae .Ser =append (_aca ._aae .Ser ,_cba );_cba .Idx .ValAttr =uint32 (len (_aca ._aae .Ser )-1);_cba .Order .ValAttr =uint32 (len (_aca ._aae .Ser )-1);_dbf :=LineChartSeries {_cba };_dbf .InitializeDefaults ();_dbf .Properties ().LineProperties ().SetSolidFill (_ece );return _dbf ;};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_abd *_f .CT_ScatterSer };

// AddAxis adds an axis to a line chart.
func (_aggg LineChart )AddAxis (axis Axis ){_bcc :=_f .NewCT_UnsignedInt ();_bcc .ValAttr =axis .AxisID ();_aggg ._aae .AxId =append (_aggg ._aae .AxId ,_bcc );};func (_gcaa ValueAxis )SetMinorTickMark (m _f .ST_TickMark ){if m ==_f .ST_TickMarkUnset {_gcaa ._abdb .MinorTickMark =nil ;}else {_gcaa ._abdb .MinorTickMark =_f .NewCT_TickMark ();_gcaa ._abdb .MinorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_cgb BarChart )X ()*_f .CT_BarChart {return _cgb ._ed };

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_dafg *_f .CT_PieSer };

// SetText sets the series text
func (_edbc ScatterChartSeries )SetText (s string ){_edbc ._abd .Tx =_f .NewCT_SerTx ();_edbc ._abd .Tx .Choice .V =&s ;};type SeriesAxis struct{_fbda *_f .CT_SerAx };

// X returns the inner wrapped XML type.
func (_bbd LineChartSeries )X ()*_f .CT_LineSer {return _bbd ._eee };

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_cgf BubbleChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_cfade Marker )X ()*_f .CT_Marker {return _cfade ._dcg };func (_aeb BubbleChart )AddAxis (axis Axis ){_gfg :=_f .NewCT_UnsignedInt ();_gfg .ValAttr =axis .AxisID ();_aeb ._efb .AxId =append (_aeb ._efb .AxId ,_gfg );};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_gbf *_f .CT_PieChart ;};func (_gdb CategoryAxis )SetTickLabelPosition (p _f .ST_TickLblPos ){if p ==_f .ST_TickLblPosUnset {_gdb ._gfb .TickLblPos =nil ;}else {_gdb ._gfb .TickLblPos =_f .NewCT_TickLblPos ();_gdb ._gfb .TickLblPos .ValAttr =p ;};};

// InitializeDefaults the Bubble chart to its defaults
func (_dad BubbleChart )InitializeDefaults (){};type Line3DChart struct{chartBase ;_ddc *_f .CT_Line3DChart ;};

// X returns the inner wrapped XML type.
func (_dcgg Pie3DChart )X ()*_f .CT_Pie3DChart {return _dcgg ._acbg };

// SetDisplayBlanksAs controls how missing values are displayed.
func (_bca Chart )SetDisplayBlanksAs (v _f .ST_DispBlanksAs ){_bca ._cfad .Chart .DispBlanksAs =_f .NewCT_DispBlanksAs ();_bca ._cfad .Chart .DispBlanksAs .ValAttr =v ;};func (_dac DataLabels )SetPosition (p _f .ST_DLblPos ){_dac .ensureChoice ();_dac ._aeg .Choice .DLblPos =_f .NewCT_DLblPos ();_dac ._aeg .Choice .DLblPos .ValAttr =p ;};func (_acf ScatterChart )InitializeDefaults (){_acf ._bdbd .ScatterStyle .ValAttr =_f .ST_ScatterStyleMarker ;};func (_bbed SeriesAxis )SetCrosses (axis Axis ){_bbed ._fbda .CrossAx .ValAttr =axis .AxisID ()};

// InitializeDefaults initializes a bar chart series to the default values.
func (_ggf BarChartSeries )InitializeDefaults (){};

// RemoveLegend removes the legend if the chart has one.
func (_cee Chart )RemoveLegend (){_cee ._cfad .Chart .Legend =nil };

// Values returns the value data source.
func (_facd PieChartSeries )Values ()NumberDataSource {if _facd ._dafg .Val ==nil {_facd ._dafg .Val =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_facd ._dafg .Val );};func (_fcdc ValueAxis )Properties ()_af .ShapeProperties {if _fcdc ._abdb .SpPr ==nil {_fcdc ._abdb .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_fcdc ._abdb .SpPr );};

// Index returns the index of the series
func (_afb LineChartSeries )Index ()uint32 {return _afb ._eee .Idx .ValAttr };

// Chart is a generic chart.
type Chart struct{_cfad *_f .ChartSpace };

// AddBarChart adds a new bar chart to a chart.
func (_cdge Chart )AddBarChart ()BarChart {_ce :=_f .NewCT_PlotAreaChoice ();_cdge ._cfad .Chart .PlotArea .Choice =append (_cdge ._cfad .Chart .PlotArea .Choice ,_ce );_ce .BarChart =_f .NewCT_BarChart ();_ce .BarChart .Grouping =_f .NewCT_BarGrouping ();_ce .BarChart .Grouping .ValAttr =_f .ST_BarGroupingStandard ;_cad :=BarChart {_ed :_ce .BarChart };_cad .InitializeDefaults ();return _cad ;};

// AddSeries adds a default series to a line chart.
func (_fef Line3DChart )AddSeries ()LineChartSeries {_gdd :=_fef .nextColor (len (_fef ._ddc .Ser ));_fadb :=_f .NewCT_LineSer ();_fef ._ddc .Ser =append (_fef ._ddc .Ser ,_fadb );_fadb .Idx .ValAttr =uint32 (len (_fef ._ddc .Ser )-1);_fadb .Order .ValAttr =uint32 (len (_fef ._ddc .Ser )-1);_gcdf :=LineChartSeries {_fadb };_gcdf .InitializeDefaults ();_gcdf .Properties ().LineProperties ().SetSolidFill (_gdd );_gcdf .Properties ().SetSolidFill (_gdd );return _gcdf ;};func MakeChart (x *_f .ChartSpace )Chart {return Chart {x }};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_dag *_f .CT_AxDataSource };func (_edf ValueAxis )SetTickLabelPosition (p _f .ST_TickLblPos ){if p ==_f .ST_TickLblPosUnset {_edf ._abdb .TickLblPos =nil ;}else {_edf ._abdb .TickLblPos =_f .NewCT_TickLblPos ();_edf ._abdb .TickLblPos .ValAttr =p ;};};

// Index returns the index of the series
func (_bef ScatterChartSeries )Index ()uint32 {return _bef ._abd .Idx .ValAttr };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_gcef *_f .CT_DoughnutChart ;};

// AddSeries adds a default series to an Doughnut chart.
func (_bddg DoughnutChart )AddSeries ()PieChartSeries {_bcdg :=_f .NewCT_PieSer ();_bddg ._gcef .Ser =append (_bddg ._gcef .Ser ,_bcdg );_bcdg .Idx .ValAttr =uint32 (len (_bddg ._gcef .Ser )-1);_bcdg .Order .ValAttr =uint32 (len (_bddg ._gcef .Ser )-1);_gbga :=PieChartSeries {_bcdg };_gbga .InitializeDefaults ();return _gbga ;};

// AddAxis adds an axis to a Surface chart.
func (_aed SurfaceChart )AddAxis (axis Axis ){_deea :=_f .NewCT_UnsignedInt ();_deea .ValAttr =axis .AxisID ();_aed ._aaaa .AxId =append (_aed ._aaaa .AxId ,_deea );};

// Properties returns the line chart series shape properties.
func (_cbdf SurfaceChartSeries )Properties ()_af .ShapeProperties {if _cbdf ._bfe .SpPr ==nil {_cbdf ._bfe .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_cbdf ._bfe .SpPr );};func (_daf Area3DChart )AddAxis (axis Axis ){_ba :=_f .NewCT_UnsignedInt ();_ba .ValAttr =axis .AxisID ();_daf ._da .AxId =append (_daf ._da .AxId ,_ba );};func (_geae ValueAxis )MajorGridLines ()GridLines {if _geae ._abdb .MajorGridlines ==nil {_geae ._abdb .MajorGridlines =_f .NewCT_ChartLines ();};return GridLines {_geae ._abdb .MajorGridlines };};func (_abb chartBase )nextColor (_aac int )_fa .Color {return _fec [_aac %len (_fec )]};

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_cb Chart )AddBar3DChart ()Bar3DChart {_fbc (_cb ._cfad .Chart );_ffa :=_f .NewCT_PlotAreaChoice ();_cb ._cfad .Chart .PlotArea .Choice =append (_cb ._cfad .Chart .PlotArea .Choice ,_ffa );_ffa .Bar3DChart =_f .NewCT_Bar3DChart ();_ffa .Bar3DChart .Grouping =_f .NewCT_BarGrouping ();_ffa .Bar3DChart .Grouping .ValAttr =_f .ST_BarGroupingStandard ;_cfe :=Bar3DChart {_ef :_ffa .Bar3DChart };_cfe .InitializeDefaults ();return _cfe ;};func MakeCategoryAxis (x *_f .CT_CatAx )CategoryAxis {return CategoryAxis {x }};func (_ebeb Legend )InitializeDefaults (){_ebeb .SetPosition (_f .ST_LegendPosR );_ebeb .SetOverlay (false );_ebeb .Properties ().SetNoFill ();_ebeb .Properties ().LineProperties ().SetNoFill ();};

// SetIndex sets the index of the series
func (_dfe LineChartSeries )SetIndex (idx uint32 ){_dfe ._eee .Idx .ValAttr =idx };func MakeDataLabels (x *_f .CT_DLbls )DataLabels {return DataLabels {x }};func MakeLegend (l *_f .CT_Legend )Legend {return Legend {l }};

// AddTitle sets a new title on the chart.
func (_ab Chart )AddTitle ()Title {_ab ._cfad .Chart .Title =_f .NewCT_Title ();_ab ._cfad .Chart .Title .Overlay =_f .NewCT_Boolean ();_ab ._cfad .Chart .Title .Overlay .ValAttr =_c .Bool (false );_ab ._cfad .Chart .AutoTitleDeleted =_f .NewCT_Boolean ();_ab ._cfad .Chart .AutoTitleDeleted .ValAttr =_c .Bool (false );_bdc :=MakeTitle (_ab ._cfad .Chart .Title );_bdc .InitializeDefaults ();return _bdc ;};

// SetText sets the series text.
func (_fdfc PieChartSeries )SetText (s string ){_fdfc ._dafg .Tx =_f .NewCT_SerTx ();_fdfc ._dafg .Tx .Choice .V =&s ;};

// InitializeDefaults the bar chart to its defaults
func (_ebf PieChart )InitializeDefaults (){_ebf ._gbf .VaryColors =_f .NewCT_Boolean ();_ebf ._gbf .VaryColors .ValAttr =_c .Bool (true );};

// SetOrder sets the order of the series
func (_eed LineChartSeries )SetOrder (idx uint32 ){_eed ._eee .Order .ValAttr =idx };type NumberDataSource struct{_gbe *_f .CT_NumDataSource };type GridLines struct{_aee *_f .CT_ChartLines };

// X returns the inner wrapped XML type.
func (_dcaf GridLines )X ()*_f .CT_ChartLines {return _dcaf ._aee };

// AddSeries adds a default series to an Radar chart.
func (_dff RadarChart )AddSeries ()RadarChartSeries {_cfb :=_dff .nextColor (len (_dff ._ggfda .Ser ));_gbgf :=_f .NewCT_RadarSer ();_dff ._ggfda .Ser =append (_dff ._ggfda .Ser ,_gbgf );_gbgf .Idx .ValAttr =uint32 (len (_dff ._ggfda .Ser )-1);_gbgf .Order .ValAttr =uint32 (len (_dff ._ggfda .Ser )-1);_dfeb :=RadarChartSeries {_gbgf };_dfeb .InitializeDefaults ();_dfeb .Properties ().SetSolidFill (_cfb );return _dfeb ;};

// AddDateAxis adds a value axis to the chart.
func (_bgb Chart )AddDateAxis ()DateAxis {_baa :=_f .NewCT_DateAx ();if _bgb ._cfad .Chart .PlotArea .CChoice ==nil {_bgb ._cfad .Chart .PlotArea .CChoice =_f .NewCT_PlotAreaChoice1 ();};_baa .AxId =_f .NewCT_UnsignedInt ();_baa .AxId .ValAttr =0x7FFFFFFF&_ag .Uint32 ();_bgb ._cfad .Chart .PlotArea .CChoice .DateAx =append (_bgb ._cfad .Chart .PlotArea .CChoice .DateAx ,_baa );_baa .Delete =_f .NewCT_Boolean ();_baa .Delete .ValAttr =_c .Bool (false );_baa .Scaling =_f .NewCT_Scaling ();_baa .Scaling .Orientation =_f .NewCT_Orientation ();_baa .Scaling .Orientation .ValAttr =_f .ST_OrientationMinMax ;_baa .Choice =&_f .EG_AxSharedChoice {};_baa .Choice .Crosses =_f .NewCT_Crosses ();_baa .Choice .Crosses .ValAttr =_f .ST_CrossesAutoZero ;_bgc :=DateAxis {_baa };_bgc .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_fa .LightGray );_bgc .SetMajorTickMark (_f .ST_TickMarkOut );_bgc .SetMinorTickMark (_f .ST_TickMarkIn );_bgc .SetTickLabelPosition (_f .ST_TickLblPosNextTo );_bgc .Properties ().LineProperties ().SetSolidFill (_fa .Black );_bgc .SetPosition (_f .ST_AxPosL );return _bgc ;};

// Properties returns the bar chart series shape properties.
func (_adc PieChartSeries )Properties ()_af .ShapeProperties {if _adc ._dafg .SpPr ==nil {_adc ._dafg .SpPr =_e .NewCT_ShapeProperties ();};return _af .MakeShapeProperties (_adc ._dafg .SpPr );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_cgff *_f .CT_StockChart ;};

// X returns the inner wrapped XML type.
func (_eg AreaChart )X ()*_f .CT_AreaChart {return _eg ._cg };func (_dba ValueAxis )AxisID ()uint32 {return _dba ._abdb .AxId .ValAttr };func (_bgce StockChart )AddAxis (axis Axis ){_cbg :=_f .NewCT_UnsignedInt ();_cbg .ValAttr =axis .AxisID ();_bgce ._cgff .AxId =append (_bgce ._cgff .AxId ,_cbg );};func MakeValueAxis (x *_f .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_ca AreaChart )AddAxis (axis Axis ){_dfd :=_f .NewCT_UnsignedInt ();_dfd .ValAttr =axis .AxisID ();_ca ._cg .AxId =append (_ca ._cg .AxId ,_dfd );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_gee Bar3DChart )SetDirection (d _f .ST_BarDir ){_gee ._ef .BarDir .ValAttr =d };type ScatterChart struct{chartBase ;_bdbd *_f .CT_ScatterChart ;};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_dc Chart )AddLine3DChart ()Line3DChart {_fbc (_dc ._cfad .Chart );_bac :=_f .NewCT_PlotAreaChoice ();_dc ._cfad .Chart .PlotArea .Choice =append (_dc ._cfad .Chart .PlotArea .Choice ,_bac );_bac .Line3DChart =_f .NewCT_Line3DChart ();_bac .Line3DChart .Grouping =_f .NewCT_Grouping ();_bac .Line3DChart .Grouping .ValAttr =_f .ST_GroupingStandard ;return Line3DChart {_ddc :_bac .Line3DChart };};

// X returns the inner wrapped XML type.
func (_aga Area3DChart )X ()*_f .CT_Area3DChart {return _aga ._da };func (_fag ScatterChartSeries )InitializeDefaults (){_fag .Properties ().LineProperties ().SetNoFill ();_fag .Marker ().SetSymbol (_f .ST_MarkerStyleAuto );_fag .Labels ().SetShowLegendKey (false );_fag .Labels ().SetShowValue (true );_fag .Labels ().SetShowPercent (false );_fag .Labels ().SetShowCategoryName (false );_fag .Labels ().SetShowSeriesName (false );_fag .Labels ().SetShowLeaderLines (false );};

// Values returns the value data source.
func (_agc AreaChartSeries )Values ()NumberDataSource {if _agc ._fg .Val ==nil {_agc ._fg .Val =_f .NewCT_NumDataSource ();};return MakeNumberDataSource (_agc ._fg .Val );};

// Index returns the index of the series
func (_gec SurfaceChartSeries )Index ()uint32 {return _gec ._bfe .Idx .ValAttr };

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_ggfda *_f .CT_RadarChart ;};

// InitializeDefaults initializes an area series to the default values.
func (_ea AreaChartSeries )InitializeDefaults (){};

// Marker returns the marker properties.
func (_ccd ScatterChartSeries )Marker ()Marker {if _ccd ._abd .Marker ==nil {_ccd ._abd .Marker =_f .NewCT_Marker ();};return MakeMarker (_ccd ._abd .Marker );};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_acbd PieChartSeries )SetExplosion (v uint32 ){_acbd ._dafg .Explosion =_f .NewCT_UnsignedInt ();_acbd ._dafg .Explosion .ValAttr =v ;};func MakeNumberDataSource (x *_f .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};func (_gef Legend )SetOverlay (b bool ){_gef ._bff .Overlay =_f .NewCT_Boolean ();_gef ._bff .Overlay .ValAttr =_c .Bool (b );};

// SetType sets the type the secone pie to either pie or bar
func (_gcgcg PieOfPieChart )SetType (t _f .ST_OfPieType ){_gcgcg ._cge .OfPieType .ValAttr =t };

// X returns the inner wrapped XML type.
func (_cdd DoughnutChart )X ()*_f .CT_DoughnutChart {return _cdd ._gcef };

// SetIndex sets the index of the series
func (_deaae ScatterChartSeries )SetIndex (idx uint32 ){_deaae ._abd .Idx .ValAttr =idx };

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_dd Chart )AddSurface3DChart ()Surface3DChart {_egb :=_f .NewCT_PlotAreaChoice ();_dd ._cfad .Chart .PlotArea .Choice =append (_dd ._cfad .Chart .PlotArea .Choice ,_egb );_egb .Surface3DChart =_f .NewCT_Surface3DChart ();_fbc (_dd ._cfad .Chart );_cdc :=Surface3DChart {_dcbd :_egb .Surface3DChart };_cdc .InitializeDefaults ();return _cdc ;};func (_bf CategoryAxis )InitializeDefaults (){_bf .SetPosition (_f .ST_AxPosB );_bf .SetMajorTickMark (_f .ST_TickMarkOut );_bf .SetMinorTickMark (_f .ST_TickMarkIn );_bf .SetTickLabelPosition (_f .ST_TickLblPosNextTo );_bf .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_fa .LightGray );_bf .Properties ().LineProperties ().SetSolidFill (_fa .Black );};