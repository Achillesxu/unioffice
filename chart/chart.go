//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_cb "fmt";_cf "github.com/unidoc/unioffice";_cg "github.com/unidoc/unioffice/color";_f "github.com/unidoc/unioffice/drawing";_g "github.com/unidoc/unioffice/measurement";_d "github.com/unidoc/unioffice/schema/soo/dml";_a "github.com/unidoc/unioffice/schema/soo/dml/chart";_ad "math/rand";);

// InitializeDefaults the Bubble chart to its defaults
func (_cda BubbleChart )InitializeDefaults (){};

// AddSeries adds a default series to a Scatter chart.
func (_fbbe ScatterChart )AddSeries ()ScatterChartSeries {_baggg :=_fbbe .nextColor (len (_fbbe ._dcgf .Ser ));_bbb :=_a .NewCT_ScatterSer ();_fbbe ._dcgf .Ser =append (_fbbe ._dcgf .Ser ,_bbb );_bbb .Idx .ValAttr =uint32 (len (_fbbe ._dcgf .Ser )-1);_bbb .Order .ValAttr =uint32 (len (_fbbe ._dcgf .Ser )-1);_abb :=ScatterChartSeries {_bbb };_abb .InitializeDefaults ();_abb .Marker ().Properties ().LineProperties ().SetSolidFill (_baggg );_abb .Marker ().Properties ().SetSolidFill (_baggg );return _abb ;};func (_efac DataLabels )ensureChoice (){if _efac ._dca .Choice ==nil {_efac ._dca .Choice =_a .NewCT_DLblsChoice ();};};

// Properties returns the chart's shape properties.
func (_eed Chart )Properties ()_f .ShapeProperties {if _eed ._egg .SpPr ==nil {_eed ._egg .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_eed ._egg .SpPr );};type Title struct{_dcgg *_a .CT_Title };

// AddSeries adds a default series to a line chart.
func (_dcff Line3DChart )AddSeries ()LineChartSeries {_acca :=_dcff .nextColor (len (_dcff ._fdg .Ser ));_aec :=_a .NewCT_LineSer ();_dcff ._fdg .Ser =append (_dcff ._fdg .Ser ,_aec );_aec .Idx .ValAttr =uint32 (len (_dcff ._fdg .Ser )-1);_aec .Order .ValAttr =uint32 (len (_dcff ._fdg .Ser )-1);_gad :=LineChartSeries {_aec };_gad .InitializeDefaults ();_gad .Properties ().LineProperties ().SetSolidFill (_acca );_gad .Properties ().SetSolidFill (_acca );return _gad ;};

// X returns the inner wrapped XML type.
func (_bbad LineChart )X ()*_a .CT_LineChart {return _bbad ._acd };type LineChart struct{chartBase ;_acd *_a .CT_LineChart ;};

// AddSeries adds a default series to an Doughnut chart.
func (_cee DoughnutChart )AddSeries ()PieChartSeries {_daa :=_a .NewCT_PieSer ();_cee ._dcf .Ser =append (_cee ._dcf .Ser ,_daa );_daa .Idx .ValAttr =uint32 (len (_cee ._dcf .Ser )-1);_daa .Order .ValAttr =uint32 (len (_cee ._dcf .Ser )-1);_fcf :=PieChartSeries {_daa };_fcf .InitializeDefaults ();return _fcf ;};

// X returns the inner wrapped XML type.
func (_gbeb BubbleChart )X ()*_a .CT_BubbleChart {return _gbeb ._aga };func (_cdad GridLines )Properties ()_f .ShapeProperties {if _cdad ._dgc .SpPr ==nil {_cdad ._dgc .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_cdad ._dgc .SpPr );};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_ddg *_a .CT_PieChart ;};func (_dcee LineChartSeries )SetSmooth (b bool ){_dcee ._aabc .Smooth =_a .NewCT_Boolean ();_dcee ._aabc .Smooth .ValAttr =&b ;};func MakeNumberDataSource (x *_a .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// AddAxis adds an axis to a line chart.
func (_bfb LineChart )AddAxis (axis Axis ){_ge :=_a .NewCT_UnsignedInt ();_ge .ValAttr =axis .AxisID ();_bfb ._acd .AxId =append (_bfb ._acd .AxId ,_ge );};

// InitializeDefaults the bar chart to its defaults
func (_df AreaChart )InitializeDefaults (){};

// SetValues sets values directly on a source.
func (_efb NumberDataSource )SetValues (v []float64 ){_efb .ensureChoice ();_efb ._edd .Choice .NumRef =nil ;_efb ._edd .Choice .NumLit =_a .NewCT_NumData ();_efb ._edd .Choice .NumLit .PtCount =_a .NewCT_UnsignedInt ();_efb ._edd .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _aecg ,_gabf :=range v {_efb ._edd .Choice .NumLit .Pt =append (_efb ._edd .Choice .NumLit .Pt ,&_a .CT_NumVal {IdxAttr :uint32 (_aecg ),V :_cb .Sprintf ("\u0025\u0067",_gabf )});};};

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_fdd *_a .CT_ScatterSer };func (_fae Surface3DChart )InitializeDefaults (){_fae ._bfcb .Wireframe =_a .NewCT_Boolean ();_fae ._bfcb .Wireframe .ValAttr =_cf .Bool (false );_fae ._bfcb .BandFmts =_a .NewCT_BandFmts ();for _eff :=0;_eff < 15;_eff ++{_bcb :=_a .NewCT_BandFmt ();_bcb .Idx .ValAttr =uint32 (_eff );_bcb .SpPr =_d .NewCT_ShapeProperties ();_cgca :=_f .MakeShapeProperties (_bcb .SpPr );_cgca .SetSolidFill (_fae .nextColor (_eff ));_fae ._bfcb .BandFmts .BandFmt =append (_fae ._bfcb .BandFmts .BandFmt ,_bcb );};};func (_agf DataLabels )SetShowCategoryName (b bool ){_agf .ensureChoice ();_agf ._dca .Choice .ShowCatName =_a .NewCT_Boolean ();_agf ._dca .Choice .ShowCatName .ValAttr =_cf .Bool (b );};func (_gade ScatterChart )InitializeDefaults (){_gade ._dcgf .ScatterStyle .ValAttr =_a .ST_ScatterStyleMarker ;};

// AddSeries adds a default series to a Stock chart.
func (_cgbfb StockChart )AddSeries ()LineChartSeries {_dec :=_a .NewCT_LineSer ();_cgbfb ._addb .Ser =append (_cgbfb ._addb .Ser ,_dec );_dec .Idx .ValAttr =uint32 (len (_cgbfb ._addb .Ser )-1);_dec .Order .ValAttr =uint32 (len (_cgbfb ._addb .Ser )-1);_aacb :=LineChartSeries {_dec };_aacb .Values ().CreateEmptyNumberCache ();_aacb .Properties ().LineProperties ().SetNoFill ();return _aacb ;};

// X returns the inner wrapped XML type.
func (_bba DateAxis )X ()*_a .CT_DateAx {return _bba ._adef };

// SetDirection changes the direction of the bar chart (bar or column).
func (_bd Bar3DChart )SetDirection (d _a .ST_BarDir ){_bd ._dfc .BarDir .ValAttr =d };

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_geg *_a .CT_OfPieChart ;};

// AddBarChart adds a new bar chart to a chart.
func (_gbbd Chart )AddBarChart ()BarChart {_adg :=_a .NewCT_PlotAreaChoice ();_gbbd ._egg .Chart .PlotArea .Choice =append (_gbbd ._egg .Chart .PlotArea .Choice ,_adg );_adg .BarChart =_a .NewCT_BarChart ();_adg .BarChart .Grouping =_a .NewCT_BarGrouping ();_adg .BarChart .Grouping .ValAttr =_a .ST_BarGroupingStandard ;_fce :=BarChart {_dfd :_adg .BarChart };_fce .InitializeDefaults ();return _fce ;};type SeriesAxis struct{_dgbb *_a .CT_SerAx };

// X returns the inner wrapped XML type.
func (_egb Marker )X ()*_a .CT_Marker {return _egb ._gfg };func (_ce CategoryAxis )AxisID ()uint32 {return _ce ._acc .AxId .ValAttr };

// X returns the inner wrapped XML type.
func (_fg BarChart )X ()*_a .CT_BarChart {return _fg ._dfd };func (_ccea DateAxis )MajorGridLines ()GridLines {if _ccea ._adef .MajorGridlines ==nil {_ccea ._adef .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_ccea ._adef .MajorGridlines };};

// AddTitle sets a new title on the chart.
func (_gge Chart )AddTitle ()Title {_gge ._egg .Chart .Title =_a .NewCT_Title ();_gge ._egg .Chart .Title .Overlay =_a .NewCT_Boolean ();_gge ._egg .Chart .Title .Overlay .ValAttr =_cf .Bool (false );_gge ._egg .Chart .AutoTitleDeleted =_a .NewCT_Boolean ();_gge ._egg .Chart .AutoTitleDeleted .ValAttr =_cf .Bool (false );_cfdd :=MakeTitle (_gge ._egg .Chart .Title );_cfdd .InitializeDefaults ();return _cfdd ;};

// Order returns the order of the series
func (_adbe ScatterChartSeries )Order ()uint32 {return _adbe ._fdd .Order .ValAttr };

// Values returns the value data source.
func (_cfbf BubbleChartSeries )Values ()NumberDataSource {if _cfbf ._gfe .YVal ==nil {_cfbf ._gfe .YVal =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_cfbf ._gfe .YVal );};

// SetType sets the type the secone pie to either pie or bar
func (_bgg PieOfPieChart )SetType (t _a .ST_OfPieType ){_bgg ._geg .OfPieType .ValAttr =t };

// Order returns the order of the series
func (_fcc LineChartSeries )Order ()uint32 {return _fcc ._aabc .Order .ValAttr };

// X returns the inner wrapped XML type.
func (_gbg PieChart )X ()*_a .CT_PieChart {return _gbg ._ddg };

// AddStockChart adds a new stock chart.
func (_fc Chart )AddStockChart ()StockChart {_ade :=_a .NewCT_PlotAreaChoice ();_fc ._egg .Chart .PlotArea .Choice =append (_fc ._egg .Chart .PlotArea .Choice ,_ade );_ade .StockChart =_a .NewCT_StockChart ();_efa :=StockChart {_addb :_ade .StockChart };_efa .InitializeDefaults ();return _efa ;};func (_bda CategoryAxis )SetPosition (p _a .ST_AxPos ){_bda ._acc .AxPos =_a .NewCT_AxPos ();_bda ._acc .AxPos .ValAttr =p ;};func (_fceb DataLabels )SetShowValue (b bool ){_fceb .ensureChoice ();_fceb ._dca .Choice .ShowVal =_a .NewCT_Boolean ();_fceb ._dca .Choice .ShowVal .ValAttr =_cf .Bool (b );};func (_abcg ValueAxis )SetCrosses (axis Axis ){_abcg ._aabbf .CrossAx .ValAttr =axis .AxisID ()};

// X returns the inner wrapped XML type.
func (_bbe SurfaceChartSeries )X ()*_a .CT_SurfaceSer {return _bbe ._cacg };

// Properties returns the bar chart series shape properties.
func (_eg AreaChartSeries )Properties ()_f .ShapeProperties {if _eg ._ag .SpPr ==nil {_eg ._ag .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_eg ._ag .SpPr );};

// AddLineChart adds a new line chart to a chart.
func (_cdf Chart )AddLineChart ()LineChart {_cgba :=_a .NewCT_PlotAreaChoice ();_cdf ._egg .Chart .PlotArea .Choice =append (_cdf ._egg .Chart .PlotArea .Choice ,_cgba );_cgba .LineChart =_a .NewCT_LineChart ();_cgba .LineChart .Grouping =_a .NewCT_Grouping ();_cgba .LineChart .Grouping .ValAttr =_a .ST_GroupingStandard ;return LineChart {_acd :_cgba .LineChart };};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_bcd Chart )AddSurface3DChart ()Surface3DChart {_fgg :=_a .NewCT_PlotAreaChoice ();_bcd ._egg .Chart .PlotArea .Choice =append (_bcd ._egg .Chart .PlotArea .Choice ,_fgg );_fgg .Surface3DChart =_a .NewCT_Surface3DChart ();_aad (_bcd ._egg .Chart );_aae :=Surface3DChart {_bfcb :_fgg .Surface3DChart };_aae .InitializeDefaults ();return _aae ;};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_ba BubbleChartSeries )InitializeDefaults (){};func (_cdb DateAxis )Properties ()_f .ShapeProperties {if _cdb ._adef .SpPr ==nil {_cdb ._adef .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_cdb ._adef .SpPr );};

// RemoveTitle removes any existing title from the chart.
func (_cgc Chart )RemoveTitle (){_cgc ._egg .Chart .Title =nil ;_cgc ._egg .Chart .AutoTitleDeleted =_a .NewCT_Boolean ();_cgc ._egg .Chart .AutoTitleDeleted .ValAttr =_cf .Bool (true );};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_dbb Chart )AddPieOfPieChart ()PieOfPieChart {_dgeb :=_a .NewCT_PlotAreaChoice ();_dbb ._egg .Chart .PlotArea .Choice =append (_dbb ._egg .Chart .PlotArea .Choice ,_dgeb );_dgeb .OfPieChart =_a .NewCT_OfPieChart ();_dbe :=PieOfPieChart {_geg :_dgeb .OfPieChart };_dbe .InitializeDefaults ();return _dbe ;};func MakeLegend (l *_a .CT_Legend )Legend {return Legend {l }};

// AddSeries adds a default series to a bar chart.
func (_ff Bar3DChart )AddSeries ()BarChartSeries {_cbc :=_ff .nextColor (len (_ff ._dfc .Ser ));_ea :=_a .NewCT_BarSer ();_ff ._dfc .Ser =append (_ff ._dfc .Ser ,_ea );_ea .Idx .ValAttr =uint32 (len (_ff ._dfc .Ser )-1);_ea .Order .ValAttr =uint32 (len (_ff ._dfc .Ser )-1);_dg :=BarChartSeries {_ea };_dg .InitializeDefaults ();_dg .Properties ().SetSolidFill (_cbc );return _dg ;};

// AddSeries adds a default series to an Radar chart.
func (_babg RadarChart )AddSeries ()RadarChartSeries {_bgd :=_babg .nextColor (len (_babg ._gce .Ser ));_gdgd :=_a .NewCT_RadarSer ();_babg ._gce .Ser =append (_babg ._gce .Ser ,_gdgd );_gdgd .Idx .ValAttr =uint32 (len (_babg ._gce .Ser )-1);_gdgd .Order .ValAttr =uint32 (len (_babg ._gce .Ser )-1);_fab :=RadarChartSeries {_gdgd };_fab .InitializeDefaults ();_fab .Properties ().SetSolidFill (_bgd );return _fab ;};

// AddBubbleChart adds a new bubble chart.
func (_ccb Chart )AddBubbleChart ()BubbleChart {_ggg :=_a .NewCT_PlotAreaChoice ();_ccb ._egg .Chart .PlotArea .Choice =append (_ccb ._egg .Chart .PlotArea .Choice ,_ggg );_ggg .BubbleChart =_a .NewCT_BubbleChart ();_bfeb :=BubbleChart {_aga :_ggg .BubbleChart };_bfeb .InitializeDefaults ();return _bfeb ;};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_gbb *_a .CT_BarSer };func (_aed SurfaceChartSeries )Values ()NumberDataSource {if _aed ._cacg .Val ==nil {_aed ._cacg .Val =_a .NewCT_NumDataSource ();};_edeeb :=MakeNumberDataSource (_aed ._cacg .Val );_edeeb .CreateEmptyNumberCache ();return _edeeb ;};func (_cae Marker )Properties ()_f .ShapeProperties {if _cae ._gfg .SpPr ==nil {_cae ._gfg .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_cae ._gfg .SpPr );};

// AddAxis adds an axis to a Scatter chart.
func (_edb ScatterChart )AddAxis (axis Axis ){_cgbf :=_a .NewCT_UnsignedInt ();_cgbf .ValAttr =axis .AxisID ();_edb ._dcgf .AxId =append (_edb ._dcgf .AxId ,_cgbf );};func (_fed Title )InitializeDefaults (){_fed .SetText ("\u0054\u0069\u0074l\u0065");_fed .RunProperties ().SetSize (16*_g .Point );_fed .RunProperties ().SetSolidFill (_cg .Black );_fed .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_fed .RunProperties ().SetBold (false );};func (_gafa Legend )SetOverlay (b bool ){_gafa ._bed .Overlay =_a .NewCT_Boolean ();_gafa ._bed .Overlay .ValAttr =_cf .Bool (b );};func (_bab DataLabels )SetShowPercent (b bool ){_bab .ensureChoice ();_bab ._dca .Choice .ShowPercent =_a .NewCT_Boolean ();_bab ._dca .Choice .ShowPercent .ValAttr =_cf .Bool (b );};

// SetOrder sets the order of the series
func (_cfca ScatterChartSeries )SetOrder (idx uint32 ){_cfca ._fdd .Order .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_cbd Pie3DChart )InitializeDefaults (){_cbd ._cfdb .VaryColors =_a .NewCT_Boolean ();_cbd ._cfdb .VaryColors .ValAttr =_cf .Bool (true );};func (_eggd ValueAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_eggd ._aabbf .MajorTickMark =nil ;}else {_eggd ._aabbf .MajorTickMark =_a .NewCT_TickMark ();_eggd ._aabbf .MajorTickMark .ValAttr =m ;};};func (_fcb Title )RunProperties ()_f .RunProperties {if _fcb ._dcgg .Tx ==nil {_fcb .SetText ("");};if _fcb ._dcgg .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_fcb ._dcgg .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_d .NewCT_TextCharacterProperties ();};return _f .MakeRunProperties (_fcb ._dcgg .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func (_bcgd ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bcgd ._fdd .XVal ==nil {_bcgd ._fdd .XVal =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_bcgd ._fdd .XVal );};

// X returns the inner wrapped XML type.
func (_edf Legend )X ()*_a .CT_Legend {return _edf ._bed };

// Properties returns the bar chart series shape properties.
func (_cecg RadarChartSeries )Properties ()_f .ShapeProperties {if _cecg ._gfbc .SpPr ==nil {_cecg ._gfbc .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_cecg ._gfbc .SpPr );};func (_dfdb DateAxis )SetPosition (p _a .ST_AxPos ){_dfdb ._adef .AxPos =_a .NewCT_AxPos ();_dfdb ._adef .AxPos .ValAttr =p ;};func (_ceb ValueAxis )MajorGridLines ()GridLines {if _ceb ._aabbf .MajorGridlines ==nil {_ceb ._aabbf .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_ceb ._aabbf .MajorGridlines };};func (_baggc Legend )InitializeDefaults (){_baggc .SetPosition (_a .ST_LegendPosR );_baggc .SetOverlay (false );_baggc .Properties ().SetNoFill ();_baggc .Properties ().LineProperties ().SetNoFill ();};

// InitializeDefaults the Stock chart to its defaults
func (_baee StockChart )InitializeDefaults (){_baee ._addb .HiLowLines =_a .NewCT_ChartLines ();_baee ._addb .UpDownBars =_a .NewCT_UpDownBars ();_baee ._addb .UpDownBars .GapWidth =_a .NewCT_GapAmount ();_baee ._addb .UpDownBars .GapWidth .ValAttr =&_a .ST_GapAmount {};_baee ._addb .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_cf .Uint16 (150);_baee ._addb .UpDownBars .UpBars =_a .NewCT_UpDownBar ();_baee ._addb .UpDownBars .DownBars =_a .NewCT_UpDownBar ();};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_bgea Chart )AddLegend ()Legend {_bgea ._egg .Chart .Legend =_a .NewCT_Legend ();_bfea :=MakeLegend (_bgea ._egg .Chart .Legend );_bfea .InitializeDefaults ();return _bfea ;};

// X returns the inner wrapped XML type.
func (_dad AreaChart )X ()*_a .CT_AreaChart {return _dad ._da };

// AddSurfaceChart adds a new surface chart to a chart.
func (_gcd Chart )AddSurfaceChart ()SurfaceChart {_bgc :=_a .NewCT_PlotAreaChoice ();_gcd ._egg .Chart .PlotArea .Choice =append (_gcd ._egg .Chart .PlotArea .Choice ,_bgc );_bgc .SurfaceChart =_a .NewCT_SurfaceChart ();_aad (_gcd ._egg .Chart );_gcd ._egg .Chart .View3D .RotX .ValAttr =_cf .Int8 (90);_gcd ._egg .Chart .View3D .RotY .ValAttr =_cf .Uint16 (0);_gcd ._egg .Chart .View3D .Perspective =_a .NewCT_Perspective ();_gcd ._egg .Chart .View3D .Perspective .ValAttr =_cf .Uint8 (0);_fgd :=SurfaceChart {_fcab :_bgc .SurfaceChart };_fgd .InitializeDefaults ();return _fgd ;};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_fbad DoughnutChart )SetHoleSize (pct uint8 ){if _fbad ._dcf .HoleSize ==nil {_fbad ._dcf .HoleSize =_a .NewCT_HoleSize ();};if _fbad ._dcf .HoleSize .ValAttr ==nil {_fbad ._dcf .HoleSize .ValAttr =&_a .ST_HoleSize {};};_fbad ._dcf .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};

// X returns the inner wrapped XML type.
func (_ffaf SurfaceChart )X ()*_a .CT_SurfaceChart {return _ffaf ._fcab };

// InitializeDefaults initializes an area series to the default values.
func (_gc AreaChartSeries )InitializeDefaults (){};func (_eded Marker )SetSymbol (s _a .ST_MarkerStyle ){if s ==_a .ST_MarkerStyleUnset {_eded ._gfg .Symbol =nil ;}else {_eded ._gfg .Symbol =_a .NewCT_MarkerStyle ();_eded ._gfg .Symbol .ValAttr =s ;};};

// X returns the inner wrapped XML type.
func (_baf Title )X ()*_a .CT_Title {return _baf ._dcgg };

// Values returns the bubble size data source.
func (_ecg BubbleChartSeries )BubbleSizes ()NumberDataSource {if _ecg ._gfe .BubbleSize ==nil {_ecg ._gfe .BubbleSize =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_ecg ._gfe .BubbleSize );};

// X returns the inner wrapped XML type.
func (_eef GridLines )X ()*_a .CT_ChartLines {return _eef ._dgc };

// Index returns the index of the series
func (_eggae SurfaceChartSeries )Index ()uint32 {return _eggae ._cacg .Idx .ValAttr };func (_fced Title )SetText (s string ){if _fced ._dcgg .Tx ==nil {_fced ._dcgg .Tx =_a .NewCT_Tx ();};if _fced ._dcgg .Tx .Choice .Rich ==nil {_fced ._dcgg .Tx .Choice .Rich =_d .NewCT_TextBody ();};var _agfe *_d .CT_TextParagraph ;if len (_fced ._dcgg .Tx .Choice .Rich .P )==0{_agfe =_d .NewCT_TextParagraph ();_fced ._dcgg .Tx .Choice .Rich .P =[]*_d .CT_TextParagraph {_agfe };}else {_agfe =_fced ._dcgg .Tx .Choice .Rich .P [0];};var _cdfc *_d .EG_TextRun ;if len (_agfe .EG_TextRun )==0{_cdfc =_d .NewEG_TextRun ();_agfe .EG_TextRun =[]*_d .EG_TextRun {_cdfc };}else {_cdfc =_agfe .EG_TextRun [0];};if _cdfc .R ==nil {_cdfc .R =_d .NewCT_RegularTextRun ();};_cdfc .R .T =s ;};

// Properties returns the bar chart series shape properties.
func (_ebf PieChartSeries )Properties ()_f .ShapeProperties {if _ebf ._fca .SpPr ==nil {_ebf ._fca .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_ebf ._fca .SpPr );};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_gfe *_a .CT_BubbleSer };

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_fca *_a .CT_PieSer };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_gdg Chart )AddBar3DChart ()Bar3DChart {_aad (_gdg ._egg .Chart );_bagg :=_a .NewCT_PlotAreaChoice ();_gdg ._egg .Chart .PlotArea .Choice =append (_gdg ._egg .Chart .PlotArea .Choice ,_bagg );_bagg .Bar3DChart =_a .NewCT_Bar3DChart ();_bagg .Bar3DChart .Grouping =_a .NewCT_BarGrouping ();_bagg .Bar3DChart .Grouping .ValAttr =_a .ST_BarGroupingStandard ;_bfc :=Bar3DChart {_dfc :_bagg .Bar3DChart };_bfc .InitializeDefaults ();return _bfc ;};

// Properties returns the bar chart series shape properties.
func (_ef BarChartSeries )Properties ()_f .ShapeProperties {if _ef ._gbb .SpPr ==nil {_ef ._gbb .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_ef ._gbb .SpPr );};

// X returns the inner wrapped XML type.
func (_de Bar3DChart )X ()*_a .CT_Bar3DChart {return _de ._dfc };func (_fgab Legend )Properties ()_f .ShapeProperties {if _fgab ._bed .SpPr ==nil {_fgab ._bed .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_fgab ._bed .SpPr );};

// AddSeries adds a default series to an Pie chart.
func (_cec PieChart )AddSeries ()PieChartSeries {_ebgaf :=_a .NewCT_PieSer ();_cec ._ddg .Ser =append (_cec ._ddg .Ser ,_ebgaf );_ebgaf .Idx .ValAttr =uint32 (len (_cec ._ddg .Ser )-1);_ebgaf .Order .ValAttr =uint32 (len (_cec ._ddg .Ser )-1);_ceg :=PieChartSeries {_ebgaf };_ceg .InitializeDefaults ();return _ceg ;};func (_ggcg DataLabels )SetShowLegendKey (b bool ){_ggcg .ensureChoice ();_ggcg ._dca .Choice .ShowLegendKey =_a .NewCT_Boolean ();_ggcg ._dca .Choice .ShowLegendKey .ValAttr =_cf .Bool (b );};type SurfaceChartSeries struct{_cacg *_a .CT_SurfaceSer };

// X returns the inner wrapped XML type.
func (_eea DoughnutChart )X ()*_a .CT_DoughnutChart {return _eea ._dcf };func (_bfg DateAxis )SetCrosses (axis Axis ){_bfg ._adef .CrossAx .ValAttr =axis .AxisID ()};func MakeSeriesAxis (x *_a .CT_SerAx )SeriesAxis {return SeriesAxis {x }};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_caf CategoryAxisDataSource )SetNumberReference (s string ){_caf ._dab .Choice =_a .NewCT_AxDataSourceChoice ();_caf ._dab .Choice .NumRef =_a .NewCT_NumRef ();_caf ._dab .Choice .NumRef .F =s ;};

// CategoryAxis returns the category data source.
func (_dde PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dde ._fca .Cat ==nil {_dde ._fca .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_dde ._fca .Cat );};type DataLabels struct{_dca *_a .CT_DLbls };

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_dab *_a .CT_AxDataSource };

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_aecc PieChartSeries )SetExplosion (v uint32 ){_aecc ._fca .Explosion =_a .NewCT_UnsignedInt ();_aecc ._fca .Explosion .ValAttr =v ;};func (_dcfb NumberDataSource )SetReference (s string ){_dcfb .ensureChoice ();if _dcfb ._edd .Choice .NumRef ==nil {_dcfb ._edd .Choice .NumRef =_a .NewCT_NumRef ();};_dcfb ._edd .Choice .NumRef .F =s ;};type GridLines struct{_dgc *_a .CT_ChartLines };

// CategoryAxis returns the category data source.
func (_fee AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _fee ._ag .Cat ==nil {_fee ._ag .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_fee ._ag .Cat );};

// AddSeries adds a default series to an area chart.
func (_bb Area3DChart )AddSeries ()AreaChartSeries {_ac :=_bb .nextColor (len (_bb ._gd .Ser ));_eb :=_a .NewCT_AreaSer ();_bb ._gd .Ser =append (_bb ._gd .Ser ,_eb );_eb .Idx .ValAttr =uint32 (len (_bb ._gd .Ser )-1);_eb .Order .ValAttr =uint32 (len (_bb ._gd .Ser )-1);_ee :=AreaChartSeries {_eb };_ee .InitializeDefaults ();_ee .Properties ().SetSolidFill (_ac );return _ee ;};

// Chart is a generic chart.
type Chart struct{_egg *_a .ChartSpace };func (_bfe CategoryAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_bfe ._acc .MajorTickMark =nil ;}else {_bfe ._acc .MajorTickMark =_a .NewCT_TickMark ();_bfe ._acc .MajorTickMark .ValAttr =m ;};};func (_ca CategoryAxis )InitializeDefaults (){_ca .SetPosition (_a .ST_AxPosB );_ca .SetMajorTickMark (_a .ST_TickMarkOut );_ca .SetMinorTickMark (_a .ST_TickMarkIn );_ca .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_ca .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cg .LightGray );_ca .Properties ().LineProperties ().SetSolidFill (_cg .Black );};func (_ece RadarChart )AddAxis (axis Axis ){_afa :=_a .NewCT_UnsignedInt ();_afa .ValAttr =axis .AxisID ();_ece ._gce .AxId =append (_ece ._gce .AxId ,_afa );};func (_bga DateAxis )SetMajorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_bga ._adef .MajorTickMark =nil ;}else {_bga ._adef .MajorTickMark =_a .NewCT_TickMark ();_bga ._adef .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_bdf PieChartSeries )X ()*_a .CT_PieSer {return _bdf ._fca };

// Labels returns the data label properties.
func (_dda ScatterChartSeries )Labels ()DataLabels {if _dda ._fdd .DLbls ==nil {_dda ._fdd .DLbls =_a .NewCT_DLbls ();};return MakeDataLabels (_dda ._fdd .DLbls );};

// X returns the inner wrapped XML type.
func (_ffae Line3DChart )X ()*_a .CT_Line3DChart {return _ffae ._fdg };

// X returns the inner wrapped XML type.
func (_ffd StockChart )X ()*_a .CT_StockChart {return _ffd ._addb };

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_dfd *_a .CT_BarChart ;};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_gd *_a .CT_Area3DChart ;};

// AddPieChart adds a new pie chart to a chart.
func (_bdaf Chart )AddPieChart ()PieChart {_ccece :=_a .NewCT_PlotAreaChoice ();_bdaf ._egg .Chart .PlotArea .Choice =append (_bdaf ._egg .Chart .PlotArea .Choice ,_ccece );_ccece .PieChart =_a .NewCT_PieChart ();_dcd :=PieChart {_ddg :_ccece .PieChart };_dcd .InitializeDefaults ();return _dcd ;};func MakeMarker (x *_a .CT_Marker )Marker {return Marker {x }};type nullAxis byte ;

// RemoveLegend removes the legend if the chart has one.
func (_eacd Chart )RemoveLegend (){_eacd ._egg .Chart .Legend =nil };

// X returns the inner wrapped XML type.
func (_aedf ValueAxis )X ()*_a .CT_ValAx {return _aedf ._aabbf };func (_afd ValueAxis )SetPosition (p _a .ST_AxPos ){_afd ._aabbf .AxPos =_a .NewCT_AxPos ();_afd ._aabbf .AxPos .ValAttr =p ;};

// SetText sets the series text
func (_edee SurfaceChartSeries )SetText (s string ){_edee ._cacg .Tx =_a .NewCT_SerTx ();_edee ._cacg .Tx .Choice .V =&s ;};

// AddPie3DChart adds a new pie chart to a chart.
func (_bdae Chart )AddPie3DChart ()Pie3DChart {_aad (_bdae ._egg .Chart );_cgf :=_a .NewCT_PlotAreaChoice ();_bdae ._egg .Chart .PlotArea .Choice =append (_bdae ._egg .Chart .PlotArea .Choice ,_cgf );_cgf .Pie3DChart =_a .NewCT_Pie3DChart ();_ffa :=Pie3DChart {_cfdb :_cgf .Pie3DChart };_ffa .InitializeDefaults ();return _ffa ;};

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_gce *_a .CT_RadarChart ;};func (_aab Chart )AddSeriesAxis ()SeriesAxis {_fd :=_a .NewCT_SerAx ();if _aab ._egg .Chart .PlotArea .CChoice ==nil {_aab ._egg .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_fd .AxId =_a .NewCT_UnsignedInt ();_fd .AxId .ValAttr =0x7FFFFFFF&_ad .Uint32 ();_aab ._egg .Chart .PlotArea .CChoice .SerAx =append (_aab ._egg .Chart .PlotArea .CChoice .SerAx ,_fd );_fd .Delete =_a .NewCT_Boolean ();_fd .Delete .ValAttr =_cf .Bool (false );_eac :=MakeSeriesAxis (_fd );_eac .InitializeDefaults ();return _eac ;};

// SetText sets the series text.
func (_fff RadarChartSeries )SetText (s string ){_fff ._gfbc .Tx =_a .NewCT_SerTx ();_fff ._gfbc .Tx .Choice .V =&s ;};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_fcd Chart )SetDisplayBlanksAs (v _a .ST_DispBlanksAs ){_fcd ._egg .Chart .DispBlanksAs =_a .NewCT_DispBlanksAs ();_fcd ._egg .Chart .DispBlanksAs .ValAttr =v ;};type Legend struct{_bed *_a .CT_Legend };func (_ega LineChartSeries )InitializeDefaults (){_ega .Properties ().LineProperties ().SetWidth (1*_g .Point );_ega .Properties ().LineProperties ().SetSolidFill (_cg .Black );_ega .Properties ().LineProperties ().SetJoin (_f .LineJoinRound );_ega .Marker ().SetSymbol (_a .ST_MarkerStyleNone );_ega .Labels ().SetShowLegendKey (false );_ega .Labels ().SetShowValue (false );_ega .Labels ().SetShowPercent (false );_ega .Labels ().SetShowCategoryName (false );_ega .Labels ().SetShowSeriesName (false );_ega .Labels ().SetShowLeaderLines (false );};func (_bcdc DateAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_bcdc ._adef .TickLblPos =nil ;}else {_bcdc ._adef .TickLblPos =_a .NewCT_TickLblPos ();_bcdc ._adef .TickLblPos .ValAttr =p ;};};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_gfbc *_a .CT_RadarSer };

// InitializeDefaults the bar chart to its defaults
func (_fea DoughnutChart )InitializeDefaults (){_fea ._dcf .VaryColors =_a .NewCT_Boolean ();_fea ._dcf .VaryColors .ValAttr =_cf .Bool (true );_fea ._dcf .HoleSize =_a .NewCT_HoleSize ();_fea ._dcf .HoleSize .ValAttr =&_a .ST_HoleSize {};_fea ._dcf .HoleSize .ValAttr .ST_HoleSizeUByte =_cf .Uint8 (50);};

// X returns the inner wrapped XML type.
func (_fcdf LineChartSeries )X ()*_a .CT_LineSer {return _fcdf ._aabc };

// AddCategoryAxis adds a category axis.
func (_aac Chart )AddCategoryAxis ()CategoryAxis {_bgf :=_a .NewCT_CatAx ();if _aac ._egg .Chart .PlotArea .CChoice ==nil {_aac ._egg .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_bgf .AxId =_a .NewCT_UnsignedInt ();_bgf .AxId .ValAttr =0x7FFFFFFF&_ad .Uint32 ();_aac ._egg .Chart .PlotArea .CChoice .CatAx =append (_aac ._egg .Chart .PlotArea .CChoice .CatAx ,_bgf );_bgf .Auto =_a .NewCT_Boolean ();_bgf .Auto .ValAttr =_cf .Bool (true );_bgf .Delete =_a .NewCT_Boolean ();_bgf .Delete .ValAttr =_cf .Bool (false );_gda :=MakeCategoryAxis (_bgf );_gda .InitializeDefaults ();return _gda ;};func _aad (_ae *_a .CT_Chart ){_ae .View3D =_a .NewCT_View3D ();_ae .View3D .RotX =_a .NewCT_RotX ();_ae .View3D .RotX .ValAttr =_cf .Int8 (15);_ae .View3D .RotY =_a .NewCT_RotY ();_ae .View3D .RotY .ValAttr =_cf .Uint16 (20);_ae .View3D .RAngAx =_a .NewCT_Boolean ();_ae .View3D .RAngAx .ValAttr =_cf .Bool (false );_ae .Floor =_a .NewCT_Surface ();_ae .Floor .Thickness =_a .NewCT_Thickness ();_ae .Floor .Thickness .ValAttr .Uint32 =_cf .Uint32 (0);_ae .SideWall =_a .NewCT_Surface ();_ae .SideWall .Thickness =_a .NewCT_Thickness ();_ae .SideWall .Thickness .ValAttr .Uint32 =_cf .Uint32 (0);_ae .BackWall =_a .NewCT_Surface ();_ae .BackWall .Thickness =_a .NewCT_Thickness ();_ae .BackWall .Thickness .ValAttr .Uint32 =_cf .Uint32 (0);};type ScatterChart struct{chartBase ;_dcgf *_a .CT_ScatterChart ;};func (_fb Bar3DChart )AddAxis (axis Axis ){_cbec :=_a .NewCT_UnsignedInt ();_cbec .ValAttr =axis .AxisID ();_fb ._dfc .AxId =append (_fb ._dfc .AxId ,_cbec );};type DateAxis struct{_adef *_a .CT_DateAx };func (_ecb DateAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_ecb ._adef .MinorTickMark =nil ;}else {_ecb ._adef .MinorTickMark =_a .NewCT_TickMark ();_ecb ._adef .MinorTickMark .ValAttr =m ;};};func (_dgb DateAxis )AxisID ()uint32 {return _dgb ._adef .AxId .ValAttr };var NullAxis Axis =nullAxis (0);

// AddAxis adds an axis to a Surface chart.
func (_fabc SurfaceChart )AddAxis (axis Axis ){_adcd :=_a .NewCT_UnsignedInt ();_adcd .ValAttr =axis .AxisID ();_fabc ._fcab .AxId =append (_fabc ._fcab .AxId ,_adcd );};

// Marker returns the marker properties.
func (_dgg ScatterChartSeries )Marker ()Marker {if _dgg ._fdd .Marker ==nil {_dgg ._fdd .Marker =_a .NewCT_Marker ();};return MakeMarker (_dgg ._fdd .Marker );};func (_eaf CategoryAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_eaf ._acc .MinorTickMark =nil ;}else {_eaf ._acc .MinorTickMark =_a .NewCT_TickMark ();_eaf ._acc .MinorTickMark .ValAttr =m ;};};type NumberDataSource struct{_edd *_a .CT_NumDataSource };func (_aa Area3DChart )AddAxis (axis Axis ){_ec :=_a .NewCT_UnsignedInt ();_ec .ValAttr =axis .AxisID ();_aa ._gd .AxId =append (_aa ._gd .AxId ,_ec );};func (_gde CategoryAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_gde ._acc .TickLblPos =nil ;}else {_gde ._acc .TickLblPos =_a .NewCT_TickLblPos ();_gde ._acc .TickLblPos .ValAttr =p ;};};

// Marker returns the marker properties.
func (_ddb LineChartSeries )Marker ()Marker {if _ddb ._aabc .Marker ==nil {_ddb ._aabc .Marker =_a .NewCT_Marker ();};return MakeMarker (_ddb ._aabc .Marker );};

// X returns the inner wrapped XML type.
func (_cbecc PieOfPieChart )X ()*_a .CT_OfPieChart {return _cbecc ._geg };

// InitializeDefaults the bar chart to its defaults
func (_bcg RadarChart )InitializeDefaults (){_bcg ._gce .RadarStyle .ValAttr =_a .ST_RadarStyleMarker };func (_dee LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dee ._aabc .Cat ==nil {_dee ._aabc .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_dee ._aabc .Cat );};

// AddSeries adds a default series to an Pie3D chart.
func (_dcg Pie3DChart )AddSeries ()PieChartSeries {_dfg :=_a .NewCT_PieSer ();_dcg ._cfdb .Ser =append (_dcg ._cfdb .Ser ,_dfg );_dfg .Idx .ValAttr =uint32 (len (_dcg ._cfdb .Ser )-1);_dfg .Order .ValAttr =uint32 (len (_dcg ._cfdb .Ser )-1);_edfc :=PieChartSeries {_dfg };_edfc .InitializeDefaults ();return _edfc ;};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_cfce Chart )AddDoughnutChart ()DoughnutChart {_gaf :=_a .NewCT_PlotAreaChoice ();_cfce ._egg .Chart .PlotArea .Choice =append (_cfce ._egg .Chart .PlotArea .Choice ,_gaf );_gaf .DoughnutChart =_a .NewCT_DoughnutChart ();_ddd :=DoughnutChart {_dcf :_gaf .DoughnutChart };_ddd .InitializeDefaults ();return _ddd ;};func (_dfce CategoryAxis )Properties ()_f .ShapeProperties {if _dfce ._acc .SpPr ==nil {_dfce ._acc .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_dfce ._acc .SpPr );};type Marker struct{_gfg *_a .CT_Marker };

// SetIndex sets the index of the series
func (_ded ScatterChartSeries )SetIndex (idx uint32 ){_ded ._fdd .Idx .ValAttr =idx };

// CategoryAxis returns the category data source.
func (_db BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _db ._gbb .Cat ==nil {_db ._gbb .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_db ._gbb .Cat );};

// X returns the inner wrapped XML type.
func (_abc ScatterChartSeries )X ()*_a .CT_ScatterSer {return _abc ._fdd };

// X returns the inner wrapped XML type.
func (_ggc Chart )X ()*_a .ChartSpace {return _ggc ._egg };

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_aabc *_a .CT_LineSer };func (_ced DataLabels )SetShowSeriesName (b bool ){_ced .ensureChoice ();_ced ._dca .Choice .ShowSerName =_a .NewCT_Boolean ();_ced ._dca .Choice .ShowSerName .ValAttr =_cf .Bool (b );};

// SetOrder sets the order of the series
func (_ede LineChartSeries )SetOrder (idx uint32 ){_ede ._aabc .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_cbe AreaChartSeries )X ()*_a .CT_AreaSer {return _cbe ._ag };

// SetValues is used to set the source data to a set of values.
func (_cdg CategoryAxisDataSource )SetValues (v []string ){_cdg ._dab .Choice =_a .NewCT_AxDataSourceChoice ();_cdg ._dab .Choice .StrLit =_a .NewCT_StrData ();_cdg ._dab .Choice .StrLit .PtCount =_a .NewCT_UnsignedInt ();_cdg ._dab .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _bge ,_ga :=range v {_cdg ._dab .Choice .StrLit .Pt =append (_cdg ._dab .Choice .StrLit .Pt ,&_a .CT_StrVal {IdxAttr :uint32 (_bge ),V :_ga });};};

// Index returns the index of the series
func (_gab LineChartSeries )Index ()uint32 {return _gab ._aabc .Idx .ValAttr };

// SetText sets the series text
func (_aabb LineChartSeries )SetText (s string ){_aabb ._aabc .Tx =_a .NewCT_SerTx ();_aabb ._aabc .Tx .Choice .V =&s ;};

// AddAreaChart adds a new area chart to a chart.
func (_bdb Chart )AddAreaChart ()AreaChart {_baa :=_a .NewCT_PlotAreaChoice ();_bdb ._egg .Chart .PlotArea .Choice =append (_bdb ._egg .Chart .PlotArea .Choice ,_baa );_baa .AreaChart =_a .NewCT_AreaChart ();_ccd :=AreaChart {_da :_baa .AreaChart };_ccd .InitializeDefaults ();return _ccd ;};func (_cbed ValueAxis )SetTickLabelPosition (p _a .ST_TickLblPos ){if p ==_a .ST_TickLblPosUnset {_cbed ._aabbf .TickLblPos =nil ;}else {_cbed ._aabbf .TickLblPos =_a .NewCT_TickLblPos ();_cbed ._aabbf .TickLblPos .ValAttr =p ;};};func (_add SeriesAxis )InitializeDefaults (){};func (_egga ScatterChartSeries )SetSmooth (b bool ){_egga ._fdd .Smooth =_a .NewCT_Boolean ();_egga ._fdd .Smooth .ValAttr =&b ;};

// AddSeries adds a default series to an Pie chart.
func (_gca PieOfPieChart )AddSeries ()PieChartSeries {_cggb :=_a .NewCT_PieSer ();_gca ._geg .Ser =append (_gca ._geg .Ser ,_cggb );_cggb .Idx .ValAttr =uint32 (len (_gca ._geg .Ser )-1);_cggb .Order .ValAttr =uint32 (len (_gca ._geg .Ser )-1);_cdgg :=PieChartSeries {_cggb };_cdgg .InitializeDefaults ();return _cdgg ;};type CategoryAxis struct{_acc *_a .CT_CatAx };func (_aca ScatterChartSeries )InitializeDefaults (){_aca .Properties ().LineProperties ().SetNoFill ();_aca .Marker ().SetSymbol (_a .ST_MarkerStyleAuto );_aca .Labels ().SetShowLegendKey (false );_aca .Labels ().SetShowValue (true );_aca .Labels ().SetShowPercent (false );_aca .Labels ().SetShowCategoryName (false );_aca .Labels ().SetShowSeriesName (false );_aca .Labels ().SetShowLeaderLines (false );};

// AddRadarChart adds a new radar chart to a chart.
func (_ebg Chart )AddRadarChart ()RadarChart {_fa :=_a .NewCT_PlotAreaChoice ();_ebg ._egg .Chart .PlotArea .Choice =append (_ebg ._egg .Chart .PlotArea .Choice ,_fa );_fa .RadarChart =_a .NewCT_RadarChart ();_be :=RadarChart {_gce :_fa .RadarChart };_be .InitializeDefaults ();return _be ;};

// CategoryAxis returns the category data source.
func (_eefe RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _eefe ._gfbc .Cat ==nil {_eefe ._gfbc .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_eefe ._gfbc .Cat );};func (_dce chartBase )nextColor (_cgg int )_cg .Color {return _bea [_cgg %len (_bea )]};

// AddSeries adds a default series to a line chart.
func (_cac LineChart )AddSeries ()LineChartSeries {_bae :=_cac .nextColor (len (_cac ._acd .Ser ));_aaf :=_a .NewCT_LineSer ();_cac ._acd .Ser =append (_cac ._acd .Ser ,_aaf );_aaf .Idx .ValAttr =uint32 (len (_cac ._acd .Ser )-1);_aaf .Order .ValAttr =uint32 (len (_cac ._acd .Ser )-1);_deaa :=LineChartSeries {_aaf };_deaa .InitializeDefaults ();_deaa .Properties ().LineProperties ().SetSolidFill (_bae );return _deaa ;};func (_gcg Legend )SetPosition (p _a .ST_LegendPos ){if p ==_a .ST_LegendPosUnset {_gcg ._bed .LegendPos =nil ;}else {_gcg ._bed .LegendPos =_a .NewCT_LegendPos ();_gcg ._bed .LegendPos .ValAttr =p ;};};func (_cce BubbleChart )AddAxis (axis Axis ){_dff :=_a .NewCT_UnsignedInt ();_dff .ValAttr =axis .AxisID ();_cce ._aga .AxId =append (_cce ._aga .AxId ,_dff );};

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_da *_a .CT_AreaChart ;};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// Order returns the order of the series
func (_cab SurfaceChartSeries )Order ()uint32 {return _cab ._cacg .Order .ValAttr };func (_bee StockChart )AddAxis (axis Axis ){_ddbb :=_a .NewCT_UnsignedInt ();_ddbb .ValAttr =axis .AxisID ();_bee ._addb .AxId =append (_bee ._addb .AxId ,_ddbb );};func (_aade Marker )SetSize (sz uint8 ){_aade ._gfg .Size =_a .NewCT_MarkerSize ();_aade ._gfg .Size .ValAttr =&sz ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_a .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};

// AddScatterChart adds a scatter (X/Y) chart.
func (_bfa Chart )AddScatterChart ()ScatterChart {_acb :=_a .NewCT_PlotAreaChoice ();_bfa ._egg .Chart .PlotArea .Choice =append (_bfa ._egg .Chart .PlotArea .Choice ,_acb );_acb .ScatterChart =_a .NewCT_ScatterChart ();_ebga :=ScatterChart {_dcgf :_acb .ScatterChart };_ebga .InitializeDefaults ();return _ebga ;};

// SetText sets the series text.
func (_gg BarChartSeries )SetText (s string ){_gg ._gbb .Tx =_a .NewCT_SerTx ();_gg ._gbb .Tx .Choice .V =&s ;};func (_feb SeriesAxis )SetCrosses (axis Axis ){_feb ._dgbb .CrossAx .ValAttr =axis .AxisID ()};

// InitializeDefaults the bar chart to its defaults
func (_bg Bar3DChart )InitializeDefaults (){_bg .SetDirection (_a .ST_BarDirCol )};

// AddSeries adds a default series to a Surface chart.
func (_deeg SurfaceChart )AddSeries ()SurfaceChartSeries {_gac :=_deeg .nextColor (len (_deeg ._fcab .Ser ));_eega :=_a .NewCT_SurfaceSer ();_deeg ._fcab .Ser =append (_deeg ._fcab .Ser ,_eega );_eega .Idx .ValAttr =uint32 (len (_deeg ._fcab .Ser )-1);_eega .Order .ValAttr =uint32 (len (_deeg ._fcab .Ser )-1);_eee :=SurfaceChartSeries {_eega };_eee .InitializeDefaults ();_eee .Properties ().LineProperties ().SetSolidFill (_gac );return _eee ;};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_dea CategoryAxisDataSource )SetLabelReference (s string ){_dea ._dab .Choice =_a .NewCT_AxDataSourceChoice ();_dea ._dab .Choice .StrRef =_a .NewCT_StrRef ();_dea ._dab .Choice .StrRef .F =s ;};

// SetIndex sets the index of the series
func (_egd SurfaceChartSeries )SetIndex (idx uint32 ){_egd ._cacg .Idx .ValAttr =idx };

// InitializeDefaults the bar chart to its defaults
func (_edga PieChart )InitializeDefaults (){_edga ._ddg .VaryColors =_a .NewCT_Boolean ();_edga ._ddg .VaryColors .ValAttr =_cf .Bool (true );};

// X returns the inner wrapped XML type.
func (_fcebb Surface3DChart )X ()*_a .CT_Surface3DChart {return _fcebb ._bfcb };

// Values returns the value data source.
func (_fefc BarChartSeries )Values ()NumberDataSource {if _fefc ._gbb .Val ==nil {_fefc ._gbb .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_fefc ._gbb .Val );};

// X returns the inner wrapped XML type.
func (_bec SeriesAxis )X ()*_a .CT_SerAx {return _bec ._dgbb };

// InitializeDefaults initializes a bar chart series to the default values.
func (_cbb BarChartSeries )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_edgg Pie3DChart )X ()*_a .CT_Pie3DChart {return _edgg ._cfdb };

// InitializeDefaults initializes an Pie series to the default values.
func (_ddf PieChartSeries )InitializeDefaults (){};func MakeChart (x *_a .ChartSpace )Chart {return Chart {x }};

// AddSeries adds a default series to a Surface chart.
func (_ccg Surface3DChart )AddSeries ()SurfaceChartSeries {_eafc :=_ccg .nextColor (len (_ccg ._bfcb .Ser ));_bgad :=_a .NewCT_SurfaceSer ();_ccg ._bfcb .Ser =append (_ccg ._bfcb .Ser ,_bgad );_bgad .Idx .ValAttr =uint32 (len (_ccg ._bfcb .Ser )-1);_bgad .Order .ValAttr =uint32 (len (_ccg ._bfcb .Ser )-1);_adde :=SurfaceChartSeries {_bgad };_adde .InitializeDefaults ();_adde .Properties ().LineProperties ().SetSolidFill (_eafc );return _adde ;};func MakeTitle (x *_a .CT_Title )Title {return Title {x }};

// CategoryAxis returns the category data source.
func (_edg BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _edg ._gfe .XVal ==nil {_edg ._gfe .XVal =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_edg ._gfe .XVal );};func (_dgd LineChartSeries )Values ()NumberDataSource {if _dgd ._aabc .Val ==nil {_dgd ._aabc .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_dgd ._aabc .Val );};

// Index returns the index of the series
func (_gga ScatterChartSeries )Index ()uint32 {return _gga ._fdd .Idx .ValAttr };

// AddSeries adds a default series to a bar chart.
func (_eeg BarChart )AddSeries ()BarChartSeries {_dge :=_eeg .nextColor (len (_eeg ._dfd .Ser ));_dd :=_a .NewCT_BarSer ();_eeg ._dfd .Ser =append (_eeg ._dfd .Ser ,_dd );_dd .Idx .ValAttr =uint32 (len (_eeg ._dfd .Ser )-1);_dd .Order .ValAttr =uint32 (len (_eeg ._dfd .Ser )-1);_bf :=BarChartSeries {_dd };_bf .InitializeDefaults ();_bf .Properties ().SetSolidFill (_dge );return _bf ;};

// SetText sets the series text.
func (_def PieChartSeries )SetText (s string ){_def ._fca .Tx =_a .NewCT_SerTx ();_def ._fca .Tx .Choice .V =&s ;};

// SetOrder sets the order of the series
func (_fgb SurfaceChartSeries )SetOrder (idx uint32 ){_fgb ._cacg .Order .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_agbd RadarChart )X ()*_a .CT_RadarChart {return _agbd ._gce };func (_abg ValueAxis )AxisID ()uint32 {return _abg ._aabbf .AxId .ValAttr };

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_dfc *_a .CT_Bar3DChart ;};

// Values returns the value data source.
func (_adc AreaChartSeries )Values ()NumberDataSource {if _adc ._ag .Val ==nil {_adc ._ag .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_adc ._ag .Val );};

// AddAxis adds an axis to a line chart.
func (_ab Line3DChart )AddAxis (axis Axis ){_fbb :=_a .NewCT_UnsignedInt ();_fbb .ValAttr =axis .AxisID ();_ab ._fdg .AxId =append (_ab ._fdg .AxId ,_fbb );};

// SetText sets the series text.
func (_gfc AreaChartSeries )SetText (s string ){_gfc ._ag .Tx =_a .NewCT_SerTx ();_gfc ._ag .Tx .Choice .V =&s ;};

// Values returns the value data source.
func (_ebd PieChartSeries )Values ()NumberDataSource {if _ebd ._fca .Val ==nil {_ebd ._fca .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_ebd ._fca .Val );};

// AddDateAxis adds a value axis to the chart.
func (_fba Chart )AddDateAxis ()DateAxis {_ebc :=_a .NewCT_DateAx ();if _fba ._egg .Chart .PlotArea .CChoice ==nil {_fba ._egg .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_ebc .AxId =_a .NewCT_UnsignedInt ();_ebc .AxId .ValAttr =0x7FFFFFFF&_ad .Uint32 ();_fba ._egg .Chart .PlotArea .CChoice .DateAx =append (_fba ._egg .Chart .PlotArea .CChoice .DateAx ,_ebc );_ebc .Delete =_a .NewCT_Boolean ();_ebc .Delete .ValAttr =_cf .Bool (false );_ebc .Scaling =_a .NewCT_Scaling ();_ebc .Scaling .Orientation =_a .NewCT_Orientation ();_ebc .Scaling .Orientation .ValAttr =_a .ST_OrientationMinMax ;_ebc .Choice =&_a .EG_AxSharedChoice {};_ebc .Choice .Crosses =_a .NewCT_Crosses ();_ebc .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_dcb :=DateAxis {_ebc };_dcb .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cg .LightGray );_dcb .SetMajorTickMark (_a .ST_TickMarkOut );_dcb .SetMinorTickMark (_a .ST_TickMarkIn );_dcb .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_dcb .Properties ().LineProperties ().SetSolidFill (_cg .Black );_dcb .SetPosition (_a .ST_AxPosL );return _dcb ;};

// AddArea3DChart adds a new area chart to a chart.
func (_bbcc Chart )AddArea3DChart ()Area3DChart {_aad (_bbcc ._egg .Chart );_ccec :=_a .NewCT_PlotAreaChoice ();_bbcc ._egg .Chart .PlotArea .Choice =append (_bbcc ._egg .Chart .PlotArea .Choice ,_ccec );_ccec .Area3DChart =_a .NewCT_Area3DChart ();_cfc :=Area3DChart {_gd :_ccec .Area3DChart };_cfc .InitializeDefaults ();return _cfc ;};

// AddLine3DChart adds a new 3D line chart to a chart.
func (_bag Chart )AddLine3DChart ()Line3DChart {_aad (_bag ._egg .Chart );_gfb :=_a .NewCT_PlotAreaChoice ();_bag ._egg .Chart .PlotArea .Choice =append (_bag ._egg .Chart .PlotArea .Choice ,_gfb );_gfb .Line3DChart =_a .NewCT_Line3DChart ();_gfb .Line3DChart .Grouping =_a .NewCT_Grouping ();_gfb .Line3DChart .Grouping .ValAttr =_a .ST_GroupingStandard ;return Line3DChart {_fdg :_gfb .Line3DChart };};var _bea =[]_cg .Color {_cg .RGB (0x33,0x66,0xcc),_cg .RGB (0xDC,0x39,0x12),_cg .RGB (0xFF,0x99,0x00),_cg .RGB (0x10,0x96,0x18),_cg .RGB (0x99,0x00,0x99),_cg .RGB (0x3B,0x3E,0xAC),_cg .RGB (0x00,0x99,0xC6),_cg .RGB (0xDD,0x44,0x77),_cg .RGB (0x66,0xAA,0x00),_cg .RGB (0xB8,0x2E,0x2E),_cg .RGB (0x31,0x63,0x95),_cg .RGB (0x99,0x44,0x99),_cg .RGB (0x22,0xAA,0x99),_cg .RGB (0xAA,0xAA,0x11),_cg .RGB (0x66,0x33,0xCC),_cg .RGB (0xE6,0x73,0x00),_cg .RGB (0x8B,0x07,0x07),_cg .RGB (0x32,0x92,0x62),_cg .RGB (0x55,0x74,0xA6),_cg .RGB (0x3B,0x3E,0xAC)};

// X returns the inner wrapped XML type.
func (_fcca ScatterChart )X ()*_a .CT_ScatterChart {return _fcca ._dcgf };func (_ed nullAxis )AxisID ()uint32 {return 0};

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_ag *_a .CT_AreaSer };func (_daae SurfaceChartSeries )InitializeDefaults (){_daae .Properties ().LineProperties ().SetWidth (1*_g .Point );_daae .Properties ().LineProperties ().SetSolidFill (_cg .Black );_daae .Properties ().LineProperties ().SetJoin (_f .LineJoinRound );};func (_cfd AreaChart )AddAxis (axis Axis ){_fe :=_a .NewCT_UnsignedInt ();_fe .ValAttr =axis .AxisID ();_cfd ._da .AxId =append (_cfd ._da .AxId ,_fe );};

// SetDirection changes the direction of the bar chart (bar or column).
func (_ada BarChart )SetDirection (d _a .ST_BarDir ){_ada ._dfd .BarDir .ValAttr =d };func (_dcaf ValueAxis )SetMinorTickMark (m _a .ST_TickMark ){if m ==_a .ST_TickMarkUnset {_dcaf ._aabbf .MinorTickMark =nil ;}else {_dcaf ._aabbf .MinorTickMark =_a .NewCT_TickMark ();_dcaf ._aabbf .MinorTickMark .ValAttr =m ;};};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_addb *_a .CT_StockChart ;};func (_gba CategoryAxis )MajorGridLines ()GridLines {if _gba ._acc .MajorGridlines ==nil {_gba ._acc .MajorGridlines =_a .NewCT_ChartLines ();};return GridLines {_gba ._acc .MajorGridlines };};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_bfcb *_a .CT_Surface3DChart ;};func (_cde NumberDataSource )ensureChoice (){if _cde ._edd .Choice ==nil {_cde ._edd .Choice =_a .NewCT_NumDataSourceChoice ();};};

// SetText sets the series text
func (_dfdba ScatterChartSeries )SetText (s string ){_dfdba ._fdd .Tx =_a .NewCT_SerTx ();_dfdba ._fdd .Tx .Choice .V =&s ;};func (_ggcb SeriesAxis )AxisID ()uint32 {return _ggcb ._dgbb .AxId .ValAttr };func (_fccad Title )ParagraphProperties ()_f .ParagraphProperties {if _fccad ._dcgg .Tx ==nil {_fccad .SetText ("");};if _fccad ._dcgg .Tx .Choice .Rich .P [0].PPr ==nil {_fccad ._dcgg .Tx .Choice .Rich .P [0].PPr =_d .NewCT_TextParagraphProperties ();};return _f .MakeParagraphProperties (_fccad ._dcgg .Tx .Choice .Rich .P [0].PPr );};func (_dc CategoryAxis )SetCrosses (axis Axis ){_dc ._acc .Choice =_a .NewEG_AxSharedChoice ();_dc ._acc .Choice .Crosses =_a .NewCT_Crosses ();_dc ._acc .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_dc ._acc .CrossAx .ValAttr =axis .AxisID ();};

// Properties returns the line chart series shape properties.
func (_gag ScatterChartSeries )Properties ()_f .ShapeProperties {if _gag ._fdd .SpPr ==nil {_gag ._fdd .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_gag ._fdd .SpPr );};type Line3DChart struct{chartBase ;_fdg *_a .CT_Line3DChart ;};func (_fge ScatterChartSeries )Values ()NumberDataSource {if _fge ._fdd .YVal ==nil {_fge ._fdd .YVal =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_fge ._fdd .YVal );};func MakeValueAxis (x *_a .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_abd SurfaceChart )InitializeDefaults (){_abd ._fcab .Wireframe =_a .NewCT_Boolean ();_abd ._fcab .Wireframe .ValAttr =_cf .Bool (false );_abd ._fcab .BandFmts =_a .NewCT_BandFmts ();for _dadf :=0;_dadf < 15;_dadf ++{_ffg :=_a .NewCT_BandFmt ();_ffg .Idx .ValAttr =uint32 (_dadf );_ffg .SpPr =_d .NewCT_ShapeProperties ();_feea :=_f .MakeShapeProperties (_ffg .SpPr );_feea .SetSolidFill (_abd .nextColor (_dadf ));_abd ._fcab .BandFmts .BandFmt =append (_abd ._fcab .BandFmts .BandFmt ,_ffg );};};func (_cd BarChart )AddAxis (axis Axis ){_fga :=_a .NewCT_UnsignedInt ();_fga .ValAttr =axis .AxisID ();_cd ._dfd .AxId =append (_cd ._dfd .AxId ,_fga );};

// Properties returns the Bubble chart series shape properties.
func (_cgb BubbleChartSeries )Properties ()_f .ShapeProperties {if _cgb ._gfe .SpPr ==nil {_cgb ._gfe .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_cgb ._gfe .SpPr );};func (_caa DataLabels )SetShowLeaderLines (b bool ){_caa .ensureChoice ();_caa ._dca .Choice .ShowLeaderLines =_a .NewCT_Boolean ();_caa ._dca .Choice .ShowLeaderLines .ValAttr =_cf .Bool (b );};

// Properties returns the line chart series shape properties.
func (_baag SurfaceChartSeries )Properties ()_f .ShapeProperties {if _baag ._cacg .SpPr ==nil {_baag ._cacg .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_baag ._cacg .SpPr );};

// X returns the inner wrapped XML type.
func (_b Area3DChart )X ()*_a .CT_Area3DChart {return _b ._gd };

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_fcab *_a .CT_SurfaceChart ;};

// Labels returns the data label properties.
func (_dcbd LineChartSeries )Labels ()DataLabels {if _dcbd ._aabc .DLbls ==nil {_dcbd ._aabc .DLbls =_a .NewCT_DLbls ();};return MakeDataLabels (_dcbd ._aabc .DLbls );};

// AddSeries adds a default series to an area chart.
func (_cc AreaChart )AddSeries ()AreaChartSeries {_gf :=_cc .nextColor (len (_cc ._da .Ser ));_gb :=_a .NewCT_AreaSer ();_cc ._da .Ser =append (_cc ._da .Ser ,_gb );_gb .Idx .ValAttr =uint32 (len (_cc ._da .Ser )-1);_gb .Order .ValAttr =uint32 (len (_cc ._da .Ser )-1);_gbe :=AreaChartSeries {_gb };_gbe .InitializeDefaults ();_gbe .Properties ().SetSolidFill (_gf );return _gbe ;};

// AddSeries adds a default series to a Bubble chart.
func (_bbg BubbleChart )AddSeries ()BubbleChartSeries {_eae :=_bbg .nextColor (len (_bbg ._aga .Ser ));_agc :=_a .NewCT_BubbleSer ();_bbg ._aga .Ser =append (_bbg ._aga .Ser ,_agc );_agc .Idx .ValAttr =uint32 (len (_bbg ._aga .Ser )-1);_agc .Order .ValAttr =uint32 (len (_bbg ._aga .Ser )-1);_adb :=BubbleChartSeries {_agc };_adb .InitializeDefaults ();_adb .Properties ().SetSolidFill (_eae );return _adb ;};

// AddValueAxis adds a value axis to the chart.
func (_agb Chart )AddValueAxis ()ValueAxis {_bbgc :=_a .NewCT_ValAx ();if _agb ._egg .Chart .PlotArea .CChoice ==nil {_agb ._egg .Chart .PlotArea .CChoice =_a .NewCT_PlotAreaChoice1 ();};_bbgc .AxId =_a .NewCT_UnsignedInt ();_bbgc .AxId .ValAttr =0x7FFFFFFF&_ad .Uint32 ();_agb ._egg .Chart .PlotArea .CChoice .ValAx =append (_agb ._egg .Chart .PlotArea .CChoice .ValAx ,_bbgc );_bbgc .Delete =_a .NewCT_Boolean ();_bbgc .Delete .ValAttr =_cf .Bool (false );_bbgc .Scaling =_a .NewCT_Scaling ();_bbgc .Scaling .Orientation =_a .NewCT_Orientation ();_bbgc .Scaling .Orientation .ValAttr =_a .ST_OrientationMinMax ;_bbgc .Choice =&_a .EG_AxSharedChoice {};_bbgc .Choice .Crosses =_a .NewCT_Crosses ();_bbgc .Choice .Crosses .ValAttr =_a .ST_CrossesAutoZero ;_bbgc .CrossBetween =_a .NewCT_CrossBetween ();_bbgc .CrossBetween .ValAttr =_a .ST_CrossBetweenBetween ;_aag :=MakeValueAxis (_bbgc );_aag .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_cg .LightGray );_aag .SetMajorTickMark (_a .ST_TickMarkOut );_aag .SetMinorTickMark (_a .ST_TickMarkIn );_aag .SetTickLabelPosition (_a .ST_TickLblPosNextTo );_aag .Properties ().LineProperties ().SetSolidFill (_cg .Black );_aag .SetPosition (_a .ST_AxPosL );return _aag ;};

// InitializeDefaults the bar chart to its defaults
func (_gbbe PieOfPieChart )InitializeDefaults (){_gbbe ._geg .VaryColors =_a .NewCT_Boolean ();_gbbe ._geg .VaryColors .ValAttr =_cf .Bool (true );_gbbe .SetType (_a .ST_OfPieTypePie );_gbbe ._geg .SecondPieSize =_a .NewCT_SecondPieSize ();_gbbe ._geg .SecondPieSize .ValAttr =&_a .ST_SecondPieSize {};_gbbe ._geg .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_cf .Uint16 (75);_gggd :=_a .NewCT_ChartLines ();_gggd .SpPr =_d .NewCT_ShapeProperties ();_eab :=_f .MakeShapeProperties (_gggd .SpPr );_eab .LineProperties ().SetSolidFill (_cg .Auto );_gbbe ._geg .SerLines =append (_gbbe ._geg .SerLines ,_gggd );};func MakeCategoryAxis (x *_a .CT_CatAx )CategoryAxis {return CategoryAxis {x }};

// InitializeDefaults the bar chart to its defaults
func (_e Area3DChart )InitializeDefaults (){};

// InitializeDefaults initializes an Radar series to the default values.
func (_feac RadarChartSeries )InitializeDefaults (){};func MakeDataLabels (x *_a .CT_DLbls )DataLabels {return DataLabels {x }};func (_ggd DataLabels )SetPosition (p _a .ST_DLblPos ){_ggd .ensureChoice ();_ggd ._dca .Choice .DLblPos =_a .NewCT_DLblPos ();_ggd ._dca .Choice .DLblPos .ValAttr =p ;};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_aga *_a .CT_BubbleChart ;};

// AddAxis adds an axis to a Surface chart.
func (_fgad Surface3DChart )AddAxis (axis Axis ){_ebgf :=_a .NewCT_UnsignedInt ();_ebgf .ValAttr =axis .AxisID ();_fgad ._bfcb .AxId =append (_fgad ._bfcb .AxId ,_ebgf );};

// InitializeDefaults the bar chart to its defaults
func (_cfb BarChart )InitializeDefaults (){_cfb .SetDirection (_a .ST_BarDirCol )};func (_cfba ValueAxis )Properties ()_f .ShapeProperties {if _cfba ._aabbf .SpPr ==nil {_cfba ._aabbf .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_cfba ._aabbf .SpPr );};

// SetIndex sets the index of the series
func (_aafa LineChartSeries )SetIndex (idx uint32 ){_aafa ._aabc .Idx .ValAttr =idx };

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_dcf *_a .CT_DoughnutChart ;};

// X returns the inner wrapped XML type.
func (_bc BubbleChartSeries )X ()*_a .CT_BubbleSer {return _bc ._gfe };

// SetText sets the series text.
func (_bbc BubbleChartSeries )SetText (s string ){_bbc ._gfe .Tx =_a .NewCT_SerTx ();_bbc ._gfe .Tx .Choice .V =&s ;};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_af NumberDataSource )CreateEmptyNumberCache (){_af .ensureChoice ();if _af ._edd .Choice .NumRef ==nil {_af ._edd .Choice .NumRef =_a .NewCT_NumRef ();};_af ._edd .Choice .NumLit =nil ;_af ._edd .Choice .NumRef .NumCache =_a .NewCT_NumData ();_af ._edd .Choice .NumRef .NumCache .PtCount =_a .NewCT_UnsignedInt ();_af ._edd .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// X returns the inner wrapped XML type.
func (_efad RadarChartSeries )X ()*_a .CT_RadarSer {return _efad ._gfbc };

// Properties returns the line chart series shape properties.
func (_eec LineChartSeries )Properties ()_f .ShapeProperties {if _eec ._aabc .SpPr ==nil {_eec ._aabc .SpPr =_d .NewCT_ShapeProperties ();};return _f .MakeShapeProperties (_eec ._aabc .SpPr );};

// Values returns the value data source.
func (_adca RadarChartSeries )Values ()NumberDataSource {if _adca ._gfbc .Val ==nil {_adca ._gfbc .Val =_a .NewCT_NumDataSource ();};return MakeNumberDataSource (_adca ._gfbc .Val );};type ValueAxis struct{_aabbf *_a .CT_ValAx };

// X returns the inner wrapped XML type.
func (_fef BarChartSeries )X ()*_a .CT_BarSer {return _fef ._gbb };type chartBase struct{};func (_gdgg SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gdgg ._cacg .Cat ==nil {_gdgg ._cacg .Cat =_a .NewCT_AxDataSource ();};return MakeAxisDataSource (_gdgg ._cacg .Cat );};

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_cfdb *_a .CT_Pie3DChart ;};