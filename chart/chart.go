//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package chart ;import (_cf "fmt";_g "github.com/unidoc/unioffice";_ad "github.com/unidoc/unioffice/color";_b "github.com/unidoc/unioffice/drawing";_a "github.com/unidoc/unioffice/measurement";_ac "github.com/unidoc/unioffice/schema/soo/dml";_d "github.com/unidoc/unioffice/schema/soo/dml/chart";_cfc "math/rand";);

// AddDateAxis adds a value axis to the chart.
func (_dae Chart )AddDateAxis ()DateAxis {_cee :=_d .NewCT_DateAx ();if _dae ._fb .Chart .PlotArea .CChoice ==nil {_dae ._fb .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_cee .AxId =_d .NewCT_UnsignedInt ();_cee .AxId .ValAttr =0x7FFFFFFF&_cfc .Uint32 ();_dae ._fb .Chart .PlotArea .CChoice .DateAx =append (_dae ._fb .Chart .PlotArea .CChoice .DateAx ,_cee );_cee .Delete =_d .NewCT_Boolean ();_cee .Delete .ValAttr =_g .Bool (false );_cee .Scaling =_d .NewCT_Scaling ();_cee .Scaling .Orientation =_d .NewCT_Orientation ();_cee .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_cee .Choice =&_d .EG_AxSharedChoice {};_cee .Choice .Crosses =_d .NewCT_Crosses ();_cee .Choice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;_faf :=DateAxis {_cee };_faf .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ad .LightGray );_faf .SetMajorTickMark (_d .ST_TickMarkOut );_faf .SetMinorTickMark (_d .ST_TickMarkIn );_faf .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_faf .Properties ().LineProperties ().SetSolidFill (_ad .Black );_faf .SetPosition (_d .ST_AxPosL );return _faf ;};func (_ca AreaChart )AddAxis (axis Axis ){_bda :=_d .NewCT_UnsignedInt ();_bda .ValAttr =axis .AxisID ();_ca ._bd .AxId =append (_ca ._bd .AxId ,_bda );};func (_df CategoryAxis )InitializeDefaults (){_df .SetPosition (_d .ST_AxPosB );_df .SetMajorTickMark (_d .ST_TickMarkOut );_df .SetMinorTickMark (_d .ST_TickMarkIn );_df .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_df .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ad .LightGray );_df .Properties ().LineProperties ().SetSolidFill (_ad .Black );};

// BubbleChartSeries is a series to be used on a Bubble chart.
type BubbleChartSeries struct{_cfbc *_d .CT_BubbleSer };

// AddAxis adds an axis to a Surface chart.
func (_ddfg SurfaceChart )AddAxis (axis Axis ){_ecb :=_d .NewCT_UnsignedInt ();_ecb .ValAttr =axis .AxisID ();_ddfg ._dac .AxId =append (_ddfg ._dac .AxId ,_ecb );};func (_feg ScatterChartSeries )InitializeDefaults (){_feg .Properties ().LineProperties ().SetNoFill ();_feg .Marker ().SetSymbol (_d .ST_MarkerStyleAuto );_feg .Labels ().SetShowLegendKey (false );_feg .Labels ().SetShowValue (true );_feg .Labels ().SetShowPercent (false );_feg .Labels ().SetShowCategoryName (false );_feg .Labels ().SetShowSeriesName (false );_feg .Labels ().SetShowLeaderLines (false );};

// BubbleChart is a 2D Bubble chart.
type BubbleChart struct{chartBase ;_gab *_d .CT_BubbleChart ;};

// X returns the inner wrapped XML type.
func (_ebcb LineChart )X ()*_d .CT_LineChart {return _ebcb ._cecd };type Title struct{_bdeb *_d .CT_Title };

// SetText sets the series text.
func (_dcg BarChartSeries )SetText (s string ){_dcg ._cgc .Tx =_d .NewCT_SerTx ();_dcg ._cgc .Tx .Choice .V =&s ;};func (_adb CategoryAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_adb ._aed .MajorTickMark =nil ;}else {_adb ._aed .MajorTickMark =_d .NewCT_TickMark ();_adb ._aed .MajorTickMark .ValAttr =m ;};};func (_dagg SurfaceChartSeries )InitializeDefaults (){_dagg .Properties ().LineProperties ().SetWidth (1*_a .Point );_dagg .Properties ().LineProperties ().SetSolidFill (_ad .Black );_dagg .Properties ().LineProperties ().SetJoin (_b .LineJoinRound );};

// AddSeries adds a default series to a line chart.
func (_edc LineChart )AddSeries ()LineChartSeries {_bee :=_edc .nextColor (len (_edc ._cecd .Ser ));_caab :=_d .NewCT_LineSer ();_edc ._cecd .Ser =append (_edc ._cecd .Ser ,_caab );_caab .Idx .ValAttr =uint32 (len (_edc ._cecd .Ser )-1);_caab .Order .ValAttr =uint32 (len (_edc ._cecd .Ser )-1);_aaf :=LineChartSeries {_caab };_aaf .InitializeDefaults ();_aaf .Properties ().LineProperties ().SetSolidFill (_bee );return _aaf ;};func (_eae Legend )SetOverlay (b bool ){_eae ._gbbg .Overlay =_d .NewCT_Boolean ();_eae ._gbbg .Overlay .ValAttr =_g .Bool (b );};func (_adea NumberDataSource )SetReference (s string ){_adea .ensureChoice ();if _adea ._fee .Choice .NumRef ==nil {_adea ._fee .Choice .NumRef =_d .NewCT_NumRef ();};_adea ._fee .Choice .NumRef .F =s ;};

// InitializeDefaults the bar chart to its defaults
func (_bb Area3DChart )InitializeDefaults (){};func (_ddb DataLabels )SetShowLeaderLines (b bool ){_ddb .ensureChoice ();_ddb ._dfd .Choice .ShowLeaderLines =_d .NewCT_Boolean ();_ddb ._dfd .Choice .ShowLeaderLines .ValAttr =_g .Bool (b );};

// SetOrder sets the order of the series
func (_edaa LineChartSeries )SetOrder (idx uint32 ){_edaa ._bdfg .Order .ValAttr =idx };func (_dbf CategoryAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_dbf ._aed .MinorTickMark =nil ;}else {_dbf ._aed .MinorTickMark =_d .NewCT_TickMark ();_dbf ._aed .MinorTickMark .ValAttr =m ;};};func (_acg LineChartSeries )InitializeDefaults (){_acg .Properties ().LineProperties ().SetWidth (1*_a .Point );_acg .Properties ().LineProperties ().SetSolidFill (_ad .Black );_acg .Properties ().LineProperties ().SetJoin (_b .LineJoinRound );_acg .Marker ().SetSymbol (_d .ST_MarkerStyleNone );_acg .Labels ().SetShowLegendKey (false );_acg .Labels ().SetShowValue (false );_acg .Labels ().SetShowPercent (false );_acg .Labels ().SetShowCategoryName (false );_acg .Labels ().SetShowSeriesName (false );_acg .Labels ().SetShowLeaderLines (false );};func MakeDataLabels (x *_d .CT_DLbls )DataLabels {return DataLabels {x }};

// Axis is the interface implemented by different axes when assigning to a
// chart.
type Axis interface{AxisID ()uint32 ;};

// PieChart is a Pie chart.
type PieChart struct{chartBase ;_gbe *_d .CT_PieChart ;};

// InitializeDefaults the bar chart to its defaults
func (_bde Bar3DChart )InitializeDefaults (){_bde .SetDirection (_d .ST_BarDirCol )};

// X returns the inner wrapped XML type.
func (_fcdb RadarChart )X ()*_d .CT_RadarChart {return _fcdb ._dda };func (_acc SurfaceChartSeries )Values ()NumberDataSource {if _acc ._cea .Val ==nil {_acc ._cea .Val =_d .NewCT_NumDataSource ();};_beag :=MakeNumberDataSource (_acc ._cea .Val );_beag .CreateEmptyNumberCache ();return _beag ;};type SurfaceChartSeries struct{_cea *_d .CT_SurfaceSer };

// AddAxis adds an axis to a Scatter chart.
func (_ddaa ScatterChart )AddAxis (axis Axis ){_ebac :=_d .NewCT_UnsignedInt ();_ebac .ValAttr =axis .AxisID ();_ddaa ._geb .AxId =append (_ddaa ._geb .AxId ,_ebac );};func (_cfd BarChart )AddAxis (axis Axis ){_dg :=_d .NewCT_UnsignedInt ();_dg .ValAttr =axis .AxisID ();_cfd ._cfb .AxId =append (_cfd ._cfb .AxId ,_dg );};

// SetIndex sets the index of the series
func (_bga ScatterChartSeries )SetIndex (idx uint32 ){_bga ._fdgd .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_fgc DateAxis )X ()*_d .CT_DateAx {return _fgc ._bag };func (_dag DateAxis )SetPosition (p _d .ST_AxPos ){_dag ._bag .AxPos =_d .NewCT_AxPos ();_dag ._bag .AxPos .ValAttr =p ;};

// Labels returns the data label properties.
func (_ged LineChartSeries )Labels ()DataLabels {if _ged ._bdfg .DLbls ==nil {_ged ._bdfg .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_ged ._bdfg .DLbls );};

// X returns the inner wrapped XML type.
func (_bdg BarChartSeries )X ()*_d .CT_BarSer {return _bdg ._cgc };

// AddPie3DChart adds a new pie chart to a chart.
func (_deb Chart )AddPie3DChart ()Pie3DChart {_gca (_deb ._fb .Chart );_gee :=_d .NewCT_PlotAreaChoice ();_deb ._fb .Chart .PlotArea .Choice =append (_deb ._fb .Chart .PlotArea .Choice ,_gee );_gee .Pie3DChart =_d .NewCT_Pie3DChart ();_dggf :=Pie3DChart {_fce :_gee .Pie3DChart };_dggf .InitializeDefaults ();return _dggf ;};func (_fcgc RadarChart )AddAxis (axis Axis ){_ceee :=_d .NewCT_UnsignedInt ();_ceee .ValAttr =axis .AxisID ();_fcgc ._dda .AxId =append (_fcgc ._dda .AxId ,_ceee );};func (_dgg CategoryAxis )SetCrosses (axis Axis ){_dgg ._aed .Choice =_d .NewEG_AxSharedChoice ();_dgg ._aed .Choice .Crosses =_d .NewCT_Crosses ();_dgg ._aed .Choice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;_dgg ._aed .CrossAx .ValAttr =axis .AxisID ();};

// Order returns the order of the series
func (_fef SurfaceChartSeries )Order ()uint32 {return _fef ._cea .Order .ValAttr };func (_eea NumberDataSource )ensureChoice (){if _eea ._fee .Choice ==nil {_eea ._fee .Choice =_d .NewCT_NumDataSourceChoice ();};};var _fdd =[]_ad .Color {_ad .RGB (0x33,0x66,0xcc),_ad .RGB (0xDC,0x39,0x12),_ad .RGB (0xFF,0x99,0x00),_ad .RGB (0x10,0x96,0x18),_ad .RGB (0x99,0x00,0x99),_ad .RGB (0x3B,0x3E,0xAC),_ad .RGB (0x00,0x99,0xC6),_ad .RGB (0xDD,0x44,0x77),_ad .RGB (0x66,0xAA,0x00),_ad .RGB (0xB8,0x2E,0x2E),_ad .RGB (0x31,0x63,0x95),_ad .RGB (0x99,0x44,0x99),_ad .RGB (0x22,0xAA,0x99),_ad .RGB (0xAA,0xAA,0x11),_ad .RGB (0x66,0x33,0xCC),_ad .RGB (0xE6,0x73,0x00),_ad .RGB (0x8B,0x07,0x07),_ad .RGB (0x32,0x92,0x62),_ad .RGB (0x55,0x74,0xA6),_ad .RGB (0x3B,0x3E,0xAC)};

// Order returns the order of the series
func (_daed LineChartSeries )Order ()uint32 {return _daed ._bdfg .Order .ValAttr };func (_dbc CategoryAxis )MajorGridLines ()GridLines {if _dbc ._aed .MajorGridlines ==nil {_dbc ._aed .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_dbc ._aed .MajorGridlines };};

// X returns the inner wrapped XML type.
func (_cdc SurfaceChartSeries )X ()*_d .CT_SurfaceSer {return _cdc ._cea };func (_fegb ValueAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_fegb ._daab .MajorTickMark =nil ;}else {_fegb ._daab .MajorTickMark =_d .NewCT_TickMark ();_fegb ._daab .MajorTickMark .ValAttr =m ;};};

// X returns the inner wrapped XML type.
func (_afg DoughnutChart )X ()*_d .CT_DoughnutChart {return _afg ._gbd };

// AddBar3DChart adds a new 3D bar chart to a chart.
func (_ded Chart )AddBar3DChart ()Bar3DChart {_gca (_ded ._fb .Chart );_abaf :=_d .NewCT_PlotAreaChoice ();_ded ._fb .Chart .PlotArea .Choice =append (_ded ._fb .Chart .PlotArea .Choice ,_abaf );_abaf .Bar3DChart =_d .NewCT_Bar3DChart ();_abaf .Bar3DChart .Grouping =_d .NewCT_BarGrouping ();_abaf .Bar3DChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_dbb :=Bar3DChart {_fc :_abaf .Bar3DChart };_dbb .InitializeDefaults ();return _dbb ;};

// SetIndex sets the index of the series
func (_gea LineChartSeries )SetIndex (idx uint32 ){_gea ._bdfg .Idx .ValAttr =idx };

// X returns the inner wrapped XML type.
func (_egg ScatterChart )X ()*_d .CT_ScatterChart {return _egg ._geb };func MakeCategoryAxis (x *_d .CT_CatAx )CategoryAxis {return CategoryAxis {x }};func (_dee BubbleChart )AddAxis (axis Axis ){_eba :=_d .NewCT_UnsignedInt ();_eba .ValAttr =axis .AxisID ();_dee ._gab .AxId =append (_dee ._gab .AxId ,_eba );};

// Properties returns the bar chart series shape properties.
func (_dca RadarChartSeries )Properties ()_b .ShapeProperties {if _dca ._gefd .SpPr ==nil {_dca ._gefd .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_dca ._gefd .SpPr );};

// AddSeries adds a default series to a Surface chart.
func (_acac SurfaceChart )AddSeries ()SurfaceChartSeries {_adee :=_acac .nextColor (len (_acac ._dac .Ser ));_bec :=_d .NewCT_SurfaceSer ();_acac ._dac .Ser =append (_acac ._dac .Ser ,_bec );_bec .Idx .ValAttr =uint32 (len (_acac ._dac .Ser )-1);_bec .Order .ValAttr =uint32 (len (_acac ._dac .Ser )-1);_dbcb :=SurfaceChartSeries {_bec };_dbcb .InitializeDefaults ();_dbcb .Properties ().LineProperties ().SetSolidFill (_adee );return _dbcb ;};

// X returns the inner wrapped XML type.
func (_ab AreaChart )X ()*_d .CT_AreaChart {return _ab ._bd };

// X returns the inner wrapped XML type.
func (_ddfga ValueAxis )X ()*_d .CT_ValAx {return _ddfga ._daab };type DataLabels struct{_dfd *_d .CT_DLbls };func (_afb Legend )InitializeDefaults (){_afb .SetPosition (_d .ST_LegendPosR );_afb .SetOverlay (false );_afb .Properties ().SetNoFill ();_afb .Properties ().LineProperties ().SetNoFill ();};

// Values returns the value data source.
func (_beg BarChartSeries )Values ()NumberDataSource {if _beg ._cgc .Val ==nil {_beg ._cgc .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_beg ._cgc .Val );};

// AddSeries adds a default series to an Pie chart.
func (_ccg PieOfPieChart )AddSeries ()PieChartSeries {_abbe :=_d .NewCT_PieSer ();_ccg ._gce .Ser =append (_ccg ._gce .Ser ,_abbe );_abbe .Idx .ValAttr =uint32 (len (_ccg ._gce .Ser )-1);_abbe .Order .ValAttr =uint32 (len (_ccg ._gce .Ser )-1);_gba :=PieChartSeries {_abbe };_gba .InitializeDefaults ();return _gba ;};

// InitializeDefaults initializes an Radar series to the default values.
func (_acdf RadarChartSeries )InitializeDefaults (){};

// Index returns the index of the series
func (_bab LineChartSeries )Index ()uint32 {return _bab ._bdfg .Idx .ValAttr };func MakeNumberDataSource (x *_d .CT_NumDataSource )NumberDataSource {return NumberDataSource {x }};

// Properties returns the line chart series shape properties.
func (_ecd LineChartSeries )Properties ()_b .ShapeProperties {if _ecd ._bdfg .SpPr ==nil {_ecd ._bdfg .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_ecd ._bdfg .SpPr );};

// InitializeDefaults initializes a bar chart series to the default values.
func (_ba BarChartSeries )InitializeDefaults (){};

// SetOrder sets the order of the series
func (_dcbe SurfaceChartSeries )SetOrder (idx uint32 ){_dcbe ._cea .Order .ValAttr =idx };func (_fbde StockChart )AddAxis (axis Axis ){_aca :=_d .NewCT_UnsignedInt ();_aca .ValAttr =axis .AxisID ();_fbde ._cbdc .AxId =append (_fbde ._cbdc .AxId ,_aca );};

// SetText sets the series text
func (_aff LineChartSeries )SetText (s string ){_aff ._bdfg .Tx =_d .NewCT_SerTx ();_aff ._bdfg .Tx .Choice .V =&s ;};func (_adag Marker )SetSymbol (s _d .ST_MarkerStyle ){if s ==_d .ST_MarkerStyleUnset {_adag ._fagg .Symbol =nil ;}else {_adag ._fagg .Symbol =_d .NewCT_MarkerStyle ();_adag ._fagg .Symbol .ValAttr =s ;};};

// AddLegend adds a legend to a chart, replacing any existing legend.
func (_gff Chart )AddLegend ()Legend {_gff ._fb .Chart .Legend =_d .NewCT_Legend ();_aea :=MakeLegend (_gff ._fb .Chart .Legend );_aea .InitializeDefaults ();return _aea ;};

// AddSeries adds a default series to a bar chart.
func (_ga Bar3DChart )AddSeries ()BarChartSeries {_ggc :=_ga .nextColor (len (_ga ._fc .Ser ));_be :=_d .NewCT_BarSer ();_ga ._fc .Ser =append (_ga ._fc .Ser ,_be );_be .Idx .ValAttr =uint32 (len (_ga ._fc .Ser )-1);_be .Order .ValAttr =uint32 (len (_ga ._fc .Ser )-1);_adg :=BarChartSeries {_be };_adg .InitializeDefaults ();_adg .Properties ().SetSolidFill (_ggc );return _adg ;};

// AddSurface3DChart adds a new 3D surface chart to a chart.
func (_fac Chart )AddSurface3DChart ()Surface3DChart {_gbg :=_d .NewCT_PlotAreaChoice ();_fac ._fb .Chart .PlotArea .Choice =append (_fac ._fb .Chart .PlotArea .Choice ,_gbg );_gbg .Surface3DChart =_d .NewCT_Surface3DChart ();_gca (_fac ._fb .Chart );_bed :=Surface3DChart {_afa :_gbg .Surface3DChart };_bed .InitializeDefaults ();return _bed ;};func (_fdgdf ValueAxis )SetPosition (p _d .ST_AxPos ){_fdgdf ._daab .AxPos =_d .NewCT_AxPos ();_fdgdf ._daab .AxPos .ValAttr =p ;};

// X returns the inner wrapped XML type.
func (_ag Bar3DChart )X ()*_d .CT_Bar3DChart {return _ag ._fc };

// AddBubbleChart adds a new bubble chart.
func (_cce Chart )AddBubbleChart ()BubbleChart {_cfce :=_d .NewCT_PlotAreaChoice ();_cce ._fb .Chart .PlotArea .Choice =append (_cce ._fb .Chart .PlotArea .Choice ,_cfce );_cfce .BubbleChart =_d .NewCT_BubbleChart ();_gbgb :=BubbleChart {_gab :_cfce .BubbleChart };_gbgb .InitializeDefaults ();return _gbgb ;};func (_cae SeriesAxis )SetCrosses (axis Axis ){_cae ._ggbb .CrossAx .ValAttr =axis .AxisID ()};

// AddSeries adds a default series to an Pie3D chart.
func (_bca Pie3DChart )AddSeries ()PieChartSeries {_cgb :=_d .NewCT_PieSer ();_bca ._fce .Ser =append (_bca ._fce .Ser ,_cgb );_cgb .Idx .ValAttr =uint32 (len (_bca ._fce .Ser )-1);_cgb .Order .ValAttr =uint32 (len (_bca ._fce .Ser )-1);_eeg :=PieChartSeries {_cgb };_eeg .InitializeDefaults ();return _eeg ;};type GridLines struct{_def *_d .CT_ChartLines };

// X returns the inner wrapped XML type.
func (_cfbcf Legend )X ()*_d .CT_Legend {return _cfbcf ._gbbg };func (_fda CategoryAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_fda ._aed .TickLblPos =nil ;}else {_fda ._aed .TickLblPos =_d .NewCT_TickLblPos ();_fda ._aed .TickLblPos .ValAttr =p ;};};

// AddRadarChart adds a new radar chart to a chart.
func (_gbb Chart )AddRadarChart ()RadarChart {_fae :=_d .NewCT_PlotAreaChoice ();_gbb ._fb .Chart .PlotArea .Choice =append (_gbb ._fb .Chart .PlotArea .Choice ,_fae );_fae .RadarChart =_d .NewCT_RadarChart ();_agc :=RadarChart {_dda :_fae .RadarChart };_agc .InitializeDefaults ();return _agc ;};type chartBase struct{};

// SetValues sets values directly on a source.
func (_cbbf NumberDataSource )SetValues (v []float64 ){_cbbf .ensureChoice ();_cbbf ._fee .Choice .NumRef =nil ;_cbbf ._fee .Choice .NumLit =_d .NewCT_NumData ();_cbbf ._fee .Choice .NumLit .PtCount =_d .NewCT_UnsignedInt ();_cbbf ._fee .Choice .NumLit .PtCount .ValAttr =uint32 (len (v ));for _gcf ,_eaf :=range v {_cbbf ._fee .Choice .NumLit .Pt =append (_cbbf ._fee .Choice .NumLit .Pt ,&_d .CT_NumVal {IdxAttr :uint32 (_gcf ),V :_cf .Sprintf ("\u0025\u0067",_eaf )});};};func (_ec CategoryAxis )AxisID ()uint32 {return _ec ._aed .AxId .ValAttr };

// InitializeDefaults initializes an area series to the default values.
func (_cd AreaChartSeries )InitializeDefaults (){};func (_adggc ValueAxis )MajorGridLines ()GridLines {if _adggc ._daab .MajorGridlines ==nil {_adggc ._daab .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_adggc ._daab .MajorGridlines };};func (_fcde DataLabels )SetShowLegendKey (b bool ){_fcde .ensureChoice ();_fcde ._dfd .Choice .ShowLegendKey =_d .NewCT_Boolean ();_fcde ._dfd .Choice .ShowLegendKey .ValAttr =_g .Bool (b );};func (_ddebd SeriesAxis )AxisID ()uint32 {return _ddebd ._ggbb .AxId .ValAttr };

// SurfaceChart is a 3D surface chart, viewed from the top-down.
type SurfaceChart struct{chartBase ;_dac *_d .CT_SurfaceChart ;};

// X returns the inner wrapped XML type.
func (_caa Chart )X ()*_d .ChartSpace {return _caa ._fb };

// AddAxis adds an axis to a line chart.
func (_cfg LineChart )AddAxis (axis Axis ){_dgb :=_d .NewCT_UnsignedInt ();_dgb .ValAttr =axis .AxisID ();_cfg ._cecd .AxId =append (_cfg ._cecd .AxId ,_dgb );};

// SetExplosion sets the value that the segements of the pie are 'exploded' by
func (_adgg PieChartSeries )SetExplosion (v uint32 ){_adgg ._cfde .Explosion =_d .NewCT_UnsignedInt ();_adgg ._cfde .Explosion .ValAttr =v ;};func (_fdge SeriesAxis )InitializeDefaults (){};func (_bedf chartBase )nextColor (_ddeb int )_ad .Color {return _fdd [_ddeb %len (_fdd )]};func MakeLegend (l *_d .CT_Legend )Legend {return Legend {l }};

// X returns the inner wrapped XML type.
func (_bgeb Marker )X ()*_d .CT_Marker {return _bgeb ._fagg };func (_abg DateAxis )SetMajorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_abg ._bag .MajorTickMark =nil ;}else {_abg ._bag .MajorTickMark =_d .NewCT_TickMark ();_abg ._bag .MajorTickMark .ValAttr =m ;};};var NullAxis Axis =nullAxis (0);func (_bgf DateAxis )MajorGridLines ()GridLines {if _bgf ._bag .MajorGridlines ==nil {_bgf ._bag .MajorGridlines =_d .NewCT_ChartLines ();};return GridLines {_bgf ._bag .MajorGridlines };};type Legend struct{_gbbg *_d .CT_Legend };func (_ega DataLabels )SetShowValue (b bool ){_ega .ensureChoice ();_ega ._dfd .Choice .ShowVal =_d .NewCT_Boolean ();_ega ._dfd .Choice .ShowVal .ValAttr =_g .Bool (b );};

// X returns the inner wrapped XML type.
func (_edd SurfaceChart )X ()*_d .CT_SurfaceChart {return _edd ._dac };type LineChart struct{chartBase ;_cecd *_d .CT_LineChart ;};

// InitializeDefaults the bar chart to its defaults
func (_afc PieChart )InitializeDefaults (){_afc ._gbe .VaryColors =_d .NewCT_Boolean ();_afc ._gbe .VaryColors .ValAttr =_g .Bool (true );};func (_ddg LineChartSeries )SetSmooth (b bool ){_ddg ._bdfg .Smooth =_d .NewCT_Boolean ();_ddg ._bdfg .Smooth .ValAttr =&b ;};

// AddBarChart adds a new bar chart to a chart.
func (_ebg Chart )AddBarChart ()BarChart {_bdgf :=_d .NewCT_PlotAreaChoice ();_ebg ._fb .Chart .PlotArea .Choice =append (_ebg ._fb .Chart .PlotArea .Choice ,_bdgf );_bdgf .BarChart =_d .NewCT_BarChart ();_bdgf .BarChart .Grouping =_d .NewCT_BarGrouping ();_bdgf .BarChart .Grouping .ValAttr =_d .ST_BarGroupingStandard ;_fab :=BarChart {_cfb :_bdgf .BarChart };_fab .InitializeDefaults ();return _fab ;};

// PieChartSeries is a series to be used on an Pie chart.
type PieChartSeries struct{_cfde *_d .CT_PieSer };

// Properties returns the bar chart series shape properties.
func (_db BarChartSeries )Properties ()_b .ShapeProperties {if _db ._cgc .SpPr ==nil {_db ._cgc .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_db ._cgc .SpPr );};func (_dcf ValueAxis )Properties ()_b .ShapeProperties {if _dcf ._daab .SpPr ==nil {_dcf ._daab .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_dcf ._daab .SpPr );};func (_bgcc DateAxis )SetCrosses (axis Axis ){_bgcc ._bag .CrossAx .ValAttr =axis .AxisID ()};func (_febe Marker )SetSize (sz uint8 ){_febe ._fagg .Size =_d .NewCT_MarkerSize ();_febe ._fagg .Size .ValAttr =&sz ;};

// AddStockChart adds a new stock chart.
func (_bgc Chart )AddStockChart ()StockChart {_cb :=_d .NewCT_PlotAreaChoice ();_bgc ._fb .Chart .PlotArea .Choice =append (_bgc ._fb .Chart .PlotArea .Choice ,_cb );_cb .StockChart =_d .NewCT_StockChart ();_gb :=StockChart {_cbdc :_cb .StockChart };_gb .InitializeDefaults ();return _gb ;};

// BarChart is a 2D bar chart.
type BarChart struct{chartBase ;_cfb *_d .CT_BarChart ;};

// SetNumberReference is used to set the source data to a range of cells containing
// numbers.
func (_ddc CategoryAxisDataSource )SetNumberReference (s string ){_ddc ._cfa .Choice =_d .NewCT_AxDataSourceChoice ();_ddc ._cfa .Choice .NumRef =_d .NewCT_NumRef ();_ddc ._cfa .Choice .NumRef .F =s ;};func (_aa DataLabels )SetShowPercent (b bool ){_aa .ensureChoice ();_aa ._dfd .Choice .ShowPercent =_d .NewCT_Boolean ();_aa ._dfd .Choice .ShowPercent .ValAttr =_g .Bool (b );};

// InitializeDefaults initializes a Bubble chart series to the default values.
func (_bba BubbleChartSeries )InitializeDefaults (){};

// AddLineChart adds a new line chart to a chart.
func (_fad Chart )AddLineChart ()LineChart {_ebe :=_d .NewCT_PlotAreaChoice ();_fad ._fb .Chart .PlotArea .Choice =append (_fad ._fb .Chart .PlotArea .Choice ,_ebe );_ebe .LineChart =_d .NewCT_LineChart ();_ebe .LineChart .Grouping =_d .NewCT_Grouping ();_ebe .LineChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return LineChart {_cecd :_ebe .LineChart };};

// X returns the inner wrapped XML type.
func (_eab GridLines )X ()*_d .CT_ChartLines {return _eab ._def };

// InitializeDefaults the bar chart to its defaults
func (_cad DoughnutChart )InitializeDefaults (){_cad ._gbd .VaryColors =_d .NewCT_Boolean ();_cad ._gbd .VaryColors .ValAttr =_g .Bool (true );_cad ._gbd .HoleSize =_d .NewCT_HoleSize ();_cad ._gbd .HoleSize .ValAttr =&_d .ST_HoleSize {};_cad ._gbd .HoleSize .ValAttr .ST_HoleSizeUByte =_g .Uint8 (50);};func (_bcc DataLabels )SetShowCategoryName (b bool ){_bcc .ensureChoice ();_bcc ._dfd .Choice .ShowCatName =_d .NewCT_Boolean ();_bcc ._dfd .Choice .ShowCatName .ValAttr =_g .Bool (b );};

// CategoryAxis returns the category data source.
func (_eg AreaChartSeries )CategoryAxis ()CategoryAxisDataSource {if _eg ._ddf .Cat ==nil {_eg ._ddf .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_eg ._ddf .Cat );};

// X returns the inner wrapped XML type.
func (_dbfc Pie3DChart )X ()*_d .CT_Pie3DChart {return _dbfc ._fce };func (_aeaf SurfaceChart )InitializeDefaults (){_aeaf ._dac .Wireframe =_d .NewCT_Boolean ();_aeaf ._dac .Wireframe .ValAttr =_g .Bool (false );_aeaf ._dac .BandFmts =_d .NewCT_BandFmts ();for _fgbc :=0;_fgbc < 15;_fgbc ++{_gaa :=_d .NewCT_BandFmt ();_gaa .Idx .ValAttr =uint32 (_fgbc );_gaa .SpPr =_ac .NewCT_ShapeProperties ();_aag :=_b .MakeShapeProperties (_gaa .SpPr );_aag .SetSolidFill (_aeaf .nextColor (_fgbc ));_aeaf ._dac .BandFmts .BandFmt =append (_aeaf ._dac .BandFmts .BandFmt ,_gaa );};};

// SetText sets the series text
func (_ece SurfaceChartSeries )SetText (s string ){_ece ._cea .Tx =_d .NewCT_SerTx ();_ece ._cea .Tx .Choice .V =&s ;};

// Values returns the value data source.
func (_ccd PieChartSeries )Values ()NumberDataSource {if _ccd ._cfde .Val ==nil {_ccd ._cfde .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ccd ._cfde .Val );};

// RadarChartSeries is a series to be used on an Radar chart.
type RadarChartSeries struct{_gefd *_d .CT_RadarSer };func (_eca DateAxis )Properties ()_b .ShapeProperties {if _eca ._bag .SpPr ==nil {_eca ._bag .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_eca ._bag .SpPr );};func (_dfb DateAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_dfb ._bag .TickLblPos =nil ;}else {_dfb ._bag .TickLblPos =_d .NewCT_TickLblPos ();_dfb ._bag .TickLblPos .ValAttr =p ;};};

// SetText sets the series text.
func (_fabf RadarChartSeries )SetText (s string ){_fabf ._gefd .Tx =_d .NewCT_SerTx ();_fabf ._gefd .Tx .Choice .V =&s ;};func MakeTitle (x *_d .CT_Title )Title {return Title {x }};

// CreateEmptyNumberCache creates an empty number cache, which is used sometimes
// to increase file format compatibility.  It should actually contain the
// computed cell data, but just creating an empty one is good enough.
func (_cecf NumberDataSource )CreateEmptyNumberCache (){_cecf .ensureChoice ();if _cecf ._fee .Choice .NumRef ==nil {_cecf ._fee .Choice .NumRef =_d .NewCT_NumRef ();};_cecf ._fee .Choice .NumLit =nil ;_cecf ._fee .Choice .NumRef .NumCache =_d .NewCT_NumData ();_cecf ._fee .Choice .NumRef .NumCache .PtCount =_d .NewCT_UnsignedInt ();_cecf ._fee .Choice .NumRef .NumCache .PtCount .ValAttr =0;};

// Values returns the value data source.
func (_adbb RadarChartSeries )Values ()NumberDataSource {if _adbb ._gefd .Val ==nil {_adbb ._gefd .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_adbb ._gefd .Val );};

// StockChart is a 2D Stock chart.
type StockChart struct{chartBase ;_cbdc *_d .CT_StockChart ;};

// X returns the inner wrapped XML type.
func (_dea ScatterChartSeries )X ()*_d .CT_ScatterSer {return _dea ._fdgd };type DateAxis struct{_bag *_d .CT_DateAx };

// AddArea3DChart adds a new area chart to a chart.
func (_fcf Chart )AddArea3DChart ()Area3DChart {_gca (_fcf ._fb .Chart );_cdb :=_d .NewCT_PlotAreaChoice ();_fcf ._fb .Chart .PlotArea .Choice =append (_fcf ._fb .Chart .PlotArea .Choice ,_cdb );_cdb .Area3DChart =_d .NewCT_Area3DChart ();_ecg :=Area3DChart {_ace :_cdb .Area3DChart };_ecg .InitializeDefaults ();return _ecg ;};

// Order returns the order of the series
func (_gde ScatterChartSeries )Order ()uint32 {return _gde ._fdgd .Order .ValAttr };type Line3DChart struct{chartBase ;_effg *_d .CT_Line3DChart ;};

// Labels returns the data label properties.
func (_edgc ScatterChartSeries )Labels ()DataLabels {if _edgc ._fdgd .DLbls ==nil {_edgc ._fdgd .DLbls =_d .NewCT_DLbls ();};return MakeDataLabels (_edgc ._fdgd .DLbls );};

// Values returns the bubble size data source.
func (_bcg BubbleChartSeries )BubbleSizes ()NumberDataSource {if _bcg ._cfbc .BubbleSize ==nil {_bcg ._cfbc .BubbleSize =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_bcg ._cfbc .BubbleSize );};

// X returns the inner wrapped XML type.
func (_efad PieOfPieChart )X ()*_d .CT_OfPieChart {return _efad ._gce };func (_deda LineChartSeries )Values ()NumberDataSource {if _deda ._bdfg .Val ==nil {_deda ._bdfg .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_deda ._bdfg .Val );};

// SetHoleSize controls the hole size in the pie chart and is measured in percent.
func (_cff DoughnutChart )SetHoleSize (pct uint8 ){if _cff ._gbd .HoleSize ==nil {_cff ._gbd .HoleSize =_d .NewCT_HoleSize ();};if _cff ._gbd .HoleSize .ValAttr ==nil {_cff ._gbd .HoleSize .ValAttr =&_d .ST_HoleSize {};};_cff ._gbd .HoleSize .ValAttr .ST_HoleSizeUByte =&pct ;};

// Properties returns the bar chart series shape properties.
func (_de AreaChartSeries )Properties ()_b .ShapeProperties {if _de ._ddf .SpPr ==nil {_de ._ddf .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_de ._ddf .SpPr );};

// X returns the inner wrapped XML type.
func (_dfbc RadarChartSeries )X ()*_d .CT_RadarSer {return _dfbc ._gefd };

// InitializeDefaults the bar chart to its defaults
func (_bff Pie3DChart )InitializeDefaults (){_bff ._fce .VaryColors =_d .NewCT_Boolean ();_bff ._fce .VaryColors .ValAttr =_g .Bool (true );};

// X returns the inner wrapped XML type.
func (_baae Surface3DChart )X ()*_d .CT_Surface3DChart {return _baae ._afa };

// ScatterChartSeries is the data series for a scatter chart.
type ScatterChartSeries struct{_fdgd *_d .CT_ScatterSer };

// Properties returns the bar chart series shape properties.
func (_bedd PieChartSeries )Properties ()_b .ShapeProperties {if _bedd ._cfde .SpPr ==nil {_bedd ._cfde .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_bedd ._cfde .SpPr );};

// AddDoughnutChart adds a new doughnut (pie with a hole in the center) chart to a chart.
func (_cgg Chart )AddDoughnutChart ()DoughnutChart {_fbc :=_d .NewCT_PlotAreaChoice ();_cgg ._fb .Chart .PlotArea .Choice =append (_cgg ._fb .Chart .PlotArea .Choice ,_fbc );_fbc .DoughnutChart =_d .NewCT_DoughnutChart ();_cc :=DoughnutChart {_gbd :_fbc .DoughnutChart };_cc .InitializeDefaults ();return _cc ;};

// X returns the inner wrapped XML type.
func (_cgdc SeriesAxis )X ()*_d .CT_SerAx {return _cgdc ._ggbb };

// SetDirection changes the direction of the bar chart (bar or column).
func (_fcd BarChart )SetDirection (d _d .ST_BarDir ){_fcd ._cfb .BarDir .ValAttr =d };

// X returns the inner wrapped XML type.
func (_cfdg BubbleChartSeries )X ()*_d .CT_BubbleSer {return _cfdg ._cfbc };

// AddAxis adds an axis to a line chart.
func (_cggg Line3DChart )AddAxis (axis Axis ){_bbfb :=_d .NewCT_UnsignedInt ();_bbfb .ValAttr =axis .AxisID ();_cggg ._effg .AxId =append (_cggg ._effg .AxId ,_bbfb );};

// X returns the inner wrapped XML type.
func (_bgb StockChart )X ()*_d .CT_StockChart {return _bgb ._cbdc };func (_ccc LineChartSeries )CategoryAxis ()CategoryAxisDataSource {if _ccc ._bdfg .Cat ==nil {_ccc ._bdfg .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_ccc ._bdfg .Cat );};func (_daad DataLabels )SetPosition (p _d .ST_DLblPos ){_daad .ensureChoice ();_daad ._dfd .Choice .DLblPos =_d .NewCT_DLblPos ();_daad ._dfd .Choice .DLblPos .ValAttr =p ;};func (_gdd Title )InitializeDefaults (){_gdd .SetText ("\u0054\u0069\u0074l\u0065");_gdd .RunProperties ().SetSize (16*_a .Point );_gdd .RunProperties ().SetSolidFill (_ad .Black );_gdd .RunProperties ().SetFont ("\u0043\u0061\u006c\u0069\u0062\u0020\u0072\u0069");_gdd .RunProperties ().SetBold (false );};

// Values returns the value data source.
func (_bc BubbleChartSeries )Values ()NumberDataSource {if _bc ._cfbc .YVal ==nil {_bc ._cfbc .YVal =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_bc ._cfbc .YVal );};type NumberDataSource struct{_fee *_d .CT_NumDataSource };

// AddLine3DChart adds a new 3D line chart to a chart.
func (_adc Chart )AddLine3DChart ()Line3DChart {_gca (_adc ._fb .Chart );_ddcg :=_d .NewCT_PlotAreaChoice ();_adc ._fb .Chart .PlotArea .Choice =append (_adc ._fb .Chart .PlotArea .Choice ,_ddcg );_ddcg .Line3DChart =_d .NewCT_Line3DChart ();_ddcg .Line3DChart .Grouping =_d .NewCT_Grouping ();_ddcg .Line3DChart .Grouping .ValAttr =_d .ST_GroupingStandard ;return Line3DChart {_effg :_ddcg .Line3DChart };};func (_ebb DateAxis )AxisID ()uint32 {return _ebb ._bag .AxId .ValAttr };

// AddSeries adds a default series to an Pie chart.
func (_cbc PieChart )AddSeries ()PieChartSeries {_gbbd :=_d .NewCT_PieSer ();_cbc ._gbe .Ser =append (_cbc ._gbe .Ser ,_gbbd );_gbbd .Idx .ValAttr =uint32 (len (_cbc ._gbe .Ser )-1);_gbbd .Order .ValAttr =uint32 (len (_cbc ._gbe .Ser )-1);_aeac :=PieChartSeries {_gbbd };_aeac .InitializeDefaults ();return _aeac ;};

// Properties returns the line chart series shape properties.
func (_facc SurfaceChartSeries )Properties ()_b .ShapeProperties {if _facc ._cea .SpPr ==nil {_facc ._cea .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_facc ._cea .SpPr );};

// InitializeDefaults the bar chart to its defaults
func (_ef AreaChart )InitializeDefaults (){};

// X returns the inner wrapped XML type.
func (_e Area3DChart )X ()*_d .CT_Area3DChart {return _e ._ace };

// PieOfPieChart is a Pie chart with an extra Pie chart.
type PieOfPieChart struct{chartBase ;_gce *_d .CT_OfPieChart ;};type SeriesAxis struct{_ggbb *_d .CT_SerAx };func (_bcb SurfaceChartSeries )CategoryAxis ()CategoryAxisDataSource {if _bcb ._cea .Cat ==nil {_bcb ._cea .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_bcb ._cea .Cat );};

// Chart is a generic chart.
type Chart struct{_fb *_d .ChartSpace };func (_facg ValueAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_facg ._daab .MinorTickMark =nil ;}else {_facg ._daab .MinorTickMark =_d .NewCT_TickMark ();_facg ._daab .MinorTickMark .ValAttr =m ;};};

// AddSeries adds a default series to a line chart.
func (_fffd Line3DChart )AddSeries ()LineChartSeries {_ffc :=_fffd .nextColor (len (_fffd ._effg .Ser ));_bf :=_d .NewCT_LineSer ();_fffd ._effg .Ser =append (_fffd ._effg .Ser ,_bf );_bf .Idx .ValAttr =uint32 (len (_fffd ._effg .Ser )-1);_bf .Order .ValAttr =uint32 (len (_fffd ._effg .Ser )-1);_cffd :=LineChartSeries {_bf };_cffd .InitializeDefaults ();_cffd .Properties ().LineProperties ().SetSolidFill (_ffc );_cffd .Properties ().SetSolidFill (_ffc );return _cffd ;};

// Bar3DChart is a 3D bar chart.
type Bar3DChart struct{chartBase ;_fc *_d .CT_Bar3DChart ;};type Marker struct{_fagg *_d .CT_Marker };

// AreaChartSeries is a series to be used on an area chart.
type AreaChartSeries struct{_ddf *_d .CT_AreaSer };

// AddScatterChart adds a scatter (X/Y) chart.
func (_abd Chart )AddScatterChart ()ScatterChart {_eda :=_d .NewCT_PlotAreaChoice ();_abd ._fb .Chart .PlotArea .Choice =append (_abd ._fb .Chart .PlotArea .Choice ,_eda );_eda .ScatterChart =_d .NewCT_ScatterChart ();_fbb :=ScatterChart {_geb :_eda .ScatterChart };_fbb .InitializeDefaults ();return _fbb ;};func (_ffb ValueAxis )SetCrosses (axis Axis ){_ffb ._daab .CrossAx .ValAttr =axis .AxisID ()};

// AddSeries adds a default series to a bar chart.
func (_gac BarChart )AddSeries ()BarChartSeries {_cdf :=_gac .nextColor (len (_gac ._cfb .Ser ));_cg :=_d .NewCT_BarSer ();_gac ._cfb .Ser =append (_gac ._cfb .Ser ,_cg );_cg .Idx .ValAttr =uint32 (len (_gac ._cfb .Ser )-1);_cg .Order .ValAttr =uint32 (len (_gac ._cfb .Ser )-1);_ge :=BarChartSeries {_cg };_ge .InitializeDefaults ();_ge .Properties ().SetSolidFill (_cdf );return _ge ;};type nullAxis byte ;

// CategoryAxis returns the category data source.
func (_deg BarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _deg ._cgc .Cat ==nil {_deg ._cgc .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_deg ._cgc .Cat );};

// SetDisplayBlanksAs controls how missing values are displayed.
func (_cec Chart )SetDisplayBlanksAs (v _d .ST_DispBlanksAs ){_cec ._fb .Chart .DispBlanksAs =_d .NewCT_DispBlanksAs ();_cec ._fb .Chart .DispBlanksAs .ValAttr =v ;};func (_bbb ScatterChartSeries )Values ()NumberDataSource {if _bbb ._fdgd .YVal ==nil {_bbb ._fdgd .YVal =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_bbb ._fdgd .YVal );};func (_fd Bar3DChart )AddAxis (axis Axis ){_feb :=_d .NewCT_UnsignedInt ();_feb .ValAttr =axis .AxisID ();_fd ._fc .AxId =append (_fd ._fc .AxId ,_feb );};

// LineChartSeries is the data series for a line chart.
type LineChartSeries struct{_bdfg *_d .CT_LineSer };

// Properties returns the Bubble chart series shape properties.
func (_bdf BubbleChartSeries )Properties ()_b .ShapeProperties {if _bdf ._cfbc .SpPr ==nil {_bdf ._cfbc .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_bdf ._cfbc .SpPr );};func (_aee Surface3DChart )InitializeDefaults (){_aee ._afa .Wireframe =_d .NewCT_Boolean ();_aee ._afa .Wireframe .ValAttr =_g .Bool (false );_aee ._afa .BandFmts =_d .NewCT_BandFmts ();for _cfdc :=0;_cfdc < 15;_cfdc ++{_gecc :=_d .NewCT_BandFmt ();_gecc .Idx .ValAttr =uint32 (_cfdc );_gecc .SpPr =_ac .NewCT_ShapeProperties ();_fdc :=_b .MakeShapeProperties (_gecc .SpPr );_fdc .SetSolidFill (_aee .nextColor (_cfdc ));_aee ._afa .BandFmts .BandFmt =append (_aee ._afa .BandFmts .BandFmt ,_gecc );};};

// AddAreaChart adds a new area chart to a chart.
func (_ea Chart )AddAreaChart ()AreaChart {_ade :=_d .NewCT_PlotAreaChoice ();_ea ._fb .Chart .PlotArea .Choice =append (_ea ._fb .Chart .PlotArea .Choice ,_ade );_ade .AreaChart =_d .NewCT_AreaChart ();_fba :=AreaChart {_bd :_ade .AreaChart };_fba .InitializeDefaults ();return _fba ;};

// AddPieChart adds a new pie chart to a chart.
func (_fbd Chart )AddPieChart ()PieChart {_edg :=_d .NewCT_PlotAreaChoice ();_fbd ._fb .Chart .PlotArea .Choice =append (_fbd ._fb .Chart .PlotArea .Choice ,_edg );_edg .PieChart =_d .NewCT_PieChart ();_gdg :=PieChart {_gbe :_edg .PieChart };_gdg .InitializeDefaults ();return _gdg ;};

// SetOrder sets the order of the series
func (_edcb ScatterChartSeries )SetOrder (idx uint32 ){_edcb ._fdgd .Order .ValAttr =idx };

// AreaChart is an area chart that has a shaded area underneath a curve.
type AreaChart struct{chartBase ;_bd *_d .CT_AreaChart ;};

// MakeAxisDataSource constructs an AxisDataSource wrapper.
func MakeAxisDataSource (x *_d .CT_AxDataSource )CategoryAxisDataSource {return CategoryAxisDataSource {x };};func MakeValueAxis (x *_d .CT_ValAx )ValueAxis {return ValueAxis {x }};func (_fcb ScatterChartSeries )SetSmooth (b bool ){_fcb ._fdgd .Smooth =_d .NewCT_Boolean ();_fcb ._fdgd .Smooth .ValAttr =&b ;};func (_dbbd DateAxis )SetMinorTickMark (m _d .ST_TickMark ){if m ==_d .ST_TickMarkUnset {_dbbd ._bag .MinorTickMark =nil ;}else {_dbbd ._bag .MinorTickMark =_d .NewCT_TickMark ();_dbbd ._bag .MinorTickMark .ValAttr =m ;};};func (_fdg Marker )Properties ()_b .ShapeProperties {if _fdg ._fagg .SpPr ==nil {_fdg ._fagg .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_fdg ._fagg .SpPr );};func (_gf Area3DChart )AddAxis (axis Axis ){_eb :=_d .NewCT_UnsignedInt ();_eb .ValAttr =axis .AxisID ();_gf ._ace .AxId =append (_gf ._ace .AxId ,_eb );};

// Properties returns the chart's shape properties.
func (_gdgg Chart )Properties ()_b .ShapeProperties {if _gdgg ._fb .SpPr ==nil {_gdgg ._fb .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_gdgg ._fb .SpPr );};

// X returns the inner wrapped XML type.
func (_efd Title )X ()*_d .CT_Title {return _efd ._bdeb };

// AddSeries adds a default series to a Surface chart.
func (_bea Surface3DChart )AddSeries ()SurfaceChartSeries {_gcdg :=_bea .nextColor (len (_bea ._afa .Ser ));_fddb :=_d .NewCT_SurfaceSer ();_bea ._afa .Ser =append (_bea ._afa .Ser ,_fddb );_fddb .Idx .ValAttr =uint32 (len (_bea ._afa .Ser )-1);_fddb .Order .ValAttr =uint32 (len (_bea ._afa .Ser )-1);_ggda :=SurfaceChartSeries {_fddb };_ggda .InitializeDefaults ();_ggda .Properties ().LineProperties ().SetSolidFill (_gcdg );return _ggda ;};

// AddTitle sets a new title on the chart.
func (_fg Chart )AddTitle ()Title {_fg ._fb .Chart .Title =_d .NewCT_Title ();_fg ._fb .Chart .Title .Overlay =_d .NewCT_Boolean ();_fg ._fb .Chart .Title .Overlay .ValAttr =_g .Bool (false );_fg ._fb .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();_fg ._fb .Chart .AutoTitleDeleted .ValAttr =_g .Bool (false );_bbe :=MakeTitle (_fg ._fb .Chart .Title );_bbe .InitializeDefaults ();return _bbe ;};func (_dcgd ScatterChartSeries )CategoryAxis ()CategoryAxisDataSource {if _dcgd ._fdgd .XVal ==nil {_dcgd ._fdgd .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_dcgd ._fdgd .XVal );};func (_bge DataLabels )ensureChoice (){if _bge ._dfd .Choice ==nil {_bge ._dfd .Choice =_d .NewCT_DLblsChoice ();};};func (_ee GridLines )Properties ()_b .ShapeProperties {if _ee ._def .SpPr ==nil {_ee ._def .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_ee ._def .SpPr );};

// AddAxis adds an axis to a Surface chart.
func (_fegd Surface3DChart )AddAxis (axis Axis ){_ebbf :=_d .NewCT_UnsignedInt ();_ebbf .ValAttr =axis .AxisID ();_fegd ._afa .AxId =append (_fegd ._afa .AxId ,_ebbf );};func (_age Title )ParagraphProperties ()_b .ParagraphProperties {if _age ._bdeb .Tx ==nil {_age .SetText ("");};if _age ._bdeb .Tx .Choice .Rich .P [0].PPr ==nil {_age ._bdeb .Tx .Choice .Rich .P [0].PPr =_ac .NewCT_TextParagraphProperties ();};return _b .MakeParagraphProperties (_age ._bdeb .Tx .Choice .Rich .P [0].PPr );};

// AddSeries adds a default series to a Bubble chart.
func (_bbf BubbleChart )AddSeries ()BubbleChartSeries {_fcg :=_bbf .nextColor (len (_bbf ._gab .Ser ));_bg :=_d .NewCT_BubbleSer ();_bbf ._gab .Ser =append (_bbf ._gab .Ser ,_bg );_bg .Idx .ValAttr =uint32 (len (_bbf ._gab .Ser )-1);_bg .Order .ValAttr =uint32 (len (_bbf ._gab .Ser )-1);_ff :=BubbleChartSeries {_bg };_ff .InitializeDefaults ();_ff .Properties ().SetSolidFill (_fcg );return _ff ;};

// SetText sets the series text.
func (_dfa PieChartSeries )SetText (s string ){_dfa ._cfde .Tx =_d .NewCT_SerTx ();_dfa ._cfde .Tx .Choice .V =&s ;};func (_gfe CategoryAxis )Properties ()_b .ShapeProperties {if _gfe ._aed .SpPr ==nil {_gfe ._aed .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_gfe ._aed .SpPr );};

// SetText sets the series text.
func (_egd BubbleChartSeries )SetText (s string ){_egd ._cfbc .Tx =_d .NewCT_SerTx ();_egd ._cfbc .Tx .Choice .V =&s ;};

// X returns the inner wrapped XML type.
func (_efa AreaChartSeries )X ()*_d .CT_AreaSer {return _efa ._ddf };

// AddSeries adds a default series to a Stock chart.
func (_cdg StockChart )AddSeries ()LineChartSeries {_bfg :=_d .NewCT_LineSer ();_cdg ._cbdc .Ser =append (_cdg ._cbdc .Ser ,_bfg );_bfg .Idx .ValAttr =uint32 (len (_cdg ._cbdc .Ser )-1);_bfg .Order .ValAttr =uint32 (len (_cdg ._cbdc .Ser )-1);_dcb :=LineChartSeries {_bfg };_dcb .Values ().CreateEmptyNumberCache ();_dcb .Properties ().LineProperties ().SetNoFill ();return _dcb ;};

// AddSeries adds a default series to an Doughnut chart.
func (_cbb DoughnutChart )AddSeries ()PieChartSeries {_fff :=_d .NewCT_PieSer ();_cbb ._gbd .Ser =append (_cbb ._gbd .Ser ,_fff );_fff .Idx .ValAttr =uint32 (len (_cbb ._gbd .Ser )-1);_fff .Order .ValAttr =uint32 (len (_cbb ._gbd .Ser )-1);_gec :=PieChartSeries {_fff };_gec .InitializeDefaults ();return _gec ;};

// SetDirection changes the direction of the bar chart (bar or column).
func (_egf Bar3DChart )SetDirection (d _d .ST_BarDir ){_egf ._fc .BarDir .ValAttr =d };

// SetText sets the series text.
func (_abb AreaChartSeries )SetText (s string ){_abb ._ddf .Tx =_d .NewCT_SerTx ();_abb ._ddf .Tx .Choice .V =&s ;};

// Area3DChart is an area chart that has a shaded area underneath a curve.
type Area3DChart struct{chartBase ;_ace *_d .CT_Area3DChart ;};

// InitializeDefaults the Stock chart to its defaults
func (_ggg StockChart )InitializeDefaults (){_ggg ._cbdc .HiLowLines =_d .NewCT_ChartLines ();_ggg ._cbdc .UpDownBars =_d .NewCT_UpDownBars ();_ggg ._cbdc .UpDownBars .GapWidth =_d .NewCT_GapAmount ();_ggg ._cbdc .UpDownBars .GapWidth .ValAttr =&_d .ST_GapAmount {};_ggg ._cbdc .UpDownBars .GapWidth .ValAttr .ST_GapAmountUShort =_g .Uint16 (150);_ggg ._cbdc .UpDownBars .UpBars =_d .NewCT_UpDownBar ();_ggg ._cbdc .UpDownBars .DownBars =_d .NewCT_UpDownBar ();};

// InitializeDefaults the Bubble chart to its defaults
func (_acb BubbleChart )InitializeDefaults (){};

// AddSeries adds a default series to an Radar chart.
func (_deee RadarChart )AddSeries ()RadarChartSeries {_bccc :=_deee .nextColor (len (_deee ._dda .Ser ));_bdd :=_d .NewCT_RadarSer ();_deee ._dda .Ser =append (_deee ._dda .Ser ,_bdd );_bdd .Idx .ValAttr =uint32 (len (_deee ._dda .Ser )-1);_bdd .Order .ValAttr =uint32 (len (_deee ._dda .Ser )-1);_efb :=RadarChartSeries {_bdd };_efb .InitializeDefaults ();_efb .Properties ().SetSolidFill (_bccc );return _efb ;};

// SetIndex sets the index of the series
func (_baf SurfaceChartSeries )SetIndex (idx uint32 ){_baf ._cea .Idx .ValAttr =idx };

// AddCategoryAxis adds a category axis.
func (_dde Chart )AddCategoryAxis ()CategoryAxis {_ada :=_d .NewCT_CatAx ();if _dde ._fb .Chart .PlotArea .CChoice ==nil {_dde ._fb .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_ada .AxId =_d .NewCT_UnsignedInt ();_ada .AxId .ValAttr =0x7FFFFFFF&_cfc .Uint32 ();_dde ._fb .Chart .PlotArea .CChoice .CatAx =append (_dde ._fb .Chart .PlotArea .CChoice .CatAx ,_ada );_ada .Auto =_d .NewCT_Boolean ();_ada .Auto .ValAttr =_g .Bool (true );_ada .Delete =_d .NewCT_Boolean ();_ada .Delete .ValAttr =_g .Bool (false );_add :=MakeCategoryAxis (_ada );_add .InitializeDefaults ();return _add ;};

// Marker returns the marker properties.
func (_cbd LineChartSeries )Marker ()Marker {if _cbd ._bdfg .Marker ==nil {_cbd ._bdfg .Marker =_d .NewCT_Marker ();};return MakeMarker (_cbd ._bdfg .Marker );};func (_dfdc Legend )Properties ()_b .ShapeProperties {if _dfdc ._gbbg .SpPr ==nil {_dfdc ._gbbg .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_dfdc ._gbbg .SpPr );};

// Surface3DChart is a 3D view of a surface chart.
type Surface3DChart struct{chartBase ;_afa *_d .CT_Surface3DChart ;};

// SetType sets the type the secone pie to either pie or bar
func (_acf PieOfPieChart )SetType (t _d .ST_OfPieType ){_acf ._gce .OfPieType .ValAttr =t };

// RadarChart is an Radar chart that has a shaded Radar underneath a curve.
type RadarChart struct{chartBase ;_dda *_d .CT_RadarChart ;};

// X returns the inner wrapped XML type.
func (_abafd PieChart )X ()*_d .CT_PieChart {return _abafd ._gbe };

// InitializeDefaults the bar chart to its defaults
func (_baa PieOfPieChart )InitializeDefaults (){_baa ._gce .VaryColors =_d .NewCT_Boolean ();_baa ._gce .VaryColors .ValAttr =_g .Bool (true );_baa .SetType (_d .ST_OfPieTypePie );_baa ._gce .SecondPieSize =_d .NewCT_SecondPieSize ();_baa ._gce .SecondPieSize .ValAttr =&_d .ST_SecondPieSize {};_baa ._gce .SecondPieSize .ValAttr .ST_SecondPieSizeUShort =_g .Uint16 (75);_eee :=_d .NewCT_ChartLines ();_eee .SpPr =_ac .NewCT_ShapeProperties ();_ffd :=_b .MakeShapeProperties (_eee .SpPr );_ffd .LineProperties ().SetSolidFill (_ad .Auto );_baa ._gce .SerLines =append (_baa ._gce .SerLines ,_eee );};type ScatterChart struct{chartBase ;_geb *_d .CT_ScatterChart ;};

// CategoryAxis returns the category data source.
func (_acbc PieChartSeries )CategoryAxis ()CategoryAxisDataSource {if _acbc ._cfde .Cat ==nil {_acbc ._cfde .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_acbc ._cfde .Cat );};

// AddSurfaceChart adds a new surface chart to a chart.
func (_ggb Chart )AddSurfaceChart ()SurfaceChart {_ecc :=_d .NewCT_PlotAreaChoice ();_ggb ._fb .Chart .PlotArea .Choice =append (_ggb ._fb .Chart .PlotArea .Choice ,_ecc );_ecc .SurfaceChart =_d .NewCT_SurfaceChart ();_gca (_ggb ._fb .Chart );_ggb ._fb .Chart .View3D .RotX .ValAttr =_g .Int8 (90);_ggb ._fb .Chart .View3D .RotY .ValAttr =_g .Uint16 (0);_ggb ._fb .Chart .View3D .Perspective =_d .NewCT_Perspective ();_ggb ._fb .Chart .View3D .Perspective .ValAttr =_g .Uint8 (0);_cfe :=SurfaceChart {_dac :_ecc .SurfaceChart };_cfe .InitializeDefaults ();return _cfe ;};

// X returns the inner wrapped XML type.
func (_fgb LineChartSeries )X ()*_d .CT_LineSer {return _fgb ._bdfg };

// AddSeries adds a default series to an area chart.
func (_f AreaChart )AddSeries ()AreaChartSeries {_fe :=_f .nextColor (len (_f ._bd .Ser ));_dc :=_d .NewCT_AreaSer ();_f ._bd .Ser =append (_f ._bd .Ser ,_dc );_dc .Idx .ValAttr =uint32 (len (_f ._bd .Ser )-1);_dc .Order .ValAttr =uint32 (len (_f ._bd .Ser )-1);_dd :=AreaChartSeries {_dc };_dd .InitializeDefaults ();_dd .Properties ().SetSolidFill (_fe );return _dd ;};

// X returns the inner wrapped XML type.
func (_fbad Line3DChart )X ()*_d .CT_Line3DChart {return _fbad ._effg };

// X returns the inner wrapped XML type.
func (_aef BarChart )X ()*_d .CT_BarChart {return _aef ._cfb };func (_eeeg ValueAxis )AxisID ()uint32 {return _eeeg ._daab .AxId .ValAttr };func (_ebga DataLabels )SetShowSeriesName (b bool ){_ebga .ensureChoice ();_ebga ._dfd .Choice .ShowSerName =_d .NewCT_Boolean ();_ebga ._dfd .Choice .ShowSerName .ValAttr =_g .Bool (b );};func (_cac Legend )SetPosition (p _d .ST_LegendPos ){if p ==_d .ST_LegendPosUnset {_cac ._gbbg .LegendPos =nil ;}else {_cac ._gbbg .LegendPos =_d .NewCT_LegendPos ();_cac ._gbbg .LegendPos .ValAttr =p ;};};

// BarChartSeries is a series to be used on a bar chart.
type BarChartSeries struct{_cgc *_d .CT_BarSer };

// InitializeDefaults the bar chart to its defaults
func (_gef RadarChart )InitializeDefaults (){_gef ._dda .RadarStyle .ValAttr =_d .ST_RadarStyleMarker };func MakeMarker (x *_d .CT_Marker )Marker {return Marker {x }};func (_ead Chart )AddSeriesAxis ()SeriesAxis {_dce :=_d .NewCT_SerAx ();if _ead ._fb .Chart .PlotArea .CChoice ==nil {_ead ._fb .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_dce .AxId =_d .NewCT_UnsignedInt ();_dce .AxId .ValAttr =0x7FFFFFFF&_cfc .Uint32 ();_ead ._fb .Chart .PlotArea .CChoice .SerAx =append (_ead ._fb .Chart .PlotArea .CChoice .SerAx ,_dce );_dce .Delete =_d .NewCT_Boolean ();_dce .Delete .ValAttr =_g .Bool (false );_gaca :=MakeSeriesAxis (_dce );_gaca .InitializeDefaults ();return _gaca ;};type ValueAxis struct{_daab *_d .CT_ValAx };

// AddSeries adds a default series to a Scatter chart.
func (_fgf ScatterChart )AddSeries ()ScatterChartSeries {_gdb :=_fgf .nextColor (len (_fgf ._geb .Ser ));_gfd :=_d .NewCT_ScatterSer ();_fgf ._geb .Ser =append (_fgf ._geb .Ser ,_gfd );_gfd .Idx .ValAttr =uint32 (len (_fgf ._geb .Ser )-1);_gfd .Order .ValAttr =uint32 (len (_fgf ._geb .Ser )-1);_gcd :=ScatterChartSeries {_gfd };_gcd .InitializeDefaults ();_gcd .Marker ().Properties ().LineProperties ().SetSolidFill (_gdb );_gcd .Marker ().Properties ().SetSolidFill (_gdb );return _gcd ;};

// X returns the inner wrapped XML type.
func (_adf PieChartSeries )X ()*_d .CT_PieSer {return _adf ._cfde };func MakeSeriesAxis (x *_d .CT_SerAx )SeriesAxis {return SeriesAxis {x }};func _gca (_ebc *_d .CT_Chart ){_ebc .View3D =_d .NewCT_View3D ();_ebc .View3D .RotX =_d .NewCT_RotX ();_ebc .View3D .RotX .ValAttr =_g .Int8 (15);_ebc .View3D .RotY =_d .NewCT_RotY ();_ebc .View3D .RotY .ValAttr =_g .Uint16 (20);_ebc .View3D .RAngAx =_d .NewCT_Boolean ();_ebc .View3D .RAngAx .ValAttr =_g .Bool (false );_ebc .Floor =_d .NewCT_Surface ();_ebc .Floor .Thickness =_d .NewCT_Thickness ();_ebc .Floor .Thickness .ValAttr .Uint32 =_g .Uint32 (0);_ebc .SideWall =_d .NewCT_Surface ();_ebc .SideWall .Thickness =_d .NewCT_Thickness ();_ebc .SideWall .Thickness .ValAttr .Uint32 =_g .Uint32 (0);_ebc .BackWall =_d .NewCT_Surface ();_ebc .BackWall .Thickness =_d .NewCT_Thickness ();_ebc .BackWall .Thickness .ValAttr .Uint32 =_g .Uint32 (0);};

// AddPieOfPieChart adds a new pie chart to a chart.
func (_efg Chart )AddPieOfPieChart ()PieOfPieChart {_bac :=_d .NewCT_PlotAreaChoice ();_efg ._fb .Chart .PlotArea .Choice =append (_efg ._fb .Chart .PlotArea .Choice ,_bac );_bac .OfPieChart =_d .NewCT_OfPieChart ();_fag :=PieOfPieChart {_gce :_bac .OfPieChart };_fag .InitializeDefaults ();return _fag ;};func (_gecd Title )RunProperties ()_b .RunProperties {if _gecd ._bdeb .Tx ==nil {_gecd .SetText ("");};if _gecd ._bdeb .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr ==nil {_gecd ._bdeb .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr =_ac .NewCT_TextCharacterProperties ();};return _b .MakeRunProperties (_gecd ._bdeb .Tx .Choice .Rich .P [0].EG_TextRun [0].R .RPr );};func (_ggd CategoryAxis )SetPosition (p _d .ST_AxPos ){_ggd ._aed .AxPos =_d .NewCT_AxPos ();_ggd ._aed .AxPos .ValAttr =p ;};

// InitializeDefaults the bar chart to its defaults
func (_gga BarChart )InitializeDefaults (){_gga .SetDirection (_d .ST_BarDirCol )};

// SetValues is used to set the source data to a set of values.
func (_ed CategoryAxisDataSource )SetValues (v []string ){_ed ._cfa .Choice =_d .NewCT_AxDataSourceChoice ();_ed ._cfa .Choice .StrLit =_d .NewCT_StrData ();_ed ._cfa .Choice .StrLit .PtCount =_d .NewCT_UnsignedInt ();_ed ._cfa .Choice .StrLit .PtCount .ValAttr =uint32 (len (v ));for _fa ,_acd :=range v {_ed ._cfa .Choice .StrLit .Pt =append (_ed ._cfa .Choice .StrLit .Pt ,&_d .CT_StrVal {IdxAttr :uint32 (_fa ),V :_acd });};};

// Index returns the index of the series
func (_gge ScatterChartSeries )Index ()uint32 {return _gge ._fdgd .Idx .ValAttr };

// CategoryAxis returns the category data source.
func (_gcfc RadarChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gcfc ._gefd .Cat ==nil {_gcfc ._gefd .Cat =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_gcfc ._gefd .Cat );};

// DoughnutChart is a Doughnut chart.
type DoughnutChart struct{chartBase ;_gbd *_d .CT_DoughnutChart ;};

// AddSeries adds a default series to an area chart.
func (_gg Area3DChart )AddSeries ()AreaChartSeries {_gc :=_gg .nextColor (len (_gg ._ace .Ser ));_ae :=_d .NewCT_AreaSer ();_gg ._ace .Ser =append (_gg ._ace .Ser ,_ae );_ae .Idx .ValAttr =uint32 (len (_gg ._ace .Ser )-1);_ae .Order .ValAttr =uint32 (len (_gg ._ace .Ser )-1);_da :=AreaChartSeries {_ae };_da .InitializeDefaults ();_da .Properties ().SetSolidFill (_gc );return _da ;};

// CategoryAxis returns the category data source.
func (_gd BubbleChartSeries )CategoryAxis ()CategoryAxisDataSource {if _gd ._cfbc .XVal ==nil {_gd ._cfbc .XVal =_d .NewCT_AxDataSource ();};return MakeAxisDataSource (_gd ._cfbc .XVal );};

// CategoryAxisDataSource specifies the data for an axis.  It's commonly used with
// SetReference to set the axis data to a range of cells.
type CategoryAxisDataSource struct{_cfa *_d .CT_AxDataSource };

// Pie3DChart is a Pie3D chart.
type Pie3DChart struct{chartBase ;_fce *_d .CT_Pie3DChart ;};func (_aced Title )SetText (s string ){if _aced ._bdeb .Tx ==nil {_aced ._bdeb .Tx =_d .NewCT_Tx ();};if _aced ._bdeb .Tx .Choice .Rich ==nil {_aced ._bdeb .Tx .Choice .Rich =_ac .NewCT_TextBody ();};var _ceaa *_ac .CT_TextParagraph ;if len (_aced ._bdeb .Tx .Choice .Rich .P )==0{_ceaa =_ac .NewCT_TextParagraph ();_aced ._bdeb .Tx .Choice .Rich .P =[]*_ac .CT_TextParagraph {_ceaa };}else {_ceaa =_aced ._bdeb .Tx .Choice .Rich .P [0];};var _ebab *_ac .EG_TextRun ;if len (_ceaa .EG_TextRun )==0{_ebab =_ac .NewEG_TextRun ();_ceaa .EG_TextRun =[]*_ac .EG_TextRun {_ebab };}else {_ebab =_ceaa .EG_TextRun [0];};if _ebab .R ==nil {_ebab .R =_ac .NewCT_RegularTextRun ();};_ebab .R .T =s ;};

// SetLabelReference is used to set the source data to a range of cells
// containing strings.
func (_cgd CategoryAxisDataSource )SetLabelReference (s string ){_cgd ._cfa .Choice =_d .NewCT_AxDataSourceChoice ();_cgd ._cfa .Choice .StrRef =_d .NewCT_StrRef ();_cgd ._cfa .Choice .StrRef .F =s ;};

// SetText sets the series text
func (_bad ScatterChartSeries )SetText (s string ){_bad ._fdgd .Tx =_d .NewCT_SerTx ();_bad ._fdgd .Tx .Choice .V =&s ;};

// Index returns the index of the series
func (_aad SurfaceChartSeries )Index ()uint32 {return _aad ._cea .Idx .ValAttr };func (_bfd ScatterChart )InitializeDefaults (){_bfd ._geb .ScatterStyle .ValAttr =_d .ST_ScatterStyleMarker ;};

// X returns the inner wrapped XML type.
func (_aba BubbleChart )X ()*_d .CT_BubbleChart {return _aba ._gab };

// Marker returns the marker properties.
func (_bgef ScatterChartSeries )Marker ()Marker {if _bgef ._fdgd .Marker ==nil {_bgef ._fdgd .Marker =_d .NewCT_Marker ();};return MakeMarker (_bgef ._fdgd .Marker );};func (_ebd ValueAxis )SetTickLabelPosition (p _d .ST_TickLblPos ){if p ==_d .ST_TickLblPosUnset {_ebd ._daab .TickLblPos =nil ;}else {_ebd ._daab .TickLblPos =_d .NewCT_TickLblPos ();_ebd ._daab .TickLblPos .ValAttr =p ;};};type CategoryAxis struct{_aed *_d .CT_CatAx };

// Values returns the value data source.
func (_ebf AreaChartSeries )Values ()NumberDataSource {if _ebf ._ddf .Val ==nil {_ebf ._ddf .Val =_d .NewCT_NumDataSource ();};return MakeNumberDataSource (_ebf ._ddf .Val );};func MakeChart (x *_d .ChartSpace )Chart {return Chart {x }};

// AddValueAxis adds a value axis to the chart.
func (_acdb Chart )AddValueAxis ()ValueAxis {_daa :=_d .NewCT_ValAx ();if _acdb ._fb .Chart .PlotArea .CChoice ==nil {_acdb ._fb .Chart .PlotArea .CChoice =_d .NewCT_PlotAreaChoice1 ();};_daa .AxId =_d .NewCT_UnsignedInt ();_daa .AxId .ValAttr =0x7FFFFFFF&_cfc .Uint32 ();_acdb ._fb .Chart .PlotArea .CChoice .ValAx =append (_acdb ._fb .Chart .PlotArea .CChoice .ValAx ,_daa );_daa .Delete =_d .NewCT_Boolean ();_daa .Delete .ValAttr =_g .Bool (false );_daa .Scaling =_d .NewCT_Scaling ();_daa .Scaling .Orientation =_d .NewCT_Orientation ();_daa .Scaling .Orientation .ValAttr =_d .ST_OrientationMinMax ;_daa .Choice =&_d .EG_AxSharedChoice {};_daa .Choice .Crosses =_d .NewCT_Crosses ();_daa .Choice .Crosses .ValAttr =_d .ST_CrossesAutoZero ;_daa .CrossBetween =_d .NewCT_CrossBetween ();_daa .CrossBetween .ValAttr =_d .ST_CrossBetweenBetween ;_af :=MakeValueAxis (_daa );_af .MajorGridLines ().Properties ().LineProperties ().SetSolidFill (_ad .LightGray );_af .SetMajorTickMark (_d .ST_TickMarkOut );_af .SetMinorTickMark (_d .ST_TickMarkIn );_af .SetTickLabelPosition (_d .ST_TickLblPosNextTo );_af .Properties ().LineProperties ().SetSolidFill (_ad .Black );_af .SetPosition (_d .ST_AxPosL );return _af ;};

// RemoveTitle removes any existing title from the chart.
func (_eff Chart )RemoveTitle (){_eff ._fb .Chart .Title =nil ;_eff ._fb .Chart .AutoTitleDeleted =_d .NewCT_Boolean ();_eff ._fb .Chart .AutoTitleDeleted .ValAttr =_g .Bool (true );};

// Properties returns the line chart series shape properties.
func (_ggbe ScatterChartSeries )Properties ()_b .ShapeProperties {if _ggbe ._fdgd .SpPr ==nil {_ggbe ._fdgd .SpPr =_ac .NewCT_ShapeProperties ();};return _b .MakeShapeProperties (_ggbe ._fdgd .SpPr );};func (_ce nullAxis )AxisID ()uint32 {return 0};

// RemoveLegend removes the legend if the chart has one.
func (_dege Chart )RemoveLegend (){_dege ._fb .Chart .Legend =nil };

// InitializeDefaults initializes an Pie series to the default values.
func (_edf PieChartSeries )InitializeDefaults (){};