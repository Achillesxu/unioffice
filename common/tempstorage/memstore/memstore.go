//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_gg "encoding/hex";_gc "errors";_bc "fmt";_bf "github.com/unidoc/unioffice/common/tempstorage";_c "io";_b "io/ioutil";_cb "math/rand";_gb "sync";);

// Name returns the filename of the underlying memDataCell
func (_ad *memFile )Name ()string {return _ad ._a ._af };type memDataCell struct{_af string ;_ea []byte ;_fg int64 ;};

// RemoveAll removes all files according to the dir argument prefix
func (_eb *memStorage )RemoveAll (dir string )error {_eb ._eg .Range (func (_cdg ,_dbc interface{})bool {_eb ._eg .Delete (_cdg );return true });return nil ;};func _dce (_dd int )(string ,error ){_ag :=make ([]byte ,_dd );if _ ,_bbd :=_cb .Read (_ag );_bbd !=nil {return "",_bbd ;};return _gg .EncodeToString (_ag ),nil ;};

// Add reads a file from a disk and adds it to the storage
func (_fcb *memStorage )Add (path string )error {_ ,_da :=_fcb ._eg .Load (path );if _da {return nil ;};_afg ,_eag :=_b .ReadFile (path );if _eag !=nil {return _eag ;};_fcb ._eg .Store (path ,&memDataCell {_af :path ,_ea :_afg ,_fg :int64 (len (_afg ))});return nil ;};

// Open returns tempstorage File object by name
func (_dc *memStorage )Open (path string )(_bf .File ,error ){_cbe ,_bg :=_dc ._eg .Load (path );if !_bg {return nil ,_gc .New (_bc .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));};return &memFile {_a :_cbe .(*memDataCell )},nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_gd *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_ef :=_gd ._a ._fg ;_cc :=int64 (len (p ));if _cc > _ef {_cc =_ef ;p =p [:_cc ];};if readOffset >=_ef {return 0,_c .EOF ;};_eeg :=readOffset +_cc ;if _eeg >=_ef {_eeg =_ef ;};_df :=copy (p ,_gd ._a ._ea [readOffset :_eeg ]);return _df ,nil ;};func _cbc (_ca string )string {_cab ,_ :=_dce (6);return _ca +_cab };type memStorage struct{_eg _gb .Map };

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_efd *memFile )Write (p []byte )(int ,error ){_efd ._a ._ea =append (_efd ._a ._ea ,p ...);_efd ._a ._fg +=int64 (len (p ));return len (p ),nil ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_fa :=memStorage {_eg :_gb .Map {}};_bf .SetAsStorage (&_fa )};

// TempDir creates a name for a new temp directory using a pattern argument
func (_bee *memStorage )TempDir (pattern string )(string ,error ){return _cbc (pattern ),nil };type memFile struct{_a *memDataCell ;_e int64 ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_f *memFile )Read (p []byte )(int ,error ){_ce :=_f ._e ;_ee :=_f ._a ._fg ;_d :=int64 (len (p ));if _d > _ee {_d =_ee ;p =p [:_d ];};if _ce >=_ee {return 0,_c .EOF ;};_db :=_ce +_d ;if _db >=_ee {_db =_ee ;};_cd :=copy (p ,_f ._a ._ea [_ce :_db ]);_f ._e =_db ;return _cd ,nil ;};

// TempFile creates a new empty file in the storage and returns it
func (_be *memStorage )TempFile (dir ,pattern string )(_bf .File ,error ){_bb :=dir +"\u002f"+_cbc (pattern );_ae :=&memDataCell {_af :_bb ,_ea :[]byte {}};_fc :=&memFile {_a :_ae };_be ._eg .Store (_bb ,_ae );return _fc ,nil ;};

// Close is not applicable in this implementation
func (_bfg *memFile )Close ()error {return nil };