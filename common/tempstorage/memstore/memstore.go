//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_ab "encoding/hex";_bf "errors";_e "fmt";_cf "github.com/unidoc/unioffice/common/tempstorage";_g "io";_c "io/ioutil";_a "math/rand";_gf "sync";);type memStorage struct{_abd _gf .Map };func _ca (_gd string )string {_bbe ,_ :=_db (6);return _gd +_bbe };

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_de *memFile )Write (p []byte )(int ,error ){_de ._ce ._cb =append (_de ._ce ._cb ,p ...);_de ._ce ._dd +=int64 (len (p ));return len (p ),nil ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_f *memFile )Read (p []byte )(int ,error ){_d :=_f ._gc ;_eb :=_f ._ce ._dd ;_abe :=int64 (len (p ));if _abe > _eb {_abe =_eb ;p =p [:_abe ];};if _d >=_eb {return 0,_g .EOF ;};_ag :=_d +_abe ;if _ag >=_eb {_ag =_eb ;};_bc :=copy (p ,_f ._ce ._cb [_d :_ag ]);_f ._gc =_ag ;return _bc ,nil ;};type memDataCell struct{_cec string ;_cb []byte ;_dd int64 ;};

// Open returns tempstorage File object by name
func (_aa *memStorage )Open (path string )(_cf .File ,error ){_efe ,_age :=_aa ._abd .Load (path );if !_age {return nil ,_bf .New (_e .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));};return &memFile {_ce :_efe .(*memDataCell )},nil ;};

// Name returns the filename of the underlying memDataCell
func (_bfg *memFile )Name ()string {return _bfg ._ce ._cec };

// TempFile creates a new empty file in the storage and returns it
func (_bb *memStorage )TempFile (dir ,pattern string )(_cf .File ,error ){_fe :=dir +"\u002f"+_ca (pattern );_gcf :=&memDataCell {_cec :_fe ,_cb :[]byte {}};_aae :=&memFile {_ce :_gcf };_bb ._abd .Store (_fe ,_gcf );return _aae ,nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_bfb *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_df :=_bfb ._ce ._dd ;_ac :=int64 (len (p ));if _ac > _df {_ac =_df ;p =p [:_ac ];};if readOffset >=_df {return 0,_g .EOF ;};_ef :=readOffset +_ac ;if _ef >=_df {_ef =_df ;};_ed :=copy (p ,_bfb ._ce ._cb [readOffset :_ef ]);return _ed ,nil ;};

// Close is not applicable in this implementation
func (_ea *memFile )Close ()error {return nil };func _db (_fc int )(string ,error ){_ccb :=make ([]byte ,_fc );if _ ,_cee :=_a .Read (_ccb );_cee !=nil {return "",_cee ;};return _ab .EncodeToString (_ccb ),nil ;};type memFile struct{_ce *memDataCell ;_gc int64 ;};

// Add reads a file from a disk and adds it to the storage
func (_cbg *memStorage )Add (path string )error {_ ,_cd :=_cbg ._abd .Load (path );if _cd {return nil ;};_eg ,_efb :=_c .ReadFile (path );if _efb !=nil {return _efb ;};_cbg ._abd .Store (path ,&memDataCell {_cec :path ,_cb :_eg ,_dd :int64 (len (_eg ))});return nil ;};

// RemoveAll removes all files according to the dir argument prefix
func (_cc *memStorage )RemoveAll (dir string )error {_cc ._abd .Range (func (_gfc ,_bbb interface{})bool {_cc ._abd .Delete (_gfc );return true });return nil ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_cfc :=memStorage {_abd :_gf .Map {}};_cf .SetAsStorage (&_cfc )};

// TempDir creates a name for a new temp directory using a pattern argument
func (_ga *memStorage )TempDir (pattern string )(string ,error ){return _ca (pattern ),nil };