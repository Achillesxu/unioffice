//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_e "encoding/hex";_ag "errors";_be "fmt";_fa "github.com/unidoc/unioffice/common/tempstorage";_b "io";_f "io/ioutil";_d "math/rand";_g "sync";);

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_ee *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_c :=_ee ._ea ._ac ;_ce :=int64 (len (p ));if _ce > _c {_ce =_c ;p =p [:_ce ];};if readOffset >=_c {return 0,_b .EOF ;};_db :=readOffset +_ce ;if _db >=_c {_db =_c ;};_eb :=copy (p ,_ee ._ea ._gf [readOffset :_db ]);return _eb ,nil ;};type memDataCell struct{_ga string ;_gf []byte ;_ac int64 ;};type memStorage struct{_daa _g .Map };

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_gef *memFile )Write (p []byte )(int ,error ){_gef ._ea ._gf =append (_gef ._ea ._gf ,p ...);_gef ._ea ._ac +=int64 (len (p ));return len (p ),nil ;};func _fee (_cc int )(string ,error ){_eaf :=make ([]byte ,_cc );if _ ,_bb :=_d .Read (_eaf );_bb !=nil {return "",_bb ;};return _e .EncodeToString (_eaf ),nil ;};

// Add reads a file from a disk and adds it to the storage
func (_dda *memStorage )Add (path string )error {_ ,_ecg :=_dda ._daa .Load (path );if _ecg {return nil ;};_ded ,_fae :=_f .ReadFile (path );if _fae !=nil {return _fae ;};_dda ._daa .Store (path ,&memDataCell {_ga :path ,_gf :_ded ,_ac :int64 (len (_ded ))});return nil ;};

// Close is not applicable in this implementation
func (_efd *memFile )Close ()error {return nil };

// TempDir creates a name for a new temp directory using a pattern argument
func (_ec *memStorage )TempDir (pattern string )(string ,error ){return _cf (pattern ),nil };

// Open returns tempstorage File object by name
func (_aca *memStorage )Open (path string )(_fa .File ,error ){_eed ,_dg :=_aca ._daa .Load (path );if !_dg {return nil ,_ag .New (_be .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));};return &memFile {_ea :_eed .(*memDataCell )},nil ;};

// Name returns the filename of the underlying memDataCell
func (_dd *memFile )Name ()string {return _dd ._ea ._ga };

// RemoveAll removes all files according to the dir argument prefix
func (_bee *memStorage )RemoveAll (dir string )error {_bee ._daa .Range (func (_faa ,_geb interface{})bool {_bee ._daa .Delete (_faa );return true });return nil ;};type memFile struct{_ea *memDataCell ;_ed int64 ;};func _cf (_fe string )string {_bag ,_ :=_fee (6);return _fe +_bag };

// TempFile creates a new empty file in the storage and returns it
func (_acc *memStorage )TempFile (dir ,pattern string )(_fa .File ,error ){_ff :=dir +"\u002f"+_cf (pattern );_ae :=&memDataCell {_ga :_ff ,_gf :[]byte {}};_ba :=&memFile {_ea :_ae };_acc ._daa .Store (_ff ,_ae );return _ba ,nil ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_ge *memFile )Read (p []byte )(int ,error ){_gc :=_ge ._ed ;_fd :=_ge ._ea ._ac ;_da :=int64 (len (p ));if _da > _fd {_da =_fd ;p =p [:_da ];};if _gc >=_fd {return 0,_b .EOF ;};_de :=_gc +_da ;if _de >=_fd {_de =_fd ;};_ef :=copy (p ,_ge ._ea ._gf [_gc :_de ]);_ge ._ed =_de ;return _ef ,nil ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_acb :=memStorage {_daa :_g .Map {}};_fa .SetAsStorage (&_acb )};