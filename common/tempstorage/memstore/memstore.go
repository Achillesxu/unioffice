//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_bd "encoding/hex";_ega "errors";_f "fmt";_ee "github.com/unidoc/unioffice/common/tempstorage";_g "io";_b "io/ioutil";_eg "math/rand";_e "sync";);type memDataCell struct{_bdfg string ;_bc []byte ;_cc int64 ;};type memStorage struct{_gge _e .Map };


// TempFile creates a new empty file in the storage and returns it
func (_fcf *memStorage )TempFile (dir ,pattern string )(_ee .File ,error ){_gb :=dir +"\u002f"+_fcg (pattern );_dc :=&memDataCell {_bdfg :_gb ,_bc :[]byte {}};_af :=&memFile {_fc :_dc };_fcf ._gge .Store (_gb ,_dc );return _af ,nil ;};

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_ca :=memStorage {_gge :_e .Map {}};_ee .SetAsStorage (&_ca )};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_be *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_ba :=_be ._fc ._cc ;_fa :=int64 (len (p ));if _fa > _ba {_fa =_ba ;p =p [:_fa ];};if readOffset >=_ba {return 0,_g .EOF ;};_bec :=readOffset +_fa ;if _bec >=_ba {_bec =_ba ;};_fd :=copy (p ,_be ._fc ._bc [readOffset :_bec ]);
return _fd ,nil ;};type memFile struct{_fc *memDataCell ;_c int64 ;};func _ab (_ec int )(string ,error ){_aa :=make ([]byte ,_ec );if _ ,_fbf :=_eg .Read (_aa );_fbf !=nil {return "",_fbf ;};return _bd .EncodeToString (_aa ),nil ;};func _fcg (_beb string )string {_cg ,_ :=_ab (6);
return _beb +_cg };

// Name returns the filename of the underlying memDataCell
func (_gc *memFile )Name ()string {return _gc ._fc ._bdfg };

// Close is not applicable in this implementation
func (_fde *memFile )Close ()error {return nil };

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_a *memFile )Write (p []byte )(int ,error ){_a ._fc ._bc =append (_a ._fc ._bc ,p ...);_a ._fc ._cc +=int64 (len (p ));return len (p ),nil ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_gg *memFile )Read (p []byte )(int ,error ){_bdf :=_gg ._c ;_fb :=_gg ._fc ._cc ;_gf :=int64 (len (p ));if _gf > _fb {_gf =_fb ;p =p [:_gf ];};if _bdf >=_fb {return 0,_g .EOF ;};_fce :=_bdf +_gf ;if _fce >=_fb {_fce =_fb ;};_gff :=copy (p ,_gg ._fc ._bc [_bdf :_fce ]);
_gg ._c =_fce ;return _gff ,nil ;};

// RemoveAll removes all files according to the dir argument prefix
func (_fg *memStorage )RemoveAll (dir string )error {_fg ._gge .Range (func (_fcb ,_cd interface{})bool {_fg ._gge .Delete (_fcb );return true });return nil ;};

// Open returns tempstorage File object by name
func (_ae *memStorage )Open (path string )(_ee .File ,error ){_ga ,_cad :=_ae ._gge .Load (path );if !_cad {return nil ,_ega .New (_f .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));
};return &memFile {_fc :_ga .(*memDataCell )},nil ;};

// Add reads a file from a disk and adds it to the storage
func (_da *memStorage )Add (path string )error {_ ,_afef :=_da ._gge .Load (path );if _afef {return nil ;};_gcf ,_fcc :=_b .ReadFile (path );if _fcc !=nil {return _fcc ;};_da ._gge .Store (path ,&memDataCell {_bdfg :path ,_bc :_gcf ,_cc :int64 (len (_gcf ))});
return nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_afe *memStorage )TempDir (pattern string )(string ,error ){return _fcg (pattern ),nil };