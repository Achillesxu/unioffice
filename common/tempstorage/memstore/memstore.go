//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_fag "encoding/hex";_fa "errors";_b "fmt";_e "github.com/unidoc/unioffice/common/tempstorage";_f "io";_d "io/ioutil";_aa "math/rand";_fc "sync";);type memFile struct{_ae *memDataCell ;_ed int64 ;};

// RemoveAll removes all files according to the dir argument prefix
func (_bda *memStorage )RemoveAll (dir string )error {_bda ._bf .Range (func (_fe ,_ce interface{})bool {_bda ._bf .Delete (_fe );return true });return nil ;};

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_aae *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_df :=_aae ._ae ._ba ;_db :=int64 (len (p ));if _db > _df {_db =_df ;p =p [:_db ];};if readOffset >=_df {return 0,_f .EOF ;};_g :=readOffset +_db ;if _g >=_df {_g =_df ;};_af :=copy (p ,_aae ._ae ._gg [readOffset :_g ]);return _af ,nil ;};

// Open returns tempstorage File object by name
func (_bdf *memStorage )Open (path string )(_e .File ,error ){_bdd ,_dae :=_bdf ._bf .Load (path );if !_dae {return nil ,_fa .New (_b .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));};return &memFile {_ae :_bdd .(*memDataCell )},nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_fg *memStorage )TempDir (pattern string )(string ,error ){return _ef (pattern ),nil };

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_dbb :=memStorage {_bf :_fc .Map {}};_e .SetAsStorage (&_dbb )};

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_dc *memFile )Write (p []byte )(int ,error ){_dc ._ae ._gg =append (_dc ._ae ._gg ,p ...);_dc ._ae ._ba +=int64 (len (p ));return len (p ),nil ;};type memStorage struct{_bf _fc .Map };

// Close is not applicable in this implementation
func (_ee *memFile )Close ()error {return nil };

// Name returns the filename of the underlying memDataCell
func (_c *memFile )Name ()string {return _c ._ae ._ea };

// Add reads a file from a disk and adds it to the storage
func (_aeg *memStorage )Add (path string )error {_ ,_eg :=_aeg ._bf .Load (path );if _eg {return nil ;};_ec ,_gc :=_d .ReadFile (path );if _gc !=nil {return _gc ;};_aeg ._bf .Store (path ,&memDataCell {_ea :path ,_gg :_ec ,_ba :int64 (len (_ec ))});return nil ;};

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_fcg *memFile )Read (p []byte )(int ,error ){_da :=_fcg ._ed ;_ab :=_fcg ._ae ._ba ;_ff :=int64 (len (p ));if _ff > _ab {_ff =_ab ;p =p [:_ff ];};if _da >=_ab {return 0,_f .EOF ;};_bd :=_da +_ff ;if _bd >=_ab {_bd =_ab ;};_aee :=copy (p ,_fcg ._ae ._gg [_da :_bd ]);_fcg ._ed =_bd ;return _aee ,nil ;};type memDataCell struct{_ea string ;_gg []byte ;_ba int64 ;};

// TempFile creates a new empty file in the storage and returns it
func (_ad *memStorage )TempFile (dir ,pattern string )(_e .File ,error ){_bb :=dir +"\u002f"+_ef (pattern );_dd :=&memDataCell {_ea :_bb ,_gg :[]byte {}};_de :=&memFile {_ae :_dd };_ad ._bf .Store (_bb ,_dd );return _de ,nil ;};func _bfd (_eff int )(string ,error ){_eab :=make ([]byte ,_eff );if _ ,_eeb :=_aa .Read (_eab );_eeb !=nil {return "",_eeb ;};return _fag .EncodeToString (_eab ),nil ;};func _ef (_cf string )string {_gcb ,_ :=_bfd (6);return _cf +_gcb };