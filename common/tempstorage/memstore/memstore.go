//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package memstore implements tempStorage interface
// by using memory as a storage
package memstore ;import (_ee "encoding/hex";_d "errors";_ba "fmt";_eec "github.com/unidoc/unioffice/common/tempstorage";_e "io";_a "io/ioutil";_bc "math/rand";_eb "sync";);

// SetAsStorage sets temp storage as a memory storage
func SetAsStorage (){_eg :=memStorage {_be :_eb .Map {}};_eec .SetAsStorage (&_eg )};

// Open returns tempstorage File object by name
func (_dc *memStorage )Open (path string )(_eec .File ,error ){_fd ,_aad :=_dc ._be .Load (path );if !_aad {return nil ,_d .New (_ba .Sprintf ("\u0043\u0061\u006eno\u0074\u0020\u006f\u0070\u0065\u006e\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u006c\u0065\u0020\u0025\u0073",path ));};return &memFile {_bb :_fd .(*memDataCell )},nil ;};type memStorage struct{_be _eb .Map };

// ReadAt reads from the underlying memDataCell at an offset provided in order to implement ReaderAt interface.
// It does not affect f.readOffset.
func (_dde *memFile )ReadAt (p []byte ,readOffset int64 )(int ,error ){_aa :=_dde ._bb ._fe ;_g :=int64 (len (p ));if _g > _aa {_g =_aa ;p =p [:_g ];};if readOffset >=_aa {return 0,_e .EOF ;};_db :=readOffset +_g ;if _db >=_aa {_db =_aa ;};_cc :=copy (p ,_dde ._bb ._fb [readOffset :_db ]);return _cc ,nil ;};

// RemoveAll removes all files according to the dir argument prefix
func (_fda *memStorage )RemoveAll (dir string )error {_fda ._be .Range (func (_ebfg ,_fg interface{})bool {_fda ._be .Delete (_ebfg );return true });return nil ;};

// Close is not applicable in this implementation
func (_ef *memFile )Close ()error {return nil };type memDataCell struct{_ac string ;_fb []byte ;_fe int64 ;};func _dag (_cgd int )(string ,error ){_ga :=make ([]byte ,_cgd );if _ ,_df :=_bc .Read (_ga );_df !=nil {return "",_df ;};return _ee .EncodeToString (_ga ),nil ;};

// Add reads a file from a disk and adds it to the storage
func (_add *memStorage )Add (path string )error {_ ,_cd :=_add ._be .Load (path );if _cd {return nil ;};_edb ,_efb :=_a .ReadFile (path );if _efb !=nil {return _efb ;};_add ._be .Store (path ,&memDataCell {_ac :path ,_fb :_edb ,_fe :int64 (len (_edb ))});return nil ;};

// Write writes to the end of the underlying memDataCell in order to implement Writer interface
func (_ag *memFile )Write (p []byte )(int ,error ){_ag ._bb ._fb =append (_ag ._bb ._fb ,p ...);_ag ._bb ._fe +=int64 (len (p ));return len (p ),nil ;};func _ae (_fdb string )string {_fec ,_ :=_dag (6);return _fdb +_fec };

// Name returns the filename of the underlying memDataCell
func (_ebb *memFile )Name ()string {return _ebb ._bb ._ac };

// Read reads from the underlying memDataCell in order to implement Reader interface
func (_f *memFile )Read (p []byte )(int ,error ){_ebf :=_f ._dd ;_c :=_f ._bb ._fe ;_cb :=int64 (len (p ));if _cb > _c {_cb =_c ;p =p [:_cb ];};if _ebf >=_c {return 0,_e .EOF ;};_ebc :=_ebf +_cb ;if _ebc >=_c {_ebc =_c ;};_ad :=copy (p ,_f ._bb ._fb [_ebf :_ebc ]);_f ._dd =_ebc ;return _ad ,nil ;};

// TempFile creates a new empty file in the storage and returns it
func (_cg *memStorage )TempFile (dir ,pattern string )(_eec .File ,error ){_de :=dir +"\u002f"+_ae (pattern );_af :=&memDataCell {_ac :_de ,_fb :[]byte {}};_fc :=&memFile {_bb :_af };_cg ._be .Store (_de ,_af );return _fc ,nil ;};

// TempDir creates a name for a new temp directory using a pattern argument
func (_ed *memStorage )TempDir (pattern string )(string ,error ){return _ae (pattern ),nil };type memFile struct{_bb *memDataCell ;_dd int64 ;};