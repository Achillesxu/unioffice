//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_bg "crypto/md5";_ab "encoding/hex";_b "encoding/json";_ff "errors";_ca "fmt";_gb "github.com/stretchr/testify/require";_cg "golang.org/x/image/font";_ede "golang.org/x/image/font/opentype";_af "golang.org/x/image/math/fixed";_eg "image";_g "image/color";_bb "image/draw";_df "image/png";_a "io";_f "io/ioutil";_dc "math";_ed "os";_cd "os/exec";_bbe "path/filepath";_d "strings";_fg "sync";_c "testing";_cae "time";);func (_dfc *ReferenceFile )Update (currentMap *ReferenceMap )error {if _dfc ._bc ==""{return nil ;};_ce :=_dfc .updateMap (currentMap );if _ce ==0{return nil ;};_caeb ,_da :=_ed .OpenFile (_dfc ._bc ,_ed .O_CREATE |_ed .O_TRUNC |_ed .O_WRONLY ,0664);if _da !=nil {return _da ;};defer _caeb .Close ();_dfc .Timestamp =_cae .Now ().UTC ();_dd :=_b .NewEncoder (_caeb );_dd .SetIndent ("","\u0009");return _dd .Encode (_dfc );};func (_ef *ReferenceFile )updateMap (_cb *ReferenceMap )int {var _dff int ;if _ef .Map ._fe ==nil {_ef .Map ._fe =map[string ]ReferenceEntry {};};for _ffc ,_bbg :=range _cb ._fe {_ag ,_fga :=_ef .Map ._fe [_ffc ];if !_fga {_ef .Map ._fe [_ffc ]=_bbg ;_dff ++;continue ;};if string (_ag .Value )!=string (_bbg .Value ){_ef .Map ._fe [_ffc ]=_bbg ;_dff ++;};};for _cba :=range _ef .Map ._fe {if _ ,_be :=_cb ._fe [_cba ];!_be {delete (_ef .Map ._fe ,_cba );_dff ++;};};return _dff ;};func ReadPNG (file string )(_eg .Image ,error ){_gd ,_de :=_ed .Open (file );if _de !=nil {return nil ,_de ;};defer _gd .Close ();return _df .Decode (_gd );};func (_bcc *ReferenceMap )UnmarshalJSON (data []byte )error {return _b .Unmarshal (data ,&_bcc ._fe )};func (_fae *ReferenceMap )Copy ()*ReferenceMap {_gg :=ReferenceMap {_fe :make (map[string ]ReferenceEntry ,len (_fae ._fe ))};for _eaf ,_ad :=range _fae ._fe {_gg ._fe [_eaf ]=_ad ;};return &_gg ;};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;Invalid bool `json:"markedInvalid,omitempty"`;};func _gedc (_ecd ,_bef _g .Color )bool {_bca ,_ffcc ,_ecdb ,_cce :=_ecd .RGBA ();_ggf ,_bcg ,_gag ,_cea :=_bef .RGBA ();return _bca ==_ggf &&_ffcc ==_bcg &&_ecdb ==_gag &&_cce ==_cea ;};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_cac :=_cd .LookPath ("\u0067\u0073");_cac !=nil {return ErrRenderNotSupported ;};return _cd .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_ca .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;};if dirPath ==""{return nil ,_ed .ErrNotExist ;};_aa :=_bbe .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");_faf :=&ReferenceFile {_bc :_aa };_gf ,_fee :=_ed .Open (_aa );if _ff .Is (_fee ,_ed .ErrNotExist )&&createEmpty {_faf .Timestamp =_cae .Now ().UTC ();_faf .Map =&ReferenceMap {};return _faf ,nil ;};if _fee !=nil {return nil ,_fee ;};defer _gf .Close ();if _ffe :=_b .NewDecoder (_gf ).Decode (_faf );_ffe !=nil {if _ffe .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _faf ,nil ;};return nil ,_ffe ;};return _faf ,nil ;};func (_db *ReferenceMap )Keys ()(_dg []string ){_dg =make ([]string ,len (_db ._fe ));var _ea int ;for _eab :=range _db ._fe {_dg [_ea ]=_eab ;_ea ++;};return _dg ;};func (_cab *ReferenceMap )Write (key string ,entry ReferenceEntry ){_cab .Lock ();defer _cab .Unlock ();if _cab ._fe ==nil {_cab ._fe =map[string ]ReferenceEntry {};};_cab ._fe [key ]=entry ;};func CopyFile (src ,dst string )error {_aag ,_agc :=_ed .Open (src );if _agc !=nil {return _agc ;};defer _aag .Close ();_aeg ,_agc :=_ed .Create (dst );if _agc !=nil {return _agc ;};defer _aeg .Close ();_ ,_agc =_a .Copy (_aeg ,_aag );return _agc ;};func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_bdd ,_aeb :=ReadPNG (file1 );if _aeb !=nil {return false ,_aeb ;};_dcec ,_aeb :=ReadPNG (file2 );if _aeb !=nil {return false ,_aeb ;};_dab :=_eg .Point {_bdd .Bounds ().Dx (),0};_gfc :=_eg .Rectangle {_dab ,_dab .Add (_dcec .Bounds ().Size ())};_gcg :=_eg .Rectangle {_eg .Point {0,0},_gfc .Max };_adg :=_eg .NewRGBA (_gcg );_bb .Draw (_adg ,_bdd .Bounds (),_bdd ,_eg .Point {0,0},_bb .Src );_bb .Draw (_adg ,_gfc ,_dcec ,_eg .Point {0,0},_bb .Src );_gcd :=_bbe .Dir (file1 );_dgb :=_d .TrimSuffix (_bbe .Base (file1 ),_bbe .Ext (file1 ));_ac ,_aeb :=_ed .Create (_gcd +"\u002f"+_dgb +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");if _aeb !=nil {return false ,_aeb ;};defer _ac .Close ();if _gdf :=_df .Encode (_ac ,_adg );_gdf !=nil {return false ,_gdf ;};return true ,nil ;};func (_gcc *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_gcc .Lock ();defer _gcc .Unlock ();if _gcc ._fe ==nil {return ReferenceEntry {},false ;};_fa ,_gca :=_gcc ._fe [key ];return _fa ,_gca ;};func CompareImages (img1 ,img2 _eg .Image )(bool ,error ){_egb :=img1 .Bounds ();_ged :=0;for _bba :=0;_bba < _egb .Size ().X ;_bba ++{for _bd :=0;_bd < _egb .Size ().Y ;_bd ++{_afe ,_dbe ,_efa ,_ :=img1 .At (_bba ,_bd ).RGBA ();_caeg ,_febc ,_gbe ,_ :=img2 .At (_bba ,_bd ).RGBA ();if _afe !=_caeg ||_dbe !=_febc ||_efa !=_gbe {_ged ++;};};};_bcf :=float64 (_ged )/float64 (_egb .Dx ()*_egb .Dy ());if _bcf > 0.0001{_ca .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_bcf ,_ged );return false ,nil ;};return true ,nil ;};func _cbc (_ffb ,_fd _eg .Rectangle )bool {return _ffb .Min .X ==_fd .Min .X &&_ffb .Min .Y ==_fd .Min .Y &&_ffb .Max .X ==_fd .Max .X &&_ffb .Max .Y ==_fd .Max .Y ;};func (_gc *ReferenceMap )Len ()int {return len (_gc ._fe )};var (ErrRenderNotSupported =_ff .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");ErrImageSizeNotMatch =_ff .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););type ReferenceFile struct{Timestamp _cae .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;_bc string ;};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_ba ,_aege :=ReadPNG (src );if _aege !=nil {return false ,"",0,0,_aege ;};_dgbf ,_aege :=ReadPNG (dst );if _aege !=nil {return false ,"",0,0,_aege ;};_ffcg :=_ba .Bounds ();_febf :=_dgbf .Bounds ();if !_cbc (_ffcg ,_febf ){return false ,"",0,0,ErrImageSizeNotMatch ;};_add :=_eg .NewRGBA (_eg .Rect (0,0,_ffcg .Max .X ,_ffcg .Max .Y ));var (_cdg float64 ;_acc float64 ;);for _cee :=_ffcg .Min .Y ;_cee < _ffcg .Max .Y ;_cee ++{for _deg :=_ffcg .Min .X ;_deg < _ffcg .Max .X ;_deg ++{_dgc ,_egg ,_cef ,_gbd :=_dgbf .At (_deg ,_cee ).RGBA ();_add .Set (_deg ,_cee ,_g .RGBA {uint8 (_dgc ),uint8 (_egg ),uint8 (_cef ),64});_egc ,_aba ,_bae ,_agcc :=_ba .At (_deg ,_cee ).RGBA ();if !_gedc (_ba .At (_deg ,_cee ),_dgbf .At (_deg ,_cee )){_add .Set (_deg ,_cee ,_g .RGBA {uint8 (_egc ),uint8 (_aba ),uint8 (_bae ),uint8 (_agcc )});_ec :=float64 (_egc )+float64 (_aba )+float64 (_bae )+float64 (_agcc )-float64 (_dgc )+float64 (_egg )+float64 (_cef )+float64 (_gbd );_cc :=_dc .Sqrt (_dc .Pow (_ec /float64 (_ffcg .Dx ()*_ffcg .Dy ()),2));_acc +=_cc ;_cdg ++;};};};_bea :=_cdg /float64 (_ffcg .Dx ()*_ffcg .Dy ())*100;_geb :=_bbe .Dir (src );_ffcf :=_d .TrimSuffix (_bbe .Base (src ),_bbe .Ext (src ));_dfa ,_aege :=_ed .Create (_geb +"\u002f"+_ffcf +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");if _aege !=nil {return false ,"",0,0,_aege ;};defer _dfa .Close ();_bgf :=_d .Replace (_geb ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";_aad :=_ca .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_bea );_aege =_dbg (_add ,_bgf ,_aad ,15,22);if _aege !=nil {return false ,"",0,0,_aege ;};_aad =_ca .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_acc );_aege =_dbg (_add ,_bgf ,_aad ,15,44);if _aege !=nil {return false ,"",0,0,_aege ;};if _dgd :=_df .Encode (_dfa ,_add );_dgd !=nil {return false ,"",0,0,_dgd ;};return true ,_dfa .Name (),_bea ,_acc ,nil ;};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_dda ,_bdc :=HashFile (file1 );if _bdc !=nil {return false ,_bdc ;};_dfd ,_bdc :=HashFile (file2 );if _bdc !=nil {return false ,_bdc ;};if _dda ==_dfd {return true ,nil ;};_daa ,_bdc :=ReadPNG (file1 );if _bdc !=nil {return false ,_bdc ;};_efg ,_bdc :=ReadPNG (file2 );if _bdc !=nil {return false ,_bdc ;};if _daa .Bounds ()!=_efg .Bounds (){return false ,nil ;};return CompareImages (_daa ,_efg );};func _aed (_cdgd *_c .T ,_daf string )int64 {_cggf ,_acf :=_ed .Stat (_daf );_gb .NoError (_cdgd ,_acf );return _cggf .Size ();};func HashFile (file string )(string ,error ){_feb ,_caf :=_ed .Open (file );if _caf !=nil {return "",_caf ;};defer _feb .Close ();_cgg :=_bg .New ();if _ ,_caf =_a .Copy (_cgg ,_feb );_caf !=nil {return "",_caf ;};return _ab .EncodeToString (_cgg .Sum (nil )),nil ;};func _dbg (_aade *_eg .RGBA ,_ccc string ,_cf string ,_dea ,_gcb int )error {_afb ,_dfae :=_f .ReadFile (_ccc );if _dfae !=nil {return _dfae ;};_fb ,_dfae :=_ede .Parse (_afb );if _dfae !=nil {return _dfae ;};_aee ,_dfae :=_ede .NewFace (_fb ,&_ede .FaceOptions {Size :18,DPI :72,Hinting :_cg .HintingNone });if _dfae !=nil {return _dfae ;};_geg :=&_cg .Drawer {Dst :_aade ,Src :_eg .NewUniform (_g .RGBA {200,100,0,255}),Face :_aee ,Dot :_af .P (_dea ,_gcb )};_geg .DrawString (_cf );return nil ;};func (_ae *ReferenceMap )MarshalJSON ()([]byte ,error ){return _b .Marshal (_ae ._fe )};func RunRenderTest (t *_c .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){_gef :=_d .TrimSuffix (_bbe .Base (pdfPath ),_bbe .Ext (pdfPath ));t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_dbf *_c .T ){_bbc :=_bbe .Join (outputDir ,_gef );_afc :=_bbc +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _cad :=RenderPDFToPNGs (pdfPath ,0,_afc );_cad !=nil {_dbf .Skip (_cad );};_fbb :=_gef +"\u002em\u0073\u0077\u006f\u0072\u0064";_gedce :=_bbe .Join (outputDir ,_fbb );_dgbe :=_gedce +"\u002d%\u0064\u002e\u0070\u006e\u0067";_feg :=false ;if saveBaseline {_beg :=_bbe .Dir (pdfPath );_dcd :=_bbe .Join (_beg ,_fbb +"\u002e\u0070\u0064\u0066");if _ ,_fac :=_ed .Stat (_dcd );_fac ==nil {_dbf .Logf ("\u0052\u0065\u006e\u0064er\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064\u0020\u0050\u0044\u0046\u003a\u0020%\u0076",_dcd );if _eca :=RenderPDFToPNGs (_dcd ,0,_dgbe );_eca !=nil {_dbf .Skip (_eca );};_feg =true ;};};for _eag :=1;true ;_eag ++{_fab :=_ca .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_bbc ,_eag );_ecf :=_bbe .Join (baselineRenderPath ,_ca .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_gef ,_eag ));if _ ,_deb :=_ed .Stat (_fab );_deb !=nil {break ;};_dbf .Logf ("\u0025\u0073",_ecf );if saveBaseline {_dbf .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_fab ,_ecf );_bf :=CopyFile (_fab ,_ecf );if _bf !=nil {_dbf .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_ecf ,_bf );};if _feg {_eb :=_ca .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_gedce ,_eag );_ead :=_bbe .Join (baselineRenderPath ,_ca .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_fbb ,_eag ));_dbf .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_eb ,_ead );_fde :=CopyFile (_eb ,_ead );if _fde !=nil {_dbf .Logf ("\u0045\u0052RO\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076\u002c \u0068\u0061\u0076\u0069n\u0067\u0020\u0064\u0069ff\u0065\u0072e\u006et\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065 \u0072\u0065s\u0075\u006c\u0074\u0073\u002c\u0020\u0075\u0073\u0065\u0020\u0070\u0072\u0065\u0076i\u006f\u0075\u0073\u0020\u0070\u0061\u0067\u0065",_ead ,_fde );_eb =_ca .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_gedce ,_eag -1);_ead =_bbe .Join (baselineRenderPath ,_ca .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_fbb ,_eag -1));if _gdg :=CopyFile (_eb ,_ead );_gdg !=nil {_dbf .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_ead ,_gdg );};};_dbf .Logf ("\u0043\u006f\u006d\u0062\u0069\u006e\u0069\u006e\u0067\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063e\u0020\u0072\u0065\u0073\u0075\u006c\u0074s\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u0057\u006fr\u0064\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_ecf ,_ead );_bdcf ,_fde :=CombinePNGFiles (_ecf ,_ead );if _ed .IsNotExist (_fde ){_dbf .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_bdcf {_dbf .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");};_dbf .Logf ("Cr\u0065\u0061t\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065 \u0064\u0069\u0066\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020M\u0053 \u0057\u006f\u0072\u0064\u0020\u0025\u0073\u0020a\u006ed\u0020\u0025s",_ecf ,_ead );_bdcf ,_fcb ,_fegd ,_faa ,_fde :=CreatePNGDiff (_ecf ,_ead );if _fde !=nil &&_fde !=ErrImageSizeNotMatch {_dbf .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_fde );};if _bdcf {_dbf .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_fcb );_dbf .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_fegd );_dbf .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_faa );_fcf :=_bbe .Base (_fcb );if _cgd ,_cgf :=currentHashMap .Read (_fcf );_cgf {if _cgd .DiffPercent < _fegd ||_cgd .DiffTotal < _faa {_dbf .Fatalf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_fegd ,_faa );};};_gefd ,_dgdd :=HashFile (_fcb );_gb .NoError (_dbf ,_dgdd );_ace :=ReferenceEntry {Timestamp :_cae .Now ().UTC ().Unix (),Value :_gefd ,ResultSize :_aed (_dbf ,_fcb ),DiffPercent :_fegd ,DiffTotal :_faa };currentHashMap .Write (_fcf ,_ace );if _dgdd =refFile .Update (currentHashMap );_dgdd !=nil {_dbf .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_dgdd );};};};continue ;};_dbf .Run (_ca .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_eag ),func (_deaa *_c .T ){_deaa .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_fab ,_ecf );_fba ,_ecb :=ComparePNGFiles (_fab ,_ecf );if _ed .IsNotExist (_ecb ){_deaa .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_fba {_deaa .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");};});};});};type ReferenceMap struct{_fg .Mutex ;_fe map[string ]ReferenceEntry ;};