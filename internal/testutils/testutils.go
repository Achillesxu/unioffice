//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_be "crypto/md5";_ebg "encoding/hex";_e "encoding/json";_gc "errors";_fe "fmt";_ab "github.com/stretchr/testify/require";_bad "golang.org/x/image/font";_bf "golang.org/x/image/font/opentype";_cf "golang.org/x/image/math/fixed";_f "image";_bd "image/color";_ac "image/draw";_ba "image/png";_ge "io";_eb "io/ioutil";_a "math";_fc "os";_c "os/exec";_ed "path/filepath";_b "strings";_cac "sync";_gf "testing";_ca "time";);func (_cdc *ReferenceMap )UnmarshalJSON (data []byte )error {return _e .Unmarshal (data ,&_cdc ._af )};func _fbf (_bdb *_gf .T ,_cag string )int64 {_gbc ,_fece :=_fc .Stat (_cag );_ab .NoError (_bdb ,_fece );return _gbc .Size ();};type ReferenceFile struct{Timestamp _ca .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;_ebd string ;};func (_de *ReferenceMap )Keys ()(_cb []string ){_cb =make ([]string ,len (_de ._af ));var _gb int ;for _deg :=range _de ._af {_cb [_gb ]=_deg ;_gb ++;};return _cb ;};func (_d *ReferenceFile )Update (currentMap *ReferenceMap )error {if _d ._ebd ==""{return nil ;};_gd :=_d .updateMap (currentMap );if _gd ==0{return nil ;};_df ,_ec :=_fc .OpenFile (_d ._ebd ,_fc .O_CREATE |_fc .O_TRUNC |_fc .O_WRONLY ,0664);if _ec !=nil {return _ec ;};defer _df .Close ();_d .Timestamp =_ca .Now ().UTC ();_ae :=_e .NewEncoder (_df );_ae .SetIndent ("","\u0009");return _ae .Encode (_d );};func (_gg *ReferenceMap )MarshalJSON ()([]byte ,error ){return _e .Marshal (_gg ._af )};func (_bc *ReferenceMap )Copy ()*ReferenceMap {_ga :=ReferenceMap {_af :make (map[string ]ReferenceEntry ,len (_bc ._af ))};for _fcee ,_fb :=range _bc ._af {_ga ._af [_fcee ]=_fb ;};return &_ga ;};func (_cd *ReferenceMap )Len ()int {return len (_cd ._af )};func _gcc (_eea ,_abe _bd .Color )bool {_dga ,_afe ,_agg ,_fcc :=_eea .RGBA ();_afc ,_cfd ,_bcg ,_cceb :=_abe .RGBA ();return _dga ==_afc &&_afe ==_cfd &&_agg ==_bcg &&_fcc ==_cceb ;};func CompareImages (img1 ,img2 _f .Image )(bool ,error ){_dea :=img1 .Bounds ();_db :=0;for _cff :=0;_cff < _dea .Size ().X ;_cff ++{for _cec :=0;_cec < _dea .Size ().Y ;_cec ++{_fcf ,_gff ,_ff ,_ :=img1 .At (_cff ,_cec ).RGBA ();_cee ,_dfd ,_afd ,_ :=img2 .At (_cff ,_cec ).RGBA ();if _fcf !=_cee ||_gff !=_dfd ||_ff !=_afd {_db ++;};};};_feg :=float64 (_db )/float64 (_dea .Dx ()*_dea .Dy ());if _feg > 0.0001{_fe .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_feg ,_db );return false ,nil ;};return true ,nil ;};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;};if dirPath ==""{return nil ,_fc .ErrNotExist ;};_ce :=_ed .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");_fec :=&ReferenceFile {_ebd :_ce };_eca ,_dege :=_fc .Open (_ce );if _gc .Is (_dege ,_fc .ErrNotExist )&&createEmpty {_fec .Timestamp =_ca .Now ().UTC ();_fec .Map =&ReferenceMap {};return _fec ,nil ;};if _dege !=nil {return nil ,_dege ;};defer _eca .Close ();if _acc :=_e .NewDecoder (_eca ).Decode (_fec );_acc !=nil {if _acc .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _fec ,nil ;};return nil ,_acc ;};return _fec ,nil ;};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_cfb ,_fcfa :=ReadPNG (src );if _fcfa !=nil {return false ,"",0,0,_fcfa ;};_fd ,_fcfa :=ReadPNG (dst );if _fcfa !=nil {return false ,"",0,0,_fcfa ;};_bbe :=_cfb .Bounds ();_deae :=_fd .Bounds ();if !_gfba (_bbe ,_deae ){return false ,"",0,0,ErrImageSizeNotMatch ;};_geg :=_f .NewRGBA (_f .Rect (0,0,_bbe .Max .X ,_bbe .Max .Y ));var (_ee float64 ;_dff float64 ;);for _dccf :=_bbe .Min .Y ;_dccf < _bbe .Max .Y ;_dccf ++{for _cce :=_bbe .Min .X ;_cce < _bbe .Max .X ;_cce ++{_ag ,_dcf ,_dag ,_eeg :=_fd .At (_cce ,_dccf ).RGBA ();_geg .Set (_cce ,_dccf ,_bd .RGBA {uint8 (_ag ),uint8 (_dcf ),uint8 (_dag ),64});_ebc ,_cced ,_beb ,_dccg :=_cfb .At (_cce ,_dccf ).RGBA ();if !_gcc (_cfb .At (_cce ,_dccf ),_fd .At (_cce ,_dccf )){_geg .Set (_cce ,_dccf ,_bd .RGBA {uint8 (_ebc ),uint8 (_cced ),uint8 (_beb ),uint8 (_dccg )});_aa :=float64 (_ebc )+float64 (_cced )+float64 (_beb )+float64 (_dccg )-float64 (_ag )+float64 (_dcf )+float64 (_dag )+float64 (_eeg );_fdd :=_a .Sqrt (_a .Pow (_aa /float64 (_bbe .Dx ()*_bbe .Dy ()),2));_dff +=_fdd ;_ee ++;};};};_gbg :=_ee /float64 (_bbe .Dx ()*_bbe .Dy ())*100;_gfb :=_ed .Dir (src );_cge :=_b .TrimSuffix (_ed .Base (src ),_ed .Ext (src ));_dfdb ,_fcfa :=_fc .Create (_gfb +"\u002f"+_cge +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");if _fcfa !=nil {return false ,"",0,0,_fcfa ;};defer _dfdb .Close ();_geb :=_b .Replace (_gfb ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";_feb :=_fe .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_gbg );_fcfa =_fecf (_geg ,_geb ,_feb ,15,22);if _fcfa !=nil {return false ,"",0,0,_fcfa ;};_feb =_fe .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_dff );_fcfa =_fecf (_geg ,_geb ,_feb ,15,44);if _fcfa !=nil {return false ,"",0,0,_fcfa ;};if _fecd :=_ba .Encode (_dfdb ,_geg );_fecd !=nil {return false ,"",0,0,_fecd ;};return true ,_dfdb .Name (),_gbg ,_dff ,nil ;};func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_bec ,_fbb :=ReadPNG (file1 );if _fbb !=nil {return false ,_fbb ;};_beca ,_fbb :=ReadPNG (file2 );if _fbb !=nil {return false ,_fbb ;};_cg :=_f .Point {_bec .Bounds ().Dx (),0};_egf :=_f .Rectangle {_cg ,_cg .Add (_beca .Bounds ().Size ())};_baf :=_f .Rectangle {_f .Point {0,0},_egf .Max };_bef :=_f .NewRGBA (_baf );_ac .Draw (_bef ,_bec .Bounds (),_bec ,_f .Point {0,0},_ac .Src );_ac .Draw (_bef ,_egf ,_beca ,_f .Point {0,0},_ac .Src );_bdd :=_ed .Dir (file1 );_bba :=_b .TrimSuffix (_ed .Base (file1 ),_ed .Ext (file1 ));_dfg ,_fbb :=_fc .Create (_bdd +"\u002f"+_bba +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");if _fbb !=nil {return false ,_fbb ;};defer _dfg .Close ();if _abc :=_ba .Encode (_dfg ,_bef );_abc !=nil {return false ,_abc ;};return true ,nil ;};func HashFile (file string )(string ,error ){_cbb ,_dcc :=_fc .Open (file );if _dcc !=nil {return "",_dcc ;};defer _cbb .Close ();_cc :=_be .New ();if _ ,_dcc =_ge .Copy (_cc ,_cbb );_dcc !=nil {return "",_dcc ;};return _ebg .EncodeToString (_cc .Sum (nil )),nil ;};func _gfba (_gac ,_gfc _f .Rectangle )bool {return _gac .Min .X ==_gfc .Min .X &&_gac .Min .Y ==_gfc .Min .Y &&_gac .Max .X ==_gfc .Max .X &&_gac .Max .Y ==_gfc .Max .Y ;};type ReferenceMap struct{_cac .Mutex ;_af map[string ]ReferenceEntry ;};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_faf ,_bbb :=HashFile (file1 );if _bbb !=nil {return false ,_bbb ;};_ece ,_bbb :=HashFile (file2 );if _bbb !=nil {return false ,_bbb ;};if _faf ==_ece {return true ,nil ;};_bg ,_bbb :=ReadPNG (file1 );if _bbb !=nil {return false ,_bbb ;};_dgd ,_bbb :=ReadPNG (file2 );if _bbb !=nil {return false ,_bbb ;};if _bg .Bounds ()!=_dgd .Bounds (){return false ,nil ;};return CompareImages (_bg ,_dgd );};func (_aef *ReferenceFile )updateMap (_ebb *ReferenceMap )int {var _edc int ;if _aef .Map ._af ==nil {_aef .Map ._af =map[string ]ReferenceEntry {};};for _bb ,_dg :=range _ebb ._af {_caa ,_dc :=_aef .Map ._af [_bb ];if !_dc {_aef .Map ._af [_bb ]=_dg ;_edc ++;continue ;};if string (_caa .Value )!=string (_dg .Value ){_aef .Map ._af [_bb ]=_dg ;_edc ++;};};for _fce :=range _aef .Map ._af {if _ ,_ef :=_ebb ._af [_fce ];!_ef {delete (_aef .Map ._af ,_fce );_edc ++;};};return _edc ;};func (_aec *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_aec .Lock ();defer _aec .Unlock ();if _aec ._af ==nil {return ReferenceEntry {},false ;};_eba ,_edd :=_aec ._af [key ];return _eba ,_edd ;};func ReadPNG (file string )(_f .Image ,error ){_cbc ,_dab :=_fc .Open (file );if _dab !=nil {return nil ,_dab ;};defer _cbc .Close ();return _ba .Decode (_cbc );};func RunRenderTest (t *_gf .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){_bac :=_b .TrimSuffix (_ed .Base (pdfPath ),_ed .Ext (pdfPath ));t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_bcd *_gf .T ){_dabd :=_ed .Join (outputDir ,_bac );_def :=_dabd +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _bgg :=RenderPDFToPNGs (pdfPath ,0,_def );_bgg !=nil {_bcd .Skip (_bgg );};_aca :=_bac +"\u002em\u0073\u0077\u006f\u0072\u0064";_bcb :=_ed .Join (outputDir ,_aca );_gef :=_bcb +"\u002d%\u0064\u002e\u0070\u006e\u0067";_dce :=false ;if saveBaseline {_daa :=_ed .Dir (pdfPath );_afb :=_ed .Join (_daa ,_aca +"\u002e\u0070\u0064\u0066");if _ ,_bcf :=_fc .Stat (_afb );_bcf ==nil {_bcd .Logf ("\u0052\u0065\u006e\u0064er\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064\u0020\u0050\u0044\u0046\u003a\u0020%\u0076",_afb );if _afec :=RenderPDFToPNGs (_afb ,0,_gef );_afec !=nil {_bcd .Skip (_afec );};_dce =true ;};};for _fee :=1;true ;_fee ++{_aga :=_fe .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_dabd ,_fee );_cdd :=_ed .Join (baselineRenderPath ,_fe .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_bac ,_fee ));if _ ,_fff :=_fc .Stat (_aga );_fff !=nil {break ;};_bcd .Logf ("\u0025\u0073",_cdd );if saveBaseline {_bcd .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_aga ,_cdd );_afca :=CopyFile (_aga ,_cdd );if _afca !=nil {_bcd .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_cdd ,_afca );};if _dce {_ffd :=_fe .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_bcb ,_fee );_gffd :=_ed .Join (baselineRenderPath ,_fe .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_aca ,_fee ));_bcd .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_ffd ,_gffd );_bdfa :=CopyFile (_ffd ,_gffd );if _bdfa !=nil {_bcd .Logf ("\u0045\u0052RO\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076\u002c \u0068\u0061\u0076\u0069n\u0067\u0020\u0064\u0069ff\u0065\u0072e\u006et\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065 \u0072\u0065s\u0075\u006c\u0074\u0073\u002c\u0020\u0075\u0073\u0065\u0020\u0070\u0072\u0065\u0076i\u006f\u0075\u0073\u0020\u0070\u0061\u0067\u0065",_gffd ,_bdfa );_ffd =_fe .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_bcb ,_fee -1);_gffd =_ed .Join (baselineRenderPath ,_fe .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_aca ,_fee -1));if _ffc :=CopyFile (_ffd ,_gffd );_ffc !=nil {_bcd .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_gffd ,_ffc );};};_bcd .Logf ("\u0043\u006f\u006d\u0062\u0069\u006e\u0069\u006e\u0067\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063e\u0020\u0072\u0065\u0073\u0075\u006c\u0074s\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u0057\u006fr\u0064\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_cdd ,_gffd );_gga ,_bdfa :=CombinePNGFiles (_cdd ,_gffd );if _fc .IsNotExist (_bdfa ){_bcd .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_gga {_bcd .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");};_bcd .Logf ("Cr\u0065\u0061t\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065 \u0064\u0069\u0066\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020M\u0053 \u0057\u006f\u0072\u0064\u0020\u0025\u0073\u0020a\u006ed\u0020\u0025s",_cdd ,_gffd );_gga ,_ddb ,_dbb ,_ea ,_bdfa :=CreatePNGDiff (_cdd ,_gffd );if _bdfa !=nil &&_bdfa !=ErrImageSizeNotMatch {_bcd .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_bdfa );};if _gga {_bcd .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_ddb );_bcd .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_dbb );_bcd .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_ea );_febe :=_ed .Base (_ddb );if _dfgd ,_efc :=currentHashMap .Read (_febe );_efc {if _dfgd .DiffPercent < _dbb ||_dfgd .DiffTotal < _ea {_bcd .Fatalf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_dbb ,_ea );};};_bab ,_gefe :=HashFile (_ddb );_ab .NoError (_bcd ,_gefe );_ceg :=ReferenceEntry {Timestamp :_ca .Now ().UTC ().Unix (),Value :_bab ,ResultSize :_fbf (_bcd ,_ddb ),DiffPercent :_dbb ,DiffTotal :_ea };currentHashMap .Write (_febe ,_ceg );if _gefe =refFile .Update (currentHashMap );_gefe !=nil {_bcd .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gefe );};};};continue ;};_bcd .Run (_fe .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_fee ),func (_caf *_gf .T ){_caf .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_aga ,_cdd );_aefa ,_aag :=ComparePNGFiles (_aga ,_cdd );if _fc .IsNotExist (_aag ){_caf .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_aefa {_caf .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");};});};});};func CopyFile (src ,dst string )error {_efd ,_dd :=_fc .Open (src );if _dd !=nil {return _dd ;};defer _efd .Close ();_da ,_dd :=_fc .Create (dst );if _dd !=nil {return _dd ;};defer _da .Close ();_ ,_dd =_ge .Copy (_da ,_efd );return _dd ;};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;Invalid bool `json:"markedInvalid,omitempty"`;};func _fecf (_agga *_f .RGBA ,_ggb string ,_afdd string ,_accd ,_caca int )error {_bdf ,_fg :=_eb .ReadFile (_ggb );if _fg !=nil {return _fg ;};_dgc ,_fg :=_bf .Parse (_bdf );if _fg !=nil {return _fg ;};_aba ,_fg :=_bf .NewFace (_dgc ,&_bf .FaceOptions {Size :18,DPI :72,Hinting :_bad .HintingNone });if _fg !=nil {return _fg ;};_cfbd :=&_bad .Drawer {Dst :_agga ,Src :_f .NewUniform (_bd .RGBA {200,100,0,255}),Face :_aba ,Dot :_cf .P (_accd ,_caca )};_cfbd .DrawString (_afdd );return nil ;};var (ErrRenderNotSupported =_gc .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");ErrImageSizeNotMatch =_gc .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_cea :=_c .LookPath ("\u0067\u0073");_cea !=nil {return ErrRenderNotSupported ;};return _c .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_fe .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();};func (_eg *ReferenceMap )Write (key string ,entry ReferenceEntry ){_eg .Lock ();defer _eg .Unlock ();if _eg ._af ==nil {_eg ._af =map[string ]ReferenceEntry {};};_eg ._af [key ]=entry ;};