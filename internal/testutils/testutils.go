//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_ge "crypto/md5";_e "encoding/hex";_aa "encoding/json";_fd "errors";_ca "fmt";_fc "github.com/stretchr/testify/require";_fcd "golang.org/x/image/font";_gg "golang.org/x/image/font/opentype";_dg "golang.org/x/image/math/fixed";_fa "image";_ad "image/color";_c "image/draw";_af "image/png";_g "io";_f "io/ioutil";_dd "math";_gbg "os";_bb "os/exec";_fe "path/filepath";_b "strings";_gb "sync";_d "testing";_fab "time";);func (_ac *ReferenceFile )updateMap (_cc *ReferenceMap )int {var _bc int ;if _ac .Map ._fbe ==nil {_ac .Map ._fbe =map[string ]ReferenceEntry {};};for _ff ,_bcf :=range _cc ._fbe {_ggg ,_bcg :=_ac .Map ._fbe [_ff ];if !_bcg {_ac .Map ._fbe [_ff ]=_bcf ;_bc ++;continue ;};if string (_ggg .Value )!=string (_bcf .Value ){_ac .Map ._fbe [_ff ]=_bcf ;_bc ++;};};for _be :=range _ac .Map ._fbe {if _ ,_fg :=_cc ._fbe [_be ];!_fg {delete (_ac .Map ._fbe ,_be );_bc ++;};};return _bc ;};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_agc ,_fbea :=HashFile (file1 );if _fbea !=nil {return false ,_fbea ;};_ddg ,_fbea :=HashFile (file2 );if _fbea !=nil {return false ,_fbea ;};if _agc ==_ddg {return true ,nil ;};_cac ,_fbea :=ReadPNG (file1 );if _fbea !=nil {return false ,_fbea ;};_gc ,_fbea :=ReadPNG (file2 );if _fbea !=nil {return false ,_fbea ;};if _cac .Bounds ()!=_gc .Bounds (){return false ,nil ;};return CompareImages (_cac ,_gc );};func (_ae *ReferenceFile )Update (currentMap *ReferenceMap )error {if _ae ._ee ==""{return nil ;};_fb :=_ae .updateMap (currentMap );if _fb ==0{return nil ;};_ce ,_bg :=_gbg .OpenFile (_ae ._ee ,_gbg .O_CREATE |_gbg .O_TRUNC |_gbg .O_WRONLY ,0664);if _bg !=nil {return _bg ;};defer _ce .Close ();_ae .Timestamp =_fab .Now ().UTC ();_de :=_aa .NewEncoder (_ce );_de .SetIndent ("","\u0009");return _de .Encode (_ae );};func RunRenderTest (t *_d .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){_aag :=_b .TrimSuffix (_fe .Base (pdfPath ),_fe .Ext (pdfPath ));t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_afb *_d .T ){_cbe :=_fe .Join (outputDir ,_aag );_adb :=_cbe +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _dca :=RenderPDFToPNGs (pdfPath ,0,_adb );_dca !=nil {_afb .Skip (_dca );};_affb :=_aag +"\u002em\u0073\u0077\u006f\u0072\u0064";_age :=_fe .Join (outputDir ,_affb );_ab :=_age +"\u002d%\u0064\u002e\u0070\u006e\u0067";_ccf :=false ;if saveBaseline {_add :=_fe .Dir (pdfPath );_ccad :=_fe .Join (_add ,_affb +"\u002e\u0070\u0064\u0066");if _ ,_dade :=_gbg .Stat (_ccad );_dade ==nil {_afb .Logf ("\u0052\u0065\u006e\u0064er\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064\u0020\u0050\u0044\u0046\u003a\u0020%\u0076",_ccad );if _ccfd :=RenderPDFToPNGs (_ccad ,0,_ab );_ccfd !=nil {_afb .Skip (_ccfd );};_ccf =true ;};};for _bff :=1;true ;_bff ++{_bfg :=_ca .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_cbe ,_bff );_fcf :=_fe .Join (baselineRenderPath ,_ca .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_aag ,_bff ));if _ ,_ebc :=_gbg .Stat (_bfg );_ebc !=nil {break ;};_afb .Logf ("\u0025\u0073",_fcf );if saveBaseline {_afb .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_bfg ,_fcf );_ffe :=CopyFile (_bfg ,_fcf );if _ffe !=nil {_afb .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_fcf ,_ffe );};if _ccf {_bfff :=_ca .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_age ,_bff );_fbc :=_fe .Join (baselineRenderPath ,_ca .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_affb ,_bff ));_afb .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_bfff ,_fbc );_fgb :=CopyFile (_bfff ,_fbc );if _fgb !=nil {_afb .Logf ("\u0045\u0052RO\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076\u002c \u0068\u0061\u0076\u0069n\u0067\u0020\u0064\u0069ff\u0065\u0072e\u006et\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065 \u0072\u0065s\u0075\u006c\u0074\u0073\u002c\u0020\u0075\u0073\u0065\u0020\u0070\u0072\u0065\u0076i\u006f\u0075\u0073\u0020\u0070\u0061\u0067\u0065",_fbc ,_fgb );_bfff =_ca .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_age ,_bff -1);_fbc =_fe .Join (baselineRenderPath ,_ca .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_affb ,_bff -1));if _cegc :=CopyFile (_bfff ,_fbc );_cegc !=nil {_afb .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_fbc ,_cegc );};};_afb .Logf ("\u0043\u006f\u006d\u0062\u0069\u006e\u0069\u006e\u0067\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063e\u0020\u0072\u0065\u0073\u0075\u006c\u0074s\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u0057\u006fr\u0064\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_fcf ,_fbc );_fdfe ,_fgb :=CombinePNGFiles (_fcf ,_fbc );if _gbg .IsNotExist (_fgb ){_afb .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_fdfe {_afb .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");};_afb .Logf ("Cr\u0065\u0061t\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065 \u0064\u0069\u0066\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020M\u0053 \u0057\u006f\u0072\u0064\u0020\u0025\u0073\u0020a\u006ed\u0020\u0025s",_fcf ,_fbc );_fdfe ,_ffed ,_cba ,_bcada ,_fgb :=CreatePNGDiff (_fcf ,_fbc );if _fgb !=nil &&_fgb !=ErrImageSizeNotMatch {_afb .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_fgb );};if _fdfe {_afb .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_ffed );_afb .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_cba );_afb .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_bcada );_cdf :=_fe .Base (_ffed );if _efa ,_cgb :=currentHashMap .Read (_cdf );_cgb {if _efa .DiffPercent < _cba ||_efa .DiffTotal < _bcada {_afb .Fatalf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_cba ,_bcada );};};_fcde ,_cag :=HashFile (_ffed );_fc .NoError (_afb ,_cag );_bac :=ReferenceEntry {Timestamp :_fab .Now ().UTC ().Unix (),Value :_fcde ,ResultSize :_bdec (_afb ,_ffed ),DiffPercent :_cba ,DiffTotal :_bcada };currentHashMap .Write (_cdf ,_bac );if _cag =refFile .Update (currentHashMap );_cag !=nil {_afb .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_cag );};};};continue ;};_afb .Run (_ca .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_bff ),func (_egd *_d .T ){_egd .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_bfg ,_fcf );_dag ,_gea :=ComparePNGFiles (_bfg ,_fcf );if _gbg .IsNotExist (_gea ){_egd .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_dag {_egd .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");};});};});};func CopyFile (src ,dst string )error {_bd ,_fdc :=_gbg .Open (src );if _fdc !=nil {return _fdc ;};defer _bd .Close ();_ffb ,_fdc :=_gbg .Create (dst );if _fdc !=nil {return _fdc ;};defer _ffb .Close ();_ ,_fdc =_g .Copy (_ffb ,_bd );return _fdc ;};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_bcgb ,_afe :=ReadPNG (src );if _afe !=nil {return false ,"",0,0,_afe ;};_gde ,_afe :=ReadPNG (dst );if _afe !=nil {return false ,"",0,0,_afe ;};_gfe :=_bcgb .Bounds ();_ccdg :=_gde .Bounds ();if !_fef (_gfe ,_ccdg ){return false ,"",0,0,ErrImageSizeNotMatch ;};_fbg :=_fa .NewRGBA (_fa .Rect (0,0,_gfe .Max .X ,_gfe .Max .Y ));var (_bda float64 ;_dc float64 ;);for _fbga :=_gfe .Min .Y ;_fbga < _gfe .Max .Y ;_fbga ++{for _cab :=_gfe .Min .X ;_cab < _gfe .Max .X ;_cab ++{_aff ,_fdd ,_bcaf ,_cb :=_gde .At (_cab ,_fbga ).RGBA ();_fbg .Set (_cab ,_fbga ,_ad .RGBA {uint8 (_aff ),uint8 (_fdd ),uint8 (_bcaf ),64});_caa ,_efg ,_ccb ,_eff :=_bcgb .At (_cab ,_fbga ).RGBA ();if !_aca (_bcgb .At (_cab ,_fbga ),_gde .At (_cab ,_fbga )){_fbg .Set (_cab ,_fbga ,_ad .RGBA {uint8 (_caa ),uint8 (_efg ),uint8 (_ccb ),uint8 (_eff )});_ege :=float64 (_caa )+float64 (_efg )+float64 (_ccb )+float64 (_eff )-float64 (_aff )+float64 (_fdd )+float64 (_bcaf )+float64 (_cb );_aeg :=_dd .Sqrt (_dd .Pow (_ege /float64 (_gfe .Dx ()*_gfe .Dy ()),2));_dc +=_aeg ;_bda ++;};};};_bge :=_bda /float64 (_gfe .Dx ()*_gfe .Dy ())*100;_dge :=_fe .Dir (src );_aed :=_b .TrimSuffix (_fe .Base (src ),_fe .Ext (src ));_fabf ,_afe :=_gbg .Create (_dge +"\u002f"+_aed +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");if _afe !=nil {return false ,"",0,0,_afe ;};defer _fabf .Close ();_ea :=_b .Replace (_dge ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";_afff :=_ca .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_bge );_afe =_cca (_fbg ,_ea ,_afff ,15,22);if _afe !=nil {return false ,"",0,0,_afe ;};_afff =_ca .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_dc );_afe =_cca (_fbg ,_ea ,_afff ,15,44);if _afe !=nil {return false ,"",0,0,_afe ;};if _adc :=_af .Encode (_fabf ,_fbg );_adc !=nil {return false ,"",0,0,_adc ;};return true ,_fabf .Name (),_bge ,_dc ,nil ;};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;};if dirPath ==""{return nil ,_gbg .ErrNotExist ;};_gec :=_fe .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");_gdc :=&ReferenceFile {_ee :_gec };_ggb ,_bfd :=_gbg .Open (_gec );if _fd .Is (_bfd ,_gbg .ErrNotExist )&&createEmpty {_gdc .Timestamp =_fab .Now ().UTC ();_gdc .Map =&ReferenceMap {};return _gdc ,nil ;};if _bfd !=nil {return nil ,_bfd ;};defer _ggb .Close ();if _efc :=_aa .NewDecoder (_ggb ).Decode (_gdc );_efc !=nil {if _efc .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _gdc ,nil ;};return nil ,_efc ;};return _gdc ,nil ;};func _fef (_cf ,_cae _fa .Rectangle )bool {return _cf .Min .X ==_cae .Min .X &&_cf .Min .Y ==_cae .Min .Y &&_cf .Max .X ==_cae .Max .X &&_cf .Max .Y ==_cae .Max .Y ;};func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_fbb ,_df :=ReadPNG (file1 );if _df !=nil {return false ,_df ;};_gfc ,_df :=ReadPNG (file2 );if _df !=nil {return false ,_df ;};_ceg :=_fa .Point {_fbb .Bounds ().Dx (),0};_bfb :=_fa .Rectangle {_ceg ,_ceg .Add (_gfc .Bounds ().Size ())};_bed :=_fa .Rectangle {_fa .Point {0,0},_bfb .Max };_bde :=_fa .NewRGBA (_bed );_c .Draw (_bde ,_fbb .Bounds (),_fbb ,_fa .Point {0,0},_c .Src );_c .Draw (_bde ,_bfb ,_gfc ,_fa .Point {0,0},_c .Src );_dac :=_fe .Dir (file1 );_ba :=_b .TrimSuffix (_fe .Base (file1 ),_fe .Ext (file1 ));_egc ,_df :=_gbg .Create (_dac +"\u002f"+_ba +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");if _df !=nil {return false ,_df ;};defer _egc .Close ();if _fdf :=_af .Encode (_egc ,_bde );_fdf !=nil {return false ,_fdf ;};return true ,nil ;};func (_fag *ReferenceMap )UnmarshalJSON (data []byte )error {return _aa .Unmarshal (data ,&_fag ._fbe )};func _aca (_bae ,_ga _ad .Color )bool {_bcab ,_db ,_ecf ,_dad :=_bae .RGBA ();_bdcc ,_acef ,_fca ,_bcd :=_ga .RGBA ();return _bcab ==_bdcc &&_db ==_acef &&_ecf ==_fca &&_dad ==_bcd ;};type ReferenceFile struct{Timestamp _fab .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;_ee string ;};var (ErrRenderNotSupported =_fd .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");ErrImageSizeNotMatch =_fd .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););func CompareImages (img1 ,img2 _fa .Image )(bool ,error ){_cge :=img1 .Bounds ();_ace :=0;for _ccd :=0;_ccd < _cge .Size ().X ;_ccd ++{for _aga :=0;_aga < _cge .Size ().Y ;_aga ++{_da ,_eg ,_daf ,_ :=img1 .At (_ccd ,_aga ).RGBA ();_adg ,_ec ,_bcad ,_ :=img2 .At (_ccd ,_aga ).RGBA ();if _da !=_adg ||_eg !=_ec ||_daf !=_bcad {_ace ++;};};};_daa :=float64 (_ace )/float64 (_cge .Dx ()*_cge .Dy ());if _daa > 0.0001{_ca .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_daa ,_ace );return false ,nil ;};return true ,nil ;};func (_bea *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_bea .Lock ();defer _bea .Unlock ();if _bea ._fbe ==nil {return ReferenceEntry {},false ;};_faf ,_cef :=_bea ._fbe [key ];return _faf ,_cef ;};func (_cee *ReferenceMap )MarshalJSON ()([]byte ,error ){return _aa .Marshal (_cee ._fbe )};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_fcc :=_bb .LookPath ("\u0067\u0073");_fcc !=nil {return ErrRenderNotSupported ;};return _bb .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_ca .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();};func ReadPNG (file string )(_fa .Image ,error ){_eed ,_eb :=_gbg .Open (file );if _eb !=nil {return nil ,_eb ;};defer _eed .Close ();return _af .Decode (_eed );};func _cca (_bdd *_fa .RGBA ,_gac string ,_cegd string ,_ebd ,_cfe int )error {_gae ,_ded :=_f .ReadFile (_gac );if _ded !=nil {return _ded ;};_bbd ,_ded :=_gg .Parse (_gae );if _ded !=nil {return _ded ;};_fafb ,_ded :=_gg .NewFace (_bbd ,&_gg .FaceOptions {Size :18,DPI :72,Hinting :_fcd .HintingNone });if _ded !=nil {return _ded ;};_dgf :=&_fcd .Drawer {Dst :_bdd ,Src :_fa .NewUniform (_ad .RGBA {200,100,0,255}),Face :_fafb ,Dot :_dg .P (_ebd ,_cfe )};_dgf .DrawString (_cegd );return nil ;};func (_bf *ReferenceMap )Keys ()(_gf []string ){_gf =make ([]string ,len (_bf ._fbe ));var _ggd int ;for _bca :=range _bf ._fbe {_gf [_ggd ]=_bca ;_ggd ++;};return _gf ;};type ReferenceMap struct{_gb .Mutex ;_fbe map[string ]ReferenceEntry ;};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;Invalid bool `json:"markedInvalid,omitempty"`;};func _bdec (_ebb *_d .T ,_dgfc string )int64 {_cgg ,_bbc :=_gbg .Stat (_dgfc );_fc .NoError (_ebb ,_bbc );return _cgg .Size ();};func (_dec *ReferenceMap )Len ()int {return len (_dec ._fbe )};func (_gd *ReferenceMap )Copy ()*ReferenceMap {_ef :=ReferenceMap {_fbe :make (map[string ]ReferenceEntry ,len (_gd ._fbe ))};for _bba ,_eef :=range _gd ._fbe {_ef ._fbe [_bba ]=_eef ;};return &_ef ;};func (_gbe *ReferenceMap )Write (key string ,entry ReferenceEntry ){_gbe .Lock ();defer _gbe .Unlock ();if _gbe ._fbe ==nil {_gbe ._fbe =map[string ]ReferenceEntry {};};_gbe ._fbe [key ]=entry ;};func HashFile (file string )(string ,error ){_ag ,_cd :=_gbg .Open (file );if _cd !=nil {return "",_cd ;};defer _ag .Close ();_bdc :=_ge .New ();if _ ,_cd =_g .Copy (_bdc ,_ag );_cd !=nil {return "",_cd ;};return _e .EncodeToString (_bdc .Sum (nil )),nil ;};