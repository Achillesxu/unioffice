//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_ba "crypto/md5";_b "encoding/hex";_e "encoding/json";_gb "errors";_ab "fmt";_dc "github.com/stretchr/testify/require";_cd "golang.org/x/image/font";_bc "golang.org/x/image/font/opentype";_gfc "golang.org/x/image/math/fixed";
_fbb "image";_f "image/color";_fb "image/draw";_g "image/png";_ee "io";_dg "io/ioutil";_ef "math";_c "os";_ae "os/exec";_db "path/filepath";_eb "strings";_aa "sync";_d "testing";_gf "time";);func (_aae *ReferenceMap )Write (key string ,entry ReferenceEntry ){_aae .Lock ();
defer _aae .Unlock ();if _aae ._gca ==nil {_aae ._gca =map[string ]ReferenceEntry {};};_aae ._gca [key ]=entry ;};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_bb ,_edcg :=HashFile (file1 );if _edcg !=nil {return false ,_edcg ;};_afdc ,_edcg :=HashFile (file2 );
if _edcg !=nil {return false ,_edcg ;};if _bb ==_afdc {return true ,nil ;};_fd ,_edcg :=ReadPNG (file1 );if _edcg !=nil {return false ,_edcg ;};_dggb ,_edcg :=ReadPNG (file2 );if _edcg !=nil {return false ,_edcg ;};if _fd .Bounds ()!=_dggb .Bounds (){return false ,nil ;
};return CompareImages (_fd ,_dggb );};var (ErrRenderNotSupported =_gb .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");
ErrImageSizeNotMatch =_gb .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););func HashFile (file string )(string ,error ){_df ,_gfad :=_c .Open (file );if _gfad !=nil {return "",_gfad ;
};defer _df .Close ();_edc :=_ba .New ();if _ ,_gfad =_ee .Copy (_edc ,_df );_gfad !=nil {return "",_gfad ;};return _b .EncodeToString (_edc .Sum (nil )),nil ;};func (_be *ReferenceMap )UnmarshalJSON (data []byte )error {return _e .Unmarshal (data ,&_be ._gca )};
func CopyFile (src ,dst string )error {_afb ,_abb :=_c .Open (src );if _abb !=nil {return _abb ;};defer _afb .Close ();_cbd ,_abb :=_c .Create (dst );if _abb !=nil {return _abb ;};defer _cbd .Close ();_ ,_abb =_ee .Copy (_cbd ,_afb );return _abb ;};func RunRenderTest (t *_d .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){RunRenderOfficeTest (t ,pdfPath ,outputDir ,baselineRenderPath ,saveBaseline ,currentHashMap ,refFile ,"\u002em\u0073\u0077\u006f\u0072\u0064");
};func (_acg *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_acg .Lock ();defer _acg .Unlock ();if _acg ._gca ==nil {return ReferenceEntry {},false ;};_ad ,_cg :=_acg ._gca [key ];return _ad ,_cg ;};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;
};if dirPath ==""{return nil ,_c .ErrNotExist ;};_acf :=_db .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");_bde :=&ReferenceFile {_ea :_acf };_aaea ,_de :=_c .Open (_acf );if _gb .Is (_de ,_c .ErrNotExist )&&createEmpty {_bde .Timestamp =_gf .Now ().UTC ();
_bde .Map =&ReferenceMap {};return _bde ,nil ;};if _de !=nil {return nil ,_de ;};defer _aaea .Close ();if _bcb :=_e .NewDecoder (_aaea ).Decode (_bde );_bcb !=nil {if _bcb .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _bde ,nil ;
};return nil ,_bcb ;};return _bde ,nil ;};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;
Invalid bool `json:"markedInvalid,omitempty"`;};func _ag (_ccd ,_fceb _fbb .Rectangle )bool {return _ccd .Min .X ==_fceb .Min .X &&_ccd .Min .Y ==_fceb .Min .Y &&_ccd .Max .X ==_fceb .Max .X &&_ccd .Max .Y ==_fceb .Max .Y ;};func (_cfc *ReferenceMap )Keys ()(_bga []string ){_bga =make ([]string ,len (_cfc ._gca ));
var _ed int ;for _bgb :=range _cfc ._gca {_bga [_ed ]=_bgb ;_ed ++;};return _bga ;};func CompareImages (img1 ,img2 _fbb .Image )(bool ,error ){_gg :=img1 .Bounds ();_eeg :=0;for _dgg :=0;_dgg < _gg .Size ().X ;_dgg ++{for _edb :=0;_edb < _gg .Size ().Y ;
_edb ++{_faa ,_dce ,_bgg ,_ :=img1 .At (_dgg ,_edb ).RGBA ();_bag ,_cec ,_afdf ,_ :=img2 .At (_dgg ,_edb ).RGBA ();if _faa !=_bag ||_dce !=_cec ||_bgg !=_afdf {_eeg ++;};};};_ggd :=float64 (_eeg )/float64 (_gg .Dx ()*_gg .Dy ());if _ggd > 0.0001{_ab .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_ggd ,_eeg );
return false ,nil ;};return true ,nil ;};type ReferenceFile struct{Timestamp _gf .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;_ea string ;};func (_cb *ReferenceFile )Update (currentMap *ReferenceMap )error {if _cb ._ea ==""{return nil ;
};_cdg :=_cb .updateMap (currentMap );if _cdg ==0{return nil ;};_bd ,_bg :=_c .OpenFile (_cb ._ea ,_c .O_CREATE |_c .O_TRUNC |_c .O_WRONLY ,0664);if _bg !=nil {return _bg ;};defer _bd .Close ();_cb .Timestamp =_gf .Now ().UTC ();_eaf :=_e .NewEncoder (_bd );
_eaf .SetIndent ("","\u0009");return _eaf .Encode (_cb );};func ReadPNG (file string )(_fbb .Image ,error ){_ca ,_ff :=_c .Open (file );if _ff !=nil {return nil ,_ff ;};defer _ca .Close ();return _g .Decode (_ca );};func (_dbgb *ReferenceMap )Copy ()*ReferenceMap {_bgaa :=ReferenceMap {_gca :make (map[string ]ReferenceEntry ,len (_dbgb ._gca ))};
for _fa ,_gfa :=range _dbgb ._gca {_bgaa ._gca [_fa ]=_gfa ;};return &_bgaa ;};func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_fc ,_dda :=ReadPNG (file1 );if _dda !=nil {return false ,_dda ;};_aea ,_dda :=ReadPNG (file2 );if _dda !=nil {return false ,_dda ;
};_fcf :=_fbb .Point {_fc .Bounds ().Dx (),0};_dfb :=_fbb .Rectangle {_fcf ,_fcf .Add (_aea .Bounds ().Size ())};_dgb :=_fbb .Rectangle {_fbb .Point {0,0},_dfb .Max };_cbde :=_fbb .NewRGBA (_dgb );_fb .Draw (_cbde ,_fc .Bounds (),_fc ,_fbb .Point {0,0},_fb .Src );
_fb .Draw (_cbde ,_dfb ,_aea ,_fbb .Point {0,0},_fb .Src );_bf :=_db .Dir (file1 );_bfa :=_eb .TrimSuffix (_db .Base (file1 ),_db .Ext (file1 ));_ge ,_dda :=_c .Create (_bf +"\u002f"+_bfa +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");
if _dda !=nil {return false ,_dda ;};defer _ge .Close ();if _edf :=_g .Encode (_ge ,_cbde );_edf !=nil {return false ,_edf ;};return true ,nil ;};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_eaa :=_ae .LookPath ("\u0067\u0073");
_eaa !=nil {return ErrRenderNotSupported ;};return _ae .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_ab .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();
};func _ebc (_dgeg ,_bbc _f .Color )bool {_cef ,_fe ,_ddd ,_afbg :=_dgeg .RGBA ();_egf ,_gdf ,_cbf ,_cfg :=_bbc .RGBA ();return _cef ==_egf &&_fe ==_gdf &&_ddd ==_cbf &&_afbg ==_cfg ;};func _gec (_gba *_fbb .RGBA ,_ebcb string ,_aed string ,_baf ,_afbfb int )error {_fde ,_efc :=_dg .ReadFile (_ebcb );
if _efc !=nil {return _efc ;};_ga ,_efc :=_bc .Parse (_fde );if _efc !=nil {return _efc ;};_ffd ,_efc :=_bc .NewFace (_ga ,&_bc .FaceOptions {Size :18,DPI :72,Hinting :_cd .HintingNone });if _efc !=nil {return _efc ;};_dbd :=&_cd .Drawer {Dst :_gba ,Src :_fbb .NewUniform (_f .RGBA {200,100,0,255}),Face :_ffd ,Dot :_gfc .P (_baf ,_afbfb )};
_dbd .DrawString (_aed );return nil ;};type ReferenceMap struct{_aa .Mutex ;_gca map[string ]ReferenceEntry ;};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_fff ,_gd :=ReadPNG (src );if _gd !=nil {return false ,"",0,0,_gd ;
};_fdg ,_gd :=ReadPNG (dst );if _gd !=nil {return false ,"",0,0,_gd ;};_ffe :=_fff .Bounds ();_afg :=_fdg .Bounds ();if !_ag (_ffe ,_afg ){return false ,"",0,0,ErrImageSizeNotMatch ;};_deb :=_fbb .NewRGBA (_fbb .Rect (0,0,_ffe .Max .X ,_ffe .Max .Y ));
var (_dge float64 ;_eed float64 ;);for _ggb :=_ffe .Min .Y ;_ggb < _ffe .Max .Y ;_ggb ++{for _afbf :=_ffe .Min .X ;_afbf < _ffe .Max .X ;_afbf ++{_bfg ,_gee ,_gfe ,_ddb :=_fdg .At (_afbf ,_ggb ).RGBA ();_deb .Set (_afbf ,_ggb ,_f .RGBA {uint8 (_bfg ),uint8 (_gee ),uint8 (_gfe ),64});
_gfaa ,_gdc ,_bab ,_dcf :=_fff .At (_afbf ,_ggb ).RGBA ();if !_ebc (_fff .At (_afbf ,_ggb ),_fdg .At (_afbf ,_ggb )){_deb .Set (_afbf ,_ggb ,_f .RGBA {uint8 (_gfaa ),uint8 (_gdc ),uint8 (_bab ),uint8 (_dcf )});_cbg :=float64 (_gfaa )+float64 (_gdc )+float64 (_bab )+float64 (_dcf )-float64 (_bfg )+float64 (_gee )+float64 (_gfe )+float64 (_ddb );
_bgf :=_ef .Sqrt (_ef .Pow (_cbg /float64 (_ffe .Dx ()*_ffe .Dy ()),2));_eed +=_bgf ;_dge ++;};};};_cgb :=_dge /float64 (_ffe .Dx ()*_ffe .Dy ())*100;_fg :=_db .Dir (src );_bff :=_eb .TrimSuffix (_db .Base (src ),_db .Ext (src ));_fce ,_gd :=_c .Create (_fg +"\u002f"+_bff +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");
if _gd !=nil {return false ,"",0,0,_gd ;};defer _fce .Close ();_gbf :=_eb .Replace (_fg ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";_abf :=_ab .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_cgb );
_gd =_gec (_deb ,_gbf ,_abf ,15,22);if _gd !=nil {return false ,"",0,0,_gd ;};_abf =_ab .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_eed );_gd =_gec (_deb ,_gbf ,_abf ,15,44);if _gd !=nil {return false ,"",0,0,_gd ;
};if _eg :=_g .Encode (_fce ,_deb );_eg !=nil {return false ,"",0,0,_eg ;};return true ,_fce .Name (),_cgb ,_eed ,nil ;};func _bbb (_afa *_d .T ,_ecb string )int64 {_eda ,_dgd :=_c .Stat (_ecb );_dc .NoError (_afa ,_dgd );return _eda .Size ();};func (_ac *ReferenceMap )MarshalJSON ()([]byte ,error ){return _e .Marshal (_ac ._gca )};
func (_cf *ReferenceFile )updateMap (_gc *ReferenceMap )int {var _abg int ;if _cf .Map ._gca ==nil {_cf .Map ._gca =map[string ]ReferenceEntry {};};for _ce ,_abga :=range _gc ._gca {_cc ,_af :=_cf .Map ._gca [_ce ];if !_af {_cf .Map ._gca [_ce ]=_abga ;
_abg ++;continue ;};if string (_cc .Value )!=string (_abga .Value ){_cf .Map ._gca [_ce ]=_abga ;_abg ++;};};for _efd :=range _cf .Map ._gca {if _ ,_fbg :=_gc ._gca [_efd ];!_fbg {delete (_cf .Map ._gca ,_efd );_abg ++;};};return _abg ;};func (_dbg *ReferenceMap )Len ()int {return len (_dbg ._gca )};
func RunRenderOfficeTest (t *_d .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ,postfix string ){_ega :=_eb .TrimSuffix (_db .Base (pdfPath ),_db .Ext (pdfPath ));t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_bee *_d .T ){_faf :=_db .Join (outputDir ,_ega );
_cbgb :=_faf +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _dfe :=RenderPDFToPNGs (pdfPath ,0,_cbgb );_dfe !=nil {_bee .Skip (_dfe );};_ccc :=_ega +postfix ;_bce :=_db .Join (outputDir ,_ccc );_dfbf :=_bce +"\u002d%\u0064\u002e\u0070\u006e\u0067";_gdcb :=false ;
if saveBaseline {_cccc :=_db .Dir (pdfPath );_bda :=_db .Join (_cccc ,_ccc +"\u002e\u0070\u0064\u0066");if _ ,_bgfa :=_c .Stat (_bda );_bgfa ==nil {_bee .Logf ("\u0052e\u006e\u0064\u0065\u0072\u0020\u004d\u0053\u0020\u004f\u0066\u0066i\u0063\u0065\u0020\u0050\u0044\u0046\u003a\u0020\u0025\u0076",_bda );
if _afc :=RenderPDFToPNGs (_bda ,0,_dfbf );_afc !=nil {_bee .Skip (_afc );};_gdcb =true ;};};for _ccccc :=1;true ;_ccccc ++{_geec :=_ab .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_faf ,_ccccc );_ecd :=_db .Join (baselineRenderPath ,_ab .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_ega ,_ccccc ));
if _ ,_cfcd :=_c .Stat (_geec );_cfcd !=nil {break ;};_bee .Logf ("\u0025\u0073",_ecd );if saveBaseline {_bee .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_geec ,_ecd );_eae :=CopyFile (_geec ,_ecd );if _eae !=nil {_bee .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_ecd ,_eae );
};if _gdcb {_babf :=_ab .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_bce ,_ccccc );_fgg :=_db .Join (baselineRenderPath ,_ab .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_ccc ,_ccccc ));_bee .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_babf ,_fgg );
_fcg :=CopyFile (_babf ,_fgg );if _fcg !=nil {_bee .Logf ("\u0045\u0052RO\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076\u002c \u0068\u0061\u0076\u0069n\u0067\u0020\u0064\u0069ff\u0065\u0072e\u006et\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065 \u0072\u0065s\u0075\u006c\u0074\u0073\u002c\u0020\u0075\u0073\u0065\u0020\u0070\u0072\u0065\u0076i\u006f\u0075\u0073\u0020\u0070\u0061\u0067\u0065",_fgg ,_fcg );
_babf =_ab .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_bce ,_ccccc -1);_fgg =_db .Join (baselineRenderPath ,_ab .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_ccc ,_ccccc -1));if _bed :=CopyFile (_babf ,_fgg );
_bed !=nil {_bee .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_fgg ,_bed );};};_bee .Logf ("\u0043\u006fm\u0062\u0069\u006e\u0069\u006eg\u0020\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_ecd ,_fgg );
_caf ,_fcg :=CombinePNGFiles (_ecd ,_fgg );if _c .IsNotExist (_fcg ){_bee .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_caf {_bee .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");
};_bee .Logf ("\u0043\u0072\u0065\u0061\u0074\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065\u0020\u0064\u0069\u0066f \u0055n\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075l\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u004f\u0066\u0066\u0069\u0063\u0065 \u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_ecd ,_fgg );
_caf ,_efdg ,_dfd ,_acb ,_fcg :=CreatePNGDiff (_ecd ,_fgg );if _fcg !=nil &&_fcg !=ErrImageSizeNotMatch {_bee .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_fcg );
};if _caf {_bee .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_efdg );_bee .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_dfd );_bee .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_acb );
_cce :=_db .Base (_efdg );if _eedc ,_eeb :=currentHashMap .Read (_cce );_eeb {if _eedc .DiffPercent < _dfd ||_eedc .DiffTotal < _acb {_bee .Fatalf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_dfd ,_acb );
};};_bge ,_gad :=HashFile (_efdg );_dc .NoError (_bee ,_gad );_afbgc :=ReferenceEntry {Timestamp :_gf .Now ().UTC ().Unix (),Value :_bge ,ResultSize :_bbb (_bee ,_efdg ),DiffPercent :_dfd ,DiffTotal :_acb };currentHashMap .Write (_cce ,_afbgc );if _gad =refFile .Update (currentHashMap );
_gad !=nil {_bee .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_gad );};};};continue ;};_bee .Run (_ab .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_ccccc ),func (_fafe *_d .T ){_fafe .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_geec ,_ecd );
_dea ,_dcg :=ComparePNGFiles (_geec ,_ecd );if _c .IsNotExist (_dcg ){_fafe .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_dea {_fafe .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");
};});};});};