//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package testutils ;import (_ad "crypto/md5";_fg "encoding/hex";_d "encoding/json";_fgf "errors";_bf "fmt";_aa "github.com/stretchr/testify/require";_bd "golang.org/x/image/font";_bbg "golang.org/x/image/font/opentype";_be "golang.org/x/image/math/fixed";_ff "image";_cb "image/color";_e "image/draw";_cbd "image/png";_db "io";_dd "io/ioutil";_ag "math";_de "os";_c "os/exec";_bb "path/filepath";_b "strings";_eg "sync";_f "testing";_fc "time";);func (_fdd *ReferenceMap )Read (key string )(ReferenceEntry ,bool ){_fdd .Lock ();defer _fdd .Unlock ();if _fdd ._da ==nil {return ReferenceEntry {},false ;};_aec ,_dae :=_fdd ._da [key ];return _aec ,_dae ;};func (_ca *ReferenceMap )Keys ()(_fb []string ){_fb =make ([]string ,len (_ca ._da ));var _ebc int ;for _fcg :=range _ca ._da {_fb [_ebc ]=_fcg ;_ebc ++;};return _fb ;};func ComparePNGFiles (file1 ,file2 string )(bool ,error ){_ebb ,_fcec :=HashFile (file1 );if _fcec !=nil {return false ,_fcec ;};_gbg ,_fcec :=HashFile (file2 );if _fcec !=nil {return false ,_fcec ;};if _ebb ==_gbg {return true ,nil ;};_ade ,_fcec :=ReadPNG (file1 );if _fcec !=nil {return false ,_fcec ;};_ab ,_fcec :=ReadPNG (file2 );if _fcec !=nil {return false ,_fcec ;};if _ade .Bounds ()!=_ab .Bounds (){return false ,nil ;};return CompareImages (_ade ,_ab );};func (_fe *ReferenceMap )Write (key string ,entry ReferenceEntry ){_fe .Lock ();defer _fe .Unlock ();if _fe ._da ==nil {_fe ._da =map[string ]ReferenceEntry {};};_fe ._da [key ]=entry ;};func RenderPDFToPNGs (pdfPath string ,dpi int ,outpathTpl string )error {if dpi <=0{dpi =100;};if _ ,_eef :=_c .LookPath ("\u0067\u0073");_eef !=nil {return ErrRenderNotSupported ;};return _c .Command ("\u0067\u0073","\u002d\u0073\u0044\u0045\u0056\u0049\u0043\u0045\u003d\u0070\u006e\u0067a\u006c\u0070\u0068\u0061","\u002d\u006f",outpathTpl ,_bf .Sprintf ("\u002d\u0072\u0025\u0064",dpi ),pdfPath ).Run ();};type ReferenceEntry struct{Timestamp int64 `json:"timestamp"`;Value string `json:"value"`;ResultSize int64 `json:"resultSize,omitempty"`;DiffPercent float64 `json:"diffPercent,omitempty"`;DiffTotal float64 `json:"diffValue,omitempty"`;Invalid bool `json:"markedInvalid,omitempty"`;};var (ErrRenderNotSupported =_fgf .New ("\u0072\u0065\u006e\u0064\u0065r\u0069\u006e\u0067\u0020\u0050\u0044\u0046\u0020\u0066\u0069\u006c\u0065\u0073 \u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006f\u006e\u0020\u0074\u0068\u0069\u0073\u0020\u0073\u0079\u0073\u0074\u0065m");ErrImageSizeNotMatch =_fgf .New ("\u0069\u006d\u0061ge\u0020\u0073\u0069\u007a\u0065\u0073\u0020\u0064\u006f\u006e\u0027\u0074\u0020\u006d\u0061\u0074\u0063\u0068"););func (_bdc *ReferenceMap )UnmarshalJSON (data []byte )error {return _d .Unmarshal (data ,&_bdc ._da )};func HashFile (file string )(string ,error ){_gea ,_cg :=_de .Open (file );if _cg !=nil {return "",_cg ;};defer _gea .Close ();_fgdd :=_ad .New ();if _ ,_cg =_db .Copy (_fgdd ,_gea );_cg !=nil {return "",_cg ;};return _fg .EncodeToString (_fgdd .Sum (nil )),nil ;};func (_caf *ReferenceMap )Copy ()*ReferenceMap {_bc :=ReferenceMap {_da :make (map[string ]ReferenceEntry ,len (_caf ._da ))};for _fgd ,_fcc :=range _caf ._da {_bc ._da [_fgd ]=_fcc ;};return &_bc ;};func _adf (_bfe ,_ac _ff .Rectangle )bool {return _bfe .Min .X ==_ac .Min .X &&_bfe .Min .Y ==_ac .Min .Y &&_bfe .Max .X ==_ac .Max .X &&_bfe .Max .Y ==_ac .Max .Y ;};func (_cad *ReferenceMap )MarshalJSON ()([]byte ,error ){return _d .Marshal (_cad ._da )};func ReadPNG (file string )(_ff .Image ,error ){_gb ,_cc :=_de .Open (file );if _cc !=nil {return nil ,_cc ;};defer _gb .Close ();return _cbd .Decode (_gb );};func ReadFile (dirPath ,testName string ,createEmpty bool )(*ReferenceFile ,error ){if dirPath ==""&&createEmpty {return &ReferenceFile {Map :&ReferenceMap {}},nil ;};if dirPath ==""{return nil ,_de .ErrNotExist ;};_ge :=_bb .Join (dirPath ,testName +"\u005fr\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u002e\u006a\u0073\u006f\u006e");_daf :=&ReferenceFile {_dc :_ge };_fff ,_ecb :=_de .Open (_ge );if _fgf .Is (_ecb ,_de .ErrNotExist )&&createEmpty {_daf .Timestamp =_fc .Now ().UTC ();_daf .Map =&ReferenceMap {};return _daf ,nil ;};if _ecb !=nil {return nil ,_ecb ;};defer _fff .Close ();if _fce :=_d .NewDecoder (_fff ).Decode (_daf );_fce !=nil {if _fce .Error ()=="i\u006c\u006c\u0065\u0067\u0061\u006c \u0062\u0061\u0073\u0065\u0036\u0034 \u0064\u0061\u0074\u0061\u0020\u0061\u0074 \u0069\u006e\u0070\u0075\u0074\u0020\u0062\u0079\u0074\u0065 \u0030"&&createEmpty {return _daf ,nil ;};return nil ,_fce ;};return _daf ,nil ;};func (_bec *ReferenceFile )updateMap (_egf *ReferenceMap )int {var _af int ;if _bec .Map ._da ==nil {_bec .Map ._da =map[string ]ReferenceEntry {};};for _gf ,_gd :=range _egf ._da {_ae ,_ga :=_bec .Map ._da [_gf ];if !_ga {_bec .Map ._da [_gf ]=_gd ;_af ++;continue ;};if string (_ae .Value )!=string (_gd .Value ){_bec .Map ._da [_gf ]=_gd ;_af ++;};};for _gdg :=range _bec .Map ._da {if _ ,_eb :=_egf ._da [_gdg ];!_eb {delete (_bec .Map ._da ,_gdg );_af ++;};};return _af ;};func _efg (_dfb *_ff .RGBA ,_ddf string ,_ffg string ,_bgd ,_cfa int )error {_fadg ,_cfc :=_dd .ReadFile (_ddf );if _cfc !=nil {return _cfc ;};_cgc ,_cfc :=_bbg .Parse (_fadg );if _cfc !=nil {return _cfc ;};_adaa ,_cfc :=_bbg .NewFace (_cgc ,&_bbg .FaceOptions {Size :18,DPI :72,Hinting :_bd .HintingNone });if _cfc !=nil {return _cfc ;};_fgg :=&_bd .Drawer {Dst :_dfb ,Src :_ff .NewUniform (_cb .RGBA {200,100,0,255}),Face :_adaa ,Dot :_be .P (_bgd ,_cfa )};_fgg .DrawString (_ffg );return nil ;};func _bfg (_bg ,_fbf _cb .Color )bool {_ggf ,_dbf ,_add ,_ebf :=_bg .RGBA ();_ecc ,_cf ,_caa ,_ada :=_fbf .RGBA ();return _ggf ==_ecc &&_dbf ==_cf &&_add ==_caa &&_ebf ==_ada ;};func CombinePNGFiles (file1 ,file2 string )(bool ,error ){_gfe ,_bbga :=ReadPNG (file1 );if _bbga !=nil {return false ,_bbga ;};_fccd ,_bbga :=ReadPNG (file2 );if _bbga !=nil {return false ,_bbga ;};_ecbf :=_ff .Point {_gfe .Bounds ().Dx (),0};_gg :=_ff .Rectangle {_ecbf ,_ecbf .Add (_fccd .Bounds ().Size ())};_dede :=_ff .Rectangle {_ff .Point {0,0},_gg .Max };_bbb :=_ff .NewRGBA (_dede );_e .Draw (_bbb ,_gfe .Bounds (),_gfe ,_ff .Point {0,0},_e .Src );_e .Draw (_bbb ,_gg ,_fccd ,_ff .Point {0,0},_e .Src );_ggg :=_bb .Dir (file1 );_abd :=_b .TrimSuffix (_bb .Base (file1 ),_bb .Ext (file1 ));_fge ,_bbga :=_de .Create (_ggg +"\u002f"+_abd +"\u002d\u0063\u006f\u006d\u0062\u0069\u006e\u0065\u0064\u002e\u0070\u006e\u0067");if _bbga !=nil {return false ,_bbga ;};defer _fge .Close ();if _bcd :=_cbd .Encode (_fge ,_bbb );_bcd !=nil {return false ,_bcd ;};return true ,nil ;};func (_dce *ReferenceFile )Update (currentMap *ReferenceMap )error {if _dce ._dc ==""{return nil ;};_age :=_dce .updateMap (currentMap );if _age ==0{return nil ;};_ec ,_fd :=_de .OpenFile (_dce ._dc ,_de .O_CREATE |_de .O_TRUNC |_de .O_WRONLY ,0664);if _fd !=nil {return _fd ;};defer _ec .Close ();_dce .Timestamp =_fc .Now ().UTC ();_g :=_d .NewEncoder (_ec );_g .SetIndent ("","\u0009");return _g .Encode (_dce );};func CreatePNGDiff (src ,dst string )(bool ,string ,float64 ,float64 ,error ){_cda ,_dec :=ReadPNG (src );if _dec !=nil {return false ,"",0,0,_dec ;};_aad ,_dec :=ReadPNG (dst );if _dec !=nil {return false ,"",0,0,_dec ;};_fccf :=_cda .Bounds ();_ebcb :=_aad .Bounds ();if !_adf (_fccf ,_ebcb ){return false ,"",0,0,ErrImageSizeNotMatch ;};_faf :=_ff .NewRGBA (_ff .Rect (0,0,_fccf .Max .X ,_fccf .Max .Y ));var (_fgb float64 ;_fad float64 ;);for _ef :=_fccf .Min .Y ;_ef < _fccf .Max .Y ;_ef ++{for _gc :=_fccf .Min .X ;_gc < _fccf .Max .X ;_gc ++{_ba ,_dbg ,_ce ,_dbge :=_aad .At (_gc ,_ef ).RGBA ();_faf .Set (_gc ,_ef ,_cb .RGBA {uint8 (_ba ),uint8 (_dbg ),uint8 (_ce ),64});_bbd ,_ddg ,_afff ,_adb :=_cda .At (_gc ,_ef ).RGBA ();if !_bfg (_cda .At (_gc ,_ef ),_aad .At (_gc ,_ef )){_faf .Set (_gc ,_ef ,_cb .RGBA {uint8 (_bbd ),uint8 (_ddg ),uint8 (_afff ),uint8 (_adb )});_dbc :=float64 (_bbd )+float64 (_ddg )+float64 (_afff )+float64 (_adb )-float64 (_ba )+float64 (_dbg )+float64 (_ce )+float64 (_dbge );_cgb :=_ag .Sqrt (_ag .Pow (_dbc /float64 (_fccf .Dx ()*_fccf .Dy ()),2));_fad +=_cgb ;_fgb ++;};};};_fdb :=_fgb /float64 (_fccf .Dx ()*_fccf .Dy ())*100;_agea :=_bb .Dir (src );_ceg :=_b .TrimSuffix (_bb .Base (src ),_bb .Ext (src ));_eca ,_dec :=_de .Create (_agea +"\u002f"+_ceg +"\u002dd\u0069\u0066\u0066\u002e\u0070\u006eg");if _dec !=nil {return false ,"",0,0,_dec ;};defer _eca .Close ();_fceb :=_b .Replace (_agea ,"\u0072\u0065\u006e\u0064\u0065\u0072","\u0066\u006f\u006et\u0073",1)+"\u002f\u0043\u0061l\u0069\u0062\u0072\u0069\u002e\u0074\u0074\u0066";_gdc :=_bf .Sprintf ("\u0044\u0069f\u0066\u0065\u0072e\u006e\u0063\u0065\u003a\u0020\u0025\u0066\u0025\u0025",_fdb );_dec =_efg (_faf ,_fceb ,_gdc ,15,22);if _dec !=nil {return false ,"",0,0,_dec ;};_gdc =_bf .Sprintf ("T\u006ft\u0061\u006c\u0020\u0044\u0069\u0066\u0066\u0065r\u0065\u006e\u0063\u0065: \u0025\u0066",_fad );_dec =_efg (_faf ,_fceb ,_gdc ,15,44);if _dec !=nil {return false ,"",0,0,_dec ;};if _cbf :=_cbd .Encode (_eca ,_faf );_cbf !=nil {return false ,"",0,0,_cbf ;};return true ,_eca .Name (),_fdb ,_fad ,nil ;};func (_ed *ReferenceMap )Len ()int {return len (_ed ._da )};type ReferenceMap struct{_eg .Mutex ;_da map[string ]ReferenceEntry ;};func CopyFile (src ,dst string )error {_edg ,_dg :=_de .Open (src );if _dg !=nil {return _dg ;};defer _edg .Close ();_aga ,_dg :=_de .Create (dst );if _dg !=nil {return _dg ;};defer _aga .Close ();_ ,_dg =_db .Copy (_aga ,_edg );return _dg ;};func RunRenderTest (t *_f .T ,pdfPath ,outputDir ,baselineRenderPath string ,saveBaseline bool ,currentHashMap *ReferenceMap ,refFile *ReferenceFile ){_ebd :=_b .TrimSuffix (_bb .Base (pdfPath ),_bb .Ext (pdfPath ));t .Run ("\u0072\u0065\u006e\u0064\u0065\u0072",func (_eda *_f .T ){_fade :=_bb .Join (outputDir ,_ebd );_ea :=_fade +"\u002d%\u0064\u002e\u0070\u006e\u0067";if _cadb :=RenderPDFToPNGs (pdfPath ,0,_ea );_cadb !=nil {_eda .Skip (_cadb );};_fcgc :=_ebd +"\u002em\u0073\u0077\u006f\u0072\u0064";_aeb :=_bb .Join (outputDir ,_fcgc );_cfd :=_aeb +"\u002d%\u0064\u002e\u0070\u006e\u0067";_ffd :=false ;if saveBaseline {_fafd :=_bb .Dir (pdfPath );_adde :=_bb .Join (_fafd ,_fcgc +"\u002e\u0070\u0064\u0066");if _ ,_bdd :=_de .Stat (_adde );_bdd ==nil {_eda .Logf ("\u0052\u0065\u006e\u0064er\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064\u0020\u0050\u0044\u0046\u003a\u0020%\u0076",_adde );if _aba :=RenderPDFToPNGs (_adde ,0,_cfd );_aba !=nil {_eda .Skip (_aba );};_ffd =true ;};};for _eag :=1;true ;_eag ++{_ceb :=_bf .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_fade ,_eag );_ecg :=_bb .Join (baselineRenderPath ,_bf .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_ebd ,_eag ));if _ ,_dca :=_de .Stat (_ceb );_dca !=nil {break ;};_eda .Logf ("\u0025\u0073",_ecg );if saveBaseline {_eda .Logf ("\u0043\u006fp\u0079\u0069\u006eg\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_ceb ,_ecg );_gcb :=CopyFile (_ceb ,_ecg );if _gcb !=nil {_eda .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_ecg ,_gcb );};if _ffd {_ccc :=_bf .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_aeb ,_eag );_afc :=_bb .Join (baselineRenderPath ,_bf .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_fcgc ,_eag ));_eda .Logf ("\u0043\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u004d\u0053\u0020\u0057\u006f\u0072\u0064 \u0072e\u0073\u0075\u006c\u0074\u0073\u0020\u0025\u0073\u0020\u002d\u003e\u0020\u0025\u0073",_ccc ,_afc );_aaa :=CopyFile (_ccc ,_afc );if _aaa !=nil {_eda .Logf ("\u0045\u0052RO\u0052\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076\u002c \u0068\u0061\u0076\u0069n\u0067\u0020\u0064\u0069ff\u0065\u0072e\u006et\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065 \u0072\u0065s\u0075\u006c\u0074\u0073\u002c\u0020\u0075\u0073\u0065\u0020\u0070\u0072\u0065\u0076i\u006f\u0075\u0073\u0020\u0070\u0061\u0067\u0065",_afc ,_aaa );_ccc =_bf .Sprintf ("\u0025s\u002d\u0025\u0064\u002e\u0070\u006eg",_aeb ,_eag -1);_afc =_bb .Join (baselineRenderPath ,_bf .Sprintf ("\u0025\u0073\u002d\u0025\u0064\u005f\u0065\u0078\u0070\u002e\u0070\u006e\u0067",_fcgc ,_eag -1));if _cdg :=CopyFile (_ccc ,_afc );_cdg !=nil {_eda .Fatalf ("\u0045\u0052\u0052OR\u0020\u0063\u006f\u0070\u0079\u0069\u006e\u0067\u0020\u0074\u006f\u0020\u0025\u0073\u003a\u0020\u0025\u0076",_afc ,_cdg );};};_eda .Logf ("\u0043\u006f\u006d\u0062\u0069\u006e\u0069\u006e\u0067\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063e\u0020\u0072\u0065\u0073\u0075\u006c\u0074s\u0020\u0077\u0069\u0074\u0068\u0020\u004d\u0053\u0020\u0057\u006fr\u0064\u0020\u0025\u0073\u0020\u0061\u006e\u0064\u0020\u0025\u0073",_ecg ,_afc );_aae ,_aaa :=CombinePNGFiles (_ecg ,_afc );if _de .IsNotExist (_aaa ){_eda .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_aae {_eda .Fatal ("\u0055n\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0063\u006f\u006db\u0069\u006e\u0065\u0020\u0069\u006d\u0061\u0067\u0065\u0073");};_eda .Logf ("Cr\u0065\u0061t\u0069\u006e\u0067\u0020\u0069\u006d\u0061\u0067\u0065 \u0064\u0069\u0066\u0066\u0020\u0055\u006e\u0069\u004f\u0066\u0066\u0069\u0063\u0065\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0077\u0069\u0074\u0068\u0020M\u0053 \u0057\u006f\u0072\u0064\u0020\u0025\u0073\u0020a\u006ed\u0020\u0025s",_ecg ,_afc );_aae ,_agf ,_dfd ,_gac ,_aaa :=CreatePNGDiff (_ecg ,_afc );if _aaa !=nil &&_aaa !=ErrImageSizeNotMatch {_eda .Fatalf ("\u0045\u0072\u0072\u006fr\u0020\u006f\u006e\u0020\u0063\u0072\u0065\u0061\u0074\u0065 \u0050N\u0047\u0020\u0044\u0069\u0066\u0066\u003a \u0025\u0076",_aaa );};if _aae {_eda .Logf ("\u0049\u006d\u0061\u0067\u0065\u003a\u0020\u0025\u0073\u000a",_agf );_eda .Logf ("D\u0069\u0066\u0066\u0020Pe\u0072c\u0065\u006e\u0074\u003a\u0020%\u0032\u002e\u0066\u0025\u0025\u000a",_dfd );_eda .Logf ("\u0044i\u0066f\u0020\u0054\u006f\u0074\u0061\u006c\u003a\u0020\u0025\u0066\u000a",_gac );_fafa :=_bb .Base (_agf );if _bba ,_gdgc :=currentHashMap .Read (_fafa );_gdgc {if _bba .DiffPercent < _dfd ||_bba .DiffTotal < _gac {_eda .Fatalf ("\u004e\u0065\u0077\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0073\u0020\u0068\u0061\u0076\u0069\u006e\u0067 h\u0069g\u0068\u0065\u0072\u0020\u0064\u0069\u0066\u0066\u0065\u0072\u0065\u006ec\u0065\u0020\u0070\u0065\u0072\u0063\u0065\u006e\u0074\u003a\u0020\u0025\u0066\u0020\u0061\u006e\u0064 \u0074\u006f\u0074\u0061\u006c\u0020\u0025\u0066\u000a",_dfd ,_gac );};};_dcf ,_bee :=HashFile (_agf );_aa .NoError (_eda ,_bee );_aef :=ReferenceEntry {Timestamp :_fc .Now ().UTC ().Unix (),Value :_dcf ,ResultSize :_adac (_eda ,_agf ),DiffPercent :_dfd ,DiffTotal :_gac };currentHashMap .Write (_fafa ,_aef );if _bee =refFile .Update (currentHashMap );_bee !=nil {_eda .Logf ("\u0055\u0070\u0064\u0061\u0074\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e\u0020f\u0069\u006c\u0065\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0076",_bee );};};};continue ;};_eda .Run (_bf .Sprintf ("\u0070\u0061\u0067\u0065\u0025\u0064",_eag ),func (_fcd *_f .T ){_fcd .Logf ("\u0043o\u006dp\u0061\u0072\u0069\u006e\u0067 \u0025\u0073 \u0076\u0073\u0020\u0025\u0073",_ceb ,_ecg );_baa ,_cfde :=ComparePNGFiles (_ceb ,_ecg );if _de .IsNotExist (_cfde ){_fcd .Fatal ("\u0069m\u0061g\u0065\u0020\u0066\u0069\u006ce\u0020\u006di\u0073\u0073\u0069\u006e\u0067");}else if !_baa {_fcd .Fatal ("\u0077\u0072\u006f\u006eg \u0070\u0061\u0067\u0065\u0020\u0072\u0065\u006e\u0064\u0065\u0072\u0065\u0064");};});};});};type ReferenceFile struct{Timestamp _fc .Time `json:"timestamp"`;Map *ReferenceMap `json:"map,omitempty"`;_dc string ;};func _adac (_cff *_f .T ,_bdcd string )int64 {_fddd ,_abf :=_de .Stat (_bdcd );_aa .NoError (_cff ,_abf );return _fddd .Size ();};func CompareImages (img1 ,img2 _ff .Image )(bool ,error ){_gde :=img1 .Bounds ();_bca :=0;for _cd :=0;_cd < _gde .Size ().X ;_cd ++{for _fa :=0;_fa < _gde .Size ().Y ;_fa ++{_aff ,_df ,_agef ,_ :=img1 .At (_cd ,_fa ).RGBA ();_adc ,_bce ,_afe ,_ :=img2 .At (_cd ,_fa ).RGBA ();if _aff !=_adc ||_df !=_bce ||_agef !=_afe {_bca ++;};};};_bed :=float64 (_bca )/float64 (_gde .Dx ()*_gde .Dy ());if _bed > 0.0001{_bf .Printf ("\u0064\u0069\u0066f \u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u003a\u0020\u0025\u0076\u0020\u0028\u0025\u0064\u0029\u000a",_bed ,_bca );return false ,nil ;};return true ,nil ;};