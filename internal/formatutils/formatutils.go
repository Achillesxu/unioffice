//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package formatutils ;import (_f "fmt";_c "github.com/unidoc/unioffice/schema/soo/wml";_d "strconv";_a "strings";);func _fac (_cc string )(_gg []string ){for _ca :=0;_ca < len (_cc )-2;_ca ++{if string (_cc [_ca ])=="\u0025"{if !_a .Contains (string (_cc [_ca +2:]),"\u0025"){if _ca ==0{_gg =append (_gg ,_f .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073",string (_cc [_ca ]),string (_cc [_ca +1]),string (_cc [_ca +2:])));
}else {_gg =append (_gg ,_f .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073\u0025\u0073",string (_cc [_ca -1]),string (_cc [_ca ]),string (_cc [_ca +1]),string (_cc [_ca +2:])));};}else {_gg =append (_gg ,_f .Sprintf ("\u0025\u0073\u0025\u0073\u0025\u0073",string (_cc [_ca ]),string (_cc [_ca +1]),string (_cc [_ca +2])));
};};};return ;};func FormatNumberingText (currentNumber int64 ,ilvl int64 ,lvlText string ,numFmt *_c .CT_NumFmt ,levelNumbers map[int64 ]int64 )string {_af :=_fac (lvlText );_fe :=_eb (currentNumber ,numFmt );_gc :=int64 (0);for _e ,_fa :=range _af {_aff :=_f .Sprintf ("\u0025\u0025\u0025\u0064",_e +1);
if len (_af )==1{_aff =_f .Sprintf ("\u0025\u0025\u0025\u0064",ilvl +1);_af [_e ]=_a .Replace (_fa ,_aff ,_fe ,1);break ;};if ilvl > 0&&ilvl > _gc &&_e < (len (_af )-1){_cg :=_eb (levelNumbers [_gc ],numFmt );_af [_e ]=_a .Replace (_fa ,_aff ,_cg ,1);_gc ++;
}else {_af [_e ]=_a .Replace (_fa ,_aff ,_fe ,1);};};return _a .Join (_af ,"");};var (_ea =[]string {"","\u0049","\u0049\u0049","\u0049\u0049\u0049","\u0049\u0056","\u0056","\u0056\u0049","\u0056\u0049\u0049","\u0056\u0049\u0049\u0049","\u0049\u0058"};
_da =[]string {"","\u0058","\u0058\u0058","\u0058\u0058\u0058","\u0058\u004c","\u004c","\u004c\u0058","\u004c\u0058\u0058","\u004c\u0058\u0058\u0058","\u0058\u0043"};_ef =[]string {"","\u0043","\u0043\u0043","\u0043\u0043\u0043","\u0043\u0044","\u0044","\u0044\u0043","\u0044\u0043\u0043","\u0044\u0043\u0043\u0043","\u0043\u004d","\u004d"};
_db =[]string {"","\u004d","\u004d\u004d","\u004d\u004d\u004d","\u004d\u004d\u004d\u004d","\u004d\u004d\u004dM\u004d","\u004d\u004d\u004d\u004d\u004d\u004d","\u004dM\u004d\u004d\u004d\u004d\u004d","\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d","\u004dM\u004d\u004d\u004d\u004d\u004d\u004dM","\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d\u004d"};
_fg =[]string {"\u006f\u006e\u0065","\u0074\u0077\u006f","\u0074\u0068\u0072e\u0065","\u0066\u006f\u0075\u0072","\u0066\u0069\u0076\u0065","\u0073\u0069\u0078","\u0073\u0065\u0076e\u006e","\u0065\u0069\u0067h\u0074","\u006e\u0069\u006e\u0065","\u0074\u0065\u006e","\u0065\u006c\u0065\u0076\u0065\u006e","\u0074\u0077\u0065\u006c\u0076\u0065","\u0074\u0068\u0069\u0072\u0074\u0065\u0065\u006e","\u0066\u006f\u0075\u0072\u0074\u0065\u0065\u006e","\u0066i\u0066\u0074\u0065\u0065\u006e","\u0073i\u0078\u0074\u0065\u0065\u006e","\u0073e\u0076\u0065\u006e\u0074\u0065\u0065n","\u0065\u0069\u0067\u0068\u0074\u0065\u0065\u006e","\u006e\u0069\u006e\u0065\u0074\u0065\u0065\u006e"};
_ac =[]string {"\u0074\u0065\u006e","\u0074\u0077\u0065\u006e\u0074\u0079","\u0074\u0068\u0069\u0072\u0074\u0079","\u0066\u006f\u0072t\u0079","\u0066\u0069\u0066t\u0079","\u0073\u0069\u0078t\u0079","\u0073e\u0076\u0065\u006e\u0074\u0079","\u0065\u0069\u0067\u0068\u0074\u0079","\u006e\u0069\u006e\u0065\u0074\u0079"};
_ae =[]string {"\u0066\u0069\u0072s\u0074","\u0073\u0065\u0063\u006f\u006e\u0064","\u0074\u0068\u0069r\u0064","\u0066\u006f\u0075\u0072\u0074\u0068","\u0066\u0069\u0066t\u0068","\u0073\u0069\u0078t\u0068","\u0073e\u0076\u0065\u006e\u0074\u0068","\u0065\u0069\u0067\u0068\u0074\u0068","\u006e\u0069\u006et\u0068","\u0074\u0065\u006et\u0068","\u0065\u006c\u0065\u0076\u0065\u006e\u0074\u0068","\u0074w\u0065\u006c\u0066\u0074\u0068","\u0074\u0068\u0069\u0072\u0074\u0065\u0065\u006e\u0074\u0068","\u0066\u006f\u0075\u0072\u0074\u0065\u0065\u006e\u0074\u0068","\u0066i\u0066\u0074\u0065\u0065\u006e\u0074h","\u0073i\u0078\u0074\u0065\u0065\u006e\u0074h","s\u0065\u0076\u0065\u006e\u0074\u0065\u0065\u006e\u0074\u0068","\u0065\u0069\u0067\u0068\u0074\u0065\u0065\u006e\u0074\u0068","\u006e\u0069\u006e\u0065\u0074\u0065\u0065\u006e\u0074\u0068"};
_b =[]string {"\u0074\u0065\u006et\u0068","\u0074w\u0065\u006e\u0074\u0069\u0065\u0074h","\u0074h\u0069\u0072\u0074\u0069\u0065\u0074h","\u0066\u006f\u0072\u0074\u0069\u0065\u0074\u0068","\u0066\u0069\u0066\u0074\u0069\u0065\u0074\u0068","\u0073\u0069\u0078\u0074\u0069\u0065\u0074\u0068","\u0073\u0065\u0076\u0065\u006e\u0074\u0069\u0065\u0074\u0068","\u0065i\u0067\u0068\u0074\u0069\u0065\u0074h","\u006ei\u006e\u0065\u0074\u0069\u0065\u0074h"};
_ff ="\u0041\u0042\u0043\u0044\u0045\u0046\u0047\u0048\u0049\u004a\u004bL\u004d\u004e\u004f\u0050\u0051\u0052\u0053\u0054\u0055\u0056W\u0058\u0059\u005a";);func _eb (_cb int64 ,_gd *_c .CT_NumFmt )(_ag string ){if _gd ==nil {return ;};_cd :=_gd .ValAttr ;
switch _cd {case _c .ST_NumberFormatNone :_ag ="";case _c .ST_NumberFormatDecimal :_ag =_d .Itoa (int (_cb ));case _c .ST_NumberFormatDecimalZero :_ag =_d .Itoa (int (_cb ));if _cb < 10{_ag ="\u0030"+_ag ;};case _c .ST_NumberFormatUpperRoman :var (_fd =_cb %10;
_dd =(_cb %100)/10;_aa =(_cb %1000)/100;_fc =_cb /1000;);_ag =_db [_fc ]+_ef [_aa ]+_da [_dd ]+_ea [_fd ];case _c .ST_NumberFormatLowerRoman :var (_cbb =_cb %10;_aae =(_cb %100)/10;_ec =(_cb %1000)/100;_cge =_cb /1000;);_ag =_db [_cge ]+_ef [_ec ]+_da [_aae ]+_ea [_cbb ];
_ag =_a .ToLower (_ag );case _c .ST_NumberFormatUpperLetter :_ba :=_cb %780;if _ba ==0{_ba =780;};_gcf :=(_ba -1)/26;_de :=(_ba -1)%26;_ddg :=_ff [_gcf +_de ];_ag =string (_ddg );case _c .ST_NumberFormatLowerLetter :_fb :=_cb %780;if _fb ==0{_fb =780;};
_ga :=(_fb -1)/26;_dc :=(_fb -1)%26;_gda :=_ff [_ga +_dc ];_ag =_a .ToLower (string (_gda ));default:_ag ="";};return ;};func StringToNumbers (str string )(int ,bool ){_dbe :=0;_aec :=false ;for _ ,_cdc :=range []byte (str ){_cdc -='0';if _cdc > 9{continue ;
};_dbe =_dbe *10+int (_cdc );_aec =true ;};return _dbe ,_aec ;};