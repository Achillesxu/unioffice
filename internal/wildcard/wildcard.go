//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_a :=make ([]rune ,0,len (name ));_b :=make ([]rune ,0,len (pattern ));for _ ,_ab :=range name {_a =append (_a ,_ab );
};for _ ,_ac :=range pattern {_b =append (_b ,_ac );};_bg :=true ;return _gd (_a ,_b ,_bg );};func _gd (_fa ,_ef []rune ,_fc bool )bool {for len (_ef )> 0{switch _ef [0]{default:if len (_fa )==0||_fa [0]!=_ef [0]{return false ;};case '?':if len (_fa )==0&&!_fc {return false ;
};case '*':return _gd (_fa ,_ef [1:],_fc )||(len (_fa )> 0&&_gd (_fa [1:],_ef ,_fc ));};_fa =_fa [1:];_ef =_ef [1:];};return len (_fa )==0&&len (_ef )==0;};func _fcd (_bcf ,_eg []rune ,_cbd int )int {for len (_eg )> 0{switch _eg [0]{default:if len (_bcf )==0{return -1;
};if _bcf [0]!=_eg [0]{return _fcd (_bcf [1:],_eg ,_cbd +1);};case '?':if len (_bcf )==0{return -1;};case '*':if len (_bcf )==0{return -1;};_dc :=_fcd (_bcf ,_eg [1:],_cbd );if _dc !=-1{return _cbd ;}else {_dc =_fcd (_bcf [1:],_eg ,_cbd );if _dc !=-1{return _cbd ;
}else {return -1;};};};_bcf =_bcf [1:];_eg =_eg [1:];};return _cbd ;};func Index (pattern ,name string )(_bgd int ){if pattern ==""||pattern =="\u002a"{return 0;};_bb :=make ([]rune ,0,len (name ));_bc :=make ([]rune ,0,len (pattern ));for _ ,_d :=range name {_bb =append (_bb ,_d );
};for _ ,_cc :=range pattern {_bc =append (_bc ,_cc );};return _fcd (_bb ,_bc ,0);};func Match (pattern ,name string )(_g bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_e :=make ([]rune ,0,len (name ));_fba :=make ([]rune ,0,len (pattern ));
for _ ,_c :=range name {_e =append (_e ,_c );};for _ ,_aa :=range pattern {_fba =append (_fba ,_aa );};_af :=false ;return _gd (_e ,_fba ,_af );};