//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func _gd (_gfff ,_cg []rune ,_ee int )int {for len (_cg )> 0{switch _cg [0]{default:if len (_gfff )==0{return -1;};if _gfff [0]!=_cg [0]{return _gd (_gfff [1:],_cg ,_ee +1);};case '?':if len (_gfff )==0{return -1;};case '*':if len (_gfff )==0{return -1;};_cd :=_gd (_gfff ,_cg [1:],_ee );if _cd !=-1{return _ee ;}else {_cd =_gd (_gfff [1:],_cg ,_ee );if _cd !=-1{return _ee ;}else {return -1;};};};_gfff =_gfff [1:];_cg =_cg [1:];};return _ee ;};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_f :=make ([]rune ,0,len (name ));_fc :=make ([]rune ,0,len (pattern ));for _ ,_fe :=range name {_f =append (_f ,_fe );};for _ ,_c :=range pattern {_fc =append (_fc ,_c );};_d :=true ;return _e (_f ,_fc ,_d );};func Match (pattern ,name string )(_ba bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_bd :=make ([]rune ,0,len (name ));_da :=make ([]rune ,0,len (pattern ));for _ ,_db :=range name {_bd =append (_bd ,_db );};for _ ,_fcf :=range pattern {_da =append (_da ,_fcf );};_bdg :=false ;return _e (_bd ,_da ,_bdg );};func _e (_ce ,_ceg []rune ,_fg bool )bool {for len (_ceg )> 0{switch _ceg [0]{default:if len (_ce )==0||_ce [0]!=_ceg [0]{return false ;};case '?':if len (_ce )==0&&!_fg {return false ;};case '*':return _e (_ce ,_ceg [1:],_fg )||(len (_ce )> 0&&_e (_ce [1:],_ceg ,_fg ));};_ce =_ce [1:];_ceg =_ceg [1:];};return len (_ce )==0&&len (_ceg )==0;};func Index (pattern ,name string )(_dba int ){if pattern ==""||pattern =="\u002a"{return 0;};_gb :=make ([]rune ,0,len (name ));_gf :=make ([]rune ,0,len (pattern ));for _ ,_fec :=range name {_gb =append (_gb ,_fec );};for _ ,_gff :=range pattern {_gf =append (_gf ,_gff );};return _gd (_gb ,_gf ,0);};