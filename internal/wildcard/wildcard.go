//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func Index (pattern ,name string )(_bg int ){if pattern ==""||pattern =="\u002a"{return 0;};_dfb :=make ([]rune ,0,len (name ));_bc :=make ([]rune ,0,len (pattern ));for _ ,_ff :=range name {_dfb =append (_dfb ,_ff );};for _ ,_edg :=range pattern {_bc =append (_bc ,_edg );};return _ffg (_dfb ,_bc ,0);};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_a :=make ([]rune ,0,len (name ));_ab :=make ([]rune ,0,len (pattern ));for _ ,_ag :=range name {_a =append (_a ,_ag );};for _ ,_ac :=range pattern {_ab =append (_ab ,_ac );};_fa :=true ;return _df (_a ,_ab ,_fa );};func _ffg (_eb ,_ede []rune ,_ad int )int {for len (_ede )> 0{switch _ede [0]{default:if len (_eb )==0{return -1;};if _eb [0]!=_ede [0]{return _ffg (_eb [1:],_ede ,_ad +1);};case '?':if len (_eb )==0{return -1;};case '*':if len (_eb )==0{return -1;};_ebd :=_ffg (_eb ,_ede [1:],_ad );if _ebd !=-1{return _ad ;}else {_ebd =_ffg (_eb [1:],_ede ,_ad );if _ebd !=-1{return _ad ;}else {return -1;};};};_eb =_eb [1:];_ede =_ede [1:];};return _ad ;};func Match (pattern ,name string )(_be bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_e :=make ([]rune ,0,len (name ));_bb :=make ([]rune ,0,len (pattern ));for _ ,_d :=range name {_e =append (_e ,_d );};for _ ,_bd :=range pattern {_bb =append (_bb ,_bd );};_fb :=false ;return _df (_e ,_bb ,_fb );};func _df (_ca ,_ed []rune ,_cc bool )bool {for len (_ed )> 0{switch _ed [0]{default:if len (_ca )==0||_ca [0]!=_ed [0]{return false ;};case '?':if len (_ca )==0&&!_cc {return false ;};case '*':return _df (_ca ,_ed [1:],_cc )||(len (_ca )> 0&&_df (_ca [1:],_ed ,_cc ));};_ca =_ca [1:];_ed =_ed [1:];};return len (_ca )==0&&len (_ed )==0;};