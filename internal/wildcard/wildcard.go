//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func _cae (_cf ,_fee []rune ,_gb bool )bool {for len (_fee )> 0{switch _fee [0]{default:if len (_cf )==0||_cf [0]!=_fee [0]{return false ;};case '?':if len (_cf )==0&&!_gb {return false ;};case '*':return _cae (_cf ,_fee [1:],_gb )||(len (_cf )> 0&&_cae (_cf [1:],_fee ,_gb ));};_cf =_cf [1:];_fee =_fee [1:];};return len (_cf )==0&&len (_fee )==0;};func Index (pattern ,name string )(_bbb int ){if pattern ==""||pattern =="\u002a"{return 0;};_ge :=make ([]rune ,0,len (name ));_df :=make ([]rune ,0,len (pattern ));for _ ,_be :=range name {_ge =append (_ge ,_be );};for _ ,_ec :=range pattern {_df =append (_df ,_ec );};return _fff (_ge ,_df ,0);};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_c :=make ([]rune ,0,len (name ));_g :=make ([]rune ,0,len (pattern ));for _ ,_e :=range name {_c =append (_c ,_e );};for _ ,_f :=range pattern {_g =append (_g ,_f );};_dg :=true ;return _cae (_c ,_g ,_dg );};func _fff (_ee ,_fa []rune ,_eb int )int {for len (_fa )> 0{switch _fa [0]{default:if len (_ee )==0{return -1;};if _ee [0]!=_fa [0]{return _fff (_ee [1:],_fa ,_eb +1);};case '?':if len (_ee )==0{return -1;};case '*':if len (_ee )==0{return -1;};_cg :=_fff (_ee ,_fa [1:],_eb );if _cg !=-1{return _eb ;}else {_cg =_fff (_ee [1:],_fa ,_eb );if _cg !=-1{return _eb ;}else {return -1;};};};_ee =_ee [1:];_fa =_fa [1:];};return _eb ;};func Match (pattern ,name string )(_fg bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_bb :=make ([]rune ,0,len (name ));_fe :=make ([]rune ,0,len (pattern ));for _ ,_ed :=range name {_bb =append (_bb ,_ed );};for _ ,_fed :=range pattern {_fe =append (_fe ,_fed );};_ff :=false ;return _cae (_bb ,_fe ,_ff );};