//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package wildcard ;func Match (pattern ,name string )(_g bool ){if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_ca :=make ([]rune ,0,len (name ));_ec :=make ([]rune ,0,len (pattern ));for _ ,_bbb :=range name {_ca =append (_ca ,_bbb );};for _ ,_gd :=range pattern {_ec =append (_ec ,_gd );};_a :=false ;return _cd (_ca ,_ec ,_a );};func _cd (_gdd ,_cb []rune ,_fd bool )bool {for len (_cb )> 0{switch _cb [0]{default:if len (_gdd )==0||_gdd [0]!=_cb [0]{return false ;};case '?':if len (_gdd )==0&&!_fd {return false ;};case '*':return _cd (_gdd ,_cb [1:],_fd )||(len (_gdd )> 0&&_cd (_gdd [1:],_cb ,_fd ));};_gdd =_gdd [1:];_cb =_cb [1:];};return len (_gdd )==0&&len (_cb )==0;};func MatchSimple (pattern ,name string )bool {if pattern ==""{return name ==pattern ;};if pattern =="\u002a"{return true ;};_d :=make ([]rune ,0,len (name ));_e :=make ([]rune ,0,len (pattern ));for _ ,_f :=range name {_d =append (_d ,_f );};for _ ,_da :=range pattern {_e =append (_e ,_da );};_bb :=true ;return _cd (_d ,_e ,_bb );};func _baf (_gf ,_gfe []rune ,_aa int )int {for len (_gfe )> 0{switch _gfe [0]{default:if len (_gf )==0{return -1;};if _gf [0]!=_gfe [0]{return _baf (_gf [1:],_gfe ,_aa +1);};case '?':if len (_gf )==0{return -1;};case '*':if len (_gf )==0{return -1;};_df :=_baf (_gf ,_gfe [1:],_aa );if _df !=-1{return _aa ;}else {_df =_baf (_gf [1:],_gfe ,_aa );if _df !=-1{return _aa ;}else {return -1;};};};_gf =_gf [1:];_gfe =_gfe [1:];};return _aa ;};func Index (pattern ,name string )(_gg int ){if pattern ==""||pattern =="\u002a"{return 0;};_ff :=make ([]rune ,0,len (name ));_db :=make ([]rune ,0,len (pattern ));for _ ,_ba :=range name {_ff =append (_ff ,_ba );};for _ ,_bg :=range pattern {_db =append (_db ,_bg );};return _baf (_ff ,_db ,0);};