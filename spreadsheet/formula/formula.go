//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_af "bytes";_b "errors";_d "fmt";_fc "github.com/unidoc/unioffice";_eg "github.com/unidoc/unioffice/internal/mergesort";_cgdc "github.com/unidoc/unioffice/internal/wildcard";_cgd "github.com/unidoc/unioffice/spreadsheet/format";_gf "github.com/unidoc/unioffice/spreadsheet/reference";_ae "github.com/unidoc/unioffice/spreadsheet/update";_c "io";_fg "math";_be "math/big";_cc "math/rand";_ga "regexp";_bc "sort";_cb "strconv";_g "strings";_f "sync";_cg "time";_a "unicode";);func (_eagd *evCache )SetCache (key string ,value Result ){_eagd ._gab .Lock ();_eagd ._aaa [key ]=value ;_eagd ._gab .Unlock ();};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dbgeg :=args [0].AsNumber ();if _dbgeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dccb :=_fg .Signbit (_dbgeg .ValueNumber );_egbbe ,_adae :=_fg .Modf (_dbgeg .ValueNumber /2);_fegc :=_egbbe *2;if _adae !=0{if !_dccb {_fegc +=2;}else {_fegc -=2;};};return MakeNumberResult (_fegc );};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Bool is a boolean expression.
type Bool struct{_eab bool };func _ddab (_adfgd []Result ,_aabf bool )(float64 ,float64 ){_acefc :=0.0;_afeg :=0.0;for _ ,_eddba :=range _adfgd {switch _eddba .Type {case ResultTypeNumber :if _aabf ||!_eddba .IsBoolean {_afeg +=_eddba .ValueNumber ;_acefc ++;};case ResultTypeList ,ResultTypeArray :_fdbgc ,_bfbbgg :=_ddab (_eddba .ListValues (),_aabf );_afeg +=_fdbgc ;_acefc +=_bfbbgg ;case ResultTypeString :if _aabf {_acefc ++;};case ResultTypeEmpty :};};return _afeg ,_acefc ;};const _fefcg =57358;var _abbae =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_dgfg ,_cdeg string };var _becae =[...]struct{_ebbb int ;_aeff int ;_cfba string ;}{};const _gbf ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bbagd :=args [0].ValueNumber ;if _bbagd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_bfdad ,_dfega :=_ccafb (args [1],args [2],"\u0058\u004e\u0050\u0056");if _dfega .Type ==ResultTypeError {return _dfega ;};_dgaa :=_bfdad ._dgdc ;_fbbae :=_bfdad ._bgdg ;_ccae :=0.0;_fbfe :=_fbbae [0];for _efecg ,_aegcg :=range _dgaa {_ccae +=_aegcg /_fg .Pow (1+_bbagd ,(_fbbae [_efecg ]-_fbfe )/365);};return MakeNumberResult (_ccae );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_abeeb :=args [0];switch _abeeb .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_dccae :=0.0;_fdafg :=0.0;for _ ,_bgda :=range _abeeb .ValueString {_acca :=0.0;switch _bgda {case 'I':_acca =1;case 'V':_acca =5;case 'X':_acca =10;case 'L':_acca =50;case 'C':_acca =100;case 'D':_acca =500;case 'M':_acca =1000;};_dccae +=_acca ;switch {case _fdafg ==_acca &&(_fdafg ==5||_fdafg ==50||_fdafg ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_fdafg ==_acca :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _fdafg < _acca {_dccae -=2*_fdafg ;};_fdafg =_acca ;};return MakeNumberResult (_dccae );case ResultTypeError :return _abeeb ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abeeb .Type ));};};func LexReader (r _c .Reader )chan *node {_dgdd :=NewLexer ();go _dgdd .lex (r );return _dgdd ._ffgc };

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdea :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eccd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbfgg :=args [2].ValueNumber ;if _fbfgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgaaf :=args [3].ValueNumber ;if _cgaaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cgaaf > _fbfgg {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_dbba :=(_gdea -_eccd )*(_fbfgg -_cgaaf +1)*2;_aadef :=_fbfgg *(_fbfgg +1);return MakeNumberResult (_dbba /_aadef );};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fdaf :=args [0].ValueNumber ;if _fdaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_bccc :=float64 (int (args [1].ValueNumber ));if _bccc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_fg .Pow (_fdaf +1,1/_bccc )-1)*_bccc );};func _da (_dec string ,_ecf uint32 )string {_beb :=_gf .ColumnToIndex (_dec );if _beb ==_ecf {return "\u0023\u0052\u0045F\u0021";}else if _beb > _ecf {return _gf .IndexToColumn (_beb -1);}else {return _dec ;};};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_cdfe :=args [0];if _cdfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbfc :=int (_cdfe .ValueNumber );if _bbfc < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_bbfc {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_bbfc ];};func _cgf (_dba BinOpType ,_fcb ,_fce []Result )Result {_gg :=[]Result {};for _bfa :=range _fcb {_eb :=_fcb [_bfa ].AsNumber ();_dcf :=_fce [_bfa ].AsNumber ();if _eb .Type !=ResultTypeNumber ||_dcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _dba {case BinOpTypePlus :_gg =append (_gg ,MakeNumberResult (_eb .ValueNumber +_dcf .ValueNumber ));case BinOpTypeMinus :_gg =append (_gg ,MakeNumberResult (_eb .ValueNumber -_dcf .ValueNumber ));case BinOpTypeMult :_gg =append (_gg ,MakeNumberResult (_eb .ValueNumber *_dcf .ValueNumber ));case BinOpTypeDiv :if _dcf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gg =append (_gg ,MakeNumberResult (_eb .ValueNumber /_dcf .ValueNumber ));case BinOpTypeExp :_gg =append (_gg ,MakeNumberResult (_fg .Pow (_eb .ValueNumber ,_dcf .ValueNumber )));case BinOpTypeLT :_gg =append (_gg ,MakeBoolResult (_eb .ValueNumber < _dcf .ValueNumber ));case BinOpTypeGT :_gg =append (_gg ,MakeBoolResult (_eb .ValueNumber > _dcf .ValueNumber ));case BinOpTypeEQ :_gg =append (_gg ,MakeBoolResult (_eb .ValueNumber ==_dcf .ValueNumber ));case BinOpTypeLEQ :_gg =append (_gg ,MakeBoolResult (_eb .ValueNumber <=_dcf .ValueNumber ));case BinOpTypeGEQ :_gg =append (_gg ,MakeBoolResult (_eb .ValueNumber >=_dcf .ValueNumber ));case BinOpTypeNE :_gg =append (_gg ,MakeBoolResult (_eb .ValueNumber !=_dcf .ValueNumber ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_dba ));};};return MakeListResult (_gg );};const _ca ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _fdeag int =30;func _aaecc (_agbf Result )bool {_acbc :=_agbf .Type ;return _acbc !=ResultTypeArray &&_acbc !=ResultTypeList ;};const _ecdgg =57355;func _gaee (_cge ,_adab _cg .Time ,_eeef int )_cg .Time {_gfbd :=_cg .Date (_cge .Year (),_adab .Month (),_adab .Day (),0,0,0,0,_cg .UTC );if _gfbd .After (_cge ){_gfbd =_gfbd .AddDate (-1,0,0);};for !_gfbd .After (_cge ){_gfbd =_gfbd .AddDate (0,12/_eeef ,0);};return _gfbd ;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_degb ,_ecgcg :=_dafaf ("\u0046\u0049\u004e\u0044",args );if _ecgcg .Type !=ResultTypeEmpty {return _ecgcg ;};_gefce :=_g .ToLower (_degb ._bdcde );_dagd :=_g .ToLower (_degb ._ccee );if _gefce ==""{return MakeNumberResult (1.0);};_agfb :=_degb ._afbe -1;_ffcbc :=1;_cbdf :=0;for _ebabd :=range _dagd {if _ebabd !=0{_cfeag :=1;if _ebabd -_cbdf > 1{_cfeag =2;};_ffcbc +=_cfeag ;};if _ffcbc > _agfb {_decdf :=_cgdc .Index (_gefce ,_dagd [_ebabd :]);if _decdf ==0{return MakeNumberResult (float64 (_ffcbc ));};};_cbdf =_ebabd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_faaga :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dedfb :=args [2].ValueNumber +1;if _dedfb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ddce :=_gadgc (args [0]);_ecbgd :=float64 (len (_ddce ));_aafg ,_bacb :=0.0,0.0;_ddfgd ,_bdbf :=1.0,1.0;_aecf ,_eada :=false ,false ;for _ ,_gbga :=range _ddce {for _ ,_ggaab :=range _gbga {if _ggaab .Type ==ResultTypeNumber &&!_ggaab .IsBoolean {_gcdc :=_ggaab .ValueNumber ;if _gcdc ==0{continue ;}else {if _gcdc > 0{_aecf =true ;_bacb +=_ggaab .ValueNumber *_bdbf ;}else {_eada =true ;_aafg +=_ggaab .ValueNumber *_ddfgd ;};_ddfgd /=_faaga ;_bdbf /=_dedfb ;};};};};if !_aecf ||!_eada {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_faac :=-_bacb /_aafg ;_faac *=_fg .Pow (_dedfb ,_ecbgd -1);_faac =_fg .Pow (_faac ,1/(_ecbgd -1));return MakeNumberResult (_faac -1);};const _debe =57377;const (_ byte =iota ;_caae ;_agce ;_eggcg ;_gbfd ;_fbdfb ;);

// Error is an error expression.
type Error struct{_edg string };

// String returns a string representation of a horizontal range with prefix.
func (_egaa PrefixHorizontalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_egaa ._dcbgd .String (),_egaa ._dgeb ,_egaa ._dedda );};func _ceabe (_cbdg ,_fdcd Result ,_geea ,_ceed bool )cmpResult {_cbdg =_cbdg .AsNumber ();_fdcd =_fdcd .AsNumber ();if _cbdg .Type !=_fdcd .Type {return _edgfb ;};if _cbdg .Type ==ResultTypeNumber {if _cbdg .ValueNumber ==_fdcd .ValueNumber {return _ccfe ;};if _cbdg .ValueNumber < _fdcd .ValueNumber {return _bcafb ;};return _fdbdf ;};if _cbdg .Type ==ResultTypeString {_gcded :=_cbdg .ValueString ;_aaaa :=_fdcd .ValueString ;if !_geea {_gcded =_g .ToLower (_gcded );_aaaa =_g .ToLower (_aaaa );};if _ceed {_afcf :=_cgdc .Match (_aaaa ,_gcded );if _afcf {return _ccfe ;}else {return _fdbdf ;};};return cmpResult (_g .Compare (_gcded ,_aaaa ));};if _cbdg .Type ==ResultTypeEmpty {return _ccfe ;};if _cbdg .Type ==ResultTypeList {if len (_cbdg .ValueList )< len (_fdcd .ValueList ){return _bcafb ;};if len (_cbdg .ValueList )> len (_fdcd .ValueList ){return _fdbdf ;};for _gcffc :=range _cbdg .ValueList {_fcdca :=_ceabe (_cbdg .ValueList [_gcffc ],_fdcd .ValueList [_gcffc ],_geea ,_ceed );if _fcdca !=_ccfe {return _fcdca ;};};return _ccfe ;};if _cbdg .Type ==ResultTypeList {if len (_cbdg .ValueArray )< len (_fdcd .ValueArray ){return _bcafb ;};if len (_cbdg .ValueArray )> len (_fdcd .ValueArray ){return _fdbdf ;};for _fcde :=range _cbdg .ValueArray {_gecf :=_cbdg .ValueArray [_fcde ];_deaf :=_cbdg .ValueArray [_fcde ];if len (_gecf )< len (_deaf ){return _bcafb ;};if len (_gecf )> len (_deaf ){return _fdbdf ;};for _aabca :=range _gecf {_cbba :=_ceabe (_gecf [_aabca ],_deaf [_aabca ],_geea ,_ceed );if _cbba !=_ccfe {return _cbba ;};};};return _ccfe ;};return _edgfb ;};const _adddd =57354;func _fdbgeb (_cegfb ,_eeae float64 )float64 {_cegfb =_fg .Trunc (_cegfb );_eeae =_fg .Trunc (_eeae );if _cegfb ==0{return _eeae ;};if _eeae ==0{return _cegfb ;};for _cegfb !=_eeae {if _cegfb > _eeae {_cegfb =_cegfb -_eeae ;}else {_eeae =_eeae -_cegfb ;};};return _cegfb ;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfcgc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agdd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcbg :=args [2].ValueNumber ;if _dcbg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_dfcgc -_agdd )/_dcbg );};

// String returns a string representation of a range with prefix.
func (_dccfc PrefixRangeExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dccfc ._caaea .String (),_dccfc ._cabc .String (),_dccfc ._gbcge .String ());};var _dbgdf =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _ffafa []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};const _dcadd =57366;

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_geeaf (args ,_bbeec ))};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_defg :=len (args );if _defg < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _defg > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cdaa :=args [0];_cbfe :=args [1];if _cbfe .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cccaf :=args [2].AsNumber ();if _cccaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gafag :=false ;if _defg ==4&&args [3].Type !=ResultTypeEmpty {_dbca :=args [3].AsNumber ();if _dbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dbca .ValueNumber ==0{_gafag =true ;};};_ffbd :=int (_cccaf .ValueNumber )-1;_bdbca :=-1;_bdba :=false ;_dbcf :for _cgdee ,_degc :=range _cbfe .ValueArray {if len (_degc )==0{continue ;};_faddd :=_degc [0];switch _ceabe (_faddd ,_cdaa ,false ,_gafag ){case _bcafb :_bdbca =_cgdee ;case _ccfe :_bdbca =_cgdee ;_bdba =true ;break _dbcf ;};};if _bdbca ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dddf :=_cbfe .ValueArray [_bdbca ];if _ffbd < 0||_ffbd >=len (_dddf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bdba ||!_gafag {return _dddf [_ffbd ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var _adddg =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func NewLexer ()*Lexer {return &Lexer {_ffgc :make (chan *node )}};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_fe :v }};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgaa :=_dfggc (args );_bc .Float64s (_fgaa );var _affd float64 ;if len (_fgaa )%2==0{_affd =(_fgaa [len (_fgaa )/2-1]+_fgaa [len (_fgaa )/2])/2;}else {_affd =_fgaa [len (_fgaa )/2];};return MakeNumberResult (_affd );};

// GetWidth returns 0 for the invalid reference context.
func (_dgeag *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Eval evaluates a range returning a list of results or an error.
func (_ddad Range )Eval (ctx Context ,ev Evaluator )Result {_aeea :=_ddad ._bdgcbd .Reference (ctx ,ev );_daaaf :=_ddad ._febfg .Reference (ctx ,ev );_fefea :=_abga (_aeea ,_daaaf );if _aeea .Type ==ReferenceTypeCell &&_daaaf .Type ==ReferenceTypeCell {if _bcdga ,_degcb :=ev .GetFromCache (_fefea );_degcb {return _bcdga ;}else {_adagd :=_dfbfg (ctx ,ev ,_aeea .Value ,_daaaf .Value );ev .SetCache (_fefea ,_adagd );return _adagd ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fefea );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gadcc :=args [0].AsNumber ();if _gadcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bcec :=10.0;if len (args )> 1{_dfeaf :=args [1].AsNumber ();if _dfeaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_bcec =args [1].ValueNumber ;};if _gadcc .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _bcec ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_fg .Log (_gadcc .ValueNumber )/_fg .Log (_bcec ));};type criteriaParsed struct{_eefb bool ;_acfca float64 ;_dfddf string ;_dbea *criteriaRegex ;};func _gd (_gdb BinOpType ,_afc []Result ,_ece Result )Result {_edfd :=[]Result {};switch _ece .Type {case ResultTypeNumber :_ac :=_ece .ValueNumber ;for _bfd :=range _afc {_gcf :=_afc [_bfd ].AsNumber ();if _gcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gdb {case BinOpTypePlus :_edfd =append (_edfd ,MakeNumberResult (_gcf .ValueNumber +_ac ));case BinOpTypeMinus :_edfd =append (_edfd ,MakeNumberResult (_gcf .ValueNumber -_ac ));case BinOpTypeMult :_edfd =append (_edfd ,MakeNumberResult (_gcf .ValueNumber *_ac ));case BinOpTypeDiv :if _ac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_edfd =append (_edfd ,MakeNumberResult (_gcf .ValueNumber /_ac ));case BinOpTypeExp :_edfd =append (_edfd ,MakeNumberResult (_fg .Pow (_gcf .ValueNumber ,_ac )));case BinOpTypeLT :_edfd =append (_edfd ,MakeBoolResult (_gcf .ValueNumber < _ac ));case BinOpTypeGT :_edfd =append (_edfd ,MakeBoolResult (_gcf .ValueNumber > _ac ));case BinOpTypeEQ :_edfd =append (_edfd ,MakeBoolResult (_gcf .ValueNumber ==_ac ));case BinOpTypeLEQ :_edfd =append (_edfd ,MakeBoolResult (_gcf .ValueNumber <=_ac ));case BinOpTypeGEQ :_edfd =append (_edfd ,MakeBoolResult (_gcf .ValueNumber >=_ac ));case BinOpTypeNE :_edfd =append (_edfd ,MakeBoolResult (_gcf .ValueNumber !=_ac ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gdb ));};};case ResultTypeString :_gb :=_ece .ValueString ;for _age :=range _afc {_gad :=_afc [_age ].AsString ();if _gad .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gdb {case BinOpTypeLT :_edfd =append (_edfd ,MakeBoolResult (_gad .ValueString < _gb ));case BinOpTypeGT :_edfd =append (_edfd ,MakeBoolResult (_gad .ValueString > _gb ));case BinOpTypeEQ :_edfd =append (_edfd ,MakeBoolResult (_gad .ValueString ==_gb ));case BinOpTypeLEQ :_edfd =append (_edfd ,MakeBoolResult (_gad .ValueString <=_gb ));case BinOpTypeGEQ :_edfd =append (_edfd ,MakeBoolResult (_gad .ValueString >=_gb ));case BinOpTypeNE :_edfd =append (_edfd ,MakeBoolResult (_gad .ValueString !=_gb ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gdb ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_edfd );};

// String returns a string representation of a horizontal range.
func (_ddac HorizontalRange )String ()string {return _ddac .horizontalRangeReference ()};

// String returns a string representation of Number.
func (_efbd Number )String ()string {return _cb .FormatFloat (_efbd ._fbeeb ,'f',-1,64)};

// Value returns a string version of the result.
func (_egfba Result )Value ()string {switch _egfba .Type {case ResultTypeNumber :_cffde :=_cb .FormatFloat (_egfba .ValueNumber ,'f',-1,64);if len (_cffde )> 12{_bageca :=12;for _bgegd :=_bageca ;_bgegd > 0&&_cffde [_bgegd ]=='0';_bgegd --{_bageca --;};_cffde =_cffde [0:_bageca +1];};return _cffde ;case ResultTypeError :return _egfba .ValueString ;case ResultTypeString :return _egfba .ValueString ;case ResultTypeList :if len (_egfba .ValueList )==0{return "";};return _egfba .ValueList [0].Value ();case ResultTypeArray :if len (_egfba .ValueArray )==0||len (_egfba .ValueArray [0])==0{return "";};return _egfba .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aeeb :=args [0].AsNumber ();if _aeeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_fdag :=float64 (1);if _aeeb .ValueNumber < 0{_fdag =-1;};if len (args )> 1{_gaff :=args [1].AsNumber ();if _gaff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdag =_gaff .ValueNumber ;};_eggb :=float64 (1);if len (args )> 2{_begc :=args [2].AsNumber ();if _begc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_eggb =_begc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_fg .Ceil (_aeeb .ValueNumber ));};_abge :=_aeeb .ValueNumber ;_abge ,_gfbg :=_fg .Modf (_abge /_fdag );if _gfbg !=0{if _aeeb .ValueNumber > 0{_abge ++;}else if _eggb < 0{_abge --;};};return MakeNumberResult (_abge *_fdag );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gafa :=ctx .GetEpoch ();_baeg ,_dgfd :=_gfff (args [0].Value (),_gafa );if _dgfd !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_baeg .Year ()));};var _bgbf =[...]int {0};type rmode byte ;type yyLexer interface{Lex (_cbbff *yySymType )int ;Error (_edgeb string );};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffe ,_agf ,_egad :=_abcg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _egad .Type ==ResultTypeError {return _egad ;};_cdcf ,_egad :=_ecbgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _egad .Type ==ResultTypeError {return _egad ;};if _cdcf >=_ffe {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_ffde :=args [3];if _ffde .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bfgc :=_ffde .ValueNumber ;if _bfgc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dggb :=args [4];if _dggb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bfdg :=_dggb .ValueNumber ;if _bfdg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dcgd :=args [5];if _dcgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_eabb :=_dcgd .ValueNumber ;if _eabb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_eca :=args [6];if _eca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggfc :=float64 (int (_eca .ValueNumber ));if !_ebdd (_ggfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fffe :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_abec :=args [7];if _abec .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fffe =int (_abec .ValueNumber );if !_defe (_fffe ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_cefef ,_egad :=_bdcd (_cdcf ,_agf ,_fffe );if _egad .Type ==ResultTypeError {return _egad ;};_cefef *=_ggfc ;_bddc ,_egad :=_bdcd (_ffe ,_agf ,_fffe );if _egad .Type ==ResultTypeError {return _egad ;};_bddc *=_ggfc ;_aada ,_egad :=_bdcd (_cdcf ,_ffe ,_fffe );if _egad .Type ==ResultTypeError {return _egad ;};_aada *=_ggfc ;_acbd :=_eabb +_cefef *100*_bfgc /_ggfc ;_acbd /=_bddc *_bfdg /_ggfc +1;_acbd -=_aada *100*_bfgc /_ggfc ;return MakeNumberResult (_acbd );};

// Reference returns an invalid reference for Bool.
func (_bg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _aded ,_bfbb float64 ;switch args [0].Type {case ResultTypeNumber :_bfbb =args [0].ValueNumber ;case ResultTypeString :_edeb :=DateValue ([]Result {args [0]});if _edeb .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_bfbb =_edeb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_aded =args [1].ValueNumber ;if _aded < 62&&_bfbb >=62{_aded --;};case ResultTypeString :_ccca :=DateValue ([]Result {args [1]});if _ccca .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_aded =_ccca .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_bgfc :=float64 (int (_bfbb -_aded ));return MakeNumberResult (_bgfc );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_gdf ,_edfde :=_cbeb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _edfde .Type ==ResultTypeError {return _edfde ;};return MakeNumberResult (_aage (_gdf ._dfba ,_gdf ._fadc ,_gdf ._bdcb ,_gdf ._fbb ));};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bcbf :=args [0];if _bcbf .Type ==ResultTypeList {_acdf :=[][]Result {};for _ ,_bbfg :=range _bcbf .ValueList {_acdf =append (_acdf ,[]Result {_bbfg });};return MakeArrayResult (_acdf );};_gabg :=make ([][]Result ,len (_bcbf .ValueArray [0]));for _ ,_gfgb :=range _bcbf .ValueArray {for _ecfa ,_dacb :=range _gfgb {_gabg [_ecfa ]=append (_gabg [_ecfa ],_dacb );};};return MakeArrayResult (_gabg );};var InvalidReferenceContext =&ivr {};func init (){_daf ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};const _bae ="\u0028\u0020\u0028"+_effec +"\u007c"+_ede +"\u007c"+_fcg +"\u007c"+_edfg +"\u0029\u0029\u003f\u0024";const _ggddf =57372;type evCache struct{_aaa map[string ]Result ;_gab *_f .Mutex ;};func (_adgc *noCache )SetCache (key string ,value Result ){};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bebb :=[]float64 {};for _ ,_cdfb :=range args {switch _cdfb .Type {case ResultTypeString :_edcbg :=_cdfb .AsNumber ();if _edcbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bebb =append (_bebb ,_edcbg .ValueNumber );case ResultTypeList ,ResultTypeArray :_efdec :=GCD (_cdfb .ListValues ());if _efdec .Type !=ResultTypeNumber {return _efdec ;};_bebb =append (_bebb ,_efdec .ValueNumber );case ResultTypeNumber :_bebb =append (_bebb ,_cdfb .ValueNumber );case ResultTypeError :return _cdfb ;default:return MakeErrorResult (_d .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdfb .Type ));};};if _bebb [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_bebb )==1{return MakeNumberResult (_bebb [0]);};_eefc :=_bebb [0];for _gddb :=1;_gddb < len (_bebb );_gddb ++{if _bebb [_gddb ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eefc =_fdbgeb (_eefc ,_bebb [_gddb ]);};return MakeNumberResult (_eefc );};type tokenType int ;

// Update updates references in the VerticalRange after removing a row/column.
func (_efcg VerticalRange )Update (q *_ae .UpdateQuery )Expression {if q .UpdateType ==_ae .UpdateActionRemoveColumn {_cbbbe :=_efcg ;if q .UpdateCurrentSheet {_cgcb :=q .ColumnIdx ;_cbbbe ._dgfg =_da (_efcg ._dgfg ,_cgcb );_cbbbe ._cdeg =_da (_efcg ._cdeg ,_cgcb );};return _cbbbe ;};return _efcg ;};func (_dcfea VerticalRange )verticalRangeReference ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_dcfea ._dgfg ,_dcfea ._cdeg );};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_addgag .Lock ();defer _addgag .Unlock ();if _ ,_efeb :=_agcb [name ];_efeb {_fc .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_agcb [name ]=fn ;};const _eaa ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gdef :=args [0].AsNumber ();if _gdef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbcfa :=float64 (1);if _gdef .ValueNumber < 0{_cbcfa =-1;};if len (args )> 1{_cfbc :=args [1].AsNumber ();if _cfbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbcfa =_fg .Abs (_cfbc .ValueNumber );};if len (args )==1{return MakeNumberResult (_fg .Ceil (_gdef .ValueNumber ));};_cgce :=_gdef .ValueNumber ;_cgce ,_afgb :=_fg .Modf (_cgce /_cbcfa );if _afgb !=0{if _gdef .ValueNumber > 0{_cgce ++;};};return MakeNumberResult (_cgce *_cbcfa );};const _fgbdb =57347;

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_bdb :data }};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_fdbe ,_bceae :=_cbeb (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _bceae .Type ==ResultTypeError {return _bceae ;};_edfb :=_gaf (_fdbe ._dfba );_caf :=_gaf (_fdbe ._fadc );_dabb :=_fdbe ._bdcb ;_dafe :=_fdbe ._fbb ;_cbf :=_fbe (_edfb ,_caf ,_dabb ,_dafe );_baef ,_def ,_ecc :=_cbf .Date ();return MakeNumberResult (_acgc (_baef ,int (_def ),_ecc ));};func _ceba (_ccbb ,_bdfd float64 )float64 {_ccbb =_fg .Trunc (_ccbb );_bdfd =_fg .Trunc (_bdfd );if _ccbb ==0&&_bdfd ==0{return 0;};return _ccbb *_bdfd /_fdbgeb (_ccbb ,_bdfd );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _ddfea (args ,_gcgdb )};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func (_fbdd *ivr )Sheet (name string )Context {return _fbdd };func (_fagc *Lexer )emit (_bdfc tokenType ,_dgdca []byte ){if _eccc {_d .Println ("\u0065\u006d\u0069\u0074",_bdfc ,_ffafg (string (_dgdca )));};_fagc ._ffgc <-&node {_bdfc ,string (_dgdca )};};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaec :=args [0];switch _gaec .Type {case ResultTypeError :return _gaec ;case ResultTypeNumber ,ResultTypeString :return _bggfg (args [0]);case ResultTypeList :_cedgd :=_gaec .ValueList ;_dcce :=[]Result {};for _ ,_dcgg :=range _cedgd {_ffcg :=_bggfg (_dcgg );if _ffcg .Type ==ResultTypeError {return _ffcg ;};_dcce =append (_dcce ,_ffcg );};return MakeListResult (_dcce );case ResultTypeArray :_caec :=_gaec .ValueArray ;_fafg :=[][]Result {};for _ ,_facd :=range _caec {_cgbcd :=[]Result {};for _ ,_dbega :=range _facd {_cefcf :=_bggfg (_dbega );if _cefcf .Type ==ResultTypeError {return _cefcf ;};_cgbcd =append (_cgbcd ,_cefcf );};_fafg =append (_fafg ,_cgbcd );};return MakeArrayResult (_fafg );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};type node struct{_bgcff tokenType ;_afbb string ;};

// String returns a string representation of a named range.
func (_befc NamedRangeRef )String ()string {return _befc ._egebg };func (_gbcfad ResultType )String ()string {if _gbcfad >=ResultType (len (_deef )-1){return _d .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gbcfad );};return _ccggb [_deef [_gbcfad ]:_deef [_gbcfad +1]];};type yyParserImpl struct{_gffae yySymType ;_ffffge [_daeeb ]yySymType ;_ebbec int ;};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_agga :=args [0];if _agga .Type !=ResultTypeArray &&_agga .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ffbbb :=_gadgc (_agga );_fgfc :=args [2];if _fgfc .Type !=ResultTypeArray &&_fgfc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ebfc :=_gadgc (_fgfc );_eaee :=_abgd (args [1]);_eabc :=0.0;for _aecc ,_aeee :=range _ffbbb {for _agcd ,_bcdgb :=range _aeee {if _gbfe (_bcdgb ,_eaee ){_eabc +=_ebfc [_aecc ][_agcd ].ValueNumber ;};};};return MakeNumberResult (_eabc );};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_feb Context ,formula string )Result ;SetCache (_adeb string ,_agd Result );GetFromCache (_fde string )(Result ,bool );LastEvalIsRef ()bool ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_fbg :=len (args );if (_fbg !=2&&_fbg !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgdf :=0;if _fbg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgdf =int (args [2].ValueNumber );if !_defe (_cgdf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceab :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agg :=args [1].ValueNumber ;_fga ,_bgg :=_bdcd (_ceab ,_agg ,_cgdf );if _bgg .Type ==ResultTypeError {return _bgg ;};return MakeNumberResult (_fga );};

// Update updates references in the Range after removing a row/column.
func (_eebb Range )Update (q *_ae .UpdateQuery )Expression {_gafagf :=_eebb ;if q .UpdateCurrentSheet {_gafagf ._bdgcbd =_eebb ._bdgcbd .Update (q );_gafagf ._febfg =_eebb ._febfg .Update (q );};return _gafagf ;};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);func _dfcg (_cgdd ,_aecd float64 ,_afae ,_gdg int )(float64 ,Result ){_eegc ,_eedf :=_gaf (_cgdd ),_gaf (_aecd );if _eedf .After (_eegc ){_fdc :=_fbe (_eegc ,_eedf ,_afae ,_gdg );_gcb :=(_eedf .Year ()-_fdc .Year ())*12+int (_eedf .Month ())-int (_fdc .Month ());return float64 (_gcb *_afae )/12.0,_bef ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};func _eced (_gfaaf [][]Result ,_dabd int )[][]Result {_gaae :=[][]Result {};for _fabd :=range _gfaaf {if _fabd ==0{continue ;};_gfgd :=[]Result {};for _gaac :=range _gfaaf {if _gaac ==_dabd {continue ;};_gfgd =append (_gfgd ,_gfaaf [_fabd ][_gaac ]);};_gaae =append (_gaae ,_gfgd );};return _gaae ;};func _ecbgc (_fbd Result ,_bdge ,_adc string )(float64 ,Result ){var _ggcf float64 ;switch _fbd .Type {case ResultTypeNumber :_ggcf =float64 (int (_fbd .ValueNumber ));case ResultTypeString :_eef :=DateValue ([]Result {_fbd });if _eef .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_bdge +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_adc );};_ggcf =_eef .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_adc );};if _ggcf < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_bdge +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _ggcf ,_bef ;};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbcb :=args [0].AsNumber ();_abefg :=args [1].AsNumber ();_fdbgd :=args [2].AsNumber ();_ceeec :=args [3].ListValues ();if _cbcb .Type !=ResultTypeNumber ||_abefg .Type !=ResultTypeNumber ||_fdbgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_gbcfa :=float64 (0);for _bafe ,_cfed :=range _ceeec {_gbcfa +=_cfed .ValueNumber *_fg .Pow (_cbcb .ValueNumber ,_abefg .ValueNumber +float64 (_bafe )*_fdbgd .ValueNumber );};return MakeNumberResult (_gbcfa );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_gfae Expression ;_begbag Expression ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// IsBool returns false for the invalid reference context.
func (_cfeee *ivr )IsBool (cellRef string )bool {return false };

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgab :=true ;for _ ,_bfbfe :=range args {_bfbfe =_bfbfe .AsNumber ();switch _bfbfe .Type {case ResultTypeList ,ResultTypeArray :_aeagd :=And (_bfbfe .ListValues ());if _aeagd .Type ==ResultTypeError {return _aeagd ;};if _aeagd .ValueNumber ==0{_cgab =false ;};case ResultTypeNumber :if _bfbfe .ValueNumber ==0{_cgab =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _bfbfe ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_cgab );};func _ceffb (_aabb Result ,_bdag ,_dccef string )(string ,Result ){switch _aabb .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _aabb .Value (),_bef ;default:return "",MakeErrorResult (_bdag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dccef +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_aedc :=len (args );if _aedc !=4&&_aedc !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ffge ,_aab :=_ecbgc (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _aab .Type ==ResultTypeError {return _aab ;};_edgc ,_aab :=_ecbgc (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _aab .Type ==ResultTypeError {return _aab ;};if _ffge >=_edgc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gdbf :=args [2].ValueNumber ;if _gdbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgfc :=args [3].ValueNumber ;if _dgfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcdd :=0;if _aedc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcdd =int (args [4].ValueNumber );if !_defe (_bcdd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_bdbb ,_aab :=_bdcd (_ffge ,_edgc ,_bcdd );if _aab .Type ==ResultTypeError {return _aab ;};return MakeNumberResult (_dgfc *_gdbf *_bdbb );};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aggg :=args [0].AsNumber ();_ceafc :=args [1].AsNumber ();if _aggg .Type !=ResultTypeNumber ||_ceafc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _ceafc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_egfd ,_efgc :=_fg .Modf (_aggg .ValueNumber /_ceafc .ValueNumber );if _efgc < 0{_egfd --;};return MakeNumberResult (_aggg .ValueNumber -_ceafc .ValueNumber *_egfd );};func _dfggc (_aeace []Result )[]float64 {_aafae :=make ([]float64 ,0);for _ ,_cffd :=range _aeace {if _cffd .Type ==ResultTypeEmpty {continue ;};_cffd =_cffd .AsNumber ();switch _cffd .Type {case ResultTypeNumber :if !_cffd .IsBoolean {_aafae =append (_aafae ,_cffd .ValueNumber );};case ResultTypeList ,ResultTypeArray :_aafae =append (_aafae ,_dfggc (_cffd .ListValues ())...);case ResultTypeString :default:_fc .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cffd .Type );};};return _aafae ;};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_faccb ,_gebgc :=_ddab (args ,true );if _gebgc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_faccb /_gebgc );};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _bcf (_beeg ,_adfg int )int {switch _adfg {case 1:if _aea (_beeg ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_eabca :=_g .Split (v ,"\u003a");if len (_eabca )!=2{return nil ;};if _eabca [0]> _eabca [1]{_eabca [0],_eabca [1]=_eabca [1],_eabca [0];};return PrefixVerticalRange {_cedbe :pfx ,_gbeff :_eabca [0],_fagfg :_eabca [1]};};type cumulArgs struct{_bcef float64 ;_fed float64 ;_fbba float64 ;_acfc float64 ;_ddff float64 ;_cdee int ;};const _abe ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_aacbb :=args [0];if _aacbb .Type ==ResultTypeError {return _aacbb ;};if _aacbb .Type !=ResultTypeString &&_aacbb .Type !=ResultTypeNumber &&_aacbb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_eaegd :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_aedg :=int (args [1].ValueNumber );if _aedg < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dafed :=int (args [2].ValueNumber );if _dafed < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fefb :=len (_eaegd );if _aedg > _fefb {return MakeStringResult ("");};_aedg --;_gdgd :=_aedg +_dafed ;if _gdgd > _fefb {return MakeStringResult (_eaegd [_aedg :]);}else {return MakeStringResult (_eaegd [_aedg :_gdgd ]);};};

// Reference returns a string reference value to a range with prefix.
func (_aggae PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_cbfgb :=_aggae ._caaea .Reference (ctx ,ev );_cccf :=_aggae ._cabc .Reference (ctx ,ev );_ffbec :=_aggae ._gbcge .Reference (ctx ,ev );if _cbfgb .Type ==ReferenceTypeSheet &&_cccf .Type ==ReferenceTypeCell &&_ffbec .Type ==ReferenceTypeCell {return MakeRangeReference (_adgee (_cbfgb ,_cccf ,_ffbec ));};return ReferenceInvalid ;};func _ddfea (_babf []Result ,_bfab rmode )Result {if len (_babf )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gcffb :=_babf [0].AsNumber ();if _gcffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_effd :=_babf [1].AsNumber ();if _effd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffcd :=_effd .ValueNumber ;_beba :=_gcffb .ValueNumber ;_fafd :=1.0;if _ffcd > 0{_fafd =_fg .Pow (1/10.0,_ffcd );}else {_fafd =_fg .Pow (10.0,-_ffcd );};_beba ,_fbcga :=_fg .Modf (_beba /_fafd );switch _bfab {case _gcgdb :const _gebg =0.499999999;if _fbcga >=_gebg {_beba ++;}else if _fbcga <=-_gebg {_beba --;};case _dbggf :case _cfde :if _fbcga > 0{_beba ++;}else if _fbcga < 0{_beba --;};};return MakeNumberResult (_beba *_fafd );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_dead ,_cbeg :=_cbeb (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _cbeg .Type ==ResultTypeError {return _cbeg ;};_bfdb :=_gaf (_dead ._dfba );_dbf :=_gaf (_dead ._fadc );_dgd :=_dead ._bdcb ;_fdbc :=_gaee (_bfdb ,_dbf ,_dgd );_fbae ,_bbbc ,_eaeg :=_fdbc .Date ();return MakeNumberResult (_acgc (_fbae ,int (_bbbc ),_eaeg ));};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_bdgcd :=len (args );if _bdgcd !=4&&_bdgcd !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dca ,_gbcaa ,_ccbc :=_abcg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _ccbc .Type ==ResultTypeError {return _ccbc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cee :=args [2].ValueNumber ;if _cee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dfeb :=args [3].ValueNumber ;if _dfeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_afad :=0;if _bdgcd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_afad =int (args [4].ValueNumber );if !_defe (_afad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_bccd ,_ccbc :=_bdcd (_dca ,_gbcaa ,_afad );if _ccbc .Type ==ResultTypeError {return _ccbc ;};return MakeNumberResult ((_dfeb -_cee )/_cee /_bccd );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_dgcg :=len (args );if _dgcg < 4||_dgcg > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aaeg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dffd :=args [1].ValueNumber ;if _dffd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_effc :=args [2].ValueNumber ;if _effc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dgcb :=args [3].ValueNumber ;_ffda :=0.0;if _dgcg > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ffda =args [4].ValueNumber ;};_dgbf :=0;if _dgcg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgbf =int (args [5].ValueNumber );if _dgbf !=0{_dgbf =1;};};return MakeNumberResult (_ggaa (_aaeg ,_dffd ,_effc ,_dgcb ,_ffda ,_dgbf ));};const _ba ="\u005e\u0028\u0028"+_bdgb +"\u007c"+_dea +"\u007c"+_ca +"\u007c"+_fba +"\u0029\u0020\u0029\u003f";

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};const _daeeb =16;var _edab []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};func _ffafg (_daec string )string {_daec =_g .Replace (_daec ,"\u000a","\u005c\u006e",-1);_daec =_g .Replace (_daec ,"\u000d","\u005c\u0072",-1);_daec =_g .Replace (_daec ,"\u0009","\u005c\u0074",-1);return _daec ;};func _abcg (_dega ,_cfcd Result ,_ecdfe string )(float64 ,float64 ,Result ){_adgg ,_bdfg :=_ecbgc (_dega ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_ecdfe );if _bdfg .Type ==ResultTypeError {return 0,0,_bdfg ;};_abbg ,_bdfg :=_ecbgc (_cfcd ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_ecdfe );if _bdfg .Type ==ResultTypeError {return 0,0,_bdfg ;};if _adgg >=_abbg {return 0,0,MakeErrorResultType (ErrorTypeNum ,_ecdfe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _adgg ,_abbg ,_bef ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcbe :=args [0].AsNumber ();if _dcbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdfd :=float64 (1);_cgae :=args [1].AsNumber ();if _cgae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_gdfd =_cgae .ValueNumber ;if _gdfd < 0&&_dcbe .ValueNumber > 0||_gdfd > 0&&_dcbe .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_gfeeb :=_dcbe .ValueNumber ;_gfeeb ,_fgggf :=_fg .Modf (_gfeeb /_gdfd );if _fg .Trunc (_fgggf +0.5)> 0{_gfeeb ++;};return MakeNumberResult (_gfeeb *_gdfd );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_gfae :pfx ,_begbag :exp }};var _dcga []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fef :=_g .ToLower (args [0].ValueString );if !_cdg (_fef ){_ ,_ ,_ ,_gbb ,_cdd :=_dbgab (_fef );if _cdd .Type ==ResultTypeError {_cdd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _cdd ;};if _gbb {return MakeNumberResult (0);};};_abc ,_aadf ,_eed ,_cbda ,_ ,_dgf :=_ecdg (_fef );if _dgf .Type ==ResultTypeError {return _dgf ;};_gaga :=_afb (float64 (_abc ),float64 (_aadf ),_eed );if _cbda {_gaga +=0.5;}else if _gaga >=1{_gaga -=float64 (int (_gaga ));};return MakeNumberResult (_gaga );};

// Reference returns a string reference value to a horizontal range.
func (_afaec HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_afaec .horizontalRangeReference ()};};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_gadgcd :=_ddgba (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _gadgcd .Type !=ResultTypeEmpty {return _gadgcd ;};_bgefc :=_cedb (args );return MakeNumberResult (float64 (len (_bgefc )));};var _eecd =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfeg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccdba :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cegf :=args [2].ValueNumber ;if _cegf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddbc :=args [3].ValueNumber ;return MakeNumberResult (_ddbc *_dfeg *(_ccdba /_cegf -1));};func _bddbc (_eafe []string ,_cbbac int )string {return _cb .Itoa (len (_eafe [len (_eafe )-1-_cbbac ]))};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_gga *defEval )LastEvalIsRef ()bool {return _gga ._gfd };type noCache struct{};var _aeacfa =map[string ]FunctionComplex {};func (_dcb *defEval )checkLastEvalIsRef (_add Context ,_bga Expression ){switch _bga .(type ){case FunctionCall :switch _bga .(FunctionCall )._ecab {case "\u0049\u0053\u0052E\u0046":for _ ,_effe :=range _bga .(FunctionCall )._fggga {switch _effe .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_bfb :=_effe .Eval (_add ,_dcb );_dcb ._gfd =!(_bfb .Type ==ResultTypeError &&_bfb .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_dcb ._gfd =false ;};};};};};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_cde ,_ecfb :=_cbdc (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _ecfb .Type ==ResultTypeError {return _ecfb ;};_fage :=_cde ._gac ;_gggdf :=_cde ._afea ;_babb :=_cde ._affc ;_adde :=_cde ._aaecf ;_ebc :=_cde ._adbe ;_bgef :=_cde ._cgde ;_bgcd :=_cde ._dcfe ;_ecfbc ,_eccf :=_bdcd (_gggdf ,_babb ,_bgcd );if _eccf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_bcdde :=_ecfbc *_bgef *_fage ;if _ebc ==0{return MakeNumberResult (_bcdde );};_ebe :=_fage *_bgef ;_ddb :=_fage -_adde ;_efdeb :=int ((_ddb -_bcdde )/_ebe );if _ebc <=_efdeb {return MakeNumberResult (_ebe );}else if _ebc ==_efdeb +1{return MakeNumberResult (_ddb -_ebe *float64 (_efdeb )-_bcdde );}else {return MakeNumberResult (0);};};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_gfa :lhs ,_ed :rhs ,_ce :op };};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdad :=args [0].Type ;for _ ,_ffaf :=range args {if _ffaf .Type !=_bdad {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _bdad {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_cdgc :=len (args [0].ListValues ());_ebff :=make ([]float64 ,_cdgc );for _edfe :=range _ebff {_ebff [_edfe ]=1.0;};for _ ,_facc :=range args {if len (_facc .ListValues ())!=_cdgc {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _cdbgb ,_ddde :=range _facc .ListValues (){_ddde =_ddde .AsNumber ();if _ddde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_ebff [_cdbgb ]=_ebff [_cdbgb ]*_ddde .ValueNumber ;};};_dgfdf :=0.0;for _ ,_fbffb :=range _ebff {_dgfdf +=_fbffb ;};return MakeNumberResult (_dgfdf );};return MakeNumberResult (1.0);};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};type couponArgs struct{_dfba float64 ;_fadc float64 ;_bdcb int ;_fbb int ;};

// Reference returns an invalid reference for BinaryExpr.
func (_cbe BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _cedb (_geef []Result )[]rangeIndex {_dbdb :=[]rangeIndex {};_aegfd :=len (_geef );for _dagf :=0;_dagf < _aegfd -1;_dagf +=2{_ffafe :=[]rangeIndex {};_ggcda :=_gadgc (_geef [_dagf ]);_geaa :=_abgd (_geef [_dagf +1]);if _dagf ==0{for _eefeb ,_eccde :=range _ggcda {for _ccfea ,_acgff :=range _eccde {if _gbfe (_acgff ,_geaa ){_ffafe =append (_ffafe ,rangeIndex {_eefeb ,_ccfea });};};};}else {for _ ,_dbec :=range _dbdb {_gbacc :=_ggcda [_dbec ._gcca ][_dbec ._acee ];if _gbfe (_gbacc ,_geaa ){_ffafe =append (_ffafe ,_dbec );};};};if len (_ffafe )==0{return []rangeIndex {};};_dbdb =_ffafe [:];};return _dbdb ;};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_edg :v }};func _aea (_cdf int )bool {if _cdf ==_cdf /400*400{return true ;};if _cdf ==_cdf /100*100{return false ;};return _cdf ==_cdf /4*4;};func _dgc (_dfbf []Result ,_dbfb string )(*cumulArgs ,Result ){if len (_dfbf )!=6{return nil ,MakeErrorResult (_dbfb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dfbf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbfb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggcfe :=_dfbf [0].ValueNumber ;if _ggcfe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dfbf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbfb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbdd :=_dfbf [1].ValueNumber ;if _cbdd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _dfbf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbfb +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffce :=_dfbf [2].ValueNumber ;if _ffce <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dfbf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbfb +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_adcb :=_dfbf [3].ValueNumber ;if _adcb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dfbf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbfb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbfg :=_dfbf [4].ValueNumber ;if _dbfg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _dbfg < _adcb {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _dbfg > _cbdd {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_edcb :=int (_dfbf [5].ValueNumber );if _edcb !=0&&_edcb !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_ggcfe ,_cbdd ,_ffce ,_adcb ,_dbfg ,_edcb },_bef ;};

// String returns a string representation of FunctionCall expression.
func (_gcbg FunctionCall )String ()string {_aeaaf :=_af .Buffer {};_aeaaf .WriteString (_gcbg ._ecab );_aeaaf .WriteString ("\u0028");_edddg :=len (_gcbg ._fggga )-1;for _ecef ,_abcd :=range _gcbg ._fggga {_aeaaf .WriteString (_abcd .String ());if _ecef !=_edddg {_aeaaf .WriteString ("\u002c");};};_aeaaf .WriteString ("\u0029");return _aeaaf .String ();};func _acgcg (_bgd ,_edfc ,_fbfd ,_fff ,_bbag float64 ,_gbba int )Result {_ggag ,_agb :=_bdcd (_bgd ,_edfc ,_gbba );if _agb .Type ==ResultTypeError {return _agb ;};_dfec ,_cefd :=_dfcg (_bgd ,_edfc ,int (_bbag ),_gbba );if _cefd .Type ==ResultTypeError {return _cefd ;};_cffe :=0.0;_ffc :=0.0;_fbfd *=100/_bbag ;_fff /=_bbag ;_fff ++;_aebc :=_ggag *_bbag -_dfec ;for _bfcge :=1.0;_bfcge < _dfec ;_bfcge ++{_bfae :=_bfcge +_aebc ;_beee :=_fbfd /_fg .Pow (_fff ,_bfae );_ffc +=_beee ;_cffe +=_bfae *_beee ;};_fbgd :=(_fbfd +100)/_fg .Pow (_fff ,_dfec +_aebc );_ffc +=_fbgd ;_cffe +=(_dfec +_aebc )*_fbgd ;_cffe /=_ffc ;_cffe /=_bbag ;return MakeNumberResult (_cffe );};var _bdca =[...]uint8 {0,20,37,60,78,96};func _dfcb (_cdbge []Result )Result {_cdbd :=_cdbge [0].ValueList ;_fbcgc :=len (_cdbd );switch len (_cdbge ){case 1:_aggef :=[]Result {};for _ ,_fdce :=range _cdbd {_aggef =append (_aggef ,MakeBoolResult (_fdce .ValueNumber !=0));};return MakeListResult (_aggef );case 2:_bfdea :=_cdbge [1];switch _bfdea .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_gdgf :=[]Result {};for _ ,_gcgd :=range _cdbd {var _befd Result ;if _gcgd .ValueNumber ==0{_befd =MakeBoolResult (false );}else {_befd =_bfdea ;};_gdgf =append (_gdgf ,_befd );};return MakeListResult (_gdgf );case ResultTypeList :_ededd :=_daeb (_bfdea ,_fbcgc );_cbbc :=[]Result {};for _acfd ,_gfge :=range _cdbd {var _gaca Result ;if _gfge .ValueNumber ==0{_gaca =MakeBoolResult (false );}else {_gaca =_ededd [_acfd ];};_cbbc =append (_cbbc ,_gaca );};return MakeListResult (_cbbc );case ResultTypeArray :_bfff :=_ddec (_bfdea ,len (_bfdea .ValueArray ),_fbcgc );_eaef :=[][]Result {};for _ ,_gadgac :=range _bfff {_fdff :=[]Result {};for _gbde ,_fdab :=range _cdbd {var _ccge Result ;if _fdab .ValueNumber ==0{_ccge =MakeBoolResult (false );}else {_ccge =_gadgac [_gbde ];};_fdff =append (_fdff ,_ccge );};_eaef =append (_eaef ,_fdff );};return MakeArrayResult (_eaef );};case 3:_gced :=_cdbge [1];_febg :=_cdbge [2];_faeec :=_aaecc (_gced );_fbgb :=_aaecc (_febg );if _faeec &&_fbgb {_fgef :=[]Result {};for _ ,_gabc :=range _cdbd {var _eade Result ;if _gabc .ValueNumber ==0{_eade =_febg ;}else {_eade =_gced ;};_fgef =append (_fgef ,_eade );};return MakeListResult (_fgef );};if _gced .Type !=ResultTypeArray &&_febg .Type !=ResultTypeArray {_fgab :=_daeb (_gced ,_fbcgc );_ceae :=_daeb (_febg ,_fbcgc );_fceeg :=[]Result {};for _edea ,_dfge :=range _cdbd {var _cafc Result ;if _dfge .ValueNumber ==0{_cafc =_ceae [_edea ];}else {_cafc =_fgab [_edea ];};_fceeg =append (_fceeg ,_cafc );};return MakeListResult (_fceeg );};_bebf ,_aedca :=len (_gced .ValueArray ),len (_febg .ValueArray );_cefb ,_afgg :=_bebf ,_aedca ;if _aedca > _cefb {_cefb ,_afgg =_afgg ,_cefb ;};_dbcgb :=_ddec (_gced ,_cefb ,_fbcgc );_abee :=_ddec (_febg ,_cefb ,_fbcgc );_fcag :=[][]Result {};for _egfcc :=0;_egfcc < _cefb ;_egfcc ++{_dabbe :=[]Result {};for _bcfg ,_dfdc :=range _cdbd {var _cfgag Result ;if _dfdc .ValueNumber ==0{if _egfcc < _aedca {_cfgag =_abee [_egfcc ][_bcfg ];}else {_cfgag =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _egfcc < _bebf {_cfgag =_dbcgb [_egfcc ][_bcfg ];}else {_cfgag =MakeErrorResultType (ErrorTypeNA ,"");};};_dabbe =append (_dabbe ,_cfgag );};_fcag =append (_fcag ,_dabbe );};return MakeArrayResult (_fcag );};return MakeErrorResult ("");};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbefd :=args [0].Ref ;if _cbefd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_cbefd .Value ,ev ).IsBoolean );};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_ggb CellRef )Update (q *_ae .UpdateQuery )Expression {if q .UpdateCurrentSheet {_ggb ._fe =_bdf (_ggb ._fe ,q );};return _ggb ;};

// Eval evaluates the binary expression using the context given.
func (_aeb BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_bd :=_aeb ._gfa .Eval (ctx ,ev );if _bd .Type ==ResultTypeError {return _bd ;};_bb :=_aeb ._ed .Eval (ctx ,ev );if _bb .Type ==ResultTypeError {return _bb ;};if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeArray {if !_de (_bd .ValueArray ,_bb .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _egb (_aeb ._ce ,_bd .ValueArray ,_bb .ValueArray );}else if _bd .Type ==ResultTypeList {if len (_bd .ValueList )!=len (_bb .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _cgf (_aeb ._ce ,_bd .ValueList ,_bb .ValueList );};}else if _bd .Type ==ResultTypeArray &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return _ccf (_aeb ._ce ,_bd .ValueArray ,_bb );}else if _bd .Type ==ResultTypeList &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return _gd (_aeb ._ce ,_bd .ValueList ,_bb );};switch _aeb ._ce {case BinOpTypePlus :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_bd .ValueNumber +_bb .ValueNumber );};};case BinOpTypeMinus :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_bd .ValueNumber -_bb .ValueNumber );};};case BinOpTypeMult :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_bd .ValueNumber *_bb .ValueNumber );};};case BinOpTypeDiv :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {if _bb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_bd .ValueNumber /_bb .ValueNumber );};};case BinOpTypeExp :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_fg .Pow (_bd .ValueNumber ,_bb .ValueNumber ));};};case BinOpTypeLT :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber < _bb .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString < _bb .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bd .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber > _bb .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString > _bb .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bd .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber ==_bb .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString ==_bb .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_bd .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber )||(_bd .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _bd .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (_fd (_bb ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_bd ));};case BinOpTypeNE :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber !=_bb .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString !=_bb .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_bd .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber )||(_bd .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _bd .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (!_fd (_bb ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (!_fd (_bd ));};case BinOpTypeLEQ :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber <=_bb .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString <=_bb .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bd .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (_fd (_bb ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_bd ));};case BinOpTypeGEQ :if _bd .Type ==_bb .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber >=_bb .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString >=_bb .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bd .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (_fd (_bb ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_bd ));};case BinOpTypeConcat :return MakeStringResult (_bd .Value ()+_bb .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func _daf (){_ebg ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_ga .MustCompile ("\u005e"+_bdgb +_bae );_ebg ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_ga .MustCompile ("\u005e"+_dea +_bae );_ebg ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_ga .MustCompile ("\u005e"+_ca +_bae );_ebg ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_ga .MustCompile ("\u005e"+_fba +_bae );_gcg ["\u0068\u0068"]=_ga .MustCompile (_ba +_effec +"\u0024");_gcg ["\u0068\u0068\u003am\u006d"]=_ga .MustCompile (_ba +_ede +"\u0024");_gcg ["\u006d\u006d\u003as\u0073"]=_ga .MustCompile (_ba +_fcg +"\u0024");_gcg ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_ga .MustCompile (_ba +_edfg +"\u0024");_abf =[]*_ga .Regexp {_ga .MustCompile ("\u005e"+_bdgb +"\u0024"),_ga .MustCompile ("\u005e"+_dea +"\u0024"),_ga .MustCompile ("\u005e"+_ca +"\u0024"),_ga .MustCompile ("\u005e"+_fba +"\u0024")};_ggc =[]*_ga .Regexp {_ga .MustCompile ("\u005e"+_effec +"\u0024"),_ga .MustCompile ("\u005e"+_ede +"\u0024"),_ga .MustCompile ("\u005e"+_fcg +"\u0024"),_ga .MustCompile ("\u005e"+_edfg +"\u0024")};};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_gebdd :=MakeNumberResult (0);for _ ,_fcfb :=range args {_fcfb =_fcfb .AsNumber ();switch _fcfb .Type {case ResultTypeNumber :_gebdd .ValueNumber +=_fcfb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bccg :=Sum (_fcfb .ListValues ());if _bccg .Type !=ResultTypeNumber {return _bccg ;};_gebdd .ValueNumber +=_bccg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fcfb ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcfb .Type ));};};return _gebdd ;};

// String returns a string of a range.
func (_eeca Range )String ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_eeca ._bdgcbd .String (),_eeca ._febfg .String ());};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_badf :=args [0].AsNumber ();if _badf .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfbfg ,_geeab :=_fg .Modf (_badf .ValueNumber );if _geeab < 0{_gfbfg --;};return MakeNumberResult (_gfbfg );};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_geeaf (args ,_bggf ));};const _cage =57363;

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_geac :=len (args );if _geac < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbad :=args [0].ValueNumber ;if _cbad ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eefg :=[]float64 {};for _ ,_ecge :=range args [1:]{switch _ecge .Type {case ResultTypeNumber :_eefg =append (_eefg ,_ecge .ValueNumber );case ResultTypeArray ,ResultTypeList :_ebdb :=_gadgc (_ecge );for _ ,_cec :=range _ebdb {for _ ,_bfbd :=range _cec {if _bfbd .Type ==ResultTypeNumber &&!_bfbd .IsBoolean {_eefg =append (_eefg ,_bfbd .ValueNumber );};};};};};_bbee :=0.0;for _gbbc ,_cged :=range _eefg {_bbee +=_cged /_fg .Pow (1+_cbad ,float64 (_gbbc )+1);};return MakeNumberResult (_bbee );};

// String is a string expression.
type String struct{_ccgfb string };func _ddec (_ggfee Result ,_cdce ,_fabe int )[][]Result {_fcfae :=[][]Result {};switch _ggfee .Type {case ResultTypeArray :for _fegab ,_faeee :=range _ggfee .ValueArray {if _fegab < _cdce {_fcfae =append (_fcfae ,_daeb (MakeListResult (_faeee ),_fabe ));}else {_fcfae =append (_fcfae ,_daeb (MakeErrorResultType (ErrorTypeNA ,""),_fabe ));};};case ResultTypeList :_dcbb :=_daeb (_ggfee ,_fabe );for _gbeb :=0;_gbeb < _cdce ;_gbeb ++{_fcfae =append (_fcfae ,_dcbb );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gcbc :=0;_gcbc < _cdce ;_gcbc ++{_aafa :=_daeb (_ggfee ,_fabe );_fcfae =append (_fcfae ,_aafa );};};return _fcfae ;};

// String returns an empty string for EmptyExpr.
func (_eba EmptyExpr )String ()string {return ""};

// GetFormat returns an empty string for the invalid reference context.
func (_efbbe *ivr )GetFormat (cellRef string )string {return ""};const _dafca =57357;const _dfgb =57360;

// Eval evaluates and returns the result of an empty expression.
func (_dfg EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egbg ,_bdcbb ,_gbgd :=_abcg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _gbgd .Type ==ResultTypeError {return _gbgd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agac :=_bdcbb -_egbg ;if _agac > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_afef :=args [2].ValueNumber ;if _afef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_afef )/(360-_afef *_agac ));};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_g .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_ccgfb :v };};func _dafaf (_agacg string ,_aacd []Result )(*parsedSearchObject ,Result ){_cefdg :=len (_aacd );if _cefdg !=2&&_cefdg !=3{return nil ,MakeErrorResult (_agacg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccedb :=_aacd [0];if _ccedb .Type ==ResultTypeError {return nil ,_ccedb ;};if _ccedb .Type !=ResultTypeString &&_ccedb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dged :=_aacd [1];if _dged .Type ==ResultTypeError {return nil ,_dged ;};if _dged .Type !=ResultTypeString &&_dged .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_cbcef :=_dged .Value ();_bfga :=_ccedb .Value ();_dagb :=1;if _cefdg ==3&&_aacd [2].Type !=ResultTypeEmpty {_gbdb :=_aacd [2];if _gbdb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_dagb =int (_gbdb .ValueNumber );if _dagb < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _dagb > len (_cbcef ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_bfga ,_cbcef ,_dagb },_bef ;};var _bef Result =MakeEmptyResult ();func _cfaa (_faeg int )string {if _faeg >=0&&_faeg < len (_gfggc ){if _gfggc [_faeg ]!=""{return _gfggc [_faeg ];};};return _d .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_faeg );};type rangeIndex struct{_gcca int ;_acee int ;};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_bfee ,_aeaa :=_dafaf ("\u0046\u0049\u004e\u0044",args );if _aeaa .Type !=ResultTypeEmpty {return _aeaa ;};_cded :=_bfee ._bdcde ;if _cded ==""{return MakeNumberResult (1.0);};_cfac :=_bfee ._ccee ;_gfgbc :=_bfee ._afbe ;_ddgd :=1;for _ceeef :=range _cfac {if _ddgd < _gfgbc {_ddgd ++;continue ;};_dfda :=_g .Index (_cfac [_ceeef :],_cded );if _dfda ==0{return MakeNumberResult (float64 (_ddgd ));};_ddgd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func (_edcab node )String ()string {return _d .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_edcab ._bgcff ,_ffafg (string (_edcab ._afbb )));};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_gafb ,_gcdde ,_eebeg :=_eafb (args );if _eebeg .Type ==ResultTypeError {return _eebeg ;};return MakeNumberResult (_dedcb (_gafb )/_gcdde );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_eaab ,_caa :=_cbeb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _caa .Type ==ResultTypeError {return _caa ;};return MakeNumberResult (_daed (_eaab ._dfba ,_eaab ._fadc ,_eaab ._bdcb ,_eaab ._fbb ));};

// Reference returns a string reference value to a vertical range.
func (_dfgbc VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_dfgbc .verticalRangeReference ()};};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_cgdad *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_bdaa :=args [0];switch _bdaa .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_ada :=_gaf (_bdaa .ValueNumber );return MakeNumberResult (float64 (_ada .Month ()));case ResultTypeString :_gdd :=_g .ToLower (_bdaa .ValueString );if !_edgb (_gdd ){_ ,_ ,_ ,_ ,_dcca ,_bcc :=_ecdg (_gdd );if _bcc .Type ==ResultTypeError {_bcc .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _bcc ;};if _dcca {return MakeNumberResult (1);};};_ ,_gfbb ,_ ,_ ,_bdc :=_dbgab (_gdd );if _bdc .Type ==ResultTypeError {return _bdc ;};return MakeNumberResult (float64 (_gfbb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_geabb :=args [0].Ref ;if _geabb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_gfac ,_begg :=_gf .ParseCellReference (_geabb .Value );if _begg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_geabb .Value );};return MakeNumberResult (float64 (_gfac .ColumnIdx +1));};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_aabe HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_agbg :=_aabe .horizontalRangeReference ();if _bgeg ,_afcag :=ev .GetFromCache (_agbg );_afcag {return _bgeg ;};_ddgc ,_degff :=_dcdd (ctx ,_aabe ._addec ,_aabe ._ebfdd );_bcbd :=_dfbfg (ctx ,ev ,_ddgc ,_degff );ev .SetCache (_agbg ,_bcbd );return _bcbd ;};func _cfeaf ()yyParser {return &yyParserImpl {}};const _egdd =-1000;

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// LastColumn returns empty string for the invalid reference context.
func (_feeac *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};var _abf =[]*_ga .Regexp {};func _ccf (_dg BinOpType ,_gc [][]Result ,_ccfc Result )Result {_ea :=[][]Result {};for _gfb :=range _gc {_ccd :=_gd (_dg ,_gc [_gfb ],_ccfc );if _ccd .Type ==ResultTypeError {return _ccd ;};_ea =append (_ea ,_ccd .ValueList );};return MakeArrayResult (_ea );};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dacc :=args [0].AsNumber ();if _dacc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dacc .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gffdg :=float64 (1);_bddd :=_fg .Trunc (_dacc .ValueNumber );for _fbfb :=_bddd ;_fbfb > 1;_fbfb -=2{_gffdg *=_fbfb ;};return MakeNumberResult (_gffdg );};var _eeg int64 =_fgf (1900,_cg .January ,1);func (_ccdd *Lexer )Next ()*node {_ccdd ._acad .Lock ();defer _ccdd ._acad .Unlock ();if len (_ccdd ._fbfgf )> 0{_bfcdf :=_ccdd ._fbfgf [0];_ccdd ._fbfgf =_ccdd ._fbfgf [1:];return _bfcdf ;};return _ccdd .nextRaw ();};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcfd :=args [0].AsString ();if _gcfd .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_bbgf :=args [1].AsNumber ();if _bbgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgcg :=_gcfd .ValueString ;if len (_fgcg )> 2&&(_g .HasPrefix (_fgcg ,"\u0030\u0078")||_g .HasPrefix (_fgcg ,"\u0030\u0058")){_fgcg =_fgcg [2:];};_dabcf ,_face :=_cb .ParseInt (_fgcg ,int (_bbgf .ValueNumber ),64);if _face !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_dabcf ));};func _dbgdb (_ffdea []Result )(bool ,Result ){for _ ,_eadga :=range _ffdea {if _eadga .Type ==ResultTypeError {return true ,_eadga ;};};return false ,MakeEmptyResult ();};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_dege :=[]string {};for _ggedf :=range _agcb {_dege =append (_dege ,_ggedf );};for _abff :=range _aeacfa {_dege =append (_dege ,_abff );};_bc .Strings (_dege );return _dege ;};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_addec ,_ebfdd int };type criteriaRegex struct{_aebb byte ;_fgbg string ;};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_dcc :=&defEval {};_dcc .evCache =_bdbc ();return _dcc };func _gbg (_bcea ,_ace int )int {if _ace ==2&&_aea (_bcea ){return 29;}else {return _aed [_ace -1];};};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gebfc :=args [0].AsNumber ();if _gebfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bage :=args [1].AsNumber ();if _bage .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_fg .Pow (_gebfc .ValueNumber ,_bage .ValueNumber ));};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_ebef ,_dceb :=_dafaf ("\u0046\u0049\u004e\u0044",args );if _dceb .Type !=ResultTypeEmpty {return _dceb ;};_afac :=_g .ToLower (_ebef ._bdcde );if _afac ==""{return MakeNumberResult (1.0);};_deadg :=_g .ToLower (_ebef ._ccee );_abeb :=_ebef ._afbe ;_begbaf :=1;for _fcaa :=range _deadg {if _begbaf < _abeb {_begbaf ++;continue ;};_agbcf :=_cgdc .Index (_afac ,_deadg [_fcaa :]);if _agbcf ==0{return MakeNumberResult (float64 (_begbaf ));};_begbaf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdaa :=args [0].AsNumber ();if _fdaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_fg .Pi /180.0*_fdaa .ValueNumber );};func _cdgd (_bbeac yyLexer ,_dbbb *yySymType )(_fcce ,_abag int ){_abag =0;_fcce =_bbeac .Lex (_dbbb );if _fcce <=0{_abag =_efceb [0];goto _effbb ;};if _fcce < len (_efceb ){_abag =_efceb [_fcce ];goto _effbb ;};if _fcce >=_eabgd {if _fcce < _eabgd +len (_affa ){_abag =_affa [_fcce -_eabgd ];goto _effbb ;};};for _cgfba :=0;_cgfba < len (_bgbf );_cgfba +=2{_abag =_bgbf [_cgfba +0];if _abag ==_fcce {_abag =_bgbf [_cgfba +1];goto _effbb ;};};_effbb :if _abag ==0{_abag =_affa [1];};if _ggffd >=3{_d .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_gfeed (_abag ),uint (_fcce ));};return _fcce ,_abag ;};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_dfcfe :=_ddgba (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _dfcfe .Type !=ResultTypeEmpty {return _dfcfe ;};_agdf :=_cedb (args [1:]);_abae :=0.0;_bgcda :=_gadgc (args [0]);for _ ,_gaba :=range _agdf {_abae +=_bgcda [_gaba ._gcca ][_gaba ._acee ].ValueNumber ;};return MakeNumberResult (float64 (_abae ));};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _bcabg (args ,true )};func _gbeg (_ffdf Result )[]Result {_agfg :=_ffdf .ValueList ;if _ffdf .Type ==ResultTypeArray {_agfg =nil ;for _ ,_cfebe :=range _ffdf .ValueArray {if len (_cfebe )> 0{_agfg =append (_agfg ,_cfebe [0]);}else {_agfg =append (_agfg ,_bef );};};};return _agfg ;};const _gcacaa =187;func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func (_ee *evCache )GetFromCache (key string )(Result ,bool ){_ee ._gab .Lock ();_agec ,_acgb :=_ee ._aaa [key ];_ee ._gab .Unlock ();return _agec ,_acgb ;};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _dbaf (args ,true )};const _dcggf =57353;func _fbe (_bgb ,_cdda _cg .Time ,_gebd ,_fcf int )_cg .Time {_ggbf :=_cdda ;_gbbb :=_bgb .Year ()-_cdda .Year ();_ggbf =_ggbf .AddDate (_gbbb ,0,0);if _bgb .After (_ggbf ){_ggbf =_ggbf .AddDate (1,0,0);};_fbf :=-12/_gebd ;for _ggbf .After (_bgb ){_ggbf =_ggbf .AddDate (0,_fbf ,0);};return _ggbf ;};const _dbc =_cg .Second *1;const (_ccfe cmpResult =0;_bcafb cmpResult =-1;_fdbdf cmpResult =1;_edgfb cmpResult =2;);

// Reference returns a string reference value to a sheet.
func (_cdfc SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_cdfc ._ebdg };};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_gacf :=len (args );if _gacf ==0||_gacf > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_bbc :=_gadgc (args [0]);_cgaa :=[]float64 {};for _ ,_eacg :=range _bbc {for _ ,_aaba :=range _eacg {if _aaba .Type ==ResultTypeNumber &&!_aaba .IsBoolean {_cgaa =append (_cgaa ,_aaba .ValueNumber );};};};_aeag :=len (_cgaa );if len (_cgaa )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_eedfc :=0.1;if _gacf ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eedfc =args [1].ValueNumber ;if _eedfc <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_gcd :=[]float64 {};for _fcfa :=0;_fcfa < _aeag ;_fcfa ++{if _fcfa ==0{_gcd =append (_gcd ,0);}else {_gcd =append (_gcd ,_gcd [_fcfa -1]+365);};};return _begd (_cgaa ,_gcd ,_eedfc );};func _dedcb (_edaff float64 )float64 {_bbfce :=float64 (1);for _fdcbe :=float64 (2);_fdcbe <=_edaff ;_fdcbe ++{_bbfce *=_fdcbe ;};return _bbfce ;};func _bfcc (_gdbfe string )*criteriaRegex {_cdbeg :=&criteriaRegex {};if _gdbfe ==""{return _cdbeg ;};if _dbgbg :=_ggfaf .FindStringSubmatch (_gdbfe );len (_dbgbg )> 1{_cdbeg ._aebb =_caae ;_cdbeg ._fgbg =_dbgbg [1];}else if _ffcbf :=_agaf .FindStringSubmatch (_gdbfe );len (_ffcbf )> 1{_cdbeg ._aebb =_caae ;_cdbeg ._fgbg =_ffcbf [1];}else if _deeb :=_bbgfa .FindStringSubmatch (_gdbfe );len (_deeb )> 1{_cdbeg ._aebb =_agce ;_cdbeg ._fgbg =_deeb [1];}else if _fdga :=_cdde .FindStringSubmatch (_gdbfe );len (_fdga )> 1{_cdbeg ._aebb =_eggcg ;_cdbeg ._fgbg =_fdga [1];}else if _fdabc :=_ggccb .FindStringSubmatch (_gdbfe );len (_fdabc )> 1{_cdbeg ._aebb =_gbfd ;_cdbeg ._fgbg =_fdabc [1];}else if _faaa :=_ffcb .FindStringSubmatch (_gdbfe );len (_faaa )> 1{_cdbeg ._aebb =_fbdfb ;_cdbeg ._fgbg =_faaa [1];};return _cdbeg ;};

// Reference returns an invalid reference for EmptyExpr.
func (_ab EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_bfadc :=MakeNumberResult (0);for _ ,_fcgec :=range args {_fcgec =_fcgec .AsNumber ();switch _fcgec .Type {case ResultTypeNumber :_bfadc .ValueNumber +=_fcgec .ValueNumber *_fcgec .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fbaec :=SumSquares (_fcgec .ListValues ());if _fbaec .Type !=ResultTypeNumber {return _fbaec ;};_bfadc .ValueNumber +=_fbaec .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fcgec ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_fcgec .Type ));};};return _bfadc ;};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _ddfea (args ,_cfde )};func _egcg (){_ccbcf =_ga .MustCompile ("\u005e\u0030\u002b\u0024");_ffggg =_ga .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_ebga =_ga .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_abbc =_ga .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_dadd =_ga .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_dfgabb =_ga .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_gddf =_ga .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_dagg =_ga .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_feba =_ga .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_gaa =_ga .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_aafd =_ga .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_bfad =_ga .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fdbg +_fdbg +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fdbg +_fdbg +"\u0029\u002b\u0059+\u0024");_bcbg =_ga .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_fdbg +_fdbg +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_fdbg +_fdbg +"\u0029\u002b\u0059+\u0024");_beaa =_ga .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_egdc =_ga .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};func (_egcec *Lexer )lex (_dddc _c .Reader ){_egbaf ,_cgbb ,_bbbde :=0,0,0;_gfdg :=-1;_fcdcb ,_bbbgf ,_fbag :=0,0,0;_ =_fbag ;_egea :=1;_ =_egea ;_defa :=make ([]byte ,4096);_cdcd :=false ;for !_cdcd {_ebdbb :=0;if _fcdcb > 0{_ebdbb =_cgbb -_fcdcb ;};_cgbb =0;_gfbea ,_eeaef :=_dddc .Read (_defa [_ebdbb :]);if _gfbea ==0||_eeaef !=nil {_cdcd =true ;};_bbbde =_gfbea +_ebdbb ;if _bbbde < len (_defa ){_gfdg =_bbbde ;};{_egbaf =_debgf ;_fcdcb =0;_bbbgf =0;_fbag =0;};{var _dcggc int ;var _fdgf uint ;if _cgbb ==_bbbde {goto _cdgcc ;};if _egbaf ==0{goto _cffc ;};_ecdff :_dcggc =int (_ffafa [_egbaf ]);_fdgf =uint (_edab [_dcggc ]);_dcggc ++;for ;_fdgf > 0;_fdgf --{_dcggc ++;switch _edab [_dcggc -1]{case 2:_fcdcb =_cgbb ;};};switch _egbaf {case 30:switch _defa [_cgbb ]{case 34:goto _dcdfd ;case 35:goto _cddb ;case 36:goto _fggdb ;case 38:goto _aegff ;case 39:goto _bcdc ;case 40:goto _geaac ;case 41:goto _acdae ;case 42:goto _fege ;case 43:goto _aggc ;case 44:goto _cbbfg ;case 45:goto _dbgfg ;case 47:goto _dcae ;case 58:goto _gcdcg ;case 59:goto _cdaeg ;case 60:goto _fgedd ;case 61:goto _edefc ;case 62:goto _bdddf ;case 63:goto _afede ;case 70:goto _efcfb ;case 84:goto _ddcc ;case 92:goto _gbbba ;case 94:goto _dedg ;case 95:goto _fdeb ;case 123:goto _bceag ;case 125:goto _bgdgc ;};switch {case _defa [_cgbb ]< 65:switch {case _defa [_cgbb ]> 37:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _gbdfcf ;};case _defa [_cgbb ]>=33:goto _afede ;};case _defa [_cgbb ]> 90:switch {case _defa [_cgbb ]> 93:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _gaega ;};case _defa [_cgbb ]>=91:goto _afede ;};default:goto _ffddee ;};goto _edba ;case 1:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _befgc ;case 123:goto _befgc ;case 125:goto _befgc ;};switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _befgc ;};case _defa [_cgbb ]> 45:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _befgc ;};case _defa [_cgbb ]>=58:goto _befgc ;};default:goto _befgc ;};goto _edba ;case 0:goto _cffc ;case 2:if _defa [_cgbb ]==34{goto _bacc ;};goto _dcdfd ;case 31:if _defa [_cgbb ]==34{goto _dcdfd ;};goto _bfddc ;case 3:switch _defa [_cgbb ]{case 78:goto _fegdd ;case 82:goto _faeb ;};goto _afede ;case 4:switch _defa [_cgbb ]{case 47:goto _fddc ;case 85:goto _defc ;};goto _afede ;case 5:if _defa [_cgbb ]==65{goto _gbbcg ;};goto _afede ;case 6:switch _defa [_cgbb ]{case 76:goto _febc ;case 77:goto _cebace ;};goto _afede ;case 7:if _defa [_cgbb ]==76{goto _cebace ;};goto _afede ;case 8:if _defa [_cgbb ]==33{goto _gbbcg ;};goto _afede ;case 9:if _defa [_cgbb ]==69{goto _egac ;};goto _afede ;case 10:if _defa [_cgbb ]==70{goto _dgda ;};goto _afede ;case 11:if _defa [_cgbb ]==33{goto _cageb ;};goto _afede ;case 12:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _afede ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=45{goto _afede ;};case _defa [_cgbb ]>=34:goto _afede ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]< 65:if 58<=_defa [_cgbb ]&&_defa [_cgbb ]<=63{goto _afede ;};case _defa [_cgbb ]> 90:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _afede ;};default:goto _aadbd ;};default:goto _bcegg ;};goto _edba ;case 13:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _afede ;case 58:goto _gaeeb ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=45{goto _afede ;};case _defa [_cgbb ]>=34:goto _afede ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _afede ;};case _defa [_cgbb ]>=59:goto _afede ;};default:goto _bcegg ;};goto _edba ;case 14:if _defa [_cgbb ]==36{goto _egff ;};if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _gcce ;};goto _befgc ;case 15:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _gcce ;};goto _befgc ;case 32:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _gcce ;};goto _dcfbg ;case 16:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 47:goto _afede ;case 58:goto _gfgea ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 45:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _dgcdg ;};case _defa [_cgbb ]>=34:goto _afede ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]> 90:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _afede ;};case _defa [_cgbb ]>=65:goto _aadbd ;};default:goto _afede ;};goto _edba ;case 17:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _befgc ;case 123:goto _befgc ;case 125:goto _befgc ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=45{goto _befgc ;};case _defa [_cgbb ]>=34:goto _befgc ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _befgc ;};case _defa [_cgbb ]>=58:goto _befgc ;};default:goto _dgcdg ;};goto _edba ;case 33:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _gebee ;case 123:goto _gebee ;case 125:goto _gebee ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=45{goto _gebee ;};case _defa [_cgbb ]>=34:goto _gebee ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _gebee ;};case _defa [_cgbb ]>=58:goto _gebee ;};default:goto _dgcdg ;};goto _edba ;case 18:if _defa [_cgbb ]==36{goto _dcgcf ;};if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _bfdag ;};goto _befgc ;case 19:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _bfdag ;};goto _befgc ;case 34:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _bfdag ;};goto _dddg ;case 20:switch _defa [_cgbb ]{case 39:goto _afede ;case 42:goto _afede ;case 47:goto _afede ;case 58:goto _afede ;case 63:goto _afede ;};if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=93{goto _afede ;};goto _fgfce ;case 21:switch _defa [_cgbb ]{case 39:goto _fcdde ;case 42:goto _afede ;case 47:goto _afede ;case 58:goto _afede ;case 63:goto _afede ;};if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=93{goto _afede ;};goto _fgfce ;case 22:if _defa [_cgbb ]==33{goto _cabde ;};goto _afede ;case 35:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _cfdb ;case 58:goto _gaeeb ;case 101:goto _agbb ;case 123:goto _eafd ;case 125:goto _eafd ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=47{goto _eafd ;};case _defa [_cgbb ]>=34:goto _eafd ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _eafd ;};case _defa [_cgbb ]>=59:goto _eafd ;};default:goto _gbdfcf ;};goto _edba ;case 36:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _eafd ;case 101:goto _agbb ;case 123:goto _eafd ;case 125:goto _eafd ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=45{goto _eafd ;};case _defa [_cgbb ]>=34:goto _eafd ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _eafd ;};case _defa [_cgbb ]>=58:goto _eafd ;};default:goto _cfdb ;};goto _edba ;case 23:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _efgd ;case 123:goto _efgd ;case 125:goto _efgd ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=45{goto _efgd ;};case _defa [_cgbb ]>=34:goto _efgd ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _efgd ;};case _defa [_cgbb ]>=58:goto _efgd ;};default:goto _bcdgbf ;};goto _edba ;case 37:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 47:goto _eafd ;case 123:goto _eafd ;case 125:goto _eafd ;};switch {case _defa [_cgbb ]< 48:switch {case _defa [_cgbb ]> 35:if 37<=_defa [_cgbb ]&&_defa [_cgbb ]<=45{goto _eafd ;};case _defa [_cgbb ]>=34:goto _eafd ;};case _defa [_cgbb ]> 57:switch {case _defa [_cgbb ]> 63:if 91<=_defa [_cgbb ]&&_defa [_cgbb ]<=94{goto _eafd ;};case _defa [_cgbb ]>=58:goto _eafd ;};default:goto _bcdgbf ;};goto _edba ;case 38:switch _defa [_cgbb ]{case 61:goto _gcddd ;case 62:goto _agee ;};goto _gfga ;case 39:if _defa [_cgbb ]==61{goto _bfeed ;};goto _ccdda ;case 24:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _afede ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _afede ;};default:goto _afede ;};goto _edba ;case 40:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 40:goto _bfafc ;case 46:goto _dageb ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _dageb ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _dageb ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 41:switch _defa [_cgbb ]{case 46:goto _gadff ;case 92:goto _gadff ;case 95:goto _gadff ;};switch {case _defa [_cgbb ]< 65:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _gadff ;};case _defa [_cgbb ]> 90:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _gadff ;};default:goto _gadff ;};goto _cgcdb ;case 42:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 43:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 40:goto _bfafc ;case 46:goto _dageb ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _gebee ;case 125:goto _gebee ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _gebee ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};default:goto _gebee ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _dageb ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _gebee ;};default:goto _gebee ;};goto _edba ;case 44:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _befgc ;case 125:goto _befgc ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _befgc ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _befgc ;};default:goto _befgc ;};goto _edba ;case 25:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 65:goto _beeba ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _afede ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 66<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _afede ;};default:goto _afede ;};goto _edba ;case 45:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 76:goto _cgbe ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 46:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 83:goto _fcab ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 47:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 69:goto _eedff ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 26:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 79:goto _ddgg ;case 82:goto _dadg ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _afede ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _afede ;};default:goto _afede ;};goto _edba ;case 48:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 68:goto _egdg ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 49:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 79:goto _gaeef ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 50:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 36:goto _eedfg ;case 40:goto _bfafc ;case 46:goto _dageb ;case 58:goto _gfgea ;case 85:goto _fcab ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 59:switch {case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _befgf ;};case _defa [_cgbb ]>=34:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _gdff ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 27:switch _defa [_cgbb ]{case 46:goto _gadff ;case 92:goto _gadff ;case 95:goto _gadff ;};switch {case _defa [_cgbb ]< 65:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _gadff ;};case _defa [_cgbb ]> 90:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _gadff ;};default:goto _gadff ;};goto _afede ;case 28:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _affgc ;case 120:goto _cfcbb ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _afede ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _afede ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _afede ;};default:goto _afede ;};goto _edba ;case 51:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _affgc ;case 108:goto _eafa ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 52:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _affgc ;case 102:goto _eaeb ;case 110:goto _fcdb ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 53:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _affgc ;case 110:goto _dacba ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 54:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _bfaba ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 55:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _edgd ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _edgd ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 56:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 40:goto _affff ;case 46:goto _edgd ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _edgd ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _edgd ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 57:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _affgc ;case 109:goto _aefaf ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 58:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _bcad ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _cgcdb ;case 125:goto _cgcdb ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _cgcdb ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _cgcdb ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _cgcdb ;};default:goto _cgcdb ;};goto _edba ;case 59:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _cade ;case 123:goto _befgc ;case 125:goto _befgc ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _befgc ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _befgc ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _cade ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _befgc ;};default:goto _befgc ;};goto _edba ;case 29:switch _defa [_cgbb ]{case 33:goto _bccdf ;case 46:goto _affgc ;case 92:goto _gadff ;case 95:goto _affgc ;case 123:goto _afede ;case 125:goto _afede ;};switch {case _defa [_cgbb ]< 58:switch {case _defa [_cgbb ]< 37:if 34<=_defa [_cgbb ]&&_defa [_cgbb ]<=35{goto _afede ;};case _defa [_cgbb ]> 47:if 48<=_defa [_cgbb ]&&_defa [_cgbb ]<=57{goto _affgc ;};default:goto _afede ;};case _defa [_cgbb ]> 63:switch {case _defa [_cgbb ]< 91:if 65<=_defa [_cgbb ]&&_defa [_cgbb ]<=90{goto _affgc ;};case _defa [_cgbb ]> 94:if 97<=_defa [_cgbb ]&&_defa [_cgbb ]<=122{goto _affgc ;};default:goto _afede ;};default:goto _afede ;};goto _edba ;};_afede :_egbaf =0;goto _abde ;_edba :_egbaf =1;goto _abde ;_dcdfd :_egbaf =2;goto _abde ;_cddb :_egbaf =3;goto _abde ;_fegdd :_egbaf =4;goto _abde ;_fddc :_egbaf =5;goto _abde ;_defc :_egbaf =6;goto _abde ;_febc :_egbaf =7;goto _abde ;_cebace :_egbaf =8;goto _abde ;_faeb :_egbaf =9;goto _abde ;_egac :_egbaf =10;goto _abde ;_dgda :_egbaf =11;goto _abde ;_fggdb :_egbaf =12;goto _abde ;_bcegg :_egbaf =13;goto _abde ;_gaeeb :_egbaf =14;goto _abde ;_egff :_egbaf =15;goto _abde ;_aadbd :_egbaf =16;goto _abde ;_eedfg :_egbaf =17;goto _abde ;_gfgea :_egbaf =18;goto _abde ;_dcgcf :_egbaf =19;goto _abde ;_bcdc :_egbaf =20;goto _abde ;_fgfce :_egbaf =21;goto _abde ;_fcdde :_egbaf =22;goto _abde ;_agbb :_egbaf =23;goto _abde ;_ffddee :_egbaf =24;goto _abde ;_efcfb :_egbaf =25;goto _abde ;_ddcc :_egbaf =26;goto _abde ;_gbbba :_egbaf =27;goto _abde ;_fdeb :_egbaf =28;goto _abde ;_gaega :_egbaf =29;goto _abde ;_befgc :_egbaf =30;goto _cfbg ;_bccdf :_egbaf =30;goto _abaca ;_gbbcg :_egbaf =30;goto _egeae ;_cageb :_egbaf =30;goto _dddaa ;_cabde :_egbaf =30;goto _fbca ;_efgd :_egbaf =30;goto _bcacg ;_bfafc :_egbaf =30;goto _dbgfe ;_aegff :_egbaf =30;goto _adead ;_geaac :_egbaf =30;goto _afgga ;_acdae :_egbaf =30;goto _cdabc ;_fege :_egbaf =30;goto _ageeg ;_aggc :_egbaf =30;goto _eefgb ;_cbbfg :_egbaf =30;goto _decdc ;_dbgfg :_egbaf =30;goto _ddbd ;_dcae :_egbaf =30;goto _ggfab ;_gcdcg :_egbaf =30;goto _ddffb ;_cdaeg :_egbaf =30;goto _cadg ;_edefc :_egbaf =30;goto _bdafe ;_dedg :_egbaf =30;goto _aacfb ;_bceag :_egbaf =30;goto _gcada ;_bgdgc :_egbaf =30;goto _dfegg ;_bfddc :_egbaf =30;goto _febgf ;_dcfbg :_egbaf =30;goto _eadeg ;_gebee :_egbaf =30;goto _ddcbb ;_dddg :_egbaf =30;goto _cfbf ;_eafd :_egbaf =30;goto _fgede ;_gfga :_egbaf =30;goto _baea ;_gcddd :_egbaf =30;goto _ccddb ;_agee :_egbaf =30;goto _ffeb ;_ccdda :_egbaf =30;goto _fgeg ;_bfeed :_egbaf =30;goto _gece ;_cgcdb :_egbaf =30;goto _gedf ;_affff :_egbaf =30;goto _dceea ;_bacc :_egbaf =31;goto _egab ;_gcce :_egbaf =32;goto _abde ;_dgcdg :_egbaf =33;goto _gggf ;_bfdag :_egbaf =34;goto _abde ;_gbdfcf :_egbaf =35;goto _acacg ;_cfdb :_egbaf =36;goto _acacg ;_bcdgbf :_egbaf =37;goto _acacg ;_fgedd :_egbaf =38;goto _abde ;_bdddf :_egbaf =39;goto _abde ;_dageb :_egbaf =40;goto _gbbaf ;_gadff :_egbaf =41;goto _abde ;_affgc :_egbaf =42;goto _gbbaf ;_befgf :_egbaf =43;goto _gggf ;_gdff :_egbaf =44;goto _gbbaf ;_eedff :_egbaf =44;goto _egagd ;_gaeef :_egbaf =44;goto _bgdae ;_beeba :_egbaf =45;goto _gbbaf ;_cgbe :_egbaf =46;goto _gbbaf ;_fcab :_egbaf =47;goto _gbbaf ;_ddgg :_egbaf =48;goto _gbbaf ;_egdg :_egbaf =49;goto _gbbaf ;_dadg :_egbaf =50;goto _gbbaf ;_cfcbb :_egbaf =51;goto _gbbaf ;_eafa :_egbaf =52;goto _gbbaf ;_eaeb :_egbaf =53;goto _gbbaf ;_dacba :_egbaf =54;goto _gbbaf ;_bfaba :_egbaf =55;goto _gbbaf ;_edgd :_egbaf =56;goto _gbbaf ;_fcdb :_egbaf =57;goto _gbbaf ;_aefaf :_egbaf =58;goto _gbbaf ;_bcad :_egbaf =59;goto _gbbaf ;_cade :_egbaf =59;goto _dadc ;_egeae :_dcggc =3;goto _bccbg ;_dddaa :_dcggc =5;goto _bccbg ;_abaca :_dcggc =7;goto _bccbg ;_fbca :_dcggc =9;goto _bccbg ;_dbgfe :_dcggc =11;goto _bccbg ;_dceea :_dcggc =13;goto _bccbg ;_adead :_dcggc =15;goto _bccbg ;_gcada :_dcggc =17;goto _bccbg ;_dfegg :_dcggc =19;goto _bccbg ;_afgga :_dcggc =21;goto _bccbg ;_cdabc :_dcggc =23;goto _bccbg ;_eefgb :_dcggc =25;goto _bccbg ;_ddbd :_dcggc =27;goto _bccbg ;_ageeg :_dcggc =29;goto _bccbg ;_ggfab :_dcggc =31;goto _bccbg ;_aacfb :_dcggc =33;goto _bccbg ;_bdafe :_dcggc =35;goto _bccbg ;_ccddb :_dcggc =37;goto _bccbg ;_gece :_dcggc =39;goto _bccbg ;_ffeb :_dcggc =41;goto _bccbg ;_ddffb :_dcggc =43;goto _bccbg ;_cadg :_dcggc =45;goto _bccbg ;_decdc :_dcggc =47;goto _bccbg ;_fgede :_dcggc =49;goto _bccbg ;_ddcbb :_dcggc =51;goto _bccbg ;_eadeg :_dcggc =53;goto _bccbg ;_cfbf :_dcggc =55;goto _bccbg ;_gedf :_dcggc =57;goto _bccbg ;_febgf :_dcggc =59;goto _bccbg ;_baea :_dcggc =61;goto _bccbg ;_fgeg :_dcggc =63;goto _bccbg ;_bcacg :_dcggc =65;goto _bccbg ;_cfbg :_dcggc =67;goto _bccbg ;_egagd :_dcggc =72;goto _bccbg ;_acacg :_dcggc =75;goto _bccbg ;_gggf :_dcggc =78;goto _bccbg ;_bgdae :_dcggc =81;goto _bccbg ;_dadc :_dcggc =84;goto _bccbg ;_gbbaf :_dcggc =87;goto _bccbg ;_egab :_dcggc =90;goto _bccbg ;_bccbg :_fdgf =uint (_edab [_dcggc ]);_dcggc ++;for ;_fdgf > 0;_fdgf --{_dcggc ++;switch _edab [_dcggc -1]{case 3:_bbbgf =_cgbb +1;case 4:_fbag =1;case 5:_fbag =2;case 6:_fbag =3;case 7:_fbag =4;case 8:_fbag =11;case 9:_fbag =14;case 10:_fbag =15;case 11:_bbbgf =_cgbb +1;{_egcec .emit (_ecdgg ,_defa [_fcdcb :_bbbgf ]);};case 12:_bbbgf =_cgbb +1;{_egcec .emit (_gacg ,_defa [_fcdcb :_bbbgf ]);};case 13:_bbbgf =_cgbb +1;{_egcec .emit (_dafca ,_defa [_fcdcb :_bbbgf -1]);};case 14:_bbbgf =_cgbb +1;{_egcec .emit (_dafca ,_defa [_fcdcb +1:_bbbgf -2]);};case 15:_bbbgf =_cgbb +1;{_egcec .emit (_efaca ,_defa [_fcdcb :_bbbgf -1]);};case 16:_bbbgf =_cgbb +1;{_egcec .emit (_efaca ,_defa [_fcdcb :_bbbgf -1]);};case 17:_bbbgf =_cgbb +1;{_egcec .emit (_debe ,_defa [_fcdcb :_bbbgf ]);};case 18:_bbbgf =_cgbb +1;{_egcec .emit (_dfgb ,_defa [_fcdcb :_bbbgf ]);};case 19:_bbbgf =_cgbb +1;{_egcec .emit (_cgfac ,_defa [_fcdcb :_bbbgf ]);};case 20:_bbbgf =_cgbb +1;{_egcec .emit (_cddd ,_defa [_fcdcb :_bbbgf ]);};case 21:_bbbgf =_cgbb +1;{_egcec .emit (_cage ,_defa [_fcdcb :_bbbgf ]);};case 22:_bbbgf =_cgbb +1;{_egcec .emit (_becc ,_defa [_fcdcb :_bbbgf ]);};case 23:_bbbgf =_cgbb +1;{_egcec .emit (_gaaad ,_defa [_fcdcb :_bbbgf ]);};case 24:_bbbgf =_cgbb +1;{_egcec .emit (_dcadd ,_defa [_fcdcb :_bbbgf ]);};case 25:_bbbgf =_cgbb +1;{_egcec .emit (_cbbb ,_defa [_fcdcb :_bbbgf ]);};case 26:_bbbgf =_cgbb +1;{_egcec .emit (_edgea ,_defa [_fcdcb :_bbbgf ]);};case 27:_bbbgf =_cgbb +1;{_egcec .emit (_bbgce ,_defa [_fcdcb :_bbbgf ]);};case 28:_bbbgf =_cgbb +1;{_egcec .emit (_ggddf ,_defa [_fcdcb :_bbbgf ]);};case 29:_bbbgf =_cgbb +1;{_egcec .emit (_gfbbe ,_defa [_fcdcb :_bbbgf ]);};case 30:_bbbgf =_cgbb +1;{_egcec .emit (_cgabg ,_defa [_fcdcb :_bbbgf ]);};case 31:_bbbgf =_cgbb +1;{_egcec .emit (_ecfe ,_defa [_fcdcb :_bbbgf ]);};case 32:_bbbgf =_cgbb +1;{_egcec .emit (_becbed ,_defa [_fcdcb :_bbbgf ]);};case 33:_bbbgf =_cgbb +1;{_egcec .emit (_eaff ,_defa [_fcdcb :_bbbgf ]);};case 34:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_dcggf ,_defa [_fcdcb :_bbbgf ]);};case 35:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_fefcg ,_defa [_fcdcb :_bbbgf ]);};case 36:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_afcdf ,_defa [_fcdcb :_bbbgf ]);};case 37:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_fgbdb ,_defa [_fcdcb :_bbbgf ]);};case 38:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_bcaee ,_defa [_fcdcb :_bbbgf ]);};case 39:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_adddd ,_defa [_fcdcb +1:_bbbgf -1]);};case 40:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_ebddg ,_defa [_fcdcb :_bbbgf ]);};case 41:_bbbgf =_cgbb ;_cgbb --;{_egcec .emit (_gede ,_defa [_fcdcb :_bbbgf ]);};case 42:_cgbb =(_bbbgf )-1;{_egcec .emit (_dcggf ,_defa [_fcdcb :_bbbgf ]);};case 43:switch _fbag {case 0:{_egbaf =0;goto _abde ;};case 1:{_cgbb =(_bbbgf )-1;_egcec .emit (_cece ,_defa [_fcdcb :_bbbgf ]);};case 2:{_cgbb =(_bbbgf )-1;_egcec .emit (_dcggf ,_defa [_fcdcb :_bbbgf ]);};case 3:{_cgbb =(_bbbgf )-1;_egcec .emit (_fefcg ,_defa [_fcdcb :_bbbgf ]);};case 4:{_cgbb =(_bbbgf )-1;_egcec .emit (_aecb ,_defa [_fcdcb :_bbbgf ]);};case 11:{_cgbb =(_bbbgf )-1;_egcec .emit (_dccd ,_defa [_fcdcb :_bbbgf ]);};case 14:{_cgbb =(_bbbgf )-1;_egcec .emit (_bcaee ,_defa [_fcdcb :_bbbgf ]);};case 15:{_cgbb =(_bbbgf )-1;_egcec .emit (_adddd ,_defa [_fcdcb +1:_bbbgf -1]);};};};};goto _abde ;_abde :_dcggc =int (_dcga [_egbaf ]);_fdgf =uint (_edab [_dcggc ]);_dcggc ++;for ;_fdgf > 0;_fdgf --{_dcggc ++;switch _edab [_dcggc -1]{case 0:_fcdcb =0;case 1:_fbag =0;};};if _egbaf ==0{goto _cffc ;};if _cgbb ++;_cgbb !=_bbbde {goto _ecdff ;};_cdgcc :{};if _cgbb ==_gfdg {switch _egbaf {case 1:goto _befgc ;case 2:goto _befgc ;case 31:goto _bfddc ;case 14:goto _befgc ;case 15:goto _befgc ;case 32:goto _dcfbg ;case 17:goto _befgc ;case 33:goto _gebee ;case 18:goto _befgc ;case 19:goto _befgc ;case 34:goto _dddg ;case 35:goto _eafd ;case 36:goto _eafd ;case 23:goto _efgd ;case 37:goto _eafd ;case 38:goto _gfga ;case 39:goto _ccdda ;case 40:goto _cgcdb ;case 41:goto _cgcdb ;case 42:goto _cgcdb ;case 43:goto _gebee ;case 44:goto _befgc ;case 45:goto _cgcdb ;case 46:goto _cgcdb ;case 47:goto _cgcdb ;case 48:goto _cgcdb ;case 49:goto _cgcdb ;case 50:goto _cgcdb ;case 51:goto _cgcdb ;case 52:goto _cgcdb ;case 53:goto _cgcdb ;case 54:goto _cgcdb ;case 55:goto _cgcdb ;case 56:goto _cgcdb ;case 57:goto _cgcdb ;case 58:goto _cgcdb ;case 59:goto _befgc ;};};_cffc :{};};if _fcdcb > 0{copy (_defa [0:],_defa [_fcdcb :]);};};_ =_gfdg ;if _egbaf ==_afffa {_egcec .emit (_cefed ,nil );};close (_egcec ._ffgc );};

// HasFormula returns FALSE for the invalid reference context.
func (_agbfc *ivr )HasFormula (cellRef string )bool {return false };

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_affg :=len (args );if _affg !=4&&_affg !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddbg ,_agab ,_acbg :=_abcg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _acbg .Type ==ResultTypeError {return _acbg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbge :=args [2].ValueNumber ;if _dbge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_beda :=args [3].ValueNumber ;if _beda <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_bdfb :=0;if _affg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdfb =int (args [4].ValueNumber );if !_defe (_bdfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_cfef ,_acbg :=_bdcd (_ddbg ,_agab ,_bdfb );if _acbg .Type ==ResultTypeError {return _acbg ;};return MakeNumberResult ((_beda /_dbge -1)/_cfef );};type parsedReplaceObject struct{_facdb string ;_fbed int ;_fecab int ;_gefd string ;};func _gfff (_bdee string ,_dfag _cg .Time )(_cg .Time ,error ){_cfcb ,_ ,_faad :=_be .ParseFloat (_bdee ,10,128,_be .ToNearestEven );if _faad !=nil {return _cg .Time {},_faad ;};_eabg :=new (_be .Float );_eabg .SetUint64 (uint64 (24*_cg .Hour ));_cfcb .Mul (_cfcb ,_eabg );_efagc ,_ :=_cfcb .Uint64 ();_bcaa :=_dfag .Add (_cg .Duration (_efagc ));return _fefe (_bcaa ),nil ;};

// String returns a string representation of SheetPrefixExpr.
func (_gaaec SheetPrefixExpr )String ()string {return _gaaec ._ebdg };func init (){_egcg ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};const _fba ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_eaa +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _ebddg =57370;

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_fcgdc PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_efad :=_fcgdc ._dcbgd .Reference (ctx ,ev );switch _efad .Type {case ReferenceTypeSheet :if _edcfd (_efad ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_efad .Value ));};_cbcae :=_fcgdc .horizontalRangeReference (_efad .Value );if _gbdc ,_gbbg :=ev .GetFromCache (_cbcae );_gbbg {return _gbdc ;};_gfcdf :=ctx .Sheet (_efad .Value );_gdbbd ,_cfcf :=_dcdd (_gfcdf ,_fcgdc ._dgeb ,_fcgdc ._dedda );_fcddf :=_dfbfg (_gfcdf ,ev ,_gdbbd ,_cfcf );ev .SetCache (_cbcae ,_fcddf );return _fcddf ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efad .Type ));};};const _effec ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};const _aagg =86400000000000;

// EmptyExpr is an empty expression.
type EmptyExpr struct{};const _aecb =57349;const _afffa int =0;func _bggfg (_eedc Result )Result {if _eedc .Type ==ResultTypeEmpty {return _eedc ;};_aeab :=_eedc .AsString ();if _aeab .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _eedc .IsBoolean {if _aeab .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _aeab .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_g .ToLower (_aeab .ValueString ));};};func _fdef (_dee ,_gadg int64 )float64 {return float64 (int (0.5+float64 ((_gadg -_dee )/86400)))};func _bdcd (_gdbg ,_abcc float64 ,_eeb int )(float64 ,Result ){_aedf ,_cdb :=_gaf (_gdbg ),_gaf (_abcc );_cedg :=_aedf .Unix ();_fega :=_cdb .Unix ();if _cedg ==_fega {return 0,_bef ;};_bde ,_abb ,_daa :=_aedf .Date ();_aebd ,_aef ,_gge :=_cdb .Date ();_feeb ,_ccag :=int (_abb ),int (_aef );var _dedd ,_gea float64 ;switch _eeb {case 0:if _daa ==31{_daa --;};if _daa ==30&&_gge ==31{_gge --;}else if _bdffb :=_aea (_bde );_feeb ==2&&((_bdffb &&_daa ==29)||(!_bdffb &&_daa ==28)){_daa =30;if _bcb :=_aea (_aebd );_ccag ==2&&((_bcb &&_gge ==29)||(!_bcb &&_gge ==28)){_gge =30;};};_dedd =float64 ((_aebd -_bde )*360+(_ccag -_feeb )*30+(_gge -_daa ));_gea =360;case 1:_dedd =_abcc -_gdbg ;_egfg :=_bde !=_aebd ;if _egfg &&(_aebd !=_bde +1||_feeb < _ccag ||(_feeb ==_ccag &&_daa < _gge )){_dgg :=0;for _aba :=_bde ;_aba <=_aebd ;_aba ++{_dgg +=_bcf (_aba ,1);};_gea =float64 (_dgg )/float64 (_aebd -_bde +1);}else {if !_egfg &&_aea (_bde ){_gea =366;}else {if _egfg &&((_aea (_bde )&&(_feeb < 2||(_feeb ==2&&_daa <=29)))||(_aea (_aebd )&&(_ccag > 2||(_ccag ==2&&_gge ==29)))){_gea =366;}else {_gea =365;};};};case 2:_dedd =_abcc -_gdbg ;_gea =360;case 3:_dedd =_abcc -_gdbg ;_gea =365;case 4:if _daa ==31{_daa --;};if _gge ==31{_gge --;};_dedd =float64 ((_aebd -_bde )*360+(_ccag -_feeb )*30+(_gge -_daa ));_gea =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _dedd /_gea ,_bef ;};const _eabgd =57344;func _gbdg (_efffe ,_fdbda int )string {const TOKSTART =4;if !_aadaed {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_gadf :=range _becae {if _gadf ._ebbb ==_efffe &&_gadf ._aeff ==_fdbda {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_gadf ._cfba ;};};_efefc :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_gfeed (_fdbda );_gbdfc :=make ([]int ,0,4);_bafee :=_gbdbg [_efffe ];for _bfge :=TOKSTART ;_bfge -1< len (_eecd );_bfge ++{if _dcade :=_bafee +_bfge ;_dcade >=0&&_dcade < _gcacaa &&_dbcab [_gcfb [_dcade ]]==_bfge {if len (_gbdfc )==cap (_gbdfc ){return _efefc ;};_gbdfc =append (_gbdfc ,_bfge );};};if _afdg [_efffe ]==-2{_ecag :=0;for _beeec [_ecag ]!=-1||_beeec [_ecag +1]!=_efffe {_ecag +=2;};for _ecag +=2;_beeec [_ecag ]>=0;_ecag +=2{_dfggd :=_beeec [_ecag ];if _dfggd < TOKSTART ||_beeec [_ecag +1]==0{continue ;};if len (_gbdfc )==cap (_gbdfc ){return _efefc ;};_gbdfc =append (_gbdfc ,_dfggd );};if _beeec [_ecag +1]!=0{return _efefc ;};};for _efgee ,_eefcd :=range _gbdfc {if _efgee ==0{_efefc +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_efefc +="\u0020\u006f\u0072\u0020";};_efefc +=_gfeed (_eefcd );};return _efefc ;};

// Eval evaluates and returns the result of a constant array expression.
func (_gfe ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_cbc :=[][]Result {};for _ ,_gca :=range _gfe ._bdb {_egf :=[]Result {};for _ ,_fgb :=range _gca {_egf =append (_egf ,_fgb .Eval (ctx ,ev ));};_cbc =append (_cbc ,_egf );};return MakeArrayResult (_cbc );};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// LastRow returns 0 for the invalid reference context.
func (_dage *ivr )LastRow (colFrom string )int {return 0};

// String returns a string representation of a vertical range with prefix.
func (_gfbbf PrefixVerticalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gfbbf ._cedbe .String (),_gfbbf ._gbeff ,_gfbbf ._fagfg );};const _cgfac =57361;func _bdgc (_bea int )int {if _bea < 1900{if _bea < 30{_bea +=2000;}else {_bea +=1900;};};return _bea ;};const (_bbeec countMode =iota ;_fgda ;_bggf ;);func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ddcd :=args [0].Ref ;if _ddcd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_defb ,_gebed :=_gf .ParseCellReference (_ddcd .Value );if _gebed !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ddcd .Value );};return MakeNumberResult (float64 (_defb .RowIdx ));};func _cae (_ddga ,_agea ,_efaa ,_ddfd float64 ,_ccba int )float64 {var _abg float64 ;if _ddga ==0{_abg =_ddfd +_efaa *_agea ;}else {_dbfe :=_fg .Pow (1+_ddga ,_agea );if _ccba ==1{_abg =_ddfd *_dbfe +_efaa *(1+_ddga )*(_dbfe -1)/_ddga ;}else {_abg =_ddfd *_dbfe +_efaa *(_dbfe -1)/_ddga ;};};return -_abg ;};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_eefa :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eefa =int (args [1].ValueNumber );if _eefa < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _eefa ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cddef :=args [0].Value ();_cebbf :=len (_cddef );if _eefa > _cebbf {return MakeStringResult (_cddef );};return MakeStringResult (_cddef [_cebbf -_eefa :_cebbf ]);};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cgbc (args ,true )};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbge :=args [0].AsNumber ();if _bbge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_fg .Pi *_bbge .ValueNumber );};func _dafd (_fedd ,_eded float64 )bool {return _fg .Abs (_fedd -_eded )< 1.0e-6};var _addcd =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func (_aagd Result )String ()string {return _aagd .Value ()};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggce :=args [0].Ref ;if _ggce .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_ggce .Value ));};var _ccbcf ,_abbc ,_ffggg ,_ebga ,_dadd ,_dfgabb ,_gddf ,_egdc ,_dagg ,_feba ,_gaa ,_aafd ,_bfad ,_bcbg ,_beaa *_ga .Regexp ;

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbce :=args [0].AsString ();if _dbce .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcgdbc :=_af .Buffer {};for _ ,_bebd :=range _dbce .ValueString {if _a .IsPrint (_bebd ){_gcgdbc .WriteRune (_bebd );};};return MakeStringResult (_gcgdbc .String ());};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffgb :=false ;for _ ,_aegb :=range args {switch _aegb .Type {case ResultTypeList ,ResultTypeArray :_aefdg :=Or (_aegb .ListValues ());if _aefdg .Type ==ResultTypeError {return _aefdg ;};if _aefdg .ValueNumber !=0{_ffgb =true ;};case ResultTypeNumber :if _aegb .ValueNumber !=0{_ffgb =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _aegb ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_ffgb );};const _eaff =57376;

// FunctionCall is a function call expression.
type FunctionCall struct{_ecab string ;_fggga []Expression ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_addgag .Lock ();defer _addgag .Unlock ();if _gggbdb ,_abcca :=_agcb [name ];_abcca {return _gggbdb ;};return nil ;};func (_bccbd *yyParserImpl )Lookahead ()int {return _bccbd ._ebbec };func init (){_cega =_cc .New (_cc .NewSource (_cg .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_dggd ("\u0041\u0053\u0049\u004e",_fg .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_dggd ("\u0041\u0053\u0049\u004e",_fg .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_dggd ("\u0041\u0053\u0049\u004e",_fg .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_dggd ("\u0041\u0043\u004f\u0054",func (_bbbd float64 )float64 {return _fg .Pi /2-_fg .Atan (_bbbd )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_dggd ("\u0041\u0043\u004fT\u0048",func (_feea float64 )float64 {return _fg .Atanh (1/_feea )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_dggd ("\u0041\u0053\u0049\u004e",_fg .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_dggd ("\u0041\u0053\u0049N\u0048",_fg .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_dggd ("\u0041\u0054\u0041\u004e",_fg .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_dggd ("\u0041\u0054\u0041N\u0048",_fg .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_dggd ("\u0043\u004f\u0053",_fg .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_dggd ("\u0043\u004f\u0053\u0048",_fg .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gcdb ("\u0043\u004f\u0054",_fg .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gcdb ("\u0043\u004f\u0054\u0048",_fg .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gcdb ("\u0043\u0053\u0043",_fg .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gcdb ("\u0043\u0053\u0043",_fg .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_dggd ("\u0045\u0058\u0050",_fg .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_dggd ("\u004c\u004e",_fg .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_dggd ("\u004c\u004f\u00471\u0030",_fg .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gcdb ("\u0053\u0045\u0043",_fg .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gcdb ("\u0053\u0045\u0043\u0048",_fg .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_dggd ("\u0053\u0049\u004e",_fg .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_dggd ("\u0053\u0049\u004e\u0048",_fg .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_dggd ("\u0053\u0051\u0052\u0054",_fg .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_dggd ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_abggb float64 )float64 {return _fg .Sqrt (_abggb *_fg .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_dggd ("\u0054\u0041\u004e",_fg .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_dggd ("\u0054\u0041\u004e\u0048",_fg .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// Reference returns a string reference value to a horizontal range with prefix.
func (_cfag PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_edbb :=_cfag ._dcbgd .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_cfag .horizontalRangeReference (_edbb .Value )};};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_acdg :=len (args );if _acdg !=3&&_acdg !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egeb ,_gcaca :=_ceffb (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _gcaca .Type ==ResultTypeError {return _gcaca ;};_fgfe ,_gcaca :=_ceffb (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _gcaca .Type ==ResultTypeError {return _gcaca ;};_bdbbc ,_gcaca :=_ceffb (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _gcaca .Type ==ResultTypeError {return _gcaca ;};_ffdc :=0;if _acdg ==3{return MakeStringResult (_g .Replace (_egeb ,_fgfe ,_bdbbc ,-1));}else {_cgag ,_fgded :=_cddg (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _fgded .Type ==ResultTypeError {return _fgded ;};_ffdc =int (_cgag );if _ffdc < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_agaa :=_egeb ;_cebac :=_ffdc ;_bdbg :=-1;_ebce :=len (_fgfe );_ddbfd :=0;for {_cebac --;_acea :=_g .Index (_agaa ,_fgfe );if _acea ==-1{_bdbg =-1;break ;}else {_bdbg =_acea +_ddbfd ;if _cebac ==0{break ;};_cdcfc :=_ebce +_acea ;_ddbfd +=_cdcfc ;_agaa =_agaa [_cdcfc :];};};if _bdbg ==-1{return MakeStringResult (_egeb );}else {_aefe :=_egeb [:_bdbg ];_ecda :=_egeb [_bdbg +_ebce :];return MakeStringResult (_aefe +_bdbbc +_ecda );};};};var (_ggffd =0;_aadaed =false ;);var _ggfaf ,_agaf ,_ffcb ,_ggccb ,_cdde ,_bbgfa *_ga .Regexp ;

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_debf :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_debf *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_eebe :=_gadgc (args [1]);for _ ,_eeea :=range _eebe {for _ ,_geabg :=range _eeea {if _geabg .Type !=ResultTypeNumber ||_geabg .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_debf *=1.0+_geabg .ValueNumber ;};};return MakeNumberResult (_debf );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fec :=args [0].ValueNumber ;_gee :=args [1].ValueNumber ;if _gee < _fec {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _gee ==_fec {return MakeNumberResult (0);};_aec :=_g .ToLower (args [2].ValueString );if _aec =="\u0064"{return MakeNumberResult (_gee -_fec );};_cffg :=_gaf (_fec );_dcfb :=_gaf (_gee );_fdd ,_ecb ,_bbg :=_cffg .Date ();_fcge ,_eaag ,_gde :=_dcfb .Date ();_dbga :=int (_ecb );_gbd :=int (_eaag );var _ddf float64 ;switch _aec {case "\u0079":_ddf =float64 (_fcge -_fdd );if _gbd < _dbga ||(_gbd ==_dbga &&_gde < _bbg ){_ddf --;};case "\u006d":_efd :=_fcge -_fdd ;_ecbf :=_gbd -_dbga ;if _gde < _bbg {_ecbf --;};if _ecbf < 0{_efd --;_ecbf +=12;};_ddf =float64 (_efd *12+_ecbf );case "\u006d\u0064":_fdf :=_gbd ;if _gde < _bbg {_fdf --;};_ddf =float64 (int (_gee -_acgc (_fcge ,_fdf ,_bbg )));case "\u0079\u006d":_ddf =float64 (_gbd -_dbga );if _gde < _bbg {_ddf --;};if _ddf < 0{_ddf +=12;};case "\u0079\u0064":_addg :=_fcge ;if _gbd < _dbga ||(_gbd ==_dbga &&_gde < _bbg ){_addg --;};_ddf =float64 (int (_gee -_acgc (_addg ,_dbga ,_bbg )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_ddf );};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfbf ,_fdcb ,_bfaf :=_abcg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _bfaf .Type ==ResultTypeError {return _bfaf ;};_fac ,_bfaf :=_ecbgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bfaf .Type ==ResultTypeError {return _bfaf ;};if _fac >=_bfbf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cebc :=args [3].ValueNumber ;if _cebc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aegd :=args [4].ValueNumber ;if _aegd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_cfd :=args [5].ValueNumber ;if _cfd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebgf :=float64 (int (args [6].ValueNumber ));if !_ebdd (_ebgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_abdd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_abdd =int (args [7].ValueNumber );if !_defe (_abdd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_caee ,_bfaf :=_bdcd (_fac ,_fdcb ,_abdd );if _bfaf .Type ==ResultTypeError {return _bfaf ;};_caee *=_ebgf ;_bgge ,_bfaf :=_bdcd (_bfbf ,_fdcb ,_abdd );if _bfaf .Type ==ResultTypeError {return _bfaf ;};_bgge *=_ebgf ;_dad ,_bfaf :=_bdcd (_fac ,_bfbf ,_abdd );if _bfaf .Type ==ResultTypeError {return _bfaf ;};_dad *=_ebgf ;_gdeg :=_cfd +_caee *100*_cebc /_ebgf ;_gdeg /=_aegd +_dad *100*_cebc /_ebgf ;_gdeg --;_gdeg *=_ebgf /_bgge ;return MakeNumberResult (_gdeg );};func (_dbaa Result )AsString ()Result {switch _dbaa .Type {case ResultTypeNumber :return MakeStringResult (_dbaa .Value ());default:return _dbaa ;};};func _gaf (_aaf float64 )_cg .Time {_ggad :=int64 ((_aaf -_cd )*_aagg );return _cg .Unix (0,_ggad ).UTC ();};

// Reference returns an invalid reference for FunctionCall.
func (_babg FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_abfd PrefixHorizontalRange )Update (q *_ae .UpdateQuery )Expression {return _abfd };

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_feafe ,_fcdcc ,_adac :=_cacc (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _adac .Type ==ResultTypeError {return _adac ;};if _fcdcc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _feafe ==0{return MakeNumberResult (0);};_bcg :=_feafe < 0;if _bcg {_feafe =-_feafe ;};_cdab :=float64 (int (_feafe ));_eaf :=args [0].Value ();_degf :=_g .Split (_eaf ,"\u002e");_faa :=0.0;if len (_degf )> 1{var _dede error ;_dbe :=_degf [1];_faa ,_dede =_cb .ParseFloat (_dbe ,64);if _dede !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_gdda :=float64 (len (_dbe ));_faa /=_fg .Pow (10,_gdda );};_fgfa :=_faa *_fcdcc /_fg .Pow (10,float64 (int (_fg .Log10 (_fcdcc )))+1)+_cdab ;if _bcg {_fgfa =-_fgfa ;};return MakeNumberResult (_fgfa );};

// Eval evaluates and returns a string.
func (_baead String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_baead ._ccgfb )};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_ebdg string };

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_baee :=args [0].AsNumber ();if _baee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddbcc :=int (_baee .ValueNumber );if _ddbcc < 0||_ddbcc > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_d .Sprintf ("\u0025\u0063",_ddbcc ));};

// Eval evaluates a vertical range returning a list of results or an error.
func (_bbde VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gdgdg :=_bbde .verticalRangeReference ();if _aedge ,_ccaab :=ev .GetFromCache (_gdgdg );_ccaab {return _aedge ;};_dcfad ,_ffeba :=_acfec (ctx ,_bbde ._dgfg ,_bbde ._cdeg );_ffdgd :=_dfbfg (ctx ,ev ,_dcfad ,_ffeba );ev .SetCache (_gdgdg ,_ffdgd );return _ffdgd ;};const _gaaad =57365;func _afddd (_fbdf ,_fade ,_bfe ,_dfdd ,_bfdbd ,_cegc float64 )float64 {var _cdaf ,_abgg float64 ;_becd :=0.0;_gcde :=_fg .Ceil (_bfdbd );_cdfg :=_fbdf -_fade ;_bffd :=false ;_bdcdf :=0.0;for _dfed :=1.0;_dfed <=_gcde ;_dfed ++{if !_bffd {_cdaf =_ccbe (_fbdf ,_fade ,_bfe ,_dfed ,_cegc );_bdcdf =_cdfg /(_bfe -_dfed +1);if _bdcdf > _cdaf {_abgg =_bdcdf ;_bffd =true ;}else {_abgg =_cdaf ;_cdfg -=_cdaf ;};}else {_abgg =_bdcdf ;};if _dfed ==_gcde {_abgg *=_bfdbd +1-_gcde ;};_becd +=_abgg ;};return _becd ;};func _eafb (_cfcbg []Result )(float64 ,float64 ,Result ){_cafa :=0.0;_cbffa :=1.0;for _ ,_caca :=range _cfcbg {switch _caca .Type {case ResultTypeNumber :_cafa +=_caca .ValueNumber ;_cbffa *=_dedcb (_caca .ValueNumber );case ResultTypeList ,ResultTypeArray :_fcgc ,_geag ,_bbdc :=_eafb (_caca .ListValues ());_cafa +=_fcgc ;_cbffa *=_dedcb (_geag );if _bbdc .Type ==ResultTypeError {return 0,0,_bbdc ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_caca ;};};return _cafa ,_cbffa ,_bef ;};const _dea =_eaa +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgfd :=args [0].AsString ();if _bgfd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_bgfd .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_bgfd .ValueString [0]));};func _cddg (_dcec Result ,_gacce ,_bfeff string )(float64 ,Result ){switch _dcec .Type {case ResultTypeEmpty :return 0,_bef ;case ResultTypeNumber :return _dcec .ValueNumber ,_bef ;case ResultTypeString :_efccg ,_afda :=_cb .ParseFloat (_dcec .ValueString ,64);if _afda !=nil {return 0,MakeErrorResult (_bfeff +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_gacce );};return _efccg ,_bef ;default:return 0,MakeErrorResult (_gacce +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bfeff +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Match implements the MATCH function.
func Match (args []Result )Result {_efac :=len (args );if _efac !=2&&_efac !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdfbg :=1;if _efac ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_bdebc :=args [2].ValueNumber ;if _bdebc ==-1||_bdebc ==0{_bdfbg =int (_bdebc );};};_bfbbf :=args [1];var _ceeg []Result ;switch _bfbbf .Type {case ResultTypeList :_ceeg =_bfbbf .ValueList ;case ResultTypeArray :_bgeb :=_bfbbf .ValueArray ;for _ ,_fffd :=range _bgeb {if len (_fffd )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_ceeg =append (_ceeg ,_fffd [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_gbea :=_abgd (args [0]);switch _bdfbg {case 0:for _dcef ,_dgbfb :=range _ceeg {if _dddd (_dgbfb ,_gbea ){return MakeNumberResult (float64 (_dcef +1));};};case -1:for _gcda :=0;_gcda < len (_ceeg );_gcda ++{if _dddd (_ceeg [_gcda ],_gbea ){return MakeNumberResult (float64 (_gcda +1));};if _gbea ._eefb &&(_ceeg [_gcda ].ValueNumber < _gbea ._acfca ){if _gcda ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gcda ));};};case 1:for _abfa :=0;_abfa < len (_ceeg );_abfa ++{if _dddd (_ceeg [_abfa ],_gbea ){return MakeNumberResult (float64 (_abfa +1));};if _gbea ._eefb &&(_ceeg [_abfa ].ValueNumber > _gbea ._acfca ){if _abfa ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_abfa ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Update updates references in the PrefixExpr after removing a row/column.
func (_deaea PrefixExpr )Update (q *_ae .UpdateQuery )Expression {_eedd :=_deaea ;_ebdf :=_deaea ._gfae .String ();if _ebdf ==q .SheetToUpdate {_cdccf :=*q ;_cdccf .UpdateCurrentSheet =true ;_eedd ._begbag =_deaea ._begbag .Update (&_cdccf );};return _eedd ;};type cmpResult int8 ;var _cegfd =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_ggdb ,_ffdd :=_cbeb (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _ffdd .Type ==ResultTypeError {return _ffdd ;};_eadd :=_ggdb ._bdcb ;_ccec :=_ggdb ._fbb ;_cffb ,_ffdd :=_dfcg (_ggdb ._dfba ,_ggdb ._fadc ,_eadd ,_ccec );if _ffdd .Type ==ResultTypeError {return _ffdd ;};return MakeNumberResult (_cffb );};var _fgfd =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func (_adeec *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func _geeaf (_cgeg []Result ,_ebdeg countMode )float64 {_eage :=0.0;for _ ,_dgbea :=range _cgeg {switch _dgbea .Type {case ResultTypeNumber :if _ebdeg ==_fgda ||(_ebdeg ==_bbeec &&!_dgbea .IsBoolean ){_eage ++;};case ResultTypeList ,ResultTypeArray :_eage +=_geeaf (_dgbea .ListValues (),_ebdeg );case ResultTypeString :if _ebdeg ==_fgda {_eage ++;};case ResultTypeEmpty :if _ebdeg ==_bggf {_eage ++;};};};return _eage ;};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_g .NewReader (s ));};

// GetLocked returns FALSE for the invalid reference context.
func (_fdea *ivr )GetLocked (cellRef string )bool {return false };var _afdg =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cgbc (args ,false )};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ddef :=args [0];_efea :=args [1];if _efea .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cebg :=args [2].AsNumber ();if _cebg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecdd :=false ;if len (args )==4{_gbgb :=args [3].AsNumber ();if _gbgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gbgb .ValueNumber ==0{_ecdd =true ;};};_bceg :=-1;_dacd :=false ;if len (_efea .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_ffac :=_efea .ValueArray [0];_abca :for _bceb ,_cdfec :=range _ffac {switch _ceabe (_cdfec ,_ddef ,false ,_ecdd ){case _bcafb :_bceg =_bceb ;case _ccfe :_bceg =_bceb ;_dacd =true ;break _abca ;};};if _bceg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dcad :=int (_cebg .ValueNumber )-1;if _dcad < 0||_dcad > len (_efea .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_ffac =_efea .ValueArray [_dcad ];if _bceg < 0||_bceg >=len (_ffac ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _dacd ||!_ecdd {return _ffac [_bceg ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_bdb [][]Expression };func _dcdd (_bcfa Context ,_cbbbf ,_caaf int )(string ,string ){_bfabb :="\u0041"+_cb .Itoa (_cbbbf );_ebgb :=_bcfa .LastColumn (_cbbbf ,_caaf );_ccadc :=_ebgb +_cb .Itoa (_caaf );return _bfabb ,_ccadc ;};const _debgf int =30;

// String returns a string representation of PrefixExpr.
func (_bagec PrefixExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021%\u0073",_bagec ._gfae .String (),_bagec ._begbag .String ());};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_ffgg ,_gfdb :=_cbdc (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _gfdb .Type ==ResultTypeError {return _gfdb ;};_dedf :=_ffgg ._gac ;_gbbbd :=_ffgg ._afea ;_ceaf :=_ffgg ._affc ;_egec :=_ffgg ._aaecf ;_fcgd :=_ffgg ._adbe ;_aac :=_ffgg ._cgde ;if _aac >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_bddb :=_ffgg ._dcfe ;_gbcg :=1.0/_aac ;_bdec :=2.5;if _gbcg < 3{_bdec =1;}else if _gbcg < 5{_bdec =1.5;}else if _gbcg <=6{_bdec =2;};_aac *=_bdec ;_cefe ,_decg :=_bdcd (_gbbbd ,_ceaf ,_bddb );if _decg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_fbfg :=_cebb (_cefe *_aac *_dedf );_dedf -=_fbfg ;_dbfc :=_dedf -_egec ;for _abef :=0;_abef < _fcgd ;_abef ++{_fbfg =_cebb (_aac *_dedf );_dbfc -=_fbfg ;if _dbfc < 0{switch _fcgd -_abef {case 0:case 1:return MakeNumberResult (_cebb (_dedf *0.5));default:return MakeNumberResult (0);};};_dedf -=_fbfg ;};return MakeNumberResult (_fbfg );};var _bdefb =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dddaf :=args [0];if _dddaf .Type ==ResultTypeError ||_dddaf .Type ==ResultTypeString {return _dddaf ;};return _bef ;};const _becbed =57378;func _bcabg (_bcde []Result ,_bgddc bool )Result {_bagef :="\u004d\u0049\u004e";if _bgddc {_bagef ="\u004d\u0049\u004e\u0041";};if len (_bcde )==0{return MakeErrorResult (_bagef +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgf :=_fg .MaxFloat64 ;for _ ,_bfdec :=range _bcde {switch _bfdec .Type {case ResultTypeNumber :if (_bgddc ||!_bfdec .IsBoolean )&&_bfdec .ValueNumber < _ecgf {_ecgf =_bfdec .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_ccaa :=_bcabg (_bfdec .ListValues (),_bgddc );if _ccaa .ValueNumber < _ecgf {_ecgf =_ccaa .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_egba :=0.0;if _bgddc {_egba =_bfdec .AsNumber ().ValueNumber ;};if _egba < _ecgf {_ecgf =_egba ;};default:_fc .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bagef +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bfdec .Type );};};if _ecgf ==_fg .MaxFloat64 {_ecgf =0;};return MakeNumberResult (_ecgf );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _ddfea (args ,_dbggf )};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_gcbe :=_g .Split (v ,"\u003a");if len (_gcbe )!=2{return nil ;};if _gcbe [0]> _gcbe [1]{_gcbe [0],_gcbe [1]=_gcbe [1],_gcbe [0];};return VerticalRange {_dgfg :_gcbe [0],_cdeg :_gcbe [1]};};func _de (_ag ,_db [][]Result )bool {if len (_ag )!=len (_db ){return false ;};for _afe :=range _ag {if len (_ag [_afe ])!=len (_db [_afe ]){return false ;};};return true ;};const _cgabg =57374;

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};const _gede =57371;

// Eval evaluates and returns a number.
func (_abgga Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_abgga ._fbeeb )};const _ede ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_bgba :=len (args );if _bgba < 3||_bgba > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbaa :=args [0].ValueNumber ;if _gbaa !=float64 (int (_gbaa )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbfg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gdba :=args [2].ValueNumber ;_dabc :=0.0;if _bgba >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dabc =args [3].ValueNumber ;};_acgf :=0.0;if _bgba >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_acgf =args [4].ValueNumber ;if _acgf !=0{_acgf =1;};};_adebb :=0.1;if _bgba >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adebb =args [5].ValueNumber ;};_decc :=100;_eeec :=0;_eegf :=false ;_ccgg :=1e-6;_aadb :=_adebb ;for _eeec < _decc &&!_eegf {_efag :=_fg .Pow (_aadb +1,_gbaa );_ffdde :=_fg .Pow (_aadb +1,_gbaa -1);_eadc :=_aadb *_acgf +1;_gbac :=_gbfg *(_efag -1);_dfece :=_dabc +_efag *_gdba +_gbac *_eadc /_aadb ;_gbe :=_gbaa *_ffdde *_gdba -_gbac *_eadc /_fg .Pow (_aadb ,2);_cede :=(_gbaa *_gbfg *_ffdde *_eadc +_gbac *_acgf )/_aadb ;_bgbe :=_dfece /(_gbe +_cede );if _fg .Abs (_bgbe )< _ccgg {_eegf =true ;};_eeec ++;_aadb -=_bgbe ;};return MakeNumberResult (_aadb );};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dfe :=args [0];switch _dfe .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_bgff :=_gaf (_dfe .ValueNumber );return MakeNumberResult (float64 (_bgff .Minute ()));case ResultTypeString :_efdc :=_g .ToLower (_dfe .ValueString );if !_cdg (_efdc ){_ ,_ ,_ ,_eee ,_gbca :=_dbgab (_efdc );if _gbca .Type ==ResultTypeError {_gbca .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _gbca ;};if _eee {return MakeNumberResult (0);};};_ ,_bgfe ,_ ,_ ,_ ,_ccbg :=_ecdg (_efdc );if _ccbg .Type ==ResultTypeError {return _ccbg ;};return MakeNumberResult (float64 (_bgfe ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func _beca (_bbeb ,_afgf ,_bffe ,_cfgf float64 ,_affcf int )float64 {var _gggdg float64 ;if _bbeb ==0{_gggdg =(_bffe +_cfgf )/_afgf ;}else {_dbgf :=_fg .Pow (1+_bbeb ,_afgf );if _affcf ==1{_gggdg =(_cfgf *_bbeb /(_dbgf -1)+_bffe *_bbeb /(1-1/_dbgf ))/(1+_bbeb );}else {_gggdg =_cfgf *_bbeb /(_dbgf -1)+_bffe *_bbeb /(1-1/_dbgf );};};return -_gggdg ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_aff ,_fab :=_cbeb (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _fab .Type ==ResultTypeError {return _fab ;};return MakeNumberResult (_eeafc (_aff ._dfba ,_aff ._fadc ,_aff ._bdcb ,_aff ._fbb ));};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_gcedc :=args [0];if _gcedc .Type !=ResultTypeArray &&_gcedc .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abgba :=_abgd (args [1]);_caea :=0;for _ ,_ebba :=range _gadgc (_gcedc ){for _ ,_fgfaa :=range _ebba {if _gbfe (_fgfaa ,_abgba ){_caea ++;};};};return MakeNumberResult (float64 (_caea ));};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_bdadg :e }};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_fg .Pi );};func _fd (_ec Result )bool {if _ec .Type ==ResultTypeString {return _ec .ValueString =="";};return _ec .ValueNumber ==0;};func init (){_fgfad ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afced :=args [0].AsString ();if _afced .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_bgcaf :="\u0041\u0031";if len (args )==2{_gddc :=args [1].Ref ;if _gddc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_bgcaf =_gddc .Value ;};switch _afced .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_bdeccb ,_gaaa :=_gf .ParseCellReference (_bgcaf );if _gaaa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgcaf );};_dbbe :="\u0024"+_bdeccb .Column +"\u0024"+_cb .Itoa (int (_bdeccb .RowIdx ));if _bdeccb .SheetName !=""{_dbbe =_bdeccb .SheetName +"\u0021"+_dbbe ;};return MakeStringResult (_dbbe );case "\u0063\u006f\u006c":_ffffd ,_agge :=_gf .ParseCellReference (_bgcaf );if _agge !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgcaf );};return MakeNumberResult (float64 (_ffffd .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_eegd :=_g .Contains (ctx .GetFormat (_bgcaf ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_eegd );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_ddae :="\u0047";_baaad :=ctx .GetFormat (_bgcaf );if _baaad =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_ccbcf .MatchString (_baaad ){_ddae ="\u0046\u0030";}else if _baaad =="\u0030\u0025"{_ddae ="\u0050\u0030";}else if _baaad =="\u004d\u004d\u004d\u0020\u0044\u0044"{_ddae ="\u0044\u0032";}else if _baaad =="\u004d\u004d\u002fY\u0059"{_ddae ="\u0044\u0033";}else if _baaad =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_baaad =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_ddae ="\u0044\u0034";}else if _baaad =="\u004d\u004d\u005c\u002d\u0044\u0044"{_ddae ="\u0044\u0035";}else if _baaad =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_ddae ="\u0044\u0036";}else if _baaad =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_ddae ="\u0044\u0037";}else if _baaad =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_ddae ="\u0044\u0038";}else if _baaad =="\u0048\u0048\u003aM\u004d"{_ddae ="\u0044\u0039";}else if _ffggg .MatchString (_baaad ){_ddae ="\u002e\u0030";}else if _ebga .MatchString (_baaad ){_ddae ="\u002e\u0030\u0028\u0029";}else if _feba .MatchString (_baaad ){_ddae ="\u0043\u0030";}else if _bfad .MatchString (_baaad )||_bcbg .MatchString (_baaad ){_ddae ="\u0044\u0031";}else if _fggea :=_abbc .FindStringSubmatch (_baaad );len (_fggea )> 1{_ddae ="\u0046"+_cb .Itoa (len (_fggea [1]));}else if _gggec :=_dfgabb .FindStringSubmatch (_baaad );len (_gggec )> 1{_ddae ="\u002e"+_cb .Itoa (len (_gggec [2]));}else if _debg :=_dagg .FindStringSubmatch (_baaad );len (_debg )> 1{_ddae ="\u0050"+_cb .Itoa (len (_debg [2]));}else if _adgdf :=_gaa .FindStringSubmatch (_baaad );len (_adgdf )> 1{_ddae ="\u0043"+_bddbc (_adgdf ,1);}else if _fbea :=_aafd .FindStringSubmatch (_baaad );len (_fbea )> 1{_ddae ="\u0043"+_bddbc (_fbea ,1);}else if _fagg :=_gddf .FindStringSubmatch (_baaad );len (_fagg )> 1{_ddae ="\u002e"+_bddbc (_fagg ,1)+"\u0028\u0029";}else if _ebcf :=_dadd .FindStringSubmatch (_baaad );len (_ebcf )> 1{_ddae ="\u002e"+_bddbc (_ebcf ,1);}else if _dgbe :=_beaa .FindStringSubmatch (_baaad );len (_dgbe )> 1{_ddae ="\u0053"+_bddbc (_dgbe ,3);};if _ddae !="\u0047"&&_g .Contains (_baaad ,"\u005b\u0052\u0045D\u005d"){_ddae +="\u002d";};return MakeStringResult (_ddae );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_bfef :=ctx .GetFormat (_bgcaf );if _egdc .MatchString (_bfef ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_bgcaf ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_ccgf :=0.0;if ctx .GetLocked (_bgcaf ){_ccgf =1.0;};return MakeNumberResult (_ccgf );case "\u0072\u006f\u0077":_ecde ,_fgde :=_gf .ParseCellReference (_bgcaf );if _fgde !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgcaf );};return MakeNumberResult (float64 (_ecde .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_faacd ,_caeg :=_gf .ParseCellReference (_bgcaf );if _caeg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bgcaf );};if _faacd .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_faacd .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_faacd .SheetName ).GetWidth (int (_faacd .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_afced .ValueString );};func _daeb (_agbe Result ,_eegfc int )[]Result {_ebfd :=[]Result {};switch _agbe .Type {case ResultTypeList :_gead :=_agbe .ValueList ;_dcaa :=len (_gead );for _gffa :=0;_gffa < _eegfc ;_gffa ++{if _gffa < _dcaa {_ebfd =append (_ebfd ,_gead [_gffa ]);}else {_ebfd =append (_ebfd ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gdbaa :=0;_gdbaa < _eegfc ;_gdbaa ++{_ebfd =append (_ebfd ,_agbe );};};return _ebfd ;};var _aed =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// String returns a string representation of CellRef.
func (_bbd CellRef )String ()string {return _bbd ._fe };var _dbcab =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_cffgd :=args [0].AsNumber ();_fagf :=args [1].AsNumber ();if _cffgd .Type ==ResultTypeNumber &&_fagf .Type ==ResultTypeNumber {_cbab :=_fg .Atan2 (_fagf .ValueNumber ,_cffgd .ValueNumber );if _cbab !=_cbab {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_cbab );};for _ ,_fdbge :=range []ResultType {_cffgd .Type ,_fagf .Type }{switch _fdbge {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _cffgd ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdbge ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Reference returns an invalid reference for String.
func (_dbaeaf String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_eagdb :=len (args );if _eagdb !=6&&_eagdb !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfcgc ,_egcc ,_abgb :=_abcg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _abgb .Type ==ResultTypeError {return _abgb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dggg :=args [2].ValueNumber ;if _dggg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_edad :=args [3].ValueNumber ;if _edad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_affb :=args [4].ValueNumber ;if _affb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbc :=args [5];if _ffbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_feffe :=_ffbc .ValueNumber ;if !_ebdd (_feffe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_efdd :=0;if _eagdb ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efdd =int (args [6].ValueNumber );if !_defe (_efdd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_aegc ,_abgb :=_ggfd (_bfcgc ,_egcc ,_dggg ,_edad ,_affb ,_feffe ,_efdd );if _abgb .Type ==ResultTypeError {return _abgb ;};return MakeNumberResult (_aegc );};

// String returns a string representation for Negate.
func (_faacg Negate )String ()string {return "\u002d"+_faacg ._bdadg .String ()};var _fdbg string =string ([]byte {92});

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_bdea ,_caef :=_ddab (args ,false );if _caef ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_bdea /_caef );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_afba NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_egfgc :=ctx .NamedRange (_afba ._egebg );_gbab :=_egfgc .Value ;if _fcbg ,_ddeg :=ev .GetFromCache (_gbab );_ddeg {return _fcbg ;};_dadb :=_g .Split (_gbab ,"\u0021");if len (_dadb )!=2{return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_gbab ));};_dfbcg :=ctx .Sheet (_dadb [0]);_fgbdf :=_g .Split (_dadb [1],"\u003a");switch len (_fgbdf ){case 1:_ebbf :=ev .Eval (_dfbcg ,_fgbdf [0]);ev .SetCache (_gbab ,_ebbf );return _ebbf ;case 2:_ggdbd :=_dfbfg (_dfbcg ,ev ,_fgbdf [0],_fgbdf [1]);ev .SetCache (_gbab ,_ggdbd );return _ggdbd ;};return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_egfgc .Type ));};const _edfg ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_afcc :=args [0].AsNumber ();if _afcc .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _afcc .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_dedcb (_afcc .ValueNumber ));};const _geabgb =2;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_egebg :v }};func _adgee (_dgbae ,_dfgd ,_ggdc Reference )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dgbae .Value ,_dfgd .Value ,_ggdc .Value );};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bagf PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_cgcf :=_bagf ._cedbe .Reference (ctx ,ev );switch _cgcf .Type {case ReferenceTypeSheet :if _edcfd (_cgcf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_cgcf .Value ));};_dfbg :=_bagf .verticalRangeReference (_cgcf .Value );if _bfeag ,_eabe :=ev .GetFromCache (_dfbg );_eabe {return _bfeag ;};_caafa :=ctx .Sheet (_cgcf .Value );_deee ,_ffdaf :=_acfec (_caafa ,_bagf ._gbeff ,_bagf ._fagfg );_fabgc :=_dfbfg (_caafa ,ev ,_deee ,_ffdaf );ev .SetCache (_dfbg ,_fabgc );return _fabgc ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cgcf .Type ));};};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_cacbc Context ,_gbcged Evaluator ,_fddag []Result )Result ;func _ccbe (_addga ,_baag ,_gafd ,_cfga ,_cggf float64 )float64 {var _adag float64 ;_gggdd :=_cggf /_gafd ;if _gggdd >=1{_gggdd =1;if _cfga ==1{_adag =_addga ;}else {_adag =0;};}else {_adag =_addga *_fg .Pow (1-_gggdd ,_cfga -1);};_cebbe :=_addga *_fg .Pow (1-_gggdd ,_cfga );var _fcc float64 ;if _cebbe < _baag {_fcc =_adag -_baag ;}else {_fcc =_adag -_cebbe ;};if _fcc < 0{_fcc =0;};return _fcc ;};func _cbdc (_ecfg []Result ,_gbff string )(*amorArgs ,Result ){_ddc :=len (_ecfg );if _ddc !=6&&_ddc !=7{return nil ,MakeErrorResult (_gbff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ecfg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gbff +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bced :=_ecfg [0].ValueNumber ;if _bced < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gbff +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_baba ,_aafe :=_ecbgc (_ecfg [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_gbff );if _aafe .Type ==ResultTypeError {return nil ,_aafe ;};_befa ,_aafe :=_ecbgc (_ecfg [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_gbff );if _aafe .Type ==ResultTypeError {return nil ,_aafe ;};if _befa < _baba {return nil ,MakeErrorResultType (ErrorTypeNum ,_gbff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _ecfg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gbff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfgd :=_ecfg [3].ValueNumber ;if _bfgd < 0||_bfgd > _bced {return nil ,MakeErrorResultType (ErrorTypeNum ,_gbff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _ecfg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gbff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bff :=int (_ecfg [4].ValueNumber );if _bff < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gbff +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _ecfg [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gbff +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cceg :=_ecfg [5].ValueNumber ;if _cceg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gbff +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_adee :=0;if _ddc ==7&&_ecfg [6].Type !=ResultTypeEmpty {if _ecfg [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gbff +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adee =int (_ecfg [6].ValueNumber );if !_defe (_adee )||_adee ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_gbff );};};return &amorArgs {_bced ,_baba ,_befa ,_bfgd ,_bff ,_cceg ,_adee },_bef ;};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_beac :=_cg .Now ();_ ,_ecd :=_beac .Zone ();_eegg :=_fdef (_eeg ,_beac .Unix ()+int64 (_ecd ))+1;return MakeNumberResult (_eegg );};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egadb :=args [0].AsString ();if _egadb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_egadb .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_egadb .ValueString [0]));};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_gbdf :=_cg .Now ();_ ,_dbgg :=_gbdf .Zone ();_dcg :=_cd +float64 (_gbdf .Unix ()+int64 (_dbgg ))/86400;return MakeNumberResult (_dcg );};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_gfa ,_ed Expression ;_ce BinOpType ;};const _bdgb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebf :=args [0].Ref ;for _ebf .Type ==ReferenceTypeNamedRange {_ebf =ctx .NamedRange (_ebf .Value );};_fegf :="";switch _ebf .Type {case ReferenceTypeCell :_fegf =_ebf .Value ;case ReferenceTypeRange :_afgce :=_g .Split (_ebf .Value ,"\u003a");if len (_afgce )==2{_fegf =_afgce [0];};default:return MakeErrorResult (_d .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_ebf .Type ));};_dgff ,_efbf :=_gf .ParseCellReference (_fegf );if _efbf !=nil {return MakeErrorResult (_d .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_efbf .Error ()));};_cccb ,_aefd ,_eafg :=_dgff .Column ,_dgff .RowIdx ,_dgff .SheetName ;_ebca :=args [1].AsNumber ();if _ebca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_egd :=args [2].AsNumber ();if _egd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _bcedb ,_ggcfee Result ;if len (args )==3{_bcedb =MakeNumberResult (1);_ggcfee =MakeNumberResult (1);}else {_bcedb =args [3].AsNumber ();if _bcedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _bcedb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_ggcfee =args [4].AsNumber ();if _ggcfee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _ggcfee .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_fbff :=_gf .ColumnToIndex (_cccb );_fggd :=_aefd +uint32 (_ebca .ValueNumber );_cefdcd :=_fbff +uint32 (_egd .ValueNumber );_cdbb :=_fggd +uint32 (_bcedb .ValueNumber );_geec :=_cefdcd +uint32 (_ggcfee .ValueNumber );if _bcedb .ValueNumber > 0{_cdbb --;}else {_cdbb ++;_fggd ,_cdbb =_cdbb ,_fggd ;};if _ggcfee .ValueNumber > 0{_geec --;}else {_geec ++;_cefdcd ,_geec =_geec ,_cefdcd ;};_bdecc :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_gf .IndexToColumn (_cefdcd ),_fggd );_agc :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_gf .IndexToColumn (_geec ),_cdbb );if _eafg ==""{return _dfbfg (ctx ,ev ,_bdecc ,_agc );}else {return _dfbfg (ctx .Sheet (_eafg ),ev ,_bdecc ,_agc );};};var _gcg =map[string ]*_ga .Regexp {};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_feec :=args [0].AsString ();if _feec .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfbc :=_af .Buffer {};_cecg :=false ;_becbe :=false ;_dedfg :=0;for _ ,_ccafe :=range _feec .ValueString {_cgge :=_ccafe ==' ';if _cgge {if !_cecg {continue ;};if !_becbe {_dedfg ++;_bfbc .WriteRune (_ccafe );};}else {_dedfg =0;_cecg =true ;_bfbc .WriteRune (_ccafe );};_becbe =_cgge ;};_bfbc .Truncate (_bfbc .Len ()-_dedfg );return MakeStringResult (_bfbc .String ());};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_fgdd PrefixRangeExpr )Update (q *_ae .UpdateQuery )Expression {_gfbgf :=_fgdd ;_dgafb :=_fgdd ._caaea .String ();if _dgafb ==q .SheetToUpdate {_dcfc :=*q ;_dcfc .UpdateCurrentSheet =true ;_gfbgf ._cabc =_fgdd ._cabc .Update (&_dcfc );_gfbgf ._gbcge =_fgdd ._gbcge .Update (&_dcfc );};return _gfbgf ;};

// Reference returns a string reference value to a cell.
func (_df CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_df ._fe };};var _ggc =[]*_ga .Regexp {};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_fg .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};const _gfbbe =57373;

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_afbc ,_aga :=_fcda (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _aga .Type ==ResultTypeError {return _aga ;};_faec :=_afbc ._bab ;_efff :=_afbc ._cbga ;_bffc :=_afbc ._ffga ;_ggfa :=_afbc ._abfg ;_bdaf :=_afbc ._geab ;_feff :=_afbc ._gbgc ;_dbgb :=_acgcg (_faec ,_efff ,_bffc ,_ggfa ,_bdaf ,_feff );if _dbgb .Type ==ResultTypeError {return _dbgb ;};_ebaf :=_dbgb .ValueNumber /(1.0+_ggfa /_bdaf );return MakeNumberResult (_ebaf );};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _dddd (_bgdd Result ,_eddf *criteriaParsed )bool {if _bgdd .Type ==ResultTypeEmpty {return false ;};if _eddf ._eefb {return _bgdd .ValueNumber ==_eddf ._acfca ;}else {_eagc :=_g .ToLower (_bgdd .ValueString );return _eddf ._dfddf ==_eagc ||_cgdc .Match (_eddf ._dfddf ,_eagc );};};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_aae ConstArrayExpr )Update (q *_ae .UpdateQuery )Expression {return _aae };type ivr struct{};

// Eval evaluates and returns a boolean.
func (_acg Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_acg ._eab )};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ceff :=args [0].ValueNumber ;_fee :=args [1].ValueNumber ;_fged :=args [2].ValueNumber ;_cda :=_afb (_ceff ,_fee ,_fged );if _cda >=0{return MakeNumberResult (_cda );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bdd :=args [1].ValueNumber ;_febf :=args [0];var _bbbb float64 ;switch _febf .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_bbbb =_febf .ValueNumber ;case ResultTypeString :_cef :=DateValue ([]Result {args [0]});if _cef .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bbbb =_cef .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bgca :=_gaf (_bbbb );_aee :=_bgca .AddDate (0,int (_bdd ),0);_aaea ,_bec ,_feaf :=_aee .Date ();_ggcc :=_acgc (_aaea ,int (_bec ),_feaf );if _ggcc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_ggcc );};func _cebb (_cbdag float64 )float64 {return float64 (int (_cbdag +0.5))};func (_ccdb BinOpType )String ()string {if _ccdb >=BinOpType (len (_acf )-1){return _d .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ccdb );};return _gbf [_acf [_ccdb ]:_acf [_ccdb +1]];};func _fcda (_adfd []Result ,_bcdb string )(*durationArgs ,Result ){_cefc :=len (_adfd );if _cefc !=5&&_cefc !=6{return nil ,MakeErrorResult (_bcdb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgb ,_ccfd ,_efe :=_abcg (_adfd [0],_adfd [1],_bcdb );if _efe .Type ==ResultTypeError {return nil ,_efe ;};_ddg :=_adfd [2];if _ddg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcdb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cced :=_ddg .ValueNumber ;if _cced < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_gggbe :=_adfd [3];if _gggbe .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcdb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ffgf :=_gggbe .ValueNumber ;if _ffgf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_cada :=_adfd [4];if _cada .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcdb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eaac :=float64 (int (_cada .ValueNumber ));if !_ebdd (_eaac ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gefc :=0;if _cefc ==6&&_adfd [5].Type !=ResultTypeEmpty {_bfbbg :=_adfd [5];if _bfbbg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcdb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gefc =int (_bfbbg .ValueNumber );if !_defe (_gefc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_bcdb );};};return &durationArgs {_cgb ,_ccfd ,_cced ,_ffgf ,_eaac ,_gefc },_bef ;};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgedd :=args [0];if _dgedd .Type ==ResultTypeNumber {return _dgedd ;};if _dgedd .Type ==ResultTypeString {_dgaf ,_dfddg :=_cb .ParseFloat (_dgedd .Value (),64);if _dfddg ==nil {return MakeNumberResult (_dgaf );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_ggge :=len (args );if _ggge < 3||_ggge > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_abbd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggcd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_agdc :=args [2].ValueNumber ;_cbfga :=0.0;if _ggge >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbfga =args [3].ValueNumber ;};_dbb :=0.0;if _ggge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dbb =args [4].ValueNumber ;if _dbb !=0{_dbb =1;};};_afec :=_ggcd *(1+_abbd *_dbb )-_cbfga *_abbd ;_dece :=(_agdc *_abbd +_ggcd *(1+_abbd *_dbb ));return MakeNumberResult (_fg .Log (_afec /_dece )/_fg .Log (1+_abbd ));};func _begd (_bcdg ,_aaac []float64 ,_edge float64 )Result {_babc :=false ;_bcce :=false ;for _gadga :=0;_gadga < len (_bcdg );_gadga ++{if _bcdg [_gadga ]> 0{_babc =true ;};if _bcdg [_gadga ]< 0{_bcce =true ;};};if !_babc ||!_bcce {return MakeErrorResultType (ErrorTypeNum ,"");};_acef :=_edge ;_dgag :=1e-10;_dcde :=0;_afbg :=50;_dcff :=false ;for {_dcag :=_cgfe (_bcdg ,_aaac ,_acef );_bcab :=_acef -_dcag /_bagb (_bcdg ,_aaac ,_acef );_cbde :=_fg .Abs (_bcab -_acef );_acef =_bcab ;_dcde ++;if _cbde <=_dgag ||_fg .Abs (_dcag )<=_dgag {break ;};if _dcde > _afbg {_dcff =true ;break ;};};if _dcff ||_fg .IsNaN (_acef )||_fg .IsInf (_acef ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_acef );};const _efaca =57359;func _gefe (_ffgec string ,_fafa []Result )(*parsedReplaceObject ,Result ){if len (_fafa )!=4{return nil ,MakeErrorResult (_ffgec +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fafa [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_ffgec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_agbfd :=_fafa [0].ValueString ;if _fafa [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_bgac :=int (_fafa [1].ValueNumber )-1;if _fafa [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_cabg :=int (_fafa [2].ValueNumber );if _fafa [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_ffgec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_gfgfg :=_fafa [3].ValueString ;return &parsedReplaceObject {_agbfd ,_bgac ,_cabg ,_gfgfg },_bef ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_bggeg ,_dfcag :=_gefe ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _dfcag .Type !=ResultTypeEmpty {return _dfcag ;};_bffag :=_bggeg ._facdb ;_ebed :=_bggeg ._fbed ;_gacc :=_bggeg ._fecab ;_fbaef :=_bggeg ._gefd ;_bdgeg :=len (_bffag );if _ebed > _bdgeg {_ebed =_bdgeg ;};_bccab :=_ebed +_gacc ;if _bccab > _bdgeg {_bccab =_bdgeg ;};_faacc :=_bffag [0:_ebed ]+_fbaef +_bffag [_bccab :];return MakeStringResult (_faacc );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_dcgde ,_caefb ,_adbc :=_aafc (from ,to );if _adbc !=nil {_fc .Log (_adbc .Error ());return NewError (_adbc .Error ());};return Range {_bdgcbd :_dcgde ,_febfg :_caefb };};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_afcda :=len (args );if _afcda !=4&&_afcda !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gebc :=args [0].ValueNumber ;if _gebc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cddac :=args [1].ValueNumber ;if _cddac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_begb :=args [2].ValueNumber ;if _begb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beacc :=args [3].ValueNumber ;if _beacc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _beacc > _begb {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_cbfg :=2.0;if _afcda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbfg =args [4].ValueNumber ;if _cbfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_ccbe (_gebc ,_cddac ,_begb ,_beacc ,_cbfg ));};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_bgc string ,_fb Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_dcd string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_cg .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_ge int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_egfc string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_eff string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ccg string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_eabf string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_dga string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_aag ,_edd int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_ade string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_bda string ,_ccc bool );

// NamedRange returns a named range.
NamedRange (_bbb string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_dfc ,_bdac uint32 );};

// String returns a string representation of ConstArrayExpr.
func (_ggd ConstArrayExpr )String ()string {return ""};func _bdf (_ad string ,_aa *_ae .UpdateQuery )string {_bdff ,_efg :=_gf .ParseCellReference (_ad );if _efg !=nil {return "\u0023\u0052\u0045F\u0021";};if _aa .UpdateType ==_ae .UpdateActionRemoveColumn {_cf :=_aa .ColumnIdx ;_ggf :=_bdff .ColumnIdx ;if _ggf < _cf {return _ad ;}else if _ggf ==_cf {return "\u0023\u0052\u0045F\u0021";}else {return _bdff .Update (_ae .UpdateActionRemoveColumn ).String ();};};return _ad ;};func _gggad (_bded []Result )Result {_ageg :=_bded [0].ValueArray ;if len (_bded )==1{_gcdaf :=[][]Result {};for _ ,_bbbg :=range _ageg {_gcdaf =append (_gcdaf ,_dfcb ([]Result {MakeListResult (_bbbg )}).ValueList );};return MakeArrayResult (_gcdaf );}else if len (_bded )==2{_fffff :=len (_ageg );_ddbgc :=len (_ageg [0]);_ddda :=_ddec (_bded [1],_fffff ,_ddbgc );_dgae :=len (_ddda );_bebe :=[][]Result {};var _gbeba []Result ;for _ccea ,_abeg :=range _ageg {if _ccea < _dgae {_gbeba =_ddda [_ccea ];}else {_gbeba =_daeb (MakeErrorResultType (ErrorTypeNA ,""),_ddbgc );};_bebe =append (_bebe ,_dfcb ([]Result {MakeListResult (_abeg ),MakeListResult (_gbeba )}).ValueList );};return MakeArrayResult (_bebe );}else if len (_bded )==3{_efcd :=len (_ageg );_bfde :=len (_ageg [0]);_efbb :=_ddec (_bded [1],_efcd ,_bfde );_gaeg :=_ddec (_bded [2],_efcd ,_bfde );_agca :=len (_efbb );_efbg :=len (_gaeg );_aaeb :=[][]Result {};var _dcagg ,_ffbcf []Result ;for _dbfbb ,_eggd :=range _ageg {if _dbfbb < _agca {_dcagg =_efbb [_dbfbb ];}else {_dcagg =_daeb (MakeErrorResultType (ErrorTypeNA ,""),_bfde );};if _dbfbb < _efbg {_ffbcf =_gaeg [_dbfbb ];}else {_ffbcf =_daeb (MakeErrorResultType (ErrorTypeNA ,""),_bfde );};_aaeb =append (_aaeb ,_dfcb ([]Result {MakeListResult (_eggd ),MakeListResult (_dcagg ),MakeListResult (_ffbcf )}).ValueList );};return MakeArrayResult (_aaeb );};return MakeErrorResultType (ErrorTypeValue ,"");};func (_fcba PrefixHorizontalRange )horizontalRangeReference (_ccbee string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ccbee ,_fcba ._dgeb ,_fcba ._dedda );};const _ccggb ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// Update updates references in the Negate after removing a row/column.
func (_aeecc Negate )Update (q *_ae .UpdateQuery )Expression {return Negate {_bdadg :_aeecc ._bdadg .Update (q )};};func _aafdc (_deag ,_fegd []string )[]string {for _ ,_addc :=range _fegd {_deag =append (_deag ,_addc );};return _deag ;};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_fbbeg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_fbbeg =int (args [1].ValueNumber );if _fbbeg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _fbbeg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_fadb :=args [0].Value ();if _fbbeg > len (_fadb ){return MakeStringResult (_fadb );};return MakeStringResult (_fadb [0:_fbbeg ]);};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_ecab :name ,_fggga :args };};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_bgcca :=args [0].AsString ();if _bgcca .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_dacg :=_af .Buffer {};_ggadb :=false ;for _ ,_eadce :=range _bgcca .ValueString {if !_ggadb &&_a .IsLetter (_eadce ){_dacg .WriteRune (_a .ToUpper (_eadce ));}else {_dacg .WriteRune (_a .ToLower (_eadce ));};_ggadb =_a .IsLetter (_eadce );};return MakeStringResult (_dacg .String ());};func _aafc (_ceafb ,_cffed Expression )(Expression ,Expression ,error ){_bgcade ,_defbf :=_ceafb .(CellRef );if !_defbf {return nil ,nil ,_b .New (_d .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_ceafb .String ()));};_eeaa ,_defbf :=_cffed .(CellRef );if !_defbf {return nil ,nil ,_b .New (_d .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_cffed .String ()));};_acaa ,_gecag :=_gf .ParseCellReference (_bgcade ._fe );if _gecag !=nil {return nil ,nil ,_gecag ;};_adgcf ,_eeac :=_gf .ParseCellReference (_eeaa ._fe );if _eeac !=nil {return nil ,nil ,_eeac ;};_agcdf :=false ;if _acaa .RowIdx > _adgcf .RowIdx {_agcdf =true ;_acaa .RowIdx ,_adgcf .RowIdx =_adgcf .RowIdx ,_acaa .RowIdx ;};if _acaa .ColumnIdx > _adgcf .ColumnIdx {_agcdf =true ;_acaa .ColumnIdx ,_adgcf .ColumnIdx =_adgcf .ColumnIdx ,_acaa .ColumnIdx ;_acaa .Column ,_adgcf .Column =_adgcf .Column ,_acaa .Column ;};if _agcdf {return NewCellRef (_acaa .String ()),NewCellRef (_adgcf .String ()),nil ;};return _ceafb ,_cffed ,nil ;};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ddgb :=[]float64 {};for _ ,_cbefa :=range args {switch _cbefa .Type {case ResultTypeString :_ffgag :=_cbefa .AsNumber ();if _ffgag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ddgb =append (_ddgb ,_ffgag .ValueNumber );case ResultTypeList :_fcagg :=LCM (_cbefa .ValueList );if _fcagg .Type !=ResultTypeNumber {return _fcagg ;};_ddgb =append (_ddgb ,_fcagg .ValueNumber );case ResultTypeNumber :_ddgb =append (_ddgb ,_cbefa .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _cbefa ;};};if len (_ddgb )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _ddgb [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ddgb )==1{return MakeNumberResult (_ddgb [0]);};_fdcf :=_ddgb [0];for _daggf :=1;_daggf < len (_ddgb );_daggf ++{if _ddgb [_daggf ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fdcf =_ceba (_fdcf ,_ddgb [_daggf ]);};return MakeNumberResult (_fdcf );};func _abgd (_ccfdf Result )*criteriaParsed {_gegeg :=_ccfdf .Type ==ResultTypeNumber ;_ebbe :=_ccfdf .ValueNumber ;_bgad :=_g .ToLower (_ccfdf .ValueString );_gadgd :=_bfcc (_bgad );return &criteriaParsed {_gegeg ,_ebbe ,_bgad ,_gadgd };};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_addgag .Lock ();defer _addgag .Unlock ();if _ ,_debd :=_aeacfa [name ];_debd {_fc .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_aeacfa [name ]=fn ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_fgaba ,_bgaf :=_dafaf ("\u0046\u0049\u004e\u0044",args );if _bgaf .Type !=ResultTypeEmpty {return _bgaf ;};_bcge :=_fgaba ._bdcde ;if _bcge ==""{return MakeNumberResult (1.0);};_baec :=_fgaba ._ccee ;_caaee :=_fgaba ._afbe -1;_egce :=1;_fadcg :=0;for _dgde :=range _baec {if _dgde !=0{_fcfbe :=1;if _dgde -_fadcg > 1{_fcfbe =2;};_egce +=_fcfbe ;};if _egce > _caaee {_daaa :=_g .Index (_baec [_dgde :],_bcge );if _daaa ==0{return MakeNumberResult (float64 (_egce ));};};_fadcg =_dgde ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _efceb =[...]int {1};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_bggd ,_dce :=_dgc (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _dce .Type ==ResultTypeError {return _dce ;};_cgddc :=_bggd ._bcef ;_gdbb :=_bggd ._fed ;_gcc :=_bggd ._fbba ;_adec :=_bggd ._acfc ;_aefa :=_bggd ._ddff ;_eaagae :=_bggd ._cdee ;_bagc :=_beca (_cgddc ,_gdbb ,_gcc ,0,_eaagae );_cfg :=0.0;if _adec ==1{if _eaagae ==0{_cfg =_bagc +_gcc *_cgddc ;}else {_cfg =_bagc ;};_adec ++;};for _daffe :=_adec ;_daffe <=_aefa ;_daffe ++{if _eaagae ==1{_cfg +=_bagc -(_cae (_cgddc ,_daffe -2,_bagc ,_gcc ,1)-_bagc )*_cgddc ;}else {_cfg +=_bagc -_cae (_cgddc ,_daffe -1,_bagc ,_gcc ,0)*_cgddc ;};};return MakeNumberResult (_cfg );};type ri struct{_ebde float64 ;_eddc string ;};func _fcdd (_gefg ,_gfaa _cg .Time ,_ecg int )float64 {if _gefg .After (_gfaa ){_gefg ,_gfaa =_gfaa ,_gefg ;};_gfg :=0;_bad ,_ggga ,_aade :=_gefg .Date ();_ffg ,_fadd ,_efbc :=_gfaa .Date ();_bbe ,_dac :=int (_ggga ),int (_fadd );_dab ,_ecdf :=_ceg (_bad ,_bbe ,_aade ,_ecg ),_ceg (_ffg ,_dac ,_efbc ,_ecg );if !_bac (_ecg ){return _acgc (_ffg ,_dac ,_ecdf )-_acgc (_bad ,_bbe ,_dab );};if _ecg ==0{if (_bbe ==2||_dab < 30)&&_efbc ==31{_ecdf =31;}else if _dac ==2&&_ecdf ==_gbg (_ffg ,_dac ){_ecdf =_gbg (_ffg ,2);};}else {if _bbe ==2&&_dab ==30{_dab =_gbg (_bad ,2);};if _dac ==2&&_ecdf ==30{_ecdf =_gbg (_ffg ,2);};};if _bad < _ffg ||(_bad ==_ffg &&_bbe < _dac ){_gfg =30-_dab +1;_aade =1;_dab =1;_gafc :=_cg .Date (_bad ,_cg .Month (_bbe ),_aade ,0,0,0,0,_cg .UTC ).AddDate (0,1,0);if _gafc .Year ()< _ffg {_gfg +=_cga (_gafc .Year (),int (_gafc .Month ()),12,_ecg );_gafc =_gafc .AddDate (0,13-int (_gafc .Month ()),0);_gfg +=_adg (_gafc .Year (),_ffg -1,_ecg );};_gfg +=_cga (_ffg ,int (_gafc .Month ()),_dac -1,_ecg );_gafc =_gafc .AddDate (0,_dac -int (_gafc .Month ()),0);_bbe =_gafc .Day ();};_gfg +=_ecdf -_dab ;if _gfg > 0{return float64 (_gfg );}else {return 0;};};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_dge ,_ef :=_cb .ParseBool (v );if _ef !=nil {_fc .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_ef );};return Bool {_eab :_dge };};func _cbeb (_defd []Result ,_ggdf string )(*couponArgs ,Result ){_fgg :=len (_defd );if _fgg !=3&&_fgg !=4{return nil ,MakeErrorResult (_ggdf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cdc ,_efce ,_beeb :=_abcg (_defd [0],_defd [1],_ggdf );if _beeb .Type ==ResultTypeError {return nil ,_beeb ;};if _defd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggdf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdgce :=_defd [2].ValueNumber ;if !_ebdd (_bdgce ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_ggdf );};_cedge :=0;if _fgg ==4&&_defd [3].Type !=ResultTypeEmpty {if _defd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ggdf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cedge =int (_defd [3].ValueNumber );if !_defe (_cedge ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ggdf );};};return &couponArgs {_cdc ,_efce ,int (_bdgce ),_cedge },_bef ;};type amorArgs struct{_gac float64 ;_afea float64 ;_affc float64 ;_aaecf float64 ;_adbe int ;_cgde float64 ;_dcfe int ;};var _gbaf =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };const _cefed =57350;

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_dfga EmptyExpr )Update (q *_ae .UpdateQuery )Expression {return _dfga };func _egb (_deb BinOpType ,_edf ,_bf [][]Result )Result {_cgdcd :=[][]Result {};for _afg :=range _edf {_dc :=_cgf (_deb ,_edf [_afg ],_bf [_afg ]);if _dc .Type ==ResultTypeError {return _dc ;};_cgdcd =append (_cgdcd ,_dc .ValueList );};return MakeArrayResult (_cgdcd );};func (_acedb PrefixVerticalRange )verticalRangeReference (_eacd string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eacd ,_acedb ._gbeff ,_acedb ._fagfg );};func _cgbc (_babd []Result ,_eabd bool )Result {var _feacf string ;if _eabd {_feacf ="\u004c\u0041\u0052G\u0045";}else {_feacf ="\u0053\u004d\u0041L\u004c";};if len (_babd )!=2{return MakeErrorResult (_feacf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efcc :=_babd [0];var _cecf [][]Result ;switch _efcc .Type {case ResultTypeArray :_cecf =_efcc .ValueArray ;case ResultTypeList :_cecf =[][]Result {_efcc .ValueList };default:return MakeErrorResult (_feacf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_cecf )==0{return MakeErrorResult (_feacf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _babd [1].Type !=ResultTypeNumber {return MakeErrorResult (_feacf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ddcg :=_babd [1].ValueNumber ;if _ddcg < 1{return MakeErrorResultType (ErrorTypeNum ,_feacf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_faef :=int (_ddcg );if float64 (_faef )!=_ddcg {return MakeErrorResultType (ErrorTypeNum ,_feacf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_edfdd :=[]float64 {};for _ ,_dedc :=range _cecf {for _ ,_bbbcg :=range _dedc {if _bbbcg .Type ==ResultTypeNumber {_edfdd =append (_edfdd ,_bbbcg .ValueNumber );};};};if _faef > len (_edfdd ){return MakeErrorResultType (ErrorTypeNum ,_feacf +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ddcee :=_eg .MergeSort (_edfdd );if _eabd {return MakeNumberResult (_ddcee [len (_ddcee )-_faef ]);}else {return MakeNumberResult (_ddcee [_faef -1]);};};type Reference struct{Type ReferenceType ;Value string ;};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_abbb :=len (args );if _abbb < 5||_abbb > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdgf :=args [0].ValueNumber ;if _bdgf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfdf :=args [1].ValueNumber ;if _bfdf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbcc :=args [2].ValueNumber ;if _dbcc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _dbcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faed :=args [3].ValueNumber ;if _faed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddfb :=args [4].ValueNumber ;if _faed > _ddfb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _ddfb > _dbcc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_ecgc :=2.0;if _abbb > 5{if args [5].Type ==ResultTypeEmpty {_ecgc =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgc =args [5].ValueNumber ;if _ecgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_cgfbe :=false ;if _abbb > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cgfbe =args [6].ValueNumber !=0;};_cdbe :=0.0;_edfcc :=_fg .Floor (_faed );_accc :=_fg .Ceil (_ddfb );if _cgfbe {for _gebf :=_edfcc +1;_gebf <=_accc ;_gebf ++{_gebe :=_ccbe (_bdgf ,_bfdf ,_dbcc ,_gebf ,_ecgc );if _gebf ==_edfcc +1{_gebe *=_fg .Min (_ddfb ,_edfcc +1)-_faed ;}else if _gebf ==_accc {_gebe *=_ddfb +1-_accc ;};_cdbe +=_gebe ;};}else {_gdag :=_dbcc ;var _ccga float64 ;if !_dafd (_faed ,_fg .Floor (_faed )){if _ecgc ==1{_begeg :=_dbcc /2;if _faed > _begeg ||_dafd (_faed ,_begeg ){_ccga =_faed -_begeg ;_faed =_begeg ;_ddfb -=_ccga ;_gdag ++;};};};if _ecgc !=0{_bdgf -=_afddd (_bdgf ,_bfdf ,_dbcc ,_gdag ,_faed ,_ecgc );};_cdbe =_afddd (_bdgf ,_bfdf ,_dbcc ,_dbcc -_faed ,_ddfb -_faed ,_ecgc );};return MakeNumberResult (_cdbe );};func _dabe (_cgcec yyLexer )int {return _cfeaf ().Parse (_cgcec )};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};var _ebg =map[string ]*_ga .Regexp {};func _agfgg (_cdae float64 ,_cfa *criteriaRegex )bool {_gdbbe ,_dbeg :=_cb .ParseFloat (_cfa ._fgbg ,64);if _dbeg !=nil {return false ;};switch _cfa ._aebb {case _caae :return _cdae ==_gdbbe ;case _agce :return _cdae <=_gdbbe ;case _eggcg :return _cdae >=_gdbbe ;case _gbfd :return _cdae < _gdbbe ;case _fbdfb :return _cdae > _gdbbe ;};return false ;};func _ecdg (_gef string )(int ,int ,float64 ,bool ,bool ,Result ){_deg :="";_aced :=[]string {};for _fcgf ,_eda :=range _gcg {_aced =_eda .FindStringSubmatch (_gef );if len (_aced )> 1{_deg =_fcgf ;break ;};};if _deg ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};_gfc :=_aced [1]=="";_aced =_aced [49:];_efc :=len (_aced );_fcee :=_aced [_efc -1];_decd :=_fcee =="\u0061\u006d";_cea :=_fcee =="\u0070\u006d";var _cce ,_beg int ;var _ccce float64 ;var _fdfe error ;switch _deg {case "\u0068\u0068":_cce ,_fdfe =_cb .Atoi (_aced [0]);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};_beg =0;_ccce =0;case "\u0068\u0068\u003am\u006d":_cce ,_fdfe =_cb .Atoi (_aced [0]);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};_beg ,_fdfe =_cb .Atoi (_aced [2]);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};_ccce =0;case "\u006d\u006d\u003as\u0073":_cce =0;_beg ,_fdfe =_cb .Atoi (_aced [0]);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};_ccce ,_fdfe =_cb .ParseFloat (_aced [2],64);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_cce ,_fdfe =_cb .Atoi (_aced [0]);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};_beg ,_fdfe =_cb .Atoi (_aced [2]);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};_ccce ,_fdfe =_cb .ParseFloat (_aced [4],64);if _fdfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};};if _beg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};if _decd ||_cea {if _cce > 12||_ccce >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );}else if _cce ==12{_cce =0;};}else if _cce >=24||_ccce >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fdfae );};return _cce ,_beg ,_ccce ,_cea ,_gfc ,_bef ;};const _cfdc ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_badd :=_af .Buffer {};for _ ,_fefc :=range args {switch _fefc .Type {case ResultTypeString :_badd .WriteString (_fefc .ValueString );case ResultTypeNumber :var _caaab string ;if _fefc .IsBoolean {if _fefc .ValueNumber ==0{_caaab ="\u0046\u0041\u004cS\u0045";}else {_caaab ="\u0054\u0052\u0055\u0045";};}else {_caaab =_fefc .AsString ().ValueString ;};_badd .WriteString (_caaab );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_badd .String ());};

// Update updates the horizontal range references after removing a row/column.
func (_bdaaa HorizontalRange )Update (q *_ae .UpdateQuery )Expression {return _bdaaa };func _edgb (_dfb string )bool {for _ ,_gbcf :=range _abf {_gdc :=_gbcf .FindStringSubmatch (_dfb );if len (_gdc )> 1{return true ;};};return false ;};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bacf ,_fbdcf ,_fggg :=_cacc (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _fggg .Type ==ResultTypeError {return _fggg ;};if _fbdcf < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bacf ==0{return MakeNumberResult (0);};_ffbe :=_bacf < 0;if _ffbe {_bacf =-_bacf ;};_gba :=args [0].Value ();_baf :=_g .Split (_gba ,"\u002e");_bdeb :=float64 (int (_bacf ));_beec :=_baf [1];_afed :=len (_beec );_aaca :=int (_fg .Log10 (_fbdcf ))+1;_ffddb :=float64 (_aaca -_afed );_defed ,_cegb :=_cb .ParseFloat (_beec ,64);if _cegb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_defed *=_fg .Pow (10,_ffddb );_aaeae :=_bdeb +_defed /_fbdcf ;if _ffbe {_aaeae =-_aaeae ;};return MakeNumberResult (_aaeae );};func _cdg (_ded string )bool {for _ ,_bddf :=range _ggc {_ggff :=_bddf .FindStringSubmatch (_ded );if len (_ggff )> 1{return true ;};};return false ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ddaed :=args [0].AsNumber ();if _ddaed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gebcg :=float64 (1);if _ddaed .ValueNumber < 0{_gebcg =-1;};if len (args )> 1{_gbbf :=args [1].AsNumber ();if _gbbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_gebcg =_fg .Abs (_gbbf .ValueNumber );};if len (args )==1{return MakeNumberResult (_fg .Floor (_ddaed .ValueNumber ));};_dafc :=_ddaed .ValueNumber ;_dafc ,_daabg :=_fg .Modf (_dafc /_gebcg );if _daabg !=0{if _ddaed .ValueNumber < 0{_dafc --;};};return MakeNumberResult (_dafc *_gebcg );};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afeb :=int (args [0].ValueNumber );return MakeBoolResult (_afeb !=_afeb /2*2);};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_eafae PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_gagf :=_eafae ._caaea .Reference (ctx ,ev );_dgfdc :=_eafae ._cabc .Reference (ctx ,ev );_egbgg :=_eafae ._gbcge .Reference (ctx ,ev );switch _gagf .Type {case ReferenceTypeSheet :if _edcfd (_gagf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gagf .Value ));};_efab :=_adgee (_gagf ,_dgfdc ,_egbgg );if _dgfdc .Type ==ReferenceTypeCell &&_egbgg .Type ==ReferenceTypeCell {if _gcbd ,_afdag :=ev .GetFromCache (_efab );_afdag {return _gcbd ;}else {_fdfc :=_dfbfg (ctx .Sheet (_gagf .Value ),ev ,_dgfdc .Value ,_egbgg .Value );ev .SetCache (_efab ,_fdfc );return _fdfc ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_efab );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gagf .Type ));};};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_egebg string };const _edgea =57368;var _ceedf =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};const _dgcgg =1;

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_fgfb :=_g .Split (v ,"\u003a");if len (_fgfb )!=2{return nil ;};_fgedb ,_ :=_cb .Atoi (_fgfb [0]);_efcde ,_ :=_cb .Atoi (_fgfb [1]);if _fgedb > _efcde {_fgedb ,_efcde =_efcde ,_fgedb ;};return HorizontalRange {_addec :_fgedb ,_ebfdd :_efcde };};func _abga (_ddcgf ,_aacg Reference )string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_ddcgf .Value ,_aacg .Value );};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _bcabg (args ,false )};func _fgf (_egc int ,_bge _cg .Month ,_ccaf int )int64 {if _egc ==1900&&int (_bge )<=2{_ccaf --;};_gggb :=_cg .Date (_egc ,_bge ,_ccaf ,0,0,0,0,_cg .UTC );return _gggb .Unix ();};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gfgg :=args [0];if _gfgg .Type !=ResultTypeArray &&_gfgg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gfefa :=_gfgg .ValueArray ;if len (_gfefa )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_gfefa [0])));};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dada :=args [0].AsNumber ();if _dada .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgcad :=0;if len (args )> 1{_ccada :=args [1];if _ccada .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_bgcad =int (_ccada .ValueNumber );if _bgcad < 0{_bgcad =0;}else if _bgcad > 4{_bgcad =4;};};_cgda :=_bdefb ;switch _bgcad {case 1:_cgda =_fgfd ;case 2:_cgda =_adddg ;case 3:_cgda =_dbgdf ;case 4:_cgda =_cegfd ;};_ddgf :=_fg .Trunc (_dada .ValueNumber );_gfdbd :=_af .Buffer {};for _ ,_fgbe :=range _cgda {for _ddgf >=_fgbe ._ebde {_gfdbd .WriteString (_fgbe ._eddc );_ddgf -=_fgbe ._ebde ;};};return MakeStringResult (_gfdbd .String ());};func _fgfad (){_ggfaf =_ga .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_agaf =_ga .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_ggccb =_ga .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_ffcb =_ga .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_bbgfa =_ga .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_cdde =_ga .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_cacb :=len (args );if _cacb !=5&&_cacb !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfdd ,_cbce ,_cecb :=_abcg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cecb .Type ==ResultTypeError {return _cecb ;};_defde ,_cecb :=_ecbgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cecb .Type ==ResultTypeError {return _cecb ;};if _defde >=_cfdd {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_feede :=args [3].ValueNumber ;if _feede < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_edef :=args [4].ValueNumber ;if _edef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_bfda :=0;if _cacb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfda =int (args [5].ValueNumber );if !_defe (_bfda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_efaad ,_cecb :=_bdcd (_cfdd ,_cbce ,_bfda );if _cecb .Type ==ResultTypeError {return _cecb ;};_fbcd ,_cecb :=_bdcd (_defde ,_cbce ,_bfda );if _cecb .Type ==ResultTypeError {return _cecb ;};_dggc ,_cecb :=_bdcd (_defde ,_cfdd ,_bfda );if _cecb .Type ==ResultTypeError {return _cecb ;};_caba :=1+_fbcd *_feede ;_afcg :=1+_efaad *_edef ;return MakeNumberResult ((_caba /_afcg -_dggc *_feede )*100);};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_acae :=len (args );if _acae !=4&&_acae !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bfbg ,_dbcg ,_cgcd :=_abcg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _cgcd .Type ==ResultTypeError {return _cgcd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bege :=args [2].ValueNumber ;if _bege <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgde :=args [3].ValueNumber ;if _bgde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbb :=0;if _acae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbb =int (args [4].ValueNumber );if !_defe (_ffbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_ggeg ,_cgcd :=_bdcd (_bfbg ,_dbcg ,_ffbb );if _cgcd .Type ==ResultTypeError {return _cgcd ;};return MakeNumberResult ((_bgde -_bege )/_bgde /_ggeg );};func _ggfd (_addb ,_daaf ,_adge ,_eccbb ,_cbcf ,_fgbc float64 ,_dcdf int )(float64 ,Result ){_gcba :=int (_fgbc );_deca :=_daed (_addb ,_daaf ,_gcba ,_dcdf );_dafg :=_aage (_addb ,_daaf ,_gcba ,_dcdf )/_deca ;_bfcgf ,_gfef :=_dfcg (_addb ,_daaf ,_gcba ,_dcdf );if _gfef .Type ==ResultTypeError {return 0,_gfef ;};_edb :=_eeafc (_addb ,_daaf ,_gcba ,_dcdf );_caaa :=_cbcf /_fg .Pow (1+_eccbb /_fgbc ,_bfcgf -1+_dafg );_caaa -=100*_adge /_fgbc *_edb /_deca ;_ggdd :=100*_adge /_fgbc ;_adgd :=1+_eccbb /_fgbc ;for _bcae :=0.0;_bcae < _bfcgf ;_bcae ++{_caaa +=_ggdd /_fg .Pow (_adgd ,_bcae +_dafg );};return _caaa ,MakeEmptyResult ();};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_bdgcbd ,_febfg Expression };

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fabg :=args [0].AsNumber ();if _fabg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cace :=args [1].AsNumber ();if _cace .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffeg :=int (_cace .ValueNumber );if _ffeg < 0||_ffeg > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_edeee :=0;if len (args )> 2{_dfege :=args [2].AsNumber ();if _dfege .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edeee =int (_dfege .ValueNumber );};_afff :=_cb .FormatInt (int64 (_fabg .ValueNumber ),_ffeg );if len (_afff )< _edeee {_afff =_g .Repeat ("\u0030",_edeee -len (_afff ))+_afff ;};return MakeStringResult (_afff );};const (_gcgdb rmode =iota ;_dbggf ;_cfde ;);

// Reference returns a string reference value to a vertical range with prefix.
func (_fbbf PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_geecc :=_fbbf ._cedbe .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_fbbf .verticalRangeReference (_geecc .Value )};};func _defe (_eccb int )bool {return _eccb >=0&&_eccb <=4};

// Reference returns an invalid reference for Number.
func (_eafdf Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _cgfe (_gdcb ,_feed []float64 ,_gdee float64 )float64 {_ffa :=_gdee +1;_aadee :=_gdcb [0];_gccg :=len (_gdcb );_fgbd :=_feed [0];for _baa :=1;_baa < _gccg ;_baa ++{_aadee +=_gdcb [_baa ]/_fg .Pow (_ffa ,(_feed [_baa ]-_fgbd )/365);};return _aadee ;};type parsedSearchObject struct{_bdcde string ;_ccee string ;_afbe int ;};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_effa ,_acd :=_dgc (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _acd .Type ==ResultTypeError {return _acd ;};_gggc :=_effa ._bcef ;_ccdg :=_effa ._fed ;_gbcfb :=_effa ._fbba ;_ebb :=_effa ._acfc ;_cdgb :=_effa ._ddff ;_fcdc :=_effa ._cdee ;_cbbd :=_beca (_gggc ,_ccdg ,_gbcfb ,0,_fcdc );_fbdc :=0.0;if _ebb ==1{if _fcdc ==0{_fbdc =-_gbcfb ;_ebb ++;};};for _eeed :=_ebb ;_eeed <=_cdgb ;_eeed ++{if _fcdc ==1{_fbdc +=_cae (_gggc ,_eeed -2,_cbbd ,_gbcfb ,1)-_cbbd ;}else {_fbdc +=_cae (_gggc ,_eeed -1,_cbbd ,_gbcfb ,0);};};_fbdc *=_gggc ;return MakeNumberResult (_fbdc );};func _edbe (_gccgb []Result ,_gbdd []string ,_bcecf bool )[]string {for _ ,_fcbb :=range _gccgb {switch _fcbb .Type {case ResultTypeEmpty :if !_bcecf {_gbdd =append (_gbdd ,"");};case ResultTypeString :if _fcbb .ValueString !=""||!_bcecf {_gbdd =append (_gbdd ,_fcbb .ValueString );};case ResultTypeNumber :_gbdd =append (_gbdd ,_fcbb .Value ());case ResultTypeList :_gbdd =_aafdc (_gbdd ,_edbe (_fcbb .ValueList ,[]string {},_bcecf ));case ResultTypeArray :for _ ,_bcag :=range _fcbb .ValueArray {_gbdd =_aafdc (_gbdd ,_edbe (_bcag ,[]string {},_bcecf ));};};};return _gbdd ;};type plex struct{_fcgbb chan *node ;_fecfe Expression ;_befcc string ;};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_cedbe Expression ;_gbeff ,_fagfg string ;};const _cfab int =30;var _gbdbg =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Update returns the same object as updating sheet references does not affect String.
func (_fadef String )Update (q *_ae .UpdateQuery )Expression {return _fadef };

// Update returns the same object as updating sheet references does not affect Error.
func (_dbd Error )Update (q *_ae .UpdateQuery )Expression {return _dbd };

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_bgddg ,_feged :=_cb .ParseFloat (v ,64);if _feged !=nil {_fc .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_feged );};return Number {_fbeeb :_bgddg };};func _bcbgf (_ecdgb [][]Result )float64 {if len (_ecdgb )==2{_dabg :=_ecdgb [0][0].AsNumber ();_bgcc :=_ecdgb [0][1].AsNumber ();_ecgg :=_ecdgb [1][0].AsNumber ();_edcf :=_ecdgb [1][1].AsNumber ();if _dabg .Type !=ResultTypeNumber ||_bgcc .Type !=ResultTypeNumber ||_ecgg .Type !=ResultTypeNumber ||_edcf .Type !=ResultTypeNumber {return _fg .NaN ();};return _dabg .ValueNumber *_edcf .ValueNumber -_ecgg .ValueNumber *_bgcc .ValueNumber ;};_fbec :=float64 (0);_bfea :=float64 (1);for _geecd :=range _ecdgb {_fbec +=_bfea *_ecdgb [0][_geecd ].ValueNumber *_bcbgf (_eced (_ecdgb ,_geecd ));_bfea *=-1;};return _fbec ;};func (_agcaf tokenType )String ()string {return _gfeed (int (_agcaf ))};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_adeac ,_ebfe ,_faeef :=_aafc (from ,to );if _faeef !=nil {_fc .Log (_faeef .Error ());return NewError (_faeef .Error ());};return PrefixRangeExpr {_caaea :pfx ,_cabc :_adeac ,_gbcge :_ebfe };};func _dggd (_ecga string ,_fdac func (_bbea float64 )float64 )Function {return func (_agbcd []Result )Result {if len (_agbcd )!=1{return MakeErrorResult (_ecga +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gceg :=_agbcd [0].AsNumber ();switch _gceg .Type {case ResultTypeNumber :_efbe :=_fdac (_gceg .ValueNumber );if _fg .IsNaN (_efbe ){return MakeErrorResult (_ecga +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _fg .IsInf (_efbe ,0){return MakeErrorResult (_ecga +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_efbe );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ecga +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gceg ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecga ,_gceg .Type ));};};};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_eaed :=len (args );if _eaed < 3||_eaed > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bedb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ecac :=args [1].ValueNumber ;if _ecac !=float64 (int (_ecac )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbee :=args [2].ValueNumber ;_ddfe :=0.0;if _eaed >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddfe =args [3].ValueNumber ;};_fbbe :=0.0;if _eaed ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbbe =args [4].ValueNumber ;if _fbbe !=0{_fbbe =1;};};if _bedb ==0{return MakeNumberResult (-_fbee *_ecac -_ddfe );}else {return MakeNumberResult ((((1-_fg .Pow (1+_bedb ,_ecac ))/_bedb )*_fbee *(1+_bedb *_fbbe )-_ddfe )/_fg .Pow (1+_bedb ,_ecac ));};};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Error is called in the case of parsing error and saves an error to a plex.
func (_gfca *plex )Error (s string ){_fc .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_gfca ._befcc =s ;};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_addgag .Lock ();defer _addgag .Unlock ();if _afaab ,_ffgdb :=_aeacfa [name ];_ffgdb {return _afaab ;};return nil ;};var _addgag _f .Mutex ;const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdad :=args [0].AsString ();if _gdad .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_g .ToUpper (_gdad .ValueString ));};func _gcdb (_cbff string ,_eagg func (_cbbdf float64 )float64 )Function {return func (_gedb []Result )Result {if len (_gedb )!=1{return MakeErrorResult (_cbff +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eggg :=_gedb [0].AsNumber ();switch _eggg .Type {case ResultTypeNumber :_dcgc :=_eagg (_eggg .ValueNumber );if _fg .IsNaN (_dcgc ){return MakeErrorResult (_cbff +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _fg .IsInf (_dcgc ,0){return MakeErrorResult (_cbff +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _dcgc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_cbff +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_dcgc );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_cbff +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _eggg ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cbff ,_eggg .Type ));};};};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbef :=args [0].AsNumber ();_ddcba :=args [1].AsNumber ();if _gbef .Type !=ResultTypeNumber ||_ddcba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ddcba .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_fg .Trunc (_gbef .ValueNumber /_ddcba .ValueNumber ));};

// Eval evaluates the binary expression using the context given.
func (_gff BinaryExpr )String ()string {_cbd :="";switch _gff ._ce {case BinOpTypePlus :_cbd ="\u002b";case BinOpTypeMinus :_cbd ="\u002d";case BinOpTypeMult :_cbd ="\u002a";case BinOpTypeDiv :_cbd ="\u002f";case BinOpTypeExp :_cbd ="\u005e";case BinOpTypeLT :_cbd ="\u003c";case BinOpTypeGT :_cbd ="\u003e";case BinOpTypeEQ :_cbd ="\u003d";case BinOpTypeLEQ :_cbd ="\u003c\u003d";case BinOpTypeGEQ :_cbd ="\u003e\u003d";case BinOpTypeNE :_cbd ="\u003c\u003e";case BinOpTypeConcat :_cbd ="\u0026";};return _gff ._gfa .String ()+_cbd +_gff ._ed .String ();};type durationArgs struct{_bab float64 ;_cbga float64 ;_ffga float64 ;_abfg float64 ;_geab float64 ;_gbgc int ;};func (_faace ReferenceType )String ()string {if _faace >=ReferenceType (len (_bdca )-1){return _d .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_faace );};return _cfdc [_bdca [_faace ]:_bdca [_faace +1]];};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbae :=args [0];switch _dbae .Type {case ResultTypeError :return _dbae ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_dbae .ValueNumber !=0);};if _dbae .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _dfcb (args );case ResultTypeArray :return _gggad (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};func (_caeab *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cbee :=_g .ToLower (args [0].ValueString );if !_edgb (_cbee ){_ ,_ ,_ ,_ ,_ebae ,_efb :=_ecdg (_cbee );if _efb .Type ==ResultTypeError {_efb .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _efb ;};if _ebae {return MakeNumberResult (0);};};_daff ,_dfgab ,_dae ,_ ,_feac :=_dbgab (_cbee );if _feac .Type ==ResultTypeError {return _feac ;};return MakeNumberResult (_acgc (_daff ,_dfgab ,_dae ));};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_dcbgd Expression ;_dgeb ,_dedda int ;};func _ccafb (_dcge ,_gfbc Result ,_ccbgf string )(*xargs ,Result ){if _dcge .Type !=ResultTypeList &&_dcge .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ccbgf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_cefdf :=_gadgc (_dcge );_fbfa :=[]float64 {};for _ ,_abece :=range _cefdf {for _ ,_bdef :=range _abece {if _bdef .Type ==ResultTypeNumber &&!_bdef .IsBoolean {_fbfa =append (_fbfa ,_bdef .ValueNumber );}else {return nil ,MakeErrorResult (_ccbgf +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_aebda :=len (_fbfa );if len (_fbfa )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _gfbc .Type !=ResultTypeList &&_gfbc .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ccbgf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_fagee :=_gadgc (_gfbc );_adcg :=[]float64 {};_cagb :=0.0;for _ ,_dfa :=range _fagee {for _ ,_dbgd :=range _dfa {if _dbgd .Type ==ResultTypeNumber &&!_dbgd .IsBoolean {_fcff :=float64 (int (_dbgd .ValueNumber ));if _fcff < _cagb {return nil ,MakeErrorResultType (ErrorTypeNum ,_ccbgf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_adcg =append (_adcg ,_fcff );_cagb =_fcff ;}else {return nil ,MakeErrorResult (_ccbgf +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_adcg )!=_aebda {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_fbfa ,_adcg },MakeEmptyResult ();};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecae :=args [0].AsString ();if _ecae .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_ecae .ValueString ,ev );};type Expression interface{Eval (_aaec Context ,_bce Evaluator )Result ;Reference (_bee Context ,_bfcg Evaluator )Reference ;String ()string ;Update (_bfac *_ae .UpdateQuery )Expression ;};func _acgc (_cab ,_cbg ,_ceb int )float64 {return float64 (_fgf (_cab ,_cg .Month (_cbg ),_ceb )/86400)+_cd ;};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_dfac :=1.0;for _ ,_gacab :=range args {_gacab =_gacab .AsNumber ();switch _gacab .Type {case ResultTypeNumber :_dfac *=_gacab .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gccc :=Product (_gacab .ListValues ());if _gccc .Type !=ResultTypeNumber {return _gccc ;};_dfac *=_gccc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gacab ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gacab .Type ));};};return MakeNumberResult (_dfac );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eagcb :=args [0].AsString ();_eecb :=args [1].AsString ();if _eagcb .Type !=ResultTypeString ||_eecb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_eagcb .ValueString ==_eecb .ValueString );};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _cga (_bfg ,_gcgb ,_bbaf ,_cad int )int {if _gcgb > _bbaf {return 0;};if _bac (_cad ){return (_bbaf -_gcgb +1)*30;};_ddfg :=0;for _acc :=_gcgb ;_acc <=_bbaf ;_acc ++{_ddfg +=_gbg (_bfg ,_acc );};return _ddfg ;};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// IsDBCS returns false for the invalid reference context.
func (_abgee *ivr )IsDBCS ()bool {return false };

// Reference returns an invalid reference for ConstArrayExpr.
func (_ff ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_acbgb :=args [0].AsNumber ();if _acbgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ecgcc :=int (_acbgb .ValueNumber );_gbed :=make ([][]Result ,0,_ecgcc );for _geabe :=0;_geabe < _ecgcc ;_geabe ++{_dfbc :=make ([]Result ,_ecgcc );for _cdeb :=0;_cdeb < _ecgcc ;_cdeb ++{if _geabe ==_cdeb {_dfbc [_cdeb ]=MakeNumberResult (1.0);}else {_dfbc [_cdeb ]=MakeNumberResult (0.0);};};_gbed =append (_gbed ,_dfbc );};return MakeArrayResult (_gbed );};

// Eval evaluates and returns the result of a function call.
func (_efef FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_edcd :=LookupFunction (_efef ._ecab );if _edcd !=nil {_edda :=make ([]Result ,len (_efef ._fggga ));for _fbgfb ,_gggbd :=range _efef ._fggga {_edda [_fbgfb ]=_gggbd .Eval (ctx ,ev );_edda [_fbgfb ].Ref =_gggbd .Reference (ctx ,ev );};if _ ,_bfcd :=_gbaf [_efef ._ecab ];!_bfcd {if _gcad ,_fgdab :=_dbgdb (_edda );_gcad {return _fgdab ;};};return _edcd (_edda );};_dgcdc :=LookupFunctionComplex (_efef ._ecab );if _dgcdc !=nil {_dbfab :=make ([]Result ,len (_efef ._fggga ));for _ecabe ,_cgbcc :=range _efef ._fggga {_dbfab [_ecabe ]=_cgbcc .Eval (ctx ,ev );_dbfab [_ecabe ].Ref =_cgbcc .Reference (ctx ,ev );};if _ ,_eecg :=_gbaf [_efef ._ecab ];!_eecg {if _bgcdb ,_gafg :=_dbgdb (_dbfab );_bgcdb {return _gafg ;};};return _dgcdc (ctx ,ev ,_dbfab );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_efef ._ecab );};

// Number is a nubmer expression.
type Number struct{_fbeeb float64 };

// Eval evaluates and returns the result of the cell reference.
func (_fge CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fge ._fe ,ev )};var _beeec =[...]int {-1,1,1,-1,-2,0};const _becc =57364;

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_bdbbb ,_efec :=_fcda (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _efec .Type ==ResultTypeError {return _efec ;};_cfe :=_bdbbb ._bab ;_dfdf :=_bdbbb ._cbga ;_ffff :=_bdbbb ._ffga ;_acb :=_bdbbb ._abfg ;_bdcc :=_bdbbb ._geab ;_gadc :=_bdbbb ._gbgc ;return _acgcg (_cfe ,_dfdf ,_ffff ,_acb ,_bdcc ,_gadc );};const _fdfae ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_agabf :=len (args );if _agabf !=5&&_agabf !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggcfc ,_dgcd ,_eaaf :=_abcg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _eaaf .Type ==ResultTypeError {return _eaaf ;};_fbef ,_eaaf :=_ecbgc (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _eaaf .Type ==ResultTypeError {return _eaaf ;};if _fbef >=_ggcfc {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gaed :=args [3].ValueNumber ;if _gaed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cadc :=args [4].ValueNumber ;if _cadc <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_edgf :=0;if _agabf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edgf =int (args [5].ValueNumber );if !_defe (_edgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_fbfc ,_eaaf :=_bdcd (_fbef ,_dgcd ,_edgf );if _eaaf .Type ==ResultTypeError {return _eaaf ;};_aeacc ,_eaaf :=_bdcd (_fbef ,_ggcfc ,_edgf );if _eaaf .Type ==ResultTypeError {return _eaaf ;};_gbbac ,_eaaf :=_bdcd (_ggcfc ,_dgcd ,_edgf );if _eaaf .Type ==ResultTypeError {return _eaaf ;};_efaed :=1+_fbfc *_gaed ;_efaed /=_cadc /100+_aeacc *_gaed ;_efaed --;_efaed /=_gbbac ;return MakeNumberResult (_efaed );};

// String returns a string representation for Bool.
func (_eag Bool )String ()string {if _eag ._eab {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fecfg :=args [0].AsNumber ();_dbdg :=args [1].AsNumber ();if _fecfg .Type !=ResultTypeNumber ||_dbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _dbdg .ValueNumber < _fecfg .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_aadae :=int64 (_fecfg .ValueNumber );_bggc :=int64 (_dbdg .ValueNumber );return MakeNumberResult (float64 (_cega .Int63n (_bggc -_aadae +1)+_aadae ));};

// Eval evaluates and returns the result of an error expression.
func (_dcdc Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_dcdc ._edg )};

// Update updates references in the BinaryExpr after removing a row/column.
func (_afcd BinaryExpr )Update (q *_ae .UpdateQuery )Expression {_ebd :=_afcd ;_ebd ._gfa =_afcd ._gfa .Update (q );_ebd ._ed =_afcd ._ed .Update (q );return _ebd ;};const _bbgce =57369;func _ceg (_aeg ,_edc ,_aedb ,_bba int )int {if !_bac (_bba ){return _aedb ;};_cbae :=_aedb ;_ffgd :=_gbg (_aeg ,_edc );if _cbae > 30||_aedb >=_ffgd ||_cbae >=_ffgd {_cbae =30;};return _cbae ;};func _bagb (_fdae ,_gdcg []float64 ,_ecce float64 )float64 {_gcgbg :=_ecce +1;_efcf :=0.0;_adddb :=len (_fdae );_adbg :=_gdcg [0];for _dfbad :=1;_dfbad < _adddb ;_dfbad ++{_afdc :=(_gdcg [_dfbad ]-_adbg )/365;_efcf -=_afdc *_fdae [_dfbad ]/_fg .Pow (_gcgbg ,_afdc +1);};return _efcf ;};

// CellRef is a reference to a single cell
type CellRef struct{_fe string };type xargs struct{_dgdc []float64 ;_bgdg []float64 ;};type yySymType struct{_bbaa int ;_eadde *node ;_febe Expression ;_cbbe []Expression ;_bfcdd [][]Expression ;};func (_dffdd *Lexer )nextRaw ()*node {for len (_dffdd ._dbff )!=0{_baged :=<-_dffdd ._dbff [len (_dffdd ._dbff )-1];if _baged !=nil {return _baged ;};_dffdd ._dbff =_dffdd ._dbff [0:len (_dffdd ._dbff )-1];};return <-_dffdd ._ffgc ;};func _eabba (_baga Result ,_bacef *criteriaParsed )bool {_bfdecf :=_g .ToLower (_baga .ValueString );_dcdg :=_bacef ._dbea ._aebb ;_acgg :=_bacef ._dbea ._fgbg ;if _dcdg ==_caae {return _bfdecf ==_acgg ||_cgdc .Match (_acgg ,_bfdecf );};if _baga .Type !=ResultTypeEmpty {if _bfdecf ==_bacef ._dfddf ||_cgdc .Match (_bacef ._dfddf ,_bfdecf ){return true ;};if _ ,_effb :=_cb .ParseFloat (_acgg ,64);_effb ==nil {return false ;};switch _dcdg {case _agce :return _bfdecf <=_acgg ;case _eggcg :return _bfdecf >=_acgg ;case _gbfd :return _bfdecf < _acgg ;case _fbdfb :return _bfdecf > _acgg ;};};return false ;};func _bac (_gda int )bool {return _gda ==0||_gda ==4};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// GetFilename returns an empty string for the invalid reference context.
func (_ddbb *ivr )GetFilename ()string {return ""};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bdfba Result )ListValues ()[]Result {if _bdfba .Type ==ResultTypeArray {_fcgeb :=[]Result {};for _ ,_ggccg :=range _bdfba .ValueArray {for _ ,_cbgag :=range _ggccg {_fcgeb =append (_fcgeb ,_cbgag );};};return _fcgeb ;};if _bdfba .Type ==ResultTypeList {return _bdfba .ValueList ;};return nil ;};

// Reference returns a string reference value to a named range.
func (_dcceg NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_dcceg ._egebg };};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_faea :=args [0];_abdf :=args [1];if _abdf .Type !=ResultTypeArray &&_abdf .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fgge :=_gbeg (_abdf );_baaa :=-1;for _acdd ,_eggc :=range _fgge {if _ceabe (_faea ,_eggc ,false ,false )==_ccfe {_baaa =_acdd ;};};if _baaa ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_cgfa :=_fgge ;if len (args )==3{_cgfa =_gbeg (args [2]);};if _baaa < 0||_baaa >=len (_cgfa ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _cgfa [_baaa ];};func _cacc (_dde []Result ,_ffbf string )(float64 ,float64 ,Result ){if len (_dde )!=2{return 0,0,MakeErrorResult (_ffbf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dde [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_ffbf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aadc :=_dde [0].ValueNumber ;if _dde [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_ffbf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gege :=float64 (int (_dde [1].ValueNumber ));if _gege < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_ffbf +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _aadc ,_gege ,_bef ;};

// Update updates the FunctionCall references after removing a row/column.
func (_gcfdc FunctionCall )Update (q *_ae .UpdateQuery )Expression {_aaee :=[]Expression {};for _ ,_cabea :=range _gcfdc ._fggga {_eega :=_cabea .Update (q );_aaee =append (_aaee ,_eega );};return FunctionCall {_ecab :_gcfdc ._ecab ,_fggga :_aaee };};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_ffgc chan *node ;_acad _f .Mutex ;_dbff []chan *node ;_fbfgf []*node ;};func _dfbfg (_eabce Context ,_dbfce Evaluator ,_gegg ,_acbgg string )Result {_fabb ,_deafg :=_gf .ParseCellReference (_gegg );if _deafg !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gegg ,_deafg .Error ()));};_ceeea ,_cgedc :=_fabb .ColumnIdx ,_fabb .RowIdx ;_dbbaf ,_bdbgg :=_gf .ParseCellReference (_acbgg );if _bdbgg !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_acbgg ,_bdbgg .Error ()));};_bcdgbb ,_cfbff :=_dbbaf .ColumnIdx ,_dbbaf .RowIdx ;_gccf :=[][]Result {};for _ebgbd :=_cgedc ;_ebgbd <=_cfbff ;_ebgbd ++{_ccbf :=[]Result {};for _edga :=_ceeea ;_edga <=_bcdgbb ;_edga ++{_agfc :=_eabce .Cell (_d .Sprintf ("\u0025\u0073\u0025\u0064",_gf .IndexToColumn (_edga ),_ebgbd ),_dbfce );_ccbf =append (_ccbf ,_agfc );};_gccf =append (_gccf ,_ccbf );};if len (_gccf )==1{if len (_gccf [0])==1{return _gccf [0][0];};return MakeListResult (_gccf [0]);};return MakeArrayResult (_gccf );};

// Negate is a negate expression like -A1.
type Negate struct{_bdadg Expression };

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdg :=args [0].ValueNumber ;if _fdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgd :=args [1].ValueNumber ;if _fgd <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cafb :=args [2].ValueNumber ;if _cafb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_fg .Log10 (_cafb )-_fg .Log10 (_fgd ))/_fg .Log10 (1+_fdg ));};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_dcac PrefixVerticalRange )Update (q *_ae .UpdateQuery )Expression {if q .UpdateType ==_ae .UpdateActionRemoveColumn {_gdfff :=_dcac ;_bfcgcg :=_dcac ._cedbe .String ();if _bfcgcg ==q .SheetToUpdate {_bfabc :=q .ColumnIdx ;_gdfff ._gbeff =_da (_dcac ._gbeff ,_bfabc );_gdfff ._fagfg =_da (_dcac ._fagfg ,_bfabc );};return _gdfff ;};return _dcac ;};

// Db implements the Excel DB function.
func Db (args []Result )Result {_aca :=len (args );if _aca !=4&&_aca !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcbb :=args [0].ValueNumber ;if _bcbb < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geae :=args [1].ValueNumber ;if _geae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_faf :=args [2].ValueNumber ;if _faf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfcf :=args [3].ValueNumber ;if _dfcf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _dfcf -_faf > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cdcc :=12.0;if _aca ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdcc =args [4].ValueNumber ;if _cdcc < 1||_cdcc > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _cdcc ==12&&_dfcf > _faf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _geae >=_bcbb {return MakeNumberResult (0);};_bgfg :=1-_fg .Pow (_geae /_bcbb ,1/_faf );_bgfg =float64 (int (_bgfg *1000+0.5))/1000;_edca :=_bcbb *_bgfg *_cdcc /12;if _dfcf ==1{return MakeNumberResult (_edca );};_efge :=_edca ;_eac :=0.0;_dfgg :=_faf ;if _dfgg > _dfcf {_dfgg =_dfcf ;};for _bbbf :=2.0;_bbbf <=_dfgg ;_bbbf ++{_eac =(_bcbb -_efge )*_bgfg ;_efge +=_eac ;};if _dfcf > _faf {return MakeNumberResult ((_bcbb -_efge )*_bgfg *(12-_cdcc )/12);};return MakeNumberResult (_eac );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gcef :=args [0].AsNumber ();if _gcef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gcef .ValueNumber < 0{return MakeNumberResult (-1);}else if _gcef .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};var _gcfb =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_fca :=args [0];if _fca .Type !=ResultTypeArray &&_fca .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eggf :=_fca .ValueArray ;if len (_eggf )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_eggf )));};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Function is a standard function whose result only depends on its arguments.
type Function func (_deggc []Result )Result ;func (_dagae *ivr )SetOffset (col ,row uint32 ){};func _aagc (_dbgga ,_ccgb _cg .Time )bool {_aeac :=_dbgga .Unix ();_ffd :=_ccgb .Unix ();_fgc :=_dbgga .Year ();_bca :=_fgf (_fgc ,_cg .March ,1);if _aea (_fgc )&&_aeac < _bca &&_ffd >=_bca {return true ;};var _eaaga =_ccgb .Year ();var _fcgb =_fgf (_eaaga ,_cg .March ,1);return (_aea (_eaaga )&&_ffd >=_fcgb &&_aeac < _fcgb );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _gcbag :=0;_gcbag < len (args )-1;_gcbag +=2{if args [_gcbag ].ValueNumber ==1{return args [_gcbag +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// SetLocked does nothing for the invalid reference context.
func (_dfegef *ivr )SetLocked (cellRef string ,locked bool ){};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_faab :=len (args );if _faab !=4&&_faab !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_eaba ,_fcfd ,_adea :=_abcg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _adea .Type ==ResultTypeError {return _adea ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdge :=args [2].ValueNumber ;if _fdge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aabd :=args [3].ValueNumber ;if _aabd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbg :=0;if _faab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbg =int (args [4].ValueNumber );if !_defe (_bgbg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_gcab ,_adea :=_bdcd (_eaba ,_fcfd ,_bgbg );if _adea .Type ==ResultTypeError {return _adea ;};return MakeNumberResult (_fdge /(1-_aabd *_gcab ));};

// String returns a string representation of String.
func (_cbadg String )String ()string {return "\u0022"+_cbadg ._ccgfb +"\u0022"};var _deef =[...]uint8 {0,17,33,49,63,78,93,108};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aedd :=int (args [0].ValueNumber );return MakeBoolResult (_aedd ==_aedd /2*2);};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _dbaf (args ,false )};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfeb :=args [0].ValueNumber ;if _cfeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_aebe :=float64 (int (args [1].ValueNumber ));if _aebe < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_fg .Pow ((1+_cfeb /_aebe ),_aebe )-1);};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_efa :=args [0];switch _efa .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_dbg :=_gaf (_efa .ValueNumber );return MakeNumberResult (float64 (_dbg .Day ()));case ResultTypeString :_gcff :=_g .ToLower (_efa .ValueString );if !_edgb (_gcff ){_ ,_ ,_ ,_ ,_ggda ,_fda :=_ecdg (_gcff );if _fda .Type ==ResultTypeError {_fda .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _fda ;};if _ggda {return MakeNumberResult (0);};};_ ,_ ,_dccf ,_ ,_ggbb :=_dbgab (_gcff );if _ggbb .Type ==ResultTypeError {return _ggbb ;};return MakeNumberResult (float64 (_dccf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cega .Float64 ());};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_edee :=args [0].AsNumber ();if _edee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_efga :=float64 (1);if _edee .ValueNumber < 0{_efga =-1;};if len (args )> 1{_fdcbd :=args [1].AsNumber ();if _fdcbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efga =_fdcbd .ValueNumber ;};if _efga < 0&&_edee .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_fg .Ceil (_edee .ValueNumber ));};_ecea :=_edee .ValueNumber ;_ecea ,_aacf :=_fg .Modf (_ecea /_efga );if _aacf > 0{_ecea ++;};return MakeNumberResult (_ecea *_efga );};

// Reference returns a string reference value to a range.
func (_becce Range )Reference (ctx Context ,ev Evaluator )Reference {_ebbee :=_becce ._bdgcbd .Reference (ctx ,ev );_aeacf :=_becce ._febfg .Reference (ctx ,ev );if _ebbee .Type ==ReferenceTypeCell &&_aeacf .Type ==ReferenceTypeCell {return MakeRangeReference (_abga (_ebbee ,_aeacf ));};return ReferenceInvalid ;};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_dfea :=len (args );if _dfea < 4||_dfea > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ebab :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fecc :=args [1].ValueNumber ;if _fecc <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccdc :=args [2].ValueNumber ;if _ccdc < _fecc {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_daee :=args [3].ValueNumber ;_eccg :=0.0;if _dfea >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eccg =args [4].ValueNumber ;};_befab :=0;if _dfea ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_befab =int (args [5].ValueNumber );if _befab !=0{_befab =1;};};return MakeNumberResult (_beca (_ebab ,_ccdc ,_daee ,_eccg ,_befab )-_ggaa (_ebab ,_fecc ,_ccdc ,_daee ,_eccg ,_befab ));};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdad :=args [0].AsNumber ();_feace :=args [1].AsNumber ();if _cdad .Type !=ResultTypeNumber ||_feace .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ecdc :=_fg .Trunc (_cdad .ValueNumber );_befg :=_fg .Trunc (_feace .ValueNumber );if _ecdc < _befg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _ecdc ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_ecdc +_befg -1);args [1]=MakeNumberResult (_ecdc -1);return Combin (args );};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_gfefag :=len (args );if _gfefag < 2||_gfefag > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afbf :=args [0];if _afbf .Type !=ResultTypeArray &&_afbf .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gcdd :=args [1].AsNumber ();if _gcdd .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_deaa :=int (_gcdd .ValueNumber )-1;_ceaa :=-1;if _gfefag ==3&&args [2].Type !=ResultTypeEmpty {_fecfb :=args [2].AsNumber ();if _fecfb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ceaa =int (_fecfb .ValueNumber )-1;};if _deaa ==-1&&_ceaa ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _beea []Result ;if _afbf .Type ==ResultTypeArray {_aaag :=_afbf .ValueArray ;if _deaa < -1||_deaa >=len (_aaag ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _deaa ==-1{if _ceaa >=len (_aaag [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_fffa :=[][]Result {};for _ ,_egbd :=range _aaag {_gagc :=_egbd [_ceaa ];if _gagc .Type ==ResultTypeEmpty {_gagc =MakeNumberResult (0);};_fffa =append (_fffa ,[]Result {_gagc });};return MakeArrayResult (_fffa );};_beea =_aaag [_deaa ];}else {_edgg :=_afbf .ValueList ;if _deaa < -1||_deaa >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _deaa ==-1{if _ceaa >=len (_edgg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_ecaf :=_edgg [_ceaa ];if _ecaf .Type ==ResultTypeEmpty {_ecaf =MakeNumberResult (0);};return _ecaf ;};_beea =_edgg ;};if _ceaa < -1||_ceaa > len (_beea ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ceaa ==-1{_ggcg :=[]Result {};for _ ,_badb :=range _beea {if _badb .Type ==ResultTypeEmpty {_ggcg =append (_ggcg ,MakeNumberResult (0));}else {_ggcg =append (_ggcg ,_badb );};};return MakeArrayResult ([][]Result {_ggcg });};_bffde :=_beea [_ceaa ];if _bffde .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bffde ;};const _fcg ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";var _cd float64 =25569.0;const _degca =_cg .Millisecond *1000;var _agcb =map[string ]Function {};func _dbgab (_ccfg string )(int ,int ,int ,bool ,Result ){_edff :="";_dbad :=[]string {};for _adb ,_fae :=range _ebg {_dbad =_fae .FindStringSubmatch (_ccfg );if len (_dbad )> 1{_edff =_adb ;break ;};};if _edff ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_gage :=false ;var _fdda ,_cca ,_bbf int ;var _afd error ;switch _edff {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_cca ,_afd =_cb .Atoi (_dbad [1]);if _afd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_bbf ,_afd =_cb .Atoi (_dbad [3]);if _afd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_fdda ,_afd =_cb .Atoi (_dbad [5]);if _afd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};if _fdda < 0||_fdda > 9999||(_fdda > 99&&_fdda < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_fdda =_bdgc (_fdda );_gage =_dbad [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_cca =_ffb [_dbad [1]];_bbf ,_afd =_cb .Atoi (_dbad [14]);if _afd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_fdda ,_afd =_cb .Atoi (_dbad [16]);if _afd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};if _fdda < 0||_fdda > 9999||(_fdda > 99&&_fdda < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_fdda =_bdgc (_fdda );_gage =_dbad [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_cac ,_efde :=_cb .Atoi (_dbad [1]);if _efde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_fad ,_efde :=_cb .Atoi (_dbad [3]);if _efde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_ecbg ,_efde :=_cb .Atoi (_dbad [5]);if _efde !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};if _cac >=1900&&_cac < 10000{_fdda =_cac ;_cca =_fad ;_bbf =_ecbg ;}else if _cac > 0&&_cac < 13{_cca =_cac ;_bbf =_fad ;_fdda =_ecbg ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_gage =_dbad [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_fdda ,_afd =_cb .Atoi (_dbad [16]);if _afd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_cca =_ffb [_dbad [3]];_bbf ,_afd =_cb .Atoi (_dbad [1]);if _afd !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};_gage =_dbad [19]=="";};if !_ggfe (_fdda ,_cca ,_bbf ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_abe );};return _fdda ,_cca ,_bbf ,_gage ,_bef ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_efgcd :=_g .Split (v ,"\u003a");if len (_efgcd )!=2{return nil ;};_bgefg ,_ :=_cb .Atoi (_efgcd [0]);_ddag ,_ :=_cb .Atoi (_efgcd [1]);if _bgefg > _ddag {_bgefg ,_ddag =_ddag ,_bgefg ;};return PrefixHorizontalRange {_dcbgd :pfx ,_dgeb :_bgefg ,_dedda :_ddag };};func (_accd *plex )Lex (lval *yySymType )int {_aadaed =true ;_cdca :=<-_accd ._fcgbb ;if _cdca !=nil {lval ._eadde =_cdca ;return int (lval ._eadde ._bgcff );};return 0;};

// Update returns the same object as updating sheet references does not affect Number.
func (_agdfc Number )Update (q *_ae .UpdateQuery )Expression {return _agdfc };const _bcaee =57351;const _afcdf =57346;

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_dbaea Result )AsNumber ()Result {if _dbaea .Type ==ResultTypeString {_acace ,_eefce :=_cb .ParseFloat (_dbaea .ValueString ,64);if _eefce ==nil {return MakeNumberResult (_acace );};};if _dbaea .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _dbaea ;};var _acf =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};func _ebdd (_cag float64 )bool {return _cag ==1||_cag ==2||_cag ==4};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};const _cddd =57362;

// Update returns the same object as updating sheet references does not affect named ranges.
func (_gged NamedRangeRef )Update (q *_ae .UpdateQuery )Expression {return _gged };func _ggaa (_eebd ,_bbgb ,_cbef ,_eadg ,_fgac float64 ,_dcfa int )float64 {_bfce :=_beca (_eebd ,_cbef ,_eadg ,_fgac ,_dcfa );var _cccd float64 ;if _bbgb ==1{if _dcfa ==1{_cccd =0;}else {_cccd =-_eadg ;};}else {if _dcfa ==1{_cccd =_cae (_eebd ,_bbgb -2,_bfce ,_eadg ,1)-_bfce ;}else {_cccd =_cae (_eebd ,_bbgb -1,_bfce ,_eadg ,0);};};return _cccd *_eebd ;};func _afb (_adfc ,_bbda ,_bed float64 )float64 {return (_adfc *3600+_bbda *60+_bed )/86400};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};type defEval struct{evCache ;_gfd bool ;};func _gbfe (_cbdac Result ,_ceca *criteriaParsed )bool {if _cbdac .IsBoolean {return false ;};_fffdd :=_cbdac .Type ;if _ceca ._eefb {return _fffdd ==ResultTypeNumber &&_cbdac .ValueNumber ==_ceca ._acfca ;}else if _fffdd ==ResultTypeNumber {return _agfgg (_cbdac .ValueNumber ,_ceca ._dbea );};return _eabba (_cbdac ,_ceca );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_afce :=len (args );if _afce < 3||_afce > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aafb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gce :=args [1].ValueNumber ;if _gce !=float64 (int (_gce )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdcf :=args [2].ValueNumber ;_deba :=0.0;if _afce >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deba =args [3].ValueNumber ;};_fgad :=0;if _afce ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgad =int (args [4].ValueNumber );if _fgad !=0{_fgad =1;};};return MakeNumberResult (_cae (_aafb ,_gce ,_gdcf ,_deba ,_fgad ));};

// Eval evaluates and returns an expression with prefix.
func (_beaad PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_eefcg :=_beaad ._gfae .Reference (ctx ,ev );switch _eefcg .Type {case ReferenceTypeSheet :if _edcfd (_eefcg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eefcg .Value ));};_ebfbf :=ctx .Sheet (_eefcg .Value );return _beaad ._begbag .Eval (_ebfbf ,ev );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eefcg .Type ));};};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_geeaf (args ,_fgda ))};

// Reference returns an invalid reference for Negate.
func (_egbaa Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _cbbb =57367;func _ggfe (_eddb ,_fbc ,_cba int )bool {if _fbc < 1||_fbc > 12{return false ;};if _cba < 1{return false ;};return _cba <=_gbg (_eddb ,_fbc );};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfea :=args [0].ValueNumber ;if _cfea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgcdg :=args [1].ValueNumber ;if _bgcdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaaa :=args [2].ValueNumber ;if _eaaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_fg .Pow (_eaaa /_bgcdg ,1/_cfea )-1);};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_gagab :=len (args );if _gagab !=6&&_gagab !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_agdcc ,_gafe ,_aegf :=_abcg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _aegf .Type ==ResultTypeError {return _aegf ;};_dfbb :=args [2];if _dfbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edefa :=_dfbb .ValueNumber ;if _edefa < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ccad :=args [3];if _ccad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cedgc :=_ccad .ValueNumber ;if _cedgc <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_abed :=args [4];if _abed .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_bcfe :=_abed .ValueNumber ;if _bcfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_aaae :=args [5];if _aaae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcef :=float64 (int (_aaae .ValueNumber ));if !_ebdd (_fcef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gdcbd :=0;if _gagab ==7&&args [6].Type !=ResultTypeEmpty {_bbdg :=args [6];if _bbdg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gdcbd =int (_bbdg .ValueNumber );if !_defe (_gdcbd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_faee :=0.0;_gafcb :=0.0;_cefdc :=1.0;_bcca ,_aegf :=_ggfd (_agdcc ,_gafe ,_edefa ,_gafcb ,_bcfe ,_fcef ,_gdcbd );if _aegf .Type ==ResultTypeError {return _aegf ;};_deda ,_aegf :=_ggfd (_agdcc ,_gafe ,_edefa ,_cefdc ,_bcfe ,_fcef ,_gdcbd );if _aegf .Type ==ResultTypeError {return _aegf ;};_aadaa :=(_cefdc -_gafcb )*0.5;for _ebbc :=0;_ebbc < 100&&_faee !=_cedgc ;_ebbc ++{_faee ,_aegf =_ggfd (_agdcc ,_gafe ,_edefa ,_aadaa ,_bcfe ,_fcef ,_gdcbd );if _aegf .Type ==ResultTypeError {return _aegf ;};if _cedgc ==_bcca {return MakeNumberResult (_gafcb );}else if _cedgc ==_deda {return MakeNumberResult (_cefdc );}else if _cedgc ==_faee {return MakeNumberResult (_aadaa );}else if _cedgc < _deda {_cefdc *=2.0;_deda ,_aegf =_ggfd (_agdcc ,_gafe ,_edefa ,_cefdc ,_bcfe ,_fcef ,_gdcbd );if _aegf .Type ==ResultTypeError {return _aegf ;};_aadaa =(_cefdc -_gafcb )*0.5;}else {if _cedgc < _faee {_gafcb =_aadaa ;_bcca =_faee ;}else {_cefdc =_aadaa ;_deda =_faee ;};_aadaa =_cefdc -(_cefdc -_gafcb )*((_cedgc -_deda )/(_bcca -_deda ));};};return MakeNumberResult (_aadaa );};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eddd :=args [0].AsNumber ();_agcf :=args [1].AsNumber ();if _eddd .Type !=ResultTypeNumber ||_agcf .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gdde :=_fg .Trunc (_eddd .ValueNumber );_cdba :=_fg .Trunc (_agcf .ValueNumber );if _cdba > _gdde {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _cdba ==_gdde ||_cdba ==0{return MakeNumberResult (1);};_ddcf :=float64 (1);for _bbgc :=float64 (1);_bbgc <=_cdba ;_bbgc ++{_ddcf *=(_gdde +1-_bbgc )/_bbgc ;};return MakeNumberResult (_ddcf );};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;func _edcfd (_dbbab Reference ,_efee Context )bool {return _efee .Sheet (_dbbab .Value )==InvalidReferenceContext ;};func _gadgc (_aebg Result )[][]Result {switch _aebg .Type {case ResultTypeArray :return _aebg .ValueArray ;case ResultTypeList :return [][]Result {_aebg .ValueList };default:return [][]Result {};};};func _dbaf (_caeb []Result ,_gdbgb bool )Result {_bace :="\u004d\u0041\u0058";if _gdbgb {_bace ="\u004d\u0041\u0058\u0041";};if len (_caeb )==0{return MakeErrorResult (_bace +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdbbd :=-_fg .MaxFloat64 ;for _ ,_cggc :=range _caeb {switch _cggc .Type {case ResultTypeNumber :if (_gdbgb ||!_cggc .IsBoolean )&&_cggc .ValueNumber > _fdbbd {_fdbbd =_cggc .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_afefc :=_dbaf (_cggc .ListValues (),_gdbgb );if _afefc .ValueNumber > _fdbbd {_fdbbd =_afefc .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_geca :=0.0;if _gdbgb {_geca =_cggc .AsNumber ().ValueNumber ;};if _geca > _fdbbd {_fdbbd =_geca ;};default:_fc .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bace +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cggc .Type );};};if _fdbbd ==-_fg .MaxFloat64 {_fdbbd =0;};return MakeNumberResult (_fdbbd );};

// Eval evaluates and returns the result of a sheet expression.
func (_egdcf SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_dcdgd :=args [0].AsString ();if _dcdgd .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_feafa :=args [1].AsNumber ();if _feafa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _feafa .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _feafa .ValueNumber ==0{return MakeStringResult ("");};_bbdcg :=_af .Buffer {};for _cbbfb :=0;_cbbfb < int (_feafa .ValueNumber );_cbbfb ++{_bbdcg .WriteString (_dcdgd .ValueString );};return MakeStringResult (_bbdcg .String ());};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_ecec :=len (args );if _ecec !=2&&_ecec !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fbda ,_gec :=_ccafb (args [0],args [1],"\u0058\u0049\u0052\u0052");if _gec .Type ==ResultTypeError {return _gec ;};_ceee :=_fbda ._dgdc ;_abac :=_fbda ._bgdg ;_fcbc :=0.1;if _ecec ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcbc =args [2].ValueNumber ;if _fcbc <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _begd (_ceee ,_abac ,_fcbc );};func _gfeed (_bgea int )string {if _bgea >=1&&_bgea -1< len (_eecd ){if _eecd [_bgea -1]!=""{return _eecd [_bgea -1];};};return _d .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_bgea );};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_debc :=int (args [0].ValueNumber );if _debc < 0||_debc >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _debc <=1899{_debc +=1900;};_cfc :=_cg .Month (args [1].ValueNumber );_afgc :=int (args [2].ValueNumber );_eaga :=_fgf (_debc ,_cfc ,_afgc );_acfe :=_fdef (_eeg ,_eaga )+1;if _acfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_acfe );};func _daccf (_feead _cg .Time )bool {return _cg .Now ().Sub (_feead )>=_degca };

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_cfcg SheetPrefixExpr )Update (q *_ae .UpdateQuery )Expression {return _cfcg };func _bdbc ()evCache {_bfdd :=evCache {};_bfdd ._aaa =make (map[string ]Result );_bfdd ._gab =&_f .Mutex {};return _bfdd ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_gddea :=args [0].AsNumber ();if _gddea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daga :=_fg .Signbit (_gddea .ValueNumber );_bgec ,_eefe :=_fg .Modf ((_gddea .ValueNumber -1)/2);_agfe :=_bgec *2+1;if _eefe !=0{if !_daga {_agfe +=2;}else {_agfe -=2;};};return MakeNumberResult (_agfe );};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fadcb :=args [0].AsString ();if _fadcb .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_fadcb .ValueString )));};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_aedbc :=_ddgba (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _aedbc .Type !=ResultTypeEmpty {return _aedbc ;};_aebdd :=_cedb (args [1:]);_dgba :=-_fg .MaxFloat64 ;_fdbbe :=_gadgc (args [0]);for _ ,_cbca :=range _aebdd {_cfee :=_fdbbe [_cbca ._gcca ][_cbca ._acee ].ValueNumber ;if _dgba < _cfee {_dgba =_cfee ;};};if _dgba ==-_fg .MaxFloat64 {_dgba =0;};return MakeNumberResult (float64 (_dgba ));};func _daed (_bfgg ,_fegb float64 ,_eec ,_eae int )float64 {_dfca :=_gaf (_bfgg );_agef :=_gaf (_fegb );if _eae ==1{_gedc :=_fbe (_dfca ,_agef ,_eec ,1);_caag :=_gedc .AddDate (0,12/_eec ,0);return _fcdd (_gedc ,_caag ,_eae );};return float64 (_bcf (0,_eae ))/float64 (_eec );};func _acfec (_egecb Context ,_caaef ,_befe string )(string ,string ){_cgfab :=_caaef +"\u0031";_cbbfa :=_egecb .LastRow (_caaef );_gcga :=_befe +_cb .Itoa (_cbbfa );return _cgfab ,_gcga ;};func _ddgba (_gbgg []Result ,_feca bool ,_dbgbf string )Result {var _gcac ,_gdbae string ;if _feca {_gcac ="\u0074\u0068\u0072e\u0065";_gdbae ="\u006f\u0064\u0064";}else {_gcac ="\u0074\u0077\u006f";_gdbae ="\u0065\u0076\u0065\u006e";};_agdb :=len (_gbgg );if (_feca &&_agdb < 3)||(!_feca &&_agdb < 2){return MakeErrorResult (_dbgbf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_gcac +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_agdb /2*2==_agdb )==_feca {return MakeErrorResult (_dbgbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gdbae +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_cdbga :=-1;_cefde :=-1;for _fded :=0;_fded < _agdb ;_fded +=2{_edbg :=_gbgg [_fded ];if _edbg .Type !=ResultTypeArray &&_edbg .Type !=ResultTypeList {return MakeErrorResult (_dbgbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_fdbb :=_gadgc (_edbg );if _cefde ==-1{_cefde =len (_fdbb );_cdbga =len (_fdbb [0]);}else if len (_fdbb )!=_cefde ||len (_fdbb [0])!=_cdbga {return MakeErrorResult (_dbgbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _feca &&_fded ==0{_fded --;};};return _bef ;};var _gfggc =[...]string {};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_ebdg :s }};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _c .Reader )Expression {_cfaf :=&plex {_fcgbb :LexReader (r )};_dabe (_cfaf );if _cfaf ._befcc !=""{return nil ;};return _cfaf ._fecfe ;};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gfbf ,_cfec ,_bgcf :=_abcg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _bgcf .Type ==ResultTypeError {return _bgcf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdbd :=_cfec -_gfbf ;if _fdbd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_bbgd :=args [2].ValueNumber ;if _bbgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_bbgd *_fdbd /360));};const _cece =57352;

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffffg :=args [0].AsNumber ();if _ffffg .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbgbe :=float64 (1);if _ffffg .ValueNumber < 0{_bbgbe =-1;};if len (args )> 1{_cbebe :=args [1].AsNumber ();if _cbebe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_bbgbe =_cbebe .ValueNumber ;};_dgeg :=float64 (1);if len (args )> 2{_edbf :=args [2].AsNumber ();if _edbf .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgeg =_edbf .ValueNumber ;};if len (args )==1{return MakeNumberResult (_fg .Floor (_ffffg .ValueNumber ));};_cddaf :=_ffffg .ValueNumber ;_cddaf ,_bgbb :=_fg .Modf (_cddaf /_bbgbe );if _bgbb !=0&&_ffffg .ValueNumber < 0&&_dgeg > 0{_cddaf ++;};return MakeNumberResult (_cddaf *_bbgbe );};func _eeafc (_beag ,_cgfb float64 ,_fecf ,_cbb int )float64 {_cgga :=_gaf (_beag );_bedf :=_gaf (_cgfb );_adfga :=_fbe (_cgga ,_bedf ,_fecf ,_cbb );return _fcdd (_adfga ,_cgga ,_cbb );};func _adg (_dfcd ,_ged ,_cgc int )int {if _dfcd > _ged {return 0;};if _bac (_cgc ){return (_ged -_dfcd +1)*360;};_ggbg :=0;for _ead :=_dfcd ;_ead <=_ged ;_ead ++{_ffdg :=365;if _aea (_ead ){_ffdg =366;};_ggbg +=_ffdg ;};return _ggbg ;};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_becdg :=_ddgba (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _becdg .Type !=ResultTypeEmpty {return _becdg ;};_febaa :=_cedb (args [1:]);_agae :=_fg .MaxFloat64 ;_faba :=_gadgc (args [0]);for _ ,_afaa :=range _febaa {_eacea :=_faba [_afaa ._gcca ][_afaa ._acee ].ValueNumber ;if _agae > _eacea {_agae =_eacea ;};};if _agae ==_fg .MaxFloat64 {_agae =0;};return MakeNumberResult (float64 (_agae ));};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_fadf :=args [0];if _fadf .Type !=ResultTypeNumber &&_fadf .Type !=ResultTypeString &&_fadf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_eaecf :=args [1].ValueString ;switch _fadf .Type {case ResultTypeNumber :return MakeStringResult (_cgd .Number (_fadf .ValueNumber ,_eaecf ));case ResultTypeString :return MakeStringResult (_cgd .String (_fadf .ValueString ,_eaecf ));case ResultTypeEmpty :return MakeStringResult (_cgd .Number (0,_eaecf ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};func (_cabd *yyParserImpl )Parse (yylex yyLexer )int {_egag :=_cg .Now ();var _ebec int ;var _cfgb yySymType ;var _cefdef []yySymType ;_ =_cefdef ;_afee :=_cabd ._ffffge [:];Nerrs :=0;Errflag :=0;_fdace :=0;_cabd ._ebbec =-1;_ddgfe :=-1;defer func (){_fdace =-1;_cabd ._ebbec =-1;_ddgfe =-1}();_cebd :=-1;goto _fadec ;_ceeeff :return 0;_aged :return 1;_fadec :if _daccf (_egag ){_fc .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _aged ;};if _ggffd >=4{_d .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_gfeed (_ddgfe ),_cfaa (_fdace ));};_cebd ++;if _cebd >=len (_afee ){_gfbe :=make ([]yySymType ,len (_afee )*2);copy (_gfbe ,_afee );_afee =_gfbe ;};_afee [_cebd ]=_cfgb ;_afee [_cebd ]._bbaa =_fdace ;_gcbgd :if _daccf (_egag ){_fc .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _aged ;};_ebec =_gbdbg [_fdace ];if _ebec <=_egdd {goto _bbdaa ;};if _cabd ._ebbec < 0{_cabd ._ebbec ,_ddgfe =_cdgd (yylex ,&_cabd ._gffae );};_ebec +=_ddgfe ;if _ebec < 0||_ebec >=_gcacaa {goto _bbdaa ;};_ebec =_gcfb [_ebec ];if _dbcab [_ebec ]==_ddgfe {_cabd ._ebbec =-1;_ddgfe =-1;_cfgb =_cabd ._gffae ;_fdace =_ebec ;if Errflag > 0{Errflag --;};goto _fadec ;};_bbdaa :if _daccf (_egag ){_fc .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _aged ;};_ebec =_afdg [_fdace ];if _ebec ==-2{if _cabd ._ebbec < 0{_cabd ._ebbec ,_ddgfe =_cdgd (yylex ,&_cabd ._gffae );};_ccade :=0;for {if _beeec [_ccade +0]==-1&&_beeec [_ccade +1]==_fdace {break ;};_ccade +=2;};for _ccade +=2;;_ccade +=2{_ebec =_beeec [_ccade +0];if _ebec < 0||_ebec ==_ddgfe {break ;};};_ebec =_beeec [_ccade +1];if _ebec < 0{goto _ceeeff ;};};if _ebec ==0{switch Errflag {case 0:yylex .Error (_gbdg (_fdace ,_ddgfe ));Nerrs ++;if _ggffd >=1{_d .Printf ("\u0025\u0073",_cfaa (_fdace ));_d .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_gfeed (_ddgfe ));};fallthrough;case 1,2:Errflag =3;for _cebd >=0{_ebec =_gbdbg [_afee [_cebd ]._bbaa ]+_geabgb ;if _ebec >=0&&_ebec < _gcacaa {_fdace =_gcfb [_ebec ];if _dbcab [_fdace ]==_geabgb {goto _fadec ;};};if _ggffd >=2{_d .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_afee [_cebd ]._bbaa );};_cebd --;};goto _aged ;case 3:if _ggffd >=2{_d .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_gfeed (_ddgfe ));};if _ddgfe ==_dgcgg {goto _aged ;};_cabd ._ebbec =-1;_ddgfe =-1;goto _gcbgd ;};};if _ggffd >=2{_d .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_ebec ,_cfaa (_fdace ));};_dgaab :=_ebec ;_cbea :=_cebd ;_ =_cbea ;_cebd -=_abbae [_ebec ];if _cebd +1>=len (_afee ){_bagee :=make ([]yySymType ,len (_afee )*2);copy (_bagee ,_afee );_afee =_bagee ;};_cfgb =_afee [_cebd +1];_ebec =_addcd [_ebec ];_cecga :=_ceedf [_ebec ];_adad :=_cecga +_afee [_cebd ]._bbaa +1;if _adad >=_gcacaa {_fdace =_gcfb [_cecga ];}else {_fdace =_gcfb [_adad ];if _dbcab [_fdace ]!=-_ebec {_fdace =_gcfb [_cecga ];};};switch _dgaab {case 1:_cefdef =_afee [_cbea -1:_cbea +1];{yylex .(*plex )._fecfe =_cfgb ._febe ;};case 3:_cefdef =_afee [_cbea -2:_cbea +1];{_cfgb ._febe =_cefdef [2]._febe ;};case 4:_cefdef =_afee [_cbea -4:_cbea +1];{};case 5:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewBool (_cefdef [1]._eadde ._afbb );};case 6:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewNumber (_cefdef [1]._eadde ._afbb );};case 7:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewString (_cefdef [1]._eadde ._afbb );};case 8:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewError (_cefdef [1]._eadde ._afbb );};case 9:_cefdef =_afee [_cbea -2:_cbea +1];{_cfgb ._febe =_cefdef [2]._febe ;};case 10:_cefdef =_afee [_cbea -2:_cbea +1];{_cfgb ._febe =NewNegate (_cefdef [2]._febe );};case 15:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =_cefdef [2]._febe ;};case 17:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewConstArrayExpr (_cefdef [2]._bfcdd );};case 18:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._bfcdd =append (_cfgb ._bfcdd ,_cefdef [1]._cbbe );};case 19:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._bfcdd =append (_cefdef [1]._bfcdd ,_cefdef [3]._cbbe );};case 20:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._cbbe =append (_cfgb ._cbbe ,_cefdef [1]._febe );};case 21:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._cbbe =append (_cefdef [1]._cbbe ,_cefdef [3]._febe );};case 23:_cefdef =_afee [_cbea -2:_cbea +1];{_cfgb ._febe =NewPrefixExpr (_cefdef [1]._febe ,_cefdef [2]._febe );};case 25:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewSheetPrefixExpr (_cefdef [1]._eadde ._afbb );};case 26:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewCellRef (_cefdef [1]._eadde ._afbb );};case 27:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewRange (_cefdef [1]._febe ,_cefdef [3]._febe );};case 28:_cefdef =_afee [_cbea -4:_cbea +1];{_cfgb ._febe =NewPrefixRangeExpr (_cefdef [1]._febe ,_cefdef [2]._febe ,_cefdef [4]._febe );};case 29:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewNamedRangeRef (_cefdef [1]._eadde ._afbb );};case 30:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewHorizontalRange (_cefdef [1]._eadde ._afbb );};case 31:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._febe =NewVerticalRange (_cefdef [1]._eadde ._afbb );};case 32:_cefdef =_afee [_cbea -2:_cbea +1];{_cfgb ._febe =NewPrefixHorizontalRange (_cefdef [1]._febe ,_cefdef [2]._eadde ._afbb );};case 33:_cefdef =_afee [_cbea -2:_cbea +1];{_cfgb ._febe =NewPrefixVerticalRange (_cefdef [1]._febe ,_cefdef [2]._eadde ._afbb );};case 34:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypePlus ,_cefdef [3]._febe );};case 35:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeMinus ,_cefdef [3]._febe );};case 36:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeMult ,_cefdef [3]._febe );};case 37:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeDiv ,_cefdef [3]._febe );};case 38:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeExp ,_cefdef [3]._febe );};case 39:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeLT ,_cefdef [3]._febe );};case 40:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeGT ,_cefdef [3]._febe );};case 41:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeLEQ ,_cefdef [3]._febe );};case 42:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeGEQ ,_cefdef [3]._febe );};case 43:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeEQ ,_cefdef [3]._febe );};case 44:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeNE ,_cefdef [3]._febe );};case 45:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewBinaryExpr (_cefdef [1]._febe ,BinOpTypeConcat ,_cefdef [3]._febe );};case 47:_cefdef =_afee [_cbea -2:_cbea +1];{_cfgb ._febe =NewFunction (_cefdef [1]._eadde ._afbb ,nil );};case 48:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._febe =NewFunction (_cefdef [1]._eadde ._afbb ,_cefdef [2]._cbbe );};case 49:_cefdef =_afee [_cbea -1:_cbea +1];{_cfgb ._cbbe =append (_cfgb ._cbbe ,_cefdef [1]._febe );};case 50:_cefdef =_afee [_cbea -3:_cbea +1];{_cfgb ._cbbe =append (_cefdef [1]._cbbe ,_cefdef [3]._febe );};case 53:_cefdef =_afee [_cbea -0:_cbea +1];{_cfgb ._febe =NewEmptyExpr ();};};goto _fadec ;};func (_adca *noCache )GetFromCache (key string )(Result ,bool ){return _bef ,false };

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dcab ,_dbde ,_aabc :=_abcg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _aabc .Type ==ResultTypeError {return _aabc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfbf :=_dbde -_dcab ;if _ecfbf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_cabe :=args [2].ValueNumber ;if _cabe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbbf :=(100-_cabe )/_cabe ;_cebe :=360/_ecfbf ;return MakeNumberResult (_cbbf *_cebe );};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ddd :=args [1].ValueNumber ;_geb :=args [0];var _cbcc float64 ;switch _geb .Type {case ResultTypeEmpty :_cbcc =0;case ResultTypeNumber :_cbcc =_geb .ValueNumber ;case ResultTypeString :_addd :=DateValue ([]Result {args [0]});if _addd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cbcc =_addd .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bag :=_gaf (_cbcc );_fbcg :=_bag .AddDate (0,int (_ddd +1),0);_feg ,_dff ,_ :=_fbcg .Date ();_ecfc :=_acgc (_feg ,int (_dff ),0);if _ecfc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _feg ==1900&&_dff ==3{_ecfc --;};return MakeNumberResult (_ecfc );};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_caega :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_eeeg :=args [1].ValueNumber !=0;_acac :=_edbe (args [2:],[]string {},_eeeg );return MakeStringResult (_g .Join (_acac ,_caega ));};var _cega *_cc .Rand ;func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbbdc :=args [0].AsNumber ();if _bbbdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfeac :=float64 (0);if len (args )> 1{_dgegf :=args [1].AsNumber ();if _dgegf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfeac =_dgegf .ValueNumber ;};_afeae :=_bbbdc .ValueNumber ;_ddba :=1.0;if _cfeac >=0{_ddba =_fg .Pow (1/10.0,_cfeac );}else {return MakeNumberResult (0);};_afeae ,_fdfaf :=_fg .Modf (_afeae /_ddba );_geff :=0.99999;if _fdfaf > _geff {_afeae ++;}else if _fdfaf < -_geff {_afeae --;};_ =_fdfaf ;return MakeNumberResult (_afeae *_ddba );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_caaea ,_cabc ,_gbcge Expression };

// Reference returns a string reference value to an expression with prefix.
func (_abefc PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_bafea :=_abefc ._gfae .Reference (ctx ,ev );_fggdf :=_abefc ._begbag .Reference (ctx ,ev );if _bafea .Type ==ReferenceTypeSheet &&_fggdf .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_bafea .Value +"\u0021"+_fggdf .Value };};return ReferenceInvalid ;};func _aage (_bdgcb ,_gcae float64 ,_gdbe ,_afca int )float64 {_aadd :=_gaf (_bdgcb );_bebc :=_gaf (_gcae );_cfb :=_gaee (_aadd ,_bebc ,_gdbe );return _fcdd (_aadd ,_cfb ,_afca );};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbd :=0;_gbee :=false ;for _ ,_agbc :=range args {switch _agbc .Type {case ResultTypeList ,ResultTypeArray :_addba :=Xor (_agbc .ListValues ());if _addba .Type ==ResultTypeError {return _addba ;};if _addba .ValueNumber !=0{_bgbd ++;};_gbee =true ;case ResultTypeNumber :if _agbc .ValueNumber !=0{_bgbd ++;};_gbee =true ;case ResultTypeString :case ResultTypeError :return _agbc ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_gbee {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_bgbd %2!=0);};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fbgf :=ctx .GetEpoch ();_fede ,_aafbd :=_gfff (args [0].Value (),_fbgf );if _aafbd !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gbaag :=_fede .Year ();return MakeBoolResult (_aea (_gbaag ));};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccgeb :=args [0].AsNumber ();if _ccgeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _gcgf float64 ;_abeff :=args [1].AsNumber ();if _abeff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcgf =_abeff .ValueNumber ;if _gcgf < 0&&_ccgeb .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_bacfe :=_ccgeb .ValueNumber ;_bacfe ,_fcgde :=_fg .Modf (_bacfe /_gcgf );if _fcgde !=0{if _ccgeb .ValueNumber < 0&&_fcgde < 0{_bacfe --;};};return MakeNumberResult (_bacfe *_gcgf );};type countMode byte ;

// String returns an empty string for Error.
func (_eagf Error )String ()string {return ""};var _affa =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_bgfeg :=len (args );if _bgfeg < 3||_bgfeg > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgade :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eegge :=args [1].ValueNumber ;if _eegge ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_feaa :=args [2].ValueNumber ;_fecb :=0.0;if _bgfeg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fecb =args [3].ValueNumber ;};_cdbg :=0.0;if _bgfeg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdbg =args [4].ValueNumber ;if _cdbg !=0{_cdbg =1;};};var _dafa float64 ;if _fgade ==0{_dafa =(_feaa +_fecb )/_eegge ;}else {_afdd :=_fg .Pow (1+_fgade ,_eegge );if _cdbg ==1{_dafa =(_fecb *_fgade /(_afdd -1)+_feaa *_fgade /(1-1/_afdd ))/(1+_fgade );}else {_dafa =_fecb *_fgade /(_afdd -1)+_feaa *_fgade /(1-1/_afdd );};};return MakeNumberResult (-_dafa );};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbbb :=args [0];if _fbbb .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eccga :=len (_fbbb .ValueArray );for _ ,_gdec :=range _fbbb .ValueArray {if len (_gdec )!=_eccga {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_bcbgf (_fbbb .ValueArray ));};const _ecfe =57375;

// Eval evaluates and returns the result of a Negate expression.
func (_fegaf Negate )Eval (ctx Context ,ev Evaluator )Result {_gcegd :=_fegaf ._bdadg .Eval (ctx ,ev );if _gcegd .Type ==ResultTypeNumber {return MakeNumberResult (-_gcegd .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// Reference returns an invalid reference for Error.
func (_bfc Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_eeefd :=len (args );if _eeefd !=4&&_eeefd !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_becb ,_dedea ,_bbagb :=_abcg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _bbagb .Type ==ResultTypeError {return _bbagb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efae :=args [2].ValueNumber ;if _efae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_ffbg :=args [3].ValueNumber ;if _ffbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_fffef :=0;if _eeefd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fffef =int (args [4].ValueNumber );if !_defe (_fffef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_bfaec ,_bbagb :=_bdcd (_becb ,_dedea ,_fffef );if _bbagb .Type ==ResultTypeError {return _bbagb ;};return MakeNumberResult (_ffbg *(1-_efae *_bfaec ));};func (_fbefb HorizontalRange )horizontalRangeReference ()string {return _d .Sprintf ("\u0025\u0064\u003a%\u0064",_fbefb ._addec ,_fbefb ._ebfdd );};const _dccd =57348;

// Update returns the same object as updating sheet references does not affect Bool.
func (_gbc Bool )Update (q *_ae .UpdateQuery )Expression {return _gbc };

// String returns a string representation of a vertical range.
func (_gfaf VerticalRange )String ()string {return _gfaf .verticalRangeReference ()};const _gacg =57356;var _ffb =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// GetEpoch returns a null time object for the invalid reference context.
func (_egfb *ivr )GetEpoch ()_cg .Time {return _cg .Time {}};var _eccc =false ;

// Eval evaluates and returns the result of a formula.
func (_bdg *defEval )Eval (ctx Context ,formula string )Result {_geg :=ParseString (formula );_dd :=make (chan Result );go func (){if _geg ==nil {_dd <-MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_bdg .checkLastEvalIsRef (ctx ,_geg );_dd <-_geg .Eval (ctx ,_bdg );};}();select{case _ggg :=<-_dd :return _ggg ;case <-_cg .After (_dbc ):_fc .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};func _fefe (_fbaa _cg .Time )_cg .Time {_fbaa =_fbaa .UTC ();return _cg .Date (_fbaa .Year (),_fbaa .Month (),_fbaa .Day (),_fbaa .Hour (),_fbaa .Minute (),_fbaa .Second (),_fbaa .Nanosecond (),_cg .Local );};