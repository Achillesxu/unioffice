//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_f "bytes";_d "errors";_g "fmt";_edd "github.com/unidoc/unioffice/common/logger";_cc "github.com/unidoc/unioffice/internal/mergesort";_gba "github.com/unidoc/unioffice/internal/wildcard";_fc "github.com/unidoc/unioffice/spreadsheet/format";_gee "github.com/unidoc/unioffice/spreadsheet/reference";_ed "github.com/unidoc/unioffice/spreadsheet/update";_c "io";_ge "math";_a "math/big";_ad "math/rand";_ec "regexp";_df "sort";_dc "strconv";_ca "strings";_ee "sync";_dfc "time";_gb "unicode";);

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdg :=_dfc .Now ();_ ,_gaf :=_fdg .Zone ();_ccd :=_fgac (_gde ,_fdg .Unix ()+int64 (_gaf ))+1;return MakeNumberResult (_ccd );};

// String returns a string representation of a vertical range with prefix.
func (_dfdd PrefixVerticalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dfdd ._gagce .String (),_dfdd ._ggafd ,_dfdd ._cbffg );};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_dedd ,_caeb :=_cdfe ("\u0046\u0049\u004e\u0044",args );if _caeb .Type !=ResultTypeEmpty {return _caeb ;};_fccga :=_ca .ToLower (_dedd ._gbfbd );if _fccga ==""{return MakeNumberResult (1.0);};_bbfc :=_ca .ToLower (_dedd ._egaf );_befa :=_dedd ._ccab ;_ccafef :=1;for _abba :=range _bbfc {if _ccafef < _befa {_ccafef ++;continue ;};_bdcea :=_gba .Index (_fccga ,_bbfc [_abba :]);if _bdcea ==0{return MakeNumberResult (float64 (_ccafef ));};_ccafef ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cdga (args ,_fcfaf )};

// Eval evaluates and returns the result of an error expression.
func (_gcf Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_gcf ._bed )};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_gad :v }};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _acbgfc (_dfef Result ,_cddce ,_ffad string )(string ,Result ){switch _dfef .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _dfef .Value (),_eec ;default:return "",MakeErrorResult (_cddce +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ffad +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};var _aged =[...]struct{_gfcc int ;_gaafbf int ;_ggcfe string ;}{};func (_edfbd ResultType )String ()string {if _edfbd >=ResultType (len (_dgadfa )-1){return _g .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_edfbd );};return _cbcee [_dgadfa [_edfbd ]:_dgadfa [_edfbd +1]];};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_fbfc :=MakeNumberResult (0);for _ ,_cfgb :=range args {_cfgb =_cfgb .AsNumber ();switch _cfgb .Type {case ResultTypeNumber :_fbfc .ValueNumber +=_cfgb .ValueNumber *_cfgb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dddag :=SumSquares (_cfgb .ListValues ());if _dddag .Type !=ResultTypeNumber {return _dddag ;};_fbfc .ValueNumber +=_dddag .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cfgb ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_cfgb .Type ));};};return _fbfc ;};func _gca (_gdea ,_fdad ,_fcf ,_efe int )int {if _fdad > _fcf {return 0;};if _eag (_efe ){return (_fcf -_fdad +1)*30;};_gdcf :=0;for _geed :=_fdad ;_geed <=_fcf ;_geed ++{_gdcf +=_eea (_gdea ,_geed );};return _gdcf ;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func _gfdb (_cagfd Context ,_gebe Evaluator ,_edcgd ,_edfb string )Result {_aedbc ,_bfcb :=_gee .ParseCellReference (_edcgd );if _bfcb !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_edcgd ,_bfcb .Error ()));};_bcada ,_fdabg :=_aedbc .ColumnIdx ,_aedbc .RowIdx ;_dbgga ,_gdbd :=_gee .ParseCellReference (_edfb );if _gdbd !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_edfb ,_gdbd .Error ()));};_bdafd ,_cefgg :=_dbgga .ColumnIdx ,_dbgga .RowIdx ;_ccgg :=[][]Result {};for _gcfe :=_fdabg ;_gcfe <=_cefgg ;_gcfe ++{_fcaa :=[]Result {};for _cfef :=_bcada ;_cfef <=_bdafd ;_cfef ++{_cccge :=_cagfd .Cell (_g .Sprintf ("\u0025\u0073\u0025\u0064",_gee .IndexToColumn (_cfef ),_gcfe ),_gebe );_fcaa =append (_fcaa ,_cccge );};_ccgg =append (_ccgg ,_fcaa );};if len (_ccgg )==1{if len (_ccgg [0])==1{return _ccgg [0][0];};return MakeListResult (_ccgg [0]);};return MakeArrayResult (_ccgg );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_effff :=args [0];if _effff .Type !=ResultTypeArray &&_effff .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eaecc :=_faebe (args [1]);_ggad :=0;for _ ,_fdfbe :=range _bfff (_effff ){for _ ,_gege :=range _fdfbe {if _dggab (_gege ,_eaecc ){_ggad ++;};};};return MakeNumberResult (float64 (_ggad ));};var (_aefd =0;_fgdcfc =false ;);

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cdd :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_cdd *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_gafa :=_bfff (args [1]);for _ ,_face :=range _gafa {for _ ,_decf :=range _face {if _decf .Type !=ResultTypeNumber ||_decf .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_cdd *=1.0+_decf .ValueNumber ;};};return MakeNumberResult (_cdd );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efbc :=args [0];_acga :=args [1];if _acga .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bdffe :=args [2].AsNumber ();if _bdffe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_feed :=false ;if len (args )==4{_gfcf :=args [3].AsNumber ();if _gfcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gfcf .ValueNumber ==0{_feed =true ;};};_geaac :=-1;_bgbb :=false ;if len (_acga .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_cebb :=_acga .ValueArray [0];_febfb :for _dad ,_ecaa :=range _cebb {switch _cfag (_ecaa ,_efbc ,false ,_feed ){case _cgdc :_geaac =_dad ;case _efag :_geaac =_dad ;_bgbb =true ;break _febfb ;};};if _geaac ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_ffgc :=int (_bdffe .ValueNumber )-1;if _ffgc < 0||_ffgc > len (_acga .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_cebb =_acga .ValueArray [_ffgc ];if _geaac < 0||_geaac >=len (_cebb ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bgbb ||!_feed {return _cebb [_geaac ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};const _ddb ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_fgdba ,_ccee :=_dgfge ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _ccee .Type !=ResultTypeEmpty {return _ccee ;};_agcbg :=_fgdba ._gbfd ;_gfgbee :=_fgdba ._accda ;_adga :=_fgdba ._afegb ;_cgeg :=_fgdba ._aeafe ;_aedge :=len (_agcbg );if _gfgbee > _aedge {_gfgbee =_aedge ;};_ebgc :=_gfgbee +_adga ;if _ebgc > _aedge {_ebgc =_aedge ;};_affaf :=_agcbg [0:_gfgbee ]+_cgeg +_agcbg [_ebgc :];return MakeStringResult (_affaf );};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_facb :=args [0].AsNumber ();_agcb :=args [1].AsNumber ();if _facb .Type !=ResultTypeNumber ||_agcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _agcb .ValueNumber < _facb .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_fbbd :=int64 (_facb .ValueNumber );_cccf :=int64 (_agcb .ValueNumber );return MakeNumberResult (float64 (_cggcf .Int63n (_cccf -_fbbd +1)+_fbbd ));};func _adgb (_cbb ,_ffe float64 ,_fdgf int )(float64 ,Result ){_bbb ,_gfbgg :=_fdbf (_cbb ),_fdbf (_ffe );_cgbg :=_bbb .Unix ();_dbf :=_gfbgg .Unix ();if _cgbg ==_dbf {return 0,_eec ;};_adgc ,_cafa ,_ebaf :=_bbb .Date ();_edgc ,_debc ,_gagc :=_gfbgg .Date ();_gffb ,_dfac :=int (_cafa ),int (_debc );var _eaac ,_bcd float64 ;switch _fdgf {case 0:if _ebaf ==31{_ebaf --;};if _ebaf ==30&&_gagc ==31{_gagc --;}else if _ggg :=_ebfa (_adgc );_gffb ==2&&((_ggg &&_ebaf ==29)||(!_ggg &&_ebaf ==28)){_ebaf =30;if _cde :=_ebfa (_edgc );_dfac ==2&&((_cde &&_gagc ==29)||(!_cde &&_gagc ==28)){_gagc =30;};};_eaac =float64 ((_edgc -_adgc )*360+(_dfac -_gffb )*30+(_gagc -_ebaf ));_bcd =360;case 1:_eaac =_ffe -_cbb ;_bbc :=_adgc !=_edgc ;if _bbc &&(_edgc !=_adgc +1||_gffb < _dfac ||(_gffb ==_dfac &&_ebaf < _gagc )){_bffg :=0;for _cefa :=_adgc ;_cefa <=_edgc ;_cefa ++{_bffg +=_dfb (_cefa ,1);};_bcd =float64 (_bffg )/float64 (_edgc -_adgc +1);}else {if !_bbc &&_ebfa (_adgc ){_bcd =366;}else {if _bbc &&((_ebfa (_adgc )&&(_gffb < 2||(_gffb ==2&&_ebaf <=29)))||(_ebfa (_edgc )&&(_dfac > 2||(_dfac ==2&&_gagc ==29)))){_bcd =366;}else {_bcd =365;};};};case 2:_eaac =_ffe -_cbb ;_bcd =360;case 3:_eaac =_ffe -_cbb ;_bcd =365;case 4:if _ebaf ==31{_ebaf --;};if _gagc ==31{_gagc --;};_eaac =float64 ((_edgc -_adgc )*360+(_dfac -_gffb )*30+(_gagc -_ebaf ));_bcd =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _eaac /_bcd ,_eec ;};const _fadfd =57367;func _adgbd (_cabd ,_debd Result ,_adge string )(float64 ,float64 ,Result ){_begg ,_fdcb :=_aeb (_cabd ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_adge );if _fdcb .Type ==ResultTypeError {return 0,0,_fdcb ;};_accc ,_fdcb :=_aeb (_debd ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_adge );if _fdcb .Type ==ResultTypeError {return 0,0,_fdcb ;};if _begg >=_accc {return 0,0,MakeErrorResultType (ErrorTypeNum ,_adge +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _begg ,_accc ,_eec ;};type noCache struct{};func (_ecgcb *noCache )SetCache (key string ,value Result ){};

// String returns a string representation of a range with prefix.
func (_degcc PrefixRangeExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_degcc ._ffege .String (),_degcc ._gfeg .String (),_degcc ._gagca .String ());};

// String returns a string representation of a named range.
func (_fffb NamedRangeRef )String ()string {return _fffb ._fbcb };

// String returns an empty string for EmptyExpr.
func (_gbc EmptyExpr )String ()string {return ""};func _dcfcc (_fdbed float64 ,_bacee *criteriaRegex )bool {_ecgbc ,_fdgb :=_dc .ParseFloat (_bacee ._cega ,64);if _fdgb !=nil {return false ;};switch _bacee ._effc {case _acbgf :return _fdbed ==_ecgbc ;case _aeacf :return _fdbed <=_ecgbc ;case _ecad :return _fdbed >=_ecgbc ;case _dbefc :return _fdbed < _ecgbc ;case _beeb :return _fdbed > _ecgbc ;};return false ;};const _aage =57361;func _feee (_fgd float64 )float64 {return float64 (int (_fgd +0.5))};var _ddde =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_bfeg :=len (args );if _bfeg !=5&&_bfeg !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bba ,_bgbf ,_bage :=_adgbd (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _bage .Type ==ResultTypeError {return _bage ;};_becf ,_bage :=_aeb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _bage .Type ==ResultTypeError {return _bage ;};if _becf >=_bba {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cbegb :=args [3].ValueNumber ;if _cbegb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_geeac :=args [4].ValueNumber ;if _geeac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dcbc :=0;if _bfeg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcbc =int (args [5].ValueNumber );if !_aba (_dcbc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_aeged ,_bage :=_adgb (_bba ,_bgbf ,_dcbc );if _bage .Type ==ResultTypeError {return _bage ;};_cege ,_bage :=_adgb (_becf ,_bgbf ,_dcbc );if _bage .Type ==ResultTypeError {return _bage ;};_bdbc ,_bage :=_adgb (_becf ,_bba ,_dcbc );if _bage .Type ==ResultTypeError {return _bage ;};_abbg :=1+_cege *_cbegb ;_bacad :=1+_aeged *_geeac ;return MakeNumberResult ((_abbg /_bacad -_bdbc *_cbegb )*100);};func _fbg (_gbfg []Result ,_cgga string )(*durationArgs ,Result ){_efee :=len (_gbfg );if _efee !=5&&_efee !=6{return nil ,MakeErrorResult (_cgga +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfba ,_cag ,_gbce :=_adgbd (_gbfg [0],_gbfg [1],_cgga );if _gbce .Type ==ResultTypeError {return nil ,_gbce ;};_cfge :=_gbfg [2];if _cfge .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgga +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ffce :=_cfge .ValueNumber ;if _ffce < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_ebbb :=_gbfg [3];if _ebbb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgga +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ebfb :=_ebbb .ValueNumber ;if _ebfb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_egb :=_gbfg [4];if _egb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgga +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfae :=float64 (int (_egb .ValueNumber ));if !_faee (_bfae ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dde :=0;if _efee ==6&&_gbfg [5].Type !=ResultTypeEmpty {_adff :=_gbfg [5];if _adff .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgga +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dde =int (_adff .ValueNumber );if !_aba (_dde ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_cgga );};};return &durationArgs {_gfba ,_cag ,_ffce ,_ebfb ,_bfae ,_dde },_eec ;};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_gbeee :=len (args );if _gbeee < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gbeee > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgbe :=args [0];_bdeg :=args [1];if _bdeg .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aeaf :=args [2].AsNumber ();if _aeaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdadg :=false ;if _gbeee ==4&&args [3].Type !=ResultTypeEmpty {_dgcf :=args [3].AsNumber ();if _dgcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dgcf .ValueNumber ==0{_cdadg =true ;};};_bdafc :=int (_aeaf .ValueNumber )-1;_dgfcb :=-1;_abfg :=false ;_daac :for _dcba ,_cbgb :=range _bdeg .ValueArray {if len (_cbgb )==0{continue ;};_edgdf :=_cbgb [0];switch _cfag (_edgdf ,_bgbe ,false ,_cdadg ){case _cgdc :_dgfcb =_dcba ;case _efag :_dgfcb =_dcba ;_abfg =true ;break _daac ;};};if _dgfcb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gaegc :=_bdeg .ValueArray [_dgfcb ];if _bdafc < 0||_bdafc >=len (_gaegc ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _abfg ||!_cdadg {return _gaegc [_bdafc ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_caab :=_aeag (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _caab .Type !=ResultTypeEmpty {return _caab ;};_ddfg :=_bgdd (args [1:]);_befd :=_ge .MaxFloat64 ;_cfff :=_bfff (args [0]);for _ ,_fbefd :=range _ddfg {_eeged :=_cfff [_fbefd ._gfgb ][_fbefd ._fdeb ].ValueNumber ;if _befd > _eeged {_befd =_eeged ;};};if _befd ==_ge .MaxFloat64 {_befd =0;};return MakeNumberResult (float64 (_befd ));};func _beb (_gabf []Result ,_cdgf string )(*cumulArgs ,Result ){if len (_gabf )!=6{return nil ,MakeErrorResult (_cdgf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gabf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdgf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ffde :=_gabf [0].ValueNumber ;if _ffde <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gabf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdgf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ebae :=_gabf [1].ValueNumber ;if _ebae <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _gabf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdgf +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bee :=_gabf [2].ValueNumber ;if _bee <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gabf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdgf +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gaec :=_gabf [3].ValueNumber ;if _gaec <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gabf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdgf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deecg :=_gabf [4].ValueNumber ;if _deecg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _deecg < _gaec {return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _deecg > _ebae {return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_bbeg :=int (_gabf [5].ValueNumber );if _bbeg !=0&&_bbeg !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_cdgf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_ffde ,_ebae ,_bee ,_gaec ,_deecg ,_bbeg },_eec ;};var InvalidReferenceContext =&ivr {};

// FunctionCall is a function call expression.
type FunctionCall struct{_bgae string ;_cebg []Expression ;};

// Match implements the MATCH function.
func Match (args []Result )Result {_ebbd :=len (args );if _ebbd !=2&&_ebbd !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfacc :=1;if _ebbd ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_befcd :=args [2].ValueNumber ;if _befcd ==-1||_befcd ==0{_dfacc =int (_befcd );};};_cbfeg :=args [1];var _bbcdc []Result ;switch _cbfeg .Type {case ResultTypeList :_bbcdc =_cbfeg .ValueList ;case ResultTypeArray :_bfaa :=_cbfeg .ValueArray ;for _ ,_egbb :=range _bfaa {if len (_egbb )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_bbcdc =append (_bbcdc ,_egbb [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_dfbc :=_faebe (args [0]);switch _dfacc {case 0:for _dcad ,_abcb :=range _bbcdc {if _aacg (_abcb ,_dfbc ){return MakeNumberResult (float64 (_dcad +1));};};case -1:for _eeeb :=0;_eeeb < len (_bbcdc );_eeeb ++{if _aacg (_bbcdc [_eeeb ],_dfbc ){return MakeNumberResult (float64 (_eeeb +1));};if _dfbc ._fccfg &&(_bbcdc [_eeeb ].ValueNumber < _dfbc ._cbaba ){if _eeeb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_eeeb ));};};case 1:for _fcgb :=0;_fcgb < len (_bbcdc );_fcgb ++{if _aacg (_bbcdc [_fcgb ],_dfbc ){return MakeNumberResult (float64 (_fcgb +1));};if _dfbc ._fccfg &&(_bbcdc [_fcgb ].ValueNumber > _dfbc ._cbaba ){if _fcgb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fcgb ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};var _cbc =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};const _afgdd =57377;const _dead =1;

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_fdfe :=args [0];if _fdfe .Type !=ResultTypeNumber &&_fdfe .Type !=ResultTypeString &&_fdfe .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_abgec :=args [1].ValueString ;switch _fdfe .Type {case ResultTypeNumber :return MakeStringResult (_fc .Number (_fdfe .ValueNumber ,_abgec ));case ResultTypeString :return MakeStringResult (_fc .String (_fdfe .ValueString ,_abgec ));case ResultTypeEmpty :return MakeStringResult (_fc .Number (0,_abgec ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};func _cfdgf (_bfg ,_bafd float64 ,_fgc ,_geda int )float64 {_ecda :=_fdbf (_bfg );_dcgfa :=_fdbf (_bafd );_gdga :=_dbc (_ecda ,_dcgfa ,_fgc );return _edfc (_ecda ,_gdga ,_geda );};const _ddg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _gcfd (_ecgb int ,_cgfd _dfc .Month ,_gbcc int )int64 {if _ecgb ==1900&&int (_cgfd )<=2{_gbcc --;};_cdfd :=_dfc .Date (_ecgb ,_cgfd ,_gbcc ,0,0,0,0,_dfc .UTC );return _cdfd .Unix ();};

// Db implements the Excel DB function.
func Db (args []Result )Result {_bfeeg :=len (args );if _bfeeg !=4&&_bfeeg !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddbg :=args [0].ValueNumber ;if _ddbg < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggcf :=args [1].ValueNumber ;if _ggcf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dab :=args [2].ValueNumber ;if _dab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bbcd :=args [3].ValueNumber ;if _bbcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _bbcd -_dab > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cbde :=12.0;if _bfeeg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbde =args [4].ValueNumber ;if _cbde < 1||_cbde > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _cbde ==12&&_bbcd > _dab {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _ggcf >=_ddbg {return MakeNumberResult (0);};_babd :=1-_ge .Pow (_ggcf /_ddbg ,1/_dab );_babd =float64 (int (_babd *1000+0.5))/1000;_ddc :=_ddbg *_babd *_cbde /12;if _bbcd ==1{return MakeNumberResult (_ddc );};_cabg :=_ddc ;_fdbg :=0.0;_bdff :=_dab ;if _bdff > _bbcd {_bdff =_bbcd ;};for _feef :=2.0;_feef <=_bdff ;_feef ++{_fdbg =(_ddbg -_cabg )*_babd ;_cabg +=_fdbg ;};if _bbcd > _dab {return MakeNumberResult ((_ddbg -_cabg )*_babd *(12-_cbde )/12);};return MakeNumberResult (_fdbg );};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_beea :=args [0].Ref ;if _beea .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_beea .Value ));};func _ecg ()evCache {_abe :=evCache {};_abe ._dege =make (map[string ]Result );_abe ._cdf =&_ee .Mutex {};return _abe ;};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dacgg :=args [0].AsNumber ();if _dacgg .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _dacgg .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_fdab (_dacgg .ValueNumber ));};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fgcc (args ,true )};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaee :=args [0].AsNumber ();if _gaee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_ge .Pi *_gaee .ValueNumber );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fdfa :=args [0].AsNumber ();if _fdfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acbgg :=float64 (1);if _fdfa .ValueNumber < 0{_acbgg =-1;};if len (args )> 1{_eafa :=args [1].AsNumber ();if _eafa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_acbgg =_ge .Abs (_eafa .ValueNumber );};if len (args )==1{return MakeNumberResult (_ge .Floor (_fdfa .ValueNumber ));};_fdaba :=_fdfa .ValueNumber ;_fdaba ,_gdeg :=_ge .Modf (_fdaba /_acbgg );if _gdeg !=0{if _fdfa .ValueNumber < 0{_fdaba --;};};return MakeNumberResult (_fdaba *_acbgg );};const _defeg =57368;func _gegg (_dfbd []Result ,_bffga string )(*amorArgs ,Result ){_bfdf :=len (_dfbd );if _bfdf !=6&&_bfdf !=7{return nil ,MakeErrorResult (_bffga +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dfbd [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bffga +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gfea :=_dfbd [0].ValueNumber ;if _gfea < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bffga +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_aebg ,_ecag :=_aeb (_dfbd [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_bffga );if _ecag .Type ==ResultTypeError {return nil ,_ecag ;};_gcgb ,_ecag :=_aeb (_dfbd [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_bffga );if _ecag .Type ==ResultTypeError {return nil ,_ecag ;};if _gcgb < _aebg {return nil ,MakeErrorResultType (ErrorTypeNum ,_bffga +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _dfbd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bffga +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbdfg :=_dfbd [3].ValueNumber ;if _gbdfg < 0||_gbdfg > _gfea {return nil ,MakeErrorResultType (ErrorTypeNum ,_bffga +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _dfbd [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bffga +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfbf :=int (_dfbd [4].ValueNumber );if _cfbf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bffga +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _dfbd [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bffga +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_daab :=_dfbd [5].ValueNumber ;if _daab < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bffga +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_dfgb :=0;if _bfdf ==7&&_dfbd [6].Type !=ResultTypeEmpty {if _dfbd [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bffga +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfgb =int (_dfbd [6].ValueNumber );if !_aba (_dfgb )||_dfgb ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bffga );};};return &amorArgs {_gfea ,_aebg ,_gcgb ,_gbdfg ,_cfbf ,_daab ,_dfgb },_eec ;};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_bed :v }};const _abcee =57348;type durationArgs struct{_aebc float64 ;_cba float64 ;_degb float64 ;_egfe float64 ;_fgba float64 ;_cbfg int ;};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_gbffg PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_afac :=_gbffg ._cafcc .Reference (ctx ,ev );switch _afac .Type {case ReferenceTypeSheet :if _ccfde (_afac ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_afac .Value ));};_dabdb :=_gbffg .horizontalRangeReference (_afac .Value );if _defb ,_badbc :=ev .GetFromCache (_dabdb );_badbc {return _defb ;};_edcbc :=ctx .Sheet (_afac .Value );_fgggg ,_ccgb :=_bcbac (_edcbc ,_gbffg ._fafa ,_gbffg ._abdc );_geee :=_gfdb (_edcbc ,ev ,_fgggg ,_ccgb );ev .SetCache (_dabdb ,_geee );return _geee ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afac .Type ));};};func init (){_adg ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ccea :=[]float64 {};for _ ,_ecbdf :=range args {switch _ecbdf .Type {case ResultTypeString :_abce :=_ecbdf .AsNumber ();if _abce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ccea =append (_ccea ,_abce .ValueNumber );case ResultTypeList ,ResultTypeArray :_bffge :=GCD (_ecbdf .ListValues ());if _bffge .Type !=ResultTypeNumber {return _bffge ;};_ccea =append (_ccea ,_bffge .ValueNumber );case ResultTypeNumber :_ccea =append (_ccea ,_ecbdf .ValueNumber );case ResultTypeError :return _ecbdf ;default:return MakeErrorResult (_g .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecbdf .Type ));};};if _ccea [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ccea )==1{return MakeNumberResult (_ccea [0]);};_fegc :=_ccea [0];for _baea :=1;_baea < len (_ccea );_baea ++{if _ccea [_baea ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fegc =_fefa (_fegc ,_ccea [_baea ]);};return MakeNumberResult (_fegc );};var _ccggg =map[string ]Function {};

// Eval evaluates and returns a number.
func (_ddbe Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_ddbe ._eged )};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bged ,_dfce ,_eedd :=_ebfba (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _eedd .Type ==ResultTypeError {return _eedd ;};if _dfce < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bged ==0{return MakeNumberResult (0);};_cdgb :=_bged < 0;if _cdgb {_bged =-_bged ;};_eeaf :=args [0].Value ();_ddff :=_ca .Split (_eeaf ,"\u002e");_abec :=float64 (int (_bged ));_beddb :=_ddff [1];_efge :=len (_beddb );_abecc :=int (_ge .Log10 (_dfce ))+1;_bef :=float64 (_abecc -_efge );_edgf ,_aaag :=_dc .ParseFloat (_beddb ,64);if _aaag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_edgf *=_ge .Pow (10,_bef );_efdd :=_abec +_edgf /_dfce ;if _cdgb {_efdd =-_efdd ;};return MakeNumberResult (_efdd );};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_bf Context ,formula string )Result ;SetCache (_afb string ,_ae Result );GetFromCache (_fgg string )(Result ,bool );LastEvalIsRef ()bool ;};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efef :=args [0];if _efef .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbcc :=len (_efef .ValueArray );for _ ,_facef :=range _efef .ValueArray {if len (_facef )!=_dbcc {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_gcef (_efef .ValueArray ));};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdgc :=args [0].AsNumber ();if _bdgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deagf :=_ge .Signbit (_bdgc .ValueNumber );_cfbg ,_dgacg :=_ge .Modf (_bdgc .ValueNumber /2);_bbbf :=_cfbg *2;if _dgacg !=0{if !_deagf {_bbbf +=2;}else {_bbbf -=2;};};return MakeNumberResult (_bbbf );};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efdg :=args [0].AsNumber ();if _efdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aeee :=args [1].AsNumber ();if _aeee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfaff :=int (_aeee .ValueNumber );if _bfaff < 0||_bfaff > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_aaad :=0;if len (args )> 2{_feeg :=args [2].AsNumber ();if _feeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aaad =int (_feeg .ValueNumber );};_dccc :=_dc .FormatInt (int64 (_efdg .ValueNumber ),_bfaff );if len (_dccc )< _aaad {_dccc =_ca .Repeat ("\u0030",_aaad -len (_dccc ))+_dccc ;};return MakeStringResult (_dccc );};func _cec (_baaf ,_gfbd ,_adcb ,_gcb ,_faea float64 ,_ecfe int )float64 {_acacf :=_adae (_baaf ,_adcb ,_gcb ,_faea ,_ecfe );var _aebfb float64 ;if _gfbd ==1{if _ecfe ==1{_aebfb =0;}else {_aebfb =-_gcb ;};}else {if _ecfe ==1{_aebfb =_aec (_baaf ,_gfbd -2,_acacf ,_gcb ,1)-_acacf ;}else {_aebfb =_aec (_baaf ,_gfbd -1,_acacf ,_gcb ,0);};};return _aebfb *_baaf ;};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eecc :=args [0].AsNumber ();if _eecc .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccad :=float64 (1);if _eecc .ValueNumber < 0{_ccad =-1;};if len (args )> 1{_ccde :=args [1].AsNumber ();if _ccde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_ccad =_ccde .ValueNumber ;};_gaae :=float64 (1);if len (args )> 2{_ggfe :=args [2].AsNumber ();if _ggfe .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gaae =_ggfe .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ge .Floor (_eecc .ValueNumber ));};_dggb :=_eecc .ValueNumber ;_dggb ,_aefb :=_ge .Modf (_dggb /_ccad );if _aefb !=0&&_eecc .ValueNumber < 0&&_gaae > 0{_dggb ++;};return MakeNumberResult (_dggb *_ccad );};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ebb :=args [0];switch _ebb .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_cef :=_fdbf (_ebb .ValueNumber );return MakeNumberResult (float64 (_cef .Day ()));case ResultTypeString :_eegf :=_ca .ToLower (_ebb .ValueString );if !_acee (_eegf ){_ ,_ ,_ ,_ ,_cdc ,_dbb :=_dbba (_eegf );if _dbb .Type ==ResultTypeError {_dbb .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _dbb ;};if _cdc {return MakeNumberResult (0);};};_ ,_ ,_gff ,_ ,_dgg :=_ceea (_eegf );if _dgg .Type ==ResultTypeError {return _dgg ;};return MakeNumberResult (float64 (_gff ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_adbb :=args [0];if _adbb .Type ==ResultTypeError {return _adbb ;};if _adbb .Type !=ResultTypeString &&_adbb .Type !=ResultTypeNumber &&_adbb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ffggc :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_daadb :=int (args [1].ValueNumber );if _daadb < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_eface :=int (args [2].ValueNumber );if _eface < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_egecd :=len (_ffggc );if _daadb > _egecd {return MakeStringResult ("");};_daadb --;_gdcff :=_daadb +_eface ;if _gdcff > _egecd {return MakeStringResult (_ffggc [_daadb :]);}else {return MakeStringResult (_ffggc [_daadb :_gdcff ]);};};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_baccb :=len (args );if _baccb < 2||_baccb > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbfe :=args [0];if _bbfe .Type !=ResultTypeArray &&_bbfe .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_feca :=args [1].AsNumber ();if _feca .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eaca :=int (_feca .ValueNumber )-1;_gdcge :=-1;if _baccb ==3&&args [2].Type !=ResultTypeEmpty {_cebce :=args [2].AsNumber ();if _cebce .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gdcge =int (_cebce .ValueNumber )-1;};if _eaca ==-1&&_gdcge ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _bgeaa []Result ;if _bbfe .Type ==ResultTypeArray {_bcee :=_bbfe .ValueArray ;if _eaca < -1||_eaca >=len (_bcee ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _eaca ==-1{if _gdcge >=len (_bcee [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_aeeb :=[][]Result {};for _ ,_bagd :=range _bcee {_aggd :=_bagd [_gdcge ];if _aggd .Type ==ResultTypeEmpty {_aggd =MakeNumberResult (0);};_aeeb =append (_aeeb ,[]Result {_aggd });};return MakeArrayResult (_aeeb );};_bgeaa =_bcee [_eaca ];}else {_cbbc :=_bbfe .ValueList ;if _eaca < -1||_eaca >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _eaca ==-1{if _gdcge >=len (_cbbc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_dgdg :=_cbbc [_gdcge ];if _dgdg .Type ==ResultTypeEmpty {_dgdg =MakeNumberResult (0);};return _dgdg ;};_bgeaa =_cbbc ;};if _gdcge < -1||_gdcge > len (_bgeaa ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _gdcge ==-1{_fcee :=[]Result {};for _ ,_fcca :=range _bgeaa {if _fcca .Type ==ResultTypeEmpty {_fcee =append (_fcee ,MakeNumberResult (0));}else {_fcee =append (_fcee ,_fcca );};};return MakeArrayResult ([][]Result {_fcee });};_gbbc :=_bgeaa [_gdcge ];if _gbbc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _gbbc ;};var _agbac =[...]int {1};func (_bgba *noCache )GetFromCache (key string )(Result ,bool ){return _eec ,false };const _ebbg =86400000000000;const _gbcef =57359;

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcdba :=args [0];if _bcdba .Type ==ResultTypeNumber {return _bcdba ;};if _bcdba .Type ==ResultTypeString {_ddad ,_deggd :=_dc .ParseFloat (_bcdba .Value (),64);if _deggd ==nil {return MakeNumberResult (_ddad );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};var _fgbf =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgaa :=args [0].AsNumber ();if _dgaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfgbe :=int (_dgaa .ValueNumber );if _gfgbe < 0||_gfgbe > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_g .Sprintf ("\u0025\u0063",_gfgbe ));};var _faeff =[...]uint8 {0,20,37,60,78,96};func _eeff (_acd ,_aef ,_bcc int )float64 {return float64 (_gcfd (_acd ,_dfc .Month (_aef ),_bcc )/86400)+_aeg ;};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_fe :lhs ,_da :rhs ,_de :op };};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};var _afbf =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _acag (_aggca string ,_abggc _dfc .Time )(_dfc .Time ,error ){_afcd ,_ ,_add :=_a .ParseFloat (_aggca ,10,128,_a .ToNearestEven );if _add !=nil {return _dfc .Time {},_add ;};_cbbfa :=new (_a .Float );_cbbfa .SetUint64 (uint64 (24*_dfc .Hour ));_afcd .Mul (_afcd ,_cbbfa );_cbbca ,_ :=_afcd .Uint64 ();_abee :=_abggc .Add (_dfc .Duration (_cbbca ));return _fgbcc (_abee ),nil ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_dfea :=_f .Buffer {};for _ ,_caaba :=range args {switch _caaba .Type {case ResultTypeString :_dfea .WriteString (_caaba .ValueString );case ResultTypeNumber :var _eafg string ;if _caaba .IsBoolean {if _caaba .ValueNumber ==0{_eafg ="\u0046\u0041\u004cS\u0045";}else {_eafg ="\u0054\u0052\u0055\u0045";};}else {_eafg =_caaba .AsString ().ValueString ;};_dfea .WriteString (_eafg );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_dfea .String ());};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_gcfb :=len (args );if _gcfb !=4&&_gcfb !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eede ,_eeef ,_aggc :=_adgbd (args [0],args [1],"\u0044\u0049\u0053\u0043");if _aggc .Type ==ResultTypeError {return _aggc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgab :=args [2].ValueNumber ;if _dgab <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afdb :=args [3].ValueNumber ;if _afdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aea :=0;if _gcfb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aea =int (args [4].ValueNumber );if !_aba (_aea ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_dgfb ,_aggc :=_adgb (_eede ,_eeef ,_aea );if _aggc .Type ==ResultTypeError {return _aggc ;};return MakeNumberResult ((_afdb -_dgab )/_afdb /_dgfb );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fgbd :=_dfc .Now ();_ ,_agg :=_fgbd .Zone ();_cbec :=_aeg +float64 (_fgbd .Unix ()+int64 (_agg ))/86400;return MakeNumberResult (_cbec );};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_fadfc chan *node ;_ccfea _ee .Mutex ;_acde []chan *node ;_bagg []*node ;};func _aaga (_ebacg []Result )(float64 ,float64 ,Result ){_gecg :=0.0;_bffd :=1.0;for _ ,_cfbfe :=range _ebacg {switch _cfbfe .Type {case ResultTypeNumber :_gecg +=_cfbfe .ValueNumber ;_bffd *=_fdab (_cfbfe .ValueNumber );case ResultTypeList ,ResultTypeArray :_fbgd ,_begc ,_fbfb :=_aaga (_cfbfe .ListValues ());_gecg +=_fbgd ;_bffd *=_fdab (_begc );if _fbfb .Type ==ResultTypeError {return 0,0,_fbfb ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_cfbfe ;};};return _gecg ,_bffd ,_eec ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_gfbb PrefixVerticalRange )Update (q *_ed .UpdateQuery )Expression {if q .UpdateType ==_ed .UpdateActionRemoveColumn {_efaaf :=_gfbb ;_bdfbd :=_gfbb ._gagce .String ();if _bdfbd ==q .SheetToUpdate {_gdfe :=q .ColumnIdx ;_efaaf ._ggafd =_eaa (_gfbb ._ggafd ,_gdfe );_efaaf ._cbffg =_eaa (_gfbb ._cbffg ,_gdfe );};return _efaaf ;};return _gfbb ;};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_ge .Pi );};const _gaegbg ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_begga ,_fcbc :=_eaec (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _fcbc .Type ==ResultTypeError {return _fcbc ;};_deec :=_fdbf (_begga ._bddab );_cdag :=_fdbf (_begga ._dgfa );_cfg :=_begga ._fcaf ;_bedc :=_begga ._gaaf ;_bbda :=_acgg (_deec ,_cdag ,_cfg ,_bedc );_adca ,_bafb ,_eefff :=_bbda .Date ();return MakeNumberResult (_eeff (_adca ,int (_bafb ),_eefff ));};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_edfcc Expression ;_fdcd Expression ;};func _bcbac (_fgadg Context ,_bgdgd ,_cdcb int )(string ,string ){_gcedc :="\u0041"+_dc .Itoa (_bgdgd );_ecde :=_fgadg .LastColumn (_bgdgd ,_cdcb );_efcfc :=_ecde +_dc .Itoa (_cdcb );return _gcedc ,_efcfc ;};func (_gbf *defEval )checkLastEvalIsRef (_fae Context ,_cga Expression ){switch _cga .(type ){case FunctionCall :switch _cga .(FunctionCall )._bgae {case "\u0049\u0053\u0052E\u0046":for _ ,_ebfd :=range _cga .(FunctionCall )._cebg {switch _ebfd .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_ead :=_ebfd .Eval (_fae ,_gbf );_gbf ._cgb =!(_ead .Type ==ResultTypeError &&_ead .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_gbf ._cgb =false ;};};};};};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _cgbfa (args ,true )};func _acgg (_ddgd ,_bdfg _dfc .Time ,_cbdf ,_agff int )_dfc .Time {_gagf :=_bdfg ;_gdcg :=_ddgd .Year ()-_bdfg .Year ();_gagf =_gagf .AddDate (_gdcg ,0,0);if _ddgd .After (_gagf ){_gagf =_gagf .AddDate (1,0,0);};_fabb :=-12/_cbdf ;for _gagf .After (_ddgd ){_gagf =_gagf .AddDate (0,_fabb ,0);};return _gagf ;};func _gcef (_efdb [][]Result )float64 {if len (_efdb )==2{_fafb :=_efdb [0][0].AsNumber ();_dabe :=_efdb [0][1].AsNumber ();_edbf :=_efdb [1][0].AsNumber ();_bedaeb :=_efdb [1][1].AsNumber ();if _fafb .Type !=ResultTypeNumber ||_dabe .Type !=ResultTypeNumber ||_edbf .Type !=ResultTypeNumber ||_bedaeb .Type !=ResultTypeNumber {return _ge .NaN ();};return _fafb .ValueNumber *_bedaeb .ValueNumber -_edbf .ValueNumber *_dabe .ValueNumber ;};_ddba :=float64 (0);_decac :=float64 (1);for _gbdb :=range _efdb {_ddba +=_decac *_efdb [0][_gbdb ].ValueNumber *_gcef (_gcda (_efdb ,_gbdb ));_decac *=-1;};return _ddba ;};

// SetLocked does nothing for the invalid reference context.
func (_babag *ivr )SetLocked (cellRef string ,locked bool ){};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gegdb :=int (args [0].ValueNumber );return MakeBoolResult (_gegdb ==_gegdb /2*2);};var _dcde =[...]int {-1,1,1,-1,-2,0};func _gdcfg (){_fccgf =_ec .MustCompile ("\u005e\u0030\u002b\u0024");_bbce =_ec .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_geac =_ec .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_eccca =_ec .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_gdadd =_ec .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_bedag =_ec .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_aaf =_ec .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_bedae =_ec .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_dgacb =_ec .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_fbef =_ec .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_geae =_ec .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_gbgfc =_ec .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_cadd +_cadd +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_cadd +_cadd +"\u0029\u002b\u0059+\u0024");_abgg =_ec .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_cadd +_cadd +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_cadd +_cadd +"\u0029\u002b\u0059+\u0024");_dbcd =_ec .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_bgfd =_ec .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};type tokenType int ;

// String returns a string representation of FunctionCall expression.
func (_aeda FunctionCall )String ()string {_dafg :=_f .Buffer {};_dafg .WriteString (_aeda ._bgae );_dafg .WriteString ("\u0028");_fadga :=len (_aeda ._cebg )-1;for _eaceg ,_ggccg :=range _aeda ._cebg {_dafg .WriteString (_ggccg .String ());if _eaceg !=_fadga {_dafg .WriteString ("\u002c");};};_dafg .WriteString ("\u0029");return _dafg .String ();};const _bfaag =57356;

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _cgbfa (args ,false )};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_feda :=args [0];switch _feda .Type {case ResultTypeError :return _feda ;case ResultTypeNumber ,ResultTypeString :return _fbbcf (args [0]);case ResultTypeList :_ffge :=_feda .ValueList ;_ggef :=[]Result {};for _ ,_badfg :=range _ffge {_egeb :=_fbbcf (_badfg );if _egeb .Type ==ResultTypeError {return _egeb ;};_ggef =append (_ggef ,_egeb );};return MakeListResult (_ggef );case ResultTypeArray :_bfdbd :=_feda .ValueArray ;_fdff :=[][]Result {};for _ ,_caee :=range _bfdbd {_ebec :=[]Result {};for _ ,_ebaad :=range _caee {_edfdd :=_fbbcf (_ebaad );if _edfdd .Type ==ResultTypeError {return _edfdd ;};_ebec =append (_ebec ,_edfdd );};_fdff =append (_fdff ,_ebec );};return MakeArrayResult (_fdff );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgbb :=0;_agbg :=false ;for _ ,_cdca :=range args {switch _cdca .Type {case ResultTypeList ,ResultTypeArray :_dcgca :=Xor (_cdca .ListValues ());if _dcgca .Type ==ResultTypeError {return _dcgca ;};if _dcgca .ValueNumber !=0{_dgbb ++;};_agbg =true ;case ResultTypeNumber :if _cdca .ValueNumber !=0{_dgbb ++;};_agbg =true ;case ResultTypeString :case ResultTypeError :return _cdca ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_agbg {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_dgbb %2!=0);};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ceeb :=args [0].AsNumber ();if _ceeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fcbfd :=10.0;if len (args )> 1{_cecf :=args [1].AsNumber ();if _cecf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_fcbfd =args [1].ValueNumber ;};if _ceeb .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _fcbfd ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_ge .Log (_ceeb .ValueNumber )/_ge .Log (_fcbfd ));};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cecb :=args [0].ValueNumber ;if _cecb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdae :=args [1].ValueNumber ;if _cdae <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbbb :=args [2].ValueNumber ;if _gbbb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_ge .Log10 (_gbbb )-_ge .Log10 (_cdae ))/_ge .Log10 (1+_cecb ));};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fccb :=args [0].AsNumber ();if _fccb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fccb .ValueNumber < 0{return MakeNumberResult (-1);}else if _fccb .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};func _fegde (_cecd ,_ecedd []float64 ,_cgfe float64 )float64 {_gfdd :=_cgfe +1;_fcce :=0.0;_abad :=len (_cecd );_deag :=_ecedd [0];for _fffe :=1;_fffe < _abad ;_fffe ++{_dgef :=(_ecedd [_fffe ]-_deag )/365;_fcce -=_dgef *_cecd [_fffe ]/_ge .Pow (_gfdd ,_dgef +1);};return _fcce ;};func (_aaaa tokenType )String ()string {return _aeae (int (_aaaa ))};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_bfed :=len (args );if _bfed !=4&&_bfed !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gedd ,_fefe ,_cfga :=_adgbd (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _cfga .Type ==ResultTypeError {return _cfga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dged :=args [2].ValueNumber ;if _dged <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dfcb :=args [3].ValueNumber ;if _dfcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_cafad :=0;if _bfed ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cafad =int (args [4].ValueNumber );if !_aba (_cafad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_gffg ,_cfga :=_adgb (_gedd ,_fefe ,_cafad );if _cfga .Type ==ResultTypeError {return _cfga ;};return MakeNumberResult ((_dfcb -_dged )/_dged /_gffg );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgeff :=args [0].AsNumber ();if _bgeff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgfc :=float64 (0);if len (args )> 1{_bbca :=args [1].AsNumber ();if _bbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgfc =_bbca .ValueNumber ;};_cgbf :=_bgeff .ValueNumber ;_dbfa :=1.0;if _fgfc >=0{_dbfa =_ge .Pow (1/10.0,_fgfc );}else {return MakeNumberResult (0);};_cgbf ,_dbbe :=_ge .Modf (_cgbf /_dbfa );_bfga :=0.99999;if _dbbe > _bfga {_cgbf ++;}else if _dbbe < -_bfga {_cgbf --;};_ =_dbbe ;return MakeNumberResult (_cgbf *_dbfa );};func _gfee (_faa ,_deac float64 ,_fcgg ,_dcga int )float64 {_bgce :=_fdbf (_faa );_afg :=_fdbf (_deac );_fadb :=_acgg (_bgce ,_afg ,_fcgg ,_dcga );return _edfc (_fadb ,_bgce ,_dcga );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};func (_eeafd *Lexer )nextRaw ()*node {for len (_eeafd ._acde )!=0{_gffbg :=<-_eeafd ._acde [len (_eeafd ._acde )-1];if _gffbg !=nil {return _gffbg ;};_eeafd ._acde =_eeafd ._acde [0:len (_eeafd ._acde )-1];};return <-_eeafd ._fadfc ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func (_gabag *ivr )SetOffset (col ,row uint32 ){};func _bfdbe (_bddg []Result )(bool ,Result ){for _ ,_efdgg :=range _bddg {if _efdgg .Type ==ResultTypeError {return true ,_efdgg ;};};return false ,MakeEmptyResult ();};func _cbfcb (_dbgec ,_bcbbb ,_bgbee Reference )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dbgec .Value ,_bcbbb .Value ,_bgbee .Value );};func _fbbcf (_befe Result )Result {if _befe .Type ==ResultTypeEmpty {return _befe ;};_facc :=_befe .AsString ();if _facc .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _befe .IsBoolean {if _facc .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _facc .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_ca .ToLower (_facc .ValueString ));};};

// GetLocked returns FALSE for the invalid reference context.
func (_bdbed *ivr )GetLocked (cellRef string )bool {return false };

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_bbdf ConstArrayExpr )Update (q *_ed .UpdateQuery )Expression {return _bbdf };func _fbfag (_ffaeb ,_ccge []string )[]string {for _ ,_eegga :=range _ccge {_ffaeb =append (_ffaeb ,_eegga );};return _ffaeb ;};func _bgdd (_eeac []Result )[]rangeIndex {_fgcg :=[]rangeIndex {};_bfaffg :=len (_eeac );for _ecfae :=0;_ecfae < _bfaffg -1;_ecfae +=2{_gfabd :=[]rangeIndex {};_dabc :=_bfff (_eeac [_ecfae ]);_ccgf :=_faebe (_eeac [_ecfae +1]);if _ecfae ==0{for _fgeb ,_fbae :=range _dabc {for _dgfdc ,_gdbe :=range _fbae {if _dggab (_gdbe ,_ccgf ){_gfabd =append (_gfabd ,rangeIndex {_fgeb ,_dgfdc });};};};}else {for _ ,_bgfe :=range _fgcg {_bdcac :=_dabc [_bgfe ._gfgb ][_bgfe ._fdeb ];if _dggab (_bdcac ,_ccgf ){_gfabd =append (_gfabd ,_bgfe );};};};if len (_gfabd )==0{return []rangeIndex {};};_fgcg =_gfabd [:];};return _fgcg ;};

// Update returns the same object as updating sheet references does not affect String.
func (_facgg String )Update (q *_ed .UpdateQuery )Expression {return _facgg };

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _c .Reader )Expression {_gfbe :=&plex {_agcbf :LexReader (r )};_eadg (_gfbe );if _gfbe ._cecg !=""{return nil ;};return _gfbe ._cecc ;};var _dbcaf =[...]string {};

// Error is called in the case of parsing error and saves an error to a plex.
func (_fbgg *plex )Error (s string ){_edd .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_fbgg ._cecg =s ;};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_bgeb :=args [0].ValueNumber ;if _bgeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_fecea :=float64 (int (args [1].ValueNumber ));if _fecea < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_ge .Pow (_bgeb +1,1/_fecea )-1)*_fecea );};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_addd :=args [0].AsString ();if _addd .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_efdag :=_f .Buffer {};_gbaba :=false ;for _ ,_abcac :=range _addd .ValueString {if !_gbaba &&_gb .IsLetter (_abcac ){_efdag .WriteRune (_gb .ToUpper (_abcac ));}else {_efdag .WriteRune (_gb .ToLower (_abcac ));};_gbaba =_gb .IsLetter (_abcac );};return MakeStringResult (_efdag .String ());};const _cdcg =57351;

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_efbe :=len (args );if _efbe < 4||_efbe > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecce :=args [1].ValueNumber ;if _ecce <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abg :=args [2].ValueNumber ;if _abg < _ecce {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_beeg :=args [3].ValueNumber ;_ggdc :=0.0;if _efbe >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ggdc =args [4].ValueNumber ;};_ddaef :=0;if _efbe ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ddaef =int (args [5].ValueNumber );if _ddaef !=0{_ddaef =1;};};return MakeNumberResult (_adae (_afdc ,_abg ,_beeg ,_ggdc ,_ddaef )-_cec (_afdc ,_ecce ,_abg ,_beeg ,_ggdc ,_ddaef ));};type amorArgs struct{_ecbd float64 ;_ecegc float64 ;_gddd float64 ;_gdaf float64 ;_cfbd int ;_bedd float64 ;_cbeg int ;};func (_dea *evCache )SetCache (key string ,value Result ){_dea ._cdf .Lock ();_dea ._dege [key ]=value ;_dea ._cdf .Unlock ();};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_aafb PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_gbbd :=_aafb ._ffege .Reference (ctx ,ev );_dbfag :=_aafb ._gfeg .Reference (ctx ,ev );_bcfba :=_aafb ._gagca .Reference (ctx ,ev );switch _gbbd .Type {case ReferenceTypeSheet :if _ccfde (_gbbd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gbbd .Value ));};_gcbgg :=_cbfcb (_gbbd ,_dbfag ,_bcfba );if _dbfag .Type ==ReferenceTypeCell &&_bcfba .Type ==ReferenceTypeCell {if _ggcce ,_ccafec :=ev .GetFromCache (_gcbgg );_ccafec {return _ggcce ;}else {_ffaf :=_gfdb (ctx .Sheet (_gbbd .Value ),ev ,_dbfag .Value ,_bcfba .Value );ev .SetCache (_gcbgg ,_ffaf );return _ffaf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gcbgg );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbbd .Type ));};};const _abeca =57366;

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_dadf PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_bffgg :=_dadf ._gagce .Reference (ctx ,ev );switch _bffgg .Type {case ReferenceTypeSheet :if _ccfde (_bffgg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bffgg .Value ));};_caadd :=_dadf .verticalRangeReference (_bffgg .Value );if _debbd ,_agdba :=ev .GetFromCache (_caadd );_agdba {return _debbd ;};_bcgba :=ctx .Sheet (_bffgg .Value );_gbde ,_dfggf :=_aecce (_bcgba ,_dadf ._ggafd ,_dadf ._cbffg );_fddeb :=_gfdb (_bcgba ,ev ,_gbde ,_dfggf );ev .SetCache (_caadd ,_fddeb );return _fddeb ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bffgg .Type ));};};const _agf ="\u005e\u0028\u0028"+_gbg +"\u007c"+_cfaf +"\u007c"+_bdda +"\u007c"+_def +"\u0029\u0020\u0029\u003f";const (_efag cmpResult =0;_cgdc cmpResult =-1;_bdegb cmpResult =1;_cgggc cmpResult =2;);func _dfcg (_ffefe int )string {if _ffefe >=0&&_ffefe < len (_dbcaf ){if _dbcaf [_ffefe ]!=""{return _dbcaf [_ffefe ];};};return _g .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_ffefe );};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_efeeb ,_fedaf :=_cdfe ("\u0046\u0049\u004e\u0044",args );if _fedaf .Type !=ResultTypeEmpty {return _fedaf ;};_ddea :=_ca .ToLower (_efeeb ._gbfbd );_feae :=_ca .ToLower (_efeeb ._egaf );if _ddea ==""{return MakeNumberResult (1.0);};_begcf :=_efeeb ._ccab -1;_dcgbbd :=1;_defcd :=0;for _agadd :=range _feae {if _agadd !=0{_beege :=1;if _agadd -_defcd > 1{_beege =2;};_dcgbbd +=_beege ;};if _dcgbbd > _begcf {_egafa :=_gba .Index (_ddea ,_feae [_agadd :]);if _egafa ==0{return MakeNumberResult (float64 (_dcgbbd ));};};_defcd =_agadd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _eafe (_cgcga Result ,_bcfa *criteriaParsed )bool {_agccd :=_ca .ToLower (_cgcga .ValueString );_ccda :=_bcfa ._aceeg ._effc ;_bcbae :=_bcfa ._aceeg ._cega ;if _ccda ==_acbgf {return _agccd ==_bcbae ||_gba .Match (_bcbae ,_agccd );};if _cgcga .Type !=ResultTypeEmpty {if _agccd ==_bcfa ._beegg ||_gba .Match (_bcfa ._beegg ,_agccd ){return true ;};if _ ,_adffb :=_dc .ParseFloat (_bcbae ,64);_adffb ==nil {return false ;};switch _ccda {case _aeacf :return _agccd <=_bcbae ;case _ecad :return _agccd >=_bcbae ;case _dbefc :return _agccd < _bcbae ;case _beeb :return _agccd > _bcbae ;};};return false ;};type parsedSearchObject struct{_gbfbd string ;_egaf string ;_ccab int ;};const _gcdag =57375;

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_fcg :=&defEval {};_fcg .evCache =_ecg ();return _fcg };

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eagf :=args [0].AsString ();if _eagf .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_eagf .ValueString )));};

// GetFilename returns an empty string for the invalid reference context.
func (_gegea *ivr )GetFilename ()string {return ""};func _bafc (){_afgc =_ec .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_dbcag =_ec .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_eacg =_ec .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_dgfac =_ec .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_dbge =_ec .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_fageb =_ec .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func _ffae (_agebc ,_bebb ,_bfc ,_gbgb ,_aedc float64 )float64 {var _gbgg float64 ;_ecgae :=_aedc /_bfc ;if _ecgae >=1{_ecgae =1;if _gbgb ==1{_gbgg =_agebc ;}else {_gbgg =0;};}else {_gbgg =_agebc *_ge .Pow (1-_ecgae ,_gbgb -1);};_aegfd :=_agebc *_ge .Pow (1-_ecgae ,_gbgb );var _fbbc float64 ;if _aegfd < _bebb {_fbbc =_gbgg -_bebb ;}else {_fbbc =_gbgg -_aegfd ;};if _fbbc < 0{_fbbc =0;};return _fbbc ;};func (_dabb *ivr )Sheet (name string )Context {return _dabb };

// String returns a string representation for Bool.
func (_dcd Bool )String ()string {if _dcd ._dede {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_gfaf (args ,_dgfdd ))};func (_egceg HorizontalRange )horizontalRangeReference ()string {return _g .Sprintf ("\u0025\u0064\u003a%\u0064",_egceg ._dedaf ,_egceg ._dgfga );};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_fgecd PrefixRangeExpr )Update (q *_ed .UpdateQuery )Expression {_daacf :=_fgecd ;_ecdb :=_fgecd ._ffege .String ();if _ecdb ==q .SheetToUpdate {_eega :=*q ;_eega .UpdateCurrentSheet =true ;_daacf ._gfeg =_fgecd ._gfeg .Update (&_eega );_daacf ._gagca =_fgecd ._gagca .Update (&_eega );};return _daacf ;};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_gedf :=len (args );if _gedf < 5||_gedf > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbab :=args [0].ValueNumber ;if _bbab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beegd :=args [1].ValueNumber ;if _beegd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdbf :=args [2].ValueNumber ;if _cdbf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cdbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dddb :=args [3].ValueNumber ;if _dddb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eccd :=args [4].ValueNumber ;if _dddb > _eccd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _eccd > _cdbf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_fffcc :=2.0;if _gedf > 5{if args [5].Type ==ResultTypeEmpty {_fffcc =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fffcc =args [5].ValueNumber ;if _fffcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_bdee :=false ;if _gedf > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bdee =args [6].ValueNumber !=0;};_gbfb :=0.0;_fdcf :=_ge .Floor (_dddb );_ddaefg :=_ge .Ceil (_eccd );if _bdee {for _baef :=_fdcf +1;_baef <=_ddaefg ;_baef ++{_aabfe :=_ffae (_bbab ,_beegd ,_cdbf ,_baef ,_fffcc );if _baef ==_fdcf +1{_aabfe *=_ge .Min (_eccd ,_fdcf +1)-_dddb ;}else if _baef ==_ddaefg {_aabfe *=_eccd +1-_ddaefg ;};_gbfb +=_aabfe ;};}else {_affd :=_cdbf ;var _aefg float64 ;if !_bbec (_dddb ,_ge .Floor (_dddb )){if _fffcc ==1{_aabd :=_cdbf /2;if _dddb > _aabd ||_bbec (_dddb ,_aabd ){_aefg =_dddb -_aabd ;_dddb =_aabd ;_eccd -=_aefg ;_affd ++;};};};if _fffcc !=0{_bbab -=_edcd (_bbab ,_beegd ,_cdbf ,_affd ,_dddb ,_fffcc );};_gbfb =_edcd (_bbab ,_beegd ,_cdbf ,_cdbf -_dddb ,_eccd -_dddb ,_fffcc );};return MakeNumberResult (_gbfb );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fffc ,_ggdf ,_gaafb :=_adgbd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _gaafb .Type ==ResultTypeError {return _gaafb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfa :=_ggdf -_fffc ;if _egfa > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_cfca :=args [2].ValueNumber ;if _cfca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_cfca *_egfa /360));};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_fcbcb :=MakeNumberResult (0);for _ ,_cgfc :=range args {_cgfc =_cgfc .AsNumber ();switch _cgfc .Type {case ResultTypeNumber :_fcbcb .ValueNumber +=_cgfc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_faacg :=Sum (_cgfc .ListValues ());if _faacg .Type !=ResultTypeNumber {return _faacg ;};_fcbcb .ValueNumber +=_faacg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cgfc ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cgfc .Type ));};};return _fcbcb ;};func _ddcg (_egab ,_gcaeb Result ,_bcca string )(*xargs ,Result ){if _egab .Type !=ResultTypeList &&_egab .Type !=ResultTypeArray {return nil ,MakeErrorResult (_bcca +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bgeda :=_bfff (_egab );_dfba :=[]float64 {};for _ ,_fgaf :=range _bgeda {for _ ,_gfga :=range _fgaf {if _gfga .Type ==ResultTypeNumber &&!_gfga .IsBoolean {_dfba =append (_dfba ,_gfga .ValueNumber );}else {return nil ,MakeErrorResult (_bcca +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_bbdd :=len (_dfba );if len (_dfba )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _gcaeb .Type !=ResultTypeList &&_gcaeb .Type !=ResultTypeArray {return nil ,MakeErrorResult (_bcca +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_gbef :=_bfff (_gcaeb );_abge :=[]float64 {};_bgece :=0.0;for _ ,_fbab :=range _gbef {for _ ,_dfeg :=range _fbab {if _dfeg .Type ==ResultTypeNumber &&!_dfeg .IsBoolean {_bdgf :=float64 (int (_dfeg .ValueNumber ));if _bdgf < _bgece {return nil ,MakeErrorResultType (ErrorTypeNum ,_bcca +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_abge =append (_abge ,_bdgf );_bgece =_bdgf ;}else {return nil ,MakeErrorResult (_bcca +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_abge )!=_bbdd {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_dfba ,_abge },MakeEmptyResult ();};type criteriaParsed struct{_fccfg bool ;_cbaba float64 ;_beegg string ;_aceeg *criteriaRegex ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acbdce :=true ;for _ ,_egbd :=range args {_egbd =_egbd .AsNumber ();switch _egbd .Type {case ResultTypeList ,ResultTypeArray :_fged :=And (_egbd .ListValues ());if _fged .Type ==ResultTypeError {return _fged ;};if _fged .ValueNumber ==0{_acbdce =false ;};case ResultTypeNumber :if _egbd .ValueNumber ==0{_acbdce =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _egbd ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_acbdce );};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbce :=args [0].AsString ();if _dbce .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_dbce .ValueString ,ev );};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_abab ,_eceb ,_beaag :=_adgbd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _beaag .Type ==ResultTypeError {return _beaag ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgce :=_eceb -_abab ;if _cgce > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dedc :=args [2].ValueNumber ;if _dedc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fecf :=(100-_dedc )/_dedc ;_cddcg :=360/_cgce ;return MakeNumberResult (_fecf *_cddcg );};

// Reference returns a string reference value to a named range.
func (_cggdb NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_cggdb ._fbcb };};func _gbccb (_eded []Result ,_ebbbd bool )(float64 ,float64 ){_aedgd :=0.0;_gafga :=0.0;for _ ,_bccd :=range _eded {switch _bccd .Type {case ResultTypeNumber :if _ebbbd ||!_bccd .IsBoolean {_gafga +=_bccd .ValueNumber ;_aedgd ++;};case ResultTypeList ,ResultTypeArray :_baac ,_ffgd :=_gbccb (_bccd .ListValues (),_ebbbd );_gafga +=_baac ;_aedgd +=_ffgd ;case ResultTypeString :if _ebbbd {_aedgd ++;};case ResultTypeEmpty :};};return _gafga ,_aedgd ;};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// Update updates the horizontal range references after removing a row/column.
func (_eadf HorizontalRange )Update (q *_ed .UpdateQuery )Expression {return _eadf };func _bccg (_dcdde string )string {_dcdde =_ca .Replace (_dcdde ,"\u000a","\u005c\u006e",-1);_dcdde =_ca .Replace (_dcdde ,"\u000d","\u005c\u0072",-1);_dcdde =_ca .Replace (_dcdde ,"\u0009","\u005c\u0074",-1);return _dcdde ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_cfdb :=args [0].AsNumber ();_ddaed :=args [1].AsNumber ();if _cfdb .Type ==ResultTypeNumber &&_ddaed .Type ==ResultTypeNumber {_dddac :=_ge .Atan2 (_ddaed .ValueNumber ,_cfdb .ValueNumber );if _dddac !=_dddac {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_dddac );};for _ ,_abgge :=range []ResultType {_cfdb .Type ,_ddaed .Type }{switch _abgge {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _cfdb ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abgge ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};var _fgce =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;const _cgff int =30;func (_ded BinOpType )String ()string {if _ded >=BinOpType (len (_cbc )-1){return _g .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ded );};return _geb [_cbc [_ded ]:_cbc [_ded +1]];};func _fefa (_gcac ,_efffa float64 )float64 {_gcac =_ge .Trunc (_gcac );_efffa =_ge .Trunc (_efffa );if _gcac ==0{return _efffa ;};if _efffa ==0{return _gcac ;};for _gcac !=_efffa {if _gcac > _efffa {_gcac =_gcac -_efffa ;}else {_efffa =_efffa -_gcac ;};};return _gcac ;};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fddd :=args [0];switch _fddd .Type {case ResultTypeError :return _fddd ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_fddd .ValueNumber !=0);};if _fddd .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _ecfcb (args );case ResultTypeArray :return _bgcd (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_edbb ,_cgbe :=_eaec (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _cgbe .Type ==ResultTypeError {return _cgbe ;};return MakeNumberResult (_gfee (_edbb ._bddab ,_edbb ._dgfa ,_edbb ._fcaf ,_edbb ._gaaf ));};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};const (_dbeaa countMode =iota ;_dgfdd ;_ccbac ;);

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _gbcb (args ,false )};func _cdfe (_ebbbb string ,_ggbf []Result )(*parsedSearchObject ,Result ){_gbdbf :=len (_ggbf );if _gbdbf !=2&&_gbdbf !=3{return nil ,MakeErrorResult (_ebbbb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gddag :=_ggbf [0];if _gddag .Type ==ResultTypeError {return nil ,_gddag ;};if _gddag .Type !=ResultTypeString &&_gddag .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_cafadg :=_ggbf [1];if _cafadg .Type ==ResultTypeError {return nil ,_cafadg ;};if _cafadg .Type !=ResultTypeString &&_cafadg .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_ebbdd :=_cafadg .Value ();_bgfdb :=_gddag .Value ();_eegc :=1;if _gbdbf ==3&&_ggbf [2].Type !=ResultTypeEmpty {_fdebd :=_ggbf [2];if _fdebd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_eegc =int (_fdebd .ValueNumber );if _eegc < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _eegc > len (_ebbdd ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_bgfdb ,_ebbdd ,_eegc },_eec ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_bcbf :=len (args );if _bcbf !=4&&_bcbf !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eced :=args [0].ValueNumber ;if _eced < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfafb :=args [1].ValueNumber ;if _bfafb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aege :=args [2].ValueNumber ;if _aege <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdga :=args [3].ValueNumber ;if _bdga < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _bdga > _aege {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_gfffe :=2.0;if _bcbf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfffe =args [4].ValueNumber ;if _gfffe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_ffae (_eced ,_bfafb ,_aege ,_bdga ,_gfffe ));};func (_fcfafg *yyParserImpl )Lookahead ()int {return _fcfafg ._cagad };func (_ebcb node )String ()string {return _g .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_ebcb ._bdef ,_bccg (string (_ebcb ._gagbd )));};func _ega (_edeg ,_afeg ,_cfafc ,_dfdb ,_gadf float64 ,_fabf int )Result {_gafg ,_fcbe :=_adgb (_edeg ,_afeg ,_fabf );if _fcbe .Type ==ResultTypeError {return _fcbe ;};_eedf ,_dda :=_abb (_edeg ,_afeg ,int (_gadf ),_fabf );if _dda .Type ==ResultTypeError {return _dda ;};_daef :=0.0;_faf :=0.0;_cfafc *=100/_gadf ;_dfdb /=_gadf ;_dfdb ++;_eca :=_gafg *_gadf -_eedf ;for _dgbc :=1.0;_dgbc < _eedf ;_dgbc ++{_agd :=_dgbc +_eca ;_fdfb :=_cfafc /_ge .Pow (_dfdb ,_agd );_faf +=_fdfb ;_daef +=_agd *_fdfb ;};_ceba :=(_cfafc +100)/_ge .Pow (_dfdb ,_eedf +_eca );_faf +=_ceba ;_daef +=(_eedf +_eca )*_ceba ;_daef /=_faf ;_daef /=_gadf ;return MakeNumberResult (_daef );};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_fbcb :v }};func _faebe (_efdf Result )*criteriaParsed {_cgea :=_efdf .Type ==ResultTypeNumber ;_gbcab :=_efdf .ValueNumber ;_afdf :=_ca .ToLower (_efdf .ValueString );_fbga :=_fdedd (_afdf );return &criteriaParsed {_cgea ,_gbcab ,_afdf ,_fbga };};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_fcde :=len (args );if _fcde !=4&&_fcde !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ffb ,_gffd :=_aeb (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _gffd .Type ==ResultTypeError {return _gffd ;};_cfb ,_gffd :=_aeb (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _gffd .Type ==ResultTypeError {return _gffd ;};if _ffb >=_cfb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_defe :=args [2].ValueNumber ;if _defe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfgf :=args [3].ValueNumber ;if _gfgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edbe :=0;if _fcde ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edbe =int (args [4].ValueNumber );if !_aba (_edbe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_eeaa ,_gffd :=_adgb (_ffb ,_cfb ,_edbe );if _gffd .Type ==ResultTypeError {return _gffd ;};return MakeNumberResult (_gfgf *_defe *_eeaa );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaca :=args [0].AsString ();if _gaca .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bccad :=_f .Buffer {};for _ ,_cfbff :=range _gaca .ValueString {if _gb .IsPrint (_cfbff ){_bccad .WriteRune (_cfbff );};};return MakeStringResult (_bccad .String ());};func _afea (_gcag ,_cefag ,_gfcg int )int {if _gcag > _cefag {return 0;};if _eag (_gfcg ){return (_cefag -_gcag +1)*360;};_dgfd :=0;for _gfff :=_gcag ;_gfff <=_cefag ;_gfff ++{_eeb :=365;if _ebfa (_gfff ){_eeb =366;};_dgfd +=_eeb ;};return _dgfd ;};var _bfaef =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbea :=args [0].ValueNumber ;if _gbea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbfc :=args [1].ValueNumber ;if _cbfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgaa :=args [2].ValueNumber ;if _cfgaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_ge .Pow (_cfgaa /_cbfc ,1/_gbea )-1);};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_gab :data }};func _adg (){_gdf ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_ec .MustCompile ("\u005e"+_gbg +_dfd );_gdf ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_ec .MustCompile ("\u005e"+_cfaf +_dfd );_gdf ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_ec .MustCompile ("\u005e"+_bdda +_dfd );_gdf ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_ec .MustCompile ("\u005e"+_def +_dfd );_affb ["\u0068\u0068"]=_ec .MustCompile (_agf +_ddb +"\u0024");_affb ["\u0068\u0068\u003am\u006d"]=_ec .MustCompile (_agf +_ddg +"\u0024");_affb ["\u006d\u006d\u003as\u0073"]=_ec .MustCompile (_agf +_edad +"\u0024");_affb ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_ec .MustCompile (_agf +_eef +"\u0024");_cea =[]*_ec .Regexp {_ec .MustCompile ("\u005e"+_gbg +"\u0024"),_ec .MustCompile ("\u005e"+_cfaf +"\u0024"),_ec .MustCompile ("\u005e"+_bdda +"\u0024"),_ec .MustCompile ("\u005e"+_def +"\u0024")};_gcd =[]*_ec .Regexp {_ec .MustCompile ("\u005e"+_ddb +"\u0024"),_ec .MustCompile ("\u005e"+_ddg +"\u0024"),_ec .MustCompile ("\u005e"+_edad +"\u0024"),_ec .MustCompile ("\u005e"+_eef +"\u0024")};};func _cfag (_fbad ,_abff Result ,_becd ,_fbdb bool )cmpResult {_fbad =_fbad .AsNumber ();_abff =_abff .AsNumber ();if _fbad .Type !=_abff .Type {return _cgggc ;};if _fbad .Type ==ResultTypeNumber {if _fbad .ValueNumber ==_abff .ValueNumber {return _efag ;};if _fbad .ValueNumber < _abff .ValueNumber {return _cgdc ;};return _bdegb ;};if _fbad .Type ==ResultTypeString {_bdgaf :=_fbad .ValueString ;_cbac :=_abff .ValueString ;if !_becd {_bdgaf =_ca .ToLower (_bdgaf );_cbac =_ca .ToLower (_cbac );};if _fbdb {_gcfda :=_gba .Match (_cbac ,_bdgaf );if _gcfda {return _efag ;}else {return _bdegb ;};};return cmpResult (_ca .Compare (_bdgaf ,_cbac ));};if _fbad .Type ==ResultTypeEmpty {return _efag ;};if _fbad .Type ==ResultTypeList {if len (_fbad .ValueList )< len (_abff .ValueList ){return _cgdc ;};if len (_fbad .ValueList )> len (_abff .ValueList ){return _bdegb ;};for _egfd :=range _fbad .ValueList {_deba :=_cfag (_fbad .ValueList [_egfd ],_abff .ValueList [_egfd ],_becd ,_fbdb );if _deba !=_efag {return _deba ;};};return _efag ;};if _fbad .Type ==ResultTypeList {if len (_fbad .ValueArray )< len (_abff .ValueArray ){return _cgdc ;};if len (_fbad .ValueArray )> len (_abff .ValueArray ){return _bdegb ;};for _abac :=range _fbad .ValueArray {_cgfee :=_fbad .ValueArray [_abac ];_edadc :=_fbad .ValueArray [_abac ];if len (_cgfee )< len (_edadc ){return _cgdc ;};if len (_cgfee )> len (_edadc ){return _bdegb ;};for _dafda :=range _cgfee {_dag :=_cfag (_cgfee [_dafda ],_edadc [_dafda ],_becd ,_fbdb );if _dag !=_efag {return _dag ;};};};return _efag ;};return _cgggc ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_fdaf ,_dcbd :=_beb (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _dcbd .Type ==ResultTypeError {return _dcbd ;};_efed :=_fdaf ._gfeeb ;_bgee :=_fdaf ._gccc ;_gbdc :=_fdaf ._gdfb ;_aed :=_fdaf ._afdg ;_bdea :=_fdaf ._dfgd ;_bgea :=_fdaf ._aab ;_fgaa :=_adae (_efed ,_bgee ,_gbdc ,0,_bgea );_gafc :=0.0;if _aed ==1{if _bgea ==0{_gafc =_fgaa +_gbdc *_efed ;}else {_gafc =_fgaa ;};_aed ++;};for _edbd :=_aed ;_edbd <=_bdea ;_edbd ++{if _bgea ==1{_gafc +=_fgaa -(_aec (_efed ,_edbd -2,_fgaa ,_gbdc ,1)-_fgaa )*_efed ;}else {_gafc +=_fgaa -_aec (_efed ,_edbd -1,_fgaa ,_gbdc ,0)*_efed ;};};return MakeNumberResult (_gafc );};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};func _fga (_fde ,_eac ,_beaa int )bool {if _eac < 1||_eac > 12{return false ;};if _beaa < 1{return false ;};return _beaa <=_eea (_fde ,_eac );};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_gab [][]Expression };const _aabg int =0;

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_eabd string ,_feb Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_bbe string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_dfc .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_eeg int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_fda string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_gdg string )string ;

// GetFormat returns if cell is protected.
GetLocked (_cegf string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_edf string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_eae string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_fdb ,_cae int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_cbe string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_gfe string ,_eda bool );

// NamedRange returns a named range.
NamedRange (_dcgf string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_fca ,_acaa uint32 );};const _geb ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";const _eef ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_gfffa .Lock ();defer _gfffa .Unlock ();if _bfedg ,_cgca :=_ccggg [name ];_cgca {return _bfedg ;};return nil ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dedac :=args [0].AsNumber ();_gaece :=args [1].AsNumber ();if _dedac .Type !=ResultTypeNumber ||_gaece .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gaece .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_ge .Trunc (_dedac .ValueNumber /_gaece .ValueNumber ));};

// Update returns the same object as updating sheet references does not affect Number.
func (_afcfd Number )Update (q *_ed .UpdateQuery )Expression {return _afcfd };func _dggab (_bcbb Result ,_dgce *criteriaParsed )bool {if _bcbb .IsBoolean {return false ;};_bbaa :=_bcbb .Type ;if _dgce ._fccfg {return _bbaa ==ResultTypeNumber &&_bcbb .ValueNumber ==_dgce ._cbaba ;}else if _bbaa ==ResultTypeNumber {return _dcfcc (_bcbb .ValueNumber ,_dgce ._aceeg );};return _eafe (_bcbb ,_dgce );};const _gbfbf =57344;

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_fdcg ,_ddf :=_eaec (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _ddf .Type ==ResultTypeError {return _ddf ;};_ceff :=_fdcg ._fcaf ;_dffc :=_fdcg ._gaaf ;_cccg ,_ddf :=_abb (_fdcg ._bddab ,_fdcg ._dgfa ,_ceff ,_dffc );if _ddf .Type ==ResultTypeError {return _ddf ;};return MakeNumberResult (_cccg );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cdga (args ,_fgfac )};type criteriaRegex struct{_effc byte ;_cega string ;};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_caga :=len (args );if _caga !=2&&_caga !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acccc ,_adbg :=_ddcg (args [0],args [1],"\u0058\u0049\u0052\u0052");if _adbg .Type ==ResultTypeError {return _adbg ;};_gdcfc :=_acccc ._bacf ;_cedf :=_acccc ._dgdc ;_cbef :=0.1;if _caga ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbef =args [2].ValueNumber ;if _cbef <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _gbfe (_gdcfc ,_cedf ,_cbef );};var _dgaeg =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};var _ccdgc =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_ge .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Update updates references in the Negate after removing a row/column.
func (_ffgde Negate )Update (q *_ed .UpdateQuery )Expression {return Negate {_bedga :_ffgde ._bedga .Update (q )};};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbbed :=args [0].AsString ();if _fbbed .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecdab :=_f .Buffer {};_ffaeg :=false ;_ecade :=false ;_acbc :=0;for _ ,_cacb :=range _fbbed .ValueString {_fegcf :=_cacb ==' ';if _fegcf {if !_ffaeg {continue ;};if !_ecade {_acbc ++;_ecdab .WriteRune (_cacb );};}else {_acbc =0;_ffaeg =true ;_ecdab .WriteRune (_cacb );};_ecade =_fegcf ;};_ecdab .Truncate (_ecdab .Len ()-_acbc );return MakeStringResult (_ecdab .String ());};func init (){_gdcfg ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};const _dfbbe int =30;

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_gbgc :=len (args );if _gbgc !=4&&_gbgc !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ageb ,_bbcc ,_gbbee :=_adgbd (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _gbbee .Type ==ResultTypeError {return _gbbee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_accb :=args [2].ValueNumber ;if _accb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gffe :=args [3].ValueNumber ;if _gffe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebd :=0;if _gbgc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebd =int (args [4].ValueNumber );if !_aba (_ebd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_faaeb ,_gbbee :=_adgb (_ageb ,_bbcc ,_ebd );if _gbbee .Type ==ResultTypeError {return _gbbee ;};return MakeNumberResult (_accb /(1-_gffe *_faaeb ));};func _b (_edc Result )bool {if _edc .Type ==ResultTypeString {return _edc .ValueString =="";};return _edc .ValueNumber ==0;};const _eaag =57373;func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Eval evaluates the binary expression using the context given.
func (_cb BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_bd :=_cb ._fe .Eval (ctx ,ev );if _bd .Type ==ResultTypeError {return _bd ;};_dac :=_cb ._da .Eval (ctx ,ev );if _dac .Type ==ResultTypeError {return _dac ;};if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeArray {if !_cf (_bd .ValueArray ,_dac .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _gc (_cb ._de ,_bd .ValueArray ,_dac .ValueArray );}else if _bd .Type ==ResultTypeList {if len (_bd .ValueList )!=len (_dac .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _bc (_cb ._de ,_bd .ValueList ,_dac .ValueList );};}else if _bd .Type ==ResultTypeArray &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return _ggf (_cb ._de ,_bd .ValueArray ,_dac );}else if _bd .Type ==ResultTypeList &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return _fd (_cb ._de ,_bd .ValueList ,_dac );};switch _cb ._de {case BinOpTypePlus :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_bd .ValueNumber +_dac .ValueNumber );};};case BinOpTypeMinus :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_bd .ValueNumber -_dac .ValueNumber );};};case BinOpTypeMult :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_bd .ValueNumber *_dac .ValueNumber );};};case BinOpTypeDiv :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {if _dac .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_bd .ValueNumber /_dac .ValueNumber );};};case BinOpTypeExp :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeNumberResult (_ge .Pow (_bd .ValueNumber ,_dac .ValueNumber ));};};case BinOpTypeLT :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber < _dac .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString < _dac .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bd .Type ==ResultTypeString &&_dac .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeNumber &&_dac .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeEmpty &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_dac .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber > _dac .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString > _dac .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bd .Type ==ResultTypeString &&_dac .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeNumber &&_dac .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeEmpty &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_dac .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber ==_dac .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString ==_dac .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_bd .Type ==ResultTypeString &&_dac .Type ==ResultTypeNumber )||(_bd .Type ==ResultTypeNumber &&_dac .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _bd .Type ==ResultTypeEmpty &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return MakeBoolResult (_b (_dac ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_dac .Type ==ResultTypeEmpty {return MakeBoolResult (_b (_bd ));};case BinOpTypeNE :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber !=_dac .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString !=_dac .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_bd .Type ==ResultTypeString &&_dac .Type ==ResultTypeNumber )||(_bd .Type ==ResultTypeNumber &&_dac .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _bd .Type ==ResultTypeEmpty &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return MakeBoolResult (!_b (_dac ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_dac .Type ==ResultTypeEmpty {return MakeBoolResult (!_b (_bd ));};case BinOpTypeLEQ :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber <=_dac .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString <=_dac .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bd .Type ==ResultTypeString &&_dac .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeNumber &&_dac .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeEmpty &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return MakeBoolResult (_b (_dac ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_dac .Type ==ResultTypeEmpty {return MakeBoolResult (_b (_bd ));};case BinOpTypeGEQ :if _bd .Type ==_dac .Type {if _bd .Type ==ResultTypeNumber {return MakeBoolResult (_bd .ValueNumber >=_dac .ValueNumber );};if _bd .Type ==ResultTypeString {return MakeBoolResult (_bd .ValueString >=_dac .ValueString );};if _bd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bd .Type ==ResultTypeString &&_dac .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bd .Type ==ResultTypeNumber &&_dac .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bd .Type ==ResultTypeEmpty &&(_dac .Type ==ResultTypeNumber ||_dac .Type ==ResultTypeString ){return MakeBoolResult (_b (_dac ));}else if (_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString )&&_dac .Type ==ResultTypeEmpty {return MakeBoolResult (_b (_bd ));};case BinOpTypeConcat :return MakeStringResult (_bd .Value ()+_dac .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};var _aeg float64 =25569.0;

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fccc :=args [0].AsNumber ();_gdgf :=args [1].AsNumber ();if _fccc .Type !=ResultTypeNumber ||_gdgf .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gdbf :=_ge .Trunc (_fccc .ValueNumber );_bfgb :=_ge .Trunc (_gdgf .ValueNumber );if _bfgb > _gdbf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _bfgb ==_gdbf ||_bfgb ==0{return MakeNumberResult (1);};_efaad :=float64 (1);for _fbbb :=float64 (1);_fbbb <=_bfgb ;_fbbb ++{_efaad *=(_gdbf +1-_fbbb )/_fbbb ;};return MakeNumberResult (_efaad );};func _ecfcb (_edcg []Result )Result {_efea :=_edcg [0].ValueList ;_dcdf :=len (_efea );switch len (_edcg ){case 1:_gagg :=[]Result {};for _ ,_ggbdb :=range _efea {_gagg =append (_gagg ,MakeBoolResult (_ggbdb .ValueNumber !=0));};return MakeListResult (_gagg );case 2:_dffab :=_edcg [1];switch _dffab .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_ccafg :=[]Result {};for _ ,_fdbdb :=range _efea {var _abfda Result ;if _fdbdb .ValueNumber ==0{_abfda =MakeBoolResult (false );}else {_abfda =_dffab ;};_ccafg =append (_ccafg ,_abfda );};return MakeListResult (_ccafg );case ResultTypeList :_daad :=_daaf (_dffab ,_dcdf );_gdge :=[]Result {};for _cdac ,_fcgc :=range _efea {var _afegc Result ;if _fcgc .ValueNumber ==0{_afegc =MakeBoolResult (false );}else {_afegc =_daad [_cdac ];};_gdge =append (_gdge ,_afegc );};return MakeListResult (_gdge );case ResultTypeArray :_egcd :=_cbgaa (_dffab ,len (_dffab .ValueArray ),_dcdf );_baba :=[][]Result {};for _ ,_ffggg :=range _egcd {_cfgg :=[]Result {};for _gbaa ,_cebcg :=range _efea {var _geeae Result ;if _cebcg .ValueNumber ==0{_geeae =MakeBoolResult (false );}else {_geeae =_ffggg [_gbaa ];};_cfgg =append (_cfgg ,_geeae );};_baba =append (_baba ,_cfgg );};return MakeArrayResult (_baba );};case 3:_ecagb :=_edcg [1];_edgcb :=_edcg [2];_gagb :=_bgfc (_ecagb );_abdd :=_bgfc (_edgcb );if _gagb &&_abdd {_aeed :=[]Result {};for _ ,_acge :=range _efea {var _gaecg Result ;if _acge .ValueNumber ==0{_gaecg =_edgcb ;}else {_gaecg =_ecagb ;};_aeed =append (_aeed ,_gaecg );};return MakeListResult (_aeed );};if _ecagb .Type !=ResultTypeArray &&_edgcb .Type !=ResultTypeArray {_deacd :=_daaf (_ecagb ,_dcdf );_dcee :=_daaf (_edgcb ,_dcdf );_ccfgc :=[]Result {};for _dffac ,_cdfcc :=range _efea {var _aecac Result ;if _cdfcc .ValueNumber ==0{_aecac =_dcee [_dffac ];}else {_aecac =_deacd [_dffac ];};_ccfgc =append (_ccfgc ,_aecac );};return MakeListResult (_ccfgc );};_edfec ,_aeac :=len (_ecagb .ValueArray ),len (_edgcb .ValueArray );_bcdc ,_gbcaf :=_edfec ,_aeac ;if _aeac > _bcdc {_bcdc ,_gbcaf =_gbcaf ,_bcdc ;};_bbcfc :=_cbgaa (_ecagb ,_bcdc ,_dcdf );_cfcf :=_cbgaa (_edgcb ,_bcdc ,_dcdf );_bcgc :=[][]Result {};for _affdb :=0;_affdb < _bcdc ;_affdb ++{_bcea :=[]Result {};for _ddcf ,_egdf :=range _efea {var _faag Result ;if _egdf .ValueNumber ==0{if _affdb < _aeac {_faag =_cfcf [_affdb ][_ddcf ];}else {_faag =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _affdb < _edfec {_faag =_bbcfc [_affdb ][_ddcf ];}else {_faag =MakeErrorResultType (ErrorTypeNA ,"");};};_bcea =append (_bcea ,_faag );};_bcgc =append (_bcgc ,_bcea );};return MakeArrayResult (_bcgc );};return MakeErrorResult ("");};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bafde ,_efda ,_bfba :=_adgbd (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bfba .Type ==ResultTypeError {return _bfba ;};_fdac ,_bfba :=_aeb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bfba .Type ==ResultTypeError {return _bfba ;};if _fdac >=_bafde {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_efgf :=args [3];if _efgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_afa :=_efgf .ValueNumber ;if _afa < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_baca :=args [4];if _baca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dgae :=_baca .ValueNumber ;if _dgae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bfda :=args [5];if _bfda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_eaba :=_bfda .ValueNumber ;if _eaba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bfag :=args [6];if _bfag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccfd :=float64 (int (_bfag .ValueNumber ));if !_faee (_ccfd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cagf :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_dcaf :=args [7];if _dcaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cagf =int (_dcaf .ValueNumber );if !_aba (_cagf ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_ffed ,_bfba :=_adgb (_fdac ,_efda ,_cagf );if _bfba .Type ==ResultTypeError {return _bfba ;};_ffed *=_ccfd ;_dfbb ,_bfba :=_adgb (_bafde ,_efda ,_cagf );if _bfba .Type ==ResultTypeError {return _bfba ;};_dfbb *=_ccfd ;_acab ,_bfba :=_adgb (_fdac ,_bafde ,_cagf );if _bfba .Type ==ResultTypeError {return _bfba ;};_acab *=_ccfd ;_gdgd :=_eaba +_ffed *100*_afa /_ccfd ;_gdgd /=_dfbb *_dgae /_ccfd +1;_gdgd -=_acab *100*_afa /_ccfd ;return MakeNumberResult (_gdgd );};

// Update updates references in the BinaryExpr after removing a row/column.
func (_cfcd BinaryExpr )Update (q *_ed .UpdateQuery )Expression {_fg :=_cfcd ;_fg ._fe =_cfcd ._fe .Update (q );_fg ._da =_cfcd ._da .Update (q );return _fg ;};const _bagb =57347;

// String returns a string representation of ConstArrayExpr.
func (_bdd ConstArrayExpr )String ()string {return ""};func _gede (_gace []string ,_adaec int )string {return _dc .Itoa (len (_gace [len (_gace )-1-_adaec ]))};func _fdea (_cbbg string ,_bedfb func (_edcb float64 )float64 )Function {return func (_afegf []Result )Result {if len (_afegf )!=1{return MakeErrorResult (_cbbg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgae :=_afegf [0].AsNumber ();switch _cgae .Type {case ResultTypeNumber :_eeefa :=_bedfb (_cgae .ValueNumber );if _ge .IsNaN (_eeefa ){return MakeErrorResult (_cbbg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ge .IsInf (_eeefa ,0){return MakeErrorResult (_cbbg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _eeefa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_cbbg +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_eeefa );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_cbbg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _cgae ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cbbg ,_cgae .Type ));};};};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_bggg ,_acbd ,_bedf :=_ebfba (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _bedf .Type ==ResultTypeError {return _bedf ;};if _acbd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bggg ==0{return MakeNumberResult (0);};_adb :=_bggg < 0;if _adb {_bggg =-_bggg ;};_feba :=float64 (int (_bggg ));_bfdg :=args [0].Value ();_ebge :=_ca .Split (_bfdg ,"\u002e");_daag :=0.0;if len (_ebge )> 1{var _cge error ;_ecf :=_ebge [1];_daag ,_cge =_dc .ParseFloat (_ecf ,64);if _cge !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_cdegd :=float64 (len (_ecf ));_daag /=_ge .Pow (10,_cdegd );};_fdcgd :=_daag *_acbd /_ge .Pow (10,float64 (int (_ge .Log10 (_acbd )))+1)+_feba ;if _adb {_fdcgd =-_fdcgd ;};return MakeNumberResult (_fdcgd );};

// Number is a nubmer expression.
type Number struct{_eged float64 };

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_befc :=args [0];if _befc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efbfg :=int (_befc .ValueNumber );if _efbfg < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_efbfg {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_efbfg ];};func _feaa (_ccbdf _dfc .Time )bool {return _dfc .Now ().Sub (_ccbdf )>=_bafe };func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Reference returns an invalid reference for Negate.
func (_ebdfd Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dgeff :=args [0].AsNumber ();if _dgeff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_dcge :=float64 (1);if _dgeff .ValueNumber < 0{_dcge =-1;};if len (args )> 1{_afef :=args [1].AsNumber ();if _afef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dcge =_afef .ValueNumber ;};_cgfea :=float64 (1);if len (args )> 2{_ecgc :=args [2].AsNumber ();if _ecgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_cgfea =_ecgc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ge .Ceil (_dgeff .ValueNumber ));};_bbfd :=_dgeff .ValueNumber ;_bbfd ,_ccbd :=_ge .Modf (_bbfd /_dcge );if _ccbd !=0{if _dgeff .ValueNumber > 0{_bbfd ++;}else if _cgfea < 0{_bbfd --;};};return MakeNumberResult (_bbfd *_dcge );};func (_ffaebe ReferenceType )String ()string {if _ffaebe >=ReferenceType (len (_faeff )-1){return _g .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_ffaebe );};return _gaegbg [_faeff [_ffaebe ]:_faeff [_ffaebe +1]];};func (_efbb PrefixHorizontalRange )horizontalRangeReference (_ebfc string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ebfc ,_efbb ._fafa ,_efbb ._abdc );};var _gcgf =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_gfaf (args ,_dbeaa ))};var _daeab =map[string ]FunctionComplex {};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egge :=int (args [0].ValueNumber );return MakeBoolResult (_egge !=_egge /2*2);};const _fbabd =57360;

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbgb :=args [0];if _dbgb .Type !=ResultTypeArray &&_dbgb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ecbe :=_bfff (_dbgb );_aegc :=args [2];if _aegc .Type !=ResultTypeArray &&_aegc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_agad :=_bfff (_aegc );_dbgf :=_faebe (args [1]);_gfab :=0.0;for _fddde ,_dggag :=range _ecbe {for _aaacf ,_bggb :=range _dggag {if _dggab (_bggb ,_dbgf ){_gfab +=_agad [_fddde ][_aaacf ].ValueNumber ;};};};return MakeNumberResult (_gfab );};

// String returns a string representation of a horizontal range with prefix.
func (_afbc PrefixHorizontalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_afbc ._cafcc .String (),_afbc ._fafa ,_afbc ._abdc );};

// Reference returns an invalid reference for BinaryExpr.
func (_dec BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String is a string expression.
type String struct{_agffc string };

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_cgefd :=_ca .Split (v ,"\u003a");if len (_cgefd )!=2{return nil ;};_gaff ,_ :=_dc .Atoi (_cgefd [0]);_fgbgf ,_ :=_dc .Atoi (_cgefd [1]);if _gaff > _fgbgf {_gaff ,_fgbgf =_fgbgf ,_gaff ;};return PrefixHorizontalRange {_cafcc :pfx ,_fafa :_gaff ,_abdc :_fgbgf };};func _aacg (_cfeg Result ,_aedf *criteriaParsed )bool {if _cfeg .Type ==ResultTypeEmpty {return false ;};if _aedf ._fccfg {return _cfeg .ValueNumber ==_aedf ._cbaba ;}else {_gcab :=_ca .ToLower (_cfeg .ValueString );return _aedf ._beegg ==_gcab ||_gba .Match (_aedf ._beegg ,_gcab );};};

// CellRef is a reference to a single cell
type CellRef struct{_gad string };func init (){_cggcf =_ad .New (_ad .NewSource (_dfc .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_agfb ("\u0041\u0053\u0049\u004e",_ge .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_agfb ("\u0041\u0053\u0049\u004e",_ge .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_agfb ("\u0041\u0053\u0049\u004e",_ge .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_agfb ("\u0041\u0043\u004f\u0054",func (_beeea float64 )float64 {return _ge .Pi /2-_ge .Atan (_beeea )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_agfb ("\u0041\u0043\u004fT\u0048",func (_deff float64 )float64 {return _ge .Atanh (1/_deff )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_agfb ("\u0041\u0053\u0049\u004e",_ge .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_agfb ("\u0041\u0053\u0049N\u0048",_ge .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_agfb ("\u0041\u0054\u0041\u004e",_ge .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_agfb ("\u0041\u0054\u0041N\u0048",_ge .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_agfb ("\u0043\u004f\u0053",_ge .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_agfb ("\u0043\u004f\u0053\u0048",_ge .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_fdea ("\u0043\u004f\u0054",_ge .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_fdea ("\u0043\u004f\u0054\u0048",_ge .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_fdea ("\u0043\u0053\u0043",_ge .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_fdea ("\u0043\u0053\u0043",_ge .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_agfb ("\u0045\u0058\u0050",_ge .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_agfb ("\u004c\u004e",_ge .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_agfb ("\u004c\u004f\u00471\u0030",_ge .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_fdea ("\u0053\u0045\u0043",_ge .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_fdea ("\u0053\u0045\u0043\u0048",_ge .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_agfb ("\u0053\u0049\u004e",_ge .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_agfb ("\u0053\u0049\u004e\u0048",_ge .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_agfb ("\u0053\u0051\u0052\u0054",_ge .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_agfb ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_dcgce float64 )float64 {return _ge .Sqrt (_dcgce *_ge .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_agfb ("\u0054\u0041\u004e",_ge .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_agfb ("\u0054\u0041\u004e\u0048",_ge .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const (_ byte =iota ;_acbgf ;_aeacf ;_ecad ;_dbefc ;_beeb ;);const _edad ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _gbfe (_affbc ,_bcde []float64 ,_eacf float64 )Result {_geec :=false ;_fadf :=false ;for _ddgf :=0;_ddgf < len (_affbc );_ddgf ++{if _affbc [_ddgf ]> 0{_geec =true ;};if _affbc [_ddgf ]< 0{_fadf =true ;};};if !_geec ||!_fadf {return MakeErrorResultType (ErrorTypeNum ,"");};_cggc :=_eacf ;_cefg :=1e-10;_dgda :=0;_dfe :=50;_bcbd :=false ;for {_dgee :=_fefg (_affbc ,_bcde ,_cggc );_ffef :=_cggc -_dgee /_fegde (_affbc ,_bcde ,_cggc );_agfff :=_ge .Abs (_ffef -_cggc );_cggc =_ffef ;_dgda ++;if _agfff <=_cefg ||_ge .Abs (_dgee )<=_cefg {break ;};if _dgda > _dfe {_bcbd =true ;break ;};};if _bcbd ||_ge .IsNaN (_cggc )||_ge .IsInf (_cggc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_cggc );};func (_afbad Result )AsString ()Result {switch _afbad .Type {case ResultTypeNumber :return MakeStringResult (_afbad .Value ());default:return _afbad ;};};var _cgdd =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_facg ,_aeeg ,_facff :=_aaga (args );if _facff .Type ==ResultTypeError {return _facff ;};return MakeNumberResult (_fdab (_facg )/_aeeg );};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_bdbg :=1.0;for _ ,_ccdgf :=range args {_ccdgf =_ccdgf .AsNumber ();switch _ccdgf .Type {case ResultTypeNumber :_bdbg *=_ccdgf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bgebf :=Product (_ccdgf .ListValues ());if _bgebf .Type !=ResultTypeNumber {return _bgebf ;};_bdbg *=_bgebf .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ccdgf ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_ccdgf .Type ));};};return MakeNumberResult (_bdbg );};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_gfffa .Lock ();defer _gfffa .Unlock ();if _ ,_badba :=_ccggg [name ];_badba {_edd .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_ccggg [name ]=fn ;};type yySymType struct{_cafc int ;_deab *node ;_egag Expression ;_ccfdg []Expression ;_decg [][]Expression ;};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};func (_bfdd *Lexer )lex (_bebc _c .Reader ){_cdbcf ,_fccbd ,_ccec :=0,0,0;_eeee :=-1;_ffefd ,_caebd ,_abgf :=0,0,0;_ =_abgf ;_afbg :=1;_ =_afbg ;_dgbfd :=make ([]byte ,4096);_cgagb :=false ;for !_cgagb {_ddca :=0;if _ffefd > 0{_ddca =_fccbd -_ffefd ;};_fccbd =0;_bfab ,_cbad :=_bebc .Read (_dgbfd [_ddca :]);if _bfab ==0||_cbad !=nil {_cgagb =true ;};_ccec =_bfab +_ddca ;if _ccec < len (_dgbfd ){_eeee =_ccec ;};{_cdbcf =_dggabc ;_ffefd =0;_caebd =0;_abgf =0;};{var _efabg int ;var _bccb uint ;if _fccbd ==_ccec {goto _agaba ;};if _cdbcf ==0{goto _ddaea ;};_bgddg :_efabg =int (_bedad [_cdbcf ]);_bccb =uint (_agda [_efabg ]);_efabg ++;for ;_bccb > 0;_bccb --{_efabg ++;switch _agda [_efabg -1]{case 2:_ffefd =_fccbd ;};};switch _cdbcf {case 30:switch _dgbfd [_fccbd ]{case 34:goto _acba ;case 35:goto _adag ;case 36:goto _ebde ;case 38:goto _afgb ;case 39:goto _aegd ;case 40:goto _ceecb ;case 41:goto _adbbb ;case 42:goto _cgcb ;case 43:goto _bgfbc ;case 44:goto _gefbf ;case 45:goto _eecfe ;case 47:goto _bebbe ;case 58:goto _bdad ;case 59:goto _bagdg ;case 60:goto _bbba ;case 61:goto _ffcb ;case 62:goto _adfgf ;case 63:goto _fgge ;case 70:goto _ddbbb ;case 84:goto _bcegd ;case 92:goto _bfaba ;case 94:goto _cdegdf ;case 95:goto _edcgg ;case 123:goto _gggf ;case 125:goto _adaf ;};switch {case _dgbfd [_fccbd ]< 65:switch {case _dgbfd [_fccbd ]> 37:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _eaeg ;};case _dgbfd [_fccbd ]>=33:goto _fgge ;};case _dgbfd [_fccbd ]> 90:switch {case _dgbfd [_fccbd ]> 93:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _eegfb ;};case _dgbfd [_fccbd ]>=91:goto _fgge ;};default:goto _dbbc ;};goto _ebacc ;case 1:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _edef ;case 123:goto _edef ;case 125:goto _edef ;};switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _edef ;};case _dgbfd [_fccbd ]> 45:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _edef ;};case _dgbfd [_fccbd ]>=58:goto _edef ;};default:goto _edef ;};goto _ebacc ;case 0:goto _ddaea ;case 2:if _dgbfd [_fccbd ]==34{goto _fbfaf ;};goto _acba ;case 31:if _dgbfd [_fccbd ]==34{goto _acba ;};goto _acgc ;case 3:switch _dgbfd [_fccbd ]{case 78:goto _adfg ;case 82:goto _bdge ;};goto _fgge ;case 4:switch _dgbfd [_fccbd ]{case 47:goto _agbf ;case 85:goto _cffa ;};goto _fgge ;case 5:if _dgbfd [_fccbd ]==65{goto _dfed ;};goto _fgge ;case 6:switch _dgbfd [_fccbd ]{case 76:goto _ebceb ;case 77:goto _eedg ;};goto _fgge ;case 7:if _dgbfd [_fccbd ]==76{goto _eedg ;};goto _fgge ;case 8:if _dgbfd [_fccbd ]==33{goto _dfed ;};goto _fgge ;case 9:if _dgbfd [_fccbd ]==69{goto _fcecb ;};goto _fgge ;case 10:if _dgbfd [_fccbd ]==70{goto _cgad ;};goto _fgge ;case 11:if _dgbfd [_fccbd ]==33{goto _aaagc ;};goto _fgge ;case 12:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _fgge ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=45{goto _fgge ;};case _dgbfd [_fccbd ]>=34:goto _fgge ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]< 65:if 58<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=63{goto _fgge ;};case _dgbfd [_fccbd ]> 90:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _fgge ;};default:goto _afggc ;};default:goto _fgee ;};goto _ebacc ;case 13:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _fgge ;case 58:goto _bdgga ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=45{goto _fgge ;};case _dgbfd [_fccbd ]>=34:goto _fgge ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _fgge ;};case _dgbfd [_fccbd ]>=59:goto _fgge ;};default:goto _fgee ;};goto _ebacc ;case 14:if _dgbfd [_fccbd ]==36{goto _eecg ;};if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _cegfa ;};goto _edef ;case 15:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _cegfa ;};goto _edef ;case 32:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _cegfa ;};goto _dfbcc ;case 16:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 47:goto _fgge ;case 58:goto _acfbb ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 45:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _gbac ;};case _dgbfd [_fccbd ]>=34:goto _fgge ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]> 90:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _fgge ;};case _dgbfd [_fccbd ]>=65:goto _afggc ;};default:goto _fgge ;};goto _ebacc ;case 17:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _edef ;case 123:goto _edef ;case 125:goto _edef ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=45{goto _edef ;};case _dgbfd [_fccbd ]>=34:goto _edef ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _edef ;};case _dgbfd [_fccbd ]>=58:goto _edef ;};default:goto _gbac ;};goto _ebacc ;case 33:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _bcdag ;case 123:goto _bcdag ;case 125:goto _bcdag ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=45{goto _bcdag ;};case _dgbfd [_fccbd ]>=34:goto _bcdag ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _bcdag ;};case _dgbfd [_fccbd ]>=58:goto _bcdag ;};default:goto _gbac ;};goto _ebacc ;case 18:if _dgbfd [_fccbd ]==36{goto _gfggd ;};if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _fbce ;};goto _edef ;case 19:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _fbce ;};goto _edef ;case 34:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _fbce ;};goto _fcbce ;case 20:switch _dgbfd [_fccbd ]{case 39:goto _fgge ;case 42:goto _fgge ;case 47:goto _fgge ;case 58:goto _fgge ;case 63:goto _fgge ;};if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=93{goto _fgge ;};goto _gabad ;case 21:switch _dgbfd [_fccbd ]{case 39:goto _aegdg ;case 42:goto _fgge ;case 47:goto _fgge ;case 58:goto _fgge ;case 63:goto _fgge ;};if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=93{goto _fgge ;};goto _gabad ;case 22:if _dgbfd [_fccbd ]==33{goto _ecccc ;};goto _fgge ;case 35:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _affe ;case 58:goto _bdgga ;case 101:goto _acggc ;case 123:goto _fbed ;case 125:goto _fbed ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=47{goto _fbed ;};case _dgbfd [_fccbd ]>=34:goto _fbed ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _fbed ;};case _dgbfd [_fccbd ]>=59:goto _fbed ;};default:goto _eaeg ;};goto _ebacc ;case 36:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _fbed ;case 101:goto _acggc ;case 123:goto _fbed ;case 125:goto _fbed ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=45{goto _fbed ;};case _dgbfd [_fccbd ]>=34:goto _fbed ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _fbed ;};case _dgbfd [_fccbd ]>=58:goto _fbed ;};default:goto _affe ;};goto _ebacc ;case 23:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _fdfec ;case 123:goto _fdfec ;case 125:goto _fdfec ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=45{goto _fdfec ;};case _dgbfd [_fccbd ]>=34:goto _fdfec ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _fdfec ;};case _dgbfd [_fccbd ]>=58:goto _fdfec ;};default:goto _cggab ;};goto _ebacc ;case 37:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 47:goto _fbed ;case 123:goto _fbed ;case 125:goto _fbed ;};switch {case _dgbfd [_fccbd ]< 48:switch {case _dgbfd [_fccbd ]> 35:if 37<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=45{goto _fbed ;};case _dgbfd [_fccbd ]>=34:goto _fbed ;};case _dgbfd [_fccbd ]> 57:switch {case _dgbfd [_fccbd ]> 63:if 91<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=94{goto _fbed ;};case _dgbfd [_fccbd ]>=58:goto _fbed ;};default:goto _cggab ;};goto _ebacc ;case 38:switch _dgbfd [_fccbd ]{case 61:goto _ggffbb ;case 62:goto _gegee ;};goto _edbg ;case 39:if _dgbfd [_fccbd ]==61{goto _bdggf ;};goto _cbca ;case 24:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _fgge ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _fgge ;};default:goto _fgge ;};goto _ebacc ;case 40:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _gaeb ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gaeb ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 41:switch _dgbfd [_fccbd ]{case 46:goto _eaecg ;case 92:goto _eaecg ;case 95:goto _eaecg ;};switch {case _dgbfd [_fccbd ]< 65:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _eaecg ;};case _dgbfd [_fccbd ]> 90:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _eaecg ;};default:goto _eaecg ;};goto _ceed ;case 42:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 43:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _bcdag ;case 125:goto _bcdag ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _bcdag ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};default:goto _bcdag ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gaeb ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _bcdag ;};default:goto _bcdag ;};goto _ebacc ;case 44:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _edef ;case 125:goto _edef ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _edef ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _edef ;};default:goto _edef ;};goto _ebacc ;case 25:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 65:goto _bfec ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _fgge ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 66<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _fgge ;};default:goto _fgge ;};goto _ebacc ;case 45:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 76:goto _egffg ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 46:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 83:goto _bfbc ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 47:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 69:goto _agdf ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 26:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 79:goto _acadc ;case 82:goto _cgeb ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _fgge ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _fgge ;};default:goto _fgge ;};goto _ebacc ;case 48:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 68:goto _bdfb ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 49:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 79:goto _aegb ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 50:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 36:goto _bffeb ;case 40:goto _cfbe ;case 46:goto _gaeb ;case 58:goto _acfbb ;case 85:goto _bfbc ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 59:switch {case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _adeg ;};case _dgbfd [_fccbd ]>=34:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _gfbdc ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 27:switch _dgbfd [_fccbd ]{case 46:goto _eaecg ;case 92:goto _eaecg ;case 95:goto _eaecg ;};switch {case _dgbfd [_fccbd ]< 65:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _eaecg ;};case _dgbfd [_fccbd ]> 90:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _eaecg ;};default:goto _eaecg ;};goto _fgge ;case 28:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _ddge ;case 120:goto _ddga ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _fgge ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _fgge ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _fgge ;};default:goto _fgge ;};goto _ebacc ;case 51:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _ddge ;case 108:goto _bdceg ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 52:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _ddge ;case 102:goto _fggf ;case 110:goto _gbeg ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 53:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _ddge ;case 110:goto _bcaef ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 54:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _edede ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 55:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _daea ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _daea ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 56:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 40:goto _aadf ;case 46:goto _daea ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _daea ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _daea ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 57:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _ddge ;case 109:goto _gaecgg ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 58:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _cdcc ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _ceed ;case 125:goto _ceed ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _ceed ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _ceed ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _ceed ;};default:goto _ceed ;};goto _ebacc ;case 59:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _bebcf ;case 123:goto _edef ;case 125:goto _edef ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _edef ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _edef ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _bebcf ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _edef ;};default:goto _edef ;};goto _ebacc ;case 29:switch _dgbfd [_fccbd ]{case 33:goto _agafc ;case 46:goto _ddge ;case 92:goto _eaecg ;case 95:goto _ddge ;case 123:goto _fgge ;case 125:goto _fgge ;};switch {case _dgbfd [_fccbd ]< 58:switch {case _dgbfd [_fccbd ]< 37:if 34<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=35{goto _fgge ;};case _dgbfd [_fccbd ]> 47:if 48<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=57{goto _ddge ;};default:goto _fgge ;};case _dgbfd [_fccbd ]> 63:switch {case _dgbfd [_fccbd ]< 91:if 65<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=90{goto _ddge ;};case _dgbfd [_fccbd ]> 94:if 97<=_dgbfd [_fccbd ]&&_dgbfd [_fccbd ]<=122{goto _ddge ;};default:goto _fgge ;};default:goto _fgge ;};goto _ebacc ;};_fgge :_cdbcf =0;goto _fgcea ;_ebacc :_cdbcf =1;goto _fgcea ;_acba :_cdbcf =2;goto _fgcea ;_adag :_cdbcf =3;goto _fgcea ;_adfg :_cdbcf =4;goto _fgcea ;_agbf :_cdbcf =5;goto _fgcea ;_cffa :_cdbcf =6;goto _fgcea ;_ebceb :_cdbcf =7;goto _fgcea ;_eedg :_cdbcf =8;goto _fgcea ;_bdge :_cdbcf =9;goto _fgcea ;_fcecb :_cdbcf =10;goto _fgcea ;_cgad :_cdbcf =11;goto _fgcea ;_ebde :_cdbcf =12;goto _fgcea ;_fgee :_cdbcf =13;goto _fgcea ;_bdgga :_cdbcf =14;goto _fgcea ;_eecg :_cdbcf =15;goto _fgcea ;_afggc :_cdbcf =16;goto _fgcea ;_bffeb :_cdbcf =17;goto _fgcea ;_acfbb :_cdbcf =18;goto _fgcea ;_gfggd :_cdbcf =19;goto _fgcea ;_aegd :_cdbcf =20;goto _fgcea ;_gabad :_cdbcf =21;goto _fgcea ;_aegdg :_cdbcf =22;goto _fgcea ;_acggc :_cdbcf =23;goto _fgcea ;_dbbc :_cdbcf =24;goto _fgcea ;_ddbbb :_cdbcf =25;goto _fgcea ;_bcegd :_cdbcf =26;goto _fgcea ;_bfaba :_cdbcf =27;goto _fgcea ;_edcgg :_cdbcf =28;goto _fgcea ;_eegfb :_cdbcf =29;goto _fgcea ;_edef :_cdbcf =30;goto _eabc ;_agafc :_cdbcf =30;goto _faad ;_dfed :_cdbcf =30;goto _cbdfb ;_aaagc :_cdbcf =30;goto _edebf ;_ecccc :_cdbcf =30;goto _fbee ;_fdfec :_cdbcf =30;goto _adgf ;_cfbe :_cdbcf =30;goto _ggeae ;_afgb :_cdbcf =30;goto _ecbb ;_ceecb :_cdbcf =30;goto _fdde ;_adbbb :_cdbcf =30;goto _gage ;_cgcb :_cdbcf =30;goto _edade ;_bgfbc :_cdbcf =30;goto _ceede ;_gefbf :_cdbcf =30;goto _cgagg ;_eecfe :_cdbcf =30;goto _gbeea ;_bebbe :_cdbcf =30;goto _defec ;_bdad :_cdbcf =30;goto _ecae ;_bagdg :_cdbcf =30;goto _gefee ;_ffcb :_cdbcf =30;goto _cbea ;_cdegdf :_cdbcf =30;goto _ddffe ;_gggf :_cdbcf =30;goto _fbage ;_adaf :_cdbcf =30;goto _ebda ;_acgc :_cdbcf =30;goto _fegffc ;_dfbcc :_cdbcf =30;goto _eefedf ;_bcdag :_cdbcf =30;goto _abgba ;_fcbce :_cdbcf =30;goto _deee ;_fbed :_cdbcf =30;goto _cgdfg ;_edbg :_cdbcf =30;goto _aeea ;_ggffbb :_cdbcf =30;goto _cbdff ;_gegee :_cdbcf =30;goto _aadg ;_cbca :_cdbcf =30;goto _dfga ;_bdggf :_cdbcf =30;goto _fadd ;_ceed :_cdbcf =30;goto _dcgfaa ;_aadf :_cdbcf =30;goto _bdaad ;_fbfaf :_cdbcf =31;goto _gabd ;_cegfa :_cdbcf =32;goto _fgcea ;_gbac :_cdbcf =33;goto _eeag ;_fbce :_cdbcf =34;goto _fgcea ;_eaeg :_cdbcf =35;goto _cgbgg ;_affe :_cdbcf =36;goto _cgbgg ;_cggab :_cdbcf =37;goto _cgbgg ;_bbba :_cdbcf =38;goto _fgcea ;_adfgf :_cdbcf =39;goto _fgcea ;_gaeb :_cdbcf =40;goto _fgccd ;_eaecg :_cdbcf =41;goto _fgcea ;_ddge :_cdbcf =42;goto _fgccd ;_adeg :_cdbcf =43;goto _eeag ;_gfbdc :_cdbcf =44;goto _fgccd ;_agdf :_cdbcf =44;goto _aeaa ;_aegb :_cdbcf =44;goto _gaebb ;_bfec :_cdbcf =45;goto _fgccd ;_egffg :_cdbcf =46;goto _fgccd ;_bfbc :_cdbcf =47;goto _fgccd ;_acadc :_cdbcf =48;goto _fgccd ;_bdfb :_cdbcf =49;goto _fgccd ;_cgeb :_cdbcf =50;goto _fgccd ;_ddga :_cdbcf =51;goto _fgccd ;_bdceg :_cdbcf =52;goto _fgccd ;_fggf :_cdbcf =53;goto _fgccd ;_bcaef :_cdbcf =54;goto _fgccd ;_edede :_cdbcf =55;goto _fgccd ;_daea :_cdbcf =56;goto _fgccd ;_gbeg :_cdbcf =57;goto _fgccd ;_gaecgg :_cdbcf =58;goto _fgccd ;_cdcc :_cdbcf =59;goto _fgccd ;_bebcf :_cdbcf =59;goto _fbde ;_cbdfb :_efabg =3;goto _agfg ;_edebf :_efabg =5;goto _agfg ;_faad :_efabg =7;goto _agfg ;_fbee :_efabg =9;goto _agfg ;_ggeae :_efabg =11;goto _agfg ;_bdaad :_efabg =13;goto _agfg ;_ecbb :_efabg =15;goto _agfg ;_fbage :_efabg =17;goto _agfg ;_ebda :_efabg =19;goto _agfg ;_fdde :_efabg =21;goto _agfg ;_gage :_efabg =23;goto _agfg ;_ceede :_efabg =25;goto _agfg ;_gbeea :_efabg =27;goto _agfg ;_edade :_efabg =29;goto _agfg ;_defec :_efabg =31;goto _agfg ;_ddffe :_efabg =33;goto _agfg ;_cbea :_efabg =35;goto _agfg ;_cbdff :_efabg =37;goto _agfg ;_fadd :_efabg =39;goto _agfg ;_aadg :_efabg =41;goto _agfg ;_ecae :_efabg =43;goto _agfg ;_gefee :_efabg =45;goto _agfg ;_cgagg :_efabg =47;goto _agfg ;_cgdfg :_efabg =49;goto _agfg ;_abgba :_efabg =51;goto _agfg ;_eefedf :_efabg =53;goto _agfg ;_deee :_efabg =55;goto _agfg ;_dcgfaa :_efabg =57;goto _agfg ;_fegffc :_efabg =59;goto _agfg ;_aeea :_efabg =61;goto _agfg ;_dfga :_efabg =63;goto _agfg ;_adgf :_efabg =65;goto _agfg ;_eabc :_efabg =67;goto _agfg ;_aeaa :_efabg =72;goto _agfg ;_cgbgg :_efabg =75;goto _agfg ;_eeag :_efabg =78;goto _agfg ;_gaebb :_efabg =81;goto _agfg ;_fbde :_efabg =84;goto _agfg ;_fgccd :_efabg =87;goto _agfg ;_gabd :_efabg =90;goto _agfg ;_agfg :_bccb =uint (_agda [_efabg ]);_efabg ++;for ;_bccb > 0;_bccb --{_efabg ++;switch _agda [_efabg -1]{case 3:_caebd =_fccbd +1;case 4:_abgf =1;case 5:_abgf =2;case 6:_abgf =3;case 7:_abgf =4;case 8:_abgf =11;case 9:_abgf =14;case 10:_abgf =15;case 11:_caebd =_fccbd +1;{_bfdd .emit (_eadcf ,_dgbfd [_ffefd :_caebd ]);};case 12:_caebd =_fccbd +1;{_bfdd .emit (_bfaag ,_dgbfd [_ffefd :_caebd ]);};case 13:_caebd =_fccbd +1;{_bfdd .emit (_geba ,_dgbfd [_ffefd :_caebd -1]);};case 14:_caebd =_fccbd +1;{_bfdd .emit (_geba ,_dgbfd [_ffefd +1:_caebd -2]);};case 15:_caebd =_fccbd +1;{_bfdd .emit (_gbcef ,_dgbfd [_ffefd :_caebd -1]);};case 16:_caebd =_fccbd +1;{_bfdd .emit (_gbcef ,_dgbfd [_ffefd :_caebd -1]);};case 17:_caebd =_fccbd +1;{_bfdd .emit (_afgdd ,_dgbfd [_ffefd :_caebd ]);};case 18:_caebd =_fccbd +1;{_bfdd .emit (_fbabd ,_dgbfd [_ffefd :_caebd ]);};case 19:_caebd =_fccbd +1;{_bfdd .emit (_aage ,_dgbfd [_ffefd :_caebd ]);};case 20:_caebd =_fccbd +1;{_bfdd .emit (_dfbf ,_dgbfd [_ffefd :_caebd ]);};case 21:_caebd =_fccbd +1;{_bfdd .emit (_ddaf ,_dgbfd [_ffefd :_caebd ]);};case 22:_caebd =_fccbd +1;{_bfdd .emit (_cgcc ,_dgbfd [_ffefd :_caebd ]);};case 23:_caebd =_fccbd +1;{_bfdd .emit (_bbff ,_dgbfd [_ffefd :_caebd ]);};case 24:_caebd =_fccbd +1;{_bfdd .emit (_abeca ,_dgbfd [_ffefd :_caebd ]);};case 25:_caebd =_fccbd +1;{_bfdd .emit (_fadfd ,_dgbfd [_ffefd :_caebd ]);};case 26:_caebd =_fccbd +1;{_bfdd .emit (_defeg ,_dgbfd [_ffefd :_caebd ]);};case 27:_caebd =_fccbd +1;{_bfdd .emit (_fagg ,_dgbfd [_ffefd :_caebd ]);};case 28:_caebd =_fccbd +1;{_bfdd .emit (_baed ,_dgbfd [_ffefd :_caebd ]);};case 29:_caebd =_fccbd +1;{_bfdd .emit (_eaag ,_dgbfd [_ffefd :_caebd ]);};case 30:_caebd =_fccbd +1;{_bfdd .emit (_gddfg ,_dgbfd [_ffefd :_caebd ]);};case 31:_caebd =_fccbd +1;{_bfdd .emit (_gcdag ,_dgbfd [_ffefd :_caebd ]);};case 32:_caebd =_fccbd +1;{_bfdd .emit (_bbfea ,_dgbfd [_ffefd :_caebd ]);};case 33:_caebd =_fccbd +1;{_bfdd .emit (_dcfg ,_dgbfd [_ffefd :_caebd ]);};case 34:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_afae ,_dgbfd [_ffefd :_caebd ]);};case 35:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_acadb ,_dgbfd [_ffefd :_caebd ]);};case 36:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_ggdb ,_dgbfd [_ffefd :_caebd ]);};case 37:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_bagb ,_dgbfd [_ffefd :_caebd ]);};case 38:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_cdcg ,_dgbfd [_ffefd :_caebd ]);};case 39:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_ddce ,_dgbfd [_ffefd +1:_caebd -1]);};case 40:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_fdgfd ,_dgbfd [_ffefd :_caebd ]);};case 41:_caebd =_fccbd ;_fccbd --;{_bfdd .emit (_gfcd ,_dgbfd [_ffefd :_caebd ]);};case 42:_fccbd =(_caebd )-1;{_bfdd .emit (_afae ,_dgbfd [_ffefd :_caebd ]);};case 43:switch _abgf {case 0:{_cdbcf =0;goto _fgcea ;};case 1:{_fccbd =(_caebd )-1;_bfdd .emit (_faef ,_dgbfd [_ffefd :_caebd ]);};case 2:{_fccbd =(_caebd )-1;_bfdd .emit (_afae ,_dgbfd [_ffefd :_caebd ]);};case 3:{_fccbd =(_caebd )-1;_bfdd .emit (_acadb ,_dgbfd [_ffefd :_caebd ]);};case 4:{_fccbd =(_caebd )-1;_bfdd .emit (_fcec ,_dgbfd [_ffefd :_caebd ]);};case 11:{_fccbd =(_caebd )-1;_bfdd .emit (_abcee ,_dgbfd [_ffefd :_caebd ]);};case 14:{_fccbd =(_caebd )-1;_bfdd .emit (_cdcg ,_dgbfd [_ffefd :_caebd ]);};case 15:{_fccbd =(_caebd )-1;_bfdd .emit (_ddce ,_dgbfd [_ffefd +1:_caebd -1]);};};};};goto _fgcea ;_fgcea :_efabg =int (_agdd [_cdbcf ]);_bccb =uint (_agda [_efabg ]);_efabg ++;for ;_bccb > 0;_bccb --{_efabg ++;switch _agda [_efabg -1]{case 0:_ffefd =0;case 1:_abgf =0;};};if _cdbcf ==0{goto _ddaea ;};if _fccbd ++;_fccbd !=_ccec {goto _bgddg ;};_agaba :{};if _fccbd ==_eeee {switch _cdbcf {case 1:goto _edef ;case 2:goto _edef ;case 31:goto _acgc ;case 14:goto _edef ;case 15:goto _edef ;case 32:goto _dfbcc ;case 17:goto _edef ;case 33:goto _bcdag ;case 18:goto _edef ;case 19:goto _edef ;case 34:goto _fcbce ;case 35:goto _fbed ;case 36:goto _fbed ;case 23:goto _fdfec ;case 37:goto _fbed ;case 38:goto _edbg ;case 39:goto _cbca ;case 40:goto _ceed ;case 41:goto _ceed ;case 42:goto _ceed ;case 43:goto _bcdag ;case 44:goto _edef ;case 45:goto _ceed ;case 46:goto _ceed ;case 47:goto _ceed ;case 48:goto _ceed ;case 49:goto _ceed ;case 50:goto _ceed ;case 51:goto _ceed ;case 52:goto _ceed ;case 53:goto _ceed ;case 54:goto _ceed ;case 55:goto _ceed ;case 56:goto _ceed ;case 57:goto _ceed ;case 58:goto _ceed ;case 59:goto _edef ;};};_ddaea :{};};if _ffefd > 0{copy (_dgbfd [0:],_dgbfd [_ffefd :]);};};_ =_eeee ;if _cdbcf ==_aabg {_bfdd .emit (_bcbbd ,nil );};close (_bfdd ._fadfc );};func _eaa (_gbb string ,_ba uint32 )string {_fdc :=_gee .ColumnToIndex (_gbb );if _fdc ==_ba {return "\u0023\u0052\u0045F\u0021";}else if _fdc > _ba {return _gee .IndexToColumn (_fdc -1);}else {return _gbb ;};};func _eaec (_adea []Result ,_afgg string )(*couponArgs ,Result ){_cggg :=len (_adea );if _cggg !=3&&_cggg !=4{return nil ,MakeErrorResult (_afgg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfaf ,_dfcc ,_fcfc :=_adgbd (_adea [0],_adea [1],_afgg );if _fcfc .Type ==ResultTypeError {return nil ,_fcfc ;};if _adea [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afgg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afed :=_adea [2].ValueNumber ;if !_faee (_afed ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_afgg );};_aggb :=0;if _cggg ==4&&_adea [3].Type !=ResultTypeEmpty {if _adea [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afgg +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aggb =int (_adea [3].ValueNumber );if !_aba (_aggb ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_afgg );};};return &couponArgs {_bfaf ,_dfcc ,int (_afed ),_aggb },_eec ;};func _aeb (_cdb Result ,_beaf ,_fcbf string )(float64 ,Result ){var _dedf float64 ;switch _cdb .Type {case ResultTypeNumber :_dedf =float64 (int (_cdb .ValueNumber ));case ResultTypeString :_ebacb :=DateValue ([]Result {_cdb });if _ebacb .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_beaf +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_fcbf );};_dedf =_ebacb .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_fcbf );};if _dedf < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_beaf +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _dedf ,_eec ;};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acbf :=args [0].Type ;for _ ,_cffc :=range args {if _cffc .Type !=_acbf {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _acbf {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_cgcee :=len (args [0].ListValues ());_ggac :=make ([]float64 ,_cgcee );for _cfdcc :=range _ggac {_ggac [_cfdcc ]=1.0;};for _ ,_bfebd :=range args {if len (_bfebd .ListValues ())!=_cgcee {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _ddbc ,_gddf :=range _bfebd .ListValues (){_gddf =_gddf .AsNumber ();if _gddf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_ggac [_ddbc ]=_ggac [_ddbc ]*_gddf .ValueNumber ;};};_ebgb :=0.0;for _ ,_agba :=range _ggac {_ebgb +=_agba ;};return MakeNumberResult (_ebgb );};return MakeNumberResult (1.0);};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcfc :=ctx .GetEpoch ();_cgdec ,_bgg :=_acag (args [0].Value (),_dcfc );if _bgg !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_cgdec .Year ()));};type cumulArgs struct{_gfeeb float64 ;_gccc float64 ;_gdfb float64 ;_afdg float64 ;_dfgd float64 ;_aab int ;};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_cebab HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fbbcc :=_cebab .horizontalRangeReference ();if _bfce ,_dfdag :=ev .GetFromCache (_fbbcc );_dfdag {return _bfce ;};_gbcad ,_fefd :=_bcbac (ctx ,_cebab ._dedaf ,_cebab ._dgfga );_bcda :=_gfdb (ctx ,ev ,_gbcad ,_fefd );ev .SetCache (_fbbcc ,_bcda );return _bcda ;};func _adffc (_eaceb []Result )[]float64 {_fbfcf :=make ([]float64 ,0);for _ ,_ffee :=range _eaceb {if _ffee .Type ==ResultTypeEmpty {continue ;};_ffee =_ffee .AsNumber ();switch _ffee .Type {case ResultTypeNumber :if !_ffee .IsBoolean {_fbfcf =append (_fbfcf ,_ffee .ValueNumber );};case ResultTypeList ,ResultTypeArray :_fbfcf =append (_fbfcf ,_adffc (_ffee .ListValues ())...);case ResultTypeString :default:_edd .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffee .Type );};};return _fbfcf ;};

// String returns a string representation of PrefixExpr.
func (_fgbb PrefixExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021%\u0073",_fgbb ._edfcc .String (),_fgbb ._fdcd .String ());};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_decc ,_eada :=_cdfe ("\u0046\u0049\u004e\u0044",args );if _eada .Type !=ResultTypeEmpty {return _eada ;};_ccef :=_decc ._gbfbd ;if _ccef ==""{return MakeNumberResult (1.0);};_dafde :=_decc ._egaf ;_fceg :=_decc ._ccab -1;_ebgfe :=1;_dbee :=0;for _abgd :=range _dafde {if _abgd !=0{_fbfbb :=1;if _abgd -_dbee > 1{_fbfbb =2;};_ebgfe +=_fbfbb ;};if _ebgfe > _fceg {_gcbd :=_ca .Index (_dafde [_abgd :],_ccef );if _gcbd ==0{return MakeNumberResult (float64 (_ebgfe ));};};_dbee =_abgd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Error is an error expression.
type Error struct{_bed string };func _aecce (_fbfe Context ,_ebcbg ,_bgfbd string )(string ,string ){_agdaa :=_ebcbg +"\u0031";_adgbe :=_fbfe .LastRow (_ebcbg );_bdegf :=_bgfbd +_dc .Itoa (_adgbe );return _agdaa ,_bdegf ;};

// Update returns the same object as updating sheet references does not affect Error.
func (_dgb Error )Update (q *_ed .UpdateQuery )Expression {return _dgb };func _acee (_feac string )bool {for _ ,_gge :=range _cea {_gag :=_gge .FindStringSubmatch (_feac );if len (_gag )> 1{return true ;};};return false ;};

// Value returns a string version of the result.
func (_gbfdf Result )Value ()string {switch _gbfdf .Type {case ResultTypeNumber :_aeeea :=_dc .FormatFloat (_gbfdf .ValueNumber ,'f',-1,64);if len (_aeeea )> 12{_dceb :=12;for _dbegb :=_dceb ;_dbegb > 0&&_aeeea [_dbegb ]=='0';_dbegb --{_dceb --;};_aeeea =_aeeea [0:_dceb +1];};return _aeeea ;case ResultTypeError :return _gbfdf .ValueString ;case ResultTypeString :return _gbfdf .ValueString ;case ResultTypeList :if len (_gbfdf .ValueList )==0{return "";};return _gbfdf .ValueList [0].Value ();case ResultTypeArray :if len (_gbfdf .ValueArray )==0||len (_gbfdf .ValueArray [0])==0{return "";};return _gbfdf .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Negate is a negate expression like -A1.
type Negate struct{_bedga Expression };

// Update updates the FunctionCall references after removing a row/column.
func (_cbff FunctionCall )Update (q *_ed .UpdateQuery )Expression {_egcaf :=[]Expression {};for _ ,_fggg :=range _cbff ._cebg {_fggaf :=_fggg .Update (q );_egcaf =append (_egcaf ,_fggaf );};return FunctionCall {_bgae :_cbff ._bgae ,_cebg :_egcaf };};

// Eval evaluates and returns the result of a constant array expression.
func (_ebf ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_cbg :=[][]Result {};for _ ,_cfd :=range _ebf ._gab {_dcf :=[]Result {};for _ ,_bac :=range _cfd {_dcf =append (_dcf ,_bac .Eval (ctx ,ev ));};_cbg =append (_cbg ,_dcf );};return MakeArrayResult (_cbg );};type countMode byte ;var _agdd []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _aba (_bcadg int )bool {return _bcadg >=0&&_bcadg <=4};func _fgac (_dca ,_ede int64 )float64 {return float64 (int (0.5+float64 ((_ede -_dca )/86400)))};func _cf (_aa ,_fce [][]Result )bool {if len (_aa )!=len (_fce ){return false ;};for _ac :=range _aa {if len (_aa [_ac ])!=len (_fce [_ac ]){return false ;};};return true ;};const _faef =57352;

// String returns a string of a range.
func (_abeed Range )String ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_abeed ._gfafd .String (),_abeed ._fdffa .String ());};func _edcd (_gdeag ,_gcdd ,_efeg ,_cbgc ,_dcab ,_gcdb float64 )float64 {var _cbbe ,_ebfac float64 ;_caage :=0.0;_ceab :=_ge .Ceil (_dcab );_edgb :=_gdeag -_gcdd ;_dgfdg :=false ;_fbd :=0.0;for _dgadf :=1.0;_dgadf <=_ceab ;_dgadf ++{if !_dgfdg {_cbbe =_ffae (_gdeag ,_gcdd ,_efeg ,_dgadf ,_gcdb );_fbd =_edgb /(_efeg -_dgadf +1);if _fbd > _cbbe {_ebfac =_fbd ;_dgfdg =true ;}else {_ebfac =_cbbe ;_edgb -=_cbbe ;};}else {_ebfac =_fbd ;};if _dgadf ==_ceab {_ebfac *=_dcab +1-_ceab ;};_caage +=_ebfac ;};return _caage ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;func _fdbf (_eba float64 )_dfc .Time {_dfda :=int64 ((_eba -_aeg )*_ebbg );return _dfc .Unix (0,_dfda ).UTC ();};type cmpResult int8 ;

// Eval evaluates and returns the result of the cell reference.
func (_bdc CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_bdc ._gad ,ev )};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgaee :=args [0].AsNumber ();if _fgaee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfega :=0;if len (args )> 1{_agcg :=args [1];if _agcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_bfega =int (_agcg .ValueNumber );if _bfega < 0{_bfega =0;}else if _bfega > 4{_bfega =4;};};_eaacf :=_gbcbd ;switch _bfega {case 1:_eaacf =_babf ;case 2:_eaacf =_gcgf ;case 3:_eaacf =_fgbf ;case 4:_eaacf =_aacc ;};_bfagg :=_ge .Trunc (_fgaee .ValueNumber );_efab :=_f .Buffer {};for _ ,_dgadg :=range _eaacf {for _bfagg >=_dgadg ._fage {_efab .WriteString (_dgadg ._gfbdd );_bfagg -=_dgadg ._fage ;};};return MakeStringResult (_efab .String ());};var _cadd string =string ([]byte {92});var _bedad []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dgedg :=args [0].AsNumber ();if _dgedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daefd :=_ge .Signbit (_dgedg .ValueNumber );_acdae ,_abfb :=_ge .Modf ((_dgedg .ValueNumber -1)/2);_bffe :=_acdae *2+1;if _abfb !=0{if !_daefd {_bffe +=2;}else {_bffe -=2;};};return MakeNumberResult (_bffe );};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_dfaf ,_ceecg string };

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ca .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_agffc :v };};type plex struct{_agcbf chan *node ;_cecc Expression ;_cecg string ;};func _feff (_bbfb string )bool {for _ ,_eddf :=range _gcd {_eefe :=_eddf .FindStringSubmatch (_bbfb );if len (_eefe )> 1{return true ;};};return false ;};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eeda :=args [0].AsString ();if _eeda .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_gdeaga :=args [1].AsNumber ();if _gdeaga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgadb :=_eeda .ValueString ;if len (_fgadb )> 2&&(_ca .HasPrefix (_fgadb ,"\u0030\u0078")||_ca .HasPrefix (_fgadb ,"\u0030\u0058")){_fgadb =_fgadb [2:];};_eeaed ,_gcaf :=_dc .ParseInt (_fgadb ,int (_gdeaga .ValueNumber ),64);if _gcaf !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_eeaed ));};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_cdeg ,_bae :=_eaec (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _bae .Type ==ResultTypeError {return _bae ;};return MakeNumberResult (_cfdgf (_cdeg ._bddab ,_cdeg ._dgfa ,_cdeg ._fcaf ,_cdeg ._gaaf ));};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_gbcca NamedRangeRef )Update (q *_ed .UpdateQuery )Expression {return _gbcca };func (_egbbd *Lexer )emit (_deeg tokenType ,_gbdg []byte ){if _fgec {_g .Println ("\u0065\u006d\u0069\u0074",_deeg ,_bccg (string (_gbdg )));};_egbbd ._fadfc <-&node {_deeg ,string (_gbdg )};};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efgd :=args [0].AsNumber ();if _efgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _efgd .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dbbf :=float64 (1);_aceg :=_ge .Trunc (_efgd .ValueNumber );for _dcfbg :=_aceg ;_dcfbg > 1;_dcfbg -=2{_dbbf *=_dcfbg ;};return MakeNumberResult (_dbbf );};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bbef :=int (args [0].ValueNumber );if _bbef < 0||_bbef >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _bbef <=1899{_bbef +=1900;};_gdgg :=_dfc .Month (args [1].ValueNumber );_fb :=int (args [2].ValueNumber );_bgec :=_gcfd (_bbef ,_gdgg ,_fb );_cee :=_fgac (_gde ,_bgec )+1;if _cee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_cee );};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bdag Result )ListValues ()[]Result {if _bdag .Type ==ResultTypeArray {_eece :=[]Result {};for _ ,_babcg :=range _bdag .ValueArray {for _ ,_dfedd :=range _babcg {_eece =append (_eece ,_dfedd );};};return _eece ;};if _bdag .Type ==ResultTypeList {return _bdag .ValueList ;};return nil ;};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_dacec :=len (args );if _dacec !=5&&_dacec !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bafg ,_dgc ,_dfccf :=_adgbd (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dfccf .Type ==ResultTypeError {return _dfccf ;};_baag ,_dfccf :=_aeb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dfccf .Type ==ResultTypeError {return _dfccf ;};if _baag >=_bafg {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gafe :=args [3].ValueNumber ;if _gafe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_edfa :=args [4].ValueNumber ;if _edfa <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_fafe :=0;if _dacec ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fafe =int (args [5].ValueNumber );if !_aba (_fafe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_febad ,_dfccf :=_adgb (_baag ,_dgc ,_fafe );if _dfccf .Type ==ResultTypeError {return _dfccf ;};_aade ,_dfccf :=_adgb (_baag ,_bafg ,_fafe );if _dfccf .Type ==ResultTypeError {return _dfccf ;};_cfdc ,_dfccf :=_adgb (_bafg ,_dgc ,_fafe );if _dfccf .Type ==ResultTypeError {return _dfccf ;};_dgfc :=1+_febad *_gafe ;_dgfc /=_edfa /100+_aade *_gafe ;_dgfc --;_dgfc /=_cfdc ;return MakeNumberResult (_dgfc );};const _bbff =57365;var _afgc ,_dbcag ,_dgfac ,_eacg ,_fageb ,_dbge *_ec .Regexp ;

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ca .NewReader (s ));};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aegg :=args [0].ValueNumber ;if _aegg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_fabde ,_beaff :=_ddcg (args [1],args [2],"\u0058\u004e\u0050\u0056");if _beaff .Type ==ResultTypeError {return _beaff ;};_acaad :=_fabde ._bacf ;_abbgd :=_fabde ._dgdc ;_ebdf :=0.0;_gdfc :=_abbgd [0];for _cgdf ,_geecf :=range _acaad {_ebdf +=_geecf /_ge .Pow (1+_aegg ,(_abbgd [_cgdf ]-_gdfc )/365);};return MakeNumberResult (_ebdf );};const _dfd ="\u0028\u0020\u0028"+_ddb +"\u007c"+_ddg +"\u007c"+_edad +"\u007c"+_eef +"\u0029\u0029\u003f\u0024";func init (){_bafc ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dgd :=args [0];switch _dgd .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_fece :=_fdbf (_dgd .ValueNumber );return MakeNumberResult (float64 (_fece .Month ()));case ResultTypeString :_gbab :=_ca .ToLower (_dgd .ValueString );if !_acee (_gbab ){_ ,_ ,_ ,_ ,_gef ,_bda :=_dbba (_gbab );if _bda .Type ==ResultTypeError {_bda .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _bda ;};if _gef {return MakeNumberResult (1);};};_ ,_adec ,_ ,_ ,_bbf :=_ceea (_gbab );if _bbf .Type ==ResultTypeError {return _bbf ;};return MakeNumberResult (float64 (_adec ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_gfaf (args ,_ccbac ));};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_aagd ,_ffdf :=_dc .ParseFloat (v ,64);if _ffdf !=nil {_edd .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_ffdf );};return Number {_eged :_aagd };};type yyParserImpl struct{_bdffc yySymType ;_dgdgd [_cfedc ]yySymType ;_cagad int ;};const (_ebffa rmode =iota ;_fgfac ;_fcfaf ;);func _dgfge (_cfcg string ,_dfab []Result )(*parsedReplaceObject ,Result ){if len (_dfab )!=4{return nil ,MakeErrorResult (_cfcg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dfab [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_cfcg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_decb :=_dfab [0].ValueString ;if _dfab [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cfcg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_cfeac :=int (_dfab [1].ValueNumber )-1;if _dfab [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cfcg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbefe :=int (_dfab [2].ValueNumber );if _dfab [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_cfcg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_ddgc :=_dfab [3].ValueString ;return &parsedReplaceObject {_decb ,_cfeac ,_gbefe ,_ddgc },_eec ;};

// Eval evaluates and returns the result of a Negate expression.
func (_dfbda Negate )Eval (ctx Context ,ev Evaluator )Result {_adfcb :=_dfbda ._bedga .Eval (ctx ,ev );if _adfcb .Type ==ResultTypeNumber {return MakeNumberResult (-_adfcb .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};func _aeag (_ggbda []Result ,_gefbe bool ,_abcc string )Result {var _eabg ,_ccg string ;if _gefbe {_eabg ="\u0074\u0068\u0072e\u0065";_ccg ="\u006f\u0064\u0064";}else {_eabg ="\u0074\u0077\u006f";_ccg ="\u0065\u0076\u0065\u006e";};_eeab :=len (_ggbda );if (_gefbe &&_eeab < 3)||(!_gefbe &&_eeab < 2){return MakeErrorResult (_abcc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_eabg +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_eeab /2*2==_eeab )==_gefbe {return MakeErrorResult (_abcc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ccg +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_afgcb :=-1;_aedcd :=-1;for _fadc :=0;_fadc < _eeab ;_fadc +=2{_cbdfa :=_ggbda [_fadc ];if _cbdfa .Type !=ResultTypeArray &&_cbdfa .Type !=ResultTypeList {return MakeErrorResult (_abcc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_ccdd :=_bfff (_cbdfa );if _aedcd ==-1{_aedcd =len (_ccdd );_afgcb =len (_ccdd [0]);}else if len (_ccdd )!=_aedcd ||len (_ccdd [0])!=_afgcb {return MakeErrorResult (_abcc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _gefbe &&_fadc ==0{_fadc --;};};return _eec ;};const _acadb =57358;func _ggf (_bb BinOpType ,_bdf [][]Result ,_gea Result )Result {_gd :=[][]Result {};for _cfc :=range _bdf {_ea :=_fd (_bb ,_bdf [_cfc ],_gea );if _ea .Type ==ResultTypeError {return _ea ;};_gd =append (_gd ,_ea .ValueList );};return MakeArrayResult (_gd );};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _aefgg ()yyParser {return &yyParserImpl {}};

// Update updates references in the Range after removing a row/column.
func (_fdag Range )Update (q *_ed .UpdateQuery )Expression {_egcf :=_fdag ;if q .UpdateCurrentSheet {_egcf ._gfafd =_fdag ._gfafd .Update (q );_egcf ._fdffa =_fdag ._fdffa .Update (q );};return _egcf ;};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_fegg ,_fgff :=_fbg (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _fgff .Type ==ResultTypeError {return _fgff ;};_gdfg :=_fegg ._aebc ;_abea :=_fegg ._cba ;_ggcc :=_fegg ._degb ;_dfag :=_fegg ._egfe ;_ffeg :=_fegg ._fgba ;_bcab :=_fegg ._cbfg ;_ddae :=_ega (_gdfg ,_abea ,_ggcc ,_dfag ,_ffeg ,_bcab );if _ddae .Type ==ResultTypeError {return _ddae ;};_cafg :=_ddae .ValueNumber /(1.0+_dfag /_ffeg );return MakeNumberResult (_cafg );};func _cdga (_eaga []Result ,_fgdc rmode )Result {if len (_eaga )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_edebd :=_eaga [0].AsNumber ();if _edebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcad :=_eaga [1].AsNumber ();if _fcad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dade :=_fcad .ValueNumber ;_fgafb :=_edebd .ValueNumber ;_cefb :=1.0;if _dade > 0{_cefb =_ge .Pow (1/10.0,_dade );}else {_cefb =_ge .Pow (10.0,-_dade );};_fgafb ,_ggfb :=_ge .Modf (_fgafb /_cefb );switch _fgdc {case _ebffa :const _geggd =0.499999999;if _ggfb >=_geggd {_fgafb ++;}else if _ggfb <=-_geggd {_fgafb --;};case _fgfac :case _fcfaf :if _ggfb > 0{_fgafb ++;}else if _ggfb < 0{_fgafb --;};};return MakeNumberResult (_fgafb *_cefb );};func _gdcc (_dgedd []Result ,_ffac []string ,_gdgff bool )[]string {for _ ,_fgebc :=range _dgedd {switch _fgebc .Type {case ResultTypeEmpty :if !_gdgff {_ffac =append (_ffac ,"");};case ResultTypeString :if _fgebc .ValueString !=""||!_gdgff {_ffac =append (_ffac ,_fgebc .ValueString );};case ResultTypeNumber :_ffac =append (_ffac ,_fgebc .Value ());case ResultTypeList :_ffac =_fbfag (_ffac ,_gdcc (_fgebc .ValueList ,[]string {},_gdgff ));case ResultTypeArray :for _ ,_dadd :=range _fgebc .ValueArray {_ffac =_fbfag (_ffac ,_gdcc (_dadd ,[]string {},_gdgff ));};};};return _ffac ;};func _fefg (_fcfa ,_bbgc []float64 ,_efcb float64 )float64 {_eceda :=_efcb +1;_bag :=_fcfa [0];_cggd :=len (_fcfa );_bfge :=_bbgc [0];for _dacg :=1;_dacg < _cggd ;_dacg ++{_bag +=_fcfa [_dacg ]/_ge .Pow (_eceda ,(_bbgc [_dacg ]-_bfge )/365);};return _bag ;};

// HasFormula returns FALSE for the invalid reference context.
func (_adeag *ivr )HasFormula (cellRef string )bool {return false };func (_gefa *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_aead string };

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_degga :=len (args );if _degga < 3||_degga > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_effgb :=args [0].ValueNumber ;if _effgb !=float64 (int (_effgb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdaf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adcd :=args [2].ValueNumber ;_gdac :=0.0;if _degga >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdac =args [3].ValueNumber ;};_aeff :=0.0;if _degga >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aeff =args [4].ValueNumber ;if _aeff !=0{_aeff =1;};};_bgd :=0.1;if _degga >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgd =args [5].ValueNumber ;};_bgebe :=100;_dace :=0;_dega :=false ;_gdgdc :=1e-6;_degf :=_bgd ;for _dace < _bgebe &&!_dega {_abbe :=_ge .Pow (_degf +1,_effgb );_fag :=_ge .Pow (_degf +1,_effgb -1);_edce :=_degf *_aeff +1;_dafd :=_cdaf *(_abbe -1);_adac :=_gdac +_abbe *_adcd +_dafd *_edce /_degf ;_deaa :=_effgb *_fag *_adcd -_dafd *_edce /_ge .Pow (_degf ,2);_dfgbf :=(_effgb *_cdaf *_fag *_edce +_dafd *_aeff )/_degf ;_dgff :=_adac /(_deaa +_dfgbf );if _ge .Abs (_dgff )< _gdgdc {_dega =true ;};_dace ++;_degf -=_dgff ;};return MakeNumberResult (_degf );};func _ceea (_fed string )(int ,int ,int ,bool ,Result ){_afcf :="";_aae :=[]string {};for _fdcad ,_efg :=range _gdf {_aae =_efg .FindStringSubmatch (_fed );if len (_aae )> 1{_afcf =_fdcad ;break ;};};if _afcf ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_ggea :=false ;var _bab ,_faed ,_abd int ;var _eegg error ;switch _afcf {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_faed ,_eegg =_dc .Atoi (_aae [1]);if _eegg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_abd ,_eegg =_dc .Atoi (_aae [3]);if _eegg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_bab ,_eegg =_dc .Atoi (_aae [5]);if _eegg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};if _bab < 0||_bab > 9999||(_bab > 99&&_bab < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_bab =_ccff (_bab );_ggea =_aae [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_faed =_affa [_aae [1]];_abd ,_eegg =_dc .Atoi (_aae [14]);if _eegg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_bab ,_eegg =_dc .Atoi (_aae [16]);if _eegg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};if _bab < 0||_bab > 9999||(_bab > 99&&_bab < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_bab =_ccff (_bab );_ggea =_aae [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_gdggg ,_bede :=_dc .Atoi (_aae [1]);if _bede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_acdc ,_bede :=_dc .Atoi (_aae [3]);if _bede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_ebaa ,_bede :=_dc .Atoi (_aae [5]);if _bede !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};if _gdggg >=1900&&_gdggg < 10000{_bab =_gdggg ;_faed =_acdc ;_abd =_ebaa ;}else if _gdggg > 0&&_gdggg < 13{_faed =_gdggg ;_abd =_acdc ;_bab =_ebaa ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_ggea =_aae [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_bab ,_eegg =_dc .Atoi (_aae [16]);if _eegg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_faed =_affa [_aae [3]];_abd ,_eegg =_dc .Atoi (_aae [1]);if _eegg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};_ggea =_aae [19]=="";};if !_fga (_bab ,_faed ,_abd ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cegc );};return _bab ,_faed ,_abd ,_ggea ,_eec ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_cfa CellRef )Update (q *_ed .UpdateQuery )Expression {if q .UpdateCurrentSheet {_cfa ._gad =_db (_cfa ._gad ,q );};return _cfa ;};func _bc (_gg BinOpType ,_deg ,_fa []Result )Result {_af :=[]Result {};for _acf :=range _deg {_ga :=_deg [_acf ].AsNumber ();_aff :=_fa [_acf ].AsNumber ();if _ga .Type !=ResultTypeNumber ||_aff .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gg {case BinOpTypePlus :_af =append (_af ,MakeNumberResult (_ga .ValueNumber +_aff .ValueNumber ));case BinOpTypeMinus :_af =append (_af ,MakeNumberResult (_ga .ValueNumber -_aff .ValueNumber ));case BinOpTypeMult :_af =append (_af ,MakeNumberResult (_ga .ValueNumber *_aff .ValueNumber ));case BinOpTypeDiv :if _aff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_af =append (_af ,MakeNumberResult (_ga .ValueNumber /_aff .ValueNumber ));case BinOpTypeExp :_af =append (_af ,MakeNumberResult (_ge .Pow (_ga .ValueNumber ,_aff .ValueNumber )));case BinOpTypeLT :_af =append (_af ,MakeBoolResult (_ga .ValueNumber < _aff .ValueNumber ));case BinOpTypeGT :_af =append (_af ,MakeBoolResult (_ga .ValueNumber > _aff .ValueNumber ));case BinOpTypeEQ :_af =append (_af ,MakeBoolResult (_ga .ValueNumber ==_aff .ValueNumber ));case BinOpTypeLEQ :_af =append (_af ,MakeBoolResult (_ga .ValueNumber <=_aff .ValueNumber ));case BinOpTypeGEQ :_af =append (_af ,MakeBoolResult (_ga .ValueNumber >=_aff .ValueNumber ));case BinOpTypeNE :_af =append (_af ,MakeBoolResult (_ga .ValueNumber !=_aff .ValueNumber ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gg ));};};return MakeListResult (_af );};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_cafcc Expression ;_fafa ,_abdc int ;};

// GetFormat returns an empty string for the invalid reference context.
func (_bdgfe *ivr )GetFormat (cellRef string )string {return ""};const _geba =57357;const _cfedc =16;func _gbcb (_gfgd []Result ,_ecee bool )Result {var _fgfa string ;if _ecee {_fgfa ="\u004c\u0041\u0052G\u0045";}else {_fgfa ="\u0053\u004d\u0041L\u004c";};if len (_gfgd )!=2{return MakeErrorResult (_fgfa +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecec :=_gfgd [0];var _dfad [][]Result ;switch _ecec .Type {case ResultTypeArray :_dfad =_ecec .ValueArray ;case ResultTypeList :_dfad =[][]Result {_ecec .ValueList };default:return MakeErrorResult (_fgfa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_dfad )==0{return MakeErrorResult (_fgfa +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _gfgd [1].Type !=ResultTypeNumber {return MakeErrorResult (_fgfa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_gcabg :=_gfgd [1].ValueNumber ;if _gcabg < 1{return MakeErrorResultType (ErrorTypeNum ,_fgfa +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_bacg :=int (_gcabg );if float64 (_bacg )!=_gcabg {return MakeErrorResultType (ErrorTypeNum ,_fgfa +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_gggad :=[]float64 {};for _ ,_ecdg :=range _dfad {for _ ,_gdade :=range _ecdg {if _gdade .Type ==ResultTypeNumber {_gggad =append (_gggad ,_gdade .ValueNumber );};};};if _bacg > len (_gggad ){return MakeErrorResultType (ErrorTypeNum ,_fgfa +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_debb :=_cc .MergeSort (_gggad );if _ecee {return MakeNumberResult (_debb [len (_debb )-_bacg ]);}else {return MakeNumberResult (_debb [_bacg -1]);};};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ccgd :=args [0];if _ccgd .Type ==ResultTypeError ||_ccgd .Type ==ResultTypeString {return _ccgd ;};return _eec ;};type defEval struct{evCache ;_cgb bool ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fgcc (args ,false )};func _gfgbg (_dcef Result ,_gacc ,_fgedb string )(float64 ,Result ){switch _dcef .Type {case ResultTypeEmpty :return 0,_eec ;case ResultTypeNumber :return _dcef .ValueNumber ,_eec ;case ResultTypeString :_cacf ,_cfec :=_dc .ParseFloat (_dcef .ValueString ,64);if _cfec !=nil {return 0,MakeErrorResult (_fgedb +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_gacc );};return _cacf ,_eec ;default:return 0,MakeErrorResult (_gacc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fgedb +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_fdfg :=len (args );if _fdfg < 3||_fdfg > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cddc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aaaf :=args [2].ValueNumber ;_gga :=0.0;if _fdfg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gga =args [3].ValueNumber ;};_egd :=0.0;if _fdfg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_egd =args [4].ValueNumber ;if _egd !=0{_egd =1;};};_gafcc :=_cddc *(1+_cfde *_egd )-_gga *_cfde ;_edgd :=(_aaaf *_cfde +_cddc *(1+_cfde *_egd ));return MakeNumberResult (_ge .Log (_gafcc /_edgd )/_ge .Log (1+_cfde ));};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_ffga :=len (args );if _ffga < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcdd :=args [0].ValueNumber ;if _fcdd ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fgab :=[]float64 {};for _ ,_ddda :=range args [1:]{switch _ddda .Type {case ResultTypeNumber :_fgab =append (_fgab ,_ddda .ValueNumber );case ResultTypeArray ,ResultTypeList :_beff :=_bfff (_ddda );for _ ,_gfgg :=range _beff {for _ ,_begf :=range _gfgg {if _begf .Type ==ResultTypeNumber &&!_begf .IsBoolean {_fgab =append (_fgab ,_begf .ValueNumber );};};};};};_gbabf :=0.0;for _aabf ,_egcef :=range _fgab {_gbabf +=_egcef /_ge .Pow (1+_fcdd ,float64 (_aabf )+1);};return MakeNumberResult (_gbabf );};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_fbbg PrefixHorizontalRange )Update (q *_ed .UpdateQuery )Expression {return _fbbg };

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _gbcb (args ,true )};

// String returns a string representation for Negate.
func (_bfebb Negate )String ()string {return "\u002d"+_bfebb ._bedga .String ()};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egcg :=args [0].AsNumber ();if _egcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _fdadf float64 ;_gbfgg :=args [1].AsNumber ();if _gbfgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdadf =_gbfgg .ValueNumber ;if _fdadf < 0&&_egcg .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_ebadc :=_egcg .ValueNumber ;_ebadc ,_dgbf :=_ge .Modf (_ebadc /_fdadf );if _dgbf !=0{if _egcg .ValueNumber < 0&&_dgbf < 0{_ebadc --;};};return MakeNumberResult (_ebadc *_fdadf );};func _ccfde (_dfedc Reference ,_fbgb Context )bool {return _fbgb .Sheet (_dfedc .Value )==InvalidReferenceContext ;};const _dae =_dfc .Second *1;

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfbfa :=args [0].ValueNumber ;if _cfbfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bgeeg :=float64 (int (args [1].ValueNumber ));if _bgeeg < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_ge .Pow ((1+_cfbfa /_bgeeg ),_bgeeg )-1);};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dbgg :=args [0];if _dbgg .Type !=ResultTypeArray &&_dbgg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cegff :=_dbgg .ValueArray ;if len (_cegff )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_cegff [0])));};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cdga (args ,_ebffa )};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aafc :=args [0].AsNumber ();_cfce :=args [1].AsNumber ();if _aafc .Type !=ResultTypeNumber ||_cfce .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _cfce .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_dcafe ,_agaf :=_ge .Modf (_aafc .ValueNumber /_cfce .ValueNumber );if _agaf < 0{_dcafe --;};return MakeNumberResult (_aafc .ValueNumber -_cfce .ValueNumber *_dcafe );};const _bddc =-1000;

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_cgda :=_ca .Split (v ,"\u003a");if len (_cgda )!=2{return nil ;};if _cgda [0]> _cgda [1]{_cgda [0],_cgda [1]=_cgda [1],_cgda [0];};return PrefixVerticalRange {_gagce :pfx ,_ggafd :_cgda [0],_cbffg :_cgda [1]};};func (_agfc *yyParserImpl )Parse (yylex yyLexer )int {_cbeda :=_dfc .Now ();var _fbeb int ;var _dggf yySymType ;var _fcff []yySymType ;_ =_fcff ;_bcbbc :=_agfc ._dgdgd [:];Nerrs :=0;Errflag :=0;_ggcg :=0;_agfc ._cagad =-1;_bdccc :=-1;defer func (){_ggcg =-1;_agfc ._cagad =-1;_bdccc =-1}();_ffdd :=-1;goto _cceb ;_fgebe :return 0;_edbdc :return 1;_cceb :if _feaa (_cbeda ){_edd .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _edbdc ;};if _aefd >=4{_g .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_aeae (_bdccc ),_dfcg (_ggcg ));};_ffdd ++;if _ffdd >=len (_bcbbc ){_bdgafd :=make ([]yySymType ,len (_bcbbc )*2);copy (_bdgafd ,_bcbbc );_bcbbc =_bdgafd ;};_bcbbc [_ffdd ]=_dggf ;_bcbbc [_ffdd ]._cafc =_ggcg ;_fcgbb :if _feaa (_cbeda ){_edd .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _edbdc ;};_fbeb =_ccdgc [_ggcg ];if _fbeb <=_bddc {goto _baee ;};if _agfc ._cagad < 0{_agfc ._cagad ,_bdccc =_ccbe (yylex ,&_agfc ._bdffc );};_fbeb +=_bdccc ;if _fbeb < 0||_fbeb >=_aagag {goto _baee ;};_fbeb =_ddde [_fbeb ];if _adeed [_fbeb ]==_bdccc {_agfc ._cagad =-1;_bdccc =-1;_dggf =_agfc ._bdffc ;_ggcg =_fbeb ;if Errflag > 0{Errflag --;};goto _cceb ;};_baee :if _feaa (_cbeda ){_edd .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _edbdc ;};_fbeb =_ceeacd [_ggcg ];if _fbeb ==-2{if _agfc ._cagad < 0{_agfc ._cagad ,_bdccc =_ccbe (yylex ,&_agfc ._bdffc );};_dabd :=0;for {if _dcde [_dabd +0]==-1&&_dcde [_dabd +1]==_ggcg {break ;};_dabd +=2;};for _dabd +=2;;_dabd +=2{_fbeb =_dcde [_dabd +0];if _fbeb < 0||_fbeb ==_bdccc {break ;};};_fbeb =_dcde [_dabd +1];if _fbeb < 0{goto _fgebe ;};};if _fbeb ==0{switch Errflag {case 0:yylex .Error (_aced (_ggcg ,_bdccc ));Nerrs ++;if _aefd >=1{_g .Printf ("\u0025\u0073",_dfcg (_ggcg ));_g .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_aeae (_bdccc ));};fallthrough;case 1,2:Errflag =3;for _ffdd >=0{_fbeb =_ccdgc [_bcbbc [_ffdd ]._cafc ]+_bfgff ;if _fbeb >=0&&_fbeb < _aagag {_ggcg =_ddde [_fbeb ];if _adeed [_ggcg ]==_bfgff {goto _cceb ;};};if _aefd >=2{_g .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_bcbbc [_ffdd ]._cafc );};_ffdd --;};goto _edbdc ;case 3:if _aefd >=2{_g .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_aeae (_bdccc ));};if _bdccc ==_dead {goto _edbdc ;};_agfc ._cagad =-1;_bdccc =-1;goto _fcgbb ;};};if _aefd >=2{_g .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_fbeb ,_dfcg (_ggcg ));};_cfae :=_fbeb ;_edcf :=_ffdd ;_ =_edcf ;_ffdd -=_bfaef [_fbeb ];if _ffdd +1>=len (_bcbbc ){_gbcf :=make ([]yySymType ,len (_bcbbc )*2);copy (_gbcf ,_bcbbc );_bcbbc =_gbcf ;};_dggf =_bcbbc [_ffdd +1];_fbeb =_caeef [_fbeb ];_eefed :=_dgaeg [_fbeb ];_ggdg :=_eefed +_bcbbc [_ffdd ]._cafc +1;if _ggdg >=_aagag {_ggcg =_ddde [_eefed ];}else {_ggcg =_ddde [_ggdg ];if _adeed [_ggcg ]!=-_fbeb {_ggcg =_ddde [_eefed ];};};switch _cfae {case 1:_fcff =_bcbbc [_edcf -1:_edcf +1];{yylex .(*plex )._cecc =_dggf ._egag ;};case 3:_fcff =_bcbbc [_edcf -2:_edcf +1];{_dggf ._egag =_fcff [2]._egag ;};case 4:_fcff =_bcbbc [_edcf -4:_edcf +1];{};case 5:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewBool (_fcff [1]._deab ._gagbd );};case 6:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewNumber (_fcff [1]._deab ._gagbd );};case 7:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewString (_fcff [1]._deab ._gagbd );};case 8:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewError (_fcff [1]._deab ._gagbd );};case 9:_fcff =_bcbbc [_edcf -2:_edcf +1];{_dggf ._egag =_fcff [2]._egag ;};case 10:_fcff =_bcbbc [_edcf -2:_edcf +1];{_dggf ._egag =NewNegate (_fcff [2]._egag );};case 15:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =_fcff [2]._egag ;};case 17:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewConstArrayExpr (_fcff [2]._decg );};case 18:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._decg =append (_dggf ._decg ,_fcff [1]._ccfdg );};case 19:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._decg =append (_fcff [1]._decg ,_fcff [3]._ccfdg );};case 20:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._ccfdg =append (_dggf ._ccfdg ,_fcff [1]._egag );};case 21:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._ccfdg =append (_fcff [1]._ccfdg ,_fcff [3]._egag );};case 23:_fcff =_bcbbc [_edcf -2:_edcf +1];{_dggf ._egag =NewPrefixExpr (_fcff [1]._egag ,_fcff [2]._egag );};case 25:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewSheetPrefixExpr (_fcff [1]._deab ._gagbd );};case 26:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewCellRef (_fcff [1]._deab ._gagbd );};case 27:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewRange (_fcff [1]._egag ,_fcff [3]._egag );};case 28:_fcff =_bcbbc [_edcf -4:_edcf +1];{_dggf ._egag =NewPrefixRangeExpr (_fcff [1]._egag ,_fcff [2]._egag ,_fcff [4]._egag );};case 29:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewNamedRangeRef (_fcff [1]._deab ._gagbd );};case 30:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewHorizontalRange (_fcff [1]._deab ._gagbd );};case 31:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._egag =NewVerticalRange (_fcff [1]._deab ._gagbd );};case 32:_fcff =_bcbbc [_edcf -2:_edcf +1];{_dggf ._egag =NewPrefixHorizontalRange (_fcff [1]._egag ,_fcff [2]._deab ._gagbd );};case 33:_fcff =_bcbbc [_edcf -2:_edcf +1];{_dggf ._egag =NewPrefixVerticalRange (_fcff [1]._egag ,_fcff [2]._deab ._gagbd );};case 34:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypePlus ,_fcff [3]._egag );};case 35:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeMinus ,_fcff [3]._egag );};case 36:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeMult ,_fcff [3]._egag );};case 37:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeDiv ,_fcff [3]._egag );};case 38:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeExp ,_fcff [3]._egag );};case 39:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeLT ,_fcff [3]._egag );};case 40:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeGT ,_fcff [3]._egag );};case 41:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeLEQ ,_fcff [3]._egag );};case 42:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeGEQ ,_fcff [3]._egag );};case 43:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeEQ ,_fcff [3]._egag );};case 44:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeNE ,_fcff [3]._egag );};case 45:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewBinaryExpr (_fcff [1]._egag ,BinOpTypeConcat ,_fcff [3]._egag );};case 47:_fcff =_bcbbc [_edcf -2:_edcf +1];{_dggf ._egag =NewFunction (_fcff [1]._deab ._gagbd ,nil );};case 48:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._egag =NewFunction (_fcff [1]._deab ._gagbd ,_fcff [2]._ccfdg );};case 49:_fcff =_bcbbc [_edcf -1:_edcf +1];{_dggf ._ccfdg =append (_dggf ._ccfdg ,_fcff [1]._egag );};case 50:_fcff =_bcbbc [_edcf -3:_edcf +1];{_dggf ._ccfdg =append (_fcff [1]._ccfdg ,_fcff [3]._egag );};case 53:_fcff =_bcbbc [_edcf -0:_edcf +1];{_dggf ._egag =NewEmptyExpr ();};};goto _cceb ;};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};const _gbg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _daaf (_aebfd Result ,_adacf int )[]Result {_gcgg :=[]Result {};switch _aebfd .Type {case ResultTypeList :_cddg :=_aebfd .ValueList ;_afad :=len (_cddg );for _dffa :=0;_dffa < _adacf ;_dffa ++{if _dffa < _afad {_gcgg =append (_gcgg ,_cddg [_dffa ]);}else {_gcgg =append (_gcgg ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _dafdd :=0;_dafdd < _adacf ;_dafdd ++{_gcgg =append (_gcgg ,_aebfd );};};return _gcgg ;};func _gbdde (_fdccf ,_fefaa Expression )(Expression ,Expression ,error ){_gcfeg ,_ecdbf :=_fdccf .(CellRef );if !_ecdbf {return nil ,nil ,_d .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fdccf .String ()));};_gacea ,_ecdbf :=_fefaa .(CellRef );if !_ecdbf {return nil ,nil ,_d .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fefaa .String ()));};_defg ,_dgfdf :=_gee .ParseCellReference (_gcfeg ._gad );if _dgfdf !=nil {return nil ,nil ,_dgfdf ;};_eedeb ,_bcddef :=_gee .ParseCellReference (_gacea ._gad );if _bcddef !=nil {return nil ,nil ,_bcddef ;};_feegf :=false ;if _defg .RowIdx > _eedeb .RowIdx {_feegf =true ;_defg .RowIdx ,_eedeb .RowIdx =_eedeb .RowIdx ,_defg .RowIdx ;};if _defg .ColumnIdx > _eedeb .ColumnIdx {_feegf =true ;_defg .ColumnIdx ,_eedeb .ColumnIdx =_eedeb .ColumnIdx ,_defg .ColumnIdx ;_defg .Column ,_eedeb .Column =_eedeb .Column ,_defg .Column ;};if _feegf {return NewCellRef (_defg .String ()),NewCellRef (_eedeb .String ()),nil ;};return _fdccf ,_fefaa ,nil ;};

// Reference returns an invalid reference for Error.
func (_dd Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gdace :=[]float64 {};for _ ,_ceec :=range args {switch _ceec .Type {case ResultTypeString :_daebc :=_ceec .AsNumber ();if _daebc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gdace =append (_gdace ,_daebc .ValueNumber );case ResultTypeList :_fgfae :=LCM (_ceec .ValueList );if _fgfae .Type !=ResultTypeNumber {return _fgfae ;};_gdace =append (_gdace ,_fgfae .ValueNumber );case ResultTypeNumber :_gdace =append (_gdace ,_ceec .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _ceec ;};};if len (_gdace )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _gdace [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_gdace )==1{return MakeNumberResult (_gdace [0]);};_gbba :=_gdace [0];for _ceabg :=1;_ceabg < len (_gdace );_ceabg ++{if _gdace [_ceabg ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbba =_fedc (_gbba ,_gdace [_ceabg ]);};return MakeNumberResult (_gbba );};func _gc (_be BinOpType ,_ada ,_cd [][]Result )Result {_ag :=[][]Result {};for _bg :=range _ada {_cab :=_bc (_be ,_ada [_bg ],_cd [_bg ]);if _cab .Type ==ResultTypeError {return _cab ;};_ag =append (_ag ,_cab .ValueList );};return MakeArrayResult (_ag );};func (_eaad *Lexer )Next ()*node {_eaad ._ccfea .Lock ();defer _eaad ._ccfea .Unlock ();if len (_eaad ._bagg )> 0{_ggffb :=_eaad ._bagg [0];_eaad ._bagg =_eaad ._bagg [1:];return _ggffb ;};return _eaad .nextRaw ();};var _cggcf *_ad .Rand ;

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bbegc :=args [0];if _bbegc .Type ==ResultTypeList {_gcbc :=[][]Result {};for _ ,_bggc :=range _bbegc .ValueList {_gcbc =append (_gcbc ,[]Result {_bggc });};return MakeArrayResult (_gcbc );};_adcdc :=make ([][]Result ,len (_bbegc .ValueArray [0]));for _ ,_faeb :=range _bbegc .ValueArray {for _egg ,_beda :=range _faeb {_adcdc [_egg ]=append (_adcdc [_egg ],_beda );};};return MakeArrayResult (_adcdc );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fabe :=args [0];switch _fabe .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_afgd :=0.0;_fbgc :=0.0;for _ ,_cdafd :=range _fabe .ValueString {_egdd :=0.0;switch _cdafd {case 'I':_egdd =1;case 'V':_egdd =5;case 'X':_egdd =10;case 'L':_egdd =50;case 'C':_egdd =100;case 'D':_egdd =500;case 'M':_egdd =1000;};_afgd +=_egdd ;switch {case _fbgc ==_egdd &&(_fbgc ==5||_fbgc ==50||_fbgc ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_fbgc ==_egdd :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _fbgc < _egdd {_afgd -=2*_fbgc ;};_fbgc =_egdd ;};return MakeNumberResult (_afgd );case ResultTypeError :return _fabe ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fabe .Type ));};};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_gfbde ,_fegb ,_afcg :=_gbdde (from ,to );if _afcg !=nil {_edd .Log .Debug (_afcg .Error ());return NewError (_afcg .Error ());};return PrefixRangeExpr {_ffege :pfx ,_gfeg :_gfbde ,_gagca :_fegb };};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_gddg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gddg =int (args [1].ValueNumber );if _gddg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _gddg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_baagc :=args [0].Value ();if _gddg > len (_baagc ){return MakeStringResult (_baagc );};return MakeStringResult (_baagc [0:_gddg ]);};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_gfeb :=len (args );if _gfeb < 3||_gfeb > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdfd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbdfa :=args [1].ValueNumber ;if _gbdfa !=float64 (int (_gbdfa )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcaa :=args [2].ValueNumber ;_fbe :=0.0;if _gfeb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbe =args [3].ValueNumber ;};_dfeb :=0.0;if _gfeb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfeb =args [4].ValueNumber ;if _dfeb !=0{_dfeb =1;};};if _fdfd ==0{return MakeNumberResult (-_dcaa *_gbdfa -_fbe );}else {return MakeNumberResult ((((1-_ge .Pow (1+_fdfd ,_gbdfa ))/_fdfd )*_dcaa *(1+_fdfd *_dfeb )-_fbe )/_ge .Pow (1+_fdfd ,_gbdfa ));};};type rangeIndex struct{_gfgb int ;_fdeb int ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecgf :=args [0];_dgedf :=args [1];if _dgedf .Type !=ResultTypeArray &&_dgedf .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gbffb :=_ceaff (_dgedf );_fbc :=-1;for _gcce ,_bdggg :=range _gbffb {if _cfag (_ecgf ,_bdggg ,false ,false )==_efag {_fbc =_gcce ;};};if _fbc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_gdcgc :=_gbffb ;if len (args )==3{_gdcgc =_ceaff (args [2]);};if _fbc < 0||_fbc >=len (_gdcgc ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _gdcgc [_fbc ];};const _bbfea =57378;func _cbgaa (_dfcf Result ,_dadc ,_ecfd int )[][]Result {_fdbd :=[][]Result {};switch _dfcf .Type {case ResultTypeArray :for _bafbf ,_gffab :=range _dfcf .ValueArray {if _bafbf < _dadc {_fdbd =append (_fdbd ,_daaf (MakeListResult (_gffab ),_ecfd ));}else {_fdbd =append (_fdbd ,_daaf (MakeErrorResultType (ErrorTypeNA ,""),_ecfd ));};};case ResultTypeList :_abca :=_daaf (_dfcf ,_ecfd );for _bgcg :=0;_bgcg < _dadc ;_bgcg ++{_fdbd =append (_fdbd ,_abca );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gdfbg :=0;_gdfbg < _dadc ;_gdfbg ++{_cedg :=_daaf (_dfcf ,_ecfd );_fdbd =append (_fdbd ,_cedg );};};return _fdbd ;};var _gcd =[]*_ec .Regexp {};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_bdcd ,_acb :=_eaec (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _acb .Type ==ResultTypeError {return _acb ;};return MakeNumberResult (_bgff (_bdcd ._bddab ,_bdcd ._dgfa ,_bdcd ._fcaf ,_bdcd ._gaaf ));};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cggaa :=args [0].AsString ();if _cggaa .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_cggaa .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_cggaa .ValueString [0]));};func _ccbe (_bedef yyLexer ,_afdfa *yySymType )(_ccfe ,_gefe int ){_gefe =0;_ccfe =_bedef .Lex (_afdfa );if _ccfe <=0{_gefe =_agbac [0];goto _gfddg ;};if _ccfe < len (_agbac ){_gefe =_agbac [_ccfe ];goto _gfddg ;};if _ccfe >=_gbfbf {if _ccfe < _gbfbf +len (_afbf ){_gefe =_afbf [_ccfe -_gbfbf ];goto _gfddg ;};};for _eeccd :=0;_eeccd < len (_befab );_eeccd +=2{_gefe =_befab [_eeccd +0];if _gefe ==_ccfe {_gefe =_befab [_eeccd +1];goto _gfddg ;};};_gfddg :if _gefe ==0{_gefe =_afbf [1];};if _aefd >=3{_g .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_aeae (_gefe ),uint (_ccfe ));};return _ccfe ,_gefe ;};type yyLexer interface{Lex (_dggbb *yySymType )int ;Error (_becb string );};

// Reference returns a string reference value to a vertical range with prefix.
func (_affef PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_bbegg :=_affef ._gagce .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_affef .verticalRangeReference (_bbegg .Value )};};func _fd (_eb BinOpType ,_ged []Result ,_gdc Result )Result {_beg :=[]Result {};switch _gdc .Type {case ResultTypeNumber :_dcg :=_gdc .ValueNumber ;for _aca :=range _ged {_fdf :=_ged [_aca ].AsNumber ();if _fdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _eb {case BinOpTypePlus :_beg =append (_beg ,MakeNumberResult (_fdf .ValueNumber +_dcg ));case BinOpTypeMinus :_beg =append (_beg ,MakeNumberResult (_fdf .ValueNumber -_dcg ));case BinOpTypeMult :_beg =append (_beg ,MakeNumberResult (_fdf .ValueNumber *_dcg ));case BinOpTypeDiv :if _dcg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_beg =append (_beg ,MakeNumberResult (_fdf .ValueNumber /_dcg ));case BinOpTypeExp :_beg =append (_beg ,MakeNumberResult (_ge .Pow (_fdf .ValueNumber ,_dcg )));case BinOpTypeLT :_beg =append (_beg ,MakeBoolResult (_fdf .ValueNumber < _dcg ));case BinOpTypeGT :_beg =append (_beg ,MakeBoolResult (_fdf .ValueNumber > _dcg ));case BinOpTypeEQ :_beg =append (_beg ,MakeBoolResult (_fdf .ValueNumber ==_dcg ));case BinOpTypeLEQ :_beg =append (_beg ,MakeBoolResult (_fdf .ValueNumber <=_dcg ));case BinOpTypeGEQ :_beg =append (_beg ,MakeBoolResult (_fdf .ValueNumber >=_dcg ));case BinOpTypeNE :_beg =append (_beg ,MakeBoolResult (_fdf .ValueNumber !=_dcg ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_eb ));};};case ResultTypeString :_dfa :=_gdc .ValueString ;for _afe :=range _ged {_dg :=_ged [_afe ].AsString ();if _dg .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _eb {case BinOpTypeLT :_beg =append (_beg ,MakeBoolResult (_dg .ValueString < _dfa ));case BinOpTypeGT :_beg =append (_beg ,MakeBoolResult (_dg .ValueString > _dfa ));case BinOpTypeEQ :_beg =append (_beg ,MakeBoolResult (_dg .ValueString ==_dfa ));case BinOpTypeLEQ :_beg =append (_beg ,MakeBoolResult (_dg .ValueString <=_dfa ));case BinOpTypeGEQ :_beg =append (_beg ,MakeBoolResult (_dg .ValueString >=_dfa ));case BinOpTypeNE :_beg =append (_beg ,MakeBoolResult (_dg .ValueString !=_dfa ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_eb ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_beg );};func _edfc (_gaa ,_bfd _dfc .Time ,_ccaf int )float64 {if _gaa .After (_bfd ){_gaa ,_bfd =_bfd ,_gaa ;};_edaa :=0;_ggga ,_eed ,_cgdecc :=_gaa .Date ();_dbga ,_cbd ,_bad :=_bfd .Date ();_ddbb ,_babc :=int (_eed ),int (_cbd );_adf ,_edfe :=_bdfc (_ggga ,_ddbb ,_cgdecc ,_ccaf ),_bdfc (_dbga ,_babc ,_bad ,_ccaf );if !_eag (_ccaf ){return _eeff (_dbga ,_babc ,_edfe )-_eeff (_ggga ,_ddbb ,_adf );};if _ccaf ==0{if (_ddbb ==2||_adf < 30)&&_bad ==31{_edfe =31;}else if _babc ==2&&_edfe ==_eea (_dbga ,_babc ){_edfe =_eea (_dbga ,2);};}else {if _ddbb ==2&&_adf ==30{_adf =_eea (_ggga ,2);};if _babc ==2&&_edfe ==30{_edfe =_eea (_dbga ,2);};};if _ggga < _dbga ||(_ggga ==_dbga &&_ddbb < _babc ){_edaa =30-_adf +1;_cgdecc =1;_adf =1;_bgf :=_dfc .Date (_ggga ,_dfc .Month (_ddbb ),_cgdecc ,0,0,0,0,_dfc .UTC ).AddDate (0,1,0);if _bgf .Year ()< _dbga {_edaa +=_gca (_bgf .Year (),int (_bgf .Month ()),12,_ccaf );_bgf =_bgf .AddDate (0,13-int (_bgf .Month ()),0);_edaa +=_afea (_bgf .Year (),_dbga -1,_ccaf );};_edaa +=_gca (_dbga ,int (_bgf .Month ()),_babc -1,_ccaf );_bgf =_bgf .AddDate (0,_babc -int (_bgf .Month ()),0);_ddbb =_bgf .Day ();};_edaa +=_edfe -_adf ;if _edaa > 0{return float64 (_edaa );}else {return 0;};};

// Eval evaluates and returns the result of a formula.
func (_afc *defEval )Eval (ctx Context ,formula string )Result {_ecd :=ParseString (formula );_dcb :=make (chan Result );go func (){if _ecd ==nil {_dcb <-MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_afc .checkLastEvalIsRef (ctx ,_ecd );_dcb <-_ecd .Eval (ctx ,_afc );};}();select{case _cgg :=<-_dcb :return _cgg ;case <-_dfc .After (_dae ):_edd .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_ffege ,_gfeg ,_gagca Expression };var _aacc =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};var _degae =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};func _bgcd (_ggdcb []Result )Result {_ggba :=_ggdcb [0].ValueArray ;if len (_ggdcb )==1{_becg :=[][]Result {};for _ ,_bdbf :=range _ggba {_becg =append (_becg ,_ecfcb ([]Result {MakeListResult (_bdbf )}).ValueList );};return MakeArrayResult (_becg );}else if len (_ggdcb )==2{_agb :=len (_ggba );_ffecg :=len (_ggba [0]);_abgb :=_cbgaa (_ggdcb [1],_agb ,_ffecg );_eacfd :=len (_abgb );_gbgbc :=[][]Result {};var _ccfab []Result ;for _fabad ,_fccebb :=range _ggba {if _fabad < _eacfd {_ccfab =_abgb [_fabad ];}else {_ccfab =_daaf (MakeErrorResultType (ErrorTypeNA ,""),_ffecg );};_gbgbc =append (_gbgbc ,_ecfcb ([]Result {MakeListResult (_fccebb ),MakeListResult (_ccfab )}).ValueList );};return MakeArrayResult (_gbgbc );}else if len (_ggdcb )==3{_cdcf :=len (_ggba );_gacd :=len (_ggba [0]);_dfgg :=_cbgaa (_ggdcb [1],_cdcf ,_gacd );_gdddc :=_cbgaa (_ggdcb [2],_cdcf ,_gacd );_ebbba :=len (_dfgg );_cgbce :=len (_gdddc );_aeebc :=[][]Result {};var _adcab ,_dffcg []Result ;for _fegff ,_deda :=range _ggba {if _fegff < _ebbba {_adcab =_dfgg [_fegff ];}else {_adcab =_daaf (MakeErrorResultType (ErrorTypeNA ,""),_gacd );};if _fegff < _cgbce {_dffcg =_gdddc [_fegff ];}else {_dffcg =_daaf (MakeErrorResultType (ErrorTypeNA ,""),_gacd );};_aeebc =append (_aeebc ,_ecfcb ([]Result {MakeListResult (_deda ),MakeListResult (_adcab ),MakeListResult (_dffcg )}).ValueList );};return MakeArrayResult (_aeebc );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Reference returns a string reference value to a horizontal range.
func (_adfcg HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_adfcg .horizontalRangeReference ()};};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggfd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afdgd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdab :=args [2].ValueNumber ;if _gdab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cddb :=args [3].ValueNumber ;return MakeNumberResult (_cddb *_ggfd *(_afdgd /_gdab -1));};var _gde int64 =_gcfd (1900,_dfc .January ,1);const _baed =57372;const _fcec =57349;

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbeb :=false ;for _ ,_fabfa :=range args {switch _fabfa .Type {case ResultTypeList ,ResultTypeArray :_gedb :=Or (_fabfa .ListValues ());if _gedb .Type ==ResultTypeError {return _gedb ;};if _gedb .ValueNumber !=0{_bbeb =true ;};case ResultTypeNumber :if _fabfa .ValueNumber !=0{_bbeb =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _fabfa ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_bbeb );};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_abfba *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _fgga ,_ggff float64 ;switch args [0].Type {case ResultTypeNumber :_ggff =args [0].ValueNumber ;case ResultTypeString :_gcc :=DateValue ([]Result {args [0]});if _gcc .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_ggff =_gcc .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_fgga =args [1].ValueNumber ;if _fgga < 62&&_ggff >=62{_fgga --;};case ResultTypeString :_gbgd :=DateValue ([]Result {args [1]});if _gbgd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_fgga =_gbgd .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_bge :=float64 (int (_ggff -_fgga ));return MakeNumberResult (_bge );};func _fedc (_cdbc ,_dgcc float64 )float64 {_cdbc =_ge .Trunc (_cdbc );_dgcc =_ge .Trunc (_dgcc );if _cdbc ==0&&_dgcc ==0{return 0;};return _cdbc *_dgcc /_fefa (_cdbc ,_dgcc );};const _cgcc =57364;

// Eval evaluates the binary expression using the context given.
func (_gbd BinaryExpr )String ()string {_ce :="";switch _gbd ._de {case BinOpTypePlus :_ce ="\u002b";case BinOpTypeMinus :_ce ="\u002d";case BinOpTypeMult :_ce ="\u002a";case BinOpTypeDiv :_ce ="\u002f";case BinOpTypeExp :_ce ="\u005e";case BinOpTypeLT :_ce ="\u003c";case BinOpTypeGT :_ce ="\u003e";case BinOpTypeEQ :_ce ="\u003d";case BinOpTypeLEQ :_ce ="\u003c\u003d";case BinOpTypeGEQ :_ce ="\u003e\u003d";case BinOpTypeNE :_ce ="\u003c\u003e";case BinOpTypeConcat :_ce ="\u0026";};return _gbd ._fe .String ()+_ce +_gbd ._da .String ();};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fec :=args [0];switch _fec .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_debg :=_fdbf (_fec .ValueNumber );return MakeNumberResult (float64 (_debg .Minute ()));case ResultTypeString :_abda :=_ca .ToLower (_fec .ValueString );if !_feff (_abda ){_ ,_ ,_ ,_eecf ,_cbcf :=_ceea (_abda );if _cbcf .Type ==ResultTypeError {_cbcf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _cbcf ;};if _eecf {return MakeNumberResult (0);};};_ ,_febg ,_ ,_ ,_ ,_fab :=_dbba (_abda );if _fab .Type ==ResultTypeError {return _fab ;};return MakeNumberResult (float64 (_febg ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func _aec (_gffa ,_ebga ,_dgga ,_dge float64 ,_acdd int )float64 {var _aaa float64 ;if _gffa ==0{_aaa =_dge +_dgga *_ebga ;}else {_gdfa :=_ge .Pow (1+_gffa ,_ebga );if _acdd ==1{_aaa =_dge *_gdfa +_dgga *(1+_gffa )*(_gdfa -1)/_gffa ;}else {_aaa =_dge *_gdfa +_dgga *(_gdfa -1)/_gffa ;};};return -_aaa ;};func _cgbfa (_adfe []Result ,_gaab bool )Result {_cbgf :="\u004d\u0049\u004e";if _gaab {_cbgf ="\u004d\u0049\u004e\u0041";};if len (_adfe )==0{return MakeErrorResult (_cbgf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgdf :=_ge .MaxFloat64 ;for _ ,_edfd :=range _adfe {switch _edfd .Type {case ResultTypeNumber :if (_gaab ||!_edfd .IsBoolean )&&_edfd .ValueNumber < _dgdf {_dgdf =_edfd .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_adacb :=_cgbfa (_edfd .ListValues (),_gaab );if _adacb .ValueNumber < _dgdf {_dgdf =_adacb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_aceb :=0.0;if _gaab {_aceb =_edfd .AsNumber ().ValueNumber ;};if _aceb < _dgdf {_dgdf =_aceb ;};default:_edd .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_cbgf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_edfd .Type );};};if _dgdf ==_ge .MaxFloat64 {_dgdf =0;};return MakeNumberResult (_dgdf );};const _bafe =_dfc .Millisecond *1000;

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_afgf ,_dggagf :=_gbccb (args ,true );if _dggagf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_afgf /_dggagf );};var _fgec =false ;func _aeae (_gbaag int )string {if _gbaag >=1&&_gbaag -1< len (_degae ){if _degae [_gbaag -1]!=""{return _degae [_gbaag -1];};};return _g .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_gbaag );};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adee :=args [0].AsNumber ();_gdda :=args [1].AsNumber ();_fbea :=args [2].AsNumber ();_eefbg :=args [3].ListValues ();if _adee .Type !=ResultTypeNumber ||_gdda .Type !=ResultTypeNumber ||_fbea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_fgfd :=float64 (0);for _eedfc ,_dffad :=range _eefbg {_fgfd +=_dffad .ValueNumber *_ge .Pow (_adee .ValueNumber ,_gdda .ValueNumber +float64 (_eedfc )*_fbea .ValueNumber );};return MakeNumberResult (_fgfd );};func _faee (_fcgge float64 )bool {return _fcgge ==1||_fcgge ==2||_fcgge ==4};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_gfffa .Lock ();defer _gfffa .Unlock ();if _eecgb ,_fggd :=_daeab [name ];_fggd {return _eecgb ;};return nil ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_bcdd ,_gggc :=_fbg (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _gggc .Type ==ResultTypeError {return _gggc ;};_ebc :=_bcdd ._aebc ;_bace :=_bcdd ._cba ;_ebfaf :=_bcdd ._degb ;_dbd :=_bcdd ._egfe ;_ecfc :=_bcdd ._fgba ;_fgf :=_bcdd ._cbfg ;return _ega (_ebc ,_bace ,_ebfaf ,_dbd ,_ecfc ,_fgf );};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_eabb ,_fabd :=_gegg (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _fabd .Type ==ResultTypeError {return _fabd ;};_fegd :=_eabb ._ecbd ;_faae :=_eabb ._ecegc ;_gcagd :=_eabb ._gddd ;_efeec :=_eabb ._gdaf ;_cebf :=_eabb ._cfbd ;_fffd :=_eabb ._bedd ;_fgbab :=_eabb ._cbeg ;_cbag ,_ggc :=_adgb (_faae ,_gcagd ,_fgbab );if _ggc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_bedg :=_cbag *_fffd *_fegd ;if _cebf ==0{return MakeNumberResult (_bedg );};_acbg :=_fegd *_fffd ;_ecga :=_fegd -_efeec ;_gfa :=int ((_ecga -_bedg )/_acbg );if _cebf <=_gfa {return MakeNumberResult (_acbg );}else if _cebf ==_gfa +1{return MakeNumberResult (_ecga -_acbg *float64 (_gfa )-_bedg );}else {return MakeNumberResult (0);};};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_eacb :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_cffce :=args [1].ValueNumber !=0;_edgcc :=_gdcc (args [2:],[]string {},_cffce );return MakeStringResult (_ca .Join (_edgcc ,_eacb ));};func _agfb (_ebcea string ,_ddfd func (_bageb float64 )float64 )Function {return func (_ebdb []Result )Result {if len (_ebdb )!=1{return MakeErrorResult (_ebcea +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eace :=_ebdb [0].AsNumber ();switch _eace .Type {case ResultTypeNumber :_ebab :=_ddfd (_eace .ValueNumber );if _ge .IsNaN (_ebab ){return MakeErrorResult (_ebcea +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ge .IsInf (_ebab ,0){return MakeErrorResult (_ebcea +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_ebab );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ebcea +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _eace ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebcea ,_eace .Type ));};};};

// Bool is a boolean expression.
type Bool struct{_dede bool };func _aced (_dgde ,_bgaeb int )string {const TOKSTART =4;if !_fgdcfc {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_cddcc :=range _aged {if _cddcc ._gfcc ==_dgde &&_cddcc ._gaafbf ==_bgaeb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_cddcc ._ggcfe ;};};_aaed :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_aeae (_bgaeb );_befg :=make ([]int ,0,4);_caec :=_ccdgc [_dgde ];for _bbfg :=TOKSTART ;_bbfg -1< len (_degae );_bbfg ++{if _dded :=_caec +_bbfg ;_dded >=0&&_dded < _aagag &&_adeed [_ddde [_dded ]]==_bbfg {if len (_befg )==cap (_befg ){return _aaed ;};_befg =append (_befg ,_bbfg );};};if _ceeacd [_dgde ]==-2{_debde :=0;for _dcde [_debde ]!=-1||_dcde [_debde +1]!=_dgde {_debde +=2;};for _debde +=2;_dcde [_debde ]>=0;_debde +=2{_ddgg :=_dcde [_debde ];if _ddgg < TOKSTART ||_dcde [_debde +1]==0{continue ;};if len (_befg )==cap (_befg ){return _aaed ;};_befg =append (_befg ,_ddgg );};if _dcde [_debde +1]!=0{return _aaed ;};};for _bedab ,_gcbf :=range _befg {if _bedab ==0{_aaed +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_aaed +="\u0020\u006f\u0072\u0020";};_aaed +=_aeae (_gcbf );};return _aaed ;};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dbcg :=args [0].Ref ;if _dbcg .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_afbe ,_fcceb :=_gee .ParseCellReference (_dbcg .Value );if _fcceb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dbcg .Value );};return MakeNumberResult (float64 (_afbe .ColumnIdx +1));};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcbg ,_aadc ,_agdb :=_adgbd (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _agdb .Type ==ResultTypeError {return _agdb ;};_egef ,_agdb :=_aeb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _agdb .Type ==ResultTypeError {return _agdb ;};if _egef >=_gcbg {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aacb :=args [3].ValueNumber ;if _aacb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bgb :=args [4].ValueNumber ;if _bgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_efedc :=args [5].ValueNumber ;if _efedc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggb :=float64 (int (args [6].ValueNumber ));if !_faee (_ggb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_efddc :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_efddc =int (args [7].ValueNumber );if !_aba (_efddc ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_gdad ,_agdb :=_adgb (_egef ,_aadc ,_efddc );if _agdb .Type ==ResultTypeError {return _agdb ;};_gdad *=_ggb ;_ebff ,_agdb :=_adgb (_gcbg ,_aadc ,_efddc );if _agdb .Type ==ResultTypeError {return _agdb ;};_ebff *=_ggb ;_aaac ,_agdb :=_adgb (_egef ,_gcbg ,_efddc );if _agdb .Type ==ResultTypeError {return _agdb ;};_aaac *=_ggb ;_efcf :=_efedc +_gdad *100*_aacb /_ggb ;_efcf /=_bgb +_aaac *100*_aacb /_ggb ;_efcf --;_efcf *=_ggb /_ebff ;return MakeNumberResult (_efcf );};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cgag :=args [0].Ref ;if _cgag .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_eaea ,_dcgfb :=_gee .ParseCellReference (_cgag .Value );if _dcgfb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cgag .Value );};return MakeNumberResult (float64 (_eaea .RowIdx ));};func _ccff (_ebg int )int {if _ebg < 1900{if _ebg < 30{_ebg +=2000;}else {_ebg +=1900;};};return _ebg ;};

// IsBool returns false for the invalid reference context.
func (_fbcg *ivr )IsBool (cellRef string )bool {return false };

// Eval evaluates and returns a string.
func (_fdccb String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_fdccb ._agffc )};func (_aebd Result )String ()string {return _aebd .Value ()};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_fe ,_da Expression ;_de BinOpType ;};

// Reference returns a string reference value to a range with prefix.
func (_cgdg PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_ebgfa :=_cgdg ._ffege .Reference (ctx ,ev );_bebbg :=_cgdg ._gfeg .Reference (ctx ,ev );_geab :=_cgdg ._gagca .Reference (ctx ,ev );if _ebgfa .Type ==ReferenceTypeSheet &&_bebbg .Type ==ReferenceTypeCell &&_geab .Type ==ReferenceTypeCell {return MakeRangeReference (_cbfcb (_ebgfa ,_bebbg ,_geab ));};return ReferenceInvalid ;};func _eadg (_cdedd yyLexer )int {return _aefgg ().Parse (_cdedd )};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_bedga :e }};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcfaa :=args [0].AsNumber ();if _fcfaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efgb :=args [1].AsNumber ();if _efgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_ge .Pow (_fcfaa .ValueNumber ,_efgb .ValueNumber ));};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_bgae :name ,_cebg :args };};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_edca :=args [0].AsNumber ();if _edca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_fdcag :=int (_edca .ValueNumber );_dbef :=make ([][]Result ,0,_fdcag );for _dcce :=0;_dcce < _fdcag ;_dcce ++{_cbfee :=make ([]Result ,_fdcag );for _aggda :=0;_aggda < _fdcag ;_aggda ++{if _dcce ==_aggda {_cbfee [_aggda ]=MakeNumberResult (1.0);}else {_cbfee [_aggda ]=MakeNumberResult (0.0);};};_dbef =append (_dbef ,_cbfee );};return MakeArrayResult (_dbef );};const _cfaf =_gfc +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Reference returns a string reference value to a sheet.
func (_ecff SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_ecff ._aead };};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_bgfb ,_caag :=_gegg (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _caag .Type ==ResultTypeError {return _caag ;};_ced :=_bgfb ._ecbd ;_afd :=_bgfb ._ecegc ;_fded :=_bgfb ._gddd ;_gdde :=_bgfb ._gdaf ;_ege :=_bgfb ._cfbd ;_dcbe :=_bgfb ._bedd ;if _dcbe >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_accde :=_bgfb ._cbeg ;_affac :=1.0/_dcbe ;_dbab :=2.5;if _affac < 3{_dbab =1;}else if _affac < 5{_dbab =1.5;}else if _affac <=6{_dbab =2;};_dcbe *=_dbab ;_dcff ,_caea :=_adgb (_afd ,_fded ,_accde );if _caea .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_gbgf :=_feee (_dcff *_dcbe *_ced );_ced -=_gbgf ;_eceg :=_ced -_gdde ;for _eeec :=0;_eeec < _ege ;_eeec ++{_gbgf =_feee (_dcbe *_ced );_eceg -=_gbgf ;if _eceg < 0{switch _ege -_eeec {case 0:case 1:return MakeNumberResult (_feee (_ced *0.5));default:return MakeNumberResult (0);};};_ced -=_gbgf ;};return MakeNumberResult (_gbgf );};var _befab =[...]int {0};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_cgaa :=_aeag (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _cgaa .Type !=ResultTypeEmpty {return _cgaa ;};_aaab :=_bgdd (args [1:]);_gcgbc :=0.0;_bffb :=_bfff (args [0]);for _ ,_fdfbc :=range _aaab {_gcgbc +=_bffb [_fdfbc ._gfgb ][_fdfbc ._fdeb ].ValueNumber ;};return MakeNumberResult (float64 (_gcgbc ));};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_geeg ,_dece ,_cacg :=_adgbd (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _cacg .Type ==ResultTypeError {return _cacg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfge :=_dece -_geeg ;if _gfge > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_fgdf :=args [2].ValueNumber ;if _fgdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_fgdf )/(360-_fgdf *_gfge ));};const _ggdb =57346;func LexReader (r _c .Reader )chan *node {_edgfb :=NewLexer ();go _edgfb .lex (r );return _edgfb ._fadfc };

// Eval evaluates and returns the result of a sheet expression.
func (_degcf SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};const _gfcd =57371;

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};var _gfffa _ee .Mutex ;var _eec Result =MakeEmptyResult ();

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func (_bcfaf *plex )Lex (lval *yySymType )int {_fgdcfc =true ;_ccdgce :=<-_bcfaf ._agcbf ;if _ccdgce !=nil {lval ._deab =_ccdgce ;return int (lval ._deab ._bdef );};return 0;};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_caedf SheetPrefixExpr )Update (q *_ed .UpdateQuery )Expression {return _caedf };const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func (_dfced PrefixVerticalRange )verticalRangeReference (_cdabf string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cdabf ,_dfced ._ggafd ,_dfced ._cbffg );};var _agda []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cabb :=_ca .ToLower (args [0].ValueString );if !_acee (_cabb ){_ ,_ ,_ ,_ ,_bdec ,_bafa :=_dbba (_cabb );if _bafa .Type ==ResultTypeError {_bafa .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _bafa ;};if _bdec {return MakeNumberResult (0);};};_eefb ,_aad ,_dddg ,_ ,_eadc :=_ceea (_cabb );if _eadc .Type ==ResultTypeError {return _eadc ;};return MakeNumberResult (_eeff (_eefb ,_aad ,_dddg ));};

// String returns a string representation of Number.
func (_geag Number )String ()string {return _dc .FormatFloat (_geag ._eged ,'f',-1,64)};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_dedaf ,_dgfga int };

// String returns a string representation of CellRef.
func (_cdg CellRef )String ()string {return _cdg ._gad };

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bfb :=args [1].ValueNumber ;_bca :=args [0];var _gddc float64 ;switch _bca .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_gddc =_bca .ValueNumber ;case ResultTypeString :_acg :=DateValue ([]Result {args [0]});if _acg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gddc =_acg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gce :=_fdbf (_gddc );_dcgc :=_gce .AddDate (0,int (_bfb ),0);_dfae ,_efc ,_deb :=_dcgc .Date ();_bddaa :=_eeff (_dfae ,int (_efc ),_deb );if _bddaa < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_bddaa );};var _ceeacd =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_aggcb :=len (args );if _aggcb < 3||_aggcb > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_caad :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afag :=args [1].ValueNumber ;if _afag ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dcdb :=args [2].ValueNumber ;_gbff :=0.0;if _aggcb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbff =args [3].ValueNumber ;};_bdb :=0.0;if _aggcb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdb =args [4].ValueNumber ;if _bdb !=0{_bdb =1;};};var _fefff float64 ;if _caad ==0{_fefff =(_dcdb +_gbff )/_afag ;}else {_gcccb :=_ge .Pow (1+_caad ,_afag );if _bdb ==1{_fefff =(_gbff *_caad /(_gcccb -1)+_dcdb *_caad /(1-1/_gcccb ))/(1+_caad );}else {_fefff =_gbff *_caad /(_gcccb -1)+_dcdb *_caad /(1-1/_gcccb );};};return MakeNumberResult (-_fefff );};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ebe :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbecc :=args [2].ValueNumber +1;if _cbecc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cgbcc :=_bfff (args [0]);_ebgf :=float64 (len (_cgbcc ));_ebfbad ,_aeca :=0.0,0.0;_aedb ,_edga :=1.0,1.0;_eeffg ,_ebee :=false ,false ;for _ ,_abf :=range _cgbcc {for _ ,_fdfba :=range _abf {if _fdfba .Type ==ResultTypeNumber &&!_fdfba .IsBoolean {_gfag :=_fdfba .ValueNumber ;if _gfag ==0{continue ;}else {if _gfag > 0{_eeffg =true ;_aeca +=_fdfba .ValueNumber *_edga ;}else {_ebee =true ;_ebfbad +=_fdfba .ValueNumber *_aedb ;};_aedb /=_ebe ;_edga /=_cbecc ;};};};};if !_eeffg ||!_ebee {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ecfa :=-_aeca /_ebfbad ;_ecfa *=_ge .Pow (_cbecc ,_ebgf -1);_ecfa =_ge .Pow (_ecfa ,1/(_ebgf -1));return MakeNumberResult (_ecfa -1);};

// Eval evaluates and returns a boolean.
func (_gae Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_gae ._dede )};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cbae :=args [0].AsNumber ();if _cbae .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_bedce ,_gbedg :=_ge .Modf (_cbae .ValueNumber );if _gbedg < 0{_bedce --;};return MakeNumberResult (_bedce );};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_dfcea :=_ca .Split (v ,"\u003a");if len (_dfcea )!=2{return nil ;};_efba ,_ :=_dc .Atoi (_dfcea [0]);_eeacbg ,_ :=_dc .Atoi (_dfcea [1]);if _efba > _eeacbg {_efba ,_eeacbg =_eeacbg ,_efba ;};return HorizontalRange {_dedaf :_efba ,_dgfga :_eeacbg };};

// Eval evaluates and returns the result of a function call.
func (_gdbeg FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_aefcg :=LookupFunction (_gdbeg ._bgae );if _aefcg !=nil {_eeea :=make ([]Result ,len (_gdbeg ._cebg ));for _fdafc ,_ddfb :=range _gdbeg ._cebg {_eeea [_fdafc ]=_ddfb .Eval (ctx ,ev );_eeea [_fdafc ].Ref =_ddfb .Reference (ctx ,ev );};if _ ,_abcg :=_fgce [_gdbeg ._bgae ];!_abcg {if _cdab ,_bccag :=_bfdbe (_eeea );_cdab {return _bccag ;};};return _aefcg (_eeea );};_fdcbd :=LookupFunctionComplex (_gdbeg ._bgae );if _fdcbd !=nil {_adfdg :=make ([]Result ,len (_gdbeg ._cebg ));for _adcc ,_agbc :=range _gdbeg ._cebg {_adfdg [_adcc ]=_agbc .Eval (ctx ,ev );_adfdg [_adcc ].Ref =_agbc .Reference (ctx ,ev );};if _ ,_ffeca :=_fgce [_gdbeg ._bgae ];!_ffeca {if _cgdba ,_debgg :=_bfdbe (_adfdg );_cgdba {return _debgg ;};};return _fdcbd (ctx ,ev ,_adfdg );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_gdbeg ._bgae );};func _db (_bbd string ,_ef *_ed .UpdateQuery )string {_cg ,_bcb :=_gee .ParseCellReference (_bbd );if _bcb !=nil {return "\u0023\u0052\u0045F\u0021";};if _ef .UpdateType ==_ed .UpdateActionRemoveColumn {_eab :=_ef .ColumnIdx ;_eff :=_cg .ColumnIdx ;if _eff < _eab {return _bbd ;}else if _eff ==_eab {return "\u0023\u0052\u0045F\u0021";}else {return _cg .Update (_ed .UpdateActionRemoveColumn ).String ();};};return _bbd ;};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcffd :=args [0].Ref ;if _dcffd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_dcffd .Value ,ev ).IsBoolean );};func _gfaf (_dbbag []Result ,_aefc countMode )float64 {_gagcg :=0.0;for _ ,_dbeg :=range _dbbag {switch _dbeg .Type {case ResultTypeNumber :if _aefc ==_dgfdd ||(_aefc ==_dbeaa &&!_dbeg .IsBoolean ){_gagcg ++;};case ResultTypeList ,ResultTypeArray :_gagcg +=_gfaf (_dbeg .ListValues (),_aefc );case ResultTypeString :if _aefc ==_dgfdd {_gagcg ++;};case ResultTypeEmpty :if _aefc ==_ccbac {_gagcg ++;};};};return _gagcg ;};const _dcfg =57376;

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_edfcc :pfx ,_fdcd :exp }};type parsedReplaceObject struct{_gbfd string ;_accda int ;_afegb int ;_aeafe string ;};const _fdgfd =57370;

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbccd :=args [0].AsString ();if _gbccd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_ccfa :="\u0041\u0031";if len (args )==2{_aaeg :=args [1].Ref ;if _aaeg .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_ccfa =_aaeg .Value ;};switch _gbccd .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_gfged ,_cafgf :=_gee .ParseCellReference (_ccfa );if _cafgf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ccfa );};_dcgbb :="\u0024"+_gfged .Column +"\u0024"+_dc .Itoa (int (_gfged .RowIdx ));if _gfged .SheetName !=""{_dcgbb =_gfged .SheetName +"\u0021"+_dcgbb ;};return MakeStringResult (_dcgbb );case "\u0063\u006f\u006c":_cfcaf ,_ccfff :=_gee .ParseCellReference (_ccfa );if _ccfff !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ccfa );};return MakeNumberResult (float64 (_cfcaf .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_bgca :=_ca .Contains (ctx .GetFormat (_ccfa ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_bgca );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_badf :="\u0047";_ffec :=ctx .GetFormat (_ccfa );if _ffec =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_fccgf .MatchString (_ffec ){_badf ="\u0046\u0030";}else if _ffec =="\u0030\u0025"{_badf ="\u0050\u0030";}else if _ffec =="\u004d\u004d\u004d\u0020\u0044\u0044"{_badf ="\u0044\u0032";}else if _ffec =="\u004d\u004d\u002fY\u0059"{_badf ="\u0044\u0033";}else if _ffec =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_ffec =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_badf ="\u0044\u0034";}else if _ffec =="\u004d\u004d\u005c\u002d\u0044\u0044"{_badf ="\u0044\u0035";}else if _ffec =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_badf ="\u0044\u0036";}else if _ffec =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_badf ="\u0044\u0037";}else if _ffec =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_badf ="\u0044\u0038";}else if _ffec =="\u0048\u0048\u003aM\u004d"{_badf ="\u0044\u0039";}else if _bbce .MatchString (_ffec ){_badf ="\u002e\u0030";}else if _geac .MatchString (_ffec ){_badf ="\u002e\u0030\u0028\u0029";}else if _dgacb .MatchString (_ffec ){_badf ="\u0043\u0030";}else if _gbgfc .MatchString (_ffec )||_abgg .MatchString (_ffec ){_badf ="\u0044\u0031";}else if _fbca :=_eccca .FindStringSubmatch (_ffec );len (_fbca )> 1{_badf ="\u0046"+_dc .Itoa (len (_fbca [1]));}else if _egec :=_bedag .FindStringSubmatch (_ffec );len (_egec )> 1{_badf ="\u002e"+_dc .Itoa (len (_egec [2]));}else if _ccfg :=_bedae .FindStringSubmatch (_ffec );len (_ccfg )> 1{_badf ="\u0050"+_dc .Itoa (len (_ccfg [2]));}else if _ecab :=_fbef .FindStringSubmatch (_ffec );len (_ecab )> 1{_badf ="\u0043"+_gede (_ecab ,1);}else if _abfd :=_geae .FindStringSubmatch (_ffec );len (_abfd )> 1{_badf ="\u0043"+_gede (_abfd ,1);}else if _gbca :=_aaf .FindStringSubmatch (_ffec );len (_gbca )> 1{_badf ="\u002e"+_gede (_gbca ,1)+"\u0028\u0029";}else if _degc :=_gdadd .FindStringSubmatch (_ffec );len (_degc )> 1{_badf ="\u002e"+_gede (_degc ,1);}else if _bcbde :=_dbcd .FindStringSubmatch (_ffec );len (_bcbde )> 1{_badf ="\u0053"+_gede (_bcbde ,3);};if _badf !="\u0047"&&_ca .Contains (_ffec ,"\u005b\u0052\u0045D\u005d"){_badf +="\u002d";};return MakeStringResult (_badf );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_cddbg :=ctx .GetFormat (_ccfa );if _bgfd .MatchString (_cddbg ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_ccfa ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_bcgb :=0.0;if ctx .GetLocked (_ccfa ){_bcgb =1.0;};return MakeNumberResult (_bcgb );case "\u0072\u006f\u0077":_ccbf ,_dcae :=_gee .ParseCellReference (_ccfa );if _dcae !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ccfa );};return MakeNumberResult (float64 (_ccbf .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_dfge ,_fdcfb :=_gee .ParseCellReference (_ccfa );if _fdcfb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ccfa );};if _dfge .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_dfge .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_dfge .SheetName ).GetWidth (int (_dfge .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_gbccd .ValueString );};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_febgc :=len (args );if (_febgc !=2&&_febgc !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dba :=0;if _febgc ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dba =int (args [2].ValueNumber );if !_aba (_dba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fcd :=args [1].ValueNumber ;_bff ,_gbee :=_adgb (_feg ,_fcd ,_dba );if _gbee .Type ==ResultTypeError {return _gbee ;};return MakeNumberResult (_bff );};type couponArgs struct{_bddab float64 ;_dgfa float64 ;_fcaf int ;_gaaf int ;};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efegc :=args [0].AsString ();if _efegc .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_ca .ToUpper (_efegc .ValueString ));};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_gfffa .Lock ();defer _gfffa .Unlock ();if _ ,_fdcdb :=_daeab [name ];_fdcdb {_edd .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_daeab [name ]=fn ;};const _ddce =57354;

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_cfcc :=len (args );if _cfcc !=6&&_cfcc !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebce ,_decfb ,_ecgbf :=_adgbd (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _ecgbf .Type ==ResultTypeError {return _ecgbf ;};_cfea :=args [2];if _cfea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bcba :=_cfea .ValueNumber ;if _bcba < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dggac :=args [3];if _dggac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_egee :=_dggac .ValueNumber ;if _egee <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_debcf :=args [4];if _debcf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_effeb :=_debcf .ValueNumber ;if _effeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bdca :=args [5];if _bdca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_febf :=float64 (int (_bdca .ValueNumber ));if !_faee (_febf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_agaa :=0;if _cfcc ==7&&args [6].Type !=ResultTypeEmpty {_cff :=args [6];if _cff .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_agaa =int (_cff .ValueNumber );if !_aba (_agaa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_bfdb :=0.0;_cebc :=0.0;_egceb :=1.0;_gdfgg ,_ecgbf :=_dbdd (_ebce ,_decfb ,_bcba ,_cebc ,_effeb ,_febf ,_agaa );if _ecgbf .Type ==ResultTypeError {return _ecgbf ;};_caff ,_ecgbf :=_dbdd (_ebce ,_decfb ,_bcba ,_egceb ,_effeb ,_febf ,_agaa );if _ecgbf .Type ==ResultTypeError {return _ecgbf ;};_cbedf :=(_egceb -_cebc )*0.5;for _fgae :=0;_fgae < 100&&_bfdb !=_egee ;_fgae ++{_bfdb ,_ecgbf =_dbdd (_ebce ,_decfb ,_bcba ,_cbedf ,_effeb ,_febf ,_agaa );if _ecgbf .Type ==ResultTypeError {return _ecgbf ;};if _egee ==_gdfgg {return MakeNumberResult (_cebc );}else if _egee ==_caff {return MakeNumberResult (_egceb );}else if _egee ==_bfdb {return MakeNumberResult (_cbedf );}else if _egee < _caff {_egceb *=2.0;_caff ,_ecgbf =_dbdd (_ebce ,_decfb ,_bcba ,_egceb ,_effeb ,_febf ,_agaa );if _ecgbf .Type ==ResultTypeError {return _ecgbf ;};_cbedf =(_egceb -_cebc )*0.5;}else {if _egee < _bfdb {_cebc =_cbedf ;_gdfgg =_bfdb ;}else {_egceb =_cbedf ;_caff =_bfdb ;};_cbedf =_egceb -(_egceb -_cebc )*((_egee -_caff )/(_gdfgg -_caff ));};};return MakeNumberResult (_cbedf );};

// Reference returns an invalid reference for Bool.
func (_dfg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_caf *defEval )LastEvalIsRef ()bool {return _caf ._cgb };

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cage :=_adffc (args );_df .Float64s (_cage );var _ecfda float64 ;if len (_cage )%2==0{_ecfda =(_cage [len (_cage )/2-1]+_cage [len (_cage )/2])/2;}else {_ecfda =_cage [len (_cage )/2];};return MakeNumberResult (_ecfda );};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ebdd :=ctx .GetEpoch ();_ggcd ,_dcaeb :=_acag (args [0].Value (),_ebdd );if _dcaeb !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fgdb :=_ggcd .Year ();return MakeBoolResult (_ebfa (_fgdb ));};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_aefgc NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_ddafe :=ctx .NamedRange (_aefgc ._fbcb );_acbgb :=_ddafe .Value ;if _gegf ,_bgcb :=ev .GetFromCache (_acbgb );_bgcb {return _gegf ;};_abfbe :=_ca .Split (_acbgb ,"\u0021");if len (_abfbe )!=2{return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_acbgb ));};_cgec :=ctx .Sheet (_abfbe [0]);_gfece :=_ca .Split (_abfbe [1],"\u003a");switch len (_gfece ){case 1:_cafe :=ev .Eval (_cgec ,_gfece [0]);ev .SetCache (_acbgb ,_cafe );return _cafe ;case 2:_dcbca :=_gfdb (_cgec ,ev ,_gfece [0],_gfece [1]);ev .SetCache (_acbgb ,_dcbca );return _dcbca ;};return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_ddafe .Type ));};const _def ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_gfc +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_bbg :=len (args );if _bbg < 3||_bbg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfbb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bcge :=args [1].ValueNumber ;if _bcge !=float64 (int (_bcge )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aceed :=args [2].ValueNumber ;_adfc :=0.0;if _bbg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adfc =args [3].ValueNumber ;};_gada :=0;if _bbg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gada =int (args [4].ValueNumber );if _gada !=0{_gada =1;};};return MakeNumberResult (_aec (_cfbb ,_bcge ,_aceed ,_adfc ,_gada ));};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_acda :=_ca .ToLower (args [0].ValueString );if !_feff (_acda ){_ ,_ ,_ ,_gbdf ,_fcc :=_ceea (_acda );if _fcc .Type ==ResultTypeError {_fcc .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _fcc ;};if _gbdf {return MakeNumberResult (0);};};_dbe ,_gbed ,_ccdg ,_fcbg ,_ ,_gaeg :=_dbba (_acda );if _gaeg .Type ==ResultTypeError {return _gaeg ;};_cafd :=_daf (float64 (_dbe ),float64 (_gbed ),_ccdg );if _fcbg {_cafd +=0.5;}else if _cafd >=1{_cafd -=float64 (int (_cafd ));};return MakeNumberResult (_cafd );};const _ddaf =57363;func _gfacd (_fcfca ,_gcff Reference )string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_fcfca .Value ,_gcff .Value );};

// Reference returns an invalid reference for String.
func (_ddee String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _affb =map[string ]*_ec .Regexp {};type ri struct{_fage float64 ;_gfbdd string ;};var _babf =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Update updates references in the PrefixExpr after removing a row/column.
func (_ecbc PrefixExpr )Update (q *_ed .UpdateQuery )Expression {_cfccd :=_ecbc ;_gedagd :=_ecbc ._edfcc .String ();if _gedagd ==q .SheetToUpdate {_gcde :=*q ;_gcde .UpdateCurrentSheet =true ;_cfccd ._fdcd =_ecbc ._fdcd .Update (&_gcde );};return _cfccd ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_dccb :=_aeag (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _dccb .Type !=ResultTypeEmpty {return _dccb ;};_ecea :=_bgdd (args [1:]);_ddeb :=-_ge .MaxFloat64 ;_bdcc :=_bfff (args [0]);for _ ,_gdcb :=range _ecea {_bagdb :=_bdcc [_gdcb ._gfgb ][_gdcb ._fdeb ].ValueNumber ;if _ddeb < _bagdb {_ddeb =_bagdb ;};};if _ddeb ==-_ge .MaxFloat64 {_ddeb =0;};return MakeNumberResult (float64 (_ddeb ));};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_edcc :=_aeag (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _edcc .Type !=ResultTypeEmpty {return _edcc ;};_gadg :=_bgdd (args );return MakeNumberResult (float64 (len (_gadg )));};func _bgfc (_beafe Result )bool {_degaa :=_beafe .Type ;return _degaa !=ResultTypeArray &&_degaa !=ResultTypeList ;};type Reference struct{Type ReferenceType ;Value string ;};var _affa =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_ceccd Result )AsNumber ()Result {if _ceccd .Type ==ResultTypeString {_bcaf ,_befed :=_dc .ParseFloat (_ceccd .ValueString ,64);if _befed ==nil {return MakeNumberResult (_bcaf );};};if _ceccd .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _ceccd ;};var _gbcbd =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// GetWidth returns 0 for the invalid reference context.
func (_fdedf *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_eddb :=args [1].ValueNumber ;_cbf :=args [0];var _cac float64 ;switch _cbf .Type {case ResultTypeEmpty :_cac =0;case ResultTypeNumber :_cac =_cbf .ValueNumber ;case ResultTypeString :_deca :=DateValue ([]Result {args [0]});if _deca .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cac =_deca .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cgc :=_fdbf (_cac );_efde :=_cgc .AddDate (0,int (_eddb +1),0);_cfee ,_dgfg ,_ :=_efde .Date ();_cgf :=_eeff (_cfee ,int (_dgfg ),0);if _cgf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _cfee ==1900&&_dgfg ==3{_cgf --;};return MakeNumberResult (_cgf );};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_gec :=len (args );if _gec !=4&&_gec !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_accg ,_fge ,_gaad :=_adgbd (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _gaad .Type ==ResultTypeError {return _gaad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eccc :=args [2].ValueNumber ;if _eccc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bdfcb :=args [3].ValueNumber ;if _bdfcb <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_eacd :=0;if _gec ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eacd =int (args [4].ValueNumber );if !_aba (_eacd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_acbdc ,_gaad :=_adgb (_accg ,_fge ,_eacd );if _gaad .Type ==ResultTypeError {return _gaad ;};return MakeNumberResult ((_bdfcb /_eccc -1)/_acbdc );};type node struct{_bdef tokenType ;_gagbd string ;};var _fccgf ,_eccca ,_bbce ,_geac ,_gdadd ,_bedag ,_aaf ,_bgfd ,_bedae ,_dgacb ,_fbef ,_geae ,_gbgfc ,_abgg ,_dbcd *_ec .Regexp ;func _fdab (_afee float64 )float64 {_gead :=float64 (1);for _ffda :=float64 (2);_ffda <=_afee ;_ffda ++{_gead *=_ffda ;};return _gead ;};

// Reference returns a string reference value to an expression with prefix.
func (_dggacb PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_caed :=_dggacb ._edfcc .Reference (ctx ,ev );_deadf :=_dggacb ._fdcd .Reference (ctx ,ev );if _caed .Type ==ReferenceTypeSheet &&_deadf .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_caed .Value +"\u0021"+_deadf .Value };};return ReferenceInvalid ;};

// Reference returns a string reference value to a vertical range.
func (_aeede VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_aeede .verticalRangeReference ()};};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_gfde :=len (args );if _gfde !=3&&_gfde !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eafd ,_fddg :=_acbgfc (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _fddg .Type ==ResultTypeError {return _fddg ;};_gcfc ,_fddg :=_acbgfc (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _fddg .Type ==ResultTypeError {return _fddg ;};_fgdcf ,_fddg :=_acbgfc (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _fddg .Type ==ResultTypeError {return _fddg ;};_eceaf :=0;if _gfde ==3{return MakeStringResult (_ca .Replace (_eafd ,_gcfc ,_fgdcf ,-1));}else {_ecgcg ,_gbae :=_gfgbg (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _gbae .Type ==ResultTypeError {return _gbae ;};_eceaf =int (_ecgcg );if _eceaf < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_gaggd :=_eafd ;_afga :=_eceaf ;_agbgc :=-1;_edffc :=len (_gcfc );_fbbcff :=0;for {_afga --;_cged :=_ca .Index (_gaggd ,_gcfc );if _cged ==-1{_agbgc =-1;break ;}else {_agbgc =_cged +_fbbcff ;if _afga ==0{break ;};_dfdbg :=_edffc +_cged ;_fbbcff +=_dfdbg ;_gaggd =_gaggd [_dfdbg :];};};if _agbgc ==-1{return MakeStringResult (_eafd );}else {_adaa :=_eafd [:_agbgc ];_bcag :=_eafd [_agbgc +_edffc :];return MakeStringResult (_adaa +_fgdcf +_bcag );};};};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};type evCache struct{_dege map[string ]Result ;_cdf *_ee .Mutex ;};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_bfee ,_ggd :=_beb (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _ggd .Type ==ResultTypeError {return _ggd ;};_ccafe :=_bfee ._gfeeb ;_bbde :=_bfee ._gccc ;_ebfg :=_bfee ._gdfb ;_fbb :=_bfee ._afdg ;_cggf :=_bfee ._dfgd ;_agga :=_bfee ._aab ;_bbed :=_adae (_ccafe ,_bbde ,_ebfg ,0,_agga );_fgad :=0.0;if _fbb ==1{if _agga ==0{_fgad =-_ebfg ;_fbb ++;};};for _eedc :=_fbb ;_eedc <=_cggf ;_eedc ++{if _agga ==1{_fgad +=_aec (_ccafe ,_eedc -2,_bbed ,_ebfg ,1)-_bbed ;}else {_fgad +=_aec (_ccafe ,_eedc -1,_bbed ,_ebfg ,0);};};_fgad *=_ccafe ;return MakeNumberResult (_fgad );};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_begd :=len (args );if _begd !=4&&_begd !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffea ,_ceaa ,_adgd :=_adgbd (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _adgd .Type ==ResultTypeError {return _adgd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agab :=args [2].ValueNumber ;if _agab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bbgb :=args [3].ValueNumber ;if _bbgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_bfgf :=0;if _begd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfgf =int (args [4].ValueNumber );if !_aba (_bfgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_gfed ,_adgd :=_adgb (_ffea ,_ceaa ,_bfgf );if _adgd .Type ==ResultTypeError {return _adgd ;};return MakeNumberResult (_bbgb *(1-_agab *_gfed ));};

// Reference returns an invalid reference for FunctionCall.
func (_cadg FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns a string reference value to a horizontal range with prefix.
func (_bcfc PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_cebgb :=_bcfc ._cafcc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bcfc .horizontalRangeReference (_cebgb .Value )};};const _cbcee ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";func _ebfa (_dgaf int )bool {if _dgaf ==_dgaf /400*400{return true ;};if _dgaf ==_dgaf /100*100{return false ;};return _dgaf ==_dgaf /4*4;};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_fdcc EmptyExpr )Update (q *_ed .UpdateQuery )Expression {return _fdcc };

// Update updates references in the VerticalRange after removing a row/column.
func (_eedgg VerticalRange )Update (q *_ed .UpdateQuery )Expression {if q .UpdateType ==_ed .UpdateActionRemoveColumn {_adfed :=_eedgg ;if q .UpdateCurrentSheet {_acdgf :=q .ColumnIdx ;_adfed ._dfaf =_eaa (_eedgg ._dfaf ,_acdgf );_adfed ._ceecg =_eaa (_eedgg ._ceecg ,_acdgf );};return _adfed ;};return _eedgg ;};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_fbcb string };func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gced :=args [0].AsString ();if _gced .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_gced .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_gced .ValueString [0]));};func _ebfba (_aebf []Result ,_gfad string )(float64 ,float64 ,Result ){if len (_aebf )!=2{return 0,0,MakeErrorResult (_gfad +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _aebf [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfad +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbce :=_aebf [0].ValueNumber ;if _aebf [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfad +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gedag :=float64 (int (_aebf [1].ValueNumber ));if _gedag < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_gfad +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _cbce ,_gedag ,_eec ;};const _fagg =57369;

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_cdgag Context ,_gdfggc Evaluator ,_gggfd []Result )Result ;

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ffaa :=args [0].ValueNumber ;_efa :=args [1].ValueNumber ;_fff :=args [2].ValueNumber ;_gfbg :=_daf (_ffaa ,_efa ,_fff );if _gfbg >=0{return MakeNumberResult (_gfbg );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};type rmode byte ;

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_aeebf ,_dcbf :=_cdfe ("\u0046\u0049\u004e\u0044",args );if _dcbf .Type !=ResultTypeEmpty {return _dcbf ;};_cfcb :=_aeebf ._gbfbd ;if _cfcb ==""{return MakeNumberResult (1.0);};_ecdgd :=_aeebf ._egaf ;_bfgd :=_aeebf ._ccab ;_gacg :=1;for _gdag :=range _ecdgd {if _gacg < _bfgd {_gacg ++;continue ;};_gcedb :=_ca .Index (_ecdgd [_gdag :],_cfcb );if _gcedb ==0{return MakeNumberResult (float64 (_gacg ));};_gacg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _eea (_edb ,_ffc int )int {if _ffc ==2&&_ebfa (_edb ){return 29;}else {return _cgdd [_ffc -1];};};func _dbdd (_gfac ,_beee ,_degg ,_fccf ,_dgbg ,_gaba float64 ,_bdbe int )(float64 ,Result ){_cbab :=int (_gaba );_acbdb :=_bgff (_gfac ,_beee ,_cbab ,_bdbe );_affbd :=_cfdgf (_gfac ,_beee ,_cbab ,_bdbe )/_acbdb ;_dcgb ,_eebe :=_abb (_gfac ,_beee ,_cbab ,_bdbe );if _eebe .Type ==ResultTypeError {return 0,_eebe ;};_degee :=_gfee (_gfac ,_beee ,_cbab ,_bdbe );_acfb :=_dgbg /_ge .Pow (1+_fccf /_gaba ,_dcgb -1+_affbd );_acfb -=100*_degg /_gaba *_degee /_acbdb ;_cdbd :=100*_degg /_gaba ;_aedd :=1+_fccf /_gaba ;for _bdaf :=0.0;_bdaf < _dcgb ;_bdaf ++{_acfb +=_cdbd /_ge .Pow (_aedd ,_bdaf +_affbd );};return _acfb ,MakeEmptyResult ();};func _dfb (_cded ,_baa int )int {switch _baa {case 1:if _ebfa (_cded ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_efac ,_bffbb :=_gbccb (args ,false );if _bffbb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_efac /_bffbb );};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gfg :=args [0].ValueNumber ;_bea :=args [1].ValueNumber ;if _bea < _gfg {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _bea ==_gfg {return MakeNumberResult (0);};_cbed :=_ca .ToLower (args [2].ValueString );if _cbed =="\u0064"{return MakeNumberResult (_bea -_gfg );};_gfd :=_fdbf (_gfg );_agcc :=_fdbf (_bea );_cccd ,_dcgd ,_aegf :=_gfd .Date ();_ceb ,_fdca ,_fcb :=_agcc .Date ();_efb :=int (_dcgd );_ecc :=int (_fdca );var _gdd float64 ;switch _cbed {case "\u0079":_gdd =float64 (_ceb -_cccd );if _ecc < _efb ||(_ecc ==_efb &&_fcb < _aegf ){_gdd --;};case "\u006d":_dcfe :=_ceb -_cccd ;_geea :=_ecc -_efb ;if _fcb < _aegf {_geea --;};if _geea < 0{_dcfe --;_geea +=12;};_gdd =float64 (_dcfe *12+_geea );case "\u006d\u0064":_gda :=_ecc ;if _fcb < _aegf {_gda --;};_gdd =float64 (int (_bea -_eeff (_ceb ,_gda ,_aegf )));case "\u0079\u006d":_gdd =float64 (_ecc -_efb );if _fcb < _aegf {_gdd --;};if _gdd < 0{_gdd +=12;};case "\u0079\u0064":_gdca :=_ceb ;if _ecc < _efb ||(_ecc ==_efb &&_fcb < _aegf ){_gdca --;};_gdd =float64 (int (_bea -_eeff (_gdca ,_efb ,_aegf )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_gdd );};

// Update returns the same object as updating sheet references does not affect Bool.
func (_dff Bool )Update (q *_ed .UpdateQuery )Expression {return _dff };const _cegc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";func (_badb *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};const _dfbf =57362;

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edeb :=args [0].AsNumber ();if _edeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdce :=float64 (1);_aedg :=args [1].AsNumber ();if _aedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_bdce =_aedg .ValueNumber ;if _bdce < 0&&_edeb .ValueNumber > 0||_bdce > 0&&_edeb .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_fcag :=_edeb .ValueNumber ;_fcag ,_afcc :=_ge .Modf (_fcag /_bdce );if _ge .Trunc (_afcc +0.5)> 0{_fcag ++;};return MakeNumberResult (_fcag *_bdce );};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ceag :=[]string {};for _cbcd :=range _ccggg {_ceag =append (_ceag ,_cbcd );};for _ddab :=range _daeab {_ceag =append (_ceag ,_ddab );};_df .Strings (_ceag );return _ceag ;};

// Eval evaluates and returns the result of an empty expression.
func (_ab EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};func _bbec (_acdad ,_bgef float64 )bool {return _ge .Abs (_acdad -_bgef )< 1.0e-6};var _caeef =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};const _aagag =187;func _daf (_edg ,_faeg ,_cbfe float64 )float64 {return (_edg *3600+_faeg *60+_cbfe )/86400};func _eag (_gac int )bool {return _gac ==0||_gac ==4};type ivr struct{};const _ecb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// String returns a string representation of a vertical range.
func (_aafbb VerticalRange )String ()string {return _aafbb .verticalRangeReference ()};const _bfgff =2;func _bfff (_eabaf Result )[][]Result {switch _eabaf .Type {case ResultTypeArray :return _eabaf .ValueArray ;case ResultTypeList :return [][]Result {_eabaf .ValueList };default:return [][]Result {};};};const _dggabc int =30;

// Reference returns a string reference value to a cell.
func (_ceg CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ceg ._gad };};func _fgbcc (_dbea _dfc .Time )_dfc .Time {_dbea =_dbea .UTC ();return _dfc .Date (_dbea .Year (),_dbea .Month (),_dbea .Day (),_dbea .Hour (),_dbea .Minute (),_dbea .Second (),_dbea .Nanosecond (),_dfc .Local );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egff :=args [0].AsNumber ();_gdae :=args [1].AsNumber ();if _egff .Type !=ResultTypeNumber ||_gdae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bdaac :=_ge .Trunc (_egff .ValueNumber );_fcdf :=_ge .Trunc (_gdae .ValueNumber );if _bdaac < _fcdf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _bdaac ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_bdaac +_fcdf -1);args [1]=MakeNumberResult (_bdaac -1);return Combin (args );};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eegeg :=args [0].AsNumber ();if _eegeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ge .Pi /180.0*_eegeg .ValueNumber );};const _gddfg =57374;

// Reference returns a string reference value to a range.
func (_afdbd Range )Reference (ctx Context ,ev Evaluator )Reference {_dcag :=_afdbd ._gfafd .Reference (ctx ,ev );_fdbgb :=_afdbd ._fdffa .Reference (ctx ,ev );if _dcag .Type ==ReferenceTypeCell &&_fdbgb .Type ==ReferenceTypeCell {return MakeRangeReference (_gfacd (_dcag ,_fdbgb ));};return ReferenceInvalid ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func _ceaff (_gadc Result )[]Result {_cdfc :=_gadc .ValueList ;if _gadc .Type ==ResultTypeArray {_cdfc =nil ;for _ ,_feggd :=range _gadc .ValueArray {if len (_feggd )> 0{_cdfc =append (_cdfc ,_feggd [0]);}else {_cdfc =append (_cdfc ,_eec );};};};return _cdfc ;};

// String returns a string representation of a horizontal range.
func (_fbbda HorizontalRange )String ()string {return _fbbda .horizontalRangeReference ()};func NewLexer ()*Lexer {return &Lexer {_fadfc :make (chan *node )}};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_gagce Expression ;_ggafd ,_cbffg string ;};

// Reference returns an invalid reference for Number.
func (_fggc Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _eadcf =57355;

// Eval evaluates a vertical range returning a list of results or an error.
func (_dgec VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ebdcd :=_dgec .verticalRangeReference ();if _bbbab ,_edge :=ev .GetFromCache (_ebdcd );_edge {return _bbbab ;};_eaeb ,_cbdef :=_aecce (ctx ,_dgec ._dfaf ,_dgec ._ceecg );_gcgd :=_gfdb (ctx ,ev ,_eaeb ,_cbdef );ev .SetCache (_ebdcd ,_gcgd );return _gcgd ;};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// LastColumn returns empty string for the invalid reference context.
func (_acdab *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fabbf :=args [0].AsNumber ();if _fabbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_bccaa :=float64 (1);if _fabbf .ValueNumber < 0{_bccaa =-1;};if len (args )> 1{_fgda :=args [1].AsNumber ();if _fgda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bccaa =_fgda .ValueNumber ;};if _bccaa < 0&&_fabbf .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_ge .Ceil (_fabbf .ValueNumber ));};_aeab :=_fabbf .ValueNumber ;_aeab ,_defc :=_ge .Modf (_aeab /_bccaa );if _defc > 0{_aeab ++;};return MakeNumberResult (_aeab *_bccaa );};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_dfeaa :=_ca .Split (v ,"\u003a");if len (_dfeaa )!=2{return nil ;};if _dfeaa [0]> _dfeaa [1]{_dfeaa [0],_dfeaa [1]=_dfeaa [1],_dfeaa [0];};return VerticalRange {_dfaf :_dfeaa [0],_ceecg :_dfeaa [1]};};func (_ccb *evCache )GetFromCache (key string )(Result ,bool ){_ccb ._cdf .Lock ();_eg ,_bde :=_ccb ._dege [key ];_ccb ._cdf .Unlock ();return _eg ,_bde ;};func _adae (_efbg ,_dce ,_cce ,_bcdb float64 ,_bdgg int )float64 {var _fbbe float64 ;if _efbg ==0{_fbbe =(_cce +_bcdb )/_dce ;}else {_ccdb :=_ge .Pow (1+_efbg ,_dce );if _bdgg ==1{_fbbe =(_bcdb *_efbg /(_ccdb -1)+_cce *_efbg /(1-1/_ccdb ))/(1+_efbg );}else {_fbbe =_bcdb *_efbg /(_ccdb -1)+_cce *_efbg /(1-1/_ccdb );};};return -_fbbe ;};func _dbba (_cda string )(int ,int ,float64 ,bool ,bool ,Result ){_cad :="";_acca :=[]string {};for _geeb ,_bdg :=range _affb {_acca =_bdg .FindStringSubmatch (_cda );if len (_acca )> 1{_cad =_geeb ;break ;};};if _cad ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};_bfa :=_acca [1]=="";_acca =_acca [49:];_acdg :=len (_acca );_affg :=_acca [_acdg -1];_cca :=_affg =="\u0061\u006d";_fbf :=_affg =="\u0070\u006d";var _cgbc ,_ecca int ;var _efaa float64 ;var _cfdg error ;switch _cad {case "\u0068\u0068":_cgbc ,_cfdg =_dc .Atoi (_acca [0]);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};_ecca =0;_efaa =0;case "\u0068\u0068\u003am\u006d":_cgbc ,_cfdg =_dc .Atoi (_acca [0]);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};_ecca ,_cfdg =_dc .Atoi (_acca [2]);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};_efaa =0;case "\u006d\u006d\u003as\u0073":_cgbc =0;_ecca ,_cfdg =_dc .Atoi (_acca [0]);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};_efaa ,_cfdg =_dc .ParseFloat (_acca [2],64);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_cgbc ,_cfdg =_dc .Atoi (_acca [0]);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};_ecca ,_cfdg =_dc .Atoi (_acca [2]);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};_efaa ,_cfdg =_dc .ParseFloat (_acca [4],64);if _cfdg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};};if _ecca >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};if _cca ||_fbf {if _cgbc > 12||_efaa >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );}else if _cgbc ==12{_cgbc =0;};}else if _cgbc >=24||_efaa >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_ecb );};return _cgbc ,_ecca ,_efaa ,_fbf ,_bfa ,_eec ;};

// String returns a string representation of SheetPrefixExpr.
func (_bdfcf SheetPrefixExpr )String ()string {return _bdfcf ._aead };

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cggcf .Float64 ());};

// IsDBCS returns false for the invalid reference context.
func (_fcdc *ivr )IsDBCS ()bool {return false };

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_cffg :=args [0];if _cffg .Type !=ResultTypeArray &&_cffg .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_afba :=_cffg .ValueArray ;if len (_afba )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_afba )));};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_aadd :=args [0].AsString ();if _aadd .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_adfff :=args [1].AsNumber ();if _adfff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _adfff .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _adfff .ValueNumber ==0{return MakeStringResult ("");};_bfegc :=_f .Buffer {};for _dgfgg :=0;_dgfgg < int (_adfff .ValueNumber );_dgfgg ++{_bfegc .WriteString (_aadd .ValueString );};return MakeStringResult (_bfegc .String ());};

// Function is a standard function whose result only depends on its arguments.
type Function func (_degfa []Result )Result ;

// String returns an empty string for Error.
func (_bec Error )String ()string {return ""};func _acad (_bce ,_eaf _dfc .Time )bool {_acfd :=_bce .Unix ();_age :=_eaf .Unix ();_gbeed :=_bce .Year ();_cbfed :=_gcfd (_gbeed ,_dfc .March ,1);if _ebfa (_gbeed )&&_acfd < _cbfed &&_age >=_cbfed {return true ;};var _egce =_eaf .Year ();var _dcdg =_gcfd (_egce ,_dfc .March ,1);return (_ebfa (_egce )&&_age >=_dcdg &&_acfd < _dcdg );};type Expression interface{Eval (_gbbe Context ,_egf Evaluator )Result ;Reference (_ff Context ,_ffg Evaluator )Reference ;String ()string ;Update (_baf *_ed .UpdateQuery )Expression ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_abc ,_bacc :=_eaec (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _bacc .Type ==ResultTypeError {return _bacc ;};_efff :=_fdbf (_abc ._bddab );_bdcg :=_fdbf (_abc ._dgfa );_ceeac :=_abc ._fcaf ;_ccba :=_dbc (_efff ,_bdcg ,_ceeac );_dgac ,_acaaf ,_caac :=_ccba .Date ();return MakeNumberResult (_eeff (_dgac ,int (_acaaf ),_caac ));};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdbg :=args [2].ValueNumber ;if _cdbg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_dcc -_efbf )/_cdbg );};

// Reference returns an invalid reference for EmptyExpr.
func (_fea EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation of String.
func (_fedg String )String ()string {return "\u0022"+_fedg ._agffc +"\u0022"};func _dbc (_ccbb ,_fggb _dfc .Time ,_ebgg int )_dfc .Time {_bcg :=_dfc .Date (_ccbb .Year (),_fggb .Month (),_fggb .Day (),0,0,0,0,_dfc .UTC );if _bcg .After (_ccbb ){_bcg =_bcg .AddDate (-1,0,0);};for !_bcg .After (_ccbb ){_bcg =_bcg .AddDate (0,12/_ebgg ,0);};return _bcg ;};func (_fabc VerticalRange )verticalRangeReference ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_fabc ._dfaf ,_fabc ._ceecg );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _ccbc :=0;_ccbc < len (args )-1;_ccbc +=2{if args [_ccbc ].ValueNumber ==1{return args [_ccbc +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);func _fdedd (_bga string )*criteriaRegex {_eadcb :=&criteriaRegex {};if _bga ==""{return _eadcb ;};if _gccf :=_afgc .FindStringSubmatch (_bga );len (_gccf )> 1{_eadcb ._effc =_acbgf ;_eadcb ._cega =_gccf [1];}else if _edff :=_dbcag .FindStringSubmatch (_bga );len (_edff )> 1{_eadcb ._effc =_acbgf ;_eadcb ._cega =_edff [1];}else if _ffcf :=_dbge .FindStringSubmatch (_bga );len (_ffcf )> 1{_eadcb ._effc =_aeacf ;_eadcb ._cega =_ffcf [1];}else if _dgea :=_fageb .FindStringSubmatch (_bga );len (_dgea )> 1{_eadcb ._effc =_ecad ;_eadcb ._cega =_dgea [1];}else if _gade :=_eacg .FindStringSubmatch (_bga );len (_gade )> 1{_eadcb ._effc =_dbefc ;_eadcb ._cega =_gade [1];}else if _fbag :=_dgfac .FindStringSubmatch (_bga );len (_fbag )> 1{_eadcb ._effc =_beeb ;_eadcb ._cega =_fbag [1];};return _eadcb ;};var _dgadfa =[...]uint8 {0,17,33,49,63,78,93,108};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_acef :=len (args );if _acef < 4||_acef > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcaea :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcggd :=args [1].ValueNumber ;if _fcggd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fegf :=args [2].ValueNumber ;if _fegf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fceb :=args [3].ValueNumber ;_bbge :=0.0;if _acef > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bbge =args [4].ValueNumber ;};_egae :=0;if _acef ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_egae =int (args [5].ValueNumber );if _egae !=0{_egae =1;};};return MakeNumberResult (_cec (_gcaea ,_fcggd ,_fegf ,_fceb ,_bbge ,_egae ));};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_cbga :=len (args );if _cbga ==0||_cbga > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_fbba :=_bfff (args [0]);_aecc :=[]float64 {};for _ ,_bfbb :=range _fbba {for _ ,_afec :=range _bfbb {if _afec .Type ==ResultTypeNumber &&!_afec .IsBoolean {_aecc =append (_aecc ,_afec .ValueNumber );};};};_ceeg :=len (_aecc );if len (_aecc )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_aee :=0.1;if _cbga ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aee =args [1].ValueNumber ;if _aee <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_fafg :=[]float64 {};for _cdfa :=0;_cdfa < _ceeg ;_cdfa ++{if _cdfa ==0{_fafg =append (_fafg ,0);}else {_fafg =append (_fafg ,_fafg [_cdfa -1]+365);};};return _gbfe (_aecc ,_fafg ,_aee );};var _adeed =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_ccefb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccefb =int (args [1].ValueNumber );if _ccefb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _ccefb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_acfda :=args [0].Value ();_aecad :=len (_acfda );if _ccefb > _aecad {return MakeStringResult (_acfda );};return MakeStringResult (_acfda [_aecad -_ccefb :_aecad ]);};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_gfafd ,_fdffa Expression };var _cea =[]*_ec .Regexp {};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbcd :=args [0].AsNumber ();if _fbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbgf :=float64 (1);if _fbcd .ValueNumber < 0{_fbgf =-1;};if len (args )> 1{_decfd :=args [1].AsNumber ();if _decfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbgf =_ge .Abs (_decfd .ValueNumber );};if len (args )==1{return MakeNumberResult (_ge .Ceil (_fbcd .ValueNumber ));};_baefb :=_fbcd .ValueNumber ;_baefb ,_gfbf :=_ge .Modf (_baefb /_fbgf );if _gfbf !=0{if _fbcd .ValueNumber > 0{_baefb ++;};};return MakeNumberResult (_baefb *_fbgf );};

// LastRow returns 0 for the invalid reference context.
func (_ebced *ivr )LastRow (colFrom string )int {return 0};

// Eval evaluates a range returning a list of results or an error.
func (_ddffd Range )Eval (ctx Context ,ev Evaluator )Result {_dcdc :=_ddffd ._gfafd .Reference (ctx ,ev );_cgega :=_ddffd ._fdffa .Reference (ctx ,ev );_adcaf :=_gfacd (_dcdc ,_cgega );if _dcdc .Type ==ReferenceTypeCell &&_cgega .Type ==ReferenceTypeCell {if _bgge ,_dbaa :=ev .GetFromCache (_adcaf );_dbaa {return _bgge ;}else {_efbgd :=_gfdb (ctx ,ev ,_dcdc .Value ,_cgega .Value );ev .SetCache (_adcaf ,_efbgd );return _efbgd ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_adcaf );};const _bcbbd =57350;var _gdf =map[string ]*_ec .Regexp {};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_edde ,_gdba ,_cfabc :=_gbdde (from ,to );if _cfabc !=nil {_edd .Log .Debug (_cfabc .Error ());return NewError (_cfabc .Error ());};return Range {_gfafd :_edde ,_fdffa :_gdba };};

// GetEpoch returns a null time object for the invalid reference context.
func (_gfec *ivr )GetEpoch ()_dfc .Time {return _dfc .Time {}};func _gcda (_fcgf [][]Result ,_egdb int )[][]Result {_ffefg :=[][]Result {};for _fbgcb :=range _fcgf {if _fbgcb ==0{continue ;};_cfedf :=[]Result {};for _aeba :=range _fcgf {if _aeba ==_egdb {continue ;};_cfedf =append (_cfedf ,_fcgf [_fbgcb ][_aeba ]);};_ffefg =append (_ffefg ,_cfedf );};return _ffefg ;};func _fgcc (_aeafg []Result ,_cdda bool )Result {_eeacb :="\u004d\u0041\u0058";if _cdda {_eeacb ="\u004d\u0041\u0058\u0041";};if len (_aeafg )==0{return MakeErrorResult (_eeacb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cceg :=-_ge .MaxFloat64 ;for _ ,_gabe :=range _aeafg {switch _gabe .Type {case ResultTypeNumber :if (_cdda ||!_gabe .IsBoolean )&&_gabe .ValueNumber > _cceg {_cceg =_gabe .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_ggbe :=_fgcc (_gabe .ListValues (),_cdda );if _ggbe .ValueNumber > _cceg {_cceg =_ggbe .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_bbecc :=0.0;if _cdda {_bbecc =_gabe .AsNumber ().ValueNumber ;};if _bbecc > _cceg {_cceg =_bbecc ;};default:_edd .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_eeacb +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gabe .Type );};};if _cceg ==-_ge .MaxFloat64 {_cceg =0;};return MakeNumberResult (_cceg );};const _gfc ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";func _bgff (_faba ,_bbbb float64 ,_ccce ,_bfeb int )float64 {_gcg :=_fdbf (_faba );_daa :=_fdbf (_bbbb );if _bfeb ==1{_bdgb :=_acgg (_gcg ,_daa ,_ccce ,1);_bcad :=_bdgb .AddDate (0,12/_ccce ,0);return _edfc (_bdgb ,_bcad ,_bfeb );};return float64 (_dfb (0,_bfeb ))/float64 (_ccce );};

// Eval evaluates and returns an expression with prefix.
func (_cadge PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_afgfe :=_cadge ._edfcc .Reference (ctx ,ev );switch _afgfe .Type {case ReferenceTypeSheet :if _ccfde (_afgfe ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_afgfe .Value ));};_acaee :=ctx .Sheet (_afgfe .Value );return _cadge ._fdcd .Eval (_acaee ,ev );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afgfe .Type ));};};const _bdda ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_geaa :=args [0].Ref ;for _geaa .Type ==ReferenceTypeNamedRange {_geaa =ctx .NamedRange (_geaa .Value );};_dcbb :="";switch _geaa .Type {case ReferenceTypeCell :_dcbb =_geaa .Value ;case ReferenceTypeRange :_efca :=_ca .Split (_geaa .Value ,"\u003a");if len (_efca )==2{_dcbb =_efca [0];};default:return MakeErrorResult (_g .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_geaa .Type ));};_cbgd ,_acae :=_gee .ParseCellReference (_dcbb );if _acae !=nil {return MakeErrorResult (_g .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_acae .Error ()));};_bcae ,_bdgbb ,_adfd :=_cbgd .Column ,_cbgd .RowIdx ,_cbgd .SheetName ;_gcbb :=args [1].AsNumber ();if _gcbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_edag :=args [2].AsNumber ();if _edag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _ababa ,_dcdd Result ;if len (args )==3{_ababa =MakeNumberResult (1);_dcdd =MakeNumberResult (1);}else {_ababa =args [3].AsNumber ();if _ababa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _ababa .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_dcdd =args [4].AsNumber ();if _dcdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _dcdd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_aag :=_gee .ColumnToIndex (_bcae );_cfed :=_bdgbb +uint32 (_gcbb .ValueNumber );_cdeb :=_aag +uint32 (_edag .ValueNumber );_bccf :=_cfed +uint32 (_ababa .ValueNumber );_gdfbe :=_cdeb +uint32 (_dcdd .ValueNumber );if _ababa .ValueNumber > 0{_bccf --;}else {_bccf ++;_cfed ,_bccf =_bccf ,_cfed ;};if _dcdd .ValueNumber > 0{_gdfbe --;}else {_gdfbe ++;_cdeb ,_gdfbe =_gdfbe ,_cdeb ;};_fccg :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_gee .IndexToColumn (_cdeb ),_cfed );_beba :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_gee .IndexToColumn (_gdfbe ),_bccf );if _adfd ==""{return _gfdb (ctx ,ev ,_fccg ,_beba );}else {return _gfdb (ctx .Sheet (_adfd ),ev ,_fccg ,_beba );};};func _abb (_aace ,_gaaa float64 ,_fgbc ,_bcbe int )(float64 ,Result ){_accd ,_eeae :=_fdbf (_aace ),_fdbf (_gaaa );if _eeae .After (_accd ){_geg :=_acgg (_accd ,_eeae ,_fgbc ,_bcbe );_bcf :=(_eeae .Year ()-_geg .Year ())*12+int (_eeae .Month ())-int (_geg .Month ());return float64 (_bcf *_fgbc )/12.0,_eec ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_aead :s }};func _bdfc (_ffca ,_fee ,_caa ,_fac int )int {if !_eag (_fac ){return _caa ;};_cdad :=_caa ;_gefb :=_eea (_ffca ,_fee );if _cdad > 30||_caa >=_gefb ||_cdad >=_gefb {_cdad =30;};return _cdad ;};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_effg :=len (args );if _effg !=6&&_effg !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbeb ,_cgef ,_cbbf :=_adgbd (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _cbbf .Type ==ResultTypeError {return _cbbf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfeee :=args [2].ValueNumber ;if _bfeee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bega :=args [3].ValueNumber ;if _bega < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daeb :=args [4].ValueNumber ;if _daeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aecb :=args [5];if _aecb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ebbf :=_aecb .ValueNumber ;if !_faee (_ebbf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fba :=0;if _effg ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fba =int (args [6].ValueNumber );if !_aba (_fba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_dcfb ,_cbbf :=_dbdd (_dbeb ,_cgef ,_bfeee ,_bega ,_daeb ,_ebbf ,_fba );if _cbbf .Type ==ResultTypeError {return _cbbf ;};return MakeNumberResult (_dcfb );};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdgb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fegfb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggge :=args [2].ValueNumber ;if _ggge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fecd :=args [3].ValueNumber ;if _fecd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fecd > _ggge {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_dacge :=(_gdgb -_fegfb )*(_ggge -_fecd +1)*2;_fddc :=_ggge *(_ggge +1);return MakeNumberResult (_dacge /_fddc );};type xargs struct{_bacf []float64 ;_dgdc []float64 ;};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdee :=args [0].AsString ();_cfbgb :=args [1].AsString ();if _cdee .Type !=ResultTypeString ||_cfbgb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_cdee .ValueString ==_cfbgb .ValueString );};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ccc ,_cfe :=_dc .ParseBool (v );if _cfe !=nil {_edd .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_cfe );};return Bool {_dede :_ccc };};const _afae =57353;

// Reference returns an invalid reference for ConstArrayExpr.
func (_gf ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };