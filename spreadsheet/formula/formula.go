//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_e "bytes";_c "errors";_db "fmt";_fcb "github.com/unidoc/unioffice";_eb "github.com/unidoc/unioffice/internal/mergesort";_cab "github.com/unidoc/unioffice/internal/wildcard";_dgg "github.com/unidoc/unioffice/spreadsheet/format";_cg "github.com/unidoc/unioffice/spreadsheet/reference";_cbe "github.com/unidoc/unioffice/spreadsheet/update";_g "io";_a "math";_ed "math/big";_ca "math/rand";_cb "regexp";_f "sort";_fc "strconv";_dg "strings";_fe "sync";_ge "time";_ce "unicode";);var _ceeg _fe .Mutex ;

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_gbdb :=len (args );if _gbdb !=6&&_gbdb !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cdc ,_fbdb ,_agagc :=_ffcca (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _agagc .Type ==ResultTypeError {return _agagc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agdf :=args [2].ValueNumber ;if _agdf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ecgc :=args [3].ValueNumber ;if _ecgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcbg :=args [4].ValueNumber ;if _gcbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdca :=args [5];if _cdca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ecdda :=_cdca .ValueNumber ;if !_bccf (_ecdda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ebaf :=0;if _gbdb ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebaf =int (args [6].ValueNumber );if !_dccd (_ebaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_bcdfg ,_agagc :=_gcff (_cdc ,_fbdb ,_agdf ,_ecgc ,_gcbg ,_ecdda ,_ebaf );if _agagc .Type ==ResultTypeError {return _agagc ;};return MakeNumberResult (_bcdfg );};

// Reference returns an invalid reference for BinaryExpr.
func (_fd BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _edece (args ,_bbgc )};func _aead (_egedb Result ,_eebaa *criteriaParsed )bool {_baff :=_dg .ToLower (_egedb .ValueString );_fadg :=_eebaa ._agagf ._egcd ;_efaag :=_eebaa ._agagf ._bgdde ;if _fadg ==_dcfa {return _baff ==_efaag ||_cab .Match (_efaag ,_baff );};if _egedb .Type !=ResultTypeEmpty {if _baff ==_eebaa ._fbfag ||_cab .Match (_eebaa ._fbfag ,_baff ){return true ;};if _ ,_cbdca :=_fc .ParseFloat (_efaag ,64);_cbdca ==nil {return false ;};switch _fadg {case _bfec :return _baff <=_efaag ;case _dbdba :return _baff >=_efaag ;case _fegf :return _baff < _efaag ;case _gbab :return _baff > _efaag ;};};return false ;};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cageg :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_eggc :=args [1].ValueNumber !=0;_cgacg :=_abee (args [2:],[]string {},_eggc );return MakeStringResult (_dg .Join (_cgacg ,_cageg ));};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fbag :=args [0].Ref ;if _fbag .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_fbaeg ,_dfg :=_cg .ParseCellReference (_fbag .Value );if _dfg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fbag .Value );};return MakeNumberResult (float64 (_fbaeg .RowIdx ));};var _cga =map[string ]*_cb .Regexp {};func (_gfc *evCache )GetFromCache (key string )(Result ,bool ){_gfc ._abg .Lock ();_ggd ,_dbc :=_gfc ._fgg [key ];_gfc ._abg .Unlock ();return _ggd ,_dbc ;};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efda :=int (args [0].ValueNumber );return MakeBoolResult (_efda ==_efda /2*2);};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feba :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebea :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggbeb :=args [2].ValueNumber ;if _ggbeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbcb :=args [3].ValueNumber ;return MakeNumberResult (_bbcb *_feba *(_ebea /_ggbeb -1));};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_efafc :=ctx .GetEpoch ();_eccc ,_feafa :=_eafce (args [0].Value (),_efafc );if _feafa !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_efgd :=_eccc .Year ();return MakeBoolResult (_efba (_efgd ));};const _gecbg =57368;

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_cdbg PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_bgcc :=_cdbg ._gbefd .Reference (ctx ,ev );switch _bgcc .Type {case ReferenceTypeSheet :if _cdbb (_bgcc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_db .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bgcc .Value ));};_aaaa :=_cdbg .horizontalRangeReference (_bgcc .Value );if _baeac ,_bbcdd :=ev .GetFromCache (_aaaa );_bbcdd {return _baeac ;};_acbc :=ctx .Sheet (_bgcc .Value );_cdafg ,_ggaee :=_eadcf (_acbc ,_cdbg ._dgfd ,_cdbg ._ggae );_ggcad :=_geceg (_acbc ,ev ,_cdafg ,_ggaee );ev .SetCache (_aaaa ,_ggcad );return _ggcad ;default:return MakeErrorResult (_db .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bgcc .Type ));};};func (_bdbeb Result )String ()string {return _bdbeb .Value ()};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ddff (args ,_deca ));};const _bff ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edefg :=args [0];_edaga :=args [1];if _edaga .Type !=ResultTypeArray &&_edaga .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bbcd :=_bedgb (_edaga );_ebf :=-1;for _cdag ,_cfffd :=range _bbcd {if _ceddc (_edefg ,_cfffd ,false ,false )==_febgd {_ebf =_cdag ;};};if _ebf ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_ceda :=_bbcd ;if len (args )==3{_ceda =_bedgb (args [2]);};if _ebf < 0||_ebf >=len (_ceda ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _ceda [_ebf ];};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gebd :=args [0].AsNumber ();_fbcaf :=args [1].AsNumber ();if _gebd .Type !=ResultTypeNumber ||_fbcaf .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fbbe :=_a .Trunc (_gebd .ValueNumber );_dfab :=_a .Trunc (_fbcaf .ValueNumber );if _dfab > _fbbe {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _dfab ==_fbbe ||_dfab ==0{return MakeNumberResult (1);};_agce :=float64 (1);for _aeefe :=float64 (1);_aeefe <=_dfab ;_aeefe ++{_agce *=(_fbbe +1-_aeefe )/_aeefe ;};return MakeNumberResult (_agce );};

// Reference returns an invalid reference for FunctionCall.
func (_gagf FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _babe (_degcc Result )bool {_cgdb :=_degcc .Type ;return _cgdb !=ResultTypeArray &&_cgdb !=ResultTypeList ;};type defEval struct{evCache ;_fcc bool ;};const _ggage =57356;

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_a .Pi );};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_dba :=args [1].ValueNumber ;_ecb :=args [0];var _febd float64 ;switch _ecb .Type {case ResultTypeEmpty :_febd =0;case ResultTypeNumber :_febd =_ecb .ValueNumber ;case ResultTypeString :_gbd :=DateValue ([]Result {args [0]});if _gbd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_febd =_gbd .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cgfbc :=_dag (_febd );_dab :=_cgfbc .AddDate (0,int (_dba +1),0);_gd ,_dee ,_ :=_dab .Date ();_aagf :=_fabf (_gd ,int (_dee ),0);if _aagf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _gd ==1900&&_dee ==3{_aagf --;};return MakeNumberResult (_aagf );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdgd :=args [0].AsNumber ();if _fdgd .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gacf :=float64 (1);if _fdgd .ValueNumber < 0{_gacf =-1;};if len (args )> 1{_adfg :=args [1].AsNumber ();if _adfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gacf =_adfg .ValueNumber ;};_gcbge :=float64 (1);if len (args )> 2{_eebd :=args [2].AsNumber ();if _eebd .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcbge =_eebd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_a .Floor (_fdgd .ValueNumber ));};_gfdc :=_fdgd .ValueNumber ;_gfdc ,_gebf :=_a .Modf (_gfdc /_gacf );if _gebf !=0&&_fdgd .ValueNumber < 0&&_gcbge > 0{_gfdc ++;};return MakeNumberResult (_gfdc *_gacf );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cbff :=args [0];switch _cbff .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_afa :=_dag (_cbff .ValueNumber );return MakeNumberResult (float64 (_afa .Month ()));case ResultTypeString :_gdf :=_dg .ToLower (_cbff .ValueString );if !_aeag (_gdf ){_ ,_ ,_ ,_ ,_gfb ,_edgd :=_ada (_gdf );if _edgd .Type ==ResultTypeError {_edgd .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _edgd ;};if _gfb {return MakeNumberResult (1);};};_ ,_cacfa ,_ ,_ ,_dbddc :=_fdbg (_gdf );if _dbddc .Type ==ResultTypeError {return _dbddc ;};return MakeNumberResult (float64 (_cacfa ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};type rmode byte ;const _cbfbe =57365;

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdf :=args [0].AsNumber ();_fbdc :=args [1].AsNumber ();if _dfdf .Type !=ResultTypeNumber ||_fbdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gge :=_a .Trunc (_dfdf .ValueNumber );_cagce :=_a .Trunc (_fbdc .ValueNumber );if _gge < _cagce {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _gge ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_gge +_cagce -1);args [1]=MakeNumberResult (_gge -1);return Combin (args );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_ebdfb ,_ebbcb :=_bfbec (args ,true );if _ebbcb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_ebdfb /_ebbcb );};

// Update returns the same object as updating sheet references does not affect Number.
func (_bfcba Number )Update (q *_cbe .UpdateQuery )Expression {return _bfcba };

// String returns a string representation for Bool.
func (_age Bool )String ()string {if _age ._eec {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_ffdd ,_daaf :=_fgab (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _daaf .Type ==ResultTypeError {return _daaf ;};return MakeNumberResult (_fdcg (_ffdd ._aac ,_ffdd ._cfcf ,_ffdd ._agf ,_ffdd ._bae ));};

// Eval evaluates and returns the result of a constant array expression.
func (_bgba ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_bb :=[][]Result {};for _ ,_ege :=range _bgba ._dffg {_cgc :=[]Result {};for _ ,_fgf :=range _ege {_cgc =append (_cgc ,_fgf .Eval (ctx ,ev ));};_bb =append (_bb ,_cgc );};return MakeArrayResult (_bb );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_baea :=len (args );if _baea < 4||_baea > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bgbc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cace :=args [1].ValueNumber ;if _cace <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgeb :=args [2].ValueNumber ;if _bgeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_baeb :=args [3].ValueNumber ;_cgag :=0.0;if _baea > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgag =args [4].ValueNumber ;};_aaba :=0;if _baea ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aaba =int (args [5].ValueNumber );if _aaba !=0{_aaba =1;};};return MakeNumberResult (_egage (_bgbc ,_cace ,_bgeb ,_baeb ,_cgag ,_aaba ));};const _gccdc =1;func _cffc (_egaga Result ,_cece *criteriaParsed )bool {if _egaga .IsBoolean {return false ;};_efaac :=_egaga .Type ;if _cece ._bcbce {return _efaac ==ResultTypeNumber &&_egaga .ValueNumber ==_cece ._fdcd ;}else if _efaac ==ResultTypeNumber {return _bfcg (_egaga .ValueNumber ,_cece ._agagf );};return _aead (_egaga ,_cece );};func _fefef (_aaegd Result )*criteriaParsed {_cfgf :=_aaegd .Type ==ResultTypeNumber ;_cdagf :=_aaegd .ValueNumber ;_gggae :=_dg .ToLower (_aaegd .ValueString );_cdfee :=_bfgg (_gggae );return &criteriaParsed {_cfgf ,_cdagf ,_gggae ,_cdfee };};

// Error is an error expression.
type Error struct{_feb string };func _bdabe (_ceaf Context ,_fabc ,_gfcb string )(string ,string ){_dfcab :=_fabc +"\u0031";_aeac :=_ceaf .LastRow (_fabc );_ecbc :=_gfcb +_fc .Itoa (_aeac );return _dfcab ,_ecbc ;};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_bbcdg :=[]string {};for _faafe :=range _aafbd {_bbcdg =append (_bbcdg ,_faafe );};for _dfdc :=range _fcadee {_bbcdg =append (_bbcdg ,_dfdc );};_f .Strings (_bbcdg );return _bbcdg ;};func _efba (_gege int )bool {if _gege ==_gege /400*400{return true ;};if _gege ==_gege /100*100{return false ;};return _gege ==_gege /4*4;};const _bee =_bba +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_bgab ,_acdcf :=_dgec (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _acdcf .Type ==ResultTypeError {return _acdcf ;};_baf :=_bgab ._bfb ;_aded :=_bgab ._dac ;_edbaf :=_bgab ._fbe ;_acfc :=_bgab ._edd ;_acga :=_bgab ._begb ;_decg :=_bgab ._abb ;_gaeb :=_dgc (_baf ,_aded ,_edbaf ,0,_decg );_cbdc :=0.0;if _acfc ==1{if _decg ==0{_cbdc =_gaeb +_edbaf *_baf ;}else {_cbdc =_gaeb ;};_acfc ++;};for _aeb :=_acfc ;_aeb <=_acga ;_aeb ++{if _decg ==1{_cbdc +=_gaeb -(_dcaa (_baf ,_aeb -2,_gaeb ,_edbaf ,1)-_gaeb )*_baf ;}else {_cbdc +=_gaeb -_dcaa (_baf ,_aeb -1,_gaeb ,_edbaf ,0)*_baf ;};};return MakeNumberResult (_cbdc );};const _gfaae =57367;func _eegg (_abga []Result )[]float64 {_fgef :=make ([]float64 ,0);for _ ,_gadae :=range _abga {if _gadae .Type ==ResultTypeEmpty {continue ;};_gadae =_gadae .AsNumber ();switch _gadae .Type {case ResultTypeNumber :if !_gadae .IsBoolean {_fgef =append (_fgef ,_gadae .ValueNumber );};case ResultTypeList ,ResultTypeArray :_fgef =append (_fgef ,_eegg (_gadae .ListValues ())...);case ResultTypeString :default:_fcb .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gadae .Type );};};return _fgef ;};var _bdfa =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// LastColumn returns empty string for the invalid reference context.
func (_ffag *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gfaac :=args [0].AsNumber ();if _gfaac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gefb :=args [1].AsNumber ();if _gefb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_a .Pow (_gfaac .ValueNumber ,_gefb .ValueNumber ));};func _efgb (_cfe ,_dedg ,_geed int )int {if _cfe > _dedg {return 0;};if _ddda (_geed ){return (_dedg -_cfe +1)*360;};_cgab :=0;for _abfb :=_cfe ;_abfb <=_dedg ;_abfb ++{_gaeg :=365;if _efba (_abfb ){_gaeg =366;};_cgab +=_gaeg ;};return _cgab ;};type Expression interface{Eval (_cca Context ,_bef Evaluator )Result ;Reference (_fae Context ,_bfe Evaluator )Reference ;String ()string ;Update (_aefa *_cbe .UpdateQuery )Expression ;};var _addd *_ca .Rand ;

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_dffg :data }};var _fcbd string =string ([]byte {92});

// String returns a string of a range.
func (_ebcbf Range )String ()string {return _db .Sprintf ("\u0025\u0073\u003a%\u0073",_ebcbf ._eeag .String (),_ebcbf ._caab .String ());};func _aadd (_cgbac ,_badgg Reference )string {return _db .Sprintf ("\u0025\u0073\u003a%\u0073",_cgbac .Value ,_badgg .Value );};func _fed (_fgd ,_fee ,_eacf float64 )float64 {return (_fgd *3600+_fee *60+_eacf )/86400};const (_ byte =iota ;_dcfa ;_bfec ;_dbdba ;_fegf ;_gbab ;);func _bece (_gcce ,_fadd float64 ,_eeg int )(float64 ,Result ){_gccf ,_bcbc :=_dag (_gcce ),_dag (_fadd );_cbgc :=_gccf .Unix ();_gdga :=_bcbc .Unix ();if _cbgc ==_gdga {return 0,_cgac ;};_gaf ,_dega ,_gcb :=_gccf .Date ();_dcgc ,_febg ,_fgb :=_bcbc .Date ();_cfc ,_edgf :=int (_dega ),int (_febg );var _fbgd ,_gfgb float64 ;switch _eeg {case 0:if _gcb ==31{_gcb --;};if _gcb ==30&&_fgb ==31{_fgb --;}else if _daa :=_efba (_gaf );_cfc ==2&&((_daa &&_gcb ==29)||(!_daa &&_gcb ==28)){_gcb =30;if _edgb :=_efba (_dcgc );_edgf ==2&&((_edgb &&_fgb ==29)||(!_edgb &&_fgb ==28)){_fgb =30;};};_fbgd =float64 ((_dcgc -_gaf )*360+(_edgf -_cfc )*30+(_fgb -_gcb ));_gfgb =360;case 1:_fbgd =_fadd -_gcce ;_bcbd :=_gaf !=_dcgc ;if _bcbd &&(_dcgc !=_gaf +1||_cfc < _edgf ||(_cfc ==_edgf &&_gcb < _fgb )){_bgc :=0;for _fef :=_gaf ;_fef <=_dcgc ;_fef ++{_bgc +=_bab (_fef ,1);};_gfgb =float64 (_bgc )/float64 (_dcgc -_gaf +1);}else {if !_bcbd &&_efba (_gaf ){_gfgb =366;}else {if _bcbd &&((_efba (_gaf )&&(_cfc < 2||(_cfc ==2&&_gcb <=29)))||(_efba (_dcgc )&&(_edgf > 2||(_edgf ==2&&_fgb ==29)))){_gfgb =366;}else {_gfgb =365;};};};case 2:_fbgd =_fadd -_gcce ;_gfgb =360;case 3:_fbgd =_fadd -_gcce ;_gfgb =365;case 4:if _gcb ==31{_gcb --;};if _fgb ==31{_fgb --;};_fbgd =float64 ((_dcgc -_gaf )*360+(_edgf -_cfc )*30+(_fgb -_gcb ));_gfgb =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _fbgd /_gfgb ,_cgac ;};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// String returns an empty string for EmptyExpr.
func (_eda EmptyExpr )String ()string {return ""};func init (){_aed ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};const _dbddb =57351;func _egeg (_fefcbb ,_ebaeb int )string {const TOKSTART =4;if !_dfae {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_adggb :=range _gfgea {if _adggb ._dcdf ==_fefcbb &&_adggb ._bbfg ==_ebaeb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_adggb ._feaee ;};};_bccd :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_gdef (_ebaeb );_fgac :=make ([]int ,0,4);_bbdd :=_faaf [_fefcbb ];for _cebe :=TOKSTART ;_cebe -1< len (_fccfe );_cebe ++{if _gedcc :=_bbdd +_cebe ;_gedcc >=0&&_gedcc < _ecfe &&_ageeg [_adeb [_gedcc ]]==_cebe {if len (_fgac )==cap (_fgac ){return _bccd ;};_fgac =append (_fgac ,_cebe );};};if _dfcf [_fefcbb ]==-2{_cdeae :=0;for _agfc [_cdeae ]!=-1||_agfc [_cdeae +1]!=_fefcbb {_cdeae +=2;};for _cdeae +=2;_agfc [_cdeae ]>=0;_cdeae +=2{_ffeec :=_agfc [_cdeae ];if _ffeec < TOKSTART ||_agfc [_cdeae +1]==0{continue ;};if len (_fgac )==cap (_fgac ){return _bccd ;};_fgac =append (_fgac ,_ffeec );};if _agfc [_cdeae +1]!=0{return _bccd ;};};for _bbae ,_degb :=range _fgac {if _bbae ==0{_bccd +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_bccd +="\u0020\u006f\u0072\u0020";};_bccd +=_gdef (_degb );};return _bccd ;};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_gbgeb PrefixHorizontalRange )Update (q *_cbe .UpdateQuery )Expression {return _gbgeb };func _cef (_dfec int )int {if _dfec < 1900{if _dfec < 30{_dfec +=2000;}else {_dfec +=1900;};};return _dfec ;};const _aff =_ge .Second *1;var _edgc =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgba :=args [0].AsString ();if _fgba .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_fgba .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_fgba .ValueString [0]));};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_eagb :=MakeNumberResult (0);for _ ,_dbbg :=range args {_dbbg =_dbbg .AsNumber ();switch _dbbg .Type {case ResultTypeNumber :_eagb .ValueNumber +=_dbbg .ValueNumber *_dbbg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_deecb :=SumSquares (_dbbg .ListValues ());if _deecb .Type !=ResultTypeNumber {return _deecb ;};_eagb .ValueNumber +=_deecb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _dbbg ;case ResultTypeEmpty :default:return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_dbbg .Type ));};};return _eagb ;};func _defa (_dbbe ,_bgbe ,_dadg ,_gaab ,_acgg float64 ,_cfcfd int )Result {_abgf ,_aacc :=_bece (_dbbe ,_bgbe ,_cfcfd );if _aacc .Type ==ResultTypeError {return _aacc ;};_gdca ,_add :=_fadda (_dbbe ,_bgbe ,int (_acgg ),_cfcfd );if _add .Type ==ResultTypeError {return _add ;};_ccga :=0.0;_bge :=0.0;_dadg *=100/_acgg ;_gaab /=_acgg ;_gaab ++;_bbb :=_abgf *_acgg -_gdca ;for _faab :=1.0;_faab < _gdca ;_faab ++{_dbbf :=_faab +_bbb ;_fffg :=_dadg /_a .Pow (_gaab ,_dbbf );_bge +=_fffg ;_ccga +=_dbbf *_fffg ;};_bgg :=(_dadg +100)/_a .Pow (_gaab ,_gdca +_bbb );_bge +=_bgg ;_ccga +=(_gdca +_bbb )*_bgg ;_ccga /=_bge ;_ccga /=_acgg ;return MakeNumberResult (_ccga );};

// String is a string expression.
type String struct{_ecfce string };

// String returns a string representation of String.
func (_gegbd String )String ()string {return "\u0022"+_gegbd ._ecfce +"\u0022"};func _dag (_abda float64 )_ge .Time {_bdag :=int64 ((_abda -_cgf )*_dge );return _ge .Unix (0,_bdag ).UTC ();};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _dbgeba (_bceea string ,_ggdfb []Result )(*parsedReplaceObject ,Result ){if len (_ggdfb )!=4{return nil ,MakeErrorResult (_bceea +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ggdfb [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_bceea +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_ggfea :=_ggdfb [0].ValueString ;if _ggdfb [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bceea +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_dcab :=int (_ggdfb [1].ValueNumber )-1;if _ggdfb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bceea +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gabbf :=int (_ggdfb [2].ValueNumber );if _ggdfb [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_bceea +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_dcddf :=_ggdfb [3].ValueString ;return &parsedReplaceObject {_ggfea ,_dcab ,_gabbf ,_dcddf },_cgac ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_ecfd :name ,_ebdaa :args };};type criteriaParsed struct{_bcbce bool ;_fdcd float64 ;_fbfag string ;_agagf *criteriaRegex ;};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggdf :=args [0].AsNumber ();if _ggdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebd :=0;if len (args )> 1{_ggbf :=args [1];if _ggbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cebd =int (_ggbf .ValueNumber );if _cebd < 0{_cebd =0;}else if _cebd > 4{_cebd =4;};};_daec :=_dacc ;switch _cebd {case 1:_daec =_dcgfg ;case 2:_daec =_dadf ;case 3:_daec =_bdfa ;case 4:_daec =_dbfa ;};_acagd :=_a .Trunc (_ggdf .ValueNumber );_fdbfc :=_e .Buffer {};for _ ,_bega :=range _daec {for _acagd >=_bega ._fccfg {_fdbfc .WriteString (_bega ._cgceb );_acagd -=_bega ._fccfg ;};};return MakeStringResult (_fdbfc .String ());};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func _abee (_aggbc []Result ,_ecda []string ,_eebf bool )[]string {for _ ,_edcf :=range _aggbc {switch _edcf .Type {case ResultTypeEmpty :if !_eebf {_ecda =append (_ecda ,"");};case ResultTypeString :if _edcf .ValueString !=""||!_eebf {_ecda =append (_ecda ,_edcf .ValueString );};case ResultTypeNumber :_ecda =append (_ecda ,_edcf .Value ());case ResultTypeList :_ecda =_edaeb (_ecda ,_abee (_edcf .ValueList ,[]string {},_eebf ));case ResultTypeArray :for _ ,_gbedg :=range _edcf .ValueArray {_ecda =_edaeb (_ecda ,_abee (_gbedg ,[]string {},_eebf ));};};};return _ecda ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_fega PrefixVerticalRange )Update (q *_cbe .UpdateQuery )Expression {if q .UpdateType ==_cbe .UpdateActionRemoveColumn {_adab :=_fega ;_bcfgf :=_fega ._gfed .String ();if _bcfgf ==q .SheetToUpdate {_fgff :=q .ColumnIdx ;_adab ._ddbg =_aab (_fega ._ddbg ,_fgff );_adab ._ccef =_aab (_fega ._ccef ,_fgff );};return _adab ;};return _fega ;};

// Update returns the same object as updating sheet references does not affect Error.
func (_cgg Error )Update (q *_cbe .UpdateQuery )Expression {return _cgg };func _gafdb (_cgee float64 )float64 {_gcbgg :=float64 (1);for _cddb :=float64 (2);_cddb <=_cgee ;_cddb ++{_gcbgg *=_cddb ;};return _gcbgg ;};func _afdd (_egdc ,_cdfg []float64 ,_gecca float64 )float64 {_abgcg :=_gecca +1;_cdeg :=0.0;_dcce :=len (_egdc );_agdg :=_cdfg [0];for _gadc :=1;_gadc < _dcce ;_gadc ++{_edgecg :=(_cdfg [_gadc ]-_agdg )/365;_cdeg -=_edgecg *_egdc [_gadc ]/_a .Pow (_abgcg ,_edgecg +1);};return _cdeg ;};func _aedfe (_ebbd Result ,_afced ,_ccff string )(float64 ,Result ){switch _ebbd .Type {case ResultTypeEmpty :return 0,_cgac ;case ResultTypeNumber :return _ebbd .ValueNumber ,_cgac ;case ResultTypeString :_fbdbfc ,_cfbb :=_fc .ParseFloat (_ebbd .ValueString ,64);if _cfbb !=nil {return 0,MakeErrorResult (_ccff +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_afced );};return _fbdbfc ,_cgac ;default:return 0,MakeErrorResult (_afced +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ccff +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};func _bfag (_edec ,_fagf float64 ,_acad ,_eaf int )float64 {_beedc :=_dag (_edec );_bad :=_dag (_fagf );_ceg :=_eabc (_beedc ,_bad ,_acad ,_eaf );return _agec (_ceg ,_beedc ,_eaf );};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_eae ,_cfcfb :=_fgab (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _cfcfb .Type ==ResultTypeError {return _cfcfb ;};return MakeNumberResult (_bfag (_eae ._aac ,_eae ._cfcf ,_eae ._agf ,_eae ._bae ));};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bfgf ,_gfda ,_acdd :=_ffcca (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _acdd .Type ==ResultTypeError {return _acdd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gecff :=_gfda -_bfgf ;if _gecff > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_agecb :=args [2].ValueNumber ;if _agecb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_agecb *_gecff /360));};

// String returns a string representation of SheetPrefixExpr.
func (_dafa SheetPrefixExpr )String ()string {return _dafa ._bbcc };var InvalidReferenceContext =&ivr {};

// String returns a string representation of Number.
func (_cgeea Number )String ()string {return _fc .FormatFloat (_cgeea ._bbabg ,'f',-1,64)};func _dgag (){_ffca =_cb .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_caed =_cb .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_agbe =_cb .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_aegg =_cb .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_gbbd =_cb .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_bbbd =_cb .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func (_bfcgd VerticalRange )verticalRangeReference ()string {return _db .Sprintf ("\u0025\u0073\u003a%\u0073",_bfcgd ._eaagb ,_bfcgd ._bcdg );};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_aeaf :=len (args );if _aeaf !=4&&_aeaf !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_feafc ,_cgaf :=_gddb (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cgaf .Type ==ResultTypeError {return _cgaf ;};_agee ,_cgaf :=_gddb (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cgaf .Type ==ResultTypeError {return _cgaf ;};if _feafc >=_agee {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_afdf :=args [2].ValueNumber ;if _afdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggbe :=args [3].ValueNumber ;if _ggbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cae :=0;if _aeaf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cae =int (args [4].ValueNumber );if !_dccd (_cae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_egee ,_cgaf :=_bece (_feafc ,_agee ,_cae );if _cgaf .Type ==ResultTypeError {return _cgaf ;};return MakeNumberResult (_ggbe *_afdf *_egee );};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dbb :=args [1].ValueNumber ;_bde :=args [0];var _acdf float64 ;switch _bde .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_acdf =_bde .ValueNumber ;case ResultTypeString :_adg :=DateValue ([]Result {args [0]});if _adg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_acdf =_adg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ebe :=_dag (_acdf );_dbdd :=_ebe .AddDate (0,int (_dbb ),0);_cafg ,_bfed ,_dbe :=_dbdd .Date ();_dad :=_fabf (_cafg ,int (_bfed ),_dbe );if _dad < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_dad );};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bagd :=args [0].Type ;for _ ,_fedf :=range args {if _fedf .Type !=_bagd {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _bagd {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_ddbea :=len (args [0].ListValues ());_bbcag :=make ([]float64 ,_ddbea );for _cebbd :=range _bbcag {_bbcag [_cebbd ]=1.0;};for _ ,_edbba :=range args {if len (_edbba .ListValues ())!=_ddbea {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _ageb ,_fdcb :=range _edbba .ListValues (){_fdcb =_fdcb .AsNumber ();if _fdcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_bbcag [_ageb ]=_bbcag [_ageb ]*_fdcb .ValueNumber ;};};_dddgf :=0.0;for _ ,_fgfa :=range _bbcag {_dddgf +=_fgfa ;};return MakeNumberResult (_dddgf );};return MakeNumberResult (1.0);};type parsedSearchObject struct{_aedab string ;_fdcfe string ;_ffef int ;};func _ddd (_caf ,_cgfb ,_fbcc int )bool {if _cgfb < 1||_cgfb > 12{return false ;};if _fbcc < 1{return false ;};return _fbcc <=_bfg (_caf ,_cgfb );};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_fbbg :=len (args );if _fbbg !=3&&_fbbg !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eddce ,_adada :=_fcdc (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _adada .Type ==ResultTypeError {return _adada ;};_fbcfa ,_adada :=_fcdc (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _adada .Type ==ResultTypeError {return _adada ;};_baag ,_adada :=_fcdc (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _adada .Type ==ResultTypeError {return _adada ;};_abed :=0;if _fbbg ==3{return MakeStringResult (_dg .Replace (_eddce ,_fbcfa ,_baag ,-1));}else {_dbff ,_bdcbc :=_aedfe (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _bdcbc .Type ==ResultTypeError {return _bdcbc ;};_abed =int (_dbff );if _abed < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_febba :=_eddce ;_afba :=_abed ;_eecd :=-1;_cbce :=len (_fbcfa );_fdgf :=0;for {_afba --;_edeeb :=_dg .Index (_febba ,_fbcfa );if _edeeb ==-1{_eecd =-1;break ;}else {_eecd =_edeeb +_fdgf ;if _afba ==0{break ;};_edgg :=_cbce +_edeeb ;_fdgf +=_edgg ;_febba =_febba [_edgg :];};};if _eecd ==-1{return MakeStringResult (_eddce );}else {_ecdb :=_eddce [:_eecd ];_aeffd :=_eddce [_eecd +_cbce :];return MakeStringResult (_ecdb +_baag +_aeffd );};};};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _accbcg (args ,true )};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_decec Result )AsNumber ()Result {if _decec .Type ==ResultTypeString {_cagf ,_eeadf :=_fc .ParseFloat (_decec .ValueString ,64);if _eeadf ==nil {return MakeNumberResult (_cagf );};};if _decec .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _decec ;};

// Reference returns an invalid reference for ConstArrayExpr.
func (_adf ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _agec (_fdeg ,_bfa _ge .Time ,_ccba int )float64 {if _fdeg .After (_bfa ){_fdeg ,_bfa =_bfa ,_fdeg ;};_gdd :=0;_acdc ,_eaae ,_faca :=_fdeg .Date ();_fdeb ,_fegd ,_gfbd :=_bfa .Date ();_gggb ,_aabd :=int (_eaae ),int (_fegd );_bfga ,_ccgb :=_eaba (_acdc ,_gggb ,_faca ,_ccba ),_eaba (_fdeb ,_aabd ,_gfbd ,_ccba );if !_ddda (_ccba ){return _fabf (_fdeb ,_aabd ,_ccgb )-_fabf (_acdc ,_gggb ,_bfga );};if _ccba ==0{if (_gggb ==2||_bfga < 30)&&_gfbd ==31{_ccgb =31;}else if _aabd ==2&&_ccgb ==_bfg (_fdeb ,_aabd ){_ccgb =_bfg (_fdeb ,2);};}else {if _gggb ==2&&_bfga ==30{_bfga =_bfg (_acdc ,2);};if _aabd ==2&&_ccgb ==30{_ccgb =_bfg (_fdeb ,2);};};if _acdc < _fdeb ||(_acdc ==_fdeb &&_gggb < _aabd ){_gdd =30-_bfga +1;_faca =1;_bfga =1;_feda :=_ge .Date (_acdc ,_ge .Month (_gggb ),_faca ,0,0,0,0,_ge .UTC ).AddDate (0,1,0);if _feda .Year ()< _fdeb {_gdd +=_abfd (_feda .Year (),int (_feda .Month ()),12,_ccba );_feda =_feda .AddDate (0,13-int (_feda .Month ()),0);_gdd +=_efgb (_feda .Year (),_fdeb -1,_ccba );};_gdd +=_abfd (_fdeb ,int (_feda .Month ()),_aabd -1,_ccba );_feda =_feda .AddDate (0,_aabd -int (_feda .Month ()),0);_gggb =_feda .Day ();};_gdd +=_ccgb -_bfga ;if _gdd > 0{return float64 (_gdd );}else {return 0;};};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_fbc :v }};

// Reference returns a string reference value to a cell.
func (_cd CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_cd ._fbc };};

// String returns a string representation of a horizontal range with prefix.
func (_affcg PrefixHorizontalRange )String ()string {return _db .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_affcg ._gbefd .String (),_affcg ._dgfd ,_affcg ._ggae );};func (_gecbd *noCache )SetCache (key string ,value Result ){};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _edece (args ,_daaaf )};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_ddff (args ,_dbce ))};

// Eval evaluates and returns the result of the cell reference.
func (_fge CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fge ._fbc ,ev )};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_bgfea ,_gebb ,_ccebc :=_faad (from ,to );if _ccebc !=nil {_fcb .Log (_ccebc .Error ());return NewError (_ccebc .Error ());};return PrefixRangeExpr {_dcfab :pfx ,_dggb :_bgfea ,_cdeea :_gebb };};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_gaggg :=len (args );if _gaggg !=4&&_gaggg !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgdc ,_bgddf ,_eggb :=_ffcca (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _eggb .Type ==ResultTypeError {return _eggb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdae :=args [2].ValueNumber ;if _bdae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_beeda :=args [3].ValueNumber ;if _beeda <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_aaecb :=0;if _gaggg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaecb =int (args [4].ValueNumber );if !_dccd (_aaecb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_bcda ,_eggb :=_bece (_cgdc ,_bgddf ,_aaecb );if _eggb .Type ==ResultTypeError {return _eggb ;};return MakeNumberResult ((_beeda /_bdae -1)/_bcda );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _fbgc (args ,true )};func _fdcg (_bed ,_afea float64 ,_dece ,_gbe int )float64 {_bdce :=_dag (_bed );_bdg :=_dag (_afea );if _gbe ==1{_cdf :=_eabc (_bdce ,_bdg ,_dece ,1);_gfba :=_cdf .AddDate (0,12/_dece ,0);return _agec (_cdf ,_gfba ,_gbe );};return float64 (_bab (0,_gbe ))/float64 (_dece );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_faceb :=args [0].AsNumber ();if _faceb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_cdfc :=int (_faceb .ValueNumber );_fffgc :=make ([][]Result ,0,_cdfc );for _efgdd :=0;_efgdd < _cdfc ;_efgdd ++{_fgbb :=make ([]Result ,_cdfc );for _bbab :=0;_bbab < _cdfc ;_bbab ++{if _efgdd ==_bbab {_fgbb [_bbab ]=MakeNumberResult (1.0);}else {_fgbb [_bbab ]=MakeNumberResult (0.0);};};_fffgc =append (_fffgc ,_fgbb );};return MakeArrayResult (_fffgc );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_dabb :=len (args );if _dabb !=5&&_dabb !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_agcf ,_cfff ,_cceg :=_ffcca (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cceg .Type ==ResultTypeError {return _cceg ;};_daef ,_cceg :=_gddb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _cceg .Type ==ResultTypeError {return _cceg ;};if _daef >=_agcf {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gdgcb :=args [3].ValueNumber ;if _gdgcb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_gded :=args [4].ValueNumber ;if _gded < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dbed :=0;if _dabb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbed =int (args [5].ValueNumber );if !_dccd (_dbed ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_dagg ,_cceg :=_bece (_agcf ,_cfff ,_dbed );if _cceg .Type ==ResultTypeError {return _cceg ;};_deag ,_cceg :=_bece (_daef ,_cfff ,_dbed );if _cceg .Type ==ResultTypeError {return _cceg ;};_afce ,_cceg :=_bece (_daef ,_agcf ,_dbed );if _cceg .Type ==ResultTypeError {return _cceg ;};_bada :=1+_deag *_gdgcb ;_bafb :=1+_dagg *_gded ;return MakeNumberResult ((_bada /_bafb -_afce *_gdgcb )*100);};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_gagad :=args [0].ValueNumber ;if _gagad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_agga :=float64 (int (args [1].ValueNumber ));if _agga < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_a .Pow ((1+_gagad /_agga ),_agga )-1);};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dfdg :=[]float64 {};for _ ,_efdd :=range args {switch _efdd .Type {case ResultTypeString :_bgde :=_efdd .AsNumber ();if _bgde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dfdg =append (_dfdg ,_bgde .ValueNumber );case ResultTypeList ,ResultTypeArray :_afcbg :=GCD (_efdd .ListValues ());if _afcbg .Type !=ResultTypeNumber {return _afcbg ;};_dfdg =append (_dfdg ,_afcbg .ValueNumber );case ResultTypeNumber :_dfdg =append (_dfdg ,_efdd .ValueNumber );case ResultTypeError :return _efdd ;default:return MakeErrorResult (_db .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efdd .Type ));};};if _dfdg [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dfdg )==1{return MakeNumberResult (_dfdg [0]);};_adba :=_dfdg [0];for _bfafd :=1;_bfafd < len (_dfdg );_bfafd ++{if _dfdg [_bfafd ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adba =_ddcgb (_adba ,_dfdg [_bfafd ]);};return MakeNumberResult (_adba );};var _bcba =false ;func _baaff (_fbad []Result )[]rangeIndex {_fdee :=[]rangeIndex {};_accad :=len (_fbad );for _faac :=0;_faac < _accad -1;_faac +=2{_efdac :=[]rangeIndex {};_bgddae :=_agcd (_fbad [_faac ]);_adgeg :=_fefef (_fbad [_faac +1]);if _faac ==0{for _gfagd ,_gbabg :=range _bgddae {for _deab ,_cdfef :=range _gbabg {if _cffc (_cdfef ,_adgeg ){_efdac =append (_efdac ,rangeIndex {_gfagd ,_deab });};};};}else {for _ ,_fdff :=range _fdee {_aabba :=_bgddae [_fdff ._aabddc ][_fdff ._gcag ];if _cffc (_aabba ,_adgeg ){_efdac =append (_efdac ,_fdff );};};};if len (_efdac )==0{return []rangeIndex {};};_fdee =_efdac [:];};return _fdee ;};const (_febgd cmpResult =0;_bead cmpResult =-1;_gdfd cmpResult =1;_ccaea cmpResult =2;);

// Eval evaluates and returns the result of a formula.
func (_bd *defEval )Eval (ctx Context ,formula string )Result {_egg :=ParseString (formula );_cdad :=make (chan Result );go func (){if _egg ==nil {_cdad <-MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_bd .checkLastEvalIsRef (ctx ,_egg );_cdad <-_egg .Eval (ctx ,_bd );};}();select{case _gce :=<-_cdad :return _gce ;case <-_ge .After (_aff ):_fcb .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};type rangeIndex struct{_aabddc int ;_gcag int ;};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cgcec :=args [0].AsNumber ();if _cgcec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gafae :=float64 (1);if _cgcec .ValueNumber < 0{_gafae =-1;};if len (args )> 1{_deae :=args [1].AsNumber ();if _deae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_gafae =_a .Abs (_deae .ValueNumber );};if len (args )==1{return MakeNumberResult (_a .Floor (_cgcec .ValueNumber ));};_babg :=_cgcec .ValueNumber ;_babg ,_gddca :=_a .Modf (_babg /_gafae );if _gddca !=0{if _cgcec .ValueNumber < 0{_babg --;};};return MakeNumberResult (_babg *_gafae );};

// String returns a string representation for Negate.
func (_cdegb Negate )String ()string {return "\u002d"+_cdegb ._cdfa .String ()};const _ebgf =57376;func _gdef (_cfbf int )string {if _cfbf >=1&&_cfbf -1< len (_fccfe ){if _fccfe [_cfbf -1]!=""{return _fccfe [_cfbf -1];};};return _db .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_cfbf );};const _ebbbg int =30;func (_affcb node )String ()string {return _db .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_affcb ._bcgb ,_febbg (string (_affcb ._abff )));};func _dgdga (_efeca yyLexer )int {return _egdg ().Parse (_efeca )};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);func (_gag BinOpType )String ()string {if _gag >=BinOpType (len (_feaf )-1){return _db .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_gag );};return _gab [_feaf [_gag ]:_feaf [_gag +1]];};func (_dcafc Result )AsString ()Result {switch _dcafc .Type {case ResultTypeNumber :return MakeStringResult (_dcafc .Value ());default:return _dcafc ;};};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_gdda :=_gdbdc (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _gdda .Type !=ResultTypeEmpty {return _gdda ;};_bdde :=_baaff (args [1:]);_cdaf :=_a .MaxFloat64 ;_cadc :=_agcd (args [0]);for _ ,_fadcc :=range _bdde {_efbec :=_cadc [_fadcc ._aabddc ][_fadcc ._gcag ].ValueNumber ;if _cdaf > _efbec {_cdaf =_efbec ;};};if _cdaf ==_a .MaxFloat64 {_cdaf =0;};return MakeNumberResult (float64 (_cdaf ));};var _cfdg ,_efegf ,_accg ,_gbff ,_bdbgg ,_aebda ,_bddae ,_afcf ,_cgga ,_fecf ,_aafe ,_gbcd ,_ddef ,_fcge ,_bdcg *_cb .Regexp ;

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_dg .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_ecfce :v };};const _ecage =-1000;const _bgeg =57355;const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);const _afac =57349;

// Eval evaluates a range returning a list of results or an error.
func (_egca Range )Eval (ctx Context ,ev Evaluator )Result {_bcgg :=_egca ._eeag .Reference (ctx ,ev );_addaf :=_egca ._caab .Reference (ctx ,ev );_fefeb :=_aadd (_bcgg ,_addaf );if _bcgg .Type ==ReferenceTypeCell &&_addaf .Type ==ReferenceTypeCell {if _adaef ,_cdbbe :=ev .GetFromCache (_fefeb );_cdbbe {return _adaef ;}else {_efbaf :=_geceg (ctx ,ev ,_bcgg .Value ,_addaf .Value );ev .SetCache (_fefeb ,_efbaf );return _efbaf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fefeb );};type node struct{_bcgb tokenType ;_abff string ;};func _fabf (_cge ,_bce ,_gff int )float64 {return float64 (_accb (_cge ,_ge .Month (_bce ),_gff )/86400)+_cgf ;};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_ec string ,_cgce Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_cee string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_ge .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_efa int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_cabe string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_fgc string )string ;

// GetFormat returns if cell is protected.
GetLocked (_edge string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_dgf string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_eed string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cda ,_cec int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_ggg string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_cbae string ,_ddg bool );

// NamedRange returns a named range.
NamedRange (_aef string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_dc ,_cada uint32 );};

// Reference returns a string reference value to a range with prefix.
func (_agdfc PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_bdcca :=_agdfc ._dcfab .Reference (ctx ,ev );_dedgf :=_agdfc ._dggb .Reference (ctx ,ev );_fecdb :=_agdfc ._cdeea .Reference (ctx ,ev );if _bdcca .Type ==ReferenceTypeSheet &&_dedgf .Type ==ReferenceTypeCell &&_fecdb .Type ==ReferenceTypeCell {return MakeRangeReference (_fgbf (_bdcca ,_dedgf ,_fecdb ));};return ReferenceInvalid ;};type Reference struct{Type ReferenceType ;Value string ;};const _cde ="\u005e\u0028\u0028"+_gefc +"\u007c"+_bee +"\u007c"+_bff +"\u007c"+_gaga +"\u0029\u0020\u0029\u003f";

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgae :=args [0].AsString ();if _cgae .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccgg :=_e .Buffer {};_cfab :=false ;_befc :=false ;_bbge :=0;for _ ,_aeffg :=range _cgae .ValueString {_acef :=_aeffg ==' ';if _acef {if !_cfab {continue ;};if !_befc {_bbge ++;_ccgg .WriteRune (_aeffg );};}else {_bbge =0;_cfab =true ;_ccgg .WriteRune (_aeffg );};_befc =_acef ;};_ccgg .Truncate (_ccgg .Len ()-_bbge );return MakeStringResult (_ccgg .String ());};

// Eval evaluates and returns a number.
func (_efdg Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_efdg ._bbabg )};type cumulArgs struct{_bfb float64 ;_dac float64 ;_fbe float64 ;_edd float64 ;_begb float64 ;_abb int ;};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_edecd :=len (args );if _edecd < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _edecd > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebdd :=args [0];_fdbc :=args [1];if _fdbc .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_afed :=args [2].AsNumber ();if _afed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcbbc :=false ;if _edecd ==4&&args [3].Type !=ResultTypeEmpty {_fggd :=args [3].AsNumber ();if _fggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _fggd .ValueNumber ==0{_fcbbc =true ;};};_fbdbg :=int (_afed .ValueNumber )-1;_aede :=-1;_aggg :=false ;_ccae :for _dabf ,_deee :=range _fdbc .ValueArray {if len (_deee )==0{continue ;};_abec :=_deee [0];switch _ceddc (_abec ,_ebdd ,false ,_fcbbc ){case _bead :_aede =_dabf ;case _febgd :_aede =_dabf ;_aggg =true ;break _ccae ;};};if _aede ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_fcgg :=_fdbc .ValueArray [_aede ];if _fbdbg < 0||_fbdbg >=len (_fcgg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _aggg ||!_fcbbc {return _fcgg [_fbdbg ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};type yyLexer interface{Lex (_gefca *yySymType )int ;Error (_aggfd string );};

// Update returns the same object as updating sheet references does not affect Bool.
func (_gfg Bool )Update (q *_cbe .UpdateQuery )Expression {return _gfg };

// Reference returns an invalid reference for EmptyExpr.
func (_bdb EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ebdee :=args [0].AsNumber ();if _ebdee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eage :=10.0;if len (args )> 1{_fbef :=args [1].AsNumber ();if _fbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_eage =args [1].ValueNumber ;};if _ebdee .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _eage ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_a .Log (_ebdee .ValueNumber )/_a .Log (_eage ));};func _aed (){_cga ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_cb .MustCompile ("\u005e"+_gefc +_aec );_cga ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_cb .MustCompile ("\u005e"+_bee +_aec );_cga ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_cb .MustCompile ("\u005e"+_bff +_aec );_cga ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_cb .MustCompile ("\u005e"+_gaga +_aec );_cabf ["\u0068\u0068"]=_cb .MustCompile (_cde +_ddb +"\u0024");_cabf ["\u0068\u0068\u003am\u006d"]=_cb .MustCompile (_cde +_geg +"\u0024");_cabf ["\u006d\u006d\u003as\u0073"]=_cb .MustCompile (_cde +_ac +"\u0024");_cabf ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_cb .MustCompile (_cde +_afd +"\u0024");_ffe =[]*_cb .Regexp {_cb .MustCompile ("\u005e"+_gefc +"\u0024"),_cb .MustCompile ("\u005e"+_bee +"\u0024"),_cb .MustCompile ("\u005e"+_bff +"\u0024"),_cb .MustCompile ("\u005e"+_gaga +"\u0024")};_gae =[]*_cb .Regexp {_cb .MustCompile ("\u005e"+_ddb +"\u0024"),_cb .MustCompile ("\u005e"+_geg +"\u0024"),_cb .MustCompile ("\u005e"+_ac +"\u0024"),_cb .MustCompile ("\u005e"+_afd +"\u0024")};};func _aa (_edb BinOpType ,_gbg ,_gc []Result )Result {_fa :=[]Result {};for _aag :=range _gbg {_dbf :=_gbg [_aag ].AsNumber ();_gcf :=_gc [_aag ].AsNumber ();if _dbf .Type !=ResultTypeNumber ||_gcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _edb {case BinOpTypePlus :_fa =append (_fa ,MakeNumberResult (_dbf .ValueNumber +_gcf .ValueNumber ));case BinOpTypeMinus :_fa =append (_fa ,MakeNumberResult (_dbf .ValueNumber -_gcf .ValueNumber ));case BinOpTypeMult :_fa =append (_fa ,MakeNumberResult (_dbf .ValueNumber *_gcf .ValueNumber ));case BinOpTypeDiv :if _gcf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fa =append (_fa ,MakeNumberResult (_dbf .ValueNumber /_gcf .ValueNumber ));case BinOpTypeExp :_fa =append (_fa ,MakeNumberResult (_a .Pow (_dbf .ValueNumber ,_gcf .ValueNumber )));case BinOpTypeLT :_fa =append (_fa ,MakeBoolResult (_dbf .ValueNumber < _gcf .ValueNumber ));case BinOpTypeGT :_fa =append (_fa ,MakeBoolResult (_dbf .ValueNumber > _gcf .ValueNumber ));case BinOpTypeEQ :_fa =append (_fa ,MakeBoolResult (_dbf .ValueNumber ==_gcf .ValueNumber ));case BinOpTypeLEQ :_fa =append (_fa ,MakeBoolResult (_dbf .ValueNumber <=_gcf .ValueNumber ));case BinOpTypeGEQ :_fa =append (_fa ,MakeBoolResult (_dbf .ValueNumber >=_gcf .ValueNumber ));case BinOpTypeNE :_fa =append (_fa ,MakeBoolResult (_dbf .ValueNumber !=_gcf .ValueNumber ));default:return MakeErrorResult (_db .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_edb ));};};return MakeListResult (_fa );};func _dccd (_ebc int )bool {return _ebc >=0&&_ebc <=4};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebbb ,_gfcc ,_edce :=_ffcca (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _edce .Type ==ResultTypeError {return _edce ;};_adde ,_edce :=_gddb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _edce .Type ==ResultTypeError {return _edce ;};if _adde >=_ebbb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbcf :=args [3].ValueNumber ;if _bbcf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aggbg :=args [4].ValueNumber ;if _aggbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_geb :=args [5].ValueNumber ;if _geb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggfe :=float64 (int (args [6].ValueNumber ));if !_bccf (_ggfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_egce :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_egce =int (args [7].ValueNumber );if !_dccd (_egce ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_aaeg ,_edce :=_bece (_adde ,_gfcc ,_egce );if _edce .Type ==ResultTypeError {return _edce ;};_aaeg *=_ggfe ;_bfdde ,_edce :=_bece (_ebbb ,_gfcc ,_egce );if _edce .Type ==ResultTypeError {return _edce ;};_bfdde *=_ggfe ;_cgfe ,_edce :=_bece (_adde ,_ebbb ,_egce );if _edce .Type ==ResultTypeError {return _edce ;};_cgfe *=_ggfe ;_cadf :=_geb +_aaeg *100*_bbcf /_ggfe ;_cadf /=_aggbg +_cgfe *100*_bbcf /_ggfe ;_cadf --;_cadf *=_ggfe /_bfdde ;return MakeNumberResult (_cadf );};func _egde (_face string ,_bebef func (_cgaa float64 )float64 )Function {return func (_bdgc []Result )Result {if len (_bdgc )!=1{return MakeErrorResult (_face +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_geede :=_bdgc [0].AsNumber ();switch _geede .Type {case ResultTypeNumber :_aggf :=_bebef (_geede .ValueNumber );if _a .IsNaN (_aggf ){return MakeErrorResult (_face +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _a .IsInf (_aggf ,0){return MakeErrorResult (_face +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_aggf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_face +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _geede ;default:return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_face ,_geede .Type ));};};};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_ggaa :=len (args );if _ggaa < 4||_ggaa > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_abgcb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fged :=args [1].ValueNumber ;if _fged <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgda :=args [2].ValueNumber ;if _dgda < _fged {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_efed :=args [3].ValueNumber ;_agbb :=0.0;if _ggaa >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agbb =args [4].ValueNumber ;};_bcbb :=0;if _ggaa ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcbb =int (args [5].ValueNumber );if _bcbb !=0{_bcbb =1;};};return MakeNumberResult (_dgc (_abgcb ,_dgda ,_efed ,_agbb ,_bcbb )-_egage (_abgcb ,_fged ,_dgda ,_efed ,_agbb ,_bcbb ));};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_ddgd ,_debeg :=_dacfg ("\u0046\u0049\u004e\u0044",args );if _debeg .Type !=ResultTypeEmpty {return _debeg ;};_ecdf :=_dg .ToLower (_ddgd ._aedab );_cbb :=_dg .ToLower (_ddgd ._fdcfe );if _ecdf ==""{return MakeNumberResult (1.0);};_gbdfe :=_ddgd ._ffef -1;_dged :=1;_agcc :=0;for _eefdad :=range _cbb {if _eefdad !=0{_bffb :=1;if _eefdad -_agcc > 1{_bffb =2;};_dged +=_bffb ;};if _dged > _gbdfe {_dadgd :=_cab .Index (_ecdf ,_cbb [_eefdad :]);if _dadgd ==0{return MakeNumberResult (float64 (_dged ));};};_agcc =_eefdad ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Eval evaluates and returns the result of a sheet expression.
func (_eccec SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};type xargs struct{_edbfe []float64 ;_feaa []float64 ;};func (_bcdea *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Db implements the Excel DB function.
func Db (args []Result )Result {_fce :=len (args );if _fce !=4&&_fce !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_geca :=args [0].ValueNumber ;if _geca < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fccg :=args [1].ValueNumber ;if _fccg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_abfa :=args [2].ValueNumber ;if _abfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cbfd :=args [3].ValueNumber ;if _cbfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _cbfd -_abfa > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cegf :=12.0;if _fce ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cegf =args [4].ValueNumber ;if _cegf < 1||_cegf > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _cegf ==12&&_cbfd > _abfa {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _fccg >=_geca {return MakeNumberResult (0);};_cagg :=1-_a .Pow (_fccg /_geca ,1/_abfa );_cagg =float64 (int (_cagg *1000+0.5))/1000;_ecec :=_geca *_cagg *_cegf /12;if _cbfd ==1{return MakeNumberResult (_ecec );};_gafd :=_ecec ;_afeeg :=0.0;_faed :=_abfa ;if _faed > _cbfd {_faed =_cbfd ;};for _ddae :=2.0;_ddae <=_faed ;_ddae ++{_afeeg =(_geca -_gafd )*_cagg ;_gafd +=_afeeg ;};if _cbfd > _abfa {return MakeNumberResult ((_geca -_gafd )*_cagg *(12-_cegf )/12);};return MakeNumberResult (_afeeg );};const _gcgd int =30;func _bab (_dbac ,_cdee int )int {switch _cdee {case 1:if _efba (_dbac ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// HasFormula returns FALSE for the invalid reference context.
func (_edfd *ivr )HasFormula (cellRef string )bool {return false };

// String returns a string representation of FunctionCall expression.
func (_gbffd FunctionCall )String ()string {_ggba :=_e .Buffer {};_ggba .WriteString (_gbffd ._ecfd );_ggba .WriteString ("\u0028");_ffdad :=len (_gbffd ._ebdaa )-1;for _fbeb ,_edgdb :=range _gbffd ._ebdaa {_ggba .WriteString (_edgdb .String ());if _fbeb !=_ffdad {_ggba .WriteString ("\u002c");};};_ggba .WriteString ("\u0029");return _ggba .String ();};func _gdfdf (_ccdf ,_gabdc float64 )float64 {_ccdf =_a .Trunc (_ccdf );_gabdc =_a .Trunc (_gabdc );if _ccdf ==0&&_gabdc ==0{return 0;};return _ccdf *_gabdc /_ddcgb (_ccdf ,_gabdc );};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bagc Result )ListValues ()[]Result {if _bagc .Type ==ResultTypeArray {_bcaef :=[]Result {};for _ ,_ceecg :=range _bagc .ValueArray {for _ ,_aafef :=range _ceecg {_bcaef =append (_bcaef ,_aafef );};};return _bcaef ;};if _bagc .Type ==ResultTypeList {return _bagc .ValueList ;};return nil ;};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_dffg [][]Expression };

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fefe :=args [0].AsNumber ();if _fefe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_a .Pi *_fefe .ValueNumber );};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_bag :=len (args );if _bag < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dace :=args [0].ValueNumber ;if _dace ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bbba :=[]float64 {};for _ ,_gbfaa :=range args [1:]{switch _gbfaa .Type {case ResultTypeNumber :_bbba =append (_bbba ,_gbfaa .ValueNumber );case ResultTypeArray ,ResultTypeList :_bcdf :=_agcd (_gbfaa );for _ ,_fceg :=range _bcdf {for _ ,_eafd :=range _fceg {if _eafd .Type ==ResultTypeNumber &&!_eafd .IsBoolean {_bbba =append (_bbba ,_eafd .ValueNumber );};};};};};_cbee :=0.0;for _adcd ,_caef :=range _bbba {_cbee +=_caef /_a .Pow (1+_dace ,float64 (_adcd )+1);};return MakeNumberResult (_cbee );};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cdgd :=int (args [0].ValueNumber );if _cdgd < 0||_cdgd >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _cdgd <=1899{_cdgd +=1900;};_ega :=_ge .Month (args [1].ValueNumber );_fecg :=int (args [2].ValueNumber );_ffc :=_accb (_cdgd ,_ega ,_fecg );_ebde :=_cgfdb (_dfa ,_ffc )+1;if _ebde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_ebde );};func _cbeea (_aggbgf [][]Result ,_dcacg int )[][]Result {_bbdg :=[][]Result {};for _fcggd :=range _aggbgf {if _fcggd ==0{continue ;};_gaead :=[]Result {};for _dgcd :=range _aggbgf {if _dgcd ==_dcacg {continue ;};_gaead =append (_gaead ,_aggbgf [_fcggd ][_dgcd ]);};_bbdg =append (_bbdg ,_gaead );};return _bbdg ;};const _dccea =57372;

// Reference returns an invalid reference for Number.
func (_dfagd Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _gae =[]*_cb .Regexp {};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_aacdc :=_e .Buffer {};for _ ,_febb :=range args {switch _febb .Type {case ResultTypeString :_aacdc .WriteString (_febb .ValueString );case ResultTypeNumber :var _ebdg string ;if _febb .IsBoolean {if _febb .ValueNumber ==0{_ebdg ="\u0046\u0041\u004cS\u0045";}else {_ebdg ="\u0054\u0052\u0055\u0045";};}else {_ebdg =_febb .AsString ().ValueString ;};_aacdc .WriteString (_ebdg );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_aacdc .String ());};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdab :=args [0].Ref ;if _bdab .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_bdab .Value ));};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggcg :=args [0].AsNumber ();if _ggcg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_abbg ,_efgg :=_a .Modf (_ggcg .ValueNumber );if _efgg < 0{_abbg --;};return MakeNumberResult (_abbg );};

// Match implements the MATCH function.
func Match (args []Result )Result {_agfg :=len (args );if _agfg !=2&&_agfg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dde :=1;if _agfg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_fbbfa :=args [2].ValueNumber ;if _fbbfa ==-1||_fbbfa ==0{_dde =int (_fbbfa );};};_cdde :=args [1];var _gcba []Result ;switch _cdde .Type {case ResultTypeList :_gcba =_cdde .ValueList ;case ResultTypeArray :_aagd :=_cdde .ValueArray ;for _ ,_acag :=range _aagd {if len (_acag )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_gcba =append (_gcba ,_acag [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_egbf :=_fefef (args [0]);switch _dde {case 0:for _ggac ,_daafd :=range _gcba {if _faega (_daafd ,_egbf ){return MakeNumberResult (float64 (_ggac +1));};};case -1:for _geccb :=0;_geccb < len (_gcba );_geccb ++{if _faega (_gcba [_geccb ],_egbf ){return MakeNumberResult (float64 (_geccb +1));};if _egbf ._bcbce &&(_gcba [_geccb ].ValueNumber < _egbf ._fdcd ){if _geccb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_geccb ));};};case 1:for _dgdbc :=0;_dgdbc < len (_gcba );_dgdbc ++{if _faega (_gcba [_dgdbc ],_egbf ){return MakeNumberResult (float64 (_dgdbc +1));};if _egbf ._bcbce &&(_gcba [_dgdbc ].ValueNumber > _egbf ._fdcd ){if _dgdbc ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_dgdbc ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_gbce ,_gcfg ,_defc :=_dbadd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _defc .Type ==ResultTypeError {return _defc ;};if _gcfg < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _gbce ==0{return MakeNumberResult (0);};_cfae :=_gbce < 0;if _cfae {_gbce =-_gbce ;};_cgbc :=args [0].Value ();_fdab :=_dg .Split (_cgbc ,"\u002e");_bgbg :=float64 (int (_gbce ));_bgbab :=_fdab [1];_fgcg :=len (_bgbab );_cbed :=int (_a .Log10 (_gcfg ))+1;_aedg :=float64 (_cbed -_fgcg );_edag ,_cbdd :=_fc .ParseFloat (_bgbab ,64);if _cbdd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_edag *=_a .Pow (10,_aedg );_dcdc :=_bgbg +_edag /_gcfg ;if _cfae {_dcdc =-_dcdc ;};return MakeNumberResult (_dcdc );};func _bgaf (_afaa ,_daee []float64 ,_cdeb float64 )Result {_ddbe :=false ;_cabg :=false ;for _fcga :=0;_fcga < len (_afaa );_fcga ++{if _afaa [_fcga ]> 0{_ddbe =true ;};if _afaa [_fcga ]< 0{_cabg =true ;};};if !_ddbe ||!_cabg {return MakeErrorResultType (ErrorTypeNum ,"");};_adga :=_cdeb ;_cea :=1e-10;_cfd :=0;_cgfdbd :=50;_beff :=false ;for {_cbfg :=_beac (_afaa ,_daee ,_adga );_geda :=_adga -_cbfg /_afdd (_afaa ,_daee ,_adga );_bcbe :=_a .Abs (_geda -_adga );_adga =_geda ;_cfd ++;if _bcbe <=_cea ||_a .Abs (_cbfg )<=_cea {break ;};if _cfd > _cgfdbd {_beff =true ;break ;};};if _beff ||_a .IsNaN (_adga )||_a .IsInf (_adga ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_adga );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_gbbgd ,_dgfe int };

// Eval evaluates a horizontal range returning a list of results or an error.
func (_fdadg HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_debg :=_fdadg .horizontalRangeReference ();if _aebdf ,_febbed :=ev .GetFromCache (_debg );_febbed {return _aebdf ;};_fddb ,_eeca :=_eadcf (ctx ,_fdadg ._gbbgd ,_fdadg ._dgfe );_abadb :=_geceg (ctx ,ev ,_fddb ,_eeca );ev .SetCache (_debg ,_abadb );return _abadb ;};

// String returns a string representation of a vertical range.
func (_aace VerticalRange )String ()string {return _aace .verticalRangeReference ()};var _agfc =[...]int {-1,1,1,-1,-2,0};var _fbadd =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_effeg :=args [0].AsNumber ();if _effeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cded :=_a .Signbit (_effeg .ValueNumber );_bffa ,_ecac :=_a .Modf (_effeg .ValueNumber /2);_dfddb :=_bffa *2;if _ecac !=0{if !_cded {_dfddb +=2;}else {_dfddb -=2;};};return MakeNumberResult (_dfddb );};

// CellRef is a reference to a single cell
type CellRef struct{_fbc string };func _daed (_cecgd _ge .Time )bool {return _ge .Now ().Sub (_cecgd )>=_ddgg };const _dfca =57348;var _daecb =[...]uint8 {0,20,37,60,78,96};var _dbfa =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _gdbdc (_dbec []Result ,_cdce bool ,_fdgae string )Result {var _dggfg ,_cdbdd string ;if _cdce {_dggfg ="\u0074\u0068\u0072e\u0065";_cdbdd ="\u006f\u0064\u0064";}else {_dggfg ="\u0074\u0077\u006f";_cdbdd ="\u0065\u0076\u0065\u006e";};_agfbc :=len (_dbec );if (_cdce &&_agfbc < 3)||(!_cdce &&_agfbc < 2){return MakeErrorResult (_fdgae +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_dggfg +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_agfbc /2*2==_agfbc )==_cdce {return MakeErrorResult (_fdgae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_cdbdd +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_gbed :=-1;_ageg :=-1;for _cged :=0;_cged < _agfbc ;_cged +=2{_afda :=_dbec [_cged ];if _afda .Type !=ResultTypeArray &&_afda .Type !=ResultTypeList {return MakeErrorResult (_fdgae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_bfcb :=_agcd (_afda );if _ageg ==-1{_ageg =len (_bfcb );_gbed =len (_bfcb [0]);}else if len (_bfcb )!=_ageg ||len (_bfcb [0])!=_gbed {return MakeErrorResult (_fdgae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _cdce &&_cged ==0{_cged --;};};return _cgac ;};var _fccfe =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};func _dacf (_ecce ,_eeae Result ,_gcg string )(*xargs ,Result ){if _ecce .Type !=ResultTypeList &&_ecce .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gcg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_ffcg :=_agcd (_ecce );_ecdcg :=[]float64 {};for _ ,_ffaa :=range _ffcg {for _ ,_bgddff :=range _ffaa {if _bgddff .Type ==ResultTypeNumber &&!_bgddff .IsBoolean {_ecdcg =append (_ecdcg ,_bgddff .ValueNumber );}else {return nil ,MakeErrorResult (_gcg +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_bbbc :=len (_ecdcg );if len (_ecdcg )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _eeae .Type !=ResultTypeList &&_eeae .Type !=ResultTypeArray {return nil ,MakeErrorResult (_gcg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_eddc :=_agcd (_eeae );_fdeff :=[]float64 {};_aafg :=0.0;for _ ,_ebeb :=range _eddc {for _ ,_gfccb :=range _ebeb {if _gfccb .Type ==ResultTypeNumber &&!_gfccb .IsBoolean {_gbcf :=float64 (int (_gfccb .ValueNumber ));if _gbcf < _aafg {return nil ,MakeErrorResultType (ErrorTypeNum ,_gcg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_fdeff =append (_fdeff ,_gbcf );_aafg =_gbcf ;}else {return nil ,MakeErrorResult (_gcg +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_fdeff )!=_bbbc {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_ecdcg ,_fdeff },MakeEmptyResult ();};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_ggca :=_gdbdc (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _ggca .Type !=ResultTypeEmpty {return _ggca ;};_fgea :=_baaff (args [1:]);_cfee :=0.0;_fefcb :=_agcd (args [0]);for _ ,_fcfe :=range _fgea {_cfee +=_fefcb [_fcfe ._aabddc ][_fcfe ._gcag ].ValueNumber ;};return MakeNumberResult (float64 (_cfee ));};

// FunctionCall is a function call expression.
type FunctionCall struct{_ecfd string ;_ebdaa []Expression ;};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_cagee PrefixRangeExpr )Update (q *_cbe .UpdateQuery )Expression {_gbbdg :=_cagee ;_gbacb :=_cagee ._dcfab .String ();if _gbacb ==q .SheetToUpdate {_bdcag :=*q ;_bdcag .UpdateCurrentSheet =true ;_gbbdg ._dggb =_cagee ._dggb .Update (&_bdcag );_gbbdg ._cdeea =_cagee ._cdeea .Update (&_bdcag );};return _gbbdg ;};func (_dfeaa *yyParserImpl )Parse (yylex yyLexer )int {_febbe :=_ge .Now ();var _acdfg int ;var _ffdfg yySymType ;var _ceed []yySymType ;_ =_ceed ;_baebg :=_dfeaa ._ddgea [:];Nerrs :=0;Errflag :=0;_fbbeb :=0;_dfeaa ._cdcgc =-1;_aeed :=-1;defer func (){_fbbeb =-1;_dfeaa ._cdcgc =-1;_aeed =-1}();_eadc :=-1;goto _bgddc ;_gcfdcf :return 0;_cegb :return 1;_bgddc :if _daed (_febbe ){_fcb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cegb ;};if _fgfd >=4{_db .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_gdef (_aeed ),_faee (_fbbeb ));};_eadc ++;if _eadc >=len (_baebg ){_cbaef :=make ([]yySymType ,len (_baebg )*2);copy (_cbaef ,_baebg );_baebg =_cbaef ;};_baebg [_eadc ]=_ffdfg ;_baebg [_eadc ]._bdcee =_fbbeb ;_dadfe :if _daed (_febbe ){_fcb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cegb ;};_acdfg =_faaf [_fbbeb ];if _acdfg <=_ecage {goto _gcaeb ;};if _dfeaa ._cdcgc < 0{_dfeaa ._cdcgc ,_aeed =_gdba (yylex ,&_dfeaa ._dgcgc );};_acdfg +=_aeed ;if _acdfg < 0||_acdfg >=_ecfe {goto _gcaeb ;};_acdfg =_adeb [_acdfg ];if _ageeg [_acdfg ]==_aeed {_dfeaa ._cdcgc =-1;_aeed =-1;_ffdfg =_dfeaa ._dgcgc ;_fbbeb =_acdfg ;if Errflag > 0{Errflag --;};goto _bgddc ;};_gcaeb :if _daed (_febbe ){_fcb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _cegb ;};_acdfg =_dfcf [_fbbeb ];if _acdfg ==-2{if _dfeaa ._cdcgc < 0{_dfeaa ._cdcgc ,_aeed =_gdba (yylex ,&_dfeaa ._dgcgc );};_eabd :=0;for {if _agfc [_eabd +0]==-1&&_agfc [_eabd +1]==_fbbeb {break ;};_eabd +=2;};for _eabd +=2;;_eabd +=2{_acdfg =_agfc [_eabd +0];if _acdfg < 0||_acdfg ==_aeed {break ;};};_acdfg =_agfc [_eabd +1];if _acdfg < 0{goto _gcfdcf ;};};if _acdfg ==0{switch Errflag {case 0:yylex .Error (_egeg (_fbbeb ,_aeed ));Nerrs ++;if _fgfd >=1{_db .Printf ("\u0025\u0073",_faee (_fbbeb ));_db .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_gdef (_aeed ));};fallthrough;case 1,2:Errflag =3;for _eadc >=0{_acdfg =_faaf [_baebg [_eadc ]._bdcee ]+_dbbce ;if _acdfg >=0&&_acdfg < _ecfe {_fbbeb =_adeb [_acdfg ];if _ageeg [_fbbeb ]==_dbbce {goto _bgddc ;};};if _fgfd >=2{_db .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_baebg [_eadc ]._bdcee );};_eadc --;};goto _cegb ;case 3:if _fgfd >=2{_db .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_gdef (_aeed ));};if _aeed ==_gccdc {goto _cegb ;};_dfeaa ._cdcgc =-1;_aeed =-1;goto _dadfe ;};};if _fgfd >=2{_db .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_acdfg ,_faee (_fbbeb ));};_fcedc :=_acdfg ;_dcaab :=_eadc ;_ =_dcaab ;_eadc -=_gafeb [_acdfg ];if _eadc +1>=len (_baebg ){_feecf :=make ([]yySymType ,len (_baebg )*2);copy (_feecf ,_baebg );_baebg =_feecf ;};_ffdfg =_baebg [_eadc +1];_acdfg =_fbadd [_acdfg ];_ggbc :=_egcfc [_acdfg ];_efee :=_ggbc +_baebg [_eadc ]._bdcee +1;if _efee >=_ecfe {_fbbeb =_adeb [_ggbc ];}else {_fbbeb =_adeb [_efee ];if _ageeg [_fbbeb ]!=-_acdfg {_fbbeb =_adeb [_ggbc ];};};switch _fcedc {case 1:_ceed =_baebg [_dcaab -1:_dcaab +1];{yylex .(*plex )._dacfb =_ffdfg ._gbaf ;};case 3:_ceed =_baebg [_dcaab -2:_dcaab +1];{_ffdfg ._gbaf =_ceed [2]._gbaf ;};case 4:_ceed =_baebg [_dcaab -4:_dcaab +1];{};case 5:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewBool (_ceed [1]._efbad ._abff );};case 6:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewNumber (_ceed [1]._efbad ._abff );};case 7:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewString (_ceed [1]._efbad ._abff );};case 8:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewError (_ceed [1]._efbad ._abff );};case 9:_ceed =_baebg [_dcaab -2:_dcaab +1];{_ffdfg ._gbaf =_ceed [2]._gbaf ;};case 10:_ceed =_baebg [_dcaab -2:_dcaab +1];{_ffdfg ._gbaf =NewNegate (_ceed [2]._gbaf );};case 15:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =_ceed [2]._gbaf ;};case 17:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewConstArrayExpr (_ceed [2]._fabg );};case 18:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._fabg =append (_ffdfg ._fabg ,_ceed [1]._bbaa );};case 19:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._fabg =append (_ceed [1]._fabg ,_ceed [3]._bbaa );};case 20:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._bbaa =append (_ffdfg ._bbaa ,_ceed [1]._gbaf );};case 21:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._bbaa =append (_ceed [1]._bbaa ,_ceed [3]._gbaf );};case 23:_ceed =_baebg [_dcaab -2:_dcaab +1];{_ffdfg ._gbaf =NewPrefixExpr (_ceed [1]._gbaf ,_ceed [2]._gbaf );};case 25:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewSheetPrefixExpr (_ceed [1]._efbad ._abff );};case 26:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewCellRef (_ceed [1]._efbad ._abff );};case 27:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewRange (_ceed [1]._gbaf ,_ceed [3]._gbaf );};case 28:_ceed =_baebg [_dcaab -4:_dcaab +1];{_ffdfg ._gbaf =NewPrefixRangeExpr (_ceed [1]._gbaf ,_ceed [2]._gbaf ,_ceed [4]._gbaf );};case 29:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewNamedRangeRef (_ceed [1]._efbad ._abff );};case 30:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewHorizontalRange (_ceed [1]._efbad ._abff );};case 31:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._gbaf =NewVerticalRange (_ceed [1]._efbad ._abff );};case 32:_ceed =_baebg [_dcaab -2:_dcaab +1];{_ffdfg ._gbaf =NewPrefixHorizontalRange (_ceed [1]._gbaf ,_ceed [2]._efbad ._abff );};case 33:_ceed =_baebg [_dcaab -2:_dcaab +1];{_ffdfg ._gbaf =NewPrefixVerticalRange (_ceed [1]._gbaf ,_ceed [2]._efbad ._abff );};case 34:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypePlus ,_ceed [3]._gbaf );};case 35:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeMinus ,_ceed [3]._gbaf );};case 36:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeMult ,_ceed [3]._gbaf );};case 37:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeDiv ,_ceed [3]._gbaf );};case 38:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeExp ,_ceed [3]._gbaf );};case 39:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeLT ,_ceed [3]._gbaf );};case 40:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeGT ,_ceed [3]._gbaf );};case 41:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeLEQ ,_ceed [3]._gbaf );};case 42:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeGEQ ,_ceed [3]._gbaf );};case 43:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeEQ ,_ceed [3]._gbaf );};case 44:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeNE ,_ceed [3]._gbaf );};case 45:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewBinaryExpr (_ceed [1]._gbaf ,BinOpTypeConcat ,_ceed [3]._gbaf );};case 47:_ceed =_baebg [_dcaab -2:_dcaab +1];{_ffdfg ._gbaf =NewFunction (_ceed [1]._efbad ._abff ,nil );};case 48:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._gbaf =NewFunction (_ceed [1]._efbad ._abff ,_ceed [2]._bbaa );};case 49:_ceed =_baebg [_dcaab -1:_dcaab +1];{_ffdfg ._bbaa =append (_ffdfg ._bbaa ,_ceed [1]._gbaf );};case 50:_ceed =_baebg [_dcaab -3:_dcaab +1];{_ffdfg ._bbaa =append (_ceed [1]._bbaa ,_ceed [3]._gbaf );};case 53:_ceed =_baebg [_dcaab -0:_dcaab +1];{_ffdfg ._gbaf =NewEmptyExpr ();};};goto _bgddc ;};const _dcbbc =57374;func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};func (_baaaa ResultType )String ()string {if _baaaa >=ResultType (len (_decb )-1){return _db .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_baaaa );};return _ecee [_decb [_baaaa ]:_decb [_baaaa +1]];};const _gefc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_aggb ,_edff :=_adeg (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _edff .Type ==ResultTypeError {return _edff ;};_dbdg :=_aggb ._ffce ;_dgd :=_aggb ._ceefc ;_bcbdd :=_aggb ._gbb ;_bcfg :=_aggb ._bgfd ;_adc :=_aggb ._ccdd ;_dbfb :=_aggb ._eea ;if _dbfb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_fddd :=_aggb ._aabc ;_gbfd :=1.0/_dbfb ;_abag :=2.5;if _gbfd < 3{_abag =1;}else if _gbfd < 5{_abag =1.5;}else if _gbfd <=6{_abag =2;};_dbfb *=_abag ;_deba ,_aaab :=_bece (_dgd ,_bcbdd ,_fddd );if _aaab .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_baef :=_fcde (_deba *_dbfb *_dbdg );_dbdg -=_baef ;_fgge :=_dbdg -_bcfg ;for _cecg :=0;_cecg < _adc ;_cecg ++{_baef =_fcde (_dbfb *_dbdg );_fgge -=_baef ;if _fgge < 0{switch _adc -_cecg {case 0:case 1:return MakeNumberResult (_fcde (_dbdg *0.5));default:return MakeNumberResult (0);};};_dbdg -=_baef ;};return MakeNumberResult (_baef );};

// Reference returns a string reference value to a range.
func (_fecgf Range )Reference (ctx Context ,ev Evaluator )Reference {_bacg :=_fecgf ._eeag .Reference (ctx ,ev );_fcef :=_fecgf ._caab .Reference (ctx ,ev );if _bacg .Type ==ReferenceTypeCell &&_fcef .Type ==ReferenceTypeCell {return MakeRangeReference (_aadd (_bacg ,_fcef ));};return ReferenceInvalid ;};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_cbdgg Expression ;_dgcgg Expression ;};

// Eval evaluates and returns the result of an empty expression.
func (_cbf EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};func _ddda (_acf int )bool {return _acf ==0||_acf ==4};func _abded (_ffbc Result )Result {if _ffbc .Type ==ResultTypeEmpty {return _ffbc ;};_accac :=_ffbc .AsString ();if _accac .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _ffbc .IsBoolean {if _accac .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _accac .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_dg .ToLower (_accac .ValueString ));};};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_aegcc :=_dg .Split (v ,"\u003a");if len (_aegcc )!=2{return nil ;};if _aegcc [0]> _aegcc [1]{_aegcc [0],_aegcc [1]=_aegcc [1],_aegcc [0];};return PrefixVerticalRange {_gfed :pfx ,_ddbg :_aegcc [0],_ccef :_aegcc [1]};};

// IsDBCS returns false for the invalid reference context.
func (_aaaf *ivr )IsDBCS ()bool {return false };func _faega (_aggcb Result ,_cdgb *criteriaParsed )bool {if _aggcb .Type ==ResultTypeEmpty {return false ;};if _cdgb ._bcbce {return _aggcb .ValueNumber ==_cdgb ._fdcd ;}else {_ecbe :=_dg .ToLower (_aggcb .ValueString );return _cdgb ._fbfag ==_ecbe ||_cab .Match (_cdgb ._fbfag ,_ecbe );};};func _aab (_cac string ,_gef uint32 )string {_bac :=_cg .ColumnToIndex (_cac );if _bac ==_gef {return "\u0023\u0052\u0045F\u0021";}else if _bac > _gef {return _cg .IndexToColumn (_bac -1);}else {return _cac ;};};type tokenType int ;func _ccgc (_caeab []Result ,_gdce bool )Result {_ffgg :="\u004d\u0041\u0058";if _gdce {_ffgg ="\u004d\u0041\u0058\u0041";};if len (_caeab )==0{return MakeErrorResult (_ffgg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfe :=-_a .MaxFloat64 ;for _ ,_fdgbc :=range _caeab {switch _fdgbc .Type {case ResultTypeNumber :if (_gdce ||!_fdgbc .IsBoolean )&&_fdgbc .ValueNumber > _egfe {_egfe =_fdgbc .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_ddcdf :=_ccgc (_fdgbc .ListValues (),_gdce );if _ddcdf .ValueNumber > _egfe {_egfe =_ddcdf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ecge :=0.0;if _gdce {_ecge =_fdgbc .AsNumber ().ValueNumber ;};if _ecge > _egfe {_egfe =_ecge ;};default:_fcb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ffgg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdgbc .Type );};};if _egfe ==-_a .MaxFloat64 {_egfe =0;};return MakeNumberResult (_egfe );};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_ffa :=len (args );if _ffa !=4&&_ffa !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bdf ,_cbfb ,_deece :=_ffcca (args [0],args [1],"\u0044\u0049\u0053\u0043");if _deece .Type ==ResultTypeError {return _deece ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eafe :=args [2].ValueNumber ;if _eafe <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afagc :=args [3].ValueNumber ;if _afagc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfffb :=0;if _ffa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfffb =int (args [4].ValueNumber );if !_dccd (_dfffb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_bbf ,_deece :=_bece (_bdf ,_cbfb ,_dfffb );if _deece .Type ==ResultTypeError {return _deece ;};return MakeNumberResult ((_afagc -_eafe )/_afagc /_bbf );};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbcd :=args [0].AsNumber ();if _cbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _cbcd .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cagd :=float64 (1);_ccbab :=_a .Trunc (_cbcd .ValueNumber );for _efbb :=_ccbab ;_efbb > 1;_efbb -=2{_cagd *=_efbb ;};return MakeNumberResult (_cagd );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_begg :=len (args );if _begg !=4&&_begg !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cedd :=args [0].ValueNumber ;if _cedd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddaed :=args [1].ValueNumber ;if _ddaed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfeg :=args [2].ValueNumber ;if _gfeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gecc :=args [3].ValueNumber ;if _gecc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _gecc > _gfeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_adad :=2.0;if _begg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adad =args [4].ValueNumber ;if _adad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_dccc (_cedd ,_ddaed ,_gfeg ,_gecc ,_adad ));};func NewLexer ()*Lexer {return &Lexer {_ddee :make (chan *node )}};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_beef :=len (args );if _beef < 3||_beef > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aceg :=args [0].ValueNumber ;if _aceg !=float64 (int (_aceg )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gagg :=args [2].ValueNumber ;_adge :=0.0;if _beef >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_adge =args [3].ValueNumber ;};_gceg :=0.0;if _beef >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gceg =args [4].ValueNumber ;if _gceg !=0{_gceg =1;};};_ecf :=0.1;if _beef >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecf =args [5].ValueNumber ;};_bbdf :=100;_fcad :=0;_beceb :=false ;_dbfbc :=1e-6;_gdgd :=_ecf ;for _fcad < _bbdf &&!_beceb {_aee :=_a .Pow (_gdgd +1,_aceg );_fagac :=_a .Pow (_gdgd +1,_aceg -1);_eafgd :=_gdgd *_gceg +1;_bcg :=_dfdd *(_aee -1);_fege :=_adge +_aee *_gagg +_bcg *_eafgd /_gdgd ;_fcaf :=_aceg *_fagac *_gagg -_bcg *_eafgd /_a .Pow (_gdgd ,2);_dgdf :=(_aceg *_dfdd *_fagac *_eafgd +_bcg *_gceg )/_gdgd ;_dcdd :=_fege /(_fcaf +_dgdf );if _a .Abs (_dcdd )< _dbfbc {_beceb =true ;};_fcad ++;_gdgd -=_dcdd ;};return MakeNumberResult (_gdgd );};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccbe :=args [0].AsString ();if _ccbe .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_ccbe .ValueString )));};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dedc ,_eaca :=_fgab (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _eaca .Type ==ResultTypeError {return _eaca ;};_bfc :=_dag (_dedc ._aac );_dcgcd :=_dag (_dedc ._cfcf );_fagg :=_dedc ._agf ;_fefc :=_dedc ._bae ;_gdb :=_eabc (_bfc ,_dcgcd ,_fagg ,_fefc );_dcf ,_aeff ,_dgeb :=_gdb .Date ();return MakeNumberResult (_fabf (_dcf ,int (_aeff ),_dgeb ));};func init (){_dfda ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};func _bfdd (_ccgaf []Result ,_ddf string )(*durationArgs ,Result ){_efec :=len (_ccgaf );if _efec !=5&&_efec !=6{return nil ,MakeErrorResult (_ddf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcd ,_eged ,_edaf :=_ffcca (_ccgaf [0],_ccgaf [1],_ddf );if _edaf .Type ==ResultTypeError {return nil ,_edaf ;};_gada :=_ccgaf [2];if _gada .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_aegb :=_gada .ValueNumber ;if _aegb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_gcccf :=_ccgaf [3];if _gcccf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dddf :=_gcccf .ValueNumber ;if _dddf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_beba :=_ccgaf [4];if _beba .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gaad :=float64 (int (_beba .ValueNumber ));if !_bccf (_gaad ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gdab :=0;if _efec ==6&&_ccgaf [5].Type !=ResultTypeEmpty {_cecfa :=_ccgaf [5];if _cecfa .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdab =int (_cecfa .ValueNumber );if !_dccd (_gdab ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_ddf );};};return &durationArgs {_fcd ,_eged ,_aegb ,_dddf ,_gaad ,_gdab },_cgac ;};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_gadfb :=args [0];if _gadfb .Type ==ResultTypeError {return _gadfb ;};if _gadfb .Type !=ResultTypeString &&_gadfb .Type !=ResultTypeNumber &&_gadfb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cgeeb :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_egefc :=int (args [1].ValueNumber );if _egefc < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgbd :=int (args [2].ValueNumber );if _bgbd < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_ggda :=len (_cgeeb );if _egefc > _ggda {return MakeStringResult ("");};_egefc --;_bgdf :=_egefc +_bgbd ;if _bgdf > _ggda {return MakeStringResult (_cgeeb [_egefc :]);}else {return MakeStringResult (_cgeeb [_egefc :_bgdf ]);};};

// Eval evaluates and returns a string.
func (_ddgfe String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_ddgfe ._ecfce )};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_eac Context ,formula string )Result ;SetCache (_fag string ,_efb Result );GetFromCache (_abd string )(Result ,bool );LastEvalIsRef ()bool ;};type ivr struct{};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_ceeg .Lock ();defer _ceeg .Unlock ();if _ ,_ebce :=_aafbd [name ];_ebce {_fcb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_aafbd [name ]=fn ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_cdfa :e }};func _egdg ()yyParser {return &yyParserImpl {}};const _ddb ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_beegc :=args [0].AsString ();if _beegc .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_egeb :=args [1].AsNumber ();if _egeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _egeb .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _egeb .ValueNumber ==0{return MakeStringResult ("");};_fbcg :=_e .Buffer {};for _bcfd :=0;_bcfd < int (_egeb .ValueNumber );_bcfd ++{_fbcg .WriteString (_beegc .ValueString );};return MakeStringResult (_fbcg .String ());};var _decb =[...]uint8 {0,17,33,49,63,78,93,108};func _adgc (_cgdda Result ,_gabgd ,_fagce int )[][]Result {_fbca :=[][]Result {};switch _cgdda .Type {case ResultTypeArray :for _cffbf ,_eaaf :=range _cgdda .ValueArray {if _cffbf < _gabgd {_fbca =append (_fbca ,_ccec (MakeListResult (_eaaf ),_fagce ));}else {_fbca =append (_fbca ,_ccec (MakeErrorResultType (ErrorTypeNA ,""),_fagce ));};};case ResultTypeList :_eacee :=_ccec (_cgdda ,_fagce );for _aedgc :=0;_aedgc < _gabgd ;_aedgc ++{_fbca =append (_fbca ,_eacee );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bcac :=0;_bcac < _gabgd ;_bcac ++{_fbfd :=_ccec (_cgdda ,_fagce );_fbca =append (_fbca ,_fbfd );};};return _fbca ;};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_gec ,_da Expression ;_ag BinOpType ;};func _ddff (_dgdba []Result ,_fbegd countMode )float64 {_dgdc :=0.0;for _ ,_afabd :=range _dgdba {switch _afabd .Type {case ResultTypeNumber :if _fbegd ==_ffebe ||(_fbegd ==_dbce &&!_afabd .IsBoolean ){_dgdc ++;};case ResultTypeList ,ResultTypeArray :_dgdc +=_ddff (_afabd .ListValues (),_fbegd );case ResultTypeString :if _fbegd ==_ffebe {_dgdc ++;};case ResultTypeEmpty :if _fbegd ==_deca {_dgdc ++;};};};return _dgdc ;};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_adcf :=len (args );if _adcf < 3||_adcf > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eecb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_beggf :=args [1].ValueNumber ;if _beggf !=float64 (int (_beggf )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbgf :=args [2].ValueNumber ;_dadc :=0.0;if _adcf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dadc =args [3].ValueNumber ;};_defb :=0;if _adcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_defb =int (args [4].ValueNumber );if _defb !=0{_defb =1;};};return MakeNumberResult (_dcaa (_eecb ,_beggf ,_dbgf ,_dadc ,_defb ));};func _eaba (_ecg ,_fcg ,_beb ,_gdgb int )int {if !_ddda (_gdgb ){return _beb ;};_eefa :=_beb ;_aefc :=_bfg (_ecg ,_fcg );if _eefa > 30||_beb >=_aefc ||_eefa >=_aefc {_eefa =30;};return _eefa ;};func _edece (_baee []Result ,_bbagg rmode )Result {if len (_baee )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_agfb :=_baee [0].AsNumber ();if _agfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_faef :=_baee [1].AsNumber ();if _faef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgdec :=_faef .ValueNumber ;_ebeaeg :=_agfb .ValueNumber ;_adedd :=1.0;if _fgdec > 0{_adedd =_a .Pow (1/10.0,_fgdec );}else {_adedd =_a .Pow (10.0,-_fgdec );};_ebeaeg ,_acdag :=_a .Modf (_ebeaeg /_adedd );switch _bbagg {case _bbgc :const _aefe =0.499999999;if _acdag >=_aefe {_ebeaeg ++;}else if _acdag <=-_aefe {_ebeaeg --;};case _daaaf :case _geeb :if _acdag > 0{_ebeaeg ++;}else if _acdag < 0{_ebeaeg --;};};return MakeNumberResult (_ebeaeg *_adedd );};

// Eval evaluates the binary expression using the context given.
func (_df BinaryExpr )String ()string {_cedb :="";switch _df ._ag {case BinOpTypePlus :_cedb ="\u002b";case BinOpTypeMinus :_cedb ="\u002d";case BinOpTypeMult :_cedb ="\u002a";case BinOpTypeDiv :_cedb ="\u002f";case BinOpTypeExp :_cedb ="\u005e";case BinOpTypeLT :_cedb ="\u003c";case BinOpTypeGT :_cedb ="\u003e";case BinOpTypeEQ :_cedb ="\u003d";case BinOpTypeLEQ :_cedb ="\u003c\u003d";case BinOpTypeGEQ :_cedb ="\u003e\u003d";case BinOpTypeNE :_cedb ="\u003c\u003e";case BinOpTypeConcat :_cedb ="\u0026";};return _df ._gec .String ()+_cedb +_df ._da .String ();};func _egage (_bgga ,_deef ,_edfa ,_fada ,_dbeb float64 ,_cabc int )float64 {_bcfb :=_dgc (_bgga ,_edfa ,_fada ,_dbeb ,_cabc );var _bedg float64 ;if _deef ==1{if _cabc ==1{_bedg =0;}else {_bedg =-_fada ;};}else {if _cabc ==1{_bedg =_dcaa (_bgga ,_deef -2,_bcfb ,_fada ,1)-_bcfb ;}else {_bedg =_dcaa (_bgga ,_deef -1,_bcfb ,_fada ,0);};};return _bedg *_bgga ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};var _ageeg =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Update updates references in the BinaryExpr after removing a row/column.
func (_gcc BinaryExpr )Update (q *_cbe .UpdateQuery )Expression {_ccb :=_gcc ;_ccb ._gec =_gcc ._gec .Update (q );_ccb ._da =_gcc ._da .Update (q );return _ccb ;};

// Reference returns an invalid reference for Bool.
func (_ccd Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ffdfd :=args [0].AsNumber ();_eefda :=args [1].AsNumber ();if _ffdfd .Type !=ResultTypeNumber ||_eefda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _eefda .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_aggce ,_defad :=_a .Modf (_ffdfd .ValueNumber /_eefda .ValueNumber );if _defad < 0{_aggce --;};return MakeNumberResult (_ffdfd .ValueNumber -_eefda .ValueNumber *_aggce );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_baaf :=args [0];switch _baaf .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_dddgg :=0.0;_ebeae :=0.0;for _ ,_cdcc :=range _baaf .ValueString {_ebga :=0.0;switch _cdcc {case 'I':_ebga =1;case 'V':_ebga =5;case 'X':_ebga =10;case 'L':_ebga =50;case 'C':_ebga =100;case 'D':_ebga =500;case 'M':_ebga =1000;};_dddgg +=_ebga ;switch {case _ebeae ==_ebga &&(_ebeae ==5||_ebeae ==50||_ebeae ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_ebeae ==_ebga :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _ebeae < _ebga {_dddgg -=2*_ebeae ;};_ebeae =_ebga ;};return MakeNumberResult (_dddgg );case ResultTypeError :return _baaf ;default:return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_baaf .Type ));};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_bbcc :s }};const _cagdd =57370;

// Reference returns a string reference value to a vertical range.
func (_ceaa VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_ceaa .verticalRangeReference ()};};

// Update updates the horizontal range references after removing a row/column.
func (_gbbf HorizontalRange )Update (q *_cbe .UpdateQuery )Expression {return _gbbf };func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};const _aceeb =57346;const _gfeac =57360;func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agacf :=args [0].AsNumber ();if _agacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agacf .ValueNumber < 0{return MakeNumberResult (-1);}else if _agacf .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_dcagb ,_gcfdc :=_dacfg ("\u0046\u0049\u004e\u0044",args );if _gcfdc .Type !=ResultTypeEmpty {return _gcfdc ;};_cebg :=_dcagb ._aedab ;if _cebg ==""{return MakeNumberResult (1.0);};_dbdgc :=_dcagb ._fdcfe ;_cbeg :=_dcagb ._ffef ;_eaecf :=1;for _dbbd :=range _dbdgc {if _eaecf < _cbeg {_eaecf ++;continue ;};_cabca :=_dg .Index (_dbdgc [_dbbd :],_cebg );if _cabca ==0{return MakeNumberResult (float64 (_eaecf ));};_eaecf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dddg :=0;_adffb :=false ;for _ ,_bdea :=range args {switch _bdea .Type {case ResultTypeList ,ResultTypeArray :_ffcf :=Xor (_bdea .ListValues ());if _ffcf .Type ==ResultTypeError {return _ffcf ;};if _ffcf .ValueNumber !=0{_dddg ++;};_adffb =true ;case ResultTypeNumber :if _bdea .ValueNumber !=0{_dddg ++;};_adffb =true ;case ResultTypeString :case ResultTypeError :return _bdea ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_adffb {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_dddg %2!=0);};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_ebbbd :=_gdbdc (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _ebbbd .Type !=ResultTypeEmpty {return _ebbbd ;};_cedad :=_baaff (args [1:]);_bgbcb :=-_a .MaxFloat64 ;_daecf :=_agcd (args [0]);for _ ,_ebbee :=range _cedad {_dffeg :=_daecf [_ebbee ._aabddc ][_ebbee ._gcag ].ValueNumber ;if _bgbcb < _dffeg {_bgbcb =_dffeg ;};};if _bgbcb ==-_a .MaxFloat64 {_bgbcb =0;};return MakeNumberResult (float64 (_bgbcb ));};func init (){_addd =_ca .New (_ca .NewSource (_ge .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_egde ("\u0041\u0053\u0049\u004e",_a .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_egde ("\u0041\u0053\u0049\u004e",_a .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_egde ("\u0041\u0053\u0049\u004e",_a .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_egde ("\u0041\u0043\u004f\u0054",func (_effge float64 )float64 {return _a .Pi /2-_a .Atan (_effge )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_egde ("\u0041\u0043\u004fT\u0048",func (_dcded float64 )float64 {return _a .Atanh (1/_dcded )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_egde ("\u0041\u0053\u0049\u004e",_a .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_egde ("\u0041\u0053\u0049N\u0048",_a .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_egde ("\u0041\u0054\u0041\u004e",_a .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_egde ("\u0041\u0054\u0041N\u0048",_a .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_egde ("\u0043\u004f\u0053",_a .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_egde ("\u0043\u004f\u0053\u0048",_a .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_accab ("\u0043\u004f\u0054",_a .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_accab ("\u0043\u004f\u0054\u0048",_a .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_accab ("\u0043\u0053\u0043",_a .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_accab ("\u0043\u0053\u0043",_a .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_egde ("\u0045\u0058\u0050",_a .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_egde ("\u004c\u004e",_a .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_egde ("\u004c\u004f\u00471\u0030",_a .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_accab ("\u0053\u0045\u0043",_a .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_accab ("\u0053\u0045\u0043\u0048",_a .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_egde ("\u0053\u0049\u004e",_a .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_egde ("\u0053\u0049\u004e\u0048",_a .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_egde ("\u0053\u0051\u0052\u0054",_a .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_egde ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_gfeae float64 )float64 {return _a .Sqrt (_gfeae *_a .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_egde ("\u0054\u0041\u004e",_a .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_egde ("\u0054\u0041\u004e\u0048",_a .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bgdda :=args [0];if _bgdda .Type !=ResultTypeArray &&_bgdda .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bcdb :=_bgdda .ValueArray ;if len (_bcdb )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_bcdb )));};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eefd :=_ge .Now ();_ ,_edgec :=_eefd .Zone ();_bfd :=_cgfdb (_dfa ,_eefd .Unix ()+int64 (_edgec ))+1;return MakeNumberResult (_bfd );};

// Update updates references in the Negate after removing a row/column.
func (_fbgdg Negate )Update (q *_cbe .UpdateQuery )Expression {return Negate {_cdfa :_fbgdg ._cdfa .Update (q )};};type amorArgs struct{_ffce float64 ;_ceefc float64 ;_gbb float64 ;_bgfd float64 ;_ccdd int ;_eea float64 ;_aabc int ;};const _cbgdd =57353;

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_ddad :=_dg .Split (v ,"\u003a");if len (_ddad )!=2{return nil ;};_fadcce ,_ :=_fc .Atoi (_ddad [0]);_dfaba ,_ :=_fc .Atoi (_ddad [1]);if _fadcce > _dfaba {_fadcce ,_dfaba =_dfaba ,_fadcce ;};return HorizontalRange {_gbbgd :_fadcce ,_dgfe :_dfaba };};func _dgec (_fagc []Result ,_dda string )(*cumulArgs ,Result ){if len (_fagc )!=6{return nil ,MakeErrorResult (_dda +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fagc [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dda +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bdca :=_fagc [0].ValueNumber ;if _bdca <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fagc [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dda +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bcbf :=_fagc [1].ValueNumber ;if _bcbf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _fagc [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dda +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_decc :=_fagc [2].ValueNumber ;if _decc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fagc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dda +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_affb :=_fagc [3].ValueNumber ;if _affb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fagc [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dda +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfd :=_fagc [4].ValueNumber ;if _dfd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _dfd < _affb {return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _dfd > _bcbf {return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_agbaf :=int (_fagc [5].ValueNumber );if _agbaf !=0&&_agbaf !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_dda +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_bdca ,_bcbf ,_decc ,_affb ,_dfd ,_agbaf },_cgac ;};var (_fgfd =0;_dfae =false ;);

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_dff ,_aea :=_fc .ParseBool (v );if _aea !=nil {_fcb .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_aea );};return Bool {_eec :_dff };};func _ddcgb (_cfcac ,_afcb float64 )float64 {_cfcac =_a .Trunc (_cfcac );_afcb =_a .Trunc (_afcb );if _cfcac ==0{return _afcb ;};if _afcb ==0{return _cfcac ;};for _cfcac !=_afcb {if _cfcac > _afcb {_cfcac =_cfcac -_afcb ;}else {_afcb =_afcb -_cfcac ;};};return _cfcac ;};const _ggfd =16;func _aeag (_bca string )bool {for _ ,_fecd :=range _ffe {_aefg :=_fecd .FindStringSubmatch (_bca );if len (_aefg )> 1{return true ;};};return false ;};const _abba =57378;func _dacfg (_gccg string ,_efef []Result )(*parsedSearchObject ,Result ){_baac :=len (_efef );if _baac !=2&&_baac !=3{return nil ,MakeErrorResult (_gccg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_daced :=_efef [0];if _daced .Type ==ResultTypeError {return nil ,_daced ;};if _daced .Type !=ResultTypeString &&_daced .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_cfdd :=_efef [1];if _cfdd .Type ==ResultTypeError {return nil ,_cfdd ;};if _cfdd .Type !=ResultTypeString &&_cfdd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_dcea :=_cfdd .Value ();_bdfab :=_daced .Value ();_gadb :=1;if _baac ==3&&_efef [2].Type !=ResultTypeEmpty {_dbged :=_efef [2];if _dbged .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_gadb =int (_dbged .ValueNumber );if _gadb < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _gadb > len (_dcea ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_bdfab ,_dcea ,_gadb },_cgac ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_egegg Context ,_fcefb Evaluator ,_cfcdg []Result )Result ;

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_dgcdd ,_fdfbd ,_edfb :=_faad (from ,to );if _edfb !=nil {_fcb .Log (_edfb .Error ());return NewError (_edfb .Error ());};return Range {_eeag :_dgcdd ,_caab :_fdfbd };};var _aefgb []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};var _ffca ,_caed ,_aegg ,_agbe ,_bbbd ,_gbbd *_cb .Regexp ;var _gfgea =[...]struct{_dcdf int ;_bbfg int ;_feaee string ;}{};func _gddb (_dcgd Result ,_cacg ,_bced string )(float64 ,Result ){var _affc float64 ;switch _dcgd .Type {case ResultTypeNumber :_affc =float64 (int (_dcgd .ValueNumber ));case ResultTypeString :_ccda :=DateValue ([]Result {_dcgd });if _ccda .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_cacg +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_bced );};_affc =_ccda .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_bced );};if _affc < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_cacg +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _affc ,_cgac ;};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_dddfg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dddfg =int (args [1].ValueNumber );if _dddfg < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _dddfg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ccfe :=args [0].Value ();_dfag :=len (_ccfe );if _dddfg > _dfag {return MakeStringResult (_ccfe );};return MakeStringResult (_ccfe [_dfag -_dddfg :_dfag ]);};const _gaga ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_bba +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";type criteriaRegex struct{_egcd byte ;_bgdde string ;};func _bfdcf (_adade []Result )(bool ,Result ){for _ ,_dbddf :=range _adade {if _dbddf .Type ==ResultTypeError {return true ,_dbddf ;};};return false ,MakeEmptyResult ();};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdcgf :=args [0].AsString ();if _bdcgf .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_dbaca :=args [1].AsNumber ();if _dbaca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edee :=_bdcgf .ValueString ;if len (_edee )> 2&&(_dg .HasPrefix (_edee ,"\u0030\u0078")||_dg .HasPrefix (_edee ,"\u0030\u0058")){_edee =_edee [2:];};_ggee ,_bdgfe :=_fc .ParseInt (_edee ,int (_dbaca .ValueNumber ),64);if _bdgfe !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_ggee ));};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ffb :=_dg .ToLower (args [0].ValueString );if !_aeag (_ffb ){_ ,_ ,_ ,_ ,_acg ,_gffd :=_ada (_ffb );if _gffd .Type ==ResultTypeError {_gffd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _gffd ;};if _acg {return MakeNumberResult (0);};};_cdec ,_bcf ,_dbg ,_ ,_dga :=_fdbg (_ffb );if _dga .Type ==ResultTypeError {return _dga ;};return MakeNumberResult (_fabf (_cdec ,_bcf ,_dbg ));};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bdbg :=args [0];if _bdbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gaaba :=int (_bdbg .ValueNumber );if _gaaba < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_gaaba {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_gaaba ];};const _bba ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";const _gfeab =57366;

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_gdcd :=len (args );if _gdcd !=4&&_gdcd !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdaa ,_ddca ,_bfge :=_ffcca (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _bfge .Type ==ResultTypeError {return _bfge ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdge :=args [2].ValueNumber ;if _gdge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bccb :=args [3].ValueNumber ;if _bccb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_cfcg :=0;if _gdcd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfcg =int (args [4].ValueNumber );if !_dccd (_cfcg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_acafd ,_bfge :=_bece (_cdaa ,_ddca ,_cfcg );if _bfge .Type ==ResultTypeError {return _bfge ;};return MakeNumberResult (_bccb *(1-_gdge *_acafd ));};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ggdb :=args [0].AsNumber ();_cbcg :=args [1].AsNumber ();if _ggdb .Type !=ResultTypeNumber ||_cbcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _cbcg .ValueNumber < _ggdb .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_daab :=int64 (_ggdb .ValueNumber );_eegd :=int64 (_cbcg .ValueNumber );return MakeNumberResult (float64 (_addd .Int63n (_eegd -_daab +1)+_daab ));};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_bdfc string };

// GetFormat returns an empty string for the invalid reference context.
func (_bgadd *ivr )GetFormat (cellRef string )string {return ""};const _ecee ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";func _ada (_bec string )(int ,int ,float64 ,bool ,bool ,Result ){_cdea :="";_cdd :=[]string {};for _gea ,_edf :=range _cabf {_cdd =_edf .FindStringSubmatch (_bec );if len (_cdd )> 1{_cdea =_gea ;break ;};};if _cdea ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};_cgdd :=_cdd [1]=="";_cdd =_cdd [49:];_fbae :=len (_cdd );_fbg :=_cdd [_fbae -1];_dede :=_fbg =="\u0061\u006d";_fabe :=_fbg =="\u0070\u006d";var _cbg ,_efeg int ;var _fdbf float64 ;var _efff error ;switch _cdea {case "\u0068\u0068":_cbg ,_efff =_fc .Atoi (_cdd [0]);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};_efeg =0;_fdbf =0;case "\u0068\u0068\u003am\u006d":_cbg ,_efff =_fc .Atoi (_cdd [0]);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};_efeg ,_efff =_fc .Atoi (_cdd [2]);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};_fdbf =0;case "\u006d\u006d\u003as\u0073":_cbg =0;_efeg ,_efff =_fc .Atoi (_cdd [0]);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};_fdbf ,_efff =_fc .ParseFloat (_cdd [2],64);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_cbg ,_efff =_fc .Atoi (_cdd [0]);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};_efeg ,_efff =_fc .Atoi (_cdd [2]);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};_fdbf ,_efff =_fc .ParseFloat (_cdd [4],64);if _efff !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};};if _efeg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};if _dede ||_fabe {if _cbg > 12||_fdbf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );}else if _cbg ==12{_cbg =0;};}else if _cbg >=24||_fdbf >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gdg );};return _cbg ,_efeg ,_fdbf ,_fabe ,_cgdd ,_cgac ;};const _aaccc =57347;

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gddc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aacd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_deac :=args [2].ValueNumber ;if _deac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adea :=args [3].ValueNumber ;if _adea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _adea > _deac {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_cdeac :=(_gddc -_aacd )*(_deac -_adea +1)*2;_dfac :=_deac *(_deac +1);return MakeNumberResult (_cdeac /_dfac );};func LexReader (r _g .Reader )chan *node {_cafa :=NewLexer ();go _cafa .lex (r );return _cafa ._ddee };func _dcaa (_dfea ,_beaf ,_afee ,_cbdf float64 ,_fdef int )float64 {var _dbbc float64 ;if _dfea ==0{_dbbc =_cbdf +_afee *_beaf ;}else {_ece :=_a .Pow (1+_dfea ,_beaf );if _fdef ==1{_dbbc =_cbdf *_ece +_afee *(1+_dfea )*(_ece -1)/_dfea ;}else {_dbbc =_cbdf *_ece +_afee *(_ece -1)/_dfea ;};};return -_dbbc ;};const (_bbgc rmode =iota ;_daaaf ;_geeb ;);

// Number is a nubmer expression.
type Number struct{_bbabg float64 };func (_aegfa *plex )Lex (lval *yySymType )int {_dfae =true ;_cbda :=<-_aegfa ._daaab ;if _cbda !=nil {lval ._efbad =_cbda ;return int (lval ._efbad ._bcgb );};return 0;};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_ebac :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_ebac =int (args [1].ValueNumber );if _ebac < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _ebac ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_eeacg :=args [0].Value ();if _ebac > len (_eeacg ){return MakeStringResult (_eeacg );};return MakeStringResult (_eeacg [0:_ebac ]);};

// String returns an empty string for Error.
func (_abc Error )String ()string {return ""};func _eafce (_gddcg string ,_bdcad _ge .Time )(_ge .Time ,error ){_feggc ,_ ,_efcad :=_ed .ParseFloat (_gddcg ,10,128,_ed .ToNearestEven );if _efcad !=nil {return _ge .Time {},_efcad ;};_cdfe :=new (_ed .Float );_cdfe .SetUint64 (uint64 (24*_ge .Hour ));_feggc .Mul (_feggc ,_cdfe );_cebb ,_ :=_feggc .Uint64 ();_bbaga :=_bdcad .Add (_ge .Duration (_cebb ));return _gace (_bbaga ),nil ;};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_gedd :=len (args );if _gedd !=4&&_gedd !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aad ,_ceca ,_afbg :=_ffcca (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _afbg .Type ==ResultTypeError {return _afbg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bbcg :=args [2].ValueNumber ;if _bbcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bbg :=args [3].ValueNumber ;if _bbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_fdda :=0;if _gedd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fdda =int (args [4].ValueNumber );if !_dccd (_fdda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_dgcf ,_afbg :=_bece (_aad ,_ceca ,_fdda );if _afbg .Type ==ResultTypeError {return _afbg ;};return MakeNumberResult ((_bbg -_bbcg )/_bbcg /_dgcf );};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _ccgc (args ,true )};const _fcbgb =57352;

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_aacac *ivr )GetLabelPrefix (cellRef string )string {return ""};func _egbad (_gdff []Result )Result {_bdbb :=_gdff [0].ValueList ;_fbdbf :=len (_bdbb );switch len (_gdff ){case 1:_bbce :=[]Result {};for _ ,_deff :=range _bdbb {_bbce =append (_bbce ,MakeBoolResult (_deff .ValueNumber !=0));};return MakeListResult (_bbce );case 2:_eddcg :=_gdff [1];switch _eddcg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_acbb :=[]Result {};for _ ,_bbad :=range _bdbb {var _ccad Result ;if _bbad .ValueNumber ==0{_ccad =MakeBoolResult (false );}else {_ccad =_eddcg ;};_acbb =append (_acbb ,_ccad );};return MakeListResult (_acbb );case ResultTypeList :_edcg :=_ccec (_eddcg ,_fbdbf );_ddgf :=[]Result {};for _cdge ,_cgbae :=range _bdbb {var _cdcaa Result ;if _cgbae .ValueNumber ==0{_cdcaa =MakeBoolResult (false );}else {_cdcaa =_edcg [_cdge ];};_ddgf =append (_ddgf ,_cdcaa );};return MakeListResult (_ddgf );case ResultTypeArray :_cdcae :=_adgc (_eddcg ,len (_eddcg .ValueArray ),_fbdbf );_geaa :=[][]Result {};for _ ,_bfbe :=range _cdcae {_fcfc :=[]Result {};for _bgfb ,_eggbg :=range _bdbb {var _cbaf Result ;if _eggbg .ValueNumber ==0{_cbaf =MakeBoolResult (false );}else {_cbaf =_bfbe [_bgfb ];};_fcfc =append (_fcfc ,_cbaf );};_geaa =append (_geaa ,_fcfc );};return MakeArrayResult (_geaa );};case 3:_dcag :=_gdff [1];_eccb :=_gdff [2];_ffgc :=_babe (_dcag );_dafca :=_babe (_eccb );if _ffgc &&_dafca {_beaa :=[]Result {};for _ ,_agggf :=range _bdbb {var _dfaa Result ;if _agggf .ValueNumber ==0{_dfaa =_eccb ;}else {_dfaa =_dcag ;};_beaa =append (_beaa ,_dfaa );};return MakeListResult (_beaa );};if _dcag .Type !=ResultTypeArray &&_eccb .Type !=ResultTypeArray {_bcbcc :=_ccec (_dcag ,_fbdbf );_faff :=_ccec (_eccb ,_fbdbf );_abbb :=[]Result {};for _bbbce ,_gdabe :=range _bdbb {var _ddab Result ;if _gdabe .ValueNumber ==0{_ddab =_faff [_bbbce ];}else {_ddab =_bcbcc [_bbbce ];};_abbb =append (_abbb ,_ddab );};return MakeListResult (_abbb );};_fecc ,_adff :=len (_dcag .ValueArray ),len (_eccb .ValueArray );_gafda ,_dcac :=_fecc ,_adff ;if _adff > _gafda {_gafda ,_dcac =_dcac ,_gafda ;};_dfadgf :=_adgc (_dcag ,_gafda ,_fbdbf );_gecg :=_adgc (_eccb ,_gafda ,_fbdbf );_gfge :=[][]Result {};for _dgdbf :=0;_dgdbf < _gafda ;_dgdbf ++{_fcfb :=[]Result {};for _gcge ,_cdadc :=range _bdbb {var _gadcf Result ;if _cdadc .ValueNumber ==0{if _dgdbf < _adff {_gadcf =_gecg [_dgdbf ][_gcge ];}else {_gadcf =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _dgdbf < _fecc {_gadcf =_dfadgf [_dgdbf ][_gcge ];}else {_gadcf =MakeErrorResultType (ErrorTypeNA ,"");};};_fcfb =append (_fcfb ,_gadcf );};_gfge =append (_gfge ,_fcfb );};return MakeArrayResult (_gfge );};return MakeErrorResult ("");};func _bfcg (_egadf float64 ,_gagee *criteriaRegex )bool {_cdbc ,_cacbg :=_fc .ParseFloat (_gagee ._bgdde ,64);if _cacbg !=nil {return false ;};switch _gagee ._egcd {case _dcfa :return _egadf ==_cdbc ;case _bfec :return _egadf <=_cdbc ;case _dbdba :return _egadf >=_cdbc ;case _fegf :return _egadf < _cdbc ;case _gbab :return _egadf > _cdbc ;};return false ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_eaagb ,_bcdg string };

// String returns a string representation of a range with prefix.
func (_edeb PrefixRangeExpr )String ()string {return _db .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_edeb ._dcfab .String (),_edeb ._dggb .String (),_edeb ._cdeea .String ());};func _bfg (_afff ,_efe int )int {if _efe ==2&&_efba (_afff ){return 29;}else {return _gcfa [_efe -1];};};const _gcab =57354;

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_gbefd Expression ;_dgfd ,_ggae int ;};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _accbcg (args ,false )};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_feb :v }};const _bggc =57363;func init (){_dgag ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Reference returns a string reference value to a horizontal range with prefix.
func (_gdcaee PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_adcc :=_gdcaee ._gbefd .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_gdcaee .horizontalRangeReference (_adcc .Value )};};

// String returns a string representation of PrefixExpr.
func (_dfdbb PrefixExpr )String ()string {return _db .Sprintf ("\u0025\u0073\u0021%\u0073",_dfdbb ._cbdgg .String (),_dfdbb ._dgcgg .String ());};func (_dbbda PrefixHorizontalRange )horizontalRangeReference (_eeced string )string {return _db .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_eeced ,_dbbda ._dgfd ,_dbbda ._ggae );};const _faecc =57359;func _accbcg (_cfdb []Result ,_acgf bool )Result {var _gdbfg string ;if _acgf {_gdbfg ="\u004c\u0041\u0052G\u0045";}else {_gdbfg ="\u0053\u004d\u0041L\u004c";};if len (_cfdb )!=2{return MakeErrorResult (_gdbfg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_effg :=_cfdb [0];var _gbaa [][]Result ;switch _effg .Type {case ResultTypeArray :_gbaa =_effg .ValueArray ;case ResultTypeList :_gbaa =[][]Result {_effg .ValueList };default:return MakeErrorResult (_gdbfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_gbaa )==0{return MakeErrorResult (_gdbfg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _cfdb [1].Type !=ResultTypeNumber {return MakeErrorResult (_gdbfg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_bgac :=_cfdb [1].ValueNumber ;if _bgac < 1{return MakeErrorResultType (ErrorTypeNum ,_gdbfg +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_eaefe :=int (_bgac );if float64 (_eaefe )!=_bgac {return MakeErrorResultType (ErrorTypeNum ,_gdbfg +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_aeafd :=[]float64 {};for _ ,_afab :=range _gbaa {for _ ,_afdea :=range _afab {if _afdea .Type ==ResultTypeNumber {_aeafd =append (_aeafd ,_afdea .ValueNumber );};};};if _eaefe > len (_aeafd ){return MakeErrorResultType (ErrorTypeNum ,_gdbfg +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_caea :=_eb .MergeSort (_aeafd );if _acgf {return MakeNumberResult (_caea [len (_caea )-_eaefe ]);}else {return MakeNumberResult (_caea [_eaefe -1]);};};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_acda :=len (args );if _acda ==0||_acda > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_ebcb :=_agcd (args [0]);_abcg :=[]float64 {};for _ ,_cgde :=range _ebcb {for _ ,_dfad :=range _cgde {if _dfad .Type ==ResultTypeNumber &&!_dfad .IsBoolean {_abcg =append (_abcg ,_dfad .ValueNumber );};};};_dacd :=len (_abcg );if len (_abcg )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_ebb :=0.1;if _acda ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ebb =args [1].ValueNumber ;if _ebb <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_edgecb :=[]float64 {};for _acde :=0;_acde < _dacd ;_acde ++{if _acde ==0{_edgecb =append (_edgecb ,0);}else {_edgecb =append (_edgecb ,_edgecb [_acde -1]+365);};};return _bgaf (_abcg ,_edgecb ,_ebb );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_bbcc string };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _cag ,_ebd float64 ;switch args [0].Type {case ResultTypeNumber :_ebd =args [0].ValueNumber ;case ResultTypeString :_bfeg :=DateValue ([]Result {args [0]});if _bfeg .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_ebd =_bfeg .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_cag =args [1].ValueNumber ;if _cag < 62&&_ebd >=62{_cag --;};case ResultTypeString :_dffb :=DateValue ([]Result {args [1]});if _dffb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_cag =_dffb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_ffeg :=float64 (int (_ebd -_cag ));return MakeNumberResult (_ffeg );};func _fcde (_gde float64 )float64 {return float64 (int (_gde +0.5))};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acgb :=args [0].AsNumber ();_gddd :=args [1].AsNumber ();if _acgb .Type !=ResultTypeNumber ||_gddd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gddd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_a .Trunc (_acgb .ValueNumber /_gddd .ValueNumber ));};var _aafbd =map[string ]Function {};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_abf :=args [0].ValueNumber ;_ffea :=args [1].ValueNumber ;_gbc :=args [2].ValueNumber ;_adgd :=_fed (_abf ,_ffea ,_gbc );if _adgd >=0{return MakeNumberResult (_adgd );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;const _ecfe =187;var _gcfa =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func _ccec (_bfdf Result ,_aaecg int )[]Result {_dafc :=[]Result {};switch _bfdf .Type {case ResultTypeList :_cdbe :=_bfdf .ValueList ;_aecd :=len (_cdbe );for _ddcg :=0;_ddcg < _aaecg ;_ddcg ++{if _ddcg < _aecd {_dafc =append (_dafc ,_cdbe [_ddcg ]);}else {_dafc =append (_dafc ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gbdbg :=0;_gbdbg < _aaecg ;_gbdbg ++{_dafc =append (_dafc ,_bfdf );};};return _dafc ;};func _edaeb (_cfcb ,_affe []string )[]string {for _ ,_dgee :=range _affe {_cfcb =append (_cfcb ,_dgee );};return _cfcb ;};

// Reference returns a string reference value to an expression with prefix.
func (_cdae PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_aebe :=_cdae ._cbdgg .Reference (ctx ,ev );_feab :=_cdae ._dgcgg .Reference (ctx ,ev );if _aebe .Type ==ReferenceTypeSheet &&_feab .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_aebe .Value +"\u0021"+_feab .Value };};return ReferenceInvalid ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_ddee chan *node ;_ddcde _fe .Mutex ;_ffaf []chan *node ;_acge []*node ;};func _gdedc (_egdb ,_bgadg ,_cggdc ,_bebf ,_gfdb ,_geeg float64 )float64 {var _cecfg ,_aabf float64 ;_aefbf :=0.0;_aagb :=_a .Ceil (_gfdb );_bcbff :=_egdb -_bgadg ;_badb :=false ;_feec :=0.0;for _cbea :=1.0;_cbea <=_aagb ;_cbea ++{if !_badb {_cecfg =_dccc (_egdb ,_bgadg ,_cggdc ,_cbea ,_geeg );_feec =_bcbff /(_cggdc -_cbea +1);if _feec > _cecfg {_aabf =_feec ;_badb =true ;}else {_aabf =_cecfg ;_bcbff -=_cecfg ;};}else {_aabf =_feec ;};if _cbea ==_aagb {_aabf *=_gfdb +1-_aagb ;};_aefbf +=_aabf ;};return _aefbf ;};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcade :=args [0];if _fcade .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dffgb :=len (_fcade .ValueArray );for _ ,_ccdfd :=range _fcade .ValueArray {if len (_ccdfd )!=_dffgb {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_abad (_fcade .ValueArray ));};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccaf :=args [0].AsNumber ();if _ccaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbcab :=int (_ccaf .ValueNumber );if _bbcab < 0||_bbcab > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_db .Sprintf ("\u0025\u0063",_bbcab ));};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_daff :=args [0].ValueNumber ;if _daff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_abagd ,_dcfe :=_dacf (args [1],args [2],"\u0058\u004e\u0050\u0056");if _dcfe .Type ==ResultTypeError {return _dcfe ;};_bdagb :=_abagd ._edbfe ;_efeab :=_abagd ._feaa ;_fdbd :=0.0;_gacgc :=_efeab [0];for _feac ,_babf :=range _bdagb {_fdbd +=_babf /_a .Pow (1+_daff ,(_efeab [_feac ]-_gacgc )/365);};return MakeNumberResult (_fdbd );};func _cdbb (_gbdbd Reference ,_gdfc Context )bool {return _gdfc .Sheet (_gbdbd .Value )==InvalidReferenceContext ;};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccbc :=ctx .GetEpoch ();_bgdc ,_ebda :=_eafce (args [0].Value (),_ccbc );if _ebda !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_bgdc .Year ()));};var _adeb =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_bdfc :v }};func _fgab (_bea []Result ,_dcad string )(*couponArgs ,Result ){_gbgb :=len (_bea );if _gbgb !=3&&_gbgb !=4{return nil ,MakeErrorResult (_dcad +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cecf ,_aece ,_afca :=_ffcca (_bea [0],_bea [1],_dcad );if _afca .Type ==ResultTypeError {return nil ,_afca ;};if _bea [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcad +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edbe :=_bea [2].ValueNumber ;if !_bccf (_edbe ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_dcad );};_dbgc :=0;if _gbgb ==4&&_bea [3].Type !=ResultTypeEmpty {if _bea [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcad +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbgc =int (_bea [3].ValueNumber );if !_dccd (_dbgc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dcad );};};return &couponArgs {_cecf ,_aece ,int (_edbe ),_dbgc },_cgac ;};func _ffcca (_bgf ,_aegc Result ,_gccd string )(float64 ,float64 ,Result ){_fga ,_eeeg :=_gddb (_bgf ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_gccd );if _eeeg .Type ==ResultTypeError {return 0,0,_eeeg ;};_eccf ,_eeeg :=_gddb (_aegc ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_gccd );if _eeeg .Type ==ResultTypeError {return 0,0,_eeeg ;};if _fga >=_eccf {return 0,0,MakeErrorResultType (ErrorTypeNum ,_gccd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _fga ,_eccf ,_cgac ;};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eaed :=args [0].AsNumber ();if _eaed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_gdfb :=float64 (1);if _eaed .ValueNumber < 0{_gdfb =-1;};if len (args )> 1{_ddeff :=args [1].AsNumber ();if _ddeff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdfb =_ddeff .ValueNumber ;};_egdeg :=float64 (1);if len (args )> 2{_gcfb :=args [2].AsNumber ();if _gcfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_egdeg =_gcfb .ValueNumber ;};if len (args )==1{return MakeNumberResult (_a .Ceil (_eaed .ValueNumber ));};_fadb :=_eaed .ValueNumber ;_fadb ,_gbdcf :=_a .Modf (_fadb /_gdfb );if _gbdcf !=0{if _eaed .ValueNumber > 0{_fadb ++;}else if _egdeg < 0{_fadb --;};};return MakeNumberResult (_fadb *_gdfb );};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_gbfad :=len (args );if _gbfad < 3||_gbfad > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aaabb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bedc :=args [1].ValueNumber ;if _bedc !=float64 (int (_bedc )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcbge :=args [2].ValueNumber ;_eafg :=0.0;if _gbfad >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eafg =args [3].ValueNumber ;};_daafc :=0.0;if _gbfad ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_daafc =args [4].ValueNumber ;if _daafc !=0{_daafc =1;};};if _aaabb ==0{return MakeNumberResult (-_bcbge *_bedc -_eafg );}else {return MakeNumberResult ((((1-_a .Pow (1+_aaabb ,_bedc ))/_aaabb )*_bcbge *(1+_aaabb *_daafc )-_eafg )/_a .Pow (1+_aaabb ,_bedc ));};};var _dfa int64 =_accb (1900,_ge .January ,1);

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_faa ,_gacc :=_fgab (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _gacc .Type ==ResultTypeError {return _gacc ;};_fgag :=_faa ._agf ;_edab :=_faa ._bae ;_gggbe ,_gacc :=_fadda (_faa ._aac ,_faa ._cfcf ,_fgag ,_edab );if _gacc .Type ==ResultTypeError {return _gacc ;};return MakeNumberResult (_gggbe );};var _fcadee =map[string ]FunctionComplex {};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};const _geg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func (_afacb *Lexer )Next ()*node {_afacb ._ddcde .Lock ();defer _afacb ._ddcde .Unlock ();if len (_afacb ._acge )> 0{_abedd :=_afacb ._acge [0];_afacb ._acge =_afacb ._acge [1:];return _abedd ;};return _afacb .nextRaw ();};func _eadcf (_cdbfe Context ,_ecdcf ,_dedb int )(string ,string ){_gecgd :="\u0041"+_fc .Itoa (_ecdcf );_edged :=_cdbfe .LastColumn (_ecdcf ,_dedb );_efcf :=_edged +_fc .Itoa (_dedb );return _gecgd ,_efcf ;};var _egcfc =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// GetLocked returns FALSE for the invalid reference context.
func (_fggb *ivr )GetLocked (cellRef string )bool {return false };type yyParserImpl struct{_dgcgc yySymType ;_ddgea [_ggfd ]yySymType ;_cdcgc int ;};func (_ggc *evCache )SetCache (key string ,value Result ){_ggc ._abg .Lock ();_ggc ._fgg [key ]=value ;_ggc ._abg .Unlock ();};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_aeca PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gebag :=_aeca ._gfed .Reference (ctx ,ev );switch _gebag .Type {case ReferenceTypeSheet :if _cdbb (_gebag ,ctx ){return MakeErrorResultType (ErrorTypeName ,_db .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gebag .Value ));};_cacdd :=_aeca .verticalRangeReference (_gebag .Value );if _gdbcd ,_abbag :=ev .GetFromCache (_cacdd );_abbag {return _gdbcd ;};_ggaf :=ctx .Sheet (_gebag .Value );_fbaa ,_dfee :=_bdabe (_ggaf ,_aeca ._ddbg ,_aeca ._ccef );_egaf :=_geceg (_ggaf ,ev ,_fbaa ,_dfee );ev .SetCache (_cacdd ,_egaf );return _egaf ;default:return MakeErrorResult (_db .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gebag .Type ));};};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };type cmpResult int8 ;var _faaf =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbcgf :=args [0];if _cbcgf .Type ==ResultTypeError ||_cbcgf .Type ==ResultTypeString {return _cbcgf ;};return _cgac ;};var _abdd []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_aedgf NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_cedf :=ctx .NamedRange (_aedgf ._bdfc );_dedce :=_cedf .Value ;if _eddd ,_ceedd :=ev .GetFromCache (_dedce );_ceedd {return _eddd ;};_cdfb :=_dg .Split (_dedce ,"\u0021");if len (_cdfb )!=2{return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_dedce ));};_aaade :=ctx .Sheet (_cdfb [0]);_ebeafa :=_dg .Split (_cdfb [1],"\u003a");switch len (_ebeafa ){case 1:_defg :=ev .Eval (_aaade ,_ebeafa [0]);ev .SetCache (_dedce ,_defg );return _defg ;case 2:_bbeee :=_geceg (_aaade ,ev ,_ebeafa [0],_ebeafa [1]);ev .SetCache (_dedce ,_bbeee );return _bbeee ;};return MakeErrorResult (_db .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_cedf .Type ));};func (_bffg *Lexer )nextRaw ()*node {for len (_bffg ._ffaf )!=0{_eccea :=<-_bffg ._ffaf [len (_bffg ._ffaf )-1];if _eccea !=nil {return _eccea ;};_bffg ._ffaf =_bffg ._ffaf [0:len (_bffg ._ffaf )-1];};return <-_bffg ._ddee ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfdc :=true ;for _ ,_gcde :=range args {_gcde =_gcde .AsNumber ();switch _gcde .Type {case ResultTypeList ,ResultTypeArray :_afcfd :=And (_gcde .ListValues ());if _afcfd .Type ==ResultTypeError {return _afcfd ;};if _afcfd .ValueNumber ==0{_acfdc =false ;};case ResultTypeNumber :if _gcde .ValueNumber ==0{_acfdc =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _gcde ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_acfdc );};func (_eaedb *Lexer )lex (_facaa _g .Reader ){_bffc ,_fcce ,_gfbb :=0,0,0;_baffg :=-1;_ffefe ,_beca ,_bbfa :=0,0,0;_ =_bbfa ;_ggde :=1;_ =_ggde ;_fegcd :=make ([]byte ,4096);_baga :=false ;for !_baga {_cgcecb :=0;if _ffefe > 0{_cgcecb =_fcce -_ffefe ;};_fcce =0;_ebfd ,_bbeb :=_facaa .Read (_fegcd [_cgcecb :]);if _ebfd ==0||_bbeb !=nil {_baga =true ;};_gfbb =_ebfd +_cgcecb ;if _gfbb < len (_fegcd ){_baffg =_gfbb ;};{_bffc =_acdbb ;_ffefe =0;_beca =0;_bbfa =0;};{var _dfdgb int ;var _eedf uint ;if _fcce ==_gfbb {goto _fcff ;};if _bffc ==0{goto _gbfbb ;};_dfdfg :_dfdgb =int (_abdd [_bffc ]);_eedf =uint (_gfbf [_dfdgb ]);_dfdgb ++;for ;_eedf > 0;_eedf --{_dfdgb ++;switch _gfbf [_dfdgb -1]{case 2:_ffefe =_fcce ;};};switch _bffc {case 30:switch _fegcd [_fcce ]{case 34:goto _ebaef ;case 35:goto _febag ;case 36:goto _cdeaeb ;case 38:goto _fefca ;case 39:goto _cddf ;case 40:goto _ffcbc ;case 41:goto _bbgf ;case 42:goto _babca ;case 43:goto _beefd ;case 44:goto _caag ;case 45:goto _gbabb ;case 47:goto _daeb ;case 58:goto _deffc ;case 59:goto _cbaffe ;case 60:goto _ffeagf ;case 61:goto _afceb ;case 62:goto _gegg ;case 63:goto _egac ;case 70:goto _bede ;case 84:goto _cecad ;case 92:goto _cggge ;case 94:goto _adgb ;case 95:goto _gaee ;case 123:goto _daga ;case 125:goto _bcbdf ;};switch {case _fegcd [_fcce ]< 65:switch {case _fegcd [_fcce ]> 37:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _ebgfc ;};case _fegcd [_fcce ]>=33:goto _egac ;};case _fegcd [_fcce ]> 90:switch {case _fegcd [_fcce ]> 93:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _geedee ;};case _fegcd [_fcce ]>=91:goto _egac ;};default:goto _bgeaa ;};goto _gbdeb ;case 1:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _dgdcb ;case 123:goto _dgdcb ;case 125:goto _dgdcb ;};switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _dgdcb ;};case _fegcd [_fcce ]> 45:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _dgdcb ;};case _fegcd [_fcce ]>=58:goto _dgdcb ;};default:goto _dgdcb ;};goto _gbdeb ;case 0:goto _gbfbb ;case 2:if _fegcd [_fcce ]==34{goto _gcgef ;};goto _ebaef ;case 31:if _fegcd [_fcce ]==34{goto _ebaef ;};goto _gfeag ;case 3:switch _fegcd [_fcce ]{case 78:goto _cacgd ;case 82:goto _bcfbf ;};goto _egac ;case 4:switch _fegcd [_fcce ]{case 47:goto _dcfd ;case 85:goto _afdeg ;};goto _egac ;case 5:if _fegcd [_fcce ]==65{goto _fgbbg ;};goto _egac ;case 6:switch _fegcd [_fcce ]{case 76:goto _aafb ;case 77:goto _bgaa ;};goto _egac ;case 7:if _fegcd [_fcce ]==76{goto _bgaa ;};goto _egac ;case 8:if _fegcd [_fcce ]==33{goto _fgbbg ;};goto _egac ;case 9:if _fegcd [_fcce ]==69{goto _cbba ;};goto _egac ;case 10:if _fegcd [_fcce ]==70{goto _abfe ;};goto _egac ;case 11:if _fegcd [_fcce ]==33{goto _bebeb ;};goto _egac ;case 12:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _egac ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=45{goto _egac ;};case _fegcd [_fcce ]>=34:goto _egac ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]< 65:if 58<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=63{goto _egac ;};case _fegcd [_fcce ]> 90:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _egac ;};default:goto _fedc ;};default:goto _efgbg ;};goto _gbdeb ;case 13:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _egac ;case 58:goto _adbdf ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=45{goto _egac ;};case _fegcd [_fcce ]>=34:goto _egac ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _egac ;};case _fegcd [_fcce ]>=59:goto _egac ;};default:goto _efgbg ;};goto _gbdeb ;case 14:if _fegcd [_fcce ]==36{goto _dddae ;};if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _fdac ;};goto _dgdcb ;case 15:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _fdac ;};goto _dgdcb ;case 32:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _fdac ;};goto _effed ;case 16:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 47:goto _egac ;case 58:goto _fbebe ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 45:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _bdad ;};case _fegcd [_fcce ]>=34:goto _egac ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]> 90:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _egac ;};case _fegcd [_fcce ]>=65:goto _fedc ;};default:goto _egac ;};goto _gbdeb ;case 17:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _dgdcb ;case 123:goto _dgdcb ;case 125:goto _dgdcb ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=45{goto _dgdcb ;};case _fegcd [_fcce ]>=34:goto _dgdcb ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _dgdcb ;};case _fegcd [_fcce ]>=58:goto _dgdcb ;};default:goto _bdad ;};goto _gbdeb ;case 33:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _ddgff ;case 123:goto _ddgff ;case 125:goto _ddgff ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=45{goto _ddgff ;};case _fegcd [_fcce ]>=34:goto _ddgff ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _ddgff ;};case _fegcd [_fcce ]>=58:goto _ddgff ;};default:goto _bdad ;};goto _gbdeb ;case 18:if _fegcd [_fcce ]==36{goto _fccac ;};if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _dccef ;};goto _dgdcb ;case 19:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _dccef ;};goto _dgdcb ;case 34:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _dccef ;};goto _gfbc ;case 20:switch _fegcd [_fcce ]{case 39:goto _egac ;case 42:goto _egac ;case 47:goto _egac ;case 58:goto _egac ;case 63:goto _egac ;};if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=93{goto _egac ;};goto _ebff ;case 21:switch _fegcd [_fcce ]{case 39:goto _fbgce ;case 42:goto _egac ;case 47:goto _egac ;case 58:goto _egac ;case 63:goto _egac ;};if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=93{goto _egac ;};goto _ebff ;case 22:if _fegcd [_fcce ]==33{goto _fdddd ;};goto _egac ;case 35:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _feebd ;case 58:goto _adbdf ;case 101:goto _dbea ;case 123:goto _bgbge ;case 125:goto _bgbge ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=47{goto _bgbge ;};case _fegcd [_fcce ]>=34:goto _bgbge ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _bgbge ;};case _fegcd [_fcce ]>=59:goto _bgbge ;};default:goto _ebgfc ;};goto _gbdeb ;case 36:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _bgbge ;case 101:goto _dbea ;case 123:goto _bgbge ;case 125:goto _bgbge ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=45{goto _bgbge ;};case _fegcd [_fcce ]>=34:goto _bgbge ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _bgbge ;};case _fegcd [_fcce ]>=58:goto _bgbge ;};default:goto _feebd ;};goto _gbdeb ;case 23:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _bage ;case 123:goto _bage ;case 125:goto _bage ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=45{goto _bage ;};case _fegcd [_fcce ]>=34:goto _bage ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _bage ;};case _fegcd [_fcce ]>=58:goto _bage ;};default:goto _agfe ;};goto _gbdeb ;case 37:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 47:goto _bgbge ;case 123:goto _bgbge ;case 125:goto _bgbge ;};switch {case _fegcd [_fcce ]< 48:switch {case _fegcd [_fcce ]> 35:if 37<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=45{goto _bgbge ;};case _fegcd [_fcce ]>=34:goto _bgbge ;};case _fegcd [_fcce ]> 57:switch {case _fegcd [_fcce ]> 63:if 91<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=94{goto _bgbge ;};case _fegcd [_fcce ]>=58:goto _bgbge ;};default:goto _agfe ;};goto _gbdeb ;case 38:switch _fegcd [_fcce ]{case 61:goto _gfad ;case 62:goto _gfae ;};goto _eebb ;case 39:if _fegcd [_fcce ]==61{goto _ebba ;};goto _ebbbb ;case 24:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _egac ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _egac ;};default:goto _egac ;};goto _gbdeb ;case 40:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 40:goto _eadd ;case 46:goto _gafab ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gafab ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gafab ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 41:switch _fegcd [_fcce ]{case 46:goto _gdbc ;case 92:goto _gdbc ;case 95:goto _gdbc ;};switch {case _fegcd [_fcce ]< 65:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gdbc ;};case _fegcd [_fcce ]> 90:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gdbc ;};default:goto _gdbc ;};goto _gced ;case 42:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 43:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 40:goto _eadd ;case 46:goto _gafab ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _ddgff ;case 125:goto _ddgff ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _ddgff ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};default:goto _ddgff ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gafab ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _ddgff ;};default:goto _ddgff ;};goto _gbdeb ;case 44:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _dgdcb ;case 125:goto _dgdcb ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _dgdcb ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _dgdcb ;};default:goto _dgdcb ;};goto _gbdeb ;case 25:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 65:goto _gbfbd ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _egac ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 66<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _egac ;};default:goto _egac ;};goto _gbdeb ;case 45:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 76:goto _eaea ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 46:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 83:goto _ecfc ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 47:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 69:goto _cacbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 26:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 79:goto _eefc ;case 82:goto _cbbf ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _egac ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _egac ;};default:goto _egac ;};goto _gbdeb ;case 48:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 68:goto _gaadg ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 49:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 79:goto _bedca ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 50:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 36:goto _caae ;case 40:goto _eadd ;case 46:goto _gafab ;case 58:goto _fbebe ;case 85:goto _ecfc ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 59:switch {case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _dbaddd ;};case _fegcd [_fcce ]>=34:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gfdbb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 27:switch _fegcd [_fcce ]{case 46:goto _gdbc ;case 92:goto _gdbc ;case 95:goto _gdbc ;};switch {case _fegcd [_fcce ]< 65:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gdbc ;};case _fegcd [_fcce ]> 90:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gdbc ;};default:goto _gdbc ;};goto _egac ;case 28:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 120:goto _gaedb ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _egac ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _egac ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _egac ;};default:goto _egac ;};goto _gbdeb ;case 51:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 108:goto _gdfbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 52:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 102:goto _dgfa ;case 110:goto _gggd ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 53:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 110:goto _dgede ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 54:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _fgaa ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 55:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _afdb ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _afdb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 56:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 40:goto _gbdea ;case 46:goto _afdb ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _afdb ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _afdb ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 57:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 109:goto _dgdfa ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 58:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _aceb ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _gced ;case 125:goto _gced ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _gced ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _gced ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _gced ;};default:goto _gced ;};goto _gbdeb ;case 59:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gadcc ;case 123:goto _dgdcb ;case 125:goto _dgdcb ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _dgdcb ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _dgdcb ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gadcc ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _dgdcb ;};default:goto _dgdcb ;};goto _gbdeb ;case 29:switch _fegcd [_fcce ]{case 33:goto _ecdce ;case 46:goto _gbcbe ;case 92:goto _gdbc ;case 95:goto _gbcbe ;case 123:goto _egac ;case 125:goto _egac ;};switch {case _fegcd [_fcce ]< 58:switch {case _fegcd [_fcce ]< 37:if 34<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=35{goto _egac ;};case _fegcd [_fcce ]> 47:if 48<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=57{goto _gbcbe ;};default:goto _egac ;};case _fegcd [_fcce ]> 63:switch {case _fegcd [_fcce ]< 91:if 65<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=90{goto _gbcbe ;};case _fegcd [_fcce ]> 94:if 97<=_fegcd [_fcce ]&&_fegcd [_fcce ]<=122{goto _gbcbe ;};default:goto _egac ;};default:goto _egac ;};goto _gbdeb ;};_egac :_bffc =0;goto _ggbac ;_gbdeb :_bffc =1;goto _ggbac ;_ebaef :_bffc =2;goto _ggbac ;_febag :_bffc =3;goto _ggbac ;_cacgd :_bffc =4;goto _ggbac ;_dcfd :_bffc =5;goto _ggbac ;_afdeg :_bffc =6;goto _ggbac ;_aafb :_bffc =7;goto _ggbac ;_bgaa :_bffc =8;goto _ggbac ;_bcfbf :_bffc =9;goto _ggbac ;_cbba :_bffc =10;goto _ggbac ;_abfe :_bffc =11;goto _ggbac ;_cdeaeb :_bffc =12;goto _ggbac ;_efgbg :_bffc =13;goto _ggbac ;_adbdf :_bffc =14;goto _ggbac ;_dddae :_bffc =15;goto _ggbac ;_fedc :_bffc =16;goto _ggbac ;_caae :_bffc =17;goto _ggbac ;_fbebe :_bffc =18;goto _ggbac ;_fccac :_bffc =19;goto _ggbac ;_cddf :_bffc =20;goto _ggbac ;_ebff :_bffc =21;goto _ggbac ;_fbgce :_bffc =22;goto _ggbac ;_dbea :_bffc =23;goto _ggbac ;_bgeaa :_bffc =24;goto _ggbac ;_bede :_bffc =25;goto _ggbac ;_cecad :_bffc =26;goto _ggbac ;_cggge :_bffc =27;goto _ggbac ;_gaee :_bffc =28;goto _ggbac ;_geedee :_bffc =29;goto _ggbac ;_dgdcb :_bffc =30;goto _deabg ;_ecdce :_bffc =30;goto _ebbg ;_fgbbg :_bffc =30;goto _cbdba ;_bebeb :_bffc =30;goto _ffcga ;_fdddd :_bffc =30;goto _gbee ;_bage :_bffc =30;goto _cceag ;_eadd :_bffc =30;goto _ggcb ;_fefca :_bffc =30;goto _gbabc ;_ffcbc :_bffc =30;goto _cdbfc ;_bbgf :_bffc =30;goto _ebef ;_babca :_bffc =30;goto _facf ;_beefd :_bffc =30;goto _abbeb ;_caag :_bffc =30;goto _aadg ;_gbabb :_bffc =30;goto _degfg ;_daeb :_bffc =30;goto _egfc ;_deffc :_bffc =30;goto _ffbe ;_cbaffe :_bffc =30;goto _cbced ;_afceb :_bffc =30;goto _eggcf ;_adgb :_bffc =30;goto _fdfb ;_daga :_bffc =30;goto _cbcc ;_bcbdf :_bffc =30;goto _gggdc ;_gfeag :_bffc =30;goto _debc ;_effed :_bffc =30;goto _dcfg ;_ddgff :_bffc =30;goto _dadgcg ;_gfbc :_bffc =30;goto _abab ;_bgbge :_bffc =30;goto _cfbe ;_eebb :_bffc =30;goto _ccgec ;_gfad :_bffc =30;goto _aebb ;_gfae :_bffc =30;goto _gfaeg ;_ebbbb :_bffc =30;goto _defbe ;_ebba :_bffc =30;goto _eadg ;_gced :_bffc =30;goto _afcae ;_gbdea :_bffc =30;goto _gbag ;_gcgef :_bffc =31;goto _dgcc ;_fdac :_bffc =32;goto _ggbac ;_bdad :_bffc =33;goto _ccddb ;_dccef :_bffc =34;goto _ggbac ;_ebgfc :_bffc =35;goto _faea ;_feebd :_bffc =36;goto _faea ;_agfe :_bffc =37;goto _faea ;_ffeagf :_bffc =38;goto _ggbac ;_gegg :_bffc =39;goto _ggbac ;_gafab :_bffc =40;goto _agbea ;_gdbc :_bffc =41;goto _ggbac ;_gbcbe :_bffc =42;goto _agbea ;_dbaddd :_bffc =43;goto _ccddb ;_gfdbb :_bffc =44;goto _agbea ;_cacbe :_bffc =44;goto _ddgee ;_bedca :_bffc =44;goto _egffd ;_gbfbd :_bffc =45;goto _agbea ;_eaea :_bffc =46;goto _agbea ;_ecfc :_bffc =47;goto _agbea ;_eefc :_bffc =48;goto _agbea ;_gaadg :_bffc =49;goto _agbea ;_cbbf :_bffc =50;goto _agbea ;_gaedb :_bffc =51;goto _agbea ;_gdfbe :_bffc =52;goto _agbea ;_dgfa :_bffc =53;goto _agbea ;_dgede :_bffc =54;goto _agbea ;_fgaa :_bffc =55;goto _agbea ;_afdb :_bffc =56;goto _agbea ;_gggd :_bffc =57;goto _agbea ;_dgdfa :_bffc =58;goto _agbea ;_aceb :_bffc =59;goto _agbea ;_gadcc :_bffc =59;goto _aeaga ;_cbdba :_dfdgb =3;goto _gbbb ;_ffcga :_dfdgb =5;goto _gbbb ;_ebbg :_dfdgb =7;goto _gbbb ;_gbee :_dfdgb =9;goto _gbbb ;_ggcb :_dfdgb =11;goto _gbbb ;_gbag :_dfdgb =13;goto _gbbb ;_gbabc :_dfdgb =15;goto _gbbb ;_cbcc :_dfdgb =17;goto _gbbb ;_gggdc :_dfdgb =19;goto _gbbb ;_cdbfc :_dfdgb =21;goto _gbbb ;_ebef :_dfdgb =23;goto _gbbb ;_abbeb :_dfdgb =25;goto _gbbb ;_degfg :_dfdgb =27;goto _gbbb ;_facf :_dfdgb =29;goto _gbbb ;_egfc :_dfdgb =31;goto _gbbb ;_fdfb :_dfdgb =33;goto _gbbb ;_eggcf :_dfdgb =35;goto _gbbb ;_aebb :_dfdgb =37;goto _gbbb ;_eadg :_dfdgb =39;goto _gbbb ;_gfaeg :_dfdgb =41;goto _gbbb ;_ffbe :_dfdgb =43;goto _gbbb ;_cbced :_dfdgb =45;goto _gbbb ;_aadg :_dfdgb =47;goto _gbbb ;_cfbe :_dfdgb =49;goto _gbbb ;_dadgcg :_dfdgb =51;goto _gbbb ;_dcfg :_dfdgb =53;goto _gbbb ;_abab :_dfdgb =55;goto _gbbb ;_afcae :_dfdgb =57;goto _gbbb ;_debc :_dfdgb =59;goto _gbbb ;_ccgec :_dfdgb =61;goto _gbbb ;_defbe :_dfdgb =63;goto _gbbb ;_cceag :_dfdgb =65;goto _gbbb ;_deabg :_dfdgb =67;goto _gbbb ;_ddgee :_dfdgb =72;goto _gbbb ;_faea :_dfdgb =75;goto _gbbb ;_ccddb :_dfdgb =78;goto _gbbb ;_egffd :_dfdgb =81;goto _gbbb ;_aeaga :_dfdgb =84;goto _gbbb ;_agbea :_dfdgb =87;goto _gbbb ;_dgcc :_dfdgb =90;goto _gbbb ;_gbbb :_eedf =uint (_gfbf [_dfdgb ]);_dfdgb ++;for ;_eedf > 0;_eedf --{_dfdgb ++;switch _gfbf [_dfdgb -1]{case 3:_beca =_fcce +1;case 4:_bbfa =1;case 5:_bbfa =2;case 6:_bbfa =3;case 7:_bbfa =4;case 8:_bbfa =11;case 9:_bbfa =14;case 10:_bbfa =15;case 11:_beca =_fcce +1;{_eaedb .emit (_bgeg ,_fegcd [_ffefe :_beca ]);};case 12:_beca =_fcce +1;{_eaedb .emit (_ggage ,_fegcd [_ffefe :_beca ]);};case 13:_beca =_fcce +1;{_eaedb .emit (_eccfa ,_fegcd [_ffefe :_beca -1]);};case 14:_beca =_fcce +1;{_eaedb .emit (_eccfa ,_fegcd [_ffefe +1:_beca -2]);};case 15:_beca =_fcce +1;{_eaedb .emit (_faecc ,_fegcd [_ffefe :_beca -1]);};case 16:_beca =_fcce +1;{_eaedb .emit (_faecc ,_fegcd [_ffefe :_beca -1]);};case 17:_beca =_fcce +1;{_eaedb .emit (_adae ,_fegcd [_ffefe :_beca ]);};case 18:_beca =_fcce +1;{_eaedb .emit (_gfeac ,_fegcd [_ffefe :_beca ]);};case 19:_beca =_fcce +1;{_eaedb .emit (_ecga ,_fegcd [_ffefe :_beca ]);};case 20:_beca =_fcce +1;{_eaedb .emit (_ffdgb ,_fegcd [_ffefe :_beca ]);};case 21:_beca =_fcce +1;{_eaedb .emit (_bggc ,_fegcd [_ffefe :_beca ]);};case 22:_beca =_fcce +1;{_eaedb .emit (_dedcd ,_fegcd [_ffefe :_beca ]);};case 23:_beca =_fcce +1;{_eaedb .emit (_cbfbe ,_fegcd [_ffefe :_beca ]);};case 24:_beca =_fcce +1;{_eaedb .emit (_gfeab ,_fegcd [_ffefe :_beca ]);};case 25:_beca =_fcce +1;{_eaedb .emit (_gfaae ,_fegcd [_ffefe :_beca ]);};case 26:_beca =_fcce +1;{_eaedb .emit (_gecbg ,_fegcd [_ffefe :_beca ]);};case 27:_beca =_fcce +1;{_eaedb .emit (_gdbfe ,_fegcd [_ffefe :_beca ]);};case 28:_beca =_fcce +1;{_eaedb .emit (_dccea ,_fegcd [_ffefe :_beca ]);};case 29:_beca =_fcce +1;{_eaedb .emit (_gdfe ,_fegcd [_ffefe :_beca ]);};case 30:_beca =_fcce +1;{_eaedb .emit (_dcbbc ,_fegcd [_ffefe :_beca ]);};case 31:_beca =_fcce +1;{_eaedb .emit (_adgad ,_fegcd [_ffefe :_beca ]);};case 32:_beca =_fcce +1;{_eaedb .emit (_abba ,_fegcd [_ffefe :_beca ]);};case 33:_beca =_fcce +1;{_eaedb .emit (_ebgf ,_fegcd [_ffefe :_beca ]);};case 34:_beca =_fcce ;_fcce --;{_eaedb .emit (_cbgdd ,_fegcd [_ffefe :_beca ]);};case 35:_beca =_fcce ;_fcce --;{_eaedb .emit (_aedgb ,_fegcd [_ffefe :_beca ]);};case 36:_beca =_fcce ;_fcce --;{_eaedb .emit (_aceeb ,_fegcd [_ffefe :_beca ]);};case 37:_beca =_fcce ;_fcce --;{_eaedb .emit (_aaccc ,_fegcd [_ffefe :_beca ]);};case 38:_beca =_fcce ;_fcce --;{_eaedb .emit (_dbddb ,_fegcd [_ffefe :_beca ]);};case 39:_beca =_fcce ;_fcce --;{_eaedb .emit (_gcab ,_fegcd [_ffefe +1:_beca -1]);};case 40:_beca =_fcce ;_fcce --;{_eaedb .emit (_cagdd ,_fegcd [_ffefe :_beca ]);};case 41:_beca =_fcce ;_fcce --;{_eaedb .emit (_bbgd ,_fegcd [_ffefe :_beca ]);};case 42:_fcce =(_beca )-1;{_eaedb .emit (_cbgdd ,_fegcd [_ffefe :_beca ]);};case 43:switch _bbfa {case 0:{_bffc =0;goto _ggbac ;};case 1:{_fcce =(_beca )-1;_eaedb .emit (_fcbgb ,_fegcd [_ffefe :_beca ]);};case 2:{_fcce =(_beca )-1;_eaedb .emit (_cbgdd ,_fegcd [_ffefe :_beca ]);};case 3:{_fcce =(_beca )-1;_eaedb .emit (_aedgb ,_fegcd [_ffefe :_beca ]);};case 4:{_fcce =(_beca )-1;_eaedb .emit (_afac ,_fegcd [_ffefe :_beca ]);};case 11:{_fcce =(_beca )-1;_eaedb .emit (_dfca ,_fegcd [_ffefe :_beca ]);};case 14:{_fcce =(_beca )-1;_eaedb .emit (_dbddb ,_fegcd [_ffefe :_beca ]);};case 15:{_fcce =(_beca )-1;_eaedb .emit (_gcab ,_fegcd [_ffefe +1:_beca -1]);};};};};goto _ggbac ;_ggbac :_dfdgb =int (_aefgb [_bffc ]);_eedf =uint (_gfbf [_dfdgb ]);_dfdgb ++;for ;_eedf > 0;_eedf --{_dfdgb ++;switch _gfbf [_dfdgb -1]{case 0:_ffefe =0;case 1:_bbfa =0;};};if _bffc ==0{goto _gbfbb ;};if _fcce ++;_fcce !=_gfbb {goto _dfdfg ;};_fcff :{};if _fcce ==_baffg {switch _bffc {case 1:goto _dgdcb ;case 2:goto _dgdcb ;case 31:goto _gfeag ;case 14:goto _dgdcb ;case 15:goto _dgdcb ;case 32:goto _effed ;case 17:goto _dgdcb ;case 33:goto _ddgff ;case 18:goto _dgdcb ;case 19:goto _dgdcb ;case 34:goto _gfbc ;case 35:goto _bgbge ;case 36:goto _bgbge ;case 23:goto _bage ;case 37:goto _bgbge ;case 38:goto _eebb ;case 39:goto _ebbbb ;case 40:goto _gced ;case 41:goto _gced ;case 42:goto _gced ;case 43:goto _ddgff ;case 44:goto _dgdcb ;case 45:goto _gced ;case 46:goto _gced ;case 47:goto _gced ;case 48:goto _gced ;case 49:goto _gced ;case 50:goto _gced ;case 51:goto _gced ;case 52:goto _gced ;case 53:goto _gced ;case 54:goto _gced ;case 55:goto _gced ;case 56:goto _gced ;case 57:goto _gced ;case 58:goto _gced ;case 59:goto _dgdcb ;};};_gbfbb :{};};if _ffefe > 0{copy (_fegcd [0:],_fegcd [_ffefe :]);};};_ =_baffg ;if _bffc ==_fcdf {_eaedb .emit (_befd ,nil );};close (_eaedb ._ddee );};type yySymType struct{_bdcee int ;_efbad *node ;_gbaf Expression ;_bbaa []Expression ;_fabg [][]Expression ;};func _gace (_gbba _ge .Time )_ge .Time {_gbba =_gbba .UTC ();return _ge .Date (_gbba .Year (),_gbba .Month (),_gbba .Day (),_gbba .Hour (),_gbba .Minute (),_gbba .Second (),_gbba .Nanosecond (),_ge .Local );};const _gdde =57344;

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_ddff (args ,_ffebe ))};

// GetFilename returns an empty string for the invalid reference context.
func (_eaafe *ivr )GetFilename ()string {return ""};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_eeag ,_caab Expression };

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eabe :=int (args [0].ValueNumber );return MakeBoolResult (_eabe !=_eabe /2*2);};var _cdgda =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_cefg ,_edffg :=_dgec (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _edffg .Type ==ResultTypeError {return _edffg ;};_bfca :=_cefg ._bfb ;_dagf :=_cefg ._dac ;_ecdd :=_cefg ._fbe ;_dgdg :=_cefg ._edd ;_cgaff :=_cefg ._begb ;_acfd :=_cefg ._abb ;_aaca :=_dgc (_bfca ,_dagf ,_ecdd ,0,_acfd );_gdae :=0.0;if _dgdg ==1{if _acfd ==0{_gdae =-_ecdd ;_dgdg ++;};};for _feca :=_dgdg ;_feca <=_cgaff ;_feca ++{if _acfd ==1{_gdae +=_dcaa (_bfca ,_feca -2,_aaca ,_ecdd ,1)-_aaca ;}else {_gdae +=_dcaa (_bfca ,_feca -1,_aaca ,_ecdd ,0);};};_gdae *=_bfca ;return MakeNumberResult (_gdae );};

// Error is called in the case of parsing error and saves an error to a plex.
func (_aaecbd *plex )Error (s string ){_fcb .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_aaecbd ._dgeg =s ;};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_fdb EmptyExpr )Update (q *_cbe .UpdateQuery )Expression {return _fdb };func _fdbg (_aeg string )(int ,int ,int ,bool ,Result ){_acc :="";_cgcg :=[]string {};for _gga ,_dcg :=range _cga {_cgcg =_dcg .FindStringSubmatch (_aeg );if len (_cgcg )> 1{_acc =_gga ;break ;};};if _acc ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_aedf :=false ;var _afc ,_acd ,_eeed int ;var _dfff error ;switch _acc {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_acd ,_dfff =_fc .Atoi (_cgcg [1]);if _dfff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_eeed ,_dfff =_fc .Atoi (_cgcg [3]);if _dfff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_afc ,_dfff =_fc .Atoi (_cgcg [5]);if _dfff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};if _afc < 0||_afc > 9999||(_afc > 99&&_afc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_afc =_cef (_afc );_aedf =_cgcg [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_acd =_edgc [_cgcg [1]];_eeed ,_dfff =_fc .Atoi (_cgcg [14]);if _dfff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_afc ,_dfff =_fc .Atoi (_cgcg [16]);if _dfff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};if _afc < 0||_afc > 9999||(_afc > 99&&_afc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_afc =_cef (_afc );_aedf =_cgcg [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_cdadb ,_ccc :=_fc .Atoi (_cgcg [1]);if _ccc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_dagc ,_ccc :=_fc .Atoi (_cgcg [3]);if _ccc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_ade ,_ccc :=_fc .Atoi (_cgcg [5]);if _ccc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};if _cdadb >=1900&&_cdadb < 10000{_afc =_cdadb ;_acd =_dagc ;_eeed =_ade ;}else if _cdadb > 0&&_cdadb < 13{_acd =_cdadb ;_eeed =_dagc ;_afc =_ade ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_aedf =_cgcg [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_afc ,_dfff =_fc .Atoi (_cgcg [16]);if _dfff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_acd =_edgc [_cgcg [3]];_eeed ,_dfff =_fc .Atoi (_cgcg [1]);if _dfff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};_aedf =_cgcg [19]=="";};if !_ddd (_afc ,_acd ,_eeed ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bgdd );};return _afc ,_acd ,_eeed ,_aedf ,_cgac ;};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _fbgc (args ,false )};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_addef :=args [0].AsString ();if _addef .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_dg .ToUpper (_addef .ValueString ));};func _febbg (_dbedd string )string {_dbedd =_dg .Replace (_dbedd ,"\u000a","\u005c\u006e",-1);_dbedd =_dg .Replace (_dbedd ,"\u000d","\u005c\u0072",-1);_dbedd =_dg .Replace (_dbedd ,"\u0009","\u005c\u0074",-1);return _dbedd ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bebe :=len (args );if _bebe < 3||_bebe > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gecf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcbd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ebdaf :=args [2].ValueNumber ;_cfdf :=0.0;if _bebe >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfdf =args [3].ValueNumber ;};_bcae :=0.0;if _bebe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcae =args [4].ValueNumber ;if _bcae !=0{_bcae =1;};};_baab :=_dcbd *(1+_gecf *_bcae )-_cfdf *_gecf ;_eca :=(_ebdaf *_gecf +_dcbd *(1+_gecf *_bcae ));return MakeNumberResult (_a .Log (_baab /_eca )/_a .Log (1+_gecf ));};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_abac :=args [0].AsNumber ();if _abac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gafag :=_a .Signbit (_abac .ValueNumber );_cdfd ,_bgedc :=_a .Modf ((_abac .ValueNumber -1)/2);_eagf :=_cdfd *2+1;if _bgedc !=0{if !_gafag {_eagf +=2;}else {_eagf -=2;};};return MakeNumberResult (_eagf );};func _accb (_acb int ,_adfc _ge .Month ,_abgc int )int64 {if _acb ==1900&&int (_adfc )<=2{_abgc --;};_gdc :=_ge .Date (_acb ,_adfc ,_abgc ,0,0,0,0,_ge .UTC );return _gdc .Unix ();};const _ecga =57361;

// Reference returns a string reference value to a named range.
func (_cadd NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_cadd ._bdfc };};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgfc :=args [0].AsNumber ();if _dgfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_a .Pi /180.0*_dgfc .ValueNumber );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_ceeg .Lock ();defer _ceeg .Unlock ();if _ ,_dggfd :=_fcadee [name ];_dggfd {_fcb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_fcadee [name ]=fn ;};const _dge =86400000000000;const (_dbce countMode =iota ;_ffebe ;_deca ;);

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_a .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// String returns a string representation of CellRef.
func (_fde CellRef )String ()string {return _fde ._fbc };

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddge :=args [0].AsString ();_cbaff :=args [1].AsString ();if _ddge .Type !=ResultTypeString ||_cbaff .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_ddge .ValueString ==_cbaff .ValueString );};

// Eval evaluates a vertical range returning a list of results or an error.
func (_ecdag VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_fbdac :=_ecdag .verticalRangeReference ();if _bgdfg ,_agecc :=ev .GetFromCache (_fbdac );_agecc {return _bgdfg ;};_gbacg ,_adaed :=_bdabe (ctx ,_ecdag ._eaagb ,_ecdag ._bcdg );_acbaa :=_geceg (ctx ,ev ,_gbacg ,_adaed );ev .SetCache (_fbdac ,_acbaa );return _acbaa ;};func _adeg (_dbfg []Result ,_debe string )(*amorArgs ,Result ){_dggf :=len (_dbfg );if _dggf !=6&&_dggf !=7{return nil ,MakeErrorResult (_debe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dbfg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_debe +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_afde :=_dbfg [0].ValueNumber ;if _afde < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_debe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_eeba ,_efga :=_gddb (_dbfg [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_debe );if _efga .Type ==ResultTypeError {return nil ,_efga ;};_degf ,_efga :=_gddb (_dbfg [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_debe );if _efga .Type ==ResultTypeError {return nil ,_efga ;};if _degf < _eeba {return nil ,MakeErrorResultType (ErrorTypeNum ,_debe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _dbfg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_debe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fddf :=_dbfg [3].ValueNumber ;if _fddf < 0||_fddf > _afde {return nil ,MakeErrorResultType (ErrorTypeNum ,_debe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _dbfg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_debe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fccc :=int (_dbfg [4].ValueNumber );if _fccc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_debe +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _dbfg [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_debe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bcfgd :=_dbfg [5].ValueNumber ;if _bcfgd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_debe +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_dgea :=0;if _dggf ==7&&_dbfg [6].Type !=ResultTypeEmpty {if _dbfg [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_debe +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgea =int (_dbfg [6].ValueNumber );if !_dccd (_dgea )||_dgea ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_debe );};};return &amorArgs {_afde ,_eeba ,_degf ,_fddf ,_fccc ,_bcfgd ,_dgea },_cgac ;};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccea :=args [0].AsNumber ();_bgee :=args [1].AsNumber ();_bebc :=args [2].AsNumber ();_cdcac :=args [3].ListValues ();if _ccea .Type !=ResultTypeNumber ||_bgee .Type !=ResultTypeNumber ||_bebc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_eedb :=float64 (0);for _fcadc ,_fgcfb :=range _cdcac {_eedb +=_fgcfb .ValueNumber *_a .Pow (_ccea .ValueNumber ,_bgee .ValueNumber +float64 (_fcadc )*_bebc .ValueNumber );};return MakeNumberResult (_eedb );};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;var _dfcf =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};func _ceddc (_aafca ,_aaad Result ,_fede ,_egef bool )cmpResult {_aafca =_aafca .AsNumber ();_aaad =_aaad .AsNumber ();if _aafca .Type !=_aaad .Type {return _ccaea ;};if _aafca .Type ==ResultTypeNumber {if _aafca .ValueNumber ==_aaad .ValueNumber {return _febgd ;};if _aafca .ValueNumber < _aaad .ValueNumber {return _bead ;};return _gdfd ;};if _aafca .Type ==ResultTypeString {_debb :=_aafca .ValueString ;_gdbf :=_aaad .ValueString ;if !_fede {_debb =_dg .ToLower (_debb );_gdbf =_dg .ToLower (_gdbf );};if _egef {_eegf :=_cab .Match (_gdbf ,_debb );if _eegf {return _febgd ;}else {return _gdfd ;};};return cmpResult (_dg .Compare (_debb ,_gdbf ));};if _aafca .Type ==ResultTypeEmpty {return _febgd ;};if _aafca .Type ==ResultTypeList {if len (_aafca .ValueList )< len (_aaad .ValueList ){return _bead ;};if len (_aafca .ValueList )> len (_aaad .ValueList ){return _gdfd ;};for _bddg :=range _aafca .ValueList {_edgeb :=_ceddc (_aafca .ValueList [_bddg ],_aaad .ValueList [_bddg ],_fede ,_egef );if _edgeb !=_febgd {return _edgeb ;};};return _febgd ;};if _aafca .Type ==ResultTypeList {if len (_aafca .ValueArray )< len (_aaad .ValueArray ){return _bead ;};if len (_aafca .ValueArray )> len (_aaad .ValueArray ){return _gdfd ;};for _acaff :=range _aafca .ValueArray {_bbee :=_aafca .ValueArray [_acaff ];_eaec :=_aafca .ValueArray [_acaff ];if len (_bbee )< len (_eaec ){return _bead ;};if len (_bbee )> len (_eaec ){return _gdfd ;};for _bafee :=range _bbee {_ceee :=_ceddc (_bbee [_bafee ],_eaec [_bafee ],_fede ,_egef );if _ceee !=_febgd {return _ceee ;};};};return _febgd ;};return _ccaea ;};func _fadda (_cfa ,_cbc float64 ,_egcf ,_faec int )(float64 ,Result ){_faf ,_adfa :=_dag (_cfa ),_dag (_cbc );if _adfa .After (_faf ){_ebgb :=_eabc (_faf ,_adfa ,_egcf ,_faec );_edca :=(_adfa .Year ()-_ebgb .Year ())*12+int (_adfa .Month ())-int (_ebgb .Month ());return float64 (_edca *_egcf )/12.0,_cgac ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};func (_bgbdc HorizontalRange )horizontalRangeReference ()string {return _db .Sprintf ("\u0025\u0064\u003a%\u0064",_bgbdc ._gbbgd ,_bgbdc ._dgfe );};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_feggg :=args [0];if _feggg .Type !=ResultTypeNumber &&_feggg .Type !=ResultTypeString &&_feggg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_agegc :=args [1].ValueString ;switch _feggg .Type {case ResultTypeNumber :return MakeStringResult (_dgg .Number (_feggg .ValueNumber ,_agegc ));case ResultTypeString :return MakeStringResult (_dgg .String (_feggg .ValueString ,_agegc ));case ResultTypeEmpty :return MakeStringResult (_dgg .Number (0,_agegc ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};func _ceb (_fdcf string )bool {for _ ,_gfa :=range _gae {_edc :=_gfa .FindStringSubmatch (_fdcf );if len (_edc )> 1{return true ;};};return false ;};func _baeg (_cffa []Result )Result {_cggag :=_cffa [0].ValueArray ;if len (_cffa )==1{_fccaa :=[][]Result {};for _ ,_cfga :=range _cggag {_fccaa =append (_fccaa ,_egbad ([]Result {MakeListResult (_cfga )}).ValueList );};return MakeArrayResult (_fccaa );}else if len (_cffa )==2{_edfg :=len (_cggag );_ceff :=len (_cggag [0]);_beae :=_adgc (_cffa [1],_edfg ,_ceff );_dbgg :=len (_beae );_efce :=[][]Result {};var _efegb []Result ;for _egbc ,_dabc :=range _cggag {if _egbc < _dbgg {_efegb =_beae [_egbc ];}else {_efegb =_ccec (MakeErrorResultType (ErrorTypeNA ,""),_ceff );};_efce =append (_efce ,_egbad ([]Result {MakeListResult (_dabc ),MakeListResult (_efegb )}).ValueList );};return MakeArrayResult (_efce );}else if len (_cffa )==3{_acdg :=len (_cggag );_edbc :=len (_cggag [0]);_bbcdf :=_adgc (_cffa [1],_acdg ,_edbc );_gageda :=_adgc (_cffa [2],_acdg ,_edbc );_gdgbe :=len (_bbcdf );_dagge :=len (_gageda );_ffdfc :=[][]Result {};var _ffdgc ,_degc []Result ;for _ffcb ,_bfbf :=range _cggag {if _ffcb < _gdgbe {_ffdgc =_bbcdf [_ffcb ];}else {_ffdgc =_ccec (MakeErrorResultType (ErrorTypeNA ,""),_edbc );};if _ffcb < _dagge {_degc =_gageda [_ffcb ];}else {_degc =_ccec (MakeErrorResultType (ErrorTypeNA ,""),_edbc );};_ffdfc =append (_ffdfc ,_egbad ([]Result {MakeListResult (_bfbf ),MakeListResult (_ffdgc ),MakeListResult (_degc )}).ValueList );};return MakeArrayResult (_ffdfc );};return MakeErrorResultType (ErrorTypeValue ,"");};func _ceeeb (_degfc []string ,_dcaff int )string {return _fc .Itoa (len (_degfc [len (_degfc )-1-_dcaff ]))};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_badad :=args [0].AsNumber ();if _badad .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _badad .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_gafdb (_badad .ValueNumber ));};var _gfbf []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};var _ddeffc =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// Bool is a boolean expression.
type Bool struct{_eec bool };

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _dgc (_efde ,_bggd ,_cfg ,_egeeb float64 ,_acba int )float64 {var _gbgf float64 ;if _efde ==0{_gbgf =(_cfg +_egeeb )/_bggd ;}else {_faga :=_a .Pow (1+_efde ,_bggd );if _acba ==1{_gbgf =(_egeeb *_efde /(_faga -1)+_cfg *_efde /(1-1/_faga ))/(1+_efde );}else {_gbgf =_egeeb *_efde /(_faga -1)+_cfg *_efde /(1-1/_faga );};};return -_gbgf ;};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_fcdea ,_fdbfcc :=_dacfg ("\u0046\u0049\u004e\u0044",args );if _fdbfcc .Type !=ResultTypeEmpty {return _fdbfcc ;};_bfaed :=_dg .ToLower (_fcdea ._aedab );if _bfaed ==""{return MakeNumberResult (1.0);};_ggef :=_dg .ToLower (_fcdea ._fdcfe );_dcdg :=_fcdea ._ffef ;_afbga :=1;for _edffb :=range _ggef {if _afbga < _dcdg {_afbga ++;continue ;};_cfgae :=_cab .Index (_bfaed ,_ggef [_edffb :]);if _cfgae ==0{return MakeNumberResult (float64 (_afbga ));};_afbga ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _faee (_dfeab int )string {if _dfeab >=0&&_dfeab < len (_bgcbg ){if _bgcbg [_dfeab ]!=""{return _bgcbg [_dfeab ];};};return _db .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_dfeab );};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _g .Reader )Expression {_efcb :=&plex {_daaab :LexReader (r )};_dgdga (_efcb );if _efcb ._dgeg !=""{return nil ;};return _efcb ._dacfb ;};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_cdab SheetPrefixExpr )Update (q *_cbe .UpdateQuery )Expression {return _cdab };const _aedgb =57358;

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dfce :=args [0].AsNumber ();_gbge :=args [1].AsNumber ();if _dfce .Type ==ResultTypeNumber &&_gbge .Type ==ResultTypeNumber {_ebgc :=_a .Atan2 (_gbge .ValueNumber ,_dfce .ValueNumber );if _ebgc !=_ebgc {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_ebgc );};for _ ,_adgab :=range []ResultType {_dfce .Type ,_gbge .Type }{switch _adgab {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _dfce ;default:return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_adgab ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbdf :=args [0].AsString ();if _gbdf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_gabg :="\u0041\u0031";if len (args )==2{_cfafd :=args [1].Ref ;if _cfafd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_gabg =_cfafd .Value ;};switch _gbdf .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_fegdg ,_gbeb :=_cg .ParseCellReference (_gabg );if _gbeb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gabg );};_adbc :="\u0024"+_fegdg .Column +"\u0024"+_fc .Itoa (int (_fegdg .RowIdx ));if _fegdg .SheetName !=""{_adbc =_fegdg .SheetName +"\u0021"+_adbc ;};return MakeStringResult (_adbc );case "\u0063\u006f\u006c":_aadc ,_daaa :=_cg .ParseCellReference (_gabg );if _daaa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gabg );};return MakeNumberResult (float64 (_aadc .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_gaea :=_dg .Contains (ctx .GetFormat (_gabg ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_gaea );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_ffdfb :="\u0047";_agacb :=ctx .GetFormat (_gabg );if _agacb =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_cfdg .MatchString (_agacb ){_ffdfb ="\u0046\u0030";}else if _agacb =="\u0030\u0025"{_ffdfb ="\u0050\u0030";}else if _agacb =="\u004d\u004d\u004d\u0020\u0044\u0044"{_ffdfb ="\u0044\u0032";}else if _agacb =="\u004d\u004d\u002fY\u0059"{_ffdfb ="\u0044\u0033";}else if _agacb =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_agacb =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_ffdfb ="\u0044\u0034";}else if _agacb =="\u004d\u004d\u005c\u002d\u0044\u0044"{_ffdfb ="\u0044\u0035";}else if _agacb =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_ffdfb ="\u0044\u0036";}else if _agacb =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_ffdfb ="\u0044\u0037";}else if _agacb =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_ffdfb ="\u0044\u0038";}else if _agacb =="\u0048\u0048\u003aM\u004d"{_ffdfb ="\u0044\u0039";}else if _accg .MatchString (_agacb ){_ffdfb ="\u002e\u0030";}else if _gbff .MatchString (_agacb ){_ffdfb ="\u002e\u0030\u0028\u0029";}else if _fecf .MatchString (_agacb ){_ffdfb ="\u0043\u0030";}else if _ddef .MatchString (_agacb )||_fcge .MatchString (_agacb ){_ffdfb ="\u0044\u0031";}else if _dfddc :=_efegf .FindStringSubmatch (_agacb );len (_dfddc )> 1{_ffdfb ="\u0046"+_fc .Itoa (len (_dfddc [1]));}else if _ceeb :=_aebda .FindStringSubmatch (_agacb );len (_ceeb )> 1{_ffdfb ="\u002e"+_fc .Itoa (len (_ceeb [2]));}else if _bacd :=_cgga .FindStringSubmatch (_agacb );len (_bacd )> 1{_ffdfb ="\u0050"+_fc .Itoa (len (_bacd [2]));}else if _cdgg :=_aafe .FindStringSubmatch (_agacb );len (_cdgg )> 1{_ffdfb ="\u0043"+_ceeeb (_cdgg ,1);}else if _cgba :=_gbcd .FindStringSubmatch (_agacb );len (_cgba )> 1{_ffdfb ="\u0043"+_ceeeb (_cgba ,1);}else if _bfdc :=_bddae .FindStringSubmatch (_agacb );len (_bfdc )> 1{_ffdfb ="\u002e"+_ceeeb (_bfdc ,1)+"\u0028\u0029";}else if _cbgd :=_bdbgg .FindStringSubmatch (_agacb );len (_cbgd )> 1{_ffdfb ="\u002e"+_ceeeb (_cbgd ,1);}else if _ebab :=_bdcg .FindStringSubmatch (_agacb );len (_ebab )> 1{_ffdfb ="\u0053"+_ceeeb (_ebab ,3);};if _ffdfb !="\u0047"&&_dg .Contains (_agacb ,"\u005b\u0052\u0045D\u005d"){_ffdfb +="\u002d";};return MakeStringResult (_ffdfb );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_eggf :=ctx .GetFormat (_gabg );if _afcf .MatchString (_eggf ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_gabg ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_gfgf :=0.0;if ctx .GetLocked (_gabg ){_gfgf =1.0;};return MakeNumberResult (_gfgf );case "\u0072\u006f\u0077":_dccfd ,_decfd :=_cg .ParseCellReference (_gabg );if _decfd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gabg );};return MakeNumberResult (float64 (_dccfd .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_gfce ,_bgea :=_cg .ParseCellReference (_gabg );if _bgea !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gabg );};if _gfce .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_gfce .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_gfce .SheetName ).GetWidth (int (_gfce .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_gbdf .ValueString );};var _gafeb =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_gaec ,_fbbb :=_adeg (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _fbbb .Type ==ResultTypeError {return _fbbb ;};_dadgc :=_gaec ._ffce ;_feeb :=_gaec ._ceefc ;_gggc :=_gaec ._gbb ;_effd :=_gaec ._bgfd ;_cbd :=_gaec ._ccdd ;_gafg :=_gaec ._eea ;_adce :=_gaec ._aabc ;_fgda ,_dbge :=_bece (_feeb ,_gggc ,_adce );if _dbge .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_efca :=_fgda *_gafg *_dadgc ;if _cbd ==0{return MakeNumberResult (_efca );};_fbac :=_dadgc *_gafg ;_bdd :=_dadgc -_effd ;_fdbga :=int ((_bdd -_efca )/_fbac );if _cbd <=_fdbga {return MakeNumberResult (_fbac );}else if _cbd ==_fdbga +1{return MakeNumberResult (_bdd -_fbac *float64 (_fdbga )-_efca );}else {return MakeNumberResult (0);};};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_fccgf ,_efaa :=_bfbec (args ,false );if _efaa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_fccgf /_efaa );};func _fbgc (_fbda []Result ,_dce bool )Result {_abca :="\u004d\u0049\u004e";if _dce {_abca ="\u004d\u0049\u004e\u0041";};if len (_fbda )==0{return MakeErrorResult (_abca +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbfbd :=_a .MaxFloat64 ;for _ ,_gdgbea :=range _fbda {switch _gdgbea .Type {case ResultTypeNumber :if (_dce ||!_gdgbea .IsBoolean )&&_gdgbea .ValueNumber < _dbfbd {_dbfbd =_gdgbea .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bgfe :=_fbgc (_gdgbea .ListValues (),_dce );if _bgfe .ValueNumber < _dbfbd {_dbfbd =_bgfe .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ebdfbe :=0.0;if _dce {_ebdfbe =_gdgbea .AsNumber ().ValueNumber ;};if _ebdfbe < _dbfbd {_dbfbd =_ebdfbe ;};default:_fcb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_abca +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gdgbea .Type );};};if _dbfbd ==_a .MaxFloat64 {_dbfbd =0;};return MakeNumberResult (_dbfbd );};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcagf :=args [0].AsNumber ();if _dcagf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdcga :=float64 (1);if _dcagf .ValueNumber < 0{_fdcga =-1;};if len (args )> 1{_bdee :=args [1].AsNumber ();if _bdee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdcga =_a .Abs (_bdee .ValueNumber );};if len (args )==1{return MakeNumberResult (_a .Ceil (_dcagf .ValueNumber ));};_adbd :=_dcagf .ValueNumber ;_adbd ,_gdcae :=_a .Modf (_adbd /_fdcga );if _gdcae !=0{if _dcagf .ValueNumber > 0{_adbd ++;};};return MakeNumberResult (_adbd *_fdcga );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func (_ccfb PrefixVerticalRange )verticalRangeReference (_adfd string )string {return _db .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_adfd ,_ccfb ._ddbg ,_ccfb ._ccef );};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_dg .NewReader (s ));};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_cbdgg :pfx ,_dgcgg :exp }};

// Reference returns an invalid reference for Negate.
func (_aaffa Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eval evaluates and returns a boolean.
func (_ccg Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_ccg ._eec )};

// Eval evaluates the binary expression using the context given.
func (_ef BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_b :=_ef ._gec .Eval (ctx ,ev );if _b .Type ==ResultTypeError {return _b ;};_ad :=_ef ._da .Eval (ctx ,ev );if _ad .Type ==ResultTypeError {return _ad ;};if _b .Type ==_ad .Type {if _b .Type ==ResultTypeArray {if !_cf (_b .ValueArray ,_ad .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _af (_ef ._ag ,_b .ValueArray ,_ad .ValueArray );}else if _b .Type ==ResultTypeList {if len (_b .ValueList )!=len (_ad .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _aa (_ef ._ag ,_b .ValueList ,_ad .ValueList );};}else if _b .Type ==ResultTypeArray &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return _dd (_ef ._ag ,_b .ValueArray ,_ad );}else if _b .Type ==ResultTypeList &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return _fdc (_ef ._ag ,_b .ValueList ,_ad );};switch _ef ._ag {case BinOpTypePlus :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeNumberResult (_b .ValueNumber +_ad .ValueNumber );};};case BinOpTypeMinus :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeNumberResult (_b .ValueNumber -_ad .ValueNumber );};};case BinOpTypeMult :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeNumberResult (_b .ValueNumber *_ad .ValueNumber );};};case BinOpTypeDiv :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {if _ad .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_b .ValueNumber /_ad .ValueNumber );};};case BinOpTypeExp :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeNumberResult (_a .Pow (_b .ValueNumber ,_ad .ValueNumber ));};};case BinOpTypeLT :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeBoolResult (_b .ValueNumber < _ad .ValueNumber );};if _b .Type ==ResultTypeString {return MakeBoolResult (_b .ValueString < _ad .ValueString );};if _b .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _b .Type ==ResultTypeString &&_ad .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _b .Type ==ResultTypeNumber &&_ad .Type ==ResultTypeString {return MakeBoolResult (true );}else if _b .Type ==ResultTypeEmpty &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_b .Type ==ResultTypeNumber ||_b .Type ==ResultTypeString )&&_ad .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeBoolResult (_b .ValueNumber > _ad .ValueNumber );};if _b .Type ==ResultTypeString {return MakeBoolResult (_b .ValueString > _ad .ValueString );};if _b .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _b .Type ==ResultTypeString &&_ad .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _b .Type ==ResultTypeNumber &&_ad .Type ==ResultTypeString {return MakeBoolResult (false );}else if _b .Type ==ResultTypeEmpty &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_b .Type ==ResultTypeNumber ||_b .Type ==ResultTypeString )&&_ad .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeBoolResult (_b .ValueNumber ==_ad .ValueNumber );};if _b .Type ==ResultTypeString {return MakeBoolResult (_b .ValueString ==_ad .ValueString );};if _b .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_b .Type ==ResultTypeString &&_ad .Type ==ResultTypeNumber )||(_b .Type ==ResultTypeNumber &&_ad .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _b .Type ==ResultTypeEmpty &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return MakeBoolResult (_ced (_ad ));}else if (_b .Type ==ResultTypeNumber ||_b .Type ==ResultTypeString )&&_ad .Type ==ResultTypeEmpty {return MakeBoolResult (_ced (_b ));};case BinOpTypeNE :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeBoolResult (_b .ValueNumber !=_ad .ValueNumber );};if _b .Type ==ResultTypeString {return MakeBoolResult (_b .ValueString !=_ad .ValueString );};if _b .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_b .Type ==ResultTypeString &&_ad .Type ==ResultTypeNumber )||(_b .Type ==ResultTypeNumber &&_ad .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _b .Type ==ResultTypeEmpty &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return MakeBoolResult (!_ced (_ad ));}else if (_b .Type ==ResultTypeNumber ||_b .Type ==ResultTypeString )&&_ad .Type ==ResultTypeEmpty {return MakeBoolResult (!_ced (_b ));};case BinOpTypeLEQ :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeBoolResult (_b .ValueNumber <=_ad .ValueNumber );};if _b .Type ==ResultTypeString {return MakeBoolResult (_b .ValueString <=_ad .ValueString );};if _b .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _b .Type ==ResultTypeString &&_ad .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _b .Type ==ResultTypeNumber &&_ad .Type ==ResultTypeString {return MakeBoolResult (true );}else if _b .Type ==ResultTypeEmpty &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return MakeBoolResult (_ced (_ad ));}else if (_b .Type ==ResultTypeNumber ||_b .Type ==ResultTypeString )&&_ad .Type ==ResultTypeEmpty {return MakeBoolResult (_ced (_b ));};case BinOpTypeGEQ :if _b .Type ==_ad .Type {if _b .Type ==ResultTypeNumber {return MakeBoolResult (_b .ValueNumber >=_ad .ValueNumber );};if _b .Type ==ResultTypeString {return MakeBoolResult (_b .ValueString >=_ad .ValueString );};if _b .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _b .Type ==ResultTypeString &&_ad .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _b .Type ==ResultTypeNumber &&_ad .Type ==ResultTypeString {return MakeBoolResult (false );}else if _b .Type ==ResultTypeEmpty &&(_ad .Type ==ResultTypeNumber ||_ad .Type ==ResultTypeString ){return MakeBoolResult (_ced (_ad ));}else if (_b .Type ==ResultTypeNumber ||_b .Type ==ResultTypeString )&&_ad .Type ==ResultTypeEmpty {return MakeBoolResult (_ced (_b ));};case BinOpTypeConcat :return MakeStringResult (_b .Value ()+_ad .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func (_dbacac tokenType )String ()string {return _gdef (int (_dbacac ))};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_bbd :=args [0].ValueNumber ;if _bbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_aabg :=float64 (int (args [1].ValueNumber ));if _aabg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_a .Pow (_bbd +1,1/_aabg )-1)*_aabg );};

// String returns a string representation of a horizontal range.
func (_caafe HorizontalRange )String ()string {return _caafe .horizontalRangeReference ()};func (_ff *defEval )checkLastEvalIsRef (_dgb Context ,_fac Expression ){switch _fac .(type ){case FunctionCall :switch _fac .(FunctionCall )._ecfd {case "\u0049\u0053\u0052E\u0046":for _ ,_fccf :=range _fac .(FunctionCall )._ebdaa {switch _fccf .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_ab :=_fccf .Eval (_dgb ,_ff );_ff ._fcc =!(_ab .Type ==ResultTypeError &&_ab .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_ff ._fcc =false ;};};};};};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_dcfab ,_dggb ,_cdeea Expression };

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_dcc *defEval )LastEvalIsRef ()bool {return _dcc ._fcc };const _acdbb int =30;

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_efbd :=args [0].AsString ();if _efbd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_efbd .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_efbd .ValueString [0]));};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_cdcg ,_ggcd ,_effff :=_cbeeg (args );if _effff .Type ==ResultTypeError {return _effff ;};return MakeNumberResult (_gafdb (_cdcg )/_ggcd );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_be ConstArrayExpr )Update (q *_cbe .UpdateQuery )Expression {return _be };

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};var _dcgfg =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddfd :=false ;for _ ,_bcgc :=range args {switch _bcgc .Type {case ResultTypeList ,ResultTypeArray :_dgcb :=Or (_bcgc .ListValues ());if _dgcb .Type ==ResultTypeError {return _dgcb ;};if _dgcb .ValueNumber !=0{_ddfd =true ;};case ResultTypeNumber :if _bcgc .ValueNumber !=0{_ddfd =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _bcgc ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_ddfd );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fefcf :=args [0];if _fefcf .Type !=ResultTypeArray &&_fefcf .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ebgg :=_agcd (_fefcf );_cefa :=args [2];if _cefa .Type !=ResultTypeArray &&_cefa .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dbgga :=_agcd (_cefa );_geba :=_fefef (args [1]);_fcdd :=0.0;for _cgff ,_afg :=range _ebgg {for _cacga ,_eaeb :=range _afg {if _cffc (_eaeb ,_geba ){_fcdd +=_dbgga [_cgff ][_cacga ].ValueNumber ;};};};return MakeNumberResult (_fcdd );};

// Reference returns an invalid reference for Error.
func (_eab Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bedgb (_fedg Result )[]Result {_gcaf :=_fedg .ValueList ;if _fedg .Type ==ResultTypeArray {_gcaf =nil ;for _ ,_bfaf :=range _fedg .ValueArray {if len (_bfaf )> 0{_gcaf =append (_gcaf ,_bfaf [0]);}else {_gcaf =append (_gcaf ,_cgac );};};};return _gcaf ;};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdfg :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aaff :=args [2].ValueNumber +1;if _aaff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gabfa :=_agcd (args [0]);_afdeb :=float64 (len (_gabfa ));_gfea ,_edada :=0.0,0.0;_ffda ,_ebeaf :=1.0,1.0;_ecgd ,_cfgc :=false ,false ;for _ ,_cgbg :=range _gabfa {for _ ,_dadgca :=range _cgbg {if _dadgca .Type ==ResultTypeNumber &&!_dadgca .IsBoolean {_gece :=_dadgca .ValueNumber ;if _gece ==0{continue ;}else {if _gece > 0{_ecgd =true ;_edada +=_dadgca .ValueNumber *_ebeaf ;}else {_cfgc =true ;_gfea +=_dadgca .ValueNumber *_ffda ;};_ffda /=_bdfg ;_ebeaf /=_aaff ;};};};};if !_ecgd ||!_cfgc {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_caac :=-_edada /_gfea ;_caac *=_a .Pow (_aaff ,_afdeb -1);_caac =_a .Pow (_caac ,1/(_afdeb -1));return MakeNumberResult (_caac -1);};var _cabf =map[string ]*_cb .Regexp {};func _dca (_ddcd ,_dffc float64 ,_gbfa ,_afag int )float64 {_gba :=_dag (_ddcd );_gggbd :=_dag (_dffc );_gac :=_abe (_gba ,_gggbd ,_gbfa );return _agec (_gba ,_gac ,_afag );};

// Negate is a negate expression like -A1.
type Negate struct{_cdfa Expression };func _abfd (_ecc ,_acaa ,_ecdc ,_fbbf int )int {if _acaa > _ecdc {return 0;};if _ddda (_fbbf ){return (_ecdc -_acaa +1)*30;};_gcae :=0;for _ceef :=_acaa ;_ceef <=_ecdc ;_ceef ++{_gcae +=_bfg (_ecc ,_ceef );};return _gcae ;};

// IsBool returns false for the invalid reference context.
func (_efbg *ivr )IsBool (cellRef string )bool {return false };

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_aafcf :=len (args );if _aafcf !=4&&_aafcf !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ffgb ,_bdda ,_ceab :=_ffcca (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _ceab .Type ==ResultTypeError {return _ceab ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgca :=args [2].ValueNumber ;if _fgca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fggf :=args [3].ValueNumber ;if _fggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbea :=0;if _aafcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbea =int (args [4].ValueNumber );if !_dccd (_gbea ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_abge ,_ceab :=_bece (_ffgb ,_bdda ,_gbea );if _ceab .Type ==ResultTypeError {return _ceab ;};return MakeNumberResult (_fgca /(1-_fggf *_abge ));};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cafd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgfe :=args [2].ValueNumber ;if _fgfe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_dfb -_cafd )/_fgfe );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_ccece :=args [0];if _ccece .Type !=ResultTypeArray &&_ccece .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dfge :=_fefef (args [1]);_cbgf :=0;for _ ,_cdac :=range _agcd (_ccece ){for _ ,_bfgd :=range _cdac {if _cffc (_bfgd ,_dfge ){_cbgf ++;};};};return MakeNumberResult (float64 (_cbgf ));};var _dadf =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _faad (_baae ,_fcgb Expression )(Expression ,Expression ,error ){_dbcc ,_dgedd :=_baae .(CellRef );if !_dgedd {return nil ,nil ,_c .New (_db .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_baae .String ()));};_ccaee ,_dgedd :=_fcgb .(CellRef );if !_dgedd {return nil ,nil ,_c .New (_db .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fcgb .String ()));};_fdadgg ,_egebg :=_cg .ParseCellReference (_dbcc ._fbc );if _egebg !=nil {return nil ,nil ,_egebg ;};_ffcgc ,_dadfc :=_cg .ParseCellReference (_ccaee ._fbc );if _dadfc !=nil {return nil ,nil ,_dadfc ;};_effc :=false ;if _fdadgg .RowIdx > _ffcgc .RowIdx {_effc =true ;_fdadgg .RowIdx ,_ffcgc .RowIdx =_ffcgc .RowIdx ,_fdadgg .RowIdx ;};if _fdadgg .ColumnIdx > _ffcgc .ColumnIdx {_effc =true ;_fdadgg .ColumnIdx ,_ffcgc .ColumnIdx =_ffcgc .ColumnIdx ,_fdadgg .ColumnIdx ;_fdadgg .Column ,_ffcgc .Column =_ffcgc .Column ,_fdadgg .Column ;};if _effc {return NewCellRef (_fdadgg .String ()),NewCellRef (_ffcgc .String ()),nil ;};return _baae ,_fcgb ,nil ;};const _ac ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// GetWidth returns 0 for the invalid reference context.
func (_fbdf *ivr )GetWidth (colIdx int )float64 {return float64 (0)};var _bgcbg =[...]string {};func _eabc (_eabg ,_edabd _ge .Time ,_egbb ,_ccf int )_ge .Time {_def :=_edabd ;_faddg :=_eabg .Year ()-_edabd .Year ();_def =_def .AddDate (_faddg ,0,0);if _eabg .After (_def ){_def =_def .AddDate (1,0,0);};_dcb :=-12/_egbb ;for _def .After (_eabg ){_def =_def .AddDate (0,_dcb ,0);};return _def ;};func _agcd (_cfaa Result )[][]Result {switch _cfaa .Type {case ResultTypeArray :return _cfaa .ValueArray ;case ResultTypeList :return [][]Result {_cfaa .ValueList };default:return [][]Result {};};};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbdb :=args [0].AsNumber ();if _bbdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgef :=float64 (1);_cccc :=args [1].AsNumber ();if _cccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_cgef =_cccc .ValueNumber ;if _cgef < 0&&_bbdb .ValueNumber > 0||_cgef > 0&&_bbdb .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_bfad :=_bbdb .ValueNumber ;_bfad ,_geae :=_a .Modf (_bfad /_cgef );if _a .Trunc (_geae +0.5)> 0{_bfad ++;};return MakeNumberResult (_bfad *_cgef );};const _befd =57350;func (_egagf *noCache )GetFromCache (key string )(Result ,bool ){return _cgac ,false };func (_cddbf *yyParserImpl )Lookahead ()int {return _cddbf ._cdcgc };func _gdba (_daead yyLexer ,_gede *yySymType )(_fdgcf ,_cfaeb int ){_cfaeb =0;_fdgcf =_daead .Lex (_gede );if _fdgcf <=0{_cfaeb =_gbdbf [0];goto _bfcbe ;};if _fdgcf < len (_gbdbf ){_cfaeb =_gbdbf [_fdgcf ];goto _bfcbe ;};if _fdgcf >=_gdde {if _fdgcf < _gdde +len (_ddeffc ){_cfaeb =_ddeffc [_fdgcf -_gdde ];goto _bfcbe ;};};for _cgcfd :=0;_cgcfd < len (_fgcae );_cgcfd +=2{_cfaeb =_fgcae [_cgcfd +0];if _cfaeb ==_fdgcf {_cfaeb =_fgcae [_cgcfd +1];goto _bfcbe ;};};_bfcbe :if _cfaeb ==0{_cfaeb =_ddeffc [1];};if _fgfd >=3{_db .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_gdef (_cfaeb ),uint (_fdgcf ));};return _fdgcf ,_cfaeb ;};type couponArgs struct{_aac float64 ;_cfcf float64 ;_agf int ;_bae int ;};const _ddgg =_ge .Millisecond *1000;

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// Function is a standard function whose result only depends on its arguments.
type Function func (_dcbec []Result )Result ;const _eccfa =57357;

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_efc :=args [0].ValueNumber ;_bdbe :=args [1].ValueNumber ;if _bdbe < _efc {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _bdbe ==_efc {return MakeNumberResult (0);};_fad :=_dg .ToLower (args [2].ValueString );if _fad =="\u0064"{return MakeNumberResult (_bdbe -_efc );};_aefb :=_dag (_efc );_cecb :=_dag (_bdbe );_aba ,_eecf ,_caa :=_aefb .Date ();_eaa ,_ggdd ,_dffe :=_cecb .Date ();_eef :=int (_eecf );_dagd :=int (_ggdd );var _agb float64 ;switch _fad {case "\u0079":_agb =float64 (_eaa -_aba );if _dagd < _eef ||(_dagd ==_eef &&_dffe < _caa ){_agb --;};case "\u006d":_edba :=_eaa -_aba ;_eee :=_dagd -_eef ;if _dffe < _caa {_eee --;};if _eee < 0{_edba --;_eee +=12;};_agb =float64 (_edba *12+_eee );case "\u006d\u0064":_gaa :=_dagd ;if _dffe < _caa {_gaa --;};_agb =float64 (int (_bdbe -_fabf (_eaa ,_gaa ,_caa )));case "\u0079\u006d":_agb =float64 (_dagd -_eef );if _dffe < _caa {_agb --;};if _agb < 0{_agb +=12;};case "\u0079\u0064":_dbd :=_eaa ;if _dagd < _eef ||(_dagd ==_eef &&_dffe < _caa ){_dbd --;};_agb =float64 (int (_bdbe -_fabf (_dbd ,_eef ,_caa )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_agb );};

// Value returns a string version of the result.
func (_aebg Result )Value ()string {switch _aebg .Type {case ResultTypeNumber :_ecbd :=_fc .FormatFloat (_aebg .ValueNumber ,'f',-1,64);if len (_ecbd )> 12{_ffegd :=12;for _fagbb :=_ffegd ;_fagbb > 0&&_ecbd [_fagbb ]=='0';_fagbb --{_ffegd --;};_ecbd =_ecbd [0:_ffegd +1];};return _ecbd ;case ResultTypeError :return _aebg .ValueString ;case ResultTypeString :return _aebg .ValueString ;case ResultTypeList :if len (_aebg .ValueList )==0{return "";};return _aebg .ValueList [0].Value ();case ResultTypeArray :if len (_aebg .ValueArray )==0||len (_aebg .ValueArray [0])==0{return "";};return _aebg .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// SetLocked does nothing for the invalid reference context.
func (_bebg *ivr )SetLocked (cellRef string ,locked bool ){};func (_adee *ivr )Sheet (name string )Context {return _adee };

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caaf :=args [0].Ref ;if _caaf .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_caaf .Value ,ev ).IsBoolean );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfbed :=args [0].AsNumber ();if _bfbed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acdee :=float64 (0);if len (args )> 1{_gbef :=args [1].AsNumber ();if _gbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acdee =_gbef .ValueNumber ;};_eddg :=_bfbed .ValueNumber ;_abgde :=1.0;if _acdee >=0{_abgde =_a .Pow (1/10.0,_acdee );}else {return MakeNumberResult (0);};_eddg ,_abbe :=_a .Modf (_eddg /_abgde );_eacg :=0.99999;if _abbe > _eacg {_eddg ++;}else if _abbe < -_eacg {_eddg --;};_ =_abbe ;return MakeNumberResult (_eddg *_abgde );};

// Update updates references in the VerticalRange after removing a row/column.
func (_ceae VerticalRange )Update (q *_cbe .UpdateQuery )Expression {if q .UpdateType ==_cbe .UpdateActionRemoveColumn {_agdd :=_ceae ;if q .UpdateCurrentSheet {_baefc :=q .ColumnIdx ;_agdd ._eaagb =_aab (_ceae ._eaagb ,_baefc );_agdd ._bcdg =_aab (_ceae ._bcdg ,_baefc );};return _agdd ;};return _ceae ;};const _gab ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// LastRow returns 0 for the invalid reference context.
func (_fadce *ivr )LastRow (colFrom string )int {return 0};var _ffe =[]*_cb .Regexp {};const _bgdd ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dadb :=args [0].ValueNumber ;if _dadb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbf :=args [1].ValueNumber ;if _fbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccge :=args [2].ValueNumber ;if _ccge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_a .Pow (_ccge /_fbf ,1/_dadb )-1);};var _feaf =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_ceeg .Lock ();defer _ceeg .Unlock ();if _eeagc ,_facec :=_fcadee [name ];_facec {return _eeagc ;};return nil ;};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_gafe ,_fdf :=_bfdd (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _fdf .Type ==ResultTypeError {return _fdf ;};_fgeb :=_gafe ._cgb ;_daf :=_gafe ._gfbg ;_ffdb :=_gafe ._agd ;_cbac :=_gafe ._fdad ;_dfadg :=_gafe ._bgfa ;_eaef :=_gafe ._feea ;_efgf :=_defa (_fgeb ,_daf ,_ffdb ,_cbac ,_dfadg ,_eaef );if _efgf .Type ==ResultTypeError {return _efgf ;};_bgad :=_efgf .ValueNumber /(1.0+_cbac /_dfadg );return MakeNumberResult (_bgad );};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcf :=args [0];_gbbg :=args [1];if _gbbg .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cgda :=args [2].AsNumber ();if _cgda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebae :=false ;if len (args )==4{_fcdeb :=args [3].AsNumber ();if _fcdeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _fcdeb .ValueNumber ==0{_ebae =true ;};};_afeaf :=-1;_bgddg :=false ;if len (_gbbg .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_gcdc :=_gbbg .ValueArray [0];_bdcc :for _eafc ,_agac :=range _gcdc {switch _ceddc (_agac ,_fcf ,false ,_ebae ){case _bead :_afeaf =_eafc ;case _febgd :_afeaf =_eafc ;_bgddg =true ;break _bdcc ;};};if _afeaf ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cfde :=int (_cgda .ValueNumber )-1;if _cfde < 0||_cfde > len (_gbbg .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_gcdc =_gbbg .ValueArray [_cfde ];if _afeaf < 0||_afeaf >=len (_gcdc ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bgddg ||!_ebae {return _gcdc [_afeaf ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _edad (_gecb ,_cgge _ge .Time )bool {_gbde :=_gecb .Unix ();_edbf :=_cgge .Unix ();_bdc :=_gecb .Year ();_gccc :=_accb (_bdc ,_ge .March ,1);if _efba (_bdc )&&_gbde < _gccc &&_edbf >=_gccc {return true ;};var _gbfg =_cgge .Year ();var _fedd =_accb (_gbfg ,_ge .March ,1);return (_efba (_gbfg )&&_edbf >=_fedd &&_gbde < _fedd );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cabfg :=args [0];switch _cabfg .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_cgfd :=_dag (_cabfg .ValueNumber );return MakeNumberResult (float64 (_cgfd .Day ()));case ResultTypeString :_cdg :=_dg .ToLower (_cabfg .ValueString );if !_aeag (_cdg ){_ ,_ ,_ ,_ ,_dfe ,_eeb :=_ada (_cdg );if _eeb .Type ==ResultTypeError {_eeb .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _eeb ;};if _dfe {return MakeNumberResult (0);};};_ ,_ ,_gefd ,_ ,_aaec :=_fdbg (_cdg );if _aaec .Type ==ResultTypeError {return _aaec ;};return MakeNumberResult (float64 (_gefd ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcad ,_eece ,_gaged :=_ffcca (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gaged .Type ==ResultTypeError {return _gaged ;};_adb ,_gaged :=_gddb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gaged .Type ==ResultTypeError {return _gaged ;};if _adb >=_gcad {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_efbe :=args [3];if _efbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgge :=_efbe .ValueNumber ;if _bgge < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_debad :=args [4];if _debad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_efdee :=_debad .ValueNumber ;if _efdee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_badg :=args [5];if _badg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gdeg :=_badg .ValueNumber ;if _gdeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_eaaa :=args [6];if _eaaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbdc :=float64 (int (_eaaa .ValueNumber ));if !_bccf (_gbdc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ceec :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_agc :=args [7];if _agc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ceec =int (_agc .ValueNumber );if !_dccd (_ceec ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_aafc ,_gaged :=_bece (_adb ,_eece ,_ceec );if _gaged .Type ==ResultTypeError {return _gaged ;};_aafc *=_gbdc ;_eecee ,_gaged :=_bece (_gcad ,_eece ,_ceec );if _gaged .Type ==ResultTypeError {return _gaged ;};_eecee *=_gbdc ;_gafa ,_gaged :=_bece (_adb ,_gcad ,_ceec );if _gaged .Type ==ResultTypeError {return _gaged ;};_gafa *=_gbdc ;_gacg :=_gdeg +_aafc *100*_bgge /_gbdc ;_gacg /=_eecee *_efdee /_gbdc +1;_gacg -=_gafa *100*_bgge /_gbdc ;return MakeNumberResult (_gacg );};const _ffdgb =57362;

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _bddb :=0;_bddb < len (args )-1;_bddb +=2{if args [_bddb ].ValueNumber ==1{return args [_bddb +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_gbcb :=len (args );if _gbcb < 2||_gbcb > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efcd :=args [0];if _efcd .Type !=ResultTypeArray &&_efcd .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_acdcg :=args [1].AsNumber ();if _acdcg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fdga :=int (_acdcg .ValueNumber )-1;_caefg :=-1;if _gbcb ==3&&args [2].Type !=ResultTypeEmpty {_aedc :=args [2].AsNumber ();if _aedc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caefg =int (_aedc .ValueNumber )-1;};if _fdga ==-1&&_caefg ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _agab []Result ;if _efcd .Type ==ResultTypeArray {_fdfd :=_efcd .ValueArray ;if _fdga < -1||_fdga >=len (_fdfd ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _fdga ==-1{if _caefg >=len (_fdfd [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_dcaf :=[][]Result {};for _ ,_cfcc :=range _fdfd {_ecad :=_cfcc [_caefg ];if _ecad .Type ==ResultTypeEmpty {_ecad =MakeNumberResult (0);};_dcaf =append (_dcaf ,[]Result {_ecad });};return MakeArrayResult (_dcaf );};_agab =_fdfd [_fdga ];}else {_dcbe :=_efcd .ValueList ;if _fdga < -1||_fdga >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _fdga ==-1{if _caefg >=len (_dcbe ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_eeff :=_dcbe [_caefg ];if _eeff .Type ==ResultTypeEmpty {_eeff =MakeNumberResult (0);};return _eeff ;};_agab =_dcbe ;};if _caefg < -1||_caefg > len (_agab ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _caefg ==-1{_abce :=[]Result {};for _ ,_ecfb :=range _agab {if _ecfb .Type ==ResultTypeEmpty {_abce =append (_abce ,MakeNumberResult (0));}else {_abce =append (_abce ,_ecfb );};};return MakeArrayResult ([][]Result {_abce });};_dbgd :=_agab [_caefg ];if _dbgd .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _dbgd ;};const _adae =57377;

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Eval evaluates and returns the result of a Negate expression.
func (_fdbb Negate )Eval (ctx Context ,ev Evaluator )Result {_adadg :=_fdbb ._cdfa .Eval (ctx ,ev );if _adadg .Type ==ResultTypeNumber {return MakeNumberResult (-_adadg .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};func _accab (_fddde string ,_bddc func (_bgef float64 )float64 )Function {return func (_gaecg []Result )Result {if len (_gaecg )!=1{return MakeErrorResult (_fddde +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bgdg :=_gaecg [0].AsNumber ();switch _bgdg .Type {case ResultTypeNumber :_affff :=_bddc (_bgdg .ValueNumber );if _a .IsNaN (_affff ){return MakeErrorResult (_fddde +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _a .IsInf (_affff ,0){return MakeErrorResult (_fddde +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _affff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_fddde +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_affff );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fddde +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _bgdg ;default:return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fddde ,_bgdg .Type ));};};};func (_egbe *Lexer )emit (_gbgea tokenType ,_fafe []byte ){if _bcba {_db .Println ("\u0065\u006d\u0069\u0074",_gbgea ,_febbg (string (_fafe )));};_egbe ._ddee <-&node {_gbgea ,string (_fafe )};};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ffdg :=_ge .Now ();_ ,_fbb :=_ffdg .Zone ();_afe :=_cgf +float64 (_ffdg .Unix ()+int64 (_fbb ))/86400;return MakeNumberResult (_afe );};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_ceeg .Lock ();defer _ceeg .Unlock ();if _dgade ,_cedbf :=_aafbd [name ];_cedbf {return _dgade ;};return nil ;};func _cgfdb (_deb ,_daae int64 )float64 {return float64 (int (0.5+float64 ((_daae -_deb )/86400)))};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func _abde (_bged ,_gcceb float64 )bool {return _a .Abs (_bged -_gcceb )< 1.0e-6};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_gg CellRef )Update (q *_cbe .UpdateQuery )Expression {if q .UpdateCurrentSheet {_gg ._fbc =_gcd (_gg ._fbc ,q );};return _gg ;};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gfcf :=args [0].AsNumber ();if _gfcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ddgc :=float64 (1);if _gfcf .ValueNumber < 0{_ddgc =-1;};if len (args )> 1{_geef :=args [1].AsNumber ();if _geef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddgc =_geef .ValueNumber ;};if _ddgc < 0&&_gfcf .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_a .Ceil (_gfcf .ValueNumber ));};_gcdd :=_gfcf .ValueNumber ;_gcdd ,_bacdc :=_a .Modf (_gcdd /_ddgc );if _bacdc > 0{_gcdd ++;};return MakeNumberResult (_gcdd *_ddgc );};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_cfgb :=MakeNumberResult (0);for _ ,_ffceg :=range args {_ffceg =_ffceg .AsNumber ();switch _ffceg .Type {case ResultTypeNumber :_cfgb .ValueNumber +=_ffceg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cfeg :=Sum (_ffceg .ListValues ());if _cfeg .Type !=ResultTypeNumber {return _cfeg ;};_cfgb .ValueNumber +=_cfeg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ffceg ;case ResultTypeEmpty :default:return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffceg .Type ));};};return _cfgb ;};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_cdfec :=1.0;for _ ,_daad :=range args {_daad =_daad .AsNumber ();switch _daad .Type {case ResultTypeNumber :_cdfec *=_daad .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bcgcg :=Product (_daad .ListValues ());if _bcgcg .Type !=ResultTypeNumber {return _bcgcg ;};_cdfec *=_bcgcg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _daad ;case ResultTypeEmpty :default:return MakeErrorResult (_db .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_daad .Type ));};};return MakeNumberResult (_cdfec );};

// Reference returns an invalid reference for String.
func (_gadgc String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update updates references in the PrefixExpr after removing a row/column.
func (_ggec PrefixExpr )Update (q *_cbe .UpdateQuery )Expression {_acffe :=_ggec ;_eegc :=_ggec ._cbdgg .String ();if _eegc ==q .SheetToUpdate {_ddcgd :=*q ;_ddcgd .UpdateCurrentSheet =true ;_acffe ._dgcgg =_ggec ._dgcgg .Update (&_ddcgd );};return _acffe ;};func _ced (_ee Result )bool {if _ee .Type ==ResultTypeString {return _ee .ValueString =="";};return _ee .ValueNumber ==0;};func (_daagf *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgafe :=args [0];switch _cgafe .Type {case ResultTypeError :return _cgafe ;case ResultTypeNumber ,ResultTypeString :return _abded (args [0]);case ResultTypeList :_eacc :=_cgafe .ValueList ;_ddeg :=[]Result {};for _ ,_agaa :=range _eacc {_feff :=_abded (_agaa );if _feff .Type ==ResultTypeError {return _feff ;};_ddeg =append (_ddeg ,_feff );};return MakeListResult (_ddeg );case ResultTypeArray :_gedb :=_cgafe .ValueArray ;_dabcc :=[][]Result {};for _ ,_ffgf :=range _gedb {_cffg :=[]Result {};for _ ,_ccbf :=range _ffgf {_fbgdb :=_abded (_ccbf );if _fbgdb .Type ==ResultTypeError {return _fbgdb ;};_cffg =append (_cffg ,_fbgdb );};_dabcc =append (_dabcc ,_cffg );};return MakeArrayResult (_dabcc );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_eggba PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_cdgc :=_eggba ._dcfab .Reference (ctx ,ev );_dacdf :=_eggba ._dggb .Reference (ctx ,ev );_cggee :=_eggba ._cdeea .Reference (ctx ,ev );switch _cdgc .Type {case ReferenceTypeSheet :if _cdbb (_cdgc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_db .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_cdgc .Value ));};_bdada :=_fgbf (_cdgc ,_dacdf ,_cggee );if _dacdf .Type ==ReferenceTypeCell &&_cggee .Type ==ReferenceTypeCell {if _cafc ,_dgecec :=ev .GetFromCache (_bdada );_dgecec {return _cafc ;}else {_cgbe :=_geceg (ctx .Sheet (_cdgc .Value ),ev ,_dacdf .Value ,_cggee .Value );ev .SetCache (_bdada ,_cgbe );return _cgbe ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bdada );default:return MakeErrorResult (_db .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdgc .Type ));};};

// Eval evaluates and returns the result of a function call.
func (_ebee FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_afga :=LookupFunction (_ebee ._ecfd );if _afga !=nil {_ecfbd :=make ([]Result ,len (_ebee ._ebdaa ));for _dfef ,_egbbb :=range _ebee ._ebdaa {_ecfbd [_dfef ]=_egbbb .Eval (ctx ,ev );_ecfbd [_dfef ].Ref =_egbbb .Reference (ctx ,ev );};if _ ,_cgced :=_cdgda [_ebee ._ecfd ];!_cgced {if _gegbe ,_cdbf :=_bfdcf (_ecfbd );_gegbe {return _cdbf ;};};return _afga (_ecfbd );};_cfce :=LookupFunctionComplex (_ebee ._ecfd );if _cfce !=nil {_gefdg :=make ([]Result ,len (_ebee ._ebdaa ));for _fdea ,_cdfdf :=range _ebee ._ebdaa {_gefdg [_fdea ]=_cdfdf .Eval (ctx ,ev );_gefdg [_fdea ].Ref =_cdfdf .Reference (ctx ,ev );};if _ ,_adbdd :=_cdgda [_ebee ._ecfd ];!_adbdd {if _ceeca ,_bcef :=_bfdcf (_gefdg );_ceeca {return _bcef ;};};return _cfce (ctx ,ev ,_gefdg );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_ebee ._ecfd );};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfeb :=args [0].ValueNumber ;if _gfeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfaa :=args [1].ValueNumber ;if _gfaa <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cggd :=args [2].ValueNumber ;if _cggd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_a .Log10 (_cggd )-_a .Log10 (_gfaa ))/_a .Log10 (1+_gfeb ));};type noCache struct{};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_geabd :=args [0].AsNumber ();if _geabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdgf :=args [1].AsNumber ();if _bdgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddbb :=int (_bdgf .ValueNumber );if _ddbb < 0||_ddbb > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_gbfb :=0;if len (args )> 2{_cbdg :=args [2].AsNumber ();if _cbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbfb =int (_cbdg .ValueNumber );};_fbfa :=_fc .FormatInt (int64 (_geabd .ValueNumber ),_ddbb );if len (_fbfa )< _gbfb {_fbfa =_dg .Repeat ("\u0030",_gbfb -len (_fbfa ))+_fbfa ;};return MakeStringResult (_fbfa );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_cfbg ,_dbad :=_fgab (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _dbad .Type ==ResultTypeError {return _dbad ;};_fda :=_dag (_cfbg ._aac );_cfcd :=_dag (_cfbg ._cfcf );_egc :=_cfbg ._agf ;_abgg :=_abe (_fda ,_cfcd ,_egc );_bcd ,_gfd ,_adac :=_abgg .Date ();return MakeNumberResult (_fabf (_bcd ,int (_gfd ),_adac ));};var _gbdbf =[...]int {1};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fafa :=_eegg (args );_f .Float64s (_fafa );var _bfbfg float64 ;if len (_fafa )%2==0{_bfbfg =(_fafa [len (_fafa )/2-1]+_fafa [len (_fafa )/2])/2;}else {_bfbfg =_fafa [len (_fafa )/2];};return MakeNumberResult (_bfbfg );};func _bfbec (_ebfg []Result ,_fdgc bool )(float64 ,float64 ){_ecbb :=0.0;_fbegg :=0.0;for _ ,_ddbf :=range _ebfg {switch _ddbf .Type {case ResultTypeNumber :if _fdgc ||!_ddbf .IsBoolean {_fbegg +=_ddbf .ValueNumber ;_ecbb ++;};case ResultTypeList ,ResultTypeArray :_gaebg ,_fcea :=_bfbec (_ddbf .ListValues (),_fdgc );_fbegg +=_gaebg ;_ecbb +=_fcea ;case ResultTypeString :if _fdgc {_ecbb ++;};case ResultTypeEmpty :};};return _fbegg ,_ecbb ;};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// String returns a string representation of ConstArrayExpr.
func (_aaa ConstArrayExpr )String ()string {return ""};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_dbfbg :=len (args );if _dbfbg < 5||_dbfbg > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fagb :=args [0].ValueNumber ;if _fagb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggfb :=args [1].ValueNumber ;if _ggfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgac :=args [2].ValueNumber ;if _dgac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _dgac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daag :=args [3].ValueNumber ;if _daag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdb :=args [4].ValueNumber ;if _daag > _cdb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _cdb > _dgac {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_dgcg :=2.0;if _dbfbg > 5{if args [5].Type ==ResultTypeEmpty {_dgcg =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgcg =args [5].ValueNumber ;if _dgcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_cffb :=false ;if _dbfbg > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cffb =args [6].ValueNumber !=0;};_aeef :=0.0;_eead :=_a .Floor (_daag );_bbca :=_a .Ceil (_cdb );if _cffb {for _cbgb :=_eead +1;_cbgb <=_bbca ;_cbgb ++{_bgfdg :=_dccc (_fagb ,_ggfb ,_dgac ,_cbgb ,_dgcg );if _cbgb ==_eead +1{_bgfdg *=_a .Min (_cdb ,_eead +1)-_daag ;}else if _cbgb ==_bbca {_bgfdg *=_cdb +1-_bbca ;};_aeef +=_bgfdg ;};}else {_gadf :=_dgac ;var _gedc float64 ;if !_abde (_daag ,_a .Floor (_daag )){if _dgcg ==1{_cfca :=_dgac /2;if _daag > _cfca ||_abde (_daag ,_cfca ){_gedc =_daag -_cfca ;_daag =_cfca ;_cdb -=_gedc ;_gadf ++;};};};if _dgcg !=0{_fagb -=_gdedc (_fagb ,_ggfb ,_dgac ,_gadf ,_daag ,_dgcg );};_aeef =_gdedc (_fagb ,_ggfb ,_dgac ,_dgac -_daag ,_cdb -_daag ,_dgcg );};return MakeNumberResult (_aeef );};func _abe (_dadd ,_acca _ge .Time ,_gfef int )_ge .Time {_bfae :=_ge .Date (_dadd .Year (),_acca .Month (),_acca .Day (),0,0,0,0,_ge .UTC );if _bfae .After (_dadd ){_bfae =_bfae .AddDate (-1,0,0);};for !_bfae .After (_dadd ){_bfae =_bfae .AddDate (0,12/_gfef ,0);};return _bfae ;};func _fdc (_fab BinOpType ,_eg []Result ,_deg Result )Result {_ea :=[]Result {};switch _deg .Type {case ResultTypeNumber :_ga :=_deg .ValueNumber ;for _fg :=range _eg {_ede :=_eg [_fg ].AsNumber ();if _ede .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fab {case BinOpTypePlus :_ea =append (_ea ,MakeNumberResult (_ede .ValueNumber +_ga ));case BinOpTypeMinus :_ea =append (_ea ,MakeNumberResult (_ede .ValueNumber -_ga ));case BinOpTypeMult :_ea =append (_ea ,MakeNumberResult (_ede .ValueNumber *_ga ));case BinOpTypeDiv :if _ga ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ea =append (_ea ,MakeNumberResult (_ede .ValueNumber /_ga ));case BinOpTypeExp :_ea =append (_ea ,MakeNumberResult (_a .Pow (_ede .ValueNumber ,_ga )));case BinOpTypeLT :_ea =append (_ea ,MakeBoolResult (_ede .ValueNumber < _ga ));case BinOpTypeGT :_ea =append (_ea ,MakeBoolResult (_ede .ValueNumber > _ga ));case BinOpTypeEQ :_ea =append (_ea ,MakeBoolResult (_ede .ValueNumber ==_ga ));case BinOpTypeLEQ :_ea =append (_ea ,MakeBoolResult (_ede .ValueNumber <=_ga ));case BinOpTypeGEQ :_ea =append (_ea ,MakeBoolResult (_ede .ValueNumber >=_ga ));case BinOpTypeNE :_ea =append (_ea ,MakeBoolResult (_ede .ValueNumber !=_ga ));default:return MakeErrorResult (_db .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fab ));};};case ResultTypeString :_cba :=_deg .ValueString ;for _aae :=range _eg {_cad :=_eg [_aae ].AsString ();if _cad .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fab {case BinOpTypeLT :_ea =append (_ea ,MakeBoolResult (_cad .ValueString < _cba ));case BinOpTypeGT :_ea =append (_ea ,MakeBoolResult (_cad .ValueString > _cba ));case BinOpTypeEQ :_ea =append (_ea ,MakeBoolResult (_cad .ValueString ==_cba ));case BinOpTypeLEQ :_ea =append (_ea ,MakeBoolResult (_cad .ValueString <=_cba ));case BinOpTypeGEQ :_ea =append (_ea ,MakeBoolResult (_cad .ValueString >=_cba ));case BinOpTypeNE :_ea =append (_ea ,MakeBoolResult (_cad .ValueString !=_cba ));default:return MakeErrorResult (_db .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fab ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_ea );};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dbgeb ,_bbfc :=_dacfg ("\u0046\u0049\u004e\u0044",args );if _bbfc .Type !=ResultTypeEmpty {return _bbfc ;};_baad :=_dbgeb ._aedab ;if _baad ==""{return MakeNumberResult (1.0);};_bgcb :=_dbgeb ._fdcfe ;_fcbbg :=_dbgeb ._ffef -1;_fceb :=1;_ceabb :=0;for _ggce :=range _bgcb {if _ggce !=0{_egdcb :=1;if _ggce -_ceabb > 1{_egdcb =2;};_fceb +=_egdcb ;};if _fceb > _fcbbg {_febe :=_dg .Index (_bgcb [_ggce :],_baad );if _febe ==0{return MakeNumberResult (float64 (_fceb ));};};_ceabb =_ggce ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _dbadd (_bfddf []Result ,_effe string )(float64 ,float64 ,Result ){if len (_bfddf )!=2{return 0,0,MakeErrorResult (_effe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bfddf [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_effe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fbd :=_bfddf [0].ValueNumber ;if _bfddf [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_effe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdgb :=float64 (int (_bfddf [1].ValueNumber ));if _fdgb < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_effe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _fbd ,_fdgb ,_cgac ;};type parsedReplaceObject struct{_fgbg string ;_bgddga int ;_bfdded int ;_afcef string ;};

// Update updates references in the Range after removing a row/column.
func (_dbag Range )Update (q *_cbe .UpdateQuery )Expression {_ddga :=_dbag ;if q .UpdateCurrentSheet {_ddga ._eeag =_dbag ._eeag .Update (q );_ddga ._caab =_dbag ._caab .Update (q );};return _ddga ;};

// Update returns the same object as updating sheet references does not affect String.
func (_ffbee String )Update (q *_cbe .UpdateQuery )Expression {return _ffbee };

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aabdd :=args [0].AsNumber ();if _aabdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _cacb float64 ;_fdabf :=args [1].AsNumber ();if _fdabf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cacb =_fdabf .ValueNumber ;if _cacb < 0&&_aabdd .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_edbee :=_aabdd .ValueNumber ;_edbee ,_gfga :=_a .Modf (_edbee /_cacb );if _gfga !=0{if _aabdd .ValueNumber < 0&&_gfga < 0{_edbee --;};};return MakeNumberResult (_edbee *_cacb );};const _gdg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acgd :=args [0];if _acgd .Type ==ResultTypeNumber {return _acgd ;};if _acgd .Type ==ResultTypeString {_cbbd ,_fcgf :=_fc .ParseFloat (_acgd .Value (),64);if _fcgf ==nil {return MakeNumberResult (_cbbd );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func _dd (_ae BinOpType ,_fdd [][]Result ,_bgb Result )Result {_bf :=[][]Result {};for _fba :=range _fdd {_gfe :=_fdc (_ae ,_fdd [_fba ],_bgb );if _gfe .Type ==ResultTypeError {return _gfe ;};_bf =append (_bf ,_gfe .ValueList );};return MakeArrayResult (_bf );};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_egag :=_dg .ToLower (args [0].ValueString );if !_ceb (_egag ){_ ,_ ,_ ,_dbdb ,_gee :=_fdbg (_egag );if _gee .Type ==ResultTypeError {_gee .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _gee ;};if _dbdb {return MakeNumberResult (0);};};_ffcc ,_gca ,_ffg ,_agg ,_ ,_bbc :=_ada (_egag );if _bbc .Type ==ResultTypeError {return _bbc ;};_ggb :=_fed (float64 (_ffcc ),float64 (_gca ),_ffg );if _agg {_ggb +=0.5;}else if _ggb >=1{_ggb -=float64 (int (_ggb ));};return MakeNumberResult (_ggb );};const _dedcd =57364;const _aec ="\u0028\u0020\u0028"+_ddb +"\u007c"+_geg +"\u007c"+_ac +"\u007c"+_afd +"\u0029\u0029\u003f\u0024";var _fgcae =[...]int {0};

// Eval evaluates and returns the result of an error expression.
func (_cff Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_cff ._feb )};type ri struct{_fccfg float64 ;_cgceb string ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_eba ,_ebeg :=_bfdd (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _ebeg .Type ==ResultTypeError {return _ebeg ;};_bcca :=_eba ._cgb ;_aeda :=_eba ._gfbg ;_decf :=_eba ._agd ;_acaf :=_eba ._fdad ;_dccf :=_eba ._bgfa ;_ace :=_eba ._feea ;return _defa (_bcca ,_aeda ,_decf ,_acaf ,_dccf ,_ace );};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_bgfc :=len (args );if _bgfc !=6&&_bgfc !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fggcb ,_gcaa ,_ecgf :=_ffcca (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _ecgf .Type ==ResultTypeError {return _ecgf ;};_becd :=args [2];if _becd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gead :=_becd .ValueNumber ;if _gead < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_geab :=args [3];if _geab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbbb :=_geab .ValueNumber ;if _dbbb <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_cfdff :=args [4];if _cfdff .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_fgde :=_cfdff .ValueNumber ;if _fgde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fgcc :=args [5];if _fgcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgcf :=float64 (int (_fgcc .ValueNumber ));if !_bccf (_fgcf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_befa :=0;if _bgfc ==7&&args [6].Type !=ResultTypeEmpty {_fcca :=args [6];if _fcca .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_befa =int (_fcca .ValueNumber );if !_dccd (_befa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_egf :=0.0;_bcab :=0.0;_cggg :=1.0;_fafd ,_ecgf :=_gcff (_fggcb ,_gcaa ,_gead ,_bcab ,_fgde ,_fgcf ,_befa );if _ecgf .Type ==ResultTypeError {return _ecgf ;};_fced ,_ecgf :=_gcff (_fggcb ,_gcaa ,_gead ,_cggg ,_fgde ,_fgcf ,_befa );if _ecgf .Type ==ResultTypeError {return _ecgf ;};_egba :=(_cggg -_bcab )*0.5;for _gafdf :=0;_gafdf < 100&&_egf !=_dbbb ;_gafdf ++{_egf ,_ecgf =_gcff (_fggcb ,_gcaa ,_gead ,_egba ,_fgde ,_fgcf ,_befa );if _ecgf .Type ==ResultTypeError {return _ecgf ;};if _dbbb ==_fafd {return MakeNumberResult (_bcab );}else if _dbbb ==_fced {return MakeNumberResult (_cggg );}else if _dbbb ==_egf {return MakeNumberResult (_egba );}else if _dbbb < _fced {_cggg *=2.0;_fced ,_ecgf =_gcff (_fggcb ,_gcaa ,_gead ,_cggg ,_fgde ,_fgcf ,_befa );if _ecgf .Type ==ResultTypeError {return _ecgf ;};_egba =(_cggg -_bcab )*0.5;}else {if _dbbb < _egf {_bcab =_egba ;_fafd =_egf ;}else {_cggg =_egba ;_fced =_egf ;};_egba =_cggg -(_cggg -_bcab )*((_dbbb -_fced )/(_fafd -_fced ));};};return MakeNumberResult (_egba );};func (_dceg *ivr )SetOffset (col ,row uint32 ){};

// Update updates the FunctionCall references after removing a row/column.
func (_afeed FunctionCall )Update (q *_cbe .UpdateQuery )Expression {_ddcgc :=[]Expression {};for _ ,_bebfa :=range _afeed ._ebdaa {_gffdg :=_bebfa .Update (q );_ddcgc =append (_ddcgc ,_gffdg );};return FunctionCall {_ecfd :_afeed ._ecfd ,_ebdaa :_ddcgc };};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_cce :=len (args );if (_cce !=2&&_cce !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_deec :=0;if _cce ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_deec =int (args [2].ValueNumber );if !_dccd (_deec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gda :=args [1].ValueNumber ;_cacc ,_baa :=_bece (_afb ,_gda ,_deec );if _baa .Type ==ResultTypeError {return _baa ;};return MakeNumberResult (_cacc );};func _bccf (_bgcd float64 )bool {return _bgcd ==1||_bgcd ==2||_bgcd ==4};func _af (_de BinOpType ,_fec ,_cbef [][]Result )Result {_gb :=[][]Result {};for _bg :=range _fec {_fb :=_aa (_de ,_fec [_bg ],_cbef [_bg ]);if _fb .Type ==ResultTypeError {return _fb ;};_gb =append (_gb ,_fb .ValueList );};return MakeArrayResult (_gb );};

// Reference returns a string reference value to a vertical range with prefix.
func (_eagd PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_cfbff :=_eagd ._gfed .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_eagd .verticalRangeReference (_cfbff .Value )};};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcfd :=args [0].AsString ();if _gcfd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbgdg :=_e .Buffer {};for _ ,_acee :=range _gcfd .ValueString {if _ce .IsPrint (_acee ){_gbgdg .WriteRune (_acee );};};return MakeStringResult (_gbgdg .String ());};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _ccgc (args ,false )};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_caefb :=args [0].AsString ();if _caefb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_daecd :=_e .Buffer {};_eefff :=false ;for _ ,_cccb :=range _caefb .ValueString {if !_eefff &&_ce .IsLetter (_cccb ){_daecd .WriteRune (_ce .ToUpper (_cccb ));}else {_daecd .WriteRune (_ce .ToLower (_cccb ));};_eefff =_ce .IsLetter (_cccb );};return MakeStringResult (_daecd .String ());};const _gdbfe =57369;

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bgce :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_bgce *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_gfag :=_agcd (args [1]);for _ ,_gabb :=range _gfag {for _ ,_ggf :=range _gabb {if _ggf .Type !=ResultTypeNumber ||_ggf .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_bgce *=1.0+_ggf .ValueNumber ;};};return MakeNumberResult (_bgce );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};func _gcd (_edg string ,_egb *_cbe .UpdateQuery )string {_dea ,_ba :=_cg .ParseCellReference (_edg );if _ba !=nil {return "\u0023\u0052\u0045F\u0021";};if _egb .UpdateType ==_cbe .UpdateActionRemoveColumn {_bgd :=_egb .ColumnIdx ;_gbf :=_dea .ColumnIdx ;if _gbf < _bgd {return _edg ;}else if _gbf ==_bgd {return "\u0023\u0052\u0045F\u0021";}else {return _dea .Update (_cbe .UpdateActionRemoveColumn ).String ();};};return _edg ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_fbdba :=_dg .Split (v ,"\u003a");if len (_fbdba )!=2{return nil ;};_ebbgd ,_ :=_fc .Atoi (_fbdba [0]);_dfddg ,_ :=_fc .Atoi (_fbdba [1]);if _ebbgd > _dfddg {_ebbgd ,_dfddg =_dfddg ,_ebbgd ;};return PrefixHorizontalRange {_gbefd :pfx ,_dgfd :_ebbgd ,_ggae :_dfddg };};func _fcdc (_eega Result ,_bcace ,_cceb string )(string ,Result ){switch _eega .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _eega .Value (),_cgac ;default:return "",MakeErrorResult (_bcace +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_cceb +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_fbcf ,_faeca ,_gefe :=_dbadd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _gefe .Type ==ResultTypeError {return _gefe ;};if _faeca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fbcf ==0{return MakeNumberResult (0);};_acdca :=_fbcf < 0;if _acdca {_fbcf =-_fbcf ;};_dgbb :=float64 (int (_fbcf ));_bdcd :=args [0].Value ();_eace :=_dg .Split (_bdcd ,"\u002e");_cgacb :=0.0;if len (_eace )> 1{var _cbdb error ;_efaf :=_eace [1];_cgacb ,_cbdb =_fc .ParseFloat (_efaf ,64);if _cbdb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_fgcb :=float64 (len (_efaf ));_cgacb /=_a .Pow (10,_fgcb );};_efea :=_cgacb *_faeca /_a .Pow (10,float64 (int (_a .Log10 (_faeca )))+1)+_dgbb ;if _acdca {_efea =-_efea ;};return MakeNumberResult (_efea );};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_fadc :=_gdbdc (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _fadc .Type !=ResultTypeEmpty {return _fadc ;};_eaag :=_baaff (args );return MakeNumberResult (float64 (len (_eaag )));};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_aga :=&defEval {};_aga .evCache =_beg ();return _aga };

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bbga :=[]float64 {};for _ ,_dcdca :=range args {switch _dcdca .Type {case ResultTypeString :_ccdde :=_dcdca .AsNumber ();if _ccdde .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bbga =append (_bbga ,_ccdde .ValueNumber );case ResultTypeList :_acff :=LCM (_dcdca .ValueList );if _acff .Type !=ResultTypeNumber {return _acff ;};_bbga =append (_bbga ,_acff .ValueNumber );case ResultTypeNumber :_bbga =append (_bbga ,_dcdca .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _dcdca ;};};if len (_bbga )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _bbga [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_bbga )==1{return MakeNumberResult (_bbga [0]);};_ffead :=_bbga [0];for _gccee :=1;_gccee < len (_bbga );_gccee ++{if _bbga [_gccee ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ffead =_gdfdf (_ffead ,_bbga [_gccee ]);};return MakeNumberResult (_ffead );};type plex struct{_daaab chan *node ;_dacfb Expression ;_dgeg string ;};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_bcbg ,_bcc :=_fgab (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _bcc .Type ==ResultTypeError {return _bcc ;};return MakeNumberResult (_dca (_bcbg ._aac ,_bcbg ._cfcf ,_bcbg ._agf ,_bcbg ._bae ));};

// String returns a string representation of a vertical range with prefix.
func (_cccca PrefixVerticalRange )String ()string {return _db .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cccca ._gfed .String (),_cccca ._ddbg ,_cccca ._ccef );};var _cgf float64 =25569.0;

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebbe ,_bbe ,_dada :=_ffcca (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _dada .Type ==ResultTypeError {return _dada ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baaba :=_bbe -_ebbe ;if _baaba > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_abaa :=args [2].ValueNumber ;if _abaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_abaa )/(360-_abaa *_baaba ));};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_addd .Float64 ());};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_egfd ,_eaeae :=_fc .ParseFloat (v ,64);if _eaeae !=nil {_fcb .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_eaeae );};return Number {_bbabg :_egfd };};var _cgac Result =MakeEmptyResult ();

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfdbd :=args [0].AsString ();if _dfdbd .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_dfdbd .ValueString ,ev );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ffeag :=args [0].Ref ;for _ffeag .Type ==ReferenceTypeNamedRange {_ffeag =ctx .NamedRange (_ffeag .Value );};_ebdf :="";switch _ffeag .Type {case ReferenceTypeCell :_ebdf =_ffeag .Value ;case ReferenceTypeRange :_dcgf :=_dg .Split (_ffeag .Value ,"\u003a");if len (_dcgf )==2{_ebdf =_dcgf [0];};default:return MakeErrorResult (_db .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_ffeag .Type ));};_dcae ,_ffdf :=_cg .ParseCellReference (_ebdf );if _ffdf !=nil {return MakeErrorResult (_db .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_ffdf .Error ()));};_fbbd ,_dfffa ,_gegb :=_dcae .Column ,_dcae .RowIdx ,_dcae .SheetName ;_bbbb :=args [1].AsNumber ();if _bbbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_agbca :=args [2].AsNumber ();if _agbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _ebedg ,_fcbb Result ;if len (args )==3{_ebedg =MakeNumberResult (1);_fcbb =MakeNumberResult (1);}else {_ebedg =args [3].AsNumber ();if _ebedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _ebedg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_fcbb =args [4].AsNumber ();if _fcbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _fcbb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_dcbb :=_cg .ColumnToIndex (_fbbd );_edae :=_dfffa +uint32 (_bbbb .ValueNumber );_cagef :=_dcbb +uint32 (_agbca .ValueNumber );_efae :=_edae +uint32 (_ebedg .ValueNumber );_fffgg :=_cagef +uint32 (_fcbb .ValueNumber );if _ebedg .ValueNumber > 0{_efae --;}else {_efae ++;_edae ,_efae =_efae ,_edae ;};if _fcbb .ValueNumber > 0{_fffgg --;}else {_fffgg ++;_cagef ,_fffgg =_fffgg ,_cagef ;};_debd :=_db .Sprintf ("\u0025\u0073\u0025\u0064",_cg .IndexToColumn (_cagef ),_edae );_abbf :=_db .Sprintf ("\u0025\u0073\u0025\u0064",_cg .IndexToColumn (_fffgg ),_efae );if _gegb ==""{return _geceg (ctx ,ev ,_debd ,_abbf );}else {return _geceg (ctx .Sheet (_gegb ),ev ,_debd ,_abbf );};};type evCache struct{_fgg map[string ]Result ;_abg *_fe .Mutex ;};const _gaeec ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_gfed Expression ;_ddbg ,_ccef string ;};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agdc ,_baaa ,_ddfa :=_ffcca (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _ddfa .Type ==ResultTypeError {return _ddfa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbdff :=_baaa -_agdc ;if _cbdff > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_fegg :=args [2].ValueNumber ;if _fegg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebgbe :=(100-_fegg )/_fegg ;_cddd :=360/_cbdff ;return MakeNumberResult (_ebgbe *_cddd );};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dfeaf :=args [0];if _dfeaf .Type !=ResultTypeArray &&_dfeaf .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abdf :=_dfeaf .ValueArray ;if len (_abdf )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_abdf [0])));};func _geceg (_gcceg Context ,_cegba Evaluator ,_befg ,_adedf string )Result {_efeaac ,_eebe :=_cg .ParseCellReference (_befg );if _eebe !=nil {return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_befg ,_eebe .Error ()));};_cccf ,_fdcdc :=_efeaac .ColumnIdx ,_efeaac .RowIdx ;_cdagd ,_eaedc :=_cg .ParseCellReference (_adedf );if _eaedc !=nil {return MakeErrorResult (_db .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_adedf ,_eaedc .Error ()));};_adgadd ,_dbcg :=_cdagd .ColumnIdx ,_cdagd .RowIdx ;_bfgae :=[][]Result {};for _acgc :=_fdcdc ;_acgc <=_dbcg ;_acgc ++{_ggfee :=[]Result {};for _edagf :=_cccf ;_edagf <=_adgadd ;_edagf ++{_dffa :=_gcceg .Cell (_db .Sprintf ("\u0025\u0073\u0025\u0064",_cg .IndexToColumn (_edagf ),_acgc ),_cegba );_ggfee =append (_ggfee ,_dffa );};_bfgae =append (_bfgae ,_ggfee );};if len (_bfgae )==1{if len (_bfgae [0])==1{return _bfgae [0][0];};return MakeListResult (_bfgae [0]);};return MakeArrayResult (_bfgae );};const _dbbce =2;const _afd ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_aebd :=len (args );if _aebd < 3||_aebd > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_agag :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aggc :=args [1].ValueNumber ;if _aggc ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fggc :=args [2].ValueNumber ;_eag :=0.0;if _aebd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eag =args [3].ValueNumber ;};_bceg :=0.0;if _aebd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bceg =args [4].ValueNumber ;if _bceg !=0{_bceg =1;};};var _gfaf float64 ;if _agag ==0{_gfaf =(_fggc +_eag )/_aggc ;}else {_aeagf :=_a .Pow (1+_agag ,_aggc );if _bceg ==1{_gfaf =(_eag *_agag /(_aeagf -1)+_fggc *_agag /(1-1/_aeagf ))/(1+_agag );}else {_gfaf =_eag *_agag /(_aeagf -1)+_fggc *_agag /(1-1/_aeagf );};};return MakeNumberResult (-_gfaf );};func _beg ()evCache {_bda :=evCache {};_bda ._fgg =make (map[string ]Result );_bda ._abg =&_fe .Mutex {};return _bda ;};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// GetEpoch returns a null time object for the invalid reference context.
func (_fggde *ivr )GetEpoch ()_ge .Time {return _ge .Time {}};func _cbeeg (_gdgbf []Result )(float64 ,float64 ,Result ){_gcdcd :=0.0;_acac :=1.0;for _ ,_afcfa :=range _gdgbf {switch _afcfa .Type {case ResultTypeNumber :_gcdcd +=_afcfa .ValueNumber ;_acac *=_gafdb (_afcfa .ValueNumber );case ResultTypeList ,ResultTypeArray :_bdbgb ,_bcee ,_gaadd :=_cbeeg (_afcfa .ListValues ());_gcdcd +=_bdbgb ;_acac *=_gafdb (_bcee );if _gaadd .Type ==ResultTypeError {return 0,0,_gaadd ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_afcfa ;};};return _gcdcd ,_acac ,_cgac ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_ffgcf ,_gaebb :=_dbgeba ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _gaebb .Type !=ResultTypeEmpty {return _gaebb ;};_dgece :=_ffgcf ._fgbg ;_dffeb :=_ffgcf ._bgddga ;_bfaef :=_ffgcf ._bfdded ;_fedb :=_ffgcf ._afcef ;_bdff :=len (_dgece );if _dffeb > _bdff {_dffeb =_bdff ;};_babb :=_dffeb +_bfaef ;if _babb > _bdff {_babb =_bdff ;};_ddec :=_dgece [0:_dffeb ]+_fedb +_dgece [_babb :];return MakeStringResult (_ddec );};const _adgad =57375;

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ccfd :=args [0];if _ccfd .Type ==ResultTypeList {_bafa :=[][]Result {};for _ ,_fdfa :=range _ccfd .ValueList {_bafa =append (_bafa ,[]Result {_fdfa });};return MakeArrayResult (_bafa );};_eeac :=make ([][]Result ,len (_ccfd .ValueArray [0]));for _ ,_agge :=range _ccfd .ValueArray {for _fbcb ,_dadde :=range _agge {_eeac [_fbcb ]=append (_eeac [_fbcb ],_dadde );};};return MakeArrayResult (_eeac );};func (_bagb ReferenceType )String ()string {if _bagb >=ReferenceType (len (_daecb )-1){return _db .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bagb );};return _gaeec [_daecb [_bagb ]:_daecb [_bagb +1]];};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_cdef :=len (args );if _cdef !=5&&_cdef !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_babc ,_gdaea ,_aacb :=_ffcca (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _aacb .Type ==ResultTypeError {return _aacb ;};_acfdd ,_aacb :=_gddb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _aacb .Type ==ResultTypeError {return _aacb ;};if _acfdd >=_babc {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cecge :=args [3].ValueNumber ;if _cecge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbda :=args [4].ValueNumber ;if _gbda <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_ffeab :=0;if _cdef ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffeab =int (args [5].ValueNumber );if !_dccd (_ffeab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_ebbc ,_aacb :=_bece (_acfdd ,_gdaea ,_ffeab );if _aacb .Type ==ResultTypeError {return _aacb ;};_aeaa ,_aacb :=_bece (_acfdd ,_babc ,_ffeab );if _aacb .Type ==ResultTypeError {return _aacb ;};_fecda ,_aacb :=_bece (_babc ,_gdaea ,_ffeab );if _aacb .Type ==ResultTypeError {return _aacb ;};_egff :=1+_ebbc *_cecge ;_egff /=_gbda /100+_aeaa *_cecge ;_egff --;_egff /=_fecda ;return MakeNumberResult (_egff );};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_fcbgf NamedRangeRef )Update (q *_cbe .UpdateQuery )Expression {return _fcbgf };type countMode byte ;func _cf (_fea ,_cc [][]Result )bool {if len (_fea )!=len (_cc ){return false ;};for _gf :=range _fea {if len (_fea [_gf ])!=len (_cc [_gf ]){return false ;};};return true ;};func _gcff (_befe ,_gadg ,_daea ,_agbc ,_fddc ,_gdbd float64 ,_cggc int )(float64 ,Result ){_fca :=int (_gdbd );_gaff :=_fdcg (_befe ,_gadg ,_fca ,_cggc );_eege :=_dca (_befe ,_gadg ,_fca ,_cggc )/_gaff ;_dbdgf ,_dgdge :=_fadda (_befe ,_gadg ,_fca ,_cggc );if _dgdge .Type ==ResultTypeError {return 0,_dgdge ;};_bcec :=_bfag (_befe ,_gadg ,_fca ,_cggc );_efeaa :=_fddc /_a .Pow (1+_agbc /_gdbd ,_dbdgf -1+_eege );_efeaa -=100*_daea /_gdbd *_bcec /_gaff ;_dbgeg :=100*_daea /_gdbd ;_adbf :=1+_agbc /_gdbd ;for _bccac :=0.0;_bccac < _dbdgf ;_bccac ++{_efeaa +=_dbgeg /_a .Pow (_adbf ,_bccac +_eege );};return _efeaa ,MakeEmptyResult ();};

// String returns a string representation of a named range.
func (_gggg NamedRangeRef )String ()string {return _gggg ._bdfc };

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _edece (args ,_geeb )};func _abad (_abcc [][]Result )float64 {if len (_abcc )==2{_bcde :=_abcc [0][0].AsNumber ();_fdbe :=_abcc [0][1].AsNumber ();_cfeb :=_abcc [1][0].AsNumber ();_fdce :=_abcc [1][1].AsNumber ();if _bcde .Type !=ResultTypeNumber ||_fdbe .Type !=ResultTypeNumber ||_cfeb .Type !=ResultTypeNumber ||_fdce .Type !=ResultTypeNumber {return _a .NaN ();};return _bcde .ValueNumber *_fdce .ValueNumber -_cfeb .ValueNumber *_fdbe .ValueNumber ;};_bgbf :=float64 (0);_dbgfe :=float64 (1);for _dfgd :=range _abcc {_bgbf +=_dbgfe *_abcc [0][_dfgd ].ValueNumber *_abad (_cbeea (_abcc ,_dfgd ));_dbgfe *=-1;};return _bgbf ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// Reference returns a string reference value to a horizontal range.
func (_dgbc HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dgbc .horizontalRangeReference ()};};

// Eval evaluates and returns an expression with prefix.
func (_ccgf PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_fcbe :=_ccgf ._cbdgg .Reference (ctx ,ev );switch _fcbe .Type {case ReferenceTypeSheet :if _cdbb (_fcbe ,ctx ){return MakeErrorResultType (ErrorTypeName ,_db .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fcbe .Value ));};_bcece :=ctx .Sheet (_fcbe .Value );return _ccgf ._dgcgg .Eval (_bcece ,ev );default:return MakeErrorResult (_db .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcbe .Type ));};};func _beac (_fdcgg ,_adcef []float64 ,_beag float64 )float64 {_bacb :=_beag +1;_feeg :=_fdcgg [0];_egd :=len (_fdcgg );_fbeg :=_adcef [0];for _gaccd :=1;_gaccd < _egd ;_gaccd ++{_feeg +=_fdcgg [_gaccd ]/_a .Pow (_bacb ,(_adcef [_gaccd ]-_fbeg )/365);};return _feeg ;};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_bggf :=_dg .Split (v ,"\u003a");if len (_bggf )!=2{return nil ;};if _bggf [0]> _bggf [1]{_bggf [0],_bggf [1]=_bggf [1],_bggf [0];};return VerticalRange {_eaagb :_bggf [0],_bcdg :_bggf [1]};};func _dfda (){_cfdg =_cb .MustCompile ("\u005e\u0030\u002b\u0024");_accg =_cb .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_gbff =_cb .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_efegf =_cb .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_bdbgg =_cb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_aebda =_cb .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_bddae =_cb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_cgga =_cb .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_fecf =_cb .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_aafe =_cb .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_gbcd =_cb .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_ddef =_cb .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fcbd +_fcbd +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fcbd +_fcbd +"\u0029\u002b\u0059+\u0024");_fcge =_cb .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_fcbd +_fcbd +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_fcbd +_fcbd +"\u0029\u002b\u0059+\u0024");_bdcg =_cb .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_afcf =_cb .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_gec :lhs ,_da :rhs ,_ag :op };};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gabd :=args [0];switch _gabd .Type {case ResultTypeError :return _gabd ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gabd .ValueNumber !=0);};if _gabd .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _egbad (args );case ResultTypeArray :return _baeg (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbgd :=args [0].Ref ;if _gbgd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_aecg ,_adgea :=_cg .ParseCellReference (_gbgd .Value );if _adgea !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gbgd .Value );};return MakeNumberResult (float64 (_aecg .ColumnIdx +1));};const _fcdf int =0;func _bfgg (_gfagf string )*criteriaRegex {_adda :=&criteriaRegex {};if _gfagf ==""{return _adda ;};if _gffe :=_ffca .FindStringSubmatch (_gfagf );len (_gffe )> 1{_adda ._egcd =_dcfa ;_adda ._bgdde =_gffe [1];}else if _eaefb :=_caed .FindStringSubmatch (_gfagf );len (_eaefb )> 1{_adda ._egcd =_dcfa ;_adda ._bgdde =_eaefb [1];}else if _dface :=_gbbd .FindStringSubmatch (_gfagf );len (_dface )> 1{_adda ._egcd =_bfec ;_adda ._bgdde =_dface [1];}else if _beefa :=_bbbd .FindStringSubmatch (_gfagf );len (_beefa )> 1{_adda ._egcd =_dbdba ;_adda ._bgdde =_beefa [1];}else if _eaafd :=_agbe .FindStringSubmatch (_gfagf );len (_eaafd )> 1{_adda ._egcd =_fegf ;_adda ._bgdde =_eaafd [1];}else if _cfec :=_aegg .FindStringSubmatch (_gfagf );len (_cfec )> 1{_adda ._egcd =_gbab ;_adda ._bgdde =_cfec [1];};return _adda ;};func _dccc (_gbac ,_agbg ,_ccdb ,_cfaf ,_cead float64 )float64 {var _ggga float64 ;_cddc :=_cead /_ccdb ;if _cddc >=1{_cddc =1;if _cfaf ==1{_ggga =_gbac ;}else {_ggga =0;};}else {_ggga =_gbac *_a .Pow (1-_cddc ,_cfaf -1);};_adbfe :=_gbac *_a .Pow (1-_cddc ,_cfaf );var _cgcf float64 ;if _adbfe < _agbg {_cgcf =_ggga -_agbg ;}else {_cgcf =_ggga -_adbfe ;};if _cgcf < 0{_cgcf =0;};return _cgcf ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};const _bbgd =57371;func _fgbf (_daddf ,_cega ,_gcgf Reference )string {return _db .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_daddf .Value ,_cega .Value ,_gcgf .Value );};type durationArgs struct{_cgb float64 ;_gfbg float64 ;_agd float64 ;_fdad float64 ;_bgfa float64 ;_feea int ;};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgd :=args [0];switch _cgd .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_aca :=_dag (_cgd .ValueNumber );return MakeNumberResult (float64 (_aca .Minute ()));case ResultTypeString :_dcd :=_dg .ToLower (_cgd .ValueString );if !_ceb (_dcd ){_ ,_ ,_ ,_dcde ,_aaf :=_fdbg (_dcd );if _aaf .Type ==ResultTypeError {_aaf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _aaf ;};if _dcde {return MakeNumberResult (0);};};_ ,_gabf ,_ ,_ ,_ ,_affg :=_ada (_dcd );if _affg .Type ==ResultTypeError {return _affg ;};return MakeNumberResult (float64 (_gabf ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};var _dacc =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _gdfe =57373;

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_aeba :=len (args );if _aeba !=2&&_aeba !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_faeg ,_cage :=_dacf (args [0],args [1],"\u0058\u0049\u0052\u0052");if _cage .Type ==ResultTypeError {return _cage ;};_dgba :=_faeg ._edbfe ;_fdbgg :=_faeg ._feaa ;_ffee :=0.1;if _aeba ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffee =args [2].ValueNumber ;if _ffee <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _bgaf (_dgba ,_fdbgg ,_ffee );};

// Reference returns a string reference value to a sheet.
func (_gcddg SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_gcddg ._bbcc };};