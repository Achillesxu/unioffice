//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_ef "bytes";_d "errors";_b "fmt";_ba "github.com/unidoc/unioffice/common/logger";_dc "github.com/unidoc/unioffice/internal/mergesort";_f "github.com/unidoc/unioffice/internal/wildcard";_ed "github.com/unidoc/unioffice/spreadsheet/format";
_gg "github.com/unidoc/unioffice/spreadsheet/reference";_ge "github.com/unidoc/unioffice/spreadsheet/update";_e "io";_ac "math";_bd "math/big";_eee "math/rand";_ec "regexp";_ee "sort";_eed "strconv";_dd "strings";_g "sync";_dgg "time";_dg "unicode";);

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cabb :=args [0].AsString ();if _cabb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccged :=_ef .Buffer {};for _ ,_cdaea :=range _cabb .ValueString {if _dg .IsPrint (_cdaea ){_ccged .WriteRune (_cdaea );};};return MakeStringResult (_ccged .String ());};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agce :=[]float64 {};
for _ ,_bedea :=range args {switch _bedea .Type {case ResultTypeString :_ddabb :=_bedea .AsNumber ();if _ddabb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_agce =append (_agce ,_ddabb .ValueNumber );case ResultTypeList :_acbgf :=LCM (_bedea .ValueList );if _acbgf .Type !=ResultTypeNumber {return _acbgf ;};_agce =append (_agce ,_acbgf .ValueNumber );case ResultTypeNumber :_agce =append (_agce ,_bedea .ValueNumber );
case ResultTypeEmpty :case ResultTypeError :return _bedea ;};};if len (_agce )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if _agce [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_agce )==1{return MakeNumberResult (_agce [0]);
};_ggcb :=_agce [0];for _geddg :=1;_geddg < len (_agce );_geddg ++{if _agce [_geddg ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ggcb =_faaa (_ggcb ,_agce [_geddg ]);};return MakeNumberResult (_ggcb );};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_fcde :=len (args );if _fcde < 4||_fcde > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eegd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cebe :=args [1].ValueNumber ;if _cebe <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dece :=args [2].ValueNumber ;if _dece < _cebe {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_edae :=args [3].ValueNumber ;_fbd :=0.0;if _fcde >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fbd =args [4].ValueNumber ;};_ddgb :=0;if _fcde ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ddgb =int (args [5].ValueNumber );if _ddgb !=0{_ddgb =1;};};return MakeNumberResult (_effa (_eegd ,_dece ,_edae ,_fbd ,_ddgb )-_ffag (_eegd ,_cebe ,_dece ,_edae ,_fbd ,_ddgb ));};

// Update updates references in the Negate after removing a row/column.
func (_bcbda Negate )Update (q *_ge .UpdateQuery )Expression {return Negate {_aaeg :_bcbda ._aaeg .Update (q )};};var _ffaba =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
const (_dege countMode =iota ;_afeda ;_fgga ;);

// GetEpoch returns a null time object for the invalid reference context.
func (_dbcd *ivr )GetEpoch ()_dgg .Time {return _dgg .Time {}};var _feb =[]*_ec .Regexp {};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_ddeee :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cced :=args [2].ValueNumber +1;if _cced ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cfbc :=_ecfd (args [0]);_ebfa :=float64 (len (_cfbc ));_bbff ,_cfgg :=0.0,0.0;_edac ,_add :=1.0,1.0;_faab ,_ccdb :=false ,false ;for _ ,_caaf :=range _cfbc {for _ ,_fdae :=range _caaf {if _fdae .Type ==ResultTypeNumber &&!_fdae .IsBoolean {_abeb :=_fdae .ValueNumber ;
if _abeb ==0{continue ;}else {if _abeb > 0{_faab =true ;_cfgg +=_fdae .ValueNumber *_add ;}else {_ccdb =true ;_bbff +=_fdae .ValueNumber *_edac ;};_edac /=_ddeee ;_add /=_cced ;};};};};if !_faab ||!_ccdb {return MakeErrorResultType (ErrorTypeDivideByZero ,"");
};_cefg :=-_cfgg /_bbff ;_cefg *=_ac .Pow (_cced ,_ebfa -1);_cefg =_ac .Pow (_cefg ,1/(_ebfa -1));return MakeNumberResult (_cefg -1);};var _dgb =map[string ]*_ec .Regexp {};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_dd .NewReader (s ));};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_ddg :=len (args );if _ddg < 4||_ddg > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fcef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbdf :=args [1].ValueNumber ;if _cbdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbde :=args [2].ValueNumber ;if _bbde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bged :=args [3].ValueNumber ;_cbcd :=0.0;if _ddg > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cbcd =args [4].ValueNumber ;};_afeb :=0;if _ddg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_afeb =int (args [5].ValueNumber );if _afeb !=0{_afeb =1;};};return MakeNumberResult (_ffag (_fcef ,_cbdf ,_bbde ,_bged ,_cbcd ,_afeb ));};var _badd =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};
const _fcb ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
func _dcde (_deed string )*criteriaRegex {_gcea :=&criteriaRegex {};if _deed ==""{return _gcea ;};if _dccef :=_gdag .FindStringSubmatch (_deed );len (_dccef )> 1{_gcea ._gefgg =_ababb ;_gcea ._dbeb =_dccef [1];}else if _eeefe :=_fbac .FindStringSubmatch (_deed );
len (_eeefe )> 1{_gcea ._gefgg =_ababb ;_gcea ._dbeb =_eeefe [1];}else if _fbde :=_ddae .FindStringSubmatch (_deed );len (_fbde )> 1{_gcea ._gefgg =_ecgae ;_gcea ._dbeb =_fbde [1];}else if _eecc :=_fbcb .FindStringSubmatch (_deed );len (_eecc )> 1{_gcea ._gefgg =_gedg ;
_gcea ._dbeb =_eecc [1];}else if _fbbea :=_faag .FindStringSubmatch (_deed );len (_fbbea )> 1{_gcea ._gefgg =_cgee ;_gcea ._dbeb =_fbbea [1];}else if _beaf :=_ccbd .FindStringSubmatch (_deed );len (_beaf )> 1{_gcea ._gefgg =_caag ;_gcea ._dbeb =_beaf [1];
};return _gcea ;};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dfdc :=args [0].Ref ;
if _dfdc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");
};_egfc ,_fdfga :=_gg .ParseCellReference (_dfdc .Value );if _fdfga !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dfdc .Value );};return MakeNumberResult (float64 (_egfc .ColumnIdx +1));
};var _fafe =map[string ]*_ec .Regexp {};var _ccgc =[...]int {0};const _feddf =57373;

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Eval evaluates and returns the result of the cell reference.
func (_geb CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_geb ._aea ,ev )};

// GetLocked returns FALSE for the invalid reference context.
func (_gfggb *ivr )GetLocked (cellRef string )bool {return false };

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ffb :=args [0].ValueNumber ;if _ffb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};_ddgd ,_bdbgc :=_ccag (args [1],args [2],"\u0058\u004e\u0050\u0056");if _bdbgc .Type ==ResultTypeError {return _bdbgc ;};_dccc :=_ddgd ._efcd ;_gddaa :=_ddgd ._fddd ;_adab :=0.0;_edfdb :=_gddaa [0];for _gefg ,_cacc :=range _dccc {_adab +=_cacc /_ac .Pow (1+_ffb ,(_gddaa [_gefg ]-_edfdb )/365);
};return MakeNumberResult (_adab );};var _ebce *_eee .Rand ;

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_gbda :=len (args );if _gbda < 3||_gbda > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfgf :=args [0].ValueNumber ;if _bfgf !=float64 (int (_bfgf )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbgb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cdda :=args [2].ValueNumber ;_bbffa :=0.0;if _gbda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_bbffa =args [3].ValueNumber ;};_bgbg :=0.0;if _gbda >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bgbg =args [4].ValueNumber ;if _bgbg !=0{_bgbg =1;};};_eegdb :=0.1;if _gbda >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_eegdb =args [5].ValueNumber ;};_fbebg :=100;_cbff :=0;_bfbc :=false ;_cbddb :=1e-6;_cded :=_eegdb ;for _cbff < _fbebg &&!_bfbc {_bea :=_ac .Pow (_cded +1,_bfgf );_ebgd :=_ac .Pow (_cded +1,_bfgf -1);_bdae :=_cded *_bgbg +1;_fefe :=_dbgb *(_bea -1);_baba :=_bbffa +_bea *_cdda +_fefe *_bdae /_cded ;
_bdbb :=_bfgf *_ebgd *_cdda -_fefe *_bdae /_ac .Pow (_cded ,2);_ddcf :=(_bfgf *_dbgb *_ebgd *_bdae +_fefe *_bgbg )/_cded ;_eefbc :=_baba /(_bdbb +_ddcf );if _ac .Abs (_eefbc )< _cbddb {_bfbc =true ;};_cbff ++;_cded -=_eefbc ;};return MakeNumberResult (_cded );
};func _cgdaa (_bbbed []Result ,_cbfff bool )(float64 ,float64 ){_bcgf :=0.0;_dbdf :=0.0;for _ ,_aecaa :=range _bbbed {switch _aecaa .Type {case ResultTypeNumber :if _cbfff ||!_aecaa .IsBoolean {_dbdf +=_aecaa .ValueNumber ;_bcgf ++;};case ResultTypeList ,ResultTypeArray :_aaad ,_caeed :=_cgdaa (_aecaa .ListValues (),_cbfff );
_dbdf +=_aaad ;_bcgf +=_caeed ;case ResultTypeString :if _cbfff {_bcgf ++;};case ResultTypeEmpty :};};return _dbdf ,_bcgf ;};

// Reference returns a string reference value to a range.
func (_efebbf Range )Reference (ctx Context ,ev Evaluator )Reference {_aegfb :=_efebbf ._abbc .Reference (ctx ,ev );_bgac :=_efebbf ._daae .Reference (ctx ,ev );if _aegfb .Type ==ReferenceTypeCell &&_bgac .Type ==ReferenceTypeCell {return MakeRangeReference (_edaea (_aegfb ,_bgac ));
};return ReferenceInvalid ;};var _becfb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};
func _bbf (_cbc ,_gaa ,_bcg int )float64 {return float64 (_cdb (_cbc ,_dgg .Month (_gaa ),_bcg )/86400)+_cac ;};func _adde (_afaad []Result )[]float64 {_edgae :=make ([]float64 ,0);for _ ,_badeg :=range _afaad {if _badeg .Type ==ResultTypeEmpty {continue ;
};_badeg =_badeg .AsNumber ();switch _badeg .Type {case ResultTypeNumber :if !_badeg .IsBoolean {_edgae =append (_edgae ,_badeg .ValueNumber );};case ResultTypeList ,ResultTypeArray :_edgae =append (_edgae ,_adde (_badeg .ListValues ())...);case ResultTypeString :default:_ba .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_badeg .Type );
};};return _edgae ;};func _eace (_dacb ,_abac ,_cgf int )int {if _dacb > _abac {return 0;};if _cfcg (_cgf ){return (_abac -_dacb +1)*360;};_dagc :=0;for _afa :=_dacb ;_afa <=_abac ;_afa ++{_gdeb :=365;if _dfcf (_afa ){_gdeb =366;};_dagc +=_gdeb ;};return _dagc ;
};func _eab (_ggd ,_cda Result ,_cfb string )(float64 ,float64 ,Result ){_fgde ,_gdcg :=_dcg (_ggd ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_cfb );if _gdcg .Type ==ResultTypeError {return 0,0,_gdcg ;};_defa ,_gdcg :=_dcg (_cda ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_cfb );
if _gdcg .Type ==ResultTypeError {return 0,0,_gdcg ;};if _fgde >=_defa {return 0,0,MakeErrorResultType (ErrorTypeNum ,_cfb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};return _fgde ,_defa ,_faba ;};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_dadc ,_gdbf :=_fbfe (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _gdbf .Type ==ResultTypeError {return _gdbf ;};_ebef :=_dadc ._cca ;_gbge :=_dadc ._aded ;_ggac :=_dadc ._abcc ;_eacag :=_dadc ._aefg ;
_eaff :=_dadc ._cdeb ;_dcfb :=_dadc ._cbge ;if _dcfb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");
};_gfcg :=_dadc ._ffca ;_cefa :=1.0/_dcfb ;_fea :=2.5;if _cefa < 3{_fea =1;}else if _cefa < 5{_fea =1.5;}else if _cefa <=6{_fea =2;};_dcfb *=_fea ;_aeag ,_bbed :=_dcc (_gbge ,_ggac ,_gfcg );if _bbed .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");
};_eae :=_fbgf (_aeag *_dcfb *_ebef );_ebef -=_eae ;_aaff :=_ebef -_eacag ;for _bbb :=0;_bbb < _eaff ;_bbb ++{_eae =_fbgf (_dcfb *_ebef );_aaff -=_eae ;if _aaff < 0{switch _eaff -_bbb {case 0:case 1:return MakeNumberResult (_fbgf (_ebef *0.5));default:return MakeNumberResult (0);
};};_ebef -=_eae ;};return MakeNumberResult (_eae );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// String returns an empty string for EmptyExpr.
func (_gce EmptyExpr )String ()string {return ""};const _dgce ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";
func _deaae (_afga Result ,_agad *criteriaParsed )bool {if _afga .Type ==ResultTypeEmpty {return false ;};if _agad ._cgae {return _afga .ValueNumber ==_agad ._cdbe ;}else {_eece :=_dd .ToLower (_afga .ValueString );return _agad ._dffce ==_eece ||_f .Match (_agad ._dffce ,_eece );
};};

// LastColumn returns empty string for the invalid reference context.
func (_fbcbb *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func _faaa (_efcc ,_gfgc float64 )float64 {_efcc =_ac .Trunc (_efcc );_gfgc =_ac .Trunc (_gfgc );if _efcc ==0&&_gfgc ==0{return 0;};return _efcc *_gfgc /_fdcfe (_efcc ,_gfgc );};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_fbbbg PrefixVerticalRange )Update (q *_ge .UpdateQuery )Expression {if q .UpdateType ==_ge .UpdateActionRemoveColumn {_bbggf :=_fbbbg ;_fbcae :=_fbbbg ._ebbed .String ();if _fbcae ==q .SheetToUpdate {_eeeff :=q .ColumnIdx ;_bbggf ._eege =_cae (_fbbbg ._eege ,_eeeff );
_bbggf ._dced =_cae (_fbbbg ._dced ,_eeeff );};return _bbggf ;};return _fbbbg ;};

// Reference returns an invalid reference for Bool.
func (_gfg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _bffe (args ,false )};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fbeb :=args [0].ValueNumber ;_afe :=args [1].ValueNumber ;_bddc :=args [2].ValueNumber ;_gda :=_bec (_fbeb ,_afe ,_bddc );if _gda >=0{return MakeNumberResult (_gda );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Function is a standard function whose result only depends on its arguments.
type Function func (_fbae []Result )Result ;type defEval struct{evCache ;_faf bool ;};type ivr struct{};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_gaegf :=args [0].AsString ();if _gaegf .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_dbcaa :=args [1].AsNumber ();if _dbcaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};if _dbcaa .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");
};if _dbcaa .ValueNumber ==0{return MakeStringResult ("");};_fbabg :=_ef .Buffer {};for _bcee :=0;_bcee < int (_dbcaa .ValueNumber );_bcee ++{_fbabg .WriteString (_gaegf .ValueString );};return MakeStringResult (_fbabg .String ());};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_fcg :=args [1].ValueNumber ;
_ebc :=args [0];var _eeea float64 ;switch _ebc .Type {case ResultTypeEmpty :_eeea =0;case ResultTypeNumber :_eeea =_ebc .ValueNumber ;case ResultTypeString :_ded :=DateValue ([]Result {args [0]});if _ded .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};_eeea =_ded .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bebg :=_ceef (_eeea );
_bffa :=_bebg .AddDate (0,int (_fcg +1),0);_caef ,_baec ,_ :=_bffa .Date ();_gba :=_bbf (_caef ,int (_baec ),0);if _gba < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");
};if _caef ==1900&&_baec ==3{_gba --;};return MakeNumberResult (_gba );};const _fce ="\u005e\u0028\u0028"+_abe +"\u007c"+_ccc +"\u007c"+_gcfa +"\u007c"+_fdb +"\u0029\u0020\u0029\u003f";

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_efc :=args [0].ValueNumber ;if _efc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbeg :=args [1].ValueNumber ;if _cbeg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfeg :=args [2].ValueNumber ;if _cfeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");
};return MakeNumberResult ((_ac .Log10 (_cfeg )-_ac .Log10 (_cbeg ))/_ac .Log10 (1+_efc ));};

// String returns a string representation of a horizontal range with prefix.
func (_bggcg PrefixHorizontalRange )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bggcg ._gbeae .String (),_bggcg ._dddgg ,_bggcg ._ecceg );};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_dgfae Result )AsNumber ()Result {if _dgfae .Type ==ResultTypeString {_egcb ,_bfeg :=_eed .ParseFloat (_dgfae .ValueString ,64);if _bfeg ==nil {return MakeNumberResult (_egcb );};};if _dgfae .Type ==ResultTypeEmpty {return MakeNumberResult (0);};
return _dgfae ;};

// String returns a string representation of CellRef.
func (_aca CellRef )String ()string {return _aca ._aea };

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_edadd :=true ;for _ ,_bceb :=range args {_bceb =_bceb .AsNumber ();switch _bceb .Type {case ResultTypeList ,ResultTypeArray :_bdaed :=And (_bceb .ListValues ());if _bdaed .Type ==ResultTypeError {return _bdaed ;};if _bdaed .ValueNumber ==0{_edadd =false ;
};case ResultTypeNumber :if _bceb .ValueNumber ==0{_edadd =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
case ResultTypeError :return _bceb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");
};};return MakeBoolResult (_edadd );};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cdfd :=args [0].AsNumber ();if _cdfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eddd :=float64 (1);if _cdfd .ValueNumber < 0{_eddd =-1;};if len (args )> 1{_feec :=args [1].AsNumber ();if _feec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eddd =_ac .Abs (_feec .ValueNumber );};if len (args )==1{return MakeNumberResult (_ac .Ceil (_cdfd .ValueNumber ));};_gdaag :=_cdfd .ValueNumber ;_gdaag ,_cbbf :=_ac .Modf (_gdaag /_eddd );if _cbbf !=0{if _cdfd .ValueNumber > 0{_gdaag ++;};};return MakeNumberResult (_gdaag *_eddd );
};var _fcea []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// String returns a string representation of FunctionCall expression.
func (_gaecf FunctionCall )String ()string {_fefgb :=_ef .Buffer {};_fefgb .WriteString (_gaecf ._gbea );_fefgb .WriteString ("\u0028");_bedg :=len (_gaecf ._debc )-1;for _cgbf ,_bagee :=range _gaecf ._debc {_fefgb .WriteString (_bagee .String ());if _cgbf !=_bedg {_fefgb .WriteString ("\u002c");
};};_fefgb .WriteString ("\u0029");return _fefgb .String ();};

// Eval evaluates a range returning a list of results or an error.
func (_abddb Range )Eval (ctx Context ,ev Evaluator )Result {_cecab :=_abddb ._abbc .Reference (ctx ,ev );_gebac :=_abddb ._daae .Reference (ctx ,ev );_dabc :=_edaea (_cecab ,_gebac );if _cecab .Type ==ReferenceTypeCell &&_gebac .Type ==ReferenceTypeCell {if _aabfa ,_bfcf :=ev .GetFromCache (_dabc );
_bfcf {return _aabfa ;}else {_cgbdb :=_ebebfb (ctx ,ev ,_cecab .Value ,_gebac .Value );ev .SetCache (_dabc ,_cgbdb );return _cgbdb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dabc );};


// String returns a string of a range.
func (_efgbc Range )String ()string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_efgbc ._abbc .String (),_efgbc ._daae .String ());};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_bbdea :=args [0].AsNumber ();if _bbdea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgag :=_ac .Signbit (_bbdea .ValueNumber );_ebddd ,_ecgf :=_ac .Modf ((_bbdea .ValueNumber -1)/2);_caefe :=_ebddd *2+1;if _ecgf !=0{if !_bgag {_caefe +=2;}else {_caefe -=2;};};return MakeNumberResult (_caefe );};func _ecg (_dacg float64 )bool {return _dacg ==1||_dacg ==2||_dacg ==4};
var _bf =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};
func init (){_aae ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );
RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );
RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );
RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_dgcb :=len (args );if _dgcb < 3||_dgcb > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccbcfc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_fbgc :=args [1].ValueNumber ;if _fbgc !=float64 (int (_fbgc )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gdaee :=args [2].ValueNumber ;_bdad :=0.0;if _dgcb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdad =args [3].ValueNumber ;};_faa :=0;if _dgcb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_faa =int (args [4].ValueNumber );if _faa !=0{_faa =1;};};return MakeNumberResult (_ecdce (_ccbcfc ,_fbgc ,_gdaee ,_bdad ,_faa ));};

// GetFormat returns an empty string for the invalid reference context.
func (_aeae *ivr )GetFormat (cellRef string )string {return ""};const _gcfa ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_egae :=len (args );if _egae !=4&&_egae !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_ffc ,_bgba :=_dcg (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _bgba .Type ==ResultTypeError {return _bgba ;};_fbfff ,_bgba :=_dcg (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");
if _bgba .Type ==ResultTypeError {return _bgba ;};if _ffc >=_fbfff {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_gage :=args [2].ValueNumber ;if _gage <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcac :=args [3].ValueNumber ;if _gcac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdfg :=0;if _egae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdfg =int (args [4].ValueNumber );if !_gddd (_fdfg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");
};};_bdc ,_bgba :=_dcc (_ffc ,_fbfff ,_fdfg );if _bgba .Type ==ResultTypeError {return _bgba ;};return MakeNumberResult (_gcac *_gage *_bdc );};var _bfeb string =string ([]byte {92});

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_bcfb :=args [1].ValueNumber ;_gfbf :=args [0];var _daba float64 ;switch _gfbf .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
case ResultTypeNumber :_daba =_gfbf .ValueNumber ;case ResultTypeString :_aadda :=DateValue ([]Result {args [0]});if _aadda .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};_daba =_aadda .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cde :=_ceef (_daba );_fca :=_cde .AddDate (0,int (_bcfb ),0);
_ggfb ,_eecd ,_ddee :=_fca .Date ();_gga :=_bbf (_ggfb ,int (_eecd ),_ddee );if _gga < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");
};return MakeNumberResult (_gga );};func _cce (_dfc string )(int ,int ,float64 ,bool ,bool ,Result ){_afee :="";_ceed :=[]string {};for _abec ,_gae :=range _fafe {_ceed =_gae .FindStringSubmatch (_dfc );if len (_ceed )> 1{_afee =_abec ;break ;};};if _afee ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );
};_bgb :=_ceed [1]=="";_ceed =_ceed [49:];_edgd :=len (_ceed );_gbg :=_ceed [_edgd -1];_deaa :=_gbg =="\u0061\u006d";_fgce :=_gbg =="\u0070\u006d";var _agfc ,_gaae int ;var _gcce float64 ;var _ddf error ;switch _afee {case "\u0068\u0068":_agfc ,_ddf =_eed .Atoi (_ceed [0]);
if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );};_gaae =0;_gcce =0;case "\u0068\u0068\u003am\u006d":_agfc ,_ddf =_eed .Atoi (_ceed [0]);if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );
};_gaae ,_ddf =_eed .Atoi (_ceed [2]);if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );};_gcce =0;case "\u006d\u006d\u003as\u0073":_agfc =0;_gaae ,_ddf =_eed .Atoi (_ceed [0]);if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );
};_gcce ,_ddf =_eed .ParseFloat (_ceed [2],64);if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_agfc ,_ddf =_eed .Atoi (_ceed [0]);if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );
};_gaae ,_ddf =_eed .Atoi (_ceed [2]);if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );};_gcce ,_ddf =_eed .ParseFloat (_ceed [4],64);if _ddf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );
};};if _gaae >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );};if _deaa ||_fgce {if _agfc > 12||_gcce >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );}else if _agfc ==12{_agfc =0;};}else if _agfc >=24||_gcce >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cebb );
};return _agfc ,_gaae ,_gcce ,_fgce ,_bgb ,_faba ;};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ecgd :=[]string {};for _bbdg :=range _caeag {_ecgd =append (_ecgd ,_bbdg );};for _efbg :=range _ebecf {_ecgd =append (_ecgd ,_efbg );};_ee .Strings (_ecgd );return _ecgd ;};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_dabfd :pfx ,_abgb :exp }};

// Error is an error expression.
type Error struct{_abf string };

// HasFormula returns FALSE for the invalid reference context.
func (_bace *ivr )HasFormula (cellRef string )bool {return false };

// Number is a nubmer expression.
type Number struct{_dacff float64 };var _abgg =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
const _gdg ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";


// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_ebce .Float64 ());
};func _dafb (_ebbe Result )[]Result {_eadbb :=_ebbe .ValueList ;if _ebbe .Type ==ResultTypeArray {_eadbb =nil ;for _ ,_fccd :=range _ebbe .ValueArray {if len (_fccd )> 0{_eadbb =append (_eadbb ,_fccd [0]);}else {_eadbb =append (_eadbb ,_faba );};};};return _eadbb ;
};func _befd (_dadg ,_cdad _dgg .Time ,_efgba ,_adbg int )_dgg .Time {_cgd :=_cdad ;_eafb :=_dadg .Year ()-_cdad .Year ();_cgd =_cgd .AddDate (_eafb ,0,0);if _dadg .After (_cgd ){_cgd =_cgd .AddDate (1,0,0);};_gaad :=-12/_efgba ;for _cgd .After (_dadg ){_cgd =_cgd .AddDate (0,_gaad ,0);
};return _cgd ;};const _dbdd =57371;

// Eval evaluates a horizontal range returning a list of results or an error.
func (_cdcdc HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_cgfbb :=_cdcdc .horizontalRangeReference ();if _cfag ,_cadab :=ev .GetFromCache (_cgfbb );_cadab {return _cfag ;};_dcfbb ,_bgdg :=_eebde (ctx ,_cdcdc ._cgfbgb ,_cdcdc ._fgbf );_fage :=_ebebfb (ctx ,ev ,_dcfbb ,_bgdg );
ev .SetCache (_cgfbb ,_fage );return _fage ;};func _abfc (_ceacb ,_ada []float64 ,_dfcd float64 )float64 {_bbgdg :=_dfcd +1;_cffed :=_ceacb [0];_ffdg :=len (_ceacb );_gega :=_ada [0];for _ebbded :=1;_ebbded < _ffdg ;_ebbded ++{_cffed +=_ceacb [_ebbded ]/_ac .Pow (_bbgdg ,(_ada [_ebbded ]-_gega )/365);
};return _cffed ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_ebbd :=len (args );if (_ebbd !=2&&_ebbd !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aabg :=0;if _ebbd ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_aabg =int (args [2].ValueNumber );if !_gddd (_aabg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");
};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ebbde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_eeag :=args [1].ValueNumber ;_fbgg ,_ddb :=_dcc (_ebbde ,_eeag ,_aabg );if _ddb .Type ==ResultTypeError {return _ddb ;};return MakeNumberResult (_fbgg );};func _dcg (_dedd Result ,_fbff ,_gdfg string )(float64 ,Result ){var _aag float64 ;switch _dedd .Type {case ResultTypeNumber :_aag =float64 (int (_dedd .ValueNumber ));
case ResultTypeString :_cagf :=DateValue ([]Result {_dedd });if _cagf .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_fbff +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_gdfg );
};_aag =_cagf .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_gdfg );};if _aag < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_fbff +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};return _aag ,_faba ;};const _ebeaa =57370;var _ead =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};type yyLexer interface{Lex (_adfaa *yySymType )int ;Error (_dbddg string );};func _eba (_ecag ,_afg ,_dcf ,_cggc ,_efag float64 ,_ffgc int )Result {_bbcf ,_gdde :=_dcc (_ecag ,_afg ,_ffgc );
if _gdde .Type ==ResultTypeError {return _gdde ;};_ebedb ,_geda :=_dega (_ecag ,_afg ,int (_efag ),_ffgc );if _geda .Type ==ResultTypeError {return _geda ;};_agdg :=0.0;_ced :=0.0;_dcf *=100/_efag ;_cggc /=_efag ;_cggc ++;_cdf :=_bbcf *_efag -_ebedb ;for _bggc :=1.0;
_bggc < _ebedb ;_bggc ++{_dbeg :=_bggc +_cdf ;_bcfg :=_dcf /_ac .Pow (_cggc ,_dbeg );_ced +=_bcfg ;_agdg +=_dbeg *_bcfg ;};_dbgd :=(_dcf +100)/_ac .Pow (_cggc ,_ebedb +_cdf );_ced +=_dbgd ;_agdg +=(_ebedb +_cdf )*_dbgd ;_agdg /=_ced ;_agdg /=_efag ;return MakeNumberResult (_agdg );
};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_dd .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_gaagb :v };};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bgaf :=args [0];if _bgaf .Type !=ResultTypeNumber &&_bgaf .Type !=ResultTypeString &&_bgaf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");
};_fbedcg :=args [1].ValueString ;switch _bgaf .Type {case ResultTypeNumber :return MakeStringResult (_ed .Number (_bgaf .ValueNumber ,_fbedcg ));case ResultTypeString :return MakeStringResult (_ed .String (_bgaf .ValueString ,_fbedcg ));case ResultTypeEmpty :return MakeStringResult (_ed .Number (0,_fbedcg ));
case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");
};};func (_fdcfb *Lexer )Next ()*node {_fdcfb ._dfgfb .Lock ();defer _fdcfb ._dfgfb .Unlock ();if len (_fdcfb ._cadd )> 0{_ffbe :=_fdcfb ._cadd [0];_fdcfb ._cadd =_fdcfb ._cadd [1:];return _ffbe ;};return _fdcfb .nextRaw ();};func _eebde (_bgdaa Context ,_cdgce ,_dgbda int )(string ,string ){_gdagb :="\u0041"+_eed .Itoa (_cdgce );
_bdfg :=_bgdaa .LastColumn (_cdgce ,_dgbda );_aggdf :=_bdfg +_eed .Itoa (_dgbda );return _gdagb ,_aggdf ;};

// String returns a string representation of String.
func (_beag String )String ()string {return "\u0022"+_beag ._gaagb +"\u0022"};

// String is a string expression.
type String struct{_gaagb string };func _ceef (_ffg float64 )_dgg .Time {_agf :=int64 ((_ffg -_cac )*_cee );return _dgg .Unix (0,_agf ).UTC ();};

// Reference returns a string reference value to a vertical range with prefix.
func (_feae PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_geecd :=_feae ._ebbed .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_feae .verticalRangeReference (_geecd .Value )};};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fdc *defEval )LastEvalIsRef ()bool {return _fdc ._faf };

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_cbda :=len (args );if _cbda < 3||_cbda > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfgd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bffcg :=args [1].ValueNumber ;if _bffcg ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cegd :=args [2].ValueNumber ;_fefg :=0.0;if _cbda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fefg =args [3].ValueNumber ;};_cfbe :=0.0;if _cbda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cfbe =args [4].ValueNumber ;if _cfbe !=0{_cfbe =1;};};var _fgcd float64 ;if _cfgd ==0{_fgcd =(_cegd +_fefg )/_bffcg ;}else {_bcff :=_ac .Pow (1+_cfgd ,_bffcg );if _cfbe ==1{_fgcd =(_fefg *_cfgd /(_bcff -1)+_cegd *_cfgd /(1-1/_bcff ))/(1+_cfgd );}else {_fgcd =_fefg *_cfgd /(_bcff -1)+_cegd *_cfgd /(1-1/_bcff );
};};return MakeNumberResult (-_fgcd );};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_cdbcd :=_fddfg (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _cdbcd .Type !=ResultTypeEmpty {return _cdbcd ;};_fedd :=_fbbg (args [1:]);_dbae :=_ac .MaxFloat64 ;_cebgc :=_ecfd (args [0]);for _ ,_beaa :=range _fedd {_cfeec :=_cebgc [_beaa ._fbge ][_beaa ._dfae ].ValueNumber ;
if _dbae > _cfeec {_dbae =_cfeec ;};};if _dbae ==_ac .MaxFloat64 {_dbae =0;};return MakeNumberResult (float64 (_dbae ));};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_efac ,_eede ,_bfdd :=_eab (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _bfdd .Type ==ResultTypeError {return _bfdd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbcac :=_eede -_efac ;if _bbcac > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");
};_eadd :=args [2].ValueNumber ;if _eadd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult ((365*_eadd )/(360-_eadd *_bbcac ));};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func (_bacg HorizontalRange )horizontalRangeReference ()string {return _b .Sprintf ("\u0025\u0064\u003a%\u0064",_bacg ._cgfbgb ,_bacg ._fgbf );
};const _dadbc =57344;

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_cdcde :=args [0].AsNumber ();if _cdcde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_bfdb :=float64 (1);if _cdcde .ValueNumber < 0{_bfdb =-1;};if len (args )> 1{_agfcb :=args [1].AsNumber ();if _agfcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bfdb =_agfcb .ValueNumber ;};if _bfdb < 0&&_cdcde .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");
};if len (args )==1{return MakeNumberResult (_ac .Ceil (_cdcde .ValueNumber ));};_cdfc :=_cdcde .ValueNumber ;_cdfc ,_edcf :=_ac .Modf (_cdfc /_bfdb );if _edcf > 0{_cdfc ++;};return MakeNumberResult (_cdfc *_bfdb );};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_eec :=args [0].ValueNumber ;_ffd :=args [1].ValueNumber ;if _ffd < _eec {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");
};if _ffd ==_eec {return MakeNumberResult (0);};_fgd :=_dd .ToLower (args [2].ValueString );if _fgd =="\u0064"{return MakeNumberResult (_ffd -_eec );};_cfa :=_ceef (_eec );_bcba :=_ceef (_ffd );_cbfd ,_bfd ,_dcd :=_cfa .Date ();_gcd ,_gag ,_aec :=_bcba .Date ();
_efae :=int (_bfd );_cgg :=int (_gag );var _eaca float64 ;switch _fgd {case "\u0079":_eaca =float64 (_gcd -_cbfd );if _cgg < _efae ||(_cgg ==_efae &&_aec < _dcd ){_eaca --;};case "\u006d":_bgc :=_gcd -_cbfd ;_gfb :=_cgg -_efae ;if _aec < _dcd {_gfb --;
};if _gfb < 0{_bgc --;_gfb +=12;};_eaca =float64 (_bgc *12+_gfb );case "\u006d\u0064":_caa :=_cgg ;if _aec < _dcd {_caa --;};_eaca =float64 (int (_ffd -_bbf (_gcd ,_caa ,_dcd )));case "\u0079\u006d":_eaca =float64 (_cgg -_efae );if _aec < _dcd {_eaca --;
};if _eaca < 0{_eaca +=12;};case "\u0079\u0064":_gbd :=_gcd ;if _cgg < _efae ||(_cgg ==_efae &&_aec < _dcd ){_gbd --;};_eaca =float64 (int (_ffd -_bbf (_gbd ,_efae ,_dcd )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");
};return MakeNumberResult (_eaca );};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgbd :=args [0].AsString ();if _fgbd .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (len (_fgbd .ValueString )));};var _adeaa =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};


// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_ecagd ,_bddgg ,_cbafd :=_cedeb (from ,to );if _cbafd !=nil {_ba .Log .Debug (_cbafd .Error ());return NewError (_cbafd .Error ());};return PrefixRangeExpr {_gedge :pfx ,_fgcg :_ecagd ,_bedge :_bddgg };
};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fdfd :=[]float64 {};
for _ ,_efaccg :=range args {switch _efaccg .Type {case ResultTypeString :_ebac :=_efaccg .AsNumber ();if _ebac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fdfd =append (_fdfd ,_ebac .ValueNumber );case ResultTypeList ,ResultTypeArray :_eccf :=GCD (_efaccg .ListValues ());if _eccf .Type !=ResultTypeNumber {return _eccf ;};_fdfd =append (_fdfd ,_eccf .ValueNumber );case ResultTypeNumber :_fdfd =append (_fdfd ,_efaccg .ValueNumber );
case ResultTypeError :return _efaccg ;default:return MakeErrorResult (_b .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efaccg .Type ));
};};if _fdfd [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_fdfd )==1{return MakeNumberResult (_fdfd [0]);
};_ccdgg :=_fdfd [0];for _ddgc :=1;_ddgc < len (_fdfd );_ddgc ++{if _fdfd [_ddgc ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ccdgg =_fdcfe (_ccdgg ,_fdfd [_ddgc ]);};return MakeNumberResult (_ccdgg );};

// Update updates the FunctionCall references after removing a row/column.
func (_adac FunctionCall )Update (q *_ge .UpdateQuery )Expression {_aeded :=[]Expression {};for _ ,_eeae :=range _adac ._debc {_defc :=_eeae .Update (q );_aeded =append (_aeded ,_defc );};return FunctionCall {_gbea :_adac ._gbea ,_debc :_aeded };};var _dfeg ,_cgcd ,_egee ,_ccccf ,_dbace ,_abdag ,_dfgb ,_caff ,_ddfa ,_gcgf ,_aceb ,_dcfg ,_ebdgf ,_cgcg ,_geadc *_ec .Regexp ;
const _fbee =57353;func _fegg (_dedge _dgg .Time )_dgg .Time {_dedge =_dedge .UTC ();return _dgg .Date (_dedge .Year (),_dedge .Month (),_dedge .Day (),_dedge .Hour (),_dedge .Minute (),_dedge .Second (),_dedge .Nanosecond (),_dgg .Local );};const _adeage =57357;
func (_feeeb *ivr )SetOffset (col ,row uint32 ){};func (_cfcgc *Lexer )lex (_baceb _e .Reader ){_bfec ,_eacff ,_gegcf :=0,0,0;_dcfgd :=-1;_fbdeb ,_cgef ,_aefc :=0,0,0;_ =_aefc ;_ecadb :=1;_ =_ecadb ;_fbebc :=make ([]byte ,4096);_acdb :=false ;for !_acdb {_abcdf :=0;
if _fbdeb > 0{_abcdf =_eacff -_fbdeb ;};_eacff =0;_dadf ,_dcfd :=_baceb .Read (_fbebc [_abcdf :]);if _dadf ==0||_dcfd !=nil {_acdb =true ;};_gegcf =_dadf +_abcdf ;if _gegcf < len (_fbebc ){_dcfgd =_gegcf ;};{_bfec =_dgbc ;_fbdeb =0;_cgef =0;_aefc =0;};
{var _gcddf int ;var _bcfbd uint ;if _eacff ==_gegcf {goto _dgaff ;};if _bfec ==0{goto _fgbff ;};_aefgg :_gcddf =int (_fcbef [_bfec ]);_bcfbd =uint (_fcaa [_gcddf ]);_gcddf ++;for ;_bcfbd > 0;_bcfbd --{_gcddf ++;switch _fcaa [_gcddf -1]{case 2:_fbdeb =_eacff ;
};};switch _bfec {case 30:switch _fbebc [_eacff ]{case 34:goto _ebebg ;case 35:goto _adfag ;case 36:goto _fbfb ;case 38:goto _gbgf ;case 39:goto _gcadf ;case 40:goto _gfcef ;case 41:goto _aacc ;case 42:goto _adbca ;case 43:goto _debb ;case 44:goto _agbc ;
case 45:goto _ddeba ;case 47:goto _eeeb ;case 58:goto _cdac ;case 59:goto _bbafc ;case 60:goto _dfag ;case 61:goto _cfgf ;case 62:goto _gefge ;case 63:goto _dgfcg ;case 70:goto _ggee ;case 84:goto _eaafg ;case 92:goto _egcc ;case 94:goto _dbgab ;case 95:goto _ffbf ;
case 123:goto _fgbb ;case 125:goto _dcdcc ;};switch {case _fbebc [_eacff ]< 65:switch {case _fbebc [_eacff ]> 37:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _eegc ;};case _fbebc [_eacff ]>=33:goto _dgfcg ;};case _fbebc [_eacff ]> 90:switch {case _fbebc [_eacff ]> 93:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _bbcgg ;
};case _fbebc [_eacff ]>=91:goto _dgfcg ;};default:goto _cbebc ;};goto _badbb ;case 1:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 47:goto _bbfec ;case 123:goto _bbfec ;case 125:goto _bbfec ;};switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _bbfec ;
};case _fbebc [_eacff ]> 45:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _bbfec ;};case _fbebc [_eacff ]>=58:goto _bbfec ;};default:goto _bbfec ;};goto _badbb ;case 0:goto _fgbff ;case 2:if _fbebc [_eacff ]==34{goto _ccfga ;
};goto _ebebg ;case 31:if _fbebc [_eacff ]==34{goto _ebebg ;};goto _afdcg ;case 3:switch _fbebc [_eacff ]{case 78:goto _fbcdb ;case 82:goto _cbcg ;};goto _dgfcg ;case 4:switch _fbebc [_eacff ]{case 47:goto _gbfa ;case 85:goto _fagbb ;};goto _dgfcg ;case 5:if _fbebc [_eacff ]==65{goto _bgdbe ;
};goto _dgfcg ;case 6:switch _fbebc [_eacff ]{case 76:goto _cegea ;case 77:goto _gfea ;};goto _dgfcg ;case 7:if _fbebc [_eacff ]==76{goto _gfea ;};goto _dgfcg ;case 8:if _fbebc [_eacff ]==33{goto _bgdbe ;};goto _dgfcg ;case 9:if _fbebc [_eacff ]==69{goto _egaag ;
};goto _dgfcg ;case 10:if _fbebc [_eacff ]==70{goto _aabga ;};goto _dgfcg ;case 11:if _fbebc [_eacff ]==33{goto _dfebca ;};goto _dgfcg ;case 12:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 47:goto _dgfcg ;case 123:goto _dgfcg ;case 125:goto _dgfcg ;
};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=45{goto _dgfcg ;};case _fbebc [_eacff ]>=34:goto _dgfcg ;};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]< 65:if 58<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=63{goto _dgfcg ;
};case _fbebc [_eacff ]> 90:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _dgfcg ;};default:goto _fffba ;};default:goto _aaba ;};goto _badbb ;case 13:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 47:goto _dgfcg ;case 58:goto _effcec ;case 123:goto _dgfcg ;
case 125:goto _dgfcg ;};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=45{goto _dgfcg ;};case _fbebc [_eacff ]>=34:goto _dgfcg ;};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _dgfcg ;
};case _fbebc [_eacff ]>=59:goto _dgfcg ;};default:goto _aaba ;};goto _badbb ;case 14:if _fbebc [_eacff ]==36{goto _gdce ;};if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _babde ;};goto _bbfec ;case 15:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _babde ;
};goto _bbfec ;case 32:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _babde ;};goto _cfeeb ;case 16:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 47:goto _dgfcg ;case 58:goto _eaefa ;case 123:goto _dgfcg ;case 125:goto _dgfcg ;
};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 45:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _acgcd ;};case _fbebc [_eacff ]>=34:goto _dgfcg ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]> 90:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _dgfcg ;
};case _fbebc [_eacff ]>=65:goto _fffba ;};default:goto _dgfcg ;};goto _badbb ;case 17:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 47:goto _bbfec ;case 123:goto _bbfec ;case 125:goto _bbfec ;};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=45{goto _bbfec ;
};case _fbebc [_eacff ]>=34:goto _bbfec ;};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _bbfec ;};case _fbebc [_eacff ]>=58:goto _bbfec ;};default:goto _acgcd ;};goto _badbb ;case 33:switch _fbebc [_eacff ]{case 33:goto _cafg ;
case 47:goto _eabfbf ;case 123:goto _eabfbf ;case 125:goto _eabfbf ;};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=45{goto _eabfbf ;};case _fbebc [_eacff ]>=34:goto _eabfbf ;};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _eabfbf ;
};case _fbebc [_eacff ]>=58:goto _eabfbf ;};default:goto _acgcd ;};goto _badbb ;case 18:if _fbebc [_eacff ]==36{goto _aabff ;};if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _acaae ;};goto _bbfec ;case 19:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _acaae ;
};goto _bbfec ;case 34:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _acaae ;};goto _dbaf ;case 20:switch _fbebc [_eacff ]{case 39:goto _dgfcg ;case 42:goto _dgfcg ;case 47:goto _dgfcg ;case 58:goto _dgfcg ;case 63:goto _dgfcg ;};if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=93{goto _dgfcg ;
};goto _cbbbf ;case 21:switch _fbebc [_eacff ]{case 39:goto _acfb ;case 42:goto _dgfcg ;case 47:goto _dgfcg ;case 58:goto _dgfcg ;case 63:goto _dgfcg ;};if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=93{goto _dgfcg ;};goto _cbbbf ;case 22:if _fbebc [_eacff ]==33{goto _bagbc ;
};goto _dgfcg ;case 35:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _eaebg ;case 58:goto _effcec ;case 101:goto _dedga ;case 123:goto _eaaff ;case 125:goto _eaaff ;};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=47{goto _eaaff ;
};case _fbebc [_eacff ]>=34:goto _eaaff ;};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _eaaff ;};case _fbebc [_eacff ]>=59:goto _eaaff ;};default:goto _eegc ;};goto _badbb ;case 36:switch _fbebc [_eacff ]{case 33:goto _cafg ;
case 47:goto _eaaff ;case 101:goto _dedga ;case 123:goto _eaaff ;case 125:goto _eaaff ;};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=45{goto _eaaff ;};case _fbebc [_eacff ]>=34:goto _eaaff ;
};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _eaaff ;};case _fbebc [_eacff ]>=58:goto _eaaff ;};default:goto _eaebg ;};goto _badbb ;case 23:switch _fbebc [_eacff ]{case 33:goto _cafg ;
case 47:goto _dcbf ;case 123:goto _dcbf ;case 125:goto _dcbf ;};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=45{goto _dcbf ;};case _fbebc [_eacff ]>=34:goto _dcbf ;};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _dcbf ;
};case _fbebc [_eacff ]>=58:goto _dcbf ;};default:goto _dfgg ;};goto _badbb ;case 37:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 47:goto _eaaff ;case 123:goto _eaaff ;case 125:goto _eaaff ;};switch {case _fbebc [_eacff ]< 48:switch {case _fbebc [_eacff ]> 35:if 37<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=45{goto _eaaff ;
};case _fbebc [_eacff ]>=34:goto _eaaff ;};case _fbebc [_eacff ]> 57:switch {case _fbebc [_eacff ]> 63:if 91<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=94{goto _eaaff ;};case _fbebc [_eacff ]>=58:goto _eaaff ;};default:goto _dfgg ;};goto _badbb ;case 38:switch _fbebc [_eacff ]{case 61:goto _dedcg ;
case 62:goto _dgge ;};goto _febed ;case 39:if _fbebc [_eacff ]==61{goto _egbag ;};goto _efgf ;case 24:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;case 58:goto _eaefa ;case 92:goto _eaggd ;case 95:goto _gcdg ;
case 123:goto _dgfcg ;case 125:goto _dgfcg ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;};case _fbebc [_eacff ]>=34:goto _dgfcg ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;
};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _dgfcg ;};default:goto _dgfcg ;};goto _badbb ;case 40:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 40:goto _feedc ;case 46:goto _ccabc ;case 92:goto _eaggd ;
case 95:goto _gcdg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _ccabc ;
};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _ccabc ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;
};default:goto _eeba ;};goto _badbb ;case 41:switch _fbebc [_eacff ]{case 46:goto _eaggd ;case 92:goto _eaggd ;case 95:goto _eaggd ;};switch {case _fbebc [_eacff ]< 65:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _eaggd ;};case _fbebc [_eacff ]> 90:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _eaggd ;
};default:goto _eaggd ;};goto _eeba ;case 42:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 43:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 40:goto _feedc ;case 46:goto _ccabc ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eabfbf ;case 125:goto _eabfbf ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eabfbf ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;};default:goto _eabfbf ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _ccabc ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eabfbf ;};default:goto _eabfbf ;};goto _badbb ;case 44:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;case 58:goto _eaefa ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _bbfec ;
case 125:goto _bbfec ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;};case _fbebc [_eacff ]>=34:goto _bbfec ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;
};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _bbfec ;};default:goto _bbfec ;};goto _badbb ;case 25:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;
case 58:goto _eaefa ;case 65:goto _ecbbd ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _dgfcg ;case 125:goto _dgfcg ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;
};case _fbebc [_eacff ]>=34:goto _dgfcg ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 66<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _dgfcg ;
};default:goto _dgfcg ;};goto _badbb ;case 45:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;case 58:goto _eaefa ;case 76:goto _bgddb ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;
case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;};case _fbebc [_eacff ]>=34:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;
};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 46:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;
case 58:goto _eaefa ;case 83:goto _ebbec ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;
};case _fbebc [_eacff ]>=34:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;
};default:goto _eeba ;};goto _badbb ;case 47:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;case 58:goto _eaefa ;case 69:goto _dgfcd ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;
case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;};case _fbebc [_eacff ]>=34:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;
};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 26:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;
case 58:goto _eaefa ;case 79:goto _daecd ;case 82:goto _acdd ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _dgfcg ;case 125:goto _dgfcg ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;
};case _fbebc [_eacff ]>=34:goto _dgfcg ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _dgfcg ;
};default:goto _dgfcg ;};goto _badbb ;case 48:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;case 58:goto _eaefa ;case 68:goto _aecb ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;
case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;};case _fbebc [_eacff ]>=34:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;
};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 49:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;
case 58:goto _eaefa ;case 79:goto _fdgga ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;
};case _fbebc [_eacff ]>=34:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;
};default:goto _eeba ;};goto _badbb ;case 50:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 36:goto _befdc ;case 40:goto _feedc ;case 46:goto _ccabc ;case 58:goto _eaefa ;case 85:goto _ebbec ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;
case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 59:switch {case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _dacf ;};case _fbebc [_eacff ]>=34:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _dcbc ;
};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 27:switch _fbebc [_eacff ]{case 46:goto _eaggd ;case 92:goto _eaggd ;case 95:goto _eaggd ;};switch {case _fbebc [_eacff ]< 65:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _eaggd ;
};case _fbebc [_eacff ]> 90:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _eaggd ;};default:goto _eaggd ;};goto _dgfcg ;case 28:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 120:goto _dgga ;
case 123:goto _dgfcg ;case 125:goto _dgfcg ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _dgfcg ;};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;
};default:goto _dgfcg ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _dgfcg ;
};default:goto _dgfcg ;};goto _badbb ;case 51:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 108:goto _deaad ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 52:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 102:goto _aade ;case 110:goto _gaede ;case 123:goto _eeba ;case 125:goto _eeba ;
};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;
};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 53:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gcdg ;
case 110:goto _fbcg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;
};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;};default:goto _eeba ;};
default:goto _eeba ;};goto _badbb ;case 54:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _ddbe ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 55:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _ebebf ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _ebebf ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 56:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 40:goto _agfgg ;case 46:goto _ebebf ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _ebebf ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _ebebf ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 57:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 109:goto _bbdc ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 58:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _fgdd ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _eeba ;case 125:goto _eeba ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _eeba ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _eeba ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _eeba ;};default:goto _eeba ;};goto _badbb ;case 59:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gfae ;case 123:goto _bbfec ;case 125:goto _bbfec ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _bbfec ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _bbfec ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gfae ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _bbfec ;};default:goto _bbfec ;};goto _badbb ;case 29:switch _fbebc [_eacff ]{case 33:goto _cafg ;case 46:goto _gcdg ;case 92:goto _eaggd ;case 95:goto _gcdg ;case 123:goto _dgfcg ;case 125:goto _dgfcg ;};switch {case _fbebc [_eacff ]< 58:switch {case _fbebc [_eacff ]< 37:if 34<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=35{goto _dgfcg ;
};case _fbebc [_eacff ]> 47:if 48<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=57{goto _gcdg ;};default:goto _dgfcg ;};case _fbebc [_eacff ]> 63:switch {case _fbebc [_eacff ]< 91:if 65<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=90{goto _gcdg ;};case _fbebc [_eacff ]> 94:if 97<=_fbebc [_eacff ]&&_fbebc [_eacff ]<=122{goto _gcdg ;
};default:goto _dgfcg ;};default:goto _dgfcg ;};goto _badbb ;};_dgfcg :_bfec =0;goto _ggbcd ;_badbb :_bfec =1;goto _ggbcd ;_ebebg :_bfec =2;goto _ggbcd ;_adfag :_bfec =3;goto _ggbcd ;_fbcdb :_bfec =4;goto _ggbcd ;_gbfa :_bfec =5;goto _ggbcd ;_fagbb :_bfec =6;
goto _ggbcd ;_cegea :_bfec =7;goto _ggbcd ;_gfea :_bfec =8;goto _ggbcd ;_cbcg :_bfec =9;goto _ggbcd ;_egaag :_bfec =10;goto _ggbcd ;_aabga :_bfec =11;goto _ggbcd ;_fbfb :_bfec =12;goto _ggbcd ;_aaba :_bfec =13;goto _ggbcd ;_effcec :_bfec =14;goto _ggbcd ;
_gdce :_bfec =15;goto _ggbcd ;_fffba :_bfec =16;goto _ggbcd ;_befdc :_bfec =17;goto _ggbcd ;_eaefa :_bfec =18;goto _ggbcd ;_aabff :_bfec =19;goto _ggbcd ;_gcadf :_bfec =20;goto _ggbcd ;_cbbbf :_bfec =21;goto _ggbcd ;_acfb :_bfec =22;goto _ggbcd ;_dedga :_bfec =23;
goto _ggbcd ;_cbebc :_bfec =24;goto _ggbcd ;_ggee :_bfec =25;goto _ggbcd ;_eaafg :_bfec =26;goto _ggbcd ;_egcc :_bfec =27;goto _ggbcd ;_ffbf :_bfec =28;goto _ggbcd ;_bbcgg :_bfec =29;goto _ggbcd ;_bbfec :_bfec =30;goto _babe ;_cafg :_bfec =30;goto _ecbc ;
_bgdbe :_bfec =30;goto _bedaa ;_dfebca :_bfec =30;goto _feaf ;_bagbc :_bfec =30;goto _gabc ;_dcbf :_bfec =30;goto _ffcf ;_feedc :_bfec =30;goto _ffbg ;_gbgf :_bfec =30;goto _bgce ;_gfcef :_bfec =30;goto _aadg ;_aacc :_bfec =30;goto _dbeab ;_adbca :_bfec =30;
goto _faaaf ;_debb :_bfec =30;goto _fdcg ;_agbc :_bfec =30;goto _afgab ;_ddeba :_bfec =30;goto _gcacba ;_eeeb :_bfec =30;goto _ecbgg ;_cdac :_bfec =30;goto _gfdff ;_bbafc :_bfec =30;goto _eaebd ;_cfgf :_bfec =30;goto _gdcgg ;_dbgab :_bfec =30;goto _gcbeg ;
_fgbb :_bfec =30;goto _dgac ;_dcdcc :_bfec =30;goto _ebeaf ;_afdcg :_bfec =30;goto _cdgcc ;_cfeeb :_bfec =30;goto _dbced ;_eabfbf :_bfec =30;goto _dfbc ;_dbaf :_bfec =30;goto _gcgdge ;_eaaff :_bfec =30;goto _fgea ;_febed :_bfec =30;goto _aeeg ;_dedcg :_bfec =30;
goto _eeaea ;_dgge :_bfec =30;goto _eefeg ;_efgf :_bfec =30;goto _bfdfb ;_egbag :_bfec =30;goto _gfbbg ;_eeba :_bfec =30;goto _acddd ;_agfgg :_bfec =30;goto _afdgf ;_ccfga :_bfec =31;goto _dafg ;_babde :_bfec =32;goto _ggbcd ;_acgcd :_bfec =33;goto _dddca ;
_acaae :_bfec =34;goto _ggbcd ;_eegc :_bfec =35;goto _acfba ;_eaebg :_bfec =36;goto _acfba ;_dfgg :_bfec =37;goto _acfba ;_dfag :_bfec =38;goto _ggbcd ;_gefge :_bfec =39;goto _ggbcd ;_ccabc :_bfec =40;goto _cdcgg ;_eaggd :_bfec =41;goto _ggbcd ;_gcdg :_bfec =42;
goto _cdcgg ;_dacf :_bfec =43;goto _dddca ;_dcbc :_bfec =44;goto _cdcgg ;_dgfcd :_bfec =44;goto _gdbba ;_fdgga :_bfec =44;goto _cafea ;_ecbbd :_bfec =45;goto _cdcgg ;_bgddb :_bfec =46;goto _cdcgg ;_ebbec :_bfec =47;goto _cdcgg ;_daecd :_bfec =48;goto _cdcgg ;
_aecb :_bfec =49;goto _cdcgg ;_acdd :_bfec =50;goto _cdcgg ;_dgga :_bfec =51;goto _cdcgg ;_deaad :_bfec =52;goto _cdcgg ;_aade :_bfec =53;goto _cdcgg ;_fbcg :_bfec =54;goto _cdcgg ;_ddbe :_bfec =55;goto _cdcgg ;_ebebf :_bfec =56;goto _cdcgg ;_gaede :_bfec =57;
goto _cdcgg ;_bbdc :_bfec =58;goto _cdcgg ;_fgdd :_bfec =59;goto _cdcgg ;_gfae :_bfec =59;goto _ababbf ;_bedaa :_gcddf =3;goto _eefdd ;_feaf :_gcddf =5;goto _eefdd ;_ecbc :_gcddf =7;goto _eefdd ;_gabc :_gcddf =9;goto _eefdd ;_ffbg :_gcddf =11;goto _eefdd ;
_afdgf :_gcddf =13;goto _eefdd ;_bgce :_gcddf =15;goto _eefdd ;_dgac :_gcddf =17;goto _eefdd ;_ebeaf :_gcddf =19;goto _eefdd ;_aadg :_gcddf =21;goto _eefdd ;_dbeab :_gcddf =23;goto _eefdd ;_fdcg :_gcddf =25;goto _eefdd ;_gcacba :_gcddf =27;goto _eefdd ;
_faaaf :_gcddf =29;goto _eefdd ;_ecbgg :_gcddf =31;goto _eefdd ;_gcbeg :_gcddf =33;goto _eefdd ;_gdcgg :_gcddf =35;goto _eefdd ;_eeaea :_gcddf =37;goto _eefdd ;_gfbbg :_gcddf =39;goto _eefdd ;_eefeg :_gcddf =41;goto _eefdd ;_gfdff :_gcddf =43;goto _eefdd ;
_eaebd :_gcddf =45;goto _eefdd ;_afgab :_gcddf =47;goto _eefdd ;_fgea :_gcddf =49;goto _eefdd ;_dfbc :_gcddf =51;goto _eefdd ;_dbced :_gcddf =53;goto _eefdd ;_gcgdge :_gcddf =55;goto _eefdd ;_acddd :_gcddf =57;goto _eefdd ;_cdgcc :_gcddf =59;goto _eefdd ;
_aeeg :_gcddf =61;goto _eefdd ;_bfdfb :_gcddf =63;goto _eefdd ;_ffcf :_gcddf =65;goto _eefdd ;_babe :_gcddf =67;goto _eefdd ;_gdbba :_gcddf =72;goto _eefdd ;_acfba :_gcddf =75;goto _eefdd ;_dddca :_gcddf =78;goto _eefdd ;_cafea :_gcddf =81;goto _eefdd ;
_ababbf :_gcddf =84;goto _eefdd ;_cdcgg :_gcddf =87;goto _eefdd ;_dafg :_gcddf =90;goto _eefdd ;_eefdd :_bcfbd =uint (_fcaa [_gcddf ]);_gcddf ++;for ;_bcfbd > 0;_bcfbd --{_gcddf ++;switch _fcaa [_gcddf -1]{case 3:_cgef =_eacff +1;case 4:_aefc =1;case 5:_aefc =2;
case 6:_aefc =3;case 7:_aefc =4;case 8:_aefc =11;case 9:_aefc =14;case 10:_aefc =15;case 11:_cgef =_eacff +1;{_cfcgc .emit (_abbe ,_fbebc [_fbdeb :_cgef ]);};case 12:_cgef =_eacff +1;{_cfcgc .emit (_fddcc ,_fbebc [_fbdeb :_cgef ]);};case 13:_cgef =_eacff +1;
{_cfcgc .emit (_adeage ,_fbebc [_fbdeb :_cgef -1]);};case 14:_cgef =_eacff +1;{_cfcgc .emit (_adeage ,_fbebc [_fbdeb +1:_cgef -2]);};case 15:_cgef =_eacff +1;{_cfcgc .emit (_ddaec ,_fbebc [_fbdeb :_cgef -1]);};case 16:_cgef =_eacff +1;{_cfcgc .emit (_ddaec ,_fbebc [_fbdeb :_cgef -1]);
};case 17:_cgef =_eacff +1;{_cfcgc .emit (_ebdge ,_fbebc [_fbdeb :_cgef ]);};case 18:_cgef =_eacff +1;{_cfcgc .emit (_cbag ,_fbebc [_fbdeb :_cgef ]);};case 19:_cgef =_eacff +1;{_cfcgc .emit (_gaaa ,_fbebc [_fbdeb :_cgef ]);};case 20:_cgef =_eacff +1;{_cfcgc .emit (_ggda ,_fbebc [_fbdeb :_cgef ]);
};case 21:_cgef =_eacff +1;{_cfcgc .emit (_fbcd ,_fbebc [_fbdeb :_cgef ]);};case 22:_cgef =_eacff +1;{_cfcgc .emit (_gdfa ,_fbebc [_fbdeb :_cgef ]);};case 23:_cgef =_eacff +1;{_cfcgc .emit (_bcfc ,_fbebc [_fbdeb :_cgef ]);};case 24:_cgef =_eacff +1;{_cfcgc .emit (_ffdbb ,_fbebc [_fbdeb :_cgef ]);
};case 25:_cgef =_eacff +1;{_cfcgc .emit (_egea ,_fbebc [_fbdeb :_cgef ]);};case 26:_cgef =_eacff +1;{_cfcgc .emit (_cgag ,_fbebc [_fbdeb :_cgef ]);};case 27:_cgef =_eacff +1;{_cfcgc .emit (_febd ,_fbebc [_fbdeb :_cgef ]);};case 28:_cgef =_eacff +1;{_cfcgc .emit (_gcece ,_fbebc [_fbdeb :_cgef ]);
};case 29:_cgef =_eacff +1;{_cfcgc .emit (_feddf ,_fbebc [_fbdeb :_cgef ]);};case 30:_cgef =_eacff +1;{_cfcgc .emit (_egga ,_fbebc [_fbdeb :_cgef ]);};case 31:_cgef =_eacff +1;{_cfcgc .emit (_ffdgb ,_fbebc [_fbdeb :_cgef ]);};case 32:_cgef =_eacff +1;{_cfcgc .emit (_aefga ,_fbebc [_fbdeb :_cgef ]);
};case 33:_cgef =_eacff +1;{_cfcgc .emit (_ecaa ,_fbebc [_fbdeb :_cgef ]);};case 34:_cgef =_eacff ;_eacff --;{_cfcgc .emit (_fbee ,_fbebc [_fbdeb :_cgef ]);};case 35:_cgef =_eacff ;_eacff --;{_cfcgc .emit (_eeafe ,_fbebc [_fbdeb :_cgef ]);};case 36:_cgef =_eacff ;
_eacff --;{_cfcgc .emit (_cddfc ,_fbebc [_fbdeb :_cgef ]);};case 37:_cgef =_eacff ;_eacff --;{_cfcgc .emit (_bdadf ,_fbebc [_fbdeb :_cgef ]);};case 38:_cgef =_eacff ;_eacff --;{_cfcgc .emit (_adeg ,_fbebc [_fbdeb :_cgef ]);};case 39:_cgef =_eacff ;_eacff --;
{_cfcgc .emit (_ggfc ,_fbebc [_fbdeb +1:_cgef -1]);};case 40:_cgef =_eacff ;_eacff --;{_cfcgc .emit (_ebeaa ,_fbebc [_fbdeb :_cgef ]);};case 41:_cgef =_eacff ;_eacff --;{_cfcgc .emit (_dbdd ,_fbebc [_fbdeb :_cgef ]);};case 42:_eacff =(_cgef )-1;{_cfcgc .emit (_fbee ,_fbebc [_fbdeb :_cgef ]);
};case 43:switch _aefc {case 0:{_bfec =0;goto _ggbcd ;};case 1:{_eacff =(_cgef )-1;_cfcgc .emit (_eaffd ,_fbebc [_fbdeb :_cgef ]);};case 2:{_eacff =(_cgef )-1;_cfcgc .emit (_fbee ,_fbebc [_fbdeb :_cgef ]);};case 3:{_eacff =(_cgef )-1;_cfcgc .emit (_eeafe ,_fbebc [_fbdeb :_cgef ]);
};case 4:{_eacff =(_cgef )-1;_cfcgc .emit (_aedec ,_fbebc [_fbdeb :_cgef ]);};case 11:{_eacff =(_cgef )-1;_cfcgc .emit (_eefa ,_fbebc [_fbdeb :_cgef ]);};case 14:{_eacff =(_cgef )-1;_cfcgc .emit (_adeg ,_fbebc [_fbdeb :_cgef ]);};case 15:{_eacff =(_cgef )-1;
_cfcgc .emit (_ggfc ,_fbebc [_fbdeb +1:_cgef -1]);};};};};goto _ggbcd ;_ggbcd :_gcddf =int (_fcea [_bfec ]);_bcfbd =uint (_fcaa [_gcddf ]);_gcddf ++;for ;_bcfbd > 0;_bcfbd --{_gcddf ++;switch _fcaa [_gcddf -1]{case 0:_fbdeb =0;case 1:_aefc =0;};};if _bfec ==0{goto _fgbff ;
};if _eacff ++;_eacff !=_gegcf {goto _aefgg ;};_dgaff :{};if _eacff ==_dcfgd {switch _bfec {case 1:goto _bbfec ;case 2:goto _bbfec ;case 31:goto _afdcg ;case 14:goto _bbfec ;case 15:goto _bbfec ;case 32:goto _cfeeb ;case 17:goto _bbfec ;case 33:goto _eabfbf ;
case 18:goto _bbfec ;case 19:goto _bbfec ;case 34:goto _dbaf ;case 35:goto _eaaff ;case 36:goto _eaaff ;case 23:goto _dcbf ;case 37:goto _eaaff ;case 38:goto _febed ;case 39:goto _efgf ;case 40:goto _eeba ;case 41:goto _eeba ;case 42:goto _eeba ;case 43:goto _eabfbf ;
case 44:goto _bbfec ;case 45:goto _eeba ;case 46:goto _eeba ;case 47:goto _eeba ;case 48:goto _eeba ;case 49:goto _eeba ;case 50:goto _eeba ;case 51:goto _eeba ;case 52:goto _eeba ;case 53:goto _eeba ;case 54:goto _eeba ;case 55:goto _eeba ;case 56:goto _eeba ;
case 57:goto _eeba ;case 58:goto _eeba ;case 59:goto _bbfec ;};};_fgbff :{};};if _fbdeb > 0{copy (_fbebc [0:],_fbebc [_fbdeb :]);};};_ =_dcfgd ;if _bfec ==_cegfg {_cfcgc .emit (_acdf ,nil );};close (_cfcgc ._fefc );};

// Bool is a boolean expression.
type Bool struct{_gad bool };

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cecb :=args [0].AsString ();_abeg :=args [1].AsString ();if _cecb .Type !=ResultTypeString ||_abeg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};return MakeBoolResult (_cecb .ValueString ==_abeg .ValueString );};func _feab (_ecca int )string {if _ecca >=1&&_ecca -1< len (_becfb ){if _becfb [_ecca -1]!=""{return _becfb [_ecca -1];};};return _b .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_ecca );
};

// Reference returns a string reference value to an expression with prefix.
func (_gfaaa PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_fcbb :=_gfaaa ._dabfd .Reference (ctx ,ev );_gebbc :=_gfaaa ._abgb .Reference (ctx ,ev );if _fcbb .Type ==ReferenceTypeSheet &&_gebbc .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_fcbb .Value +"\u0021"+_gebbc .Value };
};return ReferenceInvalid ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_edabg (args ,_afeda ))};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );
RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );
RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );
RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );
RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );
RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );
RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );
RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );
RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );
RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );
RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );
RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );
};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_eecdf :=1.0;for _ ,_ddedd :=range args {_ddedd =_ddedd .AsNumber ();switch _ddedd .Type {case ResultTypeNumber :_eecdf *=_ddedd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fded :=Product (_ddedd .ListValues ());
if _fded .Type !=ResultTypeNumber {return _fded ;};_eecdf *=_fded .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ddedd ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_ddedd .Type ));
};};return MakeNumberResult (_eecdf );};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fbbf :=args [0].AsNumber ();if _fbbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ecfa :=args [1].AsNumber ();if _ecfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};return MakeNumberResult (_ac .Pow (_fbbf .ValueNumber ,_ecfa .ValueNumber ));};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};
_gafa :=int (args [0].ValueNumber );return MakeBoolResult (_gafa ==_gafa /2*2);};const _eefa =57348;

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _bgfg (args ,true )};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_dcbg ,_cdgc ,_afed :=_eab (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _afed .Type ==ResultTypeError {return _afed ;};_eeeae ,_afed :=_dcg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _afed .Type ==ResultTypeError {return _afed ;};if _eeeae >=_dcbg {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_debe :=args [3].ValueNumber ;if _debe < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eacg :=args [4].ValueNumber ;if _eacg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_acccf :=args [5].ValueNumber ;if _acccf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dddc :=float64 (int (args [6].ValueNumber ));if !_ecg (_dddc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_acbfc :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_acbfc =int (args [7].ValueNumber );if !_gddd (_acbfc ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");
};};_gbfff ,_afed :=_dcc (_eeeae ,_cdgc ,_acbfc );if _afed .Type ==ResultTypeError {return _afed ;};_gbfff *=_dddc ;_fdfaf ,_afed :=_dcc (_dcbg ,_cdgc ,_acbfc );if _afed .Type ==ResultTypeError {return _afed ;};_fdfaf *=_dddc ;_fdacg ,_afed :=_dcc (_eeeae ,_dcbg ,_acbfc );
if _afed .Type ==ResultTypeError {return _afed ;};_fdacg *=_dddc ;_gagf :=_acccf +_gbfff *100*_debe /_dddc ;_gagf /=_eacg +_fdacg *100*_debe /_dddc ;_gagf --;_gagf *=_dddc /_fdfaf ;return MakeNumberResult (_gagf );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_gagd SheetPrefixExpr )Update (q *_ge .UpdateQuery )Expression {return _gagd };func _efcdg (_ffdcb string ,_fgcb func (_dbgf float64 )float64 )Function {return func (_eddf []Result )Result {if len (_eddf )!=1{return MakeErrorResult (_ffdcb +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_fabad :=_eddf [0].AsNumber ();switch _fabad .Type {case ResultTypeNumber :_gecg :=_fgcb (_fabad .ValueNumber );if _ac .IsNaN (_gecg ){return MakeErrorResult (_ffdcb +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};
if _ac .IsInf (_gecg ,0){return MakeErrorResult (_ffdcb +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_gecg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ffdcb +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _fabad ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffdcb ,_fabad .Type ));
};};};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_aaa :=_dgg .Now ();
_ ,_bbae :=_aaa .Zone ();_dbfe :=_cac +float64 (_aaa .Unix ()+int64 (_bbae ))/86400;return MakeNumberResult (_dbfe );};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_fgbc :=args [0].AsNumber ();if _fgbc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_agbd ,_befdd :=_ac .Modf (_fgbc .ValueNumber );if _befdd < 0{_agbd --;};return MakeNumberResult (_agbd );};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbfdd :=int (args [0].ValueNumber );
return MakeBoolResult (_bbfdd !=_bbfdd /2*2);};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_bgdac :s }};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cfcgg (args ,_gaceb )};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bdba :=args [0].AsString ();if _bdba .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");
};_dbed :=args [1].AsNumber ();if _dbed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_geagc :=_bdba .ValueString ;if len (_geagc )> 2&&(_dd .HasPrefix (_geagc ,"\u0030\u0078")||_dd .HasPrefix (_geagc ,"\u0030\u0058")){_geagc =_geagc [2:];};_cafb ,_ecbgd :=_eed .ParseInt (_geagc ,int (_dbed .ValueNumber ),64);if _ecbgd !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");
};return MakeNumberResult (float64 (_cafb ));};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_caga :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bbfbd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccebc :=args [2].ValueNumber ;if _ccebc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cegec :=args [3].ValueNumber ;if _cegec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _cegec > _ccebc {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");
};_cccc :=(_caga -_bbfbd )*(_ccebc -_cegec +1)*2;_ccgeg :=_ccebc *(_ccebc +1);return MakeNumberResult (_cccc /_ccgeg );};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_gbea :name ,_debc :args };};func _caec (_fbabc yyLexer ,_bcfbe *yySymType )(_ecbea ,_bcbag int ){_bcbag =0;_ecbea =_fbabc .Lex (_bcfbe );if _ecbea <=0{_bcbag =_adfb [0];
goto _gfaag ;};if _ecbea < len (_adfb ){_bcbag =_adfb [_ecbea ];goto _gfaag ;};if _ecbea >=_dadbc {if _ecbea < _dadbc +len (_gcgg ){_bcbag =_gcgg [_ecbea -_dadbc ];goto _gfaag ;};};for _fgba :=0;_fgba < len (_ccgc );_fgba +=2{_bcbag =_ccgc [_fgba +0];if _bcbag ==_ecbea {_bcbag =_ccgc [_fgba +1];
goto _gfaag ;};};_gfaag :if _bcbag ==0{_bcbag =_gcgg [1];};if _fgbdg >=3{_b .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_feab (_bcbag ),uint (_ecbea ));};return _ecbea ,_bcbag ;};func LexReader (r _e .Reader )chan *node {_gabe :=NewLexer ();
go _gabe .lex (r );return _gabe ._fefc };func _cfcgg (_becg []Result ,_aefa rmode )Result {if len (_becg )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fedbe :=_becg [0].AsNumber ();if _fedbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dedeg :=_becg [1].AsNumber ();if _dedeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bcefg :=_dedeg .ValueNumber ;_fbfgg :=_fedbe .ValueNumber ;_ffad :=1.0;if _bcefg > 0{_ffad =_ac .Pow (1/10.0,_bcefg );}else {_ffad =_ac .Pow (10.0,-_bcefg );};_fbfgg ,_agdf :=_ac .Modf (_fbfgg /_ffad );switch _aefa {case _fcbgf :const _bedcb =0.499999999;
if _agdf >=_bedcb {_fbfgg ++;}else if _agdf <=-_bedcb {_fbfgg --;};case _cdefc :case _gaceb :if _agdf > 0{_fbfgg ++;}else if _agdf < 0{_fbfgg --;};};return MakeNumberResult (_fbfgg *_ffad );};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_efaga ,_bcbc :=_fbfe (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _bcbc .Type ==ResultTypeError {return _bcbc ;};_bcc :=_efaga ._cca ;_ebdb :=_efaga ._aded ;_fddg :=_efaga ._abcc ;_dfe :=_efaga ._aefg ;
_cebf :=_efaga ._cdeb ;_cbdg :=_efaga ._cbge ;_fgcf :=_efaga ._ffca ;_gfa ,_cgb :=_dcc (_ebdb ,_fddg ,_fgcf );if _cgb .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");
};_ecgg :=_gfa *_cbdg *_bcc ;if _cebf ==0{return MakeNumberResult (_ecgg );};_accc :=_bcc *_cbdg ;_fgdc :=_bcc -_dfe ;_eebg :=int ((_fgdc -_ecgg )/_accc );if _cebf <=_eebg {return MakeNumberResult (_accc );}else if _cebf ==_eebg +1{return MakeNumberResult (_fgdc -_accc *float64 (_eebg )-_ecgg );
}else {return MakeNumberResult (0);};};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_aadb :=len (args );if _aadb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _aadb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bdbba :=args [0];_ddafg :=args [1];if _ddafg .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_aeaa :=args [2].AsNumber ();if _aeaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dce :=false ;if _aadb ==4&&args [3].Type !=ResultTypeEmpty {_fdgc :=args [3].AsNumber ();if _fdgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _fdgc .ValueNumber ==0{_dce =true ;};};_gdbb :=int (_aeaa .ValueNumber )-1;_bgdc :=-1;_caac :=false ;_gfbef :for _gffc ,_ecgc :=range _ddafg .ValueArray {if len (_ecgc )==0{continue ;};_egdaa :=_ecgc [0];switch _cfggbg (_egdaa ,_bdbba ,false ,_dce ){case _ebae :_bgdc =_gffc ;
case _dgbff :_bgdc =_gffc ;_caac =true ;break _gfbef ;};};if _bgdc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gbae :=_ddafg .ValueArray [_bgdc ];
if _gdbb < 0||_gdbb >=len (_gbae ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _caac ||!_dce {return _gbae [_gdbb ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};type parsedReplaceObject struct{_abbff string ;_cgde int ;_eage int ;_aabcd string ;
};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_gdea ,_aaed ,_ebfafg :=_eab (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _ebfafg .Type ==ResultTypeError {return _ebfafg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ccdbd :=_aaed -_gdea ;if _ccdbd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_bfbb :=args [2].ValueNumber ;if _bfbb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cgdag :=(100-_bfbb )/_bfbb ;_gdda :=360/_ccdbd ;return MakeNumberResult (_cgdag *_gdda );};

// BinOpType is the binary operation operator type
//
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];
case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));
default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};_beggb :=args [0].ValueNumber ;if _beggb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");
};_fecc :=float64 (int (args [1].ValueNumber ));if _fecc < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult (_ac .Pow ((1+_beggb /_fecc ),_fecc )-1);};const _deda =16;func (_accd *yyParserImpl )Lookahead ()int {return _accd ._ggaea };func _ecfd (_bagag Result )[][]Result {switch _bagag .Type {case ResultTypeArray :return _bagag .ValueArray ;
case ResultTypeList :return [][]Result {_bagag .ValueList };default:return [][]Result {};};};type evCache struct{_fgf map[string ]Result ;_dag *_g .Mutex ;};func _bffe (_bgbeb []Result ,_fcf bool )Result {var _bgebd string ;if _fcf {_bgebd ="\u004c\u0041\u0052G\u0045";
}else {_bgebd ="\u0053\u004d\u0041L\u004c";};if len (_bgbeb )!=2{return MakeErrorResult (_bgebd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecae :=_bgbeb [0];var _febb [][]Result ;
switch _ecae .Type {case ResultTypeArray :_febb =_ecae .ValueArray ;case ResultTypeList :_febb =[][]Result {_ecae .ValueList };default:return MakeErrorResult (_bgebd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");
};if len (_febb )==0{return MakeErrorResult (_bgebd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};if _bgbeb [1].Type !=ResultTypeNumber {return MakeErrorResult (_bgebd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_cbfdd :=_bgbeb [1].ValueNumber ;if _cbfdd < 1{return MakeErrorResultType (ErrorTypeNum ,_bgebd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_gecb :=int (_cbfdd );if float64 (_gecb )!=_cbfdd {return MakeErrorResultType (ErrorTypeNum ,_bgebd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");
};_gcddb :=[]float64 {};for _ ,_dfcae :=range _febb {for _ ,_ddeb :=range _dfcae {if _ddeb .Type ==ResultTypeNumber {_gcddb =append (_gcddb ,_ddeb .ValueNumber );};};};if _gecb > len (_gcddb ){return MakeErrorResultType (ErrorTypeNum ,_bgebd +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_afdg :=_dc .MergeSort (_gcddb );if _fcf {return MakeNumberResult (_afdg [len (_afdg )-_gecb ]);}else {return MakeNumberResult (_afdg [_gecb -1]);};};

// Update returns the same object as updating sheet references does not affect String.
func (_ggabb String )Update (q *_ge .UpdateQuery )Expression {return _ggabb };

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_gfec :=args [0];if _gfec .Type ==ResultTypeError {return _gfec ;
};if _gfec .Type !=ResultTypeString &&_gfec .Type !=ResultTypeNumber &&_gfec .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_edfa :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ffcb :=int (args [1].ValueNumber );if _ffcb < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_egfce :=int (args [2].ValueNumber );if _egfce < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_aadc :=len (_edfa );if _ffcb > _aadc {return MakeStringResult ("");};_ffcb --;_ggdfe :=_ffcb +_egfce ;if _ggdfe > _aadc {return MakeStringResult (_edfa [_ffcb :]);}else {return MakeStringResult (_edfa [_ffcb :_ggdfe ]);};};

// String returns a string representation for Bool.
func (_agc Bool )String ()string {if _agc ._gad {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Eval evaluates and returns a boolean.
func (_aa Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_aa ._gad )};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cab :=_dd .ToLower (args [0].ValueString );if !_efgb (_cab ){_ ,_ ,_ ,_ ,_bcf ,_ecf :=_cce (_cab );if _ecf .Type ==ResultTypeError {_ecf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";
return _ecf ;};if _bcf {return MakeNumberResult (0);};};_dgde ,_dab ,_cfe ,_ ,_cag :=_aadd (_cab );if _cag .Type ==ResultTypeError {return _cag ;};return MakeNumberResult (_bbf (_dgde ,_dab ,_cfe ));};type rangeIndex struct{_fbge int ;_dfae int ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_dgeda :=args [0].AsNumber ();if _dgeda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");
};_dbacd :=int (_dgeda .ValueNumber );_baad :=make ([][]Result ,0,_dbacd );for _gfffc :=0;_gfffc < _dbacd ;_gfffc ++{_egad :=make ([]Result ,_dbacd );for _gdaf :=0;_gdaf < _dbacd ;_gdaf ++{if _gfffc ==_gdaf {_egad [_gdaf ]=MakeNumberResult (1.0);}else {_egad [_gdaf ]=MakeNumberResult (0.0);
};};_baad =append (_baad ,_egad );};return MakeArrayResult (_baad );};type plex struct{_gdbbb chan *node ;_dbega Expression ;_debcc string ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfbf :=args [0];switch _cfbf .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
case ResultTypeString :_gfad :=0.0;_dabf :=0.0;for _ ,_bebf :=range _cfbf .ValueString {_adbd :=0.0;switch _bebf {case 'I':_adbd =1;case 'V':_adbd =5;case 'X':_adbd =10;case 'L':_adbd =50;case 'C':_adbd =100;case 'D':_adbd =500;case 'M':_adbd =1000;};_gfad +=_adbd ;
switch {case _dabf ==_adbd &&(_dabf ==5||_dabf ==50||_dabf ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_dabf ==_adbd :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");
};if _dabf < _adbd {_gfad -=2*_dabf ;};_dabf =_adbd ;};return MakeNumberResult (_gfad );case ResultTypeError :return _cfbf ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cfbf .Type ));
};};func _cedf (_daag string ,_gceg _dgg .Time )(_dgg .Time ,error ){_ffdec ,_ ,_gccc :=_bd .ParseFloat (_daag ,10,128,_bd .ToNearestEven );if _gccc !=nil {return _dgg .Time {},_gccc ;};_afaa :=new (_bd .Float );_afaa .SetUint64 (uint64 (24*_dgg .Hour ));
_ffdec .Mul (_ffdec ,_afaa );_aabf ,_ :=_ffdec .Uint64 ();_facf :=_gceg .Add (_dgg .Duration (_aabf ));return _fegg (_facf ),nil ;};const _gafc ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";
func _aabe (_bfgb ,_dbac ,_ddcb ,_cbfa int )int {if _dbac > _ddcb {return 0;};if _cfcg (_cbfa ){return (_ddcb -_dbac +1)*30;};_dgcc :=0;for _cfed :=_dbac ;_cfed <=_ddcb ;_cfed ++{_dgcc +=_dbe (_bfgb ,_cfed );};return _dgcc ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bedab :=_dd .Split (v ,"\u003a");if len (_bedab )!=2{return nil ;};_adfe ,_ :=_eed .Atoi (_bedab [0]);_cafff ,_ :=_eed .Atoi (_bedab [1]);if _adfe > _cafff {_adfe ,_cafff =_cafff ,_adfe ;};return HorizontalRange {_cgfbgb :_adfe ,_fgbf :_cafff };
};const (_fcbgf rmode =iota ;_cdefc ;_gaceb ;);func _gfdf (_cfeb []Result ,_gee string )(*cumulArgs ,Result ){if len (_cfeb )!=6{return nil ,MakeErrorResult (_gee +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _cfeb [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gee +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gggc :=_cfeb [0].ValueNumber ;
if _gggc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _cfeb [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gee +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_cgfa :=_cfeb [1].ValueNumber ;if _cgfa <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if _cfeb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gee +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_egb :=_cfeb [2].ValueNumber ;if _egb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _cfeb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gee +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_bbbe :=_cfeb [3].ValueNumber ;if _bbbe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _cfeb [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gee +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dccf :=_cfeb [4].ValueNumber ;if _dccf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};if _dccf < _bbbe {return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");
};if _dccf > _cgfa {return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");
};_ggag :=int (_cfeb [5].ValueNumber );if _ggag !=0&&_ggag !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_gee +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");
};return &cumulArgs {_gggc ,_cgfa ,_egb ,_bbbe ,_dccf ,_ggag },_faba ;};var _faba Result =MakeEmptyResult ();func _egcg (_eeda string ,_bacd []Result )(*parsedSearchObject ,Result ){_gcfcc :=len (_bacd );if _gcfcc !=2&&_gcfcc !=3{return nil ,MakeErrorResult (_eeda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_addea :=_bacd [0];if _addea .Type ==ResultTypeError {return nil ,_addea ;};if _addea .Type !=ResultTypeString &&_addea .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_ecagb :=_bacd [1];if _ecagb .Type ==ResultTypeError {return nil ,_ecagb ;};if _ecagb .Type !=ResultTypeString &&_ecagb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");
};_gccb :=_ecagb .Value ();_geee :=_addea .Value ();_abcb :=1;if _gcfcc ==3&&_bacd [2].Type !=ResultTypeEmpty {_fbfee :=_bacd [2];if _fbfee .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");
};_abcb =int (_fbfee .ValueNumber );if _abcb < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};if _abcb > len (_gccb ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");
};};return &parsedSearchObject {_geee ,_gccb ,_abcb },_faba ;};type cmpResult int8 ;const _cee =86400000000000;

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fcgbd :=args [0];_bdega :=args [1];if _bdega .Type !=ResultTypeArray &&_bdega .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gddea :=_dafb (_bdega );_cbfae :=-1;for _bcbcg ,_faff :=range _gddea {if _cfggbg (_fcgbd ,_faff ,false ,false )==_dgbff {_cbfae =_bcbcg ;};};if _cbfae ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};_abed :=_gddea ;if len (args )==3{_abed =_dafb (args [2]);};if _cbfae < 0||_cbfae >=len (_abed ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");
};return _abed [_cbfae ];};const _gbab int =30;

// Update returns the same object as updating sheet references does not affect named ranges.
func (_ggabd NamedRangeRef )Update (q *_ge .UpdateQuery )Expression {return _ggabd };

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_gaf :=len (args );if _gaf !=5&&_gaf !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_afedg ,_dedc ,_adag :=_eab (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _adag .Type ==ResultTypeError {return _adag ;};_deca ,_adag :=_dcg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");
if _adag .Type ==ResultTypeError {return _adag ;};if _deca >=_afedg {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bffcd :=args [3].ValueNumber ;if _bffcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eeff :=args [4].ValueNumber ;if _eeff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_cfcac :=0;if _gaf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfcac =int (args [5].ValueNumber );if !_gddd (_cfcac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");
};};_bdffb ,_adag :=_dcc (_afedg ,_dedc ,_cfcac );if _adag .Type ==ResultTypeError {return _adag ;};_dadb ,_adag :=_dcc (_deca ,_dedc ,_cfcac );if _adag .Type ==ResultTypeError {return _adag ;};_edge ,_adag :=_dcc (_deca ,_afedg ,_cfcac );if _adag .Type ==ResultTypeError {return _adag ;
};_cbb :=1+_dadb *_bffcd ;_dffc :=1+_bdffb *_eeff ;return MakeNumberResult ((_cbb /_dffc -_edge *_bffcd )*100);};const _ggfc =57354;

// Reference returns a string reference value to a named range.
func (_fdedc NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_fdedc ._cbage };};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_aea :v }};

// GetWidth returns 0 for the invalid reference context.
func (_bdga *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Reference returns a string reference value to a range with prefix.
func (_deea PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_cbebb :=_deea ._gedge .Reference (ctx ,ev );_aefd :=_deea ._fgcg .Reference (ctx ,ev );_fdeddg :=_deea ._bedge .Reference (ctx ,ev );if _cbebb .Type ==ReferenceTypeSheet &&_aefd .Type ==ReferenceTypeCell &&_fdeddg .Type ==ReferenceTypeCell {return MakeRangeReference (_fbbd (_cbebb ,_aefd ,_fdeddg ));
};return ReferenceInvalid ;};func (_acagf PrefixVerticalRange )verticalRangeReference (_afccg string )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_afccg ,_acagf ._eege ,_acagf ._dced );};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };
case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };
case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };
default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edeg :=args [0].AsNumber ();
if _edeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cega :=args [1].AsNumber ();if _cega .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bgfe :=int (_cega .ValueNumber );if _bgfe < 0||_bgfe > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");
};_eaecb :=0;if len (args )> 2{_ccfg :=args [2].AsNumber ();if _ccfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_eaecb =int (_ccfg .ValueNumber );};_beab :=_eed .FormatInt (int64 (_edeg .ValueNumber ),_bgfe );if len (_beab )< _eaecb {_beab =_dd .Repeat ("\u0030",_eaecb -len (_beab ))+_beab ;};return MakeStringResult (_beab );};func _fbfe (_ebab []Result ,_gefc string )(*amorArgs ,Result ){_bac :=len (_ebab );
if _bac !=6&&_bac !=7{return nil ,MakeErrorResult (_gefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ebab [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gefc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_eddg :=_ebab [0].ValueNumber ;if _eddg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gefc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_fcgb ,_bdeg :=_dcg (_ebab [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_gefc );if _bdeg .Type ==ResultTypeError {return nil ,_bdeg ;};_aeaf ,_bdeg :=_dcg (_ebab [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_gefc );
if _bdeg .Type ==ResultTypeError {return nil ,_bdeg ;};if _aeaf < _fcgb {return nil ,MakeErrorResultType (ErrorTypeNum ,_gefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");
};if _ebab [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ddcd :=_ebab [3].ValueNumber ;if _ddcd < 0||_ddcd > _eddg {return nil ,MakeErrorResultType (ErrorTypeNum ,_gefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");
};if _ebab [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bab :=int (_ebab [4].ValueNumber );if _bab < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gefc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if _ebab [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gefc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_bggdg :=_ebab [5].ValueNumber ;if _bggdg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_gefc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");
};_gcacb :=0;if _bac ==7&&_ebab [6].Type !=ResultTypeEmpty {if _ebab [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gefc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcacb =int (_ebab [6].ValueNumber );if !_gddd (_gcacb )||_gcacb ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_gefc );
};};return &amorArgs {_eddg ,_fcgb ,_aeaf ,_ddcd ,_bab ,_bggdg ,_gcacb },_faba ;};func _aegff (_abfd Result ,_adgea *criteriaParsed )bool {_feac :=_dd .ToLower (_abfd .ValueString );_bcfff :=_adgea ._adecb ._gefgg ;_aebfg :=_adgea ._adecb ._dbeb ;if _bcfff ==_ababb {return _feac ==_aebfg ||_f .Match (_aebfg ,_feac );
};if _abfd .Type !=ResultTypeEmpty {if _feac ==_adgea ._dffce ||_f .Match (_adgea ._dffce ,_feac ){return true ;};if _ ,_fced :=_eed .ParseFloat (_aebfg ,64);_fced ==nil {return false ;};switch _bcfff {case _ecgae :return _feac <=_aebfg ;case _gedg :return _feac >=_aebfg ;
case _cgee :return _feac < _aebfg ;case _caag :return _feac > _aebfg ;};};return false ;};type criteriaParsed struct{_cgae bool ;_cdbe float64 ;_dffce string ;_adecb *criteriaRegex ;};func (_afefa node )String ()string {return _b .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_afefa ._agca ,_badb (string (_afefa ._bgegf )));
};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dcfc ,_fcff :=_egcg ("\u0046\u0049\u004e\u0044",args );if _fcff .Type !=ResultTypeEmpty {return _fcff ;};_gdcc :=_dcfc ._aafe ;if _gdcc ==""{return MakeNumberResult (1.0);
};_gfdfc :=_dcfc ._eabb ;_adgf :=_dcfc ._cddf -1;_cdgf :=1;_fegc :=0;for _efea :=range _gfdfc {if _efea !=0{_bgdd :=1;if _efea -_fegc > 1{_bgdd =2;};_cdgf +=_bgdd ;};if _cdgf > _adgf {_gcfb :=_dd .Index (_gfdfc [_efea :],_gdcc );if _gcfb ==0{return MakeNumberResult (float64 (_cdgf ));
};};_fegc =_efea ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Eval evaluates and returns the result of a function call.
func (_gdded FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_debd :=LookupFunction (_gdded ._gbea );if _debd !=nil {_ddgf :=make ([]Result ,len (_gdded ._debc ));for _ddcbe ,_cadga :=range _gdded ._debc {_ddgf [_ddcbe ]=_cadga .Eval (ctx ,ev );
_ddgf [_ddcbe ].Ref =_cadga .Reference (ctx ,ev );};if _ ,_gfgd :=_agagg [_gdded ._gbea ];!_gfgd {if _beefb ,_egffg :=_aadcd (_ddgf );_beefb {return _egffg ;};};return _debd (_ddgf );};_gbdf :=LookupFunctionComplex (_gdded ._gbea );if _gbdf !=nil {_egfcd :=make ([]Result ,len (_gdded ._debc ));
for _gcfdf ,_gfffdb :=range _gdded ._debc {_egfcd [_gcfdf ]=_gfffdb .Eval (ctx ,ev );_egfcd [_gcfdf ].Ref =_gfffdb .Reference (ctx ,ev );};if _ ,_bgdce :=_agagg [_gdded ._gbea ];!_bgdce {if _bcgeg ,_ffge :=_aadcd (_egfcd );_bcgeg {return _ffge ;};};return _gbdf (ctx ,ev ,_egfcd );
};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_gdded ._gbea );};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_dfbfc :=ctx .GetEpoch ();_bggdc ,_eeedc :=_cedf (args [0].Value (),_dfbfc );if _eeedc !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_dfcde :=_bggdc .Year ();return MakeBoolResult (_dfcf (_dfcde ));};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gcgd :=args [0].AsNumber ();_dfegg :=args [1].AsNumber ();if _gcgd .Type !=ResultTypeNumber ||_dfegg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dbdgb :=_ac .Trunc (_gcgd .ValueNumber );_gcef :=_ac .Trunc (_dfegg .ValueNumber );if _dbdgb < _gcef {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");
};if _dbdgb ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_dbdgb +_gcef -1);args [1]=MakeNumberResult (_dbdgb -1);return Combin (args );};func _ebfad (_geff Result ,_faac ,_geba int )[][]Result {_efcdb :=[][]Result {};switch _geff .Type {case ResultTypeArray :for _cbgea ,_gbb :=range _geff .ValueArray {if _cbgea < _faac {_efcdb =append (_efcdb ,_gadd (MakeListResult (_gbb ),_geba ));
}else {_efcdb =append (_efcdb ,_gadd (MakeErrorResultType (ErrorTypeNA ,""),_geba ));};};case ResultTypeList :_begc :=_gadd (_geff ,_geba );for _cddg :=0;_cddg < _faac ;_cddg ++{_efcdb =append (_efcdb ,_begc );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gfcb :=0;
_gfcb < _faac ;_gfcb ++{_bbga :=_gadd (_geff ,_geba );_efcdb =append (_efcdb ,_bbga );};};return _efcdb ;};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_facd :=args [0].AsString ();if _facd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};if len (_facd .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_facd .ValueString [0]));};func _dfcf (_dgae int )bool {if _dgae ==_dgae /400*400{return true ;};if _dgae ==_dgae /100*100{return false ;};return _dgae ==_dgae /4*4;
};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_fcge :=args [0].AsNumber ();if _fcge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};var _cgab float64 ;_fbcf :=args [1].AsNumber ();if _fbcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cgab =_fbcf .ValueNumber ;if _cgab < 0&&_fcge .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");
};_abdd :=_fcge .ValueNumber ;_abdd ,_cbae :=_ac .Modf (_abdd /_cgab );if _cbae !=0{if _fcge .ValueNumber < 0&&_cbae < 0{_abdd --;};};return MakeNumberResult (_abdd *_cgab );};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_edgc ,_bca :=_daca (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _bca .Type ==ResultTypeError {return _bca ;};_bcbe :=_edgc ._bbcg ;_bcfgf :=_edgc ._afdd ;_fgcec :=_edgc ._gea ;_dbb :=_edgc ._gcg ;
_fabae :=_edgc ._efaa ;_ggfa :=_edgc ._bbec ;return _eba (_bcbe ,_bcfgf ,_fgcec ,_dbb ,_fabae ,_ggfa );};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_adcgc :=args [0].AsNumber ();if _adcgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _adcgc .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_bfa :=float64 (1);_fccfg :=_ac .Trunc (_adcgc .ValueNumber );for _afdf :=_fccfg ;_afdf > 1;_afdf -=2{_bfa *=_afdf ;};return MakeNumberResult (_bfa );};type noCache struct{};

// String returns a string representation of ConstArrayExpr.
func (_eda ConstArrayExpr )String ()string {return ""};

// FunctionCall is a function call expression.
type FunctionCall struct{_gbea string ;_debc []Expression ;};func _gec (_gbgc ,_deb float64 ,_ffa ,_ggde int )float64 {_bffc :=_ceef (_gbgc );_aabed :=_ceef (_deb );if _ggde ==1{_bgbb :=_befd (_bffc ,_aabed ,_ffa ,1);_gegd :=_bgbb .AddDate (0,12/_ffa ,0);
return _abg (_bgbb ,_gegd ,_ggde );};return float64 (_cceb (0,_ggde ))/float64 (_ffa );};func _bada (){_dfeg =_ec .MustCompile ("\u005e\u0030\u002b\u0024");_egee =_ec .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");
_ccccf =_ec .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_cgcd =_ec .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_dbace =_ec .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");
_abdag =_ec .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_dfgb =_ec .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");
_ddfa =_ec .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_gcgf =_ec .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");
_aceb =_ec .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");
_dcfg =_ec .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");
_ebdgf =_ec .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_bfeb +_bfeb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_bfeb +_bfeb +"\u0029\u002b\u0059+\u0024");_cgcg =_ec .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_bfeb +_bfeb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_bfeb +_bfeb +"\u0029\u002b\u0059+\u0024");
_geadc =_ec .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_caff =_ec .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");
};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_cfdb :=args [0].AsNumber ();if _cfdb .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fgfd :=float64 (1);if _cfdb .ValueNumber < 0{_fgfd =-1;};if len (args )> 1{_fbab :=args [1].AsNumber ();if _fbab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_fgfd =_fbab .ValueNumber ;};_gcga :=float64 (1);if len (args )> 2{_gacba :=args [2].AsNumber ();if _gacba .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gcga =_gacba .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ac .Floor (_cfdb .ValueNumber ));};_agfd :=_cfdb .ValueNumber ;_agfd ,_decag :=_ac .Modf (_agfd /_fgfd );if _decag !=0&&_cfdb .ValueNumber < 0&&_gcga > 0{_agfd ++;};return MakeNumberResult (_agfd *_fgfd );
};type criteriaRegex struct{_gefgg byte ;_dbeb string ;};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );
RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );
RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );
RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_dbfed ,_effgb :=_egcg ("\u0046\u0049\u004e\u0044",args );if _effgb .Type !=ResultTypeEmpty {return _effgb ;};_eefd :=_dd .ToLower (_dbfed ._aafe );if _eefd ==""{return MakeNumberResult (1.0);};_edfdbe :=_dd .ToLower (_dbfed ._eabb );
_ccage :=_dbfed ._cddf ;_aebdg :=1;for _fcdd :=range _edfdbe {if _aebdg < _ccage {_aebdg ++;continue ;};_ebfe :=_f .Index (_eefd ,_edfdbe [_fcdd :]);if _ebfe ==0{return MakeNumberResult (float64 (_aebdg ));};_aebdg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _ddaf (_be BinOpType ,_egfb []Result ,_ca Result )Result {_gdd :=[]Result {};
switch _ca .Type {case ResultTypeNumber :_deg :=_ca .ValueNumber ;for _db :=range _egfb {_dbd :=_egfb [_db ].AsNumber ();if _dbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _be {case BinOpTypePlus :_gdd =append (_gdd ,MakeNumberResult (_dbd .ValueNumber +_deg ));case BinOpTypeMinus :_gdd =append (_gdd ,MakeNumberResult (_dbd .ValueNumber -_deg ));case BinOpTypeMult :_gdd =append (_gdd ,MakeNumberResult (_dbd .ValueNumber *_deg ));
case BinOpTypeDiv :if _deg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gdd =append (_gdd ,MakeNumberResult (_dbd .ValueNumber /_deg ));case BinOpTypeExp :_gdd =append (_gdd ,MakeNumberResult (_ac .Pow (_dbd .ValueNumber ,_deg )));case BinOpTypeLT :_gdd =append (_gdd ,MakeBoolResult (_dbd .ValueNumber < _deg ));
case BinOpTypeGT :_gdd =append (_gdd ,MakeBoolResult (_dbd .ValueNumber > _deg ));case BinOpTypeEQ :_gdd =append (_gdd ,MakeBoolResult (_dbd .ValueNumber ==_deg ));case BinOpTypeLEQ :_gdd =append (_gdd ,MakeBoolResult (_dbd .ValueNumber <=_deg ));case BinOpTypeGEQ :_gdd =append (_gdd ,MakeBoolResult (_dbd .ValueNumber >=_deg ));
case BinOpTypeNE :_gdd =append (_gdd ,MakeBoolResult (_dbd .ValueNumber !=_deg ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_be ));
};};case ResultTypeString :_afb :=_ca .ValueString ;for _fbf :=range _egfb {_gdf :=_egfb [_fbf ].AsString ();if _gdf .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _be {case BinOpTypeLT :_gdd =append (_gdd ,MakeBoolResult (_gdf .ValueString < _afb ));case BinOpTypeGT :_gdd =append (_gdd ,MakeBoolResult (_gdf .ValueString > _afb ));case BinOpTypeEQ :_gdd =append (_gdd ,MakeBoolResult (_gdf .ValueString ==_afb ));
case BinOpTypeLEQ :_gdd =append (_gdd ,MakeBoolResult (_gdf .ValueString <=_afb ));case BinOpTypeGEQ :_gdd =append (_gdd ,MakeBoolResult (_gdf .ValueString >=_afb ));case BinOpTypeNE :_gdd =append (_gdd ,MakeBoolResult (_gdf .ValueString !=_afb ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_be ));
};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");
};return MakeListResult (_gdd );};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dedef :=args [0].AsString ();if _dedef .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeStringResult (_dd .ToUpper (_dedef .ValueString ));};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_fcebb :=MakeNumberResult (0);for _ ,_ddacb :=range args {_ddacb =_ddacb .AsNumber ();switch _ddacb .Type {case ResultTypeNumber :_fcebb .ValueNumber +=_ddacb .ValueNumber *_ddacb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fada :=SumSquares (_ddacb .ListValues ());
if _fada .Type !=ResultTypeNumber {return _fada ;};_fcebb .ValueNumber +=_fada .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ddacb ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_ddacb .Type ));
};};return _fcebb ;};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_babdg PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_cggcb :=_babdg ._gbeae .Reference (ctx ,ev );switch _cggcb .Type {case ReferenceTypeSheet :if _gege (_cggcb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_cggcb .Value ));
};_bfaab :=_babdg .horizontalRangeReference (_cggcb .Value );if _bbbd ,_fefd :=ev .GetFromCache (_bfaab );_fefd {return _bbbd ;};_bedcbc :=ctx .Sheet (_cggcb .Value );_eacge ,_dfdfb :=_eebde (_bedcbc ,_babdg ._dddgg ,_babdg ._ecceg );_badae :=_ebebfb (_bedcbc ,ev ,_eacge ,_dfdfb );
ev .SetCache (_bfaab ,_badae );return _badae ;default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cggcb .Type ));
};};var (_fgbdg =0;_eced =false ;);func _abg (_cgce ,_beff _dgg .Time ,_afbe int )float64 {if _cgce .After (_beff ){_cgce ,_beff =_beff ,_cgce ;};_cfga :=0;_fac ,_gbe ,_ccbcf :=_cgce .Date ();_egfbg ,_fgece ,_bdbg :=_beff .Date ();_aff ,_gcdb :=int (_gbe ),int (_fgece );
_gcad ,_dbg :=_dgba (_fac ,_aff ,_ccbcf ,_afbe ),_dgba (_egfbg ,_gcdb ,_bdbg ,_afbe );if !_cfcg (_afbe ){return _bbf (_egfbg ,_gcdb ,_dbg )-_bbf (_fac ,_aff ,_gcad );};if _afbe ==0{if (_aff ==2||_gcad < 30)&&_bdbg ==31{_dbg =31;}else if _gcdb ==2&&_dbg ==_dbe (_egfbg ,_gcdb ){_dbg =_dbe (_egfbg ,2);
};}else {if _aff ==2&&_gcad ==30{_gcad =_dbe (_fac ,2);};if _gcdb ==2&&_dbg ==30{_dbg =_dbe (_egfbg ,2);};};if _fac < _egfbg ||(_fac ==_egfbg &&_aff < _gcdb ){_cfga =30-_gcad +1;_ccbcf =1;_gcad =1;_bgda :=_dgg .Date (_fac ,_dgg .Month (_aff ),_ccbcf ,0,0,0,0,_dgg .UTC ).AddDate (0,1,0);
if _bgda .Year ()< _egfbg {_cfga +=_aabe (_bgda .Year (),int (_bgda .Month ()),12,_afbe );_bgda =_bgda .AddDate (0,13-int (_bgda .Month ()),0);_cfga +=_eace (_bgda .Year (),_egfbg -1,_afbe );};_cfga +=_aabe (_egfbg ,int (_bgda .Month ()),_gcdb -1,_afbe );
_bgda =_bgda .AddDate (0,_gcdb -int (_bgda .Month ()),0);_aff =_bgda .Day ();};_cfga +=_dbg -_gcad ;if _cfga > 0{return float64 (_cfga );}else {return 0;};};

// Reference returns an invalid reference for FunctionCall.
func (_fabgg FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_ddd BinOpType )String ()string {if _ddd >=BinOpType (len (_ead )-1){return _b .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ddd );
};return _ce [_ead [_ddd ]:_ead [_ddd +1]];};func (_ccdd ReferenceType )String ()string {if _ccdd >=ReferenceType (len (_ccacc )-1){return _b .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_ccdd );
};return _gafc [_ccacc [_ccdd ]:_ccacc [_ccdd +1]];};func _dgba (_ccg ,_caf ,_begb ,_fdca int )int {if !_cfcg (_fdca ){return _begb ;};_ffef :=_begb ;_facg :=_dbe (_ccg ,_caf );if _ffef > 30||_begb >=_facg ||_ffef >=_facg {_ffef =30;};return _ffef ;};

// Reference returns an invalid reference for EmptyExpr.
func (_fab EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bbgf (_edec []Result ,_egcd string )(*couponArgs ,Result ){_eafc :=len (_edec );if _eafc !=3&&_eafc !=4{return nil ,MakeErrorResult (_egcd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bagg ,_egce ,_cegc :=_eab (_edec [0],_edec [1],_egcd );if _cegc .Type ==ResultTypeError {return nil ,_cegc ;};if _edec [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_egcd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bedc :=_edec [2].ValueNumber ;if !_ecg (_bedc ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_egcd );};_acca :=0;if _eafc ==4&&_edec [3].Type !=ResultTypeEmpty {if _edec [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_egcd +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_acca =int (_edec [3].ValueNumber );if !_gddd (_acca ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_egcd );
};};return &couponArgs {_bagg ,_egce ,int (_bedc ),_acca },_faba ;};type Expression interface{Eval (_fe Context ,_ceb Evaluator )Result ;Reference (_bae Context ,_gcfd Evaluator )Reference ;String ()string ;Update (_aebd *_ge .UpdateQuery )Expression ;
};const _febd =57369;

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _bffe (args ,true )};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_ggce :=len (args );if _ggce !=4&&_ggce !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_acda ,_gafg ,_caedb :=_eab (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _caedb .Type ==ResultTypeError {return _caedb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfcf :=args [2].ValueNumber ;if _cfcf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_ggdf :=args [3].ValueNumber ;if _ggdf <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_fedb :=0;if _ggce ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fedb =int (args [4].ValueNumber );if !_gddd (_fedb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");
};};_bcab ,_caedb :=_dcc (_acda ,_gafg ,_fedb );if _caedb .Type ==ResultTypeError {return _caedb ;};return MakeNumberResult ((_ggdf /_cfcf -1)/_bcab );};const _gdfa =57364;

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_edgf ,_bde :=_bbgf (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _bde .Type ==ResultTypeError {return _bde ;};return MakeNumberResult (_bage (_edgf ._gagg ,_edgf ._dgdd ,_edgf ._ceeb ,_edgf ._cbdd ));
};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};_edgfb :=args [0].AsNumber ();if _edgfb .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");
};if _edgfb .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};return MakeNumberResult (_gdbde (_edgfb .ValueNumber ));};func init (){_bada ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );
RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );
RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );
RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};type cumulArgs struct{_acga float64 ;
_fbea float64 ;_gbff float64 ;_dfb float64 ;_cecg float64 ;_ffcaf int ;};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _ffaf (args ,true )};const _fbcd =57363;func _afcc (_fafg ,_cdce ,_aaee ,_fcbg ,_fdad ,_bcaeg float64 )float64 {var _fad ,_fafd float64 ;_deag :=0.0;_efgbg :=_ac .Ceil (_fdad );_fdga :=_fafg -_cdce ;_ceab :=false ;
_aagb :=0.0;for _aedc :=1.0;_aedc <=_efgbg ;_aedc ++{if !_ceab {_fad =_afgba (_fafg ,_cdce ,_aaee ,_aedc ,_bcaeg );_aagb =_fdga /(_aaee -_aedc +1);if _aagb > _fad {_fafd =_aagb ;_ceab =true ;}else {_fafd =_fad ;_fdga -=_fad ;};}else {_fafd =_aagb ;};if _aedc ==_efgbg {_fafd *=_fdad +1-_efgbg ;
};_deag +=_fafd ;};return _deag ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_cbbea PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_eegec :=_cbbea ._ebbed .Reference (ctx ,ev );switch _eegec .Type {case ReferenceTypeSheet :if _gege (_eegec ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eegec .Value ));
};_bageb :=_cbbea .verticalRangeReference (_eegec .Value );if _gbdde ,_aece :=ev .GetFromCache (_bageb );_aece {return _gbdde ;};_ecdbd :=ctx .Sheet (_eegec .Value );_edgec ,_fdfe :=_geed (_ecdbd ,_cbbea ._eege ,_cbbea ._dced );_adegg :=_ebebfb (_ecdbd ,ev ,_edgec ,_fdfe );
ev .SetCache (_bageb ,_adegg );return _adegg ;default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eegec .Type ));
};};

// SetLocked does nothing for the invalid reference context.
func (_cafe *ivr )SetLocked (cellRef string ,locked bool ){};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_eafg ,_cdbg :=_cgdaa (args ,true );if _cdbg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_eafg /_cdbg );};func _ggdef (_aeebd string ,_baca []Result )(*parsedReplaceObject ,Result ){if len (_baca )!=4{return nil ,MakeErrorResult (_aeebd +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _baca [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_aeebd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");
};_cfdfb :=_baca [0].ValueString ;if _baca [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_aeebd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");
};_edbf :=int (_baca [1].ValueNumber )-1;if _baca [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_aeebd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");
};_bgfgc :=int (_baca [2].ValueNumber );if _baca [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_aeebd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");
};_fdgcb :=_baca [3].ValueString ;return &parsedReplaceObject {_cfdfb ,_edbf ,_bgfgc ,_fdgcb },_faba ;};func (_fge *evCache )GetFromCache (key string )(Result ,bool ){_fge ._dag .Lock ();_ccbb ,_cb :=_fge ._fgf [key ];_fge ._dag .Unlock ();return _ccbb ,_cb ;
};func _ceedbf (_gagce []Result )(float64 ,float64 ,Result ){_adge :=0.0;_affb :=1.0;for _ ,_cceaac :=range _gagce {switch _cceaac .Type {case ResultTypeNumber :_adge +=_cceaac .ValueNumber ;_affb *=_gdbde (_cceaac .ValueNumber );case ResultTypeList ,ResultTypeArray :_adgbe ,_cccca ,_gaceg :=_ceedbf (_cceaac .ListValues ());
_adge +=_adgbe ;_affb *=_gdbde (_cccca );if _gaceg .Type ==ResultTypeError {return 0,0,_gaceg ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
case ResultTypeError :return 0,0,_cceaac ;};};return _adge ,_affb ,_faba ;};const _cfcb =1;

// IsBool returns false for the invalid reference context.
func (_gdcf *ivr )IsBool (cellRef string )bool {return false };

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _ffaf (args ,false )};

// String returns a string representation of SheetPrefixExpr.
func (_cdeg SheetPrefixExpr )String ()string {return _cdeg ._bgdac };

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_bdbaf :=_dd .Split (v ,"\u003a");if len (_bdbaf )!=2{return nil ;};if _bdbaf [0]> _bdbaf [1]{_bdbaf [0],_bdbaf [1]=_bdbaf [1],_bdbaf [0];};return VerticalRange {_fgddc :_bdbaf [0],_fcce :_bdbaf [1]};};

// String returns a string representation of a vertical range.
func (_egge VerticalRange )String ()string {return _egge .verticalRangeReference ()};

// String returns a string representation of a vertical range with prefix.
func (_bbadb PrefixVerticalRange )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bbadb ._ebbed .String (),_bbadb ._eege ,_bbadb ._dced );};var _cabe =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};


// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_ecbab :=len (args );if _ecbab !=2&&_ecbab !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dbce ,_bbfe :=_ccag (args [0],args [1],"\u0058\u0049\u0052\u0052");if _bbfe .Type ==ResultTypeError {return _bbfe ;};_afcg :=_dbce ._efcd ;_aebf :=_dbce ._fddd ;_fgee :=0.1;if _ecbab ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fgee =args [2].ValueNumber ;if _fgee <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");
};};return _caba (_afcg ,_aebf ,_fgee );};func _cdba (_daadg [][]Result ,_deeff int )[][]Result {_fccfga :=[][]Result {};for _acae :=range _daadg {if _acae ==0{continue ;};_gfdg :=[]Result {};for _dgcgd :=range _daadg {if _dgcgd ==_deeff {continue ;};_gfdg =append (_gfdg ,_daadg [_acae ][_dgcgd ]);
};_fccfga =append (_fccfga ,_gfdg );};return _fccfga ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );
RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_ebbed Expression ;_eege ,_dced string ;};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_abaec :=args [0].AsNumber ();if _abaec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_dacab :=float64 (1);if _abaec .ValueNumber < 0{_dacab =-1;};if len (args )> 1{_dgcg :=args [1].AsNumber ();if _dgcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_dacab =_dgcg .ValueNumber ;};_dcec :=float64 (1);if len (args )> 2{_dbcb :=args [2].AsNumber ();if _dbcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");
};_dcec =_dbcb .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ac .Ceil (_abaec .ValueNumber ));};_gfbfa :=_abaec .ValueNumber ;_gfbfa ,_ddefe :=_ac .Modf (_gfbfa /_dacab );if _ddefe !=0{if _abaec .ValueNumber > 0{_gfbfa ++;}else if _dcec < 0{_gfbfa --;
};};return MakeNumberResult (_gfbfa *_dacab );};func _cedeb (_affbf ,_eaad Expression )(Expression ,Expression ,error ){_eeeab ,_gdagd :=_affbf .(CellRef );if !_gdagd {return nil ,nil ,_d .New (_b .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_affbf .String ()));
};_efdbf ,_gdagd :=_eaad .(CellRef );if !_gdagd {return nil ,nil ,_d .New (_b .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_eaad .String ()));};_gdgf ,_dfffd :=_gg .ParseCellReference (_eeeab ._aea );
if _dfffd !=nil {return nil ,nil ,_dfffd ;};_cccb ,_cccba :=_gg .ParseCellReference (_efdbf ._aea );if _cccba !=nil {return nil ,nil ,_cccba ;};_ccaac :=false ;if _gdgf .RowIdx > _cccb .RowIdx {_ccaac =true ;_gdgf .RowIdx ,_cccb .RowIdx =_cccb .RowIdx ,_gdgf .RowIdx ;
};if _gdgf .ColumnIdx > _cccb .ColumnIdx {_ccaac =true ;_gdgf .ColumnIdx ,_cccb .ColumnIdx =_cccb .ColumnIdx ,_gdgf .ColumnIdx ;_gdgf .Column ,_cccb .Column =_cccb .Column ,_gdgf .Column ;};if _ccaac {return NewCellRef (_gdgf .String ()),NewCellRef (_cccb .String ()),nil ;
};return _affbf ,_eaad ,nil ;};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_gfgge :=len (args );if _gfgge !=4&&_gfgge !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_feeed ,_dgea ,_dgbfa :=_eab (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _dgbfa .Type ==ResultTypeError {return _dgbfa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afaf :=args [2].ValueNumber ;if _afaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_fafb :=args [3].ValueNumber ;if _fafb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecdb :=0;if _gfgge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecdb =int (args [4].ValueNumber );if !_gddd (_ecdb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");
};};_daac ,_dgbfa :=_dcc (_feeed ,_dgea ,_ecdb );if _dgbfa .Type ==ResultTypeError {return _dgbfa ;};return MakeNumberResult (_afaf /(1-_fafb *_daac ));};

// Update returns the same object as updating sheet references does not affect Error.
func (_dfd Error )Update (q *_ge .UpdateQuery )Expression {return _dfd };

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbgb :=args [0];switch _cbgb .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_ggc :=_ceef (_cbgb .ValueNumber );return MakeNumberResult (float64 (_ggc .Minute ()));case ResultTypeString :_ecbb :=_dd .ToLower (_cbgb .ValueString );if !_cefc (_ecbb ){_ ,_ ,_ ,_cfc ,_bffb :=_aadd (_ecbb );if _bffb .Type ==ResultTypeError {_bffb .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";
return _bffb ;};if _cfc {return MakeNumberResult (0);};};_ ,_bddb ,_ ,_ ,_ ,_fed :=_cce (_ecbb );if _fed .Type ==ResultTypeError {return _fed ;};return MakeNumberResult (float64 (_bddb ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");
};};const _egga =57374;type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_ddab :=len (args );if _ddab !=5&&_ddab !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_bbaef ,_acee ,_dcgb :=_eab (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dcgb .Type ==ResultTypeError {return _dcgb ;};_ebff ,_dcgb :=_dcg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");
if _dcgb .Type ==ResultTypeError {return _dcgb ;};if _ebff >=_bbaef {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dcdd :=args [3].ValueNumber ;if _dcdd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_dbgbc :=args [4].ValueNumber ;if _dbgbc <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");
};_fegf :=0;if _ddab ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fegf =int (args [5].ValueNumber );if !_gddd (_fegf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");
};};_fddgc ,_dcgb :=_dcc (_ebff ,_acee ,_fegf );if _dcgb .Type ==ResultTypeError {return _dcgb ;};_cceaa ,_dcgb :=_dcc (_ebff ,_bbaef ,_fegf );if _dcgb .Type ==ResultTypeError {return _dcgb ;};_bega ,_dcgb :=_dcc (_bbaef ,_acee ,_fegf );if _dcgb .Type ==ResultTypeError {return _dcgb ;
};_ddfe :=1+_fddgc *_dcdd ;_ddfe /=_dbgbc /100+_cceaa *_dcdd ;_ddfe --;_ddfe /=_bega ;return MakeNumberResult (_ddfe );};func (_acfgd *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");
};func (_dcgc *Lexer )nextRaw ()*node {for len (_dcgc ._fdedd )!=0{_cfcad :=<-_dcgc ._fdedd [len (_dcgc ._fdedd )-1];if _cfcad !=nil {return _cfcad ;};_dcgc ._fdedd =_dcgc ._fdedd [0:len (_dcgc ._fdedd )-1];};return <-_dcgc ._fefc ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fggaa :=_adde (args );_ee .Float64s (_fggaa );var _daga float64 ;if len (_fggaa )%2==0{_daga =(_fggaa [len (_fggaa )/2-1]+_fggaa [len (_fggaa )/2])/2;}else {_daga =_fggaa [len (_fggaa )/2];};return MakeNumberResult (_daga );};const _cbcf ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";


// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dggg :=args [0].Ref ;for _dggg .Type ==ReferenceTypeNamedRange {_dggg =ctx .NamedRange (_dggg .Value );};_cbaf :="";switch _dggg .Type {case ReferenceTypeCell :_cbaf =_dggg .Value ;case ReferenceTypeRange :_bfda :=_dd .Split (_dggg .Value ,"\u003a");
if len (_bfda )==2{_cbaf =_bfda [0];};default:return MakeErrorResult (_b .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_dggg .Type ));
};_efgc ,_aefe :=_gg .ParseCellReference (_cbaf );if _aefe !=nil {return MakeErrorResult (_b .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_aefe .Error ()));
};_afcbd ,_cccd ,_bcaaa :=_efgc .Column ,_efgc .RowIdx ,_efgc .SheetName ;_agfbc :=args [1].AsNumber ();if _agfbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};_egda :=args [2].AsNumber ();if _egda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");
};var _fag ,_ebdg Result ;if len (args )==3{_fag =MakeNumberResult (1);_ebdg =MakeNumberResult (1);}else {_fag =args [3].AsNumber ();if _fag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");
};if _fag .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_ebdg =args [4].AsNumber ();if _ebdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");
};if _ebdg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_gfgb :=_gg .ColumnToIndex (_afcbd );_eedg :=_cccd +uint32 (_agfbc .ValueNumber );_ddag :=_gfgb +uint32 (_egda .ValueNumber );_bgf :=_eedg +uint32 (_fag .ValueNumber );_fbfeb :=_ddag +uint32 (_ebdg .ValueNumber );
if _fag .ValueNumber > 0{_bgf --;}else {_bgf ++;_eedg ,_bgf =_bgf ,_eedg ;};if _ebdg .ValueNumber > 0{_fbfeb --;}else {_fbfeb ++;_ddag ,_fbfeb =_fbfeb ,_ddag ;};_fbce :=_b .Sprintf ("\u0025\u0073\u0025\u0064",_gg .IndexToColumn (_ddag ),_eedg );_eedee :=_b .Sprintf ("\u0025\u0073\u0025\u0064",_gg .IndexToColumn (_fbfeb ),_bgf );
if _bcaaa ==""{return _ebebfb (ctx ,ev ,_fbce ,_eedee );}else {return _ebebfb (ctx .Sheet (_bcaaa ),ev ,_fbce ,_eedee );};};func (_bgfce Result )String ()string {return _bgfce .Value ()};func (_bbbf *Lexer )emit (_ggcdf tokenType ,_eaef []byte ){if _gcfbb {_b .Println ("\u0065\u006d\u0069\u0074",_ggcdf ,_badb (string (_eaef )));
};_bbbf ._fefc <-&node {_ggcdf ,string (_eaef )};};func init (){_ebce =_eee .New (_eee .NewSource (_dgg .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_efcdg ("\u0041\u0053\u0049\u004e",_ac .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_efcdg ("\u0041\u0053\u0049\u004e",_ac .Acos ));
RegisterFunction ("\u0041\u0043\u004fS\u0048",_efcdg ("\u0041\u0053\u0049\u004e",_ac .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_efcdg ("\u0041\u0043\u004f\u0054",func (_fcded float64 )float64 {return _ac .Pi /2-_ac .Atan (_fcded )}));
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_efcdg ("\u0041\u0043\u004fT\u0048",func (_caea float64 )float64 {return _ac .Atanh (1/_caea )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );
RegisterFunction ("\u0041\u0053\u0049\u004e",_efcdg ("\u0041\u0053\u0049\u004e",_ac .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_efcdg ("\u0041\u0053\u0049N\u0048",_ac .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_efcdg ("\u0041\u0054\u0041\u004e",_ac .Atan ));
RegisterFunction ("\u0041\u0054\u0041N\u0048",_efcdg ("\u0041\u0054\u0041N\u0048",_ac .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );
RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );
RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_efcdg ("\u0043\u004f\u0053",_ac .Cos ));
RegisterFunction ("\u0043\u004f\u0053\u0048",_efcdg ("\u0043\u004f\u0053\u0048",_ac .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_ffec ("\u0043\u004f\u0054",_ac .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_ffec ("\u0043\u004f\u0054\u0048",_ac .Tanh ));
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_ffec ("\u0043\u0053\u0043",_ac .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_ffec ("\u0043\u0053\u0043",_ac .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );
RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_efcdg ("\u0045\u0058\u0050",_ac .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );
RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );
RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );
RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_efcdg ("\u004c\u004e",_ac .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_efcdg ("\u004c\u004f\u00471\u0030",_ac .Log10 ));
RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );
RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );
RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );
RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );
RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_ffec ("\u0053\u0045\u0043",_ac .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_ffec ("\u0053\u0045\u0043\u0048",_ac .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );
RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_efcdg ("\u0053\u0049\u004e",_ac .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_efcdg ("\u0053\u0049\u004e\u0048",_ac .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_efcdg ("\u0053\u0051\u0052\u0054",_ac .Sqrt ));
RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_efcdg ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_dcfe float64 )float64 {return _ac .Sqrt (_dcfe *_ac .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );
RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_efcdg ("\u0054\u0041\u004e",_ac .Tan ));
RegisterFunction ("\u0054\u0041\u004e\u0048",_efcdg ("\u0054\u0041\u004e\u0048",_ac .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_eagcd ,_cdec ,_geeeb :=_cedeb (from ,to );if _geeeb !=nil {_ba .Log .Debug (_geeeb .Error ());return NewError (_geeeb .Error ());};return Range {_abbc :_eagcd ,_daae :_cdec };};func _fdbb (_gge ,_cba float64 ,_aaag ,_fff int )float64 {_degd :=_ceef (_gge );
_fbfg :=_ceef (_cba );_abecg :=_befd (_degd ,_fbfg ,_aaag ,_fff );return _abg (_abecg ,_degd ,_fff );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};
_fcdf :=args [0];if _fcdf .Type !=ResultTypeArray &&_fcdf .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_abdb :=_ecfd (_fcdf );_aefb :=args [2];if _aefb .Type !=ResultTypeArray &&_aefb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_gcbg :=_ecfd (_aefb );_fgg :=_eeef (args [1]);_accg :=0.0;for _aaeb ,_dbead :=range _abdb {for _dgbb ,_cdag :=range _dbead {if _ebca (_cdag ,_fgg ){_accg +=_gcbg [_aaeb ][_dgbb ].ValueNumber ;};};};return MakeNumberResult (_accg );};type xargs struct{_efcd []float64 ;
_fddd []float64 ;};func _daca (_bgbe []Result ,_bcfbb string )(*durationArgs ,Result ){_begbg :=len (_bgbe );if _begbg !=5&&_begbg !=6{return nil ,MakeErrorResult (_bcfbb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_feee ,_dbee ,_effg :=_eab (_bgbe [0],_bgbe [1],_bcfbb );if _effg .Type ==ResultTypeError {return nil ,_effg ;};_bfc :=_bgbe [2];if _bfc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcfbb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_bggd :=_bfc .ValueNumber ;if _bggd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");
};_efad :=_bgbe [3];if _efad .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcfbb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_efagd :=_efad .ValueNumber ;if _efagd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};_dff :=_bgbe [4];if _dff .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcfbb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_feed :=float64 (int (_dff .ValueNumber ));if !_ecg (_feed ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gdbd :=0;if _begbg ==6&&_bgbe [5].Type !=ResultTypeEmpty {_ffeff :=_bgbe [5];
if _ffeff .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bcfbb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdbd =int (_ffeff .ValueNumber );
if !_gddd (_gdbd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_bcfbb );};};return &durationArgs {_feee ,_dbee ,_bggd ,_efagd ,_feed ,_gdbd },_faba ;
};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_cgfbgb ,_fgbf int };

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_cbdb :=_dd .ToLower (args [0].ValueString );if !_cefc (_cbdb ){_ ,_ ,_ ,_dad ,_fdf :=_aadd (_cbdb );if _fdf .Type ==ResultTypeError {_fdf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";
return _fdf ;};if _dad {return MakeNumberResult (0);};};_bfg ,_bee ,_aceg ,_bbfd ,_ ,_gcbe :=_cce (_cbdb );if _gcbe .Type ==ResultTypeError {return _gcbe ;};_daa :=_bec (float64 (_bfg ),float64 (_bee ),_aceg );if _bbfd {_daa +=0.5;}else if _daa >=1{_daa -=float64 (int (_daa ));
};return MakeNumberResult (_daa );};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_acecg .Lock ();defer _acecg .Unlock ();if _ ,_bdacf :=_caeag [name ];_bdacf {_ba .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_caeag [name ]=fn ;};const _abbe =57355;

// Reference returns a string reference value to a horizontal range.
func (_febeg HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_febeg .horizontalRangeReference ()};};func _dbe (_eebd ,_gfd int )int {if _gfd ==2&&_dfcf (_eebd ){return 29;}else {return _aee [_gfd -1];
};};const _dagdg =-1000;func _aggf (_egba []Result )Result {_fbeg :=_egba [0].ValueList ;_cefac :=len (_fbeg );switch len (_egba ){case 1:_eagae :=[]Result {};for _ ,_cagc :=range _fbeg {_eagae =append (_eagae ,MakeBoolResult (_cagc .ValueNumber !=0));
};return MakeListResult (_eagae );case 2:_fede :=_egba [1];switch _fede .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_cbdfa :=[]Result {};for _ ,_babd :=range _fbeg {var _fgcdf Result ;if _babd .ValueNumber ==0{_fgcdf =MakeBoolResult (false );
}else {_fgcdf =_fede ;};_cbdfa =append (_cbdfa ,_fgcdf );};return MakeListResult (_cbdfa );case ResultTypeList :_gcaf :=_gadd (_fede ,_cefac );_abbb :=[]Result {};for _aced ,_cdff :=range _fbeg {var _edgg Result ;if _cdff .ValueNumber ==0{_edgg =MakeBoolResult (false );
}else {_edgg =_gcaf [_aced ];};_abbb =append (_abbb ,_edgg );};return MakeListResult (_abbb );case ResultTypeArray :_bdbbb :=_ebfad (_fede ,len (_fede .ValueArray ),_cefac );_gfcbb :=[][]Result {};for _ ,_eggcg :=range _bdbbb {_eceb :=[]Result {};for _ebda ,_dbdb :=range _fbeg {var _bbfc Result ;
if _dbdb .ValueNumber ==0{_bbfc =MakeBoolResult (false );}else {_bbfc =_eggcg [_ebda ];};_eceb =append (_eceb ,_bbfc );};_gfcbb =append (_gfcbb ,_eceb );};return MakeArrayResult (_gfcbb );};case 3:_adaf :=_egba [1];_aeee :=_egba [2];_daad :=_dagd (_adaf );
_cadb :=_dagd (_aeee );if _daad &&_cadb {_efcg :=[]Result {};for _ ,_cegf :=range _fbeg {var _bcfe Result ;if _cegf .ValueNumber ==0{_bcfe =_aeee ;}else {_bcfe =_adaf ;};_efcg =append (_efcg ,_bcfe );};return MakeListResult (_efcg );};if _adaf .Type !=ResultTypeArray &&_aeee .Type !=ResultTypeArray {_eaggg :=_gadd (_adaf ,_cefac );
_fdcadb :=_gadd (_aeee ,_cefac );_eaac :=[]Result {};for _fbgga ,_dcbge :=range _fbeg {var _gaeg Result ;if _dcbge .ValueNumber ==0{_gaeg =_fdcadb [_fbgga ];}else {_gaeg =_eaggg [_fbgga ];};_eaac =append (_eaac ,_gaeg );};return MakeListResult (_eaac );
};_cdcc ,_bcbd :=len (_adaf .ValueArray ),len (_aeee .ValueArray );_ccfe ,_bbdbc :=_cdcc ,_bcbd ;if _bcbd > _ccfe {_ccfe ,_bbdbc =_bbdbc ,_ccfe ;};_dfcdee :=_ebfad (_adaf ,_ccfe ,_cefac );_bbadc :=_ebfad (_aeee ,_ccfe ,_cefac );_ceba :=[][]Result {};for _bfgbf :=0;
_bfgbf < _ccfe ;_bfgbf ++{_gacb :=[]Result {};for _fbed ,_eddbg :=range _fbeg {var _cceg Result ;if _eddbg .ValueNumber ==0{if _bfgbf < _bcbd {_cceg =_bbadc [_bfgbf ][_fbed ];}else {_cceg =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _bfgbf < _cdcc {_cceg =_dfcdee [_bfgbf ][_fbed ];
}else {_cceg =MakeErrorResultType (ErrorTypeNA ,"");};};_gacb =append (_gacb ,_cceg );};_ceba =append (_ceba ,_gacb );};return MakeArrayResult (_ceba );};return MakeErrorResult ("");};func _fbbd (_abff ,_eagee ,_aabgd Reference )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_abff .Value ,_eagee .Value ,_aabgd .Value );
};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_cgca ,_gegc :=_bbgf (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _gegc .Type ==ResultTypeError {return _gegc ;};_gfc :=_ceef (_cgca ._gagg );_afbc :=_ceef (_cgca ._dgdd );_dbag :=_cgca ._ceeb ;_gdb :=_edc (_gfc ,_afbc ,_dbag );
_dbfg ,_ebeb ,_gaec :=_gdb .Date ();return MakeNumberResult (_bbf (_dbfg ,int (_ebeb ),_gaec ));};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_fabd :=args [0];switch _fabd .Type {case ResultTypeEmpty :return MakeNumberResult (1);
case ResultTypeNumber :_aed :=_ceef (_fabd .ValueNumber );return MakeNumberResult (float64 (_aed .Month ()));case ResultTypeString :_cga :=_dd .ToLower (_fabd .ValueString );if !_efgb (_cga ){_ ,_ ,_ ,_ ,_dbad ,_dedg :=_cce (_cga );if _dedg .Type ==ResultTypeError {_dedg .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";
return _dedg ;};if _dbad {return MakeNumberResult (1);};};_ ,_ggbd ,_ ,_ ,_bbad :=_aadd (_cga );if _bbad .Type ==ResultTypeError {return _bbad ;};return MakeNumberResult (float64 (_ggbd ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");
};};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_gggd :=len (args );if _gggd < 5||_gggd > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gggg :=args [0].ValueNumber ;if _gggg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bgbd :=args [1].ValueNumber ;if _bgbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_efdf :=args [2].ValueNumber ;if _efdf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _efdf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ggbc :=args [3].ValueNumber ;if _ggbc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gagc :=args [4].ValueNumber ;if _ggbc > _gagc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");
};if _gagc > _efdf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_abcd :=2.0;if _gggd > 5{if args [5].Type ==ResultTypeEmpty {_abcd =0.0;
}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abcd =args [5].ValueNumber ;if _abcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};};_eafd :=false ;if _gggd > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_eafd =args [6].ValueNumber !=0;};_bdbbg :=0.0;_caceb :=_ac .Floor (_ggbc );_fecg :=_ac .Ceil (_gagc );if _eafd {for _bcef :=_caceb +1;_bcef <=_fecg ;_bcef ++{_eafcb :=_afgba (_gggg ,_bgbd ,_efdf ,_bcef ,_abcd );if _bcef ==_caceb +1{_eafcb *=_ac .Min (_gagc ,_caceb +1)-_ggbc ;
}else if _bcef ==_fecg {_eafcb *=_gagc +1-_fecg ;};_bdbbg +=_eafcb ;};}else {_ggbf :=_efdf ;var _gdge float64 ;if !_fdaea (_ggbc ,_ac .Floor (_ggbc )){if _abcd ==1{_feg :=_efdf /2;if _ggbc > _feg ||_fdaea (_ggbc ,_feg ){_gdge =_ggbc -_feg ;_ggbc =_feg ;
_gagc -=_gdge ;_ggbf ++;};};};if _abcd !=0{_gggg -=_afcc (_gggg ,_bgbd ,_efdf ,_ggbf ,_ggbc ,_abcd );};_bdbbg =_afcc (_gggg ,_bgbd ,_efdf ,_efdf -_ggbc ,_gagc -_ggbc ,_abcd );};return MakeNumberResult (_bdbbg );};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_ffda :=len (args );if _ffda < 3||_ffda > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_aaca :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ffagd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_baag :=args [2].ValueNumber ;_cdfb :=0.0;if _ffda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_cdfb =args [3].ValueNumber ;};_eacf :=0.0;if _ffda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_eacf =args [4].ValueNumber ;if _eacf !=0{_eacf =1;};};_bffd :=_ffagd *(1+_aaca *_eacf )-_cdfb *_aaca ;_fcda :=(_baag *_aaca +_ffagd *(1+_aaca *_eacf ));return MakeNumberResult (_ac .Log (_bffd /_fcda )/_ac .Log (1+_aaca ));};func (_bge *defEval )checkLastEvalIsRef (_edd Context ,_aaf Expression ){switch _aaf .(type ){case FunctionCall :switch _aaf .(FunctionCall )._gbea {case "\u0049\u0053\u0052E\u0046":for _ ,_gcf :=range _aaf .(FunctionCall )._debc {switch _gcf .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_dgc :=_gcf .Eval (_edd ,_bge );
_bge ._faf =!(_dgc .Type ==ResultTypeError &&_dgc .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_bge ._faf =false ;};};};};};

// String returns a string representation of a named range.
func (_adfagb NamedRangeRef )String ()string {return _adfagb ._cbage };const _fddcc =57356;

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");
};_fcdb :=args [0].AsString ();if _fcdb .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};return ctx .Cell (_fcdb .ValueString ,ev );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_fecd :=len (args );if _fecd !=4&&_fecd !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fbbb :=args [0].ValueNumber ;if _fbbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ggef :=args [1].ValueNumber ;if _ggef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cffe :=args [2].ValueNumber ;if _cffe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fcba :=args [3].ValueNumber ;if _fcba < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");
};if _fcba > _cffe {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_debf :=2.0;if _fecd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_debf =args [4].ValueNumber ;if _debf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};};return MakeNumberResult (_afgba (_fbbb ,_ggef ,_cffe ,_fcba ,_debf ));};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dbca :=args [0].AsNumber ();if _dbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gfaa :=float64 (1);_ecbe :=args [1].AsNumber ();if _ecbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");
};_gfaa =_ecbe .ValueNumber ;if _gfaa < 0&&_dbca .ValueNumber > 0||_gfaa > 0&&_dbca .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");
};_eacfb :=_dbca .ValueNumber ;_eacfb ,_afcd :=_ac .Modf (_eacfb /_gfaa );if _ac .Trunc (_afcd +0.5)> 0{_eacfb ++;};return MakeNumberResult (_eacfb *_gfaa );};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_aegd Result )ListValues ()[]Result {if _aegd .Type ==ResultTypeArray {_cffbb :=[]Result {};for _ ,_daff :=range _aegd .ValueArray {for _ ,_ccae :=range _daff {_cffbb =append (_cffbb ,_ccae );};};return _cffbb ;};if _aegd .Type ==ResultTypeList {return _aegd .ValueList ;
};return nil ;};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_gcc string ,_adg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ade string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_dgg .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_beg int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_bbe string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_degf string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ddc string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_ab string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_bed string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_ccb ,_gca int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_adb string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_ffe string ,_dgfb bool );

// NamedRange returns a named range.
NamedRange (_adc string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_eac ,_aba uint32 );};type tokenType int ;

// Reference returns a string reference value to a horizontal range with prefix.
func (_aeba PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_edef :=_aeba ._gbeae .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_aeba .horizontalRangeReference (_edef .Value )};};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_aaeg :e }};var _gcgg =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};func _ffec (_eacgc string ,_cbeb func (_dfeac float64 )float64 )Function {return func (_fcdbd []Result )Result {if len (_fcdbd )!=1{return MakeErrorResult (_eacgc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_agaee :=_fcdbd [0].AsNumber ();switch _agaee .Type {case ResultTypeNumber :_ffeac :=_cbeb (_agaee .ValueNumber );if _ac .IsNaN (_ffeac ){return MakeErrorResult (_eacgc +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");
};if _ac .IsInf (_ffeac ,0){return MakeErrorResult (_eacgc +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _ffeac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_eacgc +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult (1/_ffeac );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_eacgc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
case ResultTypeError :return _agaee ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eacgc ,_agaee .Type ));
};};};func _eeef (_agde Result )*criteriaParsed {_fcccba :=_agde .Type ==ResultTypeNumber ;_gfce :=_agde .ValueNumber ;_eebgd :=_dd .ToLower (_agde .ValueString );_addc :=_dcde (_eebgd );return &criteriaParsed {_fcccba ,_gfce ,_eebgd ,_addc };};

// Reference returns a string reference value to a sheet.
func (_edbd SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_edbd ._bgdac };};func (_gcecb *noCache )GetFromCache (key string )(Result ,bool ){return _faba ,false };const _cef =_dgg .Second *1;


// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfaf :=args [0].AsNumber ();
if _cfaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcge :=_ac .Signbit (_cfaf .ValueNumber );
_ggcdd ,_adcf :=_ac .Modf (_cfaf .ValueNumber /2);_bfea :=_ggcdd *2;if _adcf !=0{if !_bcge {_bfea +=2;}else {_bfea -=2;};};return MakeNumberResult (_bfea );};var _gaed =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};
func _aadcd (_gbbf []Result )(bool ,Result ){for _ ,_acec :=range _gbbf {if _acec .Type ==ResultTypeError {return true ,_acec ;};};return false ,MakeEmptyResult ();};var _gdag ,_fbac ,_ccbd ,_faag ,_fbcb ,_ddae *_ec .Regexp ;type couponArgs struct{_gagg float64 ;
_dgdd float64 ;_ceeb int ;_cbdd int ;};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_edabg (args ,_dege ))};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bdge ,_fcefb ,_fbfgb :=_eab (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fbfgb .Type ==ResultTypeError {return _fbfgb ;};_aabc ,_fbfgb :=_dcg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");
if _fbfgb .Type ==ResultTypeError {return _fbfgb ;};if _aabc >=_bdge {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");
};_aaffb :=args [3];if _aaffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");
};_daf :=_aaffb .ValueNumber ;if _daf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_cfca :=args [4];if _cfca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_eega :=_cfca .ValueNumber ;if _eega < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cfdf :=args [5];
if _cfdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_bgede :=_cfdf .ValueNumber ;if _bgede < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cdg :=args [6];
if _cdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_cfbd :=float64 (int (_cdg .ValueNumber ));if !_ecg (_cfbd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ggcde :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_acag :=args [7];
if _acag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_ggcde =int (_acag .ValueNumber );if !_gddd (_ggcde ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");
};};_cgec ,_fbfgb :=_dcc (_aabc ,_fcefb ,_ggcde );if _fbfgb .Type ==ResultTypeError {return _fbfgb ;};_cgec *=_cfbd ;_afgd ,_fbfgb :=_dcc (_bdge ,_fcefb ,_ggcde );if _fbfgb .Type ==ResultTypeError {return _fbfgb ;};_afgd *=_cfbd ;_bbbeb ,_fbfgb :=_dcc (_aabc ,_bdge ,_ggcde );
if _fbfgb .Type ==ResultTypeError {return _fbfgb ;};_bbbeb *=_cfbd ;_cdbb :=_bgede +_cgec *100*_daf /_cfbd ;_cdbb /=_afgd *_eega /_cfbd +1;_cdbb -=_bbbeb *100*_daf /_cfbd ;return MakeNumberResult (_cdbb );};func _fdcfe (_bdde ,_ababa float64 )float64 {_bdde =_ac .Trunc (_bdde );
_ababa =_ac .Trunc (_ababa );if _bdde ==0{return _ababa ;};if _ababa ==0{return _bdde ;};for _bdde !=_ababa {if _bdde > _ababa {_bdde =_bdde -_ababa ;}else {_ababa =_ababa -_bdde ;};};return _bdde ;};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");
};_dgeb :=args [0].ValueNumber ;if _dgeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");
};_cecd :=float64 (int (args [1].ValueNumber ));if _cecd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");
};return MakeNumberResult ((_ac .Pow (_dgeb +1,1/_cecd )-1)*_cecd );};const _bgcfa int =30;

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_faaab :=args [0].AsNumber ();if _faaab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_faeb :=int (_faaab .ValueNumber );if _faeb < 0||_faeb > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");
};return MakeStringResult (_b .Sprintf ("\u0025\u0063",_faeb ));};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fdcad :=args [0].AsString ();if _fdcad .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");
};_feba :="\u0041\u0031";if len (args )==2{_edce :=args [1].Ref ;if _edce .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};_feba =_edce .Value ;};switch _fdcad .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_aebg ,_dfcdf :=_gg .ParseCellReference (_feba );if _dfcdf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_feba );
};_cfcfe :="\u0024"+_aebg .Column +"\u0024"+_eed .Itoa (int (_aebg .RowIdx ));if _aebg .SheetName !=""{_cfcfe =_aebg .SheetName +"\u0021"+_cfcfe ;};return MakeStringResult (_cfcfe );case "\u0063\u006f\u006c":_fafac ,_gcca :=_gg .ParseCellReference (_feba );
if _gcca !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_feba );};return MakeNumberResult (float64 (_fafac .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_bbfbb :=_dd .Contains (ctx .GetFormat (_feba ),"\u005b\u0052\u0045D\u005d");
return MakeBoolResult (_bbfbb );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_dcce :="\u0047";
_gcbef :=ctx .GetFormat (_feba );if _gcbef =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_dfeg .MatchString (_gcbef ){_dcce ="\u0046\u0030";}else if _gcbef =="\u0030\u0025"{_dcce ="\u0050\u0030";}else if _gcbef =="\u004d\u004d\u004d\u0020\u0044\u0044"{_dcce ="\u0044\u0032";
}else if _gcbef =="\u004d\u004d\u002fY\u0059"{_dcce ="\u0044\u0033";}else if _gcbef =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_gcbef =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_dcce ="\u0044\u0034";
}else if _gcbef =="\u004d\u004d\u005c\u002d\u0044\u0044"{_dcce ="\u0044\u0035";}else if _gcbef =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dcce ="\u0044\u0036";}else if _gcbef =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dcce ="\u0044\u0037";
}else if _gcbef =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_dcce ="\u0044\u0038";}else if _gcbef =="\u0048\u0048\u003aM\u004d"{_dcce ="\u0044\u0039";}else if _egee .MatchString (_gcbef ){_dcce ="\u002e\u0030";}else if _ccccf .MatchString (_gcbef ){_dcce ="\u002e\u0030\u0028\u0029";
}else if _gcgf .MatchString (_gcbef ){_dcce ="\u0043\u0030";}else if _ebdgf .MatchString (_gcbef )||_cgcg .MatchString (_gcbef ){_dcce ="\u0044\u0031";}else if _efb :=_cgcd .FindStringSubmatch (_gcbef );len (_efb )> 1{_dcce ="\u0046"+_eed .Itoa (len (_efb [1]));
}else if _ffab :=_abdag .FindStringSubmatch (_gcbef );len (_ffab )> 1{_dcce ="\u002e"+_eed .Itoa (len (_ffab [2]));}else if _bagba :=_ddfa .FindStringSubmatch (_gcbef );len (_bagba )> 1{_dcce ="\u0050"+_eed .Itoa (len (_bagba [2]));}else if _dgfa :=_aceb .FindStringSubmatch (_gcbef );
len (_dgfa )> 1{_dcce ="\u0043"+_ffed (_dgfa ,1);}else if _dcfa :=_dcfg .FindStringSubmatch (_gcbef );len (_dcfa )> 1{_dcce ="\u0043"+_ffed (_dcfa ,1);}else if _daeg :=_dfgb .FindStringSubmatch (_gcbef );len (_daeg )> 1{_dcce ="\u002e"+_ffed (_daeg ,1)+"\u0028\u0029";
}else if _gfbb :=_dbace .FindStringSubmatch (_gcbef );len (_gfbb )> 1{_dcce ="\u002e"+_ffed (_gfbb ,1);}else if _abce :=_geadc .FindStringSubmatch (_gcbef );len (_abce )> 1{_dcce ="\u0053"+_ffed (_abce ,3);};if _dcce !="\u0047"&&_dd .Contains (_gcbef ,"\u005b\u0052\u0045D\u005d"){_dcce +="\u002d";
};return MakeStringResult (_dcce );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_bbcab :=ctx .GetFormat (_feba );if _caff .MatchString (_bbcab ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_feba ));
case "\u0070r\u006f\u0074\u0065\u0063\u0074":_dfbf :=0.0;if ctx .GetLocked (_feba ){_dfbf =1.0;};return MakeNumberResult (_dfbf );case "\u0072\u006f\u0077":_fffbg ,_bgdbd :=_gg .ParseCellReference (_feba );if _bgdbd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_feba );
};return MakeNumberResult (float64 (_fffbg .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");
};case "\u0077\u0069\u0064t\u0068":_fddfe ,_fdacgb :=_gg .ParseCellReference (_feba );if _fdacgb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_feba );};if _fddfe .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_fddfe .ColumnIdx )));
}else {return MakeNumberResult (ctx .Sheet (_fddfe .SheetName ).GetWidth (int (_fddfe .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_fdcad .ValueString );
};

// Eval evaluates and returns the result of a constant array expression.
func (_dba ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_gb :=[][]Result {};for _ ,_bbg :=range _dba ._cdc {_ecb :=[]Result {};for _ ,_dca :=range _bbg {_ecb =append (_ecb ,_dca .Eval (ctx ,ev ));};_gb =append (_gb ,_ecb );};return MakeArrayResult (_gb );
};func _efgb (_fdbc string )bool {for _ ,_begg :=range _feb {_fdda :=_begg .FindStringSubmatch (_fdbc );if len (_fdda )> 1{return true ;};};return false ;};

// Update updates references in the Range after removing a row/column.
func (_gcda Range )Update (q *_ge .UpdateQuery )Expression {_fbbead :=_gcda ;if q .UpdateCurrentSheet {_fbbead ._abbc =_gcda ._abbc .Update (q );_fbbead ._daae =_gcda ._daae .Update (q );};return _fbbead ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_becf ,_gbfd :=_bbgf (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _gbfd .Type ==ResultTypeError {return _gbfd ;};return MakeNumberResult (_fdbb (_becf ._gagg ,_becf ._dgdd ,_becf ._ceeb ,_becf ._cbdd ));
};var _bdac int64 =_cdb (1900,_dgg .January ,1);

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fcbf :=int (args [0].ValueNumber );if _fcbf < 0||_fcbf >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _fcbf <=1899{_fcbf +=1900;};_aeff :=_dgg .Month (args [1].ValueNumber );
_ddca :=int (args [2].ValueNumber );_aeeb :=_cdb (_fcbf ,_aeff ,_ddca );_cbf :=_fda (_bdac ,_aeeb )+1;if _cbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_cbf );
};var _agcde =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};const _dbfbe =_dgg .Millisecond *1000;func (_cada *yyParserImpl )Parse (yylex yyLexer )int {_bdfee :=_dgg .Now ();
var _cbfga int ;var _ggfe yySymType ;var _gadcc []yySymType ;_ =_gadcc ;_gfdc :=_cada ._eaee [:];Nerrs :=0;Errflag :=0;_fefb :=0;_cada ._ggaea =-1;_gabd :=-1;defer func (){_fefb =-1;_cada ._ggaea =-1;_gabd =-1}();_eegda :=-1;goto _fdgcc ;_agedd :return 0;
_beaba :return 1;_fdgcc :if _gdab (_bdfee ){_ba .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _beaba ;};if _fgbdg >=4{_b .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_feab (_gabd ),_ebgc (_fefb ));
};_eegda ++;if _eegda >=len (_gfdc ){_ceabe :=make ([]yySymType ,len (_gfdc )*2);copy (_ceabe ,_gfdc );_gfdc =_ceabe ;};_gfdc [_eegda ]=_ggfe ;_gfdc [_eegda ]._dafc =_fefb ;_faagc :if _gdab (_bdfee ){_ba .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");
goto _beaba ;};_cbfga =_gaed [_fefb ];if _cbfga <=_dagdg {goto _aegc ;};if _cada ._ggaea < 0{_cada ._ggaea ,_gabd =_caec (yylex ,&_cada ._dgafe );};_cbfga +=_gabd ;if _cbfga < 0||_cbfga >=_cbec {goto _aegc ;};_cbfga =_dffd [_cbfga ];if _adeaa [_cbfga ]==_gabd {_cada ._ggaea =-1;
_gabd =-1;_ggfe =_cada ._dgafe ;_fefb =_cbfga ;if Errflag > 0{Errflag --;};goto _fdgcc ;};_aegc :if _gdab (_bdfee ){_ba .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _beaba ;};_cbfga =_cabe [_fefb ];
if _cbfga ==-2{if _cada ._ggaea < 0{_cada ._ggaea ,_gabd =_caec (yylex ,&_cada ._dgafe );};_fffd :=0;for {if _dagbb [_fffd +0]==-1&&_dagbb [_fffd +1]==_fefb {break ;};_fffd +=2;};for _fffd +=2;;_fffd +=2{_cbfga =_dagbb [_fffd +0];if _cbfga < 0||_cbfga ==_gabd {break ;
};};_cbfga =_dagbb [_fffd +1];if _cbfga < 0{goto _agedd ;};};if _cbfga ==0{switch Errflag {case 0:yylex .Error (_ceaf (_fefb ,_gabd ));Nerrs ++;if _fgbdg >=1{_b .Printf ("\u0025\u0073",_ebgc (_fefb ));_b .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_feab (_gabd ));
};fallthrough;case 1,2:Errflag =3;for _eegda >=0{_cbfga =_gaed [_gfdc [_eegda ]._dafc ]+_fcdff ;if _cbfga >=0&&_cbfga < _cbec {_fefb =_dffd [_cbfga ];if _adeaa [_fefb ]==_fcdff {goto _fdgcc ;};};if _fgbdg >=2{_b .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_gfdc [_eegda ]._dafc );
};_eegda --;};goto _beaba ;case 3:if _fgbdg >=2{_b .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_feab (_gabd ));};if _gabd ==_cfcb {goto _beaba ;};_cada ._ggaea =-1;
_gabd =-1;goto _faagc ;};};if _fgbdg >=2{_b .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_cbfga ,_ebgc (_fefb ));};_fggc :=_cbfga ;_bfdae :=_eegda ;_ =_bfdae ;_eegda -=_badd [_cbfga ];if _eegda +1>=len (_gfdc ){_gbbc :=make ([]yySymType ,len (_gfdc )*2);
copy (_gbbc ,_gfdc );_gfdc =_gbbc ;};_ggfe =_gfdc [_eegda +1];_cbfga =_agcde [_cbfga ];_ffcba :=_cgdee [_cbfga ];_agebc :=_ffcba +_gfdc [_eegda ]._dafc +1;if _agebc >=_cbec {_fefb =_dffd [_ffcba ];}else {_fefb =_dffd [_agebc ];if _adeaa [_fefb ]!=-_cbfga {_fefb =_dffd [_ffcba ];
};};switch _fggc {case 1:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{yylex .(*plex )._dbega =_ggfe ._gcgdb ;};case 3:_gadcc =_gfdc [_bfdae -2:_bfdae +1];{_ggfe ._gcgdb =_gadcc [2]._gcgdb ;};case 4:_gadcc =_gfdc [_bfdae -4:_bfdae +1];{};case 5:_gadcc =_gfdc [_bfdae -1:_bfdae +1];
{_ggfe ._gcgdb =NewBool (_gadcc [1]._cdffe ._bgegf );};case 6:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewNumber (_gadcc [1]._cdffe ._bgegf );};case 7:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewString (_gadcc [1]._cdffe ._bgegf );
};case 8:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewError (_gadcc [1]._cdffe ._bgegf );};case 9:_gadcc =_gfdc [_bfdae -2:_bfdae +1];{_ggfe ._gcgdb =_gadcc [2]._gcgdb ;};case 10:_gadcc =_gfdc [_bfdae -2:_bfdae +1];{_ggfe ._gcgdb =NewNegate (_gadcc [2]._gcgdb );
};case 15:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =_gadcc [2]._gcgdb ;};case 17:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewConstArrayExpr (_gadcc [2]._bbcbc );};case 18:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._bbcbc =append (_ggfe ._bbcbc ,_gadcc [1]._ceaba );
};case 19:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._bbcbc =append (_gadcc [1]._bbcbc ,_gadcc [3]._ceaba );};case 20:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._ceaba =append (_ggfe ._ceaba ,_gadcc [1]._gcgdb );};case 21:_gadcc =_gfdc [_bfdae -3:_bfdae +1];
{_ggfe ._ceaba =append (_gadcc [1]._ceaba ,_gadcc [3]._gcgdb );};case 23:_gadcc =_gfdc [_bfdae -2:_bfdae +1];{_ggfe ._gcgdb =NewPrefixExpr (_gadcc [1]._gcgdb ,_gadcc [2]._gcgdb );};case 25:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewSheetPrefixExpr (_gadcc [1]._cdffe ._bgegf );
};case 26:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewCellRef (_gadcc [1]._cdffe ._bgegf );};case 27:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewRange (_gadcc [1]._gcgdb ,_gadcc [3]._gcgdb );};case 28:_gadcc =_gfdc [_bfdae -4:_bfdae +1];
{_ggfe ._gcgdb =NewPrefixRangeExpr (_gadcc [1]._gcgdb ,_gadcc [2]._gcgdb ,_gadcc [4]._gcgdb );};case 29:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewNamedRangeRef (_gadcc [1]._cdffe ._bgegf );};case 30:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewHorizontalRange (_gadcc [1]._cdffe ._bgegf );
};case 31:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._gcgdb =NewVerticalRange (_gadcc [1]._cdffe ._bgegf );};case 32:_gadcc =_gfdc [_bfdae -2:_bfdae +1];{_ggfe ._gcgdb =NewPrefixHorizontalRange (_gadcc [1]._gcgdb ,_gadcc [2]._cdffe ._bgegf );};case 33:_gadcc =_gfdc [_bfdae -2:_bfdae +1];
{_ggfe ._gcgdb =NewPrefixVerticalRange (_gadcc [1]._gcgdb ,_gadcc [2]._cdffe ._bgegf );};case 34:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypePlus ,_gadcc [3]._gcgdb );};case 35:_gadcc =_gfdc [_bfdae -3:_bfdae +1];
{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeMinus ,_gadcc [3]._gcgdb );};case 36:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeMult ,_gadcc [3]._gcgdb );};case 37:_gadcc =_gfdc [_bfdae -3:_bfdae +1];
{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeDiv ,_gadcc [3]._gcgdb );};case 38:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeExp ,_gadcc [3]._gcgdb );};case 39:_gadcc =_gfdc [_bfdae -3:_bfdae +1];
{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeLT ,_gadcc [3]._gcgdb );};case 40:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeGT ,_gadcc [3]._gcgdb );};case 41:_gadcc =_gfdc [_bfdae -3:_bfdae +1];
{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeLEQ ,_gadcc [3]._gcgdb );};case 42:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeGEQ ,_gadcc [3]._gcgdb );};case 43:_gadcc =_gfdc [_bfdae -3:_bfdae +1];
{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeEQ ,_gadcc [3]._gcgdb );};case 44:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeNE ,_gadcc [3]._gcgdb );};case 45:_gadcc =_gfdc [_bfdae -3:_bfdae +1];
{_ggfe ._gcgdb =NewBinaryExpr (_gadcc [1]._gcgdb ,BinOpTypeConcat ,_gadcc [3]._gcgdb );};case 47:_gadcc =_gfdc [_bfdae -2:_bfdae +1];{_ggfe ._gcgdb =NewFunction (_gadcc [1]._cdffe ._bgegf ,nil );};case 48:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._gcgdb =NewFunction (_gadcc [1]._cdffe ._bgegf ,_gadcc [2]._ceaba );
};case 49:_gadcc =_gfdc [_bfdae -1:_bfdae +1];{_ggfe ._ceaba =append (_ggfe ._ceaba ,_gadcc [1]._gcgdb );};case 50:_gadcc =_gfdc [_bfdae -3:_bfdae +1];{_ggfe ._ceaba =append (_gadcc [1]._ceaba ,_gadcc [3]._gcgdb );};case 53:_gadcc =_gfdc [_bfdae -0:_bfdae +1];
{_ggfe ._gcgdb =NewEmptyExpr ();};};goto _fdgcc ;};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _bgfg (args ,false )};func _fbe ()evCache {_bdfa :=evCache {};_bdfa ._fgf =make (map[string ]Result );_bdfa ._dag =&_g .Mutex {};return _bdfa ;};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;
ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);const _gcece =57372;func init (){_geaf ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );
RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );
RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );
RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );
RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};var _gcfbb =false ;

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_cbbb :=args [0].AsString ();if _cbbb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");
};_deadb :=_ef .Buffer {};_fddc :=false ;for _ ,_bddg :=range _cbbb .ValueString {if !_fddc &&_dg .IsLetter (_bddg ){_deadb .WriteRune (_dg .ToUpper (_bddg ));}else {_deadb .WriteRune (_dg .ToLower (_bddg ));};_fddc =_dg .IsLetter (_bddg );};return MakeStringResult (_deadb .String ());
};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_ebfb PrefixHorizontalRange )Update (q *_ge .UpdateQuery )Expression {return _ebfb };

// Reference returns an invalid reference for ConstArrayExpr.
func (_gdc ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cfcgg (args ,_fcbgf )};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_accb :=args [0].AsString ();if _accb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (_accb .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (float64 (_accb .ValueString [0]));};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_fbdc :=args [0];if _fbdc .Type ==ResultTypeList {_ffcgc :=[][]Result {};for _ ,_ceae :=range _fbdc .ValueList {_ffcgc =append (_ffcgc ,[]Result {_ceae });};return MakeArrayResult (_ffcgc );};_fbbbb :=make ([][]Result ,len (_fbdc .ValueArray [0]));for _ ,_afdca :=range _fbdc .ValueArray {for _cbega ,_ggba :=range _afdca {_fbbbb [_cbega ]=append (_fbbbb [_cbega ],_ggba );
};};return MakeArrayResult (_fbbbb );};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gebg :=args [0].ValueNumber ;if _gebg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_abfa :=args [1].ValueNumber ;if _abfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bcae :=args [2].ValueNumber ;if _bcae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");
};return MakeNumberResult (_ac .Pow (_bcae /_abfa ,1/_gebg )-1);};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_afbg :=args [0];if _afbg .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dabgd :=len (_afbg .ValueArray );for _ ,_cagb :=range _afbg .ValueArray {if len (_cagb )!=_dabgd {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");
};};return MakeNumberResult (_fbbe (_afbg .ValueArray ));};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ecggd :=args [0];_deeb :=args [1];if _deeb .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_aeed :=args [2].AsNumber ();if _aeed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bdef :=false ;if len (args )==4{_cdef :=args [3].AsNumber ();if _cdef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _cdef .ValueNumber ==0{_bdef =true ;};};_gaadg :=-1;_ddef :=false ;if len (_deeb .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");
};_cfec :=_deeb .ValueArray [0];_dedda :for _fbca ,_bgbac :=range _cfec {switch _cfggbg (_bgbac ,_ecggd ,false ,_bdef ){case _ebae :_gaadg =_fbca ;case _dgbff :_gaadg =_fbca ;_ddef =true ;break _dedda ;};};if _gaadg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");
};_abda :=int (_aeed .ValueNumber )-1;if _abda < 0||_abda > len (_deeb .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_cfec =_deeb .ValueArray [_abda ];
if _gaadg < 0||_gaadg >=len (_cfec ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _ddef ||!_bdef {return _cfec [_gaadg ];
};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Reference returns an invalid reference for Error.
func (_bcd Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;
BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Reference returns an invalid reference for Negate.
func (_cagg Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _abe ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_gedge ,_fgcg ,_bedge Expression };func _ceaf (_aebfe ,_ddad int )string {const TOKSTART =4;if !_eced {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_aged :=range _agbe {if _aged ._agcg ==_aebfe &&_aged ._gdbaf ==_ddad {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_aged ._dfbd ;
};};_dcab :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_feab (_ddad );_deedb :=make ([]int ,0,4);_agfge :=_gaed [_aebfe ];for _gdfb :=TOKSTART ;_gdfb -1< len (_becfb );_gdfb ++{if _cfbec :=_agfge +_gdfb ;
_cfbec >=0&&_cfbec < _cbec &&_adeaa [_dffd [_cfbec ]]==_gdfb {if len (_deedb )==cap (_deedb ){return _dcab ;};_deedb =append (_deedb ,_gdfb );};};if _cabe [_aebfe ]==-2{_ebabf :=0;for _dagbb [_ebabf ]!=-1||_dagbb [_ebabf +1]!=_aebfe {_ebabf +=2;};for _ebabf +=2;
_dagbb [_ebabf ]>=0;_ebabf +=2{_bfac :=_dagbb [_ebabf ];if _bfac < TOKSTART ||_dagbb [_ebabf +1]==0{continue ;};if len (_deedb )==cap (_deedb ){return _dcab ;};_deedb =append (_deedb ,_bfac );};if _dagbb [_ebabf +1]!=0{return _dcab ;};};for _gafb ,_ecab :=range _deedb {if _gafb ==0{_dcab +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";
}else {_dcab +="\u0020\u006f\u0072\u0020";};_dcab +=_feab (_ecab );};return _dcab ;};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_cdc :data }};func _fda (_fga ,_ece int64 )float64 {return float64 (int (0.5+float64 ((_ece -_fga )/86400)))};func (_ggf *evCache )SetCache (key string ,value Result ){_ggf ._dag .Lock ();
_ggf ._fgf [key ]=value ;_ggf ._dag .Unlock ();};func _dega (_afeg ,_dead float64 ,_eagc ,_adgb int )(float64 ,Result ){_fcc ,_agg :=_ceef (_afeg ),_ceef (_dead );if _agg .After (_fcc ){_ecad :=_befd (_fcc ,_agg ,_eagc ,_adgb );_ggcc :=(_agg .Year ()-_ecad .Year ())*12+int (_agg .Month ())-int (_ecad .Month ());
return float64 (_ggcc *_eagc )/12.0,_faba ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");
};func _caba (_geca ,_bbbef []float64 ,_fcgc float64 )Result {_geag :=false ;_cge :=false ;for _ggdeb :=0;_ggdeb < len (_geca );_ggdeb ++{if _geca [_ggdeb ]> 0{_geag =true ;};if _geca [_ggdeb ]< 0{_cge =true ;};};if !_geag ||!_cge {return MakeErrorResultType (ErrorTypeNum ,"");
};_fedc :=_fcgc ;_eeab :=1e-10;_adfa :=0;_ecaf :=50;_dbea :=false ;for {_gefb :=_abfc (_geca ,_bbbef ,_fedc );_afgb :=_fedc -_gefb /_bgbf (_geca ,_bbbef ,_fedc );_fddf :=_ac .Abs (_afgb -_fedc );_fedc =_afgb ;_adfa ++;if _fddf <=_eeab ||_ac .Abs (_gefb )<=_eeab {break ;
};if _adfa > _ecaf {_dbea =true ;break ;};};if _dbea ||_ac .IsNaN (_fedc )||_ac .IsInf (_fedc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_fedc );};var _dagbb =[...]int {-1,1,1,-1,-2,0};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbf :=args [0];switch _gbf .Type {case ResultTypeEmpty :return MakeNumberResult (0);
case ResultTypeNumber :_agd :=_ceef (_gbf .ValueNumber );return MakeNumberResult (float64 (_agd .Day ()));case ResultTypeString :_cbe :=_dd .ToLower (_gbf .ValueString );if !_efgb (_cbe ){_ ,_ ,_ ,_ ,_dfda ,_cec :=_cce (_cbe );if _cec .Type ==ResultTypeError {_cec .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";
return _cec ;};if _dfda {return MakeNumberResult (0);};};_ ,_ ,_efa ,_ ,_efg :=_aadd (_cbe );if _efg .Type ==ResultTypeError {return _efg ;};return MakeNumberResult (float64 (_efa ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");
};};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_cagd :=len (args );if _cagd < 2||_cagd > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_aaae :=args [0];if _aaae .Type !=ResultTypeArray &&_aaae .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_eaeg :=args [1].AsNumber ();if _eaeg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_baae :=int (_eaeg .ValueNumber )-1;_bfgff :=-1;if _cagd ==3&&args [2].Type !=ResultTypeEmpty {_eebe :=args [2].AsNumber ();if _eebe .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_bfgff =int (_eebe .ValueNumber )-1;};if _baae ==-1&&_bfgff ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};var _dgbdf []Result ;if _aaae .Type ==ResultTypeArray {_abaa :=_aaae .ValueArray ;if _baae < -1||_baae >=len (_abaa ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _baae ==-1{if _bfgff >=len (_abaa [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_gcbf :=[][]Result {};for _ ,_dgaf :=range _abaa {_aecd :=_dgaf [_bfgff ];
if _aecd .Type ==ResultTypeEmpty {_aecd =MakeNumberResult (0);};_gcbf =append (_gcbf ,[]Result {_aecd });};return MakeArrayResult (_gcbf );};_dgbdf =_abaa [_baae ];}else {_dfac :=_aaae .ValueList ;if _baae < -1||_baae >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");
};if _baae ==-1{if _bfgff >=len (_dfac ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_gfffd :=_dfac [_bfgff ];if _gfffd .Type ==ResultTypeEmpty {_gfffd =MakeNumberResult (0);
};return _gfffd ;};_dgbdf =_dfac ;};if _bfgff < -1||_bfgff > len (_dgbdf ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bfgff ==-1{_ccda :=[]Result {};
for _ ,_ddedb :=range _dgbdf {if _ddedb .Type ==ResultTypeEmpty {_ccda =append (_ccda ,MakeNumberResult (0));}else {_ccda =append (_ccda ,_ddedb );};};return MakeArrayResult ([][]Result {_ccda });};_egff :=_dgbdf [_bfgff ];if _egff .Type ==ResultTypeEmpty {return MakeNumberResult (0);
};return _egff ;};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");
};_ebabd :=args [0].AsNumber ();if _ebabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_ggbae :=10.0;if len (args )> 1{_cdedg :=args [1].AsNumber ();if _cdedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");
};_ggbae =args [1].ValueNumber ;};if _ebabd .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");
};if _ggbae ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");
};return MakeNumberResult (_ac .Log (_ebabd .ValueNumber )/_ac .Log (_ggbae ));};const _aefga =57378;const _cbec =187;type Reference struct{Type ReferenceType ;Value string ;};const _ggda =57362;

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _afc ,_bbea float64 ;switch args [0].Type {case ResultTypeNumber :_bbea =args [0].ValueNumber ;
case ResultTypeString :_dbf :=DateValue ([]Result {args [0]});if _dbf .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");
};_bbea =_dbf .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_afc =args [1].ValueNumber ;
if _afc < 62&&_bbea >=62{_afc --;};case ResultTypeString :_abfg :=DateValue ([]Result {args [1]});if _abfg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");
};_afc =_abfg .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_fdd :=float64 (int (_bbea -_afc ));return MakeNumberResult (_fdd );
};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_begd :=args [0].AsNumber ();if _begd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gaaef :=0;if len (args )> 1{_fbef :=args [1];if _fbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_gaaef =int (_fbef .ValueNumber );if _gaaef < 0{_gaaef =0;}else if _gaaef > 4{_gaaef =4;};};_dgca :=_abgg ;switch _gaaef {case 1:_dgca =_defg ;case 2:_dgca =_ffaba ;case 3:_dgca =_bgfb ;case 4:_dgca =_aeagc ;};_fdeeb :=_ac .Trunc (_begd .ValueNumber );
_adbe :=_ef .Buffer {};for _ ,_geef :=range _dgca {for _fdeeb >=_geef ._babfc {_adbe .WriteString (_geef ._dgda );_fdeeb -=_geef ._babfc ;};};return MakeStringResult (_adbe .String ());};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_ebfae ,_edfd ,_dagb :=_eab (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _dagb .Type ==ResultTypeError {return _dagb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_abd :=_edfd -_ebfae ;if _abd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");
};_cbffb :=args [2].ValueNumber ;if _cbffb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (100*(1-_cbffb *_abd /360));};func _bdfe (_faacg float64 ,_dagcd *criteriaRegex )bool {_bgdbde ,_bgdf :=_eed .ParseFloat (_dagcd ._dbeb ,64);if _bgdf !=nil {return false ;};switch _dagcd ._gefgg {case _ababb :return _faacg ==_bgdbde ;
case _ecgae :return _faacg <=_bgdbde ;case _gedg :return _faacg >=_bgdbde ;case _cgee :return _faacg < _bgdbde ;case _caag :return _faacg > _bgdbde ;};return false ;};const _bdadf =57347;

// GetFilename returns an empty string for the invalid reference context.
func (_baeag *ivr )GetFilename ()string {return ""};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );
RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );
RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );
RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );
RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );
RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );
RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func (_ffee PrefixHorizontalRange )horizontalRangeReference (_bffbc string )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bffbc ,_ffee ._dddgg ,_ffee ._ecceg );
};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_cggg :=MakeNumberResult (0);for _ ,_fcccf :=range args {_fcccf =_fcccf .AsNumber ();switch _fcccf .Type {case ResultTypeNumber :_cggg .ValueNumber +=_fcccf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ecbd :=Sum (_fcccf .ListValues ());
if _ecbd .Type !=ResultTypeNumber {return _ecbd ;};_cggg .ValueNumber +=_ecbd .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fcccf ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcccf .Type ));
};};return _cggg ;};

// Update updates references in the PrefixExpr after removing a row/column.
func (_eaged PrefixExpr )Update (q *_ge .UpdateQuery )Expression {_facgf :=_eaged ;_dbgae :=_eaged ._dabfd .String ();if _dbgae ==q .SheetToUpdate {_efdb :=*q ;_efdb .UpdateCurrentSheet =true ;_facgf ._abgb =_eaged ._abgb .Update (&_efdb );};return _facgf ;
};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bfaa :=args [0];if _bfaa .Type ==ResultTypeNumber {return _bfaa ;};if _bfaa .Type ==ResultTypeString {_efagdf ,_ccad :=_eed .ParseFloat (_bfaa .Value (),64);if _ccad ==nil {return MakeNumberResult (_efagdf );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");
};

// String returns an empty string for Error.
func (_gac Error )String ()string {return ""};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_ecba :=len (args );if _ecba !=4&&_ecba !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_acbd ,_fged ,_cdcd :=_eab (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _cdcd .Type ==ResultTypeError {return _cdcd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_geec :=args [2].ValueNumber ;if _geec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_eadb :=args [3].ValueNumber ;if _eadb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");
};_bbgg :=0;if _ecba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");
};_bbgg =int (args [4].ValueNumber );if !_gddd (_bbgg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");
};};_badf ,_cdcd :=_dcc (_acbd ,_fged ,_bbgg );if _cdcd .Type ==ResultTypeError {return _cdcd ;};return MakeNumberResult ((_eadb -_geec )/_geec /_badf );};func _cfee (_ebd ,_bbc _dgg .Time )bool {_ffgd :=_ebd .Unix ();_ggg :=_bbc .Unix ();_dcb :=_ebd .Year ();
_bfdc :=_cdb (_dcb ,_dgg .March ,1);if _dfcf (_dcb )&&_ffgd < _bfdc &&_ggg >=_bfdc {return true ;};var _beggd =_bbc .Year ();var _gaef =_cdb (_beggd ,_dgg .March ,1);return (_dfcf (_beggd )&&_ggg >=_gaef &&_ffgd < _gaef );};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_egeg :=_fddfg (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _egeg .Type !=ResultTypeEmpty {return _egeg ;};_cffc :=_fbbg (args [1:]);_fdcbb :=-_ac .MaxFloat64 ;_deee :=_ecfd (args [0]);for _ ,_fcgbg :=range _cffc {_gbag :=_deee [_fcgbg ._fbge ][_fcgbg ._dfae ].ValueNumber ;
if _fdcbb < _gbag {_fdcbb =_gbag ;};};if _fdcbb ==-_ac .MaxFloat64 {_fdcbb =0;};return MakeNumberResult (float64 (_fdcbb ));};func _ga (_gc Result )bool {if _gc .Type ==ResultTypeString {return _gc .ValueString =="";};return _gc .ValueNumber ==0;};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_eggc ConstArrayExpr )Update (q *_ge .UpdateQuery )Expression {return _eggc };

// Eval evaluates a vertical range returning a list of results or an error.
func (_dffcg VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dcdca :=_dffcg .verticalRangeReference ();if _acbgg ,_begcf :=ev .GetFromCache (_dcdca );_begcf {return _acbgg ;};_feaa ,_befe :=_geed (ctx ,_dffcg ._fgddc ,_dffcg ._fcce );_aaebb :=_ebebfb (ctx ,ev ,_feaa ,_befe );
ev .SetCache (_dcdca ,_aaebb );return _aaebb ;};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ae ,_fg Expression ;_eg BinOpType ;};const _fcdff =2;

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_egdg :=_fddfg (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _egdg .Type !=ResultTypeEmpty {return _egdg ;};_bgebc :=_fbbg (args );return MakeNumberResult (float64 (len (_bgebc )));};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func _effa (_ccge ,_ecdc ,_acfg ,_eadc float64 ,_dfeb int )float64 {var _cdcg float64 ;if _ccge ==0{_cdcg =(_acfg +_eadc )/_ecdc ;}else {_caed :=_ac .Pow (1+_ccge ,_ecdc );
if _dfeb ==1{_cdcg =(_eadc *_ccge /(_caed -1)+_acfg *_ccge /(1-1/_caed ))/(1+_ccge );}else {_cdcg =_eadc *_ccge /(_caed -1)+_acfg *_ccge /(1-1/_caed );};};return -_cdcg ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_acba ,_fcgf :=_ggdef ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _fcgf .Type !=ResultTypeEmpty {return _fcgf ;};_eeedb :=_acba ._abbff ;_bfgbd :=_acba ._cgde ;_bbab :=_acba ._eage ;_cgeg :=_acba ._aabcd ;_bbdag :=len (_eeedb );
if _bfgbd > _bbdag {_bfgbd =_bbdag ;};_abfb :=_bfgbd +_bbab ;if _abfb > _bbdag {_abfb =_bbdag ;};_fadg :=_eeedb [0:_bfgbd ]+_cgeg +_eeedb [_abfb :];return MakeStringResult (_fadg );};func _bdfc (_eff int )int {if _eff < 1900{if _eff < 30{_eff +=2000;}else {_eff +=1900;
};};return _eff ;};

// Update updates the horizontal range references after removing a row/column.
func (_efebb HorizontalRange )Update (q *_ge .UpdateQuery )Expression {return _efebb };var InvalidReferenceContext =&ivr {};func _fbbe (_eafa [][]Result )float64 {if len (_eafa )==2{_feeg :=_eafa [0][0].AsNumber ();_bbda :=_eafa [0][1].AsNumber ();_abdc :=_eafa [1][0].AsNumber ();
_ggeb :=_eafa [1][1].AsNumber ();if _feeg .Type !=ResultTypeNumber ||_bbda .Type !=ResultTypeNumber ||_abdc .Type !=ResultTypeNumber ||_ggeb .Type !=ResultTypeNumber {return _ac .NaN ();};return _feeg .ValueNumber *_ggeb .ValueNumber -_abdc .ValueNumber *_bbda .ValueNumber ;
};_bgec :=float64 (0);_gcbbc :=float64 (1);for _gedde :=range _eafa {_bgec +=_gcbbc *_eafa [0][_gedde ].ValueNumber *_fbbe (_cdba (_eafa ,_gedde ));_gcbbc *=-1;};return _bgec ;};

// Eval evaluates and returns the result of an empty expression.
func (_fc EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_edabg (args ,_fgga ));};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_ceabg :=args [0];
if _ceabg .Type !=ResultTypeArray &&_ceabg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_ecga :=_ceabg .ValueArray ;if len (_ecga )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");
};return MakeNumberResult (float64 (len (_ecga [0])));};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_cafd *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_dfa :=len (args );if _dfa < 3||_dfa > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gffe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_ddgbd :=args [1].ValueNumber ;if _ddgbd !=float64 (int (_ddgbd )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bdeb :=args [2].ValueNumber ;_dfca :=0.0;if _dfa >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfca =args [3].ValueNumber ;};_efed :=0.0;if _dfa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_efed =args [4].ValueNumber ;if _efed !=0{_efed =1;};};if _gffe ==0{return MakeNumberResult (-_bdeb *_ddgbd -_dfca );}else {return MakeNumberResult ((((1-_ac .Pow (1+_gffe ,_ddgbd ))/_gffe )*_bdeb *(1+_gffe *_efed )-_dfca )/_ac .Pow (1+_gffe ,_ddgbd ));
};};func _gaga ()yyParser {return &yyParserImpl {}};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_feacb NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_dcgca :=ctx .NamedRange (_feacb ._cbage );_cbba :=_dcgca .Value ;if _edca ,_dfff :=ev .GetFromCache (_cbba );_dfff {return _edca ;};_efgd :=_dd .Split (_cbba ,"\u0021");if len (_efgd )!=2{return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_cbba ));
};_efbc :=ctx .Sheet (_efgd [0]);_ffafe :=_dd .Split (_efgd [1],"\u003a");switch len (_ffafe ){case 1:_gaaea :=ev .Eval (_efbc ,_ffafe [0]);ev .SetCache (_cbba ,_gaaea );return _gaaea ;case 2:_ddga :=_ebebfb (_efbc ,ev ,_ffafe [0],_ffafe [1]);ev .SetCache (_cbba ,_ddga );
return _ddga ;};return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_dcgca .Type ));};

// String returns a string representation of a range with prefix.
func (_eedc PrefixRangeExpr )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eedc ._gedge .String (),_eedc ._fgcg .String (),_eedc ._bedge .String ());};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_bggb Context ,_fegd Evaluator ,_edged []Result )Result ;

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_fefc chan *node ;_dfgfb _g .Mutex ;_fdedd []chan *node ;_cadd []*node ;};type amorArgs struct{_cca float64 ;_aded float64 ;_abcc float64 ;_aefg float64 ;_cdeb int ;_cbge float64 ;_ffca int ;};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _gdbde (_bcdf float64 )float64 {_fccf :=float64 (1);for _dgbgc :=float64 (2);_dgbgc <=_bcdf ;_dgbgc ++{_fccf *=_dgbgc ;};return _fccf ;};const _ffdgb =57375;


// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_deaag :=args [0].AsNumber ();
_fae :=args [1].AsNumber ();if _deaag .Type ==ResultTypeNumber &&_fae .Type ==ResultTypeNumber {_dfge :=_ac .Atan2 (_fae .ValueNumber ,_deaag .ValueNumber );if _dfge !=_dfge {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");
};return MakeNumberResult (_dfge );};for _ ,_cbgec :=range []ResultType {_deaag .Type ,_fae .Type }{switch _cbgec {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
case ResultTypeError :return _deaag ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cbgec ));
};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bgbdf ,_cebec :=_egcg ("\u0046\u0049\u004e\u0044",args );if _cebec .Type !=ResultTypeEmpty {return _cebec ;};_egaa :=_dd .ToLower (_bgbdf ._aafe );
_gceff :=_dd .ToLower (_bgbdf ._eabb );if _egaa ==""{return MakeNumberResult (1.0);};_aafc :=_bgbdf ._cddf -1;_acef :=1;_bbgc :=0;for _fagc :=range _gceff {if _fagc !=0{_adbf :=1;if _fagc -_bbgc > 1{_adbf =2;};_acef +=_adbf ;};if _acef > _aafc {_eefe :=_f .Index (_egaa ,_gceff [_fagc :]);
if _eefe ==0{return MakeNumberResult (float64 (_acef ));};};_bbgc =_fagc ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _fdg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";


// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_cfbbe :=args [0];if _cfbbe .Type !=ResultTypeArray &&_cfbbe .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_fgcdd :=_cfbbe .ValueArray ;if len (_fgcdd )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");
};return MakeNumberResult (float64 (len (_fgcdd )));};func _fb (_c ,_ea [][]Result )bool {if len (_c )!=len (_ea ){return false ;};for _bda :=range _c {if len (_c [_bda ])!=len (_ea [_bda ]){return false ;};};return true ;};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cfcgg (args ,_cdefc )};

// Eval evaluates and returns the result of a Negate expression.
func (_fcec Negate )Eval (ctx Context ,ev Evaluator )Result {_bgbfb :=_fcec ._aaeg .Eval (ctx ,ev );if _bgbfb .Type ==ResultTypeNumber {return MakeNumberResult (-_bgbfb .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_ffgff :=len (args );if _ffgff !=6&&_ffgff !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_ffea ,_aagbd ,_bgedf :=_eab (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bgedf .Type ==ResultTypeError {return _bgedf ;};_caee :=args [2];if _caee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_bfbd :=_caee .ValueNumber ;if _bfbd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_cfef :=args [3];if _cfef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gefcd :=_cfef .ValueNumber ;if _gefcd <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_adec :=args [4];if _adec .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");
};_ecec :=_adec .ValueNumber ;if _ecec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_adcc :=args [5];
if _adcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_cgfb :=float64 (int (_adcc .ValueNumber ));if !_ecg (_cgfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dbdc :=0;if _ffgff ==7&&args [6].Type !=ResultTypeEmpty {_becd :=args [6];
if _becd .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dbdc =int (_becd .ValueNumber );
if !_gddd (_dbdc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_aace :=0.0;
_caeec :=0.0;_cdgd :=1.0;_eddb ,_bgedf :=_dee (_ffea ,_aagbd ,_bfbd ,_caeec ,_ecec ,_cgfb ,_dbdc );if _bgedf .Type ==ResultTypeError {return _bgedf ;};_ggfd ,_bgedf :=_dee (_ffea ,_aagbd ,_bfbd ,_cdgd ,_ecec ,_cgfb ,_dbdc );if _bgedf .Type ==ResultTypeError {return _bgedf ;
};_afbd :=(_cdgd -_caeec )*0.5;for _cfbdc :=0;_cfbdc < 100&&_aace !=_gefcd ;_cfbdc ++{_aace ,_bgedf =_dee (_ffea ,_aagbd ,_bfbd ,_afbd ,_ecec ,_cgfb ,_dbdc );if _bgedf .Type ==ResultTypeError {return _bgedf ;};if _gefcd ==_eddb {return MakeNumberResult (_caeec );
}else if _gefcd ==_ggfd {return MakeNumberResult (_cdgd );}else if _gefcd ==_aace {return MakeNumberResult (_afbd );}else if _gefcd < _ggfd {_cdgd *=2.0;_ggfd ,_bgedf =_dee (_ffea ,_aagbd ,_bfbd ,_cdgd ,_ecec ,_cgfb ,_dbdc );if _bgedf .Type ==ResultTypeError {return _bgedf ;
};_afbd =(_cdgd -_caeec )*0.5;}else {if _gefcd < _aace {_caeec =_afbd ;_eddb =_aace ;}else {_cdgd =_afbd ;_ggfd =_aace ;};_afbd =_cdgd -(_cdgd -_caeec )*((_gefcd -_ggfd )/(_eddb -_ggfd ));};};return MakeNumberResult (_afbd );};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_cbage string };

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_cdfe ,_abb :=_gfdf (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _abb .Type ==ResultTypeError {return _abb ;};_gdfe :=_cdfe ._acga ;_ddde :=_cdfe ._fbea ;_gada :=_cdfe ._gbff ;_ccab :=_cdfe ._dfb ;_gedd :=_cdfe ._cecg ;
_bdff :=_cdfe ._ffcaf ;_dcff :=_effa (_gdfe ,_ddde ,_gada ,0,_bdff );_agff :=0.0;if _ccab ==1{if _bdff ==0{_agff =-_gada ;_ccab ++;};};for _afde :=_ccab ;_afde <=_gedd ;_afde ++{if _bdff ==1{_agff +=_ecdce (_gdfe ,_afde -2,_dcff ,_gada ,1)-_dcff ;}else {_agff +=_ecdce (_gdfe ,_afde -1,_dcff ,_gada ,0);
};};_agff *=_gdfe ;return MakeNumberResult (_agff );};func _dcge (_adbff yyLexer )int {return _gaga ().Parse (_adbff )};func _bgdfd (_eabfd ,_fcgfd []string )[]string {for _ ,_ccbdf :=range _fcgfd {_eabfd =append (_eabfd ,_ccbdf );};return _eabfd ;};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_afd :=&defEval {};_afd .evCache =_fbe ();return _afd };

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gcgdg :=args [0];switch _gcgdg .Type {case ResultTypeError :return _gcgdg ;case ResultTypeNumber ,ResultTypeString :return _eaffa (args [0]);case ResultTypeList :_cbee :=_gcgdg .ValueList ;_dbgg :=[]Result {};for _ ,_agdb :=range _cbee {_fbcbd :=_eaffa (_agdb );
if _fbcbd .Type ==ResultTypeError {return _fbcbd ;};_dbgg =append (_dbgg ,_fbcbd );};return MakeListResult (_dbgg );case ResultTypeArray :_dabfg :=_gcgdg .ValueArray ;_dbfgg :=[][]Result {};for _ ,_cecf :=range _dabfg {_aebgf :=[]Result {};for _ ,_cgfe :=range _cecf {_fgfgd :=_eaffa (_cgfe );
if _fgfgd .Type ==ResultTypeError {return _fgfgd ;};_aebgf =append (_aebgf ,_fgfgd );};_dbfgg =append (_dbfgg ,_aebgf );};return MakeArrayResult (_dbfgg );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_eaaf :=args [0].AsNumber ();if _eaaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gdfd :=float64 (0);if len (args )> 1{_ddcc :=args [1].AsNumber ();if _ddcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_gdfd =_ddcc .ValueNumber ;};_eaag :=_eaaf .ValueNumber ;_adccg :=1.0;if _gdfd >=0{_adccg =_ac .Pow (1/10.0,_gdfd );}else {return MakeNumberResult (0);};_eaag ,_cgfg :=_ac .Modf (_eaag /_adccg );_fbfdd :=0.99999;if _cgfg > _fbfdd {_eaag ++;}else if _cgfg < -_fbfdd {_eaag --;
};_ =_cgfg ;return MakeNumberResult (_eaag *_adccg );};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_dccd :=len (args );if _dccd !=4&&_dccd !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_dabg ,_fdac ,_eggcbc :=_eab (args [0],args [1],"\u0044\u0049\u0053\u0043");if _eggcbc .Type ==ResultTypeError {return _eggcbc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gbdb :=args [2].ValueNumber ;if _gbdb <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cfd :=args [3].ValueNumber ;if _cfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ceca :=0;if _dccd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ceca =int (args [4].ValueNumber );if !_gddd (_ceca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");
};};_fcbe ,_eggcbc :=_dcc (_dabg ,_fdac ,_ceca );if _eggcbc .Type ==ResultTypeError {return _eggcbc ;};return MakeNumberResult ((_cfd -_gbdb )/_cfd /_fcbe );};func _cfcg (_adef int )bool {return _adef ==0||_adef ==4};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;var _edg =[]*_ec .Regexp {};func _ebgc (_dacbc int )string {if _dacbc >=0&&_dacbc < len (_dcfec ){if _dcfec [_dacbc ]!=""{return _dcfec [_dacbc ];};};return _b .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_dacbc );};


// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_aef Context ,formula string )Result ;SetCache (_eeb string ,_aad Result );GetFromCache (_bag string )(Result ,bool );LastEvalIsRef ()bool ;};const _dgbc int =30;func _geed (_gfab Context ,_dgdeb ,_dfbdf string )(string ,string ){_ebdbb :=_dgdeb +"\u0031";
_efda :=_gfab .LastRow (_dgdeb );_cadf :=_dfbdf +_eed .Itoa (_efda );return _ebdbb ,_cadf ;};func _ecdce (_afdb ,_eeg ,_gced ,_ebaa float64 ,_fdfa int )float64 {var _dfdd float64 ;if _afdb ==0{_dfdd =_ebaa +_gced *_eeg ;}else {_gddf :=_ac .Pow (1+_afdb ,_eeg );
if _fdfa ==1{_dfdd =_ebaa *_gddf +_gced *(1+_afdb )*(_gddf -1)/_afdb ;}else {_dfdd =_ebaa *_gddf +_gced *(_gddf -1)/_afdb ;};};return -_dfdd ;};func _eaffa (_bbaf Result )Result {if _bbaf .Type ==ResultTypeEmpty {return _bbaf ;};_ffdbc :=_bbaf .AsString ();
if _ffdbc .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};if _bbaf .IsBoolean {if _ffdbc .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _ffdbc .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");
};}else {return MakeStringResult (_dd .ToLower (_ffdbc .ValueString ));};};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_gcdcd :=args [0].AsNumber ();_adcgcf :=args [1].AsNumber ();if _gcdcd .Type !=ResultTypeNumber ||_adcgcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};if _adcgcf .ValueNumber < _gcdcd .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");
};_ffgcg :=int64 (_gcdcd .ValueNumber );_dgab :=int64 (_adcgcf .ValueNumber );return MakeNumberResult (float64 (_ebce .Int63n (_dgab -_ffgcg +1)+_ffgcg ));};const _cddfc =57346;const _fdb ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_gdg +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";
func _dagd (_age Result )bool {_acfdb :=_age .Type ;return _acfdb !=ResultTypeArray &&_acfdb !=ResultTypeList ;};func _gdab (_bafg _dgg .Time )bool {return _dgg .Now ().Sub (_bafg )>=_dbfbe };

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_bad ,_acf :=_eed .ParseBool (v );if _acf !=nil {_ba .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_acf );
};return Bool {_gad :_bad };};

// Error is called in the case of parsing error and saves an error to a plex.
func (_gbcae *plex )Error (s string ){_ba .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_gbcae ._debcc =s ;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_bcaa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aacg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fdcf :=args [2].ValueNumber ;if _fdcf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");
};return MakeNumberResult ((_bcaa -_aacg )/_fdcf );};func _gcb (_fec ,_bdd ,_gff int )bool {if _bdd < 1||_bdd > 12{return false ;};if _gff < 1{return false ;};return _gff <=_dbe (_fec ,_bdd );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// CellRef is a reference to a single cell
type CellRef struct{_aea string };

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};_acaga :=args [0];if _acaga .Type ==ResultTypeError ||_acaga .Type ==ResultTypeString {return _acaga ;};return _faba ;};func _aae (){_dgb ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_ec .MustCompile ("\u005e"+_abe +_bcb );_dgb ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_ec .MustCompile ("\u005e"+_ccc +_bcb );
_dgb ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_ec .MustCompile ("\u005e"+_gcfa +_bcb );_dgb ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_ec .MustCompile ("\u005e"+_fdb +_bcb );_fafe ["\u0068\u0068"]=_ec .MustCompile (_fce +_adgc +"\u0024");
_fafe ["\u0068\u0068\u003am\u006d"]=_ec .MustCompile (_fce +_fdg +"\u0024");_fafe ["\u006d\u006d\u003as\u0073"]=_ec .MustCompile (_fce +_dgce +"\u0024");_fafe ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_ec .MustCompile (_fce +_fcb +"\u0024");
_feb =[]*_ec .Regexp {_ec .MustCompile ("\u005e"+_abe +"\u0024"),_ec .MustCompile ("\u005e"+_ccc +"\u0024"),_ec .MustCompile ("\u005e"+_gcfa +"\u0024"),_ec .MustCompile ("\u005e"+_fdb +"\u0024")};_edg =[]*_ec .Regexp {_ec .MustCompile ("\u005e"+_adgc +"\u0024"),_ec .MustCompile ("\u005e"+_fdg +"\u0024"),_ec .MustCompile ("\u005e"+_dgce +"\u0024"),_ec .MustCompile ("\u005e"+_fcb +"\u0024")};
};var _fcaa []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};var _fcbef []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
func _gadd (_ecaef Result ,_befg int )[]Result {_gddeaf :=[]Result {};switch _ecaef .Type {case ResultTypeList :_gfbg :=_ecaef .ValueList ;_egbb :=len (_gfbg );for _gcee :=0;_gcee < _befg ;_gcee ++{if _gcee < _egbb {_gddeaf =append (_gddeaf ,_gfbg [_gcee ]);
}else {_gddeaf =append (_gddeaf ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _decf :=0;_decf < _befg ;_decf ++{_gddeaf =append (_gddeaf ,_ecaef );};};return _gddeaf ;};

// String returns a string representation of PrefixExpr.
func (_affc PrefixExpr )String ()string {return _b .Sprintf ("\u0025\u0073\u0021%\u0073",_affc ._dabfd .String (),_affc ._abgb .String ());};var _dffd =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};
type countMode byte ;func _gege (_daagf Reference ,_ecce Context )bool {return _ecce .Sheet (_daagf .Value )==InvalidReferenceContext ;};func _cfggbg (_bbcb ,_bfce Result ,_efacc ,_fabg bool )cmpResult {_bbcb =_bbcb .AsNumber ();_bfce =_bfce .AsNumber ();
if _bbcb .Type !=_bfce .Type {return _gebd ;};if _bbcb .Type ==ResultTypeNumber {if _bbcb .ValueNumber ==_bfce .ValueNumber {return _dgbff ;};if _bbcb .ValueNumber < _bfce .ValueNumber {return _ebae ;};return _beed ;};if _bbcb .Type ==ResultTypeString {_bdegc :=_bbcb .ValueString ;
_egde :=_bfce .ValueString ;if !_efacc {_bdegc =_dd .ToLower (_bdegc );_egde =_dd .ToLower (_egde );};if _fabg {_dgbeg :=_f .Match (_egde ,_bdegc );if _dgbeg {return _dgbff ;}else {return _beed ;};};return cmpResult (_dd .Compare (_bdegc ,_egde ));};if _bbcb .Type ==ResultTypeEmpty {return _dgbff ;
};if _bbcb .Type ==ResultTypeList {if len (_bbcb .ValueList )< len (_bfce .ValueList ){return _ebae ;};if len (_bbcb .ValueList )> len (_bfce .ValueList ){return _beed ;};for _acgb :=range _bbcb .ValueList {_efefd :=_cfggbg (_bbcb .ValueList [_acgb ],_bfce .ValueList [_acgb ],_efacc ,_fabg );
if _efefd !=_dgbff {return _efefd ;};};return _dgbff ;};if _bbcb .Type ==ResultTypeList {if len (_bbcb .ValueArray )< len (_bfce .ValueArray ){return _ebae ;};if len (_bbcb .ValueArray )> len (_bfce .ValueArray ){return _beed ;};for _gdbdd :=range _bbcb .ValueArray {_dfgd :=_bbcb .ValueArray [_gdbdd ];
_ffff :=_bbcb .ValueArray [_gdbdd ];if len (_dfgd )< len (_ffff ){return _ebae ;};if len (_dfgd )> len (_ffff ){return _beed ;};for _agcd :=range _dfgd {_eaa :=_cfggbg (_dfgd [_agcd ],_ffff [_agcd ],_efacc ,_fabg );if _eaa !=_dgbff {return _eaa ;};};};
return _dgbff ;};return _gebd ;};func _edaea (_eedf ,_cdga Reference )string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_eedf .Value ,_cdga .Value );};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfea :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ceec :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ecdcd :=args [2].ValueNumber ;if _ecdcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gedc :=args [3].ValueNumber ;return MakeNumberResult (_gedc *_dfea *(_ceec /_ecdcd -1));};

// String returns a string representation of a horizontal range.
func (_bebb HorizontalRange )String ()string {return _bebb .horizontalRangeReference ()};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_ac .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// LastRow returns 0 for the invalid reference context.
func (_caaff *ivr )LastRow (colFrom string )int {return 0};

// Db implements the Excel DB function.
func Db (args []Result )Result {_aede :=len (args );if _aede !=4&&_aede !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_fgae :=args [0].ValueNumber ;if _fgae < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");
};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dfcg :=args [1].ValueNumber ;if _dfcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cede :=args [2].ValueNumber ;if _cede <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_ffgf :=args [3].ValueNumber ;if _ffgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");
};if _ffgf -_cede > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cgdf :=12.0;if _aede ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_cgdf =args [4].ValueNumber ;if _cgdf < 1||_cgdf > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");
};};if _cgdf ==12&&_ffgf > _cede {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _dfcg >=_fgae {return MakeNumberResult (0);
};_eef :=1-_ac .Pow (_dfcg /_fgae ,1/_cede );_eef =float64 (int (_eef *1000+0.5))/1000;_ceedb :=_fgae *_eef *_cgdf /12;if _ffgf ==1{return MakeNumberResult (_ceedb );};_dgef :=_ceedb ;_gecc :=0.0;_afcf :=_cede ;if _afcf > _ffgf {_afcf =_ffgf ;};for _eabc :=2.0;
_eabc <=_afcf ;_eabc ++{_gecc =(_fgae -_dgef )*_eef ;_dgef +=_gecc ;};if _ffgf > _cede {return MakeNumberResult ((_fgae -_dgef )*_eef *(12-_cgdf )/12);};return MakeNumberResult (_gecc );};type ri struct{_babfc float64 ;_dgda string ;};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// ResultType is the type of the result
//
//go:generate stringer -type=ResultType
type ResultType byte ;const _adeg =57351;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_cbage :v }};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_gceb :=len (args );if _gceb < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ebfaf :=args [0].ValueNumber ;if _ebfaf ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ggcd :=[]float64 {};for _ ,_bcgb :=range args [1:]{switch _bcgb .Type {case ResultTypeNumber :_ggcd =append (_ggcd ,_bcgb .ValueNumber );case ResultTypeArray ,ResultTypeList :_feeee :=_ecfd (_bcgb );
for _ ,_bfe :=range _feeee {for _ ,_fabb :=range _bfe {if _fabb .Type ==ResultTypeNumber &&!_fabb .IsBoolean {_ggcd =append (_ggcd ,_fabb .ValueNumber );};};};};};_ccaa :=0.0;for _gbca ,_ddda :=range _ggcd {_ccaa +=_ddda /_ac .Pow (1+_ebfaf ,float64 (_gbca )+1);
};return MakeNumberResult (_ccaa );};

// Value returns a string version of the result.
func (_fcefbe Result )Value ()string {switch _fcefbe .Type {case ResultTypeNumber :_bbffc :=_eed .FormatFloat (_fcefbe .ValueNumber ,'f',-1,64);if len (_bbffc )> 12{_cebd :=12;for _ggdeg :=_cebd ;_ggdeg > 0&&_bbffc [_ggdeg ]=='0';_ggdeg --{_cebd --;};_bbffc =_bbffc [0:_cebd +1];
};return _bbffc ;case ResultTypeError :return _fcefbe .ValueString ;case ResultTypeString :return _fcefbe .ValueString ;case ResultTypeList :if len (_fcefbe .ValueList )==0{return "";};return _fcefbe .ValueList [0].Value ();case ResultTypeArray :if len (_fcefbe .ValueArray )==0||len (_fcefbe .ValueArray [0])==0{return "";
};return _fcefbe .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_agfg :=args [0].AsNumber ();if _agfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (180.0/_ac .Pi *_agfg .ValueNumber );};func (_aeac VerticalRange )verticalRangeReference ()string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_aeac ._fgddc ,_aeac ._fcce );};

// Eval evaluates the binary expression using the context given.
func (_ace BinaryExpr )String ()string {_cd :="";switch _ace ._eg {case BinOpTypePlus :_cd ="\u002b";case BinOpTypeMinus :_cd ="\u002d";case BinOpTypeMult :_cd ="\u002a";case BinOpTypeDiv :_cd ="\u002f";case BinOpTypeExp :_cd ="\u005e";case BinOpTypeLT :_cd ="\u003c";
case BinOpTypeGT :_cd ="\u003e";case BinOpTypeEQ :_cd ="\u003d";case BinOpTypeLEQ :_cd ="\u003c\u003d";case BinOpTypeGEQ :_cd ="\u003e\u003d";case BinOpTypeNE :_cd ="\u003c\u003e";case BinOpTypeConcat :_cd ="\u0026";};return _ace ._ae .String ()+_cd +_ace ._fg .String ();
};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];
};return args [0];};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_afad ,_gbgd :=_bbgf (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _gbgd .Type ==ResultTypeError {return _gbgd ;};return MakeNumberResult (_gec (_afad ._gagg ,_afad ._dgdd ,_afad ._ceeb ,_afad ._cbdd ));
};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_ede EmptyExpr )Update (q *_ge .UpdateQuery )Expression {return _ede };

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_gegf :=_dd .Split (v ,"\u003a");if len (_gegf )!=2{return nil ;};if _gegf [0]> _gegf [1]{_gegf [0],_gegf [1]=_gegf [1],_gegf [0];};return PrefixVerticalRange {_ebbed :pfx ,_eege :_gegf [0],_dced :_gegf [1]};
};func _fdaea (_cdgg ,_deef float64 )bool {return _ac .Abs (_cdgg -_deef )< 1.0e-6};

// Update updates references in the VerticalRange after removing a row/column.
func (_gbbb VerticalRange )Update (q *_ge .UpdateQuery )Expression {if q .UpdateType ==_ge .UpdateActionRemoveColumn {_badfg :=_gbbb ;if q .UpdateCurrentSheet {_eabda :=q .ColumnIdx ;_badfg ._fgddc =_cae (_gbbb ._fgddc ,_eabda );_badfg ._fcce =_cae (_gbbb ._fcce ,_eabda );
};return _badfg ;};return _gbbb ;};var _caeag =map[string ]Function {};

// Eval evaluates and returns an expression with prefix.
func (_fbegg PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_ceceb :=_fbegg ._dabfd .Reference (ctx ,ev );switch _ceceb .Type {case ReferenceTypeSheet :if _gege (_ceceb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ceceb .Value ));
};_bgcfe :=ctx .Sheet (_ceceb .Value );return _fbegg ._abgb .Eval (_bgcfe ,ev );default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ceceb .Type ));
};};func _cc (_dgf string ,_fgb *_ge .UpdateQuery )string {_beb ,_aeg :=_gg .ParseCellReference (_dgf );if _aeg !=nil {return "\u0023\u0052\u0045F\u0021";};if _fgb .UpdateType ==_ge .UpdateActionRemoveColumn {_fgc :=_fgb .ColumnIdx ;_dded :=_beb .ColumnIdx ;
if _dded < _fgc {return _dgf ;}else if _dded ==_fgc {return "\u0023\u0052\u0045F\u0021";}else {return _beb .Update (_ge .UpdateActionRemoveColumn ).String ();};};return _dgf ;};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_cdc [][]Expression };func (_ffebe *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Match implements the MATCH function.
func Match (args []Result )Result {_egfg :=len (args );if _egfg !=2&&_egfg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dcddc :=1;if _egfg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");
};_fdcb :=args [2].ValueNumber ;if _fdcb ==-1||_fdcb ==0{_dcddc =int (_fdcb );};};_efaef :=args [1];var _gfda []Result ;switch _efaef .Type {case ResultTypeList :_gfda =_efaef .ValueList ;case ResultTypeArray :_dggf :=_efaef .ValueArray ;for _ ,_ebdd :=range _dggf {if len (_ebdd )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_gfda =append (_gfda ,_ebdd [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");
};_dgbea :=_eeef (args [0]);switch _dcddc {case 0:for _cffb ,_cbcdc :=range _gfda {if _deaae (_cbcdc ,_dgbea ){return MakeNumberResult (float64 (_cffb +1));};};case -1:for _bfggc :=0;_bfggc < len (_gfda );_bfggc ++{if _deaae (_gfda [_bfggc ],_dgbea ){return MakeNumberResult (float64 (_bfggc +1));
};if _dgbea ._cgae &&(_gfda [_bfggc ].ValueNumber < _dgbea ._cdbe ){if _bfggc ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bfggc ));};};case 1:for _bga :=0;_bga < len (_gfda );_bga ++{if _deaae (_gfda [_bga ],_dgbea ){return MakeNumberResult (float64 (_bga +1));
};if _dgbea ._cgae &&(_gfda [_bga ].ValueNumber > _dgbea ._cdbe ){if _bga ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bga ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};const _bcb ="\u0028\u0020\u0028"+_adgc +"\u007c"+_fdg +"\u007c"+_dgce +"\u007c"+_fcb +"\u0029\u0029\u003f\u0024";
func _cdb (_gcdc int ,_dec _dgg .Month ,_edf int )int64 {if _gcdc ==1900&&int (_dec )<=2{_edf --;};_cfce :=_dgg .Date (_gcdc ,_dec ,_edf ,0,0,0,0,_dgg .UTC );return _cfce .Unix ();};var _acecg _g .Mutex ;

// Reference returns an invalid reference for Number.
func (_ecdbf Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eval evaluates the binary expression using the context given.
func (_ag BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_da :=_ag ._ae .Eval (ctx ,ev );if _da .Type ==ResultTypeError {return _da ;};_gf :=_ag ._fg .Eval (ctx ,ev );if _gf .Type ==ResultTypeError {return _gf ;};if _da .Type ==_gf .Type {if _da .Type ==ResultTypeArray {if !_fb (_da .ValueArray ,_gf .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _af (_ag ._eg ,_da .ValueArray ,_gf .ValueArray );}else if _da .Type ==ResultTypeList {if len (_da .ValueList )!=len (_gf .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");
};return _bdf (_ag ._eg ,_da .ValueList ,_gf .ValueList );};}else if _da .Type ==ResultTypeArray &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return _bg (_ag ._eg ,_da .ValueArray ,_gf );}else if _da .Type ==ResultTypeList &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return _ddaf (_ag ._eg ,_da .ValueList ,_gf );
};switch _ag ._eg {case BinOpTypePlus :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeNumberResult (_da .ValueNumber +_gf .ValueNumber );};};case BinOpTypeMinus :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeNumberResult (_da .ValueNumber -_gf .ValueNumber );
};};case BinOpTypeMult :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeNumberResult (_da .ValueNumber *_gf .ValueNumber );};};case BinOpTypeDiv :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {if _gf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");
};return MakeNumberResult (_da .ValueNumber /_gf .ValueNumber );};};case BinOpTypeExp :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeNumberResult (_ac .Pow (_da .ValueNumber ,_gf .ValueNumber ));};};case BinOpTypeLT :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeBoolResult (_da .ValueNumber < _gf .ValueNumber );
};if _da .Type ==ResultTypeString {return MakeBoolResult (_da .ValueString < _gf .ValueString );};if _da .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _da .Type ==ResultTypeString &&_gf .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _da .Type ==ResultTypeNumber &&_gf .Type ==ResultTypeString {return MakeBoolResult (true );}else if _da .Type ==ResultTypeEmpty &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_da .Type ==ResultTypeNumber ||_da .Type ==ResultTypeString )&&_gf .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};case BinOpTypeGT :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeBoolResult (_da .ValueNumber > _gf .ValueNumber );};if _da .Type ==ResultTypeString {return MakeBoolResult (_da .ValueString > _gf .ValueString );};if _da .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if _da .Type ==ResultTypeString &&_gf .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _da .Type ==ResultTypeNumber &&_gf .Type ==ResultTypeString {return MakeBoolResult (false );}else if _da .Type ==ResultTypeEmpty &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if (_da .Type ==ResultTypeNumber ||_da .Type ==ResultTypeString )&&_gf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeBoolResult (_da .ValueNumber ==_gf .ValueNumber );
};if _da .Type ==ResultTypeString {return MakeBoolResult (_da .ValueString ==_gf .ValueString );};if _da .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_da .Type ==ResultTypeString &&_gf .Type ==ResultTypeNumber )||(_da .Type ==ResultTypeNumber &&_gf .Type ==ResultTypeString ){return MakeBoolResult (false );
}else if _da .Type ==ResultTypeEmpty &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return MakeBoolResult (_ga (_gf ));}else if (_da .Type ==ResultTypeNumber ||_da .Type ==ResultTypeString )&&_gf .Type ==ResultTypeEmpty {return MakeBoolResult (_ga (_da ));
};case BinOpTypeNE :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeBoolResult (_da .ValueNumber !=_gf .ValueNumber );};if _da .Type ==ResultTypeString {return MakeBoolResult (_da .ValueString !=_gf .ValueString );};if _da .Type ==ResultTypeEmpty {return MakeBoolResult (false );
};}else if (_da .Type ==ResultTypeString &&_gf .Type ==ResultTypeNumber )||(_da .Type ==ResultTypeNumber &&_gf .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _da .Type ==ResultTypeEmpty &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return MakeBoolResult (!_ga (_gf ));
}else if (_da .Type ==ResultTypeNumber ||_da .Type ==ResultTypeString )&&_gf .Type ==ResultTypeEmpty {return MakeBoolResult (!_ga (_da ));};case BinOpTypeLEQ :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeBoolResult (_da .ValueNumber <=_gf .ValueNumber );
};if _da .Type ==ResultTypeString {return MakeBoolResult (_da .ValueString <=_gf .ValueString );};if _da .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _da .Type ==ResultTypeString &&_gf .Type ==ResultTypeNumber {return MakeBoolResult (false );
}else if _da .Type ==ResultTypeNumber &&_gf .Type ==ResultTypeString {return MakeBoolResult (true );}else if _da .Type ==ResultTypeEmpty &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return MakeBoolResult (_ga (_gf ));}else if (_da .Type ==ResultTypeNumber ||_da .Type ==ResultTypeString )&&_gf .Type ==ResultTypeEmpty {return MakeBoolResult (_ga (_da ));
};case BinOpTypeGEQ :if _da .Type ==_gf .Type {if _da .Type ==ResultTypeNumber {return MakeBoolResult (_da .ValueNumber >=_gf .ValueNumber );};if _da .Type ==ResultTypeString {return MakeBoolResult (_da .ValueString >=_gf .ValueString );};if _da .Type ==ResultTypeEmpty {return MakeBoolResult (true );
};}else if _da .Type ==ResultTypeString &&_gf .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _da .Type ==ResultTypeNumber &&_gf .Type ==ResultTypeString {return MakeBoolResult (false );}else if _da .Type ==ResultTypeEmpty &&(_gf .Type ==ResultTypeNumber ||_gf .Type ==ResultTypeString ){return MakeBoolResult (_ga (_gf ));
}else if (_da .Type ==ResultTypeNumber ||_da .Type ==ResultTypeString )&&_gf .Type ==ResultTypeEmpty {return MakeBoolResult (_ga (_da ));};case BinOpTypeConcat :return MakeStringResult (_da .Value ()+_gf .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");
};

// Reference returns a string reference value to a cell.
func (_ebe CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ebe ._aea };};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _e .Reader )Expression {_dgdec :=&plex {_gdbbb :LexReader (r )};_dcge (_dgdec );if _dgdec ._debcc !=""{return nil ;};return _dgdec ._dbega ;};var _agagg =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };
const _cegfg int =0;

// String returns a string representation for Negate.
func (_dffb Negate )String ()string {return "\u002d"+_dffb ._aaeg .String ()};const _aedec =57349;const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;
ReferenceTypeSheet ;);var _aee =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func _afgba (_acfd ,_ccbe ,_bbecc ,_gdaa ,_cbgf float64 )float64 {var _ffcg float64 ;_cfebb :=_cbgf /_bbecc ;if _cfebb >=1{_cfebb =1;if _gdaa ==1{_ffcg =_acfd ;}else {_ffcg =0;
};}else {_ffcg =_acfd *_ac .Pow (1-_cfebb ,_gdaa -1);};_eabcd :=_acfd *_ac .Pow (1-_cfebb ,_gdaa );var _ecafa float64 ;if _eabcd < _ccbe {_ecafa =_ffcg -_ccbe ;}else {_ecafa =_ffcg -_eabcd ;};if _ecafa < 0{_ecafa =0;};return _ecafa ;};const _cbag =57360;


// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_befff :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_befff =int (args [1].ValueNumber );if _befff < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");
};if _befff ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_adcce :=args [0].Value ();
_eacga :=len (_adcce );if _befff > _eacga {return MakeStringResult (_adcce );};return MakeStringResult (_adcce [_eacga -_befff :_eacga ]);};

// ReferenceType is a type of reference
//
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func NewLexer ()*Lexer {return &Lexer {_fefc :make (chan *node )}};const _eeafe =57358;

// Update returns the same object as updating sheet references does not affect Bool.
func (_ad Bool )Update (q *_ge .UpdateQuery )Expression {return _ad };const _acdf =57350;const _egea =57367;

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccgg :=args [0].AsString ();if _ccgg .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_dabff :=_ef .Buffer {};_gbfb :=false ;_dbfb :=false ;_cgbe :=0;for _ ,_gged :=range _ccgg .ValueString {_gdfgc :=_gged ==' ';if _gdfgc {if !_gbfb {continue ;};if !_dbfb {_cgbe ++;_dabff .WriteRune (_gged );};}else {_cgbe =0;_gbfb =true ;_dabff .WriteRune (_gged );
};_dbfb =_gdfgc ;};_dabff .Truncate (_dabff .Len ()-_cgbe );return MakeStringResult (_dabff .String ());};func _cae (_bbd string ,_gde uint32 )string {_fd :=_gg .ColumnToIndex (_bbd );if _fd ==_gde {return "\u0023\u0052\u0045F\u0021";}else if _fd > _gde {return _gg .IndexToColumn (_fd -1);
}else {return _bbd ;};};var _adfb =[...]int {1};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_fagb :=args [0].AsNumber ();_bfbcg :=args [1].AsNumber ();_cbad :=args [2].AsNumber ();_gbdd :=args [3].ListValues ();if _fagb .Type !=ResultTypeNumber ||_bfbcg .Type !=ResultTypeNumber ||_cbad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");
};_afef :=float64 (0);for _gafe ,_beba :=range _gbdd {_afef +=_beba .ValueNumber *_ac .Pow (_fagb .ValueNumber ,_bfbcg .ValueNumber +float64 (_gafe )*_cbad .ValueNumber );};return MakeNumberResult (_afef );};func _dee (_gcfc ,_fgff ,_aeadf ,_fbgd ,_aafb ,_acge float64 ,_faae int )(float64 ,Result ){_abag :=int (_acge );
_fdbe :=_gec (_gcfc ,_fgff ,_abag ,_faae );_dfg :=_bage (_gcfc ,_fgff ,_abag ,_faae )/_fdbe ;_bede ,_fafa :=_dega (_gcfc ,_fgff ,_abag ,_faae );if _fafa .Type ==ResultTypeError {return 0,_fafa ;};_debg :=_fdbb (_gcfc ,_fgff ,_abag ,_faae );_cege :=_aafb /_ac .Pow (1+_fbgd /_acge ,_bede -1+_dfg );
_cege -=100*_aeadf /_acge *_debg /_fdbe ;_bggg :=100*_aeadf /_acge ;_gaded :=1+_fbgd /_acge ;for _fgef :=0.0;_fgef < _bede ;_fgef ++{_cege +=_bggg /_ac .Pow (_gaded ,_fgef +_dfg );};return _cege ,MakeEmptyResult ();};const (ErrorTypeValue ErrorType =iota ;
ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cefaa :=0;_daegg :=false ;for _ ,_ebgf :=range args {switch _ebgf .Type {case ResultTypeList ,ResultTypeArray :_bgggd :=Xor (_ebgf .ListValues ());if _bgggd .Type ==ResultTypeError {return _bgggd ;};if _bgggd .ValueNumber !=0{_cefaa ++;};_daegg =true ;
case ResultTypeNumber :if _ebgf .ValueNumber !=0{_cefaa ++;};_daegg =true ;case ResultTypeString :case ResultTypeError :return _ebgf ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");
};};if !_daegg {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_cefaa %2!=0);};func _ebebfb (_agaa Context ,_ggcbf Evaluator ,_fabba ,_gaefe string )Result {_ddfdb ,_ecfc :=_gg .ParseCellReference (_fabba );
if _ecfc !=nil {return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fabba ,_ecfc .Error ()));
};_ggeeg ,_beec :=_ddfdb .ColumnIdx ,_ddfdb .RowIdx ;_fdeba ,_fcbc :=_gg .ParseCellReference (_gaefe );if _fcbc !=nil {return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gaefe ,_fcbc .Error ()));
};_aeffb ,_edbfg :=_fdeba .ColumnIdx ,_fdeba .RowIdx ;_degfa :=[][]Result {};for _egcda :=_beec ;_egcda <=_edbfg ;_egcda ++{_bgbfe :=[]Result {};for _efge :=_ggeeg ;_efge <=_aeffb ;_efge ++{_bgbc :=_agaa .Cell (_b .Sprintf ("\u0025\u0073\u0025\u0064",_gg .IndexToColumn (_efge ),_egcda ),_ggcbf );
_bgbfe =append (_bgbfe ,_bgbc );};_degfa =append (_degfa ,_bgbfe );};if len (_degfa )==1{if len (_degfa [0])==1{return _degfa [0][0];};return MakeListResult (_degfa [0]);};return MakeArrayResult (_degfa );};func _gddd (_gddc int )bool {return _gddc >=0&&_gddc <=4};
type node struct{_agca tokenType ;_bgegf string ;};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_fdbcc PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_bgea :=_fdbcc ._gedge .Reference (ctx ,ev );_geea :=_fdbcc ._fgcg .Reference (ctx ,ev );_dbfbc :=_fdbcc ._bedge .Reference (ctx ,ev );switch _bgea .Type {case ReferenceTypeSheet :if _gege (_bgea ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bgea .Value ));
};_ggaa :=_fbbd (_bgea ,_geea ,_dbfbc );if _geea .Type ==ReferenceTypeCell &&_dbfbc .Type ==ReferenceTypeCell {if _gbddg ,_fdfgd :=ev .GetFromCache (_ggaa );_fdfgd {return _gbddg ;}else {_gecf :=_ebebfb (ctx .Sheet (_bgea .Value ),ev ,_geea .Value ,_dbfbc .Value );
ev .SetCache (_ggaa ,_gecf );return _gecf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_ggaa );default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bgea .Type ));
};};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");
};type yyParserImpl struct{_dgafe yySymType ;_eaee [_deda ]yySymType ;_ggaea int ;};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_afccc :=args [0].AsNumber ();
_gccaf :=args [1].AsNumber ();if _afccc .Type !=ResultTypeNumber ||_gccaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};if _gccaf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fgfg ,_daec :=_ac .Modf (_afccc .ValueNumber /_gccaf .ValueNumber );if _daec < 0{_fgfg --;
};return MakeNumberResult (_afccc .ValueNumber -_gccaf .ValueNumber *_fgfg );};func (_ggcf *plex )Lex (lval *yySymType )int {_eced =true ;_efead :=<-_ggcf ._gdbbb ;if _efead !=nil {lval ._cdffe =_efead ;return int (lval ._cdffe ._agca );};return 0;};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");
};_cace :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_cace *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_gbc :=_ecfd (args [1]);for _ ,_gead :=range _gbc {for _ ,_cecag :=range _gead {if _cecag .Type !=ResultTypeNumber ||_cecag .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");
};_cace *=1.0+_cecag .ValueNumber ;};};return MakeNumberResult (_cace );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");
};};func _cefc (_efd string )bool {for _ ,_aab :=range _edg {_gcbb :=_aab .FindStringSubmatch (_efd );if len (_gcbb )> 1{return true ;};};return false ;};type yySymType struct{_dafc int ;_cdffe *node ;_gcgdb Expression ;_ceaba []Expression ;_bbcbc [][]Expression ;
};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_gacf :=args [0].Type ;for _ ,_accgc :=range args {if _accgc .Type !=_gacf {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");
};};switch _gacf {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_agaf :=len (args [0].ListValues ());_cdde :=make ([]float64 ,_agaf );for _dgbba :=range _cdde {_cdde [_dgbba ]=1.0;};for _ ,_badac :=range args {if len (_badac .ListValues ())!=_agaf {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");
};for _ddgg ,_ebaeg :=range _badac .ListValues (){_ebaeg =_ebaeg .AsNumber ();if _ebaeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");
};_cdde [_ddgg ]=_cdde [_ddgg ]*_ebaeg .ValueNumber ;};};_cfdd :=0.0;for _ ,_dbbdf :=range _cdde {_cfdd +=_dbbdf ;};return MakeNumberResult (_cfdd );};return MakeNumberResult (1.0);};var _agbe =[...]struct{_agcg int ;_gdbaf int ;_dfbd string ;}{};type parsedSearchObject struct{_aafe string ;
_eabb string ;_cddf int ;};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_fdff ,_fbedc :=_egcg ("\u0046\u0049\u004e\u0044",args );if _fbedc .Type !=ResultTypeEmpty {return _fbedc ;};_ddff :=_fdff ._aafe ;if _ddff ==""{return MakeNumberResult (1.0);};_bdadb :=_fdff ._eabb ;_effce :=_fdff ._cddf ;
_begbc :=1;for _cegda :=range _bdadb {if _begbc < _effce {_begbc ++;continue ;};_dcdg :=_dd .Index (_bdadb [_cegda :],_ddff );if _dcdg ==0{return MakeNumberResult (float64 (_begbc ));};_begbc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");
};var _cac float64 =25569.0;

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_abf :v }};

// Update returns the same object as updating sheet references does not affect Number.
func (_cdebg Number )Update (q *_ge .UpdateQuery )Expression {return _cdebg };

// String returns a string representation of Number.
func (_egab Number )String ()string {return _eed .FormatFloat (_egab ._dacff ,'f',-1,64)};func _fbgf (_bfbg float64 )float64 {return float64 (int (_bfbg +0.5))};func _bec (_gadc ,_acb ,_gfff float64 )float64 {return (_gadc *3600+_acb *60+_gfff )/86400};


// Price implements the Excel PRICE function.
func Price (args []Result )Result {_eaeb :=len (args );if _eaeb !=6&&_eaeb !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};_dbc ,_bgeb ,_cfbb :=_eab (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _cfbb .Type ==ResultTypeError {return _cfbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ccea :=args [2].ValueNumber ;if _ccea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");
};_dged :=args [3].ValueNumber ;if _dged < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");
};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_fdaca :=args [4].ValueNumber ;if _fdaca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_ddgbg :=args [5];if _ddgbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");
};_egbf :=_ddgbg .ValueNumber ;if !_ecg (_egbf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bagb :=0;if _eaeb ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_bagb =int (args [6].ValueNumber );if !_gddd (_bagb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");
};};_cfbg ,_cfbb :=_dee (_dbc ,_bgeb ,_ccea ,_dged ,_fdaca ,_egbf ,_bagb );if _cfbb .Type ==ResultTypeError {return _cfbb ;};return MakeNumberResult (_cfbg );};func _dadcec (_aaaf []Result ,_dggb []string ,_gfeb bool )[]string {for _ ,_efeg :=range _aaaf {switch _efeg .Type {case ResultTypeEmpty :if !_gfeb {_dggb =append (_dggb ,"");
};case ResultTypeString :if _efeg .ValueString !=""||!_gfeb {_dggb =append (_dggb ,_efeg .ValueString );};case ResultTypeNumber :_dggb =append (_dggb ,_efeg .Value ());case ResultTypeList :_dggb =_bgdfd (_dggb ,_dadcec (_efeg .ValueList ,[]string {},_gfeb ));
case ResultTypeArray :for _ ,_fafff :=range _efeg .ValueArray {_dggb =_bgdfd (_dggb ,_dadcec (_fafff ,[]string {},_gfeb ));};};};return _dggb ;};var _aeagc =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _fbbg (_eabdc []Result )[]rangeIndex {_cdfcd :=[]rangeIndex {};_ecgce :=len (_eabdc );for _aecg :=0;_aecg < _ecgce -1;_aecg +=2{_dcgf :=[]rangeIndex {};_eggf :=_ecfd (_eabdc [_aecg ]);_adee :=_eeef (_eabdc [_aecg +1]);if _aecg ==0{for _eebdb ,_acbdb :=range _eggf {for _eabfb ,_gdbe :=range _acbdb {if _ebca (_gdbe ,_adee ){_dcgf =append (_dcgf ,rangeIndex {_eebdb ,_eabfb });
};};};}else {for _ ,_cdbcb :=range _cdfcd {_bdaf :=_eggf [_cdbcb ._fbge ][_cdbcb ._dfae ];if _ebca (_bdaf ,_adee ){_dcgf =append (_dcgf ,_cdbcb );};};};if len (_dcgf )==0{return []rangeIndex {};};_cdfcd =_dcgf [:];};return _cdfcd ;};func (_ededc tokenType )String ()string {return _feab (int (_ededc ))};
const _bcfc =57365;func _bgfg (_fdgaf []Result ,_cgcdb bool )Result {_eaab :="\u004d\u0049\u004e";if _cgcdb {_eaab ="\u004d\u0049\u004e\u0041";};if len (_fdgaf )==0{return MakeErrorResult (_eaab +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_dbfge :=_ac .MaxFloat64 ;for _ ,_dbeaf :=range _fdgaf {switch _dbeaf .Type {case ResultTypeNumber :if (_cgcdb ||!_dbeaf .IsBoolean )&&_dbeaf .ValueNumber < _dbfge {_dbfge =_dbeaf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_gebb :=_bgfg (_dbeaf .ListValues (),_cgcdb );
if _gebb .ValueNumber < _dbfge {_dbfge =_gebb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_efgce :=0.0;if _cgcdb {_efgce =_dbeaf .AsNumber ().ValueNumber ;};if _efgce < _dbfge {_dbfge =_efgce ;};default:_ba .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_eaab +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbeaf .Type );
};};if _dbfge ==_ac .MaxFloat64 {_dbfge =0;};return MakeNumberResult (_dbfge );};const _cfge ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";
const _ffdbb =57366;func _badb (_gaag string )string {_gaag =_dd .Replace (_gaag ,"\u000a","\u005c\u006e",-1);_gaag =_dd .Replace (_gaag ,"\u000d","\u005c\u0072",-1);_gaag =_dd .Replace (_gaag ,"\u0009","\u005c\u0074",-1);return _gaag ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_bba BinaryExpr )Update (q *_ge .UpdateQuery )Expression {_agb :=_bba ;_agb ._ae =_bba ._ae .Update (q );_agb ._fg =_bba ._fg .Update (q );return _agb ;};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_aafcb PrefixRangeExpr )Update (q *_ge .UpdateQuery )Expression {_gddb :=_aafcb ;_ecef :=_aafcb ._gedge .String ();if _ecef ==q .SheetToUpdate {_acab :=*q ;_acab .UpdateCurrentSheet =true ;_gddb ._fgcg =_aafcb ._fgcg .Update (&_acab );_gddb ._bedge =_aafcb ._bedge .Update (&_acab );
};return _gddb ;};

// Eval evaluates and returns a number.
func (_adcb Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_adcb ._dacff )};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cdae :=args [0].AsNumber ();if _cdae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};return MakeNumberResult (_ac .Pi /180.0*_cdae .ValueNumber );};func _ebgg (_eggfd Result ,_edgcg ,_aadde string )(float64 ,Result ){switch _eggfd .Type {case ResultTypeEmpty :return 0,_faba ;case ResultTypeNumber :return _eggfd .ValueNumber ,_faba ;case ResultTypeString :_defga ,_fgcdc :=_eed .ParseFloat (_eggfd .ValueString ,64);
if _fgcdc !=nil {return 0,MakeErrorResult (_aadde +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_edgcg );};return _defga ,_faba ;default:return 0,MakeErrorResult (_edgcg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_aadde +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");
};};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_abbd :=len (args );if _abbd ==0||_abbd > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");
};_fffb :=_ecfd (args [0]);_dadge :=[]float64 {};for _ ,_ccga :=range _fffb {for _ ,_gfcc :=range _ccga {if _gfcc .Type ==ResultTypeNumber &&!_gfcc .IsBoolean {_dadge =append (_dadge ,_gfcc .ValueNumber );};};};_dgbd :=len (_dadge );if len (_dadge )< 2{return MakeErrorResultType (ErrorTypeNum ,"");
};_bgdb :=0.1;if _abbd ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bgdb =args [1].ValueNumber ;if _bgdb <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");
};};_gade :=[]float64 {};for _bgcb :=0;_bgcb < _dgbd ;_bgcb ++{if _bgcb ==0{_gade =append (_gade ,0);}else {_gade =append (_gade ,_gade [_bgcb -1]+365);};};return _caba (_dadge ,_gade ,_bgdb );};

// Eval evaluates and returns the result of an error expression.
func (_egd Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_egd ._abf )};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_cdffc ,_afgc :=_cgdaa (args ,false );if _afgc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");
};return MakeNumberResult (_cdffc /_afgc );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_dabfd Expression ;_abgb Expression ;};const _ebdge =57377;var _fffg =[...]uint8 {0,17,33,49,63,78,93,108};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fgfe :=args [0].Ref ;if _fgfe .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");
};_ccgf ,_ebbf :=_gg .ParseCellReference (_fgfe .Value );if _ebbf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fgfe .Value );};return MakeNumberResult (float64 (_ccgf .RowIdx ));
};const (_ byte =iota ;_ababb ;_ecgae ;_gedg ;_cgee ;_caag ;);

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Reference returns an invalid reference for BinaryExpr.
func (_bb BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _ecaa =57376;

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_eagca :=false ;for _ ,_decef :=range args {switch _decef .Type {case ResultTypeList ,ResultTypeArray :_ebge :=Or (_decef .ListValues ());if _ebge .Type ==ResultTypeError {return _ebge ;};if _ebge .ValueNumber !=0{_eagca =true ;};case ResultTypeNumber :if _decef .ValueNumber !=0{_eagca =true ;
};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _decef ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");
};};return MakeBoolResult (_eagca );};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_gbeae Expression ;_dddgg ,_ecceg int ;};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");
};_bbgdc :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");
};_gdba :=args [1].ValueNumber !=0;_aegb :=_dadcec (args [2:],[]string {},_gdba );return MakeStringResult (_dd .Join (_aegb ,_bbgdc ));};func _ccag (_ddac ,_cgcag Result ,_cedg string )(*xargs ,Result ){if _ddac .Type !=ResultTypeList &&_ddac .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cedg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_gbde :=_ecfd (_ddac );_afbef :=[]float64 {};for _ ,_dgbe :=range _gbde {for _ ,_dage :=range _dgbe {if _dage .Type ==ResultTypeNumber &&!_dage .IsBoolean {_afbef =append (_afbef ,_dage .ValueNumber );}else {return nil ,MakeErrorResult (_cedg +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");
};};};_ffdc :=len (_afbef );if len (_afbef )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _cgcag .Type !=ResultTypeList &&_cgcag .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cedg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");
};_acgd :=_ecfd (_cgcag );_edab :=[]float64 {};_bccd :=0.0;for _ ,_cfggb :=range _acgd {for _ ,_bdbc :=range _cfggb {if _bdbc .Type ==ResultTypeNumber &&!_bdbc .IsBoolean {_ebee :=float64 (int (_bdbc .ValueNumber ));if _ebee < _bccd {return nil ,MakeErrorResultType (ErrorTypeNum ,_cedg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");
};_edab =append (_edab ,_ebee );_bccd =_ebee ;}else {return nil ,MakeErrorResult (_cedg +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_edab )!=_ffdc {return nil ,MakeErrorResultType (ErrorTypeNum ,"");
};return &xargs {_afbef ,_edab },MakeEmptyResult ();};func _geaf (){_gdag =_ec .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_fbac =_ec .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_faag =_ec .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");
_ccbd =_ec .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_ddae =_ec .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_fbcb =_ec .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_abbc ,_daae Expression };var _bgfb =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func _bdf (_aga BinOpType ,_eb ,_def []Result )Result {_fa :=[]Result {};for _eeed :=range _eb {_egg :=_eb [_eeed ].AsNumber ();_dde :=_def [_eeed ].AsNumber ();if _egg .Type !=ResultTypeNumber ||_dde .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");
};switch _aga {case BinOpTypePlus :_fa =append (_fa ,MakeNumberResult (_egg .ValueNumber +_dde .ValueNumber ));case BinOpTypeMinus :_fa =append (_fa ,MakeNumberResult (_egg .ValueNumber -_dde .ValueNumber ));case BinOpTypeMult :_fa =append (_fa ,MakeNumberResult (_egg .ValueNumber *_dde .ValueNumber ));
case BinOpTypeDiv :if _dde .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fa =append (_fa ,MakeNumberResult (_egg .ValueNumber /_dde .ValueNumber ));case BinOpTypeExp :_fa =append (_fa ,MakeNumberResult (_ac .Pow (_egg .ValueNumber ,_dde .ValueNumber )));
case BinOpTypeLT :_fa =append (_fa ,MakeBoolResult (_egg .ValueNumber < _dde .ValueNumber ));case BinOpTypeGT :_fa =append (_fa ,MakeBoolResult (_egg .ValueNumber > _dde .ValueNumber ));case BinOpTypeEQ :_fa =append (_fa ,MakeBoolResult (_egg .ValueNumber ==_dde .ValueNumber ));
case BinOpTypeLEQ :_fa =append (_fa ,MakeBoolResult (_egg .ValueNumber <=_dde .ValueNumber ));case BinOpTypeGEQ :_fa =append (_fa ,MakeBoolResult (_egg .ValueNumber >=_dde .ValueNumber ));case BinOpTypeNE :_fa =append (_fa ,MakeBoolResult (_egg .ValueNumber !=_dde .ValueNumber ));
default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_aga ));};};return MakeListResult (_fa );};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_fega ,_gcde :=_eed .ParseFloat (v ,64);if _gcde !=nil {_ba .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_gcde );
};return Number {_dacff :_fega };};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_aagae :=_ef .Buffer {};for _ ,_dbff :=range args {switch _dbff .Type {case ResultTypeString :_aagae .WriteString (_dbff .ValueString );case ResultTypeNumber :var _dade string ;if _dbff .IsBoolean {if _dbff .ValueNumber ==0{_dade ="\u0046\u0041\u004cS\u0045";
}else {_dade ="\u0054\u0052\u0055\u0045";};}else {_dade =_dbff .AsString ().ValueString ;};_aagae .WriteString (_dade );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");
};};return MakeStringResult (_aagae .String ());};var _ebecf =map[string ]FunctionComplex {};func _fddfg (_acbfe []Result ,_aceec bool ,_gbdc string )Result {var _ggab ,_gebaa string ;if _aceec {_ggab ="\u0074\u0068\u0072e\u0065";_gebaa ="\u006f\u0064\u0064";
}else {_ggab ="\u0074\u0077\u006f";_gebaa ="\u0065\u0076\u0065\u006e";};_cffd :=len (_acbfe );if (_aceec &&_cffd < 3)||(!_aceec &&_cffd < 2){return MakeErrorResult (_gbdc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_ggab +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};if (_cffd /2*2==_cffd )==_aceec {return MakeErrorResult (_gbdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gebaa +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_eedd :=-1;_cbade :=-1;
for _aaedd :=0;_aaedd < _cffd ;_aaedd +=2{_debfg :=_acbfe [_aaedd ];if _debfg .Type !=ResultTypeArray &&_debfg .Type !=ResultTypeList {return MakeErrorResult (_gbdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");
};_egfcg :=_ecfd (_debfg );if _cbade ==-1{_cbade =len (_egfcg );_eedd =len (_egfcg [0]);}else if len (_egfcg )!=_cbade ||len (_egfcg [0])!=_eedd {return MakeErrorResult (_gbdc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");
};if _aceec &&_aaedd ==0{_aaedd --;};};return _faba ;};func _gbgee (_cgfbg []Result )Result {_aadbc :=_cgfbg [0].ValueArray ;if len (_cgfbg )==1{_baga :=[][]Result {};for _ ,_gfbea :=range _aadbc {_baga =append (_baga ,_aggf ([]Result {MakeListResult (_gfbea )}).ValueList );
};return MakeArrayResult (_baga );}else if len (_cgfbg )==2{_cdge :=len (_aadbc );_adea :=len (_aadbc [0]);_cfbed :=_ebfad (_cgfbg [1],_cdge ,_adea );_adce :=len (_cfbed );_bccb :=[][]Result {};var _becdc []Result ;for _abae ,_dace :=range _aadbc {if _abae < _adce {_becdc =_cfbed [_abae ];
}else {_becdc =_gadd (MakeErrorResultType (ErrorTypeNA ,""),_adea );};_bccb =append (_bccb ,_aggf ([]Result {MakeListResult (_dace ),MakeListResult (_becdc )}).ValueList );};return MakeArrayResult (_bccb );}else if len (_cgfbg )==3{_dfdcb :=len (_aadbc );
_dafa :=len (_aadbc [0]);_gcec :=_ebfad (_cgfbg [1],_dfdcb ,_dafa );_egec :=_ebfad (_cgfbg [2],_dfdcb ,_dafa );_egdac :=len (_gcec );_ecdba :=len (_egec );_gdff :=[][]Result {};var _bdfcb ,_dfdg []Result ;for _ccac ,_dgdf :=range _aadbc {if _ccac < _egdac {_bdfcb =_gcec [_ccac ];
}else {_bdfcb =_gadd (MakeErrorResultType (ErrorTypeNA ,""),_dafa );};if _ccac < _ecdba {_dfdg =_egec [_ccac ];}else {_dfdg =_gadd (MakeErrorResultType (ErrorTypeNA ,""),_dafa );};_gdff =append (_gdff ,_aggf ([]Result {MakeListResult (_dgdf ),MakeListResult (_bdfcb ),MakeListResult (_dfdg )}).ValueList );
};return MakeArrayResult (_gdff );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_aead ,_agag ,_bce :=_fcae (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _bce .Type ==ResultTypeError {return _bce ;};if _agag ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if _aead ==0{return MakeNumberResult (0);};_gdae :=_aead < 0;if _gdae {_aead =-_aead ;};_beeg :=float64 (int (_aead ));_gfdb :=args [0].Value ();_fcga :=_dd .Split (_gfdb ,"\u002e");_babf :=0.0;if len (_fcga )> 1{var _feef error ;_cebg :=_fcga [1];_babf ,_feef =_eed .ParseFloat (_cebg ,64);
if _feef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");
};_daef :=float64 (len (_cebg ));_babf /=_ac .Pow (10,_daef );};_cebfc :=_babf *_agag /_ac .Pow (10,float64 (int (_ac .Log10 (_agag )))+1)+_beeg ;if _gdae {_cebfc =-_cebfc ;};return MakeNumberResult (_cebfc );};func _cceb (_acbg ,_ccd int )int {switch _ccd {case 1:if _dfcf (_acbg ){return 366;
}else {return 365;};case 3:return 365;default:return 360;};};func (_becc *ivr )Sheet (name string )Context {return _becc };

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_acecg .Lock ();defer _acecg .Unlock ();if _fadab ,_fdcc :=_caeag [name ];_fdcc {return _fadab ;};return nil ;};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bbada :=_dgg .Now ();_ ,_ffdf :=_bbada .Zone ();_bfb :=_fda (_bdac ,_bbada .Unix ()+int64 (_ffdf ))+1;return MakeNumberResult (_bfb );};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_aabgc ,_gcbea :=_daca (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _gcbea .Type ==ResultTypeError {return _gcbea ;};_ggdg :=_aabgc ._bbcg ;_edaf :=_aabgc ._afdd ;_afege :=_aabgc ._gea ;_afdc :=_aabgc ._gcg ;
_dddb :=_aabgc ._efaa ;_ecc :=_aabgc ._bbec ;_ddfd :=_eba (_ggdg ,_edaf ,_afege ,_afdc ,_dddb ,_ecc );if _ddfd .Type ==ResultTypeError {return _ddfd ;};_abab :=_ddfd .ValueNumber /(1.0+_afdc /_dddb );return MakeNumberResult (_abab );};

// Eval evaluates and returns the result of a sheet expression.
func (_fcadc SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");
};const _cgag =57368;func _aadd (_baea string )(int ,int ,int ,bool ,Result ){_cbd :="";_geg :=[]string {};for _abc ,_acgf :=range _dgb {_geg =_acgf .FindStringSubmatch (_baea );if len (_geg )> 1{_cbd =_abc ;break ;};};if _cbd ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );
};_efe :=false ;var _fbc ,_bcfa ,_ccbc int ;var _dbdg error ;switch _cbd {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_bcfa ,_dbdg =_eed .Atoi (_geg [1]);if _dbdg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_ccbc ,_dbdg =_eed .Atoi (_geg [3]);
if _dbdg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_fbc ,_dbdg =_eed .Atoi (_geg [5]);if _dbdg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};if _fbc < 0||_fbc > 9999||(_fbc > 99&&_fbc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );
};_fbc =_bdfc (_fbc );_efe =_geg [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_bcfa =_bf [_geg [1]];_ccbc ,_dbdg =_eed .Atoi (_geg [14]);if _dbdg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_fbc ,_dbdg =_eed .Atoi (_geg [16]);
if _dbdg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};if _fbc < 0||_fbc > 9999||(_fbc > 99&&_fbc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_fbc =_bdfc (_fbc );_efe =_geg [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_ebf ,_cad :=_eed .Atoi (_geg [1]);
if _cad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_fde ,_cad :=_eed .Atoi (_geg [3]);if _cad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_cbg ,_cad :=_eed .Atoi (_geg [5]);if _cad !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );
};if _ebf >=1900&&_ebf < 10000{_fbc =_ebf ;_bcfa =_fde ;_ccbc =_cbg ;}else if _ebf > 0&&_ebf < 13{_bcfa =_ebf ;_ccbc =_fde ;_fbc =_cbg ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_efe =_geg [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_fbc ,_dbdg =_eed .Atoi (_geg [16]);
if _dbdg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_bcfa =_bf [_geg [3]];_ccbc ,_dbdg =_eed .Atoi (_geg [1]);if _dbdg !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );};_efe =_geg [19]=="";};if !_gcb (_fbc ,_bcfa ,_ccbc ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cbcf );
};return _fbc ,_bcfa ,_ccbc ,_efe ,_faba ;};func (_egadb ResultType )String ()string {if _egadb >=ResultType (len (_fffg )-1){return _b .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_egadb );};return _cfge [_fffg [_egadb ]:_fffg [_egadb +1]];
};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_aagd :=_fddfg (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _aagd .Type !=ResultTypeEmpty {return _aagd ;};_eded :=_fbbg (args [1:]);_dbbe :=0.0;_fbffa :=_ecfd (args [0]);for _ ,_efeb :=range _eded {_dbbe +=_fbffa [_efeb ._fbge ][_efeb ._dfae ].ValueNumber ;
};return MakeNumberResult (float64 (_dbbe ));};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};for _adda :=0;_adda < len (args )-1;_adda +=2{if args [_adda ].ValueNumber ==1{return args [_adda +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};const _gaaa =57361;func _dcc (_eag ,_eaf float64 ,_dae int )(float64 ,Result ){_ceg ,_bfdf :=_ceef (_eag ),_ceef (_eaf );
_efef :=_ceg .Unix ();_eagg :=_bfdf .Unix ();if _efef ==_eagg {return 0,_faba ;};_acea ,_cfg ,_bcdc :=_ceg .Date ();_bdb ,_eacd ,_ebea :=_bfdf .Date ();_cfea ,_ddaff :=int (_cfg ),int (_eacd );var _fceb ,_acbf float64 ;switch _dae {case 0:if _bcdc ==31{_bcdc --;
};if _bcdc ==30&&_ebea ==31{_ebea --;}else if _dfce :=_dfcf (_acea );_cfea ==2&&((_dfce &&_bcdc ==29)||(!_dfce &&_bcdc ==28)){_bcdc =30;if _ebed :=_dfcf (_bdb );_ddaff ==2&&((_ebed &&_ebea ==29)||(!_ebed &&_ebea ==28)){_ebea =30;};};_fceb =float64 ((_bdb -_acea )*360+(_ddaff -_cfea )*30+(_ebea -_bcdc ));
_acbf =360;case 1:_fceb =_eaf -_eag ;_ecbg :=_acea !=_bdb ;if _ecbg &&(_bdb !=_acea +1||_cfea < _ddaff ||(_cfea ==_ddaff &&_bcdc < _ebea )){_fgec :=0;for _acd :=_acea ;_acd <=_bdb ;_acd ++{_fgec +=_cceb (_acd ,1);};_acbf =float64 (_fgec )/float64 (_bdb -_acea +1);
}else {if !_ecbg &&_dfcf (_acea ){_acbf =366;}else {if _ecbg &&((_dfcf (_acea )&&(_cfea < 2||(_cfea ==2&&_bcdc <=29)))||(_dfcf (_bdb )&&(_ddaff > 2||(_ddaff ==2&&_ebea ==29)))){_acbf =366;}else {_acbf =365;};};};case 2:_fceb =_eaf -_eag ;_acbf =360;case 3:_fceb =_eaf -_eag ;
_acbf =365;case 4:if _bcdc ==31{_bcdc --;};if _ebea ==31{_ebea --;};_fceb =float64 ((_bdb -_acea )*360+(_ddaff -_cfea )*30+(_ebea -_bcdc ));_acbf =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");
};return _fceb /_acbf ,_faba ;};const _eaffd =57352;

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eaec :=args [0];switch _eaec .Type {case ResultTypeError :return _eaec ;
case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_eaec .ValueNumber !=0);};if _eaec .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _aggf (args );case ResultTypeArray :return _gbgee (args );
default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};
};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");
};_fbdg :=args [0].AsNumber ();if _fbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_adeag :=float64 (1);if _fbdg .ValueNumber < 0{_adeag =-1;};if len (args )> 1{_fgcfe :=args [1].AsNumber ();if _fgcfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");
};_adeag =_ac .Abs (_fgcfe .ValueNumber );};if len (args )==1{return MakeNumberResult (_ac .Floor (_fbdg .ValueNumber ));};_cdca :=_fbdg .ValueNumber ;_cdca ,_ccba :=_ac .Modf (_cdca /_adeag );if _ccba !=0{if _fbdg .ValueNumber < 0{_cdca --;};};return MakeNumberResult (_cdca *_adeag );
};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbfg :=args [0].Ref ;if _cbfg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .Cell (_cbfg .Value ,ev ).IsBoolean );};const _adgc ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );
};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_gecad :=args [0];
if _gecad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_ggfg :=int (_gecad .ValueNumber );if _ggfg < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");
};if len (args )<=_ggfg {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");
};return args [_ggfg ];};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_gaefb ,_gfgg ,_gdfc :=_fcae (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _gdfc .Type ==ResultTypeError {return _gdfc ;};if _gfgg < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");
};if _gaefb ==0{return MakeNumberResult (0);};_cadg :=_gaefb < 0;if _cadg {_gaefb =-_gaefb ;};_dadgc :=args [0].Value ();_gbgcc :=_dd .Split (_dadgc ,"\u002e");_ege :=float64 (int (_gaefb ));_bcda :=_gbgcc [1];_bdfb :=len (_bcda );_cgda :=int (_ac .Log10 (_gfgg ))+1;
_cfcgf :=float64 (_cgda -_bdfb );_deae ,_adbc :=_eed .ParseFloat (_bcda ,64);if _adbc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");
};_deae *=_ac .Pow (10,_cfcgf );_dbga :=_ege +_deae /_gfgg ;if _cadg {_dbga =-_dbga ;};return MakeNumberResult (_dbga );};func _bg (_df BinOpType ,_cf [][]Result ,_cg Result )Result {_gef :=[][]Result {};for _fbb :=range _cf {_egf :=_ddaf (_df ,_cf [_fbb ],_cg );
if _egf .Type ==ResultTypeError {return _egf ;};_gef =append (_gef ,_egf .ValueList );};return MakeArrayResult (_gef );};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};return MakeBoolResult (ev .LastEvalIsRef ());};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_fgddc ,_fcce string };

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_bgdac string };func (_gcbd Result )AsString ()Result {switch _gcbd .Type {case ResultTypeNumber :return MakeStringResult (_gcbd .Value ());default:return _gcbd ;};};

// IsDBCS returns false for the invalid reference context.
func (_gdfbc *ivr )IsDBCS ()bool {return false };

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_acecg .Lock ();defer _acecg .Unlock ();if _egdb ,_bafa :=_ebecf [name ];_bafa {return _egdb ;};return nil ;};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");
};_abcec :=args [0].AsNumber ();if _abcec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};if _abcec .ValueNumber < 0{return MakeNumberResult (-1);}else if _abcec .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};const _cebb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";


// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_ebb CellRef )Update (q *_ge .UpdateQuery )Expression {if q .UpdateCurrentSheet {_ebb ._aea =_cc (_ebb ._aea ,q );};return _ebb ;};

// Reference returns an invalid reference for String.
func (_cagab String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ffag (_agcf ,_cbga ,_baggf ,_afcb ,_bbgda float64 ,_fgeb int )float64 {_fgdeb :=_effa (_agcf ,_baggf ,_afcb ,_bbgda ,_fgeb );var _gcdd float64 ;if _cbga ==1{if _fgeb ==1{_gcdd =0;
}else {_gcdd =-_afcb ;};}else {if _fgeb ==1{_gcdd =_ecdce (_agcf ,_cbga -2,_fgdeb ,_afcb ,1)-_fgdeb ;}else {_gcdd =_ecdce (_agcf ,_cbga -1,_fgdeb ,_afcb ,0);};};return _gcdd *_agcf ;};type durationArgs struct{_bbcg float64 ;_afdd float64 ;_gea float64 ;
_gcg float64 ;_efaa float64 ;_bbec int ;};const _ce ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";


// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");
};_debgd ,_fddaa ,_bade :=_ceedbf (args );if _bade .Type ==ResultTypeError {return _bade ;};return MakeNumberResult (_gdbde (_debgd )/_fddaa );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");
};_cggb :=args [0];if _cggb .Type !=ResultTypeArray &&_cggb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");
};_geac :=_eeef (args [1]);_bcag :=0;for _ ,_fgbe :=range _ecfd (_cggb ){for _ ,_fgab :=range _fgbe {if _ebca (_fgab ,_geac ){_bcag ++;};};};return MakeNumberResult (float64 (_bcag ));};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_aaga :=args [0].AsNumber ();_afbb :=args [1].AsNumber ();if _aaga .Type !=ResultTypeNumber ||_afbb .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");
};_fcccb :=_ac .Trunc (_aaga .ValueNumber );_fgeea :=_ac .Trunc (_afbb .ValueNumber );if _fgeea > _fcccb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");
};if _fgeea ==_fcccb ||_fgeea ==0{return MakeNumberResult (1);};_agcfb :=float64 (1);for _acgc :=float64 (1);_acgc <=_fgeea ;_acgc ++{_agcfb *=(_fcccb +1-_acgc )/_acgc ;};return MakeNumberResult (_agcfb );};const _ccc =_gdg +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";


// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");
};_ccf :=args [0].Ref ;if _ccf .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");
};return MakeBoolResult (ctx .HasFormula (_ccf .Value ));};var _ccacc =[...]uint8 {0,20,37,60,78,96};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_ac .Pi );};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_ebgb :=_dd .Split (v ,"\u003a");if len (_ebgb )!=2{return nil ;};_eaafc ,_ :=_eed .Atoi (_ebgb [0]);_ffbfa ,_ :=_eed .Atoi (_ebgb [1]);if _eaafc > _ffbfa {_eaafc ,_ffbfa =_ffbfa ,_eaafc ;
};return PrefixHorizontalRange {_gbeae :pfx ,_dddgg :_eaafc ,_ecceg :_ffbfa };};func _fabc (_aege Result ,_gcba ,_ebeda string )(string ,Result ){switch _aege .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _aege .Value (),_faba ;
default:return "",MakeErrorResult (_gcba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ebeda +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Eval evaluates and returns the result of a formula.
func (_eea *defEval )Eval (ctx Context ,formula string )Result {_bef :=ParseString (formula );_ged :=make (chan Result );go func (){if _bef ==nil {_ged <-MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));
}else {_eea .checkLastEvalIsRef (ctx ,_bef );_ged <-_bef .Eval (ctx ,_eea );};}();select{case _dgd :=<-_ged :return _dgd ;case <-_dgg .After (_cef ):_ba .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");
return MakeNumberResult (0);};};var _dcfec =[...]string {};func _ffed (_ffffg []string ,_dggc int )string {return _eed .Itoa (len (_ffffg [len (_ffffg )-1-_dggc ]))};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_ggdb :=len (args );if _ggdb !=4&&_ggdb !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_ebcb ,_dfbe ,_bfgg :=_eab (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _bfgg .Type ==ResultTypeError {return _bfgg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");
};_fdfgb :=args [2].ValueNumber ;if _fdfgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");
};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");
};_gace :=args [3].ValueNumber ;if _gace <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");
};_feea :=0;if _ggdb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_feea =int (args [4].ValueNumber );if !_gddd (_feea ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");
};};_cfdfa ,_bfgg :=_dcc (_ebcb ,_dfbe ,_feea );if _bfgg .Type ==ResultTypeError {return _bfgg ;};return MakeNumberResult (_gace *(1-_fdfgb *_cfdfa ));};func _fcae (_edga []Result ,_bdg string )(float64 ,float64 ,Result ){if len (_edga )!=2{return 0,0,MakeErrorResult (_bdg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _edga [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bdg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");
};_caab :=_edga [0].ValueNumber ;if _edga [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bdg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");
};_bbgd :=float64 (int (_edga [1].ValueNumber ));if _bbgd < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_bdg +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");
};return _caab ,_bbgd ,_faba ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_acfc :=args [0].AsNumber ();_fcbec :=args [1].AsNumber ();if _acfc .Type !=ResultTypeNumber ||_fcbec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if _fcbec .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_ac .Trunc (_acfc .ValueNumber /_fcbec .ValueNumber ));
};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ae :lhs ,_fg :rhs ,_eg :op };};func _bage (_cbed ,_fedf float64 ,_egc ,_cdbc int )float64 {_aeea :=_ceef (_cbed );_fdcac :=_ceef (_fedf );_aegf :=_edc (_aeea ,_fdcac ,_egc );
return _abg (_aeea ,_aegf ,_cdbc );};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_dcdcg :=len (args );if _dcdcg !=3&&_dcdcg !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};_bebca ,_dfebc :=_fabc (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _dfebc .Type ==ResultTypeError {return _dfebc ;};_fabdc ,_dfebc :=_fabc (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");
if _dfebc .Type ==ResultTypeError {return _dfebc ;};_dfdf ,_dfebc :=_fabc (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _dfebc .Type ==ResultTypeError {return _dfebc ;};_cgbd :=0;
if _dcdcg ==3{return MakeStringResult (_dd .Replace (_bebca ,_fabdc ,_dfdf ,-1));}else {_eeefd ,_edcb :=_ebgg (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");
if _edcb .Type ==ResultTypeError {return _edcb ;};_cgbd =int (_eeefd );if _cgbd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");
};_dbcg :=_bebca ;_cdcbe :=_cgbd ;_cdcgd :=-1;_bgae :=len (_fabdc );_abbf :=0;for {_cdcbe --;_gadef :=_dd .Index (_dbcg ,_fabdc );if _gadef ==-1{_cdcgd =-1;break ;}else {_cdcgd =_gadef +_abbf ;if _cdcbe ==0{break ;};_aecc :=_bgae +_gadef ;_abbf +=_aecc ;
_dbcg =_dbcg [_aecc :];};};if _cdcgd ==-1{return MakeStringResult (_bebca );}else {_eddge :=_bebca [:_cdcgd ];_feacc :=_bebca [_cdcgd +_bgae :];return MakeStringResult (_eddge +_dfdf +_feacc );};};};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_gcab ,_bfde :=_gfdf (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _bfde .Type ==ResultTypeError {return _bfde ;};_agdc :=_gcab ._acga ;_dgfbb :=_gcab ._fbea ;_bebc :=_gcab ._gbff ;_bbdb :=_gcab ._dfb ;
_dada :=_gcab ._cecg ;_fdgg :=_gcab ._ffcaf ;_eebdd :=_effa (_agdc ,_dgfbb ,_bebc ,0,_fdgg );_abga :=0.0;if _bbdb ==1{if _fdgg ==0{_abga =_eebdd +_bebc *_agdc ;}else {_abga =_eebdd ;};_bbdb ++;};for _bbca :=_bbdb ;_bbca <=_dada ;_bbca ++{if _fdgg ==1{_abga +=_eebdd -(_ecdce (_agdc ,_bbca -2,_eebdd ,_bebc ,1)-_eebdd )*_agdc ;
}else {_abga +=_eebdd -_ecdce (_agdc ,_bbca -1,_eebdd ,_bebc ,0)*_agdc ;};};return MakeNumberResult (_abga );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_acecg .Lock ();defer _acecg .Unlock ();if _ ,_aaaee :=_ebecf [name ];_aaaee {_ba .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );
};_ebecf [name ]=fn ;};type rmode byte ;var _cgdee =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _ebca (_adbgb Result ,_eaba *criteriaParsed )bool {if _adbgb .IsBoolean {return false ;};_dadce :=_adbgb .Type ;if _eaba ._cgae {return _dadce ==ResultTypeNumber &&_adbgb .ValueNumber ==_eaba ._cdbe ;
}else if _dadce ==ResultTypeNumber {return _bdfe (_adbgb .ValueNumber ,_eaba ._adecb );};return _aegff (_adbgb ,_eaba );};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_dgbg ,_ega :=_bbgf (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _ega .Type ==ResultTypeError {return _ega ;};_fgdb :=_dgbg ._ceeb ;_aedd :=_dgbg ._cbdd ;_eca ,_ega :=_dega (_dgbg ._gagg ,_dgbg ._dgdd ,_fgdb ,_aedd );
if _ega .Type ==ResultTypeError {return _ega ;};return MakeNumberResult (_eca );};const _ddaec =57359;func _bgbf (_adcg ,_bgcd []float64 ,_bgcf float64 )float64 {_bbfb :=_bgcf +1;_gcbc :=0.0;_eeaf :=len (_adcg );_eaga :=_bgcd [0];for _begf :=1;_begf < _eeaf ;
_begf ++{_agcb :=(_bgcd [_begf ]-_eaga )/365;_gcbc -=_agcb *_adcg [_begf ]/_ac .Pow (_bbfb ,_agcb +1);};return _gcbc ;};

// Reference returns a string reference value to a vertical range.
func (_fecdf VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_fecdf .verticalRangeReference ()};};var _defg =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};
func (_fgedg *noCache )SetCache (key string ,value Result ){};func _ffaf (_fdeb []Result ,_geeff bool )Result {_baf :="\u004d\u0041\u0058";if _geeff {_baf ="\u004d\u0041\u0058\u0041";};if len (_fdeb )==0{return MakeErrorResult (_baf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");
};_cbbe :=-_ac .MaxFloat64 ;for _ ,_fcca :=range _fdeb {switch _fcca .Type {case ResultTypeNumber :if (_geeff ||!_fcca .IsBoolean )&&_fcca .ValueNumber > _cbbe {_cbbe =_fcca .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_ddgba :=_ffaf (_fcca .ListValues (),_geeff );
if _ddgba .ValueNumber > _cbbe {_cbbe =_ddgba .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_abbdd :=0.0;if _geeff {_abbdd =_fcca .AsNumber ().ValueNumber ;};if _abbdd > _cbbe {_cbbe =_abbdd ;};default:_ba .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_baf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcca .Type );
};};if _cbbe ==-_ac .MaxFloat64 {_cbbe =0;};return MakeNumberResult (_cbbe );};func _edc (_fee ,_ecd _dgg .Time ,_ebdc int )_dgg .Time {_beef :=_dgg .Date (_fee .Year (),_ecd .Month (),_ecd .Day (),0,0,0,0,_dgg .UTC );if _beef .After (_fee ){_beef =_beef .AddDate (-1,0,0);
};for !_beef .After (_fee ){_beef =_beef .AddDate (0,12/_ebdc ,0);};return _beef ;};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _edabg (_dggfb []Result ,_febe countMode )float64 {_eabf :=0.0;for _ ,_fadf :=range _dggfb {switch _fadf .Type {case ResultTypeNumber :if _febe ==_afeda ||(_febe ==_dege &&!_fadf .IsBoolean ){_eabf ++;
};case ResultTypeList ,ResultTypeArray :_eabf +=_edabg (_fadf .ListValues (),_febe );case ResultTypeString :if _febe ==_afeda {_eabf ++;};case ResultTypeEmpty :if _febe ==_fgga {_eabf ++;};};};return _eabf ;};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_ccde ,_ffde :=_bbgf (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _ffde .Type ==ResultTypeError {return _ffde ;};_ebdf :=_ceef (_ccde ._gagg );_agfb :=_ceef (_ccde ._dgdd );_fbga :=_ccde ._ceeb ;_edad :=_ccde ._cbdd ;
_dge :=_befd (_ebdf ,_agfb ,_fbga ,_edad );_fdee ,_baa ,_dddg :=_dge .Date ();return MakeNumberResult (_bbf (_fdee ,int (_baa ),_dddg ));};

// Eval evaluates and returns a string.
func (_dfbdd String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_dfbdd ._gaagb )};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");
};_gaaee :=ctx .GetEpoch ();_acc ,_cece :=_cedf (args [0].Value (),_gaaee );if _cece !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");
};return MakeNumberResult (float64 (_acc .Year ()));};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_edbg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");
};_edbg =int (args [1].ValueNumber );if _edbg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");
};if _edbg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");
};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_dgfce :=args [0].Value ();
if _edbg > len (_dgfce ){return MakeStringResult (_dgfce );};return MakeStringResult (_dgfce [0:_edbg ]);};

// Negate is a negate expression like -A1.
type Negate struct{_aaeg Expression };func _af (_bc BinOpType ,_gd ,_aeb [][]Result )Result {_de :=[][]Result {};for _ff :=range _gd {_dda :=_bdf (_bc ,_gd [_ff ],_aeb [_ff ]);if _dda .Type ==ResultTypeError {return _dda ;};_de =append (_de ,_dda .ValueList );
};return MakeArrayResult (_de );};const (_dgbff cmpResult =0;_ebae cmpResult =-1;_beed cmpResult =1;_gebd cmpResult =2;);