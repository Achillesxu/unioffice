//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_e "bytes";_d "fmt";_fg "github.com/unidoc/unioffice";_aa "github.com/unidoc/unioffice/internal/mergesort";_ga "github.com/unidoc/unioffice/internal/wildcard";_af "github.com/unidoc/unioffice/spreadsheet/format";_gd "github.com/unidoc/unioffice/spreadsheet/reference";_g "github.com/unidoc/unioffice/spreadsheet/update";_fd "io";_bf "math";_db "math/big";_b "math/rand";_dc "regexp";_c "sort";_a "strconv";_eb "strings";_fe "sync";_dg "time";_fdd "unicode";);

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_edbc :=len (args );if _edbc < 3||_edbc > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edca :=args [1].ValueNumber ;if _edca ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_acef :=args [2].ValueNumber ;_ggcc :=0.0;if _edbc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggcc =args [3].ValueNumber ;};_bbdad :=0.0;if _edbc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbdad =args [4].ValueNumber ;if _bbdad !=0{_bbdad =1;};};var _eebc float64 ;if _edc ==0{_eebc =(_acef +_ggcc )/_edca ;}else {_caaag :=_bf .Pow (1+_edc ,_edca );if _bbdad ==1{_eebc =(_ggcc *_edc /(_caaag -1)+_acef *_edc /(1-1/_caaag ))/(1+_edc );}else {_eebc =_ggcc *_edc /(_caaag -1)+_acef *_edc /(1-1/_caaag );};};return MakeNumberResult (-_eebc );};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gdec :=args [0].AsNumber ();_cgdc :=args [1].AsNumber ();if _gdec .Type !=ResultTypeNumber ||_cgdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _cgdc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fdaga ,_begde :=_bf .Modf (_gdec .ValueNumber /_cgdc .ValueNumber );if _begde < 0{_fdaga --;};return MakeNumberResult (_gdec .ValueNumber -_cgdc .ValueNumber *_fdaga );};func _efeg (_fgdgf []string ,_gcdg int )string {return _a .Itoa (len (_fgdgf [len (_fgdgf )-1-_gcdg ]))};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_ddgd :=&defEval {};_ddgd .evCache =_aeef ();return _ddgd };type Reference struct{Type ReferenceType ;Value string ;};type tokenType int ;func _efb (_egfc string )bool {for _ ,_ggad :=range _age {_gaab :=_ggad .FindStringSubmatch (_egfc );if len (_gaab )> 1{return true ;};};return false ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dbcaf :=args [0];switch _dbcaf .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_cced :=0.0;_bacg :=0.0;for _ ,_cdfab :=range _dbcaf .ValueString {_ffge :=0.0;switch _cdfab {case 'I':_ffge =1;case 'V':_ffge =5;case 'X':_ffge =10;case 'L':_ffge =50;case 'C':_ffge =100;case 'D':_ffge =500;case 'M':_ffge =1000;};_cced +=_ffge ;switch {case _bacg ==_ffge &&(_bacg ==5||_bacg ==50||_bacg ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_bacg ==_ffge :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _bacg < _ffge {_cced -=2*_bacg ;};_bacg =_ffge ;};return MakeNumberResult (_cced );case ResultTypeError :return _dbcaf ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbcaf .Type ));};};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcfg :=args [0].AsString ();if _gcfg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_gcfg .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_gcfg .ValueString [0]));};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbdfg :=args [0].AsNumber ();if _cbdfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cefb :=float64 (0);if len (args )> 1{_fffgb :=args [1].AsNumber ();if _fffgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cefb =_fffgb .ValueNumber ;};_gddb :=_cbdfg .ValueNumber ;_dfab :=1.0;if _cefb >=0{_dfab =_bf .Pow (1/10.0,_cefb );}else {return MakeNumberResult (0);};_gddb ,_dccc :=_bf .Modf (_gddb /_dfab );_gbdgc :=0.99999;if _dccc > _gbdgc {_gddb ++;}else if _dccc < -_gbdgc {_gddb --;};_ =_dccc ;return MakeNumberResult (_gddb *_dfab );};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_faeae :=_eb .Split (v ,"\u003a");if len (_faeae )!=2{return nil ;};_cadfab ,_ :=_a .Atoi (_faeae [0]);_accge ,_ :=_a .Atoi (_faeae [1]);return HorizontalRange {_cadfab ,_accge };};func _gcacg (_fggbg ,_dgada ,_febdc Reference )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fggbg .Value ,_dgada .Value ,_febdc .Value );};func (_cggca *ivr )Sheet (name string )Context {return _cggca };

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_dfagb PrefixRangeExpr )Update (q *_g .UpdateQuery )Expression {_ffbff :=_dfagb ;_fgfde :=_dfagb ._bbcdc .String ();if _fgfde ==q .SheetToUpdate {_efbfd :=*q ;_efbfd .UpdateCurrentSheet =true ;_ffbff ._bede =_dfagb ._bede .Update (&_efbfd );_ffbff ._cagfa =_dfagb ._cagfa .Update (&_efbfd );};return _ffbff ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func _aeef ()evCache {_gdg :=evCache {};_gdg ._de =make (map[string ]Result );_gdg ._bcc =&_fe .Mutex {};return _gdg ;};const _aeb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _eeee *_b .Rand ;

// Eval evaluates and returns a string.
func (_aacaa String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_aacaa ._bcccb )};const _agc =86400000000000;func _eedf (_egdcc float64 )bool {return _egdcc ==1||_egdcc ==2||_egdcc ==4};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_gcfd :=_gfef (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _gcfd .Type !=ResultTypeEmpty {return _gcfd ;};_gcgeb :=_fcagf (args );return MakeNumberResult (float64 (len (_gcgeb )));};const _dcdc ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";func _gebf (_abgc ,_cga ,_cbaf ,_acfac ,_ddaa ,_fgffg float64 )float64 {var _ggcdc ,_fcdb float64 ;_bfbb :=0.0;_eeeb :=_bf .Ceil (_ddaa );_debb :=_abgc -_cga ;_dfagc :=false ;_bffac :=0.0;for _febgd :=1.0;_febgd <=_eeeb ;_febgd ++{if !_dfagc {_ggcdc =_dfbb (_abgc ,_cga ,_cbaf ,_febgd ,_fgffg );_bffac =_debb /(_cbaf -_febgd +1);if _bffac > _ggcdc {_fcdb =_bffac ;_dfagc =true ;}else {_fcdb =_ggcdc ;_debb -=_ggcdc ;};}else {_fcdb =_bffac ;};if _febgd ==_eeeb {_fcdb *=_ddaa +1-_eeeb ;};_bfbb +=_fcdb ;};return _bfbb ;};

// Update returns the same object as updating sheet references does not affect Error.
func (_ebea Error )Update (q *_g .UpdateQuery )Expression {return _ebea };

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_fdgg :=len (args );if _fdgg !=4&&_fdgg !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbgag ,_cgcg ,_gce :=_fccg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _gce .Type ==ResultTypeError {return _gce ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aded :=args [2].ValueNumber ;if _aded <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_caaad :=args [3].ValueNumber ;if _caaad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_fbcd :=0;if _fdgg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbcd =int (args [4].ValueNumber );if !_egfe (_fbcd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_efdf ,_gce :=_cfgb (_gbgag ,_cgcg ,_fbcd );if _gce .Type ==ResultTypeError {return _gce ;};return MakeNumberResult (_caaad *(1-_aded *_efdf ));};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbeed :=args [0].AsNumber ();if _fbeed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbbac :=float64 (1);_adga :=args [1].AsNumber ();if _adga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_fbbac =_adga .ValueNumber ;if _fbbac < 0&&_fbeed .ValueNumber > 0||_fbbac > 0&&_fbeed .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_cacf :=_fbeed .ValueNumber ;_cacf ,_afcc :=_bf .Modf (_cacf /_fbbac );if _bf .Trunc (_afcc +0.5)> 0{_cacf ++;};return MakeNumberResult (_cacf *_fbbac );};func _gbb (_abce ,_bdd int64 )float64 {return float64 (int (0.5+float64 ((_bdd -_abce )/86400)))};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dddff :=int (args [0].ValueNumber );return MakeBoolResult (_dddff ==_dddff /2*2);};func (_bfbac ResultType )String ()string {if _bfbac >=ResultType (len (_dbade )-1){return _d .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bfbac );};return _dcdbf [_dbade [_bfbac ]:_dbade [_bfbac +1]];};func _bbb (_bbd int )bool {return _bbd ==0||_bbd ==4};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_aebd :=args [0];if _aebd .Type !=ResultTypeArray &&_aebd .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gfde :=_aebd .ValueArray ;if len (_gfde )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_gfde [0])));};func _cgeb (_gfgac []Result ,_eggb bool )Result {var _dfbe string ;if _eggb {_dfbe ="\u004c\u0041\u0052G\u0045";}else {_dfbe ="\u0053\u004d\u0041L\u004c";};if len (_gfgac )!=2{return MakeErrorResult (_dfbe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecga :=_gfgac [0];var _dbdg [][]Result ;switch _ecga .Type {case ResultTypeArray :_dbdg =_ecga .ValueArray ;case ResultTypeList :_dbdg =[][]Result {_ecga .ValueList };default:return MakeErrorResult (_dfbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_dbdg )==0{return MakeErrorResult (_dfbe +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _gfgac [1].Type !=ResultTypeNumber {return MakeErrorResult (_dfbe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_faad :=_gfgac [1].ValueNumber ;if _faad < 1{return MakeErrorResultType (ErrorTypeNum ,_dfbe +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_fddg :=int (_faad );if float64 (_fddg )!=_faad {return MakeErrorResultType (ErrorTypeNum ,_dfbe +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_fdec :=[]float64 {};for _ ,_bfec :=range _dbdg {for _ ,_aafcg :=range _bfec {if _aafcg .Type ==ResultTypeNumber {_fdec =append (_fdec ,_aafcg .ValueNumber );};};};if _fddg > len (_fdec ){return MakeErrorResultType (ErrorTypeNum ,_dfbe +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eccc :=_aa .MergeSort (_fdec );if _eggb {return MakeNumberResult (_eccc [len (_eccc )-_fddg ]);}else {return MakeNumberResult (_eccc [_fddg -1]);};};

// Reference returns an invalid reference for BinaryExpr.
func (_ce BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation of FunctionCall expression.
func (_cadfa FunctionCall )String ()string {_cbae :=_e .Buffer {};_cbae .WriteString (_cadfa ._ecfc );_cbae .WriteString ("\u0028");_cgfbg :=len (_cadfa ._fgaf )-1;for _gaac ,_bfcbg :=range _cadfa ._fgaf {_cbae .WriteString (_bfcbg .String ());if _gaac !=_cgfbg {_cbae .WriteString ("\u002c");};};_cbae .WriteString ("\u0029");return _cbae .String ();};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_begb :=args [0].AsNumber ();if _begb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcfad :=0;if len (args )> 1{_aged :=args [1];if _aged .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_gcfad =int (_aged .ValueNumber );if _gcfad < 0{_gcfad =0;}else if _gcfad > 4{_gcfad =4;};};_bdgg :=_efdc ;switch _gcfad {case 1:_bdgg =_fede ;case 2:_bdgg =_ecfbf ;case 3:_bdgg =_cedgd ;case 4:_bdgg =_fbcf ;};_dgcac :=_bf .Trunc (_begb .ValueNumber );_edacd :=_e .Buffer {};for _ ,_efbce :=range _bdgg {for _dgcac >=_efbce ._eabc {_edacd .WriteString (_efbce ._fage );_dgcac -=_efbce ._eabc ;};};return MakeStringResult (_edacd .String ());};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_fdfd :=args [1].ValueNumber ;_eaegb :=args [0];var _cceg float64 ;switch _eaegb .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_cceg =_eaegb .ValueNumber ;case ResultTypeString :_fad :=DateValue ([]Result {args [0]});if _fad .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cceg =_fad .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bef :=_bbca (_cceg );_dae :=_bef .AddDate (0,int (_fdfd ),0);_fff ,_bccb ,_ecgg :=_dae .Date ();_bcgd :=_bce (_fff ,int (_bccb ),_ecgg );if _bcgd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_bcgd );};

// String returns a string representation of a horizontal range.
func (_dbgba HorizontalRange )String ()string {return _dbgba .horizontalRangeReference ()};func (_bcdb HorizontalRange )horizontalRangeReference ()string {return _d .Sprintf ("\u0025\u0064\u003a%\u0064",_bcdb ._gggb ,_bcdb ._eafgfe );};func (_fbgbag *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {lhs ,rhs ,op };};

// Reference returns a string reference value to a range with prefix.
func (_dedac PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_ccdb :=_dedac ._bbcdc .Reference (ctx ,ev );_efeaa :=_dedac ._bede .Reference (ctx ,ev );_egbba :=_dedac ._cagfa .Reference (ctx ,ev );if _ccdb .Type ==ReferenceTypeSheet &&_efeaa .Type ==ReferenceTypeCell &&_egbba .Type ==ReferenceTypeCell {return MakeRangeReference (_gcacg (_ccdb ,_efeaa ,_egbba ));};return ReferenceInvalid ;};func _deade (_acde []Result ,_daeaf []string ,_aeagf bool )[]string {for _ ,_egcde :=range _acde {switch _egcde .Type {case ResultTypeEmpty :if !_aeagf {_daeaf =append (_daeaf ,"");};case ResultTypeString :if _egcde .ValueString !=""||!_aeagf {_daeaf =append (_daeaf ,_egcde .ValueString );};case ResultTypeNumber :_daeaf =append (_daeaf ,_egcde .Value ());case ResultTypeList :_daeaf =_ggab (_daeaf ,_deade (_egcde .ValueList ,[]string {},_aeagf ));case ResultTypeArray :for _ ,_ffbe :=range _egcde .ValueArray {_daeaf =_ggab (_daeaf ,_deade (_ffbe ,[]string {},_aeagf ));};};};return _daeaf ;};

// Match implements the MATCH function.
func Match (args []Result )Result {_faeg :=len (args );if _faeg !=2&&_faeg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fdgfa :=1;if _faeg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_efbc :=args [2].ValueNumber ;if _efbc ==-1||_efbc ==0{_fdgfa =int (_efbc );};};_dgeb :=args [1];var _gffc []Result ;switch _dgeb .Type {case ResultTypeList :_gffc =_dgeb .ValueList ;case ResultTypeArray :_dfeef :=_dgeb .ValueArray ;if len (_dfeef [0])!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};for _ ,_caef :=range _dfeef {_gffc =append (_gffc ,_caef [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_edfdb :=_eafgf (args [0]);switch _fdgfa {case 0:for _ebcd ,_beee :=range _gffc {if _fgfb (_beee ,_edfdb ){return MakeNumberResult (float64 (_ebcd +1));};};case -1:for _aeba :=0;_aeba < len (_gffc );_aeba ++{if _fgfb (_gffc [_aeba ],_edfdb ){return MakeNumberResult (float64 (_aeba +1));};if _edfdb ._ffcae &&(_gffc [_aeba ].ValueNumber < _edfdb ._dgbb ){if _aeba ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_aeba ));};};case 1:for _aeag :=0;_aeag < len (_gffc );_aeag ++{if _fgfb (_gffc [_aeag ],_edfdb ){return MakeNumberResult (float64 (_aeag +1));};if _edfdb ._ffcae &&(_gffc [_aeag ].ValueNumber > _edfdb ._dgbb ){if _aeag ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_aeag ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_ccbe :=args [0].AsNumber ();if _ccbe .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _ccbe .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_dgeg (_ccbe .ValueNumber ));};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_bcggg SheetPrefixExpr )Update (q *_g .UpdateQuery )Expression {return _bcggg };

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ed ,_bb Expression ;_ae BinOpType ;};func _ccda (_dfga Result )bool {_bacbb :=_dfga .Type ;return _bacbb !=ResultTypeArray &&_bacbb !=ResultTypeList ;};func _cedg (_ggf float64 )float64 {return float64 (int (_ggf +0.5))};func _egeg (_cacc ,_gdfe Result ,_bffe ,_gbf bool )cmpResult {_cacc =_cacc .AsNumber ();_gdfe =_gdfe .AsNumber ();if _cacc .Type !=_gdfe .Type {return _cfbea ;};if _cacc .Type ==ResultTypeNumber {if _cacc .ValueNumber ==_gdfe .ValueNumber {return _cgbe ;};if _cacc .ValueNumber < _gdfe .ValueNumber {return _eafc ;};return _eggf ;};if _cacc .Type ==ResultTypeString {_bfdea :=_cacc .ValueString ;_bacd :=_gdfe .ValueString ;if !_bffe {_bfdea =_eb .ToLower (_bfdea );_bacd =_eb .ToLower (_bacd );};if _gbf {_dadg :=_ga .Match (_bacd ,_bfdea );if _dadg {return _cgbe ;}else {return _eggf ;};};return cmpResult (_eb .Compare (_bfdea ,_bacd ));};if _cacc .Type ==ResultTypeEmpty {return _cgbe ;};if _cacc .Type ==ResultTypeList {if len (_cacc .ValueList )< len (_gdfe .ValueList ){return _eafc ;};if len (_cacc .ValueList )> len (_gdfe .ValueList ){return _eggf ;};for _ceeb :=range _cacc .ValueList {_dbga :=_egeg (_cacc .ValueList [_ceeb ],_gdfe .ValueList [_ceeb ],_bffe ,_gbf );if _dbga !=_cgbe {return _dbga ;};};return _cgbe ;};if _cacc .Type ==ResultTypeList {if len (_cacc .ValueArray )< len (_gdfe .ValueArray ){return _eafc ;};if len (_cacc .ValueArray )> len (_gdfe .ValueArray ){return _eggf ;};for _fgec :=range _cacc .ValueArray {_afgae :=_cacc .ValueArray [_fgec ];_cbbgd :=_cacc .ValueArray [_fgec ];if len (_afgae )< len (_cbbgd ){return _eafc ;};if len (_afgae )> len (_cbbgd ){return _eggf ;};for _fabe :=range _afgae {_ecba :=_egeg (_afgae [_fabe ],_cbbgd [_fabe ],_bffe ,_gbf );if _ecba !=_cgbe {return _ecba ;};};};return _cgbe ;};return _cfbea ;};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_bdgc :=_gfef (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _bdgc .Type !=ResultTypeEmpty {return _bdgc ;};_bbbdg :=_fcagf (args [1:]);_aefc :=_bf .MaxFloat64 ;_caga :=_bcdaf (args [0]);for _ ,_aaa :=range _bbbdg {_adcad :=_caga [_aaa ._effd ][_aaa ._daad ].ValueNumber ;if _aefc > _adcad {_aefc =_adcad ;};};if _aefc ==_bf .MaxFloat64 {_aefc =0;};return MakeNumberResult (float64 (_aefc ));};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfba :=args [0];if _cfba .Type ==ResultTypeNumber {return _cfba ;};if _cfba .Type ==ResultTypeString {_cfgc ,_gfbgf :=_a .ParseFloat (_cfba .Value (),64);if _gfbgf ==nil {return MakeNumberResult (_cfgc );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dgfd :=_eb .ToLower (args [0].ValueString );if !_bba (_dgfd ){_ ,_ ,_ ,_ ,_faf ,_cbfg :=_efae (_dgfd );if _cbfg .Type ==ResultTypeError {_cbfg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _cbfg ;};if _faf {return MakeNumberResult (0);};};_fag ,_dcb ,_afce ,_ ,_cag :=_dbfc (_dgfd );if _cag .Type ==ResultTypeError {return _cag ;};return MakeNumberResult (_bce (_fag ,_dcb ,_afce ));};func _dde (_adee ,_acd ,_fgfc ,_acbb int )int {if _acd > _fgfc {return 0;};if _bbb (_acbb ){return (_fgfc -_acd +1)*30;};_cbe :=0;for _baff :=_acd ;_baff <=_fgfc ;_baff ++{_cbe +=_eed (_adee ,_baff );};return _cbe ;};func _ccgf (_ffdaa yyLexer ,_fgcfg *yySymType )(_egca ,_dfbgg int ){_dfbgg =0;_egca =_ffdaa .Lex (_fgcfg );if _egca <=0{_dfbgg =_adbgc [0];goto _faeee ;};if _egca < len (_adbgc ){_dfbgg =_adbgc [_egca ];goto _faeee ;};if _egca >=_abgcb {if _egca < _abgcb +len (_gfcg ){_dfbgg =_gfcg [_egca -_abgcb ];goto _faeee ;};};for _cfgf :=0;_cfgf < len (_bbgda );_cfgf +=2{_dfbgg =_bbgda [_cfgf +0];if _dfbgg ==_egca {_dfbgg =_bbgda [_cfgf +1];goto _faeee ;};};_faeee :if _dfbgg ==0{_dfbgg =_gfcg [1];};if _gaeb >=3{_d .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_beaa (_dfbgg ),uint (_egca ));};return _egca ,_dfbgg ;};

// Eval evaluates and returns the result of an error expression.
func (_dbf Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_dbf ._gdbd )};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbgf :=args [0].AsNumber ();_acffb :=args [1].AsNumber ();if _dbgf .Type !=ResultTypeNumber ||_acffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cdad :=_bf .Trunc (_dbgf .ValueNumber );_fddb :=_bf .Trunc (_acffb .ValueNumber );if _cdad < _fddb {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _cdad ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_cdad +_fddb -1);args [1]=MakeNumberResult (_cdad -1);return Combin (args );};func _fcac (_dac []Result ,_agfd string )(*cumulArgs ,Result ){if len (_dac )!=6{return nil ,MakeErrorResult (_agfd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dac [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_agfd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dfb :=_dac [0].ValueNumber ;if _dfb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dac [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_agfd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_febg :=_dac [1].ValueNumber ;if _febg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _dac [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_agfd +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddbe :=_dac [2].ValueNumber ;if _ddbe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dac [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_agfd +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bfea :=_dac [3].ValueNumber ;if _bfea <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dac [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_agfd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cggb :=_dac [4].ValueNumber ;if _cggb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _cggb < _bfea {return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _cggb > _febg {return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_abee :=int (_dac [5].ValueNumber );if _abee !=0&&_abee !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_agfd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_dfb ,_febg ,_ddbe ,_bfea ,_cggb ,_abee },_ebce ;};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_fgc ,_fefbd :=_cafg (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _fefbd .Type ==ResultTypeError {return _fefbd ;};_bage :=_fgc ._feae ;_cfaa :=_fgc ._cgbd ;_gbdb :=_fgc ._fdgf ;_dada :=_fgc ._gae ;_ebaa :=_fgc ._gfdb ;_agae :=_fgc ._faee ;_adgdc :=_fffd (_bage ,_cfaa ,_gbdb ,_dada ,_ebaa ,_agae );if _adgdc .Type ==ResultTypeError {return _adgdc ;};_dafe :=_adgdc .ValueNumber /(1.0+_dada /_ebaa );return MakeNumberResult (_dafe );};type durationArgs struct{_feae float64 ;_cgbd float64 ;_fdgf float64 ;_gae float64 ;_gfdb float64 ;_faee int ;};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_begd :=len (args );if _begd !=5&&_begd !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gfac ,_ccgc ,_gdbc :=_fccg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _gdbc .Type ==ResultTypeError {return _gdbc ;};_aagb ,_gdbc :=_fcfg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _gdbc .Type ==ResultTypeError {return _gdbc ;};if _aagb >=_gfac {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cccc :=args [3].ValueNumber ;if _cccc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cdcb :=args [4].ValueNumber ;if _cdcb <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_gaca :=0;if _begd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaca =int (args [5].ValueNumber );if !_egfe (_gaca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_facd ,_gdbc :=_cfgb (_aagb ,_ccgc ,_gaca );if _gdbc .Type ==ResultTypeError {return _gdbc ;};_aadf ,_gdbc :=_cfgb (_aagb ,_gfac ,_gaca );if _gdbc .Type ==ResultTypeError {return _gdbc ;};_cdge ,_gdbc :=_cfgb (_gfac ,_ccgc ,_gaca );if _gdbc .Type ==ResultTypeError {return _gdbc ;};_dbfgb :=1+_facd *_cccc ;_dbfgb /=_cdcb /100+_aadf *_cccc ;_dbfgb --;_dbfgb /=_cdge ;return MakeNumberResult (_dbfgb );};func init (){_acgb ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_cdcea :=len (args );if _cdcea < 3||_cdcea > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dabb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bac :=args [1].ValueNumber ;if _bac !=float64 (int (_bac )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gedd :=args [2].ValueNumber ;_aedf :=0.0;if _cdcea >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aedf =args [3].ValueNumber ;};_bffd :=0;if _cdcea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bffd =int (args [4].ValueNumber );if _bffd !=0{_bffd =1;};};return MakeNumberResult (_aafb (_dabb ,_bac ,_gedd ,_aedf ,_bffd ));};func (_cffdg *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func _ccfa (_cddc int )bool {if _cddc ==_cddc /400*400{return true ;};if _cddc ==_cddc /100*100{return false ;};return _cddc ==_cddc /4*4;};

// GetFilename returns an empty string for the invalid reference context.
func (_cbdbg *ivr )GetFilename ()string {return ""};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfa :=_dg .Now ();_ ,_fcea :=_cfa .Zone ();_eea :=_gbb (_aaf ,_cfa .Unix ()+int64 (_fcea ))+1;return MakeNumberResult (_eea );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_bgg :=args [0];switch _bgg .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_gebb :=_bbca (_bgg .ValueNumber );return MakeNumberResult (float64 (_gebb .Month ()));case ResultTypeString :_bfge :=_eb .ToLower (_bgg .ValueString );if !_bba (_bfge ){_ ,_ ,_ ,_ ,_cec ,_fde :=_efae (_bfge );if _fde .Type ==ResultTypeError {_fde .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _fde ;};if _cec {return MakeNumberResult (1);};};_ ,_dce ,_ ,_ ,_ded :=_dbfc (_bfge );if _ded .Type ==ResultTypeError {return _ded ;};return MakeNumberResult (float64 (_dce ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;var _efdc =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _ecfbf =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_efdcf ,_cagcfd :=_cdfbg (args ,true );if _cagcfd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_efdcf /_cagcfd );};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_fcfee Expression ;_dgcfe ,_cbad int ;};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_dgbe :=len (args );if _dgbe < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dgbe > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dgaf :=args [0];_fbfc :=args [1];if _fbfc .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cbba :=args [2].AsNumber ();if _cbba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abedg :=false ;if _dgbe ==4&&args [3].Type !=ResultTypeEmpty {_edda :=args [3].AsNumber ();if _edda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _edda .ValueNumber ==0{_abedg =true ;};};_gbca :=int (_cbba .ValueNumber )-1;_accg :=-1;_bafae :=false ;_effa :for _ddec ,_dcbaa :=range _fbfc .ValueArray {if len (_dcbaa )==0{continue ;};_dgce :=_dcbaa [0];switch _egeg (_dgce ,_dgaf ,false ,_abedg ){case _eafc :_accg =_ddec ;case _cgbe :_accg =_ddec ;_bafae =true ;break _effa ;};};if _accg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_eafg :=_fbfc .ValueArray [_accg ];if _gbca < 0||_gbca >=len (_eafg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bafae ||!_abedg {return _eafg [_gbca ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Db implements the Excel DB function.
func Db (args []Result )Result {_badf :=len (args );if _badf !=4&&_badf !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbbg :=args [0].ValueNumber ;if _gbbg < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cabb :=args [1].ValueNumber ;if _cabb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgbf :=args [2].ValueNumber ;if _fgbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bgf :=args [3].ValueNumber ;if _bgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _bgf -_fgbf > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cddd :=12.0;if _badf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cddd =args [4].ValueNumber ;if _cddd < 1||_cddd > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _cddd ==12&&_bgf > _fgbf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _cabb >=_gbbg {return MakeNumberResult (0);};_agba :=1-_bf .Pow (_cabb /_gbbg ,1/_fgbf );_agba =float64 (int (_agba *1000+0.5))/1000;_bgef :=_gbbg *_agba *_cddd /12;if _bgf ==1{return MakeNumberResult (_bgef );};_fedf :=_bgef ;_ffaa :=0.0;_aea :=_fgbf ;if _aea > _bgf {_aea =_bgf ;};for _ggeg :=2.0;_ggeg <=_aea ;_ggeg ++{_ffaa =(_gbbg -_fedf )*_agba ;_fedf +=_ffaa ;};if _bgf > _fgbf {return MakeNumberResult ((_gbbg -_fedf )*_agba *(12-_cddd )/12);};return MakeNumberResult (_ffaa );};var _gfcg =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aadae ,_geag ,_fbbbf :=_fccg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _fbbbf .Type ==ResultTypeError {return _fbbbf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcgfc :=_geag -_aadae ;if _bcgfc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_deeg :=args [2].ValueNumber ;if _deeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgcf :=(100-_deeg )/_deeg ;_gbec :=360/_bcgfc ;return MakeNumberResult (_dgcf *_gbec );};func _bee (_gbaa int )int {if _gbaa < 1900{if _gbaa < 30{_gbaa +=2000;}else {_gbaa +=1900;};};return _gbaa ;};

// SetLocked does nothing for the invalid reference context.
func (_dadaa *ivr )SetLocked (cellRef string ,locked bool ){};

// Update returns the same object as updating sheet references does not affect Bool.
func (_bc Bool )Update (q *_g .UpdateQuery )Expression {return _bc };type ivr struct{};const _bgaaf =16;

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_abcg :=len (args );if _abcg < 3||_abcg > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cegb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cagf :=args [1].ValueNumber ;if _cagf !=float64 (int (_cagf )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbf :=args [2].ValueNumber ;_gbad :=0.0;if _abcg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbad =args [3].ValueNumber ;};_gbgca :=0.0;if _abcg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbgca =args [4].ValueNumber ;if _gbgca !=0{_gbgca =1;};};if _cegb ==0{return MakeNumberResult (-_ffbf *_cagf -_gbad );}else {return MakeNumberResult ((((1-_bf .Pow (1+_cegb ,_cagf ))/_cegb )*_ffbf *(1+_cegb *_gbgca )-_gbad )/_bf .Pow (1+_cegb ,_cagf ));};};const _fagfee =57361;

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_baca PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ecbd :=_baca ._cbcc .Reference (ctx ,ev );switch _ecbd .Type {case ReferenceTypeSheet :_dcbbg :=_baca .verticalRangeReference (_ecbd .Value );if _gegg ,_gadfc :=ev .GetFromCache (_dcbbg );_gadfc {return _gegg ;};_ecdb :=ctx .Sheet (_ecbd .Value );_gdebeg ,_ggebd :=_ecfdd (_ecdb ,_baca ._geaf ,_baca ._aeca );_cdaee :=_fggca (_ecdb ,ev ,_gdebeg ,_ggebd );ev .SetCache (_dcbbg ,_cdaee );return _cdaee ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecbd .Type ));};};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bfbf ,_cbffd ,_cabc :=_egge (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _cabc .Type ==ResultTypeError {return _cabc ;};if _cbffd < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bfbf ==0{return MakeNumberResult (0);};_aeeab :=_bfbf < 0;if _aeeab {_bfbf =-_bfbf ;};_adca :=args [0].Value ();_bcgf :=_eb .Split (_adca ,"\u002e");_eaff :=float64 (int (_bfbf ));_ggcfd :=_bcgf [1];_cdee :=len (_ggcfd );_afbf :=int (_bf .Log10 (_cbffd ))+1;_fabc :=float64 (_afbf -_cdee );_ccfc ,_dbg :=_a .ParseFloat (_ggcfd ,64);if _dbg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_ccfc *=_bf .Pow (10,_fabc );_fcee :=_eaff +_ccfc /_cbffd ;if _aeeab {_fcee =-_fcee ;};return MakeNumberResult (_fcee );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_bdgf :=_eb .Split (v ,"\u003a");if len (_bdgf )!=2{return nil ;};_aeaa ,_ :=_a .Atoi (_bdgf [0]);_cfddd ,_ :=_a .Atoi (_bdgf [1]);return PrefixHorizontalRange {pfx ,_aeaa ,_cfddd };};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_dgccf :=1.0;for _ ,_bdea :=range args {_bdea =_bdea .AsNumber ();switch _bdea .Type {case ResultTypeNumber :_dgccf *=_bdea .ValueNumber ;case ResultTypeList ,ResultTypeArray :_eadb :=Product (_bdea .ListValues ());if _eadb .Type !=ResultTypeNumber {return _eadb ;};_dgccf *=_eadb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bdea ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_bdea .Type ));};};return MakeNumberResult (_dgccf );};func _ecdc (_aadab Result ,_fecc ,_dfc string )(string ,Result ){switch _aadab .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _aadab .Value (),_ebce ;default:return "",MakeErrorResult (_fecc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dfc +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// LastRow returns 0 for the invalid reference context.
func (_gaegc *ivr )LastRow (colFrom string )int {return 0};const _ffdc =57366;

// Update updates the horizontal range references after removing a row/column.
func (_fffdcg HorizontalRange )Update (q *_g .UpdateQuery )Expression {return _fffdcg };var _bbgda =[...]int {0};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_bbbd :=args [0].ValueNumber ;if _bbbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bgfc :=float64 (int (args [1].ValueNumber ));if _bgfc < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_bf .Pow ((1+_bbbd /_bgfc ),_bgfc )-1);};const _cgc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acbbg :=args [0].AsNumber ();if _acbbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_aggea :=float64 (1);if _acbbg .ValueNumber < 0{_aggea =-1;};if len (args )> 1{_eaffb :=args [1].AsNumber ();if _eaffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aggea =_eaffb .ValueNumber ;};_aabb :=float64 (1);if len (args )> 2{_cbdd :=args [2].AsNumber ();if _cbdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_aabb =_cbdd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_bf .Ceil (_acbbg .ValueNumber ));};_ffag :=_acbbg .ValueNumber ;_ffag ,_bcgdf :=_bf .Modf (_ffag /_aggea );if _bcgdf !=0{if _acbbg .ValueNumber > 0{_ffag ++;}else if _aabb < 0{_ffag --;};};return MakeNumberResult (_ffag *_aggea );};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);const _dedc =57354;

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ggcg :=args [0].AsNumber ();_aefd :=args [1].AsNumber ();if _ggcg .Type ==ResultTypeNumber &&_aefd .Type ==ResultTypeNumber {_aadac :=_bf .Atan2 (_aefd .ValueNumber ,_ggcg .ValueNumber );if _aadac !=_aadac {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_aadac );};for _ ,_abccd :=range []ResultType {_ggcg .Type ,_aefd .Type }{switch _abccd {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _ggcg ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abccd ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};const _agffg =57367;func _abdbd (_gggd string ,_bacbe _dg .Time )(_dg .Time ,error ){_acff ,_ ,_fdbdb :=_db .ParseFloat (_gggd ,10,128,_db .ToNearestEven );if _fdbdb !=nil {return _dg .Time {},_fdbdb ;};_befe :=new (_db .Float );_befe .SetUint64 (uint64 (24*_dg .Hour ));_acff .Mul (_acff ,_befe );_fgfa ,_ :=_acff .Uint64 ();_bffb :=_bacbe .Add (_dg .Duration (_fgfa ));return _cafeg (_bffb ),nil ;};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_afgbc :=len (args );if _afgbc < 5||_afgbc > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebcc :=args [0].ValueNumber ;if _ebcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_begf :=args [1].ValueNumber ;if _begf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bggd :=args [2].ValueNumber ;if _bggd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bggd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfda :=args [3].ValueNumber ;if _cfda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aafce :=args [4].ValueNumber ;if _cfda > _aafce {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _aafce > _bggd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_deba :=2.0;if _afgbc > 5{if args [5].Type ==ResultTypeEmpty {_deba =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deba =args [5].ValueNumber ;if _deba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_debd :=false ;if _afgbc > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_debd =args [6].ValueNumber !=0;};_dggge :=0.0;_eaag :=_bf .Floor (_cfda );_gcde :=_bf .Ceil (_aafce );if _debd {for _adbe :=_eaag +1;_adbe <=_gcde ;_adbe ++{_gcda :=_dfbb (_ebcc ,_begf ,_bggd ,_adbe ,_deba );if _adbe ==_eaag +1{_gcda *=_bf .Min (_aafce ,_eaag +1)-_cfda ;}else if _adbe ==_gcde {_gcda *=_aafce +1-_gcde ;};_dggge +=_gcda ;};}else {_ccbg :=_bggd ;var _efba float64 ;if !_efda (_cfda ,_bf .Floor (_cfda )){if _deba ==1{_gfbbg :=_bggd /2;if _cfda > _gfbbg ||_efda (_cfda ,_gfbbg ){_efba =_cfda -_gfbbg ;_cfda =_gfbbg ;_aafce -=_efba ;_ccbg ++;};};};if _deba !=0{_ebcc -=_gebf (_ebcc ,_begf ,_bggd ,_ccbg ,_cfda ,_deba );};_dggge =_gebf (_ebcc ,_begf ,_bggd ,_bggd -_cfda ,_aafce -_cfda ,_deba );};return MakeNumberResult (_dggge );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgbg :=args [0].AsString ();if _dgbg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfdf :=_e .Buffer {};for _ ,_bdec :=range _dgbg .ValueString {if _fdd .IsPrint (_bdec ){_dfdf .WriteRune (_bdec );};};return MakeStringResult (_dfdf .String ());};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_cefef :=len (args );if _cefef > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_gdgb :=_bcdaf (args [0]);_gcca :=[]float64 {};for _ ,_eabg :=range _gdgb {for _ ,_acgd :=range _eabg {if _acgd .Type ==ResultTypeNumber &&!_acgd .IsBoolean {_gcca =append (_gcca ,_acgd .ValueNumber );};};};_gfga :=len (_gcca );if len (_gcca )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_gacbc :=0.1;if _cefef ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gacbc =args [1].ValueNumber ;if _gacbc <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_egec :=[]float64 {};for _cdfg :=0;_cdfg < _gfga ;_cdfg ++{if _cdfg ==0{_egec =append (_egec ,0);}else {_egec =append (_egec ,_egec [_cdfg -1]+365);};};return _beed (_gcca ,_egec ,_gacbc );};type countMode byte ;

// Reference returns an invalid reference for EmptyExpr.
func (_bfe EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cebca :=ctx .GetEpoch ();_ecdfc ,_cgde :=_abdbd (args [0].Value (),_cebca );if _cgde !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_faea :=_ecdfc .Year ();return MakeBoolResult (_ccfa (_faea ));};

// Function is a standard function whose result only depends on its arguments.
type Function func (_egadg []Result )Result ;func (_cdffa *noCache )GetFromCache (key string )(Result ,bool ){return _ebce ,false };

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_cfdb :=_e .Buffer {};for _ ,_gbbf :=range args {switch _gbbf .Type {case ResultTypeString :_cfdb .WriteString (_gbbf .ValueString );case ResultTypeNumber :var _bgadf string ;if _gbbf .IsBoolean {if _gbbf .ValueNumber ==0{_bgadf ="\u0046\u0041\u004cS\u0045";}else {_bgadf ="\u0054\u0052\u0055\u0045";};}else {_bgadf =_gbbf .AsString ().ValueString ;};_cfdb .WriteString (_bgadf );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_cfdb .String ());};

// CellRef is a reference to a single cell
type CellRef struct{_bbc string };

// Reference returns an invalid reference for Error.
func (_aff Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);const _bfce =57360;

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdgb :=args [0].AsNumber ();_eeff :=args [1].AsNumber ();if _cdgb .Type !=ResultTypeNumber ||_eeff .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agecf :=_bf .Trunc (_cdgb .ValueNumber );_efdd :=_bf .Trunc (_eeff .ValueNumber );if _efdd > _agecf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _efdd ==_agecf ||_efdd ==0{return MakeNumberResult (1);};_bgba :=float64 (1);for _deef :=float64 (1);_deef <=_efdd ;_deef ++{_bgba *=(_agecf +1-_deef )/_deef ;};return MakeNumberResult (_bgba );};var _dbad =[...]int {-1,1,1,-1,-2,0};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {v }};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cadb :=args [0].AsString ();if _cadb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_fgag :=args [1].Ref ;if _fgag .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_dcbf :=_fgag .Value ;switch _cadb .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_aedd ,_bgfcb :=_gd .ParseCellReference (_dcbf );if _bgfcb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcbf );};_ebdce :="\u0024"+_aedd .Column +"\u0024"+_a .Itoa (int (_aedd .RowIdx ));if _aedd .SheetName !=""{_ebdce =_aedd .SheetName +"\u0021"+_ebdce ;};return MakeStringResult (_ebdce );case "\u0063\u006f\u006c":_dcdf ,_eacd :=_gd .ParseCellReference (_dcbf );if _eacd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcbf );};return MakeNumberResult (float64 (_dcdf .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_gbfg :=_eb .Contains (ctx .GetFormat (_dcbf ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_gbfg );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_fefg :="\u0047";_ebcf :=ctx .GetFormat (_dcbf );if _ebcf =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_fcce .MatchString (_ebcf ){_fefg ="\u0046\u0030";}else if _ebcf =="\u0030\u0025"{_fefg ="\u0050\u0030";}else if _ebcf =="\u004d\u004d\u004d\u0020\u0044\u0044"{_fefg ="\u0044\u0032";}else if _ebcf =="\u004d\u004d\u002fY\u0059"{_fefg ="\u0044\u0033";}else if _ebcf =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_ebcf =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_fefg ="\u0044\u0034";}else if _ebcf =="\u004d\u004d\u005c\u002d\u0044\u0044"{_fefg ="\u0044\u0035";}else if _ebcf =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_fefg ="\u0044\u0036";}else if _ebcf =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_fefg ="\u0044\u0037";}else if _ebcf =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_fefg ="\u0044\u0038";}else if _ebcf =="\u0048\u0048\u003aM\u004d"{_fefg ="\u0044\u0039";}else if _dgac .MatchString (_ebcf ){_fefg ="\u002e\u0030";}else if _gbee .MatchString (_ebcf ){_fefg ="\u002e\u0030\u0028\u0029";}else if _abeg .MatchString (_ebcf ){_fefg ="\u0043\u0030";}else if _cecf .MatchString (_ebcf )||_bged .MatchString (_ebcf ){_fefg ="\u0044\u0031";}else if _gaff :=_beeaa .FindStringSubmatch (_ebcf );len (_gaff )> 1{_fefg ="\u0046"+_a .Itoa (len (_gaff [1]));}else if _cdac :=_bdb .FindStringSubmatch (_ebcf );len (_cdac )> 1{_fefg ="\u002e"+_a .Itoa (len (_cdac [2]));}else if _ggbcg :=_dcbaf .FindStringSubmatch (_ebcf );len (_ggbcg )> 1{_fefg ="\u0050"+_a .Itoa (len (_ggbcg [2]));}else if _ggeb :=_gefg .FindStringSubmatch (_ebcf );len (_ggeb )> 1{_fefg ="\u0043"+_efeg (_ggeb ,1);}else if _caff :=_fgdb .FindStringSubmatch (_ebcf );len (_caff )> 1{_fefg ="\u0043"+_efeg (_caff ,1);}else if _edaa :=_fcga .FindStringSubmatch (_ebcf );len (_edaa )> 1{_fefg ="\u002e"+_efeg (_edaa ,1)+"\u0028\u0029";}else if _ceac :=_aadgf .FindStringSubmatch (_ebcf );len (_ceac )> 1{_fefg ="\u002e"+_efeg (_ceac ,1);}else if _fccd :=_dggga .FindStringSubmatch (_ebcf );len (_fccd )> 1{_fefg ="\u0053"+_efeg (_fccd ,3);};if _fefg !="\u0047"&&_eb .Contains (_ebcf ,"\u005b\u0052\u0045D\u005d"){_fefg +="\u002d";};return MakeStringResult (_fefg );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_adge :=ctx .GetFormat (_dcbf );if _ecege .MatchString (_adge ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_dcbf ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_addg :=0.0;if ctx .GetLocked (_dcbf ){_addg =1.0;};return MakeNumberResult (_addg );case "\u0072\u006f\u0077":_efgbd ,_fdff :=_gd .ParseCellReference (_dcbf );if _fdff !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcbf );};return MakeNumberResult (float64 (_efgbd .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_cgce ,_daed :=_gd .ParseCellReference (_dcbf );if _daed !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcbf );};if _cgce .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_cgce .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_cgce .SheetName ).GetWidth (int (_cgce .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_cadb .ValueString );};func _beed (_eabge ,_cbfb []float64 ,_fggb float64 )Result {_dgcc :=false ;_egcd :=false ;for _add :=0;_add < len (_eabge );_add ++{if _eabge [_add ]> 0{_dgcc =true ;};if _eabge [_add ]< 0{_egcd =true ;};};if !_dgcc ||!_egcd {return MakeErrorResultType (ErrorTypeNum ,"");};_eaad :=_fggb ;_bdegb :=1e-10;_gdebe :=0;_aeec :=50;_gdfb :=false ;for {_bagc :=_dcfg (_eabge ,_cbfb ,_eaad );_feac :=_eaad -_bagc /_gggc (_eabge ,_cbfb ,_eaad );_decg :=_bf .Abs (_feac -_eaad );_eaad =_feac ;_gdebe ++;if _decg <=_bdegb ||_bf .Abs (_bagc )<=_bdegb {break ;};if _gdebe > _aeec {_gdfb =true ;break ;};};if _gdfb ||_bf .IsNaN (_eaad )||_bf .IsInf (_eaad ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_eaad );};func _bbdfa (_cdaeg Context ,_eafgc ,_egad int )(string ,string ){_deega :="\u0041"+_a .Itoa (_eafgc );_dgeee :=_cdaeg .LastColumn (_eafgc ,_egad );_bcafg :=_dgeee +_a .Itoa (_egad );return _deega ,_bcafg ;};func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_eb .NewReader (s ));};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};var _ceab =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Eval evaluates and returns an expression with prefix.
func (_ecag PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_defd :=_ecag ._eaeb .Reference (ctx ,ev );switch _defd .Type {case ReferenceTypeSheet :_bbed :=ctx .Sheet (_defd .Value );return _ecag ._eaagc .Eval (_bbed ,ev );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_defd .Type ));};};func _gggc (_cbge ,_dcde []float64 ,_afag float64 )float64 {_fee :=_afag +1;_gecc :=0.0;_dced :=len (_cbge );_bfcb :=_dcde [0];for _cbbd :=1;_cbbd < _dced ;_cbbd ++{_abac :=(_dcde [_cbbd ]-_bfcb )/365;_gecc -=_abac *_cbge [_cbbd ]/_bf .Pow (_fee ,_abac +1);};return _gecc ;};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fbe *defEval )LastEvalIsRef ()bool {return _fbe ._ecg };

// GetFormat returns an empty string for the invalid reference context.
func (_cfgdf *ivr )GetFormat (cellRef string )string {return ""};type amorArgs struct{_fac float64 ;_fbbdc float64 ;_bffa float64 ;_gfed float64 ;_dcba int ;_bgee float64 ;_cagc int ;};func (_acabb *plex )Error (s string ){_fg .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};const _bagb =57348;const _bcdeb int =30;func _gcac (_eaf ,_cgd _dg .Time ,_aggf int )float64 {if _eaf .After (_cgd ){_eaf ,_cgd =_cgd ,_eaf ;};_geg :=0;_abff ,_fabb ,_efe :=_eaf .Date ();_cdfc ,_aab ,_gff :=_cgd .Date ();_bff ,_bbff :=int (_fabb ),int (_aab );_aebe ,_fgga :=_gfa (_abff ,_bff ,_efe ,_aggf ),_gfa (_cdfc ,_bbff ,_gff ,_aggf );if !_bbb (_aggf ){return _bce (_cdfc ,_bbff ,_fgga )-_bce (_abff ,_bff ,_aebe );};if _aggf ==0{if (_bff ==2||_aebe < 30)&&_gff ==31{_fgga =31;}else if _bbff ==2&&_fgga ==_eed (_cdfc ,_bbff ){_fgga =_eed (_cdfc ,2);};}else {if _bff ==2&&_aebe ==30{_aebe =_eed (_abff ,2);};if _bbff ==2&&_fgga ==30{_fgga =_eed (_cdfc ,2);};};if _abff < _cdfc ||(_abff ==_cdfc &&_bff < _bbff ){_geg =30-_aebe +1;_efe =1;_aebe =1;_bcdcf :=_dg .Date (_abff ,_dg .Month (_bff ),_efe ,0,0,0,0,_dg .UTC ).AddDate (0,1,0);if _bcdcf .Year ()< _cdfc {_geg +=_dde (_bcdcf .Year (),int (_bcdcf .Month ()),12,_aggf );_bcdcf =_bcdcf .AddDate (0,13-int (_bcdcf .Month ()),0);_geg +=_abdb (_bcdcf .Year (),_cdfc -1,_aggf );};_geg +=_dde (_cdfc ,int (_bcdcf .Month ()),_bbff -1,_aggf );_bcdcf =_bcdcf .AddDate (0,_bbff -int (_bcdcf .Month ()),0);_bff =_bcdcf .Day ();};_geg +=_fgga -_aebe ;if _geg > 0{return float64 (_geg );}else {return 0;};};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_bega :=len (args );if _bega !=2&&_bega !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efgfg ,_eeed :=_face (args [0],args [1],"\u0058\u0049\u0052\u0052");if _eeed .Type ==ResultTypeError {return _eeed ;};_efc :=_efgfg ._beabb ;_cegf :=_efgfg ._cbffb ;_adbee :=0.1;if _bega ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adbee =args [2].ValueNumber ;if _adbee <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _beed (_efc ,_cegf ,_adbee );};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_dacc :=[]string {};for _eggfd :=range _adbca {_dacc =append (_dacc ,_eggfd );};for _ecgfb :=range _abgg {_dacc =append (_dacc ,_ecgfb );};_c .Strings (_dacc );return _dacc ;};var _gb =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_daaae Result )AsNumber ()Result {if _daaae .Type ==ResultTypeString {_afbb ,_dbed :=_a .ParseFloat (_daaae .ValueString ,64);if _dbed ==nil {return MakeNumberResult (_afbb );};};if _daaae .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _daaae ;};func _fbcb (_cfced []Result )(float64 ,float64 ,Result ){_eebd :=0.0;_aggb :=1.0;for _ ,_abcd :=range _cfced {switch _abcd .Type {case ResultTypeNumber :_eebd +=_abcd .ValueNumber ;_aggb *=_dgeg (_abcd .ValueNumber );case ResultTypeList ,ResultTypeArray :_cdgfd ,_beeag ,_ffcc :=_fbcb (_abcd .ListValues ());_eebd +=_cdgfd ;_aggb *=_dgeg (_beeag );if _ffcc .Type ==ResultTypeError {return 0,0,_ffcc ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_abcd ;};};return _eebd ,_aggb ,_ebce ;};func _cafg (_efg []Result ,_ddb string )(*durationArgs ,Result ){_bde :=len (_efg );if _bde !=5&&_bde !=6{return nil ,MakeErrorResult (_ddb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcba ,_fagfe ,_caad :=_fccg (_efg [0],_efg [1],_ddb );if _caad .Type ==ResultTypeError {return nil ,_caad ;};_fefb :=_efg [2];if _fefb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bdef :=_fefb .ValueNumber ;if _bdef < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_eadc :=_efg [3];if _eadc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bfef :=_eadc .ValueNumber ;if _bfef < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_bfca :=_efg [4];if _bfca .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efbf :=float64 (int (_bfca .ValueNumber ));if !_eedf (_efbf ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gddg :=0;if _bde ==6&&_efg [5].Type !=ResultTypeEmpty {_bbde :=_efg [5];if _bbde .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gddg =int (_bbde .ValueNumber );if !_egfe (_gddg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_ddb );};};return &durationArgs {_gcba ,_fagfe ,_bdef ,_bfef ,_efbf ,_gddg },_ebce ;};func _eafgf (_bgad Result )*criteriaParsed {_agaeg :=_bgad .Type ==ResultTypeNumber ;_acag :=_bgad .ValueNumber ;_abgff :=_eb .ToLower (_bgad .ValueString );_aaddc :=_ecab (_abgff );return &criteriaParsed {_agaeg ,_acag ,_abgff ,_aaddc };};func Parse (r _fd .Reader )Expression {_dbgff :=&plex {LexReader (r ),nil };_fagfd (_dbgff );return _dbgff ._fdfbc ;};var _dbfgc ,_cfdae ,_cbafc ,_gacea ,_bfddb ,_gdcfd *_dc .Regexp ;const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _dbbe (_edf ,_bfbc int )int {switch _bfbc {case 1:if _ccfa (_edf ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Update returns the same object as updating sheet references does not affect Number.
func (_eddg Number )Update (q *_g .UpdateQuery )Expression {return _eddg };

// Number is a nubmer expression.
type Number struct{_bagea float64 };

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};func _dfbb (_fcaa ,_caed ,_gagb ,_eddc ,_acfd float64 )float64 {var _fbbf float64 ;_bbbf :=_acfd /_gagb ;if _bbbf >=1{_bbbf =1;if _eddc ==1{_fbbf =_fcaa ;}else {_fbbf =0;};}else {_fbbf =_fcaa *_bf .Pow (1-_bbbf ,_eddc -1);};_bfgc :=_fcaa *_bf .Pow (1-_bbbf ,_eddc );var _fffg float64 ;if _bfgc < _caed {_fffg =_fbbf -_caed ;}else {_fffg =_fbbf -_bfgc ;};if _fffg < 0{_fffg =0;};return _fffg ;};func _cabg (_gbfa string ,_egegc func (_cfcfa float64 )float64 )Function {return func (_faadc []Result )Result {if len (_faadc )!=1{return MakeErrorResult (_gbfa +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eacdd :=_faadc [0].AsNumber ();switch _eacdd .Type {case ResultTypeNumber :_fded :=_egegc (_eacdd .ValueNumber );if _bf .IsNaN (_fded ){return MakeErrorResult (_gbfa +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _bf .IsInf (_fded ,0){return MakeErrorResult (_gbfa +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fded ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_gbfa +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fded );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_gbfa +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _eacdd ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbfa ,_eacdd .Type ));};};};func _bacc (_acfb ,_eaee float64 )float64 {_acfb =_bf .Trunc (_acfb );_eaee =_bf .Trunc (_eaee );if _acfb ==0&&_eaee ==0{return 0;};return _acfb *_eaee /_efdde (_acfb ,_eaee );};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_bed ,_bbgbg :=_bbeg (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _bbgbg .Type ==ResultTypeError {return _bbgbg ;};_bea :=_bbca (_bed ._baa );_bagg :=_bbca (_bed ._aaba );_aef :=_bed ._dbd ;_dafg :=_bed ._eedee ;_bcfg :=_cgb (_bea ,_bagg ,_aef ,_dafg );_abad ,_cdce ,_cade :=_bcfg .Date ();return MakeNumberResult (_bce (_abad ,int (_cdce ),_cade ));};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cgffc :=args [0].AsString ();if _cgffc .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_cgffc .ValueString ,ev );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_cggfa string };const _aacfab =57347;

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Reference returns a string reference value to a vertical range with prefix.
func (_becc PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_ebdcee :=_becc ._cbcc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_becc .verticalRangeReference (_ebdcee .Value )};};func _bcdaf (_egac Result )[][]Result {switch _egac .Type {case ResultTypeArray :return _egac .ValueArray ;case ResultTypeList :return [][]Result {_egac .ValueList };default:return [][]Result {};};};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_bgbdg :=_eb .Split (v ,"\u003a");if len (_bgbdg )!=2{return nil ;};return PrefixVerticalRange {pfx ,_bgbdg [0],_bgbdg [1]};};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {v }};func _fccg (_aacf ,_fagf Result ,_ggca string )(float64 ,float64 ,Result ){_abed ,_cbd :=_fcfg (_aacf ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_ggca );if _cbd .Type ==ResultTypeError {return 0,0,_cbd ;};_abbd ,_cbd :=_fcfg (_fagf ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_ggca );if _cbd .Type ==ResultTypeError {return 0,0,_cbd ;};if _abed >=_abbd {return 0,0,MakeErrorResultType (ErrorTypeNum ,_ggca +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _abed ,_abbd ,_ebce ;};

// Reference returns an invalid reference for FunctionCall.
func (_dddba FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {pfx ,exp }};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_bbcdc ,_bede ,_cagfa Expression };type xargs struct{_beabb []float64 ;_cbffb []float64 ;};func (_edg *defEval )checkLastEvalIsRef (_bcg Context ,_fdf Expression ){switch _fdf .(type ){case FunctionCall :switch _fdf .(FunctionCall )._ecfc {case "\u0049\u0053\u0052E\u0046":for _ ,_cf :=range _fdf .(FunctionCall )._fgaf {switch _cf .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_adf :=_cf .Eval (_bcg ,_edg );_edg ._ecg =!(_adf .Type ==ResultTypeError &&_adf .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_edg ._ecg =false ;};};};};};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_cagcb ,_fefgg :=_gfbgg ("\u0046\u0049\u004e\u0044",args );if _fefgg .Type !=ResultTypeEmpty {return _fefgg ;};_bfecd :=_eb .ToLower (_cagcb ._bbffb );_acdbg :=_eb .ToLower (_cagcb ._ffgb );if _bfecd ==""{return MakeNumberResult (1.0);};_dcbfc :=_cagcb ._adcd -1;_gafbc :=1;_gbfe :=0;for _adgfb :=range _acdbg {if _adgfb !=0{_cbac :=1;if _adgfb -_gbfe > 1{_cbac =2;};_gafbc +=_cbac ;};if _gafbc > _dcbfc {_cccfb :=_ga .Index (_bfecd ,_acdbg [_adgfb :]);if _cccfb ==0{return MakeNumberResult (float64 (_gafbc ));};};_gbfe =_adgfb ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afed :=args [0].AsString ();if _afed .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_faade :=args [1].AsNumber ();if _faade .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cccbb :=_afed .ValueString ;if len (_cccbb )> 2&&(_eb .HasPrefix (_cccbb ,"\u0030\u0078")||_eb .HasPrefix (_cccbb ,"\u0030\u0058")){_cccbb =_cccbb [2:];};_efea ,_gbdd :=_a .ParseInt (_cccbb ,int (_faade .ValueNumber ),64);if _gbdd !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_efea ));};func (_degee *yyParserImpl )Parse (yylex yyLexer )int {var _dgfdd int ;var _dafaf yySymType ;var _dfgb []yySymType ;_ =_dfgb ;_eggbd :=_degee ._eecec [:];Nerrs :=0;Errflag :=0;_ecaca :=0;_degee ._eedfd =-1;_dcdcb :=-1;defer func (){_ecaca =-1;_degee ._eedfd =-1;_dcdcb =-1}();_acgfg :=-1;goto _accd ;_ddbfd :return 0;_eeda :return 1;_accd :if _gaeb >=4{_d .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_beaa (_dcdcb ),_ebed (_ecaca ));};_acgfg ++;if _acgfg >=len (_eggbd ){_agcg :=make ([]yySymType ,len (_eggbd )*2);copy (_agcg ,_eggbd );_eggbd =_agcg ;};_eggbd [_acgfg ]=_dafaf ;_eggbd [_acgfg ]._bgfbe =_ecaca ;_gbef :_dgfdd =_egbg [_ecaca ];if _dgfdd <=_gfdec {goto _eeece ;};if _degee ._eedfd < 0{_degee ._eedfd ,_dcdcb =_ccgf (yylex ,&_degee ._eadae );};_dgfdd +=_dcdcb ;if _dgfdd < 0||_dgfdd >=_cdcf {goto _eeece ;};_dgfdd =_cebb [_dgfdd ];if _ddbef [_dgfdd ]==_dcdcb {_degee ._eedfd =-1;_dcdcb =-1;_dafaf =_degee ._eadae ;_ecaca =_dgfdd ;if Errflag > 0{Errflag --;};goto _accd ;};_eeece :_dgfdd =_cafd [_ecaca ];if _dgfdd ==-2{if _degee ._eedfd < 0{_degee ._eedfd ,_dcdcb =_ccgf (yylex ,&_degee ._eadae );};_dfaga :=0;for {if _dbad [_dfaga +0]==-1&&_dbad [_dfaga +1]==_ecaca {break ;};_dfaga +=2;};for _dfaga +=2;;_dfaga +=2{_dgfdd =_dbad [_dfaga +0];if _dgfdd < 0||_dgfdd ==_dcdcb {break ;};};_dgfdd =_dbad [_dfaga +1];if _dgfdd < 0{goto _ddbfd ;};};if _dgfdd ==0{switch Errflag {case 0:yylex .Error (_gacgg (_ecaca ,_dcdcb ));Nerrs ++;if _gaeb >=1{_d .Printf ("\u0025\u0073",_ebed (_ecaca ));_d .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_beaa (_dcdcb ));};fallthrough;case 1,2:Errflag =3;for _acgfg >=0{_dgfdd =_egbg [_eggbd [_acgfg ]._bgfbe ]+_acab ;if _dgfdd >=0&&_dgfdd < _cdcf {_ecaca =_cebb [_dgfdd ];if _ddbef [_ecaca ]==_acab {goto _accd ;};};if _gaeb >=2{_d .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_eggbd [_acgfg ]._bgfbe );};_acgfg --;};goto _eeda ;case 3:if _gaeb >=2{_d .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_beaa (_dcdcb ));};if _dcdcb ==_gfcb {goto _eeda ;};_degee ._eedfd =-1;_dcdcb =-1;goto _gbef ;};};if _gaeb >=2{_d .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_dgfdd ,_ebed (_ecaca ));};_adba :=_dgfdd ;_gfbga :=_acgfg ;_ =_gfbga ;_acgfg -=_cegc [_dgfdd ];if _acgfg +1>=len (_eggbd ){_afcab :=make ([]yySymType ,len (_eggbd )*2);copy (_afcab ,_eggbd );_eggbd =_afcab ;};_dafaf =_eggbd [_acgfg +1];_dgfdd =_bfeg [_dgfdd ];_gafdg :=_cfcg [_dgfdd ];_gdcg :=_gafdg +_eggbd [_acgfg ]._bgfbe +1;if _gdcg >=_cdcf {_ecaca =_cebb [_gafdg ];}else {_ecaca =_cebb [_gdcg ];if _ddbef [_ecaca ]!=-_dgfdd {_ecaca =_cebb [_gafdg ];};};switch _adba {case 1:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{yylex .(*plex )._fdfbc =_dafaf ._eece ;};case 3:_dfgb =_eggbd [_gfbga -2:_gfbga +1];{_dafaf ._eece =_dfgb [2]._eece ;};case 4:_dfgb =_eggbd [_gfbga -4:_gfbga +1];{};case 5:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewBool (_dfgb [1]._bbded ._gfaf );};case 6:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewNumber (_dfgb [1]._bbded ._gfaf );};case 7:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewString (_dfgb [1]._bbded ._gfaf );};case 8:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewError (_dfgb [1]._bbded ._gfaf );};case 9:_dfgb =_eggbd [_gfbga -2:_gfbga +1];{_dafaf ._eece =_dfgb [2]._eece ;};case 10:_dfgb =_eggbd [_gfbga -2:_gfbga +1];{_dafaf ._eece =NewNegate (_dfgb [2]._eece );};case 15:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =_dfgb [2]._eece ;};case 17:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewConstArrayExpr (_dfgb [2]._cdabg );};case 18:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._cdabg =append (_dafaf ._cdabg ,_dfgb [1]._gaeg );};case 19:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._cdabg =append (_dfgb [1]._cdabg ,_dfgb [3]._gaeg );};case 20:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._gaeg =append (_dafaf ._gaeg ,_dfgb [1]._eece );};case 21:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._gaeg =append (_dfgb [1]._gaeg ,_dfgb [3]._eece );};case 23:_dfgb =_eggbd [_gfbga -2:_gfbga +1];{_dafaf ._eece =NewPrefixExpr (_dfgb [1]._eece ,_dfgb [2]._eece );};case 25:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewSheetPrefixExpr (_dfgb [1]._bbded ._gfaf );};case 26:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewCellRef (_dfgb [1]._bbded ._gfaf );};case 27:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewRange (_dfgb [1]._eece ,_dfgb [3]._eece );};case 28:_dfgb =_eggbd [_gfbga -4:_gfbga +1];{_dafaf ._eece =NewPrefixRangeExpr (_dfgb [1]._eece ,_dfgb [2]._eece ,_dfgb [4]._eece );};case 29:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewNamedRangeRef (_dfgb [1]._bbded ._gfaf );};case 30:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewHorizontalRange (_dfgb [1]._bbded ._gfaf );};case 31:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._eece =NewVerticalRange (_dfgb [1]._bbded ._gfaf );};case 32:_dfgb =_eggbd [_gfbga -2:_gfbga +1];{_dafaf ._eece =NewPrefixHorizontalRange (_dfgb [1]._eece ,_dfgb [2]._bbded ._gfaf );};case 33:_dfgb =_eggbd [_gfbga -2:_gfbga +1];{_dafaf ._eece =NewPrefixVerticalRange (_dfgb [1]._eece ,_dfgb [2]._bbded ._gfaf );};case 34:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypePlus ,_dfgb [3]._eece );};case 35:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeMinus ,_dfgb [3]._eece );};case 36:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeMult ,_dfgb [3]._eece );};case 37:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeDiv ,_dfgb [3]._eece );};case 38:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeExp ,_dfgb [3]._eece );};case 39:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeLT ,_dfgb [3]._eece );};case 40:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeGT ,_dfgb [3]._eece );};case 41:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeLEQ ,_dfgb [3]._eece );};case 42:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeGEQ ,_dfgb [3]._eece );};case 43:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeEQ ,_dfgb [3]._eece );};case 44:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeNE ,_dfgb [3]._eece );};case 45:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewBinaryExpr (_dfgb [1]._eece ,BinOpTypeConcat ,_dfgb [3]._eece );};case 47:_dfgb =_eggbd [_gfbga -2:_gfbga +1];{_dafaf ._eece =NewFunction (_dfgb [1]._bbded ._gfaf ,nil );};case 48:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._eece =NewFunction (_dfgb [1]._bbded ._gfaf ,_dfgb [2]._gaeg );};case 49:_dfgb =_eggbd [_gfbga -1:_gfbga +1];{_dafaf ._gaeg =append (_dafaf ._gaeg ,_dfgb [1]._eece );};case 50:_dfgb =_eggbd [_gfbga -3:_gfbga +1];{_dafaf ._gaeg =append (_dfgb [1]._gaeg ,_dfgb [3]._eece );};case 53:_dfgb =_eggbd [_gfbga -0:_gfbga +1];{_dafaf ._eece =NewEmptyExpr ();};};goto _accd ;};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};func _agab (_eedd []Result ,_dbgfe countMode )float64 {_dbbd :=0.0;for _ ,_ecbab :=range _eedd {switch _ecbab .Type {case ResultTypeNumber :if _dbgfe ==_abgd ||(_dbgfe ==_cefc &&!_ecbab .IsBoolean ){_dbbd ++;};case ResultTypeList ,ResultTypeArray :_dbbd +=_agab (_ecbab .ListValues (),_dbgfe );case ResultTypeString :if _dbgfe ==_abgd {_dbbd ++;};case ResultTypeEmpty :if _dbgfe ==_dgdef {_dbbd ++;};};};return _dbbd ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_aecc CellRef )Update (q *_g .UpdateQuery )Expression {if q .UpdateCurrentSheet {_aecc ._bbc =_bcd (_aecc ._bbc ,q );};return _aecc ;};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbcdg :=args [0].AsNumber ();if _bbcdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbdf :=float64 (1);if _bbcdg .ValueNumber < 0{_cbdf =-1;};if len (args )> 1{_daec :=args [1].AsNumber ();if _daec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbdf =_bf .Abs (_daec .ValueNumber );};if len (args )==1{return MakeNumberResult (_bf .Ceil (_bbcdg .ValueNumber ));};_gdca :=_bbcdg .ValueNumber ;_gdca ,_gfgad :=_bf .Modf (_gdca /_cbdf );if _gfgad !=0{if _bbcdg .ValueNumber > 0{_gdca ++;};};return MakeNumberResult (_gdca *_cbdf );};

// Reference returns a string reference value to an expression with prefix.
func (_ecccf PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_efgfc :=_ecccf ._eaeb .Reference (ctx ,ev );_deec :=_ecccf ._eaagc .Reference (ctx ,ev );if _efgfc .Type ==ReferenceTypeSheet &&_deec .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_efgfc .Value +"\u0021"+_deec .Value };};return ReferenceInvalid ;};const _dgfde =57375;

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _fgbfd (args ,_ebcga )};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_fcab ,_caca ,_cded :=_egge (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _cded .Type ==ResultTypeError {return _cded ;};if _fcab ==0{return MakeNumberResult (0);};_agdg :=_fcab < 0;if _agdg {_fcab =-_fcab ;};_feg :=float64 (int (_fcab ));_dag :=args [0].Value ();_ccfag :=_eb .Split (_dag ,"\u002e");_gedg :=_ccfag [1];_gegc ,_gggfg :=_a .ParseFloat (_gedg ,64);if _gggfg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_ccg :=float64 (len (_gedg ));_gegc /=_bf .Pow (10,_ccg );_ceccd :=_gegc *_caca /_bf .Pow (10,float64 (int (_bf .Log10 (_caca )))+1)+_feg ;if _agdg {_ceccd =-_ceccd ;};return MakeNumberResult (_ceccd );};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_egcc ,_ffea :=_fcac (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _ffea .Type ==ResultTypeError {return _ffea ;};_dfg :=_egcc ._gegf ;_cbfge :=_egcc ._ecfb ;_gagae :=_egcc ._abae ;_bcec :=_egcc ._affb ;_fbce :=_egcc ._egfg ;_dbec :=_egcc ._aagd ;_eafdg :=_cca (_dfg ,_cbfge ,_gagae ,0,_dbec );_ceda :=0.0;if _bcec ==1{if _dbec ==0{_ceda =-_gagae ;_bcec ++;};};for _ebda :=_bcec ;_ebda <=_fbce ;_ebda ++{if _dbec ==1{_ceda +=_aafb (_dfg ,_ebda -2,_eafdg ,_gagae ,1)-_eafdg ;}else {_ceda +=_aafb (_dfg ,_ebda -1,_eafdg ,_gagae ,0);};};_ceda *=_dfg ;return MakeNumberResult (_ceda );};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _acgb (){_bfc ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_dc .MustCompile ("\u005e"+_eda +_eef );_bfc ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_dc .MustCompile ("\u005e"+_gga +_eef );_bfc ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_dc .MustCompile ("\u005e"+_aeb +_eef );_bfc ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_dc .MustCompile ("\u005e"+_ebb +_eef );_fggc ["\u0068\u0068"]=_dc .MustCompile (_gcc +_acc +"\u0024");_fggc ["\u0068\u0068\u003am\u006d"]=_dc .MustCompile (_gcc +_cbf +"\u0024");_fggc ["\u006d\u006d\u003as\u0073"]=_dc .MustCompile (_gcc +_fbea +"\u0024");_fggc ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_dc .MustCompile (_gcc +_gba +"\u0024");_dba =[]*_dc .Regexp {_dc .MustCompile ("\u005e"+_eda +"\u0024"),_dc .MustCompile ("\u005e"+_gga +"\u0024"),_dc .MustCompile ("\u005e"+_aeb +"\u0024"),_dc .MustCompile ("\u005e"+_ebb +"\u0024")};_age =[]*_dc .Regexp {_dc .MustCompile ("\u005e"+_acc +"\u0024"),_dc .MustCompile ("\u005e"+_cbf +"\u0024"),_dc .MustCompile ("\u005e"+_fbea +"\u0024"),_dc .MustCompile ("\u005e"+_gba +"\u0024")};};const _adcb =57357;func _abd (_gdc ,_cbfd ,_cde int )bool {if _cbfd < 1||_cbfd > 12{return false ;};if _cde < 1{return false ;};return _cde <=_eed (_gdc ,_cbfd );};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_baac :=len (args );if _baac < 2||_baac > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egeb :=args [0];if _egeb .Type !=ResultTypeArray &&_egeb .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fdfdd :=args [1].AsNumber ();if _fdfdd .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bffag :=int (_fdfdd .ValueNumber )-1;_agbf :=-1;if _baac ==3&&args [2].Type !=ResultTypeEmpty {_beea :=args [2].AsNumber ();if _beea .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agbf =int (_beea .ValueNumber )-1;};if _bffag ==-1&&_agbf ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _aggc []Result ;if _egeb .Type ==ResultTypeArray {_egag :=_egeb .ValueArray ;if _bffag < -1||_bffag >=len (_egag ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bffag ==-1{if _agbf >=len (_egag [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_dabd :=[][]Result {};for _ ,_adbb :=range _egag {_bgdd :=_adbb [_agbf ];if _bgdd .Type ==ResultTypeEmpty {_bgdd =MakeNumberResult (0);};_dabd =append (_dabd ,[]Result {_bgdd });};return MakeArrayResult (_dabd );};_aggc =_egag [_bffag ];}else {_gagbe :=_egeb .ValueList ;if _bffag < -1||_bffag >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bffag ==-1{if _agbf >=len (_gagbe ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_gdbf :=_gagbe [_agbf ];if _gdbf .Type ==ResultTypeEmpty {_gdbf =MakeNumberResult (0);};return _gdbf ;};_aggc =_gagbe ;};if _agbf < -1||_agbf > len (_aggc ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _agbf ==-1{_ebefe :=[]Result {};for _ ,_acfae :=range _aggc {if _acfae .Type ==ResultTypeEmpty {_ebefe =append (_ebefe ,MakeNumberResult (0));}else {_ebefe =append (_ebefe ,_acfae );};};return MakeArrayResult ([][]Result {_ebefe });};_eddf :=_aggc [_agbf ];if _eddf .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _eddf ;};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efa :=int (args [0].ValueNumber );if _efa < 0||_efa >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _efa <=1899{_efa +=1900;};_bfee :=_dg .Month (args [1].ValueNumber );_dcdbg :=int (args [2].ValueNumber );_afcb :=_dgad (_efa ,_bfee ,_dcdbg );_fdfe :=_gbb (_aaf ,_afcb )+1;if _fdfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_fdfe );};func _fcfg (_dbae Result ,_fea ,_afg string )(float64 ,Result ){var _ggec float64 ;switch _dbae .Type {case ResultTypeNumber :_ggec =float64 (int (_dbae .ValueNumber ));case ResultTypeString :_cfe :=DateValue ([]Result {_dbae });if _cfe .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_fea +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_afg );};_ggec =_cfe .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_afg );};if _ggec < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_fea +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _ggec ,_ebce ;};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_ecabg *ivr )GetLabelPrefix (cellRef string )string {return ""};

// IsDBCS returns false for the invalid reference context.
func (_edcf *ivr )IsDBCS ()bool {return false };

// FunctionCall is a function call expression.
type FunctionCall struct{_ecfc string ;_fgaf []Expression ;};func _fgbfd (_bfbbb []Result ,_becg rmode )Result {if len (_bfbbb )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_adfb :=_bfbbb [0].AsNumber ();if _adfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_baea :=_bfbbb [1].AsNumber ();if _baea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eegea :=_baea .ValueNumber ;_dccd :=_adfb .ValueNumber ;_babb :=1.0;if _eegea > 0{_babb =_bf .Pow (1/10.0,_eegea );}else {_babb =_bf .Pow (10.0,-_eegea );};_dccd ,_aefb :=_bf .Modf (_dccd /_babb );switch _becg {case _ebcga :const _eggd =0.499999999;if _aefb >=_eggd {_dccd ++;}else if _aefb <=-_eggd {_dccd --;};case _gdbe :case _ddff :if _aefb > 0{_dccd ++;}else if _aefb < 0{_dccd --;};};return MakeNumberResult (_dccd *_babb );};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_fdca PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gfdea :=_fdca ._fcfee .Reference (ctx ,ev );switch _gfdea .Type {case ReferenceTypeSheet :_afcad :=_fdca .horizontalRangeReference (_gfdea .Value );if _bcbf ,_aaec :=ev .GetFromCache (_afcad );_aaec {return _bcbf ;};_cgecb :=ctx .Sheet (_gfdea .Value );_ccdf ,_gced :=_bbdfa (_cgecb ,_fdca ._dgcfe ,_fdca ._cbad );_acdde :=_fggca (_cgecb ,ev ,_ccdf ,_gced );ev .SetCache (_afcad ,_acdde );return _acdde ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gfdea .Type ));};};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgbfc :=_fbbc (args );_c .Float64s (_fgbfc );var _efbb float64 ;if len (_fgbfc )%2==0{_efbb =(_fgbfc [len (_fgbfc )/2-1]+_fgbfc [len (_fgbfc )/2])/2;}else {_efbb =_fgbfc [len (_fgbfc )/2];};return MakeNumberResult (_efbb );};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acee :=0;_bdagb :=false ;for _ ,_gdaaf :=range args {switch _gdaaf .Type {case ResultTypeList ,ResultTypeArray :_deed :=Xor (_gdaaf .ListValues ());if _deed .Type ==ResultTypeError {return _deed ;};if _deed .ValueNumber !=0{_acee ++;};_bdagb =true ;case ResultTypeNumber :if _gdaaf .ValueNumber !=0{_acee ++;};_bdagb =true ;case ResultTypeString :case ResultTypeError :return _gdaaf ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_bdagb {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_acee %2!=0);};func _bba (_fbb string )bool {for _ ,_cdd :=range _dba {_gdf :=_cdd .FindStringSubmatch (_fbb );if len (_gdf )> 1{return true ;};};return false ;};var _age =[]*_dc .Regexp {};

// String returns an empty string for Error.
func (_ccb Error )String ()string {return ""};func _fbbc (_adfdc []Result )[]float64 {_cggc :=make ([]float64 ,0);for _ ,_ecbc :=range _adfdc {if _ecbc .Type ==ResultTypeEmpty {continue ;};_ecbc =_ecbc .AsNumber ();switch _ecbc .Type {case ResultTypeNumber :if !_ecbc .IsBoolean {_cggc =append (_cggc ,_ecbc .ValueNumber );};case ResultTypeList ,ResultTypeArray :_cggc =append (_cggc ,_fbbc (_ecbc .ListValues ())...);case ResultTypeString :default:_fg .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecbc .Type );};};return _cggc ;};var _ebce Result =MakeEmptyResult ();

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_edegc :=args [0].AsString ();if _edegc .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbgb :=_e .Buffer {};_cdab :=false ;_acfbf :=false ;_gafa :=0;for _ ,_efgd :=range _edegc .ValueString {_gaafa :=_efgd ==' ';if _gaafa {if !_cdab {continue ;};if !_acfbf {_gafa ++;_dbgb .WriteRune (_efgd );};}else {_gafa =0;_cdab =true ;_dbgb .WriteRune (_efgd );};_acfbf =_gaafa ;};_dbgb .Truncate (_dbgb .Len ()-_gafa );return MakeStringResult (_dbgb .String ());};var _fbcf =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_edgff :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_aagfe :=args [1].ValueNumber !=0;_ceada :=_deade (args [2:],[]string {},_aagfe );return MakeStringResult (_eb .Join (_ceada ,_edgff ));};

// Eval evaluates and returns the result of an empty expression.
func (_aad EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_gfb Context ,formula string )Result ;SetCache (_fdcd string ,_bda Result );GetFromCache (_cda string )(Result ,bool );LastEvalIsRef ()bool ;};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_cebc :=args [0];if _cebc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_feee :=int (_cebc .ValueNumber );if len (args )<=_feee {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_feee ];};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// String returns a string representation of ConstArrayExpr.
func (_gded ConstArrayExpr )String ()string {return ""};var _cfcg =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _gabb (_egef ,_dbc float64 ,_abbcd ,_fbbd int )float64 {_dffg :=_bbca (_egef );_aag :=_bbca (_dbc );_fadc :=_aefg (_dffg ,_aag ,_abbcd );return _gcac (_dffg ,_fadc ,_fbbd );};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0049\u0046\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbbb :=args [0];switch _gbbb .Type {case ResultTypeError :return _gbbb ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gbbb .ValueNumber !=0);};if _gbbb .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _gfgae (args );case ResultTypeArray :return _cecff (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afdg :=args [0].Ref ;if _afdg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_afdg .Value ));};type ri struct{_eabc float64 ;_fage string ;};

// Eval evaluates and returns a boolean.
func (_bbg Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_bbg ._fc )};func (_ccad VerticalRange )verticalRangeReference ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_ccad ._bbaf ,_ccad ._abeb );};func (_afacc tokenType )String ()string {return _beaa (int (_afacc ))};type defEval struct{evCache ;_ecg bool ;};func _eed (_gbga ,_fce int )int {if _fce ==2&&_ccfa (_gbga ){return 29;}else {return _ceab [_fce -1];};};func _abdb (_gdgf ,_bge ,_bca int )int {if _gdgf > _bge {return 0;};if _bbb (_bca ){return (_bge -_gdgf +1)*360;};_eegg :=0;for _fbfdd :=_gdgf ;_fbfdd <=_bge ;_fbfdd ++{_ada :=365;if _ccfa (_fbfdd ){_ada =366;};_eegg +=_ada ;};return _eegg ;};

// Reference returns a string reference value to a range.
func (_gcfcd Range )Reference (ctx Context ,ev Evaluator )Reference {_bcbde :=_gcfcd ._cgee .Reference (ctx ,ev );_dgccc :=_gcfcd ._ccgcd .Reference (ctx ,ev );if _bcbde .Type ==ReferenceTypeCell &&_dgccc .Type ==ReferenceTypeCell {return MakeRangeReference (_cece (_bcbde ,_dgccc ));};return ReferenceInvalid ;};const _cdcf =187;

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abacf :=true ;for _ ,_bffeg :=range args {_bffeg =_bffeg .AsNumber ();switch _bffeg .Type {case ResultTypeList ,ResultTypeArray :_gecgg :=And (_bffeg .ListValues ());if _gecgg .Type ==ResultTypeError {return _gecgg ;};if _gecgg .ValueNumber ==0{_abacf =false ;};case ResultTypeNumber :if _bffeg .ValueNumber ==0{_abacf =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _bffeg ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_abacf );};func _gcff (_bae []Result ,_dfag string )(*amorArgs ,Result ){_decd :=len (_bae );if _decd !=6&&_decd !=7{return nil ,MakeErrorResult (_dfag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bae [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfag +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfc :=_bae [0].ValueNumber ;if _cfc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dfag +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_acac ,_cagcf :=_fcfg (_bae [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_dfag );if _cagcf .Type ==ResultTypeError {return nil ,_cagcf ;};_fca ,_cagcf :=_fcfg (_bae [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_dfag );if _cagcf .Type ==ResultTypeError {return nil ,_cagcf ;};if _fca < _acac {return nil ,MakeErrorResultType (ErrorTypeNum ,_dfag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _bae [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gggf :=_bae [3].ValueNumber ;if _gggf < 0||_gggf > _cfc {return nil ,MakeErrorResultType (ErrorTypeNum ,_dfag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _bae [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afgb :=int (_bae [4].ValueNumber );if _afgb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dfag +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _bae [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfag +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aabee :=_bae [5].ValueNumber ;if _aabee < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dfag +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_bbbg :=0;if _decd ==7&&_bae [6].Type !=ResultTypeEmpty {if _bae [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dfag +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbbg =int (_bae [6].ValueNumber );if !_egfe (_bbbg )||_bbbg ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dfag );};};return &amorArgs {_cfc ,_acac ,_fca ,_gggf ,_afgb ,_aabee ,_bbbg },_ebce ;};func _gdbff (_cdga []Result ,_badac bool )Result {_acfdf :="\u004d\u0041\u0058";if _badac {_acfdf ="\u004d\u0041\u0058\u0041";};if len (_cdga )==0{return MakeErrorResult (_acfdf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cccfa :=-_bf .MaxFloat64 ;for _ ,_deda :=range _cdga {switch _deda .Type {case ResultTypeNumber :if (_badac ||!_deda .IsBoolean )&&_deda .ValueNumber > _cccfa {_cccfa =_deda .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fcaaf :=_gdbff (_deda .ListValues (),_badac );if _fcaaf .ValueNumber > _cccfa {_cccfa =_fcaaf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_cadbd :=0.0;if _badac {_cadbd =_deda .AsNumber ().ValueNumber ;};if _cadbd > _cccfa {_cccfa =_cadbd ;};default:_fg .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_acfdf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_deda .Type );};};if _cccfa ==-_bf .MaxFloat64 {_cccfa =0;};return MakeNumberResult (_cccfa );};func _dgeg (_ffff float64 )float64 {_efcf :=float64 (1);for _degbf :=float64 (2);_degbf <=_ffff ;_degbf ++{_efcf *=_degbf ;};return _efcf ;};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_fcg string ,_cccg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ced string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_dg .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_ef int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_fa string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dgd string )string ;

// GetFormat returns if cell is protected.
GetLocked (_bbcb string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_dcc string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_caa string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_agf ,_cea int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_bcf string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_eaeg string ,_ebe bool );

// NamedRange returns a named range.
NamedRange (_aace string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_bg ,_dcf uint32 );};var _effc =false ;

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_eaegf :=args [0].Ref ;if _eaegf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_cfdab ,_aebf :=_gd .ParseCellReference (_eaegf .Value );if _aebf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_eaegf .Value );};return MakeNumberResult (float64 (_cfdab .RowIdx ));};func init (){_cffa ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};func _cafeg (_ggcff _dg .Time )_dg .Time {_ggcff =_ggcff .UTC ();return _dg .Date (_ggcff .Year (),_ggcff .Month (),_ggcff .Day (),_ggcff .Hour (),_ggcff .Minute (),_ggcff .Second (),_ggcff .Nanosecond (),_dg .Local );};const (_ebcga rmode =iota ;_gdbe ;_ddff ;);type criteriaParsed struct{_ffcae bool ;_dgbb float64 ;_aead string ;_gbbe *criteriaRegex ;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbca :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfa :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abfe :=args [2].ValueNumber ;if _abfe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_dbca -_acfa )/_abfe );};func _cfge (_febd Result )Result {if _febd .Type ==ResultTypeEmpty {return _febd ;};_ccff :=_febd .AsString ();if _ccff .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _febd .IsBoolean {if _ccff .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _ccff .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_eb .ToLower (_ccff .ValueString ));};};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbc :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fadd :=args [2].ValueNumber +1;if _fadd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bfgb :=_bcdaf (args [0]);_fgac :=float64 (len (_bfgb ));_afga ,_cgff :=0.0,0.0;_gffb ,_gddgb :=1.0,1.0;_daea ,_cedb :=false ,false ;for _ ,_fgffb :=range _bfgb {for _ ,_fcad :=range _fgffb {if _fcad .Type ==ResultTypeNumber &&!_fcad .IsBoolean {_bfbcc :=_fcad .ValueNumber ;if _bfbcc ==0{continue ;}else {if _bfbcc > 0{_daea =true ;_cgff +=_fcad .ValueNumber *_gddgb ;}else {_cedb =true ;_afga +=_fcad .ValueNumber *_gffb ;};_gffb /=_cbc ;_gddgb /=_fadd ;};};};};if !_daea ||!_cedb {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bcafb :=-_cgff /_afga ;_bcafb *=_bf .Pow (_fadd ,_fgac -1);_bcafb =_bf .Pow (_bcafb ,1/(_fgac -1));return MakeNumberResult (_bcafb -1);};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_aaggd :=args [0].AsNumber ();if _aaggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_cdfe :=float64 (1);if _aaggd .ValueNumber < 0{_cdfe =-1;};if len (args )> 1{_gefa :=args [1].AsNumber ();if _gefa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cdfe =_gefa .ValueNumber ;};if _cdfe < 0&&_aaggd .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_bf .Ceil (_aaggd .ValueNumber ));};_cfce :=_aaggd .ValueNumber ;_cfce ,_bcgdg :=_bf .Modf (_cfce /_cdfe );if _bcgdg > 0{_cfce ++;};return MakeNumberResult (_cfce *_cdfe );};

// String returns a string representation for Bool.
func (_aee Bool )String ()string {if _aee ._fc {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_bada ,_fga :=_gcff (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _fga .Type ==ResultTypeError {return _fga ;};_eafd :=_bada ._fac ;_eee :=_bada ._fbbdc ;_gddgd :=_bada ._bffa ;_ddfc :=_bada ._gfed ;_dbfg :=_bada ._dcba ;_bcde :=_bada ._bgee ;if _bcde >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_gaga :=_bada ._cagc ;_efd :=1.0/_bcde ;_fbgg :=2.5;if _efd < 3{_fbgg =1;}else if _efd < 5{_fbgg =1.5;}else if _efd <=6{_fbgg =2;};_bcde *=_fbgg ;_ace ,_agdd :=_cfgb (_eee ,_gddgd ,_gaga );if _agdd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_cedc :=_cedg (_ace *_bcde *_eafd );_eafd -=_cedc ;_ccca :=_eafd -_ddfc ;for _bdeg :=0;_bdeg < _dbfg ;_bdeg ++{_cedc =_cedg (_bcde *_eafd );_ccca -=_cedc ;if _ccca < 0{switch _dbfg -_bdeg {case 0:case 1:return MakeNumberResult (_cedg (_eafd *0.5));default:return MakeNumberResult (0);};};_eafd -=_cedc ;};return MakeNumberResult (_cedc );};func _ge (_ad BinOpType ,_ebc ,_fgf []Result )Result {_bbef :=[]Result {};for _dga :=range _ebc {_cab :=_ebc [_dga ].AsNumber ();_caf :=_fgf [_dga ].AsNumber ();if _cab .Type !=ResultTypeNumber ||_caf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ad {case BinOpTypePlus :_bbef =append (_bbef ,MakeNumberResult (_cab .ValueNumber +_caf .ValueNumber ));case BinOpTypeMinus :_bbef =append (_bbef ,MakeNumberResult (_cab .ValueNumber -_caf .ValueNumber ));case BinOpTypeMult :_bbef =append (_bbef ,MakeNumberResult (_cab .ValueNumber *_caf .ValueNumber ));case BinOpTypeDiv :if _caf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bbef =append (_bbef ,MakeNumberResult (_cab .ValueNumber /_caf .ValueNumber ));case BinOpTypeExp :_bbef =append (_bbef ,MakeNumberResult (_bf .Pow (_cab .ValueNumber ,_caf .ValueNumber )));case BinOpTypeLT :_bbef =append (_bbef ,MakeBoolResult (_cab .ValueNumber < _caf .ValueNumber ));case BinOpTypeGT :_bbef =append (_bbef ,MakeBoolResult (_cab .ValueNumber > _caf .ValueNumber ));case BinOpTypeEQ :_bbef =append (_bbef ,MakeBoolResult (_cab .ValueNumber ==_caf .ValueNumber ));case BinOpTypeLEQ :_bbef =append (_bbef ,MakeBoolResult (_cab .ValueNumber <=_caf .ValueNumber ));case BinOpTypeGEQ :_bbef =append (_bbef ,MakeBoolResult (_cab .ValueNumber >=_caf .ValueNumber ));case BinOpTypeNE :_bbef =append (_bbef ,MakeBoolResult (_cab .ValueNumber !=_caf .ValueNumber ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ad ));};};return MakeListResult (_bbef );};func _dcfg (_feaeb ,_dfae []float64 ,_adfe float64 )float64 {_adef :=_adfe +1;_eec :=_feaeb [0];_ccd :=len (_feaeb );_adce :=_dfae [0];for _fecf :=1;_fecf < _ccd ;_fecf ++{_eec +=_feaeb [_fecf ]/_bf .Pow (_adef ,(_dfae [_fecf ]-_adce )/365);};return _eec ;};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_egabd NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_cgbc :=ctx .NamedRange (_egabd ._gccd );_beba :=_cgbc .Value ;if _gbcb ,_gacd :=ev .GetFromCache (_beba );_gacd {return _gbcb ;};_daade :=_eb .Split (_beba ,"\u0021");if len (_daade )!=2{return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_beba ));};_gdgc :=ctx .Sheet (_daade [0]);_cgag :=_eb .Split (_daade [1],"\u003a");switch len (_cgag ){case 1:_agfg :=ev .Eval (_gdgc ,_cgag [0]);ev .SetCache (_beba ,_agfg );return _agfg ;case 2:_eefd :=_fggca (_gdgc ,ev ,_cgag [0],_cgag [1]);ev .SetCache (_beba ,_eefd );return _eefd ;};return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_cgbc .Type ));};func _aeff (_efegg float64 ,_eded *criteriaRegex )bool {_cefbf ,_gbff :=_a .ParseFloat (_eded ._cgdf ,64);if _gbff !=nil {return false ;};switch _eded ._agbag {case _cccgda :return _efegg ==_cefbf ;case _adfd :return _efegg <=_cefbf ;case _baab :return _efegg >=_cefbf ;case _fdga :return _efegg < _cefbf ;case _cbgb :return _efegg > _cefbf ;};return false ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};func _bcaf (_ddga ,_ebg float64 ,_bfdg ,_cccb int )float64 {_abfcf :=_bbca (_ddga );_ceabg :=_bbca (_ebg );if _cccb ==1{_ebdb :=_cgb (_abfcf ,_ceabg ,_bfdg ,1);_dff :=_ebdb .AddDate (0,12/_bfdg ,0);return _gcac (_ebdb ,_dff ,_cccb );};return float64 (_dbbe (0,_cccb ))/float64 (_bfdg );};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afgg :=args [0].Ref ;if _afgg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_afgg .Value ,ev ).IsBoolean );};

// String returns an empty string for EmptyExpr.
func (_da EmptyExpr )String ()string {return ""};var _fcce ,_beeaa ,_dgac ,_gbee ,_aadgf ,_bdb ,_fcga ,_ecege ,_dcbaf ,_abeg ,_gefg ,_fgdb ,_cecf ,_bged ,_dggga *_dc .Regexp ;var _cebb =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};func _gcgf (_df BinOpType ,_cad [][]Result ,_gaa Result )Result {_aed :=[][]Result {};for _ab :=range _cad {_geb :=_gec (_df ,_cad [_ab ],_gaa );if _geb .Type ==ResultTypeError {return _geb ;};_aed =append (_aed ,_geb .ValueList );};return MakeArrayResult (_aed );};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_gfcd :=len (args );if _gfcd !=3&&_gfcd !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egaee ,_gcga :=_ecdc (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _gcga .Type ==ResultTypeError {return _gcga ;};_dedff ,_gcga :=_ecdc (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _gcga .Type ==ResultTypeError {return _gcga ;};_gacef ,_gcga :=_ecdc (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _gcga .Type ==ResultTypeError {return _gcga ;};_fgbd :=0;if _gfcd ==3{return MakeStringResult (_eb .Replace (_egaee ,_dedff ,_gacef ,-1));}else {_begda ,_bgaa :=_bgadb (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _bgaa .Type ==ResultTypeError {return _bgaa ;};_fgbd =int (_begda );if _fgbd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_faecb :=_egaee ;_adfg :=_fgbd ;_aaeac :=-1;_gdbde :=len (_dedff );_bgade :=0;for {_adfg --;_cgec :=_eb .Index (_faecb ,_dedff );if _cgec ==-1{_aaeac =-1;break ;}else {_aaeac =_cgec +_bgade ;if _adfg ==0{break ;};_edae :=_gdbde +_cgec ;_bgade +=_edae ;_faecb =_faecb [_edae :];};};if _aaeac ==-1{return MakeStringResult (_egaee );}else {_aefgg :=_egaee [:_aaeac ];_dddce :=_egaee [_aaeac +_gdbde :];return MakeStringResult (_aefgg +_gacef +_dddce );};};};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};const _gfab =57353;type rmode byte ;const _bgca ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ccfd :=args [0];switch _ccfd .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_gacf :=_bbca (_ccfd .ValueNumber );return MakeNumberResult (float64 (_gacf .Minute ()));case ResultTypeString :_fccb :=_eb .ToLower (_ccfd .ValueString );if !_efb (_fccb ){_ ,_ ,_ ,_fcd ,_bfd :=_dbfc (_fccb );if _bfd .Type ==ResultTypeError {_bfd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _bfd ;};if _fcd {return MakeNumberResult (0);};};_ ,_bfa ,_ ,_ ,_ ,_bfac :=_efae (_fccb );if _bfac .Type ==ResultTypeError {return _bfac ;};return MakeNumberResult (float64 (_bfa ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _egfb :=0;_egfb < len (args )-1;_egfb +=2{if args [_egfb ].ValueNumber ==1{return args [_egfb +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_cgba :=len (args );if _cgba < 4||_cgba > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eecg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeac :=args [1].ValueNumber ;if _aeac <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbbb :=args [2].ValueNumber ;if _bbbb < _aeac {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cafe :=args [3].ValueNumber ;_cbbe :=0.0;if _cgba >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbbe =args [4].ValueNumber ;};_dgdf :=0;if _cgba ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgdf =int (args [5].ValueNumber );if _dgdf !=0{_dgdf =1;};};return MakeNumberResult (_cca (_eecg ,_bbbb ,_cafe ,_cbbe ,_dgdf )-_efgf (_eecg ,_aeac ,_bbbb ,_cafe ,_cbbe ,_dgdf ));};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_eb .Replace (v ,"\u0022\u0022","\u0022",-1);return String {v };};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfbfe :=args [0];_efgb :=args [1];if _efgb .Type !=ResultTypeArray &&_efgb .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gefcd :=_acdc (_efgb );_fada :=-1;for _dgfg ,_debe :=range _gefcd {if _egeg (_bfbfe ,_debe ,false ,false )==_cgbe {_fada =_dgfg ;};};if _fada ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_efga :=_gefcd ;if len (args )==3{_efga =_acdc (args [2]);};if _fada < 0||_fada >=len (_efga ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _efga [_fada ];};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdaa :=args [0].AsString ();if _fdaa .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_fdaa .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_fdaa .ValueString [0]));};

// Reference returns an invalid reference for Number.
func (_geccg Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_eddcg :=args [0];if _eddcg .Type !=ResultTypeNumber &&_eddcg .Type !=ResultTypeString &&_eddcg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_fbgga :=args [1].ValueString ;switch _eddcg .Type {case ResultTypeNumber :return MakeStringResult (_af .Number (_eddcg .ValueNumber ,_fbgga ));case ResultTypeString :return MakeStringResult (_af .String (_eddcg .ValueString ,_fbgga ));case ResultTypeEmpty :return MakeStringResult (_af .Number (0,_fbgga ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_adbc :=MakeNumberResult (0);for _ ,_bbdd :=range args {_bbdd =_bbdd .AsNumber ();switch _bbdd .Type {case ResultTypeNumber :_adbc .ValueNumber +=_bbdd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gdecf :=Sum (_bbdd .ListValues ());if _gdecf .Type !=ResultTypeNumber {return _gdecf ;};_adbc .ValueNumber +=_gdecf .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bbdd ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbdd .Type ));};};return _adbc ;};func _egfe (_dgde int )bool {return _dgde >=0&&_dgde <=4};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_agab (args ,_cefc ))};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_eafce PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_cgad :=_eafce ._bbcdc .Reference (ctx ,ev );_deefa :=_eafce ._bede .Reference (ctx ,ev );_fbcgf :=_eafce ._cagfa .Reference (ctx ,ev );switch _cgad .Type {case ReferenceTypeSheet :_gcfc :=_gcacg (_cgad ,_deefa ,_fbcgf );if _deefa .Type ==ReferenceTypeCell &&_fbcgf .Type ==ReferenceTypeCell {if _bdaea ,_ebga :=ev .GetFromCache (_gcfc );_ebga {return _bdaea ;}else {_bebbc :=_fggca (ctx .Sheet (_cgad .Value ),ev ,_deefa .Value ,_fbcgf .Value );ev .SetCache (_gcfc ,_bebbc );return _bebbc ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gcfc );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cgad .Type ));};};func init (){_eeee =_b .New (_b .NewSource (_dg .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_ccba ("\u0041\u0053\u0049\u004e",_bf .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_ccba ("\u0041\u0053\u0049\u004e",_bf .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_ccba ("\u0041\u0053\u0049\u004e",_bf .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_ccba ("\u0041\u0043\u004f\u0054",func (_cfbec float64 )float64 {return _bf .Pi /2-_bf .Atan (_cfbec )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_ccba ("\u0041\u0043\u004fT\u0048",func (_ggae float64 )float64 {return _bf .Atanh (1/_ggae )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_ccba ("\u0041\u0053\u0049\u004e",_bf .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_ccba ("\u0041\u0053\u0049N\u0048",_bf .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_ccba ("\u0041\u0054\u0041\u004e",_bf .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_ccba ("\u0041\u0054\u0041N\u0048",_bf .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_ccba ("\u0043\u004f\u0053",_bf .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_ccba ("\u0043\u004f\u0053\u0048",_bf .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_cabg ("\u0043\u004f\u0054",_bf .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_cabg ("\u0043\u004f\u0054\u0048",_bf .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_cabg ("\u0043\u0053\u0043",_bf .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_cabg ("\u0043\u0053\u0043",_bf .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_ccba ("\u0045\u0058\u0050",_bf .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_ccba ("\u004c\u004e",_bf .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_ccba ("\u004c\u004f\u00471\u0030",_bf .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_cabg ("\u0053\u0045\u0043",_bf .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_cabg ("\u0053\u0045\u0043\u0048",_bf .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_ccba ("\u0053\u0049\u004e",_bf .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_ccba ("\u0053\u0049\u004e\u0048",_bf .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_ccba ("\u0053\u0051\u0052\u0054",_bf .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_ccba ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_gead float64 )float64 {return _bf .Sqrt (_gead *_bf .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_ccba ("\u0054\u0041\u004e",_bf .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_ccba ("\u0054\u0041\u004e\u0048",_bf .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const (_ byte =iota ;_cccgda ;_adfd ;_baab ;_fdga ;_cbgb ;);

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_gccd string };func _bbca (_bbf float64 )_dg .Time {_cce :=int64 ((_bbf -_aae )*_agc );return _dg .Unix (0,_cce ).UTC ();};

// Eval evaluates a range returning a list of results or an error.
func (_bfcg Range )Eval (ctx Context ,ev Evaluator )Result {_dedag :=_bfcg ._cgee .Reference (ctx ,ev );_dcbc :=_bfcg ._ccgcd .Reference (ctx ,ev );_dbff :=_cece (_dedag ,_dcbc );if _dedag .Type ==ReferenceTypeCell &&_dcbc .Type ==ReferenceTypeCell {if _cgdg ,_eedba :=ev .GetFromCache (_dbff );_eedba {return _cgdg ;}else {_gfgc :=_fggca (ctx ,ev ,_dedag .Value ,_dcbc .Value );ev .SetCache (_dbff ,_gfgc );return _gfgc ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dbff );};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {return Range {from ,to }};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_bf .Pi );};var _febe []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Eval evaluates and returns the result of a sheet expression.
func (_ddbfe SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_gage :=MakeNumberResult (0);for _ ,_eefee :=range args {_eefee =_eefee .AsNumber ();switch _eefee .Type {case ResultTypeNumber :_gage .ValueNumber +=_eefee .ValueNumber *_eefee .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ccebd :=SumSquares (_eefee .ListValues ());if _ccebd .Type !=ResultTypeNumber {return _ccebd ;};_gage .ValueNumber +=_ccebd .ValueNumber ;case ResultTypeString :case ResultTypeError :return _eefee ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_eefee .Type ));};};return _gage ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ebgb :=args [0].AsNumber ();if _ebgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_adbg :=int (_ebgb .ValueNumber );_edcg :=make ([][]Result ,0,_adbg );for _faadd :=0;_faadd < _adbg ;_faadd ++{_agda :=make ([]Result ,_adbg );for _afagc :=0;_afagc < _adbg ;_afagc ++{if _faadd ==_afagc {_agda [_afagc ]=MakeNumberResult (1.0);}else {_agda [_afagc ]=MakeNumberResult (0.0);};};_edcg =append (_edcg ,_agda );};return MakeArrayResult (_edcg );};const _bdeaa =57350;

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebfg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfaa :=args [2].ValueNumber ;if _dfaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbbbg :=args [3].ValueNumber ;if _bbbbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bbbbg > _dfaa {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_bfbcb :=(_ebfg -_ecfd )*(_dfaa -_bbbbg +1)*2;_gaec :=_dfaa *(_dfaa +1);return MakeNumberResult (_bfbcb /_gaec );};func _gfa (_gea ,_ceb ,_fffa ,_fbad int )int {if !_bbb (_fbad ){return _fffa ;};_cgge :=_fffa ;_aeda :=_eed (_gea ,_ceb );if _cgge > 30||_fffa >=_aeda ||_cgge >=_aeda {_cgge =30;};return _cgge ;};var _aae float64 =25569.0;

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_cgee ,_ccgcd Expression };var _fbcbb =[...]struct{_eefc int ;_cgdef int ;_eecea string ;}{};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_bdf EmptyExpr )Update (q *_g .UpdateQuery )Expression {return _bdf };const _cfgca =57356;

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_cbcc Expression ;_geaf ,_aeca string ;};const _cbdb =57355;func _ecfdd (_cecgg Context ,_cgffca ,_afdb string )(string ,string ){_bbgc :=_cgffca +"\u0031";_bebae :=_cecgg .LastRow (_cgffca );_gfbc :=_afdb +_a .Itoa (_bebae );return _bbgc ,_gfbc ;};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_bgff :=args [0].ValueNumber ;if _bgff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_agfa :=float64 (int (args [1].ValueNumber ));if _agfa < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_bf .Pow (_bgff +1,1/_agfa )-1)*_agfa );};func _bcd (_gdb string ,_ag *_g .UpdateQuery )string {_gfg ,_ac :=_gd .ParseCellReference (_gdb );if _ac !=nil {return "\u0023\u0052\u0045F\u0021";};if _ag .UpdateType ==_g .UpdateActionRemoveColumn {_agg :=_ag .ColumnIdx ;_ecb :=_gfg .ColumnIdx ;if _ecb < _agg {return _gdb ;}else if _ecb ==_agg {return "\u0023\u0052\u0045F\u0021";}else {return _gfg .Update (_g .UpdateActionRemoveColumn ).String ();};};return _gdb ;};const _cebcbd =57352;

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbad :=args [0].AsNumber ();if _bbad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbgf :=args [1].AsNumber ();if _fbgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbaa :=int (_fbgf .ValueNumber );if _dbaa < 0||_dbaa > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_aacad :=0;if len (args )> 2{_efgc :=args [2].AsNumber ();if _efgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aacad =int (_efgc .ValueNumber );};_cbbdc :=_a .FormatInt (int64 (_bbad .ValueNumber ),_dbaa );if len (_cbbdc )< _aacad {_cbbdc =_eb .Repeat ("\u0030",_aacad -len (_cbbdc ))+_cbbdc ;};return MakeStringResult (_cbbdc );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);func (_ccgbg *Lexer )Next ()*node {_ccgbg ._ggbf .Lock ();defer _ccgbg ._ggbf .Unlock ();if len (_ccgbg ._fbfa )> 0{_bbcce :=_ccgbg ._fbfa [0];_ccgbg ._fbfa =_ccgbg ._fbfa [1:];return _bbcce ;};return _ccgbg .nextRaw ();};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbag :=false ;for _ ,_dggcg :=range args {switch _dggcg .Type {case ResultTypeList ,ResultTypeArray :_gedeb :=Or (_dggcg .ListValues ());if _gedeb .Type ==ResultTypeError {return _gedeb ;};if _gedeb .ValueNumber !=0{_gbag =true ;};case ResultTypeNumber :if _dggcg .ValueNumber !=0{_gbag =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _dggcg ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_gbag );};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {data }};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_abaad :=args [0];if _abaad .Type ==ResultTypeError ||_abaad .Type ==ResultTypeString {return _abaad ;};return _ebce ;};func (_bbcgb *yyParserImpl )Lookahead ()int {return _bbcgb ._eedfd };

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cgeb (args ,true )};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};func _dgad (_cdg int ,_fdb _dg .Month ,_bbcg int )int64 {if _cdg ==1900&&int (_fdb )<=2{_bbcg --;};_agdf :=_dg .Date (_cdg ,_fdb ,_bbcg ,0,0,0,0,_dg .UTC );return _agdf .Unix ();};

// Reference returns an invalid reference for Negate.
func (_ddeg Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eval evaluates and returns the result of a Negate expression.
func (_abde Negate )Eval (ctx Context ,ev Evaluator )Result {_bbadg :=_abde ._bcdd .Eval (ctx ,ev );if _bbadg .Type ==ResultTypeNumber {return MakeNumberResult (-_bbadg .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};type node struct{_aabge tokenType ;_gfaf string ;};func (_abf *evCache )SetCache (key string ,value Result ){_abf ._bcc .Lock ();_abf ._de [key ]=value ;_abf ._bcc .Unlock ();};func _gfgae (_cbfa []Result )Result {_bcgg :=_cbfa [0].ValueList ;_ccdgc :=len (_bcgg );switch len (_cbfa ){case 1:_ecgb :=[]Result {};for _ ,_ebffd :=range _bcgg {_ecgb =append (_ecgb ,MakeBoolResult (_ebffd .ValueNumber !=0));};return MakeListResult (_ecgb );case 2:_acgef :=_cbfa [1];switch _acgef .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_fbffg :=[]Result {};for _ ,_ggag :=range _bcgg {var _cceb Result ;if _ggag .ValueNumber ==0{_cceb =MakeBoolResult (false );}else {_cceb =_acgef ;};_fbffg =append (_fbffg ,_cceb );};return MakeListResult (_fbffg );case ResultTypeList :_dgee :=_bbfa (_acgef ,_ccdgc );_caae :=[]Result {};for _ggd ,_dbagg :=range _bcgg {var _afe Result ;if _dbagg .ValueNumber ==0{_afe =MakeBoolResult (false );}else {_afe =_dgee [_ggd ];};_caae =append (_caae ,_afe );};return MakeListResult (_caae );case ResultTypeArray :_eebb :=_daaa (_acgef ,len (_acgef .ValueArray ),_ccdgc );_cccag :=[][]Result {};for _ ,_faac :=range _eebb {_dcedd :=[]Result {};for _fcfa ,_agfdg :=range _bcgg {var _bbccc Result ;if _agfdg .ValueNumber ==0{_bbccc =MakeBoolResult (false );}else {_bbccc =_faac [_fcfa ];};_dcedd =append (_dcedd ,_bbccc );};_cccag =append (_cccag ,_dcedd );};return MakeArrayResult (_cccag );};case 3:_efec :=_cbfa [1];_egda :=_cbfa [2];_fbgb :=_ccda (_efec );_dddb :=_ccda (_egda );if _fbgb &&_dddb {_gaffd :=[]Result {};for _ ,_cffaf :=range _bcgg {var _beaed Result ;if _cffaf .ValueNumber ==0{_beaed =_egda ;}else {_beaed =_efec ;};_gaffd =append (_gaffd ,_beaed );};return MakeListResult (_gaffd );};if _efec .Type !=ResultTypeArray &&_egda .Type !=ResultTypeArray {_bggdg :=_bbfa (_efec ,_ccdgc );_cbfc :=_bbfa (_egda ,_ccdgc );_cfdfg :=[]Result {};for _ffba ,_badaf :=range _bcgg {var _bfbfb Result ;if _badaf .ValueNumber ==0{_bfbfb =_cbfc [_ffba ];}else {_bfbfb =_bggdg [_ffba ];};_cfdfg =append (_cfdfg ,_bfbfb );};return MakeListResult (_cfdfg );};_edeag :=len (_efec .ValueArray );if len (_egda .ValueArray )> _edeag {_edeag =len (_egda .ValueArray );};_fddf :=_daaa (_efec ,_edeag ,_ccdgc );_afddc :=_daaa (_egda ,_edeag ,_ccdgc );_cccd :=[][]Result {};for _edeg :=0;_edeg < _edeag ;_edeg ++{_aaff :=[]Result {};for _eada ,_gbeg :=range _bcgg {var _egdac Result ;if _gbeg .ValueNumber ==0{_egdac =_afddc [_edeg ][_eada ];}else {_egdac =_fddf [_edeg ][_eada ];};_aaff =append (_aaff ,_egdac );};_cccd =append (_cccd ,_aaff );};return MakeArrayResult (_cccd );};return MakeErrorResult ("");};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_cbbgb :=args [0];if _cbbgb .Type !=ResultTypeArray &&_cbbgb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fgcf :=_eafgf (args [1]);_bfda :=0;for _ ,_afegf :=range _bcdaf (_cbbgb ){for _ ,_gebc :=range _afegf {if _fggd (_gebc ,_fgcf ){_bfda ++;};};};return MakeNumberResult (float64 (_bfda ));};

// String returns a string representation of a vertical range with prefix.
func (_fddfe PrefixVerticalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fddfe ._cbcc .String (),_fddfe ._geaf ,_fddfe ._aeca );};type plex struct{_ecfda chan*node ;_fdfbc Expression ;};func _ccba (_aabed string ,_ccbag func (_daca float64 )float64 )Function {return func (_fgffbf []Result )Result {if len (_fgffbf )!=1{return MakeErrorResult (_aabed +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gddd :=_fgffbf [0].AsNumber ();switch _gddd .Type {case ResultTypeNumber :_aagc :=_ccbag (_gddd .ValueNumber );if _bf .IsNaN (_aagc ){return MakeErrorResult (_aabed +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _bf .IsInf (_aagc ,0){return MakeErrorResult (_aabed +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_aagc );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_aabed +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gddd ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aabed ,_gddd .Type ));};};};func (_ggde Result )AsString ()Result {switch _ggde .Type {case ResultTypeNumber :return MakeStringResult (_ggde .Value ());default:return _ggde ;};};

// String returns a string representation of a vertical range.
func (_dadgg VerticalRange )String ()string {return _dadgg .verticalRangeReference ()};const (_cefc countMode =iota ;_abgd ;_dgdef ;);func _fgebd (_fbgba string ,_bcafd []Result )(*parsedReplaceObject ,Result ){if len (_bcafd )!=4{return nil ,MakeErrorResult (_fbgba +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bcafd [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_fbgba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_fcae :=_bcafd [0].ValueString ;if _bcafd [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbgba +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_baabe :=int (_bcafd [1].ValueNumber )-1;if _bcafd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbgba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_eaga :=int (_bcafd [2].ValueNumber );if _bcafd [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_fbgba +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_bdae :=_bcafd [3].ValueString ;return &parsedReplaceObject {_fcae ,_baabe ,_eaga ,_bdae },_ebce ;};func _fcagf (_ecaa []Result )[]rangeIndex {_gdgdd :=[]rangeIndex {};_afgc :=len (_ecaa );for _ggda :=0;_ggda < _afgc -1;_ggda +=2{_befa :=[]rangeIndex {};_cadf :=_bcdaf (_ecaa [_ggda ]);_ccedg :=_eafgf (_ecaa [_ggda +1]);if _ggda ==0{for _beefa ,_bbdbf :=range _cadf {for _egea ,_fgfba :=range _bbdbf {if _fggd (_fgfba ,_ccedg ){_befa =append (_befa ,rangeIndex {_beefa ,_egea });};};};}else {for _ ,_bcdfc :=range _gdgdd {_gcag :=_cadf [_bcdfc ._effd ][_bcdfc ._daad ];if _fggd (_gcag ,_ccedg ){_befa =append (_befa ,_bcdfc );};};};if len (_befa )==0{return []rangeIndex {};};_gdgdd =_befa [:];};return _gdgdd ;};func (_gfe *evCache )GetFromCache (key string )(Result ,bool ){_gfe ._bcc .Lock ();_cbb ,_ffcf :=_gfe ._de [key ];_gfe ._bcc .Unlock ();return _cbb ,_ffcf ;};var (_gaeb =0;_gecfb =false ;);

// Error is an error expression.
type Error struct{_gdbd string };

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_fba :=len (args );if (_fba !=2&&_fba !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdc :=0;if _fba ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cdc =int (args [2].ValueNumber );if !_egfe (_cdc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_abfb :=args [1].ValueNumber ;_ddf ,_cgcb :=_cfgb (_gfbg ,_abfb ,_cdc );if _cgcb .Type ==ResultTypeError {return _cgcb ;};return MakeNumberResult (_ddf );};var _cdgbb =[...]string {};func (_aaag *Lexer )nextRaw ()*node {for len (_aaag ._bgeeb )!=0{_fgbdf :=<-_aaag ._bgeeb [len (_aaag ._bgeeb )-1];if _fgbdf !=nil {return _fgbdf ;};_aaag ._bgeeb =_aaag ._bgeeb [0:len (_aaag ._bgeeb )-1];};return <-_aaag ._ecbg ;};const _cfee =57368;

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfaf :=args [0].AsNumber ();if _dfaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_bf .Pi /180.0*_dfaf .ValueNumber );};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {e }};

// Eval evaluates a vertical range returning a list of results or an error.
func (_agcc VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_eagae :=_agcc .verticalRangeReference ();if _dadd ,_afadd :=ev .GetFromCache (_eagae );_afadd {return _dadd ;};_adfdg ,_efac :=_ecfdd (ctx ,_agcc ._bbaf ,_agcc ._abeb );_gbeef :=_fggca (ctx ,ev ,_adfdg ,_efac );ev .SetCache (_eagae ,_gbeef );return _gbeef ;};

// Reference returns a string reference value to a horizontal range.
func (_dade HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dade .horizontalRangeReference ()};};func _efae (_fdcb string )(int ,int ,float64 ,bool ,bool ,Result ){_gade :="";_befg :=[]string {};for _ecdgd ,_gbd :=range _fggc {_befg =_gbd .FindStringSubmatch (_fdcb );if len (_befg )> 1{_gade =_ecdgd ;break ;};};if _gade ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};_aafg :=_befg [1]=="";_befg =_befg [49:];_agd :=len (_befg );_ggg :=_befg [_agd -1];_bec :=_ggg =="\u0061\u006d";_fcb :=_ggg =="\u0070\u006d";var _fda ,_egab int ;var _dca float64 ;var _dgb error ;switch _gade {case "\u0068\u0068":_fda ,_dgb =_a .Atoi (_befg [0]);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};_egab =0;_dca =0;case "\u0068\u0068\u003am\u006d":_fda ,_dgb =_a .Atoi (_befg [0]);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};_egab ,_dgb =_a .Atoi (_befg [2]);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};_dca =0;case "\u006d\u006d\u003as\u0073":_fda =0;_egab ,_dgb =_a .Atoi (_befg [0]);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};_dca ,_dgb =_a .ParseFloat (_befg [2],64);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_fda ,_dgb =_a .Atoi (_befg [0]);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};_egab ,_dgb =_a .Atoi (_befg [2]);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};_dca ,_dgb =_a .ParseFloat (_befg [4],64);if _dgb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};};if _egab >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};if _bec ||_fcb {if _fda > 12||_dca >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );}else if _fda ==12{_fda =0;};}else if _fda >=24||_dca >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bgca );};return _fda ,_egab ,_dca ,_fcb ,_aafg ,_ebce ;};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gccc :=args [0];if _gccc .Type !=ResultTypeArray &&_gccc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cdae :=_bcdaf (_gccc );_fedb :=args [2];if _fedb .Type !=ResultTypeArray &&_fedb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gdebc :=_bcdaf (_fedb );_cacab :=_eafgf (args [1]);_cfab :=0.0;for _edgce ,_eaefd :=range _cdae {for _gegcf ,_bdc :=range _eaefd {if _fggd (_bdc ,_cacab ){_cfab +=_gdebc [_edgce ][_gegcf ].ValueNumber ;};};};return MakeNumberResult (_cfab );};func init (){_abcgb ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fbg :=_dg .Now ();_ ,_eede :=_fbg .Zone ();_dega :=_aae +float64 (_fbg .Unix ()+int64 (_eede ))/86400;return MakeNumberResult (_dega );};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {return PrefixRangeExpr {pfx ,from ,to }};

// Update updates the FunctionCall references after removing a row/column.
func (_aadb FunctionCall )Update (q *_g .UpdateQuery )Expression {_bbag :=[]Expression {};for _ ,_adace :=range _aadb ._fgaf {_afac :=_adace .Update (q );_bbag =append (_bbag ,_afac );};return FunctionCall {_ecfc :_aadb ._ecfc ,_fgaf :_bbag };};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};var _adbca =map[string ]Function {};

// GetWidth returns 0 for the invalid reference context.
func (_cdef *ivr )GetWidth (colIdx int )float64 {return float64 (0)};var _fede =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_cfed :=args [0].AsNumber ();if _cfed .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cagef :=10.0;if len (args )> 1{_eeeee :=args [1].AsNumber ();if _eeeee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_cagef =args [1].ValueNumber ;};if _cfed .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _cagef ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_bf .Log (_cfed .ValueNumber )/_bf .Log (_cagef ));};func _fggd (_abda Result ,_fggbc *criteriaParsed )bool {if _abda .IsBoolean {return false ;};_bcgeg :=_abda .Type ;if _fggbc ._ffcae {return _bcgeg ==ResultTypeNumber &&_abda .ValueNumber ==_fggbc ._dgbb ;}else if _bcgeg ==ResultTypeNumber {return _aeff (_abda .ValueNumber ,_fggbc ._gbbe );};return _adgg (_abda ,_fggbc );};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_fcgae PrefixHorizontalRange )Update (q *_g .UpdateQuery )Expression {return _fcgae };const _egdg =57362;

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_ccfcb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccfcb =int (args [1].ValueNumber );if _ccfcb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _ccfcb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_faeb :=args [0].Value ();_agag :=len (_faeb );if _ccfcb > _agag {return MakeStringResult (_faeb );};return MakeStringResult (_faeb [_agag -_ccfcb :_agag ]);};

// Eval evaluates and returns the result of the cell reference.
func (_baf CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_baf ._bbc ,ev )};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_fbeag :=len (args );if _fbeag < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcfa :=args [0].ValueNumber ;if _gcfa ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cbbgc :=[]float64 {};for _ ,_dda :=range args [1:]{switch _dda .Type {case ResultTypeNumber :_cbbgc =append (_cbbgc ,_dda .ValueNumber );case ResultTypeArray ,ResultTypeList :_cega :=_bcdaf (_dda );for _ ,_cfde :=range _cega {for _ ,_ebef :=range _cfde {if _ebef .Type ==ResultTypeNumber &&!_ebef .IsBoolean {_cbbgc =append (_cbbgc ,_ebef .ValueNumber );};};};};};_gbgc :=0.0;for _faag ,_gbea :=range _cbbgc {_gbgc +=_gbea /_bf .Pow (1+_gcfa ,float64 (_faag )+1);};return MakeNumberResult (_gbgc );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_cecfd ,_gfbe :=_fgebd ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _gfbe .Type !=ResultTypeEmpty {return _gfbe ;};_cafa :=_cecfd ._begfc ;_abbf :=_cecfd ._gcgc ;_fdgd :=_cecfd ._dded ;_beeee :=_cecfd ._ddbf ;_gfaca :=len (_cafa );if _abbf > _gfaca {_abbf =_gfaca ;};_ccagg :=_abbf +_fdgd ;if _ccagg > _gfaca {_ccagg =_gfaca ;};_cbddd :=_cafa [0:_abbf ]+_beeee +_cafa [_ccagg :];return MakeStringResult (_cbddd );};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfdc :=args [0].AsNumber ();if _cfdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_bf .Pi *_cfdc .ValueNumber );};

// Reference returns an invalid reference for ConstArrayExpr.
func (_gdee ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbcf :=args [0].AsNumber ();if _cbcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbeb :=int (_cbcf .ValueNumber );if _cbeb < 0||_cbeb > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_d .Sprintf ("\u0025\u0063",_cbeb ));};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_gef ,_acga :=_gcff (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _acga .Type ==ResultTypeError {return _acga ;};_dddg :=_gef ._fac ;_fcdc :=_gef ._fbbdc ;_bbda :=_gef ._bffa ;_gcgfd :=_gef ._gfed ;_dedf :=_gef ._dcba ;_eeec :=_gef ._bgee ;_dcfb :=_gef ._cagc ;_bccg ,_abcc :=_cfgb (_fcdc ,_bbda ,_dcfb );if _abcc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_afb :=_bccg *_eeec *_dddg ;if _dedf ==0{return MakeNumberResult (_afb );};_feb :=_dddg *_eeec ;_afaf :=_dddg -_gcgfd ;_ceg :=int ((_afaf -_afb )/_feb );if _dedf <=_ceg {return MakeNumberResult (_feb );}else if _dedf ==_ceg +1{return MakeNumberResult (_afaf -_feb *float64 (_ceg )-_afb );}else {return MakeNumberResult (0);};};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_fcgb NamedRangeRef )Update (q *_g .UpdateQuery )Expression {return _fcgb };func _ca (_gc BinOpType ,_afc ,_gcg [][]Result )Result {_afa :=[][]Result {};for _eg :=range _afc {_ebf :=_ge (_gc ,_afc [_eg ],_gcg [_eg ]);if _ebf .Type ==ResultTypeError {return _ebf ;};_afa =append (_afa ,_ebf .ValueList );};return MakeArrayResult (_afa );};const _gga =_dcdc +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _cd (_gf ,_bbe [][]Result )bool {if len (_gf )!=len (_bbe ){return false ;};for _dge :=range _gf {if len (_gf [_dge ])!=len (_bbe [_dge ]){return false ;};};return true ;};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cdfb :=args [0].Ref ;if _cdfb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_bbcc ,_ffcag :=_gd .ParseCellReference (_cdfb .Value );if _ffcag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cdfb .Value );};return MakeNumberResult (float64 (_bbcc .ColumnIdx +1));};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbdg :=args [0].AsNumber ();if _fbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_adacg :=args [1].AsNumber ();if _adacg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_bf .Pow (_fbdg .ValueNumber ,_adacg .ValueNumber ));};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _ddgb (args ,true )};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_edba :=args [0];if _edba .Type ==ResultTypeError {return _edba ;};if _edba .Type !=ResultTypeString &&_edba .Type !=ResultTypeNumber &&_edba .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_fbaa :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgfbd :=int (args [1].ValueNumber );if _bgfbd < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dege :=int (args [2].ValueNumber );if _dege < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_geda :=len (_fbaa );if _bgfbd > _geda {return MakeStringResult ("");};_bgfbd --;_gbgage :=_bgfbd +_dege ;if _gbgage > _geda +1{return MakeStringResult (_fbaa [_bgfbd :]);}else {return MakeStringResult (_fbaa [_bgfbd :_gbgage ]);};};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};var _abgg =map[string ]FunctionComplex {};

// HasFormula returns FALSE for the invalid reference context.
func (_ebaab *ivr )HasFormula (cellRef string )bool {return false };const _agefa =57376;func _gag (_aabe ,_gfec float64 ,_ddgf ,_agb int )(float64 ,Result ){_eaa ,_dead :=_bbca (_aabe ),_bbca (_gfec );if _dead .After (_eaa ){_gbe :=_cgb (_eaa ,_dead ,_ddgf ,_agb );_ecad :=(_dead .Year ()-_gbe .Year ())*12+int (_dead .Month ())-int (_gbe .Month ());return float64 (_ecad *_ddgf )/12.0,_ebce ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};type noCache struct{};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_aacfa :=len (args );if _aacfa !=4&&_aacfa !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efdb ,_cdffe ,_afff :=_fccg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _afff .Type ==ResultTypeError {return _afff ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_decdf :=args [2].ValueNumber ;if _decdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cfcf :=args [3].ValueNumber ;if _cfcf <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_ccdg :=0;if _aacfa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccdg =int (args [4].ValueNumber );if !_egfe (_ccdg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_bcdag ,_afff :=_cfgb (_efdb ,_cdffe ,_ccdg );if _afff .Type ==ResultTypeError {return _afff ;};return MakeNumberResult ((_cfcf /_decdf -1)/_bcdag );};func (_ebge *plex )Lex (lval *yySymType )int {_gecfb =true ;_ecged :=<-_ebge ._ecfda ;if _ecged !=nil {lval ._bbded =_ecged ;return int (lval ._bbded ._aabge );};return 0;};var _aaf int64 =_dgad (1900,_dg .January ,1);

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _bgadb (_gaged Result ,_gefbg ,_fcfb string )(float64 ,Result ){switch _gaged .Type {case ResultTypeEmpty :return 0,_ebce ;case ResultTypeNumber :return _gaged .ValueNumber ,_ebce ;case ResultTypeString :_cbfeg ,_ebffdf :=_a .ParseFloat (_gaged .ValueString ,64);if _ebffdf !=nil {return 0,MakeErrorResult (_fcfb +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_gefbg );};return _cbfeg ,_ebce ;default:return 0,MakeErrorResult (_gefbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fcfb +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Negate is a negate expression like -A1.
type Negate struct{_bcdd Expression };

// Eval evaluates and returns a number.
func (_bfebf Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_bfebf ._bagea )};func _gfbgg (_bddg string ,_fbcbc []Result )(*parsedSearchObject ,Result ){_gdeg :=len (_fbcbc );if _gdeg !=2&&_gdeg !=3{return nil ,MakeErrorResult (_bddg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcbd :=_fbcbc [0];if _gcbd .Type ==ResultTypeError {return nil ,_gcbd ;};if _gcbd .Type !=ResultTypeString &&_gcbd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_cbdc :=_fbcbc [1];if _cbdc .Type ==ResultTypeError {return nil ,_cbdc ;};if _cbdc .Type !=ResultTypeString &&_cbdc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_abgcf :=_cbdc .Value ();_gfgeb :=_gcbd .Value ();_fcbaf :=1;if _gdeg ==3&&_fbcbc [2].Type !=ResultTypeEmpty {_gdfbf :=_fbcbc [2];if _gdfbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_fcbaf =int (_gdfbf .ValueNumber );if _fcbaf < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _fcbaf > len (_abgcf ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_gfgeb ,_abgcf ,_fcbaf },_ebce ;};func (_edbeb *Lexer )lex (_bgcda _fd .Reader ){_gfdfg ,_gfce ,_fbadd :=0,0,0;_dgdc :=-1;_bfcc ,_caafgg ,_abfgd :=0,0,0;_ =_abfgd ;_dfgf :=1;_ =_dfgf ;_gafad :=make ([]byte ,4096);_aeadd :=false ;for !_aeadd {_adbf :=0;if _bfcc > 0{_adbf =_gfce -_bfcc ;};_gfce =0;_gbbbf ,_dacbd :=_bgcda .Read (_gafad [_adbf :]);if _gbbbf ==0||_dacbd !=nil {_aeadd =true ;};_fbadd =_gbbbf +_adbf ;if _fbadd < len (_gafad ){_dgdc =_fbadd ;};{_gfdfg =_egff ;_bfcc =0;_caafgg =0;_abfgd =0;};{var _dgba int ;var _dcgc uint ;if _gfce ==_fbadd {goto _cdbf ;};if _gfdfg ==0{goto _aaeaa ;};_edffgd :_dgba =int (_febe [_gfdfg ]);_dcgc =uint (_geadd [_dgba ]);_dgba ++;for ;_dcgc > 0;_dcgc --{_dgba ++;switch _geadd [_dgba -1]{case 2:_bfcc =_gfce ;};};switch _gfdfg {case 30:switch _gafad [_gfce ]{case 34:goto _gdge ;case 35:goto _ffcada ;case 36:goto _gece ;case 38:goto _cdcga ;case 39:goto _ggfb ;case 40:goto _fagef ;case 41:goto _eadad ;case 42:goto _bebba ;case 43:goto _cbda ;case 44:goto _fegf ;case 45:goto _edag ;case 47:goto _ccbaf ;case 58:goto _dgggag ;case 59:goto _dgdfa ;case 60:goto _adebg ;case 61:goto _fadf ;case 62:goto _ebdeed ;case 63:goto _agaa ;case 70:goto _abef ;case 84:goto _fafb ;case 92:goto _dafb ;case 94:goto _agbfg ;case 95:goto _dcgba ;case 123:goto _baae ;case 125:goto _egeef ;};switch {case _gafad [_gfce ]< 65:switch {case _gafad [_gfce ]> 37:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cecgac ;};case _gafad [_gfce ]>=33:goto _agaa ;};case _gafad [_gfce ]> 90:switch {case _gafad [_gfce ]> 93:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _bccc ;};case _gafad [_gfce ]>=91:goto _agaa ;};default:goto _adfbf ;};goto _bedf ;case 1:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _acaf ;case 123:goto _acaf ;case 125:goto _acaf ;};switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _acaf ;};case _gafad [_gfce ]> 45:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _acaf ;};case _gafad [_gfce ]>=58:goto _acaf ;};default:goto _acaf ;};goto _bedf ;case 0:goto _aaeaa ;case 2:if _gafad [_gfce ]==34{goto _caffc ;};goto _gdge ;case 31:if _gafad [_gfce ]==34{goto _gdge ;};goto _gegbg ;case 3:switch _gafad [_gfce ]{case 78:goto _gdcbb ;case 82:goto _gagd ;};goto _agaa ;case 4:switch _gafad [_gfce ]{case 47:goto _ggdad ;case 85:goto _faacg ;};goto _agaa ;case 5:if _gafad [_gfce ]==65{goto _gegbf ;};goto _agaa ;case 6:switch _gafad [_gfce ]{case 76:goto _cdgag ;case 77:goto _cccbg ;};goto _agaa ;case 7:if _gafad [_gfce ]==76{goto _cccbg ;};goto _agaa ;case 8:if _gafad [_gfce ]==33{goto _gegbf ;};goto _agaa ;case 9:if _gafad [_gfce ]==69{goto _cdbe ;};goto _agaa ;case 10:if _gafad [_gfce ]==70{goto _dcda ;};goto _agaa ;case 11:if _gafad [_gfce ]==33{goto _feeec ;};goto _agaa ;case 12:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _agaa ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=45{goto _agaa ;};case _gafad [_gfce ]>=34:goto _agaa ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]< 65:if 58<=_gafad [_gfce ]&&_gafad [_gfce ]<=63{goto _agaa ;};case _gafad [_gfce ]> 90:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _agaa ;};default:goto _ddebb ;};default:goto _gfebg ;};goto _bedf ;case 13:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _agaa ;case 58:goto _dbea ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=45{goto _agaa ;};case _gafad [_gfce ]>=34:goto _agaa ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _agaa ;};case _gafad [_gfce ]>=59:goto _agaa ;};default:goto _gfebg ;};goto _bedf ;case 14:if _gafad [_gfce ]==36{goto _acgee ;};if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _ebag ;};goto _acaf ;case 15:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _ebag ;};goto _acaf ;case 32:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _ebag ;};goto _dfed ;case 16:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 47:goto _agaa ;case 58:goto _gfcda ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 45:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cdeff ;};case _gafad [_gfce ]>=34:goto _agaa ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]> 90:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _agaa ;};case _gafad [_gfce ]>=65:goto _ddebb ;};default:goto _agaa ;};goto _bedf ;case 17:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _acaf ;case 123:goto _acaf ;case 125:goto _acaf ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=45{goto _acaf ;};case _gafad [_gfce ]>=34:goto _acaf ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _acaf ;};case _gafad [_gfce ]>=58:goto _acaf ;};default:goto _cdeff ;};goto _bedf ;case 33:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _fafg ;case 123:goto _fafg ;case 125:goto _fafg ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=45{goto _fafg ;};case _gafad [_gfce ]>=34:goto _fafg ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _fafg ;};case _gafad [_gfce ]>=58:goto _fafg ;};default:goto _cdeff ;};goto _bedf ;case 18:if _gafad [_gfce ]==36{goto _fcda ;};if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _fgbeb ;};goto _acaf ;case 19:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _fgbeb ;};goto _acaf ;case 34:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _fgbeb ;};goto _baeac ;case 20:switch _gafad [_gfce ]{case 39:goto _agaa ;case 42:goto _agaa ;case 47:goto _agaa ;case 58:goto _agaa ;case 63:goto _agaa ;};if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=93{goto _agaa ;};goto _cgea ;case 21:switch _gafad [_gfce ]{case 39:goto _ceaa ;case 42:goto _agaa ;case 47:goto _agaa ;case 58:goto _agaa ;case 63:goto _agaa ;};if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=93{goto _agaa ;};goto _cgea ;case 22:if _gafad [_gfce ]==33{goto _edgaa ;};goto _agaa ;case 35:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _ggeee ;case 58:goto _dbea ;case 101:goto _cbgbf ;case 123:goto _abcga ;case 125:goto _abcga ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=47{goto _abcga ;};case _gafad [_gfce ]>=34:goto _abcga ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _abcga ;};case _gafad [_gfce ]>=59:goto _abcga ;};default:goto _cecgac ;};goto _bedf ;case 36:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _abcga ;case 101:goto _cbgbf ;case 123:goto _abcga ;case 125:goto _abcga ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=45{goto _abcga ;};case _gafad [_gfce ]>=34:goto _abcga ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _abcga ;};case _gafad [_gfce ]>=58:goto _abcga ;};default:goto _ggeee ;};goto _bedf ;case 23:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _ggga ;case 123:goto _ggga ;case 125:goto _ggga ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=45{goto _ggga ;};case _gafad [_gfce ]>=34:goto _ggga ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _ggga ;};case _gafad [_gfce ]>=58:goto _ggga ;};default:goto _dged ;};goto _bedf ;case 37:switch _gafad [_gfce ]{case 33:goto _fcde ;case 47:goto _abcga ;case 123:goto _abcga ;case 125:goto _abcga ;};switch {case _gafad [_gfce ]< 48:switch {case _gafad [_gfce ]> 35:if 37<=_gafad [_gfce ]&&_gafad [_gfce ]<=45{goto _abcga ;};case _gafad [_gfce ]>=34:goto _abcga ;};case _gafad [_gfce ]> 57:switch {case _gafad [_gfce ]> 63:if 91<=_gafad [_gfce ]&&_gafad [_gfce ]<=94{goto _abcga ;};case _gafad [_gfce ]>=58:goto _abcga ;};default:goto _dged ;};goto _bedf ;case 38:switch _gafad [_gfce ]{case 61:goto _cdaec ;case 62:goto _ddcfd ;};goto _ffddd ;case 39:if _gafad [_gfce ]==61{goto _ccgbd ;};goto _gabc ;case 24:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _agaa ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _agaa ;};default:goto _agaa ;};goto _bedf ;case 40:switch _gafad [_gfce ]{case 33:goto _fcde ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _dcdff ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcdff ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 41:switch _gafad [_gfce ]{case 46:goto _aabbd ;case 92:goto _aabbd ;case 95:goto _aabbd ;};switch {case _gafad [_gfce ]< 65:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _aabbd ;};case _gafad [_gfce ]> 90:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _aabbd ;};default:goto _aabbd ;};goto _dbdb ;case 42:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 43:switch _gafad [_gfce ]{case 33:goto _fcde ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _fafg ;case 125:goto _fafg ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _fafg ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};default:goto _fafg ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcdff ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _fafg ;};default:goto _fafg ;};goto _bedf ;case 44:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _acaf ;case 125:goto _acaf ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _acaf ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _acaf ;};default:goto _acaf ;};goto _bedf ;case 25:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 65:goto _ebae ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _agaa ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 66<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _agaa ;};default:goto _agaa ;};goto _bedf ;case 45:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 76:goto _dgacc ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 46:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 83:goto _faceg ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 47:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 69:goto _aadfa ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 26:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 79:goto _decdc ;case 82:goto _cfdd ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _agaa ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _agaa ;};default:goto _agaa ;};goto _bedf ;case 48:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 68:goto _fdgcc ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 49:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 79:goto _dfac ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 50:switch _gafad [_gfce ]{case 33:goto _fcde ;case 36:goto _accf ;case 40:goto _dgcg ;case 46:goto _dcdff ;case 58:goto _gfcda ;case 85:goto _faceg ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 59:switch {case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _cbcb ;};case _gafad [_gfce ]>=34:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _dcddg ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 27:switch _gafad [_gfce ]{case 46:goto _aabbd ;case 92:goto _aabbd ;case 95:goto _aabbd ;};switch {case _gafad [_gfce ]< 65:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _aabbd ;};case _gafad [_gfce ]> 90:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _aabbd ;};default:goto _aabbd ;};goto _agaa ;case 28:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 120:goto _dbbdb ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _agaa ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _agaa ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _agaa ;};default:goto _agaa ;};goto _bedf ;case 51:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 108:goto _deged ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 52:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 102:goto _daabc ;case 110:goto _cdgbg ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 53:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 110:goto _fgedb ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 54:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _baec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 55:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _aggbe ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _aggbe ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 56:switch _gafad [_gfce ]{case 33:goto _fcde ;case 40:goto _ceef ;case 46:goto _aggbe ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _aggbe ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _aggbe ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 57:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 109:goto _daafg ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 58:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _gcbb ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _dbdb ;case 125:goto _dbdb ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _dbdb ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _dbdb ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _dbdb ;};default:goto _dbdb ;};goto _bedf ;case 59:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _bfabc ;case 123:goto _acaf ;case 125:goto _acaf ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _acaf ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _acaf ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _bfabc ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _acaf ;};default:goto _acaf ;};goto _bedf ;case 29:switch _gafad [_gfce ]{case 33:goto _fcde ;case 46:goto _edgec ;case 92:goto _aabbd ;case 95:goto _edgec ;case 123:goto _agaa ;case 125:goto _agaa ;};switch {case _gafad [_gfce ]< 58:switch {case _gafad [_gfce ]< 37:if 34<=_gafad [_gfce ]&&_gafad [_gfce ]<=35{goto _agaa ;};case _gafad [_gfce ]> 47:if 48<=_gafad [_gfce ]&&_gafad [_gfce ]<=57{goto _edgec ;};default:goto _agaa ;};case _gafad [_gfce ]> 63:switch {case _gafad [_gfce ]< 91:if 65<=_gafad [_gfce ]&&_gafad [_gfce ]<=90{goto _edgec ;};case _gafad [_gfce ]> 94:if 97<=_gafad [_gfce ]&&_gafad [_gfce ]<=122{goto _edgec ;};default:goto _agaa ;};default:goto _agaa ;};goto _bedf ;};_agaa :_gfdfg =0;goto _fcdge ;_bedf :_gfdfg =1;goto _fcdge ;_gdge :_gfdfg =2;goto _fcdge ;_ffcada :_gfdfg =3;goto _fcdge ;_gdcbb :_gfdfg =4;goto _fcdge ;_ggdad :_gfdfg =5;goto _fcdge ;_faacg :_gfdfg =6;goto _fcdge ;_cdgag :_gfdfg =7;goto _fcdge ;_cccbg :_gfdfg =8;goto _fcdge ;_gagd :_gfdfg =9;goto _fcdge ;_cdbe :_gfdfg =10;goto _fcdge ;_dcda :_gfdfg =11;goto _fcdge ;_gece :_gfdfg =12;goto _fcdge ;_gfebg :_gfdfg =13;goto _fcdge ;_dbea :_gfdfg =14;goto _fcdge ;_acgee :_gfdfg =15;goto _fcdge ;_ddebb :_gfdfg =16;goto _fcdge ;_accf :_gfdfg =17;goto _fcdge ;_gfcda :_gfdfg =18;goto _fcdge ;_fcda :_gfdfg =19;goto _fcdge ;_ggfb :_gfdfg =20;goto _fcdge ;_cgea :_gfdfg =21;goto _fcdge ;_ceaa :_gfdfg =22;goto _fcdge ;_cbgbf :_gfdfg =23;goto _fcdge ;_adfbf :_gfdfg =24;goto _fcdge ;_abef :_gfdfg =25;goto _fcdge ;_fafb :_gfdfg =26;goto _fcdge ;_dafb :_gfdfg =27;goto _fcdge ;_dcgba :_gfdfg =28;goto _fcdge ;_bccc :_gfdfg =29;goto _fcdge ;_acaf :_gfdfg =30;goto _cfec ;_fcde :_gfdfg =30;goto _gfdfe ;_gegbf :_gfdfg =30;goto _bebe ;_feeec :_gfdfg =30;goto _fddc ;_edgaa :_gfdfg =30;goto _agee ;_ggga :_gfdfg =30;goto _bfdfe ;_dgcg :_gfdfg =30;goto _abedf ;_cdcga :_gfdfg =30;goto _ebega ;_fagef :_gfdfg =30;goto _bbege ;_eadad :_gfdfg =30;goto _bbcf ;_bebba :_gfdfg =30;goto _cafda ;_cbda :_gfdfg =30;goto _gbabe ;_fegf :_gfdfg =30;goto _cddaa ;_edag :_gfdfg =30;goto _ffgae ;_ccbaf :_gfdfg =30;goto _bffbg ;_dgggag :_gfdfg =30;goto _fffde ;_dgdfa :_gfdfg =30;goto _dfbde ;_fadf :_gfdfg =30;goto _ceccb ;_agbfg :_gfdfg =30;goto _gcdd ;_baae :_gfdfg =30;goto _gada ;_egeef :_gfdfg =30;goto _gdfc ;_gegbg :_gfdfg =30;goto _edgg ;_dfed :_gfdfg =30;goto _dacg ;_fafg :_gfdfg =30;goto _bbgfc ;_baeac :_gfdfg =30;goto _dbbfb ;_abcga :_gfdfg =30;goto _ebccd ;_ffddd :_gfdfg =30;goto _ffcff ;_cdaec :_gfdfg =30;goto _edfb ;_ddcfd :_gfdfg =30;goto _fcfgf ;_gabc :_gfdfg =30;goto _efgbf ;_ccgbd :_gfdfg =30;goto _gbcgc ;_dbdb :_gfdfg =30;goto _gdcd ;_ceef :_gfdfg =30;goto _dcdffa ;_caffc :_gfdfg =31;goto _fbcg ;_ebag :_gfdfg =32;goto _fcdge ;_cdeff :_gfdfg =33;goto _bgcfd ;_fgbeb :_gfdfg =34;goto _fcdge ;_cecgac :_gfdfg =35;goto _bdga ;_ggeee :_gfdfg =36;goto _bdga ;_dged :_gfdfg =37;goto _bdga ;_adebg :_gfdfg =38;goto _fcdge ;_ebdeed :_gfdfg =39;goto _fcdge ;_dcdff :_gfdfg =40;goto _gfeca ;_aabbd :_gfdfg =41;goto _fcdge ;_edgec :_gfdfg =42;goto _gfeca ;_cbcb :_gfdfg =43;goto _bgcfd ;_dcddg :_gfdfg =44;goto _gfeca ;_aadfa :_gfdfg =44;goto _becbf ;_dfac :_gfdfg =44;goto _fagde ;_ebae :_gfdfg =45;goto _gfeca ;_dgacc :_gfdfg =46;goto _gfeca ;_faceg :_gfdfg =47;goto _gfeca ;_decdc :_gfdfg =48;goto _gfeca ;_fdgcc :_gfdfg =49;goto _gfeca ;_cfdd :_gfdfg =50;goto _gfeca ;_dbbdb :_gfdfg =51;goto _gfeca ;_deged :_gfdfg =52;goto _gfeca ;_daabc :_gfdfg =53;goto _gfeca ;_fgedb :_gfdfg =54;goto _gfeca ;_baec :_gfdfg =55;goto _gfeca ;_aggbe :_gfdfg =56;goto _gfeca ;_cdgbg :_gfdfg =57;goto _gfeca ;_daafg :_gfdfg =58;goto _gfeca ;_gcbb :_gfdfg =59;goto _gfeca ;_bfabc :_gfdfg =59;goto _gabdb ;_bebe :_dgba =3;goto _agca ;_fddc :_dgba =5;goto _agca ;_gfdfe :_dgba =7;goto _agca ;_agee :_dgba =9;goto _agca ;_abedf :_dgba =11;goto _agca ;_dcdffa :_dgba =13;goto _agca ;_ebega :_dgba =15;goto _agca ;_gada :_dgba =17;goto _agca ;_gdfc :_dgba =19;goto _agca ;_bbege :_dgba =21;goto _agca ;_bbcf :_dgba =23;goto _agca ;_gbabe :_dgba =25;goto _agca ;_ffgae :_dgba =27;goto _agca ;_cafda :_dgba =29;goto _agca ;_bffbg :_dgba =31;goto _agca ;_gcdd :_dgba =33;goto _agca ;_ceccb :_dgba =35;goto _agca ;_edfb :_dgba =37;goto _agca ;_gbcgc :_dgba =39;goto _agca ;_fcfgf :_dgba =41;goto _agca ;_fffde :_dgba =43;goto _agca ;_dfbde :_dgba =45;goto _agca ;_cddaa :_dgba =47;goto _agca ;_ebccd :_dgba =49;goto _agca ;_bbgfc :_dgba =51;goto _agca ;_dacg :_dgba =53;goto _agca ;_dbbfb :_dgba =55;goto _agca ;_gdcd :_dgba =57;goto _agca ;_edgg :_dgba =59;goto _agca ;_ffcff :_dgba =61;goto _agca ;_efgbf :_dgba =63;goto _agca ;_bfdfe :_dgba =65;goto _agca ;_cfec :_dgba =67;goto _agca ;_becbf :_dgba =72;goto _agca ;_bdga :_dgba =75;goto _agca ;_bgcfd :_dgba =78;goto _agca ;_fagde :_dgba =81;goto _agca ;_gabdb :_dgba =84;goto _agca ;_gfeca :_dgba =87;goto _agca ;_fbcg :_dgba =90;goto _agca ;_agca :_dcgc =uint (_geadd [_dgba ]);_dgba ++;for ;_dcgc > 0;_dcgc --{_dgba ++;switch _geadd [_dgba -1]{case 3:_caafgg =_gfce +1;case 4:_abfgd =1;case 5:_abfgd =2;case 6:_abfgd =3;case 7:_abfgd =4;case 8:_abfgd =11;case 9:_abfgd =14;case 10:_abfgd =15;case 11:_caafgg =_gfce +1;{_edbeb .emit (_cbdb ,_gafad [_bfcc :_caafgg ]);};case 12:_caafgg =_gfce +1;{_edbeb .emit (_cfgca ,_gafad [_bfcc :_caafgg ]);};case 13:_caafgg =_gfce +1;{_edbeb .emit (_adcb ,_gafad [_bfcc :_caafgg -1]);};case 14:_caafgg =_gfce +1;{_edbeb .emit (_adcb ,_gafad [_bfcc +1:_caafgg -2]);};case 15:_caafgg =_gfce +1;{_edbeb .emit (_cecga ,_gafad [_bfcc :_caafgg -1]);};case 16:_caafgg =_gfce +1;{_edbeb .emit (_cecga ,_gafad [_bfcc :_caafgg -1]);};case 17:_caafgg =_gfce +1;{_edbeb .emit (_ggba ,_gafad [_bfcc :_caafgg ]);};case 18:_caafgg =_gfce +1;{_edbeb .emit (_bfce ,_gafad [_bfcc :_caafgg ]);};case 19:_caafgg =_gfce +1;{_edbeb .emit (_fagfee ,_gafad [_bfcc :_caafgg ]);};case 20:_caafgg =_gfce +1;{_edbeb .emit (_egdg ,_gafad [_bfcc :_caafgg ]);};case 21:_caafgg =_gfce +1;{_edbeb .emit (_faga ,_gafad [_bfcc :_caafgg ]);};case 22:_caafgg =_gfce +1;{_edbeb .emit (_gadff ,_gafad [_bfcc :_caafgg ]);};case 23:_caafgg =_gfce +1;{_edbeb .emit (_ecfbg ,_gafad [_bfcc :_caafgg ]);};case 24:_caafgg =_gfce +1;{_edbeb .emit (_ffdc ,_gafad [_bfcc :_caafgg ]);};case 25:_caafgg =_gfce +1;{_edbeb .emit (_agffg ,_gafad [_bfcc :_caafgg ]);};case 26:_caafgg =_gfce +1;{_edbeb .emit (_cfee ,_gafad [_bfcc :_caafgg ]);};case 27:_caafgg =_gfce +1;{_edbeb .emit (_ebcff ,_gafad [_bfcc :_caafgg ]);};case 28:_caafgg =_gfce +1;{_edbeb .emit (_gaceab ,_gafad [_bfcc :_caafgg ]);};case 29:_caafgg =_gfce +1;{_edbeb .emit (_acggb ,_gafad [_bfcc :_caafgg ]);};case 30:_caafgg =_gfce +1;{_edbeb .emit (_bdeb ,_gafad [_bfcc :_caafgg ]);};case 31:_caafgg =_gfce +1;{_edbeb .emit (_dgfde ,_gafad [_bfcc :_caafgg ]);};case 32:_caafgg =_gfce +1;{_edbeb .emit (_ecdcf ,_gafad [_bfcc :_caafgg ]);};case 33:_caafgg =_gfce +1;{_edbeb .emit (_agefa ,_gafad [_bfcc :_caafgg ]);};case 34:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_gfab ,_gafad [_bfcc :_caafgg ]);};case 35:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_gcbdd ,_gafad [_bfcc :_caafgg ]);};case 36:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_gffe ,_gafad [_bfcc :_caafgg ]);};case 37:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_aacfab ,_gafad [_bfcc :_caafgg ]);};case 38:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_ffga ,_gafad [_bfcc :_caafgg ]);};case 39:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_dedc ,_gafad [_bfcc +1:_caafgg -1]);};case 40:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_bbgbed ,_gafad [_bfcc :_caafgg ]);};case 41:_caafgg =_gfce ;_gfce --;{_edbeb .emit (_baccc ,_gafad [_bfcc :_caafgg ]);};case 42:_gfce =(_caafgg )-1;{_edbeb .emit (_gfab ,_gafad [_bfcc :_caafgg ]);};case 43:switch _abfgd {case 0:{_gfdfg =0;goto _fcdge ;};case 1:{_gfce =(_caafgg )-1;_edbeb .emit (_cebcbd ,_gafad [_bfcc :_caafgg ]);};case 2:{_gfce =(_caafgg )-1;_edbeb .emit (_gfab ,_gafad [_bfcc :_caafgg ]);};case 3:{_gfce =(_caafgg )-1;_edbeb .emit (_gcbdd ,_gafad [_bfcc :_caafgg ]);};case 4:{_gfce =(_caafgg )-1;_edbeb .emit (_gafd ,_gafad [_bfcc :_caafgg ]);};case 11:{_gfce =(_caafgg )-1;_edbeb .emit (_bagb ,_gafad [_bfcc :_caafgg ]);};case 14:{_gfce =(_caafgg )-1;_edbeb .emit (_ffga ,_gafad [_bfcc :_caafgg ]);};case 15:{_gfce =(_caafgg )-1;_edbeb .emit (_dedc ,_gafad [_bfcc +1:_caafgg -1]);};};};};goto _fcdge ;_fcdge :_dgba =int (_beeagc [_gfdfg ]);_dcgc =uint (_geadd [_dgba ]);_dgba ++;for ;_dcgc > 0;_dcgc --{_dgba ++;switch _geadd [_dgba -1]{case 0:_bfcc =0;case 1:_abfgd =0;};};if _gfdfg ==0{goto _aaeaa ;};if _gfce ++;_gfce !=_fbadd {goto _edffgd ;};_cdbf :{};if _gfce ==_dgdc {switch _gfdfg {case 1:goto _acaf ;case 2:goto _acaf ;case 31:goto _gegbg ;case 14:goto _acaf ;case 15:goto _acaf ;case 32:goto _dfed ;case 17:goto _acaf ;case 33:goto _fafg ;case 18:goto _acaf ;case 19:goto _acaf ;case 34:goto _baeac ;case 35:goto _abcga ;case 36:goto _abcga ;case 23:goto _ggga ;case 37:goto _abcga ;case 38:goto _ffddd ;case 39:goto _gabc ;case 40:goto _dbdb ;case 41:goto _dbdb ;case 42:goto _dbdb ;case 43:goto _fafg ;case 44:goto _acaf ;case 45:goto _dbdb ;case 46:goto _dbdb ;case 47:goto _dbdb ;case 48:goto _dbdb ;case 49:goto _dbdb ;case 50:goto _dbdb ;case 51:goto _dbdb ;case 52:goto _dbdb ;case 53:goto _dbdb ;case 54:goto _dbdb ;case 55:goto _dbdb ;case 56:goto _dbdb ;case 57:goto _dbdb ;case 58:goto _dbdb ;case 59:goto _acaf ;};};_aaeaa :{};};if _bfcc > 0{copy (_gafad [0:],_gafad [_bfcc :]);};};_ =_dgdc ;if _gfdfg ==_gbffg {_edbeb .emit (_bdeaa ,nil );};close (_edbeb ._ecbg );};const _gcc ="\u005e\u0028\u0028"+_eda +"\u007c"+_gga +"\u007c"+_aeb +"\u007c"+_ebb +"\u0029\u0020\u0029\u003f";

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgd ,_ecee ,_adac :=_fccg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _adac .Type ==ResultTypeError {return _adac ;};_beac ,_adac :=_fcfg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _adac .Type ==ResultTypeError {return _adac ;};if _beac >=_fgd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_ccbdf :=args [3];if _ccbdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cgfaf :=_ccbdf .ValueNumber ;if _cgfaf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fdef :=args [4];if _fdef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_aedfe :=_fdef .ValueNumber ;if _aedfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gadc :=args [5];if _gadc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_ebdd :=_gadc .ValueNumber ;if _ebdd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_abdf :=args [6];if _abdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eaaf :=float64 (int (_abdf .ValueNumber ));if !_eedf (_eaaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cee :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_aabc :=args [7];if _aabc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cee =int (_aabc .ValueNumber );if !_egfe (_cee ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_cdea ,_adac :=_cfgb (_beac ,_ecee ,_cee );if _adac .Type ==ResultTypeError {return _adac ;};_cdea *=_eaaf ;_bcda ,_adac :=_cfgb (_fgd ,_ecee ,_cee );if _adac .Type ==ResultTypeError {return _adac ;};_bcda *=_eaaf ;_cbag ,_adac :=_cfgb (_beac ,_fgd ,_cee );if _adac .Type ==ResultTypeError {return _adac ;};_cbag *=_eaaf ;_fbac :=_ebdd +_cdea *100*_cgfaf /_eaaf ;_fbac /=_bcda *_aedfe /_eaaf +1;_fbac -=_cbag *100*_cgfaf /_eaaf ;return MakeNumberResult (_fbac );};func (_defa *Lexer )emit (_adfec tokenType ,_daac []byte ){if _effc {_d .Println ("\u0065\u006d\u0069\u0074",_adfec ,_afge (string (_daac )));};_defa ._ecbg <-&node {_adfec ,string (_daac )};};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfbg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgbe :=args [2].ValueNumber ;if _fgbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agbab :=args [3].ValueNumber ;return MakeNumberResult (_agbab *_dbee *(_dfbg /_fgbe -1));};

// Update updates references in the BinaryExpr after removing a row/column.
func (_ccc BinaryExpr )Update (q *_g .UpdateQuery )Expression {_fdc :=_ccc ;_fdc ._ed =_ccc ._ed .Update (q );_fdc ._bb =_ccc ._bb .Update (q );return _fdc ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_ffae ,_ceade :=_a .ParseFloat (v ,64);if _ceade !=nil {_fg .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_ceade );};return Number {_ffae };};var _adbgc =[...]int {1};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cgeb (args ,false )};

// Update updates references in the Negate after removing a row/column.
func (_gfecc Negate )Update (q *_g .UpdateQuery )Expression {return Negate {_gfecc ._bcdd .Update (q )}};const _baccc =57371;

// Eval evaluates a horizontal range returning a list of results or an error.
func (_edga HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_aeagc :=_edga .horizontalRangeReference ();if _fcgd ,_fgca :=ev .GetFromCache (_aeagc );_fgca {return _fcgd ;};_dbcce ,_dcgde :=_bbdfa (ctx ,_edga ._gggb ,_edga ._eafgfe );_afgff :=_fggca (ctx ,ev ,_dbcce ,_dcgde );ev .SetCache (_aeagc ,_afgff );return _afgff ;};const _gfdec =-1000;

// Eval evaluates and returns the result of a formula.
func (_afd *defEval )Eval (ctx Context ,formula string )Result {_abc :=ParseString (formula );if _abc !=nil {_afd .checkLastEvalIsRef (ctx ,_abc );_dgc :=_abc .Eval (ctx ,_afd );return _dgc ;};return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_def :=args [1].ValueNumber ;_ggbg :=args [0];var _gdgd float64 ;switch _ggbg .Type {case ResultTypeEmpty :_gdgd =0;case ResultTypeNumber :_gdgd =_ggbg .ValueNumber ;case ResultTypeString :_gca :=DateValue ([]Result {args [0]});if _gca .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gdgd =_gca .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bfgg :=_bbca (_gdgd );_egf :=_bfgg .AddDate (0,int (_def +1),0);_fcc ,_fed ,_ :=_egf .Date ();_cfgdc :=_bce (_fcc ,int (_fed ),0);if _cfgdc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _fcc ==1900&&_fed ==3{_cfgdc --;};return MakeNumberResult (_cfgdc );};const _gfcb =1;

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_dcbb :=len (args );if _dcbb < 3||_dcbb > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aabeb :=args [0].ValueNumber ;if _aabeb !=float64 (int (_aabeb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beae :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_daff :=args [2].ValueNumber ;_fffc :=0.0;if _dcbb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fffc =args [3].ValueNumber ;};_cfgda :=0.0;if _dcbb >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfgda =args [4].ValueNumber ;if _cfgda !=0{_cfgda =1;};};_aafcf :=0.1;if _dcbb >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aafcf =args [5].ValueNumber ;};_ggaa :=100;_fbd :=0;_fgfd :=false ;_ggef :=1e-6;_egce :=_aafcf ;for _fbd < _ggaa &&!_fgfd {_edfd :=_bf .Pow (_egce +1,_aabeb );_acea :=_bf .Pow (_egce +1,_aabeb -1);_ggcag :=_egce *_cfgda +1;_ebeg :=_beae *(_edfd -1);_aabae :=_fffc +_edfd *_daff +_ebeg *_ggcag /_egce ;_cedcf :=_aabeb *_acea *_daff -_ebeg *_ggcag /_bf .Pow (_egce ,2);_abacd :=(_aabeb *_beae *_acea *_ggcag +_ebeg *_cfgda )/_egce ;_ffed :=_aabae /(_cedcf +_abacd );if _bf .Abs (_ffed )< _ggef {_fgfd =true ;};_fbd ++;_egce -=_ffed ;};return MakeNumberResult (_egce );};type yyParserImpl struct{_eadae yySymType ;_eecec [_bgaaf ]yySymType ;_eedfd int ;};type criteriaRegex struct{_agbag byte ;_cgdf string ;};func (_agecd ReferenceType )String ()string {if _agecd >=ReferenceType (len (_feba )-1){return _d .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_agecd );};return _cegcc [_feba [_agecd ]:_feba [_agecd +1]];};

// Update updates references in the VerticalRange after removing a row/column.
func (_febaa VerticalRange )Update (q *_g .UpdateQuery )Expression {if q .UpdateType ==_g .UpdateActionRemoveColumn {_aede :=_febaa ;if q .UpdateCurrentSheet {_eagg :=q .ColumnIdx ;_aede ._bbaf =_ddg (_febaa ._bbaf ,_eagg );_aede ._abeb =_ddg (_febaa ._abeb ,_eagg );};return _aede ;};return _febaa ;};const _gba ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _bbfa (_gfca Result ,_eggfa int )[]Result {_fgge :=[]Result {};switch _gfca .Type {case ResultTypeList :_edfag :=_gfca .ValueList ;_deeeb :=len (_edfag );for _cfdf :=0;_cfdf < _eggfa ;_cfdf ++{if _cfdf < _deeeb {_fgge =append (_fgge ,_edfag [_cfdf ]);}else {_fgge =append (_fgge ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _cddcg :=0;_cddcg < _eggfa ;_cddcg ++{_fgge =append (_fgge ,_gfca );};};return _fgge ;};const _egffa int =30;var _cafd =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Update updates references in the Range after removing a row/column.
func (_gdcdc Range )Update (q *_g .UpdateQuery )Expression {_dfcc :=_gdcdc ;if q .UpdateCurrentSheet {_dfcc ._cgee =_gdcdc ._cgee .Update (q );_dfcc ._ccgcd =_gdcdc ._ccgcd .Update (q );};return _dfcc ;};

// GetEpoch returns a null time object for the invalid reference context.
func (_ccgb *ivr )GetEpoch ()_dg .Time {return _dg .Time {}};const _dcdbf ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {s }};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fdbbc :=[]float64 {};for _ ,_abgf :=range args {switch _abgf .Type {case ResultTypeString :_bead :=_abgf .AsNumber ();if _bead .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fdbbc =append (_fdbbc ,_bead .ValueNumber );case ResultTypeList :_gccb :=LCM (_abgf .ValueList );if _gccb .Type !=ResultTypeNumber {return _gccb ;};_fdbbc =append (_fdbbc ,_gccb .ValueNumber );case ResultTypeNumber :_fdbbc =append (_fdbbc ,_abgf .ValueNumber );case ResultTypeError :return _abgf ;};};if _fdbbc [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_fdbbc )==1{return MakeNumberResult (_fdbbc [0]);};_cbee :=_fdbbc [0];for _fbbbd :=1;_fbbbd < len (_fdbbc );_fbbbd ++{if _fdbbc [_fbbbd ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cbee =_bacc (_cbee ,_fdbbc [_fbbbd ]);};return MakeNumberResult (_cbee );};const _acggb =57373;

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_dcbdd :=len (args );if _dcbdd < 4||_dcbdd > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggce :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_affa :=args [1].ValueNumber ;if _affa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbab :=args [2].ValueNumber ;if _dbab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eba :=args [3].ValueNumber ;_bfde :=0.0;if _dcbdd > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfde =args [4].ValueNumber ;};_bdg :=0;if _dcbdd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bdg =int (args [5].ValueNumber );if _bdg !=0{_bdg =1;};};return MakeNumberResult (_efgf (_ggce ,_affa ,_dbab ,_eba ,_bfde ,_bdg ));};

// Eval evaluates and returns the result of a constant array expression.
func (_bd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_fcf :=[][]Result {};for _ ,_ee :=range _bd ._ffc {_acg :=[]Result {};for _ ,_fb :=range _ee {_acg =append (_acg ,_fb .Eval (ctx ,ev ));};_fcf =append (_fcf ,_acg );};return MakeArrayResult (_fcf );};func _ddg (_eae string ,_ddc uint32 )string {_dgf :=_gd .ColumnToIndex (_eae );if _dgf ==_ddc {return "\u0023\u0052\u0045F\u0021";}else if _dgf > _ddc {return _gd .IndexToColumn (_dgf -1);}else {return _eae ;};};const _eef ="\u0028\u0020\u0028"+_acc +"\u007c"+_cbf +"\u007c"+_fbea +"\u007c"+_gba +"\u0029\u0029\u003f\u0024";

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfagd :=args [0].ValueNumber ;if _dfagd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_eagc ,_ceca :=_face (args [1],args [2],"\u0058\u004e\u0050\u0056");if _ceca .Type ==ResultTypeError {return _ceca ;};_ebgc :=_eagc ._beabb ;_fcbb :=_eagc ._cbffb ;_ffg :=0.0;_bffc :=_fcbb [0];for _gadf ,_affc :=range _ebgc {_ffg +=_affc /_bf .Pow (1+_dfagd ,(_fcbb [_gadf ]-_bffc )/365);};return MakeNumberResult (_ffg );};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_egd :=args [0].ValueNumber ;_ccf :=args [1].ValueNumber ;if _ccf < _egd {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _ccf ==_egd {return MakeNumberResult (0);};_cccgd :=_eb .ToLower (args [2].ValueString );if _cccgd =="\u0064"{return MakeNumberResult (_ccf -_egd );};_cafb :=_bbca (_egd );_dgfb :=_bbca (_ccf );_gac ,_cba ,_cfg :=_cafb .Date ();_bad ,_daf ,_dec :=_dgfb .Date ();_ffa :=int (_cba );_accb :=int (_daf );var _dea float64 ;switch _cccgd {case "\u0079":_dea =float64 (_bad -_gac );if _accb < _ffa ||(_accb ==_ffa &&_dec < _cfg ){_dea --;};case "\u006d":_bbgb :=_bad -_gac ;_bgc :=_accb -_ffa ;if _dec < _cfg {_bgc --;};if _bgc < 0{_bbgb --;_bgc +=12;};_dea =float64 (_bbgb *12+_bgc );case "\u006d\u0064":_cbg :=_accb ;if _dec < _cfg {_cbg --;};_dea =float64 (int (_ccf -_bce (_bad ,_cbg ,_cfg )));case "\u0079\u006d":_dea =float64 (_accb -_ffa );if _dec < _cfg {_dea --;};if _dea < 0{_dea +=12;};case "\u0079\u0064":_acb :=_bad ;if _accb < _ffa ||(_accb ==_ffa &&_dec < _cfg ){_acb --;};_dea =float64 (int (_ccf -_bce (_acb ,_ffa ,_cfg )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_dea );};var _feba =[...]uint8 {0,20,37,60,78,96};var _ff =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};const _fbea ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_cccf :=args [0];if _cccf .Type !=ResultTypeArray &&_cccf .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_edfdg :=_cccf .ValueArray ;if len (_edfdg )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_edfdg )));};func _afdd (_gbbc ,_degf _dg .Time )bool {_gfgg :=_gbbc .Unix ();_dfeg :=_degf .Unix ();_aafd :=_gbbc .Year ();_ece :=_dgad (_aafd ,_dg .March ,1);if _ccfa (_aafd )&&_gfgg < _ece &&_dfeg >=_ece {return true ;};var _edgb =_degf .Year ();var _gdeb =_dgad (_edgb ,_dg .March ,1);return (_ccfa (_edgb )&&_dfeg >=_gdeb &&_gfgg < _gdeb );};func _efgf (_fddd ,_fdae ,_eadcd ,_gefc ,_efde float64 ,_geaa int )float64 {_cdbb :=_cca (_fddd ,_eadcd ,_gefc ,_efde ,_geaa );var _abdc float64 ;if _fdae ==1{if _geaa ==1{_abdc =0;}else {_abdc =-_gefc ;};}else {if _geaa ==1{_abdc =_aafb (_fddd ,_fdae -2,_cdbb ,_gefc ,1)-_cdbb ;}else {_abdc =_aafb (_fddd ,_fdae -1,_cdbb ,_gefc ,0);};};return _abdc *_fddd ;};func _cgb (_aaea ,_ecf _dg .Time ,_egc ,_faa int )_dg .Time {_fdg :=_ecf ;_aegc :=_aaea .Year ()-_ecf .Year ();_fdg =_fdg .AddDate (_aegc ,0,0);if _aaea .After (_fdg ){_fdg =_fdg .AddDate (1,0,0);};_dccg :=-12/_egc ;for _fdg .After (_aaea ){_fdg =_fdg .AddDate (0,_dccg ,0);};return _fdg ;};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ffc [][]Expression };

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_ccegd :=_eb .Split (v ,"\u003a");if len (_ccegd )!=2{return nil ;};return VerticalRange {_ccegd [0],_ccegd [1]};};func (_dfff Result )String ()string {return _dfff .Value ()};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_bdfg :=len (args );if _bdfg !=6&&_bdfg !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fffda ,_affbg ,_edge :=_fccg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _edge .Type ==ResultTypeError {return _edge ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdgdf :=args [2].ValueNumber ;if _gdgdf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_adacc :=args [3].ValueNumber ;if _adacc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aece :=args [4].ValueNumber ;if _aece <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfdc :=args [5];if _bfdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bcfb :=_bfdc .ValueNumber ;if !_eedf (_bcfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cbbda :=0;if _bdfg ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbbda =int (args [6].ValueNumber );if !_egfe (_cbbda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_bdfb ,_edge :=_cdfa (_fffda ,_affbg ,_gdgdf ,_adacc ,_aece ,_bcfb ,_cbbda );if _edge .Type ==ResultTypeError {return _edge ;};return MakeNumberResult (_bdfb );};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_dbefg ,_cbbag :=_gfbgg ("\u0046\u0049\u004e\u0044",args );if _cbbag .Type !=ResultTypeEmpty {return _cbbag ;};_cbaa :=_dbefg ._bbffb ;if _cbaa ==""{return MakeNumberResult (1.0);};_gdebce :=_dbefg ._ffgb ;_gbcg :=_dbefg ._adcd ;_gcfaf :=1;for _agabc :=range _gdebce {if _gcfaf < _gbcg {_gcfaf ++;continue ;};_abfeg :=_eb .Index (_gdebce [_agabc :],_cbaa );if _abfeg ==0{return MakeNumberResult (float64 (_gcfaf ));};_gcfaf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_cbbed :=len (args );if _cbbed !=6&&_cbbed !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggee ,_edec ,_dgadd :=_fccg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _dgadd .Type ==ResultTypeError {return _dgadd ;};_acgf :=args [2];if _acgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afde :=_acgf .ValueNumber ;if _afde < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fbfg :=args [3];if _fbfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_baggb :=_fbfg .ValueNumber ;if _baggb <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_gaf :=args [4];if _gaf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_bdfbe :=_gaf .ValueNumber ;if _bdfbe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dgga :=args [5];if _dgga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gfge :=float64 (int (_dgga .ValueNumber ));if !_eedf (_gfge ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fdbd :=0;if _cbbed ==7&&args [6].Type !=ResultTypeEmpty {_eafe :=args [6];if _eafe .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fdbd =int (_eafe .ValueNumber );if !_egfe (_fdbd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_gafb :=0.0;_edbcg :=0.0;_fadg :=1.0;_ecdd ,_dgadd :=_cdfa (_ggee ,_edec ,_afde ,_edbcg ,_bdfbe ,_gfge ,_fdbd );if _dgadd .Type ==ResultTypeError {return _dgadd ;};_fdcg ,_dgadd :=_cdfa (_ggee ,_edec ,_afde ,_fadg ,_bdfbe ,_gfge ,_fdbd );if _dgadd .Type ==ResultTypeError {return _dgadd ;};_bgag :=(_fadg -_edbcg )*0.5;for _eecgg :=0;_eecgg < 100&&_gafb !=_baggb ;_eecgg ++{_gafb ,_dgadd =_cdfa (_ggee ,_edec ,_afde ,_bgag ,_bdfbe ,_gfge ,_fdbd );if _dgadd .Type ==ResultTypeError {return _dgadd ;};if _baggb ==_ecdd {return MakeNumberResult (_edbcg );}else if _baggb ==_fdcg {return MakeNumberResult (_fadg );}else if _baggb ==_gafb {return MakeNumberResult (_bgag );}else if _baggb < _fdcg {_fadg *=2.0;_fdcg ,_dgadd =_cdfa (_ggee ,_edec ,_afde ,_fadg ,_bdfbe ,_gfge ,_fdbd );if _dgadd .Type ==ResultTypeError {return _dgadd ;};_bgag =(_fadg -_edbcg )*0.5;}else {if _baggb < _gafb {_edbcg =_bgag ;_ecdd =_gafb ;}else {_fadg =_bgag ;_fdcg =_gafb ;};_bgag =_fadg -(_fadg -_edbcg )*((_baggb -_fdcg )/(_ecdd -_fdcg ));};};return MakeNumberResult (_bgag );};type cmpResult int8 ;

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edb :=args [0].ValueNumber ;if _edb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcfgf :=args [1].ValueNumber ;if _dcfgf <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaegd :=args [2].ValueNumber ;if _eaegd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_bf .Log10 (_eaegd )-_bf .Log10 (_dcfgf ))/_bf .Log10 (1+_edb ));};type evCache struct{_de map[string ]Result ;_bcc *_fe .Mutex ;};func _eca (_cede ,_ccbd ,_cagd float64 )float64 {return (_cede *3600+_ccbd *60+_cagd )/86400};

// GetLocked returns FALSE for the invalid reference context.
func (_fegac *ivr )GetLocked (cellRef string )bool {return false };const _cecga =57359;

// String returns a string representation for Negate.
func (_bceca Negate )String ()string {return "\u002d"+_bceca ._bcdd .String ()};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_ebcg :=len (args );if _ebcg !=5&&_ebcg !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aege ,_ebdee ,_acf :=_fccg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _acf .Type ==ResultTypeError {return _acf ;};_cdff ,_acf :=_fcfg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _acf .Type ==ResultTypeError {return _acf ;};if _cdff >=_aege {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fbbb :=args [3].ValueNumber ;if _fbbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aabcg :=args [4].ValueNumber ;if _aabcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_ebgd :=0;if _ebcg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebgd =int (args [5].ValueNumber );if !_egfe (_ebgd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_dcbdg ,_acf :=_cfgb (_aege ,_ebdee ,_ebgd );if _acf .Type ==ResultTypeError {return _acf ;};_acdd ,_acf :=_cfgb (_cdff ,_ebdee ,_ebgd );if _acf .Type ==ResultTypeError {return _acf ;};_eedbd ,_acf :=_cfgb (_cdff ,_aege ,_ebgd );if _acf .Type ==ResultTypeError {return _acf ;};_abacg :=1+_acdd *_fbbb ;_egdb :=1+_dcbdg *_aabcg ;return MakeNumberResult ((_abacg /_egdb -_eedbd *_fbbb )*100);};func _abcgb (){_dbfgc =_dc .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_cfdae =_dc .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_gacea =_dc .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_cbafc =_dc .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_gdcfd =_dc .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_bfddb =_dc .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};const _cbf ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Reference returns an invalid reference for String.
func (_ffdb String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _aec ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// String returns a string representation of a named range.
func (_gfdecd NamedRangeRef )String ()string {return _gfdecd ._gccd };func _daeb ()yyParser {return &yyParserImpl {}};func _cecff (_cgbb []Result )Result {_cage :=_cgbb [0].ValueArray ;if len (_cgbb )==1{_abcf :=[][]Result {};for _ ,_fdffc :=range _cage {_abcf =append (_abcf ,_gfgae ([]Result {MakeListResult (_fdffc )}).ValueList );};return MakeArrayResult (_abcf );}else if len (_cgbb )==2{_dfbab :=len (_cage );_bcfd :=len (_cage [0]);_bgcg :=_daaa (_cgbb [1],_dfbab ,_bcfd );_abffd :=len (_bgcg );_gafg :=[][]Result {};var _acdb []Result ;for _fedff ,_eaef :=range _cage {if _fedff < _abffd {_acdb =_bgcg [_fedff ];}else {_acdb =_bbfa (MakeErrorResultType (ErrorTypeNA ,""),_bcfd );};_gafg =append (_gafg ,_gfgae ([]Result {MakeListResult (_eaef ),MakeListResult (_acdb )}).ValueList );};return MakeArrayResult (_gafg );}else if len (_cgbb )==3{_gbda :=len (_cage );_addd :=len (_cage [0]);_bbbbb :=_daaa (_cgbb [1],_gbda ,_addd );_daeg :=_daaa (_cgbb [2],_gbda ,_addd );_agfc :=len (_bbbbb );_gbfb :=len (_daeg );_ggfa :=[][]Result {};var _adcf ,_ecaef []Result ;for _gfag ,_agfe :=range _cage {if _gfag < _agfc {_adcf =_bbbbb [_gfag ];}else {_adcf =_bbfa (MakeErrorResultType (ErrorTypeNA ,""),_addd );};if _gfag < _gbfb {_ecaef =_daeg [_gfag ];}else {_ecaef =_bbfa (MakeErrorResultType (ErrorTypeNA ,""),_addd );};_ggfa =append (_ggfa ,_gfgae ([]Result {MakeListResult (_agfe ),MakeListResult (_adcf ),MakeListResult (_ecaef )}).ValueList );};return MakeArrayResult (_ggfa );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_cafgg :=len (args );if _cafgg < 3||_cafgg > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ebfa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afba :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cgda :=args [2].ValueNumber ;_ecgf :=0.0;if _cafgg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecgf =args [3].ValueNumber ;};_acec :=0.0;if _cafgg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_acec =args [4].ValueNumber ;if _acec !=0{_acec =1;};};_eagf :=_afba *(1+_ebfa *_acec )-_ecgf *_ebfa ;_abg :=(_cgda *_ebfa +_afba *(1+_ebfa *_acec ));return MakeNumberResult (_bf .Log (_eagf /_abg )/_bf .Log (1+_ebfa ));};var _beeagc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _fgfb (_fdba Result ,_cgef *criteriaParsed )bool {if _fdba .Type ==ResultTypeEmpty {return false ;};if _cgef ._ffcae {return _fdba .ValueNumber ==_cgef ._dgbb ;}else {_adfa :=_eb .ToLower (_fdba .ValueString );return _cgef ._aead ==_adfa ||_ga .Match (_cgef ._aead ,_adfa );};};func (_fgce *noCache )SetCache (key string ,value Result ){};var _dage string =string ([]byte {92});func _dd (_be Result )bool {if _be .Type ==ResultTypeString {return _be .ValueString =="";};return _be .ValueNumber ==0;};type rangeIndex struct{_effd int ;_daad int ;};var _cedgd =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _bbeg (_ggadg []Result ,_dcgbe string )(*couponArgs ,Result ){_ffca :=len (_ggadg );if _ffca !=3&&_ffca !=4{return nil ,MakeErrorResult (_dcgbe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egb ,_bgd ,_cff :=_fccg (_ggadg [0],_ggadg [1],_dcgbe );if _cff .Type ==ResultTypeError {return nil ,_cff ;};if _ggadg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcgbe +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffcad :=_ggadg [2].ValueNumber ;if !_eedf (_ffcad ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_dcgbe );};_bgdf :=0;if _ffca ==4&&_ggadg [3].Type !=ResultTypeEmpty {if _ggadg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcgbe +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgdf =int (_ggadg [3].ValueNumber );if !_egfe (_bgdf ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dcgbe );};};return &couponArgs {_egb ,_bgd ,int (_ffcad ),_bgdf },_ebce ;};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_bbaf ,_abeb string };const _ecfbg =57365;const _gffe =57346;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {v }};func _cfgb (_adgd ,_aada float64 ,_gdga int )(float64 ,Result ){_dgca ,_aeea :=_bbca (_adgd ),_bbca (_aada );_cecd :=_dgca .Unix ();_fgff :=_aeea .Unix ();if _cecd ==_fgff {return 0,_ebce ;};_abca ,_ebd ,_fcfe :=_dgca .Date ();_egdc ,_ecc ,_aadg :=_aeea .Date ();_fdfg ,_aca :=int (_ebd ),int (_ecc );var _dee ,_dbb float64 ;switch _gdga {case 0:if _fcfe ==31{_fcfe --;};if _fcfe ==30&&_aadg ==31{_aadg --;}else if _fbfe :=_ccfa (_abca );_fdfg ==2&&((_fbfe &&_fcfe ==29)||(!_fbfe &&_fcfe ==28)){_fcfe =30;if _dgaa :=_ccfa (_egdc );_aca ==2&&((_dgaa &&_aadg ==29)||(!_dgaa &&_aadg ==28)){_aadg =30;};};_dee =float64 ((_egdc -_abca )*360+(_aca -_fdfg )*30+(_aadg -_fcfe ));_dbb =360;case 1:_dee =_aada -_adgd ;_abbb :=_abca !=_egdc ;if _abbb &&(_egdc !=_abca +1||_fdfg < _aca ||(_fdfg ==_aca &&_fcfe < _aadg )){_fbba :=0;for _cbbg :=_abca ;_cbbg <=_egdc ;_cbbg ++{_fbba +=_dbbe (_cbbg ,1);};_dbb =float64 (_fbba )/float64 (_egdc -_abca +1);}else {if !_abbb &&_ccfa (_abca ){_dbb =366;}else {if _abbb &&((_ccfa (_abca )&&(_fdfg < 2||(_fdfg ==2&&_fcfe <=29)))||(_ccfa (_egdc )&&(_aca > 2||(_aca ==2&&_aadg ==29)))){_dbb =366;}else {_dbb =365;};};};case 2:_dee =_aada -_adgd ;_dbb =360;case 3:_dee =_aada -_adgd ;_dbb =365;case 4:if _fcfe ==31{_fcfe --;};if _aadg ==31{_aadg --;};_dee =float64 ((_egdc -_abca )*360+(_aca -_fdfg )*30+(_aadg -_fcfe ));_dbb =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _dee /_dbb ,_ebce ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_agdc ,_gbc :=_fcac (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _gbc .Type ==ResultTypeError {return _gbc ;};_cffd :=_agdc ._gegf ;_gaag :=_agdc ._ecfb ;_gfdf :=_agdc ._abae ;_ggcd :=_agdc ._affb ;_bcaa :=_agdc ._egfg ;_eff :=_agdc ._aagd ;_deee :=_cca (_cffd ,_gaag ,_gfdf ,0,_eff );_bbfcb :=0.0;if _ggcd ==1{if _eff ==0{_bbfcb =_deee +_gfdf *_cffd ;}else {_bbfcb =_deee ;};_ggcd ++;};for _fefa :=_ggcd ;_fefa <=_bcaa ;_fefa ++{if _eff ==1{_bbfcb +=_deee -(_aafb (_cffd ,_fefa -2,_deee ,_gfdf ,1)-_deee )*_cffd ;}else {_bbfcb +=_deee -_aafb (_cffd ,_fefa -1,_deee ,_gfdf ,0)*_cffd ;};};return MakeNumberResult (_bbfcb );};func _ebed (_fbge int )string {if _fbge >=0&&_fbge < len (_cdgbb ){if _cdgbb [_fbge ]!=""{return _cdgbb [_fbge ];};};return _d .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_fbge );};func (_bbgac PrefixHorizontalRange )horizontalRangeReference (_gfcag string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_gfcag ,_bbgac ._dgcfe ,_bbgac ._cbad );};const _eda ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bgcf ,_bffaf ,_babf :=_fccg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _babf .Type ==ResultTypeError {return _babf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdaa :=_bffaf -_bgcf ;if _gdaa > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_baffd :=args [2].ValueNumber ;if _baffd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_baffd *_gdaa /360));};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bacbd :=args [0];switch _bacbd .Type {case ResultTypeError :return _bacbd ;case ResultTypeNumber ,ResultTypeString :return _cfge (args [0]);case ResultTypeList :_fdac :=_bacbd .ValueList ;_fcdg :=[]Result {};for _ ,_bcbd :=range _fdac {_cffc :=_cfge (_bcbd );if _cffc .Type ==ResultTypeError {return _cffc ;};_fcdg =append (_fcdg ,_cffc );};return MakeListResult (_fcdg );case ResultTypeArray :_ddbc :=_bacbd .ValueArray ;_dbace :=[][]Result {};for _ ,_cbfe :=range _ddbc {_eddfa :=[]Result {};for _ ,_cebd :=range _cbfe {_ffaf :=_cfge (_cebd );if _ffaf .Type ==ResultTypeError {return _ffaf ;};_eddfa =append (_eddfa ,_ffaf );};_dbace =append (_dbace ,_eddfa );};return MakeArrayResult (_dbace );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_adefe :=len (args );if _adefe !=4&&_adefe !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_afgd ,_becb ,_aabg :=_fccg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _aabg .Type ==ResultTypeError {return _aabg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcgg :=args [2].ValueNumber ;if _fcgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecdgc :=args [3].ValueNumber ;if _ecdgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfab :=0;if _adefe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfab =int (args [4].ValueNumber );if !_egfe (_bfab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_bfeb ,_aabg :=_cfgb (_afgd ,_becb ,_bfab );if _aabg .Type ==ResultTypeError {return _aabg ;};return MakeNumberResult (_fcgg /(1-_ecdgc *_bfeb ));};var _cdcg =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};func _agff (_ceed [][]Result ,_defgg int )[][]Result {_cdfd :=[][]Result {};for _cagca :=range _ceed {if _cagca ==0{continue ;};_abfff :=[]Result {};for _ffdd :=range _ceed {if _ffdd ==_defgg {continue ;};_abfff =append (_abfff ,_ceed [_cagca ][_ffdd ]);};_cdfd =append (_cdfd ,_abfff );};return _cdfd ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_dbac ,_daa :=_cafg (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _daa .Type ==ResultTypeError {return _daa ;};_bafa :=_dbac ._feae ;_bccga :=_dbac ._cgbd ;_bfaa :=_dbac ._fdgf ;_dfba :=_dbac ._gae ;_bfag :=_dbac ._gfdb ;_aagg :=_dbac ._faee ;return _fffd (_bafa ,_bccga ,_bfaa ,_dfba ,_bfag ,_aagg );};

// Bool is a boolean expression.
type Bool struct{_fc bool };const (_cgbe cmpResult =0;_eafc cmpResult =-1;_eggf cmpResult =1;_cfbea cmpResult =2;);func _efda (_dbda ,_fafe float64 )bool {return _bf .Abs (_dbda -_fafe )< 1.0e-6};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_cfdg ,_dbbf ,_cbfac :=_fbcb (args );if _cbfac .Type ==ResultTypeError {return _cbfac ;};return MakeNumberResult (_dgeg (_cfdg )/_dbbf );};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_adcae :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_adcae *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_ecge :=_bcdaf (args [1]);for _ ,_bcab :=range _ecge {for _ ,_cdda :=range _bcab {if _cdda .Type !=ResultTypeNumber ||_cdda .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_adcae *=1.0+_cdda .ValueNumber ;};};return MakeNumberResult (_adcae );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_dggg :=len (args );if _dggg !=4&&_dggg !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfeb :=args [0].ValueNumber ;if _gfeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdeda :=args [1].ValueNumber ;if _gdeda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gedb :=args [2].ValueNumber ;if _gedb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebcec :=args [3].ValueNumber ;if _ebcec < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _ebcec > _gedb {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_bcb :=2.0;if _dggg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcb =args [4].ValueNumber ;if _bcb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_dfbb (_gfeb ,_gdeda ,_gedb ,_ebcec ,_bcb ));};const _ecdcf =57378;

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_eaeb Expression ;_eaagc Expression ;};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cgfb :=args [0].ValueNumber ;_eeae :=args [1].ValueNumber ;_aadd :=args [2].ValueNumber ;_bege :=_eca (_cgfb ,_eeae ,_aadd );if _bege >=0{return MakeNumberResult (_bege );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_bf .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};const _ffga =57351;func _ddgb (_bgbd []Result ,_cbcg bool )Result {_fdfbd :="\u004d\u0049\u004e";if _cbcg {_fdfbd ="\u004d\u0049\u004e\u0041";};if len (_bgbd )==0{return MakeErrorResult (_fdfbd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfbea :=_bf .MaxFloat64 ;for _ ,_ccbdd :=range _bgbd {switch _ccbdd .Type {case ResultTypeNumber :if (_cbcg ||!_ccbdd .IsBoolean )&&_ccbdd .ValueNumber < _bfbea {_bfbea =_ccbdd .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_aaeag :=_ddgb (_ccbdd .ListValues (),_cbcg );if _aaeag .ValueNumber < _bfbea {_bfbea =_aaeag .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_abaf :=0.0;if _cbcg {_abaf =_ccbdd .AsNumber ().ValueNumber ;};if _abaf < _bfbea {_bfbea =_abaf ;};default:_fg .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_fdfbd +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccbdd .Type );};};if _bfbea ==_bf .MaxFloat64 {_bfbea =0;};return MakeNumberResult (_bfbea );};var _cegc =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Reference returns a string reference value to a cell.
func (_dcd CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_dcd ._bbc };};

// String returns a string representation of PrefixExpr.
func (_gcbdc PrefixExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021%\u0073",_gcbdc ._eaeb .String (),_gcbdc ._eaagc .String ());};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _fgbfd (args ,_gdbe )};

// String returns a string representation of Number.
func (_eagd Number )String ()string {return _a .FormatFloat (_eagd ._bagea ,'f',-1,64)};var _fggc =map[string ]*_dc .Regexp {};func _afge (_cbef string )string {_cbef =_eb .Replace (_cbef ,"\u000a","\u005c\u006e",-1);_cbef =_eb .Replace (_cbef ,"\u000d","\u005c\u0072",-1);_cbef =_eb .Replace (_cbef ,"\u0009","\u005c\u0074",-1);return _cbef ;};

// String returns a string representation of a range with prefix.
func (_gbgafc PrefixRangeExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gbgafc ._bbcdc .String (),_gbgafc ._bede .String (),_gbgafc ._cagfa .String ());};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_agab (args ,_abgd ))};func _aafb (_aced ,_beag ,_aafc ,_edgc float64 ,_fcfd int )float64 {var _acca float64 ;if _aced ==0{_acca =_edgc +_aafc *_beag ;}else {_dab :=_bf .Pow (1+_aced ,_beag );if _fcfd ==1{_acca =_edgc *_dab +_aafc *(1+_aced )*(_dab -1)/_aced ;}else {_acca =_edgc *_dab +_aafc *(_dab -1)/_aced ;};};return -_acca ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_fdag ,_eefb :=_bbeg (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _eefb .Type ==ResultTypeError {return _eefb ;};return MakeNumberResult (_bbcbe (_fdag ._baa ,_fdag ._aaba ,_fdag ._dbd ,_fdag ._eedee ));};func _cdfa (_bgdc ,_efed ,_gggg ,_bccf ,_gecg ,_aaca float64 ,_bdffe int )(float64 ,Result ){_efbg :=int (_aaca );_fcgf :=_bcaf (_bgdc ,_efed ,_efbg ,_bdffe );_bcag :=_gabb (_bgdc ,_efed ,_efbg ,_bdffe )/_fcgf ;_fbbab ,_bgb :=_gag (_bgdc ,_efed ,_efbg ,_bdffe );if _bgb .Type ==ResultTypeError {return 0,_bgb ;};_beef :=_bbcbe (_bgdc ,_efed ,_efbg ,_bdffe );_gda :=_gecg /_bf .Pow (1+_bccf /_aaca ,_fbbab -1+_bcag );_gda -=100*_gggg /_aaca *_beef /_fcgf ;_ebde :=100*_gggg /_aaca ;_dbef :=1+_bccf /_aaca ;for _ddeb :=0.0;_ddeb < _fbbab ;_ddeb ++{_gda +=_ebde /_bf .Pow (_dbef ,_ddeb +_bcag );};return _gda ,MakeEmptyResult ();};

// Reference returns a string reference value to a named range.
func (_ccfce NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_ccfce ._gccd };};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgfg :=ctx .GetEpoch ();_bab ,_gbdg :=_abdbd (args [0].Value (),_fgfg );if _gbdg !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_bab .Year ()));};type Expression interface{Eval (_eeb Context ,_gaaf Evaluator )Result ;Reference (_cgg Context ,_cgf Evaluator )Reference ;String ()string ;Update (_aeg *_g .UpdateQuery )Expression ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_eddb ,_aeffe :=_gfbgg ("\u0046\u0049\u004e\u0044",args );if _aeffe .Type !=ResultTypeEmpty {return _aeffe ;};_gecac :=_eddb ._bbffb ;if _gecac ==""{return MakeNumberResult (1.0);};_egfcc :=_eddb ._ffgb ;_cace :=_eddb ._adcd -1;_aafcfd :=1;_edbce :=0;for _bdaa :=range _egfcc {if _bdaa !=0{_egae :=1;if _bdaa -_edbce > 1{_egae =2;};_aafcfd +=_egae ;};if _aafcfd > _cace {_dacb :=_eb .Index (_egfcc [_bdaa :],_gecac );if _dacb ==0{return MakeNumberResult (float64 (_aafcfd ));};};_edbce =_bdaa ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _bfc =map[string ]*_dc .Regexp {};

// String returns a string of a range.
func (_adbd Range )String ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_adbd ._cgee .String (),_adbd ._ccgcd .String ());};const _ebcff =57369;func (_ffbg *ivr )SetOffset (col ,row uint32 ){};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eeea :=args [0].AsNumber ();_aabd :=args [1].AsNumber ();if _eeea .Type !=ResultTypeNumber ||_aabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _aabd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_bf .Trunc (_eeea .ValueNumber /_aabd .ValueNumber ));};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_egcda :=args [0].AsString ();if _egcda .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_egcda .ValueString )));};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_baaag :=args [0].AsNumber ();if _baaag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddeca :=float64 (1);if _baaag .ValueNumber < 0{_ddeca =-1;};if len (args )> 1{_aabba :=args [1].AsNumber ();if _aabba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_ddeca =_bf .Abs (_aabba .ValueNumber );};if len (args )==1{return MakeNumberResult (_bf .Floor (_baaag .ValueNumber ));};_eacc :=_baaag .ValueNumber ;_eacc ,_fcag :=_bf .Modf (_eacc /_ddeca );if _fcag !=0{if _baaag .ValueNumber < 0{_eacc --;};};return MakeNumberResult (_eacc *_ddeca );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_ddcf ,_dbbeg :=_bbeg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _dbbeg .Type ==ResultTypeError {return _dbbeg ;};return MakeNumberResult (_gabb (_ddcf ._baa ,_ddcf ._aaba ,_ddcf ._dbd ,_ddcf ._eedee ));};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_bag ConstArrayExpr )Update (q *_g .UpdateQuery )Expression {return _bag };const _ggba =57377;func _dbfc (_dgae string )(int ,int ,int ,bool ,Result ){_bcdc :="";_fbf :=[]string {};for _ggcf ,_ffe :=range _bfc {_fbf =_ffe .FindStringSubmatch (_dgae );if len (_fbf )> 1{_bcdc =_ggcf ;break ;};};if _bcdc ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_deg :=false ;var _abbc ,_cefe ,_ecdg int ;var _cac error ;switch _bcdc {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_cefe ,_cac =_a .Atoi (_fbf [1]);if _cac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_ecdg ,_cac =_a .Atoi (_fbf [3]);if _cac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_abbc ,_cac =_a .Atoi (_fbf [5]);if _cac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};if _abbc < 0||_abbc > 9999||(_abbc > 99&&_abbc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_abbc =_bee (_abbc );_deg =_fbf [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_cefe =_gb [_fbf [1]];_ecdg ,_cac =_a .Atoi (_fbf [14]);if _cac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_abbc ,_cac =_a .Atoi (_fbf [16]);if _cac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};if _abbc < 0||_abbc > 9999||(_abbc > 99&&_abbc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_abbc =_bee (_abbc );_deg =_fbf [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_dcgb ,_cgfa :=_a .Atoi (_fbf [1]);if _cgfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_gacb ,_cgfa :=_a .Atoi (_fbf [3]);if _cgfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_gace ,_cgfa :=_a .Atoi (_fbf [5]);if _cgfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};if _dcgb >=1900&&_dcgb < 10000{_abbc =_dcgb ;_cefe =_gacb ;_ecdg =_gace ;}else if _dcgb > 0&&_dcgb < 13{_cefe =_dcgb ;_ecdg =_gacb ;_abbc =_gace ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_deg =_fbf [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_abbc ,_cac =_a .Atoi (_fbf [16]);if _cac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_cefe =_gb [_fbf [3]];_ecdg ,_cac =_a .Atoi (_fbf [1]);if _cac !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_deg =_fbf [19]=="";};if !_abd (_abbc ,_cefe ,_ecdg ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};return _abbc ,_cefe ,_ecdg ,_deg ,_ebce ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_adcfb :=_gfef (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _adcfb .Type !=ResultTypeEmpty {return _adcfb ;};_dcgd :=_fcagf (args [1:]);_cdfga :=-_bf .MaxFloat64 ;_adgf :=_bcdaf (args [0]);for _ ,_caeb :=range _dcgd {_aagbc :=_adgf [_caeb ._effd ][_caeb ._daad ].ValueNumber ;if _cdfga < _aagbc {_cdfga =_aagbc ;};};if _cdfga ==-_bf .MaxFloat64 {_cdfga =0;};return MakeNumberResult (float64 (_cdfga ));};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bacb :=args [0];_eecb :=args [1];if _eecb .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_edff :=args [2].AsNumber ();if _edff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cabd :=false ;if len (args )==4{_cabcf :=args [3].AsNumber ();if _cabcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _cabcf .ValueNumber ==0{_cabd =true ;};};_ebdc :=-1;_faba :=false ;if len (_eecb .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_fdgc :=_eecb .ValueArray [0];_dabbd :for _eege ,_ggbcd :=range _fdgc {switch _egeg (_ggbcd ,_bacb ,false ,_cabd ){case _eafc :_ebdc =_eege ;case _cgbe :_ebdc =_eege ;_faba =true ;break _dabbd ;};};if _ebdc ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gdab :=int (_edff .ValueNumber )-1;if _gdab < 0||_gdab > len (_eecb .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_fdgc =_eecb .ValueArray [_gdab ];if _ebdc < 0||_ebdc >=len (_fdgc ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _faba ||!_cabd {return _fdgc [_ebdc ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};func _fagfd (_bbfe yyLexer )int {return _daeb ().Parse (_bbfe )};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbee :=args [0].AsNumber ();if _fbee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fbee .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bgcd :=float64 (1);_fega :=_bf .Trunc (_fbee .ValueNumber );for _eefe :=_fega ;_eefe > 1;_eefe -=2{_bgcd *=_eefe ;};return MakeNumberResult (_bgcd );};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_fdge .Lock ();defer _fdge .Unlock ();if _ggebf ,_aebfg :=_abgg [name ];_aebfg {return _ggebf ;};return nil ;};

// String returns a string representation of CellRef.
func (_cae CellRef )String ()string {return _cae ._bbc };

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_cgfc :=len (args );if _cgfc !=4&&_cgfc !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fec ,_cafbe ,_gcffd :=_fccg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _gcffd .Type ==ResultTypeError {return _gcffd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_edea :=args [2].ValueNumber ;if _edea <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egg :=args [3].ValueNumber ;if _egg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dggc :=0;if _cgfc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dggc =int (args [4].ValueNumber );if !_egfe (_dggc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_ddef ,_gcffd :=_cfgb (_fec ,_cafbe ,_dggc );if _gcffd .Type ==ResultTypeError {return _gcffd ;};return MakeNumberResult ((_egg -_edea )/_egg /_ddef );};type cumulArgs struct{_gegf float64 ;_ecfb float64 ;_abae float64 ;_affb float64 ;_egfg float64 ;_aagd int ;};func _aefg (_edgf ,_dddc _dg .Time ,_bdfd int )_dg .Time {_ggac :=_dg .Date (_edgf .Year (),_dddc .Month (),_dddc .Day (),0,0,0,0,_dg .UTC );if _ggac .After (_edgf ){_ggac =_ggac .AddDate (-1,0,0);};for !_ggac .After (_edgf ){_ggac =_ggac .AddDate (0,12/_bdfd ,0);};return _ggac ;};const _acab =2;func _adgg (_gacfe Result ,_cabde *criteriaParsed )bool {_aegf :=_eb .ToLower (_gacfe .ValueString );_fbacg :=_cabde ._gbbe ._agbag ;_afcca :=_cabde ._gbbe ._cgdf ;if _fbacg ==_cccgda {return _aegf ==_afcca ||_ga .Match (_afcca ,_aegf );};if _gacfe .Type !=ResultTypeEmpty {if _aegf ==_cabde ._aead ||_ga .Match (_cabde ._aead ,_aegf ){return true ;};if _ ,_cfaaf :=_a .ParseFloat (_afcca ,64);_cfaaf ==nil {return false ;};switch _fbacg {case _adfd :return _aegf <=_afcca ;case _baab :return _aegf >=_afcca ;case _fdga :return _aegf < _afcca ;case _cbgb :return _aegf > _afcca ;};};return false ;};const _gbffg int =0;func _beaa (_dcfgfd int )string {if _dcfgfd >=1&&_dcfgfd -1< len (_cdcg ){if _cdcg [_dcfgfd -1]!=""{return _cdcg [_dcfgfd -1];};};return _d .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_dcfgfd );};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_aecf :=args [0];switch _aecf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_ade :=_bbca (_aecf .ValueNumber );return MakeNumberResult (float64 (_ade .Day ()));case ResultTypeString :_abfg :=_eb .ToLower (_aecf .ValueString );if !_bba (_abfg ){_ ,_ ,_ ,_ ,_ddd ,_cef :=_efae (_abfg );if _cef .Type ==ResultTypeError {_cef .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _cef ;};if _ddd {return MakeNumberResult (0);};};_ ,_ ,_bfb ,_ ,_abfc :=_dbfc (_abfg );if _abfc .Type ==ResultTypeError {return _abfc ;};return MakeNumberResult (float64 (_bfb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};func _egge (_bcfgc []Result ,_gfbb string )(float64 ,float64 ,Result ){if len (_bcfgc )!=2{return 0,0,MakeErrorResult (_gfbb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bcfgc [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfbb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fade :=_bcfgc [0].ValueNumber ;if _bcfgc [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gfbb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dggf :=float64 (int (_bcfgc [1].ValueNumber ));if _dggf < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_gfbb +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _fade ,_dggf ,_ebce ;};func _cdfbg (_gfbf []Result ,_bgcgg bool )(float64 ,float64 ){_cddde :=0.0;_gcge :=0.0;for _ ,_gdac :=range _gfbf {switch _gdac .Type {case ResultTypeNumber :if _bgcgg ||!_gdac .IsBoolean {_gcge +=_gdac .ValueNumber ;_cddde ++;};case ResultTypeList ,ResultTypeArray :_efcb ,_aagf :=_cdfbg (_gdac .ListValues (),_bgcgg );_gcge +=_efcb ;_cddde +=_aagf ;case ResultTypeString :if _bgcgg {_cddde ++;};case ResultTypeEmpty :};};return _gcge ,_cddde ;};func _cece (_bffg ,_bgfe Reference )string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_bffg .Value ,_bgfe .Value );};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _gdbff (args ,true )};func (_cedga PrefixVerticalRange )verticalRangeReference (_eddab string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eddab ,_cedga ._geaf ,_cedga ._aeca );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_fdge .Lock ();defer _fdge .Unlock ();if _ ,_dgeed :=_abgg [name ];_dgeed {_fg .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_abgg [name ]=fn ;};

// Eval evaluates the binary expression using the context given.
func (_gab BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_bfg :=_gab ._ed .Eval (ctx ,ev );if _bfg .Type ==ResultTypeError {return _bfg ;};_cb :=_gab ._bb .Eval (ctx ,ev );if _cb .Type ==ResultTypeError {return _cb ;};if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeArray {if !_cd (_bfg .ValueArray ,_cb .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ca (_gab ._ae ,_bfg .ValueArray ,_cb .ValueArray );}else if _bfg .Type ==ResultTypeList {if len (_bfg .ValueList )!=len (_cb .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ge (_gab ._ae ,_bfg .ValueList ,_cb .ValueList );};}else if _bfg .Type ==ResultTypeArray &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return _gcgf (_gab ._ae ,_bfg .ValueArray ,_cb );}else if _bfg .Type ==ResultTypeList &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return _gec (_gab ._ae ,_bfg .ValueList ,_cb );};switch _gab ._ae {case BinOpTypePlus :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeNumberResult (_bfg .ValueNumber +_cb .ValueNumber );};};case BinOpTypeMinus :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeNumberResult (_bfg .ValueNumber -_cb .ValueNumber );};};case BinOpTypeMult :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeNumberResult (_bfg .ValueNumber *_cb .ValueNumber );};};case BinOpTypeDiv :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {if _cb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_bfg .ValueNumber /_cb .ValueNumber );};};case BinOpTypeExp :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeNumberResult (_bf .Pow (_bfg .ValueNumber ,_cb .ValueNumber ));};};case BinOpTypeLT :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeBoolResult (_bfg .ValueNumber < _cb .ValueNumber );};if _bfg .Type ==ResultTypeString {return MakeBoolResult (_bfg .ValueString < _cb .ValueString );};if _bfg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bfg .Type ==ResultTypeString &&_cb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bfg .Type ==ResultTypeNumber &&_cb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bfg .Type ==ResultTypeEmpty &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_bfg .Type ==ResultTypeNumber ||_bfg .Type ==ResultTypeString )&&_cb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeBoolResult (_bfg .ValueNumber > _cb .ValueNumber );};if _bfg .Type ==ResultTypeString {return MakeBoolResult (_bfg .ValueString > _cb .ValueString );};if _bfg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _bfg .Type ==ResultTypeString &&_cb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bfg .Type ==ResultTypeNumber &&_cb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bfg .Type ==ResultTypeEmpty &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_bfg .Type ==ResultTypeNumber ||_bfg .Type ==ResultTypeString )&&_cb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeBoolResult (_bfg .ValueNumber ==_cb .ValueNumber );};if _bfg .Type ==ResultTypeString {return MakeBoolResult (_bfg .ValueString ==_cb .ValueString );};if _bfg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_bfg .Type ==ResultTypeString &&_cb .Type ==ResultTypeNumber )||(_bfg .Type ==ResultTypeNumber &&_cb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _bfg .Type ==ResultTypeEmpty &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return MakeBoolResult (_dd (_cb ));}else if (_bfg .Type ==ResultTypeNumber ||_bfg .Type ==ResultTypeString )&&_cb .Type ==ResultTypeEmpty {return MakeBoolResult (_dd (_bfg ));};case BinOpTypeNE :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeBoolResult (_bfg .ValueNumber !=_cb .ValueNumber );};if _bfg .Type ==ResultTypeString {return MakeBoolResult (_bfg .ValueString !=_cb .ValueString );};if _bfg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_bfg .Type ==ResultTypeString &&_cb .Type ==ResultTypeNumber )||(_bfg .Type ==ResultTypeNumber &&_cb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _bfg .Type ==ResultTypeEmpty &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return MakeBoolResult (!_dd (_cb ));}else if (_bfg .Type ==ResultTypeNumber ||_bfg .Type ==ResultTypeString )&&_cb .Type ==ResultTypeEmpty {return MakeBoolResult (!_dd (_bfg ));};case BinOpTypeLEQ :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeBoolResult (_bfg .ValueNumber <=_cb .ValueNumber );};if _bfg .Type ==ResultTypeString {return MakeBoolResult (_bfg .ValueString <=_cb .ValueString );};if _bfg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bfg .Type ==ResultTypeString &&_cb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _bfg .Type ==ResultTypeNumber &&_cb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _bfg .Type ==ResultTypeEmpty &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return MakeBoolResult (_dd (_cb ));}else if (_bfg .Type ==ResultTypeNumber ||_bfg .Type ==ResultTypeString )&&_cb .Type ==ResultTypeEmpty {return MakeBoolResult (_dd (_bfg ));};case BinOpTypeGEQ :if _bfg .Type ==_cb .Type {if _bfg .Type ==ResultTypeNumber {return MakeBoolResult (_bfg .ValueNumber >=_cb .ValueNumber );};if _bfg .Type ==ResultTypeString {return MakeBoolResult (_bfg .ValueString >=_cb .ValueString );};if _bfg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _bfg .Type ==ResultTypeString &&_cb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _bfg .Type ==ResultTypeNumber &&_cb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _bfg .Type ==ResultTypeEmpty &&(_cb .Type ==ResultTypeNumber ||_cb .Type ==ResultTypeString ){return MakeBoolResult (_dd (_cb ));}else if (_bfg .Type ==ResultTypeNumber ||_bfg .Type ==ResultTypeString )&&_cb .Type ==ResultTypeEmpty {return MakeBoolResult (_dd (_bfg ));};case BinOpTypeConcat :return MakeStringResult (_bfg .Value ()+_cb .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func _bbcbe (_caaa ,_ebff float64 ,_aaeg ,_beb int )float64 {_efaf :=_bbca (_caaa );_eedeb :=_bbca (_ebff );_deb :=_cgb (_efaf ,_eedeb ,_aaeg ,_beb );return _gcac (_deb ,_efaf ,_beb );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdcf :=args [0].AsNumber ();if _gdcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdcf .ValueNumber < 0{return MakeNumberResult (-1);}else if _gdcf .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// String returns a string representation of a horizontal range with prefix.
func (_fffdb PrefixHorizontalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_fffdb ._fcfee .String (),_fffdb ._dgcfe ,_fffdb ._cbad );};

// String is a string expression.
type String struct{_bcccb string };var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _ddgb (args ,false )};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdgfb :=args [0].AsString ();if _fdgfb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_ccag :=_e .Buffer {};_cddb :=false ;for _ ,_cdfcd :=range _fdgfb .ValueString {if !_cddb &&_fdd .IsLetter (_cdfcd ){_ccag .WriteRune (_fdd .ToUpper (_cdfcd ));}else {_ccag .WriteRune (_fdd .ToLower (_cdfcd ));};_cddb =_fdd .IsLetter (_cdfcd );};return MakeStringResult (_ccag .String ());};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_afbc Result )ListValues ()[]Result {if _afbc .Type ==ResultTypeArray {_ebeb :=[]Result {};for _ ,_fbaef :=range _afbc .ValueArray {for _ ,_ceccf :=range _fbaef {_ebeb =append (_ebeb ,_ceccf );};};return _ebeb ;};if _afbc .Type ==ResultTypeList {return _afbc .ValueList ;};return nil ;};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_bbdf ,_ccef :=_bbeg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _ccef .Type ==ResultTypeError {return _ccef ;};return MakeNumberResult (_bcaf (_bbdf ._baa ,_bbdf ._aaba ,_bbdf ._dbd ,_bbdf ._eedee ));};func (_eab BinOpType )String ()string {if _eab >=BinOpType (len (_ff )-1){return _d .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_eab );};return _aec [_ff [_eab ]:_ff [_eab +1]];};const _gaceab =57372;func _face (_fgdg ,_ddcd Result ,_cgfd string )(*xargs ,Result ){if _fgdg .Type !=ResultTypeList &&_fgdg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cgfd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_fdbb :=_bcdaf (_fgdg );_fcba :=[]float64 {};for _ ,_gegbe :=range _fdbb {for _ ,_eacf :=range _gegbe {if _eacf .Type ==ResultTypeNumber &&!_eacf .IsBoolean {_fcba =append (_fcba ,_eacf .ValueNumber );}else {return nil ,MakeErrorResult (_cgfd +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_bga :=len (_fcba );if len (_fcba )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _ddcd .Type !=ResultTypeList &&_ddcd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cgfd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bbbe :=_bcdaf (_ddcd );_bdag :=[]float64 {};_fffb :=0.0;for _ ,_faec :=range _bbbe {for _ ,_gbbd :=range _faec {if _gbbd .Type ==ResultTypeNumber &&!_gbbd .IsBoolean {_fgdgg :=float64 (int (_gbbd .ValueNumber ));if _fgdgg < _fffb {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgfd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_bdag =append (_bdag ,_fgdgg );_fffb =_fgdgg ;}else {return nil ,MakeErrorResult (_cgfd +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_bdag )!=_bga {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_fcba ,_bdag },MakeEmptyResult ();};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_dcaf :=len (args );if _dcaf !=4&&_dcaf !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbga ,_fdbg ,_fbff :=_fccg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _fbff .Type ==ResultTypeError {return _fbff ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_acbc :=args [2].ValueNumber ;if _acbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_agec :=args [3].ValueNumber ;if _agec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_fdfa :=0;if _dcaf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fdfa =int (args [4].ValueNumber );if !_egfe (_fdfa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_abfca ,_fbff :=_cfgb (_bbga ,_fdbg ,_fdfa );if _fbff .Type ==ResultTypeError {return _fbff ;};return MakeNumberResult ((_agec -_acbc )/_acbc /_abfca );};const _abgcb =57344;

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccgg :=args [0];if _ccgg .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggadf :=len (_ccgg .ValueArray );for _ ,_bbab :=range _ccgg .ValueArray {if len (_bbab )!=_ggadf {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_ebca (_ccgg .ValueArray ));};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_decdb :=_gfef (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _decdb .Type !=ResultTypeEmpty {return _decdb ;};_badc :=_fcagf (args [1:]);_caaeb :=0.0;_bbgf :=_bcdaf (args [0]);for _ ,_dfbgc :=range _badc {_caaeb +=_bbgf [_dfbgc ._effd ][_dfbgc ._daad ].ValueNumber ;};return MakeNumberResult (float64 (_caaeb ));};const _cegcc ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dfad :=args [0].AsNumber ();if _dfad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dacf :=_bf .Signbit (_dfad .ValueNumber );_affe ,_aedc :=_bf .Modf (_dfad .ValueNumber /2);_cbbb :=_affe *2;if _aedc !=0{if !_dacf {_cbbb +=2;}else {_cbbb -=2;};};return MakeNumberResult (_cbbb );};func _ecab (_agedc string )*criteriaRegex {_ecef :=&criteriaRegex {};if _agedc ==""{return _ecef ;};if _eadd :=_dbfgc .FindStringSubmatch (_agedc );len (_eadd )> 1{_ecef ._agbag =_cccgda ;_ecef ._cgdf =_eadd [1];}else if _cedd :=_cfdae .FindStringSubmatch (_agedc );len (_cedd )> 1{_ecef ._agbag =_cccgda ;_ecef ._cgdf =_cedd [1];}else if _bggde :=_gdcfd .FindStringSubmatch (_agedc );len (_bggde )> 1{_ecef ._agbag =_adfd ;_ecef ._cgdf =_bggde [1];}else if _ebfb :=_bfddb .FindStringSubmatch (_agedc );len (_ebfb )> 1{_ecef ._agbag =_baab ;_ecef ._cgdf =_ebfb [1];}else if _fdgfe :=_gacea .FindStringSubmatch (_agedc );len (_fdgfe )> 1{_ecef ._agbag =_fdga ;_ecef ._cgdf =_fdgfe [1];}else if _ccee :=_cbafc .FindStringSubmatch (_agedc );len (_ccee )> 1{_ecef ._agbag =_cbgb ;_ecef ._cgdf =_ccee [1];};return _ecef ;};func _gfef (_ceeg []Result ,_ecccc bool ,_acad string )Result {var _dgcaf ,_fgfcf string ;if _ecccc {_dgcaf ="\u0074\u0068\u0072e\u0065";_fgfcf ="\u006f\u0064\u0064";}else {_dgcaf ="\u0074\u0077\u006f";_fgfcf ="\u0065\u0076\u0065\u006e";};_dbce :=len (_ceeg );if (_ecccc &&_dbce < 3)||(!_ecccc &&_dbce < 2){return MakeErrorResult (_acad +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_dgcaf +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_dbce /2*2==_dbce )==_ecccc {return MakeErrorResult (_acad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fgfcf +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_gbgg :=-1;_gbcf :=-1;for _fccf :=0;_fccf < _dbce ;_fccf +=2{_bebb :=_ceeg [_fccf ];if _bebb .Type !=ResultTypeArray &&_bebb .Type !=ResultTypeList {return MakeErrorResult (_acad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_affad :=_bcdaf (_bebb );if _gbcf ==-1{_gbcf =len (_affad );_gbgg =len (_affad [0]);}else if len (_affad )!=_gbcf ||len (_affad [0])!=_gbgg {return MakeErrorResult (_acad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _ecccc &&_fccf ==0{_fccf --;};};return _ebce ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {name ,args }};func _efdde (_afeg ,_bacba float64 )float64 {_afeg =_bf .Trunc (_afeg );_bacba =_bf .Trunc (_bacba );if _afeg ==0{return _bacba ;};if _bacba ==0{return _afeg ;};for _afeg !=_bacba {if _afeg > _bacba {_afeg =_afeg -_bacba ;}else {_bacba =_bacba -_afeg ;};};return _afeg ;};var _egbg =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};func LexReader (r _fd .Reader )chan*node {_bbgdf :=NewLexer ();go _bbgdf .lex (r );return _bbgdf ._ecbg };func _gacgg (_gfecf ,_gcec int )string {const TOKSTART =4;if !_gecfb {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_fdgag :=range _fbcbb {if _fdgag ._eefc ==_gfecf &&_fdgag ._cgdef ==_gcec {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_fdgag ._eecea ;};};_afgbd :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_beaa (_gcec );_accgf :=make ([]int ,0,4);_ffcca :=_egbg [_gfecf ];for _eecge :=TOKSTART ;_eecge -1< len (_cdcg );_eecge ++{if _fbae :=_ffcca +_eecge ;_fbae >=0&&_fbae < _cdcf &&_ddbef [_cebb [_fbae ]]==_eecge {if len (_accgf )==cap (_accgf ){return _afgbd ;};_accgf =append (_accgf ,_eecge );};};if _cafd [_gfecf ]==-2{_fcbf :=0;for _dbad [_fcbf ]!=-1||_dbad [_fcbf +1]!=_gfecf {_fcbf +=2;};for _fcbf +=2;_dbad [_fcbf ]>=0;_fcbf +=2{_cfcd :=_dbad [_fcbf ];if _cfcd < TOKSTART ||_dbad [_fcbf +1]==0{continue ;};if len (_accgf )==cap (_accgf ){return _afgbd ;};_accgf =append (_accgf ,_cfcd );};if _dbad [_fcbf +1]!=0{return _afgbd ;};};for _cggf ,_becf :=range _accgf {if _cggf ==0{_afgbd +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_afgbd +="\u0020\u006f\u0072\u0020";};_afgbd +=_beaa (_becf );};return _afgbd ;};const _faga =57363;

// Reference returns a string reference value to a vertical range.
func (_ffcg VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_ffcg .verticalRangeReference ()};};const _bbgbed =57370;var InvalidReferenceContext =&ivr {};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbbde :=args [0].AsNumber ();if _fbbde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _dfbd float64 ;_gfecb :=args [1].AsNumber ();if _gfecb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dfbd =_gfecb .ValueNumber ;if _dfbd < 0&&_fbbde .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_egee :=_fbbde .ValueNumber ;_egee ,_aafcfa :=_bf .Modf (_egee /_dfbd );if _aafcfa !=0{if _fbbde .ValueNumber < 0&&_aafcfa < 0{_egee --;};};return MakeNumberResult (_egee *_dfbd );};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_ecbg chan*node ;_ggbf _fe .Mutex ;_bgeeb []chan*node ;_fbfa []*node ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_bbba :=args [0].AsNumber ();if _bbba .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccdd :=_bf .Signbit (_bbba .ValueNumber );_daga ,_fbegc :=_bf .Modf ((_bbba .ValueNumber -1)/2);_fdebc :=_daga *2+1;if _fbegc !=0{if !_ccdd {_fdebc +=2;}else {_fdebc -=2;};};return MakeNumberResult (_fdebc );};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_cbgg ,_fffdc :=_gfbgg ("\u0046\u0049\u004e\u0044",args );if _fffdc .Type !=ResultTypeEmpty {return _fffdc ;};_begaf :=_eb .ToLower (_cbgg ._bbffb );if _begaf ==""{return MakeNumberResult (1.0);};_fecb :=_eb .ToLower (_cbgg ._ffgb );_beeff :=_cbgg ._adcd ;_bfgbf :=1;for _acgae :=range _fecb {if _bfgbf < _beeff {_bfgbf ++;continue ;};_agagd :=_ga .Index (_begaf ,_fecb [_acgae :]);if _agagd ==0{return MakeNumberResult (float64 (_bfgbf ));};_bfgbf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cffdb :=args [0].Type ;for _ ,_bgcaf :=range args {if _bgcaf .Type !=_cffdb {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _cffdb {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_aegec :=len (args [0].ListValues ());_geae :=make ([]float64 ,_aegec );for _daba :=range _geae {_geae [_daba ]=1.0;};for _ ,_daaf :=range args {if len (_daaf .ListValues ())!=_aegec {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _agdfg ,_fdbgb :=range _daaf .ListValues (){_fdbgb =_fdbgb .AsNumber ();if _fdbgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_geae [_agdfg ]=_geae [_agdfg ]*_fdbgb .ValueNumber ;};};_babe :=0.0;for _ ,_bbgbe :=range _geae {_babe +=_bbgbe ;};return MakeNumberResult (_babe );};return MakeNumberResult (1.0);};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_afca :=_eb .ToLower (args [0].ValueString );if !_efb (_afca ){_ ,_ ,_ ,_eeg ,_gfee :=_dbfc (_afca );if _gfee .Type ==ResultTypeError {_gfee .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _gfee ;};if _eeg {return MakeNumberResult (0);};};_dfee ,_adg ,_ecac ,_cacb ,_ ,_adc :=_efae (_afca );if _adc .Type ==ResultTypeError {return _adc ;};_gfd :=_eca (float64 (_dfee ),float64 (_adg ),_ecac );if _cacb {_gfd +=0.5;}else if _gfd >=1{_gfd -=float64 (int (_gfd ));};return MakeNumberResult (_gfd );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bcea :=args [0].AsNumber ();if _bcea .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fggea :=float64 (1);if _bcea .ValueNumber < 0{_fggea =-1;};if len (args )> 1{_ccbf :=args [1].AsNumber ();if _ccbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_fggea =_ccbf .ValueNumber ;};_dbeb :=float64 (1);if len (args )> 2{_adeb :=args [2].AsNumber ();if _adeb .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbeb =_adeb .ValueNumber ;};if len (args )==1{return MakeNumberResult (_bf .Floor (_bcea .ValueNumber ));};_ffda :=_bcea .ValueNumber ;_ffda ,_bbfd :=_bf .Modf (_ffda /_fggea );if _bbfd !=0&&_bcea .ValueNumber < 0&&_dbeb > 0{_ffda ++;};return MakeNumberResult (_ffda *_fggea );};var _fdge _fe .Mutex ;const _gadff =57364;func _cca (_dcae ,_beab ,_gefb ,_ffb float64 ,_dcbd int )float64 {var _gbed float64 ;if _dcae ==0{_gbed =(_gefb +_ffb )/_beab ;}else {_baaa :=_bf .Pow (1+_dcae ,_beab );if _dcbd ==1{_gbed =(_ffb *_dcae /(_baaa -1)+_gefb *_dcae /(1-1/_baaa ))/(1+_dcae );}else {_gbed =_ffb *_dcae /(_baaa -1)+_gefb *_dcae /(1-1/_baaa );};};return -_gbed ;};const _ebb ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_dcdc +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cccfd :=args [0].AsNumber ();_abba :=args [1].AsNumber ();if _cccfd .Type !=ResultTypeNumber ||_abba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _abba .ValueNumber < _cccfd .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_dgag :=int64 (_cccfd .ValueNumber );_efad :=int64 (_abba .ValueNumber );return MakeNumberResult (float64 (_eeee .Int63n (_efad -_dgag +1)+_dgag ));};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _fgbfd (args ,_ddff )};type parsedReplaceObject struct{_begfc string ;_gcgc int ;_dded int ;_ddbf string ;};

// Update returns the same object as updating sheet references does not affect String.
func (_egace String )Update (q *_g .UpdateQuery )Expression {return _egace };

// Reference returns a string reference value to a horizontal range with prefix.
func (_ggcb PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_egcdd :=_ggcb ._fcfee .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_ggcb .horizontalRangeReference (_egcdd .Value )};};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func _acdc (_fefc Result )[]Result {_afad :=_fefc .ValueList ;if _fefc .Type ==ResultTypeArray {_afad =nil ;for _ ,_bcgb :=range _fefc .ValueArray {if len (_bcgb )> 0{_afad =append (_afad ,_bcgb [0]);}else {_afad =append (_afad ,_ebce );};};};return _afad ;};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fceef :=args [0];if _fceef .Type ==ResultTypeList {_daab :=[][]Result {};for _ ,_gcab :=range _fceef .ValueList {_daab =append (_daab ,[]Result {_gcab });};return MakeArrayResult (_daab );};_dddf :=make ([][]Result ,len (_fceef .ValueArray [0]));for _ ,_fagd :=range _fceef .ValueArray {for _bcge ,_bgbe :=range _fagd {_dddf [_bcge ]=append (_dddf [_bcge ],_bgbe );};};return MakeArrayResult (_dddf );};func _bce (_aba ,_ega ,_ggc int )float64 {return float64 (_dgad (_aba ,_dg .Month (_ega ),_ggc )/86400)+_aae ;};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdfb ,_ggge ,_fge :=_fccg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _fge .Type ==ResultTypeError {return _fge ;};_bgfb ,_fge :=_fcfg (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fge .Type ==ResultTypeError {return _fge ;};if _bgfb >=_fdfb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aeead :=args [3].ValueNumber ;if _aeead < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfbg :=args [4].ValueNumber ;if _cfbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_fdcc :=args [5].ValueNumber ;if _fdcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fged :=float64 (int (args [6].ValueNumber ));if !_eedf (_fged ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_acgg :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_acgg =int (args [7].ValueNumber );if !_egfe (_acgg ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_eceg ,_fge :=_cfgb (_bgfb ,_ggge ,_acgg );if _fge .Type ==ResultTypeError {return _fge ;};_eceg *=_fged ;_dbcb ,_fge :=_cfgb (_fdfb ,_ggge ,_acgg );if _fge .Type ==ResultTypeError {return _fge ;};_dbcb *=_fged ;_efafa ,_fge :=_cfgb (_bgfb ,_fdfb ,_acgg );if _fge .Type ==ResultTypeError {return _fge ;};_efafa *=_fged ;_ffd :=_fdcc +_eceg *100*_aeead /_fged ;_ffd /=_cfbg +_efafa *100*_aeead /_fged ;_ffd --;_ffd *=_fged /_dbcb ;return MakeNumberResult (_ffd );};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_fcgfg ,_caba :=_cdfbg (args ,false );if _caba ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_fcgfg /_caba );};var _dbade =[...]uint8 {0,17,33,49,63,78,93,108};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_debc ,_daffa ,_fbade :=_fccg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _fbade .Type ==ResultTypeError {return _fbade ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecdf :=_daffa -_debc ;if _ecdf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_afaa :=args [2].ValueNumber ;if _afaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_afaa )/(360-_afaa *_ecdf ));};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfbe :=args [0].Ref ;for _bfbe .Type ==ReferenceTypeNamedRange {_bfbe =ctx .NamedRange (_bfbe .Value );};_bgdde :="";switch _bfbe .Type {case ReferenceTypeCell :_bgdde =_bfbe .Value ;case ReferenceTypeRange :_fdbbg :=_eb .Split (_bfbe .Value ,"\u003a");if len (_fdbbg )==2{_bgdde =_fdbbg [0];};default:return MakeErrorResult (_d .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_bfbe .Type ));};_gcae ,_gbae :=_gd .ParseCellReference (_bgdde );if _gbae !=nil {return MakeErrorResult (_d .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_gbae .Error ()));};_afgaa ,_egba ,_gecae :=_gcae .Column ,_gcae .RowIdx ,_gcae .SheetName ;_fegg :=args [1].AsNumber ();if _fegg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_cfbe :=args [2].AsNumber ();if _cfbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _dffe ,_ffab Result ;if len (args )==3{_dffe =MakeNumberResult (1);_ffab =MakeNumberResult (1);}else {_dffe =args [3].AsNumber ();if _dffe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _dffe .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_ffab =args [4].AsNumber ();if _ffab .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _ffab .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_acge :=_gd .ColumnToIndex (_afgaa );_cada :=_egba +uint32 (_fegg .ValueNumber );_dgggeg :=_acge +uint32 (_cfbe .ValueNumber );_afgf :=_cada +uint32 (_dffe .ValueNumber );_fbbdcg :=_dgggeg +uint32 (_ffab .ValueNumber );if _dffe .ValueNumber > 0{_afgf --;}else {_afgf ++;_cada ,_afgf =_afgf ,_cada ;};if _ffab .ValueNumber > 0{_fbbdcg --;}else {_fbbdcg ++;_dgggeg ,_fbbdcg =_fbbdcg ,_dgggeg ;};_bfba :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_gd .IndexToColumn (_dgggeg ),_cada );_gcaf :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_gd .IndexToColumn (_fbbdcg ),_afgf );if _gecae ==""{return _fggca (ctx ,ev ,_bfba ,_gcaf );}else {return _fggca (ctx .Sheet (_gecae ),ev ,_bfba ,_gcaf );};};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_efecd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_efecd =int (args [1].ValueNumber );if _efecd < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _efecd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_eccdc :=args [0].Value ();if _efecd > len (_eccdc ){return MakeStringResult (_eccdc );};return MakeStringResult (_eccdc [0:_efecd ]);};var _geadd []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Eval evaluates and returns the result of a function call.
func (_bfgeb FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_ebdae :=LookupFunction (_bfgeb ._ecfc );if _ebdae !=nil {_dfgc :=make ([]Result ,len (_bfgeb ._fgaf ));for _ggdg ,_edffg :=range _bfgeb ._fgaf {_dfgc [_ggdg ]=_edffg .Eval (ctx ,ev );_dfgc [_ggdg ].Ref =_edffg .Reference (ctx ,ev );};return _ebdae (_dfgc );};_cdbae :=LookupFunctionComplex (_bfgeb ._ecfc );if _cdbae !=nil {_cdeb :=make ([]Result ,len (_bfgeb ._fgaf ));for _ggdb ,_geddd :=range _bfgeb ._fgaf {_cdeb [_ggdb ]=_geddd .Eval (ctx ,ev );_cdeb [_ggdb ].Ref =_geddd .Reference (ctx ,ev );};return _cdbae (ctx ,ev ,_cdeb );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_bfgeb ._ecfc );};func _cffa (){_fcce =_dc .MustCompile ("\u005e\u0030\u002b\u0024");_dgac =_dc .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_gbee =_dc .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_beeaa =_dc .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_aadgf =_dc .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_bdb =_dc .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_fcga =_dc .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_dcbaf =_dc .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_abeg =_dc .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_gefg =_dc .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_fgdb =_dc .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_cecf =_dc .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dage +_dage +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dage +_dage +"\u0029\u002b\u0059+\u0024");_bged =_dc .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_dage +_dage +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_dage +_dage +"\u0029\u002b\u0059+\u0024");_dggga =_dc .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_ecege =_dc .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};const _gcbdd =57358;

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_ddcg :=len (args );if _ddcg !=4&&_ddcg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_dbag ,_agge :=_fcfg (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _agge .Type ==ResultTypeError {return _agge ;};_dgdd ,_agge :=_fcfg (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _agge .Type ==ResultTypeError {return _agge ;};if _dbag >=_dgdd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cecc :=args [2].ValueNumber ;if _cecc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ede :=args [3].ValueNumber ;if _ede <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fagg :=0;if _ddcg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fagg =int (args [4].ValueNumber );if !_egfe (_fagg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_cecg ,_agge :=_cfgb (_dbag ,_dgdd ,_fagg );if _agge .Type ==ResultTypeError {return _agge ;};return MakeNumberResult (_ede *_cecc *_cecg );};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cabbc :=[]float64 {};for _ ,_cebcb :=range args {switch _cebcb .Type {case ResultTypeString :_fbeg :=_cebcb .AsNumber ();if _fbeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cabbc =append (_cabbc ,_fbeg .ValueNumber );case ResultTypeList ,ResultTypeArray :_baaf :=GCD (_cebcb .ListValues ());if _baaf .Type !=ResultTypeNumber {return _baaf ;};_cabbc =append (_cabbc ,_baaf .ValueNumber );case ResultTypeNumber :_cabbc =append (_cabbc ,_cebcb .ValueNumber );case ResultTypeError :return _cebcb ;default:return MakeErrorResult (_d .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cebcb .Type ));};};if _cabbc [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cabbc )==1{return MakeNumberResult (_cabbc [0]);};_acdbc :=_cabbc [0];for _edecf :=1;_edecf < len (_cabbc );_edecf ++{if _cabbc [_edecf ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_acdbc =_efdde (_acdbc ,_cabbc [_edecf ]);};return MakeNumberResult (_acdbc );};func _ebca (_gdcb [][]Result )float64 {if len (_gdcb )==2{_bfbd :=_gdcb [0][0].AsNumber ();_aaega :=_gdcb [0][1].AsNumber ();_edac :=_gdcb [1][0].AsNumber ();_bbaa :=_gdcb [1][1].AsNumber ();if _bfbd .Type !=ResultTypeNumber ||_aaega .Type !=ResultTypeNumber ||_edac .Type !=ResultTypeNumber ||_bbaa .Type !=ResultTypeNumber {return _bf .NaN ();};return _bfbd .ValueNumber *_bbaa .ValueNumber -_edac .ValueNumber *_aaega .ValueNumber ;};_fgeb :=float64 (0);_decgg :=float64 (1);for _bbdb :=range _gdcb {_fgeb +=_decgg *_gdcb [0][_bbdb ].ValueNumber *_ebca (_agff (_gdcb ,_bbdb ));_decgg *=-1;};return _fgeb ;};var _bfeg =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_aabf ,_adab :=_bbeg (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _adab .Type ==ResultTypeError {return _adab ;};_dbe :=_bbca (_aabf ._baa );_fef :=_bbca (_aabf ._aaba );_fbag :=_aabf ._dbd ;_efag :=_aefg (_dbe ,_fef ,_fbag );_bbcd ,_eccd ,_cdgf :=_efag .Date ();return MakeNumberResult (_bce (_bbcd ,int (_eccd ),_cdgf ));};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bfggd :=args [0].AsString ();if _bfggd .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ecdgdd :=args [1].AsNumber ();if _ecdgdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _ecdgdd .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _ecdgdd .ValueNumber ==0{return MakeStringResult ("");};_bfagf :=_e .Buffer {};for _dede :=0;_dede < int (_ecdgdd .ValueNumber );_dede ++{_bfagf .WriteString (_bfggd .ValueString );};return MakeStringResult (_bfagf .String ());};

// Value returns a string version of the result.
func (_cfad Result )Value ()string {switch _cfad .Type {case ResultTypeNumber :_fceb :=_a .FormatFloat (_cfad .ValueNumber ,'f',-1,64);if len (_fceb )> 12{_fcagc :=12;for _eeab :=_fcagc ;_eeab > 0&&_fceb [_eeab ]=='0';_eeab --{_fcagc --;};_fceb =_fceb [0:_fcagc +1];};return _fceb ;case ResultTypeError :return _cfad .ValueString ;case ResultTypeString :return _cfad .ValueString ;case ResultTypeList :if len (_cfad .ValueList )==0{return "";};return _cfad .ValueList [0].Value ();case ResultTypeArray :if len (_cfad .ValueArray )==0||len (_cfad .ValueArray [0])==0{return "";};return _cfad .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// LastColumn returns empty string for the invalid reference context.
func (_ccbddf *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Update updates references in the PrefixExpr after removing a row/column.
func (_edaf PrefixExpr )Update (q *_g .UpdateQuery )Expression {_dbgg :=_edaf ;_cadec :=_edaf ._eaeb .String ();if _cadec ==q .SheetToUpdate {_bcfc :=*q ;_bcfc .UpdateCurrentSheet =true ;_dbgg ._eaagc =_edaf ._eaagc .Update (&_bcfc );};return _dbgg ;};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_edd ,_gcb :=_bbeg (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _gcb .Type ==ResultTypeError {return _gcb ;};_bfbg :=_edd ._dbd ;_dfa :=_edd ._eedee ;_baggc ,_gcb :=_gag (_edd ._baa ,_edd ._aaba ,_bfbg ,_dfa );if _gcb .Type ==ResultTypeError {return _gcb ;};return MakeNumberResult (_baggc );};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_agab (args ,_dgdef ));};func _fggca (_eeaf Context ,_cgaf Evaluator ,_efega ,_bfbab string )Result {_gfdeb ,_ecaaa :=_gd .ParseCellReference (_efega );if _ecaaa !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_efega ,_ecaaa .Error ()));};_aeaf ,_baacd :=_gfdeb .ColumnIdx ,_gfdeb .RowIdx ;_ccbda ,_eccb :=_gd .ParseCellReference (_bfbab );if _eccb !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bfbab ,_eccb .Error ()));};_fdgac ,_eage :=_ccbda .ColumnIdx ,_ccbda .RowIdx ;_cegce :=[][]Result {};for _fbdgb :=_baacd ;_fbdgb <=_eage ;_fbdgb ++{_fbga :=[]Result {};for _gdfce :=_aeaf ;_gdfce <=_fdgac ;_gdfce ++{_bceb :=_eeaf .Cell (_d .Sprintf ("\u0025\u0073\u0025\u0064",_gd .IndexToColumn (_gdfce ),_fbdgb ),_cgaf );_fbga =append (_fbga ,_bceb );};_cegce =append (_cegce ,_fbga );};if len (_cegce )==1{if len (_cegce [0])==1{return _cegce [0][0];};return MakeListResult (_cegce [0]);};return MakeArrayResult (_cegce );};const _egff int =30;

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// String returns a string representation of SheetPrefixExpr.
func (_cgbdb SheetPrefixExpr )String ()string {return _cgbdb ._cggfa };const _gafd =57349;

// Reference returns a string reference value to a sheet.
func (_abcb SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_abcb ._cggfa };};type yySymType struct{_bgfbe int ;_bbded *node ;_eece Expression ;_gaeg []Expression ;_cdabg [][]Expression ;};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfdd :=int (args [0].ValueNumber );return MakeBoolResult (_bfdd !=_bfdd /2*2);};func _fffd (_fae ,_fdeb ,_gcd ,_bdfc ,_bbfc float64 ,_dad int )Result {_feaf ,_edfa :=_cfgb (_fae ,_fdeb ,_dad );if _edfa .Type ==ResultTypeError {return _edfa ;};_ccfaf ,_dcfd :=_gag (_fae ,_fdeb ,int (_bbfc ),_dad );if _dcfd .Type ==ResultTypeError {return _dcfd ;};_bagga :=0.0;_aga :=0.0;_gcd *=100/_bbfc ;_bdfc /=_bbfc ;_bdfc ++;_ggecd :=_feaf *_bbfc -_ccfaf ;for _fdcda :=1.0;_fdcda < _ccfaf ;_fdcda ++{_ead :=_fdcda +_ggecd ;_dafc :=_gcd /_bf .Pow (_bdfc ,_ead );_aga +=_dafc ;_bagga +=_ead *_dafc ;};_gecf :=(_gcd +100)/_bf .Pow (_bdfc ,_ccfaf +_ggecd );_aga +=_gecf ;_bagga +=(_ccfaf +_ggecd )*_gecf ;_bagga /=_aga ;_bagga /=_bbfc ;return MakeNumberResult (_bagga );};type yyLexer interface{Lex (_bdefa *yySymType )int ;Error (_bdefe string );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cccac :=args [0].AsString ();_bfdf :=args [1].AsString ();if _cccac .Type !=ResultTypeString ||_bfdf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_cccac .ValueString ==_bfdf .ValueString );};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_geadc PrefixVerticalRange )Update (q *_g .UpdateQuery )Expression {if q .UpdateType ==_g .UpdateActionRemoveColumn {_gdede :=_geadc ;_aagdc :=_geadc ._cbcc .String ();if _aagdc ==q .SheetToUpdate {_fecg :=q .ColumnIdx ;_gdede ._geaf =_ddg (_geadc ._geaf ,_fecg );_gdede ._aeca =_ddg (_geadc ._aeca ,_fecg );};return _gdede ;};return _geadc ;};func _gec (_fgg BinOpType ,_dfd []Result ,_gabd Result )Result {_fgb :=[]Result {};switch _gabd .Type {case ResultTypeNumber :_aac :=_gabd .ValueNumber ;for _ba :=range _dfd {_cg :=_dfd [_ba ].AsNumber ();if _cg .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fgg {case BinOpTypePlus :_fgb =append (_fgb ,MakeNumberResult (_cg .ValueNumber +_aac ));case BinOpTypeMinus :_fgb =append (_fgb ,MakeNumberResult (_cg .ValueNumber -_aac ));case BinOpTypeMult :_fgb =append (_fgb ,MakeNumberResult (_cg .ValueNumber *_aac ));case BinOpTypeDiv :if _aac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fgb =append (_fgb ,MakeNumberResult (_cg .ValueNumber /_aac ));case BinOpTypeExp :_fgb =append (_fgb ,MakeNumberResult (_bf .Pow (_cg .ValueNumber ,_aac )));case BinOpTypeLT :_fgb =append (_fgb ,MakeBoolResult (_cg .ValueNumber < _aac ));case BinOpTypeGT :_fgb =append (_fgb ,MakeBoolResult (_cg .ValueNumber > _aac ));case BinOpTypeEQ :_fgb =append (_fgb ,MakeBoolResult (_cg .ValueNumber ==_aac ));case BinOpTypeLEQ :_fgb =append (_fgb ,MakeBoolResult (_cg .ValueNumber <=_aac ));case BinOpTypeGEQ :_fgb =append (_fgb ,MakeBoolResult (_cg .ValueNumber >=_aac ));case BinOpTypeNE :_fgb =append (_fgb ,MakeBoolResult (_cg .ValueNumber !=_aac ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fgg ));};};case ResultTypeString :_ec :=_gabd .ValueString ;for _cc :=range _dfd {_gde :=_dfd [_cc ].AsString ();if _gde .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fgg {case BinOpTypeLT :_fgb =append (_fgb ,MakeBoolResult (_gde .ValueString < _ec ));case BinOpTypeGT :_fgb =append (_fgb ,MakeBoolResult (_gde .ValueString > _ec ));case BinOpTypeEQ :_fgb =append (_fgb ,MakeBoolResult (_gde .ValueString ==_ec ));case BinOpTypeLEQ :_fgb =append (_fgb ,MakeBoolResult (_gde .ValueString <=_ec ));case BinOpTypeGEQ :_fgb =append (_fgb ,MakeBoolResult (_gde .ValueString >=_ec ));case BinOpTypeNE :_fgb =append (_fgb ,MakeBoolResult (_gde .ValueString !=_ec ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fgg ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_fgb );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_gggb ,_eafgfe int };

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_caafg :=args [0].AsString ();if _caafg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_eb .ToUpper (_caafg .ValueString ));};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_gcf ,_abb :=_a .ParseBool (v );if _abb !=nil {_fg .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_abb );};return Bool {_gcf };};const _acc ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";var _ddbef =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_defg :=args [0].ValueNumber ;if _defg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eggea :=args [1].ValueNumber ;if _eggea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dagc :=args [2].ValueNumber ;if _dagc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_bf .Pow (_dagc /_eggea ,1/_defg )-1);};type parsedSearchObject struct{_bbffb string ;_ffgb string ;_adcd int ;};func NewLexer ()*Lexer {return &Lexer {_ecbg :make (chan*node )}};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_fdge .Lock ();defer _fdge .Unlock ();if _gddga ,_ffgf :=_adbca [name ];_ffgf {return _gddga ;};return nil ;};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_eeee .Float64 ());};

// Reference returns an invalid reference for Bool.
func (_gg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_fdge .Lock ();defer _fdge .Unlock ();if _ ,_afgee :=_adbca [name ];_afgee {_fg .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_adbca [name ]=fn ;};

// String returns a string representation of String.
func (_gggdd String )String ()string {return "\u0022"+_gggdd ._bcccb +"\u0022"};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aaed :=args [0].AsNumber ();_bcffa :=args [1].AsNumber ();_gcaba :=args [2].AsNumber ();_ebgde :=args [3].ListValues ();if _aaed .Type !=ResultTypeNumber ||_bcffa .Type !=ResultTypeNumber ||_gcaba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_afddb :=float64 (0);for _dabbdb ,_dgbc :=range _ebgde {_afddb +=_dgbc .ValueNumber *_bf .Pow (_aaed .ValueNumber ,_bcffa .ValueNumber +float64 (_dabbdb )*_gcaba .ValueNumber );};return MakeNumberResult (_afddb );};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _bcff ,_affd float64 ;switch args [0].Type {case ResultTypeNumber :_affd =args [0].ValueNumber ;case ResultTypeString :_gbab :=DateValue ([]Result {args [0]});if _gbab .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_affd =_gbab .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_bcff =args [1].ValueNumber ;if _bcff < 62&&_affd >=62{_bcff --;};case ResultTypeString :_dcdb :=DateValue ([]Result {args [1]});if _dcdb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_bcff =_dcdb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_fab :=float64 (int (_affd -_bcff ));return MakeNumberResult (_fab );};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_cfcga Context ,_fdacb Evaluator ,_bfgbb []Result )Result ;const _bdeb =57374;var _dba =[]*_dc .Regexp {};

// IsBool returns false for the invalid reference context.
func (_gbbgd *ivr )IsBool (cellRef string )bool {return false };func _daaa (_acaa Result ,_facg ,_dceg int )[][]Result {_acgfb :=[][]Result {};switch _acaa .Type {case ResultTypeArray :for _dagca ,_egecb :=range _acaa .ValueArray {if _dagca < _facg {_acgfb =append (_acgfb ,_bbfa (MakeListResult (_egecb ),_dceg ));}else {_acgfb =append (_acgfb ,_bbfa (MakeErrorResultType (ErrorTypeNA ,""),_dceg ));};};case ResultTypeList :_ecae :=_bbfa (_acaa ,_dceg );for _cfgg :=0;_cfgg < _facg ;_cfgg ++{_acgfb =append (_acgfb ,_ecae );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _acefc :=0;_acefc < _facg ;_acefc ++{_afbd :=_bbfa (_acaa ,_dceg );_acgfb =append (_acgfb ,_afbd );};};return _acgfb ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _gdbff (args ,false )};type couponArgs struct{_baa float64 ;_aaba float64 ;_dbd int ;_eedee int ;};

// Eval evaluates the binary expression using the context given.
func (_fgbb BinaryExpr )String ()string {_ea :="";switch _fgbb ._ae {case BinOpTypePlus :_ea ="\u002b";case BinOpTypeMinus :_ea ="\u002d";case BinOpTypeMult :_ea ="\u002a";case BinOpTypeDiv :_ea ="\u002f";case BinOpTypeExp :_ea ="\u005e";case BinOpTypeLT :_ea ="\u003c";case BinOpTypeGT :_ea ="\u003e";case BinOpTypeEQ :_ea ="\u003d";case BinOpTypeLEQ :_ea ="\u003c\u003d";case BinOpTypeGEQ :_ea ="\u003e\u003d";case BinOpTypeNE :_ea ="\u003c\u003e";case BinOpTypeConcat :_ea ="\u0026";};return _fgbb ._ed .String ()+_ea +_fgbb ._bb .String ();};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbbfe :=args [0].AsNumber ();if _fbbfe .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdedc ,_fbeb :=_bf .Modf (_fbbfe .ValueNumber );if _fbeb < 0{_fdedc --;};return MakeNumberResult (_fdedc );};func _ggab (_accc ,_fceg []string )[]string {for _ ,_bbge :=range _fceg {_accc =append (_accc ,_bbge );};return _accc ;};func (_gafbg node )String ()string {return _d .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_gafbg ._aabge ,_afge (string (_gafbg ._gfaf )));};