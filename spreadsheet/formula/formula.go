//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_b "bytes";_f "errors";_c "fmt";_ece "github.com/unidoc/unioffice/common/logger";_bcb "github.com/unidoc/unioffice/internal/mergesort";_d "github.com/unidoc/unioffice/internal/wildcard";_ce "github.com/unidoc/unioffice/spreadsheet/format";_cf "github.com/unidoc/unioffice/spreadsheet/reference";_ad "github.com/unidoc/unioffice/spreadsheet/update";_a "io";_gg "math";_bc "math/big";_ec "math/rand";_fg "regexp";_cb "sort";_g "strconv";_ca "strings";_bb "sync";_efd "time";_ef "unicode";);

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_cbbd (args ,_gdef ))};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_cbdg :=len (args );if _cbdg !=2&&_cbdg !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gga ,_aagfc :=_cged (args [0],args [1],"\u0058\u0049\u0052\u0052");if _aagfc .Type ==ResultTypeError {return _aagfc ;};_eddb :=_gga ._cea ;_faea :=_gga ._dcec ;_bfde :=0.1;if _cbdg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfde =args [2].ValueNumber ;if _bfde <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _bafa (_eddb ,_faea ,_bfde );};func _bdcdb (_eagb ,_feg _efd .Time ,_cde int )_efd .Time {_acad :=_efd .Date (_eagb .Year (),_feg .Month (),_feg .Day (),0,0,0,0,_efd .UTC );if _acad .After (_eagb ){_acad =_acad .AddDate (-1,0,0);};for !_acad .After (_eagb ){_acad =_acad .AddDate (0,12/_cde ,0);};return _acad ;};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_cfda :=len (args );if _cfda !=4&&_cfda !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfafe ,_cdff ,_ccafg :=_ggc (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _ccafg .Type ==ResultTypeError {return _ccafg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dag :=args [2].ValueNumber ;if _dag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fefaa :=args [3].ValueNumber ;if _fefaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_cffff :=0;if _cfda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cffff =int (args [4].ValueNumber );if !_fdgc (_cffff ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_affg ,_ccafg :=_dgf (_cfafe ,_cdff ,_cffff );if _ccafg .Type ==ResultTypeError {return _ccafg ;};return MakeNumberResult ((_fefaa -_dag )/_dag /_affg );};func NewLexer ()*Lexer {return &Lexer {_fegd :make (chan *node )}};var _bccg int64 =_bgf (1900,_efd .January ,1);

// String returns a string representation of a range with prefix.
func (_acda PrefixRangeExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_acda ._eggdc .String (),_acda ._gccb .String (),_acda ._cffdg .String ());};func _defg (_afdc []Result )Result {_fbea :=_afdc [0].ValueArray ;if len (_afdc )==1{_dfeb :=[][]Result {};for _ ,_effa :=range _fbea {_dfeb =append (_dfeb ,_gafg ([]Result {MakeListResult (_effa )}).ValueList );};return MakeArrayResult (_dfeb );}else if len (_afdc )==2{_ebfa :=len (_fbea );_dbec :=len (_fbea [0]);_dbab :=_eabe (_afdc [1],_ebfa ,_dbec );_gfbg :=len (_dbab );_eefb :=[][]Result {};var _ddfg []Result ;for _bcab ,_bgac :=range _fbea {if _bcab < _gfbg {_ddfg =_dbab [_bcab ];}else {_ddfg =_bdgea (MakeErrorResultType (ErrorTypeNA ,""),_dbec );};_eefb =append (_eefb ,_gafg ([]Result {MakeListResult (_bgac ),MakeListResult (_ddfg )}).ValueList );};return MakeArrayResult (_eefb );}else if len (_afdc )==3{_edcgd :=len (_fbea );_cdfb :=len (_fbea [0]);_cbagg :=_eabe (_afdc [1],_edcgd ,_cdfb );_daac :=_eabe (_afdc [2],_edcgd ,_cdfb );_gccc :=len (_cbagg );_abfb :=len (_daac );_affe :=[][]Result {};var _acdec ,_dgfc []Result ;for _ebgd ,_dfedd :=range _fbea {if _ebgd < _gccc {_acdec =_cbagg [_ebgd ];}else {_acdec =_bdgea (MakeErrorResultType (ErrorTypeNA ,""),_cdfb );};if _ebgd < _abfb {_dgfc =_daac [_ebgd ];}else {_dgfc =_bdgea (MakeErrorResultType (ErrorTypeNA ,""),_cdfb );};_affe =append (_affe ,_gafg ([]Result {MakeListResult (_dfedd ),MakeListResult (_acdec ),MakeListResult (_dgfc )}).ValueList );};return MakeArrayResult (_affe );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edac :=args [0].AsNumber ();if _edac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_gg .Pi /180.0*_edac .ValueNumber );};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_dgdee :=len (args );if _dgdee !=6&&_dgdee !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfegg ,_ddgf ,_gdcc :=_ggc (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _gdcc .Type ==ResultTypeError {return _gdcc ;};_bcec :=args [2];if _bcec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgd :=_bcec .ValueNumber ;if _fgd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_efg :=args [3];if _efg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdgfc :=_efg .ValueNumber ;if _gdgfc <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_cbgc :=args [4];if _cbgc .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_bccd :=_cbgc .ValueNumber ;if _bccd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fcagd :=args [5];if _fcagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gdfad :=float64 (int (_fcagd .ValueNumber ));if !_faf (_gdfad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cadc :=0;if _dgdee ==7&&args [6].Type !=ResultTypeEmpty {_dadf :=args [6];if _dadf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cadc =int (_dadf .ValueNumber );if !_fdgc (_cadc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_aeecf :=0.0;_dcdf :=0.0;_fedb :=1.0;_cdbg ,_gdcc :=_edebf (_cfegg ,_ddgf ,_fgd ,_dcdf ,_bccd ,_gdfad ,_cadc );if _gdcc .Type ==ResultTypeError {return _gdcc ;};_dcgb ,_gdcc :=_edebf (_cfegg ,_ddgf ,_fgd ,_fedb ,_bccd ,_gdfad ,_cadc );if _gdcc .Type ==ResultTypeError {return _gdcc ;};_bdgfd :=(_fedb -_dcdf )*0.5;for _cedc :=0;_cedc < 100&&_aeecf !=_gdgfc ;_cedc ++{_aeecf ,_gdcc =_edebf (_cfegg ,_ddgf ,_fgd ,_bdgfd ,_bccd ,_gdfad ,_cadc );if _gdcc .Type ==ResultTypeError {return _gdcc ;};if _gdgfc ==_cdbg {return MakeNumberResult (_dcdf );}else if _gdgfc ==_dcgb {return MakeNumberResult (_fedb );}else if _gdgfc ==_aeecf {return MakeNumberResult (_bdgfd );}else if _gdgfc < _dcgb {_fedb *=2.0;_dcgb ,_gdcc =_edebf (_cfegg ,_ddgf ,_fgd ,_fedb ,_bccd ,_gdfad ,_cadc );if _gdcc .Type ==ResultTypeError {return _gdcc ;};_bdgfd =(_fedb -_dcdf )*0.5;}else {if _gdgfc < _aeecf {_dcdf =_bdgfd ;_cdbg =_aeecf ;}else {_fedb =_bdgfd ;_dcgb =_aeecf ;};_bdgfd =_fedb -(_fedb -_dcdf )*((_gdgfc -_dcgb )/(_cdbg -_dcgb ));};};return MakeNumberResult (_bdgfd );};func _acaa (){_gb ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_fg .MustCompile ("\u005e"+_geg +_daeg );_gb ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_fg .MustCompile ("\u005e"+_aae +_daeg );_gb ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_fg .MustCompile ("\u005e"+_gab +_daeg );_gb ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_fg .MustCompile ("\u005e"+_cebb +_daeg );_dfee ["\u0068\u0068"]=_fg .MustCompile (_age +_fgb +"\u0024");_dfee ["\u0068\u0068\u003am\u006d"]=_fg .MustCompile (_age +_fcc +"\u0024");_dfee ["\u006d\u006d\u003as\u0073"]=_fg .MustCompile (_age +_feb +"\u0024");_dfee ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_fg .MustCompile (_age +_bafb +"\u0024");_afbf =[]*_fg .Regexp {_fg .MustCompile ("\u005e"+_geg +"\u0024"),_fg .MustCompile ("\u005e"+_aae +"\u0024"),_fg .MustCompile ("\u005e"+_gab +"\u0024"),_fg .MustCompile ("\u005e"+_cebb +"\u0024")};_cff =[]*_fg .Regexp {_fg .MustCompile ("\u005e"+_fgb +"\u0024"),_fg .MustCompile ("\u005e"+_fcc +"\u0024"),_fg .MustCompile ("\u005e"+_feb +"\u0024"),_fg .MustCompile ("\u005e"+_bafb +"\u0024")};};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_feadf :=args [0].Ref ;if _feadf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_fedgc ,_eabd :=_cf .ParseCellReference (_feadf .Value );if _eabd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_feadf .Value );};return MakeNumberResult (float64 (_fedgc .RowIdx ));};type Expression interface{Eval (_bcc Context ,_gff Evaluator )Result ;Reference (_cgaf Context ,_dae Evaluator )Reference ;String ()string ;Update (_dca *_ad .UpdateQuery )Expression ;};func _fef (_afbdd ,_gbcg ,_bged ,_feec int )int {if !_adbe (_feec ){return _bged ;};_adfe :=_bged ;_fecg :=_eaa (_afbdd ,_gbcg );if _adfe > 30||_bged >=_fecg ||_adfe >=_fecg {_adfe =30;};return _adfe ;};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_acaac :=args [0].ValueNumber ;_beef :=args [1].ValueNumber ;if _beef < _acaac {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _beef ==_acaac {return MakeNumberResult (0);};_aaea :=_ca .ToLower (args [2].ValueString );if _aaea =="\u0064"{return MakeNumberResult (_beef -_acaac );};_bgce :=_dfff (_acaac );_daf :=_dfff (_beef );_eag ,_ddbc ,_eaf :=_bgce .Date ();_bbbc ,_cfc ,_gag :=_daf .Date ();_ddg :=int (_ddbc );_bgbg :=int (_cfc );var _gba float64 ;switch _aaea {case "\u0079":_gba =float64 (_bbbc -_eag );if _bgbg < _ddg ||(_bgbg ==_ddg &&_gag < _eaf ){_gba --;};case "\u006d":_ceba :=_bbbc -_eag ;_eabg :=_bgbg -_ddg ;if _gag < _eaf {_eabg --;};if _eabg < 0{_ceba --;_eabg +=12;};_gba =float64 (_ceba *12+_eabg );case "\u006d\u0064":_ffaa :=_bgbg ;if _gag < _eaf {_ffaa --;};_gba =float64 (int (_beef -_gge (_bbbc ,_ffaa ,_eaf )));case "\u0079\u006d":_gba =float64 (_bgbg -_ddg );if _gag < _eaf {_gba --;};if _gba < 0{_gba +=12;};case "\u0079\u0064":_fec :=_bbbc ;if _bgbg < _ddg ||(_bgbg ==_ddg &&_gag < _eaf ){_fec --;};_gba =float64 (int (_beef -_gge (_fec ,_ddg ,_eaf )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_gba );};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_cbbd (args ,_egbfd ));};func _fcca (_dgbc string )(int ,int ,float64 ,bool ,bool ,Result ){_becb :="";_ebb :=[]string {};for _ffee ,_gfcc :=range _dfee {_ebb =_gfcc .FindStringSubmatch (_dgbc );if len (_ebb )> 1{_becb =_ffee ;break ;};};if _becb ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};_fdfg :=_ebb [1]=="";_ebb =_ebb [49:];_ggb :=len (_ebb );_dbdd :=_ebb [_ggb -1];_bda :=_dbdd =="\u0061\u006d";_bdg :=_dbdd =="\u0070\u006d";var _ace ,_bbe int ;var _daeb float64 ;var _bcfdc error ;switch _becb {case "\u0068\u0068":_ace ,_bcfdc =_g .Atoi (_ebb [0]);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};_bbe =0;_daeb =0;case "\u0068\u0068\u003am\u006d":_ace ,_bcfdc =_g .Atoi (_ebb [0]);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};_bbe ,_bcfdc =_g .Atoi (_ebb [2]);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};_daeb =0;case "\u006d\u006d\u003as\u0073":_ace =0;_bbe ,_bcfdc =_g .Atoi (_ebb [0]);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};_daeb ,_bcfdc =_g .ParseFloat (_ebb [2],64);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_ace ,_bcfdc =_g .Atoi (_ebb [0]);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};_bbe ,_bcfdc =_g .Atoi (_ebb [2]);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};_daeb ,_bcfdc =_g .ParseFloat (_ebb [4],64);if _bcfdc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};};if _bbe >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};if _bda ||_bdg {if _ace > 12||_daeb >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );}else if _ace ==12{_ace =0;};}else if _ace >=24||_daeb >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgg );};return _ace ,_bbe ,_daeb ,_bdg ,_fdfg ,_agg ;};const (_bbfe cmpResult =0;_feea cmpResult =-1;_ddcea cmpResult =1;_dacc cmpResult =2;);

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};func _dfeeb (_bgaf ,_eeef ,_gbada Reference )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bgaf .Value ,_eeef .Value ,_gbada .Value );};const _abag =57351;func _acdb (_caebg []Result ,_faaa []string ,_gdfd bool )[]string {for _ ,_baccc :=range _caebg {switch _baccc .Type {case ResultTypeEmpty :if !_gdfd {_faaa =append (_faaa ,"");};case ResultTypeString :if _baccc .ValueString !=""||!_gdfd {_faaa =append (_faaa ,_baccc .ValueString );};case ResultTypeNumber :_faaa =append (_faaa ,_baccc .Value ());case ResultTypeList :_faaa =_ecag (_faaa ,_acdb (_baccc .ValueList ,[]string {},_gdfd ));case ResultTypeArray :for _ ,_fbfgd :=range _baccc .ValueArray {_faaa =_ecag (_faaa ,_acdb (_fbfgd ,[]string {},_gdfd ));};};};return _faaa ;};

// GetLocked returns FALSE for the invalid reference context.
func (_cdbb *ivr )GetLocked (cellRef string )bool {return false };

// Eval evaluates and returns the result of a formula.
func (_dc *defEval )Eval (ctx Context ,formula string )Result {_cgc :=ParseString (formula );_bgc :=make (chan Result );go func (){if _cgc ==nil {_bgc <-MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_dc .checkLastEvalIsRef (ctx ,_cgc );_bgc <-_cgc .Eval (ctx ,_dc );};}();select{case _ggfg :=<-_bgc :return _ggfg ;case <-_efd .After (_bgb ):_ece .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};const _fgb ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";func _cgfc (_cace string ,_aeafg _efd .Time )(_efd .Time ,error ){_eafe ,_ ,_cddb :=_bc .ParseFloat (_cace ,10,128,_bc .ToNearestEven );if _cddb !=nil {return _efd .Time {},_cddb ;};_abgef :=new (_bc .Float );_abgef .SetUint64 (uint64 (24*_efd .Hour ));_eafe .Mul (_eafe ,_abgef );_ccbd ,_ :=_eafe .Uint64 ();_fbbag :=_aeafg .Add (_efd .Duration (_ccbd ));return _gcfa (_fbbag ),nil ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_gebg ,_bbaaa :=_dfad ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _bbaaa .Type !=ResultTypeEmpty {return _bbaaa ;};_edbdd :=_gebg ._fdfb ;_ggadd :=_gebg ._dgafb ;_adde :=_gebg ._ggcag ;_dafe :=_gebg ._bgced ;_aadg :=len (_edbdd );if _ggadd > _aadg {_ggadd =_aadg ;};_gecf :=_ggadd +_adde ;if _gecf > _aadg {_gecf =_aadg ;};_decc :=_edbdd [0:_ggadd ]+_dafe +_edbdd [_gecf :];return MakeStringResult (_decc );};const _eddf =57373;

// Reference returns a string reference value to a cell.
func (_fa CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_fa ._cfa };};var _afbf =[]*_fg .Regexp {};const _cegag =57368;type durationArgs struct{_gaee float64 ;_cgb float64 ;_gcbd float64 ;_gcca float64 ;_bcgg float64 ;_aceb int ;};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_eafca :=len (args );if _eafca !=5&&_eafca !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebegd ,_acge ,_gedf :=_ggc (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _gedf .Type ==ResultTypeError {return _gedf ;};_agbab ,_gedf :=_ffba (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _gedf .Type ==ResultTypeError {return _gedf ;};if _agbab >=_ebegd {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_abdg :=args [3].ValueNumber ;if _abdg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cbcg :=args [4].ValueNumber ;if _cbcg <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_bdag :=0;if _eafca ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdag =int (args [5].ValueNumber );if !_fdgc (_bdag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_ccfb ,_gedf :=_dgf (_agbab ,_acge ,_bdag );if _gedf .Type ==ResultTypeError {return _gedf ;};_adaa ,_gedf :=_dgf (_agbab ,_ebegd ,_bdag );if _gedf .Type ==ResultTypeError {return _gedf ;};_ggeg ,_gedf :=_dgf (_ebegd ,_acge ,_bdag );if _gedf .Type ==ResultTypeError {return _gedf ;};_adbf :=1+_ccfb *_abdg ;_adbf /=_cbcg /100+_adaa *_abdg ;_adbf --;_adbf /=_ggeg ;return MakeNumberResult (_adbf );};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_afdea ,_eegb ,_gdaga :=_ggc (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _gdaga .Type ==ResultTypeError {return _gdaga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egdb :=_eegb -_afdea ;if _egdb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_adcfg :=args [2].ValueNumber ;if _adcfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebgac :=(100-_adcfg )/_adcfg ;_ecea :=360/_egdb ;return MakeNumberResult (_ebgac *_ecea );};const _feb ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdbg :=args [0].AsNumber ();if _gdbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdbg .ValueNumber < 0{return MakeNumberResult (-1);}else if _gdbg .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// String returns a string representation of ConstArrayExpr.
func (_baa ConstArrayExpr )String ()string {return ""};var _bcag float64 =25569.0;func _cce ()evCache {_eecd :=evCache {};_eecd ._dfg =make (map[string ]Result );_eecd ._ddc =&_bb .Mutex {};return _eecd ;};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggae :=args [0].AsString ();_ageg :=args [1].AsString ();if _ggae .Type !=ResultTypeString ||_ageg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_ggae .ValueString ==_ageg .ValueString );};var _cfbb ,_dfcf ,_bbcc ,_bfea ,_ggdd ,_gbbbg ,_cgbd ,_cdac ,_fbba ,_abgfd ,_gcaca ,_gcfc ,_dddag ,_gdaf ,_fgda *_fg .Regexp ;

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acgef :=args [0].AsNumber ();if _acgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_gcefa :=float64 (1);if _acgef .ValueNumber < 0{_gcefa =-1;};if len (args )> 1{_effc :=args [1].AsNumber ();if _effc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcefa =_effc .ValueNumber ;};_gbfg :=float64 (1);if len (args )> 2{_ddccg :=args [2].AsNumber ();if _ddccg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_gbfg =_ddccg .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gg .Ceil (_acgef .ValueNumber ));};_cadcg :=_acgef .ValueNumber ;_cadcg ,_ecab :=_gg .Modf (_cadcg /_gcefa );if _ecab !=0{if _acgef .ValueNumber > 0{_cadcg ++;}else if _gbfg < 0{_cadcg --;};};return MakeNumberResult (_cadcg *_gcefa );};func _ecag (_dfceg ,_gfcd []string )[]string {for _ ,_cgfcb :=range _gfcd {_dfceg =append (_dfceg ,_cgfcb );};return _dfceg ;};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_beecd ,_gdca :=_bfc (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _gdca .Type ==ResultTypeError {return _gdca ;};_edge :=_beecd ._bga ;_ecbf :=_beecd ._gafb ;_fbg :=_beecd ._feae ;_cdd :=_beecd ._gadf ;_ccbg :=_beecd ._degg ;_cegb :=_beecd ._cebe ;_eace :=_beecd ._cafga ;_bcbg ,_cgeg :=_dgf (_ecbf ,_fbg ,_eace );if _cgeg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_dbg :=_bcbg *_cegb *_edge ;if _ccbg ==0{return MakeNumberResult (_dbg );};_cedd :=_edge *_cegb ;_aefgd :=_edge -_cdd ;_bgfc :=int ((_aefgd -_dbg )/_cedd );if _ccbg <=_bgfc {return MakeNumberResult (_cedd );}else if _ccbg ==_bgfc +1{return MakeNumberResult (_aefgd -_cedd *float64 (_bgfc )-_dbg );}else {return MakeNumberResult (0);};};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _a .Reader )Expression {_ebceb :=&plex {_dagb :LexReader (r )};_agdfa (_ebceb );if _ebceb ._adabg !=""{return nil ;};return _ebceb ._dbafe ;};const _agcgd =57346;

// Reference returns a string reference value to a vertical range.
func (_gdfbc VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_gdfbc .verticalRangeReference ()};};const _acfa =57360;

// Reference returns a string reference value to a range.
func (_ggec Range )Reference (ctx Context ,ev Evaluator )Reference {_aaaca :=_ggec ._addag .Reference (ctx ,ev );_gadee :=_ggec ._bdab .Reference (ctx ,ev );if _aaaca .Type ==ReferenceTypeCell &&_gadee .Type ==ReferenceTypeCell {return MakeRangeReference (_cggdf (_aaaca ,_gadee ));};return ReferenceInvalid ;};const _baede =57374;

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_agfb :=args [0].AsNumber ();_dege :=args [1].AsNumber ();if _agfb .Type ==ResultTypeNumber &&_dege .Type ==ResultTypeNumber {_fcdf :=_gg .Atan2 (_dege .ValueNumber ,_agfb .ValueNumber );if _fcdf !=_fcdf {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_fcdf );};for _ ,_dacf :=range []ResultType {_agfb .Type ,_dege .Type }{switch _dacf {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _agfb ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dacf ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dgaf :=args [0].AsNumber ();if _dgaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_dabc :=float64 (1);if _dgaf .ValueNumber < 0{_dabc =-1;};if len (args )> 1{_agddg :=args [1].AsNumber ();if _agddg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dabc =_agddg .ValueNumber ;};if _dabc < 0&&_dgaf .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_gg .Ceil (_dgaf .ValueNumber ));};_acgb :=_dgaf .ValueNumber ;_acgb ,_efag :=_gg .Modf (_acgb /_dabc );if _efag > 0{_acgb ++;};return MakeNumberResult (_acgb *_dabc );};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_baff string };func _efefd (_bbee Result ,_agdad ,_bage string )(string ,Result ){switch _bbee .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _bbee .Value (),_agg ;default:return "",MakeErrorResult (_agdad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bage +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};const _fcga =187;

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_cfeb .Lock ();defer _cfeb .Unlock ();if _bceg ,_addef :=_gcffa [name ];_addef {return _bceg ;};return nil ;};func _feeab (_afcc Result )bool {_babf :=_afcc .Type ;return _babf !=ResultTypeArray &&_babf !=ResultTypeList ;};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_aeea :=args [0].AsNumber ();if _aeea .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfca ,_cccde :=_gg .Modf (_aeea .ValueNumber );if _cccde < 0{_cfca --;};return MakeNumberResult (_cfca );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_bggc :=len (args );if _bggc !=4&&_bggc !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecbg :=args [0].ValueNumber ;if _ecbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfed :=args [1].ValueNumber ;if _dfed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acde :=args [2].ValueNumber ;if _acde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baee :=args [3].ValueNumber ;if _baee < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _baee > _acde {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_fbeb :=2.0;if _bggc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbeb =args [4].ValueNumber ;if _fbeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_fdcb (_ecbg ,_dfed ,_acde ,_baee ,_fbeb ));};func _fecea (_gfdg int )bool {if _gfdg ==_gfdg /400*400{return true ;};if _gfdg ==_gfdg /100*100{return false ;};return _gfdg ==_gfdg /4*4;};

// Number is a nubmer expression.
type Number struct{_ecega float64 };

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_abbdb PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gbgaed :=_abbdb ._bgfb .Reference (ctx ,ev );switch _gbgaed .Type {case ReferenceTypeSheet :if _adgdg (_gbgaed ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gbgaed .Value ));};_ceaad :=_abbdb .verticalRangeReference (_gbgaed .Value );if _ecabe ,_aggfc :=ev .GetFromCache (_ceaad );_aggfc {return _ecabe ;};_baeeg :=ctx .Sheet (_gbgaed .Value );_gead ,_ccggfb :=_ccdf (_baeeg ,_abbdb ._beegc ,_abbdb ._cgbaf );_gegg :=_adca (_baeeg ,ev ,_gead ,_ccggfb );ev .SetCache (_ceaad ,_gegg );return _gegg ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbgaed .Type ));};};func init (){_acaa ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// String returns a string of a range.
func (_gefe Range )String ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_gefe ._addag .String (),_gefe ._bdab .String ());};const _age ="\u005e\u0028\u0028"+_geg +"\u007c"+_aae +"\u007c"+_gab +"\u007c"+_cebb +"\u0029\u0020\u0029\u003f";func _gedb (_cacc []Result ,_bcef bool )Result {_eedf :="\u004d\u0049\u004e";if _bcef {_eedf ="\u004d\u0049\u004e\u0041";};if len (_cacc )==0{return MakeErrorResult (_eedf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gggce :=_gg .MaxFloat64 ;for _ ,_ebcga :=range _cacc {switch _ebcga .Type {case ResultTypeNumber :if (_bcef ||!_ebcga .IsBoolean )&&_ebcga .ValueNumber < _gggce {_gggce =_ebcga .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bbeg :=_gedb (_ebcga .ListValues (),_bcef );if _bbeg .ValueNumber < _gggce {_gggce =_bbeg .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_bcga :=0.0;if _bcef {_bcga =_ebcga .AsNumber ().ValueNumber ;};if _bcga < _gggce {_gggce =_bcga ;};default:_ece .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_eedf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebcga .Type );};};if _gggce ==_gg .MaxFloat64 {_gggce =0;};return MakeNumberResult (_gggce );};const _gab ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_acac :=len (args );if _acac !=4&&_acac !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_face ,_fabe ,_cfeg :=_ggc (args [0],args [1],"\u0044\u0049\u0053\u0043");if _cfeg .Type ==ResultTypeError {return _cfeg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gefd :=args [2].ValueNumber ;if _gefd <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfcb :=args [3].ValueNumber ;if _dfcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abgf :=0;if _acac ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abgf =int (args [4].ValueNumber );if !_fdgc (_abgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_egfc ,_cfeg :=_dgf (_face ,_fabe ,_abgf );if _cfeg .Type ==ResultTypeError {return _cfeg ;};return MakeNumberResult ((_dfcb -_gefd )/_dfcb /_egfc );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_bgfb Expression ;_beegc ,_cgbaf string ;};const _fcaf =57367;

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_egf :=_ca .ToLower (args [0].ValueString );if !_cdc (_egf ){_ ,_ ,_ ,_cceb ,_fdae :=_dcbb (_egf );if _fdae .Type ==ResultTypeError {_fdae .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _fdae ;};if _cceb {return MakeNumberResult (0);};};_dbd ,_bea ,_cafgg ,_bdb ,_ ,_ebga :=_fcca (_egf );if _ebga .Type ==ResultTypeError {return _ebga ;};_bfb :=_bae (float64 (_dbd ),float64 (_bea ),_cafgg );if _bdb {_bfb +=0.5;}else if _bfb >=1{_bfb -=float64 (int (_bfb ));};return MakeNumberResult (_bfb );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_fgfe :=len (args );if _fgfe ==0||_fgfe > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_ddce :=_gaebb (args [0]);_cbef :=[]float64 {};for _ ,_ggfef :=range _ddce {for _ ,_cgebe :=range _ggfef {if _cgebe .Type ==ResultTypeNumber &&!_cgebe .IsBoolean {_cbef =append (_cbef ,_cgebe .ValueNumber );};};};_dgcf :=len (_cbef );if len (_cbef )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_aagf :=0.1;if _fgfe ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aagf =args [1].ValueNumber ;if _aagf <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_bgbb :=[]float64 {};for _gadfeg :=0;_gadfeg < _dgcf ;_gadfeg ++{if _gadfeg ==0{_bgbb =append (_bgbb ,0);}else {_bgbb =append (_bgbb ,_bgbb [_gadfeg -1]+365);};};return _bafa (_cbef ,_bgbb ,_aagf );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcbc :=args [0];if _fcbc .Type !=ResultTypeArray &&_fcbc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gggcb :=_gaebb (_fcbc );_edcgf :=args [2];if _edcgf .Type !=ResultTypeArray &&_edcgf .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_egcd :=_gaebb (_edcgf );_beebc :=_dfgb (args [1]);_ggdb :=0.0;for _bgedc ,_dffbc :=range _gggcb {for _bagfa ,_fbcd :=range _dffbc {if _eacf (_fbcd ,_beebc ){_ggdb +=_egcd [_bgedc ][_bagfa ].ValueNumber ;};};};return MakeNumberResult (_ggdb );};

// Update returns the same object as updating sheet references does not affect Number.
func (_cgbea Number )Update (q *_ad .UpdateQuery )Expression {return _cgbea };

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_dcecg PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gecd :=_dcecg ._cffe .Reference (ctx ,ev );switch _gecd .Type {case ReferenceTypeSheet :if _adgdg (_gecd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gecd .Value ));};_caef :=_dcecg .horizontalRangeReference (_gecd .Value );if _gafcd ,_ddgbd :=ev .GetFromCache (_caef );_ddgbd {return _gafcd ;};_bdgc :=ctx .Sheet (_gecd .Value );_adaba ,_ffcbb :=_aaadf (_bdgc ,_dcecg ._dffc ,_dcecg ._gagf );_adbfd :=_adca (_bdgc ,ev ,_adaba ,_ffcbb );ev .SetCache (_caef ,_adbfd );return _adbfd ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gecd .Type ));};};func _ffba (_gfbc Result ,_gece ,_ecf string )(float64 ,Result ){var _daed float64 ;switch _gfbc .Type {case ResultTypeNumber :_daed =float64 (int (_gfbc .ValueNumber ));case ResultTypeString :_beeb :=DateValue ([]Result {_gfbc });if _beeb .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gece +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_ecf );};_daed =_beeb .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_ecf );};if _daed < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gece +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _daed ,_agg ;};var _fgaaba =[...]int {1};const _gbecd =57372;

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_eddfd :=_ca .Split (v ,"\u003a");if len (_eddfd )!=2{return nil ;};if _eddfd [0]> _eddfd [1]{_eddfd [0],_eddfd [1]=_eddfd [1],_eddfd [0];};return PrefixVerticalRange {_bgfb :pfx ,_beegc :_eddfd [0],_cgbaf :_eddfd [1]};};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_gabca .Float64 ());};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dffffe :=args [0].AsString ();if _dffffe .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_dffffe .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_dffffe .ValueString [0]));};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _gfdef (args ,true )};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_cbbd (args ,_gbba ))};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eeeg :=args [0].AsNumber ();if _eeeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gccaf :=_gg .Signbit (_eeeg .ValueNumber );_bega ,_geea :=_gg .Modf (_eeeg .ValueNumber /2);_daccf :=_bega *2;if _geea !=0{if !_gccaf {_daccf +=2;}else {_daccf -=2;};};return MakeNumberResult (_daccf );};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_cadf :=len (args );if _cadf !=4&&_cadf !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ebadc ,_dcaa :=_ffba (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _dcaa .Type ==ResultTypeError {return _dcaa ;};_ggbc ,_dcaa :=_ffba (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _dcaa .Type ==ResultTypeError {return _dcaa ;};if _ebadc >=_ggbc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dea :=args [2].ValueNumber ;if _dea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cffa :=args [3].ValueNumber ;if _cffa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebd :=0;if _cadf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebd =int (args [4].ValueNumber );if !_fdgc (_ebd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_cgbf ,_dcaa :=_dgf (_ebadc ,_ggbc ,_ebd );if _dcaa .Type ==ResultTypeError {return _dcaa ;};return MakeNumberResult (_cffa *_dea *_cgbf );};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_ffacb :=_ca .Split (v ,"\u003a");if len (_ffacb )!=2{return nil ;};if _ffacb [0]> _ffacb [1]{_ffacb [0],_ffacb [1]=_ffacb [1],_ffacb [0];};return VerticalRange {_agag :_ffacb [0],_fcgf :_ffacb [1]};};func _fbedb ()yyParser {return &yyParserImpl {}};var _ffgd =[...]uint8 {0,17,33,49,63,78,93,108};func _dgda (_cbgf ,_cbgd int64 )float64 {return float64 (int (0.5+float64 ((_cbgd -_cbgf )/86400)))};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dcegf :=args [0].AsNumber ();_dcgf :=args [1].AsNumber ();if _dcegf .Type !=ResultTypeNumber ||_dcgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _dcgf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_bebb ,_ebca :=_gg .Modf (_dcegf .ValueNumber /_dcgf .ValueNumber );if _ebca < 0{_bebb --;};return MakeNumberResult (_dcegf .ValueNumber -_dcgf .ValueNumber *_bebb );};var _becbd =[...]struct{_eccfe int ;_bcacd int ;_feaea string ;}{};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcdb :=int (args [0].ValueNumber );return MakeBoolResult (_gcdb ==_gcdb /2*2);};const _decf =57347;

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_afeg :=args [0];if _afeg .Type !=ResultTypeArray &&_afeg .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ddea :=_afeg .ValueArray ;if len (_ddea )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_ddea )));};func _eacf (_eaca Result ,_fdcg *criteriaParsed )bool {if _eaca .IsBoolean {return false ;};_egae :=_eaca .Type ;if _fdcg ._ggcc {return _egae ==ResultTypeNumber &&_eaca .ValueNumber ==_fdcg ._agcb ;}else if _egae ==ResultTypeNumber {return _daacg (_eaca .ValueNumber ,_fdcg ._agfaa );};return _begf (_eaca ,_fdcg );};func (_ecgg node )String ()string {return _c .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_ecgg ._cfdg ,_aega (string (_ecgg ._eead )));};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efca ,_debe ,_ddcf :=_ggc (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _ddcf .Type ==ResultTypeError {return _ddcf ;};_cecfa ,_ddcf :=_ffba (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _ddcf .Type ==ResultTypeError {return _ddcf ;};if _cecfa >=_efca {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_efdc :=args [3];if _efdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcaa :=_efdc .ValueNumber ;if _fcaa < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_efeae :=args [4];if _efeae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dac :=_efeae .ValueNumber ;if _dac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dade :=args [5];if _dade .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dfef :=_dade .ValueNumber ;if _dfef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dbbd :=args [6];if _dbbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_affd :=float64 (int (_dbbd .ValueNumber ));if !_faf (_affd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fgbe :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_dcgc :=args [7];if _dcgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgbe =int (_dcgc .ValueNumber );if !_fdgc (_fgbe ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_gbee ,_ddcf :=_dgf (_cecfa ,_debe ,_fgbe );if _ddcf .Type ==ResultTypeError {return _ddcf ;};_gbee *=_affd ;_efdb ,_ddcf :=_dgf (_efca ,_debe ,_fgbe );if _ddcf .Type ==ResultTypeError {return _ddcf ;};_efdb *=_affd ;_fce ,_ddcf :=_dgf (_cecfa ,_efca ,_fgbe );if _ddcf .Type ==ResultTypeError {return _ddcf ;};_fce *=_affd ;_cage :=_dfef +_gbee *100*_fcaa /_affd ;_cage /=_efdb *_dac /_affd +1;_cage -=_fce *100*_fcaa /_affd ;return MakeNumberResult (_cage );};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_af ,_ge :=_g .ParseBool (v );if _ge !=nil {_ece .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_ge );};return Bool {_cd :_af };};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ca .NewReader (s ));};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccee :=args [0].AsString ();if _ccee .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_cbdc :="\u0041\u0031";if len (args )==2{_egca :=args [1].Ref ;if _egca .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_cbdc =_egca .Value ;};switch _ccee .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_feeaa ,_dgbg :=_cf .ParseCellReference (_cbdc );if _dgbg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbdc );};_fbgc :="\u0024"+_feeaa .Column +"\u0024"+_g .Itoa (int (_feeaa .RowIdx ));if _feeaa .SheetName !=""{_fbgc =_feeaa .SheetName +"\u0021"+_fbgc ;};return MakeStringResult (_fbgc );case "\u0063\u006f\u006c":_feeb ,_gbcf :=_cf .ParseCellReference (_cbdc );if _gbcf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbdc );};return MakeNumberResult (float64 (_feeb .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_fabbg :=_ca .Contains (ctx .GetFormat (_cbdc ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_fabbg );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bgff :="\u0047";_bcdc :=ctx .GetFormat (_cbdc );if _bcdc =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_cfbb .MatchString (_bcdc ){_bgff ="\u0046\u0030";}else if _bcdc =="\u0030\u0025"{_bgff ="\u0050\u0030";}else if _bcdc =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bgff ="\u0044\u0032";}else if _bcdc =="\u004d\u004d\u002fY\u0059"{_bgff ="\u0044\u0033";}else if _bcdc =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_bcdc =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bgff ="\u0044\u0034";}else if _bcdc =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bgff ="\u0044\u0035";}else if _bcdc =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bgff ="\u0044\u0036";}else if _bcdc =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bgff ="\u0044\u0037";}else if _bcdc =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bgff ="\u0044\u0038";}else if _bcdc =="\u0048\u0048\u003aM\u004d"{_bgff ="\u0044\u0039";}else if _bbcc .MatchString (_bcdc ){_bgff ="\u002e\u0030";}else if _bfea .MatchString (_bcdc ){_bgff ="\u002e\u0030\u0028\u0029";}else if _abgfd .MatchString (_bcdc ){_bgff ="\u0043\u0030";}else if _dddag .MatchString (_bcdc )||_gdaf .MatchString (_bcdc ){_bgff ="\u0044\u0031";}else if _becde :=_dfcf .FindStringSubmatch (_bcdc );len (_becde )> 1{_bgff ="\u0046"+_g .Itoa (len (_becde [1]));}else if _dgcfd :=_gbbbg .FindStringSubmatch (_bcdc );len (_dgcfd )> 1{_bgff ="\u002e"+_g .Itoa (len (_dgcfd [2]));}else if _eggb :=_fbba .FindStringSubmatch (_bcdc );len (_eggb )> 1{_bgff ="\u0050"+_g .Itoa (len (_eggb [2]));}else if _gffg :=_gcaca .FindStringSubmatch (_bcdc );len (_gffg )> 1{_bgff ="\u0043"+_aggca (_gffg ,1);}else if _cebd :=_gcfc .FindStringSubmatch (_bcdc );len (_cebd )> 1{_bgff ="\u0043"+_aggca (_cebd ,1);}else if _eada :=_cgbd .FindStringSubmatch (_bcdc );len (_eada )> 1{_bgff ="\u002e"+_aggca (_eada ,1)+"\u0028\u0029";}else if _bgbc :=_ggdd .FindStringSubmatch (_bcdc );len (_bgbc )> 1{_bgff ="\u002e"+_aggca (_bgbc ,1);}else if _gcgb :=_fgda .FindStringSubmatch (_bcdc );len (_gcgb )> 1{_bgff ="\u0053"+_aggca (_gcgb ,3);};if _bgff !="\u0047"&&_ca .Contains (_bcdc ,"\u005b\u0052\u0045D\u005d"){_bgff +="\u002d";};return MakeStringResult (_bgff );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_bfgg :=ctx .GetFormat (_cbdc );if _cdac .MatchString (_bfgg ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_cbdc ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_fgbf :=0.0;if ctx .GetLocked (_cbdc ){_fgbf =1.0;};return MakeNumberResult (_fgbf );case "\u0072\u006f\u0077":_egfb ,_fcda :=_cf .ParseCellReference (_cbdc );if _fcda !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbdc );};return MakeNumberResult (float64 (_egfb .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_fedfa ,_cdbd :=_cf .ParseCellReference (_cbdc );if _cdbd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbdc );};if _fedfa .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_fedfa .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_fedfa .SheetName ).GetWidth (int (_fedfa .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_ccee .ValueString );};const _bafb ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_eaac ,_gccd ,_edec :=_ccaec (from ,to );if _edec !=nil {_ece .Log .Debug (_edec .Error ());return NewError (_edec .Error ());};return PrefixRangeExpr {_eggdc :pfx ,_gccb :_eaac ,_cffdg :_gccd };};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ebcgd :=args [0].AsString ();if _ebcgd .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_dbfc :=args [1].AsNumber ();if _dbfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _dbfc .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _dbfc .ValueNumber ==0{return MakeStringResult ("");};_gdddc :=_b .Buffer {};for _dcef :=0;_dcef < int (_dbfc .ValueNumber );_dcef ++{_gdddc .WriteString (_ebcgd .ValueString );};return MakeStringResult (_gdddc .String ());};type yyParserImpl struct{_fbfd yySymType ;_babbb [_cgcb ]yySymType ;_babfa int ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_bad ,_ddgd :=_ffda (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _ddgd .Type ==ResultTypeError {return _ddgd ;};_dece :=_bad ._gbbb ;_dceg :=_bad ._aecg ;_dbeba :=_bad ._aaag ;_cbf :=_bad ._eabb ;_gbfc :=_bad ._aebbf ;_eefa :=_bad ._bfca ;_fcdd :=_cccb (_dece ,_dceg ,_dbeba ,0,_eefa );_ebfe :=0.0;if _cbf ==1{if _eefa ==0{_ebfe =_fcdd +_dbeba *_dece ;}else {_ebfe =_fcdd ;};_cbf ++;};for _fbc :=_cbf ;_fbc <=_gbfc ;_fbc ++{if _eefa ==1{_ebfe +=_fcdd -(_dgcc (_dece ,_fbc -2,_fcdd ,_dbeba ,1)-_fcdd )*_dece ;}else {_ebfe +=_fcdd -_dgcc (_dece ,_fbc -1,_fcdd ,_dbeba ,0)*_dece ;};};return MakeNumberResult (_ebfe );};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};var _gb =map[string ]*_fg .Regexp {};var _cbcec =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aaed :=args [0].Ref ;if _aaed .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_edaa ,_fgdc :=_cf .ParseCellReference (_aaed .Value );if _fgdc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aaed .Value );};return MakeNumberResult (float64 (_edaa .ColumnIdx +1));};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_dafg ,_ccfg :=_aebb (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _ccfg .Type ==ResultTypeError {return _ccfg ;};_gaf :=_dfff (_dafg ._aeagd );_eggd :=_dfff (_dafg ._gdfg );_dfcd :=_dafg ._ggfc ;_gbbg :=_bdcdb (_gaf ,_eggd ,_dfcd );_ddfe ,_bdbd ,_adcd :=_gbbg .Date ();return MakeNumberResult (_gge (_ddfe ,int (_bdbd ),_adcd ));};func _aebb (_abafc []Result ,_afe string )(*couponArgs ,Result ){_bdad :=len (_abafc );if _bdad !=3&&_bdad !=4{return nil ,MakeErrorResult (_afe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gabg ,_abbg ,_dgbe :=_ggc (_abafc [0],_abafc [1],_afe );if _dgbe .Type ==ResultTypeError {return nil ,_dgbe ;};if _abafc [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afe +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbf :=_abafc [2].ValueNumber ;if !_faf (_efbf ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_afe );};_fbe :=0;if _bdad ==4&&_abafc [3].Type !=ResultTypeEmpty {if _abafc [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afe +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbe =int (_abafc [3].ValueNumber );if !_fdgc (_fbe ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_afe );};};return &couponArgs {_gabg ,_abbg ,int (_efbf ),_fbe },_agg ;};const _cdadg =57344;

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaedg :=args [0].AsNumber ();_feaf :=args [1].AsNumber ();if _aaedg .Type !=ResultTypeNumber ||_feaf .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eaaab :=_gg .Trunc (_aaedg .ValueNumber );_cfge :=_gg .Trunc (_feaf .ValueNumber );if _cfge > _eaaab {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _cfge ==_eaaab ||_cfge ==0{return MakeNumberResult (1);};_gbcfa :=float64 (1);for _fcfeb :=float64 (1);_fcfeb <=_cfge ;_fcfeb ++{_gbcfa *=(_eaaab +1-_fcfeb )/_fcfeb ;};return MakeNumberResult (_gbcfa );};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_dgdg :=1.0;for _ ,_gddc :=range args {_gddc =_gddc .AsNumber ();switch _gddc .Type {case ResultTypeNumber :_dgdg *=_gddc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gceb :=Product (_gddc .ListValues ());if _gceb .Type !=ResultTypeNumber {return _gceb ;};_dgdg *=_gceb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gddc ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gddc .Type ));};};return MakeNumberResult (_dgdg );};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_gcaa ,_afdb :=_ebbgg ("\u0046\u0049\u004e\u0044",args );if _afdb .Type !=ResultTypeEmpty {return _afdb ;};_gcdg :=_gcaa ._ddebe ;if _gcdg ==""{return MakeNumberResult (1.0);};_eggbc :=_gcaa ._bcgff ;_gcbe :=_gcaa ._gdbb ;_gbceb :=1;for _bfgf :=range _eggbc {if _gbceb < _gcbe {_gbceb ++;continue ;};_gfbb :=_ca .Index (_eggbc [_bfgf :],_gcdg );if _gfbb ==0{return MakeNumberResult (float64 (_gbceb ));};_gbceb ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_gg .Pi );};func _abe (_fed string )bool {for _ ,_aggb :=range _afbf {_gca :=_aggb .FindStringSubmatch (_fed );if len (_gca )> 1{return true ;};};return false ;};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgcb ,_egbf ,_bfg :=_ggc (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _bfg .Type ==ResultTypeError {return _bfg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cagf :=_egbf -_fgcb ;if _cagf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_fgaac :=args [2].ValueNumber ;if _fgaac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_fgaac )/(360-_fgaac *_cagf ));};type rangeIndex struct{_baeeb int ;_aegc int ;};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_fddd :=args [0];if _fddd .Type !=ResultTypeArray &&_fddd .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ecgba :=_dfgb (args [1]);_eeag :=0;for _ ,_afdca :=range _gaebb (_fddd ){for _ ,_ccdd :=range _afdca {if _eacf (_ccdd ,_ecgba ){_eeag ++;};};};return MakeNumberResult (float64 (_eeag ));};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cdf :=args [1].ValueNumber ;_gbg :=args [0];var _adcf float64 ;switch _gbg .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_adcf =_gbg .ValueNumber ;case ResultTypeString :_bdda :=DateValue ([]Result {args [0]});if _bdda .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_adcf =_bdda .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dbf :=_dfff (_adcf );_aaa :=_dbf .AddDate (0,int (_cdf ),0);_aadb ,_efae ,_dgd :=_aaa .Date ();_dgg :=_gge (_aadb ,int (_efae ),_dgd );if _dgg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_dgg );};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_befb :=len (args );if _befb < 5||_befb > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddeb :=args [0].ValueNumber ;if _ddeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gafe :=args [1].ValueNumber ;if _gafe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfbdd :=args [2].ValueNumber ;if _bfbdd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bfbdd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efee :=args [3].ValueNumber ;if _efee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfe :=args [4].ValueNumber ;if _efee > _acfe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _acfe > _bfbdd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_gagc :=2.0;if _befb > 5{if args [5].Type ==ResultTypeEmpty {_gagc =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gagc =args [5].ValueNumber ;if _gagc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_dagdb :=false ;if _befb > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dagdb =args [6].ValueNumber !=0;};_eccdg :=0.0;_fabed :=_gg .Floor (_efee );_ebbc :=_gg .Ceil (_acfe );if _dagdb {for _bag :=_fabed +1;_bag <=_ebbc ;_bag ++{_dfcbf :=_fdcb (_ddeb ,_gafe ,_bfbdd ,_bag ,_gagc );if _bag ==_fabed +1{_dfcbf *=_gg .Min (_acfe ,_fabed +1)-_efee ;}else if _bag ==_ebbc {_dfcbf *=_acfe +1-_ebbc ;};_eccdg +=_dfcbf ;};}else {_egef :=_bfbdd ;var _aecgb float64 ;if !_ecec (_efee ,_gg .Floor (_efee )){if _gagc ==1{_ffbg :=_bfbdd /2;if _efee > _ffbg ||_ecec (_efee ,_ffbg ){_aecgb =_efee -_ffbg ;_efee =_ffbg ;_acfe -=_aecgb ;_egef ++;};};};if _gagc !=0{_ddeb -=_aefe (_ddeb ,_gafe ,_bfbdd ,_egef ,_efee ,_gagc );};_eccdg =_aefe (_ddeb ,_gafe ,_bfbdd ,_bfbdd -_efee ,_acfe -_efee ,_gagc );};return MakeNumberResult (_eccdg );};var _edbd =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var InvalidReferenceContext =&ivr {};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Update updates references in the Range after removing a row/column.
func (_aefcd Range )Update (q *_ad .UpdateQuery )Expression {_gccca :=_aefcd ;if q .UpdateCurrentSheet {_gccca ._addag =_aefcd ._addag .Update (q );_gccca ._bdab =_aefcd ._bdab .Update (q );};return _gccca ;};type ri struct{_efbg float64 ;_dcgg string ;};func _eeec (_eedc []Result ,_cbba bool )(float64 ,float64 ){_ebege :=0.0;_fafc :=0.0;for _ ,_ebggb :=range _eedc {switch _ebggb .Type {case ResultTypeNumber :if _cbba ||!_ebggb .IsBoolean {_fafc +=_ebggb .ValueNumber ;_ebege ++;};case ResultTypeList ,ResultTypeArray :_dada ,_bggcg :=_eeec (_ebggb .ListValues (),_cbba );_fafc +=_dada ;_ebege +=_bggcg ;case ResultTypeString :if _cbba {_ebege ++;};case ResultTypeEmpty :};};return _fafc ,_ebege ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fefeg :=args [0].AsNumber ();if _fefeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fefeg .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fbfa :=float64 (1);_bbbgc :=_gg .Trunc (_fefeg .ValueNumber );for _fdea :=_bbbgc ;_fdea > 1;_fdea -=2{_fbfa *=_fdea ;};return MakeNumberResult (_fbfa );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _gedb (args ,true )};func _dff (_bg string ,_fb *_ad .UpdateQuery )string {_bce ,_ded :=_cf .ParseCellReference (_bg );if _ded !=nil {return "\u0023\u0052\u0045F\u0021";};if _fb .UpdateType ==_ad .UpdateActionRemoveColumn {_cbg :=_fb .ColumnIdx ;_adc :=_bce .ColumnIdx ;if _adc < _cbg {return _bg ;}else if _adc ==_cbg {return "\u0023\u0052\u0045F\u0021";}else {return _bce .Update (_ad .UpdateActionRemoveColumn ).String ();};};return _bg ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbeb :=_ccfbf (args );_cb .Float64s (_cbeb );var _eccc float64 ;if len (_cbeb )%2==0{_eccc =(_cbeb [len (_cbeb )/2-1]+_cbeb [len (_cbeb )/2])/2;}else {_eccc =_cbeb [len (_cbeb )/2];};return MakeNumberResult (_eccc );};func _edca (_bbca ,_dgfea _efd .Time ,_ddda ,_beae int )_efd .Time {_feecb :=_dgfea ;_bcac :=_bbca .Year ()-_dgfea .Year ();_feecb =_feecb .AddDate (_bcac ,0,0);if _bbca .After (_feecb ){_feecb =_feecb .AddDate (1,0,0);};_fcf :=-12/_ddda ;for _feecb .After (_bbca ){_feecb =_feecb .AddDate (0,_fcf ,0);};return _feecb ;};var _ccgc =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fabc :=args [0];if _fabc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcec :=int (_fabc .ValueNumber );if _fcec < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_fcec {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_fcec ];};func _gbef (_ageb []Result ,_aafe string )(float64 ,float64 ,Result ){if len (_ageb )!=2{return 0,0,MakeErrorResult (_aafe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ageb [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_aafe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ccgd :=_ageb [0].ValueNumber ;if _ageb [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_aafe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fgaa :=float64 (int (_ageb [1].ValueNumber ));if _fgaa < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_aafe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _ccgd ,_fgaa ,_agg ;};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_cfeb .Lock ();defer _cfeb .Unlock ();if _ ,_agfd :=_gcffa [name ];_agfd {_ece .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_gcffa [name ]=fn ;};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fgg :=_ca .ToLower (args [0].ValueString );if !_abe (_fgg ){_ ,_ ,_ ,_ ,_ebg ,_daff :=_fcca (_fgg );if _daff .Type ==ResultTypeError {_daff .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _daff ;};if _ebg {return MakeNumberResult (0);};};_dfa ,_cbae ,_dge ,_ ,_cae :=_dcbb (_fgg );if _cae .Type ==ResultTypeError {return _cae ;};return MakeNumberResult (_gge (_dfa ,_cbae ,_dge ));};func (_dcce *Lexer )Next ()*node {_dcce ._ggac .Lock ();defer _dcce ._ggac .Unlock ();if len (_dcce ._efeee )> 0{_eagec :=_dcce ._efeee [0];_dcce ._efeee =_dcce ._efeee [1:];return _eagec ;};return _dcce .nextRaw ();};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_geecf :=args [0].AsNumber ();if _geecf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcfdg :=int (_geecf .ValueNumber );if _bcfdg < 0||_bcfdg > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_c .Sprintf ("\u0025\u0063",_bcfdg ));};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eaceb :=args [0].AsNumber ();_fbegg :=args [1].AsNumber ();if _eaceb .Type !=ResultTypeNumber ||_fbegg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fbegg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_gg .Trunc (_eaceb .ValueNumber /_fbegg .ValueNumber ));};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cefd :=args [0].AsNumber ();if _cefd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcge :=float64 (1);if _cefd .ValueNumber < 0{_gcge =-1;};if len (args )> 1{_fecb :=args [1].AsNumber ();if _fecb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_gcge =_gg .Abs (_fecb .ValueNumber );};if len (args )==1{return MakeNumberResult (_gg .Floor (_cefd .ValueNumber ));};_dgbga :=_cefd .ValueNumber ;_dgbga ,_gaae :=_gg .Modf (_dgbga /_gcge );if _gaae !=0{if _cefd .ValueNumber < 0{_dgbga --;};};return MakeNumberResult (_dgbga *_gcge );};func _ebbgg (_bfed string ,_fbee []Result )(*parsedSearchObject ,Result ){_faac :=len (_fbee );if _faac !=2&&_faac !=3{return nil ,MakeErrorResult (_bfed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edadb :=_fbee [0];if _edadb .Type ==ResultTypeError {return nil ,_edadb ;};if _edadb .Type !=ResultTypeString &&_edadb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_daabb :=_fbee [1];if _daabb .Type ==ResultTypeError {return nil ,_daabb ;};if _daabb .Type !=ResultTypeString &&_daabb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_efdbe :=_daabb .Value ();_ccegg :=_edadb .Value ();_gbea :=1;if _faac ==3&&_fbee [2].Type !=ResultTypeEmpty {_fccd :=_fbee [2];if _fccd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_gbea =int (_fccd .ValueNumber );if _gbea < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _gbea > len (_efdbe ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_ccegg ,_efdbe ,_gbea },_agg ;};func _fdaa (_bgfd _efd .Time )bool {return _efd .Now ().Sub (_bgfd )>=_faead };

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_ddff ,_ddba ,_dabcg :=_ccaec (from ,to );if _dabcg !=nil {_ece .Log .Debug (_dabcg .Error ());return NewError (_dabcg .Error ());};return Range {_addag :_ddff ,_bdab :_ddba };};const (_ byte =iota ;_faec ;_cegg ;_dgaa ;_bbag ;_ccbgg ;);func _dfgb (_cdeaf Result )*criteriaParsed {_gbgbb :=_cdeaf .Type ==ResultTypeNumber ;_cdde :=_cdeaf .ValueNumber ;_dddd :=_ca .ToLower (_cdeaf .ValueString );_adgb :=_acff (_dddd );return &criteriaParsed {_gbgbb ,_cdde ,_dddd ,_adgb };};

// Update returns the same object as updating sheet references does not affect Error.
func (_bec Error )Update (q *_ad .UpdateQuery )Expression {return _bec };var _fbcf []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// GetWidth returns 0 for the invalid reference context.
func (_bgggb *ivr )GetWidth (colIdx int )float64 {return float64 (0)};func _adbe (_ffdb int )bool {return _ffdb ==0||_ffdb ==4};func _edcg (){_cfbb =_fg .MustCompile ("\u005e\u0030\u002b\u0024");_bbcc =_fg .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_bfea =_fg .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_dfcf =_fg .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_ggdd =_fg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_gbbbg =_fg .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cgbd =_fg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_fbba =_fg .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_abgfd =_fg .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_gcaca =_fg .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_gcfc =_fg .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_dddag =_fg .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dffb +_dffb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dffb +_dffb +"\u0029\u002b\u0059+\u0024");_gdaf =_fg .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_dffb +_dffb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_dffb +_dffb +"\u0029\u002b\u0059+\u0024");_fgda =_fg .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_cdac =_fg .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_cebae Expression ;_agbag Expression ;};var _geefb =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_gabb :=args [0];if _gabb .Type ==ResultTypeError {return _gabb ;};if _gabb .Type !=ResultTypeString &&_gabb .Type !=ResultTypeNumber &&_gabb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ffdf :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_abgb :=int (args [1].ValueNumber );if _abgb < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_fabcg :=int (args [2].ValueNumber );if _fabcg < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_bcecb :=len (_ffdf );if _abgb > _bcecb {return MakeStringResult ("");};_abgb --;_gcdda :=_abgb +_fabcg ;if _gcdda > _bcecb {return MakeStringResult (_ffdf [_abgb :]);}else {return MakeStringResult (_ffdf [_abgb :_gcdda ]);};};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbec :=args [0].AsString ();if _bbec .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_bbec .ValueString )));};func _cggdf (_fgedg ,_cabg Reference )string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_fgedg .Value ,_cabg .Value );};

// Reference returns a string reference value to a sheet.
func (_bgbbc SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_bgbbc ._fgad };};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbb :=args [0].Ref ;if _cbb .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_cbb .Value ,ev ).IsBoolean );};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_cada :v }};var _agg Result =MakeEmptyResult ();

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _babd (args ,false )};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_becc :=args [0];if _becc .Type ==ResultTypeNumber {return _becc ;};if _becc .Type ==ResultTypeString {_gaef ,_aebbc :=_g .ParseFloat (_becc .Value (),64);if _aebbc ==nil {return MakeNumberResult (_gaef );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_abaada PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_bbdac :=_abaada ._eggdc .Reference (ctx ,ev );_cgcga :=_abaada ._gccb .Reference (ctx ,ev );_dcda :=_abaada ._cffdg .Reference (ctx ,ev );switch _bbdac .Type {case ReferenceTypeSheet :if _adgdg (_bbdac ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bbdac .Value ));};_bccaa :=_dfeeb (_bbdac ,_cgcga ,_dcda );if _cgcga .Type ==ReferenceTypeCell &&_dcda .Type ==ReferenceTypeCell {if _geca ,_fgeaf :=ev .GetFromCache (_bccaa );_fgeaf {return _geca ;}else {_ceceb :=_adca (ctx .Sheet (_bbdac .Value ),ev ,_cgcga .Value ,_dcda .Value );ev .SetCache (_bccaa ,_ceceb );return _ceceb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bccaa );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbdac .Type ));};};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_dbb :=len (args );if _dbb < 4||_dbb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcaf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcdf :=args [1].ValueNumber ;if _bcdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dga :=args [2].ValueNumber ;if _dga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cfcd :=args [3].ValueNumber ;_cbafg :=0.0;if _dbb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbafg =args [4].ValueNumber ;};_ccfgc :=0;if _dbb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ccfgc =int (args [5].ValueNumber );if _ccfgc !=0{_ccfgc =1;};};return MakeNumberResult (_ggfd (_bcaf ,_bcdf ,_dga ,_cfcd ,_cbafg ,_ccfgc ));};func _ccfbf (_gdcg []Result )[]float64 {_aeaeb :=make ([]float64 ,0);for _ ,_bedg :=range _gdcg {if _bedg .Type ==ResultTypeEmpty {continue ;};_bedg =_bedg .AsNumber ();switch _bedg .Type {case ResultTypeNumber :if !_bedg .IsBoolean {_aeaeb =append (_aeaeb ,_bedg .ValueNumber );};case ResultTypeList ,ResultTypeArray :_aeaeb =append (_aeaeb ,_ccfbf (_bedg .ListValues ())...);case ResultTypeString :default:_ece .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bedg .Type );};};return _aeaeb ;};func _gcfa (_acce _efd .Time )_efd .Time {_acce =_acce .UTC ();return _efd .Date (_acce .Year (),_acce .Month (),_acce .Day (),_acce .Hour (),_acce .Minute (),_acce .Second (),_acce .Nanosecond (),_efd .Local );};func _agc (_gbd []Result ,_ccba string )(*durationArgs ,Result ){_cfg :=len (_gbd );if _cfg !=5&&_cfg !=6{return nil ,MakeErrorResult (_ccba +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdbe ,_cgf ,_dbc :=_ggc (_gbd [0],_gbd [1],_ccba );if _dbc .Type ==ResultTypeError {return nil ,_dbc ;};_egce :=_gbd [2];if _egce .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccba +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bbfc :=_egce .ValueNumber ;if _bbfc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_ecgb :=_gbd [3];if _ecgb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccba +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ddbcd :=_ecgb .ValueNumber ;if _ddbcd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_aacg :=_gbd [4];if _aacg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccba +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcda :=float64 (int (_aacg .ValueNumber ));if !_faf (_gcda ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_agcd :=0;if _cfg ==6&&_gbd [5].Type !=ResultTypeEmpty {_aebf :=_gbd [5];if _aebf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agcd =int (_aebf .ValueNumber );if !_fdgc (_agcd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_ccba );};};return &durationArgs {_cdbe ,_cgf ,_bbfc ,_ddbcd ,_gcda ,_agcd },_agg ;};const _gbad =57364;func _aefe (_gcdd ,_agdf ,_ebgb ,_ffbe ,_geb ,_cdfgb float64 )float64 {var _bedd ,_fcef float64 ;_beg :=0.0;_gcdc :=_gg .Ceil (_geb );_feaa :=_gcdd -_agdf ;_bgfg :=false ;_eafcb :=0.0;for _efcb :=1.0;_efcb <=_gcdc ;_efcb ++{if !_bgfg {_bedd =_fdcb (_gcdd ,_agdf ,_ebgb ,_efcb ,_cdfgb );_eafcb =_feaa /(_ebgb -_efcb +1);if _eafcb > _bedd {_fcef =_eafcb ;_bgfg =true ;}else {_fcef =_bedd ;_feaa -=_bedd ;};}else {_fcef =_eafcb ;};if _efcb ==_gcdc {_fcef *=_geb +1-_gcdc ;};_beg +=_fcef ;};return _beg ;};

// String returns a string representation of a vertical range with prefix.
func (_fadg PrefixVerticalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fadg ._bgfb .String (),_fadg ._beegc ,_fadg ._cgbaf );};func _begf (_cbbf Result ,_bdbeb *criteriaParsed )bool {_gafed :=_ca .ToLower (_cbbf .ValueString );_gfgf :=_bdbeb ._agfaa ._abace ;_egba :=_bdbeb ._agfaa ._efbbb ;if _gfgf ==_faec {return _gafed ==_egba ||_d .Match (_egba ,_gafed );};if _cbbf .Type !=ResultTypeEmpty {if _gafed ==_bdbeb ._cagef ||_d .Match (_bdbeb ._cagef ,_gafed ){return true ;};if _ ,_aecge :=_g .ParseFloat (_egba ,64);_aecge ==nil {return false ;};switch _gfgf {case _cegg :return _gafed <=_egba ;case _dgaa :return _gafed >=_egba ;case _bbag :return _gafed < _egba ;case _ccbgg :return _gafed > _egba ;};};return false ;};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbce :=args [0];switch _cbce .Type {case ResultTypeError :return _cbce ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_cbce .ValueNumber !=0);};if _cbce .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _gafg (args );case ResultTypeArray :return _defg (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_adgg :=args [0].AsNumber ();if _adgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffad :=_gg .Signbit (_adgg .ValueNumber );_efccc ,_abaa :=_gg .Modf ((_adgg .ValueNumber -1)/2);_dcdg :=_efccc *2+1;if _abaa !=0{if !_ffad {_dcdg +=2;}else {_dcdg -=2;};};return MakeNumberResult (_dcdg );};func (_aebd *plex )Lex (lval *yySymType )int {_caee =true ;_gfffd :=<-_aebd ._dagb ;if _gfffd !=nil {lval ._dadad =_gfffd ;return int (lval ._dadad ._cfdg );};return 0;};func _ecda (_dfec ,_ggba ,_cadg ,_dec ,_aag float64 ,_efcc int )Result {_afge ,_bbfg :=_dgf (_dfec ,_ggba ,_efcc );if _bbfg .Type ==ResultTypeError {return _bbfg ;};_dcd ,_gecc :=_dddc (_dfec ,_ggba ,int (_aag ),_efcc );if _gecc .Type ==ResultTypeError {return _gecc ;};_eeg :=0.0;_cecg :=0.0;_cadg *=100/_aag ;_dec /=_aag ;_dec ++;_geag :=_afge *_aag -_dcd ;for _aac :=1.0;_aac < _dcd ;_aac ++{_fbfb :=_aac +_geag ;_fedc :=_cadg /_gg .Pow (_dec ,_fbfb );_cecg +=_fedc ;_eeg +=_fbfb *_fedc ;};_gef :=(_cadg +100)/_gg .Pow (_dec ,_dcd +_geag );_cecg +=_gef ;_eeg +=(_dcd +_geag )*_gef ;_eeg /=_cecg ;_eeg /=_aag ;return MakeNumberResult (_eeg );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func (_ecgc HorizontalRange )horizontalRangeReference ()string {return _c .Sprintf ("\u0025\u0064\u003a%\u0064",_ecgc ._bbccf ,_ecgc ._fggc );};func _ffd (_ced BinOpType ,_bcg ,_ggff []Result )Result {_eec :=[]Result {};for _dfc :=range _bcg {_ga :=_bcg [_dfc ].AsNumber ();_fe :=_ggff [_dfc ].AsNumber ();if _ga .Type !=ResultTypeNumber ||_fe .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ced {case BinOpTypePlus :_eec =append (_eec ,MakeNumberResult (_ga .ValueNumber +_fe .ValueNumber ));case BinOpTypeMinus :_eec =append (_eec ,MakeNumberResult (_ga .ValueNumber -_fe .ValueNumber ));case BinOpTypeMult :_eec =append (_eec ,MakeNumberResult (_ga .ValueNumber *_fe .ValueNumber ));case BinOpTypeDiv :if _fe .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eec =append (_eec ,MakeNumberResult (_ga .ValueNumber /_fe .ValueNumber ));case BinOpTypeExp :_eec =append (_eec ,MakeNumberResult (_gg .Pow (_ga .ValueNumber ,_fe .ValueNumber )));case BinOpTypeLT :_eec =append (_eec ,MakeBoolResult (_ga .ValueNumber < _fe .ValueNumber ));case BinOpTypeGT :_eec =append (_eec ,MakeBoolResult (_ga .ValueNumber > _fe .ValueNumber ));case BinOpTypeEQ :_eec =append (_eec ,MakeBoolResult (_ga .ValueNumber ==_fe .ValueNumber ));case BinOpTypeLEQ :_eec =append (_eec ,MakeBoolResult (_ga .ValueNumber <=_fe .ValueNumber ));case BinOpTypeGEQ :_eec =append (_eec ,MakeBoolResult (_ga .ValueNumber >=_fe .ValueNumber ));case BinOpTypeNE :_eec =append (_eec ,MakeBoolResult (_ga .ValueNumber !=_fe .ValueNumber ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ced ));};};return MakeListResult (_eec );};func _bdgea (_aagd Result ,_baga int )[]Result {_ebbe :=[]Result {};switch _aagd .Type {case ResultTypeList :_fegc :=_aagd .ValueList ;_bbbcgd :=len (_fegc );for _bfef :=0;_bfef < _baga ;_bfef ++{if _bfef < _bbbcgd {_ebbe =append (_ebbe ,_fegc [_bfef ]);}else {_ebbe =append (_ebbe ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _fgff :=0;_fgff < _baga ;_fgff ++{_ebbe =append (_ebbe ,_aagd );};};return _ebbe ;};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdbg :=args [0].AsNumber ();if _bdbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _bacc float64 ;_egfac :=args [1].AsNumber ();if _egfac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bacc =_egfac .ValueNumber ;if _bacc < 0&&_bdbg .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_efed :=_bdbg .ValueNumber ;_efed ,_ggbg :=_gg .Modf (_efed /_bacc );if _ggbg !=0{if _bdbg .ValueNumber < 0&&_ggbg < 0{_efed --;};};return MakeNumberResult (_efed *_bacc );};const _afda =57354;func (_cbbea *ivr )Sheet (name string )Context {return _cbbea };func _faf (_eece float64 )bool {return _eece ==1||_eece ==2||_eece ==4};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_debdc :=len (args );if _debdc !=4&&_debdc !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_cffd ,_fcfe ,_gdfe :=_ggc (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _gdfe .Type ==ResultTypeError {return _gdfe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agcg :=args [2].ValueNumber ;if _agcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_acfc :=args [3].ValueNumber ;if _acfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ege :=0;if _debdc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ege =int (args [4].ValueNumber );if !_fdgc (_ege ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_aggc ,_gdfe :=_dgf (_cffd ,_fcfe ,_ege );if _gdfe .Type ==ResultTypeError {return _gdfe ;};return MakeNumberResult (_agcg /(1-_acfc *_aggc ));};func _cged (_agdag ,_ffeg Result ,_bcaca string )(*xargs ,Result ){if _agdag .Type !=ResultTypeList &&_agdag .Type !=ResultTypeArray {return nil ,MakeErrorResult (_bcaca +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_gada :=_gaebb (_agdag );_dded :=[]float64 {};for _ ,_fcae :=range _gada {for _ ,_aaeg :=range _fcae {if _aaeg .Type ==ResultTypeNumber &&!_aaeg .IsBoolean {_dded =append (_dded ,_aaeg .ValueNumber );}else {return nil ,MakeErrorResult (_bcaca +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_cfad :=len (_dded );if len (_dded )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _ffeg .Type !=ResultTypeList &&_ffeg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_bcaca +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_fgee :=_gaebb (_ffeg );_dgad :=[]float64 {};_gdfec :=0.0;for _ ,_gcba :=range _fgee {for _ ,_fbfe :=range _gcba {if _fbfe .Type ==ResultTypeNumber &&!_fbfe .IsBoolean {_ccdb :=float64 (int (_fbfe .ValueNumber ));if _ccdb < _gdfec {return nil ,MakeErrorResultType (ErrorTypeNum ,_bcaca +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_dgad =append (_dgad ,_ccdb );_gdfec =_ccdb ;}else {return nil ,MakeErrorResult (_bcaca +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_dgad )!=_cfad {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_dded ,_dgad },MakeEmptyResult ();};var _daabe ,_fffc ,_fecf ,_feebg ,_bfefg ,_dfbg *_fg .Regexp ;func _dcbb (_bcge string )(int ,int ,int ,bool ,Result ){_bbbcg :="";_bba :=[]string {};for _fggd ,_cee :=range _gb {_bba =_cee .FindStringSubmatch (_bcge );if len (_bba )> 1{_bbbcg =_fggd ;break ;};};if _bbbcg ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_gec :=false ;var _fgef ,_afde ,_dfea int ;var _edeb error ;switch _bbbcg {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_afde ,_edeb =_g .Atoi (_bba [1]);if _edeb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_dfea ,_edeb =_g .Atoi (_bba [3]);if _edeb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_fgef ,_edeb =_g .Atoi (_bba [5]);if _edeb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};if _fgef < 0||_fgef > 9999||(_fgef > 99&&_fgef < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_fgef =_bcfd (_fgef );_gec =_bba [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_afde =_gade [_bba [1]];_dfea ,_edeb =_g .Atoi (_bba [14]);if _edeb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_fgef ,_edeb =_g .Atoi (_bba [16]);if _edeb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};if _fgef < 0||_fgef > 9999||(_fgef > 99&&_fgef < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_fgef =_bcfd (_fgef );_gec =_bba [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_cca ,_cgab :=_g .Atoi (_bba [1]);if _cgab !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_gcf ,_cgab :=_g .Atoi (_bba [3]);if _cgab !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_fee ,_cgab :=_g .Atoi (_bba [5]);if _cgab !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};if _cca >=1900&&_cca < 10000{_fgef =_cca ;_afde =_gcf ;_dfea =_fee ;}else if _cca > 0&&_cca < 13{_afde =_cca ;_dfea =_gcf ;_fgef =_fee ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_gec =_bba [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_fgef ,_edeb =_g .Atoi (_bba [16]);if _edeb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_afde =_gade [_bba [3]];_dfea ,_edeb =_g .Atoi (_bba [1]);if _edeb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};_gec =_bba [19]=="";};if !_gfc (_fgef ,_afde ,_dfea ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgf );};return _fgef ,_afde ,_dfea ,_gec ,_agg ;};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_bdf ,_fefb ,_babb :=_gbef (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _babb .Type ==ResultTypeError {return _babb ;};if _fefb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bdf ==0{return MakeNumberResult (0);};_cgfe :=_bdf < 0;if _cgfe {_bdf =-_bdf ;};_cggg :=float64 (int (_bdf ));_geef :=args [0].Value ();_bgeb :=_ca .Split (_geef ,"\u002e");_adcc :=0.0;if len (_bgeb )> 1{var _adec error ;_cfaf :=_bgeb [1];_adcc ,_adec =_g .ParseFloat (_cfaf ,64);if _adec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_gcee :=float64 (len (_cfaf ));_adcc /=_gg .Pow (10,_gcee );};_decd :=_adcc *_fefb /_gg .Pow (10,float64 (int (_gg .Log10 (_fefb )))+1)+_cggg ;if _cgfe {_decd =-_decd ;};return MakeNumberResult (_decd );};const _cebb ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_gfd +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _aggca (_gcaf []string ,_gfbe int )string {return _g .Itoa (len (_gcaf [len (_gcaf )-1-_gfbe ]))};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_gadg :=len (args );if _gadg < 2||_gadg > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbdf :=args [0];if _cbdf .Type !=ResultTypeArray &&_cbdf .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cbdb :=args [1].AsNumber ();if _cbdb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aecc :=int (_cbdb .ValueNumber )-1;_fccb :=-1;if _gadg ==3&&args [2].Type !=ResultTypeEmpty {_feca :=args [2].AsNumber ();if _feca .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fccb =int (_feca .ValueNumber )-1;};if _aecc ==-1&&_fccb ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _dcbd []Result ;if _cbdf .Type ==ResultTypeArray {_abacb :=_cbdf .ValueArray ;if _aecc < -1||_aecc >=len (_abacb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _aecc ==-1{if _fccb >=len (_abacb [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bgad :=[][]Result {};for _ ,_abecc :=range _abacb {_eadg :=_abecc [_fccb ];if _eadg .Type ==ResultTypeEmpty {_eadg =MakeNumberResult (0);};_bgad =append (_bgad ,[]Result {_eadg });};return MakeArrayResult (_bgad );};_dcbd =_abacb [_aecc ];}else {_cgac :=_cbdf .ValueList ;if _aecc < -1||_aecc >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _aecc ==-1{if _fccb >=len (_cgac ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_eecc :=_cgac [_fccb ];if _eecc .Type ==ResultTypeEmpty {_eecc =MakeNumberResult (0);};return _eecc ;};_dcbd =_cgac ;};if _fccb < -1||_fccb > len (_dcbd ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _fccb ==-1{_eadf :=[]Result {};for _ ,_gagac :=range _dcbd {if _gagac .Type ==ResultTypeEmpty {_eadf =append (_eadf ,MakeNumberResult (0));}else {_eadf =append (_eadf ,_gagac );};};return MakeArrayResult ([][]Result {_eadf });};_bebg :=_dcbd [_fccb ];if _bebg .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bebg ;};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_gafd :=len (args );if _gafd < 3||_gafd > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eaaf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dgga :=args [1].ValueNumber ;if _dgga !=float64 (int (_dgga )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afcd :=args [2].ValueNumber ;_gggb :=0.0;if _gafd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gggb =args [3].ValueNumber ;};_bbace :=0.0;if _gafd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbace =args [4].ValueNumber ;if _bbace !=0{_bbace =1;};};if _eaaf ==0{return MakeNumberResult (-_afcd *_dgga -_gggb );}else {return MakeNumberResult ((((1-_gg .Pow (1+_eaaf ,_dgga ))/_eaaf )*_afcd *(1+_eaaf *_bbace )-_gggb )/_gg .Pow (1+_eaaf ,_dgga ));};};func _fdcb (_geec ,_cacdc ,_bddca ,_eacbc ,_eff float64 )float64 {var _decb float64 ;_gdcd :=_eff /_bddca ;if _gdcd >=1{_gdcd =1;if _eacbc ==1{_decb =_geec ;}else {_decb =0;};}else {_decb =_geec *_gg .Pow (1-_gdcd ,_eacbc -1);};_gcacb :=_geec *_gg .Pow (1-_gdcd ,_eacbc );var _dbfg float64 ;if _gcacb < _cacdc {_dbfg =_decb -_cacdc ;}else {_dbfg =_decb -_gcacb ;};if _dbfg < 0{_dbfg =0;};return _dbfg ;};func _afgc (_gadff yyLexer ,_bbea *yySymType )(_edfee ,_ecdd int ){_ecdd =0;_edfee =_gadff .Lex (_bbea );if _edfee <=0{_ecdd =_fgaaba [0];goto _dfbf ;};if _edfee < len (_fgaaba ){_ecdd =_fgaaba [_edfee ];goto _dfbf ;};if _edfee >=_cdadg {if _edfee < _cdadg +len (_abaad ){_ecdd =_abaad [_edfee -_cdadg ];goto _dfbf ;};};for _gbcac :=0;_gbcac < len (_gfgc );_gbcac +=2{_ecdd =_gfgc [_gbcac +0];if _ecdd ==_edfee {_ecdd =_gfgc [_gbcac +1];goto _dfbf ;};};_dfbf :if _ecdd ==0{_ecdd =_abaad [1];};if _aaef >=3{_c .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_cfcbc (_ecdd ),uint (_edfee ));};return _edfee ,_ecdd ;};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_eagab Result )ListValues ()[]Result {if _eagab .Type ==ResultTypeArray {_cddgb :=[]Result {};for _ ,_fbcfa :=range _eagab .ValueArray {for _ ,_aadgb :=range _fbcfa {_cddgb =append (_cddgb ,_aadgb );};};return _cddgb ;};if _eagab .Type ==ResultTypeList {return _eagab .ValueList ;};return nil ;};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fafg :=args [0].AsNumber ();_gbgaf :=args [1].AsNumber ();if _fafg .Type !=ResultTypeNumber ||_gbgaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_adecb :=_gg .Trunc (_fafg .ValueNumber );_cgfec :=_gg .Trunc (_gbgaf .ValueNumber );if _adecb < _cgfec {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _adecb ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_adecb +_cgfec -1);args [1]=MakeNumberResult (_adecb -1);return Combin (args );};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_df :lhs ,_ggf :rhs ,_ecc :op };};

// Eval evaluates and returns the result of a sheet expression.
func (_afgg SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// Reference returns an invalid reference for ConstArrayExpr.
func (_bbf ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};const _eccdga int =30;const _fgdgb =57371;func _bdba (_feebd [][]Result )float64 {if len (_feebd )==2{_ddad :=_feebd [0][0].AsNumber ();_adbg :=_feebd [0][1].AsNumber ();_effd :=_feebd [1][0].AsNumber ();_aacb :=_feebd [1][1].AsNumber ();if _ddad .Type !=ResultTypeNumber ||_adbg .Type !=ResultTypeNumber ||_effd .Type !=ResultTypeNumber ||_aacb .Type !=ResultTypeNumber {return _gg .NaN ();};return _ddad .ValueNumber *_aacb .ValueNumber -_effd .ValueNumber *_adbg .ValueNumber ;};_dfcc :=float64 (0);_dffff :=float64 (1);for _aabf :=range _feebd {_dfcc +=_dffff *_feebd [0][_aabf ].ValueNumber *_bdba (_caga (_feebd ,_aabf ));_dffff *=-1;};return _dfcc ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_efbc :=len (args );if (_efbc !=2&&_efbc !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgcd :=0;if _efbc ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgcd =int (args [2].ValueNumber );if !_fdgc (_cgcd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbab :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdg :=args [1].ValueNumber ;_ccf ,_abaf :=_dgf (_cbab ,_gdg ,_cgcd );if _abaf .Type ==ResultTypeError {return _abaf ;};return MakeNumberResult (_ccf );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _caecc (args ,_befge )};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_gg .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_gebgbe :e }};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};func _aaadf (_gced Context ,_eccce ,_gcgec int )(string ,string ){_adgbb :="\u0041"+_g .Itoa (_eccce );_gffgf :=_gced .LastColumn (_eccce ,_gcgec );_deac :=_gffgf +_g .Itoa (_gcgec );return _adgbb ,_deac ;};var _abff =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// String returns a string representation of CellRef.
func (_dde CellRef )String ()string {return _dde ._cfa };

// Error is an error expression.
type Error struct{_cada string };

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_addag ,_bdab Expression };func _ggc (_bbdd ,_gea Result ,_abec string )(float64 ,float64 ,Result ){_gda ,_fbfc :=_ffba (_bbdd ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_abec );if _fbfc .Type ==ResultTypeError {return 0,0,_fbfc ;};_efad ,_fbfc :=_ffba (_gea ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_abec );if _fbfc .Type ==ResultTypeError {return 0,0,_fbfc ;};if _gda >=_efad {return 0,0,MakeErrorResultType (ErrorTypeNum ,_abec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _gda ,_efad ,_agg ;};func _debc (_aggf ,_debce ,_beb ,_edc int )int {if _debce > _beb {return 0;};if _adbe (_edc ){return (_beb -_debce +1)*30;};_gcfe :=0;for _bbaa :=_debce ;_bbaa <=_beb ;_bbaa ++{_gcfe +=_eaa (_aggf ,_bbaa );};return _gcfe ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _gfdef (args ,false )};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggbb :=args [0].AsString ();if _ggbb .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfgf :=_b .Buffer {};_accd :=false ;_fefad :=false ;_bcedb :=0;for _ ,_caecb :=range _ggbb .ValueString {_bedff :=_caecb ==' ';if _bedff {if !_accd {continue ;};if !_fefad {_bcedb ++;_cfgf .WriteRune (_caecb );};}else {_bcedb =0;_accd =true ;_cfgf .WriteRune (_caecb );};_fefad =_bedff ;};_cfgf .Truncate (_cfgf .Len ()-_bcedb );return MakeStringResult (_cfgf .String ());};

// Update updates references in the VerticalRange after removing a row/column.
func (_cfdc VerticalRange )Update (q *_ad .UpdateQuery )Expression {if q .UpdateType ==_ad .UpdateActionRemoveColumn {_dcaaef :=_cfdc ;if q .UpdateCurrentSheet {_ebadg :=q .ColumnIdx ;_dcaaef ._agag =_bd (_cfdc ._agag ,_ebadg );_dcaaef ._fcgf =_bd (_cfdc ._fcgf ,_ebadg );};return _dcaaef ;};return _cfdc ;};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_dbbf ,_agb :=_agc (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _agb .Type ==ResultTypeError {return _agb ;};_gdag :=_dbbf ._gaee ;_fcag :=_dbbf ._cgb ;_bcgcb :=_dbbf ._gcbd ;_afab :=_dbbf ._gcca ;_efdf :=_dbbf ._bcgg ;_ggcf :=_dbbf ._aceb ;_gggc :=_ecda (_gdag ,_fcag ,_bcgcb ,_afab ,_efdf ,_ggcf );if _gggc .Type ==ResultTypeError {return _gggc ;};_beeg :=_gggc .ValueNumber /(1.0+_afab /_efdf );return MakeNumberResult (_beeg );};

// SetLocked does nothing for the invalid reference context.
func (_ffde *ivr )SetLocked (cellRef string ,locked bool ){};const _cdfd ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";type evCache struct{_dfg map[string ]Result ;_ddc *_bb .Mutex ;};const _bagg =57369;const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acbd :=args [0].AsNumber ();if _acbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cddg :=0;if len (args )> 1{_ebbf :=args [1];if _ebbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cddg =int (_ebbf .ValueNumber );if _cddg < 0{_cddg =0;}else if _cddg > 4{_cddg =4;};};_eddba :=_edbd ;switch _cddg {case 1:_eddba =_dddb ;case 2:_eddba =_bcff ;case 3:_eddba =_ecbca ;case 4:_eddba =_ccgc ;};_gdab :=_gg .Trunc (_acbd .ValueNumber );_agcf :=_b .Buffer {};for _ ,_dfffd :=range _eddba {for _gdab >=_dfffd ._efbg {_agcf .WriteString (_dfffd ._dcgg );_gdab -=_dfffd ._efbg ;};};return MakeStringResult (_agcf .String ());};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cfaa :=int (args [0].ValueNumber );if _cfaa < 0||_cfaa >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _cfaa <=1899{_cfaa +=1900;};_fad :=_efd .Month (args [1].ValueNumber );_ffe :=int (args [2].ValueNumber );_eeb :=_bgf (_cfaa ,_fad ,_ffe );_egd :=_dgda (_bccg ,_eeb )+1;if _egd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_egd );};func (_accde Result )String ()string {return _accde .Value ()};const _dbaf =1;

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebbg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adegg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abcf :=args [2].ValueNumber ;if _abcf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_ebbg -_adegg )/_abcf );};func init (){_edcg ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_fgbdg ,_ddbca :=_eeec (args ,false );if _ddbca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_fgbdg /_ddbca );};

// CellRef is a reference to a single cell
type CellRef struct{_cfa string };

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Negate is a negate expression like -A1.
type Negate struct{_gebgbe Expression };type ivr struct{};var _gcffa =map[string ]Function {};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bef :=args [1].ValueNumber ;_ddfa :=args [0];var _ddeee float64 ;switch _ddfa .Type {case ResultTypeEmpty :_ddeee =0;case ResultTypeNumber :_ddeee =_ddfa .ValueNumber ;case ResultTypeString :_ebge :=DateValue ([]Result {args [0]});if _ebge .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ddeee =_ebge .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_abb :=_dfff (_ddeee );_cag :=_abb .AddDate (0,int (_bef +1),0);_ccaf ,_babc ,_ :=_cag .Date ();_bcca :=_gge (_ccaf ,int (_babc ),0);if _bcca < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _ccaf ==1900&&_babc ==3{_bcca --;};return MakeNumberResult (_bcca );};var (_aaef =0;_caee =false ;);func _adef (_abfg []Result )(float64 ,float64 ,Result ){_fcad :=0.0;_aead :=1.0;for _ ,_feaca :=range _abfg {switch _feaca .Type {case ResultTypeNumber :_fcad +=_feaca .ValueNumber ;_aead *=_cdad (_feaca .ValueNumber );case ResultTypeList ,ResultTypeArray :_ggcg ,_dbee ,_ceddb :=_adef (_feaca .ListValues ());_fcad +=_ggcg ;_aead *=_cdad (_dbee );if _ceddb .Type ==ResultTypeError {return 0,0,_ceddb ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_feaca ;};};return _fcad ,_aead ,_agg ;};const _dace =57375;

// Eval evaluates a horizontal range returning a list of results or an error.
func (_bdbc HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_bbfgc :=_bdbc .horizontalRangeReference ();if _bcgefa ,_agef :=ev .GetFromCache (_bbfgc );_agef {return _bcgefa ;};_aeecb ,_daecd :=_aaadf (ctx ,_bdbc ._bbccf ,_bdbc ._fggc );_ffbge :=_adca (ctx ,ev ,_aeecb ,_daecd );ev .SetCache (_bbfgc ,_ffbge );return _ffbge ;};func (_efce *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};const _aae =_gfd +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_dbea :=len (args );if _dbea < 3||_dbea > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gaec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aafa :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cgadd :=args [2].ValueNumber ;_geeg :=0.0;if _dbea >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_geeg =args [3].ValueNumber ;};_acef :=0.0;if _dbea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_acef =args [4].ValueNumber ;if _acef !=0{_acef =1;};};_edad :=_aafa *(1+_gaec *_acef )-_geeg *_gaec ;_edcab :=(_cgadd *_gaec +_aafa *(1+_gaec *_acef ));return MakeNumberResult (_gg .Log (_edad /_edcab )/_gg .Log (1+_gaec ));};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_bbccf ,_fggc int };func _gfccd (_dedg string ,_efcaf func (_bbda float64 )float64 )Function {return func (_ccegf []Result )Result {if len (_ccegf )!=1{return MakeErrorResult (_dedg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dgabd :=_ccegf [0].AsNumber ();switch _dgabd .Type {case ResultTypeNumber :_daba :=_efcaf (_dgabd .ValueNumber );if _gg .IsNaN (_daba ){return MakeErrorResult (_dedg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gg .IsInf (_daba ,0){return MakeErrorResult (_dedg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_daba );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_dedg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _dgabd ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dedg ,_dgabd .Type ));};};};type cmpResult int8 ;func _cdad (_bgcc float64 )float64 {_befg :=float64 (1);for _bcfb :=float64 (2);_bcfb <=_bgcc ;_bcfb ++{_befg *=_bcfb ;};return _befg ;};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_dcecf ,_efba ,_bgdfc :=_adef (args );if _bgdfc .Type ==ResultTypeError {return _bgdfc ;};return MakeNumberResult (_cdad (_dcecf )/_efba );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbeb :=args [0].AsNumber ();if _gbeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebfb :=float64 (0);if len (args )> 1{_afdec :=args [1].AsNumber ();if _afdec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebfb =_afdec .ValueNumber ;};_gcfaf :=_gbeb .ValueNumber ;_dabd :=1.0;if _ebfb >=0{_dabd =_gg .Pow (1/10.0,_ebfb );}else {return MakeNumberResult (0);};_gcfaf ,_bcacaf :=_gg .Modf (_gcfaf /_dabd );_cgccc :=0.99999;if _bcacaf > _cgccc {_gcfaf ++;}else if _bcacaf < -_cgccc {_gcfaf --;};_ =_bcacaf ;return MakeNumberResult (_gcfaf *_dabd );};const _daeg ="\u0028\u0020\u0028"+_fgb +"\u007c"+_fcc +"\u007c"+_feb +"\u007c"+_bafb +"\u0029\u0029\u003f\u0024";func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};func _agfac (_adfa []Result )[]rangeIndex {_fgag :=[]rangeIndex {};_abccb :=len (_adfa );for _gddd :=0;_gddd < _abccb -1;_gddd +=2{_cbabd :=[]rangeIndex {};_eabea :=_gaebb (_adfa [_gddd ]);_geaa :=_dfgb (_adfa [_gddd +1]);if _gddd ==0{for _acbad ,_aaeb :=range _eabea {for _cdeg ,_fbfcb :=range _aaeb {if _eacf (_fbfcb ,_geaa ){_cbabd =append (_cbabd ,rangeIndex {_acbad ,_cdeg });};};};}else {for _ ,_febed :=range _fgag {_bbcea :=_eabea [_febed ._baeeb ][_febed ._aegc ];if _eacf (_bbcea ,_geaa ){_cbabd =append (_cbabd ,_febed );};};};if len (_cbabd )==0{return []rangeIndex {};};_fgag =_cbabd [:];};return _fgag ;};

// String returns a string representation of a horizontal range.
func (_ceeg HorizontalRange )String ()string {return _ceeg .horizontalRangeReference ()};func _eabe (_bfcg Result ,_ecff ,_dbbfe int )[][]Result {_bdfb :=[][]Result {};switch _bfcg .Type {case ResultTypeArray :for _dcde ,_gfde :=range _bfcg .ValueArray {if _dcde < _ecff {_bdfb =append (_bdfb ,_bdgea (MakeListResult (_gfde ),_dbbfe ));}else {_bdfb =append (_bdfb ,_bdgea (MakeErrorResultType (ErrorTypeNA ,""),_dbbfe ));};};case ResultTypeList :_fege :=_bdgea (_bfcg ,_dbbfe );for _gabgb :=0;_gabgb < _ecff ;_gabgb ++{_bdfb =append (_bdfb ,_fege );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gacg :=0;_gacg < _ecff ;_gacg ++{_ccbae :=_bdgea (_bfcg ,_dbbfe );_bdfb =append (_bdfb ,_ccbae );};};return _bdfb ;};func _fda (_fgc BinOpType ,_caf [][]Result ,_efb Result )Result {_ceb :=[][]Result {};for _dfe :=range _caf {_dd :=_eef (_fgc ,_caf [_dfe ],_efb );if _dd .Type ==ResultTypeError {return _dd ;};_ceb =append (_ceb ,_dd .ValueList );};return MakeArrayResult (_ceb );};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_dg CellRef )Update (q *_ad .UpdateQuery )Expression {if q .UpdateCurrentSheet {_dg ._cfa =_dff (_dg ._cfa ,q );};return _dg ;};func (_ggfb *noCache )GetFromCache (key string )(Result ,bool ){return _agg ,false };

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ffag :=args [0].Ref ;for _ffag .Type ==ReferenceTypeNamedRange {_ffag =ctx .NamedRange (_ffag .Value );};_ffcd :="";switch _ffag .Type {case ReferenceTypeCell :_ffcd =_ffag .Value ;case ReferenceTypeRange :_eadd :=_ca .Split (_ffag .Value ,"\u003a");if len (_eadd )==2{_ffcd =_eadd [0];};default:return MakeErrorResult (_c .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_ffag .Type ));};_eegg ,_eacbca :=_cf .ParseCellReference (_ffcd );if _eacbca !=nil {return MakeErrorResult (_c .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_eacbca .Error ()));};_debba ,_fcffb ,_caec :=_eegg .Column ,_eegg .RowIdx ,_eegg .SheetName ;_abeg :=args [1].AsNumber ();if _abeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_egda :=args [2].AsNumber ();if _egda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _cegfa ,_cgeeg Result ;if len (args )==3{_cegfa =MakeNumberResult (1);_cgeeg =MakeNumberResult (1);}else {_cegfa =args [3].AsNumber ();if _cegfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _cegfa .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_cgeeg =args [4].AsNumber ();if _cgeeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _cgeeg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_cfdad :=_cf .ColumnToIndex (_debba );_bfbda :=_fcffb +uint32 (_abeg .ValueNumber );_fdgb :=_cfdad +uint32 (_egda .ValueNumber );_eedg :=_bfbda +uint32 (_cegfa .ValueNumber );_febd :=_fdgb +uint32 (_cgeeg .ValueNumber );if _cegfa .ValueNumber > 0{_eedg --;}else {_eedg ++;_bfbda ,_eedg =_eedg ,_bfbda ;};if _cgeeg .ValueNumber > 0{_febd --;}else {_febd ++;_fdgb ,_febd =_febd ,_fdgb ;};_abdbb :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_cf .IndexToColumn (_fdgb ),_bfbda );_aaaa :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_cf .IndexToColumn (_febd ),_eedg );if _caec ==""{return _adca (ctx ,ev ,_abdbb ,_aaaa );}else {return _adca (ctx .Sheet (_caec ),ev ,_abdbb ,_aaaa );};};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_bdca ,_afga :=_agc (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _afga .Type ==ResultTypeError {return _afga ;};_dgba :=_bdca ._gaee ;_fddf :=_bdca ._cgb ;_dead :=_bdca ._gcbd ;_cgge :=_bdca ._gcca ;_geae :=_bdca ._bcgg ;_eagaf :=_bdca ._aceb ;return _ecda (_dgba ,_fddf ,_dead ,_cgge ,_geae ,_eagaf );};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func _caecc (_fdag []Result ,_cefdf rmode )Result {if len (_fdag )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_abga :=_fdag [0].AsNumber ();if _abga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_baca :=_fdag [1].AsNumber ();if _baca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdef :=_baca .ValueNumber ;_gbag :=_abga .ValueNumber ;_ddbe :=1.0;if _fdef > 0{_ddbe =_gg .Pow (1/10.0,_fdef );}else {_ddbe =_gg .Pow (10.0,-_fdef );};_gbag ,_aefa :=_gg .Modf (_gbag /_ddbe );switch _cefdf {case _befge :const _bdcde =0.499999999;if _aefa >=_bdcde {_gbag ++;}else if _aefa <=-_bdcde {_gbag --;};case _acae :case _cagda :if _aefa > 0{_gbag ++;}else if _aefa < 0{_gbag --;};};return MakeNumberResult (_gbag *_ddbe );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_feada :=args [0].AsNumber ();if _feada .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bccb :=float64 (1);if _feada .ValueNumber < 0{_bccb =-1;};if len (args )> 1{_deef :=args [1].AsNumber ();if _deef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_bccb =_deef .ValueNumber ;};_dgbd :=float64 (1);if len (args )> 2{_afcge :=args [2].AsNumber ();if _afcge .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgbd =_afcge .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gg .Floor (_feada .ValueNumber ));};_gdbf :=_feada .ValueNumber ;_gdbf ,_afea :=_gg .Modf (_gdbf /_bccb );if _afea !=0&&_feada .ValueNumber < 0&&_dgbd > 0{_gdbf ++;};return MakeNumberResult (_gdbf *_bccb );};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bdff :=args [0];if _bdff .Type !=ResultTypeNumber &&_bdff .Type !=ResultTypeString &&_bdff .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_cfcb :=args [1].ValueString ;switch _bdff .Type {case ResultTypeNumber :return MakeStringResult (_ce .Number (_bdff .ValueNumber ,_cfcb ));case ResultTypeString :return MakeStringResult (_ce .String (_bdff .ValueString ,_cfcb ));case ResultTypeEmpty :return MakeStringResult (_ce .Number (0,_cfcb ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// IsDBCS returns false for the invalid reference context.
func (_cgbc *ivr )IsDBCS ()bool {return false };var _dddb =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_cdffc :=_dbcf (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _cdffc .Type !=ResultTypeEmpty {return _cdffc ;};_gfbf :=_agfac (args [1:]);_bdcaa :=-_gg .MaxFloat64 ;_gdbd :=_gaebb (args [0]);for _ ,_fcgc :=range _gfbf {_gdbcf :=_gdbd [_fcgc ._baeeb ][_fcgc ._aegc ].ValueNumber ;if _bdcaa < _gdbcf {_bdcaa =_gdbcf ;};};if _bdcaa ==-_gg .MaxFloat64 {_bdcaa =0;};return MakeNumberResult (float64 (_bdcaa ));};func init (){_gabca =_ec .New (_ec .NewSource (_efd .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_gfccd ("\u0041\u0053\u0049\u004e",_gg .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_gfccd ("\u0041\u0053\u0049\u004e",_gg .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_gfccd ("\u0041\u0053\u0049\u004e",_gg .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_gfccd ("\u0041\u0043\u004f\u0054",func (_bbfge float64 )float64 {return _gg .Pi /2-_gg .Atan (_bbfge )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_gfccd ("\u0041\u0043\u004fT\u0048",func (_bdae float64 )float64 {return _gg .Atanh (1/_bdae )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_gfccd ("\u0041\u0053\u0049\u004e",_gg .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_gfccd ("\u0041\u0053\u0049N\u0048",_gg .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_gfccd ("\u0041\u0054\u0041\u004e",_gg .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_gfccd ("\u0041\u0054\u0041N\u0048",_gg .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_gfccd ("\u0043\u004f\u0053",_gg .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_gfccd ("\u0043\u004f\u0053\u0048",_gg .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gabd ("\u0043\u004f\u0054",_gg .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gabd ("\u0043\u004f\u0054\u0048",_gg .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gabd ("\u0043\u0053\u0043",_gg .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gabd ("\u0043\u0053\u0043",_gg .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_gfccd ("\u0045\u0058\u0050",_gg .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_gfccd ("\u004c\u004e",_gg .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_gfccd ("\u004c\u004f\u00471\u0030",_gg .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gabd ("\u0053\u0045\u0043",_gg .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gabd ("\u0053\u0045\u0043\u0048",_gg .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_gfccd ("\u0053\u0049\u004e",_gg .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_gfccd ("\u0053\u0049\u004e\u0048",_gg .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_gfccd ("\u0053\u0051\u0052\u0054",_gg .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_gfccd ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_bdeg float64 )float64 {return _gg .Sqrt (_bdeg *_gg .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_gfccd ("\u0054\u0041\u004e",_gg .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_gfccd ("\u0054\u0041\u004e\u0048",_gg .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_adcff :=args [0].AsNumber ();if _adcff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bbbf :=10.0;if len (args )> 1{_deefd :=args [1].AsNumber ();if _deefd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_bbbf =args [1].ValueNumber ;};if _adcff .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _bbbf ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_gg .Log (_adcff .ValueNumber )/_gg .Log (_bbbf ));};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agae :=args [0].Type ;for _ ,_edgda :=range args {if _edgda .Type !=_agae {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _agae {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_edef :=len (args [0].ListValues ());_caed :=make ([]float64 ,_edef );for _caecg :=range _caed {_caed [_caecg ]=1.0;};for _ ,_fedbb :=range args {if len (_fedbb .ListValues ())!=_edef {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _dcbbf ,_fcaeb :=range _fedbb .ListValues (){_fcaeb =_fcaeb .AsNumber ();if _fcaeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_caed [_dcbbf ]=_caed [_dcbbf ]*_fcaeb .ValueNumber ;};};_gfad :=0.0;for _ ,_fbfae :=range _caed {_gfad +=_fbfae ;};return MakeNumberResult (_gfad );};return MakeNumberResult (1.0);};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cdbff :=args [0];if _cdbff .Type ==ResultTypeError ||_cdbff .Type ==ResultTypeString {return _cdbff ;};return _agg ;};const _dcae =57358;

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bcd :=_efd .Now ();_ ,_cbe :=_bcd .Zone ();_ffb :=_dgda (_bccg ,_bcd .Unix ()+int64 (_cbe ))+1;return MakeNumberResult (_ffb );};type tokenType int ;

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fcg :=args [0].ValueNumber ;if _fcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_agaa ,_acba :=_cged (args [1],args [2],"\u0058\u004e\u0050\u0056");if _acba .Type ==ResultTypeError {return _acba ;};_gcdfd :=_agaa ._cea ;_fefe :=_agaa ._dcec ;_cbfe :=0.0;_ccggf :=_fefe [0];for _ecca ,_fdac :=range _gcdfd {_cbfe +=_fdac /_gg .Pow (1+_fcg ,(_fefe [_ecca ]-_ccggf )/365);};return MakeNumberResult (_cbfe );};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func _cbbd (_ecfb []Result ,_cedce countMode )float64 {_bafbc :=0.0;for _ ,_efaeeg :=range _ecfb {switch _efaeeg .Type {case ResultTypeNumber :if _cedce ==_gdef ||(_cedce ==_gbba &&!_efaeeg .IsBoolean ){_bafbc ++;};case ResultTypeList ,ResultTypeArray :_bafbc +=_cbbd (_efaeeg .ListValues (),_cedce );case ResultTypeString :if _cedce ==_gdef {_bafbc ++;};case ResultTypeEmpty :if _cedce ==_egbfd {_bafbc ++;};};};return _bafbc ;};func _abc (_aab ,_fae ,_dfce int )int {if _aab > _fae {return 0;};if _adbe (_dfce ){return (_fae -_aab +1)*360;};_deg :=0;for _gbb :=_aab ;_gbb <=_fae ;_gbb ++{_cafe :=365;if _fecea (_gbb ){_cafe =366;};_deg +=_cafe ;};return _deg ;};var _dfagf =[...]string {};

// Eval evaluates a range returning a list of results or an error.
func (_gecbe Range )Eval (ctx Context ,ev Evaluator )Result {_feeec :=_gecbe ._addag .Reference (ctx ,ev );_edcce :=_gecbe ._bdab .Reference (ctx ,ev );_fbdf :=_cggdf (_feeec ,_edcce );if _feeec .Type ==ReferenceTypeCell &&_edcce .Type ==ReferenceTypeCell {if _bfad ,_fcdbc :=ev .GetFromCache (_fbdf );_fcdbc {return _bfad ;}else {_fcfea :=_adca (ctx ,ev ,_feeec .Value ,_edcce .Value );ev .SetCache (_fbdf ,_fcfea );return _fcfea ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fbdf );};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_cfab ,_acbe :=_aebb (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _acbe .Type ==ResultTypeError {return _acbe ;};_gee :=_cfab ._ggfc ;_beec :=_cfab ._ffbf ;_ccb ,_acbe :=_dddc (_cfab ._aeagd ,_cfab ._gdfg ,_gee ,_beec );if _acbe .Type ==ResultTypeError {return _acbe ;};return MakeNumberResult (_ccb );};

// Reference returns a string reference value to a named range.
func (_bebgg NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_bebgg ._baff };};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_daedc :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_daedc *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_ccda :=_gaebb (args [1]);for _ ,_gbfcg :=range _ccda {for _ ,_adgc :=range _gbfcg {if _adgc .Type !=ResultTypeNumber ||_adgc .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_daedc *=1.0+_adgc .ValueNumber ;};};return MakeNumberResult (_daedc );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};const _cgg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Error is called in the case of parsing error and saves an error to a plex.
func (_fefd *plex )Error (s string ){_ece .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_fefd ._adabg =s ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_cgfb :name ,_deebc :args };};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_fea :=&defEval {};_fea .evCache =_cce ();return _fea };func _ab (_bf BinOpType ,_be ,_gcc [][]Result )Result {_efe :=[][]Result {};for _ac :=range _be {_ag :=_ffd (_bf ,_be [_ac ],_gcc [_ac ]);if _ag .Type ==ResultTypeError {return _ag ;};_efe =append (_efe ,_ag .ValueList );};return MakeArrayResult (_efe );};const _bddf =57356;func _adgdg (_dgefb Reference ,_daga Context )bool {return _daga .Sheet (_dgefb .Value )==InvalidReferenceContext ;};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cece :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cda :=args [2].ValueNumber +1;if _cda ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bgd :=_gaebb (args [0]);_cab :=float64 (len (_bgd ));_accb ,_aee :=0.0,0.0;_gbaa ,_dgbeb :=1.0,1.0;_cegab ,_aeaf :=false ,false ;for _ ,_fbed :=range _bgd {for _ ,_dcg :=range _fbed {if _dcg .Type ==ResultTypeNumber &&!_dcg .IsBoolean {_gcef :=_dcg .ValueNumber ;if _gcef ==0{continue ;}else {if _gcef > 0{_cegab =true ;_aee +=_dcg .ValueNumber *_dgbeb ;}else {_aeaf =true ;_accb +=_dcg .ValueNumber *_gbaa ;};_gbaa /=_cece ;_dgbeb /=_cda ;};};};};if !_cegab ||!_aeaf {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gdfa :=-_aee /_accb ;_gdfa *=_gg .Pow (_cda ,_cab -1);_gdfa =_gg .Pow (_gdfa ,1/(_cab -1));return MakeNumberResult (_gdfa -1);};func (_caebb ReferenceType )String ()string {if _caebb >=ReferenceType (len (_defdb )-1){return _c .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_caebb );};return _cdfcb [_defdb [_caebb ]:_defdb [_caebb +1]];};const (_gbba countMode =iota ;_gdef ;_egbfd ;);

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_edgc ,_eca :=_ffda (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _eca .Type ==ResultTypeError {return _eca ;};_bfa :=_edgc ._gbbb ;_dgde :=_edgc ._aecg ;_aacc :=_edgc ._aaag ;_cgbb :=_edgc ._eabb ;_gaad :=_edgc ._aebbf ;_ffeb :=_edgc ._bfca ;_cgcg :=_cccb (_bfa ,_dgde ,_aacc ,0,_ffeb );_dce :=0.0;if _cgbb ==1{if _ffeb ==0{_dce =-_aacc ;_cgbb ++;};};for _gbce :=_cgbb ;_gbce <=_gaad ;_gbce ++{if _ffeb ==1{_dce +=_dgcc (_bfa ,_gbce -2,_cgcg ,_aacc ,1)-_cgcg ;}else {_dce +=_dgcc (_bfa ,_gbce -1,_cgcg ,_aacc ,0);};};_dce *=_bfa ;return MakeNumberResult (_dce );};func (_egcg *noCache )SetCache (key string ,value Result ){};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edeba :=args [0].AsNumber ();if _edeba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eabef :=args [1].AsNumber ();if _eabef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_daaca :=int (_eabef .ValueNumber );if _daaca < 0||_daaca > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_gfgd :=0;if len (args )> 2{_bfff :=args [2].AsNumber ();if _bfff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gfgd =int (_bfff .ValueNumber );};_ggade :=_g .FormatInt (int64 (_edeba .ValueNumber ),_daaca );if len (_ggade )< _gfgd {_ggade =_ca .Repeat ("\u0030",_gfgd -len (_ggade ))+_ggade ;};return MakeStringResult (_ggade );};func (_fccc *Lexer )lex (_dbeca _a .Reader ){_bccgf ,_dggf ,_ddcca :=0,0,0;_gbcae :=-1;_ccab ,_ffdfc ,_ddca :=0,0,0;_ =_ddca ;_fegde :=1;_ =_fegde ;_cdfc :=make ([]byte ,4096);_efdcc :=false ;for !_efdcc {_aeda :=0;if _ccab > 0{_aeda =_dggf -_ccab ;};_dggf =0;_bcee ,_bdagb :=_dbeca .Read (_cdfc [_aeda :]);if _bcee ==0||_bdagb !=nil {_efdcc =true ;};_ddcca =_bcee +_aeda ;if _ddcca < len (_cdfc ){_gbcae =_ddcca ;};{_bccgf =_fdcdc ;_ccab =0;_ffdfc =0;_ddca =0;};{var _eedb int ;var _aeff uint ;if _dggf ==_ddcca {goto _ggaa ;};if _bccgf ==0{goto _aaegd ;};_gbgag :_eedb =int (_bdbdc [_bccgf ]);_aeff =uint (_fbcf [_eedb ]);_eedb ++;for ;_aeff > 0;_aeff --{_eedb ++;switch _fbcf [_eedb -1]{case 2:_ccab =_dggf ;};};switch _bccgf {case 30:switch _cdfc [_dggf ]{case 34:goto _cfdbe ;case 35:goto _cdge ;case 36:goto _gdfaf ;case 38:goto _dceb ;case 39:goto _accfa ;case 40:goto _gebee ;case 41:goto _eedcc ;case 42:goto _aeebg ;case 43:goto _ffcdc ;case 44:goto _cgacg ;case 45:goto _babaa ;case 47:goto _eagecd ;case 58:goto _cbcb ;case 59:goto _dccbf ;case 60:goto _dbeee ;case 61:goto _gcedb ;case 62:goto _beadg ;case 63:goto _geff ;case 70:goto _eadfc ;case 84:goto _fdafa ;case 92:goto _cbee ;case 94:goto _gdeda ;case 95:goto _aedac ;case 123:goto _egee ;case 125:goto _bcgd ;};switch {case _cdfc [_dggf ]< 65:switch {case _cdfc [_dggf ]> 37:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _gdad ;};case _cdfc [_dggf ]>=33:goto _geff ;};case _cdfc [_dggf ]> 90:switch {case _cdfc [_dggf ]> 93:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _agaad ;};case _cdfc [_dggf ]>=91:goto _geff ;};default:goto _gdae ;};goto _aebbg ;case 1:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _dgdea ;case 123:goto _dgdea ;case 125:goto _dgdea ;};switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _dgdea ;};case _cdfc [_dggf ]> 45:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _dgdea ;};case _cdfc [_dggf ]>=58:goto _dgdea ;};default:goto _dgdea ;};goto _aebbg ;case 0:goto _aaegd ;case 2:if _cdfc [_dggf ]==34{goto _aeadb ;};goto _cfdbe ;case 31:if _cdfc [_dggf ]==34{goto _cfdbe ;};goto _gffa ;case 3:switch _cdfc [_dggf ]{case 78:goto _baae ;case 82:goto _bdbdb ;};goto _geff ;case 4:switch _cdfc [_dggf ]{case 47:goto _babac ;case 85:goto _fdece ;};goto _geff ;case 5:if _cdfc [_dggf ]==65{goto _fdcc ;};goto _geff ;case 6:switch _cdfc [_dggf ]{case 76:goto _bgffe ;case 77:goto _eecde ;};goto _geff ;case 7:if _cdfc [_dggf ]==76{goto _eecde ;};goto _geff ;case 8:if _cdfc [_dggf ]==33{goto _fdcc ;};goto _geff ;case 9:if _cdfc [_dggf ]==69{goto _fcccd ;};goto _geff ;case 10:if _cdfc [_dggf ]==70{goto _fbebb ;};goto _geff ;case 11:if _cdfc [_dggf ]==33{goto _eccgc ;};goto _geff ;case 12:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _geff ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=45{goto _geff ;};case _cdfc [_dggf ]>=34:goto _geff ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]< 65:if 58<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=63{goto _geff ;};case _cdfc [_dggf ]> 90:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _geff ;};default:goto _fbbdb ;};default:goto _fcba ;};goto _aebbg ;case 13:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _geff ;case 58:goto _cddgg ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=45{goto _geff ;};case _cdfc [_dggf ]>=34:goto _geff ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _geff ;};case _cdfc [_dggf ]>=59:goto _geff ;};default:goto _fcba ;};goto _aebbg ;case 14:if _cdfc [_dggf ]==36{goto _feaba ;};if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _bagee ;};goto _dgdea ;case 15:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _bagee ;};goto _dgdea ;case 32:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _bagee ;};goto _gefgd ;case 16:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 47:goto _geff ;case 58:goto _bgda ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 45:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _efabb ;};case _cdfc [_dggf ]>=34:goto _geff ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]> 90:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _geff ;};case _cdfc [_dggf ]>=65:goto _fbbdb ;};default:goto _geff ;};goto _aebbg ;case 17:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _dgdea ;case 123:goto _dgdea ;case 125:goto _dgdea ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=45{goto _dgdea ;};case _cdfc [_dggf ]>=34:goto _dgdea ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _dgdea ;};case _cdfc [_dggf ]>=58:goto _dgdea ;};default:goto _efabb ;};goto _aebbg ;case 33:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _bfcb ;case 123:goto _bfcb ;case 125:goto _bfcb ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=45{goto _bfcb ;};case _cdfc [_dggf ]>=34:goto _bfcb ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _bfcb ;};case _cdfc [_dggf ]>=58:goto _bfcb ;};default:goto _efabb ;};goto _aebbg ;case 18:if _cdfc [_dggf ]==36{goto _aeac ;};if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _egfcd ;};goto _dgdea ;case 19:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _egfcd ;};goto _dgdea ;case 34:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _egfcd ;};goto _abgc ;case 20:switch _cdfc [_dggf ]{case 39:goto _geff ;case 42:goto _geff ;case 47:goto _geff ;case 58:goto _geff ;case 63:goto _geff ;};if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=93{goto _geff ;};goto _aeca ;case 21:switch _cdfc [_dggf ]{case 39:goto _babbd ;case 42:goto _geff ;case 47:goto _geff ;case 58:goto _geff ;case 63:goto _geff ;};if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=93{goto _geff ;};goto _aeca ;case 22:if _cdfc [_dggf ]==33{goto _ccfbb ;};goto _geff ;case 35:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _abfc ;case 58:goto _cddgg ;case 101:goto _gebgb ;case 123:goto _bfbb ;case 125:goto _bfbb ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=47{goto _bfbb ;};case _cdfc [_dggf ]>=34:goto _bfbb ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _bfbb ;};case _cdfc [_dggf ]>=59:goto _bfbb ;};default:goto _gdad ;};goto _aebbg ;case 36:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _bfbb ;case 101:goto _gebgb ;case 123:goto _bfbb ;case 125:goto _bfbb ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=45{goto _bfbb ;};case _cdfc [_dggf ]>=34:goto _bfbb ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _bfbb ;};case _cdfc [_dggf ]>=58:goto _bfbb ;};default:goto _abfc ;};goto _aebbg ;case 23:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _efade ;case 123:goto _efade ;case 125:goto _efade ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=45{goto _efade ;};case _cdfc [_dggf ]>=34:goto _efade ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _efade ;};case _cdfc [_dggf ]>=58:goto _efade ;};default:goto _aaccgf ;};goto _aebbg ;case 37:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 47:goto _bfbb ;case 123:goto _bfbb ;case 125:goto _bfbb ;};switch {case _cdfc [_dggf ]< 48:switch {case _cdfc [_dggf ]> 35:if 37<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=45{goto _bfbb ;};case _cdfc [_dggf ]>=34:goto _bfbb ;};case _cdfc [_dggf ]> 57:switch {case _cdfc [_dggf ]> 63:if 91<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=94{goto _bfbb ;};case _cdfc [_dggf ]>=58:goto _bfbb ;};default:goto _aaccgf ;};goto _aebbg ;case 38:switch _cdfc [_dggf ]{case 61:goto _fcfd ;case 62:goto _aeece ;};goto _acdfe ;case 39:if _cdfc [_dggf ]==61{goto _bbcg ;};goto _ebfea ;case 24:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _geff ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _geff ;};default:goto _geff ;};goto _aebbg ;case 40:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 40:goto _eede ;case 46:goto _ebged ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ebged ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ebged ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 41:switch _cdfc [_dggf ]{case 46:goto _eded ;case 92:goto _eded ;case 95:goto _eded ;};switch {case _cdfc [_dggf ]< 65:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _eded ;};case _cdfc [_dggf ]> 90:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _eded ;};default:goto _eded ;};goto _defa ;case 42:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 43:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 40:goto _eede ;case 46:goto _ebged ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _bfcb ;case 125:goto _bfcb ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _bfcb ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};default:goto _bfcb ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ebged ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _bfcb ;};default:goto _bfcb ;};goto _aebbg ;case 44:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _dgdea ;case 125:goto _dgdea ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _dgdea ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _dgdea ;};default:goto _dgdea ;};goto _aebbg ;case 25:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 65:goto _bbde ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _geff ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 66<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _geff ;};default:goto _geff ;};goto _aebbg ;case 45:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 76:goto _edgca ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 46:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 83:goto _gcea ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 47:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 69:goto _adgce ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 26:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 79:goto _dbddc ;case 82:goto _geecad ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _geff ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _geff ;};default:goto _geff ;};goto _aebbg ;case 48:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 68:goto _fggdd ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 49:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 79:goto _aabcd ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 50:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 36:goto _eeffg ;case 40:goto _eede ;case 46:goto _ebged ;case 58:goto _bgda ;case 85:goto _gcea ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 59:switch {case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _dgdeaf ;};case _cdfc [_dggf ]>=34:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _gegea ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 27:switch _cdfc [_dggf ]{case 46:goto _eded ;case 92:goto _eded ;case 95:goto _eded ;};switch {case _cdfc [_dggf ]< 65:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _eded ;};case _cdfc [_dggf ]> 90:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _eded ;};default:goto _eded ;};goto _geff ;case 28:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _ddfgf ;case 120:goto _ffff ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _geff ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _geff ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _geff ;};default:goto _geff ;};goto _aebbg ;case 51:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _ddfgf ;case 108:goto _bbge ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 52:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _ddfgf ;case 102:goto _cdbee ;case 110:goto _bcbf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 53:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _ddfgf ;case 110:goto _cbcdg ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 54:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _afgcc ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 55:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _cffg ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _cffg ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 56:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 40:goto _ddaf ;case 46:goto _cffg ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _cffg ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _cffg ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 57:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _ddfgf ;case 109:goto _afbcb ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 58:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _bdgfdd ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _defa ;case 125:goto _defa ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _defa ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _defa ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _defa ;};default:goto _defa ;};goto _aebbg ;case 59:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _bgcb ;case 123:goto _dgdea ;case 125:goto _dgdea ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _dgdea ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _dgdea ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _bgcb ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _dgdea ;};default:goto _dgdea ;};goto _aebbg ;case 29:switch _cdfc [_dggf ]{case 33:goto _aadc ;case 46:goto _ddfgf ;case 92:goto _eded ;case 95:goto _ddfgf ;case 123:goto _geff ;case 125:goto _geff ;};switch {case _cdfc [_dggf ]< 58:switch {case _cdfc [_dggf ]< 37:if 34<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=35{goto _geff ;};case _cdfc [_dggf ]> 47:if 48<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=57{goto _ddfgf ;};default:goto _geff ;};case _cdfc [_dggf ]> 63:switch {case _cdfc [_dggf ]< 91:if 65<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=90{goto _ddfgf ;};case _cdfc [_dggf ]> 94:if 97<=_cdfc [_dggf ]&&_cdfc [_dggf ]<=122{goto _ddfgf ;};default:goto _geff ;};default:goto _geff ;};goto _aebbg ;};_geff :_bccgf =0;goto _eaed ;_aebbg :_bccgf =1;goto _eaed ;_cfdbe :_bccgf =2;goto _eaed ;_cdge :_bccgf =3;goto _eaed ;_baae :_bccgf =4;goto _eaed ;_babac :_bccgf =5;goto _eaed ;_fdece :_bccgf =6;goto _eaed ;_bgffe :_bccgf =7;goto _eaed ;_eecde :_bccgf =8;goto _eaed ;_bdbdb :_bccgf =9;goto _eaed ;_fcccd :_bccgf =10;goto _eaed ;_fbebb :_bccgf =11;goto _eaed ;_gdfaf :_bccgf =12;goto _eaed ;_fcba :_bccgf =13;goto _eaed ;_cddgg :_bccgf =14;goto _eaed ;_feaba :_bccgf =15;goto _eaed ;_fbbdb :_bccgf =16;goto _eaed ;_eeffg :_bccgf =17;goto _eaed ;_bgda :_bccgf =18;goto _eaed ;_aeac :_bccgf =19;goto _eaed ;_accfa :_bccgf =20;goto _eaed ;_aeca :_bccgf =21;goto _eaed ;_babbd :_bccgf =22;goto _eaed ;_gebgb :_bccgf =23;goto _eaed ;_gdae :_bccgf =24;goto _eaed ;_eadfc :_bccgf =25;goto _eaed ;_fdafa :_bccgf =26;goto _eaed ;_cbee :_bccgf =27;goto _eaed ;_aedac :_bccgf =28;goto _eaed ;_agaad :_bccgf =29;goto _eaed ;_dgdea :_bccgf =30;goto _ebcde ;_aadc :_bccgf =30;goto _gebb ;_fdcc :_bccgf =30;goto _bffd ;_eccgc :_bccgf =30;goto _fdfe ;_ccfbb :_bccgf =30;goto _bccfb ;_efade :_bccgf =30;goto _ffacf ;_eede :_bccgf =30;goto _deaf ;_dceb :_bccgf =30;goto _adecbc ;_gebee :_bccgf =30;goto _effb ;_eedcc :_bccgf =30;goto _effccd ;_aeebg :_bccgf =30;goto _abab ;_ffcdc :_bccgf =30;goto _aedg ;_cgacg :_bccgf =30;goto _adga ;_babaa :_bccgf =30;goto _ecae ;_eagecd :_bccgf =30;goto _aafb ;_cbcb :_bccgf =30;goto _gffe ;_dccbf :_bccgf =30;goto _efeeg ;_gcedb :_bccgf =30;goto _gacf ;_gdeda :_bccgf =30;goto _cdda ;_egee :_bccgf =30;goto _dedge ;_bcgd :_bccgf =30;goto _gbefa ;_gffa :_bccgf =30;goto _gcaaf ;_gefgd :_bccgf =30;goto _abbf ;_bfcb :_bccgf =30;goto _efecda ;_abgc :_bccgf =30;goto _feade ;_bfbb :_bccgf =30;goto _egdae ;_acdfe :_bccgf =30;goto _cdfe ;_fcfd :_bccgf =30;goto _efbcb ;_aeece :_bccgf =30;goto _ffcg ;_ebfea :_bccgf =30;goto _bfeb ;_bbcg :_bccgf =30;goto _cdadf ;_defa :_bccgf =30;goto _bbdc ;_ddaf :_bccgf =30;goto _eggdf ;_aeadb :_bccgf =31;goto _cceaa ;_bagee :_bccgf =32;goto _eaed ;_efabb :_bccgf =33;goto _eacba ;_egfcd :_bccgf =34;goto _eaed ;_gdad :_bccgf =35;goto _dcege ;_abfc :_bccgf =36;goto _dcege ;_aaccgf :_bccgf =37;goto _dcege ;_dbeee :_bccgf =38;goto _eaed ;_beadg :_bccgf =39;goto _eaed ;_ebged :_bccgf =40;goto _fdacd ;_eded :_bccgf =41;goto _eaed ;_ddfgf :_bccgf =42;goto _fdacd ;_dgdeaf :_bccgf =43;goto _eacba ;_gegea :_bccgf =44;goto _fdacd ;_adgce :_bccgf =44;goto _dfebf ;_aabcd :_bccgf =44;goto _acfd ;_bbde :_bccgf =45;goto _fdacd ;_edgca :_bccgf =46;goto _fdacd ;_gcea :_bccgf =47;goto _fdacd ;_dbddc :_bccgf =48;goto _fdacd ;_fggdd :_bccgf =49;goto _fdacd ;_geecad :_bccgf =50;goto _fdacd ;_ffff :_bccgf =51;goto _fdacd ;_bbge :_bccgf =52;goto _fdacd ;_cdbee :_bccgf =53;goto _fdacd ;_cbcdg :_bccgf =54;goto _fdacd ;_afgcc :_bccgf =55;goto _fdacd ;_cffg :_bccgf =56;goto _fdacd ;_bcbf :_bccgf =57;goto _fdacd ;_afbcb :_bccgf =58;goto _fdacd ;_bdgfdd :_bccgf =59;goto _fdacd ;_bgcb :_bccgf =59;goto _cabe ;_bffd :_eedb =3;goto _fffcb ;_fdfe :_eedb =5;goto _fffcb ;_gebb :_eedb =7;goto _fffcb ;_bccfb :_eedb =9;goto _fffcb ;_deaf :_eedb =11;goto _fffcb ;_eggdf :_eedb =13;goto _fffcb ;_adecbc :_eedb =15;goto _fffcb ;_dedge :_eedb =17;goto _fffcb ;_gbefa :_eedb =19;goto _fffcb ;_effb :_eedb =21;goto _fffcb ;_effccd :_eedb =23;goto _fffcb ;_aedg :_eedb =25;goto _fffcb ;_ecae :_eedb =27;goto _fffcb ;_abab :_eedb =29;goto _fffcb ;_aafb :_eedb =31;goto _fffcb ;_cdda :_eedb =33;goto _fffcb ;_gacf :_eedb =35;goto _fffcb ;_efbcb :_eedb =37;goto _fffcb ;_cdadf :_eedb =39;goto _fffcb ;_ffcg :_eedb =41;goto _fffcb ;_gffe :_eedb =43;goto _fffcb ;_efeeg :_eedb =45;goto _fffcb ;_adga :_eedb =47;goto _fffcb ;_egdae :_eedb =49;goto _fffcb ;_efecda :_eedb =51;goto _fffcb ;_abbf :_eedb =53;goto _fffcb ;_feade :_eedb =55;goto _fffcb ;_bbdc :_eedb =57;goto _fffcb ;_gcaaf :_eedb =59;goto _fffcb ;_cdfe :_eedb =61;goto _fffcb ;_bfeb :_eedb =63;goto _fffcb ;_ffacf :_eedb =65;goto _fffcb ;_ebcde :_eedb =67;goto _fffcb ;_dfebf :_eedb =72;goto _fffcb ;_dcege :_eedb =75;goto _fffcb ;_eacba :_eedb =78;goto _fffcb ;_acfd :_eedb =81;goto _fffcb ;_cabe :_eedb =84;goto _fffcb ;_fdacd :_eedb =87;goto _fffcb ;_cceaa :_eedb =90;goto _fffcb ;_fffcb :_aeff =uint (_fbcf [_eedb ]);_eedb ++;for ;_aeff > 0;_aeff --{_eedb ++;switch _fbcf [_eedb -1]{case 3:_ffdfc =_dggf +1;case 4:_ddca =1;case 5:_ddca =2;case 6:_ddca =3;case 7:_ddca =4;case 8:_ddca =11;case 9:_ddca =14;case 10:_ddca =15;case 11:_ffdfc =_dggf +1;{_fccc .emit (_gadc ,_cdfc [_ccab :_ffdfc ]);};case 12:_ffdfc =_dggf +1;{_fccc .emit (_bddf ,_cdfc [_ccab :_ffdfc ]);};case 13:_ffdfc =_dggf +1;{_fccc .emit (_bcdbd ,_cdfc [_ccab :_ffdfc -1]);};case 14:_ffdfc =_dggf +1;{_fccc .emit (_bcdbd ,_cdfc [_ccab +1:_ffdfc -2]);};case 15:_ffdfc =_dggf +1;{_fccc .emit (_gcgea ,_cdfc [_ccab :_ffdfc -1]);};case 16:_ffdfc =_dggf +1;{_fccc .emit (_gcgea ,_cdfc [_ccab :_ffdfc -1]);};case 17:_ffdfc =_dggf +1;{_fccc .emit (_caccc ,_cdfc [_ccab :_ffdfc ]);};case 18:_ffdfc =_dggf +1;{_fccc .emit (_acfa ,_cdfc [_ccab :_ffdfc ]);};case 19:_ffdfc =_dggf +1;{_fccc .emit (_debdf ,_cdfc [_ccab :_ffdfc ]);};case 20:_ffdfc =_dggf +1;{_fccc .emit (_fgfbe ,_cdfc [_ccab :_ffdfc ]);};case 21:_ffdfc =_dggf +1;{_fccc .emit (_bccge ,_cdfc [_ccab :_ffdfc ]);};case 22:_ffdfc =_dggf +1;{_fccc .emit (_gbad ,_cdfc [_ccab :_ffdfc ]);};case 23:_ffdfc =_dggf +1;{_fccc .emit (_abfa ,_cdfc [_ccab :_ffdfc ]);};case 24:_ffdfc =_dggf +1;{_fccc .emit (_gded ,_cdfc [_ccab :_ffdfc ]);};case 25:_ffdfc =_dggf +1;{_fccc .emit (_fcaf ,_cdfc [_ccab :_ffdfc ]);};case 26:_ffdfc =_dggf +1;{_fccc .emit (_cegag ,_cdfc [_ccab :_ffdfc ]);};case 27:_ffdfc =_dggf +1;{_fccc .emit (_bagg ,_cdfc [_ccab :_ffdfc ]);};case 28:_ffdfc =_dggf +1;{_fccc .emit (_gbecd ,_cdfc [_ccab :_ffdfc ]);};case 29:_ffdfc =_dggf +1;{_fccc .emit (_eddf ,_cdfc [_ccab :_ffdfc ]);};case 30:_ffdfc =_dggf +1;{_fccc .emit (_baede ,_cdfc [_ccab :_ffdfc ]);};case 31:_ffdfc =_dggf +1;{_fccc .emit (_dace ,_cdfc [_ccab :_ffdfc ]);};case 32:_ffdfc =_dggf +1;{_fccc .emit (_eabde ,_cdfc [_ccab :_ffdfc ]);};case 33:_ffdfc =_dggf +1;{_fccc .emit (_cafa ,_cdfc [_ccab :_ffdfc ]);};case 34:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_bcea ,_cdfc [_ccab :_ffdfc ]);};case 35:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_dcae ,_cdfc [_ccab :_ffdfc ]);};case 36:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_agcgd ,_cdfc [_ccab :_ffdfc ]);};case 37:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_decf ,_cdfc [_ccab :_ffdfc ]);};case 38:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_abag ,_cdfc [_ccab :_ffdfc ]);};case 39:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_afda ,_cdfc [_ccab +1:_ffdfc -1]);};case 40:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_ddfc ,_cdfc [_ccab :_ffdfc ]);};case 41:_ffdfc =_dggf ;_dggf --;{_fccc .emit (_fgdgb ,_cdfc [_ccab :_ffdfc ]);};case 42:_dggf =(_ffdfc )-1;{_fccc .emit (_bcea ,_cdfc [_ccab :_ffdfc ]);};case 43:switch _ddca {case 0:{_bccgf =0;goto _eaed ;};case 1:{_dggf =(_ffdfc )-1;_fccc .emit (_cfcad ,_cdfc [_ccab :_ffdfc ]);};case 2:{_dggf =(_ffdfc )-1;_fccc .emit (_bcea ,_cdfc [_ccab :_ffdfc ]);};case 3:{_dggf =(_ffdfc )-1;_fccc .emit (_dcae ,_cdfc [_ccab :_ffdfc ]);};case 4:{_dggf =(_ffdfc )-1;_fccc .emit (_affgc ,_cdfc [_ccab :_ffdfc ]);};case 11:{_dggf =(_ffdfc )-1;_fccc .emit (_acgea ,_cdfc [_ccab :_ffdfc ]);};case 14:{_dggf =(_ffdfc )-1;_fccc .emit (_abag ,_cdfc [_ccab :_ffdfc ]);};case 15:{_dggf =(_ffdfc )-1;_fccc .emit (_afda ,_cdfc [_ccab +1:_ffdfc -1]);};};};};goto _eaed ;_eaed :_eedb =int (_eebb [_bccgf ]);_aeff =uint (_fbcf [_eedb ]);_eedb ++;for ;_aeff > 0;_aeff --{_eedb ++;switch _fbcf [_eedb -1]{case 0:_ccab =0;case 1:_ddca =0;};};if _bccgf ==0{goto _aaegd ;};if _dggf ++;_dggf !=_ddcca {goto _gbgag ;};_ggaa :{};if _dggf ==_gbcae {switch _bccgf {case 1:goto _dgdea ;case 2:goto _dgdea ;case 31:goto _gffa ;case 14:goto _dgdea ;case 15:goto _dgdea ;case 32:goto _gefgd ;case 17:goto _dgdea ;case 33:goto _bfcb ;case 18:goto _dgdea ;case 19:goto _dgdea ;case 34:goto _abgc ;case 35:goto _bfbb ;case 36:goto _bfbb ;case 23:goto _efade ;case 37:goto _bfbb ;case 38:goto _acdfe ;case 39:goto _ebfea ;case 40:goto _defa ;case 41:goto _defa ;case 42:goto _defa ;case 43:goto _bfcb ;case 44:goto _dgdea ;case 45:goto _defa ;case 46:goto _defa ;case 47:goto _defa ;case 48:goto _defa ;case 49:goto _defa ;case 50:goto _defa ;case 51:goto _defa ;case 52:goto _defa ;case 53:goto _defa ;case 54:goto _defa ;case 55:goto _defa ;case 56:goto _defa ;case 57:goto _defa ;case 58:goto _defa ;case 59:goto _dgdea ;};};_aaegd :{};};if _ccab > 0{copy (_cdfc [0:],_cdfc [_ccab :]);};};_ =_gbcae ;if _bccgf ==_befc {_fccc .emit (_ebbgc ,nil );};close (_fccc ._fegd );};type Reference struct{Type ReferenceType ;Value string ;};var _aafbg =map[string ]FunctionComplex {};func _edebf (_cfdf ,_bbce ,_cceg ,_cbca ,_eae ,_deee float64 ,_cgcc int )(float64 ,Result ){_faaeb :=int (_deee );_cgcda :=_gbbf (_cfdf ,_bbce ,_faaeb ,_cgcc );_bbgfg :=_egfa (_cfdf ,_bbce ,_faaeb ,_cgcc )/_cgcda ;_bbcab ,_ebeg :=_dddc (_cfdf ,_bbce ,_faaeb ,_cgcc );if _ebeg .Type ==ResultTypeError {return 0,_ebeg ;};_aeec :=_beca (_cfdf ,_bbce ,_faaeb ,_cgcc );_febe :=_eae /_gg .Pow (1+_cbca /_deee ,_bbcab -1+_bbgfg );_febe -=100*_cceg /_deee *_aeec /_cgcda ;_ecbc :=100*_cceg /_deee ;_aga :=1+_cbca /_deee ;for _cgba :=0.0;_cgba < _bbcab ;_cgba ++{_febe +=_ecbc /_gg .Pow (_aga ,_cgba +_bbgfg );};return _febe ,MakeEmptyResult ();};func _acff (_bccf string )*criteriaRegex {_dfbgg :=&criteriaRegex {};if _bccf ==""{return _dfbgg ;};if _gabgf :=_daabe .FindStringSubmatch (_bccf );len (_gabgf )> 1{_dfbgg ._abace =_faec ;_dfbgg ._efbbb =_gabgf [1];}else if _bcabc :=_fffc .FindStringSubmatch (_bccf );len (_bcabc )> 1{_dfbgg ._abace =_faec ;_dfbgg ._efbbb =_bcabc [1];}else if _ddgg :=_dfbg .FindStringSubmatch (_bccf );len (_ddgg )> 1{_dfbgg ._abace =_cegg ;_dfbgg ._efbbb =_ddgg [1];}else if _aadd :=_bfefg .FindStringSubmatch (_bccf );len (_aadd )> 1{_dfbgg ._abace =_dgaa ;_dfbgg ._efbbb =_aadd [1];}else if _ccbbc :=_feebg .FindStringSubmatch (_bccf );len (_ccbbc )> 1{_dfbgg ._abace =_bbag ;_dfbgg ._efbbb =_ccbbc [1];}else if _baed :=_fecf .FindStringSubmatch (_bccf );len (_baed )> 1{_dfbgg ._abace =_ccbgg ;_dfbgg ._efbbb =_baed [1];};return _dfbgg ;};type criteriaRegex struct{_abace byte ;_efbbb string ;};

// Update updates the FunctionCall references after removing a row/column.
func (_egag FunctionCall )Update (q *_ad .UpdateQuery )Expression {_ecdg :=[]Expression {};for _ ,_cgabg :=range _egag ._deebc {_aeeb :=_cgabg .Update (q );_ecdg =append (_ecdg ,_aeeb );};return FunctionCall {_cgfb :_egag ._cgfb ,_deebc :_ecdg };};

// String returns a string representation for Bool.
func (_bfd Bool )String ()string {if _bfd ._cd {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};func _cfdb (){_daabe =_fg .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_fffc =_fg .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_feebg =_fg .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_fecf =_fg .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_dfbg =_fg .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_bfefg =_fg .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func (_afag *ivr )SetOffset (col ,row uint32 ){};const _cfcad =57352;

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bbbg :=_efd .Now ();_ ,_aef :=_bbbg .Zone ();_egg :=_bcag +float64 (_bbbg .Unix ()+int64 (_aef ))/86400;return MakeNumberResult (_egg );};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ca .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_ccecd :v };};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbcae :=args [0];if _bbcae .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgbdg :=len (_bbcae .ValueArray );for _ ,_fdgg :=range _bbcae .ValueArray {if len (_fdgg )!=_dgbdg {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_bdba (_bbcae .ValueArray ));};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbffc :=false ;for _ ,_gdee :=range args {switch _gdee .Type {case ResultTypeList ,ResultTypeArray :_gdd :=Or (_gdee .ListValues ());if _gdd .Type ==ResultTypeError {return _gdd ;};if _gdd .ValueNumber !=0{_gbffc =true ;};case ResultTypeNumber :if _gdee .ValueNumber !=0{_gbffc =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _gdee ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_gbffc );};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bade :=args [0].ValueNumber ;if _bade <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agfa :=args [1].ValueNumber ;if _agfa <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_degf :=args [2].ValueNumber ;if _degf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_gg .Log10 (_degf )-_gg .Log10 (_agfa ))/_gg .Log10 (1+_bade ));};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_dbde SheetPrefixExpr )Update (q *_ad .UpdateQuery )Expression {return _dbde };

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};func _dbcf (_dggg []Result ,_dcfd bool ,_dggc string )Result {var _dafgf ,_edgcf string ;if _dcfd {_dafgf ="\u0074\u0068\u0072e\u0065";_edgcf ="\u006f\u0064\u0064";}else {_dafgf ="\u0074\u0077\u006f";_edgcf ="\u0065\u0076\u0065\u006e";};_ggdf :=len (_dggg );if (_dcfd &&_ggdf < 3)||(!_dcfd &&_ggdf < 2){return MakeErrorResult (_dggc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_dafgf +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_ggdf /2*2==_ggdf )==_dcfd {return MakeErrorResult (_dggc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_edgcf +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_fdcf :=-1;_bgbf :=-1;for _afgae :=0;_afgae < _ggdf ;_afgae +=2{_bdedg :=_dggg [_afgae ];if _bdedg .Type !=ResultTypeArray &&_bdedg .Type !=ResultTypeList {return MakeErrorResult (_dggc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_ebcd :=_gaebb (_bdedg );if _bgbf ==-1{_bgbf =len (_ebcd );_fdcf =len (_ebcd [0]);}else if len (_ebcd )!=_bgbf ||len (_ebcd [0])!=_fdcf {return MakeErrorResult (_dggc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _dcfd &&_afgae ==0{_afgae --;};};return _agg ;};type yySymType struct{_ffce int ;_dadad *node ;_dgbb Expression ;_ddac []Expression ;_ggddd [][]Expression ;};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_ebfg :=_dbcf (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _ebfg .Type !=ResultTypeEmpty {return _ebfg ;};_afcgc :=_agfac (args [1:]);_egcce :=_gg .MaxFloat64 ;_ffbc :=_gaebb (args [0]);for _ ,_cbagf :=range _afcgc {_dbfgc :=_ffbc [_cbagf ._baeeb ][_cbagf ._aegc ].ValueNumber ;if _egcce > _dbfgc {_egcce =_dbfgc ;};};if _egcce ==_gg .MaxFloat64 {_egcce =0;};return MakeNumberResult (float64 (_egcce ));};

// Eval evaluates and returns the result of an empty expression.
func (_afb EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};var _dffb string =string ([]byte {92});

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_dgcfa ,_deadb :=_eeec (args ,true );if _deadb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_dgcfa /_deadb );};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gfeg :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_bfae :=args [1].ValueNumber !=0;_ddgff :=_acdb (args [2:],[]string {},_bfae );return MakeStringResult (_ca .Join (_ddgff ,_gfeg ));};

// Update updates references in the Negate after removing a row/column.
func (_abggc Negate )Update (q *_ad .UpdateQuery )Expression {return Negate {_gebgbe :_abggc ._gebgbe .Update (q )};};func _eef (_gad BinOpType ,_dfd []Result ,_ede Result )Result {_cafb :=[]Result {};switch _ede .Type {case ResultTypeNumber :_cbc :=_ede .ValueNumber ;for _ba :=range _dfd {_de :=_dfd [_ba ].AsNumber ();if _de .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gad {case BinOpTypePlus :_cafb =append (_cafb ,MakeNumberResult (_de .ValueNumber +_cbc ));case BinOpTypeMinus :_cafb =append (_cafb ,MakeNumberResult (_de .ValueNumber -_cbc ));case BinOpTypeMult :_cafb =append (_cafb ,MakeNumberResult (_de .ValueNumber *_cbc ));case BinOpTypeDiv :if _cbc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cafb =append (_cafb ,MakeNumberResult (_de .ValueNumber /_cbc ));case BinOpTypeExp :_cafb =append (_cafb ,MakeNumberResult (_gg .Pow (_de .ValueNumber ,_cbc )));case BinOpTypeLT :_cafb =append (_cafb ,MakeBoolResult (_de .ValueNumber < _cbc ));case BinOpTypeGT :_cafb =append (_cafb ,MakeBoolResult (_de .ValueNumber > _cbc ));case BinOpTypeEQ :_cafb =append (_cafb ,MakeBoolResult (_de .ValueNumber ==_cbc ));case BinOpTypeLEQ :_cafb =append (_cafb ,MakeBoolResult (_de .ValueNumber <=_cbc ));case BinOpTypeGEQ :_cafb =append (_cafb ,MakeBoolResult (_de .ValueNumber >=_cbc ));case BinOpTypeNE :_cafb =append (_cafb ,MakeBoolResult (_de .ValueNumber !=_cbc ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gad ));};};case ResultTypeString :_gaa :=_ede .ValueString ;for _edeg :=range _dfd {_eda :=_dfd [_edeg ].AsString ();if _eda .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gad {case BinOpTypeLT :_cafb =append (_cafb ,MakeBoolResult (_eda .ValueString < _gaa ));case BinOpTypeGT :_cafb =append (_cafb ,MakeBoolResult (_eda .ValueString > _gaa ));case BinOpTypeEQ :_cafb =append (_cafb ,MakeBoolResult (_eda .ValueString ==_gaa ));case BinOpTypeLEQ :_cafb =append (_cafb ,MakeBoolResult (_eda .ValueString <=_gaa ));case BinOpTypeGEQ :_cafb =append (_cafb ,MakeBoolResult (_eda .ValueString >=_gaa ));case BinOpTypeNE :_cafb =append (_cafb ,MakeBoolResult (_eda .ValueString !=_gaa ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gad ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_cafb );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_bdcba :=args [0].AsNumber ();if _bdcba .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_fbgcb :=int (_bdcba .ValueNumber );_bgcd :=make ([][]Result ,0,_fbgcb );for _geega :=0;_geega < _fbgcb ;_geega ++{_aagb :=make ([]Result ,_fbgcb );for _dede :=0;_dede < _fbgcb ;_dede ++{if _geega ==_dede {_aagb [_dede ]=MakeNumberResult (1.0);}else {_aagb [_dede ]=MakeNumberResult (0.0);};};_bgcd =append (_bgcd ,_aagb );};return MakeArrayResult (_bgcd );};var _dfee =map[string ]*_fg .Regexp {};const _ddfc =57370;

// Match implements the MATCH function.
func Match (args []Result )Result {_edae :=len (args );if _edae !=2&&_edae !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cacg :=1;if _edae ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_eage :=args [2].ValueNumber ;if _eage ==-1||_eage ==0{_cacg =int (_eage );};};_fbfg :=args [1];var _fbd []Result ;switch _fbfg .Type {case ResultTypeList :_fbd =_fbfg .ValueList ;case ResultTypeArray :_bfbfg :=_fbfg .ValueArray ;for _ ,_gecb :=range _bfbfg {if len (_gecb )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fbd =append (_fbd ,_gecb [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_bcagf :=_dfgb (args [0]);switch _cacg {case 0:for _bgfgf ,_gbbe :=range _fbd {if _fdfa (_gbbe ,_bcagf ){return MakeNumberResult (float64 (_bgfgf +1));};};case -1:for _bceb :=0;_bceb < len (_fbd );_bceb ++{if _fdfa (_fbd [_bceb ],_bcagf ){return MakeNumberResult (float64 (_bceb +1));};if _bcagf ._ggcc &&(_fbd [_bceb ].ValueNumber < _bcagf ._agcb ){if _bceb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bceb ));};};case 1:for _bdfd :=0;_bdfd < len (_fbd );_bdfd ++{if _fdfa (_fbd [_bdfd ],_bcagf ){return MakeNumberResult (float64 (_bdfd +1));};if _bcagf ._ggcc &&(_fbd [_bdfd ].ValueNumber > _bcagf ._agcb ){if _bdfd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bdfd ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};func init (){_cfdb ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_baff :v }};type couponArgs struct{_aeagd float64 ;_gdfg float64 ;_ggfc int ;_ffbf int ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_fegd chan *node ;_ggac _bb .Mutex ;_ecfd []chan *node ;_efeee []*node ;};var _efecd =false ;

// Eval evaluates a vertical range returning a list of results or an error.
func (_efcbf VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_caaba :=_efcbf .verticalRangeReference ();if _abcfd ,_fedfe :=ev .GetFromCache (_caaba );_fedfe {return _abcfd ;};_cgga ,_feecg :=_ccdf (ctx ,_efcbf ._agag ,_efcbf ._fcgf );_adaff :=_adca (ctx ,ev ,_cgga ,_feecg );ev .SetCache (_caaba ,_adaff );return _adaff ;};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_ccced :=args [0].AsNumber ();if _ccced .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _ccced .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_cdad (_ccced .ValueNumber ));};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _gfb ,_ddd float64 ;switch args [0].Type {case ResultTypeNumber :_ddd =args [0].ValueNumber ;case ResultTypeString :_gfdb :=DateValue ([]Result {args [0]});if _gfdb .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_ddd =_gfdb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_gfb =args [1].ValueNumber ;if _gfb < 62&&_ddd >=62{_gfb --;};case ResultTypeString :_dgb :=DateValue ([]Result {args [1]});if _dgb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_gfb =_dgb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_fdc :=float64 (int (_ddd -_gfb ));return MakeNumberResult (_fdc );};func _ccdf (_gdafg Context ,_eebg ,_cggdc string )(string ,string ){_gbgagc :=_eebg +"\u0031";_eface :=_gdafg .LastRow (_eebg );_bfcd :=_cggdc +_g .Itoa (_eface );return _gbgagc ,_bfcd ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_eggc ,_cffge :=_g .ParseFloat (v ,64);if _cffge !=nil {_ece .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_cffge );};return Number {_ecega :_eggc };};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func (_bcfdf *yyParserImpl )Lookahead ()int {return _bcfdf ._babfa };const _ebbgc =57350;

// Eval evaluates and returns the result of a Negate expression.
func (_adcgf Negate )Eval (ctx Context ,ev Evaluator )Result {_gcff :=_adcgf ._gebgbe .Eval (ctx ,ev );if _gcff .Type ==ResultTypeNumber {return MakeNumberResult (-_gcff .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// String returns a string representation of SheetPrefixExpr.
func (_ebfd SheetPrefixExpr )String ()string {return _ebfd ._fgad };const _eabde =57378;

// LastRow returns 0 for the invalid reference context.
func (_gaaeb *ivr )LastRow (colFrom string )int {return 0};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _babd (args ,true )};var _fffg =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};type xargs struct{_cea []float64 ;_dcec []float64 ;};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_cffe Expression ;_dffc ,_gagf int ;};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_cbaeb :=_ca .Split (v ,"\u003a");if len (_cbaeb )!=2{return nil ;};_gafbd ,_ :=_g .Atoi (_cbaeb [0]);_dbac ,_ :=_g .Atoi (_cbaeb [1]);if _gafbd > _dbac {_gafbd ,_dbac =_dbac ,_gafbd ;};return PrefixHorizontalRange {_cffe :pfx ,_dffc :_gafbd ,_gagf :_dbac };};

// Reference returns an invalid reference for BinaryExpr.
func (_ee BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _gedb (args ,false )};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgeeb :=args [0].AsNumber ();if _cgeeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eccae :=float64 (1);if _cgeeb .ValueNumber < 0{_eccae =-1;};if len (args )> 1{_bfgge :=args [1].AsNumber ();if _bfgge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eccae =_gg .Abs (_bfgge .ValueNumber );};if len (args )==1{return MakeNumberResult (_gg .Ceil (_cgeeb .ValueNumber ));};_eddbe :=_cgeeb .ValueNumber ;_eddbe ,_feege :=_gg .Modf (_eddbe /_eccae );if _feege !=0{if _cgeeb .ValueNumber > 0{_eddbe ++;};};return MakeNumberResult (_eddbe *_eccae );};func _gdgf (_acd ,_dedd int )int {switch _dedd {case 1:if _fecea (_acd ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebgg :=args [0].ValueNumber ;if _ebgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gefc :=args [1].ValueNumber ;if _gefc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbda :=args [2].ValueNumber ;if _gbda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_gg .Pow (_gbda /_gefc ,1/_ebgg )-1);};func _cccb (_efeb ,_gaeb ,_ccd ,_egdd float64 ,_eadc int )float64 {var _fdfc float64 ;if _efeb ==0{_fdfc =(_ccd +_egdd )/_gaeb ;}else {_abge :=_gg .Pow (1+_efeb ,_gaeb );if _eadc ==1{_fdfc =(_egdd *_efeb /(_abge -1)+_ccd *_efeb /(1-1/_abge ))/(1+_efeb );}else {_fdfc =_egdd *_efeb /(_abge -1)+_ccd *_efeb /(1-1/_abge );};};return -_fdfc ;};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_fac ,_cacb :=_bfc (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _cacb .Type ==ResultTypeError {return _cacb ;};_agdd :=_fac ._bga ;_bfbd :=_fac ._gafb ;_gccg :=_fac ._feae ;_abbb :=_fac ._gadf ;_cdbfc :=_fac ._degg ;_gaga :=_fac ._cebe ;if _gaga >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_cege :=_fac ._cafga ;_bcad :=1.0/_gaga ;_aefg :=2.5;if _bcad < 3{_aefg =1;}else if _bcad < 5{_aefg =1.5;}else if _bcad <=6{_aefg =2;};_gaga *=_aefg ;_cagc ,_babcd :=_dgf (_bfbd ,_gccg ,_cege );if _babcd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_gefg :=_faeee (_cagc *_gaga *_agdd );_agdd -=_gefg ;_agdaf :=_agdd -_abbb ;for _bdgf :=0;_bdgf < _cdbfc ;_bdgf ++{_gefg =_faeee (_gaga *_agdd );_agdaf -=_gefg ;if _agdaf < 0{switch _cdbfc -_bdgf {case 0:case 1:return MakeNumberResult (_faeee (_agdd *0.5));default:return MakeNumberResult (0);};};_agdd -=_gefg ;};return MakeNumberResult (_gefg );};const _faead =_efd .Millisecond *1000;var _baeb =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};const _fgfbe =57362;

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fbf :=args [0];switch _fbf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_cba :=_dfff (_fbf .ValueNumber );return MakeNumberResult (float64 (_cba .Day ()));case ResultTypeString :_bdd :=_ca .ToLower (_fbf .ValueString );if !_abe (_bdd ){_ ,_ ,_ ,_ ,_gbf ,_cbcd :=_fcca (_bdd );if _cbcd .Type ==ResultTypeError {_cbcd .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _cbcd ;};if _gbf {return MakeNumberResult (0);};};_ ,_ ,_cafg ,_ ,_bee :=_dcbb (_bdd );if _bee .Type ==ResultTypeError {return _bee ;};return MakeNumberResult (float64 (_cafg ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecgbf :=args [0].AsNumber ();if _ecgbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cecgd :=float64 (1);_dagf :=args [1].AsNumber ();if _dagf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_cecgd =_dagf .ValueNumber ;if _cecgd < 0&&_ecgbf .ValueNumber > 0||_cecgd > 0&&_ecgbf .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_abee :=_ecgbf .ValueNumber ;_abee ,_ffac :=_gg .Modf (_abee /_cecgd );if _gg .Trunc (_ffac +0.5)> 0{_abee ++;};return MakeNumberResult (_abee *_cecgd );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_gcdf :=len (args );if _gcdf !=5&&_gcdf !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebdb ,_ggbd ,_afabg :=_ggc (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _afabg .Type ==ResultTypeError {return _afabg ;};_dfca ,_afabg :=_ffba (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _afabg .Type ==ResultTypeError {return _afabg ;};if _dfca >=_ebdb {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_afce :=args [3].ValueNumber ;if _afce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_afaa :=args [4].ValueNumber ;if _afaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dgdac :=0;if _gcdf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgdac =int (args [5].ValueNumber );if !_fdgc (_dgdac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_ebce ,_afabg :=_dgf (_ebdb ,_ggbd ,_dgdac );if _afabg .Type ==ResultTypeError {return _afabg ;};_cdea ,_afabg :=_dgf (_dfca ,_ggbd ,_dgdac );if _afabg .Type ==ResultTypeError {return _afabg ;};_cagdd ,_afabg :=_dgf (_dfca ,_ebdb ,_dgdac );if _afabg .Type ==ResultTypeError {return _afabg ;};_edbe :=1+_cdea *_afce ;_cadb :=1+_ebce *_afaa ;return MakeNumberResult ((_edbe /_cadb -_cagdd *_afce )*100);};func _defc (_efeg []Result )(bool ,Result ){for _ ,_cgce :=range _efeg {if _cgce .Type ==ResultTypeError {return true ,_cgce ;};};return false ,MakeEmptyResult ();};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func _dfff (_gcb float64 )_efd .Time {_ffaf :=int64 ((_gcb -_bcag )*_cac );return _efd .Unix (0,_ffaf ).UTC ();};func _caga (_ebag [][]Result ,_agdb int )[][]Result {_cadfg :=[][]Result {};for _edba :=range _ebag {if _edba ==0{continue ;};_eddg :=[]Result {};for _bede :=range _ebag {if _bede ==_agdb {continue ;};_eddg =append (_eddg ,_ebag [_edba ][_bede ]);};_cadfg =append (_cadfg ,_eddg );};return _cadfg ;};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fgea :=args [0].ValueNumber ;_eeff :=args [1].ValueNumber ;_adf :=args [2].ValueNumber ;_fca :=_bae (_fgea ,_eeff ,_adf );if _fca >=0{return MakeNumberResult (_fca );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// String returns a string representation of a named range.
func (_ggbae NamedRangeRef )String ()string {return _ggbae ._baff };func _bfc (_gdga []Result ,_cgegc string )(*amorArgs ,Result ){_cgec :=len (_gdga );if _cgec !=6&&_cgec !=7{return nil ,MakeErrorResult (_cgegc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gdga [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgegc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgeea :=_gdga [0].ValueNumber ;if _cgeea < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgegc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_fecc ,_ebab :=_ffba (_gdga [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_cgegc );if _ebab .Type ==ResultTypeError {return nil ,_ebab ;};_eccg ,_ebab :=_ffba (_gdga [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_cgegc );if _ebab .Type ==ResultTypeError {return nil ,_ebab ;};if _eccg < _fecc {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgegc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _gdga [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgegc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcgef :=_gdga [3].ValueNumber ;if _bcgef < 0||_bcgef > _cgeea {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgegc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _gdga [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgegc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbec :=int (_gdga [4].ValueNumber );if _fbec < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgegc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _gdga [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgegc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_caa :=_gdga [5].ValueNumber ;if _caa < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgegc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_faca :=0;if _cgec ==7&&_gdga [6].Type !=ResultTypeEmpty {if _gdga [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgegc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_faca =int (_gdga [6].ValueNumber );if !_fdgc (_faca )||_faca ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_cgegc );};};return &amorArgs {_cgeea ,_fecc ,_eccg ,_bcgef ,_fbec ,_caa ,_faca },_agg ;};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_cebg EmptyExpr )Update (q *_ad .UpdateQuery )Expression {return _cebg };

// Eval evaluates and returns the result of the cell reference.
func (_eac CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_eac ._cfa ,ev )};func (_dedee VerticalRange )verticalRangeReference ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_dedee ._agag ,_dedee ._fcgf );};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_fgcd :=len (args );if _fgcd !=4&&_fgcd !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggga ,_fbeg ,_debdg :=_ggc (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _debdg .Type ==ResultTypeError {return _debdg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afac :=args [2].ValueNumber ;if _afac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ggdc :=args [3].ValueNumber ;if _ggdc <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_ggce :=0;if _fgcd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggce =int (args [4].ValueNumber );if !_fdgc (_ggce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_aadf ,_debdg :=_dgf (_ggga ,_fbeg ,_ggce );if _debdg .Type ==ResultTypeError {return _debdg ;};return MakeNumberResult ((_ggdc /_afac -1)/_aadf );};var _ccae =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};var _eabba =[...]int {-1,1,1,-1,-2,0};var _abgbb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _gc (_ebc ,_aa [][]Result )bool {if len (_ebc )!=len (_aa ){return false ;};for _ed :=range _ebc {if len (_ebc [_ed ])!=len (_aa [_ed ]){return false ;};};return true ;};const _cfcg int =30;

// Reference returns a string reference value to an expression with prefix.
func (_cfgc PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_afdeag :=_cfgc ._cebae .Reference (ctx ,ev );_deff :=_cfgc ._agbag .Reference (ctx ,ev );if _afdeag .Type ==ReferenceTypeSheet &&_deff .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_afdeag .Value +"\u0021"+_deff .Value };};return ReferenceInvalid ;};const _bcdbd =57357;type parsedSearchObject struct{_ddebe string ;_bcgff string ;_gdbb int ;};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcbf ,_gbgf ,_ddeeg :=_ggc (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _ddeeg .Type ==ResultTypeError {return _ddeeg ;};_caac ,_ddeeg :=_ffba (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _ddeeg .Type ==ResultTypeError {return _ddeeg ;};if _caac >=_gcbf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_dabf :=args [3].ValueNumber ;if _dabf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccde :=args [4].ValueNumber ;if _ccde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bedf :=args [5].ValueNumber ;if _bedf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_becf :=float64 (int (args [6].ValueNumber ));if !_faf (_becf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dcaae :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dcaae =int (args [7].ValueNumber );if !_fdgc (_dcaae ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_cccbc ,_ddeeg :=_dgf (_caac ,_gbgf ,_dcaae );if _ddeeg .Type ==ResultTypeError {return _ddeeg ;};_cccbc *=_becf ;_faeg ,_ddeeg :=_dgf (_gcbf ,_gbgf ,_dcaae );if _ddeeg .Type ==ResultTypeError {return _ddeeg ;};_faeg *=_becf ;_dged ,_ddeeg :=_dgf (_caac ,_gcbf ,_dcaae );if _ddeeg .Type ==ResultTypeError {return _ddeeg ;};_dged *=_becf ;_afaf :=_bedf +_cccbc *100*_dabf /_becf ;_afaf /=_ccde +_dged *100*_dabf /_becf ;_afaf --;_afaf *=_becf /_faeg ;return MakeNumberResult (_afaf );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_agda ,_eba :=_aebb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _eba .Type ==ResultTypeError {return _eba ;};return MakeNumberResult (_egfa (_agda ._aeagd ,_agda ._gdfg ,_agda ._ggfc ,_agda ._ffbf ));};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_ae :data }};var _cbbe =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Reference returns an invalid reference for Error.
func (_adcg Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_cfgd :=len (args );if _cfgd < 4||_cfgd > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgedb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bccad :=args [1].ValueNumber ;if _bccad <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cggb :=args [2].ValueNumber ;if _cggb < _bccad {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gbbgb :=args [3].ValueNumber ;_fffa :=0.0;if _cfgd >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fffa =args [4].ValueNumber ;};_cefbd :=0;if _cfgd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cefbd =int (args [5].ValueNumber );if _cefbd !=0{_cefbd =1;};};return MakeNumberResult (_cccb (_dgedb ,_cggb ,_gbbgb ,_fffa ,_cefbd )-_ggfd (_dgedb ,_bccad ,_cggb ,_gbbgb ,_fffa ,_cefbd ));};func _ecec (_dagg ,_agdde float64 )bool {return _gg .Abs (_dagg -_agdde )< 1.0e-6};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_efeeb Context ,_acdecf Evaluator ,_egeg []Result )Result ;const (_befge rmode =iota ;_acae ;_cagda ;);

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _eacc :=0;_eacc < len (args )-1;_eacc +=2{if args [_eacc ].ValueNumber ==1{return args [_eacc +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_cccef :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_cccef =int (args [1].ValueNumber );if _cccef < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _cccef ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_caeb :=args [0].Value ();if _cccef > len (_caeb ){return MakeStringResult (_caeb );};return MakeStringResult (_caeb [0:_cccef ]);};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};type criteriaParsed struct{_ggcc bool ;_agcb float64 ;_cagef string ;_agfaa *criteriaRegex ;};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_ggde ,_acagg :=_aebb (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _acagg .Type ==ResultTypeError {return _acagg ;};_bffa :=_dfff (_ggde ._aeagd );_abbc :=_dfff (_ggde ._gdfg );_afg :=_ggde ._ggfc ;_aede :=_ggde ._ffbf ;_faee :=_edca (_bffa ,_abbc ,_afg ,_aede );_edf ,_cfd ,_feac :=_faee .Date ();return MakeNumberResult (_gge (_edf ,int (_cfd ),_feac ));};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbad :=args [0].AsNumber ();if _fbad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_gg .Pi *_fbad .ValueNumber );};

// Update updates references in the BinaryExpr after removing a row/column.
func (_cg BinaryExpr )Update (q *_ad .UpdateQuery )Expression {_eefg :=_cg ;_eefg ._df =_cg ._df .Update (q );_eefg ._ggf =_cg ._ggf .Update (q );return _eefg ;};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_aabb :=len (args );if _aabb !=3&&_aabb !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgceb ,_fddg :=_efefd (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _fddg .Type ==ResultTypeError {return _fddg ;};_ecce ,_fddg :=_efefd (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _fddg .Type ==ResultTypeError {return _fddg ;};_bdfdg ,_fddg :=_efefd (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _fddg .Type ==ResultTypeError {return _fddg ;};_accff :=0;if _aabb ==3{return MakeStringResult (_ca .Replace (_fgceb ,_ecce ,_bdfdg ,-1));}else {_degd ,_ccag :=_beeff (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _ccag .Type ==ResultTypeError {return _ccag ;};_accff =int (_degd );if _accff < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_faba :=_fgceb ;_adge :=_accff ;_gbbc :=-1;_eaefc :=len (_ecce );_gdge :=0;for {_adge --;_aaccd :=_ca .Index (_faba ,_ecce );if _aaccd ==-1{_gbbc =-1;break ;}else {_gbbc =_aaccd +_gdge ;if _adge ==0{break ;};_acaeg :=_eaefc +_aaccd ;_gdge +=_acaeg ;_faba =_faba [_acaeg :];};};if _gbbc ==-1{return MakeStringResult (_fgceb );}else {_ddgbe :=_fgceb [:_gbbc ];_ecbee :=_fgceb [_gbbc +_eaefc :];return MakeStringResult (_ddgbe +_bdfdg +_ecbee );};};};func _fdgc (_dffd int )bool {return _dffd >=0&&_dffd <=4};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_cebae :pfx ,_agbag :exp }};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_bdbe :=MakeNumberResult (0);for _ ,_gbgd :=range args {_gbgd =_gbgd .AsNumber ();switch _gbgd .Type {case ResultTypeNumber :_bdbe .ValueNumber +=_gbgd .ValueNumber *_gbgd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ffebc :=SumSquares (_gbgd .ListValues ());if _ffebc .Type !=ResultTypeNumber {return _ffebc ;};_bdbe .ValueNumber +=_ffebc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gbgd ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_gbgd .Type ));};};return _bdbe ;};const _abfa =57365;func _bgf (_gbfb int ,_bdcd _efd .Month ,_ega int )int64 {if _gbfb ==1900&&int (_bdcd )<=2{_ega --;};_cacd :=_efd .Date (_gbfb ,_bdcd ,_ega ,0,0,0,0,_efd .UTC );return _cacd .Unix ();};func _aec (_acc ,_bddc _efd .Time )bool {_acg :=_acc .Unix ();_fag :=_bddc .Unix ();_dgdag :=_acc .Year ();_cacf :=_bgf (_dgdag ,_efd .March ,1);if _fecea (_dgdag )&&_acg < _cacf &&_fag >=_cacf {return true ;};var _gfg =_bddc .Year ();var _acag =_bgf (_gfg ,_efd .March ,1);return (_fecea (_gfg )&&_fag >=_acag &&_acg < _acag );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fab *defEval )LastEvalIsRef ()bool {return _fab ._fgcc };func _beeff (_aacf Result ,_bddcac ,_egea string )(float64 ,Result ){switch _aacf .Type {case ResultTypeEmpty :return 0,_agg ;case ResultTypeNumber :return _aacf .ValueNumber ,_agg ;case ResultTypeString :_agfbe ,_ddae :=_g .ParseFloat (_aacf .ValueString ,64);if _ddae !=nil {return 0,MakeErrorResult (_egea +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_bddcac );};return _agfbe ,_agg ;default:return 0,MakeErrorResult (_bddcac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_egea +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_eg ConstArrayExpr )Update (q *_ad .UpdateQuery )Expression {return _eg };

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_cddbg :=args [0].AsString ();if _cddbg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_dbag :=_b .Buffer {};_agec :=false ;for _ ,_cdcdf :=range _cddbg .ValueString {if !_agec &&_ef .IsLetter (_cdcdf ){_dbag .WriteRune (_ef .ToUpper (_cdcdf ));}else {_dbag .WriteRune (_ef .ToLower (_cdcdf ));};_agec =_ef .IsLetter (_cdcdf );};return MakeStringResult (_dbag .String ());};type plex struct{_dagb chan *node ;_dbafe Expression ;_adabg string ;};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};func _cfcbc (_fffgf int )string {if _fffgf >=1&&_fffgf -1< len (_ccae ){if _ccae [_fffgf -1]!=""{return _ccae [_fffgf -1];};};return _c .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_fffgf );};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_bgge *ivr )GetLabelPrefix (cellRef string )string {return ""};type defEval struct{evCache ;_fgcc bool ;};const _da ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";func _egfa (_fefa ,_cagg float64 ,_bfbf ,_baea int )float64 {_abg :=_dfff (_fefa );_bfe :=_dfff (_cagg );_gegf :=_bdcdb (_abg ,_bfe ,_bfbf );return _afbd (_abg ,_gegf ,_baea );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_fgad string };func _gfc (_egc ,_bcaa ,_debb int )bool {if _bcaa < 1||_bcaa > 12{return false ;};if _debb < 1{return false ;};return _debb <=_eaa (_egc ,_bcaa );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_fbfbf :=len (args );if _fbfbf < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fbfbf > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cbefc :=args [0];_dgeb :=args [1];if _dgeb .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_agbaa :=args [2].AsNumber ();if _agbaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddbd :=false ;if _fbfbf ==4&&args [3].Type !=ResultTypeEmpty {_ccec :=args [3].AsNumber ();if _ccec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _ccec .ValueNumber ==0{_ddbd =true ;};};_afcb :=int (_agbaa .ValueNumber )-1;_fgggb :=-1;_fdcd :=false ;_dda :for _aagc ,_fagd :=range _dgeb .ValueArray {if len (_fagd )==0{continue ;};_ddbf :=_fagd [0];switch _bcgbf (_ddbf ,_cbefc ,false ,_ddbd ){case _feea :_fgggb =_aagc ;case _bbfe :_fgggb =_aagc ;_fdcd =true ;break _dda ;};};if _fgggb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gbbee :=_dgeb .ValueArray [_fgggb ];if _afcb < 0||_afcb >=len (_gbbee ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _fdcd ||!_ddbd {return _gbbee [_afcb ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Reference returns an invalid reference for String.
func (_caebe String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// GetEpoch returns a null time object for the invalid reference context.
func (_cfdff *ivr )GetEpoch ()_efd .Time {return _efd .Time {}};func _fedd (_ddccgf ,_cgabb float64 )float64 {_ddccgf =_gg .Trunc (_ddccgf );_cgabb =_gg .Trunc (_cgabb );if _ddccgf ==0&&_cgabb ==0{return 0;};return _ddccgf *_cgabb /_bcgbe (_ddccgf ,_cgabb );};func _agdfa (_fcac yyLexer )int {return _fbedb ().Parse (_fcac )};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_feee NamedRangeRef )Update (q *_ad .UpdateQuery )Expression {return _feee };

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_abde :=args [0].AsNumber ();if _abde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_egdbb :=args [1].AsNumber ();if _egdbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_gg .Pow (_abde .ValueNumber ,_egdbb .ValueNumber ));};const _bcea =57353;func LexReader (r _a .Reader )chan *node {_beagd :=NewLexer ();go _beagd .lex (r );return _beagd ._fegd };const _fcc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_gagb :=MakeNumberResult (0);for _ ,_gdfc :=range args {_gdfc =_gdfc .AsNumber ();switch _gdfc .Type {case ResultTypeNumber :_gagb .ValueNumber +=_gdfc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fbae :=Sum (_gdfc .ListValues ());if _fbae .Type !=ResultTypeNumber {return _fbae ;};_gagb .ValueNumber +=_fbae .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gdfc ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gdfc .Type ));};};return _gagb ;};const _debdf =57361;func _aega (_becce string )string {_becce =_ca .Replace (_becce ,"\u000a","\u005c\u006e",-1);_becce =_ca .Replace (_becce ,"\u000d","\u005c\u0072",-1);_becce =_ca .Replace (_becce ,"\u0009","\u005c\u0074",-1);return _becce ;};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_accc :=args [0];switch _accc .Type {case ResultTypeError :return _accc ;case ResultTypeNumber ,ResultTypeString :return _ebfbc (args [0]);case ResultTypeList :_ffg :=_accc .ValueList ;_bcgec :=[]Result {};for _ ,_dcca :=range _ffg {_dfcad :=_ebfbc (_dcca );if _dfcad .Type ==ResultTypeError {return _dfcad ;};_bcgec =append (_bcgec ,_dfcad );};return MakeListResult (_bcgec );case ResultTypeArray :_aafd :=_accc .ValueArray ;_fdbd :=[][]Result {};for _ ,_abcca :=range _aafd {_caaca :=[]Result {};for _ ,_ccad :=range _abcca {_efda :=_ebfbc (_ccad );if _efda .Type ==ResultTypeError {return _efda ;};_caaca =append (_caaca ,_efda );};_fdbd =append (_fdbd ,_caaca );};return MakeArrayResult (_fdbd );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// String returns a string representation of a horizontal range with prefix.
func (_dggb PrefixHorizontalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_dggb ._cffe .String (),_dggb ._dffc ,_dggb ._gagf );};func (_efaea *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};type yyLexer interface{Lex (_cgbff *yySymType )int ;Error (_ccbe string );};func (_fc BinOpType )String ()string {if _fc >=BinOpType (len (_fge )-1){return _c .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_fc );};return _da [_fge [_fc ]:_fge [_fc +1]];};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Reference returns a string reference value to a horizontal range with prefix.
func (_gbae PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_ebcad :=_gbae ._cffe .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_gbae .horizontalRangeReference (_ebcad .Value )};};

// String returns an empty string for EmptyExpr.
func (_cdbf EmptyExpr )String ()string {return ""};func _gafg (_cdba []Result )Result {_dbaa :=_cdba [0].ValueList ;_accf :=len (_dbaa );switch len (_cdba ){case 1:_dfbe :=[]Result {};for _ ,_fegce :=range _dbaa {_dfbe =append (_dfbe ,MakeBoolResult (_fegce .ValueNumber !=0));};return MakeListResult (_dfbe );case 2:_cfga :=_cdba [1];switch _cfga .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_agfe :=[]Result {};for _ ,_gfdf :=range _dbaa {var _fgdg Result ;if _gfdf .ValueNumber ==0{_fgdg =MakeBoolResult (false );}else {_fgdg =_cfga ;};_agfe =append (_agfe ,_fgdg );};return MakeListResult (_agfe );case ResultTypeList :_gfbdf :=_bdgea (_cfga ,_accf );_fbbf :=[]Result {};for _ffcdg ,_eadbc :=range _dbaa {var _cgag Result ;if _eadbc .ValueNumber ==0{_cgag =MakeBoolResult (false );}else {_cgag =_gfbdf [_ffcdg ];};_fbbf =append (_fbbf ,_cgag );};return MakeListResult (_fbbf );case ResultTypeArray :_gdbc :=_eabe (_cfga ,len (_cfga .ValueArray ),_accf );_gfe :=[][]Result {};for _ ,_dcge :=range _gdbc {_eeafa :=[]Result {};for _beecb ,_bgea :=range _dbaa {var _febb Result ;if _bgea .ValueNumber ==0{_febb =MakeBoolResult (false );}else {_febb =_dcge [_beecb ];};_eeafa =append (_eeafa ,_febb );};_gfe =append (_gfe ,_eeafa );};return MakeArrayResult (_gfe );};case 3:_bcbbf :=_cdba [1];_caab :=_cdba [2];_gcdbf :=_feeab (_bcbbf );_fcdc :=_feeab (_caab );if _gcdbf &&_fcdc {_ffdg :=[]Result {};for _ ,_bccc :=range _dbaa {var _gbgfe Result ;if _bccc .ValueNumber ==0{_gbgfe =_caab ;}else {_gbgfe =_bcbbf ;};_ffdg =append (_ffdg ,_gbgfe );};return MakeListResult (_ffdg );};if _bcbbf .Type !=ResultTypeArray &&_caab .Type !=ResultTypeArray {_dgddg :=_bdgea (_bcbbf ,_accf );_edbb :=_bdgea (_caab ,_accf );_gdfed :=[]Result {};for _fbedc ,_dfda :=range _dbaa {var _fegcf Result ;if _dfda .ValueNumber ==0{_fegcf =_edbb [_fbedc ];}else {_fegcf =_dgddg [_fbedc ];};_gdfed =append (_gdfed ,_fegcf );};return MakeListResult (_gdfed );};_faega ,_gebe :=len (_bcbbf .ValueArray ),len (_caab .ValueArray );_gfaea ,_ccce :=_faega ,_gebe ;if _gebe > _gfaea {_gfaea ,_ccce =_ccce ,_gfaea ;};_debg :=_eabe (_bcbbf ,_gfaea ,_accf );_cbcae :=_eabe (_caab ,_gfaea ,_accf );_gde :=[][]Result {};for _feff :=0;_feff < _gfaea ;_feff ++{_ceee :=[]Result {};for _dffba ,_eceg :=range _dbaa {var _bedde Result ;if _eceg .ValueNumber ==0{if _feff < _gebe {_bedde =_cbcae [_feff ][_dffba ];}else {_bedde =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _feff < _faega {_bedde =_debg [_feff ][_dffba ];}else {_bedde =MakeErrorResultType (ErrorTypeNA ,"");};};_ceee =append (_ceee ,_bedde );};_gde =append (_gde ,_ceee );};return MakeArrayResult (_gde );};return MakeErrorResult ("");};const _gded =57366;

// Update returns the same object as updating sheet references does not affect String.
func (_cdbfcc String )Update (q *_ad .UpdateQuery )Expression {return _cdbfcc };func (_bdaf *Lexer )emit (_gaaec tokenType ,_fcabc []byte ){if _efecd {_c .Println ("\u0065\u006d\u0069\u0074",_gaaec ,_aega (string (_fcabc )));};_bdaf ._fegd <-&node {_gaaec ,string (_fcabc )};};func _gge (_dbeb ,_ddb ,_bbg int )float64 {return float64 (_bgf (_dbeb ,_efd .Month (_ddb ),_bbg )/86400)+_bcag ;};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcee :=true ;for _ ,_fbca :=range args {_fbca =_fbca .AsNumber ();switch _fbca .Type {case ResultTypeList ,ResultTypeArray :_ccbb :=And (_fbca .ListValues ());if _ccbb .Type ==ResultTypeError {return _ccbb ;};if _ccbb .ValueNumber ==0{_dcee =false ;};case ResultTypeNumber :if _fbca .ValueNumber ==0{_dcee =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _fbca ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_dcee );};func _bcgbf (_fbfed ,_bbae Result ,_acace ,_deeb bool )cmpResult {_fbfed =_fbfed .AsNumber ();_bbae =_bbae .AsNumber ();if _fbfed .Type !=_bbae .Type {return _dacc ;};if _fbfed .Type ==ResultTypeNumber {if _fbfed .ValueNumber ==_bbae .ValueNumber {return _bbfe ;};if _fbfed .ValueNumber < _bbae .ValueNumber {return _feea ;};return _ddcea ;};if _fbfed .Type ==ResultTypeString {_cafda :=_fbfed .ValueString ;_bggg :=_bbae .ValueString ;if !_acace {_cafda =_ca .ToLower (_cafda );_bggg =_ca .ToLower (_bggg );};if _deeb {_bgdb :=_d .Match (_bggg ,_cafda );if _bgdb {return _bbfe ;}else {return _ddcea ;};};return cmpResult (_ca .Compare (_cafda ,_bggg ));};if _fbfed .Type ==ResultTypeEmpty {return _bbfe ;};if _fbfed .Type ==ResultTypeList {if len (_fbfed .ValueList )< len (_bbae .ValueList ){return _feea ;};if len (_fbfed .ValueList )> len (_bbae .ValueList ){return _ddcea ;};for _bgdc :=range _fbfed .ValueList {_agac :=_bcgbf (_fbfed .ValueList [_bgdc ],_bbae .ValueList [_bgdc ],_acace ,_deeb );if _agac !=_bbfe {return _agac ;};};return _bbfe ;};if _fbfed .Type ==ResultTypeList {if len (_fbfed .ValueArray )< len (_bbae .ValueArray ){return _feea ;};if len (_fbfed .ValueArray )> len (_bbae .ValueArray ){return _ddcea ;};for _ffcbe :=range _fbfed .ValueArray {_adab :=_fbfed .ValueArray [_ffcbe ];_gfae :=_fbfed .ValueArray [_ffcbe ];if len (_adab )< len (_gfae ){return _feea ;};if len (_adab )> len (_gfae ){return _ddcea ;};for _bcgf :=range _adab {_efcbc :=_bcgbf (_adab [_bcgf ],_gfae [_bcgf ],_acace ,_deeb );if _efcbc !=_bbfe {return _efcbc ;};};};return _bbfe ;};return _dacc ;};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gafca :=args [0];_efbb :=args [1];if _efbb .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dgab :=args [2].AsNumber ();if _dgab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgaab :=false ;if len (args )==4{_bggge :=args [3].AsNumber ();if _bggge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bggge .ValueNumber ==0{_fgaab =true ;};};_afcgd :=-1;_bgef :=false ;if len (_efbb .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_afed :=_efbb .ValueArray [0];_aece :for _gfbcb ,_afdde :=range _afed {switch _bcgbf (_afdde ,_gafca ,false ,_fgaab ){case _feea :_afcgd =_gfbcb ;case _bbfe :_afcgd =_gfbcb ;_bgef =true ;break _aece ;};};if _afcgd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_dddce :=int (_dgab .ValueNumber )-1;if _dddce < 0||_dddce > len (_efbb .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_afed =_efbb .ValueArray [_dddce ];if _afcgd < 0||_afcgd >=len (_afed ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bgef ||!_fgaab {return _afed [_afcgd ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_aad Context ,formula string )Result ;SetCache (_ddf string ,_cedf Result );GetFromCache (_dbef string )(Result ,bool );LastEvalIsRef ()bool ;};const _fadf =-1000;func _bae (_gagd ,_ecg ,_fdf float64 )float64 {return (_gagd *3600+_ecg *60+_fdf )/86400};var _defdb =[...]uint8 {0,20,37,60,78,96};

// Reference returns a string reference value to a vertical range with prefix.
func (_gaecc PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_cbaa :=_gaecc ._bgfb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_gaecc .verticalRangeReference (_cbaa .Value )};};func _fdfa (_eaec Result ,_eagg *criteriaParsed )bool {if _eaec .Type ==ResultTypeEmpty {return false ;};if _eagg ._ggcc {return _eaec .ValueNumber ==_eagg ._agcb ;}else {_ggfff :=_ca .ToLower (_eaec .ValueString );return _eagg ._cagef ==_ggfff ||_d .Match (_eagg ._cagef ,_ggfff );};};func _gaebb (_ddgb Result )[][]Result {switch _ddgb .Type {case ResultTypeArray :return _ddgb .ValueArray ;case ResultTypeList :return [][]Result {_ddgb .ValueList };default:return [][]Result {};};};func _cdc (_gdc string )bool {for _ ,_bbc :=range _cff {_aeb :=_bbc .FindStringSubmatch (_gdc );if len (_aeb )> 1{return true ;};};return false ;};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_fcgd :=_dbcf (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _fcgd .Type !=ResultTypeEmpty {return _fcgd ;};_bbga :=_agfac (args [1:]);_caceg :=0.0;_gabea :=_gaebb (args [0]);for _ ,_bgdbd :=range _bbga {_caceg +=_gabea [_bgdbd ._baeeb ][_bgdbd ._aegc ].ValueNumber ;};return MakeNumberResult (float64 (_caceg ));};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_deddd :=[]string {};for _dcdc :=range _gcffa {_deddd =append (_deddd ,_dcdc );};for _feabb :=range _aafbg {_deddd =append (_deddd ,_feabb );};_cb .Strings (_deddd );return _deddd ;};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_cefc NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_deebg :=ctx .NamedRange (_cefc ._baff );_acgc :=_deebg .Value ;if _ddadf ,_gbfa :=ev .GetFromCache (_acgc );_gbfa {return _ddadf ;};_fccdc :=_ca .Split (_acgc ,"\u0021");if len (_fccdc )!=2{return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_acgc ));};_ffdgb :=ctx .Sheet (_fccdc [0]);_gged :=_ca .Split (_fccdc [1],"\u003a");switch len (_gged ){case 1:_cgbe :=ev .Eval (_ffdgb ,_gged [0]);ev .SetCache (_acgc ,_cgbe );return _cgbe ;case 2:_beagc :=_adca (_ffdgb ,ev ,_gged [0],_gged [1]);ev .SetCache (_acgc ,_beagc );return _beagc ;};return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_deebg .Type ));};const _fgf ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";type cumulArgs struct{_gbbb float64 ;_aecg float64 ;_aaag float64 ;_eabb float64 ;_aebbf float64 ;_bfca int ;};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_cfeb .Lock ();defer _cfeb .Unlock ();if _ ,_bcfa :=_aafbg [name ];_bcfa {_ece .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_aafbg [name ]=fn ;};

// Reference returns a string reference value to a horizontal range.
func (_eabgc HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_eabgc .horizontalRangeReference ()};};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_bdea :=args [0];if _bdea .Type !=ResultTypeArray &&_bdea .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bagf :=_bdea .ValueArray ;if len (_bagf )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_bagf [0])));};

// Eval evaluates the binary expression using the context given.
func (_cc BinaryExpr )String ()string {_ffa :="";switch _cc ._ecc {case BinOpTypePlus :_ffa ="\u002b";case BinOpTypeMinus :_ffa ="\u002d";case BinOpTypeMult :_ffa ="\u002a";case BinOpTypeDiv :_ffa ="\u002f";case BinOpTypeExp :_ffa ="\u005e";case BinOpTypeLT :_ffa ="\u003c";case BinOpTypeGT :_ffa ="\u003e";case BinOpTypeEQ :_ffa ="\u003d";case BinOpTypeLEQ :_ffa ="\u003c\u003d";case BinOpTypeGEQ :_ffa ="\u003e\u003d";case BinOpTypeNE :_ffa ="\u003c\u003e";case BinOpTypeConcat :_ffa ="\u0026";};return _cc ._df .String ()+_ffa +_cc ._ggf .String ();};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_dgdd :=len (args );if _dgdd !=4&&_dgdd !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eed ,_ecdf ,_ecbb :=_ggc (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _ecbb .Type ==ResultTypeError {return _ecbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_becd :=args [2].ValueNumber ;if _becd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_daee :=args [3].ValueNumber ;if _daee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_adfb :=0;if _dgdd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adfb =int (args [4].ValueNumber );if !_fdgc (_adfb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_defd ,_ecbb :=_dgf (_eed ,_ecdf ,_adfb );if _ecbb .Type ==ResultTypeError {return _ecbb ;};return MakeNumberResult (_daee *(1-_becd *_defd ));};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};type countMode byte ;

// Reference returns an invalid reference for Number.
func (_edbbb Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns an empty string for Error.
func (_ggg Error )String ()string {return ""};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_fdce PrefixRangeExpr )Update (q *_ad .UpdateQuery )Expression {_ecdgc :=_fdce ;_cgbae :=_fdce ._eggdc .String ();if _cgbae ==q .SheetToUpdate {_cfgg :=*q ;_cfgg .UpdateCurrentSheet =true ;_ecdgc ._gccb =_fdce ._gccb .Update (&_cfgg );_ecdgc ._cffdg =_fdce ._cffdg .Update (&_cfgg );};return _ecdgc ;};func _dddc (_ebad ,_bead float64 ,_gbff ,_aaec int )(float64 ,Result ){_faeea ,_agf :=_dfff (_ebad ),_dfff (_bead );if _agf .After (_faeea ){_gecef :=_edca (_faeea ,_agf ,_gbff ,_aaec );_fgbdc :=(_agf .Year ()-_gecef .Year ())*12+int (_agf .Month ())-int (_gecef .Month ());return float64 (_fgbdc *_gbff )/12.0,_agg ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dedc :=[]float64 {};for _ ,_ecegd :=range args {switch _ecegd .Type {case ResultTypeString :_gadd :=_ecegd .AsNumber ();if _gadd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dedc =append (_dedc ,_gadd .ValueNumber );case ResultTypeList :_afddb :=LCM (_ecegd .ValueList );if _afddb .Type !=ResultTypeNumber {return _afddb ;};_dedc =append (_dedc ,_afddb .ValueNumber );case ResultTypeNumber :_dedc =append (_dedc ,_ecegd .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _ecegd ;};};if len (_dedc )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _dedc [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dedc )==1{return MakeNumberResult (_dedc [0]);};_afcbf :=_dedc [0];for _babg :=1;_babg < len (_dedc );_babg ++{if _dedc [_babg ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_afcbf =_fedd (_afcbf ,_dedc [_babg ]);};return MakeNumberResult (_afcbf );};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func (_dba *evCache )GetFromCache (key string )(Result ,bool ){_dba ._ddc .Lock ();_fdg ,_ged :=_dba ._dfg [key ];_dba ._ddc .Unlock ();return _fdg ,_ged ;};

// Eval evaluates the binary expression using the context given.
func (_eb BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_cad :=_eb ._df .Eval (ctx ,ev );if _cad .Type ==ResultTypeError {return _cad ;};_efa :=_eb ._ggf .Eval (ctx ,ev );if _efa .Type ==ResultTypeError {return _efa ;};if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeArray {if !_gc (_cad .ValueArray ,_efa .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ab (_eb ._ecc ,_cad .ValueArray ,_efa .ValueArray );}else if _cad .Type ==ResultTypeList {if len (_cad .ValueList )!=len (_efa .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ffd (_eb ._ecc ,_cad .ValueList ,_efa .ValueList );};}else if _cad .Type ==ResultTypeArray &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return _fda (_eb ._ecc ,_cad .ValueArray ,_efa );}else if _cad .Type ==ResultTypeList &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return _eef (_eb ._ecc ,_cad .ValueList ,_efa );};switch _eb ._ecc {case BinOpTypePlus :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeNumberResult (_cad .ValueNumber +_efa .ValueNumber );};};case BinOpTypeMinus :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeNumberResult (_cad .ValueNumber -_efa .ValueNumber );};};case BinOpTypeMult :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeNumberResult (_cad .ValueNumber *_efa .ValueNumber );};};case BinOpTypeDiv :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {if _efa .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_cad .ValueNumber /_efa .ValueNumber );};};case BinOpTypeExp :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeNumberResult (_gg .Pow (_cad .ValueNumber ,_efa .ValueNumber ));};};case BinOpTypeLT :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeBoolResult (_cad .ValueNumber < _efa .ValueNumber );};if _cad .Type ==ResultTypeString {return MakeBoolResult (_cad .ValueString < _efa .ValueString );};if _cad .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cad .Type ==ResultTypeString &&_efa .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cad .Type ==ResultTypeNumber &&_efa .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cad .Type ==ResultTypeEmpty &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_cad .Type ==ResultTypeNumber ||_cad .Type ==ResultTypeString )&&_efa .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeBoolResult (_cad .ValueNumber > _efa .ValueNumber );};if _cad .Type ==ResultTypeString {return MakeBoolResult (_cad .ValueString > _efa .ValueString );};if _cad .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cad .Type ==ResultTypeString &&_efa .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cad .Type ==ResultTypeNumber &&_efa .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cad .Type ==ResultTypeEmpty &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_cad .Type ==ResultTypeNumber ||_cad .Type ==ResultTypeString )&&_efa .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeBoolResult (_cad .ValueNumber ==_efa .ValueNumber );};if _cad .Type ==ResultTypeString {return MakeBoolResult (_cad .ValueString ==_efa .ValueString );};if _cad .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_cad .Type ==ResultTypeString &&_efa .Type ==ResultTypeNumber )||(_cad .Type ==ResultTypeNumber &&_efa .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _cad .Type ==ResultTypeEmpty &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return MakeBoolResult (_fd (_efa ));}else if (_cad .Type ==ResultTypeNumber ||_cad .Type ==ResultTypeString )&&_efa .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_cad ));};case BinOpTypeNE :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeBoolResult (_cad .ValueNumber !=_efa .ValueNumber );};if _cad .Type ==ResultTypeString {return MakeBoolResult (_cad .ValueString !=_efa .ValueString );};if _cad .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_cad .Type ==ResultTypeString &&_efa .Type ==ResultTypeNumber )||(_cad .Type ==ResultTypeNumber &&_efa .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _cad .Type ==ResultTypeEmpty &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return MakeBoolResult (!_fd (_efa ));}else if (_cad .Type ==ResultTypeNumber ||_cad .Type ==ResultTypeString )&&_efa .Type ==ResultTypeEmpty {return MakeBoolResult (!_fd (_cad ));};case BinOpTypeLEQ :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeBoolResult (_cad .ValueNumber <=_efa .ValueNumber );};if _cad .Type ==ResultTypeString {return MakeBoolResult (_cad .ValueString <=_efa .ValueString );};if _cad .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cad .Type ==ResultTypeString &&_efa .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cad .Type ==ResultTypeNumber &&_efa .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cad .Type ==ResultTypeEmpty &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return MakeBoolResult (_fd (_efa ));}else if (_cad .Type ==ResultTypeNumber ||_cad .Type ==ResultTypeString )&&_efa .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_cad ));};case BinOpTypeGEQ :if _cad .Type ==_efa .Type {if _cad .Type ==ResultTypeNumber {return MakeBoolResult (_cad .ValueNumber >=_efa .ValueNumber );};if _cad .Type ==ResultTypeString {return MakeBoolResult (_cad .ValueString >=_efa .ValueString );};if _cad .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cad .Type ==ResultTypeString &&_efa .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cad .Type ==ResultTypeNumber &&_efa .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cad .Type ==ResultTypeEmpty &&(_efa .Type ==ResultTypeNumber ||_efa .Type ==ResultTypeString ){return MakeBoolResult (_fd (_efa ));}else if (_cad .Type ==ResultTypeNumber ||_cad .Type ==ResultTypeString )&&_efa .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_cad ));};case BinOpTypeConcat :return MakeStringResult (_cad .Value ()+_efa .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_caggf :=args [0].ValueNumber ;if _caggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_baeg :=float64 (int (args [1].ValueNumber ));if _baeg < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_gg .Pow ((1+_caggf /_baeg ),_baeg )-1);};

// Bool is a boolean expression.
type Bool struct{_cd bool };type parsedReplaceObject struct{_fdfb string ;_dgafb int ;_ggcag int ;_bgced string ;};func (_eeea *Lexer )nextRaw ()*node {for len (_eeea ._ecfd )!=0{_gcde :=<-_eeea ._ecfd [len (_eeea ._ecfd )-1];if _gcde !=nil {return _gcde ;};_eeea ._ecfd =_eeea ._ecfd [0:len (_eeea ._ecfd )-1];};return <-_eeea ._fegd ;};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_afbg :=args [0].AsNumber ();_dcf :=args [1].AsNumber ();if _afbg .Type !=ResultTypeNumber ||_dcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _dcf .ValueNumber < _afbg .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_bdgb :=int64 (_afbg .ValueNumber );_fcab :=int64 (_dcf .ValueNumber );return MakeNumberResult (float64 (_gabca .Int63n (_fcab -_bdgb +1)+_bdgb ));};func _afbd (_eadb ,_aaae _efd .Time ,_dgfe int )float64 {if _eadb .After (_aaae ){_eadb ,_aaae =_aaae ,_eadb ;};_gagdc :=0;_dfag ,_eccd ,_cdgf :=_eadb .Date ();_bbed ,_ebcb ,_gdb :=_aaae .Date ();_dee ,_edebd :=int (_eccd ),int (_ebcb );_bdcb ,_cefb :=_fef (_dfag ,_dee ,_cdgf ,_dgfe ),_fef (_bbed ,_edebd ,_gdb ,_dgfe );if !_adbe (_dgfe ){return _gge (_bbed ,_edebd ,_cefb )-_gge (_dfag ,_dee ,_bdcb );};if _dgfe ==0{if (_dee ==2||_bdcb < 30)&&_gdb ==31{_cefb =31;}else if _edebd ==2&&_cefb ==_eaa (_bbed ,_edebd ){_cefb =_eaa (_bbed ,2);};}else {if _dee ==2&&_bdcb ==30{_bdcb =_eaa (_dfag ,2);};if _edebd ==2&&_cefb ==30{_cefb =_eaa (_bbed ,2);};};if _dfag < _bbed ||(_dfag ==_bbed &&_dee < _edebd ){_gagdc =30-_bdcb +1;_cdgf =1;_bdcb =1;_gegc :=_efd .Date (_dfag ,_efd .Month (_dee ),_cdgf ,0,0,0,0,_efd .UTC ).AddDate (0,1,0);if _gegc .Year ()< _bbed {_gagdc +=_debc (_gegc .Year (),int (_gegc .Month ()),12,_dgfe );_gegc =_gegc .AddDate (0,13-int (_gegc .Month ()),0);_gagdc +=_abc (_gegc .Year (),_bbed -1,_dgfe );};_gagdc +=_debc (_bbed ,int (_gegc .Month ()),_edebd -1,_dgfe );_gegc =_gegc .AddDate (0,_edebd -int (_gegc .Month ()),0);_dee =_gegc .Day ();};_gagdc +=_cefb -_bdcb ;if _gagdc > 0{return float64 (_gagdc );}else {return 0;};};func _bcfd (_gfbd int )int {if _gfbd < 1900{if _gfbd < 30{_gfbd +=2000;}else {_gfbd +=1900;};};return _gfbd ;};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cecc :=ctx .GetEpoch ();_bgfe ,_bbddf :=_cgfc (args [0].Value (),_cecc );if _bbddf !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ccbf :=_bgfe .Year ();return MakeBoolResult (_fecea (_ccbf ));};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aeae :=args [0];if _aeae .Type ==ResultTypeList {_fafe :=[][]Result {};for _ ,_caeg :=range _aeae .ValueList {_fafe =append (_fafe ,[]Result {_caeg });};return MakeArrayResult (_fafe );};_ccea :=make ([][]Result ,len (_aeae .ValueArray [0]));for _ ,_bcde :=range _aeae .ValueArray {for _bcdea ,_abca :=range _bcde {_ccea [_bcdea ]=append (_ccea [_bcdea ],_abca );};};return MakeArrayResult (_ccea );};const _geg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_bgdg PrefixVerticalRange )Update (q *_ad .UpdateQuery )Expression {if q .UpdateType ==_ad .UpdateActionRemoveColumn {_gaaf :=_bgdg ;_aabbf :=_bgdg ._bgfb .String ();if _aabbf ==q .SheetToUpdate {_accda :=q .ColumnIdx ;_gaaf ._beegc =_bd (_bgdg ._beegc ,_accda );_gaaf ._cgbaf =_bd (_bgdg ._cgbaf ,_accda );};return _gaaf ;};return _bgdg ;};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bafg :=0;_edadf :=false ;for _ ,_gbec :=range args {switch _gbec .Type {case ResultTypeList ,ResultTypeArray :_bbdf :=Xor (_gbec .ListValues ());if _bbdf .Type ==ResultTypeError {return _bbdf ;};if _bbdf .ValueNumber !=0{_bafg ++;};_edadf =true ;case ResultTypeNumber :if _gbec .ValueNumber !=0{_bafg ++;};_edadf =true ;case ResultTypeString :case ResultTypeError :return _gbec ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_edadf {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_bafg %2!=0);};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_ecgd :=len (args );if _ecgd < 3||_ecgd > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbb :=args [0].ValueNumber ;if _fbb !=float64 (int (_fbb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbef :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bada :=args [2].ValueNumber ;_bfdc :=0.0;if _ecgd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfdc =args [3].ValueNumber ;};_gbgae :=0.0;if _ecgd >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gbgae =args [4].ValueNumber ;if _gbgae !=0{_gbgae =1;};};_bgdf :=0.1;if _ecgd >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgdf =args [5].ValueNumber ;};_cbag :=100;_ccegc :=0;_dagd :=false ;_agebg :=1e-6;_dbgc :=_bgdf ;for _ccegc < _cbag &&!_dagd {_dddac :=_gg .Pow (_dbgc +1,_fbb );_ebbd :=_gg .Pow (_dbgc +1,_fbb -1);_caaf :=_dbgc *_gbgae +1;_egb :=_bbef *(_dddac -1);_cacdb :=_bfdc +_dddac *_bada +_egb *_caaf /_dbgc ;_accbg :=_fbb *_ebbd *_bada -_egb *_caaf /_gg .Pow (_dbgc ,2);_fcff :=(_fbb *_bbef *_ebbd *_caaf +_egb *_gbgae )/_dbgc ;_eaae :=_cacdb /(_accbg +_fcff );if _gg .Abs (_eaae )< _agebg {_dagd =true ;};_ccegc ++;_dbgc -=_eaae ;};return MakeNumberResult (_dbgc );};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acgg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffed :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcg :=args [2].ValueNumber ;if _gcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adcdc :=args [3].ValueNumber ;if _adcdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _adcdc > _gcg {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_cfdab :=(_acgg -_ffed )*(_gcg -_adcdc +1)*2;_geeb :=_gcg *(_gcg +1);return MakeNumberResult (_cfdab /_geeb );};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// GetFormat returns an empty string for the invalid reference context.
func (_afgac *ivr )GetFormat (cellRef string )string {return ""};type rmode byte ;

// Function is a standard function whose result only depends on its arguments.
type Function func (_gefdf []Result )Result ;

// Update updates the horizontal range references after removing a row/column.
func (_gcae HorizontalRange )Update (q *_ad .UpdateQuery )Expression {return _gcae };type node struct{_cfdg tokenType ;_eead string ;};func _ccaec (_affea ,_fdaaf Expression )(Expression ,Expression ,error ){_dfeg ,_acfdf :=_affea .(CellRef );if !_acfdf {return nil ,nil ,_f .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_affea .String ()));};_faege ,_acfdf :=_fdaaf .(CellRef );if !_acfdf {return nil ,nil ,_f .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fdaaf .String ()));};_bddaf ,_eecb :=_cf .ParseCellReference (_dfeg ._cfa );if _eecb !=nil {return nil ,nil ,_eecb ;};_eaadb ,_dgbba :=_cf .ParseCellReference (_faege ._cfa );if _dgbba !=nil {return nil ,nil ,_dgbba ;};_fdagc :=false ;if _bddaf .RowIdx > _eaadb .RowIdx {_fdagc =true ;_bddaf .RowIdx ,_eaadb .RowIdx =_eaadb .RowIdx ,_bddaf .RowIdx ;};if _bddaf .ColumnIdx > _eaadb .ColumnIdx {_fdagc =true ;_bddaf .ColumnIdx ,_eaadb .ColumnIdx =_eaadb .ColumnIdx ,_bddaf .ColumnIdx ;_bddaf .Column ,_eaadb .Column =_eaadb .Column ,_bddaf .Column ;};if _fdagc {return NewCellRef (_bddaf .String ()),NewCellRef (_eaadb .String ()),nil ;};return _affea ,_fdaaf ,nil ;};

// String returns a string representation of String.
func (_ffbga String )String ()string {return "\u0022"+_ffbga ._ccecd +"\u0022"};

// Reference returns a string reference value to a range with prefix.
func (_begbb PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_fgggf :=_begbb ._eggdc .Reference (ctx ,ev );_babbc :=_begbb ._gccb .Reference (ctx ,ev );_eacdc :=_begbb ._cffdg .Reference (ctx ,ev );if _fgggf .Type ==ReferenceTypeSheet &&_babbc .Type ==ReferenceTypeCell &&_eacdc .Type ==ReferenceTypeCell {return MakeRangeReference (_dfeeb (_fgggf ,_babbc ,_eacdc ));};return ReferenceInvalid ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_abgg :=args [0];switch _abgg .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_dccd :=0.0;_gdfgc :=0.0;for _ ,_cefa :=range _abgg .ValueString {_bbbb :=0.0;switch _cefa {case 'I':_bbbb =1;case 'V':_bbbb =5;case 'X':_bbbb =10;case 'L':_bbbb =50;case 'C':_bbbb =100;case 'D':_bbbb =500;case 'M':_bbbb =1000;};_dccd +=_bbbb ;switch {case _gdfgc ==_bbbb &&(_gdfgc ==5||_gdfgc ==50||_gdfgc ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_gdfgc ==_bbbb :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _gdfgc < _bbbb {_dccd -=2*_gdfgc ;};_gdfgc =_bbbb ;};return MakeNumberResult (_dccd );case ResultTypeError :return _abgg ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abgg .Type ));};};

// Update updates references in the PrefixExpr after removing a row/column.
func (_gfef PrefixExpr )Update (q *_ad .UpdateQuery )Expression {_bdfg :=_gfef ;_caebf :=_gfef ._cebae .String ();if _caebf ==q .SheetToUpdate {_fagg :=*q ;_fagg .UpdateCurrentSheet =true ;_bdfg ._agbag =_gfef ._agbag .Update (&_fagg );};return _bdfg ;};func _cecd (_addd ,_feag []float64 ,_aada float64 )float64 {_dfba :=_aada +1;_edfdf :=0.0;_fdec :=len (_addd );_gccf :=_feag [0];for _gbfbe :=1;_gbfbe < _fdec ;_gbfbe ++{_eceb :=(_feag [_gbfbe ]-_gccf )/365;_edfdf -=_eceb *_addd [_gbfbe ]/_gg .Pow (_dfba ,_eceb +1);};return _edfdf ;};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_cfeb .Lock ();defer _cfeb .Unlock ();if _cceeb ,_eaddb :=_aafbg [name ];_eaddb {return _cceeb ;};return nil ;};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };var _cfeb _bb .Mutex ;

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_edgce ,_aggfa ,_afec :=_gbef (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _afec .Type ==ResultTypeError {return _afec ;};if _aggfa < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _edgce ==0{return MakeNumberResult (0);};_gadfd :=_edgce < 0;if _gadfd {_edgce =-_edgce ;};_aebbd :=args [0].Value ();_ceec :=_ca .Split (_aebbd ,"\u002e");_cgd :=float64 (int (_edgce ));_beag :=_ceec [1];_cccg :=len (_beag );_eaad :=int (_gg .Log10 (_aggfa ))+1;_cccd :=float64 (_eaad -_cccg );_abcc ,_fde :=_g .ParseFloat (_beag ,64);if _fde !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_abcc *=_gg .Pow (10,_cccd );_adeg :=_cgd +_abcc /_aggfa ;if _gadfd {_adeg =-_adeg ;};return MakeNumberResult (_adeg );};func (_febg Result )AsString ()Result {switch _febg .Type {case ResultTypeNumber :return MakeStringResult (_febg .Value ());default:return _febg ;};};const _gcgea =57359;func (_acadg *yyParserImpl )Parse (yylex yyLexer )int {_eecdc :=_efd .Now ();var _ddeef int ;var _egdbba yySymType ;var _ggfdg []yySymType ;_ =_ggfdg ;_bgeg :=_acadg ._babbb [:];Nerrs :=0;Errflag :=0;_bgfga :=0;_acadg ._babfa =-1;_ceaa :=-1;defer func (){_bgfga =-1;_acadg ._babfa =-1;_ceaa =-1}();_fgaaa :=-1;goto _gcebd ;_gbcd :return 0;_agdaa :return 1;_gcebd :if _fdaa (_eecdc ){_ece .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _agdaa ;};if _aaef >=4{_c .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_cfcbc (_ceaa ),_aedb (_bgfga ));};_fgaaa ++;if _fgaaa >=len (_bgeg ){_adda :=make ([]yySymType ,len (_bgeg )*2);copy (_adda ,_bgeg );_bgeg =_adda ;};_bgeg [_fgaaa ]=_egdbba ;_bgeg [_fgaaa ]._ffce =_bgfga ;_ebee :if _fdaa (_eecdc ){_ece .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _agdaa ;};_ddeef =_fffg [_bgfga ];if _ddeef <=_fadf {goto _dbeed ;};if _acadg ._babfa < 0{_acadg ._babfa ,_ceaa =_afgc (yylex ,&_acadg ._fbfd );};_ddeef +=_ceaa ;if _ddeef < 0||_ddeef >=_fcga {goto _dbeed ;};_ddeef =_cbcec [_ddeef ];if _cbbe [_ddeef ]==_ceaa {_acadg ._babfa =-1;_ceaa =-1;_egdbba =_acadg ._fbfd ;_bgfga =_ddeef ;if Errflag > 0{Errflag --;};goto _gcebd ;};_dbeed :if _fdaa (_eecdc ){_ece .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _agdaa ;};_ddeef =_ccecb [_bgfga ];if _ddeef ==-2{if _acadg ._babfa < 0{_acadg ._babfa ,_ceaa =_afgc (yylex ,&_acadg ._fbfd );};_ddga :=0;for {if _eabba [_ddga +0]==-1&&_eabba [_ddga +1]==_bgfga {break ;};_ddga +=2;};for _ddga +=2;;_ddga +=2{_ddeef =_eabba [_ddga +0];if _ddeef < 0||_ddeef ==_ceaa {break ;};};_ddeef =_eabba [_ddga +1];if _ddeef < 0{goto _gbcd ;};};if _ddeef ==0{switch Errflag {case 0:yylex .Error (_dbebb (_bgfga ,_ceaa ));Nerrs ++;if _aaef >=1{_c .Printf ("\u0025\u0073",_aedb (_bgfga ));_c .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_cfcbc (_ceaa ));};fallthrough;case 1,2:Errflag =3;for _fgaaa >=0{_ddeef =_fffg [_bgeg [_fgaaa ]._ffce ]+_afdbd ;if _ddeef >=0&&_ddeef < _fcga {_bgfga =_cbcec [_ddeef ];if _cbbe [_bgfga ]==_afdbd {goto _gcebd ;};};if _aaef >=2{_c .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_bgeg [_fgaaa ]._ffce );};_fgaaa --;};goto _agdaa ;case 3:if _aaef >=2{_c .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_cfcbc (_ceaa ));};if _ceaa ==_dbaf {goto _agdaa ;};_acadg ._babfa =-1;_ceaa =-1;goto _ebee ;};};if _aaef >=2{_c .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_ddeef ,_aedb (_bgfga ));};_fabbgf :=_ddeef ;_gaece :=_fgaaa ;_ =_gaece ;_fgaaa -=_abff [_ddeef ];if _fgaaa +1>=len (_bgeg ){_afgb :=make ([]yySymType ,len (_bgeg )*2);copy (_afgb ,_bgeg );_bgeg =_afgb ;};_egdbba =_bgeg [_fgaaa +1];_ddeef =_baeb [_ddeef ];_afafa :=_abgbb [_ddeef ];_bfcge :=_afafa +_bgeg [_fgaaa ]._ffce +1;if _bfcge >=_fcga {_bgfga =_cbcec [_afafa ];}else {_bgfga =_cbcec [_bfcge ];if _cbbe [_bgfga ]!=-_ddeef {_bgfga =_cbcec [_afafa ];};};switch _fabbgf {case 1:_ggfdg =_bgeg [_gaece -1:_gaece +1];{yylex .(*plex )._dbafe =_egdbba ._dgbb ;};case 3:_ggfdg =_bgeg [_gaece -2:_gaece +1];{_egdbba ._dgbb =_ggfdg [2]._dgbb ;};case 4:_ggfdg =_bgeg [_gaece -4:_gaece +1];{};case 5:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewBool (_ggfdg [1]._dadad ._eead );};case 6:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewNumber (_ggfdg [1]._dadad ._eead );};case 7:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewString (_ggfdg [1]._dadad ._eead );};case 8:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewError (_ggfdg [1]._dadad ._eead );};case 9:_ggfdg =_bgeg [_gaece -2:_gaece +1];{_egdbba ._dgbb =_ggfdg [2]._dgbb ;};case 10:_ggfdg =_bgeg [_gaece -2:_gaece +1];{_egdbba ._dgbb =NewNegate (_ggfdg [2]._dgbb );};case 15:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =_ggfdg [2]._dgbb ;};case 17:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewConstArrayExpr (_ggfdg [2]._ggddd );};case 18:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._ggddd =append (_egdbba ._ggddd ,_ggfdg [1]._ddac );};case 19:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._ggddd =append (_ggfdg [1]._ggddd ,_ggfdg [3]._ddac );};case 20:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._ddac =append (_egdbba ._ddac ,_ggfdg [1]._dgbb );};case 21:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._ddac =append (_ggfdg [1]._ddac ,_ggfdg [3]._dgbb );};case 23:_ggfdg =_bgeg [_gaece -2:_gaece +1];{_egdbba ._dgbb =NewPrefixExpr (_ggfdg [1]._dgbb ,_ggfdg [2]._dgbb );};case 25:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewSheetPrefixExpr (_ggfdg [1]._dadad ._eead );};case 26:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewCellRef (_ggfdg [1]._dadad ._eead );};case 27:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewRange (_ggfdg [1]._dgbb ,_ggfdg [3]._dgbb );};case 28:_ggfdg =_bgeg [_gaece -4:_gaece +1];{_egdbba ._dgbb =NewPrefixRangeExpr (_ggfdg [1]._dgbb ,_ggfdg [2]._dgbb ,_ggfdg [4]._dgbb );};case 29:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewNamedRangeRef (_ggfdg [1]._dadad ._eead );};case 30:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewHorizontalRange (_ggfdg [1]._dadad ._eead );};case 31:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._dgbb =NewVerticalRange (_ggfdg [1]._dadad ._eead );};case 32:_ggfdg =_bgeg [_gaece -2:_gaece +1];{_egdbba ._dgbb =NewPrefixHorizontalRange (_ggfdg [1]._dgbb ,_ggfdg [2]._dadad ._eead );};case 33:_ggfdg =_bgeg [_gaece -2:_gaece +1];{_egdbba ._dgbb =NewPrefixVerticalRange (_ggfdg [1]._dgbb ,_ggfdg [2]._dadad ._eead );};case 34:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypePlus ,_ggfdg [3]._dgbb );};case 35:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeMinus ,_ggfdg [3]._dgbb );};case 36:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeMult ,_ggfdg [3]._dgbb );};case 37:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeDiv ,_ggfdg [3]._dgbb );};case 38:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeExp ,_ggfdg [3]._dgbb );};case 39:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeLT ,_ggfdg [3]._dgbb );};case 40:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeGT ,_ggfdg [3]._dgbb );};case 41:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeLEQ ,_ggfdg [3]._dgbb );};case 42:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeGEQ ,_ggfdg [3]._dgbb );};case 43:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeEQ ,_ggfdg [3]._dgbb );};case 44:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeNE ,_ggfdg [3]._dgbb );};case 45:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewBinaryExpr (_ggfdg [1]._dgbb ,BinOpTypeConcat ,_ggfdg [3]._dgbb );};case 47:_ggfdg =_bgeg [_gaece -2:_gaece +1];{_egdbba ._dgbb =NewFunction (_ggfdg [1]._dadad ._eead ,nil );};case 48:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._dgbb =NewFunction (_ggfdg [1]._dadad ._eead ,_ggfdg [2]._ddac );};case 49:_ggfdg =_bgeg [_gaece -1:_gaece +1];{_egdbba ._ddac =append (_egdbba ._ddac ,_ggfdg [1]._dgbb );};case 50:_ggfdg =_bgeg [_gaece -3:_gaece +1];{_egdbba ._ddac =append (_ggfdg [1]._ddac ,_ggfdg [3]._dgbb );};case 53:_ggfdg =_bgeg [_gaece -0:_gaece +1];{_egdbba ._dgbb =NewEmptyExpr ();};};goto _gcebd ;};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_gafea :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gafea =int (args [1].ValueNumber );if _gafea < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _gafea ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_geefa :=args [0].Value ();_gbcce :=len (_geefa );if _gafea > _gbcce {return MakeStringResult (_geefa );};return MakeStringResult (_geefa [_gbcce -_gafea :_gbcce ]);};var _gade =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _caecc (args ,_acae )};

// Eval evaluates and returns a boolean.
func (_aca Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_aca ._cd )};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};type amorArgs struct{_bga float64 ;_gafb float64 ;_feae float64 ;_gadf float64 ;_degg int ;_cebe float64 ;_cafga int ;};

// GetFilename returns an empty string for the invalid reference context.
func (_dgef *ivr )GetFilename ()string {return ""};

// HasFormula returns FALSE for the invalid reference context.
func (_gcbee *ivr )HasFormula (cellRef string )bool {return false };

// Reference returns an invalid reference for FunctionCall.
func (_abda FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};func (_ebdbd PrefixVerticalRange )verticalRangeReference (_gddca string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gddca ,_ebdbd ._beegc ,_ebdbd ._cgbaf );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Eval evaluates and returns an expression with prefix.
func (_ceda PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_ecbfc :=_ceda ._cebae .Reference (ctx ,ev );switch _ecbfc .Type {case ReferenceTypeSheet :if _adgdg (_ecbfc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ecbfc .Value ));};_bcecbe :=ctx .Sheet (_ecbfc .Value );return _ceda ._agbag .Eval (_bcecbe ,ev );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecbfc .Type ));};};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfaba :=args [0].AsString ();if _cfaba .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_egdc :=_b .Buffer {};for _ ,_feecd :=range _cfaba .ValueString {if _ef .IsPrint (_feecd ){_egdc .WriteRune (_feecd );};};return MakeStringResult (_egdc .String ());};func _babd (_efaa []Result ,_bcage bool )Result {var _cecgg string ;if _bcage {_cecgg ="\u004c\u0041\u0052G\u0045";}else {_cecgg ="\u0053\u004d\u0041L\u004c";};if len (_efaa )!=2{return MakeErrorResult (_cecgg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aeee :=_efaa [0];var _gfda [][]Result ;switch _aeee .Type {case ResultTypeArray :_gfda =_aeee .ValueArray ;case ResultTypeList :_gfda =[][]Result {_aeee .ValueList };default:return MakeErrorResult (_cecgg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_gfda )==0{return MakeErrorResult (_cecgg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _efaa [1].Type !=ResultTypeNumber {return MakeErrorResult (_cecgg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ffebe :=_efaa [1].ValueNumber ;if _ffebe < 1{return MakeErrorResultType (ErrorTypeNum ,_cecgg +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_agdc :=int (_ffebe );if float64 (_agdc )!=_ffebe {return MakeErrorResultType (ErrorTypeNum ,_cecgg +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_edgea :=[]float64 {};for _ ,_ebcg :=range _gfda {for _ ,_gadac :=range _ebcg {if _gadac .Type ==ResultTypeNumber {_edgea =append (_edgea ,_gadac .ValueNumber );};};};if _agdc > len (_edgea ){return MakeErrorResultType (ErrorTypeNum ,_cecgg +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_deddb :=_bcb .MergeSort (_edgea );if _bcage {return MakeNumberResult (_deddb [len (_deddb )-_agdc ]);}else {return MakeNumberResult (_deddb [_agdc -1]);};};

// FunctionCall is a function call expression.
type FunctionCall struct{_cgfb string ;_deebc []Expression ;};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faage :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbff :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abdb :=args [2].ValueNumber ;if _abdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbga :=args [3].ValueNumber ;return MakeNumberResult (_fbga *_faage *(_bbff /_abdb -1));};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_fgad :s }};

// Reference returns an invalid reference for EmptyExpr.
func (_dbe EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ebfbc (_efab Result )Result {if _efab .Type ==ResultTypeEmpty {return _efab ;};_ecbe :=_efab .AsString ();if _ecbe .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _efab .IsBoolean {if _ecbe .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _ecbe .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_ca .ToLower (_ecbe .ValueString ));};};const _affgc =57349;const _bgb =_efd .Second *1;func (_gcd *defEval )checkLastEvalIsRef (_bca Context ,_ffae Expression ){switch _ffae .(type ){case FunctionCall :switch _ffae .(FunctionCall )._cgfb {case "\u0049\u0053\u0052E\u0046":for _ ,_aeg :=range _ffae .(FunctionCall )._deebc {switch _aeg .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_cga :=_aeg .Eval (_bca ,_gcd );_gcd ._fgcc =!(_cga .Type ==ResultTypeError &&_cga .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_gcd ._fgcc =false ;};};};};};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// String returns a string representation of Number.
func (_afgef Number )String ()string {return _g .FormatFloat (_afgef ._ecega ,'f',-1,64)};func _gfdef (_ddab []Result ,_fdda bool )Result {_dbcb :="\u004d\u0041\u0058";if _fdda {_dbcb ="\u004d\u0041\u0058\u0041";};if len (_ddab )==0{return MakeErrorResult (_dbcb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aafg :=-_gg .MaxFloat64 ;for _ ,_gefgf :=range _ddab {switch _gefgf .Type {case ResultTypeNumber :if (_fdda ||!_gefgf .IsBoolean )&&_gefgf .ValueNumber > _aafg {_aafg =_gefgf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fefef :=_gfdef (_gefgf .ListValues (),_fdda );if _fefef .ValueNumber > _aafg {_aafg =_fefef .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_acbaa :=0.0;if _fdda {_acbaa =_gefgf .AsNumber ().ValueNumber ;};if _acbaa > _aafg {_aafg =_acbaa ;};default:_ece .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_dbcb +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gefgf .Type );};};if _aafg ==-_gg .MaxFloat64 {_aafg =0;};return MakeNumberResult (_aafg );};func _faeee (_cbeg float64 )float64 {return float64 (int (_cbeg +0.5))};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_afbde :=_dbcf (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _afbde .Type !=ResultTypeEmpty {return _afbde ;};_gdfb :=_agfac (args );return MakeNumberResult (float64 (len (_gdfb )));};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bacb :=_ca .Split (v ,"\u003a");if len (_bacb )!=2{return nil ;};_cfbbb ,_ :=_g .Atoi (_bacb [0]);_dddbg ,_ :=_g .Atoi (_bacb [1]);if _cfbbb > _dddbg {_cfbbb ,_dddbg =_dddbg ,_cfbbb ;};return HorizontalRange {_bbccf :_cfbbb ,_fggc :_dddbg };};const _acgea =57348;func (_cgcdad tokenType )String ()string {return _cfcbc (int (_cgcdad ))};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eaef :=args [0].AsString ();if _eaef .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_eaef .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_eaef .ValueString [0]));};func (_daca PrefixHorizontalRange )horizontalRangeReference (_bgba string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bgba ,_daca ._dffc ,_daca ._gagf );};func _fbbd (_edabb Result )[]Result {_fcea :=_edabb .ValueList ;if _edabb .Type ==ResultTypeArray {_fcea =nil ;for _ ,_ggca :=range _edabb .ValueArray {if len (_ggca )> 0{_fcea =append (_fcea ,_ggca [0]);}else {_fcea =append (_fcea ,_agg );};};};return _fcea ;};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efgb :=args [0].AsString ();if _efgb .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_begb :=args [1].AsNumber ();if _begb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cddf :=_efgb .ValueString ;if len (_cddf )> 2&&(_ca .HasPrefix (_cddf ,"\u0030\u0078")||_ca .HasPrefix (_cddf ,"\u0030\u0058")){_cddf =_cddf [2:];};_aged ,_cegd :=_g .ParseInt (_cddf ,int (_begb .ValueNumber ),64);if _cegd !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_aged ));};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func (_faag *evCache )SetCache (key string ,value Result ){_faag ._ddc .Lock ();_faag ._dfg [key ]=value ;_faag ._ddc .Unlock ();};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_aegf ,_aff :=_aebb (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _aff .Type ==ResultTypeError {return _aff ;};return MakeNumberResult (_beca (_aegf ._aeagd ,_aegf ._gdfg ,_aegf ._ggfc ,_aegf ._ffbf ));};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_bcbc PrefixHorizontalRange )Update (q *_ad .UpdateQuery )Expression {return _bcbc };

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_bed string ,_abd Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ffc string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_efd .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_afc int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_cdb string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_cbgg string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ccg string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cfae string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_bcf string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_bbfd ,_ggd int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_fcd string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_afd string ,_eab bool );

// NamedRange returns a named range.
NamedRange (_gdf string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_gce ,_bbb uint32 );};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _caecc (args ,_cagda )};

// Eval evaluates and returns the result of a function call.
func (_edccc FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_bafag :=LookupFunction (_edccc ._cgfb );if _bafag !=nil {_dbccc :=make ([]Result ,len (_edccc ._deebc ));for _cdbfd ,_fedbd :=range _edccc ._deebc {_dbccc [_cdbfd ]=_fedbd .Eval (ctx ,ev );_dbccc [_cdbfd ].Ref =_fedbd .Reference (ctx ,ev );};if _ ,_dfaed :=_geefb [_edccc ._cgfb ];!_dfaed {if _gggf ,_dbdb :=_defc (_dbccc );_gggf {return _dbdb ;};};return _bafag (_dbccc );};_afcaa :=LookupFunctionComplex (_edccc ._cgfb );if _afcaa !=nil {_ebcbg :=make ([]Result ,len (_edccc ._deebc ));for _bcgeb ,_efcd :=range _edccc ._deebc {_ebcbg [_bcgeb ]=_efcd .Eval (ctx ,ev );_ebcbg [_bcgeb ].Ref =_efcd .Reference (ctx ,ev );};if _ ,_geaef :=_geefb [_edccc ._cgfb ];!_geaef {if _eccge ,_gdcb :=_defc (_ebcbg );_eccge {return _gdcb ;};};return _afcaa (ctx ,ev ,_ebcbg );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_edccc ._cgfb );};func _ffda (_ccge []Result ,_fefg string )(*cumulArgs ,Result ){if len (_ccge )!=6{return nil ,MakeErrorResult (_fefg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ccge [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fefg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gffc :=_ccge [0].ValueNumber ;if _gffc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ccge [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fefg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adba :=_ccge [1].ValueNumber ;if _adba <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _ccge [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fefg +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aedf :=_ccge [2].ValueNumber ;if _aedf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ccge [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fefg +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dbfd :=_ccge [3].ValueNumber ;if _dbfd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ccge [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fefg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acdf :=_ccge [4].ValueNumber ;if _acdf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _acdf < _dbfd {return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _acdf > _adba {return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_ffef :=int (_ccge [5].ValueNumber );if _ffef !=0&&_ffef !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_fefg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_gffc ,_adba ,_aedf ,_dbfd ,_acdf ,_ffef },_agg ;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bbbgg ,_agbac :=_ebbgg ("\u0046\u0049\u004e\u0044",args );if _agbac .Type !=ResultTypeEmpty {return _agbac ;};_dbbfb :=_ca .ToLower (_bbbgg ._ddebe );_abed :=_ca .ToLower (_bbbgg ._bcgff );if _dbbfb ==""{return MakeNumberResult (1.0);};_eccgf :=_bbbgg ._gdbb -1;_fdeac :=1;_ecfg :=0;for _aggcb :=range _abed {if _aggcb !=0{_aaccg :=1;if _aggcb -_ecfg > 1{_aaccg =2;};_fdeac +=_aaccg ;};if _fdeac > _eccgf {_effcc :=_d .Index (_dbbfb ,_abed [_aggcb :]);if _effcc ==0{return MakeNumberResult (float64 (_fdeac ));};};_ecfg =_aggcb ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _fge =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_acbb :=_b .Buffer {};for _ ,_dagdg :=range args {switch _dagdg .Type {case ResultTypeString :_acbb .WriteString (_dagdg .ValueString );case ResultTypeNumber :var _fcde string ;if _dagdg .IsBoolean {if _dagdg .ValueNumber ==0{_fcde ="\u0046\u0041\u004cS\u0045";}else {_fcde ="\u0054\u0052\u0055\u0045";};}else {_fcde =_dagdg .AsString ().ValueString ;};_acbb .WriteString (_fcde );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_acbb .String ());};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_df ,_ggf Expression ;_ecc BinOpType ;};

// Eval evaluates and returns a number.
func (_gagcc Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_gagcc ._ecega )};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_bggf ,_dfcee :=_aebb (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _dfcee .Type ==ResultTypeError {return _dfcee ;};return MakeNumberResult (_gbbf (_bggf ._aeagd ,_bggf ._gdfg ,_bggf ._ggfc ,_bggf ._ffbf ));};func _dgf (_edb ,_bgg float64 ,_aeag int )(float64 ,Result ){_acf ,_fdd :=_dfff (_edb ),_dfff (_bgg );_gbc :=_acf .Unix ();_cefg :=_fdd .Unix ();if _gbc ==_cefg {return 0,_agg ;};_cbaf ,_bcgb ,_edg :=_acf .Date ();_gcad ,_adb ,_edab :=_fdd .Date ();_cfff ,_bbgf :=int (_bcgb ),int (_adb );var _eccf ,_edd float64 ;switch _aeag {case 0:if _edg ==31{_edg --;};if _edg ==30&&_edab ==31{_edab --;}else if _fgbd :=_fecea (_cbaf );_cfff ==2&&((_fgbd &&_edg ==29)||(!_fgbd &&_edg ==28)){_edg =30;if _gggg :=_fecea (_gcad );_bbgf ==2&&((_gggg &&_edab ==29)||(!_gggg &&_edab ==28)){_edab =30;};};_eccf =float64 ((_gcad -_cbaf )*360+(_bbgf -_cfff )*30+(_edab -_edg ));_edd =360;case 1:_eccf =_bgg -_edb ;_cdg :=_cbaf !=_gcad ;if _cdg &&(_gcad !=_cbaf +1||_cfff < _bbgf ||(_cfff ==_bbgf &&_edg < _edab )){_gfa :=0;for _gac :=_cbaf ;_gac <=_gcad ;_gac ++{_gfa +=_gdgf (_gac ,1);};_edd =float64 (_gfa )/float64 (_gcad -_cbaf +1);}else {if !_cdg &&_fecea (_cbaf ){_edd =366;}else {if _cdg &&((_fecea (_cbaf )&&(_cfff < 2||(_cfff ==2&&_edg <=29)))||(_fecea (_gcad )&&(_bbgf > 2||(_bbgf ==2&&_edab ==29)))){_edd =366;}else {_edd =365;};};};case 2:_eccf =_bgg -_edb ;_edd =360;case 3:_eccf =_bgg -_edb ;_edd =365;case 4:if _edg ==31{_edg --;};if _edab ==31{_edab --;};_eccf =float64 ((_gcad -_cbaf )*360+(_bbgf -_cfff )*30+(_edab -_edg ));_edd =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _eccf /_edd ,_agg ;};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_eacd :=len (args );if _eacd !=6&&_eacd !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_accg ,_edfa ,_dafc :=_ggc (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _dafc .Type ==ResultTypeError {return _dafc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbgc :=args [2].ValueNumber ;if _bbgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gfce :=args [3].ValueNumber ;if _gfce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aedc :=args [4].ValueNumber ;if _aedc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afcg :=args [5];if _afcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbga :=_afcg .ValueNumber ;if !_faf (_gbga ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_acebd :=0;if _eacd ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acebd =int (args [6].ValueNumber );if !_fdgc (_acebd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_adccg ,_dafc :=_edebf (_accg ,_edfa ,_bbgc ,_gfce ,_aedc ,_gbga ,_acebd );if _dafc .Type ==ResultTypeError {return _dafc ;};return MakeNumberResult (_adccg );};var _baf =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_agdgf :=len (args );if _agdgf < 3||_agdgf > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdeb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agba :=args [1].ValueNumber ;if _agba ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdge :=args [2].ValueNumber ;_eacb :=0.0;if _agdgf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eacb =args [3].ValueNumber ;};_bfab :=0.0;if _agdgf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfab =args [4].ValueNumber ;if _bfab !=0{_bfab =1;};};var _ebec float64 ;if _cdeb ==0{_ebec =(_bdge +_eacb )/_agba ;}else {_ddcc :=_gg .Pow (1+_cdeb ,_agba );if _bfab ==1{_ebec =(_eacb *_cdeb /(_ddcc -1)+_bdge *_cdeb /(1-1/_ddcc ))/(1+_cdeb );}else {_ebec =_eacb *_cdeb /(_ddcc -1)+_bdge *_cdeb /(1-1/_ddcc );};};return MakeNumberResult (-_ebec );};func _adca (_caad Context ,_cffc Evaluator ,_aaeaa ,_bgdbb string )Result {_ceeca ,_ccgge :=_cf .ParseCellReference (_aaeaa );if _ccgge !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_aaeaa ,_ccgge .Error ()));};_adfeg ,_egbfdc :=_ceeca .ColumnIdx ,_ceeca .RowIdx ;_edcb ,_aceg :=_cf .ParseCellReference (_bgdbb );if _aceg !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bgdbb ,_aceg .Error ()));};_caega ,_ggebd :=_edcb .ColumnIdx ,_edcb .RowIdx ;_bbaec :=[][]Result {};for _fegec :=_egbfdc ;_fegec <=_ggebd ;_fegec ++{_becg :=[]Result {};for _aaeff :=_adfeg ;_aaeff <=_caega ;_aaeff ++{_fbge :=_caad .Cell (_c .Sprintf ("\u0025\u0073\u0025\u0064",_cf .IndexToColumn (_aaeff ),_fegec ),_cffc );_becg =append (_becg ,_fbge );};_bbaec =append (_bbaec ,_becg );};if len (_bbaec )==1{if len (_bbaec [0])==1{return _bbaec [0][0];};return MakeListResult (_bbaec [0]);};return MakeArrayResult (_bbaec );};var _ccecb =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};func _bafa (_cbda ,_fggg []float64 ,_def float64 )Result {_ada :=false ;_faae :=false ;for _dbefe :=0;_dbefe < len (_cbda );_dbefe ++{if _cbda [_dbefe ]> 0{_ada =true ;};if _cbda [_dbefe ]< 0{_faae =true ;};};if !_ada ||!_faae {return MakeErrorResultType (ErrorTypeNum ,"");};_fbece :=_def ;_fabb :=1e-10;_feab :=0;_afbc :=50;_egcc :=false ;for {_cegf :=_abbbg (_cbda ,_fggg ,_fbece );_dfae :=_fbece -_cegf /_cecd (_cbda ,_fggg ,_fbece );_efef :=_gg .Abs (_dfae -_fbece );_fbece =_dfae ;_feab ++;if _efef <=_fabb ||_gg .Abs (_cegf )<=_fabb {break ;};if _feab > _afbc {_egcc =true ;break ;};};if _egcc ||_gg .IsNaN (_fbece )||_gg .IsInf (_fbece ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_fbece );};var _abaad =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};const _gfd ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};func _beca (_cega ,_fff float64 ,_ddec ,_bggb int )float64 {_bac :=_dfff (_cega );_bdcf :=_dfff (_fff );_ggee :=_edca (_bac ,_bdcf ,_ddec ,_bggb );return _afbd (_ggee ,_bac ,_bggb );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_fgfb :=args [0];switch _fgfb .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_eaaa :=_dfff (_fgfb .ValueNumber );return MakeNumberResult (float64 (_eaaa .Month ()));case ResultTypeString :_efaee :=_ca .ToLower (_fgfb .ValueString );if !_abe (_efaee ){_ ,_ ,_ ,_ ,_eaab ,_cec :=_fcca (_efaee );if _cec .Type ==ResultTypeError {_cec .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _cec ;};if _eaab {return MakeNumberResult (1);};};_ ,_acbf ,_ ,_ ,_cef :=_dcbb (_efaee );if _cef .Type ==ResultTypeError {return _cef ;};return MakeNumberResult (float64 (_acbf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// LastColumn returns empty string for the invalid reference context.
func (_befba *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_cfa :v }};

// Update returns the same object as updating sheet references does not affect Bool.
func (_gd Bool )Update (q *_ad .UpdateQuery )Expression {return _gd };

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aebff :=int (args [0].ValueNumber );return MakeBoolResult (_aebff !=_aebff /2*2);};const _fdcdc int =30;

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dgc :=args [0];switch _dgc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_cge :=_dfff (_dgc .ValueNumber );return MakeNumberResult (float64 (_cge .Minute ()));case ResultTypeString :_bge :=_ca .ToLower (_dgc .ValueString );if !_cdc (_bge ){_ ,_ ,_ ,_ebf ,_afdd :=_dcbb (_bge );if _afdd .Type ==ResultTypeError {_afdd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _afdd ;};if _ebf {return MakeNumberResult (0);};};_ ,_cegc ,_ ,_ ,_ ,_cagd :=_fcca (_bge );if _cagd .Type ==ResultTypeError {return _cagd ;};return MakeNumberResult (float64 (_cegc ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func _eaa (_debd ,_daad int )int {if _daad ==2&&_fecea (_debd ){return 29;}else {return _baf [_daad -1];};};

// Eval evaluates and returns the result of a constant array expression.
func (_aaf ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_db :=[][]Result {};for _ ,_faa :=range _aaf ._ae {_bbd :=[]Result {};for _ ,_efc :=range _faa {_bbd =append (_bbd ,_efc .Eval (ctx ,ev ));};_db =append (_db ,_bbd );};return MakeArrayResult (_db );};const _cac =86400000000000;func _dgcc (_dfdb ,_gadfe ,_feeg ,_dad float64 ,_beaeg int )float64 {var _gecga float64 ;if _dfdb ==0{_gecga =_dad +_feeg *_gadfe ;}else {_cdfg :=_gg .Pow (1+_dfdb ,_gadfe );if _beaeg ==1{_gecga =_dad *_cdfg +_feeg *(1+_dfdb )*(_cdfg -1)/_dfdb ;}else {_gecga =_dad *_cdfg +_feeg *(_cdfg -1)/_dfdb ;};};return -_gecga ;};var _ecbca =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _bccge =57363;

// Value returns a string version of the result.
func (_gfca Result )Value ()string {switch _gfca .Type {case ResultTypeNumber :_dcac :=_g .FormatFloat (_gfca .ValueNumber ,'f',-1,64);if len (_dcac )> 12{_gfcce :=12;for _cecgc :=_gfcce ;_cecgc > 0&&_dcac [_cecgc ]=='0';_cecgc --{_gfcce --;};_dcac =_dcac [0:_gfcce +1];};return _dcac ;case ResultTypeError :return _gfca .ValueString ;case ResultTypeString :return _gfca .ValueString ;case ResultTypeList :if len (_gfca .ValueList )==0{return "";};return _gfca .ValueList [0].Value ();case ResultTypeArray :if len (_gfca .ValueArray )==0||len (_gfca .ValueArray [0])==0{return "";};return _gfca .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cabc :=args [0].AsNumber ();_fgdab :=args [1].AsNumber ();_ddge :=args [2].AsNumber ();_ebbcc :=args [3].ListValues ();if _cabc .Type !=ResultTypeNumber ||_fgdab .Type !=ResultTypeNumber ||_ddge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_afae :=float64 (0);for _ggeec ,_bdbf :=range _ebbcc {_afae +=_bdbf .ValueNumber *_gg .Pow (_cabc .ValueNumber ,_fgdab .ValueNumber +float64 (_ggeec )*_ddge .ValueNumber );};return MakeNumberResult (_afae );};const _cgcb =16;

// Reference returns an invalid reference for Bool.
func (_ea Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// String returns a string representation of PrefixExpr.
func (_acfdc PrefixExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021%\u0073",_acfdc ._cebae .String (),_acfdc ._agbag .String ());};

// String returns a string representation of a vertical range.
func (_cdcdb VerticalRange )String ()string {return _cdcdb .verticalRangeReference ()};

// String returns a string representation of FunctionCall expression.
func (_cfce FunctionCall )String ()string {_fffag :=_b .Buffer {};_fffag .WriteString (_cfce ._cgfb );_fffag .WriteString ("\u0028");_gaba :=len (_cfce ._deebc )-1;for _cabd ,_gadec :=range _cfce ._deebc {_fffag .WriteString (_gadec .String ());if _cabd !=_gaba {_fffag .WriteString ("\u002c");};};_fffag .WriteString ("\u0029");return _fffag .String ();};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ae [][]Expression };

// IsBool returns false for the invalid reference context.
func (_egge *ivr )IsBool (cellRef string )bool {return false };

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_ggded :=args [0].ValueNumber ;if _ggded <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_fdad :=float64 (int (args [1].ValueNumber ));if _fdad < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_gg .Pow (_ggded +1,1/_fdad )-1)*_fdad );};func _dfad (_cecfg string ,_gggcd []Result )(*parsedReplaceObject ,Result ){if len (_gggcd )!=4{return nil ,MakeErrorResult (_cecfg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gggcd [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_cecfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_ebbgf :=_gggcd [0].ValueString ;if _gggcd [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cecfg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_bcfg :=int (_gggcd [1].ValueNumber )-1;if _gggcd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cecfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_agbg :=int (_gggcd [2].ValueNumber );if _gggcd [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_cecfg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_aadag :=_gggcd [3].ValueString ;return &parsedReplaceObject {_ebbgf ,_bcfg ,_agbg ,_aadag },_agg ;};const _gadc =57355;

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fdaf :=[]float64 {};for _ ,_fgac :=range args {switch _fgac .Type {case ResultTypeString :_fcb :=_fgac .AsNumber ();if _fcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fdaf =append (_fdaf ,_fcb .ValueNumber );case ResultTypeList ,ResultTypeArray :_gdgb :=GCD (_fgac .ListValues ());if _gdgb .Type !=ResultTypeNumber {return _gdgb ;};_fdaf =append (_fdaf ,_gdgb .ValueNumber );case ResultTypeNumber :_fdaf =append (_fdaf ,_fgac .ValueNumber );case ResultTypeError :return _fgac ;default:return MakeErrorResult (_c .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fgac .Type ));};};if _fdaf [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_fdaf )==1{return MakeNumberResult (_fdaf [0]);};_ggeb :=_fdaf [0];for _bgbd :=1;_bgbd < len (_fdaf );_bgbd ++{if _fdaf [_bgbd ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggeb =_bcgbe (_ggeb ,_fdaf [_bgbd ]);};return MakeNumberResult (_ggeb );};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_cgggg :=len (args );if _cgggg < 3||_cgggg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_abae :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbca :=args [1].ValueNumber ;if _gbca !=float64 (int (_gbca )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdca :=args [2].ValueNumber ;_efea :=0.0;if _cgggg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efea =args [3].ValueNumber ;};_agdg :=0;if _cgggg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_agdg =int (args [4].ValueNumber );if _agdg !=0{_agdg =1;};};return MakeNumberResult (_dgcc (_abae ,_gbca ,_cdca ,_efea ,_agdg ));};func _aedb (_acbbe int )string {if _acbbe >=0&&_acbbe < len (_dfagf ){if _dfagf [_acbbe ]!=""{return _dfagf [_acbbe ];};};return _c .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_acbbe );};const _caccc =57377;var _gfgc =[...]int {0};func _gbbf (_gecg ,_ecb float64 ,_bbac ,_cafd int )float64 {_bcgc :=_dfff (_gecg );_debf :=_dfff (_ecb );if _cafd ==1{_cecf :=_edca (_bcgc ,_debf ,_bbac ,1);_cgee :=_cecf .AddDate (0,12/_bbac ,0);return _afbd (_cecf ,_cgee ,_cafd );};return float64 (_gdgf (0,_cafd ))/float64 (_bbac );};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adbc :=args [0].Ref ;if _adbc .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_adbc .Value ));};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_dbgf :=len (args );if _dbgf < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aded :=args [0].ValueNumber ;if _aded ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bfeg :=[]float64 {};for _ ,_ceeb :=range args [1:]{switch _ceeb .Type {case ResultTypeNumber :_bfeg =append (_bfeg ,_ceeb .ValueNumber );case ResultTypeArray ,ResultTypeList :_gegce :=_gaebb (_ceeb );for _ ,_fba :=range _gegce {for _ ,_bdcc :=range _fba {if _bdcc .Type ==ResultTypeNumber &&!_bdcc .IsBoolean {_bfeg =append (_bfeg ,_bdcc .ValueNumber );};};};};};_edgd :=0.0;for _cadfd ,_cggd :=range _bfeg {_edgd +=_cggd /_gg .Pow (1+_aded ,float64 (_cadfd )+1);};return MakeNumberResult (_edgd );};func _fd (_ff Result )bool {if _ff .Type ==ResultTypeString {return _ff .ValueString =="";};return _ff .ValueNumber ==0;};type noCache struct{};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// String returns a string representation for Negate.
func (_acbbf Negate )String ()string {return "\u002d"+_acbbf ._gebgbe .String ()};func _ggfd (_gfgg ,_bfag ,_fabg ,_edcc ,_bdfa float64 ,_egaf int )float64 {_edcf :=_cccb (_gfgg ,_fabg ,_edcc ,_bdfa ,_egaf );var _gcce float64 ;if _bfag ==1{if _egaf ==1{_gcce =0;}else {_gcce =-_edcc ;};}else {if _egaf ==1{_gcce =_dgcc (_gfgg ,_bfag -2,_edcf ,_edcc ,1)-_edcf ;}else {_gcce =_dgcc (_gfgg ,_bfag -1,_edcf ,_edcc ,0);};};return _gcce *_gfgg ;};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_aebe :=args [0].AsString ();if _aebe .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_aebe .ValueString ,ev );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_eggdc ,_gccb ,_cffdg Expression };

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _bcgbe (_cdgb ,_daab float64 )float64 {_cdgb =_gg .Trunc (_cdgb );_daab =_gg .Trunc (_daab );if _cdgb ==0{return _daab ;};if _daab ==0{return _cdgb ;};for _cdgb !=_daab {if _cdgb > _daab {_cdgb =_cdgb -_daab ;}else {_daab =_daab -_cdgb ;};};return _cdgb ;};const _cafa =57376;

// Reference returns an invalid reference for Negate.
func (_fggb Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bde ,_gabc ,_bcdb :=_ggc (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _bcdb .Type ==ResultTypeError {return _bcdb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bded :=_gabc -_bde ;if _bded > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dfbaf :=args [2].ValueNumber ;if _dfbaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_dfbaf *_bded /360));};const _cdfcb ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";func _bd (_adg string ,_bab uint32 )string {_ggfe :=_cf .ColumnToIndex (_adg );if _ggfe ==_bab {return "\u0023\u0052\u0045F\u0021";}else if _ggfe > _bab {return _cf .IndexToColumn (_ggfe -1);}else {return _adg ;};};var _eebb []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _abbbg (_ddfd ,_dfb []float64 ,_eade float64 )float64 {_adaf :=_eade +1;_gcac :=_ddfd [0];_eadcb :=len (_ddfd );_gabe :=_dfb [0];for _edfd :=1;_edfd < _eadcb ;_edfd ++{_gcac +=_ddfd [_edfd ]/_gg .Pow (_adaf ,(_dfb [_edfd ]-_gabe )/365);};return _gcac ;};var _bdbdc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func (_faga ResultType )String ()string {if _faga >=ResultType (len (_ffgd )-1){return _c .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_faga );};return _cdfd [_ffgd [_faga ]:_ffgd [_faga +1]];};var _bcff =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _gabca *_ec .Rand ;var _cff =[]*_fg .Regexp {};func _daacg (_adbae float64 ,_cbebb *criteriaRegex )bool {_aedee ,_defb :=_g .ParseFloat (_cbebb ._efbbb ,64);if _defb !=nil {return false ;};switch _cbebb ._abace {case _faec :return _adbae ==_aedee ;case _cegg :return _adbae <=_aedee ;case _dgaa :return _adbae >=_aedee ;case _bbag :return _adbae < _aedee ;case _ccbgg :return _adbae > _aedee ;};return false ;};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_agag ,_fcgf string };func _gabd (_dbcd string ,_bece func (_facab float64 )float64 )Function {return func (_gbdc []Result )Result {if len (_gbdc )!=1{return MakeErrorResult (_dbcd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_feba :=_gbdc [0].AsNumber ();switch _feba .Type {case ResultTypeNumber :_fgdcd :=_bece (_feba .ValueNumber );if _gg .IsNaN (_fgdcd ){return MakeErrorResult (_dbcd +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gg .IsInf (_fgdcd ,0){return MakeErrorResult (_dbcd +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fgdcd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_dbcd +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fgdcd );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_dbcd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _feba ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbcd ,_feba .Type ));};};};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fgce :=args [0];_fdgf :=args [1];if _fdgf .Type !=ResultTypeArray &&_fdgf .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gdgd :=_fbbd (_fdgf );_bbad :=-1;for _daec ,_ggbad :=range _gdgd {if _bcgbf (_fgce ,_ggbad ,false ,false )==_bbfe {_bbad =_daec ;};};if _bbad ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_gbbgf :=_gdgd ;if len (args )==3{_gbbgf =_fbbd (args [2]);};if _bbad < 0||_bbad >=len (_gbbgf ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _gbbgf [_bbad ];};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfb :=ctx .GetEpoch ();_ecd ,_aed :=_cgfc (args [0].Value (),_cfb );if _aed !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_ecd .Year ()));};

// Eval evaluates and returns the result of an error expression.
func (_gf Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_gf ._cada )};

// Db implements the Excel DB function.
func Db (args []Result )Result {_gaeg :=len (args );if _gaeg !=4&&_gaeg !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eeaf :=args [0].ValueNumber ;if _eeaf < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egff :=args [1].ValueNumber ;if _egff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgad :=args [2].ValueNumber ;if _cgad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_abac :=args [3].ValueNumber ;if _abac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _abac -_cgad > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_efacd :=12.0;if _gaeg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efacd =args [4].ValueNumber ;if _efacd < 1||_efacd > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _efacd ==12&&_abac > _cgad {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _egff >=_eeaf {return MakeNumberResult (0);};_gafc :=1-_gg .Pow (_egff /_eeaf ,1/_cgad );_gafc =float64 (int (_gafc *1000+0.5))/1000;_geed :=_eeaf *_gafc *_efacd /12;if _abac ==1{return MakeNumberResult (_geed );};_ffafe :=_geed ;_eafc :=0.0;_geedf :=_cgad ;if _geedf > _abac {_geedf =_abac ;};for _bafc :=2.0;_bafc <=_geedf ;_bafc ++{_eafc =(_eeaf -_ffafe )*_gafc ;_ffafe +=_eafc ;};if _abac > _cgad {return MakeNumberResult ((_eeaf -_ffafe )*_gafc *(12-_efacd )/12);};return MakeNumberResult (_eafc );};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccca :=args [0].AsString ();if _ccca .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_ca .ToUpper (_ccca .ValueString ));};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_caae ,_aefc :=_ebbgg ("\u0046\u0049\u004e\u0044",args );if _aefc .Type !=ResultTypeEmpty {return _aefc ;};_dccb :=_caae ._ddebe ;if _dccb ==""{return MakeNumberResult (1.0);};_afca :=_caae ._bcgff ;_baba :=_caae ._gdbb -1;_egfbb :=1;_fdb :=0;for _cagcc :=range _afca {if _cagcc !=0{_dgbaa :=1;if _cagcc -_fdb > 1{_dgbaa =2;};_egfbb +=_dgbaa ;};if _egfbb > _baba {_ddgbb :=_ca .Index (_afca [_cagcc :],_dccb );if _ddgbb ==0{return MakeNumberResult (float64 (_egfbb ));};};_fdb =_cagcc ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Eval evaluates and returns a string.
func (_bcfba String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_bcfba ._ccecd )};const _afdbd =2;

// String is a string expression.
type String struct{_ccecd string };

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_adeb Result )AsNumber ()Result {if _adeb .Type ==ResultTypeString {_bgggf ,_ebdbb :=_g .ParseFloat (_adeb .ValueString ,64);if _ebdbb ==nil {return MakeNumberResult (_bgggf );};};if _adeb .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _adeb ;};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_adeca ,_efcf :=_ebbgg ("\u0046\u0049\u004e\u0044",args );if _efcf .Type !=ResultTypeEmpty {return _efcf ;};_aaad :=_ca .ToLower (_adeca ._ddebe );if _aaad ==""{return MakeNumberResult (1.0);};_bfcae :=_ca .ToLower (_adeca ._bcgff );_dbad :=_adeca ._gdbb ;_gdea :=1;for _ddabb :=range _bfcae {if _gdea < _dbad {_gdea ++;continue ;};_dbcc :=_d .Index (_aaad ,_bfcae [_ddabb :]);if _dbcc ==0{return MakeNumberResult (float64 (_gdea ));};_gdea ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _dbebb (_geegb ,_abce int )string {const TOKSTART =4;if !_caee {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_bcffb :=range _becbd {if _bcffb ._eccfe ==_geegb &&_bcffb ._bcacd ==_abce {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_bcffb ._feaea ;};};_decg :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_cfcbc (_abce );_bbedb :=make ([]int ,0,4);_agecd :=_fffg [_geegb ];for _agaaf :=TOKSTART ;_agaaf -1< len (_ccae );_agaaf ++{if _dfbgb :=_agecd +_agaaf ;_dfbgb >=0&&_dfbgb < _fcga &&_cbbe [_cbcec [_dfbgb ]]==_agaaf {if len (_bbedb )==cap (_bbedb ){return _decg ;};_bbedb =append (_bbedb ,_agaaf );};};if _ccecb [_geegb ]==-2{_gaefc :=0;for _eabba [_gaefc ]!=-1||_eabba [_gaefc +1]!=_geegb {_gaefc +=2;};for _gaefc +=2;_eabba [_gaefc ]>=0;_gaefc +=2{_dffdb :=_eabba [_gaefc ];if _dffdb < TOKSTART ||_eabba [_gaefc +1]==0{continue ;};if len (_bbedb )==cap (_bbedb ){return _decg ;};_bbedb =append (_bbedb ,_dffdb );};if _eabba [_gaefc +1]!=0{return _decg ;};};for _bcggb ,_eecg :=range _bbedb {if _bcggb ==0{_decg +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_decg +="\u0020\u006f\u0072\u0020";};_decg +=_cfcbc (_eecg );};return _decg ;};const _befc int =0;