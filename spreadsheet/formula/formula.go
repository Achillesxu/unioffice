//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_d "bytes";_g "errors";_b "fmt";_feb "github.com/unidoc/unioffice/common/logger";_ecb "github.com/unidoc/unioffice/internal/mergesort";_ag "github.com/unidoc/unioffice/internal/wildcard";_bg "github.com/unidoc/unioffice/spreadsheet/format";_fa "github.com/unidoc/unioffice/spreadsheet/reference";_fe "github.com/unidoc/unioffice/spreadsheet/update";_f "io";_bb "math";_gc "math/big";_ad "math/rand";_gg "regexp";_ed "sort";_ab "strconv";_c "strings";_ec "sync";_gf "time";_a "unicode";);

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgeff :=args [0].AsNumber ();if _dgeff .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _dgeff .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_edde (_dgeff .ValueNumber ));};

// String returns a string representation for Negate.
func (_abcg Negate )String ()string {return "\u002d"+_abcg ._dbcag .String ()};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccaf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgfdg :=args [2].ValueNumber ;if _bgfdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_babc :=args [3].ValueNumber ;return MakeNumberResult (_babc *_agde *(_ccaf /_bgfdg -1));};var _fgf Result =MakeEmptyResult ();

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_ggac ,_bcf :=_bfed (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _bcf .Type ==ResultTypeError {return _bcf ;};_abga :=_ggac ._ddb ;_afdef :=_ggac ._ccbe ;_cceg :=_ggac ._ageb ;_gfgda :=_ggac ._dgagd ;_ceb :=_ggac ._fcaf ;_gdfa :=_ggac ._edgg ;_fafg :=_ggac ._cab ;_faaf ,_febc :=_bff (_afdef ,_cceg ,_fafg );if _febc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_bbbda :=_faaf *_gdfa *_abga ;if _ceb ==0{return MakeNumberResult (_bbbda );};_eca :=_abga *_gdfa ;_bdgf :=_abga -_gfgda ;_afgg :=int ((_bdgf -_bbbda )/_eca );if _ceb <=_afgg {return MakeNumberResult (_eca );}else if _ceb ==_afgg +1{return MakeNumberResult (_bdgf -_eca *float64 (_afgg )-_bbbda );}else {return MakeNumberResult (0);};};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_gafgd .Lock ();defer _gafgd .Unlock ();if _ ,_bada :=_agfec [name ];_bada {_feb .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_agfec [name ]=fn ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ebbf ,_aged :=_gcaef (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _aged .Type ==ResultTypeError {return _aged ;};_cggcd :=_ebbf ._aded ;_daac :=_ebbf ._cbcf ;_adad :=_ebbf ._cga ;_bddf :=_ebbf ._bafd ;_ggca :=_ebbf ._deda ;_afge :=_ebbf ._fddg ;return _fddd (_cggcd ,_daac ,_adad ,_bddf ,_ggca ,_afge );};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fgfbc :=args [0].Ref ;if _fgfbc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_daf ,_dbaf :=_fa .ParseCellReference (_fgfbc .Value );if _dbaf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fgfbc .Value );};return MakeNumberResult (float64 (_daf .ColumnIdx +1));};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_ddabb :=len (args );if _ddabb < 3||_ddabb > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_edafd :=args [1].ValueNumber ;if _edafd !=float64 (int (_edafd )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afbb :=args [2].ValueNumber ;_fgcge :=0.0;if _ddabb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgcge =args [3].ValueNumber ;};_efce :=0.0;if _ddabb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_efce =args [4].ValueNumber ;if _efce !=0{_efce =1;};};if _fcee ==0{return MakeNumberResult (-_afbb *_edafd -_fgcge );}else {return MakeNumberResult ((((1-_bb .Pow (1+_fcee ,_edafd ))/_fcee )*_afbb *(1+_fcee *_efce )-_fgcge )/_bb .Pow (1+_fcee ,_edafd ));};};func _ffaa (_dabb Result )bool {_feefg :=_dabb .Type ;return _feefg !=ResultTypeArray &&_feefg !=ResultTypeList ;};func _edgd (_bgaa ,_gda float64 ,_bad ,_dggf int )(float64 ,Result ){_gbcg ,_dfad :=_caff (_bgaa ),_caff (_gda );if _dfad .After (_gbcg ){_ffad :=_adgc (_gbcg ,_dfad ,_bad ,_dggf );_ccfcg :=(_dfad .Year ()-_ffad .Year ())*12+int (_dfad .Month ())-int (_ffad .Month ());return float64 (_ccfcg *_bad )/12.0,_fgf ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_egea *ivr )GetLabelPrefix (cellRef string )string {return ""};const _gbacb =57358;func _ggbc (_dbg ,_bdgg int )int {switch _bdgg {case 1:if _dcd (_dbg ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_fabfb ,_dbga :=_cdeb ("\u0046\u0049\u004e\u0044",args );if _dbga .Type !=ResultTypeEmpty {return _dbga ;};_eafg :=_fabfb ._eeeg ;if _eafg ==""{return MakeNumberResult (1.0);};_dcdb :=_fabfb ._badf ;_fbfe :=_fabfb ._aefee ;_bggc :=1;for _gdda :=range _dcdb {if _bggc < _fbfe {_bggc ++;continue ;};_bagad :=_c .Index (_dcdb [_gdda :],_eafg );if _bagad ==0{return MakeNumberResult (float64 (_bggc ));};_bggc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _gdfd ()evCache {_bae :=evCache {};_bae ._gfg =make (map[string ]Result );_bae ._bde =&_ec .Mutex {};return _bae ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ccdag :=args [0];switch _ccdag .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_bacdc :=0.0;_fdggf :=0.0;for _ ,_adcga :=range _ccdag .ValueString {_agdab :=0.0;switch _adcga {case 'I':_agdab =1;case 'V':_agdab =5;case 'X':_agdab =10;case 'L':_agdab =50;case 'C':_agdab =100;case 'D':_agdab =500;case 'M':_agdab =1000;};_bacdc +=_agdab ;switch {case _fdggf ==_agdab &&(_fdggf ==5||_fdggf ==50||_fdggf ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_fdggf ==_agdab :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _fdggf < _agdab {_bacdc -=2*_fdggf ;};_fdggf =_agdab ;};return MakeNumberResult (_bacdc );case ResultTypeError :return _ccdag ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ccdag .Type ));};};

// Eval evaluates and returns the result of a Negate expression.
func (_gbaa Negate )Eval (ctx Context ,ev Evaluator )Result {_cecba :=_gbaa ._dbcag .Eval (ctx ,ev );if _cecba .Type ==ResultTypeNumber {return MakeNumberResult (-_cecba .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};func _cdd (_gdab ,_eade ,_aaee ,_bec float64 ,_cfee int )float64 {var _gabf float64 ;if _gdab ==0{_gabf =_bec +_aaee *_eade ;}else {_beca :=_bb .Pow (1+_gdab ,_eade );if _cfee ==1{_gabf =_bec *_beca +_aaee *(1+_gdab )*(_beca -1)/_gdab ;}else {_gabf =_bec *_beca +_aaee *(_beca -1)/_gdab ;};};return -_gabf ;};func _cedc (_eacf Result )[][]Result {switch _eacf .Type {case ResultTypeArray :return _eacf .ValueArray ;case ResultTypeList :return [][]Result {_eacf .ValueList };default:return [][]Result {};};};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_bbab ,_fbea ,_bbda :=_gddg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _bbda .Type ==ResultTypeError {return _bbda ;};if _fbea ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bbab ==0{return MakeNumberResult (0);};_bge :=_bbab < 0;if _bge {_bbab =-_bbab ;};_begb :=float64 (int (_bbab ));_dfba :=args [0].Value ();_acgg :=_c .Split (_dfba ,"\u002e");_ada :=0.0;if len (_acgg )> 1{var _fefb error ;_ccd :=_acgg [1];_ada ,_fefb =_ab .ParseFloat (_ccd ,64);if _fefb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_ffab :=float64 (len (_ccd ));_ada /=_bb .Pow (10,_ffab );};_gbbc :=_ada *_fbea /_bb .Pow (10,float64 (int (_bb .Log10 (_fbea )))+1)+_begb ;if _bge {_gbbc =-_gbbc ;};return MakeNumberResult (_gbbc );};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_caffee :=args [0].AsNumber ();if _caffee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgacg :=float64 (1);if _caffee .ValueNumber < 0{_cgacg =-1;};if len (args )> 1{_fddc :=args [1].AsNumber ();if _fddc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgacg =_bb .Abs (_fddc .ValueNumber );};if len (args )==1{return MakeNumberResult (_bb .Ceil (_caffee .ValueNumber ));};_egege :=_caffee .ValueNumber ;_egege ,_ecag :=_bb .Modf (_egege /_cgacg );if _ecag !=0{if _caffee .ValueNumber > 0{_egege ++;};};return MakeNumberResult (_egege *_cgacg );};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dgda :=args [0].ValueNumber ;_fba :=args [1].ValueNumber ;if _fba < _dgda {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _fba ==_dgda {return MakeNumberResult (0);};_abfd :=_c .ToLower (args [2].ValueString );if _abfd =="\u0064"{return MakeNumberResult (_fba -_dgda );};_eee :=_caff (_dgda );_bcb :=_caff (_fba );_ebac ,_fec ,_feba :=_eee .Date ();_agfg ,_agg ,_be :=_bcb .Date ();_baeb :=int (_fec );_bgg :=int (_agg );var _fab float64 ;switch _abfd {case "\u0079":_fab =float64 (_agfg -_ebac );if _bgg < _baeb ||(_bgg ==_baeb &&_be < _feba ){_fab --;};case "\u006d":_dgdf :=_agfg -_ebac ;_ggb :=_bgg -_baeb ;if _be < _feba {_ggb --;};if _ggb < 0{_dgdf --;_ggb +=12;};_fab =float64 (_dgdf *12+_ggb );case "\u006d\u0064":_bgfg :=_bgg ;if _be < _feba {_bgfg --;};_fab =float64 (int (_fba -_cea (_agfg ,_bgfg ,_feba )));case "\u0079\u006d":_fab =float64 (_bgg -_baeb );if _be < _feba {_fab --;};if _fab < 0{_fab +=12;};case "\u0079\u0064":_ege :=_agfg ;if _bgg < _baeb ||(_bgg ==_baeb &&_be < _feba ){_ege --;};_fab =float64 (int (_fba -_cea (_ege ,_baeb ,_feba )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_fab );};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_fccdf ,_cgfc :=_gbeg (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cgfc .Type ==ResultTypeError {return _cgfc ;};_dcf :=_fccdf ._adb ;_cbfb :=_fccdf ._ged ;_dedb :=_fccdf ._afdg ;_cafe :=_fccdf ._gcaf ;_afaa :=_fccdf ._afaf ;_afdc :=_fccdf ._aadg ;_efaff :=_facge (_dcf ,_cbfb ,_dedb ,0,_afdc );_gaab :=0.0;if _cafe ==1{if _afdc ==0{_gaab =_efaff +_dedb *_dcf ;}else {_gaab =_efaff ;};_cafe ++;};for _fbcfe :=_cafe ;_fbcfe <=_afaa ;_fbcfe ++{if _afdc ==1{_gaab +=_efaff -(_cdd (_dcf ,_fbcfe -2,_efaff ,_dedb ,1)-_efaff )*_dcf ;}else {_gaab +=_efaff -_cdd (_dcf ,_fbcfe -1,_efaff ,_dedb ,0)*_dcf ;};};return MakeNumberResult (_gaab );};

// String returns a string representation of a range with prefix.
func (_gabe PrefixRangeExpr )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gabe ._acggg .String (),_gabe ._cafdg .String (),_gabe ._cfed .String ());};func _bbgec (_faga []Result ,_gbebc []string ,_ffba bool )[]string {for _ ,_gabgd :=range _faga {switch _gabgd .Type {case ResultTypeEmpty :if !_ffba {_gbebc =append (_gbebc ,"");};case ResultTypeString :if _gabgd .ValueString !=""||!_ffba {_gbebc =append (_gbebc ,_gabgd .ValueString );};case ResultTypeNumber :_gbebc =append (_gbebc ,_gabgd .Value ());case ResultTypeList :_gbebc =_fgffg (_gbebc ,_bbgec (_gabgd .ValueList ,[]string {},_ffba ));case ResultTypeArray :for _ ,_gbedb :=range _gabgd .ValueArray {_gbebc =_fgffg (_gbebc ,_bbgec (_gbedb ,[]string {},_ffba ));};};};return _gbebc ;};

// Error is an error expression.
type Error struct{_efe string };

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_bdbd ,_bfa :=_bfed (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _bfa .Type ==ResultTypeError {return _bfa ;};_deef :=_bdbd ._ddb ;_agfgf :=_bdbd ._ccbe ;_dgef :=_bdbd ._ageb ;_gaafa :=_bdbd ._dgagd ;_daag :=_bdbd ._fcaf ;_dega :=_bdbd ._edgg ;if _dega >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_fgfe :=_bdbd ._cab ;_degb :=1.0/_dega ;_cbbd :=2.5;if _degb < 3{_cbbd =1;}else if _degb < 5{_cbbd =1.5;}else if _degb <=6{_cbbd =2;};_dega *=_cbbd ;_eefa ,_baaeg :=_bff (_agfgf ,_dgef ,_fgfe );if _baaeg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_feae :=_aggb (_eefa *_dega *_deef );_deef -=_feae ;_edbc :=_deef -_gaafa ;for _baed :=0;_baed < _daag ;_baed ++{_feae =_aggb (_dega *_deef );_edbc -=_feae ;if _edbc < 0{switch _daag -_baed {case 0:case 1:return MakeNumberResult (_aggb (_deef *0.5));default:return MakeNumberResult (0);};};_deef -=_feae ;};return MakeNumberResult (_feae );};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_ddd EmptyExpr )Update (q *_fe .UpdateQuery )Expression {return _ddd };

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_geead ,_cbcaf :=_cdeb ("\u0046\u0049\u004e\u0044",args );if _cbcaf .Type !=ResultTypeEmpty {return _cbcaf ;};_accd :=_c .ToLower (_geead ._eeeg );_dffg :=_c .ToLower (_geead ._badf );if _accd ==""{return MakeNumberResult (1.0);};_cgeeg :=_geead ._aefee -1;_dgde :=1;_efgg :=0;for _ffcd :=range _dffg {if _ffcd !=0{_gfea :=1;if _ffcd -_efgg > 1{_gfea =2;};_dgde +=_gfea ;};if _dgde > _cgeeg {_dffdg :=_ag .Index (_accd ,_dffg [_ffcd :]);if _dffdg ==0{return MakeNumberResult (float64 (_dgde ));};};_efgg =_ffcd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ebggc :=args [0].AsNumber ();if _ebggc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_agfe :=10.0;if len (args )> 1{_ffeec :=args [1].AsNumber ();if _ffeec .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_agfe =args [1].ValueNumber ;};if _ebggc .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _agfe ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_bb .Log (_ebggc .ValueNumber )/_bb .Log (_agfe ));};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebdec :=args [0].AsNumber ();_dfee :=args [1].AsNumber ();_aacf :=args [2].AsNumber ();_adcb :=args [3].ListValues ();if _ebdec .Type !=ResultTypeNumber ||_dfee .Type !=ResultTypeNumber ||_aacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_fabe :=float64 (0);for _ddac ,_bccf :=range _adcb {_fabe +=_bccf .ValueNumber *_bb .Pow (_ebdec .ValueNumber ,_dfee .ValueNumber +float64 (_ddac )*_aacf .ValueNumber );};return MakeNumberResult (_fabe );};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};func _dccc (_fafb ,_bgdc []float64 ,_aaed float64 )Result {_adaa :=false ;_dccd :=false ;for _dedf :=0;_dedf < len (_fafb );_dedf ++{if _fafb [_dedf ]> 0{_adaa =true ;};if _fafb [_dedf ]< 0{_dccd =true ;};};if !_adaa ||!_dccd {return MakeErrorResultType (ErrorTypeNum ,"");};_cee :=_aaed ;_bddg :=1e-10;_bcgfd :=0;_agdf :=50;_dde :=false ;for {_eaga :=_gecd (_fafb ,_bgdc ,_cee );_fgba :=_cee -_eaga /_gdga (_fafb ,_bgdc ,_cee );_cbd :=_bb .Abs (_fgba -_cee );_cee =_fgba ;_bcgfd ++;if _cbd <=_bddg ||_bb .Abs (_eaga )<=_bddg {break ;};if _bcgfd > _agdf {_dde =true ;break ;};};if _dde ||_bb .IsNaN (_cee )||_bb .IsInf (_cee ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_cee );};

// Reference returns an invalid reference for Bool.
func (_cec Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _dbacd (_gbdeb []Result )[]rangeIndex {_feabc :=[]rangeIndex {};_dcfd :=len (_gbdeb );for _ggde :=0;_ggde < _dcfd -1;_ggde +=2{_edge :=[]rangeIndex {};_bgda :=_cedc (_gbdeb [_ggde ]);_adbgd :=_agdc (_gbdeb [_ggde +1]);if _ggde ==0{for _feag ,_affgb :=range _bgda {for _dedd ,_ababfg :=range _affgb {if _aeace (_ababfg ,_adbgd ){_edge =append (_edge ,rangeIndex {_feag ,_dedd });};};};}else {for _ ,_bccc :=range _feabc {_ebbda :=_bgda [_bccc ._dfadc ][_bccc ._cabca ];if _aeace (_ebbda ,_adbgd ){_edge =append (_edge ,_bccc );};};};if len (_edge )==0{return []rangeIndex {};};_feabc =_edge [:];};return _feabc ;};const _egega =57350;var _gafgd _ec .Mutex ;

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_cbeed (args ,_ffgb ))};var _fc =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_efcff :=len (args );if _efcff !=4&&_efcff !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_abbc ,_bebb ,_dffd :=_eeg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _dffd .Type ==ResultTypeError {return _dffd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaec :=args [2].ValueNumber ;if _gaec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bcac :=args [3].ValueNumber ;if _bcac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fede :=0;if _efcff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fede =int (args [4].ValueNumber );if !_ebf (_fede ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_bddd ,_dffd :=_bff (_abbc ,_bebb ,_fede );if _dffd .Type ==ResultTypeError {return _dffd ;};return MakeNumberResult (_gaec /(1-_bcac *_bddd ));};func (_aaefd ResultType )String ()string {if _aaefd >=ResultType (len (_ddfgb )-1){return _b .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_aaefd );};return _bagg [_ddfgb [_aaefd ]:_ddfgb [_aaefd +1]];};func _ddae (_egf ,_affe int64 )float64 {return float64 (int (0.5+float64 ((_affe -_egf )/86400)))};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cafff :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_fdga :=args [1].ValueNumber !=0;_fagf :=_bbgec (args [2:],[]string {},_fdga );return MakeStringResult (_c .Join (_fagf ,_cafff ));};func _db (_cd ,_gge [][]Result )bool {if len (_cd )!=len (_gge ){return false ;};for _gb :=range _cd {if len (_cd [_gb ])!=len (_gge [_gb ]){return false ;};};return true ;};func NewLexer ()*Lexer {return &Lexer {_gcdab :make (chan *node )}};

// Reference returns an invalid reference for Negate.
func (_fgedb Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _efee (_ebc ,_bbfd float64 )float64 {_ebc =_bb .Trunc (_ebc );_bbfd =_bb .Trunc (_bbfd );if _ebc ==0{return _bbfd ;};if _bbfd ==0{return _ebc ;};for _ebc !=_bbfd {if _ebc > _bbfd {_ebc =_ebc -_bbfd ;}else {_bbfd =_bbfd -_ebc ;};};return _ebc ;};func _gcaef (_daee []Result ,_gfgac string )(*durationArgs ,Result ){_faea :=len (_daee );if _faea !=5&&_faea !=6{return nil ,MakeErrorResult (_gfgac +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcb ,_fbgb ,_dccb :=_eeg (_daee [0],_daee [1],_gfgac );if _dccb .Type ==ResultTypeError {return nil ,_dccb ;};_cecd :=_daee [2];if _cecd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfgac +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gad :=_cecd .ValueNumber ;if _gad < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cgfac :=_daee [3];if _cgfac .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfgac +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bdb :=_cgfac .ValueNumber ;if _bdb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_bdab :=_daee [4];if _bdab .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfgac +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddab :=float64 (int (_bdab .ValueNumber ));if !_cfdgf (_ddab ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fcfe :=0;if _faea ==6&&_daee [5].Type !=ResultTypeEmpty {_dbb :=_daee [5];if _dbb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gfgac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcfe =int (_dbb .ValueNumber );if !_ebf (_fcfe ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_gfgac );};};return &durationArgs {_fcb ,_fbgb ,_gad ,_bdb ,_ddab ,_fcfe },_fgf ;};func _fgffg (_fagfc ,_ddeda []string )[]string {for _ ,_gbfag :=range _ddeda {_fagfc =append (_fagfc ,_gbfag );};return _fagfc ;};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_babd ,_fege ,_cgbb :=_gddg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _cgbb .Type ==ResultTypeError {return _cgbb ;};if _fege < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _babd ==0{return MakeNumberResult (0);};_gggf :=_babd < 0;if _gggf {_babd =-_babd ;};_cacd :=args [0].Value ();_cdc :=_c .Split (_cacd ,"\u002e");_caaa :=float64 (int (_babd ));_edac :=_cdc [1];_cdge :=len (_edac );_bdbb :=int (_bb .Log10 (_fege ))+1;_dbec :=float64 (_bdbb -_cdge );_bgde ,_fed :=_ab .ParseFloat (_edac ,64);if _fed !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_bgde *=_bb .Pow (10,_dbec );_caba :=_caaa +_bgde /_fege ;if _gggf {_caba =-_caba ;};return MakeNumberResult (_caba );};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_cbfa ,_ebcc Expression };const (_fegdg countMode =iota ;_ffgb ;_cbgf ;);

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_ead Context ,formula string )Result ;SetCache (_efad string ,_gead Result );GetFromCache (_acb string )(Result ,bool );LastEvalIsRef ()bool ;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};const _cddc =57370;func _fdde (_accg []Result )Result {_eace :=_accg [0].ValueArray ;if len (_accg )==1{_acacc :=[][]Result {};for _ ,_eecb :=range _eace {_acacc =append (_acacc ,_gbge ([]Result {MakeListResult (_eecb )}).ValueList );};return MakeArrayResult (_acacc );}else if len (_accg )==2{_cgfb :=len (_eace );_bbaga :=len (_eace [0]);_eddf :=_abfc (_accg [1],_cgfb ,_bbaga );_gedga :=len (_eddf );_dcce :=[][]Result {};var _ffgc []Result ;for _ebfc ,_gbbda :=range _eace {if _ebfc < _gedga {_ffgc =_eddf [_ebfc ];}else {_ffgc =_bfac (MakeErrorResultType (ErrorTypeNA ,""),_bbaga );};_dcce =append (_dcce ,_gbge ([]Result {MakeListResult (_gbbda ),MakeListResult (_ffgc )}).ValueList );};return MakeArrayResult (_dcce );}else if len (_accg )==3{_adfbc :=len (_eace );_fddf :=len (_eace [0]);_afdeag :=_abfc (_accg [1],_adfbc ,_fddf );_afec :=_abfc (_accg [2],_adfbc ,_fddf );_ccdf :=len (_afdeag );_dfdb :=len (_afec );_becc :=[][]Result {};var _geaad ,_baee []Result ;for _gagde ,_ebbad :=range _eace {if _gagde < _ccdf {_geaad =_afdeag [_gagde ];}else {_geaad =_bfac (MakeErrorResultType (ErrorTypeNA ,""),_fddf );};if _gagde < _dfdb {_baee =_afec [_gagde ];}else {_baee =_bfac (MakeErrorResultType (ErrorTypeNA ,""),_fddf );};_becc =append (_becc ,_gbge ([]Result {MakeListResult (_ebbad ),MakeListResult (_geaad ),MakeListResult (_baee )}).ValueList );};return MakeArrayResult (_becc );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ccfbd :=args [0].AsString ();if _ccfbd .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_ccfbd .ValueString ,ev );};type Expression interface{Eval (_efea Context ,_dga Evaluator )Result ;Reference (_dfc Context ,_fcf Evaluator )Reference ;String ()string ;Update (_efg *_fe .UpdateQuery )Expression ;};type criteriaParsed struct{_edbbc bool ;_bbca float64 ;_fgaa string ;_ebce *criteriaRegex ;};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_bb .Pi );};func init (){_eff ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Reference returns an invalid reference for EmptyExpr.
func (_eaf EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_dafcc ,_ffgg ,_bgdbe :=_dcabf (from ,to );if _bgdbe !=nil {_feb .Log .Debug (_bgdbe .Error ());return NewError (_bgdbe .Error ());};return Range {_cbfa :_dafcc ,_ebcc :_ffgg };};var _bdedd =[...]int {0};

// CellRef is a reference to a single cell
type CellRef struct{_cdf string };

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddbdf :=args [0].AsNumber ();if _ddbdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_bb .Pi /180.0*_ddbdf .ValueNumber );};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};const _egbab =57352;func (_cabg tokenType )String ()string {return _cgbdg (int (_cabg ))};func _bgcgg (_efae Result ,_fddec ,_feeg string )(string ,Result ){switch _efae .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _efae .Value (),_fgf ;default:return "",MakeErrorResult (_fddec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_feeg +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _gbeg (_acdg []Result ,_fbd string )(*cumulArgs ,Result ){if len (_acdg )!=6{return nil ,MakeErrorResult (_fbd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _acdg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aag :=_acdg [0].ValueNumber ;if _aag <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _acdg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gdd :=_acdg [1].ValueNumber ;if _gdd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _acdg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbd +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bedf :=_acdg [2].ValueNumber ;if _bedf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _acdg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbd +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ebfe :=_acdg [3].ValueNumber ;if _ebfe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _acdg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdff :=_acdg [4].ValueNumber ;if _fdff <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _fdff < _ebfe {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _fdff > _gdd {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_cfef :=int (_acdg [5].ValueNumber );if _cfef !=0&&_cfef !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_aag ,_gdd ,_bedf ,_ebfe ,_fdff ,_cfef },_fgf ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbdb :=args [0].AsNumber ();_fegfb :=args [1].AsNumber ();if _cbdb .Type !=ResultTypeNumber ||_fegfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fegfb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_bb .Trunc (_cbdb .ValueNumber /_fegfb .ValueNumber ));};const _dff =_cgfa +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _cgbec =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edca :=args [0].AsString ();if _edca .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbbae :=_d .Buffer {};for _ ,_fadf :=range _edca .ValueString {if _a .IsPrint (_fadf ){_fbbae .WriteRune (_fadf );};};return MakeStringResult (_fbbae .String ());};const _fagfb =57361;

// Reference returns an invalid reference for Error.
func (_aad Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ac (_ce BinOpType ,_gba ,_abc []Result )Result {_agf :=[]Result {};for _cb :=range _gba {_ee :=_gba [_cb ].AsNumber ();_cgf :=_abc [_cb ].AsNumber ();if _ee .Type !=ResultTypeNumber ||_cgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ce {case BinOpTypePlus :_agf =append (_agf ,MakeNumberResult (_ee .ValueNumber +_cgf .ValueNumber ));case BinOpTypeMinus :_agf =append (_agf ,MakeNumberResult (_ee .ValueNumber -_cgf .ValueNumber ));case BinOpTypeMult :_agf =append (_agf ,MakeNumberResult (_ee .ValueNumber *_cgf .ValueNumber ));case BinOpTypeDiv :if _cgf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_agf =append (_agf ,MakeNumberResult (_ee .ValueNumber /_cgf .ValueNumber ));case BinOpTypeExp :_agf =append (_agf ,MakeNumberResult (_bb .Pow (_ee .ValueNumber ,_cgf .ValueNumber )));case BinOpTypeLT :_agf =append (_agf ,MakeBoolResult (_ee .ValueNumber < _cgf .ValueNumber ));case BinOpTypeGT :_agf =append (_agf ,MakeBoolResult (_ee .ValueNumber > _cgf .ValueNumber ));case BinOpTypeEQ :_agf =append (_agf ,MakeBoolResult (_ee .ValueNumber ==_cgf .ValueNumber ));case BinOpTypeLEQ :_agf =append (_agf ,MakeBoolResult (_ee .ValueNumber <=_cgf .ValueNumber ));case BinOpTypeGEQ :_agf =append (_agf ,MakeBoolResult (_ee .ValueNumber >=_cgf .ValueNumber ));case BinOpTypeNE :_agf =append (_agf ,MakeBoolResult (_ee .ValueNumber !=_cgf .ValueNumber ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ce ));};};return MakeListResult (_agf );};func _cdeb (_gcgac string ,_ffff []Result )(*parsedSearchObject ,Result ){_gaca :=len (_ffff );if _gaca !=2&&_gaca !=3{return nil ,MakeErrorResult (_gcgac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfda :=_ffff [0];if _dfda .Type ==ResultTypeError {return nil ,_dfda ;};if _dfda .Type !=ResultTypeString &&_dfda .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_daaa :=_ffff [1];if _daaa .Type ==ResultTypeError {return nil ,_daaa ;};if _daaa .Type !=ResultTypeString &&_daaa .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_eaag :=_daaa .Value ();_fgdba :=_dfda .Value ();_gedfc :=1;if _gaca ==3&&_ffff [2].Type !=ResultTypeEmpty {_bdge :=_ffff [2];if _bdge .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_gedfc =int (_bdge .ValueNumber );if _gedfc < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _gedfc > len (_eaag ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_fgdba ,_eaag ,_gedfc },_fgf ;};func (_ccb *evCache )SetCache (key string ,value Result ){_ccb ._bde .Lock ();_ccb ._gfg [key ]=value ;_ccb ._bde .Unlock ();};var _bgedb =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfba :=ctx .GetEpoch ();_gfd ,_dcg :=_fgg (args [0].Value (),_bfba );if _dcg !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_gfd .Year ()));};func _afdb (_eac string )bool {for _ ,_ccea :=range _agac {_afcd :=_ccea .FindStringSubmatch (_eac );if len (_afcd )> 1{return true ;};};return false ;};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edbca :=args [0];if _edbca .Type ==ResultTypeNumber {return _edbca ;};if _edbca .Type ==ResultTypeString {_bacac ,_acgfd :=_ab .ParseFloat (_edbca .Value (),64);if _acgfd ==nil {return MakeNumberResult (_bacac );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func (_fcge PrefixVerticalRange )verticalRangeReference (_ffffg string )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ffffg ,_fcge ._acbab ,_fcge ._cacf );};func _cdbb (_gbb ,_cfb ,_afb int )bool {if _cfb < 1||_cfb > 12{return false ;};if _afb < 1{return false ;};return _afb <=_baea (_gbb ,_cfb );};func _baaff (_aegg int )bool {return _aegg ==0||_aegg ==4};func _gddg (_ddaf []Result ,_cag string )(float64 ,float64 ,Result ){if len (_ddaf )!=2{return 0,0,MakeErrorResult (_cag +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ddaf [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_cag +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dea :=_ddaf [0].ValueNumber ;if _ddaf [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_cag +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfgb :=float64 (int (_ddaf [1].ValueNumber ));if _cfgb < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_cag +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _dea ,_cfgb ,_fgf ;};

// LastColumn returns empty string for the invalid reference context.
func (_ceddb *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_aebgf :=_aegd (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _aebgf .Type !=ResultTypeEmpty {return _aebgf ;};_ddaeb :=_dbacd (args [1:]);_caca :=0.0;_cged :=_cedc (args [0]);for _ ,_aecf :=range _ddaeb {_caca +=_cged [_aecf ._dfadc ][_aecf ._cabca ].ValueNumber ;};return MakeNumberResult (float64 (_caca ));};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_bgd ConstArrayExpr )Update (q *_fe .UpdateQuery )Expression {return _bgd };

// Update returns the same object as updating sheet references does not affect String.
func (_geada String )Update (q *_fe .UpdateQuery )Expression {return _geada };func _aegcf (_ebbg [][]Result )float64 {if len (_ebbg )==2{_gcdae :=_ebbg [0][0].AsNumber ();_cabc :=_ebbg [0][1].AsNumber ();_gbcdc :=_ebbg [1][0].AsNumber ();_feeb :=_ebbg [1][1].AsNumber ();if _gcdae .Type !=ResultTypeNumber ||_cabc .Type !=ResultTypeNumber ||_gbcdc .Type !=ResultTypeNumber ||_feeb .Type !=ResultTypeNumber {return _bb .NaN ();};return _gcdae .ValueNumber *_feeb .ValueNumber -_gbcdc .ValueNumber *_cabc .ValueNumber ;};_eadca :=float64 (0);_fabcd :=float64 (1);for _aggga :=range _ebbg {_eadca +=_fabcd *_ebbg [0][_aggga ].ValueNumber *_aegcf (_ecfg (_ebbg ,_aggga ));_fabcd *=-1;};return _eadca ;};func _fgg (_gabgg string ,_fgeg _gf .Time )(_gf .Time ,error ){_edecf ,_ ,_geaab :=_gc .ParseFloat (_gabgg ,10,128,_gc .ToNearestEven );if _geaab !=nil {return _gf .Time {},_geaab ;};_bcegd :=new (_gc .Float );_bcegd .SetUint64 (uint64 (24*_gf .Hour ));_edecf .Mul (_edecf ,_bcegd );_feedb ,_ :=_edecf .Uint64 ();_egebc :=_fgeg .Add (_gf .Duration (_feedb ));return _dabc (_egebc ),nil ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bdcfg :=_c .Split (v ,"\u003a");if len (_bdcfg )!=2{return nil ;};_gbegg ,_ :=_ab .Atoi (_bdcfg [0]);_badfg ,_ :=_ab .Atoi (_bdcfg [1]);if _gbegg > _badfg {_gbegg ,_badfg =_badfg ,_gbegg ;};return HorizontalRange {_cbdc :_gbegg ,_affab :_badfg };};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggcaf :=[]float64 {};for _ ,_becdb :=range args {switch _becdb .Type {case ResultTypeString :_aege :=_becdb .AsNumber ();if _aege .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ggcaf =append (_ggcaf ,_aege .ValueNumber );case ResultTypeList ,ResultTypeArray :_gacc :=GCD (_becdb .ListValues ());if _gacc .Type !=ResultTypeNumber {return _gacc ;};_ggcaf =append (_ggcaf ,_gacc .ValueNumber );case ResultTypeNumber :_ggcaf =append (_ggcaf ,_becdb .ValueNumber );case ResultTypeError :return _becdb ;default:return MakeErrorResult (_b .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_becdb .Type ));};};if _ggcaf [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ggcaf )==1{return MakeNumberResult (_ggcaf [0]);};_bgbe :=_ggcaf [0];for _cbff :=1;_cbff < len (_ggcaf );_cbff ++{if _ggcaf [_cbff ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgbe =_efee (_bgbe ,_ggcaf [_cbff ]);};return MakeNumberResult (_bgbe );};func _adgc (_bgag ,_gacf _gf .Time ,_fced ,_geed int )_gf .Time {_cgbd :=_gacf ;_ffd :=_bgag .Year ()-_gacf .Year ();_cgbd =_cgbd .AddDate (_ffd ,0,0);if _bgag .After (_cgbd ){_cgbd =_cgbd .AddDate (1,0,0);};_dab :=-12/_fced ;for _cgbd .After (_bgag ){_cgbd =_cgbd .AddDate (0,_dab ,0);};return _cgbd ;};

// Reference returns a string reference value to a vertical range.
func (_eadf VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_eadf .verticalRangeReference ()};};func _abgag (_bebba Context ,_gdgge ,_ffedc int )(string ,string ){_agabe :="\u0041"+_ab .Itoa (_gdgge );_aeeg :=_bebba .LastColumn (_gdgge ,_ffedc );_aaeeg :=_aeeg +_ab .Itoa (_ffedc );return _agabe ,_aaeeg ;};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_daed :=args [0];if _daed .Type !=ResultTypeArray &&_daed .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aaaa :=_agdc (args [1]);_adgcd :=0;for _ ,_bgcf :=range _cedc (_daed ){for _ ,_afggf :=range _bgcf {if _aeace (_afggf ,_aaaa ){_adgcd ++;};};};return MakeNumberResult (float64 (_adgcd ));};var _gbcge =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_cefae string };

// GetFilename returns an empty string for the invalid reference context.
func (_eeeb *ivr )GetFilename ()string {return ""};func _egbg (_badb string )string {_badb =_c .Replace (_badb ,"\u000a","\u005c\u006e",-1);_badb =_c .Replace (_badb ,"\u000d","\u005c\u0072",-1);_badb =_c .Replace (_badb ,"\u0009","\u005c\u0074",-1);return _badb ;};func (_gdee *Lexer )nextRaw ()*node {for len (_gdee ._afaff )!=0{_bbfde :=<-_gdee ._afaff [len (_gdee ._afaff )-1];if _bbfde !=nil {return _bbfde ;};_gdee ._afaff =_gdee ._afaff [0:len (_gdee ._afaff )-1];};return <-_gdee ._gcdab ;};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aage :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcde :=args [2].ValueNumber ;if _bcde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eafbd :=args [3].ValueNumber ;if _eafbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _eafbd > _bcde {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_fedc :=(_ffg -_aage )*(_bcde -_eafbd +1)*2;_fegg :=_bcde *(_bcde +1);return MakeNumberResult (_fedc /_fegg );};var _ccbf =[]*_gg .Regexp {};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_ccafa :=len (args );if _ccafa !=5&&_ccafa !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eafaf ,_geda ,_ddeb :=_eeg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _ddeb .Type ==ResultTypeError {return _ddeb ;};_gaga ,_ddeb :=_gbde (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _ddeb .Type ==ResultTypeError {return _ddeb ;};if _gaga >=_eafaf {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gedg :=args [3].ValueNumber ;if _gedg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_baega :=args [4].ValueNumber ;if _baega <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_bdfd :=0;if _ccafa ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdfd =int (args [5].ValueNumber );if !_ebf (_bdfd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_aced ,_ddeb :=_bff (_gaga ,_geda ,_bdfd );if _ddeb .Type ==ResultTypeError {return _ddeb ;};_edaa ,_ddeb :=_bff (_gaga ,_eafaf ,_bdfd );if _ddeb .Type ==ResultTypeError {return _ddeb ;};_geaaa ,_ddeb :=_bff (_eafaf ,_geda ,_bdfd );if _ddeb .Type ==ResultTypeError {return _ddeb ;};_bccb :=1+_aced *_gedg ;_bccb /=_baega /100+_edaa *_gedg ;_bccb --;_bccb /=_geaaa ;return MakeNumberResult (_bccb );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _cafd :=0;_cafd < len (args )-1;_cafd +=2{if args [_cafd ].ValueNumber ==1{return args [_cafd +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Number is a nubmer expression.
type Number struct{_fecdf float64 };const _bcdg =57367;func _fgcffg (_fcdb _gf .Time )bool {return _gf .Now ().Sub (_fcdb )>=_fddba };

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_ccfge PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_dbdgca :=_ccfge ._beccg .Reference (ctx ,ev );switch _dbdgca .Type {case ReferenceTypeSheet :if _ccaa (_dbdgca ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dbdgca .Value ));};_effg :=_ccfge .horizontalRangeReference (_dbdgca .Value );if _aebd ,_gbfe :=ev .GetFromCache (_effg );_gbfe {return _aebd ;};_cadfa :=ctx .Sheet (_dbdgca .Value );_aeef ,_eeee :=_abgag (_cadfa ,_ccfge ._gcgee ,_ccfge ._dcbda );_daagf :=_dfcgb (_cadfa ,ev ,_aeef ,_eeee );ev .SetCache (_effg ,_daagf );return _daagf ;default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbdgca .Type ));};};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_eadg :=args [0].AsString ();if _eadg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_cdec :=_d .Buffer {};_gcee :=false ;for _ ,_dafc :=range _eadg .ValueString {if !_gcee &&_a .IsLetter (_dafc ){_cdec .WriteRune (_a .ToUpper (_dafc ));}else {_cdec .WriteRune (_a .ToLower (_dafc ));};_gcee =_a .IsLetter (_dafc );};return MakeStringResult (_cdec .String ());};var _faaae ,_beda ,_gbfbf ,_ebag ,_aadc ,_ebgfg ,_eeab ,_dceae ,_bgef ,_gfbb ,_cfdd ,_ffdcb ,_abffa ,_egada ,_ffeg *_gg .Regexp ;

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_ccbfd Result )ListValues ()[]Result {if _ccbfd .Type ==ResultTypeArray {_dgage :=[]Result {};for _ ,_ggab :=range _ccbfd .ValueArray {for _ ,_eeca :=range _ggab {_dgage =append (_dgage ,_eeca );};};return _dgage ;};if _ccbfd .Type ==ResultTypeList {return _ccbfd .ValueList ;};return nil ;};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_aedg :=MakeNumberResult (0);for _ ,_cebgdf :=range args {_cebgdf =_cebgdf .AsNumber ();switch _cebgdf .Type {case ResultTypeNumber :_aedg .ValueNumber +=_cebgdf .ValueNumber *_cebgdf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cbba :=SumSquares (_cebgdf .ListValues ());if _cbba .Type !=ResultTypeNumber {return _cbba ;};_aedg .ValueNumber +=_cbba .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cebgdf ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_cebgdf .Type ));};};return _aedg ;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_beff :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfab :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdfg :=args [2].ValueNumber ;if _gdfg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_beff -_dfab )/_gdfg );};func _gbec (_aagf string )*criteriaRegex {_efgad :=&criteriaRegex {};if _aagf ==""{return _efgad ;};if _fdbed :=_fecdag .FindStringSubmatch (_aagf );len (_fdbed )> 1{_efgad ._abagb =_ecfgf ;_efgad ._cgbg =_fdbed [1];}else if _eafea :=_acfb .FindStringSubmatch (_aagf );len (_eafea )> 1{_efgad ._abagb =_ecfgf ;_efgad ._cgbg =_eafea [1];}else if _egede :=_cded .FindStringSubmatch (_aagf );len (_egede )> 1{_efgad ._abagb =_ababd ;_efgad ._cgbg =_egede [1];}else if _acbec :=_gdbcc .FindStringSubmatch (_aagf );len (_acbec )> 1{_efgad ._abagb =_aafbc ;_efgad ._cgbg =_acbec [1];}else if _efgf :=_acdf .FindStringSubmatch (_aagf );len (_efgf )> 1{_efgad ._abagb =_ffbe ;_efgad ._cgbg =_efgf [1];}else if _ccdagb :=_acbaa .FindStringSubmatch (_aagf );len (_ccdagb )> 1{_efgad ._abagb =_bddga ;_efgad ._cgbg =_ccdagb [1];};return _efgad ;};func _dcd (_efcfc int )bool {if _efcfc ==_efcfc /400*400{return true ;};if _efcfc ==_efcfc /100*100{return false ;};return _efcfc ==_efcfc /4*4;};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func _caff (_ega float64 )_gf .Time {_aec :=int64 ((_ega -_aeb )*_gfed );return _gf .Unix (0,_aec ).UTC ();};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};func (_fegdb Result )String ()string {return _fegdb .Value ()};func _gbcdf (_eggcg string ,_ecedf func (_bgeda float64 )float64 )Function {return func (_abfa []Result )Result {if len (_abfa )!=1{return MakeErrorResult (_eggcg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dedaf :=_abfa [0].AsNumber ();switch _dedaf .Type {case ResultTypeNumber :_cfdf :=_ecedf (_dedaf .ValueNumber );if _bb .IsNaN (_cfdf ){return MakeErrorResult (_eggcg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _bb .IsInf (_cfdf ,0){return MakeErrorResult (_eggcg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _cfdf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_eggcg +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_cfdf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_eggcg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _dedaf ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eggcg ,_dedaf .Type ));};};};func _gd (_ae BinOpType ,_ace []Result ,_acd Result )Result {_ebb :=[]Result {};switch _acd .Type {case ResultTypeNumber :_cbf :=_acd .ValueNumber ;for _bf :=range _ace {_efcc :=_ace [_bf ].AsNumber ();if _efcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ae {case BinOpTypePlus :_ebb =append (_ebb ,MakeNumberResult (_efcc .ValueNumber +_cbf ));case BinOpTypeMinus :_ebb =append (_ebb ,MakeNumberResult (_efcc .ValueNumber -_cbf ));case BinOpTypeMult :_ebb =append (_ebb ,MakeNumberResult (_efcc .ValueNumber *_cbf ));case BinOpTypeDiv :if _cbf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ebb =append (_ebb ,MakeNumberResult (_efcc .ValueNumber /_cbf ));case BinOpTypeExp :_ebb =append (_ebb ,MakeNumberResult (_bb .Pow (_efcc .ValueNumber ,_cbf )));case BinOpTypeLT :_ebb =append (_ebb ,MakeBoolResult (_efcc .ValueNumber < _cbf ));case BinOpTypeGT :_ebb =append (_ebb ,MakeBoolResult (_efcc .ValueNumber > _cbf ));case BinOpTypeEQ :_ebb =append (_ebb ,MakeBoolResult (_efcc .ValueNumber ==_cbf ));case BinOpTypeLEQ :_ebb =append (_ebb ,MakeBoolResult (_efcc .ValueNumber <=_cbf ));case BinOpTypeGEQ :_ebb =append (_ebb ,MakeBoolResult (_efcc .ValueNumber >=_cbf ));case BinOpTypeNE :_ebb =append (_ebb ,MakeBoolResult (_efcc .ValueNumber !=_cbf ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ae ));};};case ResultTypeString :_ggf :=_acd .ValueString ;for _faa :=range _ace {_aga :=_ace [_faa ].AsString ();if _aga .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ae {case BinOpTypeLT :_ebb =append (_ebb ,MakeBoolResult (_aga .ValueString < _ggf ));case BinOpTypeGT :_ebb =append (_ebb ,MakeBoolResult (_aga .ValueString > _ggf ));case BinOpTypeEQ :_ebb =append (_ebb ,MakeBoolResult (_aga .ValueString ==_ggf ));case BinOpTypeLEQ :_ebb =append (_ebb ,MakeBoolResult (_aga .ValueString <=_ggf ));case BinOpTypeGEQ :_ebb =append (_ebb ,MakeBoolResult (_aga .ValueString >=_ggf ));case BinOpTypeNE :_ebb =append (_ebb ,MakeBoolResult (_aga .ValueString !=_ggf ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ae ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_ebb );};type cmpResult int8 ;

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adedb :=args [0].AsNumber ();if _adedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_deaeg :=int (_adedb .ValueNumber );if _deaeg < 0||_deaeg > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_b .Sprintf ("\u0025\u0063",_deaeg ));};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_abd :=len (args );if _abd < 3||_abd > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdba :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_caeb :=args [1].ValueNumber ;if _caeb !=float64 (int (_caeb )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgbd :=args [2].ValueNumber ;_cdbba :=0.0;if _abd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbba =args [3].ValueNumber ;};_bdcd :=0;if _abd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdcd =int (args [4].ValueNumber );if _bdcd !=0{_bdcd =1;};};return MakeNumberResult (_cdd (_fdba ,_caeb ,_cfgbd ,_cdbba ,_bdcd ));};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_edebd ,_egeg :=_eagc (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _egeg .Type ==ResultTypeError {return _egeg ;};_efeab :=_caff (_edebd ._gecg );_ebdd :=_caff (_edebd ._fbca );_bfgb :=_edebd ._adca ;_dedg :=_dgeg (_efeab ,_ebdd ,_bfgb );_afbd ,_adfgg ,_agc :=_dedg .Date ();return MakeNumberResult (_cea (_afbd ,int (_adfgg ),_agc ));};type durationArgs struct{_aded float64 ;_cbcf float64 ;_cga float64 ;_bafd float64 ;_deda float64 ;_fddg int ;};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);type tokenType int ;

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dgg :=args [0].ValueNumber ;_gbee :=args [1].ValueNumber ;_eafe :=args [2].ValueNumber ;_faaa :=_beb (_dgg ,_gbee ,_eafe );if _faaa >=0{return MakeNumberResult (_faaa );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};func (_bdg BinOpType )String ()string {if _bdg >=BinOpType (len (_fc )-1){return _b .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_bdg );};return _efcf [_fc [_bdg ]:_fc [_bdg +1]];};func (_gcc *evCache )GetFromCache (key string )(Result ,bool ){_gcc ._bde .Lock ();_gfga ,_fbff :=_gcc ._gfg [key ];_gcc ._bde .Unlock ();return _gfga ,_fbff ;};const _bfe ="\u005e\u0028\u0028"+_dcc +"\u007c"+_dff +"\u007c"+_dce +"\u007c"+_gaf +"\u0029\u0020\u0029\u003f";type defEval struct{evCache ;_aff bool ;};func _bfed (_gbba []Result ,_fbe string )(*amorArgs ,Result ){_dgcb :=len (_gbba );if _dgcb !=6&&_dgcb !=7{return nil ,MakeErrorResult (_fbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gbba [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbe +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_affb :=_gbba [0].ValueNumber ;if _affb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_gaaa ,_agdag :=_gbde (_gbba [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_fbe );if _agdag .Type ==ResultTypeError {return nil ,_agdag ;};_bab ,_agdag :=_gbde (_gbba [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_fbe );if _agdag .Type ==ResultTypeError {return nil ,_agdag ;};if _bab < _gaaa {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _gbba [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcge :=_gbba [3].ValueNumber ;if _gcge < 0||_gcge > _affb {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _gbba [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfgg :=int (_gbba [4].ValueNumber );if _dfgg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbe +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _gbba [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cggc :=_gbba [5].ValueNumber ;if _cggc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbe +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_eece :=0;if _dgcb ==7&&_gbba [6].Type !=ResultTypeEmpty {if _gbba [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbe +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eece =int (_gbba [6].ValueNumber );if !_ebf (_eece )||_eece ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_fbe );};};return &amorArgs {_affb ,_gaaa ,_bab ,_gcge ,_dfgg ,_cggc ,_eece },_fgf ;};const _egd ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _dabc (_gfbe _gf .Time )_gf .Time {_gfbe =_gfbe .UTC ();return _gf .Date (_gfbe .Year (),_gfbe .Month (),_gfbe .Day (),_gfbe .Hour (),_gfbe .Minute (),_gfbe .Second (),_gfbe .Nanosecond (),_gf .Local );};func _gbgf (_gbbfb []string ,_cceb int )string {return _ab .Itoa (len (_gbbfb [len (_gbbfb )-1-_cceb ]))};func _feab (_ddcf []Result ,_ggge rmode )Result {if len (_ddcf )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_afggg :=_ddcf [0].AsNumber ();if _afggg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfage :=_ddcf [1].AsNumber ();if _bfage .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aabb :=_bfage .ValueNumber ;_dcab :=_afggg .ValueNumber ;_baecc :=1.0;if _aabb > 0{_baecc =_bb .Pow (1/10.0,_aabb );}else {_baecc =_bb .Pow (10.0,-_aabb );};_dcab ,_eeabd :=_bb .Modf (_dcab /_baecc );switch _ggge {case _aeae :const _ccfd =0.499999999;if _eeabd >=_ccfd {_dcab ++;}else if _eeabd <=-_ccfd {_dcab --;};case _bbbdd :case _ccba :if _eeabd > 0{_dcab ++;}else if _eeabd < 0{_dcab --;};};return MakeNumberResult (_dcab *_baecc );};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfaa :=true ;for _ ,_febee :=range args {_febee =_febee .AsNumber ();switch _febee .Type {case ResultTypeList ,ResultTypeArray :_adbd :=And (_febee .ListValues ());if _adbd .Type ==ResultTypeError {return _adbd ;};if _adbd .ValueNumber ==0{_gfaa =false ;};case ResultTypeNumber :if _febee .ValueNumber ==0{_gfaa =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _febee ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_gfaa );};func _dbeaf (_dcbf ,_gdbb Result ,_cbcc string )(*xargs ,Result ){if _dcbf .Type !=ResultTypeList &&_dcbf .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cbcc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_ggcca :=_cedc (_dcbf );_gfdb :=[]float64 {};for _ ,_defe :=range _ggcca {for _ ,_cfbg :=range _defe {if _cfbg .Type ==ResultTypeNumber &&!_cfbg .IsBoolean {_gfdb =append (_gfdb ,_cfbg .ValueNumber );}else {return nil ,MakeErrorResult (_cbcc +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_abfe :=len (_gfdb );if len (_gfdb )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _gdbb .Type !=ResultTypeList &&_gdbb .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cbcc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_caea :=_cedc (_gdbb );_aagg :=[]float64 {};_acbe :=0.0;for _ ,_bafa :=range _caea {for _ ,_ceed :=range _bafa {if _ceed .Type ==ResultTypeNumber &&!_ceed .IsBoolean {_fedb :=float64 (int (_ceed .ValueNumber ));if _fedb < _acbe {return nil ,MakeErrorResultType (ErrorTypeNum ,_cbcc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_aagg =append (_aagg ,_fedb );_acbe =_fedb ;}else {return nil ,MakeErrorResult (_cbcc +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_aagg )!=_abfe {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_gfdb ,_aagg },MakeEmptyResult ();};func _abfc (_bcfb Result ,_gggcd ,_gged int )[][]Result {_gfba :=[][]Result {};switch _bcfb .Type {case ResultTypeArray :for _fcefe ,_agb :=range _bcfb .ValueArray {if _fcefe < _gggcd {_gfba =append (_gfba ,_bfac (MakeListResult (_agb ),_gged ));}else {_gfba =append (_gfba ,_bfac (MakeErrorResultType (ErrorTypeNA ,""),_gged ));};};case ResultTypeList :_bdce :=_bfac (_bcfb ,_gged );for _cggcc :=0;_cggcc < _gggcd ;_cggcc ++{_gfba =append (_gfba ,_bdce );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bdba :=0;_bdba < _gggcd ;_bdba ++{_aaad :=_bfac (_bcfb ,_gged );_gfba =append (_gfba ,_aaad );};};return _gfba ;};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgaf :=args [0];switch _bgaf .Type {case ResultTypeError :return _bgaf ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_bgaf .ValueNumber !=0);};if _bgaf .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _gbge (args );case ResultTypeArray :return _fdde (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_baac string };var InvalidReferenceContext =&ivr {};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_baga :=args [0].AsNumber ();_ggebd :=args [1].AsNumber ();if _baga .Type !=ResultTypeNumber ||_ggebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _ggebd .ValueNumber < _baga .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_aeff :=int64 (_baga .ValueNumber );_gebe :=int64 (_ggebd .ValueNumber );return MakeNumberResult (float64 (_bcae .Int63n (_gebe -_aeff +1)+_aeff ));};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fafbd :=args [0];_dggd :=args [1];if _dggd .Type !=ResultTypeArray &&_dggd .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_agcc :=_bbgdg (_dggd );_fage :=-1;for _ebgf ,_edf :=range _agcc {if _bfaeg (_fafbd ,_edf ,false ,false )==_gdabd {_fage =_ebgf ;};};if _fage ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_dbff :=_agcc ;if len (args )==3{_dbff =_bbgdg (args [2]);};if _fage < 0||_fage >=len (_dbff ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _dbff [_fage ];};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_cegda :=len (args );if _cegda !=2&&_cegda !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cgga ,_ddafb :=_dbeaf (args [0],args [1],"\u0058\u0049\u0052\u0052");if _ddafb .Type ==ResultTypeError {return _ddafb ;};_fcbe :=_cgga ._aegf ;_gebf :=_cgga ._cgbbf ;_bfae :=0.1;if _cegda ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfae =args [2].ValueNumber ;if _bfae <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _dccc (_fcbe ,_gebf ,_bfae );};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_facdb NamedRangeRef )Update (q *_fe .UpdateQuery )Expression {return _facdb };

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_gfa :=len (args );if _gfa < 3||_gfa > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_befe :=args [0].ValueNumber ;if _befe !=float64 (int (_befe )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffdc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_abgd :=args [2].ValueNumber ;_ddag :=0.0;if _gfa >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddag =args [3].ValueNumber ;};_cbbfg :=0.0;if _gfa >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cbbfg =args [4].ValueNumber ;if _cbbfg !=0{_cbbfg =1;};};_ffe :=0.1;if _gfa >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffe =args [5].ValueNumber ;};_gccf :=100;_ggeg :=0;_bggf :=false ;_bafb :=1e-6;_efff :=_ffe ;for _ggeg < _gccf &&!_bggf {_gdad :=_bb .Pow (_efff +1,_befe );_bbdad :=_bb .Pow (_efff +1,_befe -1);_acgf :=_efff *_cbbfg +1;_eega :=_ffdc *(_gdad -1);_dcea :=_ddag +_gdad *_abgd +_eega *_acgf /_efff ;_cecdd :=_befe *_bbdad *_abgd -_eega *_acgf /_bb .Pow (_efff ,2);_fegf :=(_befe *_ffdc *_bbdad *_acgf +_eega *_cbbfg )/_efff ;_dadf :=_dcea /(_cecdd +_fegf );if _bb .Abs (_dadf )< _bafb {_bggf =true ;};_ggeg ++;_efff -=_dadf ;};return MakeNumberResult (_efff );};var _ecda =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};func _dge (_gebb string )(int ,int ,float64 ,bool ,bool ,Result ){_fccg :="";_dfcc :=[]string {};for _ceda ,_gae :=range _cdb {_dfcc =_gae .FindStringSubmatch (_gebb );if len (_dfcc )> 1{_fccg =_ceda ;break ;};};if _fccg ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};_afdf :=_dfcc [1]=="";_dfcc =_dfcc [49:];_bee :=len (_dfcc );_dbdg :=_dfcc [_bee -1];_fgd :=_dbdg =="\u0061\u006d";_cgc :=_dbdg =="\u0070\u006d";var _ecff ,_dagb int ;var _fdf float64 ;var _cae error ;switch _fccg {case "\u0068\u0068":_ecff ,_cae =_ab .Atoi (_dfcc [0]);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};_dagb =0;_fdf =0;case "\u0068\u0068\u003am\u006d":_ecff ,_cae =_ab .Atoi (_dfcc [0]);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};_dagb ,_cae =_ab .Atoi (_dfcc [2]);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};_fdf =0;case "\u006d\u006d\u003as\u0073":_ecff =0;_dagb ,_cae =_ab .Atoi (_dfcc [0]);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};_fdf ,_cae =_ab .ParseFloat (_dfcc [2],64);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_ecff ,_cae =_ab .Atoi (_dfcc [0]);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};_dagb ,_cae =_ab .Atoi (_dfcc [2]);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};_fdf ,_cae =_ab .ParseFloat (_dfcc [4],64);if _cae !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};};if _dagb >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};if _fgd ||_cgc {if _ecff > 12||_fdf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );}else if _ecff ==12{_ecff =0;};}else if _ecff >=24||_fdf >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_efb );};return _ecff ,_dagb ,_fdf ,_cgc ,_afdf ,_fgf ;};type rmode byte ;type countMode byte ;

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_baac :v }};type yySymType struct{_bffdg int ;_edbec *node ;_gbdce Expression ;_gefg []Expression ;_gddc [][]Expression ;};

// FunctionCall is a function call expression.
type FunctionCall struct{_dfbd string ;_gfccf []Expression ;};

// IsDBCS returns false for the invalid reference context.
func (_bbfc *ivr )IsDBCS ()bool {return false };

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};const _debg =57357;

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbde :=args [0].AsString ();if _bbde .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_bbde .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_bbde .ValueString [0]));};func _bcab (_edaf ,_fabc float64 ,_cgea ,_aba int )float64 {_gacb :=_caff (_edaf );_baad :=_caff (_fabc );if _aba ==1{_bcge :=_adgc (_gacb ,_baad ,_cgea ,1);_bcgf :=_bcge .AddDate (0,12/_cgea ,0);return _gfbf (_bcge ,_bcgf ,_aba );};return float64 (_ggbc (0,_aba ))/float64 (_cgea );};func _gaaeg ()yyParser {return &yyParserImpl {}};func (_gedd *ivr )SetOffset (col ,row uint32 ){};

// String returns a string of a range.
func (_adfggc Range )String ()string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_adfggc ._cbfa .String (),_adfggc ._ebcc .String ());};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ebadb :=args [0];if _ebadb .Type ==ResultTypeError ||_ebadb .Type ==ResultTypeString {return _ebadb ;};return _fgf ;};const _eccb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Function is a standard function whose result only depends on its arguments.
type Function func (_aaeda []Result )Result ;

// Reference returns a string reference value to a horizontal range.
func (_gbcf HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_gbcf .horizontalRangeReference ()};};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_abcd :data }};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_feg :=_gf .Now ();_ ,_eab :=_feg .Zone ();_fbce :=_aeb +float64 (_feg .Unix ()+int64 (_eab ))/86400;return MakeNumberResult (_fbce );};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_bcgbe PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_bacc :=_bcgbe ._acggg .Reference (ctx ,ev );_abbg :=_bcgbe ._cafdg .Reference (ctx ,ev );_efebe :=_bcgbe ._cfed .Reference (ctx ,ev );switch _bacc .Type {case ReferenceTypeSheet :if _ccaa (_bacc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bacc .Value ));};_ggdfc :=_adacd (_bacc ,_abbg ,_efebe );if _abbg .Type ==ReferenceTypeCell &&_efebe .Type ==ReferenceTypeCell {if _eedge ,_acdb :=ev .GetFromCache (_ggdfc );_acdb {return _eedge ;}else {_fccf :=_dfcgb (ctx .Sheet (_bacc .Value ),ev ,_abbg .Value ,_efebe .Value );ev .SetCache (_ggdfc ,_fccf );return _fccf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_ggdfc );default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bacc .Type ));};};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_bcabd :=args [0].ValueNumber ;if _bcabd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_bfca :=float64 (int (args [1].ValueNumber ));if _bfca < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_bb .Pow (_bcabd +1,1/_bfca )-1)*_bfca );};func _cgbe (_geecf []Result ,_fbcba bool )Result {var _gbcd string ;if _fbcba {_gbcd ="\u004c\u0041\u0052G\u0045";}else {_gbcd ="\u0053\u004d\u0041L\u004c";};if len (_geecf )!=2{return MakeErrorResult (_gbcd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcda :=_geecf [0];var _aadgd [][]Result ;switch _dcda .Type {case ResultTypeArray :_aadgd =_dcda .ValueArray ;case ResultTypeList :_aadgd =[][]Result {_dcda .ValueList };default:return MakeErrorResult (_gbcd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_aadgd )==0{return MakeErrorResult (_gbcd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _geecf [1].Type !=ResultTypeNumber {return MakeErrorResult (_gbcd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_gabc :=_geecf [1].ValueNumber ;if _gabc < 1{return MakeErrorResultType (ErrorTypeNum ,_gbcd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_ffeb :=int (_gabc );if float64 (_ffeb )!=_gabc {return MakeErrorResultType (ErrorTypeNum ,_gbcd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_fbcbe :=[]float64 {};for _ ,_ddaed :=range _aadgd {for _ ,_gfcc :=range _ddaed {if _gfcc .Type ==ResultTypeNumber {_fbcbe =append (_fbcbe ,_gfcc .ValueNumber );};};};if _ffeb > len (_fbcbe ){return MakeErrorResultType (ErrorTypeNum ,_gbcd +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_edafe :=_ecb .MergeSort (_fbcbe );if _fbcba {return MakeNumberResult (_edafe [len (_edafe )-_ffeb ]);}else {return MakeNumberResult (_edafe [_ffeb -1]);};};const _efgc =16;var _affbc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_abbb ,_afdba :=_eagc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _afdba .Type ==ResultTypeError {return _afdba ;};return MakeNumberResult (_acba (_abbb ._gecg ,_abbb ._fbca ,_abbb ._adca ,_abbb ._cfcf ));};func _bfac (_efbc Result ,_ggfd int )[]Result {_gcgg :=[]Result {};switch _efbc .Type {case ResultTypeList :_ecga :=_efbc .ValueList ;_becd :=len (_ecga );for _fefd :=0;_fefd < _ggfd ;_fefd ++{if _fefd < _becd {_gcgg =append (_gcgg ,_ecga [_fefd ]);}else {_gcgg =append (_gcgg ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _fadg :=0;_fadg < _ggfd ;_fadg ++{_gcgg =append (_gcgg ,_efbc );};};return _gcgg ;};func _ebf (_cbbb int )bool {return _cbbb >=0&&_cbbb <=4};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _face (_gde string )(int ,int ,int ,bool ,Result ){_cfc :="";_cdg :=[]string {};for _aaeg ,_bbae :=range _ccf {_cdg =_bbae .FindStringSubmatch (_gde );if len (_cdg )> 1{_cfc =_aaeg ;break ;};};if _cfc ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_ffa :=false ;var _ccbg ,_dfa ,_agab int ;var _cadb error ;switch _cfc {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_dfa ,_cadb =_ab .Atoi (_cdg [1]);if _cadb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_agab ,_cadb =_ab .Atoi (_cdg [3]);if _cadb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_ccbg ,_cadb =_ab .Atoi (_cdg [5]);if _cadb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};if _ccbg < 0||_ccbg > 9999||(_ccbg > 99&&_ccbg < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_ccbg =_gfgd (_ccbg );_ffa =_cdg [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_dfa =_agfb [_cdg [1]];_agab ,_cadb =_ab .Atoi (_cdg [14]);if _cadb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_ccbg ,_cadb =_ab .Atoi (_cdg [16]);if _cadb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};if _ccbg < 0||_ccbg > 9999||(_ccbg > 99&&_ccbg < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_ccbg =_gfgd (_ccbg );_ffa =_cdg [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_dfb ,_bdaf :=_ab .Atoi (_cdg [1]);if _bdaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_gace ,_bdaf :=_ab .Atoi (_cdg [3]);if _bdaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_dda ,_bdaf :=_ab .Atoi (_cdg [5]);if _bdaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};if _dfb >=1900&&_dfb < 10000{_ccbg =_dfb ;_dfa =_gace ;_agab =_dda ;}else if _dfb > 0&&_dfb < 13{_dfa =_dfb ;_agab =_gace ;_ccbg =_dda ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_ffa =_cdg [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_ccbg ,_cadb =_ab .Atoi (_cdg [16]);if _cadb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_dfa =_agfb [_cdg [3]];_agab ,_cadb =_ab .Atoi (_cdg [1]);if _cadb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};_ffa =_cdg [19]=="";};if !_cdbb (_ccbg ,_dfa ,_agab ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fbgf );};return _ccbg ,_dfa ,_agab ,_ffa ,_fgf ;};func _fbcb (_baeg ,_fbcf ,_eagb ,_faac int )int {if _fbcf > _eagb {return 0;};if _baaff (_faac ){return (_eagb -_fbcf +1)*30;};_bed :=0;for _abb :=_fbcf ;_abb <=_eagb ;_abb ++{_bed +=_baea (_baeg ,_abb );};return _bed ;};

// Update updates references in the PrefixExpr after removing a row/column.
func (_fcagb PrefixExpr )Update (q *_fe .UpdateQuery )Expression {_ccdd :=_fcagb ;_acdad :=_fcagb ._ddgae .String ();if _acdad ==q .SheetToUpdate {_deece :=*q ;_deece .UpdateCurrentSheet =true ;_ccdd ._dfccb =_fcagb ._dfccb .Update (&_deece );};return _ccdd ;};const _fgde =57364;

// Update updates references in the BinaryExpr after removing a row/column.
func (_gff BinaryExpr )Update (q *_fe .UpdateQuery )Expression {_dg :=_gff ;_dg ._ga =_gff ._ga .Update (q );_dg ._ef =_gff ._ef .Update (q );return _dg ;};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_abgde ,_ebba ,_bddb :=_eeg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _bddb .Type ==ResultTypeError {return _bddb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fda :=_ebba -_abgde ;if _fda > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_bcdf :=args [2].ValueNumber ;if _bcdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gefb :=(100-_bcdf )/_bcdf ;_gagd :=360/_fda ;return MakeNumberResult (_gefb *_gagd );};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bdf :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_bdf *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_bgbc :=_cedc (args [1]);for _ ,_eaa :=range _bgbc {for _ ,_bac :=range _eaa {if _bac .Type !=ResultTypeNumber ||_bac .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_bdf *=1.0+_bac .ValueNumber ;};};return MakeNumberResult (_bdf );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};const _dfeda =57366;

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_bcae .Float64 ());};type rangeIndex struct{_dfadc int ;_cabca int ;};func _cgbf (_fabf ,_ffac ,_eecf ,_fbgd ,_dgb ,_afcg float64 )float64 {var _aaga ,_bbbbb float64 ;_eceg :=0.0;_ceabe :=_bb .Ceil (_dgb );_bddbf :=_fabf -_ffac ;_fbbf :=false ;_agea :=0.0;for _dcff :=1.0;_dcff <=_ceabe ;_dcff ++{if !_fbbf {_aaga =_gdbgg (_fabf ,_ffac ,_eecf ,_dcff ,_afcg );_agea =_bddbf /(_eecf -_dcff +1);if _agea > _aaga {_bbbbb =_agea ;_fbbf =true ;}else {_bbbbb =_aaga ;_bddbf -=_aaga ;};}else {_bbbbb =_agea ;};if _dcff ==_ceabe {_bbbbb *=_dgb +1-_ceabe ;};_eceg +=_bbbbb ;};return _eceg ;};

// String returns a string representation of ConstArrayExpr.
func (_gcd ConstArrayExpr )String ()string {return ""};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bgbf :=_c .ToLower (args [0].ValueString );if !_gaaf (_bgbf ){_ ,_ ,_ ,_ ,_cda ,_gabd :=_dge (_bgbf );if _gabd .Type ==ResultTypeError {_gabd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _gabd ;};if _cda {return MakeNumberResult (0);};};_cadf ,_fade ,_aggg ,_ ,_bfd :=_face (_bgbf );if _bfd .Type ==ResultTypeError {return _bfd ;};return MakeNumberResult (_cea (_cadf ,_fade ,_aggg ));};func _facge (_fbcc ,_baaa ,_dbac ,_geac float64 ,_dcca int )float64 {var _gbfc float64 ;if _fbcc ==0{_gbfc =(_dbac +_geac )/_baaa ;}else {_accc :=_bb .Pow (1+_fbcc ,_baaa );if _dcca ==1{_gbfc =(_geac *_fbcc /(_accc -1)+_dbac *_fbcc /(1-1/_accc ))/(1+_fbcc );}else {_gbfc =_geac *_fbcc /(_accc -1)+_dbac *_fbcc /(1-1/_accc );};};return -_gbfc ;};

// Eval evaluates and returns a number.
func (_fccda Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_fccda ._fecdf )};type xargs struct{_aegf []float64 ;_cgbbf []float64 ;};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ga :lhs ,_ef :rhs ,_bd :op };};const _dba ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_cabd :=len (args );if _cabd !=4&&_cabd !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aagc ,_fdgcd ,_addc :=_eeg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _addc .Type ==ResultTypeError {return _addc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edgdc :=args [2].ValueNumber ;if _edgdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gcad :=args [3].ValueNumber ;if _gcad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_eebe :=0;if _cabd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eebe =int (args [4].ValueNumber );if !_ebf (_eebe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_fcfa ,_addc :=_bff (_aagc ,_fdgcd ,_eebe );if _addc .Type ==ResultTypeError {return _addc ;};return MakeNumberResult (_gcad *(1-_edgdc *_fcfa ));};const _bbggf =57360;

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_cbeed (args ,_fegdg ))};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_bgfc :=_d .Buffer {};for _ ,_fcag :=range args {switch _fcag .Type {case ResultTypeString :_bgfc .WriteString (_fcag .ValueString );case ResultTypeNumber :var _gbea string ;if _fcag .IsBoolean {if _fcag .ValueNumber ==0{_gbea ="\u0046\u0041\u004cS\u0045";}else {_gbea ="\u0054\u0052\u0055\u0045";};}else {_gbea =_fcag .AsString ().ValueString ;};_bgfc .WriteString (_gbea );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_bgfc .String ());};

// Reference returns a string reference value to a cell.
func (_af CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_af ._cdf };};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};const _fgge =57373;func _dad (_bga int ,_eagdg _gf .Month ,_adfg int )int64 {if _bga ==1900&&int (_eagdg )<=2{_adfg --;};_efaf :=_gf .Date (_bga ,_eagdg ,_adfg ,0,0,0,0,_gf .UTC );return _efaf .Unix ();};const _gcfag =57344;

// Eval evaluates and returns the result of the cell reference.
func (_fg CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fg ._cdf ,ev )};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fecg :=args [0];if _fecg .Type ==ResultTypeList {_bedc :=[][]Result {};for _ ,_gffbc :=range _fecg .ValueList {_bedc =append (_bedc ,[]Result {_gffbc });};return MakeArrayResult (_bedc );};_ccgcd :=make ([][]Result ,len (_fecg .ValueArray [0]));for _ ,_bfbd :=range _fecg .ValueArray {for _bggd ,_ggcd :=range _bfbd {_ccgcd [_bggd ]=append (_ccgcd [_bggd ],_ggcd );};};return MakeArrayResult (_ccgcd );};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_ggef ,_cgee :=_eagc (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _cgee .Type ==ResultTypeError {return _cgee ;};return MakeNumberResult (_ccc (_ggef ._gecg ,_ggef ._fbca ,_ggef ._adca ,_ggef ._cfcf ));};type noCache struct{};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcga :=_gebbf (args );_ed .Float64s (_dcga );var _bgcgd float64 ;if len (_dcga )%2==0{_bgcgd =(_dcga [len (_dcga )/2-1]+_dcga [len (_dcga )/2])/2;}else {_bgcgd =_dcga [len (_dcga )/2];};return MakeNumberResult (_bgcgd );};type ri struct{_gdgg float64 ;_ecbd string ;};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccgcg :=args [0].Ref ;if _ccgcg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_ccgcg .Value ,ev ).IsBoolean );};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _fcfd (args ,false )};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_fbeb :=_c .Split (v ,"\u003a");if len (_fbeb )!=2{return nil ;};if _fbeb [0]> _fbeb [1]{_fbeb [0],_fbeb [1]=_fbeb [1],_fbeb [0];};return PrefixVerticalRange {_fgbb :pfx ,_acbab :_fbeb [0],_cacf :_fbeb [1]};};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_ggged :=len (args );if _ggged !=3&&_ggged !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aaab ,_aafba :=_bgcgg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _aafba .Type ==ResultTypeError {return _aafba ;};_ffgff ,_aafba :=_bgcgg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _aafba .Type ==ResultTypeError {return _aafba ;};_fgfcf ,_aafba :=_bgcgg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _aafba .Type ==ResultTypeError {return _aafba ;};_cbce :=0;if _ggged ==3{return MakeStringResult (_c .Replace (_aaab ,_ffgff ,_fgfcf ,-1));}else {_abdb ,_bgbgg :=_gacff (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _bgbgg .Type ==ResultTypeError {return _bgbgg ;};_cbce =int (_abdb );if _cbce < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_bgea :=_aaab ;_cefc :=_cbce ;_ecedd :=-1;_ecbfb :=len (_ffgff );_fdeag :=0;for {_cefc --;_cgebd :=_c .Index (_bgea ,_ffgff );if _cgebd ==-1{_ecedd =-1;break ;}else {_ecedd =_cgebd +_fdeag ;if _cefc ==0{break ;};_bfec :=_ecbfb +_cgebd ;_fdeag +=_bfec ;_bgea =_bgea [_bfec :];};};if _ecedd ==-1{return MakeStringResult (_aaab );}else {_bdbf :=_aaab [:_ecedd ];_abgc :=_aaab [_ecedd +_ecbfb :];return MakeStringResult (_bdbf +_fgfcf +_abgc );};};};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_gafgd .Lock ();defer _gafgd .Unlock ();if _edgf ,_bacag :=_acbbd [name ];_bacag {return _edgf ;};return nil ;};func _ggbgb (_bdgga ,_bgdfa Reference )string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_bdgga .Value ,_bgdfa .Value );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_gcdaf SheetPrefixExpr )Update (q *_fe .UpdateQuery )Expression {return _gcdaf };

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};func _efa (_aa Result )bool {if _aa .Type ==ResultTypeString {return _aa .ValueString =="";};return _aa .ValueNumber ==0;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_bcda :=_aegd (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _bcda .Type !=ResultTypeEmpty {return _bcda ;};_dgca :=_dbacd (args [1:]);_eagg :=-_bb .MaxFloat64 ;_ffge :=_cedc (args [0]);for _ ,_dfcg :=range _dgca {_deag :=_ffge [_dfcg ._dfadc ][_dfcg ._cabca ].ValueNumber ;if _eagg < _deag {_eagg =_deag ;};};if _eagg ==-_bb .MaxFloat64 {_eagg =0;};return MakeNumberResult (float64 (_eagg ));};func init (){_gbdc ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dbdgc :=args [0].ValueNumber ;if _dbdgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_edba ,_acaf :=_dbeaf (args [1],args [2],"\u0058\u004e\u0050\u0056");if _acaf .Type ==ResultTypeError {return _acaf ;};_geec :=_edba ._aegf ;_dece :=_edba ._cgbbf ;_ffag :=0.0;_gefc :=_dece [0];for _gabg ,_dcgg :=range _geec {_ffag +=_dcgg /_bb .Pow (1+_dbdgc ,(_dece [_gabg ]-_gefc )/365);};return MakeNumberResult (_ffag );};func _babe (_ecffg []Result )(float64 ,float64 ,Result ){_bdag :=0.0;_gffac :=1.0;for _ ,_dfed :=range _ecffg {switch _dfed .Type {case ResultTypeNumber :_bdag +=_dfed .ValueNumber ;_gffac *=_edde (_dfed .ValueNumber );case ResultTypeList ,ResultTypeArray :_eeaeb ,_gedf ,_ggfa :=_babe (_dfed .ListValues ());_bdag +=_eeaeb ;_gffac *=_edde (_gedf );if _ggfa .Type ==ResultTypeError {return 0,0,_ggfa ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_dfed ;};};return _bdag ,_gffac ,_fgf ;};

// Negate is a negate expression like -A1.
type Negate struct{_dbcag Expression };var _eeffb =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_cafa PrefixRangeExpr )Update (q *_fe .UpdateQuery )Expression {_cgace :=_cafa ;_fdaf :=_cafa ._acggg .String ();if _fdaf ==q .SheetToUpdate {_eddfa :=*q ;_eddfa .UpdateCurrentSheet =true ;_cgace ._cafdg =_cafa ._cafdg .Update (&_eddfa );_cgace ._cfed =_cafa ._cfed .Update (&_eddfa );};return _cgace ;};func _afca (_abfg string ,_ecde []Result )(*parsedReplaceObject ,Result ){if len (_ecde )!=4{return nil ,MakeErrorResult (_abfg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ecde [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_abfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_ffbca :=_ecde [0].ValueString ;if _ecde [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_abfg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_gede :=int (_ecde [1].ValueNumber )-1;if _ecde [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_abfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bcgb :=int (_ecde [2].ValueNumber );if _ecde [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_abfg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_cegc :=_ecde [3].ValueString ;return &parsedReplaceObject {_ffbca ,_gede ,_bcgb ,_cegc },_fgf ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_cegf ,_dgbag :=_cdeb ("\u0046\u0049\u004e\u0044",args );if _dgbag .Type !=ResultTypeEmpty {return _dgbag ;};_gggb :=_cegf ._eeeg ;if _gggb ==""{return MakeNumberResult (1.0);};_gdbga :=_cegf ._badf ;_dbda :=_cegf ._aefee -1;_adbdb :=1;_cbgc :=0;for _bggb :=range _gdbga {if _bggb !=0{_ceba :=1;if _bggb -_cbgc > 1{_ceba =2;};_adbdb +=_ceba ;};if _adbdb > _dbda {_acbc :=_c .Index (_gdbga [_bggb :],_gggb );if _acbc ==0{return MakeNumberResult (float64 (_adbdb ));};};_cbgc =_bggb ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebf :=0;_adge :=false ;for _ ,_dagbc :=range args {switch _dagbc .Type {case ResultTypeList ,ResultTypeArray :_defgd :=Xor (_dagbc .ListValues ());if _defgd .Type ==ResultTypeError {return _defgd ;};if _defgd .ValueNumber !=0{_cebf ++;};_adge =true ;case ResultTypeNumber :if _dagbc .ValueNumber !=0{_cebf ++;};_adge =true ;case ResultTypeString :case ResultTypeError :return _dagbc ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_adge {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_cebf %2!=0);};func _gfgd (_aab int )int {if _aab < 1900{if _aab < 30{_aab +=2000;}else {_aab +=1900;};};return _aab ;};func _cbbfc (_gffd Result ,_egc *criteriaParsed )bool {_dada :=_c .ToLower (_gffd .ValueString );_abfdb :=_egc ._ebce ._abagb ;_ceddf :=_egc ._ebce ._cgbg ;if _abfdb ==_ecfgf {return _dada ==_ceddf ||_ag .Match (_ceddf ,_dada );};if _gffd .Type !=ResultTypeEmpty {if _dada ==_egc ._fgaa ||_ag .Match (_egc ._fgaa ,_dada ){return true ;};if _ ,_acbef :=_ab .ParseFloat (_ceddf ,64);_acbef ==nil {return false ;};switch _abfdb {case _ababd :return _dada <=_ceddf ;case _aafbc :return _dada >=_ceddf ;case _ffbe :return _dada < _ceddf ;case _bddga :return _dada > _ceddf ;};};return false ;};

// Eval evaluates and returns a string.
func (_eage String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_eage ._ggegb )};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_bdadg :=MakeNumberResult (0);for _ ,_bdcbd :=range args {_bdcbd =_bdcbd .AsNumber ();switch _bdcbd .Type {case ResultTypeNumber :_bdadg .ValueNumber +=_bdcbd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_eedg :=Sum (_bdcbd .ListValues ());if _eedg .Type !=ResultTypeNumber {return _eedg ;};_bdadg .ValueNumber +=_eedg .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bdcbd ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdcbd .Type ));};};return _bdadg ;};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_gafgd .Lock ();defer _gafgd .Unlock ();if _ ,_gfad :=_acbbd [name ];_gfad {_feb .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_acbbd [name ]=fn ;};var _aeb float64 =25569.0;

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cffa :=args [0].ValueNumber ;if _cffa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edga :=args [1].ValueNumber ;if _edga <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdgad :=args [2].ValueNumber ;if _gdgad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_bb .Log10 (_gdgad )-_bb .Log10 (_edga ))/_bb .Log10 (1+_cffa ));};

// String returns a string representation of a horizontal range.
func (_fdbfb HorizontalRange )String ()string {return _fdbfb .horizontalRangeReference ()};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_daef ,_agecd :=_cdeb ("\u0046\u0049\u004e\u0044",args );if _agecd .Type !=ResultTypeEmpty {return _agecd ;};_babg :=_c .ToLower (_daef ._eeeg );if _babg ==""{return MakeNumberResult (1.0);};_afdfa :=_c .ToLower (_daef ._badf );_agbe :=_daef ._aefee ;_agdaa :=1;for _abcde :=range _afdfa {if _agdaa < _agbe {_agdaa ++;continue ;};_eecbb :=_ag .Index (_babg ,_afdfa [_abcde :]);if _eecbb ==0{return MakeNumberResult (float64 (_agdaa ));};_agdaa ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func (_gbgbb Result )AsString ()Result {switch _gbgbb .Type {case ResultTypeNumber :return MakeStringResult (_gbgbb .Value ());default:return _gbgbb ;};};func _dbed (_fagec []Result ,_efcb bool )Result {_ebcg :="\u004d\u0041\u0058";if _efcb {_ebcg ="\u004d\u0041\u0058\u0041";};if len (_fagec )==0{return MakeErrorResult (_ebcg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdaaa :=-_bb .MaxFloat64 ;for _ ,_faeg :=range _fagec {switch _faeg .Type {case ResultTypeNumber :if (_efcb ||!_faeg .IsBoolean )&&_faeg .ValueNumber > _bdaaa {_bdaaa =_faeg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_cbggg :=_dbed (_faeg .ListValues (),_efcb );if _cbggg .ValueNumber > _bdaaa {_bdaaa =_cbggg .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_defc :=0.0;if _efcb {_defc =_faeg .AsNumber ().ValueNumber ;};if _defc > _bdaaa {_bdaaa =_defc ;};default:_feb .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ebcg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_faeg .Type );};};if _bdaaa ==-_bb .MaxFloat64 {_bdaaa =0;};return MakeNumberResult (_bdaaa );};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_c .NewReader (s ));};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_dfbd :name ,_gfccf :args };};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_agec :=len (args );if _agec ==0||_agec > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_ccfb :=_cedc (args [0]);_ccbc :=[]float64 {};for _ ,_aabe :=range _ccfb {for _ ,_eabe :=range _aabe {if _eabe .Type ==ResultTypeNumber &&!_eabe .IsBoolean {_ccbc =append (_ccbc ,_eabe .ValueNumber );};};};_ebdb :=len (_ccbc );if len (_ccbc )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_caffe :=0.1;if _agec ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_caffe =args [1].ValueNumber ;if _caffe <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_gbfb :=[]float64 {};for _baec :=0;_baec < _ebdb ;_baec ++{if _baec ==0{_gbfb =append (_gbfb ,0);}else {_gbfb =append (_gbfb ,_gbfb [_baec -1]+365);};};return _dccc (_ccbc ,_gbfb ,_caffe );};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fedec :=int (args [0].ValueNumber );return MakeBoolResult (_fedec !=_fedec /2*2);};var _egba string =string ([]byte {92});

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dacc :=args [0];if _dacc .Type !=ResultTypeArray &&_dacc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ecdb :=_cedc (_dacc );_fgdc :=args [2];if _fgdc .Type !=ResultTypeArray &&_fgdc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eaaf :=_cedc (_fgdc );_gcfd :=_agdc (args [1]);_bcgd :=0.0;for _agag ,_bfaca :=range _ecdb {for _ceffa ,_faacf :=range _bfaca {if _aeace (_faacf ,_gcfd ){_bcgd +=_eaaf [_agag ][_ceffa ].ValueNumber ;};};};return MakeNumberResult (_bcgd );};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdgg :=args [0].Ref ;if _fdgg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_fdgg .Value ));};type plex struct{_gbdcc chan *node ;_aagbe Expression ;_ceaec string ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_acag ,_cebc :=_afca ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _cebc .Type !=ResultTypeEmpty {return _cebc ;};_gfcg :=_acag ._cefa ;_gaafc :=_acag ._dceda ;_adec :=_acag ._beed ;_bdeg :=_acag ._dded ;_ffcdb :=len (_gfcg );if _gaafc > _ffcdb {_gaafc =_ffcdb ;};_aeacb :=_gaafc +_adec ;if _aeacb > _ffcdb {_aeacb =_ffcdb ;};_abca :=_gfcg [0:_gaafc ]+_bdeg +_gfcg [_aeacb :];return MakeStringResult (_abca );};var _cdb =map[string ]*_gg .Regexp {};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_dbcag :e }};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dgga :=args [0].AsNumber ();if _dgga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dgga .ValueNumber < 0{return MakeNumberResult (-1);}else if _dgga .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_bbdb ,_aaca :=_gcaef (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _aaca .Type ==ResultTypeError {return _aaca ;};_bade :=_bbdb ._aded ;_fbad :=_bbdb ._cbcf ;_fgc :=_bbdb ._cga ;_aefe :=_bbdb ._bafd ;_eddc :=_bbdb ._deda ;_cfa :=_bbdb ._fddg ;_dgfb :=_fddd (_bade ,_fbad ,_fgc ,_aefe ,_eddc ,_cfa );if _dgfb .Type ==ResultTypeError {return _dgfb ;};_fbdc :=_dgfb .ValueNumber /(1.0+_aefe /_eddc );return MakeNumberResult (_fbdc );};var _agfec =map[string ]Function {};

// Eval evaluates the binary expression using the context given.
func (_cfd BinaryExpr )String ()string {_cc :="";switch _cfd ._bd {case BinOpTypePlus :_cc ="\u002b";case BinOpTypeMinus :_cc ="\u002d";case BinOpTypeMult :_cc ="\u002a";case BinOpTypeDiv :_cc ="\u002f";case BinOpTypeExp :_cc ="\u005e";case BinOpTypeLT :_cc ="\u003c";case BinOpTypeGT :_cc ="\u003e";case BinOpTypeEQ :_cc ="\u003d";case BinOpTypeLEQ :_cc ="\u003c\u003d";case BinOpTypeGEQ :_cc ="\u003e\u003d";case BinOpTypeNE :_cc ="\u003c\u003e";case BinOpTypeConcat :_cc ="\u0026";};return _cfd ._ga .String ()+_cc +_cfd ._ef .String ();};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffbc ,_ffbd ,_ecg :=_eeg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _ecg .Type ==ResultTypeError {return _ecg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffda :=_ffbd -_ffbc ;if _ffda > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_bcee :=args [2].ValueNumber ;if _bcee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_bcee )/(360-_bcee *_ffda ));};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_eagd string ,_fbb Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_bfc string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_gf .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_bc int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_ge string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_gdf string )string ;

// GetFormat returns if cell is protected.
GetLocked (_dae string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_caf string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_bgb string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_eefd ,_geb int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_ggc string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_cce string ,_bba bool );

// NamedRange returns a named range.
NamedRange (_gag string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_gga ,_cbca uint32 );};func init (){_bcae =_ad .New (_ad .NewSource (_gf .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_adfa ("\u0041\u0053\u0049\u004e",_bb .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_adfa ("\u0041\u0053\u0049\u004e",_bb .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_adfa ("\u0041\u0053\u0049\u004e",_bb .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_adfa ("\u0041\u0043\u004f\u0054",func (_gefab float64 )float64 {return _bb .Pi /2-_bb .Atan (_gefab )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_adfa ("\u0041\u0043\u004fT\u0048",func (_dced float64 )float64 {return _bb .Atanh (1/_dced )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_adfa ("\u0041\u0053\u0049\u004e",_bb .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_adfa ("\u0041\u0053\u0049N\u0048",_bb .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_adfa ("\u0041\u0054\u0041\u004e",_bb .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_adfa ("\u0041\u0054\u0041N\u0048",_bb .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_adfa ("\u0043\u004f\u0053",_bb .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_adfa ("\u0043\u004f\u0053\u0048",_bb .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gbcdf ("\u0043\u004f\u0054",_bb .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gbcdf ("\u0043\u004f\u0054\u0048",_bb .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gbcdf ("\u0043\u0053\u0043",_bb .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gbcdf ("\u0043\u0053\u0043",_bb .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_adfa ("\u0045\u0058\u0050",_bb .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_adfa ("\u004c\u004e",_bb .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_adfa ("\u004c\u004f\u00471\u0030",_bb .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gbcdf ("\u0053\u0045\u0043",_bb .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gbcdf ("\u0053\u0045\u0043\u0048",_bb .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_adfa ("\u0053\u0049\u004e",_bb .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_adfa ("\u0053\u0049\u004e\u0048",_bb .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_adfa ("\u0053\u0051\u0052\u0054",_bb .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_adfa ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_bfcd float64 )float64 {return _bb .Sqrt (_bfcd *_bb .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_adfa ("\u0054\u0041\u004e",_bb .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_adfa ("\u0054\u0041\u004e\u0048",_bb .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};func (_fee *defEval )checkLastEvalIsRef (_afd Context ,_cad Expression ){switch _cad .(type ){case FunctionCall :switch _cad .(FunctionCall )._dfbd {case "\u0049\u0053\u0052E\u0046":for _ ,_dd :=range _cad .(FunctionCall )._gfccf {switch _dd .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_aef :=_dd .Eval (_afd ,_fee );_fee ._aff =!(_aef .Type ==ResultTypeError &&_aef .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_fee ._aff =false ;};};};};};

// Error is called in the case of parsing error and saves an error to a plex.
func (_adbgdb *plex )Error (s string ){_feb .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_adbgdb ._ceaec =s ;};

// Update returns the same object as updating sheet references does not affect Error.
func (_df Error )Update (q *_fe .UpdateQuery )Expression {return _df };

// LastRow returns 0 for the invalid reference context.
func (_bgdff *ivr )LastRow (colFrom string )int {return 0};

// HasFormula returns FALSE for the invalid reference context.
func (_ebdac *ivr )HasFormula (cellRef string )bool {return false };

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bece :=args [0].AsString ();if _bece .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_bece .ValueString )));};func _gbade (_bceec ,_fegfbb int )string {const TOKSTART =4;if !_egfac {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_aaagg :=range _ffbad {if _aaagg ._fdeg ==_bceec &&_aaagg ._abbd ==_fegfbb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_aaagg ._fffe ;};};_ggdc :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_cgbdg (_fegfbb );_cdbf :=make ([]int ,0,4);_cfdb :=_bgedb [_bceec ];for _fddeb :=TOKSTART ;_fddeb -1< len (_gcbb );_fddeb ++{if _fbdff :=_cfdb +_fddeb ;_fbdff >=0&&_fbdff < _facf &&_ebeff [_eeffb [_fbdff ]]==_fddeb {if len (_cdbf )==cap (_cdbf ){return _ggdc ;};_cdbf =append (_cdbf ,_fddeb );};};if _adba [_bceec ]==-2{_cccbd :=0;for _fceb [_cccbd ]!=-1||_fceb [_cccbd +1]!=_bceec {_cccbd +=2;};for _cccbd +=2;_fceb [_cccbd ]>=0;_cccbd +=2{_cede :=_fceb [_cccbd ];if _cede < TOKSTART ||_fceb [_cccbd +1]==0{continue ;};if len (_cdbf )==cap (_cdbf ){return _ggdc ;};_cdbf =append (_cdbf ,_cede );};if _fceb [_cccbd +1]!=0{return _ggdc ;};};for _ebca ,_cgcgb :=range _cdbf {if _ebca ==0{_ggdc +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_ggdc +="\u0020\u006f\u0072\u0020";};_ggdc +=_cgbdg (_cgcgb );};return _ggdc ;};const _cffc =57353;const _dcegc =-1000;

// String returns a string representation of SheetPrefixExpr.
func (_caeec SheetPrefixExpr )String ()string {return _caeec ._cefae };

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_decf :=_aegd (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _decf .Type !=ResultTypeEmpty {return _decf ;};_gccg :=_dbacd (args [1:]);_fdfb :=_bb .MaxFloat64 ;_eaac :=_cedc (args [0]);for _ ,_dbeb :=range _gccg {_ggeffd :=_eaac [_dbeb ._dfadc ][_dbeb ._cabca ].ValueNumber ;if _fdfb > _ggeffd {_fdfb =_ggeffd ;};};if _fdfb ==_bb .MaxFloat64 {_fdfb =0;};return MakeNumberResult (float64 (_fdfb ));};const _fdbg int =30;func _fde (_ffc ,_fada _gf .Time )bool {_dacd :=_ffc .Unix ();_eaff :=_fada .Unix ();_ecba :=_ffc .Year ();_efec :=_dad (_ecba ,_gf .March ,1);if _dcd (_ecba )&&_dacd < _efec &&_eaff >=_efec {return true ;};var _aaa =_fada .Year ();var _aeba =_dad (_aaa ,_gf .March ,1);return (_dcd (_aaa )&&_eaff >=_aeba &&_dacd < _aeba );};const _ecedb =57354;func _dgeg (_dgdg ,_cafc _gf .Time ,_efbb int )_gf .Time {_bcgfe :=_gf .Date (_dgdg .Year (),_cafc .Month (),_cafc .Day (),0,0,0,0,_gf .UTC );if _bcgfe .After (_dgdg ){_bcgfe =_bcgfe .AddDate (-1,0,0);};for !_bcgfe .After (_dgdg ){_bcgfe =_bcgfe .AddDate (0,12/_efbb ,0);};return _bcgfe ;};func _eea (_afc string ,_ebg *_fe .UpdateQuery )string {_cgd ,_gce :=_fa .ParseCellReference (_afc );if _gce !=nil {return "\u0023\u0052\u0045F\u0021";};if _ebg .UpdateType ==_fe .UpdateActionRemoveColumn {_cbg :=_ebg .ColumnIdx ;_bgfb :=_cgd .ColumnIdx ;if _bgfb < _cbg {return _afc ;}else if _bgfb ==_cbg {return "\u0023\u0052\u0045F\u0021";}else {return _cgd .Update (_fe .UpdateActionRemoveColumn ).String ();};};return _afc ;};const _dgd ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";const _daeea =57376;const _fbgf ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";type yyParserImpl struct{_aagd yySymType ;_ecbdb [_efgc ]yySymType ;_fbadd int ;};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gaee :=args [0].AsNumber ();if _gaee .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_acgb ,_fgcb :=_bb .Modf (_gaee .ValueNumber );if _fgcb < 0{_acgb --;};return MakeNumberResult (_acgb );};func (_fbbb *noCache )SetCache (key string ,value Result ){};func _cbeed (_dccdf []Result ,_dcfe countMode )float64 {_gdegd :=0.0;for _ ,_ccfdd :=range _dccdf {switch _ccfdd .Type {case ResultTypeNumber :if _dcfe ==_ffgb ||(_dcfe ==_fegdg &&!_ccfdd .IsBoolean ){_gdegd ++;};case ResultTypeList ,ResultTypeArray :_gdegd +=_cbeed (_ccfdd .ListValues (),_dcfe );case ResultTypeString :if _dcfe ==_ffgb {_gdegd ++;};case ResultTypeEmpty :if _dcfe ==_cbgf {_gdegd ++;};};};return _gdegd ;};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_gggd :=len (args );if _gggd < 4||_gggd > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gbda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdcb :=args [1].ValueNumber ;if _cdcb <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bebf :=args [2].ValueNumber ;if _bebf < _cdcb {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_feef :=args [3].ValueNumber ;_gffc :=0.0;if _gggd >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gffc =args [4].ValueNumber ;};_gbbg :=0;if _gggd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gbbg =int (args [5].ValueNumber );if _gbbg !=0{_gbbg =1;};};return MakeNumberResult (_facge (_gbda ,_bebf ,_feef ,_gffc ,_gbbg )-_dfbe (_gbda ,_cdcb ,_bebf ,_feef ,_gffc ,_gbbg ));};var _ffbad =[...]struct{_fdeg int ;_abbd int ;_fffe string ;}{};

// Eval evaluates and returns the result of a sheet expression.
func (_bgagd SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _feab (args ,_ccba )};type amorArgs struct{_ddb float64 ;_ccbe float64 ;_ageb float64 ;_dgagd float64 ;_fcaf int ;_edgg float64 ;_cab int ;};func _gfbf (_gdgc ,_gdfe _gf .Time ,_dbc int )float64 {if _gdgc .After (_gdfe ){_gdgc ,_gdfe =_gdfe ,_gdgc ;};_gecce :=0;_fdc ,_dbee ,_adc :=_gdgc .Date ();_bbbd ,_faf ,_gfge :=_gdfe .Date ();_edgc ,_gbc :=int (_dbee ),int (_faf );_ddf ,_baaf :=_gcae (_fdc ,_edgc ,_adc ,_dbc ),_gcae (_bbbd ,_gbc ,_gfge ,_dbc );if !_baaff (_dbc ){return _cea (_bbbd ,_gbc ,_baaf )-_cea (_fdc ,_edgc ,_ddf );};if _dbc ==0{if (_edgc ==2||_ddf < 30)&&_gfge ==31{_baaf =31;}else if _gbc ==2&&_baaf ==_baea (_bbbd ,_gbc ){_baaf =_baea (_bbbd ,2);};}else {if _edgc ==2&&_ddf ==30{_ddf =_baea (_fdc ,2);};if _gbc ==2&&_baaf ==30{_baaf =_baea (_bbbd ,2);};};if _fdc < _bbbd ||(_fdc ==_bbbd &&_edgc < _gbc ){_gecce =30-_ddf +1;_adc =1;_ddf =1;_ffb :=_gf .Date (_fdc ,_gf .Month (_edgc ),_adc ,0,0,0,0,_gf .UTC ).AddDate (0,1,0);if _ffb .Year ()< _bbbd {_gecce +=_fbcb (_ffb .Year (),int (_ffb .Month ()),12,_dbc );_ffb =_ffb .AddDate (0,13-int (_ffb .Month ()),0);_gecce +=_cdgc (_ffb .Year (),_bbbd -1,_dbc );};_gecce +=_fbcb (_bbbd ,int (_ffb .Month ()),_gbc -1,_dbc );_ffb =_ffb .AddDate (0,_gbc -int (_ffb .Month ()),0);_edgc =_ffb .Day ();};_gecce +=_baaf -_ddf ;if _gecce > 0{return float64 (_gecce );}else {return 0;};};func (_beaa *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_adbge NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_afgdb :=ctx .NamedRange (_adbge ._baac );_efeb :=_afgdb .Value ;if _fgbf ,_degfc :=ev .GetFromCache (_efeb );_degfc {return _fgbf ;};_cgcf :=_c .Split (_efeb ,"\u0021");if len (_cgcf )!=2{return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_efeb ));};_fcbda :=ctx .Sheet (_cgcf [0]);_bfbf :=_c .Split (_cgcf [1],"\u003a");switch len (_bfbf ){case 1:_aega :=ev .Eval (_fcbda ,_bfbf [0]);ev .SetCache (_efeb ,_aega );return _aega ;case 2:_bdfdf :=_dfcgb (_fcbda ,ev ,_bfbf [0],_bfbf [1]);ev .SetCache (_efeb ,_bdfdf );return _bdfdf ;};return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_afgdb .Type ));};

// Match implements the MATCH function.
func Match (args []Result )Result {_eggg :=len (args );if _eggg !=2&&_eggg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egebb :=1;if _eggg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_eeac :=args [2].ValueNumber ;if _eeac ==-1||_eeac ==0{_egebb =int (_eeac );};};_cabac :=args [1];var _cdfe []Result ;switch _cabac .Type {case ResultTypeList :_cdfe =_cabac .ValueList ;case ResultTypeArray :_gbfd :=_cabac .ValueArray ;for _ ,_fffc :=range _gbfd {if len (_fffc )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_cdfe =append (_cdfe ,_fffc [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_beec :=_agdc (args [0]);switch _egebb {case 0:for _cdfaa ,_dfgd :=range _cdfe {if _gbbf (_dfgd ,_beec ){return MakeNumberResult (float64 (_cdfaa +1));};};case -1:for _eccf :=0;_eccf < len (_cdfe );_eccf ++{if _gbbf (_cdfe [_eccf ],_beec ){return MakeNumberResult (float64 (_eccf +1));};if _beec ._edbbc &&(_cdfe [_eccf ].ValueNumber < _beec ._bbca ){if _eccf ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_eccf ));};};case 1:for _fbaf :=0;_fbaf < len (_cdfe );_fbaf ++{if _gbbf (_cdfe [_fbaf ],_beec ){return MakeNumberResult (float64 (_fbaf +1));};if _beec ._edbbc &&(_cdfe [_fbaf ].ValueNumber > _beec ._bbca ){if _fbaf ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fbaf ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_fgbb Expression ;_acbab ,_cacf string ;};

// Reference returns a string reference value to a range.
func (_fcgg Range )Reference (ctx Context ,ev Evaluator )Reference {_fgac :=_fcgg ._cbfa .Reference (ctx ,ev );_baafa :=_fcgg ._ebcc .Reference (ctx ,ev );if _fgac .Type ==ReferenceTypeCell &&_baafa .Type ==ReferenceTypeCell {return MakeRangeReference (_ggbgb (_fgac ,_baafa ));};return ReferenceInvalid ;};const _fcfef =57355;

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebgg :=args [0].AsString ();if _ebgg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_gafcf :=args [1].AsNumber ();if _gafcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcbc :=_ebgg .ValueString ;if len (_dcbc )> 2&&(_c .HasPrefix (_dcbc ,"\u0030\u0078")||_c .HasPrefix (_dcbc ,"\u0030\u0058")){_dcbc =_dcbc [2:];};_dbca ,_cebgd :=_ab .ParseInt (_dcbc ,int (_gafcf .ValueNumber ),64);if _cebgd !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_dbca ));};func _fcfd (_deab []Result ,_ggba bool )Result {_fbeg :="\u004d\u0049\u004e";if _ggba {_fbeg ="\u004d\u0049\u004e\u0041";};if len (_deab )==0{return MakeErrorResult (_fbeg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecbf :=_bb .MaxFloat64 ;for _ ,_ddcb :=range _deab {switch _ddcb .Type {case ResultTypeNumber :if (_ggba ||!_ddcb .IsBoolean )&&_ddcb .ValueNumber < _ecbf {_ecbf =_ddcb .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_gggcb :=_fcfd (_ddcb .ListValues (),_ggba );if _gggcb .ValueNumber < _ecbf {_ecbf =_gggcb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_eggcf :=0.0;if _ggba {_eggcf =_ddcb .AsNumber ().ValueNumber ;};if _eggcf < _ecbf {_ecbf =_eggcf ;};default:_feb .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_fbeg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddcb .Type );};};if _ecbf ==_bb .MaxFloat64 {_ecbf =0;};return MakeNumberResult (_ecbf );};

// Bool is a boolean expression.
type Bool struct{_cge bool };func (_eacb *plex )Lex (lval *yySymType )int {_egfac =true ;_geefg :=<-_eacb ._gbdcc ;if _geefg !=nil {lval ._edbec =_geefg ;return int (lval ._edbec ._cadfd );};return 0;};func _eeg (_bdc ,_ecfa Result ,_cadba string )(float64 ,float64 ,Result ){_dec ,_daa :=_gbde (_bdc ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_cadba );if _daa .Type ==ResultTypeError {return 0,0,_daa ;};_gbad ,_daa :=_gbde (_ecfa ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_cadba );if _daa .Type ==ResultTypeError {return 0,0,_daa ;};if _dec >=_gbad {return 0,0,MakeErrorResultType (ErrorTypeNum ,_cadba +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _dec ,_gbad ,_fgf ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_afbed VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dfaag :=_afbed .verticalRangeReference ();if _effgc ,_dcbca :=ev .GetFromCache (_dfaag );_dcbca {return _effgc ;};_ddgf ,_cbggf :=_agdca (ctx ,_afbed ._egabf ,_afbed ._dgbg );_afaeg :=_dfcgb (ctx ,ev ,_ddgf ,_cbggf );ev .SetCache (_dfaag ,_afaeg );return _afaeg ;};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cgbe (args ,false )};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_gcdab chan *node ;_adbcc _ec .Mutex ;_afaff []chan *node ;_fbbfa []*node ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_bgafg PrefixVerticalRange )Update (q *_fe .UpdateQuery )Expression {if q .UpdateType ==_fe .UpdateActionRemoveColumn {_eedb :=_bgafg ;_bcbdf :=_bgafg ._fgbb .String ();if _bcbdf ==q .SheetToUpdate {_feagc :=q .ColumnIdx ;_eedb ._acbab =_aae (_bgafg ._acbab ,_feagc );_eedb ._cacf =_aae (_bgafg ._cacf ,_feagc );};return _eedb ;};return _bgafg ;};

// Reference returns an invalid reference for String.
func (_cgdf String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ga ,_ef Expression ;_bd BinOpType ;};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _fcfd (args ,true )};func _affd (_gfaf Result )Result {if _gfaf .Type ==ResultTypeEmpty {return _gfaf ;};_ceaa :=_gfaf .AsString ();if _ceaa .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gfaf .IsBoolean {if _ceaa .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _ceaa .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_c .ToLower (_ceaa .ValueString ));};};const _cdcf =57351;const _bbcb =57374;

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dffb :=args [0];switch _dffb .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_bdgb :=_caff (_dffb .ValueNumber );return MakeNumberResult (float64 (_bdgb .Month ()));case ResultTypeString :_faad :=_c .ToLower (_dffb .ValueString );if !_gaaf (_faad ){_ ,_ ,_ ,_ ,_gaae ,_age :=_dge (_faad );if _age .Type ==ResultTypeError {_age .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _age ;};if _gaae {return MakeNumberResult (1);};};_ ,_dgcg ,_ ,_ ,_cbbe :=_face (_faad );if _cbbe .Type ==ResultTypeError {return _cbbe ;};return MakeNumberResult (float64 (_dgcg ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_fad CellRef )Update (q *_fe .UpdateQuery )Expression {if q .UpdateCurrentSheet {_fad ._cdf =_eea (_fad ._cdf ,q );};return _fad ;};var _dfd int64 =_dad (1900,_gf .January ,1);

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcca :=int (args [0].ValueNumber );return MakeBoolResult (_fcca ==_fcca /2*2);};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gdae :=args [0].AsNumber ();if _gdae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gfab :=args [1].AsNumber ();if _gfab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_bb .Pow (_gdae .ValueNumber ,_gfab .ValueNumber ));};func _gdbgg (_cbfe ,_aaff ,_aceb ,_baafd ,_bddda float64 )float64 {var _afffc float64 ;_dgba :=_bddda /_aceb ;if _dgba >=1{_dgba =1;if _baafd ==1{_afffc =_cbfe ;}else {_afffc =0;};}else {_afffc =_cbfe *_bb .Pow (1-_dgba ,_baafd -1);};_eead :=_cbfe *_bb .Pow (1-_dgba ,_baafd );var _ccbgc float64 ;if _eead < _aaff {_ccbgc =_afffc -_aaff ;}else {_ccbgc =_afffc -_eead ;};if _ccbgc < 0{_ccbgc =0;};return _ccbgc ;};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dadg :=args [0].AsString ();_edbe :=args [1].AsString ();if _dadg .Type !=ResultTypeString ||_edbe .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_dadg .ValueString ==_edbe .ValueString );};

// Eval evaluates and returns a boolean.
func (_agff Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_agff ._cge )};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dfea :=args [0];if _dfea .Type ==ResultTypeError {return _dfea ;};if _dfea .Type !=ResultTypeString &&_dfea .Type !=ResultTypeNumber &&_dfea .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_bfdf :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gfdbe :=int (args [1].ValueNumber );if _gfdbe < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gdade :=int (args [2].ValueNumber );if _gdade < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dagd :=len (_bfdf );if _gfdbe > _dagd {return MakeStringResult ("");};_gfdbe --;_fcaa :=_gfdbe +_gdade ;if _fcaa > _dagd {return MakeStringResult (_bfdf [_gfdbe :]);}else {return MakeStringResult (_bfdf [_gfdbe :_fcaa ]);};};

// SetLocked does nothing for the invalid reference context.
func (_bbbc *ivr )SetLocked (cellRef string ,locked bool ){};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acdd :=args [0].Type ;for _ ,_afab :=range args {if _afab .Type !=_acdd {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _acdd {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_ggcfa :=len (args [0].ListValues ());_edddc :=make ([]float64 ,_ggcfa );for _egdf :=range _edddc {_edddc [_egdf ]=1.0;};for _ ,_bgcg :=range args {if len (_bgcg .ListValues ())!=_ggcfa {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _ddebc ,_gfecg :=range _bgcg .ListValues (){_gfecg =_gfecg .AsNumber ();if _gfecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_edddc [_ddebc ]=_edddc [_ddebc ]*_gfecg .ValueNumber ;};};_bacgf :=0.0;for _ ,_ageg :=range _edddc {_bacgf +=_ageg ;};return MakeNumberResult (_bacgf );};return MakeNumberResult (1.0);};func init (){_abbad ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};const _cbcg =57378;var _ffacd =[...]uint8 {0,20,37,60,78,96};

// Reference returns an invalid reference for Number.
func (_ebggd Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcfgg :=args [0].AsNumber ();if _gcfgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_bb .Pi *_gcfgg .ValueNumber );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};func (_cfde VerticalRange )verticalRangeReference ()string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_cfde ._egabf ,_cfde ._dgbg );};func _cgca (_bacgd []Result ,_cbea bool )(float64 ,float64 ){_ffdcba :=0.0;_bcce :=0.0;for _ ,_ggbg :=range _bacgd {switch _ggbg .Type {case ResultTypeNumber :if _cbea ||!_ggbg .IsBoolean {_bcce +=_ggbg .ValueNumber ;_ffdcba ++;};case ResultTypeList ,ResultTypeArray :_beag ,_eaadg :=_cgca (_ggbg .ListValues (),_cbea );_bcce +=_beag ;_ffdcba +=_eaadg ;case ResultTypeString :if _cbea {_ffdcba ++;};case ResultTypeEmpty :};};return _bcce ,_ffdcba ;};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dggfc :=args [0].AsNumber ();_aaffd :=args [1].AsNumber ();if _dggfc .Type !=ResultTypeNumber ||_aaffd .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eagbg :=_bb .Trunc (_dggfc .ValueNumber );_bcfe :=_bb .Trunc (_aaffd .ValueNumber );if _bcfe > _eagbg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _bcfe ==_eagbg ||_bcfe ==0{return MakeNumberResult (1);};_fgab :=float64 (1);for _fafgg :=float64 (1);_fafgg <=_bcfe ;_fafgg ++{_fgab *=(_eagbg +1-_fafgg )/_fafgg ;};return MakeNumberResult (_fgab );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_cbdc ,_affab int };

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_cdgf :=len (args );if _cdgf !=4&&_cdgf !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fadeb ,_degf ,_geaa :=_eeg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _geaa .Type ==ResultTypeError {return _geaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afac :=args [2].ValueNumber ;if _afac <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deec :=args [3].ValueNumber ;if _deec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geeb :=0;if _cdgf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geeb =int (args [4].ValueNumber );if !_ebf (_geeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_efgd ,_geaa :=_bff (_fadeb ,_degf ,_geeb );if _geaa .Type ==ResultTypeError {return _geaa ;};return MakeNumberResult ((_deec -_afac )/_deec /_efgd );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fgef *defEval )LastEvalIsRef ()bool {return _fgef ._aff };

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_aaedd :=_aegd (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _aaedd .Type !=ResultTypeEmpty {return _aaedd ;};_gacd :=_dbacd (args );return MakeNumberResult (float64 (len (_gacd )));};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ggff :=_c .ToLower (args [0].ValueString );if !_afdb (_ggff ){_ ,_ ,_ ,_aegc ,_ebd :=_face (_ggff );if _ebd .Type ==ResultTypeError {_ebd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _ebd ;};if _aegc {return MakeNumberResult (0);};};_eeb ,_caa ,_deg ,_dbe ,_ ,_baf :=_dge (_ggff );if _baf .Type ==ResultTypeError {return _baf ;};_dac :=_beb (float64 (_eeb ),float64 (_caa ),_deg );if _dbe {_dac +=0.5;}else if _dac >=1{_dac -=float64 (int (_dac ));};return MakeNumberResult (_dac );};func (_agcda ReferenceType )String ()string {if _agcda >=ReferenceType (len (_ffacd )-1){return _b .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_agcda );};return _cccd [_ffacd [_agcda ]:_ffacd [_agcda +1]];};func _bff (_dcb ,_baae float64 ,_gbac int )(float64 ,Result ){_ece ,_cfcd :=_caff (_dcb ),_caff (_baae );_gcg :=_ece .Unix ();_efd :=_cfcd .Unix ();if _gcg ==_efd {return 0,_fgf ;};_gbf ,_agda ,_geef :=_ece .Date ();_cgb ,_defg ,_cfcde :=_cfcd .Date ();_bag ,_bgbd :=int (_agda ),int (_defg );var _cfdg ,_afba float64 ;switch _gbac {case 0:if _geef ==31{_geef --;};if _geef ==30&&_cfcde ==31{_cfcde --;}else if _gecc :=_dcd (_gbf );_bag ==2&&((_gecc &&_geef ==29)||(!_gecc &&_geef ==28)){_geef =30;if _abcdg :=_dcd (_cgb );_bgbd ==2&&((_abcdg &&_cfcde ==29)||(!_abcdg &&_cfcde ==28)){_cfcde =30;};};_cfdg =float64 ((_cgb -_gbf )*360+(_bgbd -_bag )*30+(_cfcde -_geef ));_afba =360;case 1:_cfdg =_baae -_dcb ;_gaafg :=_gbf !=_cgb ;if _gaafg &&(_cgb !=_gbf +1||_bag < _bgbd ||(_bag ==_bgbd &&_geef < _cfcde )){_baaed :=0;for _bcag :=_gbf ;_bcag <=_cgb ;_bcag ++{_baaed +=_ggbc (_bcag ,1);};_afba =float64 (_baaed )/float64 (_cgb -_gbf +1);}else {if !_gaafg &&_dcd (_gbf ){_afba =366;}else {if _gaafg &&((_dcd (_gbf )&&(_bag < 2||(_bag ==2&&_geef <=29)))||(_dcd (_cgb )&&(_bgbd > 2||(_bgbd ==2&&_cfcde ==29)))){_afba =366;}else {_afba =365;};};};case 2:_cfdg =_baae -_dcb ;_afba =360;case 3:_cfdg =_baae -_dcb ;_afba =365;case 4:if _geef ==31{_geef --;};if _cfcde ==31{_cfcde --;};_cfdg =float64 ((_cgb -_gbf )*360+(_bgbd -_bag )*30+(_cfcde -_geef ));_afba =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _cfdg /_afba ,_fgf ;};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gadc PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_adde :=_gadc ._fgbb .Reference (ctx ,ev );switch _adde .Type {case ReferenceTypeSheet :if _ccaa (_adde ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_adde .Value ));};_cdab :=_gadc .verticalRangeReference (_adde .Value );if _caegf ,_bcgeb :=ev .GetFromCache (_cdab );_bcgeb {return _caegf ;};_abfgd :=ctx .Sheet (_adde .Value );_gedec ,_faee :=_agdca (_abfgd ,_gadc ._acbab ,_gadc ._cacf );_gegdc :=_dfcgb (_abfgd ,ev ,_gedec ,_faee );ev .SetCache (_cdab ,_gegdc );return _gegdc ;default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_adde .Type ));};};func _dead (_edgdf ,_eefbb float64 )bool {return _bb .Abs (_edgdf -_eefbb )< 1.0e-6};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_efga :=len (args );if _efga < 2||_efga > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbbg :=args [0];if _dbbg .Type !=ResultTypeArray &&_dbbg .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dage :=args [1].AsNumber ();if _dage .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_afcb :=int (_dage .ValueNumber )-1;_aafc :=-1;if _efga ==3&&args [2].Type !=ResultTypeEmpty {_gcbg :=args [2].AsNumber ();if _gcbg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aafc =int (_gcbg .ValueNumber )-1;};if _afcb ==-1&&_aafc ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _faafa []Result ;if _dbbg .Type ==ResultTypeArray {_dbeag :=_dbbg .ValueArray ;if _afcb < -1||_afcb >=len (_dbeag ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _afcb ==-1{if _aafc >=len (_dbeag [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_cdgb :=[][]Result {};for _ ,_gbdb :=range _dbeag {_gafc :=_gbdb [_aafc ];if _gafc .Type ==ResultTypeEmpty {_gafc =MakeNumberResult (0);};_cdgb =append (_cdgb ,[]Result {_gafc });};return MakeArrayResult (_cdgb );};_faafa =_dbeag [_afcb ];}else {_ggeff :=_dbbg .ValueList ;if _afcb < -1||_afcb >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _afcb ==-1{if _aafc >=len (_ggeff ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_befg :=_ggeff [_aafc ];if _befg .Type ==ResultTypeEmpty {_befg =MakeNumberResult (0);};return _befg ;};_faafa =_ggeff ;};if _aafc < -1||_aafc > len (_faafa ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _aafc ==-1{_bccg :=[]Result {};for _ ,_efgb :=range _faafa {if _efgb .Type ==ResultTypeEmpty {_bccg =append (_bccg ,MakeNumberResult (0));}else {_bccg =append (_bccg ,_efgb );};};return MakeArrayResult ([][]Result {_bccg });};_cdbc :=_faafa [_aafc ];if _cdbc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _cdbc ;};func _agdc (_eeed Result )*criteriaParsed {_dcdc :=_eeed .Type ==ResultTypeNumber ;_eggb :=_eeed .ValueNumber ;_fbdce :=_c .ToLower (_eeed .ValueString );_defa :=_gbec (_fbdce );return &criteriaParsed {_dcdc ,_eggb ,_fbdce ,_defa };};var _ecbe =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_ccda :=len (args );if _ccda !=4&&_ccda !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcbf ,_fgdg ,_eeffe :=_eeg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _eeffe .Type ==ResultTypeError {return _eeffe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eegd :=args [2].ValueNumber ;if _eegd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bdeb :=args [3].ValueNumber ;if _bdeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_ggcb :=0;if _ccda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ggcb =int (args [4].ValueNumber );if !_ebf (_ggcb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_ebad ,_eeffe :=_bff (_fcbf ,_fgdg ,_ggcb );if _eeffe .Type ==ResultTypeError {return _eeffe ;};return MakeNumberResult ((_bdeb -_eegd )/_eegd /_ebad );};var _ccf =map[string ]*_gg .Regexp {};

// IsBool returns false for the invalid reference context.
func (_bbff *ivr )IsBool (cellRef string )bool {return false };func _abbad (){_fecdag =_gg .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_acfb =_gg .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_acdf =_gg .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_acbaa =_gg .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_cded =_gg .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_gdbcc =_gg .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_gbgb Result )AsNumber ()Result {if _gbgb .Type ==ResultTypeString {_becea ,_gbaca :=_ab .ParseFloat (_gbgb .ValueString ,64);if _gbaca ==nil {return MakeNumberResult (_becea );};};if _gbgb .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _gbgb ;};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbbcc :=args [0].AsNumber ();_gcafg :=args [1].AsNumber ();if _gbbcc .Type !=ResultTypeNumber ||_gcafg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _gcafg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_geegg ,_cdfce :=_bb .Modf (_gbbcc .ValueNumber /_gcafg .ValueNumber );if _cdfce < 0{_geegg --;};return MakeNumberResult (_gbbcc .ValueNumber -_gcafg .ValueNumber *_geegg );};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};type parsedSearchObject struct{_eeeg string ;_badf string ;_aefee int ;};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_efe :v }};const _geacf =57348;

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddaa :=args [0].AsNumber ();if _ddaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _bdbdc float64 ;_efdd :=args [1].AsNumber ();if _efdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdbdc =_efdd .ValueNumber ;if _bdbdc < 0&&_ddaa .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_ccfcf :=_ddaa .ValueNumber ;_ccfcf ,_ebge :=_bb .Modf (_ccfcf /_bdbdc );if _ebge !=0{if _ddaa .ValueNumber < 0&&_ebge < 0{_ccfcf --;};};return MakeNumberResult (_ccfcf *_bdbdc );};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_cdf :v }};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Update updates the horizontal range references after removing a row/column.
func (_cecac HorizontalRange )Update (q *_fe .UpdateQuery )Expression {return _cecac };

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adcge :=args [0];if _adcge .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geeaa :=len (_adcge .ValueArray );for _ ,_fecda :=range _adcge .ValueArray {if len (_fecda )!=_geeaa {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_aegcf (_adcge .ValueArray ));};

// Update returns the same object as updating sheet references does not affect Bool.
func (_fcc Bool )Update (q *_fe .UpdateQuery )Expression {return _fcc };

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_ccfg :=len (args );if _ccfg !=6&&_ccfg !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dffc ,_dabe ,_gcgb :=_eeg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _gcgb .Type ==ResultTypeError {return _gcgb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcfge :=args [2].ValueNumber ;if _gcfge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_egad :=args [3].ValueNumber ;if _egad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbg :=args [4].ValueNumber ;if _gbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adeg :=args [5];if _adeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cbee :=_adeg .ValueNumber ;if !_cfdgf (_cbee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ceca :=0;if _ccfg ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceca =int (args [6].ValueNumber );if !_ebf (_ceca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_bceb ,_gcgb :=_faaag (_dffc ,_dabe ,_gcfge ,_egad ,_gbg ,_cbee ,_ceca );if _gcgb .Type ==ResultTypeError {return _gcgb ;};return MakeNumberResult (_bceb );};func _aeace (_fceda Result ,_bage *criteriaParsed )bool {if _fceda .IsBoolean {return false ;};_bgage :=_fceda .Type ;if _bage ._edbbc {return _bgage ==ResultTypeNumber &&_fceda .ValueNumber ==_bage ._bbca ;}else if _bgage ==ResultTypeNumber {return _fgdb (_fceda .ValueNumber ,_bage ._ebce );};return _cbbfc (_fceda ,_bage );};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfae :=[]float64 {};for _ ,_ebbc :=range args {switch _ebbc .Type {case ResultTypeString :_bfcb :=_ebbc .AsNumber ();if _bfcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cfae =append (_cfae ,_bfcb .ValueNumber );case ResultTypeList :_fefbc :=LCM (_ebbc .ValueList );if _fefbc .Type !=ResultTypeNumber {return _fefbc ;};_cfae =append (_cfae ,_fefbc .ValueNumber );case ResultTypeNumber :_cfae =append (_cfae ,_ebbc .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _ebbc ;};};if len (_cfae )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _cfae [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cfae )==1{return MakeNumberResult (_cfae [0]);};_gdde :=_cfae [0];for _ddca :=1;_ddca < len (_cfae );_ddca ++{if _cfae [_ddca ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gdde =_bddfd (_gdde ,_cfae [_ddca ]);};return MakeNumberResult (_gdde );};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fagbg :=false ;for _ ,_dcfa :=range args {switch _dcfa .Type {case ResultTypeList ,ResultTypeArray :_debd :=Or (_dcfa .ListValues ());if _debd .Type ==ResultTypeError {return _debd ;};if _debd .ValueNumber !=0{_fagbg =true ;};case ResultTypeNumber :if _dcfa .ValueNumber !=0{_fagbg =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _dcfa ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_fagbg );};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_caee :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caee =int (args [1].ValueNumber );if _caee < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _caee ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_aabcg :=args [0].Value ();_ddga :=len (_aabcg );if _caee > _ddga {return MakeStringResult (_aabcg );};return MakeStringResult (_aabcg [_ddga -_caee :_ddga ]);};var _ebeff =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};var _bcbc =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// String returns a string representation of String.
func (_edfa String )String ()string {return "\u0022"+_edfa ._ggegb +"\u0022"};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgegg :=args [0].AsString ();if _fgegg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_c .ToUpper (_fgegg .ValueString ));};var _cdffe []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Value returns a string version of the result.
func (_fdbd Result )Value ()string {switch _fdbd .Type {case ResultTypeNumber :_abgf :=_ab .FormatFloat (_fdbd .ValueNumber ,'f',-1,64);if len (_abgf )> 12{_bcece :=12;for _abef :=_bcece ;_abef > 0&&_abgf [_abef ]=='0';_abef --{_bcece --;};_abgf =_abgf [0:_bcece +1];};return _abgf ;case ResultTypeError :return _fdbd .ValueString ;case ResultTypeString :return _fdbd .ValueString ;case ResultTypeList :if len (_fdbd .ValueList )==0{return "";};return _fdbd .ValueList [0].Value ();case ResultTypeArray :if len (_fdbd .ValueArray )==0||len (_fdbd .ValueArray [0])==0{return "";};return _fdbd .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcbg :=args [0].AsNumber ();if _bcbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dadc :=float64 (1);_gdbd :=args [1].AsNumber ();if _gdbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_dadc =_gdbd .ValueNumber ;if _dadc < 0&&_bcbg .ValueNumber > 0||_dadc > 0&&_bcbg .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_fcgd :=_bcbg .ValueNumber ;_fcgd ,_fadde :=_bb .Modf (_fcgd /_dadc );if _bb .Trunc (_fadde +0.5)> 0{_fcgd ++;};return MakeNumberResult (_fcgd *_dadc );};

// Reference returns a string reference value to a horizontal range with prefix.
func (_dcbgb PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_dceaea :=_dcbgb ._beccg .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dcbgb .horizontalRangeReference (_dceaea .Value )};};

// String returns a string representation of a horizontal range with prefix.
func (_ecad PrefixHorizontalRange )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ecad ._beccg .String (),_ecad ._gcgee ,_ecad ._dcbda );};const _cabf =57375;func (_dfff node )String ()string {return _b .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_dfff ._cadfd ,_egbg (string (_dfff ._gfdfc )));};const _eefe =2;

// String returns a string representation of Number.
func (_aacb Number )String ()string {return _ab .FormatFloat (_aacb ._fecdf ,'f',-1,64)};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bbe :=len (args );if _bbe < 3||_bbe > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgff :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aabd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_acf :=args [2].ValueNumber ;_fafe :=0.0;if _bbe >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fafe =args [3].ValueNumber ;};_adbg :=0.0;if _bbe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_adbg =args [4].ValueNumber ;if _adbg !=0{_adbg =1;};};_eafef :=_aabd *(1+_cgff *_adbg )-_fafe *_cgff ;_eced :=(_acf *_cgff +_aabd *(1+_cgff *_adbg ));return MakeNumberResult (_bb .Log (_eafef /_eced )/_bb .Log (1+_cgff ));};var _eacg =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgdd ,_fbag ,_fccdc :=_eeg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fccdc .Type ==ResultTypeError {return _fccdc ;};_dabg ,_fccdc :=_gbde (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fccdc .Type ==ResultTypeError {return _fccdc ;};if _dabg >=_bgdd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_bfcgd :=args [3];if _bfcgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cfdga :=_bfcgd .ValueNumber ;if _cfdga < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_aaag :=args [4];if _aaag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fbadf :=_aaag .ValueNumber ;if _fbadf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bbgd :=args [5];if _bbgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_ddgb :=_bbgd .ValueNumber ;if _ddgb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ggea :=args [6];if _ggea .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgae :=float64 (int (_ggea .ValueNumber ));if !_cfdgf (_dgae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gdfdb :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_cedg :=args [7];if _cedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gdfdb =int (_cedg .ValueNumber );if !_ebf (_gdfdb ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_agfff ,_fccdc :=_bff (_dabg ,_fbag ,_gdfdb );if _fccdc .Type ==ResultTypeError {return _fccdc ;};_agfff *=_dgae ;_adgg ,_fccdc :=_bff (_bgdd ,_fbag ,_gdfdb );if _fccdc .Type ==ResultTypeError {return _fccdc ;};_adgg *=_dgae ;_cced ,_fccdc :=_bff (_dabg ,_bgdd ,_gdfdb );if _fccdc .Type ==ResultTypeError {return _fccdc ;};_cced *=_dgae ;_bbdbb :=_ddgb +_agfff *100*_cfdga /_dgae ;_bbdbb /=_adgg *_fbadf /_dgae +1;_bbdbb -=_cced *100*_cfdga /_dgae ;return MakeNumberResult (_bbdbb );};func _cdgc (_gggg ,_beg ,_aeac int )int {if _gggg > _beg {return 0;};if _baaff (_aeac ){return (_beg -_gggg +1)*360;};_fdcd :=0;for _gceb :=_gggg ;_gceb <=_beg ;_gceb ++{_gdfc :=365;if _dcd (_gceb ){_gdfc =366;};_fdcd +=_gdfc ;};return _fdcd ;};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_fbfdd :=len (args );if _fbfdd < 3||_fbfdd > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdbe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afff :=args [1].ValueNumber ;if _afff ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_adebe :=args [2].ValueNumber ;_geaf :=0.0;if _fbfdd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geaf =args [3].ValueNumber ;};_cdfgb :=0.0;if _fbfdd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdfgb =args [4].ValueNumber ;if _cdfgb !=0{_cdfgb =1;};};var _fadd float64 ;if _fdbe ==0{_fadd =(_adebe +_geaf )/_afff ;}else {_dedbc :=_bb .Pow (1+_fdbe ,_afff );if _cdfgb ==1{_fadd =(_geaf *_fdbe /(_dedbc -1)+_adebe *_fdbe /(1-1/_dedbc ))/(1+_fdbe );}else {_fadd =_geaf *_fdbe /(_dedbc -1)+_adebe *_fdbe /(1-1/_dedbc );};};return MakeNumberResult (-_fadd );};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_cdea Context ,_ddffc Evaluator ,_caeed []Result )Result ;

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_acbb :=args [0].AsNumber ();if _acbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbgg :=_bb .Signbit (_acbb .ValueNumber );_cbcd ,_eeea :=_bb .Modf ((_acbb .ValueNumber -1)/2);_deadc :=_cbcd *2+1;if _eeea !=0{if !_bbgg {_deadc +=2;}else {_deadc -=2;};};return MakeNumberResult (_deadc );};

// Eval evaluates and returns an expression with prefix.
func (_agbb PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_gbdf :=_agbb ._ddgae .Reference (ctx ,ev );switch _gbdf .Type {case ReferenceTypeSheet :if _ccaa (_gbdf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gbdf .Value ));};_badc :=ctx .Sheet (_gbdf .Value );return _agbb ._dfccb .Eval (_badc ,ev );default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbdf .Type ));};};type couponArgs struct{_gecg float64 ;_fbca float64 ;_adca int ;_cfcf int ;};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gdfdc :=args [1].ValueNumber ;_gca :=args [0];var _eda float64 ;switch _gca .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_eda =_gca .ValueNumber ;case ResultTypeString :_adf :=DateValue ([]Result {args [0]});if _adf .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_eda =_adf .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cecg :=_caff (_eda );_debc :=_cecg .AddDate (0,int (_gdfdc ),0);_gec ,_bdaa ,_ebacb :=_debc .Date ();_afbc :=_cea (_gec ,int (_bdaa ),_ebacb );if _afbc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_afbc );};var _ddfgb =[...]uint8 {0,17,33,49,63,78,93,108};const _dgefac =57347;

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Reference returns a string reference value to an expression with prefix.
func (_dfce PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_gaace :=_dfce ._ddgae .Reference (ctx ,ev );_eegg :=_dfce ._dfccb .Reference (ctx ,ev );if _gaace .Type ==ReferenceTypeSheet &&_eegg .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_gaace .Value +"\u0021"+_eegg .Value };};return ReferenceInvalid ;};const _fgaad =57349;func _beb (_dfe ,_agfa ,_eafc float64 )float64 {return (_dfe *3600+_agfa *60+_eafc )/86400};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_acggg ,_cafdg ,_cfed Expression };const (_gdabd cmpResult =0;_aadf cmpResult =-1;_dafb cmpResult =1;_geea cmpResult =2;);

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_bfffb :=len (args );if _bfffb < 4||_bfffb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afacc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdgd :=args [1].ValueNumber ;if _cdgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baba :=args [2].ValueNumber ;if _baba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ababf :=args [3].ValueNumber ;_bdcb :=0.0;if _bfffb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdcb =args [4].ValueNumber ;};_cfbe :=0;if _bfffb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfbe =int (args [5].ValueNumber );if _cfbe !=0{_cfbe =1;};};return MakeNumberResult (_dfbe (_afacc ,_cdgd ,_baba ,_ababf ,_bdcb ,_cfbe ));};

// GetFormat returns an empty string for the invalid reference context.
func (_gfcb *ivr )GetFormat (cellRef string )string {return ""};func _edde (_fcfea float64 )float64 {_aebf :=float64 (1);for _gaef :=float64 (2);_gaef <=_fcfea ;_gaef ++{_aebf *=_gaef ;};return _aebf ;};func _dcabf (_gggef ,_degc Expression )(Expression ,Expression ,error ){_fded ,_bcec :=_gggef .(CellRef );if !_bcec {return nil ,nil ,_g .New (_b .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_gggef .String ()));};_bddgd ,_bcec :=_degc .(CellRef );if !_bcec {return nil ,nil ,_g .New (_b .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_degc .String ()));};_daba ,_cdaf :=_fa .ParseCellReference (_fded ._cdf );if _cdaf !=nil {return nil ,nil ,_cdaf ;};_eeebb ,_fbfae :=_fa .ParseCellReference (_bddgd ._cdf );if _fbfae !=nil {return nil ,nil ,_fbfae ;};_aebdd :=false ;if _daba .RowIdx > _eeebb .RowIdx {_aebdd =true ;_daba .RowIdx ,_eeebb .RowIdx =_eeebb .RowIdx ,_daba .RowIdx ;};if _daba .ColumnIdx > _eeebb .ColumnIdx {_aebdd =true ;_daba .ColumnIdx ,_eeebb .ColumnIdx =_eeebb .ColumnIdx ,_daba .ColumnIdx ;_daba .Column ,_eeebb .Column =_eeebb .Column ,_daba .Column ;};if _aebdd {return NewCellRef (_daba .String ()),NewCellRef (_eeebb .String ()),nil ;};return _gggef ,_degc ,nil ;};const _ebegg =57362;

// String returns a string representation for Bool.
func (_bgf Bool )String ()string {if _bgf ._cge {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func _edbeca (_fbac yyLexer )int {return _gaaeg ().Parse (_fbac )};func _baea (_bgc ,_cfbc int )int {if _cfbc ==2&&_dcd (_bgc ){return 29;}else {return _eg [_cfbc -1];};};func _bddfd (_cdbbd ,_cbfbe float64 )float64 {_cdbbd =_bb .Trunc (_cdbbd );_cbfbe =_bb .Trunc (_cbfbe );if _cdbbd ==0&&_cbfbe ==0{return 0;};return _cdbbd *_cbfbe /_efee (_cdbbd ,_cbfbe );};const _aea =_gf .Second *1;

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_acda :=args [0].AsString ();if _acda .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_efac :=args [1].AsNumber ();if _efac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _efac .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _efac .ValueNumber ==0{return MakeStringResult ("");};_faba :=_d .Buffer {};for _dcfb :=0;_dcfb < int (_efac .ValueNumber );_dcfb ++{_faba .WriteString (_acda .ValueString );};return MakeStringResult (_faba .String ());};

// Reference returns a string reference value to a sheet.
func (_egbgg SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_egbgg ._cefae };};const _fbbab =57377;

// Eval evaluates a range returning a list of results or an error.
func (_fgdf Range )Eval (ctx Context ,ev Evaluator )Result {_gceed :=_fgdf ._cbfa .Reference (ctx ,ev );_affec :=_fgdf ._ebcc .Reference (ctx ,ev );_bebff :=_ggbgb (_gceed ,_affec );if _gceed .Type ==ReferenceTypeCell &&_affec .Type ==ReferenceTypeCell {if _gefba ,_ddgc :=ev .GetFromCache (_bebff );_ddgc {return _gefba ;}else {_cbdfe :=_dfcgb (ctx ,ev ,_gceed .Value ,_affec .Value );ev .SetCache (_bebff ,_cbdfe );return _cbdfe ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bebff );};func _ccc (_dcge ,_egec float64 ,_dbcd ,_cdfa int )float64 {_geadf :=_caff (_dcge );_adeb :=_caff (_egec );_facg :=_adgc (_geadf ,_adeb ,_dbcd ,_cdfa );return _gfbf (_facg ,_geadf ,_cdfa );};func _adfa (_bbbe string ,_edbb func (_acgfac float64 )float64 )Function {return func (_gbdcg []Result )Result {if len (_gbdcg )!=1{return MakeErrorResult (_bbbe +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggffef :=_gbdcg [0].AsNumber ();switch _ggffef .Type {case ResultTypeNumber :_dffe :=_edbb (_ggffef .ValueNumber );if _bb .IsNaN (_dffe ){return MakeErrorResult (_bbbe +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _bb .IsInf (_dffe ,0){return MakeErrorResult (_bbbe +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_dffe );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_bbbe +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _ggffef ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbbe ,_ggffef .Type ));};};};const _dcfdd int =30;func _bbgdg (_fcba Result )[]Result {_afdbe :=_fcba .ValueList ;if _fcba .Type ==ResultTypeArray {_afdbe =nil ;for _ ,_ccgc :=range _fcba .ValueArray {if len (_ccgc )> 0{_afdbe =append (_afdbe ,_ccgc [0]);}else {_afdbe =append (_afdbe ,_fgf );};};};return _afdbe ;};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_dfbf ,_bgdde :=_cgca (args ,false );if _bgdde ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_dfbf /_bgdde );};

// String returns a string representation of PrefixExpr.
func (_ecccb PrefixExpr )String ()string {return _b .Sprintf ("\u0025\u0073\u0021%\u0073",_ecccb ._ddgae .String (),_ecccb ._dfccb .String ());};func _gebbf (_cdfge []Result )[]float64 {_cdad :=make ([]float64 ,0);for _ ,_aecfe :=range _cdfge {if _aecfe .Type ==ResultTypeEmpty {continue ;};_aecfe =_aecfe .AsNumber ();switch _aecfe .Type {case ResultTypeNumber :if !_aecfe .IsBoolean {_cdad =append (_cdad ,_aecfe .ValueNumber );};case ResultTypeList ,ResultTypeArray :_cdad =append (_cdad ,_gebbf (_aecfe .ListValues ())...);case ResultTypeString :default:_feb .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aecfe .Type );};};return _cdad ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_gafgd .Lock ();defer _gafgd .Unlock ();if _geagf ,_effa :=_agfec [name ];_effa {return _geagf ;};return nil ;};func _acba (_ggcc ,_eefc float64 ,_dfg ,_fccd int )float64 {_gbef :=_caff (_ggcc );_bfff :=_caff (_eefc );_gded :=_dgeg (_gbef ,_bfff ,_dfg );return _gfbf (_gbef ,_gded ,_fccd );};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_abcd [][]Expression };

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_cbeed (args ,_cbgf ));};func _cea (_ff ,_cff ,_deb int )float64 {return float64 (_dad (_ff ,_gf .Month (_cff ),_deb )/86400)+_aeb };

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _dbed (args ,false )};func _ccaa (_cgbbe Reference ,_acaa Context )bool {return _acaa .Sheet (_cgbbe .Value )==InvalidReferenceContext ;};const _deca =57363;

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_egabf ,_dgbg string };

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gage :=args [0].Ref ;if _gage .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_gcgbf ,_cbfgab :=_fa .ParseCellReference (_gage .Value );if _cbfgab !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gage .Value );};return MakeNumberResult (float64 (_gcgbf .RowIdx ));};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_gfce HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_geg :=_gfce .horizontalRangeReference ();if _fgeb ,_gcdg :=ev .GetFromCache (_geg );_gcdg {return _fgeb ;};_dbge ,_gaaga :=_abgag (ctx ,_gfce ._cbdc ,_gfce ._affab );_afgec :=_dfcgb (ctx ,ev ,_dbge ,_gaaga );ev .SetCache (_geg ,_afgec );return _afgec ;};const _gaf ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_cgfa +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dfcab ,_cgce ,_bgbg :=_eeg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _bgbg .Type ==ResultTypeError {return _bgbg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbd :=_cgce -_dfcab ;if _efbd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_cfgc :=args [2].ValueNumber ;if _cfgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_cfgc *_efbd /360));};var (_edcb =0;_egfac =false ;);

// String is a string expression.
type String struct{_ggegb string };

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_abeg :=args [0].AsNumber ();if _abeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gfec :=float64 (1);if _abeg .ValueNumber < 0{_gfec =-1;};if len (args )> 1{_ddbd :=args [1].AsNumber ();if _ddbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_gfec =_bb .Abs (_ddbd .ValueNumber );};if len (args )==1{return MakeNumberResult (_bb .Floor (_abeg .ValueNumber ));};_ecaa :=_abeg .ValueNumber ;_ecaa ,_bfcf :=_bb .Modf (_ecaa /_gfec );if _bfcf !=0{if _abeg .ValueNumber < 0{_ecaa --;};};return MakeNumberResult (_ecaa *_gfec );};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_cdged :=_c .Split (v ,"\u003a");if len (_cdged )!=2{return nil ;};_bdced ,_ :=_ab .Atoi (_cdged [0]);_baeca ,_ :=_ab .Atoi (_cdged [1]);if _bdced > _baeca {_bdced ,_baeca =_baeca ,_bdced ;};return PrefixHorizontalRange {_beccg :pfx ,_gcgee :_bdced ,_dcbda :_baeca };};func (_ccgcb *ivr )Sheet (name string )Context {return _ccgcb };

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cgcd :=args [0].Ref ;for _cgcd .Type ==ReferenceTypeNamedRange {_cgcd =ctx .NamedRange (_cgcd .Value );};_gedaf :="";switch _cgcd .Type {case ReferenceTypeCell :_gedaf =_cgcd .Value ;case ReferenceTypeRange :_gaabe :=_c .Split (_cgcd .Value ,"\u003a");if len (_gaabe )==2{_gedaf =_gaabe [0];};default:return MakeErrorResult (_b .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_cgcd .Type ));};_ggfcf ,_febf :=_fa .ParseCellReference (_gedaf );if _febf !=nil {return MakeErrorResult (_b .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_febf .Error ()));};_gcfad ,_fadc ,_gfgaa :=_ggfcf .Column ,_ggfcf .RowIdx ,_ggfcf .SheetName ;_geedb :=args [1].AsNumber ();if _geedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_fdaa :=args [2].AsNumber ();if _fdaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _deac ,_bgff Result ;if len (args )==3{_deac =MakeNumberResult (1);_bgff =MakeNumberResult (1);}else {_deac =args [3].AsNumber ();if _deac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _deac .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_bgff =args [4].AsNumber ();if _bgff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _bgff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_aegcb :=_fa .ColumnToIndex (_gcfad );_abffb :=_fadc +uint32 (_geedb .ValueNumber );_fbdb :=_aegcb +uint32 (_fdaa .ValueNumber );_fcgb :=_abffb +uint32 (_deac .ValueNumber );_cfeg :=_fbdb +uint32 (_bgff .ValueNumber );if _deac .ValueNumber > 0{_fcgb --;}else {_fcgb ++;_abffb ,_fcgb =_fcgb ,_abffb ;};if _bgff .ValueNumber > 0{_cfeg --;}else {_cfeg ++;_fbdb ,_cfeg =_cfeg ,_fbdb ;};_febgg :=_b .Sprintf ("\u0025\u0073\u0025\u0064",_fa .IndexToColumn (_fbdb ),_abffb );_bcfd :=_b .Sprintf ("\u0025\u0073\u0025\u0064",_fa .IndexToColumn (_cfeg ),_fcgb );if _gfgaa ==""{return _dfcgb (ctx ,ev ,_febgg ,_bcfd );}else {return _dfcgb (ctx .Sheet (_gfgaa ),ev ,_febgg ,_bcfd );};};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_c .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_ggegb :v };};

// String returns a string representation of CellRef.
func (_cdff CellRef )String ()string {return _cdff ._cdf };

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_bbeec ,_cbeg :=_ab .ParseFloat (v ,64);if _cbeg !=nil {_feb .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_cbeg );};return Number {_fecdf :_bbeec };};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_bb .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_ebdc :=len (args );if _ebdc !=4&&_ebdc !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ceg :=args [0].ValueNumber ;if _ceg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feca :=args [1].ValueNumber ;if _feca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgf :=args [2].ValueNumber ;if _dgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcae :=args [3].ValueNumber ;if _fcae < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _fcae > _dgf {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_bfag :=2.0;if _ebdc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfag =args [4].ValueNumber ;if _bfag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_gdbgg (_ceg ,_feca ,_dgf ,_fcae ,_bfag ));};var _eg =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func _bcgbd (_fccdg []Result )(bool ,Result ){for _ ,_dgfc :=range _fccdg {if _dgfc .Type ==ResultTypeError {return true ,_dgfc ;};};return false ,MakeEmptyResult ();};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_cefae :s }};

// Eval evaluates and returns the result of a constant array expression.
func (_dag ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_fge :=[][]Result {};for _ ,_fea :=range _dag ._abcd {_cfda :=[]Result {};for _ ,_abf :=range _fea {_cfda =append (_cfda ,_abf .Eval (ctx ,ev ));};_fge =append (_fge ,_cfda );};return MakeArrayResult (_fge );};const _efb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eeff :=args [0];switch _eeff .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_dbd :=_caff (_eeff .ValueNumber );return MakeNumberResult (float64 (_dbd .Minute ()));case ResultTypeString :_dcee :=_c .ToLower (_eeff .ValueString );if !_afdb (_dcee ){_ ,_ ,_ ,_bbb ,_cgg :=_face (_dcee );if _cgg .Type ==ResultTypeError {_cgg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _cgg ;};if _bbb {return MakeNumberResult (0);};};_ ,_ebee ,_ ,_ ,_ ,_def :=_dge (_dcee );if _def .Type ==ResultTypeError {return _def ;};return MakeNumberResult (float64 (_ebee ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_ddgae Expression ;_dfccb Expression ;};type parsedReplaceObject struct{_cefa string ;_dceda int ;_beed int ;_dded string ;};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_eddb :=len (args );if _eddb !=6&&_eddb !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fgbg ,_egaf ,_bebg :=_eeg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bebg .Type ==ResultTypeError {return _bebg ;};_bbag :=args [2];if _bbag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gafg :=_bbag .ValueNumber ;if _gafg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_gcfa :=args [3];if _gcfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eafefg :=_gcfa .ValueNumber ;if _eafefg <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_feed :=args [4];if _feed .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ggeea :=_feed .ValueNumber ;if _ggeea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ffgf :=args [5];if _ffgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_aeee :=float64 (int (_ffgf .ValueNumber ));if !_cfdgf (_aeee ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_efade :=0;if _eddb ==7&&args [6].Type !=ResultTypeEmpty {_aebg :=args [6];if _aebg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_efade =int (_aebg .ValueNumber );if !_ebf (_efade ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_eafff :=0.0;_eed :=0.0;_edce :=1.0;_agebg ,_bebg :=_faaag (_fgbg ,_egaf ,_gafg ,_eed ,_ggeea ,_aeee ,_efade );if _bebg .Type ==ResultTypeError {return _bebg ;};_gbegc ,_bebg :=_faaag (_fgbg ,_egaf ,_gafg ,_edce ,_ggeea ,_aeee ,_efade );if _bebg .Type ==ResultTypeError {return _bebg ;};_bdde :=(_edce -_eed )*0.5;for _bcc :=0;_bcc < 100&&_eafff !=_eafefg ;_bcc ++{_eafff ,_bebg =_faaag (_fgbg ,_egaf ,_gafg ,_bdde ,_ggeea ,_aeee ,_efade );if _bebg .Type ==ResultTypeError {return _bebg ;};if _eafefg ==_agebg {return MakeNumberResult (_eed );}else if _eafefg ==_gbegc {return MakeNumberResult (_edce );}else if _eafefg ==_eafff {return MakeNumberResult (_bdde );}else if _eafefg < _gbegc {_edce *=2.0;_gbegc ,_bebg =_faaag (_fgbg ,_egaf ,_gafg ,_edce ,_ggeea ,_aeee ,_efade );if _bebg .Type ==ResultTypeError {return _bebg ;};_bdde =(_edce -_eed )*0.5;}else {if _eafefg < _eafff {_eed =_bdde ;_agebg =_eafff ;}else {_edce =_bdde ;_gbegc =_eafff ;};_bdde =_edce -(_edce -_eed )*((_eafefg -_gbegc )/(_agebg -_gbegc ));};};return MakeNumberResult (_bdde );};func _gbde (_edeb Result ,_fcef ,_aafa string )(float64 ,Result ){var _fcg float64 ;switch _edeb .Type {case ResultTypeNumber :_fcg =float64 (int (_edeb .ValueNumber ));case ResultTypeString :_fbge :=DateValue ([]Result {_edeb });if _fbge .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_fcef +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_aafa );};_fcg =_fbge .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_aafa );};if _fcg < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_fcef +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _fcg ,_fgf ;};

// String returns an empty string for Error.
func (_gea Error )String ()string {return ""};const (_ byte =iota ;_ecfgf ;_ababd ;_aafbc ;_ffbe ;_bddga ;);

// Db implements the Excel DB function.
func Db (args []Result )Result {_baab :=len (args );if _baab !=4&&_baab !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdbc :=args [0].ValueNumber ;if _fdbc < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cadc :=args [1].ValueNumber ;if _cadc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aggc :=args [2].ValueNumber ;if _aggc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_efcce :=args [3].ValueNumber ;if _efcce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _efcce -_aggc > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_dbeg :=12.0;if _baab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbeg =args [4].ValueNumber ;if _dbeg < 1||_dbeg > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _dbeg ==12&&_efcce > _aggc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _cadc >=_fdbc {return MakeNumberResult (0);};_egag :=1-_bb .Pow (_cadc /_fdbc ,1/_aggc );_egag =float64 (int (_egag *1000+0.5))/1000;_cgba :=_fdbc *_egag *_dbeg /12;if _efcce ==1{return MakeNumberResult (_cgba );};_fbfg :=_cgba ;_faff :=0.0;_afaae :=_aggc ;if _afaae > _efcce {_afaae =_efcce ;};for _ccg :=2.0;_ccg <=_afaae ;_ccg ++{_faff =(_fdbc -_fbfg )*_egag ;_fbfg +=_faff ;};if _efcce > _aggc {return MakeNumberResult ((_fdbc -_fbfg )*_egag *(12-_dbeg )/12);};return MakeNumberResult (_faff );};func _fgdb (_dcae float64 ,_dabgf *criteriaRegex )bool {_gedaa ,_dgcgf :=_ab .ParseFloat (_dabgf ._cgbg ,64);if _dgcgf !=nil {return false ;};switch _dabgf ._abagb {case _ecfgf :return _dcae ==_gedaa ;case _ababd :return _dcae <=_gedaa ;case _aafbc :return _dcae >=_gedaa ;case _ffbe :return _dcae < _gedaa ;case _bddga :return _dcae > _gedaa ;};return false ;};func LexReader (r _f .Reader )chan *node {_gdceg :=NewLexer ();go _gdceg .lex (r );return _gdceg ._gcdab };func (_gfgfb *Lexer )Next ()*node {_gfgfb ._adbcc .Lock ();defer _gfgfb ._adbcc .Unlock ();if len (_gfgfb ._fbbfa )> 0{_ddfg :=_gfgfb ._fbbfa [0];_gfgfb ._fbbfa =_gfgfb ._fbbfa [1:];return _ddfg ;};return _gfgfb .nextRaw ();};func _bfaeg (_cacc ,_afafd Result ,_efag ,_bbge bool )cmpResult {_cacc =_cacc .AsNumber ();_afafd =_afafd .AsNumber ();if _cacc .Type !=_afafd .Type {return _geea ;};if _cacc .Type ==ResultTypeNumber {if _cacc .ValueNumber ==_afafd .ValueNumber {return _gdabd ;};if _cacc .ValueNumber < _afafd .ValueNumber {return _aadf ;};return _dafb ;};if _cacc .Type ==ResultTypeString {_egb :=_cacc .ValueString ;_adga :=_afafd .ValueString ;if !_efag {_egb =_c .ToLower (_egb );_adga =_c .ToLower (_adga );};if _bbge {_abbcg :=_ag .Match (_adga ,_egb );if _abbcg {return _gdabd ;}else {return _dafb ;};};return cmpResult (_c .Compare (_egb ,_adga ));};if _cacc .Type ==ResultTypeEmpty {return _gdabd ;};if _cacc .Type ==ResultTypeList {if len (_cacc .ValueList )< len (_afafd .ValueList ){return _aadf ;};if len (_cacc .ValueList )> len (_afafd .ValueList ){return _dafb ;};for _gcaaa :=range _cacc .ValueList {_bgaag :=_bfaeg (_cacc .ValueList [_gcaaa ],_afafd .ValueList [_gcaaa ],_efag ,_bbge );if _bgaag !=_gdabd {return _bgaag ;};};return _gdabd ;};if _cacc .Type ==ResultTypeList {if len (_cacc .ValueArray )< len (_afafd .ValueArray ){return _aadf ;};if len (_cacc .ValueArray )> len (_afafd .ValueArray ){return _dafb ;};for _afeb :=range _cacc .ValueArray {_abea :=_cacc .ValueArray [_afeb ];_cdcbg :=_cacc .ValueArray [_afeb ];if len (_abea )< len (_cdcbg ){return _aadf ;};if len (_abea )> len (_cdcbg ){return _dafb ;};for _ffee :=range _abea {_geeg :=_bfaeg (_abea [_ffee ],_cdcbg [_ffee ],_efag ,_bbge );if _geeg !=_gdabd {return _geeg ;};};};return _gdabd ;};return _geea ;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};func (_ccdbb PrefixHorizontalRange )horizontalRangeReference (_gdbf string )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_gdbf ,_ccdbb ._gcgee ,_ccdbb ._dcbda );};var _fceb =[...]int {-1,1,1,-1,-2,0};func _gcae (_abe ,_eeae ,_egg ,_edbg int )int {if !_baaff (_edbg ){return _egg ;};_aafb :=_egg ;_dbea :=_baea (_abe ,_eeae );if _aafb > 30||_egg >=_dbea ||_aafb >=_dbea {_aafb =30;};return _aafb ;};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// Eval evaluates and returns the result of a formula.
func (_dc *defEval )Eval (ctx Context ,formula string )Result {_cfg :=ParseString (formula );_ecbg :=make (chan Result );go func (){if _cfg ==nil {_ecbg <-MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_dc .checkLastEvalIsRef (ctx ,_cfg );_ecbg <-_cfg .Eval (ctx ,_dc );};}();select{case _afe :=<-_ecbg :return _afe ;case <-_gf .After (_aea ):_feb .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_bcd :=args [0].ValueNumber ;if _bcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_gcdc :=float64 (int (args [1].ValueNumber ));if _gcdc < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_bb .Pow ((1+_bcd /_gcdc ),_gcdc )-1);};

// String returns an empty string for EmptyExpr.
func (_gdg EmptyExpr )String ()string {return ""};const _gccd int =0;const _dce ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// String returns a string representation of a named range.
func (_ggbbf NamedRangeRef )String ()string {return _ggbbf ._baac };func _eff (){_ccf ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_gg .MustCompile ("\u005e"+_dcc +_eba );_ccf ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_gg .MustCompile ("\u005e"+_dff +_eba );_ccf ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_gg .MustCompile ("\u005e"+_dce +_eba );_ccf ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_gg .MustCompile ("\u005e"+_gaf +_eba );_cdb ["\u0068\u0068"]=_gg .MustCompile (_bfe +_dgd +"\u0024");_cdb ["\u0068\u0068\u003am\u006d"]=_gg .MustCompile (_bfe +_eccb +"\u0024");_cdb ["\u006d\u006d\u003as\u0073"]=_gg .MustCompile (_bfe +_egd +"\u0024");_cdb ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_gg .MustCompile (_bfe +_dba +"\u0024");_ccbf =[]*_gg .Regexp {_gg .MustCompile ("\u005e"+_dcc +"\u0024"),_gg .MustCompile ("\u005e"+_dff +"\u0024"),_gg .MustCompile ("\u005e"+_dce +"\u0024"),_gg .MustCompile ("\u005e"+_gaf +"\u0024")};_agac =[]*_gg .Regexp {_gg .MustCompile ("\u005e"+_dgd +"\u0024"),_gg .MustCompile ("\u005e"+_eccb +"\u0024"),_gg .MustCompile ("\u005e"+_egd +"\u0024"),_gg .MustCompile ("\u005e"+_dba +"\u0024")};};func _gbge (_bbec []Result )Result {_cbcb :=_bbec [0].ValueList ;_cfag :=len (_cbcb );switch len (_bbec ){case 1:_geeab :=[]Result {};for _ ,_abfcg :=range _cbcb {_geeab =append (_geeab ,MakeBoolResult (_abfcg .ValueNumber !=0));};return MakeListResult (_geeab );case 2:_fecge :=_bbec [1];switch _fecge .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_gfdc :=[]Result {};for _ ,_fgcff :=range _cbcb {var _baeef Result ;if _fgcff .ValueNumber ==0{_baeef =MakeBoolResult (false );}else {_baeef =_fecge ;};_gfdc =append (_gfdc ,_baeef );};return MakeListResult (_gfdc );case ResultTypeList :_ecgb :=_bfac (_fecge ,_cfag );_ggaf :=[]Result {};for _cfagc ,_fdce :=range _cbcb {var _fagca Result ;if _fdce .ValueNumber ==0{_fagca =MakeBoolResult (false );}else {_fagca =_ecgb [_cfagc ];};_ggaf =append (_ggaf ,_fagca );};return MakeListResult (_ggaf );case ResultTypeArray :_bcbd :=_abfc (_fecge ,len (_fecge .ValueArray ),_cfag );_cdbe :=[][]Result {};for _ ,_ebaf :=range _bcbd {_acgd :=[]Result {};for _ccce ,_gcgef :=range _cbcb {var _gbcc Result ;if _gcgef .ValueNumber ==0{_gbcc =MakeBoolResult (false );}else {_gbcc =_ebaf [_ccce ];};_acgd =append (_acgd ,_gbcc );};_cdbe =append (_cdbe ,_acgd );};return MakeArrayResult (_cdbe );};case 3:_aaaga :=_bbec [1];_cbeff :=_bbec [2];_dfdg :=_ffaa (_aaaga );_eggf :=_ffaa (_cbeff );if _dfdg &&_eggf {_fbba :=[]Result {};for _ ,_aaeeb :=range _cbcb {var _agecg Result ;if _aaeeb .ValueNumber ==0{_agecg =_cbeff ;}else {_agecg =_aaaga ;};_fbba =append (_fbba ,_agecg );};return MakeListResult (_fbba );};if _aaaga .Type !=ResultTypeArray &&_cbeff .Type !=ResultTypeArray {_bdbgf :=_bfac (_aaaga ,_cfag );_aaccg :=_bfac (_cbeff ,_cfag );_aecdf :=[]Result {};for _ebff ,_ggefc :=range _cbcb {var _ffced Result ;if _ggefc .ValueNumber ==0{_ffced =_aaccg [_ebff ];}else {_ffced =_bdbgf [_ebff ];};_aecdf =append (_aecdf ,_ffced );};return MakeListResult (_aecdf );};_ceff ,_gdfeg :=len (_aaaga .ValueArray ),len (_cbeff .ValueArray );_adbcf ,_gdeg :=_ceff ,_gdfeg ;if _gdfeg > _adbcf {_adbcf ,_gdeg =_gdeg ,_adbcf ;};_ffdb :=_abfc (_aaaga ,_adbcf ,_cfag );_ccga :=_abfc (_cbeff ,_adbcf ,_cfag );_addb :=[][]Result {};for _cdbcgg :=0;_cdbcgg < _adbcf ;_cdbcgg ++{_bbgf :=[]Result {};for _dbfg ,_gfee :=range _cbcb {var _ccbeb Result ;if _gfee .ValueNumber ==0{if _cdbcgg < _gdfeg {_ccbeb =_ccga [_cdbcgg ][_dbfg ];}else {_ccbeb =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _cdbcgg < _ceff {_ccbeb =_ffdb [_cdbcgg ][_dbfg ];}else {_ccbeb =MakeErrorResultType (ErrorTypeNA ,"");};};_bbgf =append (_bbgf ,_ccbeb );};_addb =append (_addb ,_bbgf );};return MakeArrayResult (_addb );};return MakeErrorResult ("");};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ffae :=args [0].AsNumber ();if _ffae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edafa :=_bb .Signbit (_ffae .ValueNumber );_gbce ,_eged :=_bb .Modf (_ffae .ValueNumber /2);_gcda :=_gbce *2;if _eged !=0{if !_edafa {_gcda +=2;}else {_gcda -=2;};};return MakeNumberResult (_gcda );};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;const _abce =57359;func _cgbdg (_fcbeb int )string {if _fcbeb >=1&&_fcbeb -1< len (_gcbb ){if _gcbb [_fcbeb -1]!=""{return _gcbb [_fcbeb -1];};};return _b .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_fcbeb );};var _bcae *_ad .Rand ;func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ebae :=args [0];if _ebae .Type !=ResultTypeNumber &&_ebae .Type !=ResultTypeString &&_ebae .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_bdebe :=args [1].ValueString ;switch _ebae .Type {case ResultTypeNumber :return MakeStringResult (_bg .Number (_ebae .ValueNumber ,_bdebe ));case ResultTypeString :return MakeStringResult (_bg .String (_ebae .ValueString ,_bdebe ));case ResultTypeEmpty :return MakeStringResult (_bg .Number (0,_bdebe ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};const _bcegb =57365;func _fddd (_egdb ,_gdfdcg ,_efeae ,_agdb ,_fgfb float64 ,_bbdg int )Result {_dcef ,_cdgg :=_bff (_egdb ,_gdfdcg ,_bbdg );if _cdgg .Type ==ResultTypeError {return _cdgg ;};_bbad ,_fgb :=_edgd (_egdb ,_gdfdcg ,int (_fgfb ),_bbdg );if _fgb .Type ==ResultTypeError {return _fgb ;};_cfdge :=0.0;_cfe :=0.0;_efeae *=100/_fgfb ;_agdb /=_fgfb ;_agdb ++;_aac :=_dcef *_fgfb -_bbad ;for _eec :=1.0;_eec < _bbad ;_eec ++{_dcbd :=_eec +_aac ;_acec :=_efeae /_bb .Pow (_agdb ,_dcbd );_cfe +=_acec ;_cfdge +=_dcbd *_acec ;};_fcgc :=(_efeae +100)/_bb .Pow (_agdb ,_bbad +_aac );_cfe +=_fcgc ;_cfdge +=(_bbad +_aac )*_fcgc ;_cfdge /=_cfe ;_cfdge /=_fgfb ;return MakeNumberResult (_cfdge );};

// Reference returns an invalid reference for BinaryExpr.
func (_bda BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efcfa :=args [0].ValueNumber ;if _efcfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aabc :=args [1].ValueNumber ;if _aabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdgd :=args [2].ValueNumber ;if _bdgd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_bb .Pow (_bdgd /_aabc ,1/_efcfa )-1);};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _fce ,_cfdaf float64 ;switch args [0].Type {case ResultTypeNumber :_cfdaf =args [0].ValueNumber ;case ResultTypeString :_cbef :=DateValue ([]Result {args [0]});if _cbef .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_cfdaf =_cbef .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_fce =args [1].ValueNumber ;if _fce < 62&&_cfdaf >=62{_fce --;};case ResultTypeString :_dbaa :=DateValue ([]Result {args [1]});if _dbaa .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_fce =_dbaa .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gab :=float64 (int (_cfdaf -_fce ));return MakeNumberResult (_gab );};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ddg :=args [1].ValueNumber ;_baa :=args [0];var _bcg float64 ;switch _baa .Type {case ResultTypeEmpty :_bcg =0;case ResultTypeNumber :_bcg =_baa .ValueNumber ;case ResultTypeString :_afg :=DateValue ([]Result {args [0]});if _afg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bcg =_afg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_acc :=_caff (_bcg );_dee :=_acc .AddDate (0,int (_ddg +1),0);_ade ,_bce ,_ :=_dee .Date ();_fff :=_cea (_ade ,int (_bce ),0);if _fff < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _ade ==1900&&_bce ==3{_fff --;};return MakeNumberResult (_fff );};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cgbe (args ,true )};var _eaae =[...]string {};const _babeb int =30;

// GetWidth returns 0 for the invalid reference context.
func (_gggce *ivr )GetWidth (colIdx int )float64 {return float64 (0)};type evCache struct{_gfg map[string ]Result ;_bde *_ec .Mutex ;};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_cgae ,_efddf ,_ceaaa :=_dcabf (from ,to );if _ceaaa !=nil {_feb .Log .Debug (_ceaaa .Error ());return NewError (_ceaaa .Error ());};return PrefixRangeExpr {_acggg :pfx ,_cafdg :_cgae ,_cfed :_efddf };};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdfc ,_bdcf ,_dagc :=_eeg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _dagc .Type ==ResultTypeError {return _dagc ;};_abcdb ,_dagc :=_gbde (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dagc .Type ==ResultTypeError {return _dagc ;};if _abcdb >=_cdfc {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bacd :=args [3].ValueNumber ;if _bacd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebead :=args [4].ValueNumber ;if _ebead <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gecdd :=args [5].ValueNumber ;if _gecdd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abdc :=float64 (int (args [6].ValueNumber ));if !_cfdgf (_abdc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_edec :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_edec =int (args [7].ValueNumber );if !_ebf (_edec ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_acca ,_dagc :=_bff (_abcdb ,_bdcf ,_edec );if _dagc .Type ==ResultTypeError {return _dagc ;};_acca *=_abdc ;_fga ,_dagc :=_bff (_cdfc ,_bdcf ,_edec );if _dagc .Type ==ResultTypeError {return _dagc ;};_fga *=_abdc ;_bbf ,_dagc :=_bff (_abcdb ,_cdfc ,_edec );if _dagc .Type ==ResultTypeError {return _dagc ;};_bbf *=_abdc ;_fddb :=_gecdd +_acca *100*_bacd /_abdc ;_fddb /=_ebead +_bbf *100*_bacd /_abdc ;_fddb --;_fddb *=_abdc /_fga ;return MakeNumberResult (_fddb );};type ivr struct{};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_adaaf :=args [0].AsNumber ();_cafdb :=args [1].AsNumber ();if _adaaf .Type ==ResultTypeNumber &&_cafdb .Type ==ResultTypeNumber {_ebed :=_bb .Atan2 (_cafdb .ValueNumber ,_adaaf .ValueNumber );if _ebed !=_ebed {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_ebed );};for _ ,_ffbb :=range []ResultType {_adaaf .Type ,_cafdb .Type }{switch _ffbb {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _adaaf ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffbb ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};func _gacff (_ecgg Result ,_bgdf ,_fagfcf string )(float64 ,Result ){switch _ecgg .Type {case ResultTypeEmpty :return 0,_fgf ;case ResultTypeNumber :return _ecgg .ValueNumber ,_fgf ;case ResultTypeString :_ccbac ,_fedbd :=_ab .ParseFloat (_ecgg .ValueString ,64);if _fedbd !=nil {return 0,MakeErrorResult (_fagfcf +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_bgdf );};return _ccbac ,_fgf ;default:return 0,MakeErrorResult (_bgdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fagfcf +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};func _gbdc (){_faaae =_gg .MustCompile ("\u005e\u0030\u002b\u0024");_gbfbf =_gg .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_ebag =_gg .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_beda =_gg .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_aadc =_gg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_ebgfg =_gg .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_eeab =_gg .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_bgef =_gg .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_gfbb =_gg .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_cfdd =_gg .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_ffdcb =_gg .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_abffa =_gg .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_egba +_egba +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_egba +_egba +"\u0029\u002b\u0059+\u0024");_egada =_gg .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_egba +_egba +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_egba +_egba +"\u0029\u002b\u0059+\u0024");_ffeg =_gg .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_dceae =_gg .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccfc :=_gf .Now ();_ ,_adg :=_ccfc .Zone ();_gbeb :=_ddae (_dfd ,_ccfc .Unix ()+int64 (_adg ))+1;return MakeNumberResult (_gbeb );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _feab (args ,_aeae )};type yyLexer interface{Lex (_aacfd *yySymType )int ;Error (_afgb string );};const _cccd ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_bggde :=_c .Split (v ,"\u003a");if len (_bggde )!=2{return nil ;};if _bggde [0]> _bggde [1]{_bggde [0],_bggde [1]=_bggde [1],_bggde [0];};return VerticalRange {_egabf :_bggde [0],_dgbg :_bggde [1]};};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gfgg ,_gcb :=_eagc (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _gcb .Type ==ResultTypeError {return _gcb ;};_cgda :=_caff (_gfgg ._gecg );_fdb :=_caff (_gfgg ._fbca );_gffb :=_gfgg ._adca ;_bcga :=_gfgg ._cfcf ;_cead :=_adgc (_cgda ,_fdb ,_gffb ,_bcga );_bgfd ,_gbeef ,_egeb :=_cead .Date ();return MakeNumberResult (_cea (_bgfd ,int (_gbeef ),_egeb ));};type Reference struct{Type ReferenceType ;Value string ;};const _efcf ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";func _agdca (_dbcaa Context ,_ebddd ,_gdbdc string )(string ,string ){_bgeae :=_ebddd +"\u0031";_aagdd :=_dbcaa .LastRow (_ebddd );_cedce :=_gdbdc +_ab .Itoa (_aagdd );return _bgeae ,_cedce ;};func _faaag (_eefbd ,_cfca ,_bgca ,_cdgca ,_cabb ,_cbfga float64 ,_ggee int )(float64 ,Result ){_dgff :=int (_cbfga );_bbba :=_bcab (_eefbd ,_cfca ,_dgff ,_ggee );_dfca :=_acba (_eefbd ,_cfca ,_dgff ,_ggee )/_bbba ;_edc ,_adebg :=_edgd (_eefbd ,_cfca ,_dgff ,_ggee );if _adebg .Type ==ResultTypeError {return 0,_adebg ;};_gbcb :=_ccc (_eefbd ,_cfca ,_dgff ,_ggee );_fdcc :=_cabb /_bb .Pow (1+_cdgca /_cbfga ,_edc -1+_dfca );_fdcc -=100*_bgca /_cbfga *_gbcb /_bbba ;_bea :=100*_bgca /_cbfga ;_cegd :=1+_cdgca /_cbfga ;for _deeg :=0.0;_deeg < _edc ;_deeg ++{_fdcc +=_bea /_bb .Pow (_cegd ,_deeg +_dfca );};return _fdcc ,MakeEmptyResult ();};func _aggb (_fdgb float64 )float64 {return float64 (int (_fdgb +0.5))};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_dcgc ,_fdfa ,_cbbdc :=_babe (args );if _cbbdc .Type ==ResultTypeError {return _cbbdc ;};return MakeNumberResult (_edde (_dcgc )/_fdfa );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cccb :=args [0].AsString ();if _cccb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_aacc :="\u0041\u0031";if len (args )==2{_fagc :=args [1].Ref ;if _fagc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_aacc =_fagc .Value ;};switch _cccb .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_eaad ,_acgfa :=_fa .ParseCellReference (_aacc );if _acgfa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aacc );};_baaab :="\u0024"+_eaad .Column +"\u0024"+_ab .Itoa (int (_eaad .RowIdx ));if _eaad .SheetName !=""{_baaab =_eaad .SheetName +"\u0021"+_baaab ;};return MakeStringResult (_baaab );case "\u0063\u006f\u006c":_cdbcg ,_fbfa :=_fa .ParseCellReference (_aacc );if _fbfa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aacc );};return MakeNumberResult (float64 (_cdbcg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_ecfe :=_c .Contains (ctx .GetFormat (_aacc ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_ecfe );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_fecd :="\u0047";_cedd :=ctx .GetFormat (_aacc );if _cedd =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_faaae .MatchString (_cedd ){_fecd ="\u0046\u0030";}else if _cedd =="\u0030\u0025"{_fecd ="\u0050\u0030";}else if _cedd =="\u004d\u004d\u004d\u0020\u0044\u0044"{_fecd ="\u0044\u0032";}else if _cedd =="\u004d\u004d\u002fY\u0059"{_fecd ="\u0044\u0033";}else if _cedd =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_cedd =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_fecd ="\u0044\u0034";}else if _cedd =="\u004d\u004d\u005c\u002d\u0044\u0044"{_fecd ="\u0044\u0035";}else if _cedd =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_fecd ="\u0044\u0036";}else if _cedd =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_fecd ="\u0044\u0037";}else if _cedd =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_fecd ="\u0044\u0038";}else if _cedd =="\u0048\u0048\u003aM\u004d"{_fecd ="\u0044\u0039";}else if _gbfbf .MatchString (_cedd ){_fecd ="\u002e\u0030";}else if _ebag .MatchString (_cedd ){_fecd ="\u002e\u0030\u0028\u0029";}else if _gfbb .MatchString (_cedd ){_fecd ="\u0043\u0030";}else if _abffa .MatchString (_cedd )||_egada .MatchString (_cedd ){_fecd ="\u0044\u0031";}else if _affg :=_beda .FindStringSubmatch (_cedd );len (_affg )> 1{_fecd ="\u0046"+_ab .Itoa (len (_affg [1]));}else if _caeg :=_ebgfg .FindStringSubmatch (_cedd );len (_caeg )> 1{_fecd ="\u002e"+_ab .Itoa (len (_caeg [2]));}else if _bdbg :=_bgef .FindStringSubmatch (_cedd );len (_bdbg )> 1{_fecd ="\u0050"+_ab .Itoa (len (_bdbg [2]));}else if _cgced :=_cfdd .FindStringSubmatch (_cedd );len (_cgced )> 1{_fecd ="\u0043"+_gbgf (_cgced ,1);}else if _bffc :=_ffdcb .FindStringSubmatch (_cedd );len (_bffc )> 1{_fecd ="\u0043"+_gbgf (_bffc ,1);}else if _eggc :=_eeab .FindStringSubmatch (_cedd );len (_eggc )> 1{_fecd ="\u002e"+_gbgf (_eggc ,1)+"\u0028\u0029";}else if _eedf :=_aadc .FindStringSubmatch (_cedd );len (_eedf )> 1{_fecd ="\u002e"+_gbgf (_eedf ,1);}else if _efde :=_ffeg .FindStringSubmatch (_cedd );len (_efde )> 1{_fecd ="\u0053"+_gbgf (_efde ,3);};if _fecd !="\u0047"&&_c .Contains (_cedd ,"\u005b\u0052\u0045D\u005d"){_fecd +="\u002d";};return MakeStringResult (_fecd );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_ddff :=ctx .GetFormat (_aacc );if _dceae .MatchString (_ddff ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_aacc ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_adebf :=0.0;if ctx .GetLocked (_aacc ){_adebf =1.0;};return MakeNumberResult (_adebf );case "\u0072\u006f\u0077":_affa ,_gggc :=_fa .ParseCellReference (_aacc );if _gggc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aacc );};return MakeNumberResult (float64 (_affa .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_ccac ,_eeaa :=_fa .ParseCellReference (_aacc );if _eeaa !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aacc );};if _ccac .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_ccac .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_ccac .SheetName ).GetWidth (int (_ccac .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_cccb .ValueString );};func _dfbe (_fgff ,_cbfg ,_afcdf ,_bdbe ,_baaea float64 ,_fffg int )float64 {_bfbg :=_facge (_fgff ,_afcdf ,_bdbe ,_baaea ,_fffg );var _eadc float64 ;if _cbfg ==1{if _fffg ==1{_eadc =0;}else {_eadc =-_bdbe ;};}else {if _fffg ==1{_eadc =_cdd (_fgff ,_cbfg -2,_bfbg ,_bdbe ,1)-_bfbg ;}else {_eadc =_cdd (_fgff ,_cbfg -1,_bfbg ,_bdbe ,0);};};return _eadc *_fgff ;};type criteriaRegex struct{_abagb byte ;_cgbg string ;};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aacab :=args [0].AsNumber ();if _aacab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _aacab .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_afbcg :=float64 (1);_ebgfe :=_bb .Trunc (_aacab .ValueNumber );for _ecaf :=_ebgfe ;_ecaf > 1;_ecaf -=2{_afbcg *=_ecaf ;};return MakeNumberResult (_afbcg );};func _ggg (_fbg BinOpType ,_gfe [][]Result ,_gfb Result )Result {_cbc :=[][]Result {};for _da :=range _gfe {_eef :=_gd (_fbg ,_gfe [_da ],_gfb );if _eef .Type ==ResultTypeError {return _eef ;};_cbc =append (_cbc ,_eef .ValueList );};return MakeArrayResult (_cbc );};const _fddba =_gf .Millisecond *1000;

// GetEpoch returns a null time object for the invalid reference context.
func (_bbfb *ivr )GetEpoch ()_gf .Time {return _gf .Time {}};

// Update updates references in the VerticalRange after removing a row/column.
func (_dabf VerticalRange )Update (q *_fe .UpdateQuery )Expression {if q .UpdateType ==_fe .UpdateActionRemoveColumn {_bddff :=_dabf ;if q .UpdateCurrentSheet {_geee :=q .ColumnIdx ;_bddff ._egabf =_aae (_dabf ._egabf ,_geee );_bddff ._dgbg =_aae (_dabf ._dgbg ,_geee );};return _bddff ;};return _dabf ;};

// Reference returns a string reference value to a vertical range with prefix.
func (_dgfe PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_agedc :=_dgfe ._fgbb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_dgfe .verticalRangeReference (_agedc .Value )};};var _fecdag ,_acfb ,_acbaa ,_acdf ,_gdbcc ,_cded *_gg .Regexp ;

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};const _gfafe =57368;func _ecfg (_aeab [][]Result ,_gagdd int )[][]Result {_ebde :=[][]Result {};for _dcaa :=range _aeab {if _dcaa ==0{continue ;};_fggb :=[]Result {};for _fdea :=range _aeab {if _fdea ==_gagdd {continue ;};_fggb =append (_fggb ,_aeab [_dcaa ][_fdea ]);};_ebde =append (_ebde ,_fggb );};return _ebde ;};var _geebg =false ;

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_gccb ,_cac :=_eagc (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _cac .Type ==ResultTypeError {return _cac ;};_abff :=_gccb ._adca ;_bfg :=_gccb ._cfcf ;_eccd ,_cac :=_edgd (_gccb ._gecg ,_gccb ._fbca ,_abff ,_bfg );if _cac .Type ==ResultTypeError {return _cac ;};return MakeNumberResult (_eccd );};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_beccg Expression ;_gcgee ,_dcbda int ;};

// Reference returns an invalid reference for ConstArrayExpr.
func (_fd ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _gecd (_bcged ,_dagf []float64 ,_add float64 )float64 {_fecf :=_add +1;_bbbb :=_bcged [0];_gdbg :=len (_bcged );_ggbf :=_dagf [0];for _fdgc :=1;_fdgc < _gdbg ;_fdgc ++{_bbbb +=_bcged [_fdgc ]/_bb .Pow (_fecf ,(_dagf [_fdgc ]-_ggbf )/365);};return _bbbb ;};type node struct{_cadfd tokenType ;_gfdfc string ;};

// Update updates references in the Range after removing a row/column.
func (_eafde Range )Update (q *_fe .UpdateQuery )Expression {_debe :=_eafde ;if q .UpdateCurrentSheet {_debe ._cbfa =_eafde ._cbfa .Update (q );_debe ._ebcc =_eafde ._ebcc .Update (q );};return _debe ;};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_gaffa PrefixHorizontalRange )Update (q *_fe .UpdateQuery )Expression {return _gaffa };

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};func (_gdgd *Lexer )lex (_dbae _f .Reader ){_bcceb ,_aefeeg ,_eaced :=0,0,0;_ffcb :=-1;_bfgc ,_fedbb ,_badd :=0,0,0;_ =_badd ;_gade :=1;_ =_gade ;_ffedg :=make ([]byte ,4096);_bdbdb :=false ;for !_bdbdb {_cgfca :=0;if _bfgc > 0{_cgfca =_aefeeg -_bfgc ;};_aefeeg =0;_bcgaa ,_dbfff :=_dbae .Read (_ffedg [_cgfca :]);if _bcgaa ==0||_dbfff !=nil {_bdbdb =true ;};_eaced =_bcgaa +_cgfca ;if _eaced < len (_ffedg ){_ffcb =_eaced ;};{_bcceb =_babeb ;_bfgc =0;_fedbb =0;_badd =0;};{var _bcded int ;var _bbadg uint ;if _aefeeg ==_eaced {goto _cdedb ;};if _bcceb ==0{goto _dcffg ;};_afafc :_bcded =int (_afcf [_bcceb ]);_bbadg =uint (_cdffe [_bcded ]);_bcded ++;for ;_bbadg > 0;_bbadg --{_bcded ++;switch _cdffe [_bcded -1]{case 2:_bfgc =_aefeeg ;};};switch _bcceb {case 30:switch _ffedg [_aefeeg ]{case 34:goto _gefd ;case 35:goto _baafg ;case 36:goto _decb ;case 38:goto _fbaa ;case 39:goto _abdd ;case 40:goto _gegd ;case 41:goto _egge ;case 42:goto _fedf ;case 43:goto _baddg ;case 44:goto _cedb ;case 45:goto _gegg ;case 47:goto _dbgc ;case 58:goto _edcbe ;case 59:goto _cbge ;case 60:goto _cgbda ;case 61:goto _dffa ;case 62:goto _bbea ;case 63:goto _cefe ;case 70:goto _ebdg ;case 84:goto _ddbb ;case 92:goto _bedcg ;case 94:goto _gcgacc ;case 95:goto _gddf ;case 123:goto _fdeab ;case 125:goto _baaae ;};switch {case _ffedg [_aefeeg ]< 65:switch {case _ffedg [_aefeeg ]> 37:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _eecfa ;};case _ffedg [_aefeeg ]>=33:goto _cefe ;};case _ffedg [_aefeeg ]> 90:switch {case _ffedg [_aefeeg ]> 93:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _bgbge ;};case _ffedg [_aefeeg ]>=91:goto _cefe ;};default:goto _ddebg ;};goto _gbaf ;case 1:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _bfgde ;case 123:goto _bfgde ;case 125:goto _bfgde ;};switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _bfgde ;};case _ffedg [_aefeeg ]> 45:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _bfgde ;};case _ffedg [_aefeeg ]>=58:goto _bfgde ;};default:goto _bfgde ;};goto _gbaf ;case 0:goto _dcffg ;case 2:if _ffedg [_aefeeg ]==34{goto _bafba ;};goto _gefd ;case 31:if _ffedg [_aefeeg ]==34{goto _gefd ;};goto _ebbcb ;case 3:switch _ffedg [_aefeeg ]{case 78:goto _cegcf ;case 82:goto _gdgca ;};goto _cefe ;case 4:switch _ffedg [_aefeeg ]{case 47:goto _gbgfe ;case 85:goto _abgg ;};goto _cefe ;case 5:if _ffedg [_aefeeg ]==65{goto _afacf ;};goto _cefe ;case 6:switch _ffedg [_aefeeg ]{case 76:goto _gaad ;case 77:goto _afedc ;};goto _cefe ;case 7:if _ffedg [_aefeeg ]==76{goto _afedc ;};goto _cefe ;case 8:if _ffedg [_aefeeg ]==33{goto _afacf ;};goto _cefe ;case 9:if _ffedg [_aefeeg ]==69{goto _egcd ;};goto _cefe ;case 10:if _ffedg [_aefeeg ]==70{goto _fdad ;};goto _cefe ;case 11:if _ffedg [_aefeeg ]==33{goto _bcced ;};goto _cefe ;case 12:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _cefe ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=45{goto _cefe ;};case _ffedg [_aefeeg ]>=34:goto _cefe ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]< 65:if 58<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=63{goto _cefe ;};case _ffedg [_aefeeg ]> 90:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _cefe ;};default:goto _geaeg ;};default:goto _fadgg ;};goto _gbaf ;case 13:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _cefe ;case 58:goto _bdcde ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=45{goto _cefe ;};case _ffedg [_aefeeg ]>=34:goto _cefe ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _cefe ;};case _ffedg [_aefeeg ]>=59:goto _cefe ;};default:goto _fadgg ;};goto _gbaf ;case 14:if _ffedg [_aefeeg ]==36{goto _aefc ;};if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _bcgec ;};goto _bfgde ;case 15:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _bcgec ;};goto _bfgde ;case 32:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _bcgec ;};goto _aceaa ;case 16:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 47:goto _cefe ;case 58:goto _bbeb ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 45:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _cbfca ;};case _ffedg [_aefeeg ]>=34:goto _cefe ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]> 90:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _cefe ;};case _ffedg [_aefeeg ]>=65:goto _geaeg ;};default:goto _cefe ;};goto _gbaf ;case 17:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _bfgde ;case 123:goto _bfgde ;case 125:goto _bfgde ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=45{goto _bfgde ;};case _ffedg [_aefeeg ]>=34:goto _bfgde ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _bfgde ;};case _ffedg [_aefeeg ]>=58:goto _bfgde ;};default:goto _cbfca ;};goto _gbaf ;case 33:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _dfga ;case 123:goto _dfga ;case 125:goto _dfga ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=45{goto _dfga ;};case _ffedg [_aefeeg ]>=34:goto _dfga ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _dfga ;};case _ffedg [_aefeeg ]>=58:goto _dfga ;};default:goto _cbfca ;};goto _gbaf ;case 18:if _ffedg [_aefeeg ]==36{goto _fggeg ;};if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _bbgb ;};goto _bfgde ;case 19:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _bbgb ;};goto _bfgde ;case 34:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _bbgb ;};goto _cfagb ;case 20:switch _ffedg [_aefeeg ]{case 39:goto _cefe ;case 42:goto _cefe ;case 47:goto _cefe ;case 58:goto _cefe ;case 63:goto _cefe ;};if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=93{goto _cefe ;};goto _ggbb ;case 21:switch _ffedg [_aefeeg ]{case 39:goto _gbdbf ;case 42:goto _cefe ;case 47:goto _cefe ;case 58:goto _cefe ;case 63:goto _cefe ;};if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=93{goto _cefe ;};goto _ggbb ;case 22:if _ffedg [_aefeeg ]==33{goto _dcedc ;};goto _cefe ;case 35:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _aaba ;case 58:goto _bdcde ;case 101:goto _gbede ;case 123:goto _adegc ;case 125:goto _adegc ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=47{goto _adegc ;};case _ffedg [_aefeeg ]>=34:goto _adegc ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _adegc ;};case _ffedg [_aefeeg ]>=59:goto _adegc ;};default:goto _eecfa ;};goto _gbaf ;case 36:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _adegc ;case 101:goto _gbede ;case 123:goto _adegc ;case 125:goto _adegc ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=45{goto _adegc ;};case _ffedg [_aefeeg ]>=34:goto _adegc ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _adegc ;};case _ffedg [_aefeeg ]>=58:goto _adegc ;};default:goto _aaba ;};goto _gbaf ;case 23:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _bdaba ;case 123:goto _bdaba ;case 125:goto _bdaba ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=45{goto _bdaba ;};case _ffedg [_aefeeg ]>=34:goto _bdaba ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _bdaba ;};case _ffedg [_aefeeg ]>=58:goto _bdaba ;};default:goto _eeda ;};goto _gbaf ;case 37:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 47:goto _adegc ;case 123:goto _adegc ;case 125:goto _adegc ;};switch {case _ffedg [_aefeeg ]< 48:switch {case _ffedg [_aefeeg ]> 35:if 37<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=45{goto _adegc ;};case _ffedg [_aefeeg ]>=34:goto _adegc ;};case _ffedg [_aefeeg ]> 57:switch {case _ffedg [_aefeeg ]> 63:if 91<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=94{goto _adegc ;};case _ffedg [_aefeeg ]>=58:goto _adegc ;};default:goto _eeda ;};goto _gbaf ;case 38:switch _ffedg [_aefeeg ]{case 61:goto _eebc ;case 62:goto _gfac ;};goto _fegb ;case 39:if _ffedg [_aefeeg ]==61{goto _ffega ;};goto _ddfd ;case 24:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _cefe ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _cefe ;};default:goto _cefe ;};goto _gbaf ;case 40:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 40:goto _fffgg ;case 46:goto _baeba ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _baeba ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _baeba ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 41:switch _ffedg [_aefeeg ]{case 46:goto _bbfa ;case 92:goto _bbfa ;case 95:goto _bbfa ;};switch {case _ffedg [_aefeeg ]< 65:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _bbfa ;};case _ffedg [_aefeeg ]> 90:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _bbfa ;};default:goto _bbfa ;};goto _eaafa ;case 42:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 43:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 40:goto _fffgg ;case 46:goto _baeba ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _dfga ;case 125:goto _dfga ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _dfga ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};default:goto _dfga ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _baeba ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _dfga ;};default:goto _dfga ;};goto _gbaf ;case 44:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _bfgde ;case 125:goto _bfgde ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _bfgde ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _bfgde ;};default:goto _bfgde ;};goto _gbaf ;case 25:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 65:goto _badef ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _cefe ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 66<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _cefe ;};default:goto _cefe ;};goto _gbaf ;case 45:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 76:goto _bbfdb ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 46:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 83:goto _ddba ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 47:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 69:goto _dagg ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 26:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 79:goto _fcgde ;case 82:goto _ggec ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _cefe ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _cefe ;};default:goto _cefe ;};goto _gbaf ;case 48:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 68:goto _dfae ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 49:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 79:goto _dcede ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 50:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 36:goto _gccdg ;case 40:goto _fffgg ;case 46:goto _baeba ;case 58:goto _bbeb ;case 85:goto _ddba ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 59:switch {case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _feggb ;};case _ffedg [_aefeeg ]>=34:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _adgb ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 27:switch _ffedg [_aefeeg ]{case 46:goto _bbfa ;case 92:goto _bbfa ;case 95:goto _bbfa ;};switch {case _ffedg [_aefeeg ]< 65:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _bbfa ;};case _ffedg [_aefeeg ]> 90:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _bbfa ;};default:goto _bbfa ;};goto _cefe ;case 28:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _affbf ;case 120:goto _gadb ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _cefe ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _cefe ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _cefe ;};default:goto _cefe ;};goto _gbaf ;case 51:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _affbf ;case 108:goto _bbggfe ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 52:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _affbf ;case 102:goto _dfeaa ;case 110:goto _efgbg ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 53:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _affbf ;case 110:goto _ggcfd ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 54:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _gddeb ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 55:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _addg ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _addg ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 56:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 40:goto _begd ;case 46:goto _addg ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _addg ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _addg ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 57:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _affbf ;case 109:goto _dacb ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 58:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _ceef ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _eaafa ;case 125:goto _eaafa ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _eaafa ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _eaafa ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _eaafa ;};default:goto _eaafa ;};goto _gbaf ;case 59:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _bede ;case 123:goto _bfgde ;case 125:goto _bfgde ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _bfgde ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _bfgde ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _bede ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _bfgde ;};default:goto _bfgde ;};goto _gbaf ;case 29:switch _ffedg [_aefeeg ]{case 33:goto _bgfac ;case 46:goto _affbf ;case 92:goto _bbfa ;case 95:goto _affbf ;case 123:goto _cefe ;case 125:goto _cefe ;};switch {case _ffedg [_aefeeg ]< 58:switch {case _ffedg [_aefeeg ]< 37:if 34<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=35{goto _cefe ;};case _ffedg [_aefeeg ]> 47:if 48<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=57{goto _affbf ;};default:goto _cefe ;};case _ffedg [_aefeeg ]> 63:switch {case _ffedg [_aefeeg ]< 91:if 65<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=90{goto _affbf ;};case _ffedg [_aefeeg ]> 94:if 97<=_ffedg [_aefeeg ]&&_ffedg [_aefeeg ]<=122{goto _affbf ;};default:goto _cefe ;};default:goto _cefe ;};goto _gbaf ;};_cefe :_bcceb =0;goto _abfdbe ;_gbaf :_bcceb =1;goto _abfdbe ;_gefd :_bcceb =2;goto _abfdbe ;_baafg :_bcceb =3;goto _abfdbe ;_cegcf :_bcceb =4;goto _abfdbe ;_gbgfe :_bcceb =5;goto _abfdbe ;_abgg :_bcceb =6;goto _abfdbe ;_gaad :_bcceb =7;goto _abfdbe ;_afedc :_bcceb =8;goto _abfdbe ;_gdgca :_bcceb =9;goto _abfdbe ;_egcd :_bcceb =10;goto _abfdbe ;_fdad :_bcceb =11;goto _abfdbe ;_decb :_bcceb =12;goto _abfdbe ;_fadgg :_bcceb =13;goto _abfdbe ;_bdcde :_bcceb =14;goto _abfdbe ;_aefc :_bcceb =15;goto _abfdbe ;_geaeg :_bcceb =16;goto _abfdbe ;_gccdg :_bcceb =17;goto _abfdbe ;_bbeb :_bcceb =18;goto _abfdbe ;_fggeg :_bcceb =19;goto _abfdbe ;_abdd :_bcceb =20;goto _abfdbe ;_ggbb :_bcceb =21;goto _abfdbe ;_gbdbf :_bcceb =22;goto _abfdbe ;_gbede :_bcceb =23;goto _abfdbe ;_ddebg :_bcceb =24;goto _abfdbe ;_ebdg :_bcceb =25;goto _abfdbe ;_ddbb :_bcceb =26;goto _abfdbe ;_bedcg :_bcceb =27;goto _abfdbe ;_gddf :_bcceb =28;goto _abfdbe ;_bgbge :_bcceb =29;goto _abfdbe ;_bfgde :_bcceb =30;goto _bcabb ;_bgfac :_bcceb =30;goto _eeadd ;_afacf :_bcceb =30;goto _dcbg ;_bcced :_bcceb =30;goto _fdcf ;_dcedc :_bcceb =30;goto _beeb ;_bdaba :_bcceb =30;goto _ecafg ;_fffgg :_bcceb =30;goto _dfcd ;_fbaa :_bcceb =30;goto _gdfb ;_gegd :_bcceb =30;goto _cgcbc ;_egge :_bcceb =30;goto _eafgb ;_fedf :_bcceb =30;goto _ddaae ;_baddg :_bcceb =30;goto _geafg ;_cedb :_bcceb =30;goto _fbbg ;_gegg :_bcceb =30;goto _debgb ;_dbgc :_bcceb =30;goto _ffaaf ;_edcbe :_bcceb =30;goto _aegcbba ;_cbge :_bcceb =30;goto _agead ;_dffa :_bcceb =30;goto _adede ;_gcgacc :_bcceb =30;goto _ccfga ;_fdeab :_bcceb =30;goto _aadfc ;_baaae :_bcceb =30;goto _cdef ;_ebbcb :_bcceb =30;goto _gcadb ;_aceaa :_bcceb =30;goto _cddd ;_dfga :_bcceb =30;goto _befb ;_cfagb :_bcceb =30;goto _effc ;_adegc :_bcceb =30;goto _dggb ;_fegb :_bcceb =30;goto _agdde ;_eebc :_bcceb =30;goto _debce ;_gfac :_bcceb =30;goto _ebgfgb ;_ddfd :_bcceb =30;goto _eada ;_ffega :_bcceb =30;goto _abfae ;_eaafa :_bcceb =30;goto _dccbe ;_begd :_bcceb =30;goto _dcad ;_bafba :_bcceb =31;goto _eecc ;_bcgec :_bcceb =32;goto _abfdbe ;_cbfca :_bcceb =33;goto _dcgfc ;_bbgb :_bcceb =34;goto _abfdbe ;_eecfa :_bcceb =35;goto _adac ;_aaba :_bcceb =36;goto _adac ;_eeda :_bcceb =37;goto _adac ;_cgbda :_bcceb =38;goto _abfdbe ;_bbea :_bcceb =39;goto _abfdbe ;_baeba :_bcceb =40;goto _cfbee ;_bbfa :_bcceb =41;goto _abfdbe ;_affbf :_bcceb =42;goto _cfbee ;_feggb :_bcceb =43;goto _dcgfc ;_adgb :_bcceb =44;goto _cfbee ;_dagg :_bcceb =44;goto _feaeg ;_dcede :_bcceb =44;goto _eefag ;_badef :_bcceb =45;goto _cfbee ;_bbfdb :_bcceb =46;goto _cfbee ;_ddba :_bcceb =47;goto _cfbee ;_fcgde :_bcceb =48;goto _cfbee ;_dfae :_bcceb =49;goto _cfbee ;_ggec :_bcceb =50;goto _cfbee ;_gadb :_bcceb =51;goto _cfbee ;_bbggfe :_bcceb =52;goto _cfbee ;_dfeaa :_bcceb =53;goto _cfbee ;_ggcfd :_bcceb =54;goto _cfbee ;_gddeb :_bcceb =55;goto _cfbee ;_addg :_bcceb =56;goto _cfbee ;_efgbg :_bcceb =57;goto _cfbee ;_dacb :_bcceb =58;goto _cfbee ;_ceef :_bcceb =59;goto _cfbee ;_bede :_bcceb =59;goto _cbdf ;_dcbg :_bcded =3;goto _cdggc ;_fdcf :_bcded =5;goto _cdggc ;_eeadd :_bcded =7;goto _cdggc ;_beeb :_bcded =9;goto _cdggc ;_dfcd :_bcded =11;goto _cdggc ;_dcad :_bcded =13;goto _cdggc ;_gdfb :_bcded =15;goto _cdggc ;_aadfc :_bcded =17;goto _cdggc ;_cdef :_bcded =19;goto _cdggc ;_cgcbc :_bcded =21;goto _cdggc ;_eafgb :_bcded =23;goto _cdggc ;_geafg :_bcded =25;goto _cdggc ;_debgb :_bcded =27;goto _cdggc ;_ddaae :_bcded =29;goto _cdggc ;_ffaaf :_bcded =31;goto _cdggc ;_ccfga :_bcded =33;goto _cdggc ;_adede :_bcded =35;goto _cdggc ;_debce :_bcded =37;goto _cdggc ;_abfae :_bcded =39;goto _cdggc ;_ebgfgb :_bcded =41;goto _cdggc ;_aegcbba :_bcded =43;goto _cdggc ;_agead :_bcded =45;goto _cdggc ;_fbbg :_bcded =47;goto _cdggc ;_dggb :_bcded =49;goto _cdggc ;_befb :_bcded =51;goto _cdggc ;_cddd :_bcded =53;goto _cdggc ;_effc :_bcded =55;goto _cdggc ;_dccbe :_bcded =57;goto _cdggc ;_gcadb :_bcded =59;goto _cdggc ;_agdde :_bcded =61;goto _cdggc ;_eada :_bcded =63;goto _cdggc ;_ecafg :_bcded =65;goto _cdggc ;_bcabb :_bcded =67;goto _cdggc ;_feaeg :_bcded =72;goto _cdggc ;_adac :_bcded =75;goto _cdggc ;_dcgfc :_bcded =78;goto _cdggc ;_eefag :_bcded =81;goto _cdggc ;_cbdf :_bcded =84;goto _cdggc ;_cfbee :_bcded =87;goto _cdggc ;_eecc :_bcded =90;goto _cdggc ;_cdggc :_bbadg =uint (_cdffe [_bcded ]);_bcded ++;for ;_bbadg > 0;_bbadg --{_bcded ++;switch _cdffe [_bcded -1]{case 3:_fedbb =_aefeeg +1;case 4:_badd =1;case 5:_badd =2;case 6:_badd =3;case 7:_badd =4;case 8:_badd =11;case 9:_badd =14;case 10:_badd =15;case 11:_fedbb =_aefeeg +1;{_gdgd .emit (_fcfef ,_ffedg [_bfgc :_fedbb ]);};case 12:_fedbb =_aefeeg +1;{_gdgd .emit (_gbbe ,_ffedg [_bfgc :_fedbb ]);};case 13:_fedbb =_aefeeg +1;{_gdgd .emit (_debg ,_ffedg [_bfgc :_fedbb -1]);};case 14:_fedbb =_aefeeg +1;{_gdgd .emit (_debg ,_ffedg [_bfgc +1:_fedbb -2]);};case 15:_fedbb =_aefeeg +1;{_gdgd .emit (_abce ,_ffedg [_bfgc :_fedbb -1]);};case 16:_fedbb =_aefeeg +1;{_gdgd .emit (_abce ,_ffedg [_bfgc :_fedbb -1]);};case 17:_fedbb =_aefeeg +1;{_gdgd .emit (_fbbab ,_ffedg [_bfgc :_fedbb ]);};case 18:_fedbb =_aefeeg +1;{_gdgd .emit (_bbggf ,_ffedg [_bfgc :_fedbb ]);};case 19:_fedbb =_aefeeg +1;{_gdgd .emit (_fagfb ,_ffedg [_bfgc :_fedbb ]);};case 20:_fedbb =_aefeeg +1;{_gdgd .emit (_ebegg ,_ffedg [_bfgc :_fedbb ]);};case 21:_fedbb =_aefeeg +1;{_gdgd .emit (_deca ,_ffedg [_bfgc :_fedbb ]);};case 22:_fedbb =_aefeeg +1;{_gdgd .emit (_fgde ,_ffedg [_bfgc :_fedbb ]);};case 23:_fedbb =_aefeeg +1;{_gdgd .emit (_bcegb ,_ffedg [_bfgc :_fedbb ]);};case 24:_fedbb =_aefeeg +1;{_gdgd .emit (_dfeda ,_ffedg [_bfgc :_fedbb ]);};case 25:_fedbb =_aefeeg +1;{_gdgd .emit (_bcdg ,_ffedg [_bfgc :_fedbb ]);};case 26:_fedbb =_aefeeg +1;{_gdgd .emit (_gfafe ,_ffedg [_bfgc :_fedbb ]);};case 27:_fedbb =_aefeeg +1;{_gdgd .emit (_ebdecf ,_ffedg [_bfgc :_fedbb ]);};case 28:_fedbb =_aefeeg +1;{_gdgd .emit (_geag ,_ffedg [_bfgc :_fedbb ]);};case 29:_fedbb =_aefeeg +1;{_gdgd .emit (_fgge ,_ffedg [_bfgc :_fedbb ]);};case 30:_fedbb =_aefeeg +1;{_gdgd .emit (_bbcb ,_ffedg [_bfgc :_fedbb ]);};case 31:_fedbb =_aefeeg +1;{_gdgd .emit (_cabf ,_ffedg [_bfgc :_fedbb ]);};case 32:_fedbb =_aefeeg +1;{_gdgd .emit (_cbcg ,_ffedg [_bfgc :_fedbb ]);};case 33:_fedbb =_aefeeg +1;{_gdgd .emit (_daeea ,_ffedg [_bfgc :_fedbb ]);};case 34:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_cffc ,_ffedg [_bfgc :_fedbb ]);};case 35:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_gbacb ,_ffedg [_bfgc :_fedbb ]);};case 36:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_baebc ,_ffedg [_bfgc :_fedbb ]);};case 37:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_dgefac ,_ffedg [_bfgc :_fedbb ]);};case 38:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_cdcf ,_ffedg [_bfgc :_fedbb ]);};case 39:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_ecedb ,_ffedg [_bfgc +1:_fedbb -1]);};case 40:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_cddc ,_ffedg [_bfgc :_fedbb ]);};case 41:_fedbb =_aefeeg ;_aefeeg --;{_gdgd .emit (_aefg ,_ffedg [_bfgc :_fedbb ]);};case 42:_aefeeg =(_fedbb )-1;{_gdgd .emit (_cffc ,_ffedg [_bfgc :_fedbb ]);};case 43:switch _badd {case 0:{_bcceb =0;goto _abfdbe ;};case 1:{_aefeeg =(_fedbb )-1;_gdgd .emit (_egbab ,_ffedg [_bfgc :_fedbb ]);};case 2:{_aefeeg =(_fedbb )-1;_gdgd .emit (_cffc ,_ffedg [_bfgc :_fedbb ]);};case 3:{_aefeeg =(_fedbb )-1;_gdgd .emit (_gbacb ,_ffedg [_bfgc :_fedbb ]);};case 4:{_aefeeg =(_fedbb )-1;_gdgd .emit (_fgaad ,_ffedg [_bfgc :_fedbb ]);};case 11:{_aefeeg =(_fedbb )-1;_gdgd .emit (_geacf ,_ffedg [_bfgc :_fedbb ]);};case 14:{_aefeeg =(_fedbb )-1;_gdgd .emit (_cdcf ,_ffedg [_bfgc :_fedbb ]);};case 15:{_aefeeg =(_fedbb )-1;_gdgd .emit (_ecedb ,_ffedg [_bfgc +1:_fedbb -1]);};};};};goto _abfdbe ;_abfdbe :_bcded =int (_affbc [_bcceb ]);_bbadg =uint (_cdffe [_bcded ]);_bcded ++;for ;_bbadg > 0;_bbadg --{_bcded ++;switch _cdffe [_bcded -1]{case 0:_bfgc =0;case 1:_badd =0;};};if _bcceb ==0{goto _dcffg ;};if _aefeeg ++;_aefeeg !=_eaced {goto _afafc ;};_cdedb :{};if _aefeeg ==_ffcb {switch _bcceb {case 1:goto _bfgde ;case 2:goto _bfgde ;case 31:goto _ebbcb ;case 14:goto _bfgde ;case 15:goto _bfgde ;case 32:goto _aceaa ;case 17:goto _bfgde ;case 33:goto _dfga ;case 18:goto _bfgde ;case 19:goto _bfgde ;case 34:goto _cfagb ;case 35:goto _adegc ;case 36:goto _adegc ;case 23:goto _bdaba ;case 37:goto _adegc ;case 38:goto _fegb ;case 39:goto _ddfd ;case 40:goto _eaafa ;case 41:goto _eaafa ;case 42:goto _eaafa ;case 43:goto _dfga ;case 44:goto _bfgde ;case 45:goto _eaafa ;case 46:goto _eaafa ;case 47:goto _eaafa ;case 48:goto _eaafa ;case 49:goto _eaafa ;case 50:goto _eaafa ;case 51:goto _eaafa ;case 52:goto _eaafa ;case 53:goto _eaafa ;case 54:goto _eaafa ;case 55:goto _eaafa ;case 56:goto _eaafa ;case 57:goto _eaafa ;case 58:goto _eaafa ;case 59:goto _bfgde ;};};_dcffg :{};};if _bfgc > 0{copy (_ffedg [0:],_ffedg [_bfgc :]);};};_ =_ffcb ;if _bcceb ==_gccd {_gdgd .emit (_egega ,nil );};close (_gdgd ._gcdab );};

// String returns a string representation of a vertical range with prefix.
func (_cedcg PrefixVerticalRange )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cedcg ._fgbb .String (),_cedcg ._acbab ,_cedcg ._cacf );};var _afdec =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_fefa ,_dcgb :=_gbeg (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _dcgb .Type ==ResultTypeError {return _dcgb ;};_fabca :=_fefa ._adb ;_abab :=_fefa ._ged ;_acg :=_fefa ._afdg ;_dbdf :=_fefa ._gcaf ;_gbbd :=_fefa ._afaf ;_ddc :=_fefa ._aadg ;_ebfd :=_facge (_fabca ,_abab ,_acg ,0,_ddc );_fabb :=0.0;if _dbdf ==1{if _ddc ==0{_fabb =-_acg ;_dbdf ++;};};for _bef :=_dbdf ;_bef <=_gbbd ;_bef ++{if _ddc ==1{_fabb +=_cdd (_fabca ,_bef -2,_ebfd ,_acg ,1)-_ebfd ;}else {_fabb +=_cdd (_fabca ,_bef -1,_ebfd ,_acg ,0);};};_fabb *=_fabca ;return MakeNumberResult (_fabb );};const _gcff =1;var _gcbb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};var _agac =[]*_gg .Regexp {};

// Update returns the same object as updating sheet references does not affect Number.
func (_aede Number )Update (q *_fe .UpdateQuery )Expression {return _aede };func (_bccee *yyParserImpl )Parse (yylex yyLexer )int {_bcfc :=_gf .Now ();var _adadg int ;var _edbed yySymType ;var _fdbeb []yySymType ;_ =_fdbeb ;_bgega :=_bccee ._ecbdb [:];Nerrs :=0;Errflag :=0;_dggg :=0;_bccee ._fbadd =-1;_eebd :=-1;defer func (){_dggg =-1;_bccee ._fbadd =-1;_eebd =-1}();_fdfg :=-1;goto _dabea ;_fggc :return 0;_eaeb :return 1;_dabea :if _fgcffg (_bcfc ){_feb .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _eaeb ;};if _edcb >=4{_b .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_cgbdg (_eebd ),_efca (_dggg ));};_fdfg ++;if _fdfg >=len (_bgega ){_efgfa :=make ([]yySymType ,len (_bgega )*2);copy (_efgfa ,_bgega );_bgega =_efgfa ;};_bgega [_fdfg ]=_edbed ;_bgega [_fdfg ]._bffdg =_dggg ;_cdbce :if _fgcffg (_bcfc ){_feb .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _eaeb ;};_adadg =_bgedb [_dggg ];if _adadg <=_dcegc {goto _geeggc ;};if _bccee ._fbadd < 0{_bccee ._fbadd ,_eebd =_ddcge (yylex ,&_bccee ._aagd );};_adadg +=_eebd ;if _adadg < 0||_adadg >=_facf {goto _geeggc ;};_adadg =_eeffb [_adadg ];if _ebeff [_adadg ]==_eebd {_bccee ._fbadd =-1;_eebd =-1;_edbed =_bccee ._aagd ;_dggg =_adadg ;if Errflag > 0{Errflag --;};goto _dabea ;};_geeggc :if _fgcffg (_bcfc ){_feb .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _eaeb ;};_adadg =_adba [_dggg ];if _adadg ==-2{if _bccee ._fbadd < 0{_bccee ._fbadd ,_eebd =_ddcge (yylex ,&_bccee ._aagd );};_bffa :=0;for {if _fceb [_bffa +0]==-1&&_fceb [_bffa +1]==_dggg {break ;};_bffa +=2;};for _bffa +=2;;_bffa +=2{_adadg =_fceb [_bffa +0];if _adadg < 0||_adadg ==_eebd {break ;};};_adadg =_fceb [_bffa +1];if _adadg < 0{goto _fggc ;};};if _adadg ==0{switch Errflag {case 0:yylex .Error (_gbade (_dggg ,_eebd ));Nerrs ++;if _edcb >=1{_b .Printf ("\u0025\u0073",_efca (_dggg ));_b .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_cgbdg (_eebd ));};fallthrough;case 1,2:Errflag =3;for _fdfg >=0{_adadg =_bgedb [_bgega [_fdfg ]._bffdg ]+_eefe ;if _adadg >=0&&_adadg < _facf {_dggg =_eeffb [_adadg ];if _ebeff [_dggg ]==_eefe {goto _dabea ;};};if _edcb >=2{_b .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_bgega [_fdfg ]._bffdg );};_fdfg --;};goto _eaeb ;case 3:if _edcb >=2{_b .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_cgbdg (_eebd ));};if _eebd ==_gcff {goto _eaeb ;};_bccee ._fbadd =-1;_eebd =-1;goto _cdbce ;};};if _edcb >=2{_b .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_adadg ,_efca (_dggg ));};_abcf :=_adadg ;_acacf :=_fdfg ;_ =_acacf ;_fdfg -=_eacg [_adadg ];if _fdfg +1>=len (_bgega ){_cada :=make ([]yySymType ,len (_bgega )*2);copy (_cada ,_bgega );_bgega =_cada ;};_edbed =_bgega [_fdfg +1];_adadg =_bcbc [_adadg ];_agcd :=_bbcd [_adadg ];_abacb :=_agcd +_bgega [_fdfg ]._bffdg +1;if _abacb >=_facf {_dggg =_eeffb [_agcd ];}else {_dggg =_eeffb [_abacb ];if _ebeff [_dggg ]!=-_adadg {_dggg =_eeffb [_agcd ];};};switch _abcf {case 1:_fdbeb =_bgega [_acacf -1:_acacf +1];{yylex .(*plex )._aagbe =_edbed ._gbdce ;};case 3:_fdbeb =_bgega [_acacf -2:_acacf +1];{_edbed ._gbdce =_fdbeb [2]._gbdce ;};case 4:_fdbeb =_bgega [_acacf -4:_acacf +1];{};case 5:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewBool (_fdbeb [1]._edbec ._gfdfc );};case 6:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewNumber (_fdbeb [1]._edbec ._gfdfc );};case 7:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewString (_fdbeb [1]._edbec ._gfdfc );};case 8:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewError (_fdbeb [1]._edbec ._gfdfc );};case 9:_fdbeb =_bgega [_acacf -2:_acacf +1];{_edbed ._gbdce =_fdbeb [2]._gbdce ;};case 10:_fdbeb =_bgega [_acacf -2:_acacf +1];{_edbed ._gbdce =NewNegate (_fdbeb [2]._gbdce );};case 15:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =_fdbeb [2]._gbdce ;};case 17:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewConstArrayExpr (_fdbeb [2]._gddc );};case 18:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gddc =append (_edbed ._gddc ,_fdbeb [1]._gefg );};case 19:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gddc =append (_fdbeb [1]._gddc ,_fdbeb [3]._gefg );};case 20:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gefg =append (_edbed ._gefg ,_fdbeb [1]._gbdce );};case 21:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gefg =append (_fdbeb [1]._gefg ,_fdbeb [3]._gbdce );};case 23:_fdbeb =_bgega [_acacf -2:_acacf +1];{_edbed ._gbdce =NewPrefixExpr (_fdbeb [1]._gbdce ,_fdbeb [2]._gbdce );};case 25:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewSheetPrefixExpr (_fdbeb [1]._edbec ._gfdfc );};case 26:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewCellRef (_fdbeb [1]._edbec ._gfdfc );};case 27:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewRange (_fdbeb [1]._gbdce ,_fdbeb [3]._gbdce );};case 28:_fdbeb =_bgega [_acacf -4:_acacf +1];{_edbed ._gbdce =NewPrefixRangeExpr (_fdbeb [1]._gbdce ,_fdbeb [2]._gbdce ,_fdbeb [4]._gbdce );};case 29:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewNamedRangeRef (_fdbeb [1]._edbec ._gfdfc );};case 30:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewHorizontalRange (_fdbeb [1]._edbec ._gfdfc );};case 31:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gbdce =NewVerticalRange (_fdbeb [1]._edbec ._gfdfc );};case 32:_fdbeb =_bgega [_acacf -2:_acacf +1];{_edbed ._gbdce =NewPrefixHorizontalRange (_fdbeb [1]._gbdce ,_fdbeb [2]._edbec ._gfdfc );};case 33:_fdbeb =_bgega [_acacf -2:_acacf +1];{_edbed ._gbdce =NewPrefixVerticalRange (_fdbeb [1]._gbdce ,_fdbeb [2]._edbec ._gfdfc );};case 34:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypePlus ,_fdbeb [3]._gbdce );};case 35:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeMinus ,_fdbeb [3]._gbdce );};case 36:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeMult ,_fdbeb [3]._gbdce );};case 37:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeDiv ,_fdbeb [3]._gbdce );};case 38:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeExp ,_fdbeb [3]._gbdce );};case 39:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeLT ,_fdbeb [3]._gbdce );};case 40:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeGT ,_fdbeb [3]._gbdce );};case 41:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeLEQ ,_fdbeb [3]._gbdce );};case 42:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeGEQ ,_fdbeb [3]._gbdce );};case 43:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeEQ ,_fdbeb [3]._gbdce );};case 44:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeNE ,_fdbeb [3]._gbdce );};case 45:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewBinaryExpr (_fdbeb [1]._gbdce ,BinOpTypeConcat ,_fdbeb [3]._gbdce );};case 47:_fdbeb =_bgega [_acacf -2:_acacf +1];{_edbed ._gbdce =NewFunction (_fdbeb [1]._edbec ._gfdfc ,nil );};case 48:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gbdce =NewFunction (_fdbeb [1]._edbec ._gfdfc ,_fdbeb [2]._gefg );};case 49:_fdbeb =_bgega [_acacf -1:_acacf +1];{_edbed ._gefg =append (_edbed ._gefg ,_fdbeb [1]._gbdce );};case 50:_fdbeb =_bgega [_acacf -3:_acacf +1];{_edbed ._gefg =append (_fdbeb [1]._gefg ,_fdbeb [3]._gbdce );};case 53:_fdbeb =_bgega [_acacf -0:_acacf +1];{_edbed ._gbdce =NewEmptyExpr ();};};goto _dabea ;};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_geba :=int (args [0].ValueNumber );if _geba < 0||_geba >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _geba <=1899{_geba +=1900;};_gbe :=_gf .Month (args [1].ValueNumber );_gee :=int (args [2].ValueNumber );_gdc :=_dad (_geba ,_gbe ,_gee );_afa :=_ddae (_dfd ,_gdc )+1;if _afa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_afa );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffbbc :=args [0].AsNumber ();if _ffbbc .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agdbd :=float64 (1);if _ffbbc .ValueNumber < 0{_agdbd =-1;};if len (args )> 1{_gefbc :=args [1].AsNumber ();if _gefbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_agdbd =_gefbc .ValueNumber ;};_ggdf :=float64 (1);if len (args )> 2{_begc :=args [2].AsNumber ();if _begc .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggdf =_begc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_bb .Floor (_ffbbc .ValueNumber ));};_ebbea :=_ffbbc .ValueNumber ;_ebbea ,_aed :=_bb .Modf (_ebbea /_agdbd );if _aed !=0&&_ffbbc .ValueNumber < 0&&_ggdf > 0{_ebbea ++;};return MakeNumberResult (_ebbea *_agdbd );};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_dcdbb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dcdbb =int (args [1].ValueNumber );if _dcdbb < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _dcdbb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ggad :=args [0].Value ();if _dcdbb > len (_ggad ){return MakeStringResult (_ggad );};return MakeStringResult (_ggad [0:_dcdbb ]);};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _cg (_ca BinOpType ,_eb ,_efc [][]Result )Result {_cf :=[][]Result {};for _edg :=range _eb {_fb :=_ac (_ca ,_eb [_edg ],_efc [_edg ]);if _fb .Type ==ResultTypeError {return _fb ;};_cf =append (_cf ,_fb .ValueList );};return MakeArrayResult (_cf );};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_cbbf :=len (args );if (_cbbf !=2&&_cbbf !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fabd :=0;if _cbbf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fabd =int (args [2].ValueNumber );if !_ebf (_fabd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbfd :=args [1].ValueNumber ;_ded ,_dfaa :=_bff (_ebef ,_fbfd ,_fabd );if _dfaa .Type ==ResultTypeError {return _dfaa ;};return MakeNumberResult (_ded );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _feab (args ,_bbbdd )};func (_afffe HorizontalRange )horizontalRangeReference ()string {return _b .Sprintf ("\u0025\u0064\u003a%\u0064",_afffe ._cbdc ,_afffe ._affab );};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaaa :=args [0].AsString ();if _eaaa .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_eaaa .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_eaaa .ValueString [0]));};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_adcf :=len (args );if _adcf !=5&&_adcf !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcgf ,_fgcg ,_fffd :=_eeg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _fffd .Type ==ResultTypeError {return _fffd ;};_gbga ,_fffd :=_gbde (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _fffd .Type ==ResultTypeError {return _fffd ;};if _gbga >=_dcgf {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ffce :=args [3].ValueNumber ;if _ffce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbeg :=args [4].ValueNumber ;if _bbeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_acac :=0;if _adcf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acac =int (args [5].ValueNumber );if !_ebf (_acac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_aaede ,_fffd :=_bff (_dcgf ,_fgcg ,_acac );if _fffd .Type ==ResultTypeError {return _fffd ;};_befc ,_fffd :=_bff (_gbga ,_fgcg ,_acac );if _fffd .Type ==ResultTypeError {return _fffd ;};_gcaa ,_fffd :=_bff (_gbga ,_dcgf ,_acac );if _fffd .Type ==ResultTypeError {return _fffd ;};_fafea :=1+_befc *_ffce ;_dbcf :=1+_aaede *_bbeg ;return MakeNumberResult ((_fafea /_dbcf -_gcaa *_ffce )*100);};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_gagg :=args [0];if _gagg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_febg :=int (_gagg .ValueNumber );if _febg < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_febg {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_febg ];};func (_aabdf *noCache )GetFromCache (key string )(Result ,bool ){return _fgf ,false };

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecd :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bbc :=args [2].ValueNumber +1;if _bbc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ceab :=_cedc (args [0]);_fbgba :=float64 (len (_ceab ));_gaeg ,_adfb :=0.0,0.0;_agcb ,_afdea :=1.0,1.0;_ggaa ,_adag :=false ,false ;for _ ,_ggdg :=range _ceab {for _ ,_ebda :=range _ggdg {if _ebda .Type ==ResultTypeNumber &&!_ebda .IsBoolean {_gfdf :=_ebda .ValueNumber ;if _gfdf ==0{continue ;}else {if _gfdf > 0{_ggaa =true ;_adfb +=_ebda .ValueNumber *_afdea ;}else {_adag =true ;_gaeg +=_ebda .ValueNumber *_agcb ;};_agcb /=_ecd ;_afdea /=_bbc ;};};};};if !_ggaa ||!_adag {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bfcg :=-_adfb /_gaeg ;_bfcg *=_bb .Pow (_bbc ,_fbgba -1);_bfcg =_bb .Pow (_bfcg ,1/(_fbgba -1));return MakeNumberResult (_bfcg -1);};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _dbed (args ,true )};func (_egead *Lexer )emit (_fgcbc tokenType ,_afad []byte ){if _geebg {_b .Println ("\u0065\u006d\u0069\u0074",_fgcbc ,_egbg (string (_afad )));};_egead ._gcdab <-&node {_fgcbc ,string (_afad )};};

// Reference returns an invalid reference for FunctionCall.
func (_bgedd FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eval evaluates and returns the result of an error expression.
func (_dgc Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_dgc ._efe )};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_baca ,_caad :=_cgca (args ,true );if _caad ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_baca /_caad );};func (_gdcg *yyParserImpl )Lookahead ()int {return _gdcg ._fbadd };

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdea :=args [0].AsString ();if _bdea .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcef :=_d .Buffer {};_bbbdc :=false ;_abgad :=false ;_gaff :=0;for _ ,_fafag :=range _bdea .ValueString {_ddcg :=_fafag ==' ';if _ddcg {if !_bbbdc {continue ;};if !_abgad {_gaff ++;_bcef .WriteRune (_fafag );};}else {_gaff =0;_bbbdc =true ;_bcef .WriteRune (_fafag );};_abgad =_ddcg ;};_bcef .Truncate (_bcef .Len ()-_gaff );return MakeStringResult (_bcef .String ());};func _dfcgb (_fbfea Context ,_cefcc Evaluator ,_egdg ,_dcedb string )Result {_bddbb ,_beea :=_fa .ParseCellReference (_egdg );if _beea !=nil {return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_egdg ,_beea .Error ()));};_dedde ,_ddeg :=_bddbb .ColumnIdx ,_bddbb .RowIdx ;_ecgaa ,_cfac :=_fa .ParseCellReference (_dcedb );if _cfac !=nil {return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_dcedb ,_cfac .Error ()));};_acgde ,_dfbdf :=_ecgaa .ColumnIdx ,_ecgaa .RowIdx ;_ggdd :=[][]Result {};for _eegb :=_ddeg ;_eegb <=_dfbdf ;_eegb ++{_ddde :=[]Result {};for _gcafgf :=_dedde ;_gcafgf <=_acgde ;_gcafgf ++{_cedge :=_fbfea .Cell (_b .Sprintf ("\u0025\u0073\u0025\u0064",_fa .IndexToColumn (_gcafgf ),_eegb ),_cefcc );_ddde =append (_ddde ,_cedge );};_ggdd =append (_ggdd ,_ddde );};if len (_ggdd )==1{if len (_ggdd [0])==1{return _ggdd [0][0];};return MakeListResult (_ggdd [0]);};return MakeArrayResult (_ggdd );};func _gdga (_eeba ,_bceg []float64 ,_cbgd float64 )float64 {_fgbd :=_cbgd +1;_dcfc :=0.0;_ggffe :=len (_eeba );_fbdf :=_bceg [0];for _eae :=1;_eae < _ggffe ;_eae ++{_aee :=(_bceg [_eae ]-_fbdf )/365;_dcfc -=_aee *_eeba [_eae ]/_bb .Pow (_fgbd ,_aee +1);};return _dcfc ;};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_edcc :=[]string {};for _ffacc :=range _agfec {_edcc =append (_edcc ,_ffacc );};for _fdcec :=range _acbbd {_edcc =append (_edcc ,_fdcec );};_ed .Strings (_edcc );return _edcc ;};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_afbe :=args [0].AsNumber ();if _afbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_adfe :=float64 (1);if _afbe .ValueNumber < 0{_adfe =-1;};if len (args )> 1{_agfgfg :=args [1].AsNumber ();if _agfgfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_adfe =_agfgfg .ValueNumber ;};if _adfe < 0&&_afbe .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_bb .Ceil (_afbe .ValueNumber ));};_edcee :=_afbe .ValueNumber ;_edcee ,_decc :=_bb .Modf (_edcee /_adfe );if _decc > 0{_edcee ++;};return MakeNumberResult (_edcee *_adfe );};func _eagc (_ecce []Result ,_fae string )(*couponArgs ,Result ){_cbgg :=len (_ecce );if _cbgg !=3&&_cbgg !=4{return nil ,MakeErrorResult (_fae +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbed ,_bfea ,_gcde :=_eeg (_ecce [0],_ecce [1],_fae );if _gcde .Type ==ResultTypeError {return nil ,_gcde ;};if _ecce [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fae +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcaf :=_ecce [2].ValueNumber ;if !_cfdgf (_bcaf ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_fae );};_geab :=0;if _cbgg ==4&&_ecce [3].Type !=ResultTypeEmpty {if _ecce [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fae +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_geab =int (_ecce [3].ValueNumber );if !_ebf (_geab ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_fae );};};return &couponArgs {_gbed ,_bfea ,int (_bcaf ),_geab },_fgf ;};func _gbbf (_afgd Result ,_abad *criteriaParsed )bool {if _afgd .Type ==ResultTypeEmpty {return false ;};if _abad ._edbbc {return _afgd .ValueNumber ==_abad ._bbca ;}else {_dbf :=_c .ToLower (_afgd .ValueString );return _abad ._fgaa ==_dbf ||_ag .Match (_abad ._fgaa ,_dbf );};};

// GetLocked returns FALSE for the invalid reference context.
func (_bbdde *ivr )GetLocked (cellRef string )bool {return false };

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adbdf :=args [0].AsNumber ();_gdge :=args [1].AsNumber ();if _adbdf .Type !=ResultTypeNumber ||_gdge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bgeg :=_bb .Trunc (_adbdf .ValueNumber );_bcafe :=_bb .Trunc (_gdge .ValueNumber );if _bgeg < _bcafe {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _bgeg ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_bgeg +_bcafe -1);args [1]=MakeNumberResult (_bgeg -1);return Combin (args );};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gdb :=args [0];switch _gdb .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_bbg :=_caff (_gdb .ValueNumber );return MakeNumberResult (float64 (_bbg .Day ()));case ResultTypeString :_ebe :=_c .ToLower (_gdb .ValueString );if !_gaaf (_ebe ){_ ,_ ,_ ,_ ,_afde ,_aeg :=_dge (_ebe );if _aeg .Type ==ResultTypeError {_aeg .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _aeg ;};if _afde {return MakeNumberResult (0);};};_ ,_ ,_feaf ,_ ,_bdae :=_face (_ebe );if _bdae .Type ==ResultTypeError {return _bdae ;};return MakeNumberResult (float64 (_feaf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};const _facf =187;

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdbf :=args [0];switch _fdbf .Type {case ResultTypeError :return _fdbf ;case ResultTypeNumber ,ResultTypeString :return _affd (args [0]);case ResultTypeList :_febag :=_fdbf .ValueList ;_gbfa :=[]Result {};for _ ,_agdabf :=range _febag {_dggc :=_affd (_agdabf );if _dggc .Type ==ResultTypeError {return _dggc ;};_gbfa =append (_gbfa ,_dggc );};return MakeListResult (_gbfa );case ResultTypeArray :_cdffc :=_fdbf .ValueArray ;_cfgf :=[][]Result {};for _ ,_fcd :=range _cdffc {_edab :=[]Result {};for _ ,_cgcg :=range _fcd {_dddd :=_affd (_cgcg );if _dddd .Type ==ResultTypeError {return _dddd ;};_edab =append (_edab ,_dddd );};_cfgf =append (_cfgf ,_edab );};return MakeArrayResult (_cfgf );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};var _gdea =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _gaaf (_cdba string )bool {for _ ,_fag :=range _ccbf {_afag :=_fag .FindStringSubmatch (_cdba );if len (_afag )> 1{return true ;};};return false ;};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_egab :=len (args );if _egab < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _egab > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bagf :=args [0];_gbgaf :=args [1];if _gbgaf .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_becad :=args [2].AsNumber ();if _becad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dceed :=false ;if _egab ==4&&args [3].Type !=ResultTypeEmpty {_afdd :=args [3].AsNumber ();if _afdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _afdd .ValueNumber ==0{_dceed =true ;};};_agfaa :=int (_becad .ValueNumber )-1;_eddbe :=-1;_dafe :=false ;_gaag :for _gefa ,_babaa :=range _gbgaf .ValueArray {if len (_babaa )==0{continue ;};_ecbc :=_babaa [0];switch _bfaeg (_ecbc ,_bagf ,false ,_dceed ){case _aadf :_eddbe =_gefa ;case _gdabd :_eddbe =_gefa ;_dafe =true ;break _gaag ;};};if _eddbe ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cfcfe :=_gbgaf .ValueArray [_eddbe ];if _agfaa < 0||_agfaa >=len (_cfcfe ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _dafe ||!_dceed {return _cfcfe [_agfaa ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var _gdbccf =[...]int {1};

// Update updates references in the Negate after removing a row/column.
func (_cfddb Negate )Update (q *_fe .UpdateQuery )Expression {return Negate {_dbcag :_cfddb ._dbcag .Update (q )};};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_agfc :=args [0].AsNumber ();if _agfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dfcad :=args [1].AsNumber ();if _dfcad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agfad :=int (_dfcad .ValueNumber );if _agfad < 0||_agfad > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_gfdcg :=0;if len (args )> 2{_cebg :=args [2].AsNumber ();if _cebg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gfdcg =int (_cebg .ValueNumber );};_cfbcd :=_ab .FormatInt (int64 (_agfc .ValueNumber ),_agfad );if len (_cfbcd )< _gfdcg {_cfbcd =_c .Repeat ("\u0030",_gfdcg -len (_cfbcd ))+_cfbcd ;};return MakeStringResult (_cfbcd );};const _ebdecf =57369;func _efca (_dfccc int )string {if _dfccc >=0&&_dfccc < len (_eaae ){if _eaae [_dfccc ]!=""{return _eaae [_dfccc ];};};return _b .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_dfccc );};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gabcb :=ctx .GetEpoch ();_bgdb ,_eddd :=_fgg (args [0].Value (),_gabcb );if _eddd !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bged :=_bgdb .Year ();return MakeBoolResult (_dcd (_bged ));};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcgbe :=args [0].AsNumber ();if _dcgbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_aagb :=float64 (1);if _dcgbe .ValueNumber < 0{_aagb =-1;};if len (args )> 1{_afbde :=args [1].AsNumber ();if _afbde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aagb =_afbde .ValueNumber ;};_geeda :=float64 (1);if len (args )> 2{_bfgd :=args [2].AsNumber ();if _bfgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_geeda =_bfgd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_bb .Ceil (_dcgbe .ValueNumber ));};_feedg :=_dcgbe .ValueNumber ;_feedg ,_dca :=_bb .Modf (_feedg /_aagb );if _dca !=0{if _dcgbe .ValueNumber > 0{_feedg ++;}else if _geeda < 0{_feedg --;};};return MakeNumberResult (_feedg *_aagb );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_fbf :=&defEval {};_fbf .evCache =_gdfd ();return _fbf };

// Update updates the FunctionCall references after removing a row/column.
func (_adedd FunctionCall )Update (q *_fe .UpdateQuery )Expression {_cffaf :=[]Expression {};for _ ,_agbg :=range _adedd ._gfccf {_gddd :=_agbg .Update (q );_cffaf =append (_cffaf ,_gddd );};return FunctionCall {_dfbd :_adedd ._dfbd ,_gfccf :_cffaf };};

// String returns a string representation of FunctionCall expression.
func (_ccge FunctionCall )String ()string {_gcfb :=_d .Buffer {};_gcfb .WriteString (_ccge ._dfbd );_gcfb .WriteString ("\u0028");_abaga :=len (_ccge ._gfccf )-1;for _dgaeg ,_fceef :=range _ccge ._gfccf {_gcfb .WriteString (_fceef .String ());if _dgaeg !=_abaga {_gcfb .WriteString ("\u002c");};};_gcfb .WriteString ("\u0029");return _gcfb .String ();};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};func _aae (_agffc string ,_eag uint32 )string {_gffa :=_fa .ColumnToIndex (_agffc );if _gffa ==_eag {return "\u0023\u0052\u0045F\u0021";}else if _gffa > _eag {return _fa .IndexToColumn (_gffa -1);}else {return _agffc ;};};func _aegd (_afdfe []Result ,_afbf bool ,_ecgc string )Result {var _feebf ,_bcfg string ;if _afbf {_feebf ="\u0074\u0068\u0072e\u0065";_bcfg ="\u006f\u0064\u0064";}else {_feebf ="\u0074\u0077\u006f";_bcfg ="\u0065\u0076\u0065\u006e";};_gbege :=len (_afdfe );if (_afbf &&_gbege < 3)||(!_afbf &&_gbege < 2){return MakeErrorResult (_ecgc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_feebf +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_gbege /2*2==_gbege )==_afbf {return MakeErrorResult (_ecgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bcfg +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_aaeb :=-1;_fged :=-1;for _fbef :=0;_fbef < _gbege ;_fbef +=2{_cbda :=_afdfe [_fbef ];if _cbda .Type !=ResultTypeArray &&_cbda .Type !=ResultTypeList {return MakeErrorResult (_ecgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_cecb :=_cedc (_cbda );if _fged ==-1{_fged =len (_cecb );_aaeb =len (_cecb [0]);}else if len (_cecb )!=_fged ||len (_cecb [0])!=_aaeb {return MakeErrorResult (_ecgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _afbf &&_fbef ==0{_fbef --;};};return _fgf ;};var _adba =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abba :=args [0].AsNumber ();if _abba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abag :=float64 (0);if len (args )> 1{_adcgg :=args [1].AsNumber ();if _adcgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abag =_adcgg .ValueNumber ;};_bgbb :=_abba .ValueNumber ;_dfgc :=1.0;if _abag >=0{_dfgc =_bb .Pow (1/10.0,_abag );}else {return MakeNumberResult (0);};_bgbb ,_bgac :=_bb .Modf (_bgbb /_dfgc );_ffaga :=0.99999;if _bgac > _ffaga {_bgbb ++;}else if _bgac < -_ffaga {_bgbb --;};_ =_bgac ;return MakeNumberResult (_bgbb *_dfgc );};var _bbcd =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _cfdgf (_cef float64 )bool {return _cef ==1||_cef ==2||_cef ==4};var _afcf []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Reference returns a string reference value to a range with prefix.
func (_cdfd PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_agegb :=_cdfd ._acggg .Reference (ctx ,ev );_bdbdf :=_cdfd ._cafdg .Reference (ctx ,ev );_dcaad :=_cdfd ._cfed .Reference (ctx ,ev );if _agegb .Type ==ReferenceTypeSheet &&_bdbdf .Type ==ReferenceTypeCell &&_dcaad .Type ==ReferenceTypeCell {return MakeRangeReference (_adacd (_agegb ,_bdbdf ,_dcaad ));};return ReferenceInvalid ;};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_fbee :=len (args );if _fbee < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_deae :=args [0].ValueNumber ;if _deae ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_begbd :=[]float64 {};for _ ,_aadgg :=range args [1:]{switch _aadgg .Type {case ResultTypeNumber :_begbd =append (_begbd ,_aadgg .ValueNumber );case ResultTypeArray ,ResultTypeList :_dgac :=_cedc (_aadgg );for _ ,_gddgb :=range _dgac {for _ ,_fgbc :=range _gddgb {if _fgbc .Type ==ResultTypeNumber &&!_fgbc .IsBoolean {_begbd =append (_begbd ,_fgbc .ValueNumber );};};};};};_gaac :=0.0;for _cdce ,_edbf :=range _begbd {_gaac +=_edbf /_bb .Pow (1+_deae ,float64 (_cdce )+1);};return MakeNumberResult (_gaac );};const _gfed =86400000000000;const _aefg =57371;

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_fgbgb :=args [0];if _fgbgb .Type !=ResultTypeArray &&_fgbgb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fbfc :=_fgbgb .ValueArray ;if len (_fbfc )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_fbfc [0])));};func _ddcge (_ecfc yyLexer ,_gdcb *yySymType )(_eedc ,_agdd int ){_agdd =0;_eedc =_ecfc .Lex (_gdcb );if _eedc <=0{_agdd =_gdbccf [0];goto _aafe ;};if _eedc < len (_gdbccf ){_agdd =_gdbccf [_eedc ];goto _aafe ;};if _eedc >=_gcfag {if _eedc < _gcfag +len (_ecda ){_agdd =_ecda [_eedc -_gcfag ];goto _aafe ;};};for _adbb :=0;_adbb < len (_bdedd );_adbb +=2{_agdd =_bdedd [_adbb +0];if _agdd ==_eedc {_agdd =_bdedd [_adbb +1];goto _aafe ;};};_aafe :if _agdd ==0{_agdd =_ecda [1];};if _edcb >=3{_b .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_cgbdg (_agdd ),uint (_eedc ));};return _eedc ,_agdd ;};

// Eval evaluates the binary expression using the context given.
func (_gaa BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_agd :=_gaa ._ga .Eval (ctx ,ev );if _agd .Type ==ResultTypeError {return _agd ;};_fac :=_gaa ._ef .Eval (ctx ,ev );if _fac .Type ==ResultTypeError {return _fac ;};if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeArray {if !_db (_agd .ValueArray ,_fac .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _cg (_gaa ._bd ,_agd .ValueArray ,_fac .ValueArray );}else if _agd .Type ==ResultTypeList {if len (_agd .ValueList )!=len (_fac .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ac (_gaa ._bd ,_agd .ValueList ,_fac .ValueList );};}else if _agd .Type ==ResultTypeArray &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return _ggg (_gaa ._bd ,_agd .ValueArray ,_fac );}else if _agd .Type ==ResultTypeList &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return _gd (_gaa ._bd ,_agd .ValueList ,_fac );};switch _gaa ._bd {case BinOpTypePlus :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeNumberResult (_agd .ValueNumber +_fac .ValueNumber );};};case BinOpTypeMinus :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeNumberResult (_agd .ValueNumber -_fac .ValueNumber );};};case BinOpTypeMult :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeNumberResult (_agd .ValueNumber *_fac .ValueNumber );};};case BinOpTypeDiv :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {if _fac .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_agd .ValueNumber /_fac .ValueNumber );};};case BinOpTypeExp :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeNumberResult (_bb .Pow (_agd .ValueNumber ,_fac .ValueNumber ));};};case BinOpTypeLT :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeBoolResult (_agd .ValueNumber < _fac .ValueNumber );};if _agd .Type ==ResultTypeString {return MakeBoolResult (_agd .ValueString < _fac .ValueString );};if _agd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _agd .Type ==ResultTypeString &&_fac .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _agd .Type ==ResultTypeNumber &&_fac .Type ==ResultTypeString {return MakeBoolResult (true );}else if _agd .Type ==ResultTypeEmpty &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_agd .Type ==ResultTypeNumber ||_agd .Type ==ResultTypeString )&&_fac .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeBoolResult (_agd .ValueNumber > _fac .ValueNumber );};if _agd .Type ==ResultTypeString {return MakeBoolResult (_agd .ValueString > _fac .ValueString );};if _agd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _agd .Type ==ResultTypeString &&_fac .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _agd .Type ==ResultTypeNumber &&_fac .Type ==ResultTypeString {return MakeBoolResult (false );}else if _agd .Type ==ResultTypeEmpty &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_agd .Type ==ResultTypeNumber ||_agd .Type ==ResultTypeString )&&_fac .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeBoolResult (_agd .ValueNumber ==_fac .ValueNumber );};if _agd .Type ==ResultTypeString {return MakeBoolResult (_agd .ValueString ==_fac .ValueString );};if _agd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_agd .Type ==ResultTypeString &&_fac .Type ==ResultTypeNumber )||(_agd .Type ==ResultTypeNumber &&_fac .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _agd .Type ==ResultTypeEmpty &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return MakeBoolResult (_efa (_fac ));}else if (_agd .Type ==ResultTypeNumber ||_agd .Type ==ResultTypeString )&&_fac .Type ==ResultTypeEmpty {return MakeBoolResult (_efa (_agd ));};case BinOpTypeNE :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeBoolResult (_agd .ValueNumber !=_fac .ValueNumber );};if _agd .Type ==ResultTypeString {return MakeBoolResult (_agd .ValueString !=_fac .ValueString );};if _agd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_agd .Type ==ResultTypeString &&_fac .Type ==ResultTypeNumber )||(_agd .Type ==ResultTypeNumber &&_fac .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _agd .Type ==ResultTypeEmpty &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return MakeBoolResult (!_efa (_fac ));}else if (_agd .Type ==ResultTypeNumber ||_agd .Type ==ResultTypeString )&&_fac .Type ==ResultTypeEmpty {return MakeBoolResult (!_efa (_agd ));};case BinOpTypeLEQ :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeBoolResult (_agd .ValueNumber <=_fac .ValueNumber );};if _agd .Type ==ResultTypeString {return MakeBoolResult (_agd .ValueString <=_fac .ValueString );};if _agd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _agd .Type ==ResultTypeString &&_fac .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _agd .Type ==ResultTypeNumber &&_fac .Type ==ResultTypeString {return MakeBoolResult (true );}else if _agd .Type ==ResultTypeEmpty &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return MakeBoolResult (_efa (_fac ));}else if (_agd .Type ==ResultTypeNumber ||_agd .Type ==ResultTypeString )&&_fac .Type ==ResultTypeEmpty {return MakeBoolResult (_efa (_agd ));};case BinOpTypeGEQ :if _agd .Type ==_fac .Type {if _agd .Type ==ResultTypeNumber {return MakeBoolResult (_agd .ValueNumber >=_fac .ValueNumber );};if _agd .Type ==ResultTypeString {return MakeBoolResult (_agd .ValueString >=_fac .ValueString );};if _agd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _agd .Type ==ResultTypeString &&_fac .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _agd .Type ==ResultTypeNumber &&_fac .Type ==ResultTypeString {return MakeBoolResult (false );}else if _agd .Type ==ResultTypeEmpty &&(_fac .Type ==ResultTypeNumber ||_fac .Type ==ResultTypeString ){return MakeBoolResult (_efa (_fac ));}else if (_agd .Type ==ResultTypeNumber ||_agd .Type ==ResultTypeString )&&_fac .Type ==ResultTypeEmpty {return MakeBoolResult (_efa (_agd ));};case BinOpTypeConcat :return MakeStringResult (_agd .Value ()+_fac .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_gdff :=len (args );if _gdff !=4&&_gdff !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gfff ,_cdaa :=_gbde (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cdaa .Type ==ResultTypeError {return _cdaa ;};_gbdd ,_cdaa :=_gbde (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cdaa .Type ==ResultTypeError {return _cdaa ;};if _gfff >=_gbdd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ggfc :=args [2].ValueNumber ;if _ggfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggeb :=args [3].ValueNumber ;if _ggeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebeg :=0;if _gdff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebeg =int (args [4].ValueNumber );if !_ebf (_ebeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_gbca ,_cdaa :=_bff (_gfff ,_gbdd ,_ebeg );if _cdaa .Type ==ResultTypeError {return _cdaa ;};return MakeNumberResult (_ggeb *_ggfc *_gbca );};const _geag =57372;

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ea ,_aaf :=_ab .ParseBool (v );if _aaf !=nil {_feb .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_aaf );};return Bool {_cge :_ea };};const _cgfa ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";var _ffdad =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _eba ="\u0028\u0020\u0028"+_dgd +"\u007c"+_eccb +"\u007c"+_egd +"\u007c"+_dba +"\u0029\u0029\u003f\u0024";func _adacd (_ebga ,_adacb ,_afae Reference )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ebga .Value ,_adacb .Value ,_afae .Value );};type cumulArgs struct{_adb float64 ;_ged float64 ;_afdg float64 ;_gcaf float64 ;_afaf float64 ;_aadg int ;};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_becdd :=1.0;for _ ,_bggg :=range args {_bggg =_bggg .AsNumber ();switch _bggg .Type {case ResultTypeNumber :_becdd *=_bggg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fdbca :=Product (_bggg .ListValues ());if _fdbca .Type !=ResultTypeNumber {return _fdbca ;};_becdd *=_fdbca .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bggg ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_bggg .Type ));};};return MakeNumberResult (_becdd );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_fcbd :=args [0];if _fcbd .Type !=ResultTypeArray &&_fcbd .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_caffa :=_fcbd .ValueArray ;if len (_caffa )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_caffa )));};var _acbbd =map[string ]FunctionComplex {};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_eafb ,_gcfg :=_eagc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _gcfg .Type ==ResultTypeError {return _gcfg ;};return MakeNumberResult (_bcab (_eafb ._gecg ,_eafb ._fbca ,_eafb ._adca ,_eafb ._cfcf ));};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_cbfc :=len (args );if _cbfc < 5||_cbfc > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddabg :=args [0].ValueNumber ;if _ddabg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcdc :=args [1].ValueNumber ;if _bcdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbdfe :=args [2].ValueNumber ;if _fbdfe ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fbdfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgac :=args [3].ValueNumber ;if _cgac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cecc :=args [4].ValueNumber ;if _cgac > _cecc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _cecc > _fbdfe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_bgfa :=2.0;if _cbfc > 5{if args [5].Type ==ResultTypeEmpty {_bgfa =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgfa =args [5].ValueNumber ;if _bgfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_gbcaa :=false ;if _cbfc > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gbcaa =args [6].ValueNumber !=0;};_feaed :=0.0;_ffcf :=_bb .Floor (_cgac );_bdad :=_bb .Ceil (_cecc );if _gbcaa {for _fbab :=_ffcf +1;_fbab <=_bdad ;_fbab ++{_facd :=_gdbgg (_ddabg ,_bcdc ,_fbdfe ,_fbab ,_bgfa );if _fbab ==_ffcf +1{_facd *=_bb .Min (_cecc ,_ffcf +1)-_cgac ;}else if _fbab ==_bdad {_facd *=_cecc +1-_bdad ;};_feaed +=_facd ;};}else {_cdcg :=_fbdfe ;var _fgdd float64 ;if !_dead (_cgac ,_bb .Floor (_cgac )){if _bgfa ==1{_fabbc :=_fbdfe /2;if _cgac > _fabbc ||_dead (_cgac ,_fabbc ){_fgdd =_cgac -_fabbc ;_cgac =_fabbc ;_cecc -=_fgdd ;_cdcg ++;};};};if _bgfa !=0{_ddabg -=_cgbf (_ddabg ,_bcdc ,_fbdfe ,_cdcg ,_cgac ,_bgfa );};_feaed =_cgbf (_ddabg ,_bcdc ,_fbdfe ,_fbdfe -_cgac ,_cecc -_cgac ,_bgfa );};return MakeNumberResult (_feaed );};const _baebc =57346;

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _f .Reader )Expression {_dbacc :=&plex {_gbdcc :LexReader (r )};_edbeca (_dbacc );if _dbacc ._ceaec !=""{return nil ;};return _dbacc ._aagbe ;};const _bagg ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_dbecc :=len (args );if _dbecc !=4&&_dbecc !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_febcg ,_fegd ,_ccad :=_eeg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _ccad .Type ==ResultTypeError {return _ccad ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffed :=args [2].ValueNumber ;if _ffed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fbcce :=args [3].ValueNumber ;if _fbcce <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_ebbe :=0;if _dbecc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebbe =int (args [4].ValueNumber );if !_ebf (_ebbe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_cbbg ,_ccad :=_bff (_febcg ,_fegd ,_ebbe );if _ccad .Type ==ResultTypeError {return _ccad ;};return MakeNumberResult ((_fbcce /_ffed -1)/_cbbg );};

// Reference returns a string reference value to a named range.
func (_gfbd NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_gfbd ._baac };};

// String returns a string representation of a vertical range.
func (_bbbcb VerticalRange )String ()string {return _bbbcb .verticalRangeReference ()};const (_aeae rmode =iota ;_bbbdd ;_ccba ;);

// Eval evaluates and returns the result of a function call.
func (_faef FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_decd :=LookupFunction (_faef ._dfbd );if _decd !=nil {_efccb :=make ([]Result ,len (_faef ._gfccf ));for _dgefa ,_eeec :=range _faef ._gfccf {_efccb [_dgefa ]=_eeec .Eval (ctx ,ev );_efccb [_dgefa ].Ref =_eeec .Reference (ctx ,ev );};if _ ,_ffgd :=_cgbec [_faef ._dfbd ];!_ffgd {if _cecag ,_egfa :=_bcgbd (_efccb );_cecag {return _egfa ;};};return _decd (_efccb );};_cgeegc :=LookupFunctionComplex (_faef ._dfbd );if _cgeegc !=nil {_cccg :=make ([]Result ,len (_faef ._gfccf ));for _eabg ,_cefd :=range _faef ._gfccf {_cccg [_eabg ]=_cefd .Eval (ctx ,ev );_cccg [_eabg ].Ref =_cefd .Reference (ctx ,ev );};if _ ,_afed :=_cgbec [_faef ._dfbd ];!_afed {if _aeea ,_dgcfc :=_bcgbd (_cccg );_aeea {return _dgcfc ;};};return _cgeegc (ctx ,ev ,_cccg );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_faef ._dfbd );};const _gbbe =57356;

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_ddgae :pfx ,_dfccb :exp }};func (_dege *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };const _dcc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _agfb =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dgbd :=args [0].AsNumber ();if _dgbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgcb :=0;if len (args )> 1{_eabec :=args [1];if _eabec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cgcb =int (_eabec .ValueNumber );if _cgcb < 0{_cgcb =0;}else if _cgcb > 4{_cgcb =4;};};_eeabc :=_gdea ;switch _cgcb {case 1:_eeabc =_afdec ;case 2:_eeabc =_ecbe ;case 3:_eeabc =_ffdad ;case 4:_eeabc =_gbcge ;};_dbfd :=_bb .Trunc (_dgbd .ValueNumber );_abdg :=_d .Buffer {};for _ ,_gagc :=range _eeabc {for _dbfd >=_gagc ._gdgg {_abdg .WriteString (_gagc ._ecbd );_dbfd -=_gagc ._gdgg ;};};return MakeStringResult (_abdg .String ());};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_bacg :=args [0].AsNumber ();if _bacg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_eafd :=int (_bacg .ValueNumber );_bgagc :=make ([][]Result ,0,_eafd );for _gfbbc :=0;_gfbbc < _eafd ;_gfbbc ++{_fdca :=make ([]Result ,_eafd );for _dgbad :=0;_dgbad < _eafd ;_dgbad ++{if _gfbbc ==_dgbad {_fdca [_dgbad ]=MakeNumberResult (1.0);}else {_fdca [_dgbad ]=MakeNumberResult (0.0);};};_bgagc =append (_bgagc ,_fdca );};return MakeArrayResult (_bgagc );};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_feec :=args [0];_acea :=args [1];if _acea .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_daeg :=args [2].AsNumber ();if _daeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccdb :=false ;if len (args )==4{_aecd :=args [3].AsNumber ();if _aecd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _aecd .ValueNumber ==0{_ccdb =true ;};};_dgcf :=-1;_deada :=false ;if len (_acea .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_cccf :=_acea .ValueArray [0];_gdbc :for _fgcf ,_gdgb :=range _cccf {switch _bfaeg (_gdgb ,_feec ,false ,_ccdb ){case _aadf :_dgcf =_fgcf ;case _gdabd :_dgcf =_fgcf ;_deada =true ;break _gdbc ;};};if _dgcf ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cgdg :=int (_daeg .ValueNumber )-1;if _cgdg < 0||_cgdg > len (_acea .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_cccf =_acea .ValueArray [_cgdg ];if _dgcf < 0||_dgcf >=len (_cccf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _deada ||!_ccdb {return _cccf [_dgcf ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Eval evaluates and returns the result of an empty expression.
func (_ba EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};