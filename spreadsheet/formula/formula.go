//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_d "bytes";_e "errors";_c "fmt";_gbf "github.com/unidoc/unioffice/common/logger";_fed "github.com/unidoc/unioffice/internal/mergesort";_gd "github.com/unidoc/unioffice/internal/wildcard";_fe "github.com/unidoc/unioffice/spreadsheet/format";_fg "github.com/unidoc/unioffice/spreadsheet/reference";_dd "github.com/unidoc/unioffice/spreadsheet/update";_eg "io";_df "math";_egb "math/big";_gb "math/rand";_b "regexp";_f "sort";_ge "strconv";_cf "strings";_ef "sync";_da "time";_a "unicode";);

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bged :=int (args [0].ValueNumber );return MakeBoolResult (_bged ==_bged /2*2);};

// Value returns a string version of the result.
func (_bdabf Result )Value ()string {switch _bdabf .Type {case ResultTypeNumber :_ggcbc :=_ge .FormatFloat (_bdabf .ValueNumber ,'f',-1,64);if len (_ggcbc )> 12{_fafcc :=12;for _ebbeb :=_fafcc ;_ebbeb > 0&&_ggcbc [_ebbeb ]=='0';_ebbeb --{_fafcc --;};_ggcbc =_ggcbc [0:_fafcc +1];};return _ggcbc ;case ResultTypeError :return _bdabf .ValueString ;case ResultTypeString :return _bdabf .ValueString ;case ResultTypeList :if len (_bdabf .ValueList )==0{return "";};return _bdabf .ValueList [0].Value ();case ResultTypeArray :if len (_bdabf .ValueArray )==0||len (_bdabf .ValueArray [0])==0{return "";};return _bdabf .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_edeg (args ,_cace ))};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_df .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcfe :=args [0];if _egcfe .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afda :=len (_egcfe .ValueArray );for _ ,_dcbff :=range _egcfe .ValueArray {if len (_dcbff )!=_afda {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_cfggg (_egcfe .ValueArray ));};func _dag (_cbab float64 )bool {return _cbab ==1||_cbab ==2||_cbab ==4};const _aeb ="\u005e\u0028\u0028"+_bde +"\u007c"+_ecd +"\u007c"+_cfb +"\u007c"+_ffed +"\u0029\u0020\u0029\u003f";

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_eac ConstArrayExpr )Update (q *_dd .UpdateQuery )Expression {return _eac };

// GetFilename returns an empty string for the invalid reference context.
func (_fcab *ivr )GetFilename ()string {return ""};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _abgf (args ,false )};const _cfd ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// Error is an error expression.
type Error struct{_aa string };const _fagf =57355;

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_dcd :v }};var _ggb =map[string ]*_b .Regexp {};const _cfbfg =57344;

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_aebf :=args [0];switch _aebf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_gbce :=_feea (_aebf .ValueNumber );return MakeNumberResult (float64 (_gbce .Day ()));case ResultTypeString :_efb :=_cf .ToLower (_aebf .ValueString );if !_fffg (_efb ){_ ,_ ,_ ,_ ,_bba ,_gcfa :=_eee (_efb );if _gcfa .Type ==ResultTypeError {_gcfa .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _gcfa ;};if _bba {return MakeNumberResult (0);};};_ ,_ ,_bfgd ,_ ,_gebf :=_eacg (_efb );if _gebf .Type ==ResultTypeError {return _gebf ;};return MakeNumberResult (float64 (_bfgd ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};func _ffbd (_cbed ,_ebea float64 ,_baa int )(float64 ,Result ){_caag ,_aee :=_feea (_cbed ),_feea (_ebea );_fgf :=_caag .Unix ();_ffbc :=_aee .Unix ();if _fgf ==_ffbc {return 0,_fad ;};_dce ,_cdgc ,_defb :=_caag .Date ();_dge ,_ccf ,_gfa :=_aee .Date ();_aagb ,_bdag :=int (_cdgc ),int (_ccf );var _ffbb ,_eeb float64 ;switch _baa {case 0:if _defb ==31{_defb --;};if _defb ==30&&_gfa ==31{_gfa --;}else if _eeg :=_ffcf (_dce );_aagb ==2&&((_eeg &&_defb ==29)||(!_eeg &&_defb ==28)){_defb =30;if _gedf :=_ffcf (_dge );_bdag ==2&&((_gedf &&_gfa ==29)||(!_gedf &&_gfa ==28)){_gfa =30;};};_ffbb =float64 ((_dge -_dce )*360+(_bdag -_aagb )*30+(_gfa -_defb ));_eeb =360;case 1:_ffbb =_ebea -_cbed ;_efef :=_dce !=_dge ;if _efef &&(_dge !=_dce +1||_aagb < _bdag ||(_aagb ==_bdag &&_defb < _gfa )){_dcdb :=0;for _ddc :=_dce ;_ddc <=_dge ;_ddc ++{_dcdb +=_dbfe (_ddc ,1);};_eeb =float64 (_dcdb )/float64 (_dge -_dce +1);}else {if !_efef &&_ffcf (_dce ){_eeb =366;}else {if _efef &&((_ffcf (_dce )&&(_aagb < 2||(_aagb ==2&&_defb <=29)))||(_ffcf (_dge )&&(_bdag > 2||(_bdag ==2&&_gfa ==29)))){_eeb =366;}else {_eeb =365;};};};case 2:_ffbb =_ebea -_cbed ;_eeb =360;case 3:_ffbb =_ebea -_cbed ;_eeb =365;case 4:if _defb ==31{_defb --;};if _gfa ==31{_gfa --;};_ffbb =float64 ((_dge -_dce )*360+(_bdag -_aagb )*30+(_gfa -_defb ));_eeb =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _ffbb /_eeb ,_fad ;};

// SetLocked does nothing for the invalid reference context.
func (_ccaa *ivr )SetLocked (cellRef string ,locked bool ){};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// String returns a string of a range.
func (_dfgbe Range )String ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_dfgbe ._aafd .String (),_dfgbe ._daba .String ());};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_ccd :data }};

// Update returns the same object as updating sheet references does not affect String.
func (_gcbdg String )Update (q *_dd .UpdateQuery )Expression {return _gcbdg };

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_accb :=args [0].Ref ;if _accb .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_accb .Value ,ev ).IsBoolean );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gdaga :=args [0].AsNumber ();if _gdaga .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_adee :=10.0;if len (args )> 1{_gbcaf :=args [1].AsNumber ();if _gbcaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_adee =args [1].ValueNumber ;};if _gdaga .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _adee ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_df .Log (_gdaga .ValueNumber )/_df .Log (_adee ));};func _fgccb (_fedd ,_bge ,_bcaf ,_gabe ,_bbcd ,_bddb float64 ,_agae int )(float64 ,Result ){_cfda :=int (_bddb );_egad :=_fea (_fedd ,_bge ,_cfda ,_agae );_gadb :=_afca (_fedd ,_bge ,_cfda ,_agae )/_egad ;_ggag ,_aedb :=_dgee (_fedd ,_bge ,_cfda ,_agae );if _aedb .Type ==ResultTypeError {return 0,_aedb ;};_gfed :=_cgdd (_fedd ,_bge ,_cfda ,_agae );_gbg :=_bbcd /_df .Pow (1+_gabe /_bddb ,_ggag -1+_gadb );_gbg -=100*_bcaf /_bddb *_gfed /_egad ;_gafb :=100*_bcaf /_bddb ;_gfff :=1+_gabe /_bddb ;for _daaf :=0.0;_daaf < _ggag ;_daaf ++{_gbg +=_gafb /_df .Pow (_gfff ,_daaf +_gadb );};return _gbg ,MakeEmptyResult ();};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_debb :=len (args );if _debb < 5||_debb > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfge :=args [0].ValueNumber ;if _cfge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfcfg :=args [1].ValueNumber ;if _cfcfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfcd :=args [2].ValueNumber ;if _bfcd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bfcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebfa :=args [3].ValueNumber ;if _ebfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebbc :=args [4].ValueNumber ;if _ebfa > _ebbc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _ebbc > _bfcd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_eefe :=2.0;if _debb > 5{if args [5].Type ==ResultTypeEmpty {_eefe =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eefe =args [5].ValueNumber ;if _eefe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_edcdd :=false ;if _debb > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_edcdd =args [6].ValueNumber !=0;};_geaef :=0.0;_fcdd :=_df .Floor (_ebfa );_febee :=_df .Ceil (_ebbc );if _edcdd {for _cggd :=_fcdd +1;_cggd <=_febee ;_cggd ++{_cgfd :=_gcad (_cfge ,_cfcfg ,_bfcd ,_cggd ,_eefe );if _cggd ==_fcdd +1{_cgfd *=_df .Min (_ebbc ,_fcdd +1)-_ebfa ;}else if _cggd ==_febee {_cgfd *=_ebbc +1-_febee ;};_geaef +=_cgfd ;};}else {_abge :=_bfcd ;var _gfca float64 ;if !_efc (_ebfa ,_df .Floor (_ebfa )){if _eefe ==1{_fgda :=_bfcd /2;if _ebfa > _fgda ||_efc (_ebfa ,_fgda ){_gfca =_ebfa -_fgda ;_ebfa =_fgda ;_ebbc -=_gfca ;_abge ++;};};};if _eefe !=0{_cfge -=_ecaf (_cfge ,_cfcfg ,_bfcd ,_abge ,_ebfa ,_eefe );};_geaef =_ecaf (_cfge ,_cfcfg ,_bfcd ,_bfcd -_ebfa ,_ebbc -_ebfa ,_eefe );};return MakeNumberResult (_geaef );};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_daacg :=_debbed (args );_f .Float64s (_daacg );var _abgg float64 ;if len (_daacg )%2==0{_abgg =(_daacg [len (_daacg )/2-1]+_daacg [len (_daacg )/2])/2;}else {_abgg =_daacg [len (_daacg )/2];};return MakeNumberResult (_abgg );};func _ecaf (_bbgg ,_fdcbec ,_afag ,_gbfcb ,_ffaa ,_aeec float64 )float64 {var _cbcf ,_afbf float64 ;_gbbde :=0.0;_fdde :=_df .Ceil (_ffaa );_ffcc :=_bbgg -_fdcbec ;_eaee :=false ;_afccg :=0.0;for _bbda :=1.0;_bbda <=_fdde ;_bbda ++{if !_eaee {_cbcf =_gcad (_bbgg ,_fdcbec ,_afag ,_bbda ,_aeec );_afccg =_ffcc /(_afag -_bbda +1);if _afccg > _cbcf {_afbf =_afccg ;_eaee =true ;}else {_afbf =_cbcf ;_ffcc -=_cbcf ;};}else {_afbf =_afccg ;};if _bbda ==_fdde {_afbf *=_ffaa +1-_fdde ;};_gbbde +=_afbf ;};return _gbbde ;};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_becd :=args [0].ValueNumber ;if _becd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_fffgf ,_fgb :=_aeefb (args [1],args [2],"\u0058\u004e\u0050\u0056");if _fgb .Type ==ResultTypeError {return _fgb ;};_cfced :=_fffgf ._afab ;_acfa :=_fffgf ._ecca ;_aacd :=0.0;_bgcgf :=_acfa [0];for _cfbe ,_cddd :=range _cfced {_aacd +=_cddd /_df .Pow (1+_becd ,(_acfa [_cfbe ]-_bgcgf )/365);};return MakeNumberResult (_aacd );};

// IsDBCS returns false for the invalid reference context.
func (_gafd *ivr )IsDBCS ()bool {return false };func _cdgac (_gebd yyLexer )int {return _ffdb ().Parse (_gebd )};func _aadc (_acdfe Result )[][]Result {switch _acdfe .Type {case ResultTypeArray :return _acdfe .ValueArray ;case ResultTypeList :return [][]Result {_acdfe .ValueList };default:return [][]Result {};};};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _eg .Reader )Expression {_ggae :=&plex {_fdec :LexReader (r )};_cdgac (_ggae );if _ggae ._bbgdf !=""{return nil ;};return _ggae ._bcgc ;};const _ggdf ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cdae :=args [0].AsNumber ();if _cdae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_fbgc :=float64 (1);if _cdae .ValueNumber < 0{_fbgc =-1;};if len (args )> 1{_egbea :=args [1].AsNumber ();if _egbea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbgc =_egbea .ValueNumber ;};if _fbgc < 0&&_cdae .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_df .Ceil (_cdae .ValueNumber ));};_dgga :=_cdae .ValueNumber ;_dgga ,_bfab :=_df .Modf (_dgga /_fbgc );if _bfab > 0{_dgga ++;};return MakeNumberResult (_dgga *_fbgc );};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_abca :=args [0].AsNumber ();if _abca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fedg :=args [1].AsNumber ();if _fedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_df .Pow (_abca .ValueNumber ,_fedg .ValueNumber ));};const _ffed ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_cfd +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func (_dcda *defEval )checkLastEvalIsRef (_ace Context ,_cac Expression ){switch _cac .(type ){case FunctionCall :switch _cac .(FunctionCall )._ecabd {case "\u0049\u0053\u0052E\u0046":for _ ,_efg :=range _cac .(FunctionCall )._acdfb {switch _efg .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_def :=_efg .Eval (_ace ,_dcda );_dcda ._acaa =!(_def .Type ==ResultTypeError &&_def .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_dcda ._acaa =false ;};};};};};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_fefcf :=args [0].AsString ();if _fefcf .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_dbgd :=args [1].AsNumber ();if _dbgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _dbgd .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _dbgd .ValueNumber ==0{return MakeStringResult ("");};_gcded :=_d .Buffer {};for _bgdg :=0;_bgdg < int (_dbgd .ValueNumber );_bgdg ++{_gcded .WriteString (_fefcf .ValueString );};return MakeStringResult (_gcded .String ());};var _fad Result =MakeEmptyResult ();

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _eee (_cfdc string )(int ,int ,float64 ,bool ,bool ,Result ){_ade :="";_dbd :=[]string {};for _eacd ,_babc :=range _ggb {_dbd =_babc .FindStringSubmatch (_cfdc );if len (_dbd )> 1{_ade =_eacd ;break ;};};if _ade ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};_dba :=_dbd [1]=="";_dbd =_dbd [49:];_fefa :=len (_dbd );_add :=_dbd [_fefa -1];_eca :=_add =="\u0061\u006d";_dbb :=_add =="\u0070\u006d";var _aadg ,_gagc int ;var _ggbc float64 ;var _ecc error ;switch _ade {case "\u0068\u0068":_aadg ,_ecc =_ge .Atoi (_dbd [0]);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};_gagc =0;_ggbc =0;case "\u0068\u0068\u003am\u006d":_aadg ,_ecc =_ge .Atoi (_dbd [0]);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};_gagc ,_ecc =_ge .Atoi (_dbd [2]);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};_ggbc =0;case "\u006d\u006d\u003as\u0073":_aadg =0;_gagc ,_ecc =_ge .Atoi (_dbd [0]);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};_ggbc ,_ecc =_ge .ParseFloat (_dbd [2],64);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_aadg ,_ecc =_ge .Atoi (_dbd [0]);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};_gagc ,_ecc =_ge .Atoi (_dbd [2]);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};_ggbc ,_ecc =_ge .ParseFloat (_dbd [4],64);if _ecc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};};if _gagc >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};if _eca ||_dbb {if _aadg > 12||_ggbc >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );}else if _aadg ==12{_aadg =0;};}else if _aadg >=24||_ggbc >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_fbg );};return _aadg ,_gagc ,_ggbc ,_dbb ,_dba ,_fad ;};

// Eval evaluates and returns the result of an error expression.
func (_dgf Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_dgf ._aa )};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_aa :v }};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_gcae ,_cfea :=_ead (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _cfea .Type ==ResultTypeError {return _cfea ;};_ceca :=_gcae ._dacb ;_eda :=_gcae ._eef ;_aabf ,_cfea :=_dgee (_gcae ._ffaf ,_gcae ._cgdb ,_ceca ,_eda );if _cfea .Type ==ResultTypeError {return _cfea ;};return MakeNumberResult (_aabf );};func _ddfba (_fggef string ,_eebc func (_beccd float64 )float64 )Function {return func (_cebe []Result )Result {if len (_cebe )!=1{return MakeErrorResult (_fggef +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dbfc :=_cebe [0].AsNumber ();switch _dbfc .Type {case ResultTypeNumber :_eaeebf :=_eebc (_dbfc .ValueNumber );if _df .IsNaN (_eaeebf ){return MakeErrorResult (_fggef +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _df .IsInf (_eaeebf ,0){return MakeErrorResult (_fggef +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_eaeebf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fggef +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _dbfc ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fggef ,_dbfc .Type ));};};};

// Update updates references in the BinaryExpr after removing a row/column.
func (_cb BinaryExpr )Update (q *_dd .UpdateQuery )Expression {_aga :=_cb ;_aga ._fb =_cb ._fb .Update (q );_aga ._dae =_cb ._dae .Update (q );return _aga ;};func _bc (_ba ,_gba [][]Result )bool {if len (_ba )!=len (_gba ){return false ;};for _fdd :=range _ba {if len (_ba [_fdd ])!=len (_gba [_fdd ]){return false ;};};return true ;};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gcda PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_fdddb :=_gcda ._dbfb .Reference (ctx ,ev );switch _fdddb .Type {case ReferenceTypeSheet :if _ccgef (_fdddb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fdddb .Value ));};_gdgg :=_gcda .verticalRangeReference (_fdddb .Value );if _aefa ,_abbbbc :=ev .GetFromCache (_gdgg );_abbbbc {return _aefa ;};_addeb :=ctx .Sheet (_fdddb .Value );_fefdd ,_dcaga :=_beeb (_addeb ,_gcda ._aecfc ,_gcda ._dacdb );_efede :=_fbae (_addeb ,ev ,_fefdd ,_dcaga );ev .SetCache (_gdgg ,_efede );return _efede ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdddb .Type ));};};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func _cgdd (_dgdcg ,_dfbaf float64 ,_adf ,_ggcg int )float64 {_bcf :=_feea (_dgdcg );_ccfd :=_feea (_dfbaf );_gffe :=_ddcd (_bcf ,_ccfd ,_adf ,_ggcg );return _bgbf (_gffe ,_bcf ,_ggcg );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_fbccf :=len (args );if _fbccf !=5&&_fbccf !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ddfa ,_fdba ,_afcg :=_dfba (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _afcg .Type ==ResultTypeError {return _afcg ;};_cadd ,_afcg :=_acdf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _afcg .Type ==ResultTypeError {return _afcg ;};if _cadd >=_ddfa {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fefc :=args [3].ValueNumber ;if _fefc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_cecgd :=args [4].ValueNumber ;if _cecgd <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_gbga :=0;if _fbccf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbga =int (args [5].ValueNumber );if !_ddcf (_gbga ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_dbbg ,_afcg :=_ffbd (_cadd ,_fdba ,_gbga );if _afcg .Type ==ResultTypeError {return _afcg ;};_agag ,_afcg :=_ffbd (_cadd ,_ddfa ,_gbga );if _afcg .Type ==ResultTypeError {return _afcg ;};_gdaf ,_afcg :=_ffbd (_ddfa ,_fdba ,_gbga );if _afcg .Type ==ResultTypeError {return _afcg ;};_ddbd :=1+_dbbg *_fefc ;_ddbd /=_cecgd /100+_agag *_fefc ;_ddbd --;_ddbd /=_gdaf ;return MakeNumberResult (_ddbd );};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_ddfc ,_fdcb :=_ead (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _fdcb .Type ==ResultTypeError {return _fdcb ;};return MakeNumberResult (_fea (_ddfc ._ffaf ,_ddfc ._cgdb ,_ddfc ._dacb ,_ddfc ._eef ));};

// Negate is a negate expression like -A1.
type Negate struct{_fgccf Expression };func _gcb (_deda ,_egac ,_fgcc ,_acffg float64 ,_dcfa int )float64 {var _daac float64 ;if _deda ==0{_daac =(_fgcc +_acffg )/_egac ;}else {_afd :=_df .Pow (1+_deda ,_egac );if _dcfa ==1{_daac =(_acffg *_deda /(_afd -1)+_fgcc *_deda /(1-1/_afd ))/(1+_deda );}else {_daac =_acffg *_deda /(_afd -1)+_fgcc *_deda /(1-1/_afd );};};return -_daac ;};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_bebbe ,_dafa :=_dcgfe (args ,true );if _dafa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_bebbe /_dafa );};

// Function is a standard function whose result only depends on its arguments.
type Function func (_fafdb []Result )Result ;

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func _gedd (_ffedd ,_cdeb _da .Time )bool {_edcb :=_ffedd .Unix ();_febe :=_cdeb .Unix ();_fdb :=_ffedd .Year ();_caed :=_cgbd (_fdb ,_da .March ,1);if _ffcf (_fdb )&&_edcb < _caed &&_febe >=_caed {return true ;};var _fefg =_cdeb .Year ();var _ecb =_cgbd (_fefg ,_da .March ,1);return (_ffcf (_fefg )&&_febe >=_ecb &&_edcb < _ecb );};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};const _ceed ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func init (){_eae ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfeg :=args [0].AsString ();_babbc :=args [1].AsString ();if _cfeg .Type !=ResultTypeString ||_babbc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_cfeg .ValueString ==_babbc .ValueString );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_ecae :=len (args );if _ecae !=4&&_ecae !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eggc :=args [0].ValueNumber ;if _eggc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eecb :=args [1].ValueNumber ;if _eecb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gefe :=args [2].ValueNumber ;if _gefe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfab :=args [3].ValueNumber ;if _cfab < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _cfab > _gefe {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_egdc :=2.0;if _ecae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egdc =args [4].ValueNumber ;if _egdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_gcad (_eggc ,_eecb ,_gefe ,_cfab ,_egdc ));};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddce :=args [0].AsNumber ();_eecf :=args [1].AsNumber ();_egbed :=args [2].AsNumber ();_gbgb :=args [3].ListValues ();if _ddce .Type !=ResultTypeNumber ||_eecf .Type !=ResultTypeNumber ||_egbed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_gfef :=float64 (0);for _fafe ,_fggbd :=range _gbgb {_gfef +=_fggbd .ValueNumber *_df .Pow (_ddce .ValueNumber ,_eecf .ValueNumber +float64 (_fafe )*_egbed .ValueNumber );};return MakeNumberResult (_gfef );};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_aff :=len (args );if _aff !=4&&_aff !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_effa ,_aafcb ,_acba :=_dfba (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _acba .Type ==ResultTypeError {return _acba ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbf :=args [2].ValueNumber ;if _ffbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aaff :=args [3].ValueNumber ;if _aaff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aebfc :=0;if _aff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aebfc =int (args [4].ValueNumber );if !_ddcf (_aebfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_decdg ,_acba :=_ffbd (_effa ,_aafcb ,_aebfc );if _acba .Type ==ResultTypeError {return _acba ;};return MakeNumberResult (_ffbf /(1-_aaff *_decdg ));};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcgc :=args [0].AsNumber ();_dabdc :=args [1].AsNumber ();if _fcgc .Type !=ResultTypeNumber ||_dabdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dabdc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_df .Trunc (_fcgc .ValueNumber /_dabdc .ValueNumber ));};

// Reference returns an invalid reference for ConstArrayExpr.
func (_bcdb ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_daef ,_dffg ,_efdf :=_agfcf (args );if _efdf .Type ==ResultTypeError {return _efdf ;};return MakeNumberResult (_caec (_daef )/_dffg );};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_egcg :=int (args [0].ValueNumber );if _egcg < 0||_egcg >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _egcg <=1899{_egcg +=1900;};_fcc :=_da .Month (args [1].ValueNumber );_cffg :=int (args [2].ValueNumber );_bbf :=_cgbd (_egcg ,_fcc ,_cffg );_bga :=_gdf (_bfg ,_bbf )+1;if _bga < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_bga );};const _cfb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _bgbf (_abdc ,_bea _da .Time ,_agd int )float64 {if _abdc .After (_bea ){_abdc ,_bea =_bea ,_abdc ;};_fba :=0;_adcg ,_dga ,_ecdc :=_abdc .Date ();_bbcb ,_dgb ,_ccge :=_bea .Date ();_aagd ,_eeeb :=int (_dga ),int (_dgb );_fbaf ,_ada :=_egaa (_adcg ,_aagd ,_ecdc ,_agd ),_egaa (_bbcb ,_eeeb ,_ccge ,_agd );if !_fcca (_agd ){return _afcf (_bbcb ,_eeeb ,_ada )-_afcf (_adcg ,_aagd ,_fbaf );};if _agd ==0{if (_aagd ==2||_fbaf < 30)&&_ccge ==31{_ada =31;}else if _eeeb ==2&&_ada ==_eaag (_bbcb ,_eeeb ){_ada =_eaag (_bbcb ,2);};}else {if _aagd ==2&&_fbaf ==30{_fbaf =_eaag (_adcg ,2);};if _eeeb ==2&&_ada ==30{_ada =_eaag (_bbcb ,2);};};if _adcg < _bbcb ||(_adcg ==_bbcb &&_aagd < _eeeb ){_fba =30-_fbaf +1;_ecdc =1;_fbaf =1;_cabc :=_da .Date (_adcg ,_da .Month (_aagd ),_ecdc ,0,0,0,0,_da .UTC ).AddDate (0,1,0);if _cabc .Year ()< _bbcb {_fba +=_cgg (_cabc .Year (),int (_cabc .Month ()),12,_agd );_cabc =_cabc .AddDate (0,13-int (_cabc .Month ()),0);_fba +=_afegf (_cabc .Year (),_bbcb -1,_agd );};_fba +=_cgg (_bbcb ,int (_cabc .Month ()),_eeeb -1,_agd );_cabc =_cabc .AddDate (0,_eeeb -int (_cabc .Month ()),0);_aagd =_cabc .Day ();};_fba +=_ada -_fbaf ;if _fba > 0{return float64 (_fba );}else {return 0;};};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_ggec ,_afeb :=_geae (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _afeb .Type ==ResultTypeError {return _afeb ;};_aeca :=_ggec ._bbbe ;_egbc :=_ggec ._gdag ;_eccf :=_ggec ._dcdc ;_gfda :=_ggec ._gdg ;_abg :=_ggec ._dgcb ;_cdff :=_ggec ._cbfa ;_cfec :=_ggec ._eeff ;_dgae ,_cbgb :=_ffbd (_egbc ,_eccf ,_cfec );if _cbgb .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_bgcee :=_dgae *_cdff *_aeca ;if _abg ==0{return MakeNumberResult (_bgcee );};_agad :=_aeca *_cdff ;_aegb :=_aeca -_gfda ;_badc :=int ((_aegb -_bgcee )/_agad );if _abg <=_badc {return MakeNumberResult (_agad );}else if _abg ==_badc +1{return MakeNumberResult (_aegb -_agad *float64 (_badc )-_bgcee );}else {return MakeNumberResult (0);};};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_fgdc :=len (args );if _fgdc !=5&&_fgdc !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcad ,_afgac ,_defg :=_dfba (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _defg .Type ==ResultTypeError {return _defg ;};_fgefg ,_defg :=_acdf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _defg .Type ==ResultTypeError {return _defg ;};if _fgefg >=_fcad {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gcac :=args [3].ValueNumber ;if _gcac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcbfb :=args [4].ValueNumber ;if _fcbfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_eddc :=0;if _fgdc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eddc =int (args [5].ValueNumber );if !_ddcf (_eddc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_daga ,_defg :=_ffbd (_fcad ,_afgac ,_eddc );if _defg .Type ==ResultTypeError {return _defg ;};_fbag ,_defg :=_ffbd (_fgefg ,_afgac ,_eddc );if _defg .Type ==ResultTypeError {return _defg ;};_cbbb ,_defg :=_ffbd (_fgefg ,_fcad ,_eddc );if _defg .Type ==ResultTypeError {return _defg ;};_gedcg :=1+_fbag *_gcac ;_acaag :=1+_daga *_fcbfb ;return MakeNumberResult ((_gedcg /_acaag -_cbbb *_gcac )*100);};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_fbcd HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_eebca :=_fbcd .horizontalRangeReference ();if _cffce ,_bfbbg :=ev .GetFromCache (_eebca );_bfbbg {return _cffce ;};_cgbaa ,_fefeg :=_geac (ctx ,_fbcd ._becdc ,_fbcd ._dffga );_fbad :=_fbae (ctx ,ev ,_cgbaa ,_fefeg );ev .SetCache (_eebca ,_fbad );return _fbad ;};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_becdc ,_dffga int };

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bffc :=args [0].Ref ;if _bffc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_caee ,_dfbe :=_fg .ParseCellReference (_bffc .Value );if _dfbe !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bffc .Value );};return MakeNumberResult (float64 (_caee .ColumnIdx +1));};func _ffee (_cce []Result ,_efbf string )(*durationArgs ,Result ){_edgg :=len (_cce );if _edgg !=5&&_edgg !=6{return nil ,MakeErrorResult (_efbf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcdag ,_dcbc ,_fage :=_dfba (_cce [0],_cce [1],_efbf );if _fage .Type ==ResultTypeError {return nil ,_fage ;};_ggfb :=_cce [2];if _ggfb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_efbf +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ccfb :=_ggfb .ValueNumber ;if _ccfb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_faa :=_cce [3];if _faa .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_efbf +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gaad :=_faa .ValueNumber ;if _gaad < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_cfg :=_cce [4];if _cfg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_efbf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggcfc :=float64 (int (_cfg .ValueNumber ));if !_dag (_ggcfc ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bfa :=0;if _edgg ==6&&_cce [5].Type !=ResultTypeEmpty {_aec :=_cce [5];if _aec .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_efbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfa =int (_aec .ValueNumber );if !_ddcf (_bfa ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_efbf );};};return &durationArgs {_dcdag ,_dcbc ,_ccfb ,_gaad ,_ggcfc ,_bfa },_fad ;};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_fcegd :=args [0];if _fcegd .Type !=ResultTypeNumber &&_fcegd .Type !=ResultTypeString &&_fcegd .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_bgbbb :=args [1].ValueString ;switch _fcegd .Type {case ResultTypeNumber :return MakeStringResult (_fe .Number (_fcegd .ValueNumber ,_bgbbb ));case ResultTypeString :return MakeStringResult (_fe .String (_fcegd .ValueString ,_bgbbb ));case ResultTypeEmpty :return MakeStringResult (_fe .Number (0,_bgbbb ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbgf ,_cgdgf ,_cgee :=_dfba (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _cgee .Type ==ResultTypeError {return _cgee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccee :=_cgdgf -_gbgf ;if _ccee > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_bdagc :=args [2].ValueNumber ;if _bdagc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fefd :=(100-_bdagc )/_bdagc ;_affb :=360/_ccee ;return MakeNumberResult (_fefd *_affb );};func _ccgc (_ecbbfa float64 ,_ccgce *criteriaRegex )bool {_egggd ,_gedcf :=_ge .ParseFloat (_ccgce ._faac ,64);if _gedcf !=nil {return false ;};switch _ccgce ._caffg {case _gdgcb :return _ecbbfa ==_egggd ;case _gdgdd :return _ecbbfa <=_egggd ;case _begfg :return _ecbbfa >=_egggd ;case _bffd :return _ecbbfa < _egggd ;case _beef :return _ecbbfa > _egggd ;};return false ;};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Update updates references in the Negate after removing a row/column.
func (_dagf Negate )Update (q *_dd .UpdateQuery )Expression {return Negate {_fgccf :_dagf ._fgccf .Update (q )};};const _ecd =_cfd +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _beeb (_acga Context ,_fgag ,_ggccf string )(string ,string ){_agbgf :=_fgag +"\u0031";_cfae :=_acga .LastRow (_fgag );_bdged :=_ggccf +_ge .Itoa (_cfae );return _agbgf ,_bdged ;};var _cbcad =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Reference returns a string reference value to a horizontal range.
func (_fcefe HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_fcefe .horizontalRangeReference ()};};

// String returns a string representation of a vertical range with prefix.
func (_gbfde PrefixVerticalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gbfde ._dbfb .String (),_gbfde ._aecfc ,_gbfde ._dacdb );};func _gcfd (_aaea ,_abgeb Result ,_fbafb ,_cbedd bool )cmpResult {_aaea =_aaea .AsNumber ();_abgeb =_abgeb .AsNumber ();if _aaea .Type !=_abgeb .Type {return _aba ;};if _aaea .Type ==ResultTypeNumber {if _aaea .ValueNumber ==_abgeb .ValueNumber {return _afcb ;};if _aaea .ValueNumber < _abgeb .ValueNumber {return _cefcg ;};return _ffag ;};if _aaea .Type ==ResultTypeString {_fcbdf :=_aaea .ValueString ;_fafc :=_abgeb .ValueString ;if !_fbafb {_fcbdf =_cf .ToLower (_fcbdf );_fafc =_cf .ToLower (_fafc );};if _cbedd {_agbe :=_gd .Match (_fafc ,_fcbdf );if _agbe {return _afcb ;}else {return _ffag ;};};return cmpResult (_cf .Compare (_fcbdf ,_fafc ));};if _aaea .Type ==ResultTypeEmpty {return _afcb ;};if _aaea .Type ==ResultTypeList {if len (_aaea .ValueList )< len (_abgeb .ValueList ){return _cefcg ;};if len (_aaea .ValueList )> len (_abgeb .ValueList ){return _ffag ;};for _aadb :=range _aaea .ValueList {_gabg :=_gcfd (_aaea .ValueList [_aadb ],_abgeb .ValueList [_aadb ],_fbafb ,_cbedd );if _gabg !=_afcb {return _gabg ;};};return _afcb ;};if _aaea .Type ==ResultTypeList {if len (_aaea .ValueArray )< len (_abgeb .ValueArray ){return _cefcg ;};if len (_aaea .ValueArray )> len (_abgeb .ValueArray ){return _ffag ;};for _bfde :=range _aaea .ValueArray {_dbbc :=_aaea .ValueArray [_bfde ];_acacg :=_aaea .ValueArray [_bfde ];if len (_dbbc )< len (_acacg ){return _cefcg ;};if len (_dbbc )> len (_acacg ){return _ffag ;};for _bgffd :=range _dbbc {_gffea :=_gcfd (_dbbc [_bgffd ],_acacg [_bgffd ],_fbafb ,_cbedd );if _gffea !=_afcb {return _gffea ;};};};return _afcb ;};return _aba ;};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_decga :=len (args );if _decga < 2||_decga > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dece :=args [0];if _dece .Type !=ResultTypeArray &&_dece .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cgfc :=args [1].AsNumber ();if _cgfc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ffce :=int (_cgfc .ValueNumber )-1;_caaee :=-1;if _decga ==3&&args [2].Type !=ResultTypeEmpty {_eea :=args [2].AsNumber ();if _eea .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caaee =int (_eea .ValueNumber )-1;};if _ffce ==-1&&_caaee ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _egee []Result ;if _dece .Type ==ResultTypeArray {_gbdb :=_dece .ValueArray ;if _ffce < -1||_ffce >=len (_gbdb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ffce ==-1{if _caaee >=len (_gbdb [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_fdeeb :=[][]Result {};for _ ,_fgec :=range _gbdb {_ggcca :=_fgec [_caaee ];if _ggcca .Type ==ResultTypeEmpty {_ggcca =MakeNumberResult (0);};_fdeeb =append (_fdeeb ,[]Result {_ggcca });};return MakeArrayResult (_fdeeb );};_egee =_gbdb [_ffce ];}else {_baeg :=_dece .ValueList ;if _ffce < -1||_ffce >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ffce ==-1{if _caaee >=len (_baeg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bbcg :=_baeg [_caaee ];if _bbcg .Type ==ResultTypeEmpty {_bbcg =MakeNumberResult (0);};return _bbcg ;};_egee =_baeg ;};if _caaee < -1||_caaee > len (_egee ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _caaee ==-1{_adfcf :=[]Result {};for _ ,_debba :=range _egee {if _debba .Type ==ResultTypeEmpty {_adfcf =append (_adfcf ,MakeNumberResult (0));}else {_adfcf =append (_adfcf ,_debba );};};return MakeArrayResult ([][]Result {_adfcf });};_efca :=_egee [_caaee ];if _efca .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _efca ;};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_eeef :=args [0].AsString ();if _eeef .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_eeef .ValueString ,ev );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gdgc :=args [0];if _gdgc .Type ==ResultTypeList {_ffef :=[][]Result {};for _ ,_dggf :=range _gdgc .ValueList {_ffef =append (_ffef ,[]Result {_dggf });};return MakeArrayResult (_ffef );};_dfab :=make ([][]Result ,len (_gdgc .ValueArray [0]));for _ ,_fgca :=range _gdgc .ValueArray {for _eafbb ,_faaf :=range _fgca {_dfab [_eafbb ]=append (_dfab [_eafbb ],_faaf );};};return MakeArrayResult (_dfab );};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eaaf ,_fgfa ,_eeebb :=_dfba (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _eeebb .Type ==ResultTypeError {return _eeebb ;};_dggb ,_eeebb :=_acdf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _eeebb .Type ==ResultTypeError {return _eeebb ;};if _dggb >=_eaaf {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_bdbg :=args [3];if _bdbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_edgd :=_bdbg .ValueNumber ;if _edgd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_eafb :=args [4];if _eafb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcf :=_eafb .ValueNumber ;if _fcf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gcef :=args [5];if _gcef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_deab :=_gcef .ValueNumber ;if _deab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_aege :=args [6];if _aege .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccbg :=float64 (int (_aege .ValueNumber ));if !_dag (_ccbg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gbbd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_aagf :=args [7];if _aagf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbbd =int (_aagf .ValueNumber );if !_ddcf (_gbbd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_gdga ,_eeebb :=_ffbd (_dggb ,_fgfa ,_gbbd );if _eeebb .Type ==ResultTypeError {return _eeebb ;};_gdga *=_ccbg ;_gcefg ,_eeebb :=_ffbd (_eaaf ,_fgfa ,_gbbd );if _eeebb .Type ==ResultTypeError {return _eeebb ;};_gcefg *=_ccbg ;_cbdd ,_eeebb :=_ffbd (_dggb ,_eaaf ,_gbbd );if _eeebb .Type ==ResultTypeError {return _eeebb ;};_cbdd *=_ccbg ;_fegac :=_deab +_gdga *100*_edgd /_ccbg ;_fegac /=_gcefg *_fcf /_ccbg +1;_fegac -=_cbdd *100*_edgd /_ccbg ;return MakeNumberResult (_fegac );};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_edeg (args ,_bfcad ))};func _ffdb ()yyParser {return &yyParserImpl {}};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebfd :=args [0].AsNumber ();_cbgac :=args [1].AsNumber ();if _cebfd .Type !=ResultTypeNumber ||_cbgac .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bbfa :=_df .Trunc (_cebfd .ValueNumber );_cdbe :=_df .Trunc (_cbgac .ValueNumber );if _cdbe > _bbfa {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _cdbe ==_bbfa ||_cdbe ==0{return MakeNumberResult (1);};_fbfce :=float64 (1);for _eccc :=float64 (1);_eccc <=_cdbe ;_eccc ++{_fbfce *=(_bbfa +1-_eccc )/_eccc ;};return MakeNumberResult (_fbfce );};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbdca :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gegd :=args [2].ValueNumber ;if _gegd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_ecee -_fbdca )/_gegd );};

// Update updates references in the VerticalRange after removing a row/column.
func (_cbeda VerticalRange )Update (q *_dd .UpdateQuery )Expression {if q .UpdateType ==_dd .UpdateActionRemoveColumn {_ggbg :=_cbeda ;if q .UpdateCurrentSheet {_bcafb :=q .ColumnIdx ;_ggbg ._bdceb =_ca (_cbeda ._bdceb ,_bcafb );_ggbg ._aeae =_ca (_cbeda ._aeae ,_bcafb );};return _ggbg ;};return _cbeda ;};

// String returns a string representation of Number.
func (_deff Number )String ()string {return _ge .FormatFloat (_deff ._caegb ,'f',-1,64)};func _eacg (_dda string )(int ,int ,int ,bool ,Result ){_bce :="";_afg :=[]string {};for _ccdd ,_cea :=range _gcg {_afg =_cea .FindStringSubmatch (_dda );if len (_afg )> 1{_bce =_ccdd ;break ;};};if _bce ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_ccaf :=false ;var _gfc ,_gae ,_dcg int ;var _feege error ;switch _bce {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_gae ,_feege =_ge .Atoi (_afg [1]);if _feege !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_dcg ,_feege =_ge .Atoi (_afg [3]);if _feege !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_gfc ,_feege =_ge .Atoi (_afg [5]);if _feege !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};if _gfc < 0||_gfc > 9999||(_gfc > 99&&_gfc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_gfc =_bdg (_gfc );_ccaf =_afg [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_gae =_eab [_afg [1]];_dcg ,_feege =_ge .Atoi (_afg [14]);if _feege !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_gfc ,_feege =_ge .Atoi (_afg [16]);if _feege !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};if _gfc < 0||_gfc > 9999||(_gfc > 99&&_gfc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_gfc =_bdg (_gfc );_ccaf =_afg [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_gfcd ,_ega :=_ge .Atoi (_afg [1]);if _ega !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_bagg ,_ega :=_ge .Atoi (_afg [3]);if _ega !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_eed ,_ega :=_ge .Atoi (_afg [5]);if _ega !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};if _gfcd >=1900&&_gfcd < 10000{_gfc =_gfcd ;_gae =_bagg ;_dcg =_eed ;}else if _gfcd > 0&&_gfcd < 13{_gae =_gfcd ;_dcg =_bagg ;_gfc =_eed ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_ccaf =_afg [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_gfc ,_feege =_ge .Atoi (_afg [16]);if _feege !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_gae =_eab [_afg [3]];_dcg ,_feege =_ge .Atoi (_afg [1]);if _feege !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};_ccaf =_afg [19]=="";};if !_dcc (_gfc ,_gae ,_dcg ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bccc );};return _gfc ,_gae ,_dcg ,_ccaf ,_fad ;};func _cgg (_bbg ,_gcdfb ,_dcga ,_gced int )int {if _gcdfb > _dcga {return 0;};if _fcca (_gced ){return (_dcga -_gcdfb +1)*30;};_caaf :=0;for _aebga :=_gcdfb ;_aebga <=_dcga ;_aebga ++{_caaf +=_eaag (_bbg ,_aebga );};return _caaf ;};var _fbcg =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_aega :=len (args );if _aega !=6&&_aega !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_abdb ,_bdabc ,_bbbc :=_dfba (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _bbbc .Type ==ResultTypeError {return _bbbc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdce :=args [2].ValueNumber ;if _bdce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dgeef :=args [3].ValueNumber ;if _dgeef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgbg :=args [4].ValueNumber ;if _cgbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbge :=args [5];if _cbge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_aaef :=_cbge .ValueNumber ;if !_dag (_aaef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ceec :=0;if _aega ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceec =int (args [6].ValueNumber );if !_ddcf (_ceec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_aea ,_bbbc :=_fgccb (_abdb ,_bdabc ,_bdce ,_dgeef ,_cgbg ,_aaef ,_ceec );if _bbbc .Type ==ResultTypeError {return _bbbc ;};return MakeNumberResult (_aea );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_adb :=len (args );if _adb !=4&&_adb !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gdeb ,_bdbb ,_dde :=_dfba (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _dde .Type ==ResultTypeError {return _dde ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fdge :=args [2].ValueNumber ;if _fdge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bfeb :=args [3].ValueNumber ;if _bfeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_dfag :=0;if _adb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dfag =int (args [4].ValueNumber );if !_ddcf (_dfag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_bfeg ,_dde :=_ffbd (_gdeb ,_bdbb ,_dfag );if _dde .Type ==ResultTypeError {return _dde ;};return MakeNumberResult ((_bfeb -_fdge )/_fdge /_bfeg );};func _bgff (_acf ,_fcbf ,_ded ,_gdcf ,_ddbb float64 ,_dfd int )Result {_deb ,_gebe :=_ffbd (_acf ,_fcbf ,_dfd );if _gebe .Type ==ResultTypeError {return _gebe ;};_edb ,_aaga :=_dgee (_acf ,_fcbf ,int (_ddbb ),_dfd );if _aaga .Type ==ResultTypeError {return _aaga ;};_cge :=0.0;_aeee :=0.0;_ded *=100/_ddbb ;_gdcf /=_ddbb ;_gdcf ++;_gfd :=_deb *_ddbb -_edb ;for _eeba :=1.0;_eeba < _edb ;_eeba ++{_abbg :=_eeba +_gfd ;_fgg :=_ded /_df .Pow (_gdcf ,_abbg );_aeee +=_fgg ;_cge +=_abbg *_fgg ;};_fag :=(_ded +100)/_df .Pow (_gdcf ,_edb +_gfd );_aeee +=_fag ;_cge +=(_edb +_gfd )*_fag ;_cge /=_aeee ;_cge /=_ddbb ;return MakeNumberResult (_cge );};var _ffcab =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Match implements the MATCH function.
func Match (args []Result )Result {_ffcba :=len (args );if _ffcba !=2&&_ffcba !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eacb :=1;if _ffcba ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_deg :=args [2].ValueNumber ;if _deg ==-1||_deg ==0{_eacb =int (_deg );};};_begb :=args [1];var _ceab []Result ;switch _begb .Type {case ResultTypeList :_ceab =_begb .ValueList ;case ResultTypeArray :_cgfde :=_begb .ValueArray ;for _ ,_ggafc :=range _cgfde {if len (_ggafc )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_ceab =append (_ceab ,_ggafc [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_becb :=_gbfbf (args [0]);switch _eacb {case 0:for _cdgb ,_cga :=range _ceab {if _bcea (_cga ,_becb ){return MakeNumberResult (float64 (_cdgb +1));};};case -1:for _gcbf :=0;_gcbf < len (_ceab );_gcbf ++{if _bcea (_ceab [_gcbf ],_becb ){return MakeNumberResult (float64 (_gcbf +1));};if _becb ._aegbfg &&(_ceab [_gcbf ].ValueNumber < _becb ._baad ){if _gcbf ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gcbf ));};};case 1:for _fbdea :=0;_fbdea < len (_ceab );_fbdea ++{if _bcea (_ceab [_fbdea ],_becb ){return MakeNumberResult (float64 (_fbdea +1));};if _becb ._aegbfg &&(_ceab [_fbdea ].ValueNumber > _becb ._baad ){if _fbdea ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fbdea ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};const _begfc =57367;

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fffd :=args [0].Ref ;if _fffd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_edgdd ,_bacf :=_fg .ParseCellReference (_fffd .Value );if _bacf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fffd .Value );};return MakeNumberResult (float64 (_edgdd .RowIdx ));};func _acade (_ccgg []Result )(bool ,Result ){for _ ,_fabag :=range _ccgg {if _fabag .Type ==ResultTypeError {return true ,_fabag ;};};return false ,MakeEmptyResult ();};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_fb :lhs ,_dae :rhs ,_fa :op };};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_acde :=args [0].AsNumber ();if _acde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bceb :=args [1].AsNumber ();if _bceb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgbb :=int (_bceb .ValueNumber );if _dgbb < 0||_dgbb > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_cecac :=0;if len (args )> 2{_aebd :=args [2].AsNumber ();if _aebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cecac =int (_aebd .ValueNumber );};_bcad :=_ge .FormatInt (int64 (_acde .ValueNumber ),_dgbb );if len (_bcad )< _cecac {_bcad =_cf .Repeat ("\u0030",_cecac -len (_bcad ))+_bcad ;};return MakeStringResult (_bcad );};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_cec CellRef )Update (q *_dd .UpdateQuery )Expression {if q .UpdateCurrentSheet {_cec ._dcd =_dgd (_cec ._dcd ,q );};return _cec ;};type ri struct{_bgea float64 ;_gcfc string ;};const _eacf =57374;

// Update updates the FunctionCall references after removing a row/column.
func (_ebdd FunctionCall )Update (q *_dd .UpdateQuery )Expression {_ccaff :=[]Expression {};for _ ,_faag :=range _ebdd ._acdfb {_fbbgd :=_faag .Update (q );_ccaff =append (_ccaff ,_fbbgd );};return FunctionCall {_ecabd :_ebdd ._ecabd ,_acdfb :_ccaff };};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eeebg :=[]float64 {};for _ ,_fbagd :=range args {switch _fbagd .Type {case ResultTypeString :_ccec :=_fbagd .AsNumber ();if _ccec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eeebg =append (_eeebg ,_ccec .ValueNumber );case ResultTypeList ,ResultTypeArray :_cacc :=GCD (_fbagd .ListValues ());if _cacc .Type !=ResultTypeNumber {return _cacc ;};_eeebg =append (_eeebg ,_cacc .ValueNumber );case ResultTypeNumber :_eeebg =append (_eeebg ,_fbagd .ValueNumber );case ResultTypeError :return _fbagd ;default:return MakeErrorResult (_c .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fbagd .Type ));};};if _eeebg [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_eeebg )==1{return MakeNumberResult (_eeebg [0]);};_fggb :=_eeebg [0];for _dedaf :=1;_dedaf < len (_eeebg );_dedaf ++{if _eeebg [_dedaf ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fggb =_affd (_fggb ,_eeebg [_dedaf ]);};return MakeNumberResult (_fggb );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bdeb :=_da .Now ();_ ,_abb :=_bdeb .Zone ();_ebe :=_aad +float64 (_bdeb .Unix ()+int64 (_abb ))/86400;return MakeNumberResult (_ebe );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aedc :=args [0].AsNumber ();if _aedc .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_begc :=float64 (1);if _aedc .ValueNumber < 0{_begc =-1;};if len (args )> 1{_egdfd :=args [1].AsNumber ();if _egdfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_begc =_egdfd .ValueNumber ;};_eefd :=float64 (1);if len (args )> 2{_facac :=args [2].AsNumber ();if _facac .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eefd =_facac .ValueNumber ;};if len (args )==1{return MakeNumberResult (_df .Floor (_aedc .ValueNumber ));};_ggbd :=_aedc .ValueNumber ;_ggbd ,_gcbcb :=_df .Modf (_ggbd /_begc );if _gcbcb !=0&&_aedc .ValueNumber < 0&&_eefd > 0{_ggbd ++;};return MakeNumberResult (_ggbd *_begc );};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_acbd :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_ddceb :=args [1].ValueNumber !=0;_bdebfg :=_bbcgg (args [2:],[]string {},_ddceb );return MakeStringResult (_cf .Join (_bdebfg ,_acbd ));};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_bgbfg :=len (args );if _bgbfg !=4&&_bgbfg !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_beb ,_baafa ,_gefbe :=_dfba (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _gefbe .Type ==ResultTypeError {return _gefbe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bgfed :=args [2].ValueNumber ;if _bgfed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_ceaa :=args [3].ValueNumber ;if _ceaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_ggbf :=0;if _bgbfg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggbf =int (args [4].ValueNumber );if !_ddcf (_ggbf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_fbe ,_gefbe :=_ffbd (_beb ,_baafa ,_ggbf );if _gefbe .Type ==ResultTypeError {return _gefbe ;};return MakeNumberResult (_ceaa *(1-_bgfed *_fbe ));};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};type Expression interface{Eval (_dcb Context ,_bef Evaluator )Result ;Reference (_ggd Context ,_egf Evaluator )Reference ;String ()string ;Update (_ggdc *_dd .UpdateQuery )Expression ;};var _afebc []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};const _dfagf =57349;var _ebbce =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agbf :=args [0].AsNumber ();if _agbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agbf .ValueNumber < 0{return MakeNumberResult (-1);}else if _agbf .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acea :=args [0].AsNumber ();if _acea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_df .Pi /180.0*_acea .ValueNumber );};func _eafbd (_cceb Result ,_aeeea ,_bacff string )(string ,Result ){switch _cceb .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _cceb .Value (),_fad ;default:return "",MakeErrorResult (_aeeea +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bacff +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func _afcaa (_dbbgd string )string {_dbbgd =_cf .Replace (_dbbgd ,"\u000a","\u005c\u006e",-1);_dbbgd =_cf .Replace (_dbbgd ,"\u000d","\u005c\u0072",-1);_dbbgd =_cf .Replace (_dbbgd ,"\u0009","\u005c\u0074",-1);return _dbbgd ;};func _bdcc (_dgfcc Result ,_ebad *criteriaParsed )bool {if _dgfcc .IsBoolean {return false ;};_afccd :=_dgfcc .Type ;if _ebad ._aegbfg {return _afccd ==ResultTypeNumber &&_dgfcc .ValueNumber ==_ebad ._baad ;}else if _afccd ==ResultTypeNumber {return _ccgc (_dgfcc .ValueNumber ,_ebad ._bcab );};return _ebef (_dgfcc ,_ebad );};func _eaff (_fda float64 )float64 {return float64 (int (_fda +0.5))};func _cc (_fc BinOpType ,_fbd []Result ,_geb Result )Result {_baf :=[]Result {};switch _geb .Type {case ResultTypeNumber :_bf :=_geb .ValueNumber ;for _gdd :=range _fbd {_ffc :=_fbd [_gdd ].AsNumber ();if _ffc .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fc {case BinOpTypePlus :_baf =append (_baf ,MakeNumberResult (_ffc .ValueNumber +_bf ));case BinOpTypeMinus :_baf =append (_baf ,MakeNumberResult (_ffc .ValueNumber -_bf ));case BinOpTypeMult :_baf =append (_baf ,MakeNumberResult (_ffc .ValueNumber *_bf ));case BinOpTypeDiv :if _bf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_baf =append (_baf ,MakeNumberResult (_ffc .ValueNumber /_bf ));case BinOpTypeExp :_baf =append (_baf ,MakeNumberResult (_df .Pow (_ffc .ValueNumber ,_bf )));case BinOpTypeLT :_baf =append (_baf ,MakeBoolResult (_ffc .ValueNumber < _bf ));case BinOpTypeGT :_baf =append (_baf ,MakeBoolResult (_ffc .ValueNumber > _bf ));case BinOpTypeEQ :_baf =append (_baf ,MakeBoolResult (_ffc .ValueNumber ==_bf ));case BinOpTypeLEQ :_baf =append (_baf ,MakeBoolResult (_ffc .ValueNumber <=_bf ));case BinOpTypeGEQ :_baf =append (_baf ,MakeBoolResult (_ffc .ValueNumber >=_bf ));case BinOpTypeNE :_baf =append (_baf ,MakeBoolResult (_ffc .ValueNumber !=_bf ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fc ));};};case ResultTypeString :_fab :=_geb .ValueString ;for _gcf :=range _fbd {_ae :=_fbd [_gcf ].AsString ();if _ae .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fc {case BinOpTypeLT :_baf =append (_baf ,MakeBoolResult (_ae .ValueString < _fab ));case BinOpTypeGT :_baf =append (_baf ,MakeBoolResult (_ae .ValueString > _fab ));case BinOpTypeEQ :_baf =append (_baf ,MakeBoolResult (_ae .ValueString ==_fab ));case BinOpTypeLEQ :_baf =append (_baf ,MakeBoolResult (_ae .ValueString <=_fab ));case BinOpTypeGEQ :_baf =append (_baf ,MakeBoolResult (_ae .ValueString >=_fab ));case BinOpTypeNE :_baf =append (_baf ,MakeBoolResult (_ae .ValueString !=_fab ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fc ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_baf );};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_cfbda :=len (args );if _cfbda < 3||_cfbda > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gafga :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbg :=args [1].ValueNumber ;if _dbg ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecbb :=args [2].ValueNumber ;_cfcf :=0.0;if _cfbda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfcf =args [3].ValueNumber ;};_ddbfb :=0.0;if _cfbda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddbfb =args [4].ValueNumber ;if _ddbfb !=0{_ddbfb =1;};};var _bdef float64 ;if _gafga ==0{_bdef =(_ecbb +_cfcf )/_dbg ;}else {_ggad :=_df .Pow (1+_gafga ,_dbg );if _ddbfb ==1{_bdef =(_cfcf *_gafga /(_ggad -1)+_ecbb *_gafga /(1-1/_ggad ))/(1+_gafga );}else {_bdef =_cfcf *_gafga /(_ggad -1)+_ecbb *_gafga /(1-1/_ggad );};};return MakeNumberResult (-_bdef );};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egcgb :=args [0].AsNumber ();if _egcgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_gcbc :=float64 (1);if _egcgb .ValueNumber < 0{_gcbc =-1;};if len (args )> 1{_fcaf :=args [1].AsNumber ();if _fcaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcbc =_fcaf .ValueNumber ;};_ddbg :=float64 (1);if len (args )> 2{_aecc :=args [2].AsNumber ();if _aecc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_ddbg =_aecc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_df .Ceil (_egcgb .ValueNumber ));};_faae :=_egcgb .ValueNumber ;_faae ,_cefa :=_df .Modf (_faae /_gcbc );if _cefa !=0{if _egcgb .ValueNumber > 0{_faae ++;}else if _ddbg < 0{_faae --;};};return MakeNumberResult (_faae *_gcbc );};

// String returns an empty string for EmptyExpr.
func (_ffe EmptyExpr )String ()string {return ""};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_begdf Expression ;_ebade Expression ;};

// Update returns the same object as updating sheet references does not affect Error.
func (_ffad Error )Update (q *_dd .UpdateQuery )Expression {return _ffad };func (_febdg PrefixHorizontalRange )horizontalRangeReference (_eaed string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_eaed ,_febdg ._gdeab ,_febdg ._adbgd );};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_cccg :=_cf .Split (v ,"\u003a");if len (_cccg )!=2{return nil ;};_bfdfe ,_ :=_ge .Atoi (_cccg [0]);_fbdbd ,_ :=_ge .Atoi (_cccg [1]);if _bfdfe > _fbdbd {_bfdfe ,_fbdbd =_fbdbd ,_bfdfe ;};return PrefixHorizontalRange {_cagb :pfx ,_gdeab :_bfdfe ,_adbgd :_fbdbd };};func _affd (_efcb ,_ebdc float64 )float64 {_efcb =_df .Trunc (_efcb );_ebdc =_df .Trunc (_ebdc );if _efcb ==0{return _ebdc ;};if _ebdc ==0{return _efcb ;};for _efcb !=_ebdc {if _efcb > _ebdc {_efcb =_efcb -_ebdc ;}else {_ebdc =_ebdc -_efcb ;};};return _efcb ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_ffg :=len (args );if _ffg < 3||_ffg > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfae :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agff :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eegc :=args [2].ValueNumber ;_febcg :=0.0;if _ffg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_febcg =args [3].ValueNumber ;};_cegb :=0.0;if _ffg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cegb =args [4].ValueNumber ;if _cegb !=0{_cegb =1;};};_egfc :=_agff *(1+_dfae *_cegb )-_febcg *_dfae ;_dceb :=(_eegc *_dfae +_agff *(1+_dfae *_cegb ));return MakeNumberResult (_df .Log (_egfc /_dceb )/_df .Log (1+_dfae ));};

// Eval evaluates the binary expression using the context given.
func (_ag BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_gc :=_ag ._fb .Eval (ctx ,ev );if _gc .Type ==ResultTypeError {return _gc ;};_ff :=_ag ._dae .Eval (ctx ,ev );if _ff .Type ==ResultTypeError {return _ff ;};if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeArray {if !_bc (_gc .ValueArray ,_ff .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _af (_ag ._fa ,_gc .ValueArray ,_ff .ValueArray );}else if _gc .Type ==ResultTypeList {if len (_gc .ValueList )!=len (_ff .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _cff (_ag ._fa ,_gc .ValueList ,_ff .ValueList );};}else if _gc .Type ==ResultTypeArray &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return _feg (_ag ._fa ,_gc .ValueArray ,_ff );}else if _gc .Type ==ResultTypeList &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return _cc (_ag ._fa ,_gc .ValueList ,_ff );};switch _ag ._fa {case BinOpTypePlus :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_gc .ValueNumber +_ff .ValueNumber );};};case BinOpTypeMinus :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_gc .ValueNumber -_ff .ValueNumber );};};case BinOpTypeMult :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_gc .ValueNumber *_ff .ValueNumber );};};case BinOpTypeDiv :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {if _ff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_gc .ValueNumber /_ff .ValueNumber );};};case BinOpTypeExp :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeNumberResult (_df .Pow (_gc .ValueNumber ,_ff .ValueNumber ));};};case BinOpTypeLT :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber < _ff .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString < _ff .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _gc .Type ==ResultTypeString &&_ff .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _gc .Type ==ResultTypeNumber &&_ff .Type ==ResultTypeString {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeEmpty &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_ff .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber > _ff .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString > _ff .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _gc .Type ==ResultTypeString &&_ff .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeNumber &&_ff .Type ==ResultTypeString {return MakeBoolResult (false );}else if _gc .Type ==ResultTypeEmpty &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_ff .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber ==_ff .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString ==_ff .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_gc .Type ==ResultTypeString &&_ff .Type ==ResultTypeNumber )||(_gc .Type ==ResultTypeNumber &&_ff .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _gc .Type ==ResultTypeEmpty &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return MakeBoolResult (_fd (_ff ));}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_ff .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_gc ));};case BinOpTypeNE :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber !=_ff .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString !=_ff .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_gc .Type ==ResultTypeString &&_ff .Type ==ResultTypeNumber )||(_gc .Type ==ResultTypeNumber &&_ff .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _gc .Type ==ResultTypeEmpty &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return MakeBoolResult (!_fd (_ff ));}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_ff .Type ==ResultTypeEmpty {return MakeBoolResult (!_fd (_gc ));};case BinOpTypeLEQ :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber <=_ff .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString <=_ff .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _gc .Type ==ResultTypeString &&_ff .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _gc .Type ==ResultTypeNumber &&_ff .Type ==ResultTypeString {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeEmpty &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return MakeBoolResult (_fd (_ff ));}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_ff .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_gc ));};case BinOpTypeGEQ :if _gc .Type ==_ff .Type {if _gc .Type ==ResultTypeNumber {return MakeBoolResult (_gc .ValueNumber >=_ff .ValueNumber );};if _gc .Type ==ResultTypeString {return MakeBoolResult (_gc .ValueString >=_ff .ValueString );};if _gc .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _gc .Type ==ResultTypeString &&_ff .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _gc .Type ==ResultTypeNumber &&_ff .Type ==ResultTypeString {return MakeBoolResult (false );}else if _gc .Type ==ResultTypeEmpty &&(_ff .Type ==ResultTypeNumber ||_ff .Type ==ResultTypeString ){return MakeBoolResult (_fd (_ff ));}else if (_gc .Type ==ResultTypeNumber ||_gc .Type ==ResultTypeString )&&_ff .Type ==ResultTypeEmpty {return MakeBoolResult (_fd (_gc ));};case BinOpTypeConcat :return MakeStringResult (_gc .Value ()+_ff .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};const (_ byte =iota ;_gdgcb ;_gdgdd ;_begfg ;_bffd ;_beef ;);

// Update updates the horizontal range references after removing a row/column.
func (_eebed HorizontalRange )Update (q *_dd .UpdateQuery )Expression {return _eebed };var _dbfce =[...]int {1};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_cffc :=len (args );if _cffc !=3&&_cffc !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_deeb ,_ffcd :=_eafbd (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _ffcd .Type ==ResultTypeError {return _ffcd ;};_cbeca ,_ffcd :=_eafbd (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _ffcd .Type ==ResultTypeError {return _ffcd ;};_agbea ,_ffcd :=_eafbd (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _ffcd .Type ==ResultTypeError {return _ffcd ;};_edgbg :=0;if _cffc ==3{return MakeStringResult (_cf .Replace (_deeb ,_cbeca ,_agbea ,-1));}else {_edea ,_ggee :=_febd (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _ggee .Type ==ResultTypeError {return _ggee ;};_edgbg =int (_edea );if _edgbg < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_bdbc :=_deeb ;_dcebc :=_edgbg ;_agdce :=-1;_daab :=len (_cbeca );_ffba :=0;for {_dcebc --;_befe :=_cf .Index (_bdbc ,_cbeca );if _befe ==-1{_agdce =-1;break ;}else {_agdce =_befe +_ffba ;if _dcebc ==0{break ;};_eced :=_daab +_befe ;_ffba +=_eced ;_bdbc =_bdbc [_eced :];};};if _agdce ==-1{return MakeStringResult (_deeb );}else {_cefe :=_deeb [:_agdce ];_cdga :=_deeb [_agdce +_daab :];return MakeStringResult (_cefe +_agbea +_cdga );};};};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func _fcca (_efde int )bool {return _efde ==0||_efde ==4};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_ddebf ,_cccd :=_fbbc ("\u0046\u0049\u004e\u0044",args );if _cccd .Type !=ResultTypeEmpty {return _cccd ;};_fdded :=_ddebf ._faeg ;if _fdded ==""{return MakeNumberResult (1.0);};_fgdca :=_ddebf ._efgff ;_bgge :=_ddebf ._abdbe ;_gddf :=1;for _cdaf :=range _fgdca {if _gddf < _bgge {_gddf ++;continue ;};_caaba :=_cf .Index (_fgdca [_cdaf :],_fdded );if _caaba ==0{return MakeNumberResult (float64 (_gddf ));};_gddf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};var _fddd =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };const _dbag =1;func (_fabe *Lexer )lex (_ecge _eg .Reader ){_efbcf ,_caaef ,_egbda :=0,0,0;_ceggf :=-1;_dcdfc ,_bacb ,_bfdcb :=0,0,0;_ =_bfdcb ;_bcfca :=1;_ =_bcfca ;_fdfgf :=make ([]byte ,4096);_gacbb :=false ;for !_gacbb {_gadfg :=0;if _dcdfc > 0{_gadfg =_caaef -_dcdfc ;};_caaef =0;_cafc ,_cgbaf :=_ecge .Read (_fdfgf [_gadfg :]);if _cafc ==0||_cgbaf !=nil {_gacbb =true ;};_egbda =_cafc +_gadfg ;if _egbda < len (_fdfgf ){_ceggf =_egbda ;};{_efbcf =_fdggc ;_dcdfc =0;_bacb =0;_bfdcb =0;};{var _bebc int ;var _beea uint ;if _caaef ==_egbda {goto _agfcd ;};if _efbcf ==0{goto _dbfa ;};_gcedd :_bebc =int (_cccbd [_efbcf ]);_beea =uint (_afebc [_bebc ]);_bebc ++;for ;_beea > 0;_beea --{_bebc ++;switch _afebc [_bebc -1]{case 2:_dcdfc =_caaef ;};};switch _efbcf {case 30:switch _fdfgf [_caaef ]{case 34:goto _fdfef ;case 35:goto _aeeb ;case 36:goto _bfeac ;case 38:goto _gceg ;case 39:goto _baceb ;case 40:goto _aacdc ;case 41:goto _daeg ;case 42:goto _ffbdf ;case 43:goto _gbba ;case 44:goto _gggd ;case 45:goto _bffef ;case 47:goto _gfage ;case 58:goto _edad ;case 59:goto _gadca ;case 60:goto _cbcg ;case 61:goto _eeda ;case 62:goto _fafeb ;case 63:goto _efee ;case 70:goto _gegddg ;case 84:goto _ebeg ;case 92:goto _deeac ;case 94:goto _fbeb ;case 95:goto _aggf ;case 123:goto _gbdff ;case 125:goto _fbebf ;};switch {case _fdfgf [_caaef ]< 65:switch {case _fdfgf [_caaef ]> 37:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _egbff ;};case _fdfgf [_caaef ]>=33:goto _efee ;};case _fdfgf [_caaef ]> 90:switch {case _fdfgf [_caaef ]> 93:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _fgfeg ;};case _fdfgf [_caaef ]>=91:goto _efee ;};default:goto _fefge ;};goto _bcbc ;case 1:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _cfdf ;case 123:goto _cfdf ;case 125:goto _cfdf ;};switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _cfdf ;};case _fdfgf [_caaef ]> 45:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _cfdf ;};case _fdfgf [_caaef ]>=58:goto _cfdf ;};default:goto _cfdf ;};goto _bcbc ;case 0:goto _dbfa ;case 2:if _fdfgf [_caaef ]==34{goto _egec ;};goto _fdfef ;case 31:if _fdfgf [_caaef ]==34{goto _fdfef ;};goto _bfaf ;case 3:switch _fdfgf [_caaef ]{case 78:goto _geab ;case 82:goto _ccfe ;};goto _efee ;case 4:switch _fdfgf [_caaef ]{case 47:goto _bbbcb ;case 85:goto _ffcec ;};goto _efee ;case 5:if _fdfgf [_caaef ]==65{goto _efgfg ;};goto _efee ;case 6:switch _fdfgf [_caaef ]{case 76:goto _bdcbd ;case 77:goto _aagdg ;};goto _efee ;case 7:if _fdfgf [_caaef ]==76{goto _aagdg ;};goto _efee ;case 8:if _fdfgf [_caaef ]==33{goto _efgfg ;};goto _efee ;case 9:if _fdfgf [_caaef ]==69{goto _cccf ;};goto _efee ;case 10:if _fdfgf [_caaef ]==70{goto _afdg ;};goto _efee ;case 11:if _fdfgf [_caaef ]==33{goto _adbf ;};goto _efee ;case 12:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _efee ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=45{goto _efee ;};case _fdfgf [_caaef ]>=34:goto _efee ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]< 65:if 58<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=63{goto _efee ;};case _fdfgf [_caaef ]> 90:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _efee ;};default:goto _abfe ;};default:goto _afcff ;};goto _bcbc ;case 13:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _efee ;case 58:goto _ggbae ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=45{goto _efee ;};case _fdfgf [_caaef ]>=34:goto _efee ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _efee ;};case _fdfgf [_caaef ]>=59:goto _efee ;};default:goto _afcff ;};goto _bcbc ;case 14:if _fdfgf [_caaef ]==36{goto _faffd ;};if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _ffafa ;};goto _cfdf ;case 15:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _ffafa ;};goto _cfdf ;case 32:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _ffafa ;};goto _dfdaa ;case 16:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 47:goto _efee ;case 58:goto _ebed ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 45:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _fcdec ;};case _fdfgf [_caaef ]>=34:goto _efee ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]> 90:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _efee ;};case _fdfgf [_caaef ]>=65:goto _abfe ;};default:goto _efee ;};goto _bcbc ;case 17:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _cfdf ;case 123:goto _cfdf ;case 125:goto _cfdf ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=45{goto _cfdf ;};case _fdfgf [_caaef ]>=34:goto _cfdf ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _cfdf ;};case _fdfgf [_caaef ]>=58:goto _cfdf ;};default:goto _fcdec ;};goto _bcbc ;case 33:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _adfag ;case 123:goto _adfag ;case 125:goto _adfag ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=45{goto _adfag ;};case _fdfgf [_caaef ]>=34:goto _adfag ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _adfag ;};case _fdfgf [_caaef ]>=58:goto _adfag ;};default:goto _fcdec ;};goto _bcbc ;case 18:if _fdfgf [_caaef ]==36{goto _afacf ;};if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _fgcab ;};goto _cfdf ;case 19:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _fgcab ;};goto _cfdf ;case 34:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _fgcab ;};goto _bfdbba ;case 20:switch _fdfgf [_caaef ]{case 39:goto _efee ;case 42:goto _efee ;case 47:goto _efee ;case 58:goto _efee ;case 63:goto _efee ;};if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=93{goto _efee ;};goto _fdeea ;case 21:switch _fdfgf [_caaef ]{case 39:goto _facc ;case 42:goto _efee ;case 47:goto _efee ;case 58:goto _efee ;case 63:goto _efee ;};if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=93{goto _efee ;};goto _fdeea ;case 22:if _fdfgf [_caaef ]==33{goto _edfd ;};goto _efee ;case 35:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _gdgac ;case 58:goto _ggbae ;case 101:goto _fbdbc ;case 123:goto _ffbfd ;case 125:goto _ffbfd ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=47{goto _ffbfd ;};case _fdfgf [_caaef ]>=34:goto _ffbfd ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _ffbfd ;};case _fdfgf [_caaef ]>=59:goto _ffbfd ;};default:goto _egbff ;};goto _bcbc ;case 36:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _ffbfd ;case 101:goto _fbdbc ;case 123:goto _ffbfd ;case 125:goto _ffbfd ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=45{goto _ffbfd ;};case _fdfgf [_caaef ]>=34:goto _ffbfd ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _ffbfd ;};case _fdfgf [_caaef ]>=58:goto _ffbfd ;};default:goto _gdgac ;};goto _bcbc ;case 23:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _bfdfa ;case 123:goto _bfdfa ;case 125:goto _bfdfa ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=45{goto _bfdfa ;};case _fdfgf [_caaef ]>=34:goto _bfdfa ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _bfdfa ;};case _fdfgf [_caaef ]>=58:goto _bfdfa ;};default:goto _cabdd ;};goto _bcbc ;case 37:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 47:goto _ffbfd ;case 123:goto _ffbfd ;case 125:goto _ffbfd ;};switch {case _fdfgf [_caaef ]< 48:switch {case _fdfgf [_caaef ]> 35:if 37<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=45{goto _ffbfd ;};case _fdfgf [_caaef ]>=34:goto _ffbfd ;};case _fdfgf [_caaef ]> 57:switch {case _fdfgf [_caaef ]> 63:if 91<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=94{goto _ffbfd ;};case _fdfgf [_caaef ]>=58:goto _ffbfd ;};default:goto _cabdd ;};goto _bcbc ;case 38:switch _fdfgf [_caaef ]{case 61:goto _cbcfg ;case 62:goto _fgaa ;};goto _eagdd ;case 39:if _fdfgf [_caaef ]==61{goto _ffcbc ;};goto _bbed ;case 24:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _efee ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _efee ;};default:goto _efee ;};goto _bcbc ;case 40:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 40:goto _geacd ;case 46:goto _adgaa ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _adgaa ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _adgaa ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 41:switch _fdfgf [_caaef ]{case 46:goto _agced ;case 92:goto _agced ;case 95:goto _agced ;};switch {case _fdfgf [_caaef ]< 65:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _agced ;};case _fdfgf [_caaef ]> 90:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _agced ;};default:goto _agced ;};goto _bccg ;case 42:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 43:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 40:goto _geacd ;case 46:goto _adgaa ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _adfag ;case 125:goto _adfag ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _adfag ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};default:goto _adfag ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _adgaa ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _adfag ;};default:goto _adfag ;};goto _bcbc ;case 44:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _cfdf ;case 125:goto _cfdf ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _cfdf ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _cfdf ;};default:goto _cfdf ;};goto _bcbc ;case 25:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 65:goto _dfbcd ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _efee ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 66<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _efee ;};default:goto _efee ;};goto _bcbc ;case 45:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 76:goto _dedab ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 46:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 83:goto _dabcfe ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 47:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 69:goto _fbfe ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 26:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 79:goto _edde ;case 82:goto _efefe ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _efee ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _efee ;};default:goto _efee ;};goto _bcbc ;case 48:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 68:goto _fcgab ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 49:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 79:goto _bggb ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 50:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 36:goto _gaeg ;case 40:goto _geacd ;case 46:goto _adgaa ;case 58:goto _ebed ;case 85:goto _dabcfe ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 59:switch {case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _bfff ;};case _fdfgf [_caaef ]>=34:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _aggb ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 27:switch _fdfgf [_caaef ]{case 46:goto _agced ;case 92:goto _agced ;case 95:goto _agced ;};switch {case _fdfgf [_caaef ]< 65:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _agced ;};case _fdfgf [_caaef ]> 90:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _agced ;};default:goto _agced ;};goto _efee ;case 28:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _dedc ;case 120:goto _acbb ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _efee ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _efee ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _efee ;};default:goto _efee ;};goto _bcbc ;case 51:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _dedc ;case 108:goto _gged ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 52:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _dedc ;case 102:goto _gbab ;case 110:goto _eagef ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 53:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _dedc ;case 110:goto _gdadb ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 54:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _faga ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 55:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _ecad ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _ecad ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 56:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 40:goto _bdbbe ;case 46:goto _ecad ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _ecad ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _ecad ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 57:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _dedc ;case 109:goto _aacfg ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 58:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _gaceg ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _bccg ;case 125:goto _bccg ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _bccg ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _bccg ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _bccg ;};default:goto _bccg ;};goto _bcbc ;case 59:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _gfgg ;case 123:goto _cfdf ;case 125:goto _cfdf ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _cfdf ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _cfdf ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _gfgg ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _cfdf ;};default:goto _cfdf ;};goto _bcbc ;case 29:switch _fdfgf [_caaef ]{case 33:goto _dgded ;case 46:goto _dedc ;case 92:goto _agced ;case 95:goto _dedc ;case 123:goto _efee ;case 125:goto _efee ;};switch {case _fdfgf [_caaef ]< 58:switch {case _fdfgf [_caaef ]< 37:if 34<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=35{goto _efee ;};case _fdfgf [_caaef ]> 47:if 48<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=57{goto _dedc ;};default:goto _efee ;};case _fdfgf [_caaef ]> 63:switch {case _fdfgf [_caaef ]< 91:if 65<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=90{goto _dedc ;};case _fdfgf [_caaef ]> 94:if 97<=_fdfgf [_caaef ]&&_fdfgf [_caaef ]<=122{goto _dedc ;};default:goto _efee ;};default:goto _efee ;};goto _bcbc ;};_efee :_efbcf =0;goto _bacg ;_bcbc :_efbcf =1;goto _bacg ;_fdfef :_efbcf =2;goto _bacg ;_aeeb :_efbcf =3;goto _bacg ;_geab :_efbcf =4;goto _bacg ;_bbbcb :_efbcf =5;goto _bacg ;_ffcec :_efbcf =6;goto _bacg ;_bdcbd :_efbcf =7;goto _bacg ;_aagdg :_efbcf =8;goto _bacg ;_ccfe :_efbcf =9;goto _bacg ;_cccf :_efbcf =10;goto _bacg ;_afdg :_efbcf =11;goto _bacg ;_bfeac :_efbcf =12;goto _bacg ;_afcff :_efbcf =13;goto _bacg ;_ggbae :_efbcf =14;goto _bacg ;_faffd :_efbcf =15;goto _bacg ;_abfe :_efbcf =16;goto _bacg ;_gaeg :_efbcf =17;goto _bacg ;_ebed :_efbcf =18;goto _bacg ;_afacf :_efbcf =19;goto _bacg ;_baceb :_efbcf =20;goto _bacg ;_fdeea :_efbcf =21;goto _bacg ;_facc :_efbcf =22;goto _bacg ;_fbdbc :_efbcf =23;goto _bacg ;_fefge :_efbcf =24;goto _bacg ;_gegddg :_efbcf =25;goto _bacg ;_ebeg :_efbcf =26;goto _bacg ;_deeac :_efbcf =27;goto _bacg ;_aggf :_efbcf =28;goto _bacg ;_fgfeg :_efbcf =29;goto _bacg ;_cfdf :_efbcf =30;goto _fdega ;_dgded :_efbcf =30;goto _cfbg ;_efgfg :_efbcf =30;goto _ggfd ;_adbf :_efbcf =30;goto _bbfc ;_edfd :_efbcf =30;goto _ecedb ;_bfdfa :_efbcf =30;goto _ebbff ;_geacd :_efbcf =30;goto _dafaf ;_gceg :_efbcf =30;goto _cbgca ;_aacdc :_efbcf =30;goto _befg ;_daeg :_efbcf =30;goto _gdced ;_ffbdf :_efbcf =30;goto _dgabe ;_gbba :_efbcf =30;goto _faafc ;_gggd :_efbcf =30;goto _gcfdd ;_bffef :_efbcf =30;goto _aabe ;_gfage :_efbcf =30;goto _gcaa ;_edad :_efbcf =30;goto _gaacg ;_gadca :_efbcf =30;goto _eeae ;_eeda :_efbcf =30;goto _cgfge ;_fbeb :_efbcf =30;goto _dgcd ;_gbdff :_efbcf =30;goto _dgffg ;_fbebf :_efbcf =30;goto _ffaaf ;_bfaf :_efbcf =30;goto _begbc ;_dfdaa :_efbcf =30;goto _gfee ;_adfag :_efbcf =30;goto _efge ;_bfdbba :_efbcf =30;goto _gabc ;_ffbfd :_efbcf =30;goto _cegdd ;_eagdd :_efbcf =30;goto _eeccce ;_cbcfg :_efbcf =30;goto _ggfbd ;_fgaa :_efbcf =30;goto _dceaa ;_bbed :_efbcf =30;goto _dbfd ;_ffcbc :_efbcf =30;goto _babbf ;_bccg :_efbcf =30;goto _ddaeg ;_bdbbe :_efbcf =30;goto _befb ;_egec :_efbcf =31;goto _abga ;_ffafa :_efbcf =32;goto _bacg ;_fcdec :_efbcf =33;goto _dade ;_fgcab :_efbcf =34;goto _bacg ;_egbff :_efbcf =35;goto _cafe ;_gdgac :_efbcf =36;goto _cafe ;_cabdd :_efbcf =37;goto _cafe ;_cbcg :_efbcf =38;goto _bacg ;_fafeb :_efbcf =39;goto _bacg ;_adgaa :_efbcf =40;goto _acfgf ;_agced :_efbcf =41;goto _bacg ;_dedc :_efbcf =42;goto _acfgf ;_bfff :_efbcf =43;goto _dade ;_aggb :_efbcf =44;goto _acfgf ;_fbfe :_efbcf =44;goto _addf ;_bggb :_efbcf =44;goto _gabee ;_dfbcd :_efbcf =45;goto _acfgf ;_dedab :_efbcf =46;goto _acfgf ;_dabcfe :_efbcf =47;goto _acfgf ;_edde :_efbcf =48;goto _acfgf ;_fcgab :_efbcf =49;goto _acfgf ;_efefe :_efbcf =50;goto _acfgf ;_acbb :_efbcf =51;goto _acfgf ;_gged :_efbcf =52;goto _acfgf ;_gbab :_efbcf =53;goto _acfgf ;_gdadb :_efbcf =54;goto _acfgf ;_faga :_efbcf =55;goto _acfgf ;_ecad :_efbcf =56;goto _acfgf ;_eagef :_efbcf =57;goto _acfgf ;_aacfg :_efbcf =58;goto _acfgf ;_gaceg :_efbcf =59;goto _acfgf ;_gfgg :_efbcf =59;goto _aecfb ;_ggfd :_bebc =3;goto _abae ;_bbfc :_bebc =5;goto _abae ;_cfbg :_bebc =7;goto _abae ;_ecedb :_bebc =9;goto _abae ;_dafaf :_bebc =11;goto _abae ;_befb :_bebc =13;goto _abae ;_cbgca :_bebc =15;goto _abae ;_dgffg :_bebc =17;goto _abae ;_ffaaf :_bebc =19;goto _abae ;_befg :_bebc =21;goto _abae ;_gdced :_bebc =23;goto _abae ;_faafc :_bebc =25;goto _abae ;_aabe :_bebc =27;goto _abae ;_dgabe :_bebc =29;goto _abae ;_gcaa :_bebc =31;goto _abae ;_dgcd :_bebc =33;goto _abae ;_cgfge :_bebc =35;goto _abae ;_ggfbd :_bebc =37;goto _abae ;_babbf :_bebc =39;goto _abae ;_dceaa :_bebc =41;goto _abae ;_gaacg :_bebc =43;goto _abae ;_eeae :_bebc =45;goto _abae ;_gcfdd :_bebc =47;goto _abae ;_cegdd :_bebc =49;goto _abae ;_efge :_bebc =51;goto _abae ;_gfee :_bebc =53;goto _abae ;_gabc :_bebc =55;goto _abae ;_ddaeg :_bebc =57;goto _abae ;_begbc :_bebc =59;goto _abae ;_eeccce :_bebc =61;goto _abae ;_dbfd :_bebc =63;goto _abae ;_ebbff :_bebc =65;goto _abae ;_fdega :_bebc =67;goto _abae ;_addf :_bebc =72;goto _abae ;_cafe :_bebc =75;goto _abae ;_dade :_bebc =78;goto _abae ;_gabee :_bebc =81;goto _abae ;_aecfb :_bebc =84;goto _abae ;_acfgf :_bebc =87;goto _abae ;_abga :_bebc =90;goto _abae ;_abae :_beea =uint (_afebc [_bebc ]);_bebc ++;for ;_beea > 0;_beea --{_bebc ++;switch _afebc [_bebc -1]{case 3:_bacb =_caaef +1;case 4:_bfdcb =1;case 5:_bfdcb =2;case 6:_bfdcb =3;case 7:_bfdcb =4;case 8:_bfdcb =11;case 9:_bfdcb =14;case 10:_bfdcb =15;case 11:_bacb =_caaef +1;{_fabe .emit (_fagf ,_fdfgf [_dcdfc :_bacb ]);};case 12:_bacb =_caaef +1;{_fabe .emit (_edfe ,_fdfgf [_dcdfc :_bacb ]);};case 13:_bacb =_caaef +1;{_fabe .emit (_eddcb ,_fdfgf [_dcdfc :_bacb -1]);};case 14:_bacb =_caaef +1;{_fabe .emit (_eddcb ,_fdfgf [_dcdfc +1:_bacb -2]);};case 15:_bacb =_caaef +1;{_fabe .emit (_afae ,_fdfgf [_dcdfc :_bacb -1]);};case 16:_bacb =_caaef +1;{_fabe .emit (_afae ,_fdfgf [_dcdfc :_bacb -1]);};case 17:_bacb =_caaef +1;{_fabe .emit (_bbegg ,_fdfgf [_dcdfc :_bacb ]);};case 18:_bacb =_caaef +1;{_fabe .emit (_ffde ,_fdfgf [_dcdfc :_bacb ]);};case 19:_bacb =_caaef +1;{_fabe .emit (_edbc ,_fdfgf [_dcdfc :_bacb ]);};case 20:_bacb =_caaef +1;{_fabe .emit (_abdcg ,_fdfgf [_dcdfc :_bacb ]);};case 21:_bacb =_caaef +1;{_fabe .emit (_affg ,_fdfgf [_dcdfc :_bacb ]);};case 22:_bacb =_caaef +1;{_fabe .emit (_gaff ,_fdfgf [_dcdfc :_bacb ]);};case 23:_bacb =_caaef +1;{_fabe .emit (_daefe ,_fdfgf [_dcdfc :_bacb ]);};case 24:_bacb =_caaef +1;{_fabe .emit (_gedfc ,_fdfgf [_dcdfc :_bacb ]);};case 25:_bacb =_caaef +1;{_fabe .emit (_begfc ,_fdfgf [_dcdfc :_bacb ]);};case 26:_bacb =_caaef +1;{_fabe .emit (_gdbga ,_fdfgf [_dcdfc :_bacb ]);};case 27:_bacb =_caaef +1;{_fabe .emit (_aaace ,_fdfgf [_dcdfc :_bacb ]);};case 28:_bacb =_caaef +1;{_fabe .emit (_ebgb ,_fdfgf [_dcdfc :_bacb ]);};case 29:_bacb =_caaef +1;{_fabe .emit (_cdab ,_fdfgf [_dcdfc :_bacb ]);};case 30:_bacb =_caaef +1;{_fabe .emit (_eacf ,_fdfgf [_dcdfc :_bacb ]);};case 31:_bacb =_caaef +1;{_fabe .emit (_gaaba ,_fdfgf [_dcdfc :_bacb ]);};case 32:_bacb =_caaef +1;{_fabe .emit (_adaab ,_fdfgf [_dcdfc :_bacb ]);};case 33:_bacb =_caaef +1;{_fabe .emit (_cddbf ,_fdfgf [_dcdfc :_bacb ]);};case 34:_bacb =_caaef ;_caaef --;{_fabe .emit (_dbba ,_fdfgf [_dcdfc :_bacb ]);};case 35:_bacb =_caaef ;_caaef --;{_fabe .emit (_gcgbc ,_fdfgf [_dcdfc :_bacb ]);};case 36:_bacb =_caaef ;_caaef --;{_fabe .emit (_eabee ,_fdfgf [_dcdfc :_bacb ]);};case 37:_bacb =_caaef ;_caaef --;{_fabe .emit (_agaec ,_fdfgf [_dcdfc :_bacb ]);};case 38:_bacb =_caaef ;_caaef --;{_fabe .emit (_cfebb ,_fdfgf [_dcdfc :_bacb ]);};case 39:_bacb =_caaef ;_caaef --;{_fabe .emit (_efac ,_fdfgf [_dcdfc +1:_bacb -1]);};case 40:_bacb =_caaef ;_caaef --;{_fabe .emit (_febg ,_fdfgf [_dcdfc :_bacb ]);};case 41:_bacb =_caaef ;_caaef --;{_fabe .emit (_efgg ,_fdfgf [_dcdfc :_bacb ]);};case 42:_caaef =(_bacb )-1;{_fabe .emit (_dbba ,_fdfgf [_dcdfc :_bacb ]);};case 43:switch _bfdcb {case 0:{_efbcf =0;goto _bacg ;};case 1:{_caaef =(_bacb )-1;_fabe .emit (_bfage ,_fdfgf [_dcdfc :_bacb ]);};case 2:{_caaef =(_bacb )-1;_fabe .emit (_dbba ,_fdfgf [_dcdfc :_bacb ]);};case 3:{_caaef =(_bacb )-1;_fabe .emit (_gcgbc ,_fdfgf [_dcdfc :_bacb ]);};case 4:{_caaef =(_bacb )-1;_fabe .emit (_dfagf ,_fdfgf [_dcdfc :_bacb ]);};case 11:{_caaef =(_bacb )-1;_fabe .emit (_fcbg ,_fdfgf [_dcdfc :_bacb ]);};case 14:{_caaef =(_bacb )-1;_fabe .emit (_cfebb ,_fdfgf [_dcdfc :_bacb ]);};case 15:{_caaef =(_bacb )-1;_fabe .emit (_efac ,_fdfgf [_dcdfc +1:_bacb -1]);};};};};goto _bacg ;_bacg :_bebc =int (_affe [_efbcf ]);_beea =uint (_afebc [_bebc ]);_bebc ++;for ;_beea > 0;_beea --{_bebc ++;switch _afebc [_bebc -1]{case 0:_dcdfc =0;case 1:_bfdcb =0;};};if _efbcf ==0{goto _dbfa ;};if _caaef ++;_caaef !=_egbda {goto _gcedd ;};_agfcd :{};if _caaef ==_ceggf {switch _efbcf {case 1:goto _cfdf ;case 2:goto _cfdf ;case 31:goto _bfaf ;case 14:goto _cfdf ;case 15:goto _cfdf ;case 32:goto _dfdaa ;case 17:goto _cfdf ;case 33:goto _adfag ;case 18:goto _cfdf ;case 19:goto _cfdf ;case 34:goto _bfdbba ;case 35:goto _ffbfd ;case 36:goto _ffbfd ;case 23:goto _bfdfa ;case 37:goto _ffbfd ;case 38:goto _eagdd ;case 39:goto _bbed ;case 40:goto _bccg ;case 41:goto _bccg ;case 42:goto _bccg ;case 43:goto _adfag ;case 44:goto _cfdf ;case 45:goto _bccg ;case 46:goto _bccg ;case 47:goto _bccg ;case 48:goto _bccg ;case 49:goto _bccg ;case 50:goto _bccg ;case 51:goto _bccg ;case 52:goto _bccg ;case 53:goto _bccg ;case 54:goto _bccg ;case 55:goto _bccg ;case 56:goto _bccg ;case 57:goto _bccg ;case 58:goto _bccg ;case 59:goto _cfdf ;};};_dbfa :{};};if _dcdfc > 0{copy (_fdfgf [0:],_fdfgf [_dcdfc :]);};};_ =_ceggf ;if _efbcf ==_begdc {_fabe .emit (_cdbgc ,nil );};close (_fabe ._fgadf );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _bffb (args ,_ebc )};func _gcad (_eafa ,_eeeg ,_dcge ,_bdebf ,_dedbc float64 )float64 {var _decc float64 ;_eaagb :=_dedbc /_dcge ;if _eaagb >=1{_eaagb =1;if _bdebf ==1{_decc =_eafa ;}else {_decc =0;};}else {_decc =_eafa *_df .Pow (1-_eaagb ,_bdebf -1);};_abccf :=_eafa *_df .Pow (1-_eaagb ,_bdebf );var _aabb float64 ;if _abccf < _eeeg {_aabb =_decc -_eeeg ;}else {_aabb =_decc -_abccf ;};if _aabb < 0{_aabb =0;};return _aabb ;};const _gcgbc =57358;

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_gdedg :=_cf .Split (v ,"\u003a");if len (_gdedg )!=2{return nil ;};if _gdedg [0]> _gdedg [1]{_gdedg [0],_gdedg [1]=_gdedg [1],_gdedg [0];};return VerticalRange {_bdceb :_gdedg [0],_aeae :_gdedg [1]};};func _dgd (_ddb string ,_ec *_dd .UpdateQuery )string {_be ,_eaa :=_fg .ParseCellReference (_ddb );if _eaa !=nil {return "\u0023\u0052\u0045F\u0021";};if _ec .UpdateType ==_dd .UpdateActionRemoveColumn {_ga :=_ec .ColumnIdx ;_bdab :=_be .ColumnIdx ;if _bdab < _ga {return _ddb ;}else if _bdab ==_ga {return "\u0023\u0052\u0045F\u0021";}else {return _be .Update (_dd .UpdateActionRemoveColumn ).String ();};};return _ddb ;};func _fdfde (_cefg Result )[]Result {_gaed :=_cefg .ValueList ;if _cefg .Type ==ResultTypeArray {_gaed =nil ;for _ ,_fdgc :=range _cefg .ValueArray {if len (_fdgc )> 0{_gaed =append (_gaed ,_fdgc [0]);}else {_gaed =append (_gaed ,_fad );};};};return _gaed ;};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_cecd ,_bbaf :=_ffee (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _bbaf .Type ==ResultTypeError {return _bbaf ;};_adad :=_cecd ._gbb ;_dbdgg :=_cecd ._fgea ;_bcda :=_cecd ._fcd ;_fefb :=_cecd ._bec ;_aafc :=_cecd ._fdbf ;_fegc :=_cecd ._ceff ;_gafa :=_bgff (_adad ,_dbdgg ,_bcda ,_fefb ,_aafc ,_fegc );if _gafa .Type ==ResultTypeError {return _gafa ;};_egcb :=_gafa .ValueNumber /(1.0+_fefb /_aafc );return MakeNumberResult (_egcb );};var _gdc =[]*_b .Regexp {};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_geca :=args [0].AsString ();if _geca .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_geca .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_geca .ValueString [0]));};const _gaff =57364;

// Reference returns a string reference value to a named range.
func (_cegdb NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_cegdb ._fdbaa };};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efdb :=args [0];if _efdb .Type !=ResultTypeArray &&_efdb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aggde :=_aadc (_efdb );_ecde :=args [2];if _ecde .Type !=ResultTypeArray &&_ecde .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ceefd :=_aadc (_ecde );_ebfc :=_gbfbf (args [1]);_eeea :=0.0;for _gabde ,_bgaa :=range _aggde {for _gdbd ,_aagc :=range _bgaa {if _bdcc (_aagc ,_ebfc ){_eeea +=_ceefd [_gabde ][_gdbd ].ValueNumber ;};};};return MakeNumberResult (_eeea );};const _cdf ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_dgagb ,_dbce ,_abdec :=_dgg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _abdec .Type ==ResultTypeError {return _abdec ;};if _dbce < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _dgagb ==0{return MakeNumberResult (0);};_fbfg :=_dgagb < 0;if _fbfg {_dgagb =-_dgagb ;};_cdad :=args [0].Value ();_dgffc :=_cf .Split (_cdad ,"\u002e");_caae :=float64 (int (_dgagb ));_gaag :=_dgffc [1];_bbaba :=len (_gaag );_bfdf :=int (_df .Log10 (_dbce ))+1;_cgbcd :=float64 (_bfdf -_bbaba );_dgaeg ,_efaba :=_ge .ParseFloat (_gaag ,64);if _efaba !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_dgaeg *=_df .Pow (10,_cgbcd );_bedb :=_caae +_dgaeg /_dbce ;if _fbfg {_bedb =-_bedb ;};return MakeNumberResult (_bedb );};

// Number is a nubmer expression.
type Number struct{_caegb float64 };var _ggcfd =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};func _ccce (_gefb ,_dcgfc []float64 ,_bbeg float64 )float64 {_febc :=_bbeg +1;_eccb :=_gefb [0];_aecg :=len (_gefb );_geed :=_dcgfc [0];for _cbga :=1;_cbga < _aecg ;_cbga ++{_eccb +=_gefb [_cbga ]/_df .Pow (_febc ,(_dcgfc [_cbga ]-_geed )/365);};return _eccb ;};var _gcg =map[string ]*_b .Regexp {};func _bbabae (_dbbde string ,_bbgb func (_aabbf float64 )float64 )Function {return func (_fbfc []Result )Result {if len (_fbfc )!=1{return MakeErrorResult (_dbbde +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ebee :=_fbfc [0].AsNumber ();switch _ebee .Type {case ResultTypeNumber :_fdadg :=_bbgb (_ebee .ValueNumber );if _df .IsNaN (_fdadg ){return MakeErrorResult (_dbbde +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _df .IsInf (_fdadg ,0){return MakeErrorResult (_dbbde +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fdadg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_dbbde +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fdadg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_dbbde +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _ebee ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbbde ,_ebee .Type ));};};};func _ebaee (_fffgc string ,_cabd []Result )(*parsedReplaceObject ,Result ){if len (_cabd )!=4{return nil ,MakeErrorResult (_fffgc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _cabd [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_fffgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dcea :=_cabd [0].ValueString ;if _cabd [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fffgc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_ggdce :=int (_cabd [1].ValueNumber )-1;if _cabd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fffgc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ebbcc :=int (_cabd [2].ValueNumber );if _cabd [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_fffgc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_dcaa :=_cabd [3].ValueString ;return &parsedReplaceObject {_dcea ,_ggdce ,_ebbcc ,_dcaa },_fad ;};

// String returns a string representation of a horizontal range with prefix.
func (_dagg PrefixHorizontalRange )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_dagg ._cagb .String (),_dagg ._gdeab ,_dagg ._adbgd );};

// Reference returns an invalid reference for FunctionCall.
func (_dfdb FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _ebfee =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _bffb (args ,_aecbe )};

// Reference returns an invalid reference for EmptyExpr.
func (_cgb EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};const _ffde =57360;

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _bfcg (args ,true )};func (_bdea *yyParserImpl )Lookahead ()int {return _bdea ._gbde };

// Eval evaluates and returns an expression with prefix.
func (_defgc PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_acfe :=_defgc ._begdf .Reference (ctx ,ev );switch _acfe .Type {case ReferenceTypeSheet :if _ccgef (_acfe ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_acfe .Value ));};_debfe :=ctx .Sheet (_acfe .Value );return _defgc ._ebade .Eval (_debfe ,ev );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_acfe .Type ));};};var _fbac =false ;

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _agbb ,_fgc float64 ;switch args [0].Type {case ResultTypeNumber :_fgc =args [0].ValueNumber ;case ResultTypeString :_fee :=DateValue ([]Result {args [0]});if _fee .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_fgc =_fee .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_agbb =args [1].ValueNumber ;if _agbb < 62&&_fgc >=62{_agbb --;};case ResultTypeString :_bad :=DateValue ([]Result {args [1]});if _bad .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_agbb =_bad .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_acd :=float64 (int (_fgc -_agbb ));return MakeNumberResult (_acd );};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_eddcg ,_ccagd ,_eaadb :=_ffcfe (from ,to );if _eaadb !=nil {_gbf .Log .Debug (_eaadb .Error ());return NewError (_eaadb .Error ());};return PrefixRangeExpr {_gdbcc :pfx ,_dfge :_eddcg ,_bcefd :_ccagd };};

// Reference returns an invalid reference for BinaryExpr.
func (_gf BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _cff (_bcd BinOpType ,_eb ,_dc []Result )Result {_fff :=[]Result {};for _fga :=range _eb {_bda :=_eb [_fga ].AsNumber ();_gee :=_dc [_fga ].AsNumber ();if _bda .Type !=ResultTypeNumber ||_gee .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _bcd {case BinOpTypePlus :_fff =append (_fff ,MakeNumberResult (_bda .ValueNumber +_gee .ValueNumber ));case BinOpTypeMinus :_fff =append (_fff ,MakeNumberResult (_bda .ValueNumber -_gee .ValueNumber ));case BinOpTypeMult :_fff =append (_fff ,MakeNumberResult (_bda .ValueNumber *_gee .ValueNumber ));case BinOpTypeDiv :if _gee .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fff =append (_fff ,MakeNumberResult (_bda .ValueNumber /_gee .ValueNumber ));case BinOpTypeExp :_fff =append (_fff ,MakeNumberResult (_df .Pow (_bda .ValueNumber ,_gee .ValueNumber )));case BinOpTypeLT :_fff =append (_fff ,MakeBoolResult (_bda .ValueNumber < _gee .ValueNumber ));case BinOpTypeGT :_fff =append (_fff ,MakeBoolResult (_bda .ValueNumber > _gee .ValueNumber ));case BinOpTypeEQ :_fff =append (_fff ,MakeBoolResult (_bda .ValueNumber ==_gee .ValueNumber ));case BinOpTypeLEQ :_fff =append (_fff ,MakeBoolResult (_bda .ValueNumber <=_gee .ValueNumber ));case BinOpTypeGEQ :_fff =append (_fff ,MakeBoolResult (_bda .ValueNumber >=_gee .ValueNumber ));case BinOpTypeNE :_fff =append (_fff ,MakeBoolResult (_bda .ValueNumber !=_gee .ValueNumber ));default:return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_bcd ));};};return MakeListResult (_fff );};func _bbfb (_aaac []string ,_bded int )string {return _ge .Itoa (len (_aaac [len (_aaac )-1-_bded ]))};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_efd :=args [1].ValueNumber ;_gbda :=args [0];var _cabb float64 ;switch _gbda .Type {case ResultTypeEmpty :_cabb =0;case ResultTypeNumber :_cabb =_gbda .ValueNumber ;case ResultTypeString :_bcef :=DateValue ([]Result {args [0]});if _bcef .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cabb =_bcef .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gfcf :=_feea (_cabb );_dgdc :=_gfcf .AddDate (0,int (_efd +1),0);_cebd ,_gdea ,_ :=_dgdc .Date ();_cbee :=_afcf (_cebd ,int (_gdea ),0);if _cbee < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _cebd ==1900&&_gdea ==3{_cbee --;};return MakeNumberResult (_cbee );};

// LastColumn returns empty string for the invalid reference context.
func (_gfbd *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};var _dbdggd _ef .Mutex ;

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};func _caec (_cbgf float64 )float64 {_cbbc :=float64 (1);for _badf :=float64 (2);_badf <=_cbgf ;_badf ++{_cbbc *=_badf ;};return _cbbc ;};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abdf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcfc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfbe :=args [2].ValueNumber ;if _bfbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baab :=args [3].ValueNumber ;return MakeNumberResult (_baab *_abdf *(_bcfc /_bfbe -1));};var _cccbd []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edgf :=false ;for _ ,_fcfb :=range args {switch _fcfb .Type {case ResultTypeList ,ResultTypeArray :_aedbc :=Or (_fcfb .ListValues ());if _aedbc .Type ==ResultTypeError {return _aedbc ;};if _aedbc .ValueNumber !=0{_edgf =true ;};case ResultTypeNumber :if _fcfb .ValueNumber !=0{_edgf =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _fcfb ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_edgf );};

// GetEpoch returns a null time object for the invalid reference context.
func (_ggcfb *ivr )GetEpoch ()_da .Time {return _da .Time {}};func _bcea (_gegdd Result ,_cabf *criteriaParsed )bool {if _gegdd .Type ==ResultTypeEmpty {return false ;};if _cabf ._aegbfg {return _gegdd .ValueNumber ==_cabf ._baad ;}else {_gbae :=_cf .ToLower (_gegdd .ValueString );return _cabf ._geeb ==_gbae ||_gd .Match (_cabf ._geeb ,_gbae );};};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dfafa :=args [0];switch _dfafa .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_cbda :=0.0;_eded :=0.0;for _ ,_bgfeb :=range _dfafa .ValueString {_aacc :=0.0;switch _bgfeb {case 'I':_aacc =1;case 'V':_aacc =5;case 'X':_aacc =10;case 'L':_aacc =50;case 'C':_aacc =100;case 'D':_aacc =500;case 'M':_aacc =1000;};_cbda +=_aacc ;switch {case _eded ==_aacc &&(_eded ==5||_eded ==50||_eded ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_eded ==_aacc :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _eded < _aacc {_cbda -=2*_eded ;};_eded =_aacc ;};return MakeNumberResult (_cbda );case ResultTypeError :return _dfafa ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfafa .Type ));};};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_egc Context ,formula string )Result ;SetCache (_daea string ,_cfce Result );GetFromCache (_aac string )(Result ,bool );LastEvalIsRef ()bool ;};var _acgf =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};const _gdbga =57368;const _cdab =57373;

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_eebe ,_cda :=_ead (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _cda .Type ==ResultTypeError {return _cda ;};return MakeNumberResult (_afca (_eebe ._ffaf ,_eebe ._cgdb ,_eebe ._dacb ,_eebe ._eef ));};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aebaa ,_dfec ,_adaa :=_dfba (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _adaa .Type ==ResultTypeError {return _adaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dafcb :=_dfec -_aebaa ;if _dafcb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_eaabf :=args [2].ValueNumber ;if _eaabf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_eaabf )/(360-_eaabf *_dafcb ));};const _edg =86400000000000;

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggecb :=args [0];_fdgg :=args [1];if _fdgg .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aacdf :=args [2].AsNumber ();if _aacdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbaf :=false ;if len (args )==4{_aegbf :=args [3].AsNumber ();if _aegbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _aegbf .ValueNumber ==0{_dbaf =true ;};};_dgdb :=-1;_bdcge :=false ;if len (_fdgg .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_dgbd :=_fdgg .ValueArray [0];_acfad :for _beae ,_ecg :=range _dgbd {switch _gcfd (_ecg ,_ggecb ,false ,_dbaf ){case _cefcg :_dgdb =_beae ;case _afcb :_dgdb =_beae ;_bdcge =true ;break _acfad ;};};if _dgdb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_ffca :=int (_aacdf .ValueNumber )-1;if _ffca < 0||_ffca > len (_fdgg .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_dgbd =_fdgg .ValueArray [_ffca ];if _dgdb < 0||_dgdb >=len (_dgbd ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bdcge ||!_dbaf {return _dgbd [_dgdb ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_aggd :=args [0].AsNumber ();_ffgf :=args [1].AsNumber ();if _aggd .Type !=ResultTypeNumber ||_ffgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _ffgf .ValueNumber < _aggd .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_gcfed :=int64 (_aggd .ValueNumber );_gdee :=int64 (_ffgf .ValueNumber );return MakeNumberResult (float64 (_aafba .Int63n (_gdee -_gcfed +1)+_gcfed ));};func _dff (_dbdb ,_bdgef _da .Time ,_cba int )_da .Time {_bffg :=_da .Date (_dbdb .Year (),_bdgef .Month (),_bdgef .Day (),0,0,0,0,_da .UTC );if _bffg .After (_dbdb ){_bffg =_bffg .AddDate (-1,0,0);};for !_bffg .After (_dbdb ){_bffg =_bffg .AddDate (0,12/_cba ,0);};return _bffg ;};const _afae =57359;

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aebc :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbgc :=args [2].ValueNumber +1;if _cbgc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_dabe :=_aadc (args [0]);_bgba :=float64 (len (_dabe ));_dadf ,_gbea :=0.0,0.0;_gcdee ,_bdaba :=1.0,1.0;_dgeg ,_ggef :=false ,false ;for _ ,_eaagc :=range _dabe {for _ ,_ggfc :=range _eaagc {if _ggfc .Type ==ResultTypeNumber &&!_ggfc .IsBoolean {_gfag :=_ggfc .ValueNumber ;if _gfag ==0{continue ;}else {if _gfag > 0{_dgeg =true ;_gbea +=_ggfc .ValueNumber *_bdaba ;}else {_ggef =true ;_dadf +=_ggfc .ValueNumber *_gcdee ;};_gcdee /=_aebc ;_bdaba /=_cbgc ;};};};};if !_dgeg ||!_ggef {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gbfc :=-_gbea /_dadf ;_gbfc *=_df .Pow (_cbgc ,_bgba -1);_gbfc =_df .Pow (_gbfc ,1/(_bgba -1));return MakeNumberResult (_gbfc -1);};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_dcf string ,_dac Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_gg string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_da .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_eaab int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_cab string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_gfg string )string ;

// GetFormat returns if cell is protected.
GetLocked (_bag string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_edc string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_aca string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_fca ,_cdc int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_daf string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_fbc string ,_cee bool );

// NamedRange returns a named range.
NamedRange (_ab string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_dfe ,_fcb uint32 );};func _bee (_gegc ,_cdbc ,_gcdf float64 )float64 {return (_gegc *3600+_cdbc *60+_gcdf )/86400};var _acge ,_agfee ,_dddg ,_agdf ,_bbdg ,_afege ,_eeccc ,_cggdf ,_bdeg ,_dege ,_cbfe ,_aaefa ,_gbecb ,_cgbb ,_ebaec *_b .Regexp ;

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dad :=args [0].ValueNumber ;_bdc :=args [1].ValueNumber ;if _bdc < _dad {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _bdc ==_dad {return MakeNumberResult (0);};_cfef :=_cf .ToLower (args [2].ValueString );if _cfef =="\u0064"{return MakeNumberResult (_bdc -_dad );};_gagg :=_feea (_dad );_eagd :=_feea (_bdc );_gbfd ,_agfe ,_ggg :=_gagg .Date ();_ddbf ,_fbb ,_bdf :=_eagd .Date ();_dabc :=int (_agfe );_gbd :=int (_fbb );var _bbe float64 ;switch _cfef {case "\u0079":_bbe =float64 (_ddbf -_gbfd );if _gbd < _dabc ||(_gbd ==_dabc &&_bdf < _ggg ){_bbe --;};case "\u006d":_gdb :=_ddbf -_gbfd ;_ege :=_gbd -_dabc ;if _bdf < _ggg {_ege --;};if _ege < 0{_gdb --;_ege +=12;};_bbe =float64 (_gdb *12+_ege );case "\u006d\u0064":_decd :=_gbd ;if _bdf < _ggg {_decd --;};_bbe =float64 (int (_bdc -_afcf (_ddbf ,_decd ,_ggg )));case "\u0079\u006d":_bbe =float64 (_gbd -_dabc );if _bdf < _ggg {_bbe --;};if _bbe < 0{_bbe +=12;};case "\u0079\u0064":_aaf :=_ddbf ;if _gbd < _dabc ||(_gbd ==_dabc &&_bdf < _ggg ){_aaf --;};_bbe =float64 (int (_bdc -_afcf (_aaf ,_dabc ,_ggg )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_bbe );};type countMode byte ;var _cdbbc =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _bfbf =[...]int {-1,1,1,-1,-2,0};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_dec :=&defEval {};_dec .evCache =_cca ();return _dec };func _dcc (_cfa ,_beg ,_feb int )bool {if _beg < 1||_beg > 12{return false ;};if _feb < 1{return false ;};return _feb <=_eaag (_cfa ,_beg );};func (_bgdd ReferenceType )String ()string {if _bgdd >=ReferenceType (len (_cbfaf )-1){return _c .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bgdd );};return _dfffg [_cbfaf [_bgdd ]:_cbfaf [_bgdd +1]];};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_fadf :=len (args );if _fadf < 3||_fadf > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aefb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbcb :=args [1].ValueNumber ;if _gbcb !=float64 (int (_gbcb )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baee :=args [2].ValueNumber ;_bdb :=0.0;if _fadf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdb =args [3].ValueNumber ;};_cdgce :=0;if _fadf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdgce =int (args [4].ValueNumber );if _cdgce !=0{_cdgce =1;};};return MakeNumberResult (_ffae (_aefb ,_gbcb ,_baee ,_bdb ,_cdgce ));};func init (){_egbb ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};type rmode byte ;func _af (_bd BinOpType ,_bg ,_ed [][]Result )Result {_ce :=[][]Result {};for _gde :=range _bg {_bcc :=_cff (_bd ,_bg [_gde ],_ed [_gde ]);if _bcc .Type ==ResultTypeError {return _bcc ;};_ce =append (_ce ,_bcc .ValueList );};return MakeArrayResult (_ce );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _eged :=0;_eged < len (args )-1;_eged +=2{if args [_eged ].ValueNumber ==1{return args [_eged +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_agdb :=len (args );if _agdb < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aece :=args [0].ValueNumber ;if _aece ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eaef :=[]float64 {};for _ ,_bgbb :=range args [1:]{switch _bgbb .Type {case ResultTypeNumber :_eaef =append (_eaef ,_bgbb .ValueNumber );case ResultTypeArray ,ResultTypeList :_afdc :=_aadc (_bgbb );for _ ,_eaad :=range _afdc {for _ ,_aabcf :=range _eaad {if _aabcf .Type ==ResultTypeNumber &&!_aabcf .IsBoolean {_eaef =append (_eaef ,_aabcf .ValueNumber );};};};};};_bceg :=0.0;for _aebfb ,_gcgg :=range _eaef {_bceg +=_gcgg /_df .Pow (1+_aece ,float64 (_aebfb )+1);};return MakeNumberResult (_bceg );};

// GetLocked returns FALSE for the invalid reference context.
func (_affdb *ivr )GetLocked (cellRef string )bool {return false };var _bcff =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_bcdg :=len (args );if _bcdg !=2&&_bcdg !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bfbg ,_ccda :=_aeefb (args [0],args [1],"\u0058\u0049\u0052\u0052");if _ccda .Type ==ResultTypeError {return _ccda ;};_fdbe :=_bfbg ._afab ;_ddfd :=_bfbg ._ecca ;_addg :=0.1;if _bcdg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_addg =args [2].ValueNumber ;if _addg <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _eaaa (_fdbe ,_ddfd ,_addg );};func (_dgfg *evCache )SetCache (key string ,value Result ){_dgfg ._bb .Lock ();_dgfg ._db [key ]=value ;_dgfg ._bb .Unlock ();};func _decgf (_ecdf ,_agdef []string )[]string {for _ ,_eeag :=range _agdef {_ecdf =append (_ecdf ,_eeag );};return _ecdf ;};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_geegfa Context ,_dbdaf Evaluator ,_fbacd []Result )Result ;func _egbb (){_acge =_b .MustCompile ("\u005e\u0030\u002b\u0024");_dddg =_b .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_agdf =_b .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_agfee =_b .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_bbdg =_b .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_afege =_b .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_eeccc =_b .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_bdeg =_b .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_dege =_b .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_cbfe =_b .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_aaefa =_b .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_gbecb =_b .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dgaeag +_dgaeag +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dgaeag +_dgaeag +"\u0029\u002b\u0059+\u0024");_cgbb =_b .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_dgaeag +_dgaeag +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_dgaeag +_dgaeag +"\u0029\u002b\u0059+\u0024");_ebaec =_b .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_cggdf =_b .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};var _bacaf =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};const _ebgb =57372;const _febg =57370;

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bacc ,_agcb ,_ggea :=_dfba (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _ggea .Type ==ResultTypeError {return _ggea ;};_fccd ,_ggea :=_acdf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _ggea .Type ==ResultTypeError {return _ggea ;};if _fccd >=_bacc {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_edae :=args [3].ValueNumber ;if _edae < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffcfg :=args [4].ValueNumber ;if _ffcfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dbbb :=args [5].ValueNumber ;if _dbbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dfda :=float64 (int (args [6].ValueNumber ));if !_dag (_dfda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bfca :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bfca =int (args [7].ValueNumber );if !_ddcf (_bfca ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_cdfb ,_ggea :=_ffbd (_fccd ,_agcb ,_bfca );if _ggea .Type ==ResultTypeError {return _ggea ;};_cdfb *=_dfda ;_aeef ,_ggea :=_ffbd (_bacc ,_agcb ,_bfca );if _ggea .Type ==ResultTypeError {return _ggea ;};_aeef *=_dfda ;_agadd ,_ggea :=_ffbd (_fccd ,_bacc ,_bfca );if _ggea .Type ==ResultTypeError {return _ggea ;};_agadd *=_dfda ;_ggaae :=_dbbb +_cdfb *100*_edae /_dfda ;_ggaae /=_ffcfg +_agadd *100*_edae /_dfda ;_ggaae --;_ggaae *=_dfda /_aeef ;return MakeNumberResult (_ggaae );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ceee :=args [0].AsNumber ();if _ceee .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_gaaed :=int (_ceee .ValueNumber );_beede :=make ([][]Result ,0,_gaaed );for _gadc :=0;_gadc < _gaaed ;_gadc ++{_fgba :=make ([]Result ,_gaaed );for _dfedg :=0;_dfedg < _gaaed ;_dfedg ++{if _gadc ==_dfedg {_fgba [_dfedg ]=MakeNumberResult (1.0);}else {_fgba [_dfedg ]=MakeNumberResult (0.0);};};_beede =append (_beede ,_fgba );};return MakeArrayResult (_beede );};func _agfcf (_afba []Result )(float64 ,float64 ,Result ){_ecccb :=0.0;_bbcbb :=1.0;for _ ,_cggcf :=range _afba {switch _cggcf .Type {case ResultTypeNumber :_ecccb +=_cggcf .ValueNumber ;_bbcbb *=_caec (_cggcf .ValueNumber );case ResultTypeList ,ResultTypeArray :_dcccg ,_ccddc ,_ebff :=_agfcf (_cggcf .ListValues ());_ecccb +=_dcccg ;_bbcbb *=_caec (_ccddc );if _ebff .Type ==ResultTypeError {return 0,0,_ebff ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_cggcf ;};};return _ecccb ,_bbcbb ,_fad ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_eafg :=len (args );if _eafg !=4&&_eafg !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gccf ,_dgaea ,_bgab :=_dfba (args [0],args [1],"\u0044\u0049\u0053\u0043");if _bgab .Type ==ResultTypeError {return _bgab ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgfe :=args [2].ValueNumber ;if _bgfe <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcce :=args [3].ValueNumber ;if _dcce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfeb :=0;if _eafg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfeb =int (args [4].ValueNumber );if !_ddcf (_dfeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_cdec ,_bgab :=_ffbd (_gccf ,_dgaea ,_dfeb );if _bgab .Type ==ResultTypeError {return _bgab ;};return MakeNumberResult ((_dcce -_bgfe )/_dcce /_cdec );};func (_ebab tokenType )String ()string {return _acda (int (_ebab ))};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebbe :=args [0].AsString ();if _ebbe .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_ebbe .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_ebbe .ValueString [0]));};func _fffg (_ggcc string )bool {for _ ,_abc :=range _afb {_ee :=_abc .FindStringSubmatch (_ggcc );if len (_ee )> 1{return true ;};};return false ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};const _fcbg =57348;const _bde ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";type defEval struct{evCache ;_acaa bool ;};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_cf .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_gabb :v };};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _bffb (args ,_fddfa )};

// Eval evaluates and returns a string.
func (_bgabg String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_bgabg ._gabb )};func _fbae (_efdc Context ,_cbdf Evaluator ,_fcaa ,_bfbfc string )Result {_deee ,_beffc :=_fg .ParseCellReference (_fcaa );if _beffc !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fcaa ,_beffc .Error ()));};_dfdcb ,_fggge :=_deee .ColumnIdx ,_deee .RowIdx ;_dddcg ,_deeab :=_fg .ParseCellReference (_bfbfc );if _deeab !=nil {return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bfbfc ,_deeab .Error ()));};_abba ,_dfead :=_dddcg .ColumnIdx ,_dddcg .RowIdx ;_deeg :=[][]Result {};for _dfeg :=_fggge ;_dfeg <=_dfead ;_dfeg ++{_cgccb :=[]Result {};for _ebgd :=_dfdcb ;_ebgd <=_abba ;_ebgd ++{_fbaec :=_efdc .Cell (_c .Sprintf ("\u0025\u0073\u0025\u0064",_fg .IndexToColumn (_ebgd ),_dfeg ),_cbdf );_cgccb =append (_cgccb ,_fbaec );};_deeg =append (_deeg ,_cgccb );};if len (_deeg )==1{if len (_deeg [0])==1{return _deeg [0][0];};return MakeListResult (_deeg [0]);};return MakeArrayResult (_deeg );};func _bfcg (_gfcfa []Result ,_ggeae bool )Result {_gbed :="\u004d\u0041\u0058";if _ggeae {_gbed ="\u004d\u0041\u0058\u0041";};if len (_gfcfa )==0{return MakeErrorResult (_gbed +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdeg :=-_df .MaxFloat64 ;for _ ,_bdfca :=range _gfcfa {switch _bdfca .Type {case ResultTypeNumber :if (_ggeae ||!_bdfca .IsBoolean )&&_bdfca .ValueNumber > _fdeg {_fdeg =_bdfca .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_dbdbd :=_bfcg (_bdfca .ListValues (),_ggeae );if _dbdbd .ValueNumber > _fdeg {_fdeg =_dbdbd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_afcab :=0.0;if _ggeae {_afcab =_bdfca .AsNumber ().ValueNumber ;};if _afcab > _fdeg {_fdeg =_afcab ;};default:_gbf .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_gbed +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdfca .Type );};};if _fdeg ==-_df .MaxFloat64 {_fdeg =0;};return MakeNumberResult (_fdeg );};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_abbd :=args [0].AsString ();if _abbd .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbbdf :=_d .Buffer {};_cdbaa :=false ;_dfff :=false ;_eebae :=0;for _ ,_cced :=range _abbd .ValueString {_cdaea :=_cced ==' ';if _cdaea {if !_cdbaa {continue ;};if !_dfff {_eebae ++;_gbbdf .WriteRune (_cced );};}else {_eebae =0;_cdbaa =true ;_gbbdf .WriteRune (_cced );};_dfff =_cdaea ;};_gbbdf .Truncate (_gbbdf .Len ()-_eebae );return MakeStringResult (_gbbdf .String ());};const _fdggc int =30;

// Eval evaluates a range with prefix returning a list of results or an error.
func (_gdgb PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_ecbab :=_gdgb ._gdbcc .Reference (ctx ,ev );_cedb :=_gdgb ._dfge .Reference (ctx ,ev );_ecaba :=_gdgb ._bcefd .Reference (ctx ,ev );switch _ecbab .Type {case ReferenceTypeSheet :if _ccgef (_ecbab ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ecbab .Value ));};_edeefa :=_cbgff (_ecbab ,_cedb ,_ecaba );if _cedb .Type ==ReferenceTypeCell &&_ecaba .Type ==ReferenceTypeCell {if _dged ,_bgabc :=ev .GetFromCache (_edeefa );_bgabc {return _dged ;}else {_fdfae :=_fbae (ctx .Sheet (_ecbab .Value ),ev ,_cedb .Value ,_ecaba .Value );ev .SetCache (_edeefa ,_fdfae );return _fdfae ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_edeefa );default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecbab .Type ));};};func _dbfe (_adg ,_egeg int )int {switch _egeg {case 1:if _ffcf (_adg ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Update returns the same object as updating sheet references does not affect Number.
func (_gggdc Number )Update (q *_dd .UpdateQuery )Expression {return _gggdc };type ivr struct{};type criteriaParsed struct{_aegbfg bool ;_baad float64 ;_geeb string ;_bcab *criteriaRegex ;};

// Reference returns an invalid reference for Bool.
func (_gca Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func init (){_aafba =_gb .New (_gb .NewSource (_da .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_ddfba ("\u0041\u0053\u0049\u004e",_df .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_ddfba ("\u0041\u0053\u0049\u004e",_df .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_ddfba ("\u0041\u0053\u0049\u004e",_df .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_ddfba ("\u0041\u0043\u004f\u0054",func (_fcbb float64 )float64 {return _df .Pi /2-_df .Atan (_fcbb )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_ddfba ("\u0041\u0043\u004fT\u0048",func (_cfca float64 )float64 {return _df .Atanh (1/_cfca )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_ddfba ("\u0041\u0053\u0049\u004e",_df .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_ddfba ("\u0041\u0053\u0049N\u0048",_df .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_ddfba ("\u0041\u0054\u0041\u004e",_df .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_ddfba ("\u0041\u0054\u0041N\u0048",_df .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_ddfba ("\u0043\u004f\u0053",_df .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_ddfba ("\u0043\u004f\u0053\u0048",_df .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_bbabae ("\u0043\u004f\u0054",_df .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_bbabae ("\u0043\u004f\u0054\u0048",_df .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_bbabae ("\u0043\u0053\u0043",_df .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_bbabae ("\u0043\u0053\u0043",_df .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_ddfba ("\u0045\u0058\u0050",_df .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_ddfba ("\u004c\u004e",_df .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_ddfba ("\u004c\u004f\u00471\u0030",_df .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_bbabae ("\u0053\u0045\u0043",_df .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_bbabae ("\u0053\u0045\u0043\u0048",_df .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_ddfba ("\u0053\u0049\u004e",_df .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_ddfba ("\u0053\u0049\u004e\u0048",_df .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_ddfba ("\u0053\u0051\u0052\u0054",_df .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_ddfba ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_aebe float64 )float64 {return _df .Sqrt (_aebe *_df .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_ddfba ("\u0054\u0041\u004e",_df .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_ddfba ("\u0054\u0041\u004e\u0048",_df .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_becc :=args [0];if _becc .Type !=ResultTypeArray &&_becc .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_efbbf :=_becc .ValueArray ;if len (_efbbf )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_efbbf )));};func (_fgbeg *plex )Lex (lval *yySymType )int {_fcgb =true ;_fgcb :=<-_fgbeg ._fdec ;if _fgcb !=nil {lval ._efce =_fgcb ;return int (lval ._efce ._dgdf );};return 0;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_edega ,_affa :=_fbbc ("\u0046\u0049\u004e\u0044",args );if _affa .Type !=ResultTypeEmpty {return _affa ;};_dddd :=_cf .ToLower (_edega ._faeg );_fbce :=_cf .ToLower (_edega ._efgff );if _dddd ==""{return MakeNumberResult (1.0);};_bede :=_edega ._abdbe -1;_bade :=1;_gdebb :=0;for _dacdg :=range _fbce {if _dacdg !=0{_adba :=1;if _dacdg -_gdebb > 1{_adba =2;};_bade +=_adba ;};if _bade > _bede {_fgfcg :=_gd .Index (_dddd ,_fbce [_dacdg :]);if _fgfcg ==0{return MakeNumberResult (float64 (_bade ));};};_gdebb =_dacdg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _cfebb =57351;

// GetWidth returns 0 for the invalid reference context.
func (_aegba *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_bdceb ,_aeae string };

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_acaad string };

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cbeb :=args [0].AsNumber ();_aagfb :=args [1].AsNumber ();if _cbeb .Type !=ResultTypeNumber ||_aagfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _aagfb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_egbfa ,_gcba :=_df .Modf (_cbeb .ValueNumber /_aagfb .ValueNumber );if _gcba < 0{_egbfa --;};return MakeNumberResult (_cbeb .ValueNumber -_aagfb .ValueNumber *_egbfa );};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aaa :=_da .Now ();_ ,_baca :=_aaa .Zone ();_dgfc :=_gdf (_bfg ,_aaa .Unix ()+int64 (_baca ))+1;return MakeNumberResult (_dgfc );};func _dcgfe (_fcfe []Result ,_fadce bool )(float64 ,float64 ){_eaabg :=0.0;_cdbg :=0.0;for _ ,_cdbd :=range _fcfe {switch _cdbd .Type {case ResultTypeNumber :if _fadce ||!_cdbd .IsBoolean {_cdbg +=_cdbd .ValueNumber ;_eaabg ++;};case ResultTypeList ,ResultTypeArray :_dfdg ,_ggba :=_dcgfe (_cdbd .ListValues (),_fadce );_cdbg +=_dfdg ;_eaabg +=_ggba ;case ResultTypeString :if _fadce {_eaabg ++;};case ResultTypeEmpty :};};return _cdbg ,_eaabg ;};func (_cgcb *noCache )SetCache (key string ,value Result ){};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_dbfb Expression ;_aecfc ,_dacdb string ;};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _affc (_agaf []Result )Result {_fedc :=_agaf [0].ValueArray ;if len (_agaf )==1{_geea :=[][]Result {};for _ ,_ggdd :=range _fedc {_geea =append (_geea ,_bafb ([]Result {MakeListResult (_ggdd )}).ValueList );};return MakeArrayResult (_geea );}else if len (_agaf )==2{_cgce :=len (_fedc );_cgfdd :=len (_fedc [0]);_cdcc :=_beed (_agaf [1],_cgce ,_cgfdd );_bdgc :=len (_cdcc );_begf :=[][]Result {};var _fbbd []Result ;for _bccf ,_ddea :=range _fedc {if _bccf < _bdgc {_fbbd =_cdcc [_bccf ];}else {_fbbd =_fdfce (MakeErrorResultType (ErrorTypeNA ,""),_cgfdd );};_begf =append (_begf ,_bafb ([]Result {MakeListResult (_ddea ),MakeListResult (_fbbd )}).ValueList );};return MakeArrayResult (_begf );}else if len (_agaf )==3{_agagf :=len (_fedc );_cfecf :=len (_fedc [0]);_beaf :=_beed (_agaf [1],_agagf ,_cfecf );_gdgd :=_beed (_agaf [2],_agagf ,_cfecf );_egbf :=len (_beaf );_eegdc :=len (_gdgd );_aaca :=[][]Result {};var _ebbb ,_eggg []Result ;for _dcebge ,_ccdg :=range _fedc {if _dcebge < _egbf {_ebbb =_beaf [_dcebge ];}else {_ebbb =_fdfce (MakeErrorResultType (ErrorTypeNA ,""),_cfecf );};if _dcebge < _eegdc {_eggg =_gdgd [_dcebge ];}else {_eggg =_fdfce (MakeErrorResultType (ErrorTypeNA ,""),_cfecf );};_aaca =append (_aaca ,_bafb ([]Result {MakeListResult (_ccdg ),MakeListResult (_ebbb ),MakeListResult (_eggg )}).ValueList );};return MakeArrayResult (_aaca );};return MakeErrorResultType (ErrorTypeValue ,"");};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_cagb Expression ;_gdeab ,_adbgd int ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_dfaf ,_fdaa :=_ffee (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _fdaa .Type ==ResultTypeError {return _fdaa ;};_gdeag :=_dfaf ._gbb ;_fdfd :=_dfaf ._fgea ;_adfc :=_dfaf ._fcd ;_ebfec :=_dfaf ._bec ;_bbce :=_dfaf ._fdbf ;_egfd :=_dfaf ._ceff ;return _bgff (_gdeag ,_fdfd ,_adfc ,_ebfec ,_bbce ,_egfd );};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_gfeg :=len (args );if _gfeg !=6&&_gfeg !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbfa ,_cddb ,_dcece :=_dfba (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _dcece .Type ==ResultTypeError {return _dcece ;};_abgba :=args [2];if _abgba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eceg :=_abgba .ValueNumber ;if _eceg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_cbabd :=args [3];if _cbabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gegcg :=_cbabd .ValueNumber ;if _gegcg <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_adcf :=args [4];if _adcf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_fdee :=_adcf .ValueNumber ;if _fdee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dfed :=args [5];if _dfed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_aedf :=float64 (int (_dfed .ValueNumber ));if !_dag (_aedf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bbbf :=0;if _gfeg ==7&&args [6].Type !=ResultTypeEmpty {_cdgg :=args [6];if _cdgg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bbbf =int (_cdgg .ValueNumber );if !_ddcf (_bbbf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_daee :=0.0;_gbdf :=0.0;_ggaag :=1.0;_afad ,_dcece :=_fgccb (_gbfa ,_cddb ,_eceg ,_gbdf ,_fdee ,_aedf ,_bbbf );if _dcece .Type ==ResultTypeError {return _dcece ;};_acfb ,_dcece :=_fgccb (_gbfa ,_cddb ,_eceg ,_ggaag ,_fdee ,_aedf ,_bbbf );if _dcece .Type ==ResultTypeError {return _dcece ;};_accg :=(_ggaag -_gbdf )*0.5;for _dabcf :=0;_dabcf < 100&&_daee !=_gegcg ;_dabcf ++{_daee ,_dcece =_fgccb (_gbfa ,_cddb ,_eceg ,_accg ,_fdee ,_aedf ,_bbbf );if _dcece .Type ==ResultTypeError {return _dcece ;};if _gegcg ==_afad {return MakeNumberResult (_gbdf );}else if _gegcg ==_acfb {return MakeNumberResult (_ggaag );}else if _gegcg ==_daee {return MakeNumberResult (_accg );}else if _gegcg < _acfb {_ggaag *=2.0;_acfb ,_dcece =_fgccb (_gbfa ,_cddb ,_eceg ,_ggaag ,_fdee ,_aedf ,_bbbf );if _dcece .Type ==ResultTypeError {return _dcece ;};_accg =(_ggaag -_gbdf )*0.5;}else {if _gegcg < _daee {_gbdf =_accg ;_afad =_daee ;}else {_ggaag =_accg ;_acfb =_daee ;};_accg =_ggaag -(_ggaag -_gbdf )*((_gegcg -_acfb )/(_afad -_acfb ));};};return MakeNumberResult (_accg );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_gdbcc ,_dfge ,_bcefd Expression };

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_gcdd Result )AsNumber ()Result {if _gcdd .Type ==ResultTypeString {_dgcba ,_fdeaf :=_ge .ParseFloat (_gcdd .ValueString ,64);if _fdeaf ==nil {return MakeNumberResult (_dgcba );};};if _gcdd .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _gcdd ;};func _fd (_dg Result )bool {if _dg .Type ==ResultTypeString {return _dg .ValueString =="";};return _dg .ValueNumber ==0;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};const _eabee =57346;type couponArgs struct{_ffaf float64 ;_cgdb float64 ;_dacb int ;_eef int ;};const _adaab =57378;type amorArgs struct{_bbbe float64 ;_gdag float64 ;_dcdc float64 ;_gdg float64 ;_dgcb int ;_cbfa float64 ;_eeff int ;};func _bafb (_bcfb []Result )Result {_ecaaf :=_bcfb [0].ValueList ;_bcfgb :=len (_ecaaf );switch len (_bcfb ){case 1:_cfdaa :=[]Result {};for _ ,_egdf :=range _ecaaf {_cfdaa =append (_cfdaa ,MakeBoolResult (_egdf .ValueNumber !=0));};return MakeListResult (_cfdaa );case 2:_aeab :=_bcfb [1];switch _aeab .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_fcba :=[]Result {};for _ ,_bgcd :=range _ecaaf {var _dadde Result ;if _bgcd .ValueNumber ==0{_dadde =MakeBoolResult (false );}else {_dadde =_aeab ;};_fcba =append (_fcba ,_dadde );};return MakeListResult (_fcba );case ResultTypeList :_acab :=_fdfce (_aeab ,_bcfgb );_ggcfa :=[]Result {};for _deaff ,_ddde :=range _ecaaf {var _bfdb Result ;if _ddde .ValueNumber ==0{_bfdb =MakeBoolResult (false );}else {_bfdb =_acab [_deaff ];};_ggcfa =append (_ggcfa ,_bfdb );};return MakeListResult (_ggcfa );case ResultTypeArray :_ebba :=_beed (_aeab ,len (_aeab .ValueArray ),_bcfgb );_dccg :=[][]Result {};for _ ,_eaeeb :=range _ebba {_fdfcg :=[]Result {};for _aaacc ,_gcdfc :=range _ecaaf {var _adea Result ;if _gcdfc .ValueNumber ==0{_adea =MakeBoolResult (false );}else {_adea =_eaeeb [_aaacc ];};_fdfcg =append (_fdfcg ,_adea );};_dccg =append (_dccg ,_fdfcg );};return MakeArrayResult (_dccg );};case 3:_fdfeg :=_bcfb [1];_cgdbd :=_bcfb [2];_agffef :=_decf (_fdfeg );_cdgbf :=_decf (_cgdbd );if _agffef &&_cdgbf {_cbde :=[]Result {};for _ ,_dgfd :=range _ecaaf {var _gggb Result ;if _dgfd .ValueNumber ==0{_gggb =_cgdbd ;}else {_gggb =_fdfeg ;};_cbde =append (_cbde ,_gggb );};return MakeListResult (_cbde );};if _fdfeg .Type !=ResultTypeArray &&_cgdbd .Type !=ResultTypeArray {_gacc :=_fdfce (_fdfeg ,_bcfgb );_egfad :=_fdfce (_cgdbd ,_bcfgb );_cdge :=[]Result {};for _dada ,_aageb :=range _ecaaf {var _cbag Result ;if _aageb .ValueNumber ==0{_cbag =_egfad [_dada ];}else {_cbag =_gacc [_dada ];};_cdge =append (_cdge ,_cbag );};return MakeListResult (_cdge );};_dfgca ,_fdeac :=len (_fdfeg .ValueArray ),len (_cgdbd .ValueArray );_efgc ,_dadce :=_dfgca ,_fdeac ;if _fdeac > _efgc {_efgc ,_dadce =_dadce ,_efgc ;};_fbgef :=_beed (_fdfeg ,_efgc ,_bcfgb );_fecf :=_beed (_cgdbd ,_efgc ,_bcfgb );_gfac :=[][]Result {};for _cbabe :=0;_cbabe < _efgc ;_cbabe ++{_ceda :=[]Result {};for _efbgf ,_cffgd :=range _ecaaf {var _ffafec Result ;if _cffgd .ValueNumber ==0{if _cbabe < _fdeac {_ffafec =_fecf [_cbabe ][_efbgf ];}else {_ffafec =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _cbabe < _dfgca {_ffafec =_fbgef [_cbabe ][_efbgf ];}else {_ffafec =MakeErrorResultType (ErrorTypeNA ,"");};};_ceda =append (_ceda ,_ffafec );};_gfac =append (_gfac ,_ceda );};return MakeArrayResult (_gfac );};return MakeErrorResult ("");};

// Reference returns an invalid reference for Negate.
func (_gbgg Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _agaec =57347;

// Eval evaluates and returns the result of the cell reference.
func (_gfe CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_gfe ._dcd ,ev )};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgcgab :=args [0].Ref ;if _bgcgab .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_bgcgab .Value ));};func _gdf (_bcb ,_fbge int64 )float64 {return float64 (int (0.5+float64 ((_fbge -_bcb )/86400)))};func _ffae (_bdgea ,_ecaa ,_eaae ,_gab float64 ,_deed int )float64 {var _edcd float64 ;if _bdgea ==0{_edcd =_gab +_eaae *_ecaa ;}else {_cffb :=_df .Pow (1+_bdgea ,_ecaa );if _deed ==1{_edcd =_gab *_cffb +_eaae *(1+_bdgea )*(_cffb -1)/_bdgea ;}else {_edcd =_gab *_cffb +_eaae *(_cffb -1)/_bdgea ;};};return -_edcd ;};func _eae (){_gcg ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_b .MustCompile ("\u005e"+_bde +_bgb );_gcg ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_b .MustCompile ("\u005e"+_ecd +_bgb );_gcg ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_b .MustCompile ("\u005e"+_cfb +_bgb );_gcg ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_b .MustCompile ("\u005e"+_ffed +_bgb );_ggb ["\u0068\u0068"]=_b .MustCompile (_aeb +_cdf +"\u0024");_ggb ["\u0068\u0068\u003am\u006d"]=_b .MustCompile (_aeb +_ceed +"\u0024");_ggb ["\u006d\u006d\u003as\u0073"]=_b .MustCompile (_aeb +_ggdf +"\u0024");_ggb ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_b .MustCompile (_aeb +_afc +"\u0024");_afb =[]*_b .Regexp {_b .MustCompile ("\u005e"+_bde +"\u0024"),_b .MustCompile ("\u005e"+_ecd +"\u0024"),_b .MustCompile ("\u005e"+_cfb +"\u0024"),_b .MustCompile ("\u005e"+_ffed +"\u0024")};_gdc =[]*_b .Regexp {_b .MustCompile ("\u005e"+_cdf +"\u0024"),_b .MustCompile ("\u005e"+_ceed +"\u0024"),_b .MustCompile ("\u005e"+_ggdf +"\u0024"),_b .MustCompile ("\u005e"+_afc +"\u0024")};};func _geae (_gbdd []Result ,_cefc string )(*amorArgs ,Result ){_dbbd :=len (_gbdd );if _dbbd !=6&&_dbbd !=7{return nil ,MakeErrorResult (_cefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gbdd [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cefc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fcae :=_gbdd [0].ValueNumber ;if _fcae < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cefc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_eaeg ,_adcgc :=_acdf (_gbdd [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_cefc );if _adcgc .Type ==ResultTypeError {return nil ,_adcgc ;};_fdcbe ,_adcgc :=_acdf (_gbdd [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_cefc );if _adcgc .Type ==ResultTypeError {return nil ,_adcgc ;};if _fdcbe < _eaeg {return nil ,MakeErrorResultType (ErrorTypeNum ,_cefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _gbdd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcaec :=_gbdd [3].ValueNumber ;if _gcaec < 0||_gcaec > _fcae {return nil ,MakeErrorResultType (ErrorTypeNum ,_cefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _gbdd [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cefc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfad :=int (_gbdd [4].ValueNumber );if _dfad < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cefc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _gbdd [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cefc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fbdb :=_gbdd [5].ValueNumber ;if _fbdb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cefc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_dcfe :=0;if _dbbd ==7&&_gbdd [6].Type !=ResultTypeEmpty {if _gbdd [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cefc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcfe =int (_gbdd [6].ValueNumber );if !_ddcf (_dcfe )||_dcfe ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_cefc );};};return &amorArgs {_fcae ,_eaeg ,_fdcbe ,_gcaec ,_dfad ,_fbdb ,_dcfe },_fad ;};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_df .Pi );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aecaa :=args [0].AsString ();if _aecaa .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_dcebg :="\u0041\u0031";if len (args )==2{_bedc :=args [1].Ref ;if _bedc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_dcebg =_bedc .Value ;};switch _aecaa .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_fafde ,_bfee :=_fg .ParseCellReference (_dcebg );if _bfee !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcebg );};_ede :="\u0024"+_fafde .Column +"\u0024"+_ge .Itoa (int (_fafde .RowIdx ));if _fafde .SheetName !=""{_ede =_fafde .SheetName +"\u0021"+_ede ;};return MakeStringResult (_ede );case "\u0063\u006f\u006c":_cgfcg ,_eece :=_fg .ParseCellReference (_dcebg );if _eece !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcebg );};return MakeNumberResult (float64 (_cgfcg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_ecfd :=_cf .Contains (ctx .GetFormat (_dcebg ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_ecfd );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bbafa :="\u0047";_dfgc :=ctx .GetFormat (_dcebg );if _dfgc =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_acge .MatchString (_dfgc ){_bbafa ="\u0046\u0030";}else if _dfgc =="\u0030\u0025"{_bbafa ="\u0050\u0030";}else if _dfgc =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bbafa ="\u0044\u0032";}else if _dfgc =="\u004d\u004d\u002fY\u0059"{_bbafa ="\u0044\u0033";}else if _dfgc =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_dfgc =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bbafa ="\u0044\u0034";}else if _dfgc =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bbafa ="\u0044\u0035";}else if _dfgc =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bbafa ="\u0044\u0036";}else if _dfgc =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bbafa ="\u0044\u0037";}else if _dfgc =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bbafa ="\u0044\u0038";}else if _dfgc =="\u0048\u0048\u003aM\u004d"{_bbafa ="\u0044\u0039";}else if _dddg .MatchString (_dfgc ){_bbafa ="\u002e\u0030";}else if _agdf .MatchString (_dfgc ){_bbafa ="\u002e\u0030\u0028\u0029";}else if _dege .MatchString (_dfgc ){_bbafa ="\u0043\u0030";}else if _gbecb .MatchString (_dfgc )||_cgbb .MatchString (_dfgc ){_bbafa ="\u0044\u0031";}else if _cffd :=_agfee .FindStringSubmatch (_dfgc );len (_cffd )> 1{_bbafa ="\u0046"+_ge .Itoa (len (_cffd [1]));}else if _gcbfd :=_afege .FindStringSubmatch (_dfgc );len (_gcbfd )> 1{_bbafa ="\u002e"+_ge .Itoa (len (_gcbfd [2]));}else if _gfcdf :=_bdeg .FindStringSubmatch (_dfgc );len (_gfcdf )> 1{_bbafa ="\u0050"+_ge .Itoa (len (_gfcdf [2]));}else if _fcdg :=_cbfe .FindStringSubmatch (_dfgc );len (_fcdg )> 1{_bbafa ="\u0043"+_bbfb (_fcdg ,1);}else if _ggcff :=_aaefa .FindStringSubmatch (_dfgc );len (_ggcff )> 1{_bbafa ="\u0043"+_bbfb (_ggcff ,1);}else if _gcgd :=_eeccc .FindStringSubmatch (_dfgc );len (_gcgd )> 1{_bbafa ="\u002e"+_bbfb (_gcgd ,1)+"\u0028\u0029";}else if _fbee :=_bbdg .FindStringSubmatch (_dfgc );len (_fbee )> 1{_bbafa ="\u002e"+_bbfb (_fbee ,1);}else if _aeeg :=_ebaec .FindStringSubmatch (_dfgc );len (_aeeg )> 1{_bbafa ="\u0053"+_bbfb (_aeeg ,3);};if _bbafa !="\u0047"&&_cf .Contains (_dfgc ,"\u005b\u0052\u0045D\u005d"){_bbafa +="\u002d";};return MakeStringResult (_bbafa );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_cgac :=ctx .GetFormat (_dcebg );if _cggdf .MatchString (_cgac ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_dcebg ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_cceaf :=0.0;if ctx .GetLocked (_dcebg ){_cceaf =1.0;};return MakeNumberResult (_cceaf );case "\u0072\u006f\u0077":_dcgdb ,_geaee :=_fg .ParseCellReference (_dcebg );if _geaee !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcebg );};return MakeNumberResult (float64 (_dcgdb .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_bdcf ,_ageg :=_fg .ParseCellReference (_dcebg );if _ageg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcebg );};if _bdcf .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_bdcf .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_bdcf .SheetName ).GetWidth (int (_bdcf .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_aecaa .ValueString );};const _dbba =57353;var _affe []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_dagb *ivr )GetLabelPrefix (cellRef string )string {return ""};var _cbfaf =[...]uint8 {0,20,37,60,78,96};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_daedf :=args [0].AsString ();if _daedf .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_bdgbe :=_d .Buffer {};_bacd :=false ;for _ ,_bbdca :=range _daedf .ValueString {if !_bacd &&_a .IsLetter (_bbdca ){_bdgbe .WriteRune (_a .ToUpper (_bbdca ));}else {_bdgbe .WriteRune (_a .ToLower (_bbdca ));};_bacd =_a .IsLetter (_bbdca );};return MakeStringResult (_bdgbe .String ());};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_ebbd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebbd =int (args [1].ValueNumber );if _ebbd < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _ebbd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_dcagg :=args [0].Value ();_dage :=len (_dcagg );if _ebbd > _dage {return MakeStringResult (_dcagg );};return MakeStringResult (_dcagg [_dage -_ebbd :_dage ]);};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ggbce :=args [0];_abac :=args [1];if _abac .Type !=ResultTypeArray &&_abac .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_beag :=_fdfde (_abac );_geeg :=-1;for _bfcc ,_fgggg :=range _beag {if _gcfd (_ggbce ,_fgggg ,false ,false )==_afcb {_geeg =_bfcc ;};};if _geeg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_cdeg :=_beag ;if len (args )==3{_cdeg =_fdfde (args [2]);};if _geeg < 0||_geeg >=len (_cdeg ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _cdeg [_geeg ];};func _bbcgg (_cecaca []Result ,_feef []string ,_eccd bool )[]string {for _ ,_bcfdf :=range _cecaca {switch _bcfdf .Type {case ResultTypeEmpty :if !_eccd {_feef =append (_feef ,"");};case ResultTypeString :if _bcfdf .ValueString !=""||!_eccd {_feef =append (_feef ,_bcfdf .ValueString );};case ResultTypeNumber :_feef =append (_feef ,_bcfdf .Value ());case ResultTypeList :_feef =_decgf (_feef ,_bbcgg (_bcfdf .ValueList ,[]string {},_eccd ));case ResultTypeArray :for _ ,_bfea :=range _bcfdf .ValueArray {_feef =_decgf (_feef ,_bbcgg (_bfea ,[]string {},_eccd ));};};};return _feef ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_dbbcg PrefixVerticalRange )Update (q *_dd .UpdateQuery )Expression {if q .UpdateType ==_dd .UpdateActionRemoveColumn {_feaa :=_dbbcg ;_cfabd :=_dbbcg ._dbfb .String ();if _cfabd ==q .SheetToUpdate {_faab :=q .ColumnIdx ;_feaa ._aecfc =_ca (_dbbcg ._aecfc ,_faab );_feaa ._dacdb =_ca (_dbbcg ._dacdb ,_faab );};return _feaa ;};return _dbbcg ;};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func (_beaa *ivr )SetOffset (col ,row uint32 ){};func _dbbgb (_fbdce []Result ,_fgfe bool )Result {_ecfec :="\u004d\u0049\u004e";if _fgfe {_ecfec ="\u004d\u0049\u004e\u0041";};if len (_fbdce )==0{return MakeErrorResult (_ecfec +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcdf :=_df .MaxFloat64 ;for _ ,_abgd :=range _fbdce {switch _abgd .Type {case ResultTypeNumber :if (_fgfe ||!_abgd .IsBoolean )&&_abgd .ValueNumber < _dcdf {_dcdf =_abgd .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_cbdae :=_dbbgb (_abgd .ListValues (),_fgfe );if _cbdae .ValueNumber < _dcdf {_dcdf =_cbdae .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_defc :=0.0;if _fgfe {_defc =_abgd .AsNumber ().ValueNumber ;};if _defc < _dcdf {_dcdf =_defc ;};default:_gbf .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ecfec +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abgd .Type );};};if _dcdf ==_df .MaxFloat64 {_dcdf =0;};return MakeNumberResult (_dcdf );};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_ccg EmptyExpr )Update (q *_dd .UpdateQuery )Expression {return _ccg };

// String returns a string representation of a named range.
func (_agcbd NamedRangeRef )String ()string {return _agcbd ._fdbaa };

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_caccc ,_dagec :=_fbbc ("\u0046\u0049\u004e\u0044",args );if _dagec .Type !=ResultTypeEmpty {return _dagec ;};_cgfg :=_cf .ToLower (_caccc ._faeg );if _cgfg ==""{return MakeNumberResult (1.0);};_bafg :=_cf .ToLower (_caccc ._efgff );_bdfd :=_caccc ._abdbe ;_begcd :=1;for _ecff :=range _bafg {if _begcd < _bdfd {_begcd ++;continue ;};_dbgdg :=_gd .Index (_cgfg ,_bafg [_ecff :]);if _dbgdg ==0{return MakeNumberResult (float64 (_begcd ));};_begcd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _bcag =_da .Millisecond *1000;

// String is a string expression.
type String struct{_gabb string };

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baaa :=0;_cgcd :=false ;for _ ,_cbca :=range args {switch _cbca .Type {case ResultTypeList ,ResultTypeArray :_geaeg :=Xor (_cbca .ListValues ());if _geaeg .Type ==ResultTypeError {return _geaeg ;};if _geaeg .ValueNumber !=0{_baaa ++;};_cgcd =true ;case ResultTypeNumber :if _cbca .ValueNumber !=0{_baaa ++;};_cgcd =true ;case ResultTypeString :case ResultTypeError :return _cbca ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_cgcd {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_baaa %2!=0);};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_faddc :=args [0].AsNumber ();if _faddc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agdc :=_df .Signbit (_faddc .ValueNumber );_fdeeg ,_aeeac :=_df .Modf (_faddc .ValueNumber /2);_fabd :=_fdeeg *2;if _aeeac !=0{if !_agdc {_fabd +=2;}else {_fabd -=2;};};return MakeNumberResult (_fabd );};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_dbde ,_fead :=_ead (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _fead .Type ==ResultTypeError {return _fead ;};_dabb :=_feea (_dbde ._ffaf );_gdad :=_feea (_dbde ._cgdb );_fdfgd :=_dbde ._dacb ;_ccc :=_dbde ._eef ;_cdce :=_ddcd (_dabb ,_gdad ,_fdfgd ,_ccc );_cbf ,_ddcb ,_ece :=_cdce .Date ();return MakeNumberResult (_afcf (_cbf ,int (_ddcb ),_ece ));};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_geee ,_dgff :=_ead (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _dgff .Type ==ResultTypeError {return _dgff ;};_bfb :=_feea (_geee ._ffaf );_agaag :=_feea (_geee ._cgdb );_dgde :=_geee ._dacb ;_cbfc :=_dff (_bfb ,_agaag ,_dgde );_abde ,_dcgg ,_eabe :=_cbfc .Date ();return MakeNumberResult (_afcf (_abde ,int (_dcgg ),_eabe ));};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_bdaa :=[]string {};for _dacg :=range _dafb {_bdaa =append (_bdaa ,_dacg );};for _cfgf :=range _ecefc {_bdaa =append (_bdaa ,_cfgf );};_f .Strings (_bdaa );return _bdaa ;};func _debbed (_babe []Result )[]float64 {_agdeg :=make ([]float64 ,0);for _ ,_gffb :=range _babe {if _gffb .Type ==ResultTypeEmpty {continue ;};_gffb =_gffb .AsNumber ();switch _gffb .Type {case ResultTypeNumber :if !_gffb .IsBoolean {_agdeg =append (_agdeg ,_gffb .ValueNumber );};case ResultTypeList ,ResultTypeArray :_agdeg =append (_agdeg ,_debbed (_gffb .ListValues ())...);case ResultTypeString :default:_gbf .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gffb .Type );};};return _agdeg ;};var _bfg int64 =_cgbd (1900,_da .January ,1);func init (){_ccgb ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// String returns an empty string for Error.
func (_dfa Error )String ()string {return ""};func (_febff PrefixVerticalRange )verticalRangeReference (_bbfcg string )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bbfcg ,_febff ._aecfc ,_febff ._dacdb );};func _gafbg (_edce _da .Time )bool {return _da .Now ().Sub (_edce )>=_bcag };

// Eval evaluates a range returning a list of results or an error.
func (_aebfa Range )Eval (ctx Context ,ev Evaluator )Result {_aegfd :=_aebfa ._aafd .Reference (ctx ,ev );_cccfb :=_aebfa ._daba .Reference (ctx ,ev );_efgcb :=_cddg (_aegfd ,_cccfb );if _aegfd .Type ==ReferenceTypeCell &&_cccfb .Type ==ReferenceTypeCell {if _fgeaf ,_fbbab :=ev .GetFromCache (_efgcb );_fbbab {return _fgeaf ;}else {_caeff :=_fbae (ctx ,ev ,_aegfd .Value ,_cccfb .Value );ev .SetCache (_efgcb ,_caeff );return _caeff ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_efgcb );};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdec :=args [0].AsString ();if _gdec .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_gdec .ValueString )));};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_edec :=args [0].AsNumber ();if _edec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gded :=float64 (1);if _edec .ValueNumber < 0{_gded =-1;};if len (args )> 1{_bbdc :=args [1].AsNumber ();if _bbdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_gded =_df .Abs (_bbdc .ValueNumber );};if len (args )==1{return MakeNumberResult (_df .Floor (_edec .ValueNumber ));};_fabc :=_edec .ValueNumber ;_fabc ,_bdgd :=_df .Modf (_fabc /_gded );if _bdgd !=0{if _edec .ValueNumber < 0{_fabc --;};};return MakeNumberResult (_fabc *_gded );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_abce NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_badgd :=ctx .NamedRange (_abce ._fdbaa );_ebbfd :=_badgd .Value ;if _abda ,_dgfff :=ev .GetFromCache (_ebbfd );_dgfff {return _abda ;};_egebc :=_cf .Split (_ebbfd ,"\u0021");if len (_egebc )!=2{return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_ebbfd ));};_fffde :=ctx .Sheet (_egebc [0]);_begba :=_cf .Split (_egebc [1],"\u003a");switch len (_begba ){case 1:_eede :=ev .Eval (_fffde ,_begba [0]);ev .SetCache (_ebbfd ,_eede );return _eede ;case 2:_gaga :=_fbae (_fffde ,ev ,_begba [0],_begba [1]);ev .SetCache (_ebbfd ,_gaga );return _gaga ;};return MakeErrorResult (_c .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_badgd .Type ));};const _abdcg =57362;

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gadf ,_ecbd ,_aecf :=_dfba (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _aecf .Type ==ResultTypeError {return _aecf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agdec :=_ecbd -_gadf ;if _agdec > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_ddg :=args [2].ValueNumber ;if _ddg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_ddg *_agdec /360));};func _dfba (_bdge ,_dbdc Result ,_dcgd string )(float64 ,float64 ,Result ){_bbd ,_gcdg :=_acdf (_bdge ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_dcgd );if _gcdg .Type ==ResultTypeError {return 0,0,_gcdg ;};_bgf ,_gcdg :=_acdf (_dbdc ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_dcgd );if _gcdg .Type ==ResultTypeError {return 0,0,_gcdg ;};if _bbd >=_bgf {return 0,0,MakeErrorResultType (ErrorTypeNum ,_dcgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _bbd ,_bgf ,_fad ;};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_aafd ,_daba Expression };

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_acec :=_bgag (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _acec .Type !=ResultTypeEmpty {return _acec ;};_gdaff :=_dfbee (args );return MakeNumberResult (float64 (len (_gdaff )));};const _begdc int =0;

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_gfgb :=args [0];if _gfgb .Type !=ResultTypeArray &&_gfgb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bcaa :=_gbfbf (args [1]);_deedg :=0;for _ ,_fgecc :=range _aadc (_gfgb ){for _ ,_adcag :=range _fgecc {if _bdcc (_adcag ,_bcaa ){_deedg ++;};};};return MakeNumberResult (float64 (_deedg ));};var _cfac =[...]uint8 {0,17,33,49,63,78,93,108};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggbfe :=args [0];switch _ggbfe .Type {case ResultTypeError :return _ggbfe ;case ResultTypeNumber ,ResultTypeString :return _gdbg (args [0]);case ResultTypeList :_agcgd :=_ggbfe .ValueList ;_ecdcca :=[]Result {};for _ ,_deca :=range _agcgd {_gfae :=_gdbg (_deca );if _gfae .Type ==ResultTypeError {return _gfae ;};_ecdcca =append (_ecdcca ,_gfae );};return MakeListResult (_ecdcca );case ResultTypeArray :_caeg :=_ggbfe .ValueArray ;_ceeec :=[][]Result {};for _ ,_ebcc :=range _caeg {_ddge :=[]Result {};for _ ,_egfdb :=range _ebcc {_cfgdg :=_gdbg (_egfdb );if _cfgdg .Type ==ResultTypeError {return _cfgdg ;};_ddge =append (_ddge ,_cfgdg );};_ceeec =append (_ceeec ,_ddge );};return MakeArrayResult (_ceeec );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};func _cgbd (_bbc int ,_bdd _da .Month ,_egce int )int64 {if _bbc ==1900&&int (_bdd )<=2{_egce --;};_bfd :=_da .Date (_bbc ,_bdd ,_egce ,0,0,0,0,_da .UTC );return _bfd .Unix ();};func _dceff (_cdcg string ,_geddb _da .Time )(_da .Time ,error ){_acad ,_ ,_adca :=_egb .ParseFloat (_cdcg ,10,128,_egb .ToNearestEven );if _adca !=nil {return _da .Time {},_adca ;};_gfcc :=new (_egb .Float );_gfcc .SetUint64 (uint64 (24*_da .Hour ));_acad .Mul (_acad ,_gfcc );_cedf ,_ :=_acad .Uint64 ();_cegg :=_geddb .Add (_da .Duration (_cedf ));return _fceg (_cegg ),nil ;};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_egfe PrefixHorizontalRange )Update (q *_dd .UpdateQuery )Expression {return _egfe };var _dgaeag string =string ([]byte {92});var _cd =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_dcfb :=_d .Buffer {};for _ ,_gdbc :=range args {switch _gdbc .Type {case ResultTypeString :_dcfb .WriteString (_gdbc .ValueString );case ResultTypeNumber :var _abggc string ;if _gdbc .IsBoolean {if _gdbc .ValueNumber ==0{_abggc ="\u0046\u0041\u004cS\u0045";}else {_abggc ="\u0054\u0052\u0055\u0045";};}else {_abggc =_gdbc .AsString ().ValueString ;};_dcfb .WriteString (_abggc );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_dcfb .String ());};func _fge (_gggg string )bool {for _ ,_afcc :=range _gdc {_efab :=_afcc .FindStringSubmatch (_gggg );if len (_efab )> 1{return true ;};};return false ;};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cede :=args [0].AsNumber ();if _cede .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dedf :=0;if len (args )> 1{_dabgb :=args [1];if _dabgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_dedf =int (_dabgb .ValueNumber );if _dedf < 0{_dedf =0;}else if _dedf > 4{_dedf =4;};};_ebg :=_ggcfd ;switch _dedf {case 1:_ebg =_fgad ;case 2:_ebg =_cdbbc ;case 3:_ebg =_aaad ;case 4:_ebg =_eacc ;};_dbbgg :=_df .Trunc (_cede .ValueNumber );_ddae :=_d .Buffer {};for _ ,_agdcd :=range _ebg {for _dbbgg >=_agdcd ._bgea {_ddae .WriteString (_agdcd ._gcfc );_dbbgg -=_agdcd ._bgea ;};};return MakeStringResult (_ddae .String ());};func LexReader (r _eg .Reader )chan *node {_fbbe :=NewLexer ();go _fbbe .lex (r );return _fbbe ._fgadf };const _fcac int =30;func (_bcbb *Lexer )Next ()*node {_bcbb ._adab .Lock ();defer _bcbb ._adab .Unlock ();if len (_bcbb ._efcg )> 0{_bfggb :=_bcbb ._efcg [0];_bcbb ._efcg =_bcbb ._efcg [1:];return _bfggb ;};return _bcbb .nextRaw ();};func _acdf (_dbfeg Result ,_bfed ,_agbg string )(float64 ,Result ){var _bfdc float64 ;switch _dbfeg .Type {case ResultTypeNumber :_bfdc =float64 (int (_dbfeg .ValueNumber ));case ResultTypeString :_ggcf :=DateValue ([]Result {_dbfeg });if _ggcf .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_bfed +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_agbg );};_bfdc =_ggcf .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_agbg );};if _bfdc < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_bfed +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _bfdc ,_fad ;};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_gece :=_bgag (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _gece .Type !=ResultTypeEmpty {return _gece ;};_dadg :=_dfbee (args [1:]);_eeffe :=0.0;_geegf :=_aadc (args [0]);for _ ,_bbae :=range _dadg {_eeffe +=_geegf [_bbae ._abcb ][_bbae ._afdae ].ValueNumber ;};return MakeNumberResult (float64 (_eeffe ));};

// GetFormat returns an empty string for the invalid reference context.
func (_cbaa *ivr )GetFormat (cellRef string )string {return ""};type yyParserImpl struct{_fecd yySymType ;_eceec [_adge ]yySymType ;_gbde int ;};func (_fcgbf *Lexer )emit (_accf tokenType ,_egba []byte ){if _fbac {_c .Println ("\u0065\u006d\u0069\u0074",_accf ,_afcaa (string (_egba )));};_fcgbf ._fgadf <-&node {_accf ,string (_egba )};};const _bccc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";const _fbgb =2;func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};var InvalidReferenceContext =&ivr {};

// Eval evaluates and returns the result of a sheet expression.
func (_fgefe SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcfgg :=args [0].AsNumber ();if _dcfgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cffdc :=int (_dcfgg .ValueNumber );if _cffdc < 0||_cffdc > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_c .Sprintf ("\u0025\u0063",_cffdc ));};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_agg :=len (args );if _agg < 4||_agg > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fgcf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfg :=args [1].ValueNumber ;if _dfg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caff :=args [2].ValueNumber ;if _caff < _dfg {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fcgf :=args [3].ValueNumber ;_afegg :=0.0;if _agg >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afegg =args [4].ValueNumber ;};_afgg :=0;if _agg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afgg =int (args [5].ValueNumber );if _afgg !=0{_afgg =1;};};return MakeNumberResult (_gcb (_fgcf ,_caff ,_fcgf ,_afegg ,_afgg )-_bace (_fgcf ,_dfg ,_caff ,_fcgf ,_afegg ,_afgg ));};

// String returns a string representation of SheetPrefixExpr.
func (_bacad SheetPrefixExpr )String ()string {return _bacad ._acaad };

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bdcb :=args [0];if _bdcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdae :=int (_bdcb .ValueNumber );if _gdae < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_gdae {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_gdae ];};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gacca :=args [0].AsString ();if _gacca .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_egag :=args [1].AsNumber ();if _egag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcc :=_gacca .ValueString ;if len (_egcc )> 2&&(_cf .HasPrefix (_egcc ,"\u0030\u0078")||_cf .HasPrefix (_egcc ,"\u0030\u0058")){_egcc =_egcc [2:];};_beec ,_caac :=_ge .ParseInt (_egcc ,int (_egag .ValueNumber ),64);if _caac !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_beec ));};const _gaaba =57375;

// ErrorType is a formula evaluation error type.
type ErrorType byte ;func _ead (_fbf []Result ,_eceb string )(*couponArgs ,Result ){_dabf :=len (_fbf );if _dabf !=3&&_dabf !=4{return nil ,MakeErrorResult (_eceb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecba ,_gdce ,_bdcg :=_dfba (_fbf [0],_fbf [1],_eceb );if _bdcg .Type ==ResultTypeError {return nil ,_bdcg ;};if _fbf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eceb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdca :=_fbf [2].ValueNumber ;if !_dag (_cdca ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_eceb );};_fdef :=0;if _dabf ==4&&_fbf [3].Type !=ResultTypeEmpty {if _fbf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eceb +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdef =int (_fbf [3].ValueNumber );if !_ddcf (_fdef ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_eceb );};};return &couponArgs {_ecba ,_gdce ,int (_cdca ),_fdef },_fad ;};func _fbbc (_afee string ,_efcbd []Result )(*parsedSearchObject ,Result ){_ffbff :=len (_efcbd );if _ffbff !=2&&_ffbff !=3{return nil ,MakeErrorResult (_afee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cddde :=_efcbd [0];if _cddde .Type ==ResultTypeError {return nil ,_cddde ;};if _cddde .Type !=ResultTypeString &&_cddde .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_facaa :=_efcbd [1];if _facaa .Type ==ResultTypeError {return nil ,_facaa ;};if _facaa .Type !=ResultTypeString &&_facaa .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_ddeef :=_facaa .Value ();_bagc :=_cddde .Value ();_cbcaa :=1;if _ffbff ==3&&_efcbd [2].Type !=ResultTypeEmpty {_fdeec :=_efcbd [2];if _fdeec .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_cbcaa =int (_fdeec .ValueNumber );if _cbcaa < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _cbcaa > len (_ddeef ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_bagc ,_ddeef ,_cbcaa },_fad ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_feafe VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ebfg :=_feafe .verticalRangeReference ();if _cgfddg ,_ggfab :=ev .GetFromCache (_ebfg );_ggfab {return _cgfddg ;};_dcbe ,_efdec :=_beeb (ctx ,_feafe ._bdceb ,_feafe ._aeae );_eaba :=_fbae (ctx ,ev ,_dcbe ,_efdec );ev .SetCache (_ebfg ,_eaba );return _eaba ;};var _bfbgc =[...]int {0};func _gbfbf (_adag Result )*criteriaParsed {_eaeb :=_adag .Type ==ResultTypeNumber ;_cbba :=_adag .ValueNumber ;_efbfb :=_cf .ToLower (_adag .ValueString );_cffbf :=_eefa (_efbfb );return &criteriaParsed {_eaeb ,_cbba ,_efbfb ,_cffbf };};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfff :=args [0].AsString ();if _cfff .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_cf .ToUpper (_cfff .ValueString ));};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dfabe :=ctx .GetEpoch ();_efgf ,_dgbf :=_dceff (args [0].Value (),_dfabe );if _dgbf !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ecdce :=_efgf .Year ();return MakeBoolResult (_ffcf (_ecdce ));};func _dfbee (_bgfeg []Result )[]rangeIndex {_befa :=[]rangeIndex {};_acdfa :=len (_bgfeg );for _cbec :=0;_cbec < _acdfa -1;_cbec +=2{_bgbd :=[]rangeIndex {};_cgfa :=_aadc (_bgfeg [_cbec ]);_fdcg :=_gbfbf (_bgfeg [_cbec +1]);if _cbec ==0{for _eacgc ,_dbfge :=range _cgfa {for _cgab ,_dgaab :=range _dbfge {if _bdcc (_dgaab ,_fdcg ){_bgbd =append (_bgbd ,rangeIndex {_eacgc ,_cgab });};};};}else {for _ ,_bbad :=range _befa {_gaee :=_cgfa [_bbad ._abcb ][_bbad ._afdae ];if _bdcc (_gaee ,_fdcg ){_bgbd =append (_bgbd ,_bbad );};};};if len (_bgbd )==0{return []rangeIndex {};};_befa =_bgbd [:];};return _befa ;};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_fb ,_dae Expression ;_fa BinOpType ;};const _edfe =57356;

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_edeg (args ,_fggee ));};

// Reference returns a string reference value to a vertical range with prefix.
func (_affaa PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_bfaag :=_affaa ._dbfb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_affaa .verticalRangeReference (_bfaag .Value )};};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func _dgbfg (_fdeag [][]Result ,_ddee int )[][]Result {_aegf :=[][]Result {};for _beccc :=range _fdeag {if _beccc ==0{continue ;};_afac :=[]Result {};for _fcga :=range _fdeag {if _fcga ==_ddee {continue ;};_afac =append (_afac ,_fdeag [_beccc ][_fcga ]);};_aegf =append (_aegf ,_afac );};return _aegf ;};

// Reference returns an invalid reference for Error.
func (_cdb Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eval evaluates and returns a boolean.
func (_geec Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_geec ._eag )};func _febd (_dgfcca Result ,_fadff ,_adgd string )(float64 ,Result ){switch _dgfcca .Type {case ResultTypeEmpty :return 0,_fad ;case ResultTypeNumber :return _dgfcca .ValueNumber ,_fad ;case ResultTypeString :_bcdda ,_geef :=_ge .ParseFloat (_dgfcca .ValueString ,64);if _geef !=nil {return 0,MakeErrorResult (_adgd +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_fadff );};return _bcdda ,_fad ;default:return 0,MakeErrorResult (_fadff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_adgd +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};func _bcfgc (_feaff ,_fdfc []float64 ,_ccafe float64 )float64 {_edd :=_ccafe +1;_gaae :=0.0;_acb :=len (_feaff );_fgef :=_fdfc [0];for _cfedc :=1;_cfedc < _acb ;_cfedc ++{_dbdg :=(_fdfc [_cfedc ]-_fgef )/365;_gaae -=_dbdg *_feaff [_cfedc ]/_df .Pow (_edd ,_dbdg +1);};return _gaae ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_bead ,_dcbf :=_ead (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _dcbf .Type ==ResultTypeError {return _dcbf ;};return MakeNumberResult (_cgdd (_bead ._ffaf ,_bead ._cgdb ,_bead ._dacb ,_bead ._eef ));};func (_abcbe Result )String ()string {return _abcbe .Value ()};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_beff :=args [0];switch _beff .Type {case ResultTypeError :return _beff ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_beff .ValueNumber !=0);};if _beff .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _bafb (args );case ResultTypeArray :return _affc (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};func _cfggg (_fdfegf [][]Result )float64 {if len (_fdfegf )==2{_gaacc :=_fdfegf [0][0].AsNumber ();_dacf :=_fdfegf [0][1].AsNumber ();_adcab :=_fdfegf [1][0].AsNumber ();_adeab :=_fdfegf [1][1].AsNumber ();if _gaacc .Type !=ResultTypeNumber ||_dacf .Type !=ResultTypeNumber ||_adcab .Type !=ResultTypeNumber ||_adeab .Type !=ResultTypeNumber {return _df .NaN ();};return _gaacc .ValueNumber *_adeab .ValueNumber -_adcab .ValueNumber *_dacf .ValueNumber ;};_bcfd :=float64 (0);_fgdd :=float64 (1);for _fgfd :=range _fdfegf {_bcfd +=_fgdd *_fdfegf [0][_fgfd ].ValueNumber *_cfggg (_dgbfg (_fdfegf ,_fgfd ));_fgdd *=-1;};return _bcfd ;};var _fgad =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_ffcb :=len (args );if _ffcb < 4||_ffcb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fefe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebb :=args [1].ValueNumber ;if _cebb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acca :=args [2].ValueNumber ;if _acca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bbffe :=args [3].ValueNumber ;_gccff :=0.0;if _ffcb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gccff =args [4].ValueNumber ;};_gace :=0;if _ffcb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gace =int (args [5].ValueNumber );if _gace !=0{_gace =1;};};return MakeNumberResult (_bace (_fefe ,_cebb ,_acca ,_bbffe ,_gccff ,_gace ));};const _aaace =57369;const _dceee ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgdc :=args [0].AsNumber ();if _cgdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _cgdc .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gaac :=float64 (1);_feccd :=_df .Trunc (_cgdc .ValueNumber );for _edeb :=_feccd ;_edeb > 1;_edeb -=2{_gaac *=_edeb ;};return MakeNumberResult (_gaac );};type rangeIndex struct{_abcb int ;_afdae int ;};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_dbdggd .Lock ();defer _dbdggd .Unlock ();if _ ,_bdga :=_dafb [name ];_bdga {_gbf .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_dafb [name ]=fn ;};const _begd =-1000;

// String returns a string representation of PrefixExpr.
func (_ffcce PrefixExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021%\u0073",_ffcce ._begdf .String (),_ffcce ._ebade .String ());};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_dbdggd .Lock ();defer _dbdggd .Unlock ();if _gefd ,_acdae :=_ecefc [name ];_acdae {return _gefd ;};return nil ;};func _fcgd (_gddgg int )string {if _gddgg >=0&&_gddgg < len (_aedbb ){if _aedbb [_gddgg ]!=""{return _aedbb [_gddgg ];};};return _c .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_gddgg );};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_cbc :=len (args );if _cbc < 3||_cbc > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbgd :=args [0].ValueNumber ;if _bbgd !=float64 (int (_bbgd )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdba :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bcfa :=args [2].ValueNumber ;_gafgg :=0.0;if _cbc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gafgg =args [3].ValueNumber ;};_faf :=0.0;if _cbc >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_faf =args [4].ValueNumber ;if _faf !=0{_faf =1;};};_gega :=0.1;if _cbc >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gega =args [5].ValueNumber ;};_edbb :=100;_fggg :=0;_ccca :=false ;_eagf :=1e-6;_edggb :=_gega ;for _fggg < _edbb &&!_ccca {_efddg :=_df .Pow (_edggb +1,_bbgd );_bbec :=_df .Pow (_edggb +1,_bbgd -1);_dbed :=_edggb *_faf +1;_aefg :=_cdba *(_efddg -1);_bebb :=_gafgg +_efddg *_bcfa +_aefg *_dbed /_edggb ;_fdaaf :=_bbgd *_bbec *_bcfa -_aefg *_dbed /_df .Pow (_edggb ,2);_eecc :=(_bbgd *_cdba *_bbec *_dbed +_aefg *_faf )/_edggb ;_fdcbb :=_bebb /(_fdaaf +_eecc );if _df .Abs (_fdcbb )< _eagf {_ccca =true ;};_fggg ++;_edggb -=_fdcbb ;};return MakeNumberResult (_edggb );};var _cecf ,_cgceg ,_cgcc ,_ggddf ,_fccc ,_aaeg *_b .Regexp ;

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bfeda :=_cf .Split (v ,"\u003a");if len (_bfeda )!=2{return nil ;};_bedba ,_ :=_ge .Atoi (_bfeda [0]);_cded ,_ :=_ge .Atoi (_bfeda [1]);if _bedba > _cded {_bedba ,_cded =_cded ,_bedba ;};return HorizontalRange {_becdc :_bedba ,_dffga :_cded };};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cagg :=args [0].AsNumber ();if _cagg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcgea ,_cdbb :=_df .Modf (_cagg .ValueNumber );if _cdbb < 0{_gcgea --;};return MakeNumberResult (_gcgea );};func _afcf (_egbe ,_afaa ,_cbe int )float64 {return float64 (_cgbd (_egbe ,_da .Month (_afaa ),_cbe )/86400)+_aad ;};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_bafd PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_becca :=_bafd ._cagb .Reference (ctx ,ev );switch _becca .Type {case ReferenceTypeSheet :if _ccgef (_becca ,ctx ){return MakeErrorResultType (ErrorTypeName ,_c .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_becca .Value ));};_gaef :=_bafd .horizontalRangeReference (_becca .Value );if _eege ,_fedga :=ev .GetFromCache (_gaef );_fedga {return _eege ;};_febec :=ctx .Sheet (_becca .Value );_febfc ,_aaag :=_geac (_febec ,_bafd ._gdeab ,_bafd ._adbgd );_beda :=_fbae (_febec ,ev ,_febfc ,_aaag );ev .SetCache (_gaef ,_beda );return _beda ;default:return MakeErrorResult (_c .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_becca .Type ));};};const _feccg int =30;

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_dbdggd .Lock ();defer _dbdggd .Unlock ();if _ ,_eafda :=_ecefc [name ];_eafda {_gbf .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_ecefc [name ]=fn ;};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_fecg ,_ffbbbc :=_dcgfe (args ,false );if _ffbbbc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_fecg /_ffbbbc );};const (_bfcad countMode =iota ;_cace ;_fggee ;);

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_fdbaa string };

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _dbbgb (args ,true )};

// String returns a string representation of a horizontal range.
func (_dgcgf HorizontalRange )String ()string {return _dgcgf .horizontalRangeReference ()};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dabd :=args [0].ValueNumber ;if _dabd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aage :=args [1].ValueNumber ;if _aage <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggfa :=args [2].ValueNumber ;if _ggfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_df .Pow (_ggfa /_aage ,1/_dabd )-1);};var _aaad =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _bgag (_bfbb []Result ,_cefgc bool ,_eagdf string )Result {var _fbbg ,_gecc string ;if _cefgc {_fbbg ="\u0074\u0068\u0072e\u0065";_gecc ="\u006f\u0064\u0064";}else {_fbbg ="\u0074\u0077\u006f";_gecc ="\u0065\u0076\u0065\u006e";};_ccbb :=len (_bfbb );if (_cefgc &&_ccbb < 3)||(!_cefgc &&_ccbb < 2){return MakeErrorResult (_eagdf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_fbbg +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_ccbb /2*2==_ccbb )==_cefgc {return MakeErrorResult (_eagdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gecc +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_cedfc :=-1;_fdbeb :=-1;for _gcfdb :=0;_gcfdb < _ccbb ;_gcfdb +=2{_ecbbf :=_bfbb [_gcfdb ];if _ecbbf .Type !=ResultTypeArray &&_ecbbf .Type !=ResultTypeList {return MakeErrorResult (_eagdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_cgace :=_aadc (_ecbbf );if _fdbeb ==-1{_fdbeb =len (_cgace );_cedfc =len (_cgace [0]);}else if len (_cgace )!=_fdbeb ||len (_cgace [0])!=_cedfc {return MakeErrorResult (_eagdf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _cefgc &&_gcfdb ==0{_gcfdb --;};};return _fad ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_egcge :=_bgag (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _egcge .Type !=ResultTypeEmpty {return _egcge ;};_ebag :=_dfbee (args [1:]);_adfa :=-_df .MaxFloat64 ;_eceff :=_aadc (args [0]);for _ ,_aegc :=range _ebag {_bfag :=_eceff [_aegc ._abcb ][_aegc ._afdae ].ValueNumber ;if _adfa < _bfag {_adfa =_bfag ;};};if _adfa ==-_df .MaxFloat64 {_adfa =0;};return MakeNumberResult (float64 (_adfa ));};var _eab =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _geac (_dbff Context ,_gfbb ,_fdca int )(string ,string ){_geaf :="\u0041"+_ge .Itoa (_gfbb );_agbc :=_dbff .LastColumn (_gfbb ,_fdca );_bgedb :=_agbc +_ge .Itoa (_fdca );return _geaf ,_bgedb ;};func _eaag (_ddf ,_gef int )int {if _gef ==2&&_ffcf (_ddf ){return 29;}else {return _afeg [_gef -1];};};

// Reference returns a string reference value to a horizontal range with prefix.
func (_eeed PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_ceaf :=_eeed ._cagb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_eeed .horizontalRangeReference (_ceaf .Value )};};type tokenType int ;

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _bfcg (args ,false )};func _efc (_efed ,_deae float64 )bool {return _df .Abs (_efed -_deae )< 1.0e-6};

// Reference returns a string reference value to a sheet.
func (_dgbbe SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_dgbbe ._acaad };};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fdf :=_cf .ToLower (args [0].ValueString );if !_fffg (_fdf ){_ ,_ ,_ ,_ ,_feeg ,_ecf :=_eee (_fdf );if _ecf .Type ==ResultTypeError {_ecf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _ecf ;};if _feeg {return MakeNumberResult (0);};};_cbg ,_dee ,_ceb ,_ ,_agc :=_eacg (_fdf );if _agc .Type ==ResultTypeError {return _agc ;};return MakeNumberResult (_afcf (_cbg ,_dee ,_ceb ));};func _ffcfe (_gadbg ,_fgbc Expression )(Expression ,Expression ,error ){_dbac ,_ggfdf :=_gadbg .(CellRef );if !_ggfdf {return nil ,nil ,_e .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_gadbg .String ()));};_gbgc ,_ggfdf :=_fgbc .(CellRef );if !_ggfdf {return nil ,nil ,_e .New (_c .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fgbc .String ()));};_edgc ,_ddged :=_fg .ParseCellReference (_dbac ._dcd );if _ddged !=nil {return nil ,nil ,_ddged ;};_bfgc ,_gceb :=_fg .ParseCellReference (_gbgc ._dcd );if _gceb !=nil {return nil ,nil ,_gceb ;};_gfab :=false ;if _edgc .RowIdx > _bfgc .RowIdx {_gfab =true ;_edgc .RowIdx ,_bfgc .RowIdx =_bfgc .RowIdx ,_edgc .RowIdx ;};if _edgc .ColumnIdx > _bfgc .ColumnIdx {_gfab =true ;_edgc .ColumnIdx ,_bfgc .ColumnIdx =_bfgc .ColumnIdx ,_edgc .ColumnIdx ;_edgc .Column ,_bfgc .Column =_bfgc .Column ,_edgc .Column ;};if _gfab {return NewCellRef (_edgc .String ()),NewCellRef (_bfgc .String ()),nil ;};return _gadbg ,_fgbc ,nil ;};type cmpResult int8 ;func _afegf (_bbb ,_dcgf ,_edcf int )int {if _bbb > _dcgf {return 0;};if _fcca (_edcf ){return (_dcgf -_bbb +1)*360;};_fgd :=0;for _ggaa :=_bbb ;_ggaa <=_dcgf ;_ggaa ++{_febf :=365;if _ffcf (_ggaa ){_febf =366;};_fgd +=_febf ;};return _fgd ;};var _dafb =map[string ]Function {};func (_bebfd Result )AsString ()Result {switch _bebfd .Type {case ResultTypeNumber :return MakeStringResult (_bebfd .Value ());default:return _bebfd ;};};

// String returns a string representation of a vertical range.
func (_caaeg VerticalRange )String ()string {return _caaeg .verticalRangeReference ()};const _eddcb =57357;func _eaaa (_fggc ,_fdad []float64 ,_fgge float64 )Result {_gadg :=false ;_gcec :=false ;for _fbafa :=0;_fbafa < len (_fggc );_fbafa ++{if _fggc [_fbafa ]> 0{_gadg =true ;};if _fggc [_fbafa ]< 0{_gcec =true ;};};if !_gadg ||!_gcec {return MakeErrorResultType (ErrorTypeNum ,"");};_dcag :=_fgge ;_ccbe :=1e-10;_eafd :=0;_age :=50;_eggd :=false ;for {_faca :=_ccce (_fggc ,_fdad ,_dcag );_adgg :=_dcag -_faca /_bcfgc (_fggc ,_fdad ,_dcag );_bdde :=_df .Abs (_adgg -_dcag );_dcag =_adgg ;_eafd ++;if _bdde <=_ccbe ||_df .Abs (_faca )<=_ccbe {break ;};if _eafd > _age {_eggd =true ;break ;};};if _eggd ||_df .IsNaN (_dcag )||_df .IsInf (_dcag ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_dcag );};

// String returns a string representation of ConstArrayExpr.
func (_fdg ConstArrayExpr )String ()string {return ""};func _fea (_bgc ,_gdde float64 ,_adef ,_cgbc int )float64 {_bccb :=_feea (_bgc );_fega :=_feea (_gdde );if _cgbc ==1{_cacd :=_ddcd (_bccb ,_fega ,_adef ,1);_caafb :=_cacd .AddDate (0,12/_adef ,0);return _bgbf (_cacd ,_caafb ,_cgbc );};return float64 (_dbfe (0,_cgbc ))/float64 (_adef );};

// Reference returns a string reference value to an expression with prefix.
func (_decce PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_gecd :=_decce ._begdf .Reference (ctx ,ev );_badcg :=_decce ._ebade .Reference (ctx ,ev );if _gecd .Type ==ReferenceTypeSheet &&_badcg .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_gecd .Value +"\u0021"+_badcg .Value };};return ReferenceInvalid ;};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_aag :=args [0];switch _aag .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_bgg :=_feea (_aag .ValueNumber );return MakeNumberResult (float64 (_bgg .Month ()));case ResultTypeString :_cfbd :=_cf .ToLower (_aag .ValueString );if !_fffg (_cfbd ){_ ,_ ,_ ,_ ,_gea ,_cfeb :=_eee (_cfbd );if _cfeb .Type ==ResultTypeError {_cfeb .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _cfeb ;};if _gea {return MakeNumberResult (1);};};_ ,_fbba ,_ ,_ ,_cfad :=_eacg (_cfbd );if _cfad .Type ==ResultTypeError {return _cfad ;};return MakeNumberResult (float64 (_fbba ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fgcg :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_fgcg *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_ebeab :=_aadc (args [1]);for _ ,_faba :=range _ebeab {for _ ,_bdee :=range _faba {if _bdee .Type !=ResultTypeNumber ||_bdee .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_fgcg *=1.0+_bdee .ValueNumber ;};};return MakeNumberResult (_fgcg );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// Update updates references in the Range after removing a row/column.
func (_bfced Range )Update (q *_dd .UpdateQuery )Expression {_cgbf :=_bfced ;if q .UpdateCurrentSheet {_cgbf ._aafd =_bfced ._aafd .Update (q );_cgbf ._daba =_bfced ._daba .Update (q );};return _cgbf ;};

// CellRef is a reference to a single cell
type CellRef struct{_dcd string };

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_aafba .Float64 ());};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cggce :=args [0].Ref ;for _cggce .Type ==ReferenceTypeNamedRange {_cggce =ctx .NamedRange (_cggce .Value );};_dfgb :="";switch _cggce .Type {case ReferenceTypeCell :_dfgb =_cggce .Value ;case ReferenceTypeRange :_fadd :=_cf .Split (_cggce .Value ,"\u003a");if len (_fadd )==2{_dfgb =_fadd [0];};default:return MakeErrorResult (_c .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_cggce .Type ));};_bcfad ,_fddfd :=_fg .ParseCellReference (_dfgb );if _fddfd !=nil {return MakeErrorResult (_c .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_fddfd .Error ()));};_efaee ,_ecda ,_cdfd :=_bcfad .Column ,_bcfad .RowIdx ,_bcfad .SheetName ;_ecef :=args [1].AsNumber ();if _ecef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_cccb :=args [2].AsNumber ();if _cccb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _eegd ,_affba Result ;if len (args )==3{_eegd =MakeNumberResult (1);_affba =MakeNumberResult (1);}else {_eegd =args [3].AsNumber ();if _eegd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _eegd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_affba =args [4].AsNumber ();if _affba .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _affba .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_bcdc :=_fg .ColumnToIndex (_efaee );_bebg :=_ecda +uint32 (_ecef .ValueNumber );_dgcg :=_bcdc +uint32 (_cccb .ValueNumber );_gbec :=_bebg +uint32 (_eegd .ValueNumber );_degc :=_dgcg +uint32 (_affba .ValueNumber );if _eegd .ValueNumber > 0{_gbec --;}else {_gbec ++;_bebg ,_gbec =_gbec ,_bebg ;};if _affba .ValueNumber > 0{_degc --;}else {_degc ++;_dgcg ,_degc =_degc ,_dgcg ;};_babb :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_fg .IndexToColumn (_dgcg ),_bebg );_agffe :=_c .Sprintf ("\u0025\u0073\u0025\u0064",_fg .IndexToColumn (_degc ),_gbec );if _cdfd ==""{return _fbae (ctx ,ev ,_babb ,_agffe );}else {return _fbae (ctx .Sheet (_cdfd ),ev ,_babb ,_agffe );};};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_gbaa :=len (args );if _gbaa ==0||_gbaa > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_dcee :=_aadc (args [0]);_cfgg :=[]float64 {};for _ ,_ecea :=range _dcee {for _ ,_bgbe :=range _ecea {if _bgbe .Type ==ResultTypeNumber &&!_bgbe .IsBoolean {_cfgg =append (_cfgg ,_bgbe .ValueNumber );};};};_dfc :=len (_cfgg );if len (_cfgg )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_efbb :=0.1;if _gbaa ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_efbb =args [1].ValueNumber ;if _efbb <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_egge :=[]float64 {};for _gdda :=0;_gdda < _dfc ;_gdda ++{if _gdda ==0{_egge =append (_egge ,0);}else {_egge =append (_egge ,_egge [_gdda -1]+365);};};return _eaaa (_cfgg ,_egge ,_efbb );};const _affg =57363;type parsedReplaceObject struct{_facg string ;_bgdc int ;_bdcec int ;_gefec string ;};type plex struct{_fdec chan *node ;_bcgc Expression ;_bbgdf string ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_bbde ,_cgeb :=_ebaee ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _cgeb .Type !=ResultTypeEmpty {return _cgeb ;};_cbgeag :=_bbde ._facg ;_ecag :=_bbde ._bgdc ;_cfbc :=_bbde ._bdcec ;_fege :=_bbde ._gefec ;_fgfdf :=len (_cbgeag );if _ecag > _fgfdf {_ecag =_fgfdf ;};_ggeag :=_ecag +_cfbc ;if _ggeag > _fgfdf {_ggeag =_fgfdf ;};_fdeab :=_cbgeag [0:_ecag ]+_fege +_cbgeag [_ggeag :];return MakeStringResult (_fdeab );};type node struct{_dgdf tokenType ;_egadf string ;};func _abgf (_bgef []Result ,_ecdg bool )Result {var _cbbd string ;if _ecdg {_cbbd ="\u004c\u0041\u0052G\u0045";}else {_cbbd ="\u0053\u004d\u0041L\u004c";};if len (_bgef )!=2{return MakeErrorResult (_cbbd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fffdc :=_bgef [0];var _efefc [][]Result ;switch _fffdc .Type {case ResultTypeArray :_efefc =_fffdc .ValueArray ;case ResultTypeList :_efefc =[][]Result {_fffdc .ValueList };default:return MakeErrorResult (_cbbd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_efefc )==0{return MakeErrorResult (_cbbd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _bgef [1].Type !=ResultTypeNumber {return MakeErrorResult (_cbbd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ffdg :=_bgef [1].ValueNumber ;if _ffdg < 1{return MakeErrorResultType (ErrorTypeNum ,_cbbd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_geeec :=int (_ffdg );if float64 (_geeec )!=_ffdg {return MakeErrorResultType (ErrorTypeNum ,_cbbd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_dgdg :=[]float64 {};for _ ,_cbaf :=range _efefc {for _ ,_bebge :=range _cbaf {if _bebge .Type ==ResultTypeNumber {_dgdg =append (_dgdg ,_bebge .ValueNumber );};};};if _geeec > len (_dgdg ){return MakeErrorResultType (ErrorTypeNum ,_cbbd +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gegea :=_fed .MergeSort (_dgdg );if _ecdg {return MakeNumberResult (_gegea [len (_gegea )-_geeec ]);}else {return MakeNumberResult (_gegea [_geeec -1]);};};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func (_aedbbg VerticalRange )verticalRangeReference ()string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_aedbbg ._bdceb ,_aedbbg ._aeae );};func _fdfce (_gbad Result ,_caba int )[]Result {_bfeea :=[]Result {};switch _gbad .Type {case ResultTypeList :_deea :=_gbad .ValueList ;_eedb :=len (_deea );for _cfbfe :=0;_cfbfe < _caba ;_cfbfe ++{if _cfbfe < _eedb {_bfeea =append (_bfeea ,_deea [_cfbfe ]);}else {_bfeea =append (_bfeea ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _dbcf :=0;_dbcf < _caba ;_dbcf ++{_bfeea =append (_bfeea ,_gbad );};};return _bfeea ;};

// FunctionCall is a function call expression.
type FunctionCall struct{_ecabd string ;_acdfb []Expression ;};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};func _egaa (_cbd ,_fdfg ,_gafc ,_bcca int )int {if !_fcca (_bcca ){return _gafc ;};_fbde :=_gafc ;_dadc :=_eaag (_cbd ,_fdfg );if _fbde > 30||_gafc >=_dadc ||_fbde >=_dadc {_fbde =30;};return _fbde ;};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_cdda :=_cf .Split (v ,"\u003a");if len (_cdda )!=2{return nil ;};if _cdda [0]> _cdda [1]{_cdda [0],_cdda [1]=_cdda [1],_cdda [0];};return PrefixVerticalRange {_dbfb :pfx ,_aecfc :_cdda [0],_dacdb :_cdda [1]};};const _dgeed =187;

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bbfe :=_cf .ToLower (args [0].ValueString );if !_fge (_bbfe ){_ ,_ ,_ ,_dbec ,_fce :=_eacg (_bbfe );if _fce .Type ==ResultTypeError {_fce .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _fce ;};if _dbec {return MakeNumberResult (0);};};_aae ,_aef ,_gda ,_caf ,_ ,_egdb :=_eee (_bbfe );if _egdb .Type ==ResultTypeError {return _egdb ;};_bfga :=_bee (float64 (_aae ),float64 (_aef ),_gda );if _caf {_bfga +=0.5;}else if _bfga >=1{_bfga -=float64 (int (_bfga ));};return MakeNumberResult (_bfga );};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_acaad :s }};type yySymType struct{_agbgg int ;_efce *node ;_fbbb Expression ;_acag []Expression ;_fffc [][]Expression ;};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_ffgb :=args [0];if _ffgb .Type !=ResultTypeArray &&_ffgb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_baea :=_ffgb .ValueArray ;if len (_baea )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_baea [0])));};var _afb =[]*_b .Regexp {};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bff :=args [1].ValueNumber ;_gga :=args [0];var _fec float64 ;switch _gga .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_fec =_gga .ValueNumber ;case ResultTypeString :_bac :=DateValue ([]Result {args [0]});if _bac .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_fec =_bac .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cgd :=_feea (_fec );_cad :=_cgd .AddDate (0,int (_bff ),0);_cfaf ,_gaaf ,_bccce :=_cad .Date ();_egbd :=_afcf (_cfaf ,int (_gaaf ),_bccce );if _egbd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_egbd );};

// Eval evaluates and returns the result of a function call.
func (_bdac FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_dfcb :=LookupFunction (_bdac ._ecabd );if _dfcb !=nil {_bebgd :=make ([]Result ,len (_bdac ._acdfb ));for _cgdf ,_fffgg :=range _bdac ._acdfb {_bebgd [_cgdf ]=_fffgg .Eval (ctx ,ev );_bebgd [_cgdf ].Ref =_fffgg .Reference (ctx ,ev );};if _ ,_eagac :=_fddd [_bdac ._ecabd ];!_eagac {if _bfdbb ,_babf :=_acade (_bebgd );_bfdbb {return _babf ;};};return _dfcb (_bebgd );};_dceab :=LookupFunctionComplex (_bdac ._ecabd );if _dceab !=nil {_feadf :=make ([]Result ,len (_bdac ._acdfb ));for _efcc ,_bfccg :=range _bdac ._acdfb {_feadf [_efcc ]=_bfccg .Eval (ctx ,ev );_feadf [_efcc ].Ref =_bfccg .Reference (ctx ,ev );};if _ ,_ccafeb :=_fddd [_bdac ._ecabd ];!_ccafeb {if _edddd ,_gggf :=_acade (_feadf );_edddd {return _gggf ;};};return _dceab (ctx ,ev ,_feadf );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_bdac ._ecabd );};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_edeef :=_bgag (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _edeef .Type !=ResultTypeEmpty {return _edeef ;};_gcaf :=_dfbee (args [1:]);_cebfb :=_df .MaxFloat64 ;_bcfbc :=_aadc (args [0]);for _ ,_daae :=range _gcaf {_acfg :=_bcfbc [_daae ._abcb ][_daae ._afdae ].ValueNumber ;if _cebfb > _acfg {_cebfb =_acfg ;};};if _cebfb ==_df .MaxFloat64 {_cebfb =0;};return MakeNumberResult (float64 (_cebfb ));};

// String returns a string representation for Negate.
func (_fffa Negate )String ()string {return "\u002d"+_fffa ._fgccf .String ()};var _edfeb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_ac ,_fac :=_ge .ParseBool (v );if _fac !=nil {_gbf .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_fac );};return Bool {_eag :_ac };};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbfag :=args [0].AsNumber ();if _cbfag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_df .Pi *_cbfag .ValueNumber );};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aadf :=args [0].ValueNumber ;if _aadf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgca :=args [1].ValueNumber ;if _bgca <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbcca :=args [2].ValueNumber ;if _fbcca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_df .Log10 (_fbcca )-_df .Log10 (_bgca ))/_df .Log10 (1+_aadf ));};func _ddcf (_gafcf int )bool {return _gafcf >=0&&_gafcf <=4};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ccd [][]Expression };

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_ccea ,_aafb ,_cgf :=_dgg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _cgf .Type ==ResultTypeError {return _cgf ;};if _aafb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _ccea ==0{return MakeNumberResult (0);};_cecg :=_ccea < 0;if _cecg {_ccea =-_ccea ;};_aaeb :=float64 (int (_ccea ));_fade :=args [0].Value ();_aeba :=_cf .Split (_fade ,"\u002e");_dea :=0.0;if len (_aeba )> 1{var _dbae error ;_becf :=_aeba [1];_dea ,_dbae =_ge .ParseFloat (_becf ,64);if _dbae !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_bae :=float64 (len (_becf ));_dea /=_df .Pow (10,_bae );};_dddf :=_dea *_aafb /_df .Pow (10,float64 (int (_df .Log10 (_aafb )))+1)+_aaeb ;if _cecg {_dddf =-_dddf ;};return MakeNumberResult (_dddf );};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gcgf :=args [0];switch _gcgf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_dbf :=_feea (_gcgf .ValueNumber );return MakeNumberResult (float64 (_dbf .Minute ()));case ResultTypeString :_cbb :=_cf .ToLower (_gcgf .ValueString );if !_fge (_cbb ){_ ,_ ,_ ,_acef ,_dfea :=_eacg (_cbb );if _dfea .Type ==ResultTypeError {_dfea .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _dfea ;};if _acef {return MakeNumberResult (0);};};_ ,_bfc ,_ ,_ ,_ ,_egd :=_eee (_cbb );if _egd .Type ==ResultTypeError {return _egd ;};return MakeNumberResult (float64 (_bfc ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_dbeg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dbeg =int (args [1].ValueNumber );if _dbeg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _dbeg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_dbbgbe :=args [0].Value ();if _dbeg > len (_dbbgbe ){return MakeStringResult (_dbbgbe );};return MakeStringResult (_dbbgbe [0:_dbeg ]);};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_abbb :=ctx .GetEpoch ();_cae ,_babcf :=_dceff (args [0].Value (),_abbb );if _babcf !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_cae .Year ()));};func _feea (_daeac float64 )_da .Time {_ebf :=int64 ((_daeac -_aad )*_edg );return _da .Unix (0,_ebf ).UTC ();};const _fbg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";const _efac =57354;func _ccgb (){_cecf =_b .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_cgceg =_b .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_ggddf =_b .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_cgcc =_b .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_aaeg =_b .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_fccc =_b .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};const _bbegg =57377;func _fceg (_faaa _da .Time )_da .Time {_faaa =_faaa .UTC ();return _da .Date (_faaa .Year (),_faaa .Month (),_faaa .Day (),_faaa .Hour (),_faaa .Minute (),_faaa .Second (),_faaa .Nanosecond (),_da .Local );};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_ceeff :=1.0;for _ ,_ffabd :=range args {_ffabd =_ffabd .AsNumber ();switch _ffabd .Type {case ResultTypeNumber :_ceeff *=_ffabd .ValueNumber ;case ResultTypeList ,ResultTypeArray :_baegb :=Product (_ffabd .ListValues ());if _baegb .Type !=ResultTypeNumber {return _baegb ;};_ceeff *=_baegb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ffabd ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_ffabd .Type ));};};return MakeNumberResult (_ceeff );};func _decf (_dgea Result )bool {_cedd :=_dgea .Type ;return _cedd !=ResultTypeArray &&_cedd !=ResultTypeList ;};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfdd :=int (args [0].ValueNumber );return MakeBoolResult (_cfdd !=_cfdd /2*2);};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_gbgd SheetPrefixExpr )Update (q *_dd .UpdateQuery )Expression {return _gbgd };func _aeefb (_fadc ,_cecgba Result ,_ffeea string )(*xargs ,Result ){if _fadc .Type !=ResultTypeList &&_fadc .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ffeea +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_febb :=_aadc (_fadc );_ecfe :=[]float64 {};for _ ,_aecb :=range _febb {for _ ,_cfcc :=range _aecb {if _cfcc .Type ==ResultTypeNumber &&!_cfcc .IsBoolean {_ecfe =append (_ecfe ,_cfcc .ValueNumber );}else {return nil ,MakeErrorResult (_ffeea +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_cbea :=len (_ecfe );if len (_ecfe )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _cecgba .Type !=ResultTypeList &&_cecgba .Type !=ResultTypeArray {return nil ,MakeErrorResult (_ffeea +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_cfgef :=_aadc (_cecgba );_bgbab :=[]float64 {};_ebeag :=0.0;for _ ,_cfgd :=range _cfgef {for _ ,_aagfd :=range _cfgd {if _aagfd .Type ==ResultTypeNumber &&!_aagfd .IsBoolean {_dcdcf :=float64 (int (_aagfd .ValueNumber ));if _dcdcf < _ebeag {return nil ,MakeErrorResultType (ErrorTypeNum ,_ffeea +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_bgbab =append (_bgbab ,_dcdcf );_ebeag =_dcdcf ;}else {return nil ,MakeErrorResult (_ffeea +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_bgbab )!=_cbea {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_ecfe ,_bgbab },MakeEmptyResult ();};func (_gaace *yyParserImpl )Parse (yylex yyLexer )int {_bcfcc :=_da .Now ();var _fbdcea int ;var _fdege yySymType ;var _cagc []yySymType ;_ =_cagc ;_dfgfb :=_gaace ._eceec [:];Nerrs :=0;Errflag :=0;_adde :=0;_gaace ._gbde =-1;_ebdfe :=-1;defer func (){_adde =-1;_gaace ._gbde =-1;_ebdfe =-1}();_gcbd :=-1;goto _gcgbce ;_fcgfa :return 0;_badd :return 1;_gcgbce :if _gafbg (_bcfcc ){_gbf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _badd ;};if _ggfac >=4{_c .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_acda (_ebdfe ),_fcgd (_adde ));};_gcbd ++;if _gcbd >=len (_dfgfb ){_beba :=make ([]yySymType ,len (_dfgfb )*2);copy (_beba ,_dfgfb );_dfgfb =_beba ;};_dfgfb [_gcbd ]=_fdege ;_dfgfb [_gcbd ]._agbgg =_adde ;_geefe :if _gafbg (_bcfcc ){_gbf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _badd ;};_fbdcea =_ebbce [_adde ];if _fbdcea <=_begd {goto _dadb ;};if _gaace ._gbde < 0{_gaace ._gbde ,_ebdfe =_edaab (yylex ,&_gaace ._fecd );};_fbdcea +=_ebdfe ;if _fbdcea < 0||_fbdcea >=_dgeed {goto _dadb ;};_fbdcea =_cbcad [_fbdcea ];if _ebfee [_fbdcea ]==_ebdfe {_gaace ._gbde =-1;_ebdfe =-1;_fdege =_gaace ._fecd ;_adde =_fbdcea ;if Errflag > 0{Errflag --;};goto _gcgbce ;};_dadb :if _gafbg (_bcfcc ){_gbf .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _badd ;};_fbdcea =_bcff [_adde ];if _fbdcea ==-2{if _gaace ._gbde < 0{_gaace ._gbde ,_ebdfe =_edaab (yylex ,&_gaace ._fecd );};_gbgad :=0;for {if _bfbf [_gbgad +0]==-1&&_bfbf [_gbgad +1]==_adde {break ;};_gbgad +=2;};for _gbgad +=2;;_gbgad +=2{_fbdcea =_bfbf [_gbgad +0];if _fbdcea < 0||_fbdcea ==_ebdfe {break ;};};_fbdcea =_bfbf [_gbgad +1];if _fbdcea < 0{goto _fcgfa ;};};if _fbdcea ==0{switch Errflag {case 0:yylex .Error (_gfdg (_adde ,_ebdfe ));Nerrs ++;if _ggfac >=1{_c .Printf ("\u0025\u0073",_fcgd (_adde ));_c .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_acda (_ebdfe ));};fallthrough;case 1,2:Errflag =3;for _gcbd >=0{_fbdcea =_ebbce [_dfgfb [_gcbd ]._agbgg ]+_fbgb ;if _fbdcea >=0&&_fbdcea < _dgeed {_adde =_cbcad [_fbdcea ];if _ebfee [_adde ]==_fbgb {goto _gcgbce ;};};if _ggfac >=2{_c .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_dfgfb [_gcbd ]._agbgg );};_gcbd --;};goto _badd ;case 3:if _ggfac >=2{_c .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_acda (_ebdfe ));};if _ebdfe ==_dbag {goto _badd ;};_gaace ._gbde =-1;_ebdfe =-1;goto _geefe ;};};if _ggfac >=2{_c .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_fbdcea ,_fcgd (_adde ));};_cggcb :=_fbdcea ;_ebeagg :=_gcbd ;_ =_ebeagg ;_gcbd -=_ffcab [_fbdcea ];if _gcbd +1>=len (_dfgfb ){_gedgf :=make ([]yySymType ,len (_dfgfb )*2);copy (_gedgf ,_dfgfb );_dfgfb =_gedgf ;};_fdege =_dfgfb [_gcbd +1];_fbdcea =_bacaf [_fbdcea ];_eefad :=_fbcg [_fbdcea ];_aecbd :=_eefad +_dfgfb [_gcbd ]._agbgg +1;if _aecbd >=_dgeed {_adde =_cbcad [_eefad ];}else {_adde =_cbcad [_aecbd ];if _ebfee [_adde ]!=-_fbdcea {_adde =_cbcad [_eefad ];};};switch _cggcb {case 1:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{yylex .(*plex )._bcgc =_fdege ._fbbb ;};case 3:_cagc =_dfgfb [_ebeagg -2:_ebeagg +1];{_fdege ._fbbb =_cagc [2]._fbbb ;};case 4:_cagc =_dfgfb [_ebeagg -4:_ebeagg +1];{};case 5:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewBool (_cagc [1]._efce ._egadf );};case 6:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewNumber (_cagc [1]._efce ._egadf );};case 7:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewString (_cagc [1]._efce ._egadf );};case 8:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewError (_cagc [1]._efce ._egadf );};case 9:_cagc =_dfgfb [_ebeagg -2:_ebeagg +1];{_fdege ._fbbb =_cagc [2]._fbbb ;};case 10:_cagc =_dfgfb [_ebeagg -2:_ebeagg +1];{_fdege ._fbbb =NewNegate (_cagc [2]._fbbb );};case 15:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =_cagc [2]._fbbb ;};case 17:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewConstArrayExpr (_cagc [2]._fffc );};case 18:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fffc =append (_fdege ._fffc ,_cagc [1]._acag );};case 19:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fffc =append (_cagc [1]._fffc ,_cagc [3]._acag );};case 20:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._acag =append (_fdege ._acag ,_cagc [1]._fbbb );};case 21:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._acag =append (_cagc [1]._acag ,_cagc [3]._fbbb );};case 23:_cagc =_dfgfb [_ebeagg -2:_ebeagg +1];{_fdege ._fbbb =NewPrefixExpr (_cagc [1]._fbbb ,_cagc [2]._fbbb );};case 25:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewSheetPrefixExpr (_cagc [1]._efce ._egadf );};case 26:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewCellRef (_cagc [1]._efce ._egadf );};case 27:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewRange (_cagc [1]._fbbb ,_cagc [3]._fbbb );};case 28:_cagc =_dfgfb [_ebeagg -4:_ebeagg +1];{_fdege ._fbbb =NewPrefixRangeExpr (_cagc [1]._fbbb ,_cagc [2]._fbbb ,_cagc [4]._fbbb );};case 29:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewNamedRangeRef (_cagc [1]._efce ._egadf );};case 30:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewHorizontalRange (_cagc [1]._efce ._egadf );};case 31:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._fbbb =NewVerticalRange (_cagc [1]._efce ._egadf );};case 32:_cagc =_dfgfb [_ebeagg -2:_ebeagg +1];{_fdege ._fbbb =NewPrefixHorizontalRange (_cagc [1]._fbbb ,_cagc [2]._efce ._egadf );};case 33:_cagc =_dfgfb [_ebeagg -2:_ebeagg +1];{_fdege ._fbbb =NewPrefixVerticalRange (_cagc [1]._fbbb ,_cagc [2]._efce ._egadf );};case 34:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypePlus ,_cagc [3]._fbbb );};case 35:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeMinus ,_cagc [3]._fbbb );};case 36:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeMult ,_cagc [3]._fbbb );};case 37:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeDiv ,_cagc [3]._fbbb );};case 38:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeExp ,_cagc [3]._fbbb );};case 39:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeLT ,_cagc [3]._fbbb );};case 40:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeGT ,_cagc [3]._fbbb );};case 41:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeLEQ ,_cagc [3]._fbbb );};case 42:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeGEQ ,_cagc [3]._fbbb );};case 43:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeEQ ,_cagc [3]._fbbb );};case 44:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeNE ,_cagc [3]._fbbb );};case 45:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewBinaryExpr (_cagc [1]._fbbb ,BinOpTypeConcat ,_cagc [3]._fbbb );};case 47:_cagc =_dfgfb [_ebeagg -2:_ebeagg +1];{_fdege ._fbbb =NewFunction (_cagc [1]._efce ._egadf ,nil );};case 48:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._fbbb =NewFunction (_cagc [1]._efce ._egadf ,_cagc [2]._acag );};case 49:_cagc =_dfgfb [_ebeagg -1:_ebeagg +1];{_fdege ._acag =append (_fdege ._acag ,_cagc [1]._fbbb );};case 50:_cagc =_dfgfb [_ebeagg -3:_ebeagg +1];{_fdege ._acag =append (_cagc [1]._acag ,_cagc [3]._fbbb );};case 53:_cagc =_dfgfb [_ebeagg -0:_ebeagg +1];{_fdege ._fbbb =NewEmptyExpr ();};};goto _gcgbce ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gaab :=args [0].AsNumber ();if _gaab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_faea :=float64 (1);_cabg :=args [1].AsNumber ();if _cabg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_faea =_cabg .ValueNumber ;if _faea < 0&&_gaab .ValueNumber > 0||_faea > 0&&_gaab .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_aaec :=_gaab .ValueNumber ;_aaec ,_bbcf :=_df .Modf (_aaec /_faea );if _df .Trunc (_bbcf +0.5)> 0{_aaec ++;};return MakeNumberResult (_aaec *_faea );};func (_de BinOpType )String ()string {if _de >=BinOpType (len (_cd )-1){return _c .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_de );};return _gbe [_cd [_de ]:_cd [_de +1]];};var _aad float64 =25569.0;

// Db implements the Excel DB function.
func Db (args []Result )Result {_ebae :=len (args );if _ebae !=4&&_ebae !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbbb :=args [0].ValueNumber ;if _gbbb < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afga :=args [1].ValueNumber ;if _afga < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddda :=args [2].ValueNumber ;if _ddda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ceg :=args [3].ValueNumber ;if _ceg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _ceg -_ddda > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_edaa :=12.0;if _ebae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edaa =args [4].ValueNumber ;if _edaa < 1||_edaa > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _edaa ==12&&_ceg > _ddda {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _afga >=_gbbb {return MakeNumberResult (0);};_ebfe :=1-_df .Pow (_afga /_gbbb ,1/_ddda );_ebfe =float64 (int (_ebfe *1000+0.5))/1000;_fdea :=_gbbb *_ebfe *_edaa /12;if _ceg ==1{return MakeNumberResult (_fdea );};_acaae :=_fdea ;_fffb :=0.0;_cabca :=_ddda ;if _cabca > _ceg {_cabca =_ceg ;};for _dca :=2.0;_dca <=_cabca ;_dca ++{_fffb =(_gbbb -_acaae )*_ebfe ;_acaae +=_fffb ;};if _ceg > _ddda {return MakeNumberResult ((_gbbb -_acaae )*_ebfe *(12-_edaa )/12);};return MakeNumberResult (_fffb );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dced :=args [0].AsString ();if _dced .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_acdea :=_d .Buffer {};for _ ,_dbdd :=range _dced .ValueString {if _a .IsPrint (_dbdd ){_acdea .WriteRune (_dbdd );};};return MakeStringResult (_acdea .String ());};

// Bool is a boolean expression.
type Bool struct{_eag bool };

// IsBool returns false for the invalid reference context.
func (_bdad *ivr )IsBool (cellRef string )bool {return false };func (_gag *evCache )GetFromCache (key string )(Result ,bool ){_gag ._bb .Lock ();_dacd ,_ced :=_gag ._db [key ];_gag ._bb .Unlock ();return _dacd ,_ced ;};func (_accc *Lexer )nextRaw ()*node {for len (_accc ._gada )!=0{_cbfaa :=<-_accc ._gada [len (_accc ._gada )-1];if _cbfaa !=nil {return _cbfaa ;};_accc ._gada =_accc ._gada [0:len (_accc ._gada )-1];};return <-_accc ._fgadf ;};func (_gcebb ResultType )String ()string {if _gcebb >=ResultType (len (_cfac )-1){return _c .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gcebb );};return _dceee [_cfac [_gcebb ]:_cfac [_gcebb +1]];};const _dfffg ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_aed ,_dfef :=_geae (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _dfef .Type ==ResultTypeError {return _dfef ;};_bbab :=_aed ._bbbe ;_abcc :=_aed ._gdag ;_dfdc :=_aed ._dcdc ;_acff :=_aed ._gdg ;_bgcg :=_aed ._dgcb ;_gbca :=_aed ._cbfa ;if _gbca >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_dedb :=_aed ._eeff ;_edab :=1.0/_gbca ;_gfeb :=2.5;if _edab < 3{_gfeb =1;}else if _edab < 5{_gfeb =1.5;}else if _edab <=6{_gfeb =2;};_gbca *=_gfeb ;_dfbd ,_bbgc :=_ffbd (_abcc ,_dfdc ,_dedb );if _bbgc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_eefg :=_eaff (_dfbd *_gbca *_bbab );_bbab -=_eefg ;_cadg :=_bbab -_acff ;for _feaf :=0;_feaf < _bgcg ;_feaf ++{_eefg =_eaff (_gbca *_bbab );_cadg -=_eefg ;if _cadg < 0{switch _bgcg -_feaf {case 0:case 1:return MakeNumberResult (_eaff (_bbab *0.5));default:return MakeNumberResult (0);};};_bbab -=_eefg ;};return MakeNumberResult (_eefg );};func _ddcd (_aeea ,_dbc _da .Time ,_eec ,_ggf int )_da .Time {_cfed :=_dbc ;_bbca :=_aeea .Year ()-_dbc .Year ();_cfed =_cfed .AddDate (_bbca ,0,0);if _aeea .After (_cfed ){_cfed =_cfed .AddDate (1,0,0);};_egdg :=-12/_eec ;for _cfed .After (_aeea ){_cfed =_cfed .AddDate (0,_egdg ,0);};return _cfed ;};func (_cafa *ivr )Sheet (name string )Context {return _cafa };const _bfage =57352;

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_egg ,_efea :=_gfcdg (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _efea .Type ==ResultTypeError {return _efea ;};_ggaf :=_egg ._agde ;_dfac :=_egg ._gacb ;_dcec :=_egg ._feca ;_cdbcb :=_egg ._ceac ;_gfebf :=_egg ._ffab ;_ffafe :=_egg ._facb ;_fgdf :=_gcb (_ggaf ,_dfac ,_dcec ,0,_ffafe );_bca :=0.0;if _cdbcb ==1{if _ffafe ==0{_bca =-_dcec ;_cdbcb ++;};};for _gad :=_cdbcb ;_gad <=_gfebf ;_gad ++{if _ffafe ==1{_bca +=_ffae (_ggaf ,_gad -2,_fgdf ,_dcec ,1)-_fgdf ;}else {_bca +=_ffae (_ggaf ,_gad -1,_fgdf ,_dcec ,0);};};_bca *=_ggaf ;return MakeNumberResult (_bca );};

// Reference returns an invalid reference for Number.
func (_aegda Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_eeca :=MakeNumberResult (0);for _ ,_aabda :=range args {_aabda =_aabda .AsNumber ();switch _aabda .Type {case ResultTypeNumber :_eeca .ValueNumber +=_aabda .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dbea :=Sum (_aabda .ListValues ());if _dbea .Type !=ResultTypeNumber {return _dbea ;};_eeca .ValueNumber +=_dbea .ValueNumber ;case ResultTypeString :case ResultTypeError :return _aabda ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aabda .Type ));};};return _eeca ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_fgadf chan *node ;_adab _ef .Mutex ;_gada []chan *node ;_efcg []*node ;};var (_ggfac =0;_fcgb =false ;);

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_aacf :=args [0].ValueNumber ;if _aacf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_fbcc :=float64 (int (args [1].ValueNumber ));if _fbcc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_df .Pow (_aacf +1,1/_fbcc )-1)*_fbcc );};func (_bbbfb HorizontalRange )horizontalRangeReference ()string {return _c .Sprintf ("\u0025\u0064\u003a%\u0064",_bbbfb ._becdc ,_bbbfb ._dffga );};func _afca (_dbef ,_ebd float64 ,_aabc ,_efdd int )float64 {_cdd :=_feea (_dbef );_gafg :=_feea (_ebd );_ecab :=_dff (_cdd ,_gafg ,_aabc );return _bgbf (_cdd ,_ecab ,_efdd );};const _daefe =57365;

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _abgf (args ,true )};

// Eval evaluates and returns the result of a constant array expression.
func (_caa ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_gff :=[][]Result {};for _ ,_gbc :=range _caa ._ccd {_dab :=[]Result {};for _ ,_cag :=range _gbc {_dab =append (_dab ,_cag .Eval (ctx ,ev ));};_gff =append (_gff ,_dab );};return MakeArrayResult (_gff );};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// Eval evaluates the binary expression using the context given.
func (_fdc BinaryExpr )String ()string {_ffa :="";switch _fdc ._fa {case BinOpTypePlus :_ffa ="\u002b";case BinOpTypeMinus :_ffa ="\u002d";case BinOpTypeMult :_ffa ="\u002a";case BinOpTypeDiv :_ffa ="\u002f";case BinOpTypeExp :_ffa ="\u005e";case BinOpTypeLT :_ffa ="\u003c";case BinOpTypeGT :_ffa ="\u003e";case BinOpTypeEQ :_ffa ="\u003d";case BinOpTypeLEQ :_ffa ="\u003c\u003d";case BinOpTypeGEQ :_ffa ="\u003e\u003d";case BinOpTypeNE :_ffa ="\u003c\u003e";case BinOpTypeConcat :_ffa ="\u0026";};return _fdc ._fb .String ()+_ffa +_fdc ._dae .String ();};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bed :=args [0].ValueNumber ;_eaf :=args [1].ValueNumber ;_ged :=args [2].ValueNumber ;_dbfg :=_bee (_bed ,_eaf ,_ged );if _dbfg >=0{return MakeNumberResult (_dbfg );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};var _aafba *_gb .Rand ;

// LastRow returns 0 for the invalid reference context.
func (_eeadc *ivr )LastRow (colFrom string )int {return 0};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_acaf :=args [0];if _acaf .Type ==ResultTypeError {return _acaf ;};if _acaf .Type !=ResultTypeString &&_acaf .Type !=ResultTypeNumber &&_acaf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_acfab :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_agcd :=int (args [1].ValueNumber );if _agcd < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ccfbg :=int (args [2].ValueNumber );if _ccfbg < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_ffgg :=len (_acfab );if _agcd > _ffgg {return MakeStringResult ("");};_agcd --;_ddcda :=_agcd +_ccfbg ;if _ddcda > _ffgg {return MakeStringResult (_acfab [_agcd :]);}else {return MakeStringResult (_acfab [_agcd :_ddcda ]);};};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_begdf :pfx ,_ebade :exp }};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_fffe :=len (args );if (_fffe !=2&&_fffe !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ceeg :=0;if _fffe ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ceeg =int (args [2].ValueNumber );if !_ddcf (_ceeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbef :=args [1].ValueNumber ;_ccbc ,_fcef :=_ffbd (_fcec ,_gbef ,_ceeg );if _fcef .Type ==ResultTypeError {return _fcef ;};return MakeNumberResult (_ccbc );};var _ecefc =map[string ]FunctionComplex {};var _afeg =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func NewLexer ()*Lexer {return &Lexer {_fgadf :make (chan *node )}};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_gfgbf ,_edge ,_adege :=_ffcfe (from ,to );if _adege !=nil {_gbf .Log .Debug (_adege .Error ());return NewError (_adege .Error ());};return Range {_aafd :_gfgbf ,_daba :_edge };};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dabcc :=true ;for _ ,_ddab :=range args {_ddab =_ddab .AsNumber ();switch _ddab .Type {case ResultTypeList ,ResultTypeArray :_addgc :=And (_ddab .ListValues ());if _addgc .Type ==ResultTypeError {return _addgc ;};if _addgc .ValueNumber ==0{_dabcc =false ;};case ResultTypeNumber :if _ddab .ValueNumber ==0{_dabcc =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _ddab ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_dabcc );};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fecfa :=args [0].AsNumber ();if _fecfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eead :=float64 (1);if _fecfa .ValueNumber < 0{_eead =-1;};if len (args )> 1{_fdfa :=args [1].AsNumber ();if _fdfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eead =_df .Abs (_fdfa .ValueNumber );};if len (args )==1{return MakeNumberResult (_df .Ceil (_fecfa .ValueNumber ));};_bfbc :=_fecfa .ValueNumber ;_bfbc ,_fbaa :=_df .Modf (_bfbc /_eead );if _fbaa !=0{if _fecfa .ValueNumber > 0{_bfbc ++;};};return MakeNumberResult (_bfbc *_eead );};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Eval evaluates and returns the result of a Negate expression.
func (_eabc Negate )Eval (ctx Context ,ev Evaluator )Result {_aged :=_eabc ._fgccf .Eval (ctx ,ev );if _aged .Type ==ResultTypeNumber {return MakeNumberResult (-_aged .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};func _ccgef (_cadf Reference ,_aaed Context )bool {return _aaed .Sheet (_cadf .Value )==InvalidReferenceContext ;};

// Reference returns a string reference value to a cell.
func (_daed CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_daed ._dcd };};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bfcgb Result )ListValues ()[]Result {if _bfcgb .Type ==ResultTypeArray {_dcac :=[]Result {};for _ ,_feadb :=range _bfcgb .ValueArray {for _ ,_cefad :=range _feadb {_dcac =append (_dcac ,_cefad );};};return _dcac ;};if _bfcgb .Type ==ResultTypeList {return _bfcgb .ValueList ;};return nil ;};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _dbbgb (args ,false )};const _cddbf =57376;

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfadc :=args [0].AsNumber ();if _dfadc .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _dfadc .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_caec (_dfadc .ValueNumber ));};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_cf .NewReader (s ));};

// String returns a string representation of String.
func (_ffcfd String )String ()string {return "\u0022"+_ffcfd ._gabb +"\u0022"};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_faff :=args [0].AsNumber ();if _faff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _fbagf float64 ;_aabd :=args [1].AsNumber ();if _aabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbagf =_aabd .ValueNumber ;if _fbagf < 0&&_faff .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_dcae :=_faff .ValueNumber ;_dcae ,_dace :=_df .Modf (_dcae /_fbagf );if _dace !=0{if _faff .ValueNumber < 0&&_dace < 0{_dcae --;};};return MakeNumberResult (_dcae *_fbagf );};type xargs struct{_afab []float64 ;_ecca []float64 ;};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_bfgb :=len (args );if _bfgb !=4&&_bfgb !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_efabb ,_cgba ,_cgc :=_dfba (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _cgc .Type ==ResultTypeError {return _cgc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecdcc :=args [2].ValueNumber ;if _ecdcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gedb :=args [3].ValueNumber ;if _gedb <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_cdef :=0;if _bfgb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdef =int (args [4].ValueNumber );if !_ddcf (_cdef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_fdcd ,_cgc :=_ffbd (_efabb ,_cgba ,_cdef );if _cgc .Type ==ResultTypeError {return _cgc ;};return MakeNumberResult ((_gedb /_ecdcc -1)/_fdcd );};

// String returns a string representation of a range with prefix.
func (_ddcba PrefixRangeExpr )String ()string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ddcba ._gdbcc .String (),_ddcba ._dfge .String (),_ddcba ._bcefd .String ());};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};func _cddg (_afebcc ,_cgfcgc Reference )string {return _c .Sprintf ("\u0025\u0073\u003a%\u0073",_afebcc .Value ,_cgfcgc .Value );};func _gfdg (_gcee ,_dddc int )string {const TOKSTART =4;if !_fcgb {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_ebddb :=range _abag {if _ebddb ._cbbbe ==_gcee &&_ebddb ._dbda ==_dddc {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_ebddb ._caga ;};};_geaeff :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_acda (_dddc );_cefgg :=make ([]int ,0,4);_ccebd :=_ebbce [_gcee ];for _adbg :=TOKSTART ;_adbg -1< len (_edfeb );_adbg ++{if _dgegc :=_ccebd +_adbg ;_dgegc >=0&&_dgegc < _dgeed &&_ebfee [_cbcad [_dgegc ]]==_adbg {if len (_cefgg )==cap (_cefgg ){return _geaeff ;};_cefgg =append (_cefgg ,_adbg );};};if _bcff [_gcee ]==-2{_dfaa :=0;for _bfbf [_dfaa ]!=-1||_bfbf [_dfaa +1]!=_gcee {_dfaa +=2;};for _dfaa +=2;_bfbf [_dfaa ]>=0;_dfaa +=2{_abgebd :=_bfbf [_dfaa ];if _abgebd < TOKSTART ||_bfbf [_dfaa +1]==0{continue ;};if len (_cefgg )==cap (_cefgg ){return _geaeff ;};_cefgg =append (_cefgg ,_abgebd );};if _bfbf [_dfaa +1]!=0{return _geaeff ;};};for _cgff ,_fbdbb :=range _cefgg {if _cgff ==0{_geaeff +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_geaeff +="\u0020\u006f\u0072\u0020";};_geaeff +=_acda (_fbdbb );};return _geaeff ;};type yyLexer interface{Lex (_eafde *yySymType )int ;Error (_cfffa string );};const (_afcb cmpResult =0;_cefcg cmpResult =-1;_ffag cmpResult =1;_aba cmpResult =2;);const _bgb ="\u0028\u0020\u0028"+_cdf +"\u007c"+_ceed +"\u007c"+_ggdf +"\u007c"+_afc +"\u0029\u0029\u003f\u0024";

// Update returns the same object as updating sheet references does not affect Bool.
func (_ebb Bool )Update (q *_dd .UpdateQuery )Expression {return _ebb };func _ffcf (_dcdbb int )bool {if _dcdbb ==_dcdbb /400*400{return true ;};if _dcdbb ==_dcdbb /100*100{return false ;};return _dcdbb ==_dcdbb /4*4;};

// Reference returns a string reference value to a range.
func (_baabb Range )Reference (ctx Context ,ev Evaluator )Reference {_feag :=_baabb ._aafd .Reference (ctx ,ev );_adcge :=_baabb ._daba .Reference (ctx ,ev );if _feag .Type ==ReferenceTypeCell &&_adcge .Type ==ReferenceTypeCell {return MakeRangeReference (_cddg (_feag ,_adcge ));};return ReferenceInvalid ;};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_cfgb :=len (args );if _cfgb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _cfgb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfbb :=args [0];_acdb :=args [1];if _acdb .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dccc :=args [2].AsNumber ();if _dccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgcga :=false ;if _cfgb ==4&&args [3].Type !=ResultTypeEmpty {_dcff :=args [3].AsNumber ();if _dcff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dcff .ValueNumber ==0{_bgcga =true ;};};_deaf :=int (_dccc .ValueNumber )-1;_cdcae :=-1;_fgfc :=false ;_gcfad :for _cgea ,_egfa :=range _acdb .ValueArray {if len (_egfa )==0{continue ;};_acdff :=_egfa [0];switch _gcfd (_acdff ,_dfbb ,false ,_bgcga ){case _cefcg :_cdcae =_cgea ;case _afcb :_cdcae =_cgea ;_fgfc =true ;break _gcfad ;};};if _cdcae ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_aeaf :=_acdb .ValueArray [_cdcae ];if _deaf < 0||_deaf >=len (_aeaf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _fgfc ||!_bgcga {return _aeaf [_deaf ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};const _fde =_da .Second *1;func _bdg (_gddc int )int {if _gddc < 1900{if _gddc < 30{_gddc +=2000;}else {_gddc +=1900;};};return _gddc ;};const _edbc =57361;func _ca (_edf string ,_fcg uint32 )string {_cfe :=_fg .ColumnToIndex (_edf );if _cfe ==_fcg {return "\u0023\u0052\u0045F\u0021";}else if _cfe > _fcg {return _fg .IndexToColumn (_cfe -1);}else {return _edf ;};};

// String returns a string representation for Bool.
func (_agb Bool )String ()string {if _agb ._eag {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};var _abag =[...]struct{_cbbbe int ;_dbda int ;_caga string ;}{};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};var _aedbb =[...]string {};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgdg :=args [0].ValueNumber ;if _cgdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_acc :=float64 (int (args [1].ValueNumber ));if _acc < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_df .Pow ((1+_cgdg /_acc ),_acc )-1);};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_bcee :=MakeNumberResult (0);for _ ,_gcgb :=range args {_gcgb =_gcgb .AsNumber ();switch _gcgb .Type {case ResultTypeNumber :_bcee .ValueNumber +=_gcgb .ValueNumber *_gcgb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_ddeb :=SumSquares (_gcgb .ListValues ());if _ddeb .Type !=ResultTypeNumber {return _ddeb ;};_bcee .ValueNumber +=_ddeb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gcgb ;case ResultTypeEmpty :default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_gcgb .Type ));};};return _bcee ;};

// Update updates references in the PrefixExpr after removing a row/column.
func (_fcbdc PrefixExpr )Update (q *_dd .UpdateQuery )Expression {_ecfg :=_fcbdc ;_ebec :=_fcbdc ._begdf .String ();if _ebec ==q .SheetToUpdate {_dafd :=*q ;_dafd .UpdateCurrentSheet =true ;_ecfg ._ebade =_fcbdc ._ebade .Update (&_dafd );};return _ecfg ;};func _gfcdg (_decg []Result ,_dafc string )(*cumulArgs ,Result ){if len (_decg )!=6{return nil ,MakeErrorResult (_dafc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _decg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dafc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dadd :=_decg [0].ValueNumber ;if _dadd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _decg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dafc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gfdf :=_decg [1].ValueNumber ;if _gfdf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _decg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dafc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agfc :=_decg [2].ValueNumber ;if _agfc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _decg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dafc +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gege :=_decg [3].ValueNumber ;if _gege <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _decg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dafc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acac :=_decg [4].ValueNumber ;if _acac <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _acac < _gege {return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _acac > _gfdf {return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_ffbbb :=int (_decg [5].ValueNumber );if _ffbbb !=0&&_ffbbb !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_dafc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_dadd ,_gfdf ,_agfc ,_gege ,_acac ,_ffbbb },_fad ;};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_dcdfb NamedRangeRef )Update (q *_dd .UpdateQuery )Expression {return _dcdfb };

// Reference returns a string reference value to a vertical range.
func (_gbff VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_gbff .verticalRangeReference ()};};

// String returns a string representation of FunctionCall expression.
func (_bcae FunctionCall )String ()string {_cbgd :=_d .Buffer {};_cbgd .WriteString (_bcae ._ecabd );_cbgd .WriteString ("\u0028");_ecfcc :=len (_bcae ._acdfb )-1;for _bfce ,_aadfe :=range _bcae ._acdfb {_cbgd .WriteString (_aadfe .String ());if _bfce !=_ecfcc {_cbgd .WriteString ("\u002c");};};_cbgd .WriteString ("\u0029");return _cbgd .String ();};

// Eval evaluates and returns the result of a formula.
func (_afe *defEval )Eval (ctx Context ,formula string )Result {_gaa :=ParseString (formula );_cef :=make (chan Result );go func (){if _gaa ==nil {_cef <-MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_afe .checkLastEvalIsRef (ctx ,_gaa );_cef <-_gaa .Eval (ctx ,_afe );};}();select{case _dfb :=<-_cef :return _dfb ;case <-_da .After (_fde ):_gbf .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};func (_dacef *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};type parsedSearchObject struct{_faeg string ;_efgff string ;_abdbe int ;};const _gedfc =57366;

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdbb :=args [0].Type ;for _ ,_cfebe :=range args {if _cfebe .Type !=_gdbb {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _gdbb {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_bfgg :=len (args [0].ListValues ());_egdgc :=make ([]float64 ,_bfgg );for _dedfa :=range _egdgc {_egdgc [_dedfa ]=1.0;};for _ ,_beaeg :=range args {if len (_beaeg .ListValues ())!=_bfgg {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _bbcec ,_fgbe :=range _beaeg .ListValues (){_fgbe =_fgbe .AsNumber ();if _fgbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_egdgc [_bbcec ]=_egdgc [_bbcec ]*_fgbe .ValueNumber ;};};_gbadc :=0.0;for _ ,_bcadd :=range _egdgc {_gbadc +=_bcadd ;};return MakeNumberResult (_gbadc );};return MakeNumberResult (1.0);};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dabg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgab :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfeff :=args [2].ValueNumber ;if _cfeff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaefd :=args [3].ValueNumber ;if _aaefd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _aaefd > _cfeff {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_gcacf :=(_dabg -_dgab )*(_cfeff -_aaefd +1)*2;_cggc :=_cfeff *(_cfeff +1);return MakeNumberResult (_gcacf /_cggc );};const _cdbgc =57350;

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_adcgb PrefixRangeExpr )Update (q *_dd .UpdateQuery )Expression {_cefcc :=_adcgb ;_bdfcc :=_adcgb ._gdbcc .String ();if _bdfcc ==q .SheetToUpdate {_bfda :=*q ;_bfda .UpdateCurrentSheet =true ;_cefcc ._dfge =_adcgb ._dfge .Update (&_bfda );_cefcc ._bcefd =_adcgb ._bcefd .Update (&_bfda );};return _cefcc ;};func _dgg (_afbb []Result ,_ddbbe string )(float64 ,float64 ,Result ){if len (_afbb )!=2{return 0,0,MakeErrorResult (_ddbbe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _afbb [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_ddbbe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ebaed :=_afbb [0].ValueNumber ;if _afbb [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_ddbbe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gegg :=float64 (int (_afbb [1].ValueNumber ));if _gegg < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_ddbbe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _ebaed ,_gegg ,_fad ;};func _edeg (_gccfg []Result ,_bgd countMode )float64 {_feeb :=0.0;for _ ,_gefa :=range _gccfg {switch _gefa .Type {case ResultTypeNumber :if _bgd ==_cace ||(_bgd ==_bfcad &&!_gefa .IsBoolean ){_feeb ++;};case ResultTypeList ,ResultTypeArray :_feeb +=_edeg (_gefa .ListValues (),_bgd );case ResultTypeString :if _bgd ==_cace {_feeb ++;};case ResultTypeEmpty :if _bgd ==_fggee {_feeb ++;};};};return _feeb ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_edag :=args [0].AsNumber ();if _edag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dacc :=_df .Signbit (_edag .ValueNumber );_ffbe ,_gbaag :=_df .Modf ((_edag .ValueNumber -1)/2);_dgaa :=_ffbe *2+1;if _gbaag !=0{if !_dacc {_dgaa +=2;}else {_dgaa -=2;};};return MakeNumberResult (_dgaa );};func _cca ()evCache {_bcg :=evCache {};_bcg ._db =make (map[string ]Result );_bcg ._bb =&_ef .Mutex {};return _bcg ;};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_fdbaa :v }};func _cbgff (_abec ,_ecffd ,_eagdc Reference )string {return _c .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_abec .Value ,_ecffd .Value ,_eagdc .Value );};type evCache struct{_db map[string ]Result ;_bb *_ef .Mutex ;};func _edaab (_aaegd yyLexer ,_egeea *yySymType )(_agfa ,_agagff int ){_agagff =0;_agfa =_aaegd .Lex (_egeea );if _agfa <=0{_agagff =_dbfce [0];goto _agfeg ;};if _agfa < len (_dbfce ){_agagff =_dbfce [_agfa ];goto _agfeg ;};if _agfa >=_cfbfg {if _agfa < _cfbfg +len (_acgf ){_agagff =_acgf [_agfa -_cfbfg ];goto _agfeg ;};};for _face :=0;_face < len (_bfbgc );_face +=2{_agagff =_bfbgc [_face +0];if _agagff ==_agfa {_agagff =_bfbgc [_face +1];goto _agfeg ;};};_agfeg :if _agagff ==0{_agagff =_acgf [1];};if _ggfac >=3{_c .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_acda (_agagff ),uint (_agfa ));};return _agfa ,_agagff ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};func _gdbg (_agce Result )Result {if _agce .Type ==ResultTypeEmpty {return _agce ;};_ggcb :=_agce .AsString ();if _ggcb .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _agce .IsBoolean {if _ggcb .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _ggcb .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_cf .ToLower (_ggcb .ValueString ));};};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abad :=args [0].AsNumber ();if _abad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgfad :=float64 (0);if len (args )> 1{_fdcbd :=args [1].AsNumber ();if _fdcbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgfad =_fdcbd .ValueNumber ;};_ddcc :=_abad .ValueNumber ;_bdgda :=1.0;if _fgfad >=0{_bdgda =_df .Pow (1/10.0,_fgfad );}else {return MakeNumberResult (0);};_ddcc ,_dddag :=_df .Modf (_ddcc /_bdgda );_abf :=0.99999;if _dddag > _abf {_ddcc ++;}else if _dddag < -_abf {_ddcc --;};_ =_dddag ;return MakeNumberResult (_ddcc *_bdgda );};const _adge =16;func _ebef (_cfee Result ,_ebca *criteriaParsed )bool {_cbdc :=_cf .ToLower (_cfee .ValueString );_bfef :=_ebca ._bcab ._caffg ;_fcce :=_ebca ._bcab ._faac ;if _bfef ==_gdgcb {return _cbdc ==_fcce ||_gd .Match (_fcce ,_cbdc );};if _cfee .Type !=ResultTypeEmpty {if _cbdc ==_ebca ._geeb ||_gd .Match (_ebca ._geeb ,_cbdc ){return true ;};if _ ,_dcaf :=_ge .ParseFloat (_fcce ,64);_dcaf ==nil {return false ;};switch _bfef {case _gdgdd :return _cbdc <=_fcce ;case _begfg :return _cbdc >=_fcce ;case _bffd :return _cbdc < _fcce ;case _beef :return _cbdc > _fcce ;};};return false ;};func _acda (_debga int )string {if _debga >=1&&_debga -1< len (_edfeb ){if _edfeb [_debga -1]!=""{return _edfeb [_debga -1];};};return _c .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_debga );};

// Reference returns a string reference value to a range with prefix.
func (_eaccb PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_faee :=_eaccb ._gdbcc .Reference (ctx ,ev );_cebg :=_eaccb ._dfge .Reference (ctx ,ev );_agdbe :=_eaccb ._bcefd .Reference (ctx ,ev );if _faee .Type ==ReferenceTypeSheet &&_cebg .Type ==ReferenceTypeCell &&_agdbe .Type ==ReferenceTypeCell {return MakeRangeReference (_cbgff (_faee ,_cebg ,_agdbe ));};return ReferenceInvalid ;};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_adga :=args [0];if _adga .Type ==ResultTypeError ||_adga .Type ==ResultTypeString {return _adga ;};return _fad ;};func (_cbeac node )String ()string {return _c .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_cbeac ._dgdf ,_afcaa (string (_cbeac ._egadf )));};

// Error is called in the case of parsing error and saves an error to a plex.
func (_bfaa *plex )Error (s string ){_gbf .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_bfaa ._bbgdf =s ;};func _dbgb (_gec ,_gcca float64 )float64 {_gec =_df .Trunc (_gec );_gcca =_df .Trunc (_gcca );if _gec ==0&&_gcca ==0{return 0;};return _gec *_gcca /_affd (_gec ,_gcca );};const (_aecbe rmode =iota ;_ebc ;_fddfa ;);const _gbe ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";func _beed (_cdfg Result ,_decee ,_bdgb int )[][]Result {_gbfb :=[][]Result {};switch _cdfg .Type {case ResultTypeArray :for _fecc ,_aaee :=range _cdfg .ValueArray {if _fecc < _decee {_gbfb =append (_gbfb ,_fdfce (MakeListResult (_aaee ),_bdgb ));}else {_gbfb =append (_gbfb ,_fdfce (MakeErrorResultType (ErrorTypeNA ,""),_bdgb ));};};case ResultTypeList :_adcfc :=_fdfce (_cdfg ,_bdgb );for _gacdg :=0;_gacdg < _decee ;_gacdg ++{_gbfb =append (_gbfb ,_adcfc );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _abbbb :=0;_abbbb < _decee ;_abbbb ++{_edee :=_fdfce (_cdfg ,_bdgb );_gbfb =append (_gbfb ,_edee );};};return _gbfb ;};

// Eval evaluates and returns the result of an empty expression.
func (_adc EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};type criteriaRegex struct{_caffg byte ;_faac string ;};func _feg (_efa BinOpType ,_gcd [][]Result ,_agf Result )Result {_cg :=[][]Result {};for _eff :=range _gcd {_ea :=_cc (_efa ,_gcd [_eff ],_agf );if _ea .Type ==ResultTypeError {return _ea ;};_cg =append (_cg ,_ea .ValueList );};return MakeArrayResult (_cg );};func _bace (_baaf ,_ccde ,_efad ,_fbdc ,_fddf float64 ,_ccddg int )float64 {_cage :=_gcb (_baaf ,_efad ,_fbdc ,_fddf ,_ccddg );var _cdcad float64 ;if _ccde ==1{if _ccddg ==1{_cdcad =0;}else {_cdcad =-_fbdc ;};}else {if _ccddg ==1{_cdcad =_ffae (_baaf ,_ccde -2,_cage ,_fbdc ,1)-_cage ;}else {_cdcad =_ffae (_baaf ,_ccde -1,_cage ,_fbdc ,0);};};return _cdcad *_baaf ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_bgdcd ,_acdeaf :=_ge .ParseFloat (v ,64);if _acdeaf !=nil {_gbf .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_acdeaf );};return Number {_caegb :_bgdcd };};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_fgccf :e }};

// Reference returns an invalid reference for String.
func (_cgebb String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_agffc *noCache )GetFromCache (key string )(Result ,bool ){return _fad ,false };

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_afce :=[]float64 {};for _ ,_cfebg :=range args {switch _cfebg .Type {case ResultTypeString :_dbcg :=_cfebg .AsNumber ();if _dbcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_afce =append (_afce ,_dbcg .ValueNumber );case ResultTypeList :_edbd :=LCM (_cfebg .ValueList );if _edbd .Type !=ResultTypeNumber {return _edbd ;};_afce =append (_afce ,_edbd .ValueNumber );case ResultTypeNumber :_afce =append (_afce ,_cfebg .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _cfebg ;};};if len (_afce )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _afce [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_afce )==1{return MakeNumberResult (_afce [0]);};_eabd :=_afce [0];for _feafa :=1;_feafa < len (_afce );_feafa ++{if _afce [_feafa ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eabd =_dbgb (_eabd ,_afce [_feafa ]);};return MakeNumberResult (_eabd );};type Reference struct{Type ReferenceType ;Value string ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_ecabd :name ,_acdfb :args };};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcd :=args [0];if _egcd .Type ==ResultTypeNumber {return _egcd ;};if _egcd .Type ==ResultTypeString {_aeff ,_aede :=_ge .ParseFloat (_egcd .Value (),64);if _aede ==nil {return MakeNumberResult (_aeff );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// String returns a string representation of CellRef.
func (_efe CellRef )String ()string {return _efe ._dcd };

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_dbdggd .Lock ();defer _dbdggd .Unlock ();if _fdce ,_cdbf :=_dafb [name ];_cdbf {return _fdce ;};return nil ;};func _bffb (_afbd []Result ,_fefcg rmode )Result {if len (_afbd )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cafb :=_afbd [0].AsNumber ();if _cafb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aegfb :=_afbd [1].AsNumber ();if _aegfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdba :=_aegfb .ValueNumber ;_eccfc :=_cafb .ValueNumber ;_bbdb :=1.0;if _bdba > 0{_bbdb =_df .Pow (1/10.0,_bdba );}else {_bbdb =_df .Pow (10.0,-_bdba );};_eccfc ,_dfgf :=_df .Modf (_eccfc /_bbdb );switch _fefcg {case _aecbe :const _fdfdd =0.499999999;if _dfgf >=_fdfdd {_eccfc ++;}else if _dfgf <=-_fdfdd {_eccfc --;};case _ebc :case _fddfa :if _dfgf > 0{_eccfc ++;}else if _dfgf < 0{_eccfc --;};};return MakeNumberResult (_eccfc *_bbdb );};func _eefa (_gfebg string )*criteriaRegex {_bbbee :=&criteriaRegex {};if _gfebg ==""{return _bbbee ;};if _dgbbc :=_cecf .FindStringSubmatch (_gfebg );len (_dgbbc )> 1{_bbbee ._caffg =_gdgcb ;_bbbee ._faac =_dgbbc [1];}else if _debf :=_cgceg .FindStringSubmatch (_gfebg );len (_debf )> 1{_bbbee ._caffg =_gdgcb ;_bbbee ._faac =_debf [1];}else if _dfbafd :=_aaeg .FindStringSubmatch (_gfebg );len (_dfbafd )> 1{_bbbee ._caffg =_gdgdd ;_bbbee ._faac =_dfbafd [1];}else if _bcddb :=_fccc .FindStringSubmatch (_gfebg );len (_bcddb )> 1{_bbbee ._caffg =_begfg ;_bbbee ._faac =_bcddb [1];}else if _ccfc :=_ggddf .FindStringSubmatch (_gfebg );len (_ccfc )> 1{_bbbee ._caffg =_bffd ;_bbbee ._faac =_ccfc [1];}else if _cbff :=_cgcc .FindStringSubmatch (_gfebg );len (_cbff )> 1{_bbbee ._caffg =_beef ;_bbbee ._faac =_cbff [1];};return _bbbee ;};type noCache struct{};const _afc ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _dgee (_cfbf ,_dcef float64 ,_gdfd ,_gfb int )(float64 ,Result ){_gcfe ,_eba :=_feea (_cfbf ),_feea (_dcef );if _eba .After (_gcfe ){_bgce :=_ddcd (_gcfe ,_eba ,_gdfd ,_gfb );_gddg :=(_eba .Year ()-_bgce .Year ())*12+int (_eba .Month ())-int (_bgce .Month ());return float64 (_gddg *_gdfd )/12.0,_fad ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};const _efgg =57371;

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_agcg :=args [0].AsNumber ();_acdfd :=args [1].AsNumber ();if _agcg .Type ==ResultTypeNumber &&_acdfd .Type ==ResultTypeNumber {_ebbf :=_df .Atan2 (_acdfd .ValueNumber ,_agcg .ValueNumber );if _ebbf !=_ebbf {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_ebbf );};for _ ,_cbfcc :=range []ResultType {_agcg .Type ,_acdfd .Type }{switch _cbfcc {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _agcg ;default:return MakeErrorResult (_c .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cbfcc ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_eebg :=len (args );if _eebg < 3||_eebg > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cecb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dbaeg :=args [1].ValueNumber ;if _dbaeg !=float64 (int (_dbaeg )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbc :=args [2].ValueNumber ;_efae :=0.0;if _eebg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efae =args [3].ValueNumber ;};_aade :=0.0;if _eebg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aade =args [4].ValueNumber ;if _aade !=0{_aade =1;};};if _cecb ==0{return MakeNumberResult (-_efbc *_dbaeg -_efae );}else {return MakeNumberResult ((((1-_df .Pow (1+_cecb ,_dbaeg ))/_cecb )*_efbc *(1+_cecb *_aade )-_efae )/_df .Pow (1+_cecb ,_dbaeg ));};};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_ecfc :=len (args );if _ecfc !=4&&_ecfc !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_cgec ,_dgc :=_acdf (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _dgc .Type ==ResultTypeError {return _dgc ;};_efbg ,_dgc :=_acdf (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _dgc .Type ==ResultTypeError {return _dgc ;};if _cgec >=_efbg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bddd :=args [2].ValueNumber ;if _bddd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcf :=args [3].ValueNumber ;if _egcf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cggg :=0;if _ecfc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cggg =int (args [4].ValueNumber );if !_ddcf (_cggg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_bdfc ,_dgc :=_ffbd (_cgec ,_efbg ,_cggg );if _dgc .Type ==ResultTypeError {return _dgc ;};return MakeNumberResult (_egcf *_bddd *_bdfc );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};type cumulArgs struct{_agde float64 ;_gacb float64 ;_feca float64 ;_ceac float64 ;_ffab float64 ;_facb int ;};func (_cgecc *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbcdf :=args [0].AsNumber ();_gcedg :=args [1].AsNumber ();if _bbcdf .Type !=ResultTypeNumber ||_gcedg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bffe :=_df .Trunc (_bbcdf .ValueNumber );_gabd :=_df .Trunc (_gcedg .ValueNumber );if _bffe < _gabd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _bffe ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_bffe +_gabd -1);args [1]=MakeNumberResult (_bffe -1);return Combin (args );};

// Eval evaluates and returns a number.
func (_eegcd Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_eegcd ._caegb )};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_ggc *defEval )LastEvalIsRef ()bool {return _ggc ._acaa };

// HasFormula returns FALSE for the invalid reference context.
func (_edbg *ivr )HasFormula (cellRef string )bool {return false };

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_dgce ,_bebf :=_fbbc ("\u0046\u0049\u004e\u0044",args );if _bebf .Type !=ResultTypeEmpty {return _bebf ;};_fecgg :=_dgce ._faeg ;if _fecgg ==""{return MakeNumberResult (1.0);};_feab :=_dgce ._efgff ;_aegd :=_dgce ._abdbe -1;_fdeb :=1;_bffa :=0;for _baae :=range _feab {if _baae !=0{_efec :=1;if _baae -_bffa > 1{_efec =2;};_fdeb +=_efec ;};if _fdeb > _aegd {_efgfb :=_cf .Index (_feab [_baae :],_fecgg );if _efgfb ==0{return MakeNumberResult (float64 (_fdeb ));};};_bffa =_baae ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_caef ,_cgef :=_gfcdg (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cgef .Type ==ResultTypeError {return _cgef ;};_acg :=_caef ._agde ;_cdee :=_caef ._gacb ;_abgb :=_caef ._feca ;_gedg :=_caef ._ceac ;_dede :=_caef ._ffab ;_dgag :=_caef ._facb ;_dgca :=_gcb (_acg ,_cdee ,_abgb ,0,_dgag );_fddb :=0.0;if _gedg ==1{if _dgag ==0{_fddb =_dgca +_abgb *_acg ;}else {_fddb =_dgca ;};_gedg ++;};for _ddfcg :=_gedg ;_ddfcg <=_dede ;_ddfcg ++{if _dgag ==1{_fddb +=_dgca -(_ffae (_acg ,_ddfcg -2,_dgca ,_abgb ,1)-_dgca )*_acg ;}else {_fddb +=_dgca -_ffae (_acg ,_ddfcg -1,_dgca ,_abgb ,0)*_acg ;};};return MakeNumberResult (_fddb );};var _eacc =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};type durationArgs struct{_gbb float64 ;_fgea float64 ;_fcd float64 ;_bec float64 ;_fdbf float64 ;_ceff int ;};