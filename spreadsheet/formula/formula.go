//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_fg "bytes";_c "errors";_g "fmt";_bd "github.com/unidoc/unioffice";_dg "github.com/unidoc/unioffice/internal/mergesort";_dgg "github.com/unidoc/unioffice/internal/wildcard";_da "github.com/unidoc/unioffice/spreadsheet/format";_ca "github.com/unidoc/unioffice/spreadsheet/reference";_de "github.com/unidoc/unioffice/spreadsheet/update";_fd "io";_ea "math";_cb "math/big";_a "math/rand";_be "regexp";_d "sort";_cbe "strconv";_ae "strings";_ga "sync";_e "time";_b "unicode";);

// Update returns the same object as updating sheet references does not affect Bool.
func (_egf Bool )Update (q *_de .UpdateQuery )Expression {return _egf };func _fbeb (_abbd int )int {if _abbd < 1900{if _abbd < 30{_abbd +=2000;}else {_abbd +=1900;};};return _abbd ;};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cdab :=ctx .GetEpoch ();_ebeg ,_cegdf :=_cffcb (args [0].Value (),_cdab );if _cegdf !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bfdc :=_ebeg .Year ();return MakeBoolResult (_efc (_bfdc ));};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_bafgf :=MakeNumberResult (0);for _ ,_ceca :=range args {_ceca =_ceca .AsNumber ();switch _ceca .Type {case ResultTypeNumber :_bafgf .ValueNumber +=_ceca .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dacede :=Sum (_ceca .ListValues ());if _dacede .Type !=ResultTypeNumber {return _dacede ;};_bafgf .ValueNumber +=_dacede .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ceca ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ceca .Type ));};};return _bafgf ;};type amorArgs struct{_fcge float64 ;_facb float64 ;_bdaf float64 ;_dbbbd float64 ;_ccea int ;_cccba float64 ;_feb int ;};type parsedSearchObject struct{_gbbegd string ;_acfg string ;_geccc int ;};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_gfcf :=_bebd (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _gfcf .Type !=ResultTypeEmpty {return _gfcf ;};_bffd :=_efcae (args [1:]);_gfbcc :=-_ea .MaxFloat64 ;_fbbfg :=_baebc (args [0]);for _ ,_adcd :=range _bffd {_baggf :=_fbbfg [_adcd ._dfade ][_adcd ._abfb ].ValueNumber ;if _gfbcc < _baggf {_gfbcc =_baggf ;};};if _gfbcc ==-_ea .MaxFloat64 {_gfbcc =0;};return MakeNumberResult (float64 (_gfbcc ));};func _efa (_degd string )bool {for _ ,_cacd :=range _aed {_gca :=_cacd .FindStringSubmatch (_degd );if len (_gca )> 1{return true ;};};return false ;};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_decea NamedRangeRef )Update (q *_de .UpdateQuery )Expression {return _decea };

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fabea :=args [0];if _fabea .Type ==ResultTypeList {_ccae :=[][]Result {};for _ ,_fadg :=range _fabea .ValueList {_ccae =append (_ccae ,[]Result {_fadg });};return MakeArrayResult (_ccae );};_bcgf :=make ([][]Result ,len (_fabea .ValueArray [0]));for _ ,_gcdd :=range _fabea .ValueArray {for _adfe ,_ggdf :=range _gcdd {_bcgf [_adfe ]=append (_bcgf [_adfe ],_ggdf );};};return MakeArrayResult (_bcgf );};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_acbb :=_ae .ToLower (args [0].ValueString );if !_dcfe (_acbb ){_ ,_ ,_ ,_gacc ,_bbf :=_gdg (_acbb );if _bbf .Type ==ResultTypeError {_bbf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _bbf ;};if _gacc {return MakeNumberResult (0);};};_cdca ,_gdeg ,_daag ,_accc ,_ ,_ccbc :=_age (_acbb );if _ccbc .Type ==ResultTypeError {return _ccbc ;};_ebf :=_dgfg (float64 (_cdca ),float64 (_gdeg ),_daag );if _accc {_ebf +=0.5;}else if _ebf >=1{_ebf -=float64 (int (_ebf ));};return MakeNumberResult (_ebf );};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_fbfaf :pfx ,_gbag :exp }};

// Match implements the MATCH function.
func Match (args []Result )Result {_cafb :=len (args );if _cafb !=2&&_cafb !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcecg :=1;if _cafb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_fdgc :=args [2].ValueNumber ;if _fdgc ==-1||_fdgc ==0{_bcecg =int (_fdgc );};};_gbbbf :=args [1];var _fcea []Result ;switch _gbbbf .Type {case ResultTypeList :_fcea =_gbbbf .ValueList ;case ResultTypeArray :_gdcc :=_gbbbf .ValueArray ;for _ ,_fbfg :=range _gdcc {if len (_fbfg )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fcea =append (_fcea ,_fbfg [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_gdae :=_fdedc (args [0]);switch _bcecg {case 0:for _bfcf ,_cbab :=range _fcea {if _cfbb (_cbab ,_gdae ){return MakeNumberResult (float64 (_bfcf +1));};};case -1:for _gfea :=0;_gfea < len (_fcea );_gfea ++{if _cfbb (_fcea [_gfea ],_gdae ){return MakeNumberResult (float64 (_gfea +1));};if _gdae ._gbec &&(_fcea [_gfea ].ValueNumber < _gdae ._ffcag ){if _gfea ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gfea ));};};case 1:for _cfba :=0;_cfba < len (_fcea );_cfba ++{if _cfbb (_fcea [_cfba ],_gdae ){return MakeNumberResult (float64 (_cfba +1));};if _gdae ._gbec &&(_fcea [_cfba ].ValueNumber > _gdae ._ffcag ){if _cfba ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cfba ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_agbda :=_bebd (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _agbda .Type !=ResultTypeEmpty {return _agbda ;};_aaef :=_efcae (args [1:]);_fdabe :=0.0;_aadc :=_baebc (args [0]);for _ ,_eeeb :=range _aaef {_fdabe +=_aadc [_eeeb ._dfade ][_eeeb ._abfb ].ValueNumber ;};return MakeNumberResult (float64 (_fdabe ));};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbbee :=args [0].AsNumber ();_aaaa :=args [1].AsNumber ();if _cbbee .Type !=ResultTypeNumber ||_aaaa .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ddgd :=_ea .Trunc (_cbbee .ValueNumber );_cdcf :=_ea .Trunc (_aaaa .ValueNumber );if _cdcf > _ddgd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _cdcf ==_ddgd ||_cdcf ==0{return MakeNumberResult (1);};_gccd :=float64 (1);for _bcfa :=float64 (1);_bcfa <=_cdcf ;_bcfa ++{_gccd *=(_ddgd +1-_bcfa )/_bcfa ;};return MakeNumberResult (_gccd );};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func _ceae (_dge ,_fdda int )int {if _fdda ==2&&_efc (_dge ){return 29;}else {return _aac [_fdda -1];};};func _fdedc (_dgcc Result )*criteriaParsed {_gdfa :=_dgcc .Type ==ResultTypeNumber ;_baggd :=_dgcc .ValueNumber ;_bbfed :=_ae .ToLower (_dgcc .ValueString );_cgeb :=_egfca (_bbfed );return &criteriaParsed {_gdfa ,_baggd ,_bbfed ,_cgeb };};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_bbfb PrefixRangeExpr )Update (q *_de .UpdateQuery )Expression {_adbad :=_bbfb ;_gbaa :=_bbfb ._cebe .String ();if _gbaa ==q .SheetToUpdate {_eegdd :=*q ;_eegdd .UpdateCurrentSheet =true ;_adbad ._gage =_bbfb ._gage .Update (&_eegdd );_adbad ._fageea =_bbfb ._fageea .Update (&_eegdd );};return _adbad ;};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_bg :v }};

// String returns a string of a range.
func (_fagg Range )String ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_fagg ._dedee .String (),_fagg ._dedec .String ());};func _ggfa (_edde ,_aeca []float64 ,_dbgdd float64 )float64 {_cedgf :=_dbgdd +1;_agda :=0.0;_eaad :=len (_edde );_decd :=_aeca [0];for _gead :=1;_gead < _eaad ;_gead ++{_edea :=(_aeca [_gead ]-_decd )/365;_agda -=_edea *_edde [_gead ]/_ea .Pow (_cedgf ,_edea +1);};return _agda ;};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_fec :data }};func (_cede *ivr )SetOffset (col ,row uint32 ){};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_cdb ConstArrayExpr )Update (q *_de .UpdateQuery )Expression {return _cdb };var _bgf =[]*_be .Regexp {};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cbfaf :=args [0].AsNumber ();_geaad :=args [1].AsNumber ();if _cbfaf .Type !=ResultTypeNumber ||_geaad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _geaad .ValueNumber < _cbfaf .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_aeaec :=int64 (_cbfaf .ValueNumber );_cfcb :=int64 (_geaad .ValueNumber );return MakeNumberResult (float64 (_dcad .Int63n (_cfcb -_aeaec +1)+_aeaec ));};const _effc =57368;func (_dfbbe *Lexer )nextRaw ()*node {for len (_dfbbe ._gbcdc )!=0{_cdfb :=<-_dfbbe ._gbcdc [len (_dfbbe ._gbcdc )-1];if _cdfb !=nil {return _cdfb ;};_dfbbe ._gbcdc =_dfbbe ._gbcdc [0:len (_dfbbe ._gbcdc )-1];};return <-_dfbbe ._dfdg ;};func _gcec (_faec []Result ,_bebc string )(*amorArgs ,Result ){_ebaa :=len (_faec );if _ebaa !=6&&_ebaa !=7{return nil ,MakeErrorResult (_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _faec [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bebc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_begb :=_faec [0].ValueNumber ;if _begb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_fcdc ,_ega :=_bgad (_faec [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_bebc );if _ega .Type ==ResultTypeError {return nil ,_ega ;};_bac ,_ega :=_bgad (_faec [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_bebc );if _ega .Type ==ResultTypeError {return nil ,_ega ;};if _bac < _fcdc {return nil ,MakeErrorResultType (ErrorTypeNum ,_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _faec [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cefda :=_faec [3].ValueNumber ;if _cefda < 0||_cefda > _begb {return nil ,MakeErrorResultType (ErrorTypeNum ,_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _faec [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcc :=int (_faec [4].ValueNumber );if _gcc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bebc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _faec [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bebc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fffb :=_faec [5].ValueNumber ;if _fffb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bebc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_cbbf :=0;if _ebaa ==7&&_faec [6].Type !=ResultTypeEmpty {if _faec [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bebc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbbf =int (_faec [6].ValueNumber );if !_gede (_cbbf )||_cbbf ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bebc );};};return &amorArgs {_begb ,_fcdc ,_bac ,_cefda ,_gcc ,_fffb ,_cbbf },_bgd ;};var _bgd Result =MakeEmptyResult ();

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgbde :=args [0].AsNumber ();if _dgbde .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _dgbde .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_gcdfa (_dgbde .ValueNumber ));};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_badg ,_caee :=_fdab (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _caee .Type ==ResultTypeError {return _caee ;};return MakeNumberResult (_gfgc (_badg ._cgeg ,_badg ._gec ,_badg ._bbece ,_badg ._gaa ));};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_edbg :=len (args );if _edbg !=4&&_edbg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_geff ,_ccd :=_bgad (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ccd .Type ==ResultTypeError {return _ccd ;};_ffe ,_ccd :=_bgad (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _ccd .Type ==ResultTypeError {return _ccd ;};if _geff >=_ffe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ebd :=args [2].ValueNumber ;if _ebd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dca :=args [3].ValueNumber ;if _dca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaad :=0;if _edbg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaad =int (args [4].ValueNumber );if !_gede (_aaad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_cbd ,_ccd :=_fgfe (_geff ,_ffe ,_aaad );if _ccd .Type ==ResultTypeError {return _ccd ;};return MakeNumberResult (_dca *_ebd *_cbd );};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_afec :=args [0].AsNumber ();if _afec .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_dcdc ,_bcge :=_ea .Modf (_afec .ValueNumber );if _bcge < 0{_dcdc --;};return MakeNumberResult (_dcdc );};func _cegc (_cdefc string ,_daee func (_egdbc float64 )float64 )Function {return func (_cedf []Result )Result {if len (_cedf )!=1{return MakeErrorResult (_cdefc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eddec :=_cedf [0].AsNumber ();switch _eddec .Type {case ResultTypeNumber :_dgac :=_daee (_eddec .ValueNumber );if _ea .IsNaN (_dgac ){return MakeErrorResult (_cdefc +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ea .IsInf (_dgac ,0){return MakeErrorResult (_cdefc +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _dgac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_cdefc +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_dgac );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_cdefc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _eddec ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdefc ,_eddec .Type ));};};};

// Reference returns a string reference value to a cell.
func (_aeg CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_aeg ._bg };};

// Eval evaluates and returns the result of a sheet expression.
func (_ecea SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};const _acc ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebdd :=args [0].ValueNumber ;if _ebdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bacf :=args [1].ValueNumber ;if _bacf <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebef :=args [2].ValueNumber ;if _ebef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_ea .Log10 (_ebef )-_ea .Log10 (_bacf ))/_ea .Log10 (1+_ebdd ));};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_adb :=&defEval {};_adb .evCache =_cec ();return _adb };

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_cdea ,_ggcgb :=_eefb (args ,false );if _ggcgb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_cdea /_ggcgb );};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dcf :=args [0];switch _dcf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_ecd :=_fbgd (_dcf .ValueNumber );return MakeNumberResult (float64 (_ecd .Minute ()));case ResultTypeString :_bccb :=_ae .ToLower (_dcf .ValueString );if !_dcfe (_bccb ){_ ,_ ,_ ,_defee ,_fbfb :=_gdg (_bccb );if _fbfb .Type ==ResultTypeError {_fbfb .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _fbfb ;};if _defee {return MakeNumberResult (0);};};_ ,_ecc ,_ ,_ ,_ ,_bdfd :=_age (_bccb );if _bdfd .Type ==ResultTypeError {return _bdfd ;};return MakeNumberResult (float64 (_ecc ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};type defEval struct{evCache ;_dda bool ;};func _gbf (_feee ,_cba ,_aeef ,_fbfa ,_feef float64 ,_efbg int )Result {_agga ,_gecc :=_fgfe (_feee ,_cba ,_efbg );if _gecc .Type ==ResultTypeError {return _gecc ;};_cfdf ,_fdbd :=_gcb (_feee ,_cba ,int (_feef ),_efbg );if _fdbd .Type ==ResultTypeError {return _fdbd ;};_eaa :=0.0;_daff :=0.0;_aeef *=100/_feef ;_fbfa /=_feef ;_fbfa ++;_fbab :=_agga *_feef -_cfdf ;for _edd :=1.0;_edd < _cfdf ;_edd ++{_gaed :=_edd +_fbab ;_bfg :=_aeef /_ea .Pow (_fbfa ,_gaed );_daff +=_bfg ;_eaa +=_gaed *_bfg ;};_cdce :=(_aeef +100)/_ea .Pow (_fbfa ,_cfdf +_fbab );_daff +=_cdce ;_eaa +=(_cfdf +_fbab )*_cdce ;_eaa /=_daff ;_eaa /=_feef ;return MakeNumberResult (_eaa );};const _fabga =57355;

// Eval evaluates a range with prefix returning a list of results or an error.
func (_fgcg PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_gbcf :=_fgcg ._cebe .Reference (ctx ,ev );_efecf :=_fgcg ._gage .Reference (ctx ,ev );_gbgd :=_fgcg ._fageea .Reference (ctx ,ev );switch _gbcf .Type {case ReferenceTypeSheet :if _fddea (_gbcf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gbcf .Value ));};_dfacf :=_gafbg (_gbcf ,_efecf ,_gbgd );if _efecf .Type ==ReferenceTypeCell &&_gbgd .Type ==ReferenceTypeCell {if _bgebe ,_gbccb :=ev .GetFromCache (_dfacf );_gbccb {return _bgebe ;}else {_gffa :=_bbbbf (ctx .Sheet (_gbcf .Value ),ev ,_efecf .Value ,_gbgd .Value );ev .SetCache (_dfacf ,_gffa );return _gffa ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dfacf );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbcf .Type ));};};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbad :=args [0].AsNumber ();if _fbad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbcgf :=args [1].AsNumber ();if _cbcgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_ea .Pow (_fbad .ValueNumber ,_cbcgf .ValueNumber ));};

// String returns a string representation for Bool.
func (_fae Bool )String ()string {if _fae ._bba {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecfeb :=args [0].AsNumber ();if _ecfeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcac :=float64 (0);if len (args )> 1{_eaffa :=args [1].AsNumber ();if _eaffa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcac =_eaffa .ValueNumber ;};_eab :=_ecfeb .ValueNumber ;_beec :=1.0;if _gcac >=0{_beec =_ea .Pow (1/10.0,_gcac );}else {return MakeNumberResult (0);};_eab ,_egcc :=_ea .Modf (_eab /_beec );_gcgd :=0.99999;if _egcc > _gcgd {_eab ++;}else if _egcc < -_gcgd {_eab --;};_ =_egcc ;return MakeNumberResult (_eab *_beec );};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_beeea :=len (args );if _beeea < 3||_beeea > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgfd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdeb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cgfe :=args [2].ValueNumber ;_ecccg :=0.0;if _beeea >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecccg =args [3].ValueNumber ;};_cceae :=0.0;if _beeea ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cceae =args [4].ValueNumber ;if _cceae !=0{_cceae =1;};};_acdd :=_fdeb *(1+_cgfd *_cceae )-_ecccg *_cgfd ;_fafe :=(_cgfe *_cgfd +_fdeb *(1+_cgfd *_cceae ));return MakeNumberResult (_ea .Log (_acdd /_fafe )/_ea .Log (1+_cgfd ));};func _degf (_fedfd ,_fcfd _e .Time ,_afc int )float64 {if _fedfd .After (_fcfd ){_fedfd ,_fcfd =_fcfd ,_fedfd ;};_abc :=0;_dfa ,_gaefb ,_bgdd :=_fedfd .Date ();_dfe ,_bbbg ,_fbea :=_fcfd .Date ();_bgfe ,_dbdf :=int (_gaefb ),int (_bbbg );_cae ,_dfc :=_bfa (_dfa ,_bgfe ,_bgdd ,_afc ),_bfa (_dfe ,_dbdf ,_fbea ,_afc );if !_dbdc (_afc ){return _fgda (_dfe ,_dbdf ,_dfc )-_fgda (_dfa ,_bgfe ,_cae );};if _afc ==0{if (_bgfe ==2||_cae < 30)&&_fbea ==31{_dfc =31;}else if _dbdf ==2&&_dfc ==_ceae (_dfe ,_dbdf ){_dfc =_ceae (_dfe ,2);};}else {if _bgfe ==2&&_cae ==30{_cae =_ceae (_dfa ,2);};if _dbdf ==2&&_dfc ==30{_dfc =_ceae (_dfe ,2);};};if _dfa < _dfe ||(_dfa ==_dfe &&_bgfe < _dbdf ){_abc =30-_cae +1;_bgdd =1;_cae =1;_bffa :=_e .Date (_dfa ,_e .Month (_bgfe ),_bgdd ,0,0,0,0,_e .UTC ).AddDate (0,1,0);if _bffa .Year ()< _dfe {_abc +=_adab (_bffa .Year (),int (_bffa .Month ()),12,_afc );_bffa =_bffa .AddDate (0,13-int (_bffa .Month ()),0);_abc +=_faeea (_bffa .Year (),_dfe -1,_afc );};_abc +=_adab (_dfe ,int (_bffa .Month ()),_dbdf -1,_afc );_bffa =_bffa .AddDate (0,_dbdf -int (_bffa .Month ()),0);_bgfe =_bffa .Day ();};_abc +=_dfc -_cae ;if _abc > 0{return float64 (_abc );}else {return 0;};};type couponArgs struct{_cgeg float64 ;_gec float64 ;_bbece int ;_gaa int ;};type cumulArgs struct{_abeb float64 ;_acee float64 ;_aad float64 ;_beff float64 ;_bdff float64 ;_bca int ;};var _aed =[]*_be .Regexp {};func (_cce *evCache )GetFromCache (key string )(Result ,bool ){_cce ._gbg .Lock ();_bga ,_ddd :=_cce ._fde [key ];_cce ._gbg .Unlock ();return _bga ,_ddd ;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eggf ,_abef ,_fbcc :=_ggd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _fbcc .Type ==ResultTypeError {return _fbcc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gddd :=_abef -_eggf ;if _gddd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_ccff :=args [2].ValueNumber ;if _ccff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_ccff *_gddd /360));};var _bgfd []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};var _dbbc =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _cec ()evCache {_dgc :=evCache {};_dgc ._fde =make (map[string ]Result );_dgc ._gbg =&_ga .Mutex {};return _dgc ;};func init (){_ceeg ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_fabce :=args [0].AsString ();if _fabce .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_eaaf :=args [1].AsNumber ();if _eaaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _eaaf .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _eaaf .ValueNumber ==0{return MakeStringResult ("");};_cdcff :=_fg .Buffer {};for _egfbcf :=0;_egfbcf < int (_eaaf .ValueNumber );_egfbcf ++{_cdcff .WriteString (_fabce .ValueString );};return MakeStringResult (_cdcff .String ());};var _decdd _ga .Mutex ;

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bgbg :=args [0].AsNumber ();_gdb :=args [1].AsNumber ();if _bgbg .Type !=ResultTypeNumber ||_gdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _gdb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fcbf ,_ecedg :=_ea .Modf (_bgbg .ValueNumber /_gdb .ValueNumber );if _ecedg < 0{_fcbf --;};return MakeNumberResult (_bgbg .ValueNumber -_gdb .ValueNumber *_fcbf );};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_cafg :=len (args );if _cafg !=4&&_cafg !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edgb ,_dgae ,_cgcgg :=_ggd (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _cgcgg .Type ==ResultTypeError {return _cgcgg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfdd :=args [2].ValueNumber ;if _bfdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bdacd :=args [3].ValueNumber ;if _bdacd <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_dfge :=0;if _cafg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfge =int (args [4].ValueNumber );if !_gede (_dfge ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_ggfgg ,_cgcgg :=_fgfe (_edgb ,_dgae ,_dfge );if _cgcgg .Type ==ResultTypeError {return _cgcgg ;};return MakeNumberResult ((_bdacd /_bfdd -1)/_ggfgg );};

// Eval evaluates and returns a boolean.
func (_ef Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_ef ._bba )};

// Eval evaluates and returns the result of an empty expression.
func (_faeb EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};var _bdbc =[...]struct{_aaf int ;_fceag int ;_afba string ;}{};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_dadad SheetPrefixExpr )Update (q *_de .UpdateQuery )Expression {return _dadad };func _babg (_dffba string ,_adeg []Result )(*parsedReplaceObject ,Result ){if len (_adeg )!=4{return nil ,MakeErrorResult (_dffba +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _adeg [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_dffba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dfegf :=_adeg [0].ValueString ;if _adeg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dffba +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_ddcf :=int (_adeg [1].ValueNumber )-1;if _adeg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dffba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgce :=int (_adeg [2].ValueNumber );if _adeg [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_dffba +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_gaga :=_adeg [3].ValueString ;return &parsedReplaceObject {_dfegf ,_ddcf ,_bgce ,_gaga },_bgd ;};type cmpResult int8 ;const _gecad =57363;func _dgfg (_gfc ,_ddf ,_fdc float64 )float64 {return (_gfc *3600+_ddf *60+_fdc )/86400};func (_deed *plex )Lex (lval *yySymType )int {_feace =true ;_cggcg :=<-_deed ._faef ;if _cggcg !=nil {lval ._effab =_cggcg ;return int (lval ._effab ._ebca );};return 0;};var _bfcg =[...]uint8 {0,20,37,60,78,96};func _bfa (_ddfb ,_bfd ,_egbd ,_fbgc int )int {if !_dbdc (_fbgc ){return _egbd ;};_fdg :=_egbd ;_gdgc :=_ceae (_ddfb ,_bfd );if _fdg > 30||_egbd >=_gdgc ||_fdg >=_gdgc {_fdg =30;};return _fdg ;};

// Error is an error expression.
type Error struct{_defe string };

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcefc :=args [0].AsNumber ();if _bcefc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_face :=args [1].AsNumber ();if _face .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbcdb :=int (_face .ValueNumber );if _dbcdb < 0||_dbcdb > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_bafab :=0;if len (args )> 2{_gbeg :=args [2].AsNumber ();if _gbeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bafab =int (_gbeg .ValueNumber );};_ddaee :=_cbe .FormatInt (int64 (_bcefc .ValueNumber ),_dbcdb );if len (_ddaee )< _bafab {_ddaee =_ae .Repeat ("\u0030",_bafab -len (_ddaee ))+_ddaee ;};return MakeStringResult (_ddaee );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _fbecc (args ,false )};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_accd :=args [0].Ref ;for _accd .Type ==ReferenceTypeNamedRange {_accd =ctx .NamedRange (_accd .Value );};_begde :="";switch _accd .Type {case ReferenceTypeCell :_begde =_accd .Value ;case ReferenceTypeRange :_bgde :=_ae .Split (_accd .Value ,"\u003a");if len (_bgde )==2{_begde =_bgde [0];};default:return MakeErrorResult (_g .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_accd .Type ));};_accda ,_cffe :=_ca .ParseCellReference (_begde );if _cffe !=nil {return MakeErrorResult (_g .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_cffe .Error ()));};_bggd ,_gaefa ,_cbce :=_accda .Column ,_accda .RowIdx ,_accda .SheetName ;_cdacg :=args [1].AsNumber ();if _cdacg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_fdff :=args [2].AsNumber ();if _fdff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _ggb ,_gfbe Result ;if len (args )==3{_ggb =MakeNumberResult (1);_gfbe =MakeNumberResult (1);}else {_ggb =args [3].AsNumber ();if _ggb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _ggb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_gfbe =args [4].AsNumber ();if _gfbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _gfbe .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_fcffd :=_ca .ColumnToIndex (_bggd );_bdef :=_gaefa +uint32 (_cdacg .ValueNumber );_agea :=_fcffd +uint32 (_fdff .ValueNumber );_daba :=_bdef +uint32 (_ggb .ValueNumber );_bdceb :=_agea +uint32 (_gfbe .ValueNumber );if _ggb .ValueNumber > 0{_daba --;}else {_daba ++;_bdef ,_daba =_daba ,_bdef ;};if _gfbe .ValueNumber > 0{_bdceb --;}else {_bdceb ++;_agea ,_bdceb =_bdceb ,_agea ;};_cdgaf :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_ca .IndexToColumn (_agea ),_bdef );_gdea :=_g .Sprintf ("\u0025\u0073\u0025\u0064",_ca .IndexToColumn (_bdceb ),_daba );if _cbce ==""{return _bbbbf (ctx ,ev ,_cdgaf ,_gdea );}else {return _bbbbf (ctx .Sheet (_cbce ),ev ,_cdgaf ,_gdea );};};const _fbe =86400000000000;func _beee (_eadf float64 )bool {return _eadf ==1||_eadf ==2||_eadf ==4};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_cdcc :=len (args );if _cdcc < 3||_cdcc > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afbe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ggdde :=args [1].ValueNumber ;if _ggdde !=float64 (int (_ggdde )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbbe :=args [2].ValueNumber ;_fdaf :=0.0;if _cdcc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdaf =args [3].ValueNumber ;};_bdcd :=0.0;if _cdcc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdcd =args [4].ValueNumber ;if _bdcd !=0{_bdcd =1;};};if _afbe ==0{return MakeNumberResult (-_gbbe *_ggdde -_fdaf );}else {return MakeNumberResult ((((1-_ea .Pow (1+_afbe ,_ggdde ))/_afbe )*_gbbe *(1+_afbe *_bdcd )-_fdaf )/_ea .Pow (1+_afbe ,_ggdde ));};};type plex struct{_faef chan *node ;_dedbf Expression ;_dgde string ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_ffeb :=_ae .Split (v ,"\u003a");if len (_ffeb )!=2{return nil ;};_agdf ,_ :=_cbe .Atoi (_ffeb [0]);_fcbda ,_ :=_cbe .Atoi (_ffeb [1]);if _agdf > _fcbda {_agdf ,_fcbda =_fcbda ,_agdf ;};return HorizontalRange {_bgdc :_agdf ,_dedeg :_fcbda };};func _cgcb (_ffge []Result ,_fdf string )(float64 ,float64 ,Result ){if len (_ffge )!=2{return 0,0,MakeErrorResult (_fdf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ffge [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fdf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cgdd :=_ffge [0].ValueNumber ;if _ffge [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fdf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_acfa :=float64 (int (_ffge [1].ValueNumber ));if _acfa < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_fdf +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _cgdd ,_acfa ,_bgd ;};type ri struct{_cgdg float64 ;_ffec string ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_ebb CellRef )Update (q *_de .UpdateQuery )Expression {if q .UpdateCurrentSheet {_ebb ._bg =_fda (_ebb ._bg ,q );};return _ebb ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aaeb :=args [0].AsNumber ();_fffcd :=args [1].AsNumber ();if _aaeb .Type !=ResultTypeNumber ||_fffcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fffcd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_ea .Trunc (_aaeb .ValueNumber /_fffcd .ValueNumber ));};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_gfgeb Result )ListValues ()[]Result {if _gfgeb .Type ==ResultTypeArray {_eece :=[]Result {};for _ ,_efgg :=range _gfgeb .ValueArray {for _ ,_fegbg :=range _efgg {_eece =append (_eece ,_fegbg );};};return _eece ;};if _gfgeb .Type ==ResultTypeList {return _gfgeb .ValueList ;};return nil ;};var _cdgg ,_efda ,_gabc ,_baaff ,_efafg ,_bfgga *_be .Regexp ;func _dbdc (_fgdf int )bool {return _fgdf ==0||_fgdf ==4};

// GetWidth returns 0 for the invalid reference context.
func (_ggbf *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// String returns a string representation of SheetPrefixExpr.
func (_ffgc SheetPrefixExpr )String ()string {return _ffgc ._gedee };type xargs struct{_cbage []float64 ;_fgce []float64 ;};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fbec :=args [0].ValueNumber ;_eec :=args [1].ValueNumber ;if _eec < _fbec {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _eec ==_fbec {return MakeNumberResult (0);};_deg :=_ae .ToLower (args [2].ValueString );if _deg =="\u0064"{return MakeNumberResult (_eec -_fbec );};_gae :=_fbgd (_fbec );_fcgg :=_fbgd (_eec );_bef ,_dgaa ,_bcbb :=_gae .Date ();_aba ,_efb ,_bed :=_fcgg .Date ();_ace :=int (_dgaa );_bfce :=int (_efb );var _gdff float64 ;switch _deg {case "\u0079":_gdff =float64 (_aba -_bef );if _bfce < _ace ||(_bfce ==_ace &&_bed < _bcbb ){_gdff --;};case "\u006d":_ebba :=_aba -_bef ;_gbga :=_bfce -_ace ;if _bed < _bcbb {_gbga --;};if _gbga < 0{_ebba --;_gbga +=12;};_gdff =float64 (_ebba *12+_gbga );case "\u006d\u0064":_agg :=_bfce ;if _bed < _bcbb {_agg --;};_gdff =float64 (int (_eec -_fgda (_aba ,_agg ,_bcbb )));case "\u0079\u006d":_gdff =float64 (_bfce -_ace );if _bed < _bcbb {_gdff --;};if _gdff < 0{_gdff +=12;};case "\u0079\u0064":_baf :=_aba ;if _bfce < _ace ||(_bfce ==_ace &&_bed < _bcbb ){_baf --;};_gdff =float64 (int (_eec -_fgda (_baf ,_ace ,_bcbb )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_gdff );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_dbgb :=len (args );if _dbgb !=4&&_dbgb !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afdb :=args [0].ValueNumber ;if _afdb < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbdf :=args [1].ValueNumber ;if _gbdf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cafd :=args [2].ValueNumber ;if _cafd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_faaa :=args [3].ValueNumber ;if _faaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _faaa -_cafd > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_ggeg :=12.0;if _dbgb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggeg =args [4].ValueNumber ;if _ggeg < 1||_ggeg > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _ggeg ==12&&_faaa > _cafd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _gbdf >=_afdb {return MakeNumberResult (0);};_dgge :=1-_ea .Pow (_gbdf /_afdb ,1/_cafd );_dgge =float64 (int (_dgge *1000+0.5))/1000;_aegb :=_afdb *_dgge *_ggeg /12;if _faaa ==1{return MakeNumberResult (_aegb );};_baacb :=_aegb ;_fgab :=0.0;_gedd :=_cafd ;if _gedd > _faaa {_gedd =_faaa ;};for _bdbe :=2.0;_bdbe <=_gedd ;_bdbe ++{_fgab =(_afdb -_baacb )*_dgge ;_baacb +=_fgab ;};if _faaa > _cafd {return MakeNumberResult ((_afdb -_baacb )*_dgge *(12-_ggeg )/12);};return MakeNumberResult (_fgab );};

// HasFormula returns FALSE for the invalid reference context.
func (_gfddf *ivr )HasFormula (cellRef string )bool {return false };

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_bgdc ,_dedeg int };const _eee ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_badc :=args [0].AsString ();if _badc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebeag :=_fg .Buffer {};for _ ,_adbc :=range _badc .ValueString {if _b .IsPrint (_adbc ){_ebeag .WriteRune (_adbc );};};return MakeStringResult (_ebeag .String ());};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geebe :=args [0].Type ;for _ ,_caeg :=range args {if _caeg .Type !=_geebe {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _geebe {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_bebb :=len (args [0].ListValues ());_eaea :=make ([]float64 ,_bebb );for _febbb :=range _eaea {_eaea [_febbb ]=1.0;};for _ ,_gfcdf :=range args {if len (_gfcdf .ListValues ())!=_bebb {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _bedbb ,_dbcg :=range _gfcdf .ListValues (){_dbcg =_dbcg .AsNumber ();if _dbcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_eaea [_bedbb ]=_eaea [_bedbb ]*_dbcg .ValueNumber ;};};_gcbg :=0.0;for _ ,_dfgfb :=range _eaea {_gcbg +=_dfgfb ;};return MakeNumberResult (_gcbg );};return MakeNumberResult (1.0);};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_defaa :=args [0].AsString ();if _defaa .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfbef :=args [1].AsNumber ();if _gfbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgff :=_defaa .ValueString ;if len (_dgff )> 2&&(_ae .HasPrefix (_dgff ,"\u0030\u0078")||_ae .HasPrefix (_dgff ,"\u0030\u0058")){_dgff =_dgff [2:];};_eebc ,_agadg :=_cbe .ParseInt (_dgff ,int (_gfbef .ValueNumber ),64);if _agadg !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_eebc ));};

// String returns a string representation of PrefixExpr.
func (_gfge PrefixExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021%\u0073",_gfge ._fbfaf .String (),_gfge ._gbag .String ());};func _aeebdb (_ddcgg []Result )[]float64 {_edcc :=make ([]float64 ,0);for _ ,_decbf :=range _ddcgg {if _decbf .Type ==ResultTypeEmpty {continue ;};_decbf =_decbf .AsNumber ();switch _decbf .Type {case ResultTypeNumber :if !_decbf .IsBoolean {_edcc =append (_edcc ,_decbf .ValueNumber );};case ResultTypeList ,ResultTypeArray :_edcc =append (_edcc ,_aeebdb (_decbf .ListValues ())...);case ResultTypeString :default:_bd .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_decbf .Type );};};return _edcc ;};func _gfgf (_cgd float64 )float64 {return float64 (int (_cgd +0.5))};func _gaad (_fcfa Result ,_gcbcca ,_feeda string )(string ,Result ){switch _fcfa .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _fcfa .Value (),_bgd ;default:return "",MakeErrorResult (_gcbcca +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_feeda +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _ac (_ggc BinOpType ,_ec ,_ad [][]Result )Result {_daa :=[][]Result {};for _eg :=range _ec {_bb :=_gb (_ggc ,_ec [_eg ],_ad [_eg ]);if _bb .Type ==ResultTypeError {return _bb ;};_daa =append (_daa ,_bb .ValueList );};return MakeArrayResult (_daa );};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// String returns a string representation of a horizontal range with prefix.
func (_bagd PrefixHorizontalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bagd ._ggadb .String (),_bagd ._cddfa ,_bagd ._fceb );};func _acgg (_cdbc Result ,_befeg *criteriaParsed )bool {if _cdbc .IsBoolean {return false ;};_cddc :=_cdbc .Type ;if _befeg ._gbec {return _cddc ==ResultTypeNumber &&_cdbc .ValueNumber ==_befeg ._ffcag ;}else if _cddc ==ResultTypeNumber {return _acda (_cdbc .ValueNumber ,_befeg ._bgae );};return _degcb (_cdbc ,_befeg );};type evCache struct{_fde map[string ]Result ;_gbg *_ga .Mutex ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_gef ,_bcgc :=_fdab (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _bcgc .Type ==ResultTypeError {return _bcgc ;};_bge :=_fbgd (_gef ._cgeg );_caad :=_fbgd (_gef ._gec );_cfea :=_gef ._bbece ;_cedc :=_ecfe (_bge ,_caad ,_cfea );_eecb ,_dcc ,_dadg :=_cedc .Date ();return MakeNumberResult (_fgda (_eecb ,int (_dcc ),_dadg ));};

// Reference returns a string reference value to a horizontal range with prefix.
func (_gbagb PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_dfcg :=_gbagb ._ggadb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_gbagb .horizontalRangeReference (_dfcg .Value )};};func _caff (_adbg yyLexer )int {return _ddfg ().Parse (_adbg )};const _bad ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_baag ,_bdece ,_gbe :=_ggd (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _gbe .Type ==ResultTypeError {return _gbe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbdfa :=_bdece -_baag ;if _gbdfa > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_cdgb :=args [2].ValueNumber ;if _cdgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_cdgb )/(360-_cdgb *_gbdfa ));};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_egba string };

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_baba :=len (args );if _baba !=5&&_baba !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egfbc ,_fcda ,_ggga :=_ggd (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _ggga .Type ==ResultTypeError {return _ggga ;};_cgda ,_ggga :=_bgad (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _ggga .Type ==ResultTypeError {return _ggga ;};if _cgda >=_egfbc {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cgcbg :=args [3].ValueNumber ;if _cgcbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_gfb :=args [4].ValueNumber ;if _gfb <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_ffdba :=0;if _baba ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffdba =int (args [5].ValueNumber );if !_gede (_ffdba ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_gabe ,_ggga :=_fgfe (_cgda ,_fcda ,_ffdba );if _ggga .Type ==ResultTypeError {return _ggga ;};_cggc ,_ggga :=_fgfe (_cgda ,_egfbc ,_ffdba );if _ggga .Type ==ResultTypeError {return _ggga ;};_bccf ,_ggga :=_fgfe (_egfbc ,_fcda ,_ffdba );if _ggga .Type ==ResultTypeError {return _ggga ;};_bbba :=1+_gabe *_cgcbg ;_bbba /=_gfb /100+_cggc *_cgcbg ;_bbba --;_bbba /=_bccf ;return MakeNumberResult (_bbba );};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _gedea (_agfe []Result ,_fcdad rmode )Result {if len (_agfe )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_geddc :=_agfe [0].AsNumber ();if _geddc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddggg :=_agfe [1].AsNumber ();if _ddggg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edee :=_ddggg .ValueNumber ;_eega :=_geddc .ValueNumber ;_fcdca :=1.0;if _edee > 0{_fcdca =_ea .Pow (1/10.0,_edee );}else {_fcdca =_ea .Pow (10.0,-_edee );};_eega ,_dggcd :=_ea .Modf (_eega /_fcdca );switch _fcdad {case _beggd :const _dadba =0.499999999;if _dggcd >=_dadba {_eega ++;}else if _dggcd <=-_dadba {_eega --;};case _ggcec :case _dabb :if _dggcd > 0{_eega ++;}else if _dggcd < 0{_eega --;};};return MakeNumberResult (_eega *_fcdca );};

// String returns an empty string for EmptyExpr.
func (_gdc EmptyExpr )String ()string {return ""};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _fbecc (args ,true )};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fffca :=int (args [0].ValueNumber );return MakeBoolResult (_fffca !=_fffca /2*2);};

// Bool is a boolean expression.
type Bool struct{_bba bool };

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebfbc :=args [0].AsString ();if _ebfbc .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_caadg :=_fg .Buffer {};_gfbb :=false ;_gbabb :=false ;_cdgffg :=0;for _ ,_dadae :=range _ebfbc .ValueString {_bgee :=_dadae ==' ';if _bgee {if !_gfbb {continue ;};if !_gbabb {_cdgffg ++;_caadg .WriteRune (_dadae );};}else {_cdgffg =0;_gfbb =true ;_caadg .WriteRune (_dadae );};_gbabb =_bgee ;};_caadg .Truncate (_caadg .Len ()-_cdgffg );return MakeStringResult (_caadg .String ());};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_decbc :=len (args );if _decbc < 4||_decbc > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aeda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baaa :=args [1].ValueNumber ;if _baaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dege :=args [2].ValueNumber ;if _dege <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aeaa :=args [3].ValueNumber ;_gffg :=0.0;if _decbc > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gffg =args [4].ValueNumber ;};_afbc :=0;if _decbc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afbc =int (args [5].ValueNumber );if _afbc !=0{_afbc =1;};};return MakeNumberResult (_abfg (_aeda ,_baaa ,_dege ,_aeaa ,_gffg ,_afbc ));};func _egcf (_cbcf Result )bool {_efffg :=_cbcf .Type ;return _efffg !=ResultTypeArray &&_efffg !=ResultTypeList ;};

// IsBool returns false for the invalid reference context.
func (_ebgdb *ivr )IsBool (cellRef string )bool {return false };const _faea =57375;

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edaa :=args [0].AsNumber ();if _edaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _edaa .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_edgfd :=float64 (1);_agcae :=_ea .Trunc (_edaa .ValueNumber );for _fbabd :=_agcae ;_fbabd > 1;_fbabd -=2{_edgfd *=_fbabd ;};return MakeNumberResult (_edgfd );};var _edcae []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_eaccb :e }};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdgdd :=args [0].AsNumber ();if _cdgdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dagcb :=float64 (1);if _cdgdd .ValueNumber < 0{_dagcb =-1;};if len (args )> 1{_gffb :=args [1].AsNumber ();if _gffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dagcb =_ea .Abs (_gffb .ValueNumber );};if len (args )==1{return MakeNumberResult (_ea .Ceil (_cdgdd .ValueNumber ));};_geaa :=_cdgdd .ValueNumber ;_geaa ,_cgdf :=_ea .Modf (_geaa /_dagcb );if _cgdf !=0{if _cdgdd .ValueNumber > 0{_geaa ++;};};return MakeNumberResult (_geaa *_dagcb );};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gadd :=args [0];switch _gadd .Type {case ResultTypeError :return _gadd ;case ResultTypeNumber ,ResultTypeString :return _gbbc (args [0]);case ResultTypeList :_ddbf :=_gadd .ValueList ;_cggf :=[]Result {};for _ ,_ffdbc :=range _ddbf {_cgfdg :=_gbbc (_ffdbc );if _cgfdg .Type ==ResultTypeError {return _cgfdg ;};_cggf =append (_cggf ,_cgfdg );};return MakeListResult (_cggf );case ResultTypeArray :_fcggd :=_gadd .ValueArray ;_ebdc :=[][]Result {};for _ ,_cgbd :=range _fcggd {_acfd :=[]Result {};for _ ,_bfddf :=range _cgbd {_efea :=_gbbc (_bfddf );if _efea .Type ==ResultTypeError {return _efea ;};_acfd =append (_acfd ,_efea );};_ebdc =append (_ebdc ,_acfd );};return MakeArrayResult (_ebdc );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};func _dfaa (_eagf ,_egca ,_abebd ,_eebba ,_agfbf ,_aeffc float64 ,_gada int )(float64 ,Result ){_gcdg :=int (_aeffc );_fcdfb :=_eege (_eagf ,_egca ,_gcdg ,_gada );_cecd :=_gfgc (_eagf ,_egca ,_gcdg ,_gada )/_fcdfb ;_eaee ,_gcga :=_gcb (_eagf ,_egca ,_gcdg ,_gada );if _gcga .Type ==ResultTypeError {return 0,_gcga ;};_eceg :=_gab (_eagf ,_egca ,_gcdg ,_gada );_ffgd :=_agfbf /_ea .Pow (1+_eebba /_aeffc ,_eaee -1+_cecd );_ffgd -=100*_abebd /_aeffc *_eceg /_fcdfb ;_agge :=100*_abebd /_aeffc ;_baeb :=1+_eebba /_aeffc ;for _gdec :=0.0;_gdec < _eaee ;_gdec ++{_ffgd +=_agge /_ea .Pow (_baeb ,_gdec +_cecd );};return _ffgd ,MakeEmptyResult ();};

// Eval evaluates the binary expression using the context given.
func (_cee BinaryExpr )String ()string {_dgf :="";switch _cee ._cac {case BinOpTypePlus :_dgf ="\u002b";case BinOpTypeMinus :_dgf ="\u002d";case BinOpTypeMult :_dgf ="\u002a";case BinOpTypeDiv :_dgf ="\u002f";case BinOpTypeExp :_dgf ="\u005e";case BinOpTypeLT :_dgf ="\u003c";case BinOpTypeGT :_dgf ="\u003e";case BinOpTypeEQ :_dgf ="\u003d";case BinOpTypeLEQ :_dgf ="\u003c\u003d";case BinOpTypeGEQ :_dgf ="\u003e\u003d";case BinOpTypeNE :_dgf ="\u003c\u003e";case BinOpTypeConcat :_dgf ="\u0026";};return _cee ._ff .String ()+_dgf +_cee ._beg .String ();};func _dfac (_dgdbg int )string {if _dgdbg >=1&&_dgdbg -1< len (_dbga ){if _dbga [_dgdbg -1]!=""{return _dbga [_dgdbg -1];};};return _g .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_dgdbg );};

// Eval evaluates and returns the result of the cell reference.
func (_ba CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_ba ._bg ,ev )};

// Reference returns a string reference value to a range with prefix.
func (_gafce PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_eacf :=_gafce ._cebe .Reference (ctx ,ev );_deda :=_gafce ._gage .Reference (ctx ,ev );_afefe :=_gafce ._fageea .Reference (ctx ,ev );if _eacf .Type ==ReferenceTypeSheet &&_deda .Type ==ReferenceTypeCell &&_afefe .Type ==ReferenceTypeCell {return MakeRangeReference (_gafbg (_eacf ,_deda ,_afefe ));};return ReferenceInvalid ;};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_cgdc :=len (args );if _cgdc < 3||_cgdc > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecfdd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bcec :=args [1].ValueNumber ;if _bcec !=float64 (int (_bcec )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcde :=args [2].ValueNumber ;_gff :=0.0;if _cgdc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gff =args [3].ValueNumber ;};_ebcc :=0;if _cgdc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebcc =int (args [4].ValueNumber );if _ebcc !=0{_ebcc =1;};};return MakeNumberResult (_acg (_ecfdd ,_bcec ,_gcde ,_gff ,_ebcc ));};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aacd :=args [0].Ref ;if _aacd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_bdda ,_fgad :=_ca .ParseCellReference (_aacd .Value );if _fgad !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_aacd .Value );};return MakeNumberResult (float64 (_bdda .ColumnIdx +1));};var _deafe =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_cfc Context ,formula string )Result ;SetCache (_cag string ,_dggd Result );GetFromCache (_geee string )(Result ,bool );LastEvalIsRef ()bool ;};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_eacd :=len (args );if _eacd !=6&&_eacd !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfed ,_ggcb ,_fagee :=_ggd (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _fagee .Type ==ResultTypeError {return _fagee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbgad :=args [2].ValueNumber ;if _gbgad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fcce :=args [3].ValueNumber ;if _fcce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfda :=args [4].ValueNumber ;if _dfda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deab :=args [5];if _deab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fce :=_deab .ValueNumber ;if !_beee (_fce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ccbb :=0;if _eacd ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccbb =int (args [6].ValueNumber );if !_gede (_ccbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_dbgddd ,_fagee :=_dfaa (_cfed ,_ggcb ,_gbgad ,_fcce ,_dfda ,_fce ,_ccbb );if _fagee .Type ==ResultTypeError {return _fagee ;};return MakeNumberResult (_dbgddd );};func _dbgd (_bbb ,_begf ,_abee int )bool {if _begf < 1||_begf > 12{return false ;};if _abee < 1{return false ;};return _abee <=_ceae (_bbb ,_begf );};var _eedf string =string ([]byte {92});

// Update returns the same object as updating sheet references does not affect Number.
func (_abfeg Number )Update (q *_de .UpdateQuery )Expression {return _abfeg };

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_gbfc :=len (args );if _gbfc ==0||_gbfc > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_egge :=_baebc (args [0]);_ddcg :=[]float64 {};for _ ,_cfeb :=range _egge {for _ ,_cdbf :=range _cfeb {if _cdbf .Type ==ResultTypeNumber &&!_cdbf .IsBoolean {_ddcg =append (_ddcg ,_cdbf .ValueNumber );};};};_cca :=len (_ddcg );if len (_ddcg )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_bebg :=0.1;if _gbfc ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bebg =args [1].ValueNumber ;if _bebg <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_gaefd :=[]float64 {};for _aabc :=0;_aabc < _cca ;_aabc ++{if _aabc ==0{_gaefd =append (_gaefd ,0);}else {_gaefd =append (_gaefd ,_gaefd [_aabc -1]+365);};};return _fdfe (_ddcg ,_gaefd ,_bebg );};func _eege (_aaedb ,_faed float64 ,_bfcb ,_efcf int )float64 {_bag :=_fbgd (_aaedb );_dba :=_fbgd (_faed );if _efcf ==1{_fef :=_dgcg (_bag ,_dba ,_bfcb ,1);_bbecd :=_fef .AddDate (0,12/_bfcb ,0);return _degf (_fef ,_bbecd ,_efcf );};return float64 (_fgc (0,_efcf ))/float64 (_bfcb );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_aee :=_e .Now ();_ ,_bab :=_aee .Zone ();_ecg :=_ffd +float64 (_aee .Unix ()+int64 (_bab ))/86400;return MakeNumberResult (_ecg );};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcbb :=args [0].AsString ();if _fcbb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_ae .ToUpper (_fcbb .ValueString ));};func (_ecedd *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Reference returns an invalid reference for EmptyExpr.
func (_abd EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _fbgd (_bdde float64 )_e .Time {_acf :=int64 ((_bdde -_ffd )*_fbe );return _e .Unix (0,_acf ).UTC ();};const _fdfc int =30;

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _bggeg (args ,true )};

// String returns a string representation of a named range.
func (_gcefg NamedRangeRef )String ()string {return _gcefg ._egba };

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_bafa :=len (args );if _bafa !=4&&_bafa !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgeg :=args [0].ValueNumber ;if _bgeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdacf :=args [1].ValueNumber ;if _cdacf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggdd :=args [2].ValueNumber ;if _ggdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfab :=args [3].ValueNumber ;if _bfab < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _bfab > _ggdd {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_dccb :=2.0;if _bafa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dccb =args [4].ValueNumber ;if _dccb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_bcde (_bgeg ,_cdacf ,_ggdd ,_bfab ,_dccb ));};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcbd :=args [0].Ref ;if _gcbd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_gcbd .Value ));};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_efca :=args [0].AsNumber ();if _efca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ebacb :=int (_efca .ValueNumber );_dcfc :=make ([][]Result ,0,_ebacb );for _ddea :=0;_ddea < _ebacb ;_ddea ++{_faebb :=make ([]Result ,_ebacb );for _efafb :=0;_efafb < _ebacb ;_efafb ++{if _ddea ==_efafb {_faebb [_efafb ]=MakeNumberResult (1.0);}else {_faebb [_efafb ]=MakeNumberResult (0.0);};};_dcfc =append (_dcfc ,_faebb );};return MakeArrayResult (_dcfc );};const _ead =_bad +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _ggd (_gdda ,_aab Result ,_fecd string )(float64 ,float64 ,Result ){_defb ,_ddac :=_bgad (_gdda ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_fecd );if _ddac .Type ==ResultTypeError {return 0,0,_ddac ;};_bee ,_ddac :=_bgad (_aab ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_fecd );if _ddac .Type ==ResultTypeError {return 0,0,_ddac ;};if _defb >=_bee {return 0,0,MakeErrorResultType (ErrorTypeNum ,_fecd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _defb ,_bee ,_bgd ;};const _bddbf =57365;

// Eval evaluates and returns the result of an error expression.
func (_fgf Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_fgf ._defe )};var _fcd int64 =_eccc (1900,_e .January ,1);const _bdge ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";const _ebgdf =57376;func _ecee (_dffg ,_cbfbe float64 )float64 {_dffg =_ea .Trunc (_dffg );_cbfbe =_ea .Trunc (_cbfbe );if _dffg ==0&&_cbfbe ==0{return 0;};return _dffg *_cbfbe /_ebce (_dffg ,_cbfbe );};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddge :=args [0];if _ddge .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaag :=len (_ddge .ValueArray );for _ ,_ggcga :=range _ddge .ValueArray {if len (_ggcga )!=_eaag {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_ddbc (_ddge .ValueArray ));};

// Eval evaluates and returns the result of a function call.
func (_fcbd FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_bedbbe :=LookupFunction (_fcbd ._begfc );if _bedbbe !=nil {_ddfbd :=make ([]Result ,len (_fcbd ._gdefg ));for _bffcf ,_beaag :=range _fcbd ._gdefg {_ddfbd [_bffcf ]=_beaag .Eval (ctx ,ev );_ddfbd [_bffcf ].Ref =_beaag .Reference (ctx ,ev );};if _ ,_acbeg :=_bffb [_fcbd ._begfc ];!_acbeg {if _dggcf ,_cfced :=_gaegg (_ddfbd );_dggcf {return _cfced ;};};return _bedbbe (_ddfbd );};_afcf :=LookupFunctionComplex (_fcbd ._begfc );if _afcf !=nil {_eafc :=make ([]Result ,len (_fcbd ._gdefg ));for _begdd ,_acfc :=range _fcbd ._gdefg {_eafc [_begdd ]=_acfc .Eval (ctx ,ev );_eafc [_begdd ].Ref =_acfc .Reference (ctx ,ev );};if _ ,_dedb :=_bffb [_fcbd ._begfc ];!_dedb {if _ffad ,_bcaa :=_gaegg (_eafc );_ffad {return _bcaa ;};};return _afcf (ctx ,ev ,_eafc );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_fcbd ._begfc );};

// Eval evaluates and returns the result of a formula.
func (_dea *defEval )Eval (ctx Context ,formula string )Result {_fbge :=ParseString (formula );_gde :=make (chan Result );go func (){if _fbge ==nil {_gde <-MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_dea .checkLastEvalIsRef (ctx ,_fbge );_gde <-_fbge .Eval (ctx ,_dea );};}();select{case _bcc :=<-_gde :return _bcc ;case <-_e .After (_fed ):_bd .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};var _aac =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_cebe ,_gage ,_fageea Expression };func _ggcd (_dgdb []Result ,_fecdg []string ,_cfbbe bool )[]string {for _ ,_dfbd :=range _dgdb {switch _dfbd .Type {case ResultTypeEmpty :if !_cfbbe {_fecdg =append (_fecdg ,"");};case ResultTypeString :if _dfbd .ValueString !=""||!_cfbbe {_fecdg =append (_fecdg ,_dfbd .ValueString );};case ResultTypeNumber :_fecdg =append (_fecdg ,_dfbd .Value ());case ResultTypeList :_fecdg =_gadef (_fecdg ,_ggcd (_dfbd .ValueList ,[]string {},_cfbbe ));case ResultTypeArray :for _ ,_gbeea :=range _dfbd .ValueArray {_fecdg =_gadef (_fecdg ,_ggcd (_gbeea ,[]string {},_cfbbe ));};};};return _fecdg ;};

// Reference returns a string reference value to a vertical range with prefix.
func (_bggfb PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_abgb :=_bggfb ._daac .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_bggfb .verticalRangeReference (_abgb .Value )};};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_baddb ,_bfdf :=_gcec (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _bfdf .Type ==ResultTypeError {return _bfdf ;};_ddae :=_baddb ._fcge ;_gaf :=_baddb ._facb ;_bfeg :=_baddb ._bdaf ;_cbb :=_baddb ._dbbbd ;_fffcg :=_baddb ._ccea ;_edge :=_baddb ._cccba ;_dfadd :=_baddb ._feb ;_fgae ,_ggfg :=_fgfe (_gaf ,_bfeg ,_dfadd );if _ggfg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_aeaf :=_fgae *_edge *_ddae ;if _fffcg ==0{return MakeNumberResult (_aeaf );};_bgge :=_ddae *_edge ;_fcab :=_ddae -_cbb ;_agf :=int ((_fcab -_aeaf )/_bgge );if _fffcg <=_agf {return MakeNumberResult (_bgge );}else if _fffcg ==_agf +1{return MakeNumberResult (_fcab -_bgge *float64 (_agf )-_aeaf );}else {return MakeNumberResult (0);};};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgca :=args [0].AsNumber ();if _cgca .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdab :=float64 (1);if _cgca .ValueNumber < 0{_gdab =-1;};if len (args )> 1{_gcdb :=args [1].AsNumber ();if _gcdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gdab =_gcdb .ValueNumber ;};_fcae :=float64 (1);if len (args )> 2{_dacg :=args [2].AsNumber ();if _dacg .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcae =_dacg .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ea .Floor (_cgca .ValueNumber ));};_dgef :=_cgca .ValueNumber ;_dgef ,_bgegc :=_ea .Modf (_dgef /_gdab );if _bgegc !=0&&_cgca .ValueNumber < 0&&_fcae > 0{_dgef ++;};return MakeNumberResult (_dgef *_gdab );};func _gbbc (_cgdb Result )Result {if _cgdb .Type ==ResultTypeEmpty {return _cgdb ;};_fcdg :=_cgdb .AsString ();if _fcdg .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _cgdb .IsBoolean {if _fcdg .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _fcdg .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_ae .ToLower (_fcdg .ValueString ));};};func (_gbcde ReferenceType )String ()string {if _gbcde >=ReferenceType (len (_bfcg )-1){return _g .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gbcde );};return _bffea [_bfcg [_gbcde ]:_bfcg [_gbcde +1]];};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_ea .Pi );};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_decdd .Lock ();defer _decdd .Unlock ();if _bddgf ,_gaccf :=_cdcab [name ];_gaccf {return _bddgf ;};return nil ;};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gdaef :=args [0].AsNumber ();if _gdaef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffgef :=0;if len (args )> 1{_fdbg :=args [1];if _fdbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_ffgef =int (_fdbg .ValueNumber );if _ffgef < 0{_ffgef =0;}else if _ffgef > 4{_ffgef =4;};};_cbcc :=_ffded ;switch _ffgef {case 1:_cbcc =_eeecf ;case 2:_cbcc =_ggad ;case 3:_cbcc =_abfad ;case 4:_cbcc =_acdcf ;};_aedecb :=_ea .Trunc (_gdaef .ValueNumber );_dggeb :=_fg .Buffer {};for _ ,_efgc :=range _cbcc {for _aedecb >=_efgc ._cgdg {_dggeb .WriteString (_efgc ._ffec );_aedecb -=_efgc ._cgdg ;};};return MakeStringResult (_dggeb .String ());};func _gaegg (_eaed []Result )(bool ,Result ){for _ ,_efgd :=range _eaed {if _efgd .Type ==ResultTypeError {return true ,_efgd ;};};return false ,MakeEmptyResult ();};func _gab (_eca ,_fecdd float64 ,_adbab ,_adbaa int )float64 {_cgg :=_fbgd (_eca );_eeab :=_fbgd (_fecdd );_bbc :=_dgcg (_cgg ,_eeab ,_adbab ,_adbaa );return _degf (_bbc ,_cgg ,_adbaa );};func _gaeg (_bfbgc Result ,_ffbdg ,_ffae string )(float64 ,Result ){switch _bfbgc .Type {case ResultTypeEmpty :return 0,_bgd ;case ResultTypeNumber :return _bfbgc .ValueNumber ,_bgd ;case ResultTypeString :_fbadf ,_bcded :=_cbe .ParseFloat (_bfbgc .ValueString ,64);if _bcded !=nil {return 0,MakeErrorResult (_ffae +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_ffbdg );};return _fbadf ,_bgd ;default:return 0,MakeErrorResult (_ffbdg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ffae +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_aabba Context ,_ggbg Evaluator ,_ccgdb []Result )Result ;const _fbdab =57378;

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_bce string ,_dde Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_egc string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_e .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_ged int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_cda string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dag string )string ;

// GetFormat returns if cell is protected.
GetLocked (_efd string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_ebg string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_gce string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_fabc ,_abb int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_gee string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_ffg string ,_egb bool );

// NamedRange returns a named range.
NamedRange (_eea string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_fdd ,_cc uint32 );};func (_bdae *yyParserImpl )Lookahead ()int {return _bdae ._fbde };

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_bfe *defEval )LastEvalIsRef ()bool {return _bfe ._dda };const _bdd ="\u005e\u0028\u0028"+_dad +"\u007c"+_ead +"\u007c"+_df +"\u007c"+_eda +"\u0029\u0020\u0029\u003f";

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_dbdde ,_fccba ,_dcbeb :=_ggagc (from ,to );if _dcbeb !=nil {_bd .Log (_dcbeb .Error ());return NewError (_dcbeb .Error ());};return Range {_dedee :_dbdde ,_dedec :_fccba };};

// Reference returns a string reference value to a horizontal range.
func (_decdb HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_decdb .horizontalRangeReference ()};};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// Eval evaluates a range returning a list of results or an error.
func (_bbccdf Range )Eval (ctx Context ,ev Evaluator )Result {_ggbfc :=_bbccdf ._dedee .Reference (ctx ,ev );_bgba :=_bbccdf ._dedec .Reference (ctx ,ev );_gefa :=_efdc (_ggbfc ,_bgba );if _ggbfc .Type ==ReferenceTypeCell &&_bgba .Type ==ReferenceTypeCell {if _aagfe ,_cfcd :=ev .GetFromCache (_gefa );_cfcd {return _aagfe ;}else {_gfbefa :=_bbbbf (ctx ,ev ,_ggbfc .Value ,_bgba .Value );ev .SetCache (_gefa ,_gfbefa );return _gfbefa ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gefa );};func _aeaafa (_ecbde []Result )Result {_dgbd :=_ecbde [0].ValueArray ;if len (_ecbde )==1{_dgcb :=[][]Result {};for _ ,_fdca :=range _dgbd {_dgcb =append (_dgcb ,_dgbb ([]Result {MakeListResult (_fdca )}).ValueList );};return MakeArrayResult (_dgcb );}else if len (_ecbde )==2{_efbf :=len (_dgbd );_edfe :=len (_dgbd [0]);_bffe :=_aaac (_ecbde [1],_efbf ,_edfe );_fbda :=len (_bffe );_bbcf :=[][]Result {};var _cbff []Result ;for _gaacb ,_cffee :=range _dgbd {if _gaacb < _fbda {_cbff =_bffe [_gaacb ];}else {_cbff =_bfgg (MakeErrorResultType (ErrorTypeNA ,""),_edfe );};_bbcf =append (_bbcf ,_dgbb ([]Result {MakeListResult (_cffee ),MakeListResult (_cbff )}).ValueList );};return MakeArrayResult (_bbcf );}else if len (_ecbde )==3{_caae :=len (_dgbd );_ecfdc :=len (_dgbd [0]);_cdgfa :=_aaac (_ecbde [1],_caae ,_ecfdc );_dfbg :=_aaac (_ecbde [2],_caae ,_ecfdc );_aefde :=len (_cdgfa );_cbba :=len (_dfbg );_ddgc :=[][]Result {};var _bcgb ,_cbfb []Result ;for _addad ,_aecab :=range _dgbd {if _addad < _aefde {_bcgb =_cdgfa [_addad ];}else {_bcgb =_bfgg (MakeErrorResultType (ErrorTypeNA ,""),_ecfdc );};if _addad < _cbba {_cbfb =_dfbg [_addad ];}else {_cbfb =_bfgg (MakeErrorResultType (ErrorTypeNA ,""),_ecfdc );};_ddgc =append (_ddgc ,_dgbb ([]Result {MakeListResult (_aecab ),MakeListResult (_bcgb ),MakeListResult (_cbfb )}).ValueList );};return MakeArrayResult (_ddgc );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_eddb :=args [0].ValueNumber ;if _eddb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_beaa :=float64 (int (args [1].ValueNumber ));if _beaa < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_ea .Pow (_eddb +1,1/_beaa )-1)*_beaa );};const _fegf =57344;

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _ffcg :=0;_ffcg < len (args )-1;_ffcg +=2{if args [_ffcg ].ValueNumber ==1{return args [_ffcg +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cafc :=args [0].AsNumber ();_bebe :=args [1].AsNumber ();_fgdag :=args [2].AsNumber ();_aegg :=args [3].ListValues ();if _cafc .Type !=ResultTypeNumber ||_bebe .Type !=ResultTypeNumber ||_fgdag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_fdee :=float64 (0);for _beegb ,_ccab :=range _aegg {_fdee +=_ccab .ValueNumber *_ea .Pow (_cafc .ValueNumber ,_bebe .ValueNumber +float64 (_beegb )*_fgdag .ValueNumber );};return MakeNumberResult (_fdee );};const _eadgg =57352;func (_eeeg node )String ()string {return _g .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_eeeg ._ebca ,_gcfa (string (_eeeg ._adcgd )));};func _egeb (_ccda ,_dbed ,_acbg ,_edgeb float64 ,_caba int )float64 {var _faaf float64 ;if _ccda ==0{_faaf =(_acbg +_edgeb )/_dbed ;}else {_ceg :=_ea .Pow (1+_ccda ,_dbed );if _caba ==1{_faaf =(_edgeb *_ccda /(_ceg -1)+_acbg *_ccda /(1-1/_ceg ))/(1+_ccda );}else {_faaf =_edgeb *_ccda /(_ceg -1)+_acbg *_ccda /(1-1/_ceg );};};return -_faaf ;};func _efc (_bdac int )bool {if _bdac ==_bdac /400*400{return true ;};if _bdac ==_bdac /100*100{return false ;};return _bdac ==_bdac /4*4;};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cecf :=args [0];_abgf :=args [1];if _abgf .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_afdg :=args [2].AsNumber ();if _afdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dagdb :=false ;if len (args )==4{_dedd :=args [3].AsNumber ();if _dedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dedd .ValueNumber ==0{_dagdb =true ;};};_bdfcg :=-1;_gedgg :=false ;if len (_abgf .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_dfgfe :=_abgf .ValueArray [0];_dcgac :for _bbcbf ,_gcfb :=range _dfgfe {switch _ebeb (_gcfb ,_cecf ,false ,_dagdb ){case _bgdfb :_bdfcg =_bbcbf ;case _fcbg :_bdfcg =_bbcbf ;_gedgg =true ;break _dcgac ;};};if _bdfcg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_bgfef :=int (_afdg .ValueNumber )-1;if _bgfef < 0||_bgfef > len (_abgf .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_dfgfe =_abgf .ValueArray [_bgfef ];if _bdfcg < 0||_bdfcg >=len (_dfgfe ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gedgg ||!_dagdb {return _dfgfe [_bdfcg ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};type noCache struct{};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gedb :=true ;for _ ,_fbba :=range args {_fbba =_fbba .AsNumber ();switch _fbba .Type {case ResultTypeList ,ResultTypeArray :_egeg :=And (_fbba .ListValues ());if _egeg .Type ==ResultTypeError {return _egeg ;};if _egeg .ValueNumber ==0{_gedb =false ;};case ResultTypeNumber :if _fbba .ValueNumber ==0{_gedb =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _fbba ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_gedb );};func _dgbb (_ccag []Result )Result {_ebaaf :=_ccag [0].ValueList ;_aacc :=len (_ebaaf );switch len (_ccag ){case 1:_gcgc :=[]Result {};for _ ,_abcf :=range _ebaaf {_gcgc =append (_gcgc ,MakeBoolResult (_abcf .ValueNumber !=0));};return MakeListResult (_gcgc );case 2:_bddbg :=_ccag [1];switch _bddbg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_eaga :=[]Result {};for _ ,_fgfb :=range _ebaaf {var _edbd Result ;if _fgfb .ValueNumber ==0{_edbd =MakeBoolResult (false );}else {_edbd =_bddbg ;};_eaga =append (_eaga ,_edbd );};return MakeListResult (_eaga );case ResultTypeList :_dbcc :=_bfgg (_bddbg ,_aacc );_cbdf :=[]Result {};for _cebbb ,_aecb :=range _ebaaf {var _bcef Result ;if _aecb .ValueNumber ==0{_bcef =MakeBoolResult (false );}else {_bcef =_dbcc [_cebbb ];};_cbdf =append (_cbdf ,_bcef );};return MakeListResult (_cbdf );case ResultTypeArray :_eegb :=_aaac (_bddbg ,len (_bddbg .ValueArray ),_aacc );_dabf :=[][]Result {};for _ ,_dbdd :=range _eegb {_gcabd :=[]Result {};for _fagbg ,_edefa :=range _ebaaf {var _gadb Result ;if _edefa .ValueNumber ==0{_gadb =MakeBoolResult (false );}else {_gadb =_dbdd [_fagbg ];};_gcabd =append (_gcabd ,_gadb );};_dabf =append (_dabf ,_gcabd );};return MakeArrayResult (_dabf );};case 3:_effb :=_ccag [1];_bbecg :=_ccag [2];_afccd :=_egcf (_effb );_bbcd :=_egcf (_bbecg );if _afccd &&_bbcd {_daaa :=[]Result {};for _ ,_cdef :=range _ebaaf {var _ccfa Result ;if _cdef .ValueNumber ==0{_ccfa =_bbecg ;}else {_ccfa =_effb ;};_daaa =append (_daaa ,_ccfa );};return MakeListResult (_daaa );};if _effb .Type !=ResultTypeArray &&_bbecg .Type !=ResultTypeArray {_fgcec :=_bfgg (_effb ,_aacc );_dcbdf :=_bfgg (_bbecg ,_aacc );_abefb :=[]Result {};for _decc ,_ccdc :=range _ebaaf {var _bgea Result ;if _ccdc .ValueNumber ==0{_bgea =_dcbdf [_decc ];}else {_bgea =_fgcec [_decc ];};_abefb =append (_abefb ,_bgea );};return MakeListResult (_abefb );};_ccfc ,_gdaaf :=len (_effb .ValueArray ),len (_bbecg .ValueArray );_bgfc ,_ddagg :=_ccfc ,_gdaaf ;if _gdaaf > _bgfc {_bgfc ,_ddagg =_ddagg ,_bgfc ;};_dgda :=_aaac (_effb ,_bgfc ,_aacc );_gecg :=_aaac (_bbecg ,_bgfc ,_aacc );_cggd :=[][]Result {};for _eggfe :=0;_eggfe < _bgfc ;_eggfe ++{_bcdcc :=[]Result {};for _bcfd ,_bgbd :=range _ebaaf {var _debbg Result ;if _bgbd .ValueNumber ==0{if _eggfe < _gdaaf {_debbg =_gecg [_eggfe ][_bcfd ];}else {_debbg =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _eggfe < _ccfc {_debbg =_dgda [_eggfe ][_bcfd ];}else {_debbg =MakeErrorResultType (ErrorTypeNA ,"");};};_bcdcc =append (_bcdcc ,_debbg );};_cggd =append (_cggd ,_bcdcc );};return MakeArrayResult (_cggd );};return MakeErrorResult ("");};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_beeg :=len (args );if _beeg < 3||_beeg > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aade :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deff :=args [1].ValueNumber ;if _deff ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agca :=args [2].ValueNumber ;_cgcba :=0.0;if _beeg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgcba =args [3].ValueNumber ;};_agcf :=0.0;if _beeg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_agcf =args [4].ValueNumber ;if _agcf !=0{_agcf =1;};};var _bbae float64 ;if _aade ==0{_bbae =(_agca +_cgcba )/_deff ;}else {_egd :=_ea .Pow (1+_aade ,_deff );if _agcf ==1{_bbae =(_cgcba *_aade /(_egd -1)+_agca *_aade /(1-1/_egd ))/(1+_aade );}else {_bbae =_cgcba *_aade /(_egd -1)+_agca *_aade /(1-1/_egd );};};return MakeNumberResult (-_bbae );};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_bbefb :=args [0];if _bbefb .Type !=ResultTypeArray &&_bbefb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gbdd :=_fdedc (args [1]);_aegc :=0;for _ ,_gbab :=range _baebc (_bbefb ){for _ ,_bffc :=range _gbab {if _acgg (_bffc ,_gbdd ){_aegc ++;};};};return MakeNumberResult (float64 (_aegc ));};func _gfgc (_aaa ,_bafg float64 ,_aggfg ,_dfb int )float64 {_gagd :=_fbgd (_aaa );_gddab :=_fbgd (_bafg );_bdc :=_ecfe (_gagd ,_gddab ,_aggfg );return _degf (_gagd ,_bdc ,_dfb );};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gabg :=args [0].Ref ;if _gabg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_gabg .Value ,ev ).IsBoolean );};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_aeded PrefixVerticalRange )Update (q *_de .UpdateQuery )Expression {if q .UpdateType ==_de .UpdateActionRemoveColumn {_aaeaa :=_aeded ;_dbabg :=_aeded ._daac .String ();if _dbabg ==q .SheetToUpdate {_acdb :=q .ColumnIdx ;_aaeaa ._bedgf =_ada (_aeded ._bedgf ,_acdb );_aaeaa ._bbde =_ada (_aeded ._bbde ,_acdb );};return _aaeaa ;};return _aeded ;};

// String returns a string representation of Number.
func (_fcdb Number )String ()string {return _cbe .FormatFloat (_fcdb ._abdfb ,'f',-1,64)};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bggf ,_cbfa ,_begg :=_cgcb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _begg .Type ==ResultTypeError {return _begg ;};if _cbfa < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bggf ==0{return MakeNumberResult (0);};_eedd :=_bggf < 0;if _eedd {_bggf =-_bggf ;};_bdfg :=args [0].Value ();_gafg :=_ae .Split (_bdfg ,"\u002e");_gebg :=float64 (int (_bggf ));_cdgf :=_gafg [1];_ede :=len (_cdgf );_eebf :=int (_ea .Log10 (_cbfa ))+1;_aebf :=float64 (_eebf -_ede );_bcbe ,_dff :=_cbe .ParseFloat (_cdgf ,64);if _dff !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_bcbe *=_ea .Pow (10,_aebf );_agbd :=_gebg +_bcbe /_cbfa ;if _eedd {_agbd =-_agbd ;};return MakeNumberResult (_agbd );};const _gaeed =57349;

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _fd .Reader )Expression {_aagef :=&plex {_faef :LexReader (r )};_caff (_aagef );if _aagef ._dgde !=""{return nil ;};return _aagef ._dedbf ;};func _bbccb (_dcca _e .Time )_e .Time {_dcca =_dcca .UTC ();return _e .Date (_dcca .Year (),_dcca .Month (),_dcca .Day (),_dcca .Hour (),_dcca .Minute (),_dcca .Second (),_dcca .Nanosecond (),_e .Local );};func _cfbb (_eeabg Result ,_abfa *criteriaParsed )bool {if _eeabg .Type ==ResultTypeEmpty {return false ;};if _abfa ._gbec {return _eeabg .ValueNumber ==_abfa ._ffcag ;}else {_fgdg :=_ae .ToLower (_eeabg .ValueString );return _abfa ._bbdfa ==_fgdg ||_dgg .Match (_abfa ._bbdfa ,_fgdg );};};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_baa :=args [0];switch _baa .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_cdac :=_fbgd (_baa .ValueNumber );return MakeNumberResult (float64 (_cdac .Month ()));case ResultTypeString :_eggd :=_ae .ToLower (_baa .ValueString );if !_efa (_eggd ){_ ,_ ,_ ,_ ,_cfbf ,_bcg :=_age (_eggd );if _bcg .Type ==ResultTypeError {_bcg .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _bcg ;};if _cfbf {return MakeNumberResult (1);};};_ ,_dafb ,_ ,_ ,_gbc :=_gdg (_eggd );if _gbc .Type ==ResultTypeError {return _gbc ;};return MakeNumberResult (float64 (_dafb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_gffba :=args [0];if _gffba .Type !=ResultTypeNumber &&_gffba .Type !=ResultTypeString &&_gffba .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_edccc :=args [1].ValueString ;switch _gffba .Type {case ResultTypeNumber :return MakeStringResult (_da .Number (_gffba .ValueNumber ,_edccc ));case ResultTypeString :return MakeStringResult (_da .String (_gffba .ValueString ,_edccc ));case ResultTypeEmpty :return MakeStringResult (_da .Number (0,_edccc ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_gedee :s }};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_agbe :=_bebd (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _agbe .Type !=ResultTypeEmpty {return _agbe ;};_ebea :=_efcae (args );return MakeNumberResult (float64 (len (_ebea )));};const _bebda =57372;

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_agb ,_becc :=_faag (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _becc .Type ==ResultTypeError {return _becc ;};_cagcd :=_agb ._abeb ;_bfed :=_agb ._acee ;_defbe :=_agb ._aad ;_ggee :=_agb ._beff ;_dcaf :=_agb ._bdff ;_bcbg :=_agb ._bca ;_dcde :=_egeb (_cagcd ,_bfed ,_defbe ,0,_bcbg );_cbbb :=0.0;if _ggee ==1{if _bcbg ==0{_cbbb =-_defbe ;_ggee ++;};};for _feac :=_ggee ;_feac <=_dcaf ;_feac ++{if _bcbg ==1{_cbbb +=_acg (_cagcd ,_feac -2,_dcde ,_defbe ,1)-_dcde ;}else {_cbbb +=_acg (_cagcd ,_feac -1,_dcde ,_defbe ,0);};};_cbbb *=_cagcd ;return MakeNumberResult (_cbbb );};func init (){_abca ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};func _eccb (_cfe ,_aeb int64 )float64 {return float64 (int (0.5+float64 ((_aeb -_cfe )/86400)))};func _dgcg (_bbbe ,_beba _e .Time ,_aecd ,_cbee int )_e .Time {_cdeg :=_beba ;_fcfdb :=_bbbe .Year ()-_beba .Year ();_cdeg =_cdeg .AddDate (_fcfdb ,0,0);if _bbbe .After (_cdeg ){_cdeg =_cdeg .AddDate (1,0,0);};_egfb :=-12/_aecd ;for _cdeg .After (_bbbe ){_cdeg =_cdeg .AddDate (0,_egfb ,0);};return _cdeg ;};const _fbcf =57353;

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_gfff :=args [0].AsNumber ();if _gfff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaec :=_ea .Signbit (_gfff .ValueNumber );_gabf ,_dgbf :=_ea .Modf ((_gfff .ValueNumber -1)/2);_acddb :=_gabf *2+1;if _dgbf !=0{if !_eaec {_acddb +=2;}else {_acddb -=2;};};return MakeNumberResult (_acddb );};func _ddfg ()yyParser {return &yyParserImpl {}};func _gac (_fab BinOpType ,_fe []Result ,_fcg Result )Result {_egg :=[]Result {};switch _fcg .Type {case ResultTypeNumber :_dac :=_fcg .ValueNumber ;for _fac :=range _fe {_db :=_fe [_fac ].AsNumber ();if _db .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fab {case BinOpTypePlus :_egg =append (_egg ,MakeNumberResult (_db .ValueNumber +_dac ));case BinOpTypeMinus :_egg =append (_egg ,MakeNumberResult (_db .ValueNumber -_dac ));case BinOpTypeMult :_egg =append (_egg ,MakeNumberResult (_db .ValueNumber *_dac ));case BinOpTypeDiv :if _dac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_egg =append (_egg ,MakeNumberResult (_db .ValueNumber /_dac ));case BinOpTypeExp :_egg =append (_egg ,MakeNumberResult (_ea .Pow (_db .ValueNumber ,_dac )));case BinOpTypeLT :_egg =append (_egg ,MakeBoolResult (_db .ValueNumber < _dac ));case BinOpTypeGT :_egg =append (_egg ,MakeBoolResult (_db .ValueNumber > _dac ));case BinOpTypeEQ :_egg =append (_egg ,MakeBoolResult (_db .ValueNumber ==_dac ));case BinOpTypeLEQ :_egg =append (_egg ,MakeBoolResult (_db .ValueNumber <=_dac ));case BinOpTypeGEQ :_egg =append (_egg ,MakeBoolResult (_db .ValueNumber >=_dac ));case BinOpTypeNE :_egg =append (_egg ,MakeBoolResult (_db .ValueNumber !=_dac ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fab ));};};case ResultTypeString :_aae :=_fcg .ValueString ;for _gc :=range _fe {_cd :=_fe [_gc ].AsString ();if _cd .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fab {case BinOpTypeLT :_egg =append (_egg ,MakeBoolResult (_cd .ValueString < _aae ));case BinOpTypeGT :_egg =append (_egg ,MakeBoolResult (_cd .ValueString > _aae ));case BinOpTypeEQ :_egg =append (_egg ,MakeBoolResult (_cd .ValueString ==_aae ));case BinOpTypeLEQ :_egg =append (_egg ,MakeBoolResult (_cd .ValueString <=_aae ));case BinOpTypeGEQ :_egg =append (_egg ,MakeBoolResult (_cd .ValueString >=_aae ));case BinOpTypeNE :_egg =append (_egg ,MakeBoolResult (_cd .ValueString !=_aae ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fab ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_egg );};var _dbga =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};const _bfaf int =30;

// SetLocked does nothing for the invalid reference context.
func (_ebggf *ivr )SetLocked (cellRef string ,locked bool ){};func (_ddcfd *Lexer )Next ()*node {_ddcfd ._dfdaf .Lock ();defer _ddcfd ._dfdaf .Unlock ();if len (_ddcfd ._ebcgc )> 0{_egdee :=_ddcfd ._ebcgc [0];_ddcfd ._ebcgc =_ddcfd ._ebcgc [1:];return _egdee ;};return _ddcfd .nextRaw ();};

// Reference returns a string reference value to a vertical range.
func (_ebbfc VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_ebbfc .verticalRangeReference ()};};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aedec :=args [0].AsNumber ();if _aedec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfc :=_ea .Signbit (_aedec .ValueNumber );_bgfgf ,_dega :=_ea .Modf (_aedec .ValueNumber /2);_dbabdb :=_bgfgf *2;if _dega !=0{if !_ecfc {_dbabdb +=2;}else {_dbabdb -=2;};};return MakeNumberResult (_dbabdb );};type criteriaParsed struct{_gbec bool ;_ffcag float64 ;_bbdfa string ;_bgae *criteriaRegex ;};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_fbfaf Expression ;_gbag Expression ;};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_bada :=args [0];if _bada .Type ==ResultTypeError {return _bada ;};if _bada .Type !=ResultTypeString &&_bada .Type !=ResultTypeNumber &&_bada .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_geca :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gadbfg :=int (args [1].ValueNumber );if _gadbfg < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bcfbf :=int (args [2].ValueNumber );if _bcfbf < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_gegbb :=len (_geca );if _gadbfg > _gegbb {return MakeStringResult ("");};_gadbfg --;_dfbb :=_gadbfg +_bcfbf ;if _dfbb > _gegbb {return MakeStringResult (_geca [_gadbfg :]);}else {return MakeStringResult (_geca [_gadbfg :_dfbb ]);};};const _daccb =57356;

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_cdcdd :=_ae .Split (v ,"\u003a");if len (_cdcdd )!=2{return nil ;};_fbfaa ,_ :=_cbe .Atoi (_cdcdd [0]);_fadec ,_ :=_cbe .Atoi (_cdcdd [1]);if _fbfaa > _fadec {_fbfaa ,_fadec =_fadec ,_fbfaa ;};return PrefixHorizontalRange {_ggadb :pfx ,_cddfa :_fbfaa ,_fceb :_fadec };};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_fgabd :=[]string {};for _fcbgc :=range _cdcab {_fgabd =append (_fgabd ,_fcbgc );};for _bebdc :=range _dface {_fgabd =append (_fgabd ,_bebdc );};_d .Strings (_fgabd );return _fgabd ;};

// String returns a string representation of CellRef.
func (_acb CellRef )String ()string {return _acb ._bg };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _gebe (args ,false )};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};func _eccc (_cffa int ,_befb _e .Month ,_cfbfa int )int64 {if _cffa ==1900&&int (_befb )<=2{_cfbfa --;};_bgdf :=_e .Date (_cffa ,_befb ,_cfbfa ,0,0,0,0,_e .UTC );return _bgdf .Unix ();};func _dceb (_cfef ,_bbcb []float64 ,_fggea float64 )float64 {_baea :=_fggea +1;_fdbdcd :=_cfef [0];_acab :=len (_cfef );_bbfg :=_bbcb [0];for _ebgd :=1;_ebgd < _acab ;_ebgd ++{_fdbdcd +=_cfef [_ebgd ]/_ea .Pow (_baea ,(_bbcb [_ebgd ]-_bbfg )/365);};return _fdbdcd ;};

// Update updates references in the Negate after removing a row/column.
func (_bcee Negate )Update (q *_de .UpdateQuery )Expression {return Negate {_eaccb :_bcee ._eaccb .Update (q )};};type yySymType struct{_efdb int ;_effab *node ;_gcaa Expression ;_daab []Expression ;_eaffab [][]Expression ;};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_cbbe :=len (args );if _cbbe < 4||_cbbe > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eeda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bedb :=args [1].ValueNumber ;if _bedb <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acgec :=args [2].ValueNumber ;if _acgec < _bedb {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dffb :=args [3].ValueNumber ;_fgdc :=0.0;if _cbbe >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fgdc =args [4].ValueNumber ;};_fcb :=0;if _cbbe ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fcb =int (args [5].ValueNumber );if _fcb !=0{_fcb =1;};};return MakeNumberResult (_egeb (_eeda ,_acgec ,_dffb ,_fgdc ,_fcb )-_abfg (_eeda ,_bedb ,_acgec ,_dffb ,_fgdc ,_fcb ));};const _gdbd =57366;

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ccee ,_gagg :=_aggd (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _gagg .Type ==ResultTypeError {return _gagg ;};_bcdc :=_ccee ._gcbf ;_cbfe :=_ccee ._aebb ;_fffba :=_ccee ._cafe ;_aefe :=_ccee ._eecf ;_ddgg :=_ccee ._fefg ;_abgeb :=_ccee ._abbc ;return _gbf (_bcdc ,_cbfe ,_fffba ,_aefe ,_ddgg ,_abgeb );};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_cabb HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_agbgc :=_cabb .horizontalRangeReference ();if _bggb ,_aage :=ev .GetFromCache (_agbgc );_aage {return _bggb ;};_ffccb ,_efed :=_cfa (ctx ,_cabb ._bgdc ,_cabb ._dedeg );_gabaf :=_bbbbf (ctx ,ev ,_ffccb ,_efed );ev .SetCache (_agbgc ,_gabaf );return _gabaf ;};func _adab (_afa ,_bbec ,_bafb ,_faca int )int {if _bbec > _bafb {return 0;};if _dbdc (_faca ){return (_bafb -_bbec +1)*30;};_bbda :=0;for _cgcg :=_bbec ;_cgcg <=_bafb ;_cgcg ++{_bbda +=_ceae (_afa ,_cgcg );};return _bbda ;};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_cdbee Result )AsNumber ()Result {if _cdbee .Type ==ResultTypeString {_gcae ,_ceaef :=_cbe .ParseFloat (_cdbee .ValueString ,64);if _ceaef ==nil {return MakeNumberResult (_gcae );};};if _cdbee .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _cdbee ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_dcb ,_dcge :=_faag (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _dcge .Type ==ResultTypeError {return _dcge ;};_ggge :=_dcb ._abeb ;_cedg :=_dcb ._acee ;_ffcb :=_dcb ._aad ;_fcdcb :=_dcb ._beff ;_ddfa :=_dcb ._bdff ;_eegc :=_dcb ._bca ;_cbag :=_egeb (_ggge ,_cedg ,_ffcb ,0,_eegc );_ddg :=0.0;if _fcdcb ==1{if _eegc ==0{_ddg =_cbag +_ffcb *_ggge ;}else {_ddg =_cbag ;};_fcdcb ++;};for _fccg :=_fcdcb ;_fccg <=_ddfa ;_fccg ++{if _eegc ==1{_ddg +=_cbag -(_acg (_ggge ,_fccg -2,_cbag ,_ffcb ,1)-_cbag )*_ggge ;}else {_ddg +=_cbag -_acg (_ggge ,_fccg -1,_cbag ,_ffcb ,0)*_ggge ;};};return MakeNumberResult (_ddg );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cbacc :=args [0].AsNumber ();if _cbacc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abac :=float64 (1);if _cbacc .ValueNumber < 0{_abac =-1;};if len (args )> 1{_agadf :=args [1].AsNumber ();if _agadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_abac =_ea .Abs (_agadf .ValueNumber );};if len (args )==1{return MakeNumberResult (_ea .Floor (_cbacc .ValueNumber ));};_abbfg :=_cbacc .ValueNumber ;_abbfg ,_edeb :=_ea .Modf (_abbfg /_abac );if _edeb !=0{if _cbacc .ValueNumber < 0{_abbfg --;};};return MakeNumberResult (_abbfg *_abac );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgb :=args [0].AsNumber ();_bbfec :=args [1].AsNumber ();if _ecgb .Type !=ResultTypeNumber ||_bbfec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aeed :=_ea .Trunc (_ecgb .ValueNumber );_effg :=_ea .Trunc (_bbfec .ValueNumber );if _aeed < _effg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _aeed ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_aeed +_effg -1);args [1]=MakeNumberResult (_aeed -1);return Combin (args );};

// Reference returns an invalid reference for Bool.
func (_fgge Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_bgfg :=len (args );if _bgfg < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebfbf :=args [0].ValueNumber ;if _ebfbf ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_abad :=[]float64 {};for _ ,_fcde :=range args [1:]{switch _fcde .Type {case ResultTypeNumber :_abad =append (_abad ,_fcde .ValueNumber );case ResultTypeArray ,ResultTypeList :_ggcc :=_baebc (_fcde );for _ ,_fdef :=range _ggcc {for _ ,_ceaa :=range _fdef {if _ceaa .Type ==ResultTypeNumber &&!_ceaa .IsBoolean {_abad =append (_abad ,_ceaa .ValueNumber );};};};};};_bdec :=0.0;for _bdbd ,_bcab :=range _abad {_bdec +=_bcab /_ea .Pow (1+_ebfbf ,float64 (_bdbd )+1);};return MakeNumberResult (_bdec );};func _cffcb (_bbeec string ,_abbca _e .Time )(_e .Time ,error ){_gegb ,_ ,_eacc :=_cb .ParseFloat (_bbeec ,10,128,_cb .ToNearestEven );if _eacc !=nil {return _e .Time {},_eacc ;};_acfe :=new (_cb .Float );_acfe .SetUint64 (uint64 (24*_e .Hour ));_gegb .Mul (_gegb ,_acfe );_cdge ,_ :=_gegb .Uint64 ();_abbf :=_abbca .Add (_e .Duration (_cdge ));return _bbccb (_abbf ),nil ;};func init (){_dcad =_a .New (_a .NewSource (_e .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_bgbc ("\u0041\u0053\u0049\u004e",_ea .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_bgbc ("\u0041\u0053\u0049\u004e",_ea .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_bgbc ("\u0041\u0053\u0049\u004e",_ea .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_bgbc ("\u0041\u0043\u004f\u0054",func (_dbbbda float64 )float64 {return _ea .Pi /2-_ea .Atan (_dbbbda )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_bgbc ("\u0041\u0043\u004fT\u0048",func (_deag float64 )float64 {return _ea .Atanh (1/_deag )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_bgbc ("\u0041\u0053\u0049\u004e",_ea .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_bgbc ("\u0041\u0053\u0049N\u0048",_ea .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_bgbc ("\u0041\u0054\u0041\u004e",_ea .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_bgbc ("\u0041\u0054\u0041N\u0048",_ea .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_bgbc ("\u0043\u004f\u0053",_ea .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_bgbc ("\u0043\u004f\u0053\u0048",_ea .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_cegc ("\u0043\u004f\u0054",_ea .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_cegc ("\u0043\u004f\u0054\u0048",_ea .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_cegc ("\u0043\u0053\u0043",_ea .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_cegc ("\u0043\u0053\u0043",_ea .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_bgbc ("\u0045\u0058\u0050",_ea .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_bgbc ("\u004c\u004e",_ea .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_bgbc ("\u004c\u004f\u00471\u0030",_ea .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_cegc ("\u0053\u0045\u0043",_ea .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_cegc ("\u0053\u0045\u0043\u0048",_ea .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_bgbc ("\u0053\u0049\u004e",_ea .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_bgbc ("\u0053\u0049\u004e\u0048",_ea .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_bgbc ("\u0053\u0051\u0052\u0054",_ea .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_bgbc ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_eedfc float64 )float64 {return _ea .Sqrt (_eedfc *_ea .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_bgbc ("\u0054\u0041\u004e",_ea .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_bgbc ("\u0054\u0041\u004e\u0048",_ea .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};var (_acec =0;_feace =false ;);var _eeecf =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _becag (_acca []Result )(float64 ,float64 ,Result ){_bcaca :=0.0;_edca :=1.0;for _ ,_bfadd :=range _acca {switch _bfadd .Type {case ResultTypeNumber :_bcaca +=_bfadd .ValueNumber ;_edca *=_gcdfa (_bfadd .ValueNumber );case ResultTypeList ,ResultTypeArray :_cdfe ,_eegd ,_edeaa :=_becag (_bfadd .ListValues ());_bcaca +=_cdfe ;_edca *=_gcdfa (_eegd );if _edeaa .Type ==ResultTypeError {return 0,0,_edeaa ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_bfadd ;};};return _bcaca ,_edca ,_bgd ;};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fded :=args [0].AsString ();if _fded .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_dcfd :="\u0041\u0031";if len (args )==2{_fbed :=args [1].Ref ;if _fbed .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_dcfd =_fbed .Value ;};switch _fded .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_eadb ,_bbdc :=_ca .ParseCellReference (_dcfd );if _bbdc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcfd );};_gdfc :="\u0024"+_eadb .Column +"\u0024"+_cbe .Itoa (int (_eadb .RowIdx ));if _eadb .SheetName !=""{_gdfc =_eadb .SheetName +"\u0021"+_gdfc ;};return MakeStringResult (_gdfc );case "\u0063\u006f\u006c":_cabe ,_bfad :=_ca .ParseCellReference (_dcfd );if _bfad !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcfd );};return MakeNumberResult (float64 (_cabe .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_gdcd :=_ae .Contains (ctx .GetFormat (_dcfd ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_gdcd );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_dfcd :="\u0047";_ccaa :=ctx .GetFormat (_dcfd );if _ccaa =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_eaff .MatchString (_ccaa ){_dfcd ="\u0046\u0030";}else if _ccaa =="\u0030\u0025"{_dfcd ="\u0050\u0030";}else if _ccaa =="\u004d\u004d\u004d\u0020\u0044\u0044"{_dfcd ="\u0044\u0032";}else if _ccaa =="\u004d\u004d\u002fY\u0059"{_dfcd ="\u0044\u0033";}else if _ccaa =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_ccaa =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_dfcd ="\u0044\u0034";}else if _ccaa =="\u004d\u004d\u005c\u002d\u0044\u0044"{_dfcd ="\u0044\u0035";}else if _ccaa =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dfcd ="\u0044\u0036";}else if _ccaa =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dfcd ="\u0044\u0037";}else if _ccaa =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_dfcd ="\u0044\u0038";}else if _ccaa =="\u0048\u0048\u003aM\u004d"{_dfcd ="\u0044\u0039";}else if _cgec .MatchString (_ccaa ){_dfcd ="\u002e\u0030";}else if _aede .MatchString (_ccaa ){_dfcd ="\u002e\u0030\u0028\u0029";}else if _ddee .MatchString (_ccaa ){_dfcd ="\u0043\u0030";}else if _ggcg .MatchString (_ccaa )||_affd .MatchString (_ccaa ){_dfcd ="\u0044\u0031";}else if _cgaf :=_cadd .FindStringSubmatch (_ccaa );len (_cgaf )> 1{_dfcd ="\u0046"+_cbe .Itoa (len (_cgaf [1]));}else if _gdef :=_caea .FindStringSubmatch (_ccaa );len (_gdef )> 1{_dfcd ="\u002e"+_cbe .Itoa (len (_gdef [2]));}else if _eaab :=_gcfe .FindStringSubmatch (_ccaa );len (_eaab )> 1{_dfcd ="\u0050"+_cbe .Itoa (len (_eaab [2]));}else if _eeabb :=_cbef .FindStringSubmatch (_ccaa );len (_eeabb )> 1{_dfcd ="\u0043"+_abafg (_eeabb ,1);}else if _gcbcc :=_cdgd .FindStringSubmatch (_ccaa );len (_gcbcc )> 1{_dfcd ="\u0043"+_abafg (_gcbcc ,1);}else if _ffefg :=_cegd .FindStringSubmatch (_ccaa );len (_ffefg )> 1{_dfcd ="\u002e"+_abafg (_ffefg ,1)+"\u0028\u0029";}else if _fdfa :=_dbcdc .FindStringSubmatch (_ccaa );len (_fdfa )> 1{_dfcd ="\u002e"+_abafg (_fdfa ,1);}else if _ecgeb :=_ccbd .FindStringSubmatch (_ccaa );len (_ecgeb )> 1{_dfcd ="\u0053"+_abafg (_ecgeb ,3);};if _dfcd !="\u0047"&&_ae .Contains (_ccaa ,"\u005b\u0052\u0045D\u005d"){_dfcd +="\u002d";};return MakeStringResult (_dfcd );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_efcb :=ctx .GetFormat (_dcfd );if _gade .MatchString (_efcb ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_dcfd ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_eggde :=0.0;if ctx .GetLocked (_dcfd ){_eggde =1.0;};return MakeNumberResult (_eggde );case "\u0072\u006f\u0077":_bcgg ,_cebb :=_ca .ParseCellReference (_dcfd );if _cebb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcfd );};return MakeNumberResult (float64 (_bcgg .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_cdcdc ,_bgdfd :=_ca .ParseCellReference (_dcfd );if _bgdfd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcfd );};if _cdcdc .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_cdcdc .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_cdcdc .SheetName ).GetWidth (int (_cdcdc .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_fded .ValueString );};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_ceebd :=len (args );if _ceebd !=4&&_ceebd !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_egdg ,_dae ,_bgbb :=_ggd (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _bgbb .Type ==ResultTypeError {return _bgbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcca :=args [2].ValueNumber ;if _gcca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_abdg :=args [3].ValueNumber ;if _abdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfea :=0;if _ceebd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfea =int (args [4].ValueNumber );if !_gede (_bfea ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_bbee ,_bgbb :=_fgfe (_egdg ,_dae ,_bfea );if _bgbb .Type ==ResultTypeError {return _bgbb ;};return MakeNumberResult (_gcca /(1-_abdg *_bbee ));};

// String returns a string representation of a vertical range.
func (_gfca VerticalRange )String ()string {return _gfca .verticalRangeReference ()};func _dcfe (_gfce string )bool {for _ ,_efff :=range _bgf {_bedg :=_efff .FindStringSubmatch (_gfce );if len (_bedg )> 1{return true ;};};return false ;};func _abfg (_adbfe ,_edbggf ,_aefd ,_cgae ,_abaf float64 ,_feba int )float64 {_egbdc :=_egeb (_adbfe ,_aefd ,_cgae ,_abaf ,_feba );var _gaca float64 ;if _edbggf ==1{if _feba ==1{_gaca =0;}else {_gaca =-_cgae ;};}else {if _feba ==1{_gaca =_acg (_adbfe ,_edbggf -2,_egbdc ,_cgae ,1)-_egbdc ;}else {_gaca =_acg (_adbfe ,_edbggf -1,_egbdc ,_cgae ,0);};};return _gaca *_adbfe ;};var _abfad =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _fbecc (_fedb []Result ,_cbageb bool )Result {var _dfdd string ;if _cbageb {_dfdd ="\u004c\u0041\u0052G\u0045";}else {_dfdd ="\u0053\u004d\u0041L\u004c";};if len (_fedb )!=2{return MakeErrorResult (_dfdd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gafa :=_fedb [0];var _dced [][]Result ;switch _gafa .Type {case ResultTypeArray :_dced =_gafa .ValueArray ;case ResultTypeList :_dced =[][]Result {_gafa .ValueList };default:return MakeErrorResult (_dfdd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_dced )==0{return MakeErrorResult (_dfdd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _fedb [1].Type !=ResultTypeNumber {return MakeErrorResult (_dfdd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_cad :=_fedb [1].ValueNumber ;if _cad < 1{return MakeErrorResultType (ErrorTypeNum ,_dfdd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_dead :=int (_cad );if float64 (_dead )!=_cad {return MakeErrorResultType (ErrorTypeNum ,_dfdd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_bedf :=[]float64 {};for _ ,_ecegf :=range _dced {for _ ,_fdgb :=range _ecegf {if _fdgb .Type ==ResultTypeNumber {_bedf =append (_bedf ,_fdgb .ValueNumber );};};};if _dead > len (_bedf ){return MakeErrorResultType (ErrorTypeNum ,_dfdd +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_begdb :=_dg .MergeSort (_bedf );if _cbageb {return MakeNumberResult (_begdb [len (_begdb )-_dead ]);}else {return MakeNumberResult (_begdb [_dead -1]);};};

// String returns an empty string for Error.
func (_ddeb Error )String ()string {return ""};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_egdf ,_dbdccg :=_eefb (args ,true );if _dbdccg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_egdf /_dbdccg );};func _egfca (_adad string )*criteriaRegex {_ecfed :=&criteriaRegex {};if _adad ==""{return _ecfed ;};if _egcac :=_cdgg .FindStringSubmatch (_adad );len (_egcac )> 1{_ecfed ._gccb =_ecae ;_ecfed ._ebbfe =_egcac [1];}else if _facbg :=_efda .FindStringSubmatch (_adad );len (_facbg )> 1{_ecfed ._gccb =_ecae ;_ecfed ._ebbfe =_facbg [1];}else if _ebdda :=_bfgga .FindStringSubmatch (_adad );len (_ebdda )> 1{_ecfed ._gccb =_bcbc ;_ecfed ._ebbfe =_ebdda [1];}else if _dee :=_efafg .FindStringSubmatch (_adad );len (_dee )> 1{_ecfed ._gccb =_fdba ;_ecfed ._ebbfe =_dee [1];}else if _bcbff :=_baaff .FindStringSubmatch (_adad );len (_bcbff )> 1{_ecfed ._gccb =_gddc ;_ecfed ._ebbfe =_bcbff [1];}else if _gcdbd :=_gabc .FindStringSubmatch (_adad );len (_gcdbd )> 1{_ecfed ._gccb =_fgega ;_ecfed ._ebbfe =_gcdbd [1];};return _ecfed ;};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _gede (_faff int )bool {return _faff >=0&&_faff <=4};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_dbccd :=_fg .Buffer {};for _ ,_debg :=range args {switch _debg .Type {case ResultTypeString :_dbccd .WriteString (_debg .ValueString );case ResultTypeNumber :var _dedc string ;if _debg .IsBoolean {if _debg .ValueNumber ==0{_dedc ="\u0046\u0041\u004cS\u0045";}else {_dedc ="\u0054\u0052\u0055\u0045";};}else {_dedc =_debg .AsString ().ValueString ;};_dbccd .WriteString (_dedc );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_dbccd .String ());};func _dfdb (_dccad _e .Time )bool {return _e .Now ().Sub (_dccad )>=_agaf };func _gbgg (){_cdgg =_be .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_efda =_be .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_baaff =_be .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_gabc =_be .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_bfgga =_be .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_efafg =_be .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ff ,_beg Expression ;_cac BinOpType ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_feeg (args ,_gefe ))};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_bgeca :=1.0;for _ ,_caac :=range args {_caac =_caac .AsNumber ();switch _caac .Type {case ResultTypeNumber :_bgeca *=_caac .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cbfab :=Product (_caac .ListValues ());if _cbfab .Type !=ResultTypeNumber {return _cbfab ;};_bgeca *=_cbfab .ValueNumber ;case ResultTypeString :case ResultTypeError :return _caac ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_caac .Type ));};};return MakeNumberResult (_bgeca );};func _ebce (_ffcaf ,_cccaf float64 )float64 {_ffcaf =_ea .Trunc (_ffcaf );_cccaf =_ea .Trunc (_cccaf );if _ffcaf ==0{return _cccaf ;};if _cccaf ==0{return _ffcaf ;};for _ffcaf !=_cccaf {if _ffcaf > _cccaf {_ffcaf =_ffcaf -_cccaf ;}else {_cccaf =_cccaf -_ffcaf ;};};return _ffcaf ;};var _eaff ,_cadd ,_cgec ,_aede ,_dbcdc ,_caea ,_cegd ,_gade ,_gcfe ,_ddee ,_cbef ,_cdgd ,_ggcg ,_affd ,_ccbd *_be .Regexp ;

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ff :lhs ,_beg :rhs ,_cac :op };};type ivr struct{};

// Update returns the same object as updating sheet references does not affect String.
func (_acddbf String )Update (q *_de .UpdateQuery )Expression {return _acddbf };

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fcf :=int (args [0].ValueNumber );if _fcf < 0||_fcf >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _fcf <=1899{_fcf +=1900;};_bcb :=_e .Month (args [1].ValueNumber );_gea :=int (args [2].ValueNumber );_cgb :=_eccc (_fcf ,_bcb ,_gea );_ceee :=_eccb (_fcd ,_cgb )+1;if _ceee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_ceee );};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bgb :=args [0].ValueNumber ;_fag :=args [1].ValueNumber ;_gegg :=args [2].ValueNumber ;_fcc :=_dgfg (_bgb ,_fag ,_gegg );if _fcc >=0{return MakeNumberResult (_fcc );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Eval evaluates and returns the result of a Negate expression.
func (_gbabg Negate )Eval (ctx Context ,ev Evaluator )Result {_aegef :=_gbabg ._eaccb .Eval (ctx ,ev );if _aegef .Type ==ResultTypeNumber {return MakeNumberResult (-_aegef .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};const _aaba =57347;

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ddgbd :=args [0].Ref ;if _ddgbd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_baaf ,_caag :=_ca .ParseCellReference (_ddgbd .Value );if _caag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ddgbd .Value );};return MakeNumberResult (float64 (_baaf .RowIdx ));};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aefdd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffdfd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eacg :=args [2].ValueNumber ;if _eacg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_degc :=args [3].ValueNumber ;return MakeNumberResult (_degc *_aefdd *(_ffdfd /_eacg -1));};var _ggad =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Reference returns an invalid reference for BinaryExpr.
func (_bdb BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func NewLexer ()*Lexer {return &Lexer {_dfdg :make (chan *node )}};type criteriaRegex struct{_gccb byte ;_ebbfe string ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_dfdg chan *node ;_dfdaf _ga .Mutex ;_gbcdc []chan *node ;_ebcgc []*node ;};const _agaf =_e .Millisecond *1000;

// Update updates references in the VerticalRange after removing a row/column.
func (_cfebd VerticalRange )Update (q *_de .UpdateQuery )Expression {if q .UpdateType ==_de .UpdateActionRemoveColumn {_abbea :=_cfebd ;if q .UpdateCurrentSheet {_ccec :=q .ColumnIdx ;_abbea ._acdaf =_ada (_cfebd ._acdaf ,_ccec );_abbea ._bdcdb =_ada (_cfebd ._bdcdb ,_ccec );};return _abbea ;};return _cfebd ;};

// Reference returns an invalid reference for Number.
func (_cdgaa Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffef ,_ffeff ,_gdce :=_ggd (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _gdce .Type ==ResultTypeError {return _gdce ;};_fafb ,_gdce :=_bgad (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gdce .Type ==ResultTypeError {return _gdce ;};if _fafb >=_ffef {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_debb :=args [3].ValueNumber ;if _debb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbba :=args [4].ValueNumber ;if _dbba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_cabf :=args [5].ValueNumber ;if _cabf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acaf :=float64 (int (args [6].ValueNumber ));if !_beee (_acaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_eead :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_eead =int (args [7].ValueNumber );if !_gede (_eead ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_dgeg ,_gdce :=_fgfe (_fafb ,_ffeff ,_eead );if _gdce .Type ==ResultTypeError {return _gdce ;};_dgeg *=_acaf ;_fffd ,_gdce :=_fgfe (_ffef ,_ffeff ,_eead );if _gdce .Type ==ResultTypeError {return _gdce ;};_fffd *=_acaf ;_cgbg ,_gdce :=_fgfe (_fafb ,_ffef ,_eead );if _gdce .Type ==ResultTypeError {return _gdce ;};_cgbg *=_acaf ;_acdf :=_cabf +_dgeg *100*_debb /_acaf ;_acdf /=_dbba +_cgbg *100*_debb /_acaf ;_acdf --;_acdf *=_acaf /_fffd ;return MakeNumberResult (_acdf );};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ccfab :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_gfec :=args [1].ValueNumber !=0;_cccac :=_ggcd (args [2:],[]string {},_gfec );return MakeStringResult (_ae .Join (_cccac ,_ccfab ));};func _fgc (_efde ,_efg int )int {switch _efg {case 1:if _efc (_efde ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Reference returns a string reference value to a range.
func (_dfffa Range )Reference (ctx Context ,ev Evaluator )Reference {_gbca :=_dfffa ._dedee .Reference (ctx ,ev );_fcgea :=_dfffa ._dedec .Reference (ctx ,ev );if _gbca .Type ==ReferenceTypeCell &&_fcgea .Type ==ReferenceTypeCell {return MakeRangeReference (_efdc (_gbca ,_fcgea ));};return ReferenceInvalid ;};func _dgbdea (_fbfaab Context ,_fbbdf ,_eada string )(string ,string ){_acdfa :=_fbbdf +"\u0031";_ccbdc :=_fbfaab .LastRow (_fbbdf );_agde :=_eada +_cbe .Itoa (_ccbdc );return _acdfa ,_agde ;};const (_beggd rmode =iota ;_ggcec ;_dabb ;);

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_adfa :=len (args );if _adfa !=6&&_adfa !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aeaafd ,_bdfc ,_cdced :=_ggd (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _cdced .Type ==ResultTypeError {return _cdced ;};_ecgg :=args [2];if _ecgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cffc :=_ecgg .ValueNumber ;if _cffc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_bcdd :=args [3];if _bcdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fecdb :=_bcdd .ValueNumber ;if _fecdb <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_fggeab :=args [4];if _fggeab .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_addae :=_fggeab .ValueNumber ;if _addae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gddg :=args [5];if _gddg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ddag :=float64 (int (_gddg .ValueNumber ));if !_beee (_ddag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cafeb :=0;if _adfa ==7&&args [6].Type !=ResultTypeEmpty {_gace :=args [6];if _gace .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cafeb =int (_gace .ValueNumber );if !_gede (_cafeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_edda :=0.0;_bdgc :=0.0;_gbcc :=1.0;_bcbd ,_cdced :=_dfaa (_aeaafd ,_bdfc ,_cffc ,_bdgc ,_addae ,_ddag ,_cafeb );if _cdced .Type ==ResultTypeError {return _cdced ;};_fcgd ,_cdced :=_dfaa (_aeaafd ,_bdfc ,_cffc ,_gbcc ,_addae ,_ddag ,_cafeb );if _cdced .Type ==ResultTypeError {return _cdced ;};_egbg :=(_gbcc -_bdgc )*0.5;for _abec :=0;_abec < 100&&_edda !=_fecdb ;_abec ++{_edda ,_cdced =_dfaa (_aeaafd ,_bdfc ,_cffc ,_egbg ,_addae ,_ddag ,_cafeb );if _cdced .Type ==ResultTypeError {return _cdced ;};if _fecdb ==_bcbd {return MakeNumberResult (_bdgc );}else if _fecdb ==_fcgd {return MakeNumberResult (_gbcc );}else if _fecdb ==_edda {return MakeNumberResult (_egbg );}else if _fecdb < _fcgd {_gbcc *=2.0;_fcgd ,_cdced =_dfaa (_aeaafd ,_bdfc ,_cffc ,_gbcc ,_addae ,_ddag ,_cafeb );if _cdced .Type ==ResultTypeError {return _cdced ;};_egbg =(_gbcc -_bdgc )*0.5;}else {if _fecdb < _edda {_bdgc =_egbg ;_bcbd =_edda ;}else {_gbcc =_egbg ;_fcgd =_edda ;};_egbg =_gbcc -(_gbcc -_bdgc )*((_fecdb -_fcgd )/(_bcbd -_fcgd ));};};return MakeNumberResult (_egbg );};

// Error is called in the case of parsing error and saves an error to a plex.
func (_gaaba *plex )Error (s string ){_bd .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_gaaba ._dgde =s ;};func (_aecc *yyParserImpl )Parse (yylex yyLexer )int {_afca :=_e .Now ();var _dcbe int ;var _bcdee yySymType ;var _ecaa []yySymType ;_ =_ecaa ;_eddecb :=_aecc ._gafb [:];Nerrs :=0;Errflag :=0;_bcfcb :=0;_aecc ._fbde =-1;_aeec :=-1;defer func (){_bcfcb =-1;_aecc ._fbde =-1;_aeec =-1}();_dafae :=-1;goto _cdeff ;_gfed :return 0;_geccf :return 1;_cdeff :if _dfdb (_afca ){_bd .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _geccf ;};if _acec >=4{_g .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_dfac (_aeec ),_bfdcg (_bcfcb ));};_dafae ++;if _dafae >=len (_eddecb ){_gaeb :=make ([]yySymType ,len (_eddecb )*2);copy (_gaeb ,_eddecb );_eddecb =_gaeb ;};_eddecb [_dafae ]=_bcdee ;_eddecb [_dafae ]._efdb =_bcfcb ;_begeb :if _dfdb (_afca ){_bd .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _geccf ;};_dcbe =_gfeg [_bcfcb ];if _dcbe <=_afcb {goto _abag ;};if _aecc ._fbde < 0{_aecc ._fbde ,_aeec =_ccabb (yylex ,&_aecc ._ebga );};_dcbe +=_aeec ;if _dcbe < 0||_dcbe >=_fdbdcg {goto _abag ;};_dcbe =_ccac [_dcbe ];if _aaecgf [_dcbe ]==_aeec {_aecc ._fbde =-1;_aeec =-1;_bcdee =_aecc ._ebga ;_bcfcb =_dcbe ;if Errflag > 0{Errflag --;};goto _cdeff ;};_abag :if _dfdb (_afca ){_bd .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _geccf ;};_dcbe =_abfd [_bcfcb ];if _dcbe ==-2{if _aecc ._fbde < 0{_aecc ._fbde ,_aeec =_ccabb (yylex ,&_aecc ._ebga );};_bcbbd :=0;for {if _bdab [_bcbbd +0]==-1&&_bdab [_bcbbd +1]==_bcfcb {break ;};_bcbbd +=2;};for _bcbbd +=2;;_bcbbd +=2{_dcbe =_bdab [_bcbbd +0];if _dcbe < 0||_dcbe ==_aeec {break ;};};_dcbe =_bdab [_bcbbd +1];if _dcbe < 0{goto _gfed ;};};if _dcbe ==0{switch Errflag {case 0:yylex .Error (_gfde (_bcfcb ,_aeec ));Nerrs ++;if _acec >=1{_g .Printf ("\u0025\u0073",_bfdcg (_bcfcb ));_g .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_dfac (_aeec ));};fallthrough;case 1,2:Errflag =3;for _dafae >=0{_dcbe =_gfeg [_eddecb [_dafae ]._efdb ]+_aecfc ;if _dcbe >=0&&_dcbe < _fdbdcg {_bcfcb =_ccac [_dcbe ];if _aaecgf [_bcfcb ]==_aecfc {goto _cdeff ;};};if _acec >=2{_g .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_eddecb [_dafae ]._efdb );};_dafae --;};goto _geccf ;case 3:if _acec >=2{_g .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_dfac (_aeec ));};if _aeec ==_faac {goto _geccf ;};_aecc ._fbde =-1;_aeec =-1;goto _begeb ;};};if _acec >=2{_g .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_dcbe ,_bfdcg (_bcfcb ));};_bbdcc :=_dcbe ;_acdcb :=_dafae ;_ =_acdcb ;_dafae -=_ffbg [_dcbe ];if _dafae +1>=len (_eddecb ){_dgfe :=make ([]yySymType ,len (_eddecb )*2);copy (_dgfe ,_eddecb );_eddecb =_dgfe ;};_bcdee =_eddecb [_dafae +1];_dcbe =_deafe [_dcbe ];_addf :=_fbff [_dcbe ];_gcgf :=_addf +_eddecb [_dafae ]._efdb +1;if _gcgf >=_fdbdcg {_bcfcb =_ccac [_addf ];}else {_bcfcb =_ccac [_gcgf ];if _aaecgf [_bcfcb ]!=-_dcbe {_bcfcb =_ccac [_addf ];};};switch _bbdcc {case 1:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{yylex .(*plex )._dedbf =_bcdee ._gcaa ;};case 3:_ecaa =_eddecb [_acdcb -2:_acdcb +1];{_bcdee ._gcaa =_ecaa [2]._gcaa ;};case 4:_ecaa =_eddecb [_acdcb -4:_acdcb +1];{};case 5:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewBool (_ecaa [1]._effab ._adcgd );};case 6:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewNumber (_ecaa [1]._effab ._adcgd );};case 7:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewString (_ecaa [1]._effab ._adcgd );};case 8:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewError (_ecaa [1]._effab ._adcgd );};case 9:_ecaa =_eddecb [_acdcb -2:_acdcb +1];{_bcdee ._gcaa =_ecaa [2]._gcaa ;};case 10:_ecaa =_eddecb [_acdcb -2:_acdcb +1];{_bcdee ._gcaa =NewNegate (_ecaa [2]._gcaa );};case 15:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =_ecaa [2]._gcaa ;};case 17:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewConstArrayExpr (_ecaa [2]._eaffab );};case 18:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._eaffab =append (_bcdee ._eaffab ,_ecaa [1]._daab );};case 19:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._eaffab =append (_ecaa [1]._eaffab ,_ecaa [3]._daab );};case 20:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._daab =append (_bcdee ._daab ,_ecaa [1]._gcaa );};case 21:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._daab =append (_ecaa [1]._daab ,_ecaa [3]._gcaa );};case 23:_ecaa =_eddecb [_acdcb -2:_acdcb +1];{_bcdee ._gcaa =NewPrefixExpr (_ecaa [1]._gcaa ,_ecaa [2]._gcaa );};case 25:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewSheetPrefixExpr (_ecaa [1]._effab ._adcgd );};case 26:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewCellRef (_ecaa [1]._effab ._adcgd );};case 27:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewRange (_ecaa [1]._gcaa ,_ecaa [3]._gcaa );};case 28:_ecaa =_eddecb [_acdcb -4:_acdcb +1];{_bcdee ._gcaa =NewPrefixRangeExpr (_ecaa [1]._gcaa ,_ecaa [2]._gcaa ,_ecaa [4]._gcaa );};case 29:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewNamedRangeRef (_ecaa [1]._effab ._adcgd );};case 30:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewHorizontalRange (_ecaa [1]._effab ._adcgd );};case 31:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._gcaa =NewVerticalRange (_ecaa [1]._effab ._adcgd );};case 32:_ecaa =_eddecb [_acdcb -2:_acdcb +1];{_bcdee ._gcaa =NewPrefixHorizontalRange (_ecaa [1]._gcaa ,_ecaa [2]._effab ._adcgd );};case 33:_ecaa =_eddecb [_acdcb -2:_acdcb +1];{_bcdee ._gcaa =NewPrefixVerticalRange (_ecaa [1]._gcaa ,_ecaa [2]._effab ._adcgd );};case 34:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypePlus ,_ecaa [3]._gcaa );};case 35:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeMinus ,_ecaa [3]._gcaa );};case 36:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeMult ,_ecaa [3]._gcaa );};case 37:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeDiv ,_ecaa [3]._gcaa );};case 38:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeExp ,_ecaa [3]._gcaa );};case 39:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeLT ,_ecaa [3]._gcaa );};case 40:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeGT ,_ecaa [3]._gcaa );};case 41:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeLEQ ,_ecaa [3]._gcaa );};case 42:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeGEQ ,_ecaa [3]._gcaa );};case 43:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeEQ ,_ecaa [3]._gcaa );};case 44:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeNE ,_ecaa [3]._gcaa );};case 45:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewBinaryExpr (_ecaa [1]._gcaa ,BinOpTypeConcat ,_ecaa [3]._gcaa );};case 47:_ecaa =_eddecb [_acdcb -2:_acdcb +1];{_bcdee ._gcaa =NewFunction (_ecaa [1]._effab ._adcgd ,nil );};case 48:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._gcaa =NewFunction (_ecaa [1]._effab ._adcgd ,_ecaa [2]._daab );};case 49:_ecaa =_eddecb [_acdcb -1:_acdcb +1];{_bcdee ._daab =append (_bcdee ._daab ,_ecaa [1]._gcaa );};case 50:_ecaa =_eddecb [_acdcb -3:_acdcb +1];{_bcdee ._daab =append (_ecaa [1]._daab ,_ecaa [3]._gcaa );};case 53:_ecaa =_eddecb [_acdcb -0:_acdcb +1];{_bcdee ._gcaa =NewEmptyExpr ();};};goto _cdeff ;};func _fddea (_abcaf Reference ,_bgbf Context )bool {return _bgbf .Sheet (_abcaf .Value )==InvalidReferenceContext ;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_bcfcbf []Result )Result ;

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bdgbd PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dgefa :=_bdgbd ._daac .Reference (ctx ,ev );switch _dgefa .Type {case ReferenceTypeSheet :if _fddea (_dgefa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dgefa .Value ));};_gebd :=_bdgbd .verticalRangeReference (_dgefa .Value );if _cdgbg ,_cgcf :=ev .GetFromCache (_gebd );_cgcf {return _cdgbg ;};_fefbb :=ctx .Sheet (_dgefa .Value );_cdda ,_ggdedg :=_dgbdea (_fefbb ,_bdgbd ._bedgf ,_bdgbd ._bbde );_dfab :=_bbbbf (_fefbb ,ev ,_cdda ,_ggdedg );ev .SetCache (_gebd ,_dfab );return _dfab ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dgefa .Type ));};};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_ecb ,_eagbe :=_aggd (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _eagbe .Type ==ResultTypeError {return _eagbe ;};_cffaf :=_ecb ._gcbf ;_acd :=_ecb ._aebb ;_dbeb :=_ecb ._cafe ;_fcgf :=_ecb ._eecf ;_dggda :=_ecb ._fefg ;_dcbd :=_ecb ._abbc ;_cbfag :=_gbf (_cffaf ,_acd ,_dbeb ,_fcgf ,_dggda ,_dcbd );if _cbfag .Type ==ResultTypeError {return _cbfag ;};_abgd :=_cbfag .ValueNumber /(1.0+_fcgf /_dggda );return MakeNumberResult (_abgd );};const _afe ="\u0028\u0020\u0028"+_egefc +"\u007c"+_agcc +"\u007c"+_cea +"\u007c"+_aga +"\u0029\u0029\u003f\u0024";

// GetEpoch returns a null time object for the invalid reference context.
func (_fgaeb *ivr )GetEpoch ()_e .Time {return _e .Time {}};const _cea ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gggd :=args [0];if _gggd .Type ==ResultTypeNumber {return _gggd ;};if _gggd .Type ==ResultTypeString {_bfdb ,_dfbfa :=_cbe .ParseFloat (_gggd .Value (),64);if _dfbfa ==nil {return MakeNumberResult (_bfdb );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};const (_bgcb countMode =iota ;_gefe ;_dbcce ;);

// String returns a string representation of String.
func (_aecgg String )String ()string {return "\u0022"+_aecgg ._ffbe +"\u0022"};type rmode byte ;func (_fcag Result )AsString ()Result {switch _fcag .Type {case ResultTypeNumber :return MakeStringResult (_fcag .Value ());default:return _fcag ;};};func init (){_gbgg ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_dbdcc ,_ceef :=_fdab (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _ceef .Type ==ResultTypeError {return _ceef ;};_bdage :=_dbdcc ._bbece ;_afag :=_dbdcc ._gaa ;_caf ,_ceef :=_gcb (_dbdcc ._cgeg ,_dbdcc ._gec ,_bdage ,_afag );if _ceef .Type ==ResultTypeError {return _ceef ;};return MakeNumberResult (_caf );};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_fdde ,_fbfba :=_gbgac ("\u0046\u0049\u004e\u0044",args );if _fbfba .Type !=ResultTypeEmpty {return _fbfba ;};_bece :=_ae .ToLower (_fdde ._gbbegd );_acbed :=_ae .ToLower (_fdde ._acfg );if _bece ==""{return MakeNumberResult (1.0);};_dbca :=_fdde ._geccc -1;_agbc :=1;_daef :=0;for _egcab :=range _acbed {if _egcab !=0{_ddff :=1;if _egcab -_daef > 1{_ddff =2;};_agbc +=_ddff ;};if _agbc > _dbca {_gdcb :=_dgg .Index (_bece ,_acbed [_egcab :]);if _gdcb ==0{return MakeNumberResult (float64 (_agbc ));};};_daef =_egcab ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eggbg :=args [0].AsNumber ();if _eggbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _acde float64 ;_gbbeg :=args [1].AsNumber ();if _gbbeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acde =_gbbeg .ValueNumber ;if _acde < 0&&_eggbg .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_acbe :=_eggbg .ValueNumber ;_acbe ,_cega :=_ea .Modf (_acbe /_acde );if _cega !=0{if _eggbg .ValueNumber < 0&&_cega < 0{_acbe --;};};return MakeNumberResult (_acbe *_acde );};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _bggeg (args ,false )};func _bfdcg (_dcff int )string {if _dcff >=0&&_dcff < len (_eddea ){if _eddea [_dcff ]!=""{return _eddea [_dcff ];};};return _g .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_dcff );};var _abe =map[string ]*_be .Regexp {};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aeaafb :=int (args [0].ValueNumber );return MakeBoolResult (_aeaafb ==_aeaafb /2*2);};var _fege =[...]uint8 {0,17,33,49,63,78,93,108};var _dbcad =[...]int {1};func (_edgba PrefixVerticalRange )verticalRangeReference (_cgdaf string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cgdaf ,_edgba ._bedgf ,_edgba ._bbde );};var _ffbg =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Number is a nubmer expression.
type Number struct{_abdfb float64 };

// Reference returns a string reference value to a sheet.
func (_fcadg SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_fcadg ._gedee };};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eccg :=args [0].AsNumber ();if _eccg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_gfbc :=float64 (1);if _eccg .ValueNumber < 0{_gfbc =-1;};if len (args )> 1{_cgbf :=args [1].AsNumber ();if _cgbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gfbc =_cgbf .ValueNumber ;};_eadg :=float64 (1);if len (args )> 2{_deddb :=args [2].AsNumber ();if _deddb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_eadg =_deddb .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ea .Ceil (_eccg .ValueNumber ));};_fcad :=_eccg .ValueNumber ;_fcad ,_ebac :=_ea .Modf (_fcad /_gfbc );if _ebac !=0{if _eccg .ValueNumber > 0{_fcad ++;}else if _eadg < 0{_fcad --;};};return MakeNumberResult (_fcad *_gfbc );};

// Reference returns a string reference value to a named range.
func (_cedb NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_cedb ._egba };};const _agbdf =57373;var _dface =map[string ]FunctionComplex {};const _dgbe =57370;func _gebe (_dafea []Result ,_babc bool )Result {_edgbf :="\u004d\u0049\u004e";if _babc {_edgbf ="\u004d\u0049\u004e\u0041";};if len (_dafea )==0{return MakeErrorResult (_edgbf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acbf :=_ea .MaxFloat64 ;for _ ,_bfceg :=range _dafea {switch _bfceg .Type {case ResultTypeNumber :if (_babc ||!_bfceg .IsBoolean )&&_bfceg .ValueNumber < _acbf {_acbf =_bfceg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_afaa :=_gebe (_bfceg .ListValues (),_babc );if _afaa .ValueNumber < _acbf {_acbf =_afaa .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_baebb :=0.0;if _babc {_baebb =_bfceg .AsNumber ().ValueNumber ;};if _baebb < _acbf {_acbf =_baebb ;};default:_bd .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_edgbf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bfceg .Type );};};if _acbf ==_ea .MaxFloat64 {_acbf =0;};return MakeNumberResult (_acbf );};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bff :=_e .Now ();_ ,_bbdf :=_bff .Zone ();_aaec :=_eccb (_fcd ,_bff .Unix ()+int64 (_bbdf ))+1;return MakeNumberResult (_aaec );};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_egde :=args [0].AsString ();if _egde .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgddd :=_fg .Buffer {};_fgef :=false ;for _ ,_aeddg :=range _egde .ValueString {if !_fgef &&_b .IsLetter (_aeddg ){_cgddd .WriteRune (_b .ToUpper (_aeddg ));}else {_cgddd .WriteRune (_b .ToLower (_aeddg ));};_fgef =_b .IsLetter (_aeddg );};return MakeStringResult (_cgddd .String ());};var _ccac =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};const _aga ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _aggd (_ceeb []Result ,_feed string )(*durationArgs ,Result ){_cccb :=len (_ceeb );if _cccb !=5&&_cccb !=6{return nil ,MakeErrorResult (_feed +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abge ,_cdga ,_bbbgg :=_ggd (_ceeb [0],_ceeb [1],_feed );if _bbbgg .Type ==ResultTypeError {return nil ,_bbbgg ;};_dfad :=_ceeb [2];if _dfad .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feed +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ffdf :=_dfad .ValueNumber ;if _ffdf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cbf :=_ceeb [3];if _cbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feed +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gge :=_cbf .ValueNumber ;if _gge < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_aega :=_ceeb [4];if _aega .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feed +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccfg :=float64 (int (_aega .ValueNumber ));if !_beee (_ccfg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_daad :=0;if _cccb ==6&&_ceeb [5].Type !=ResultTypeEmpty {_fca :=_ceeb [5];if _fca .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_feed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_daad =int (_fca .ValueNumber );if !_gede (_daad ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_feed );};};return &durationArgs {_abge ,_cdga ,_ffdf ,_gge ,_ccfg ,_daad },_bgd ;};func _ecfe (_ebfb ,_gcd _e .Time ,_dccg int )_e .Time {_dfdf :=_e .Date (_ebfb .Year (),_gcd .Month (),_gcd .Day (),0,0,0,0,_e .UTC );if _dfdf .After (_ebfb ){_dfdf =_dfdf .AddDate (-1,0,0);};for !_dfdf .After (_ebfb ){_dfdf =_dfdf .AddDate (0,12/_dccg ,0);};return _dfdf ;};func _aaac (_ggde Result ,_fafa ,_bgec int )[][]Result {_beca :=[][]Result {};switch _ggde .Type {case ResultTypeArray :for _gaee ,_ffeg :=range _ggde .ValueArray {if _gaee < _fafa {_beca =append (_beca ,_bfgg (MakeListResult (_ffeg ),_bgec ));}else {_beca =append (_beca ,_bfgg (MakeErrorResultType (ErrorTypeNA ,""),_bgec ));};};case ResultTypeList :_efe :=_bfgg (_ggde ,_bgec );for _abbcf :=0;_abbcf < _fafa ;_abbcf ++{_beca =append (_beca ,_efe );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ddada :=0;_ddada < _fafa ;_ddada ++{_adeca :=_bfgg (_ggde ,_bgec );_beca =append (_beca ,_adeca );};};return _beca ;};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcbfff :=args [0].AsString ();if _bcbfff .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_bcbfff .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_bcbfff .ValueString [0]));};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cffec :=args [0].AsNumber ();if _cffec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_efffb :=float64 (1);if _cffec .ValueNumber < 0{_efffb =-1;};if len (args )> 1{_eeecd :=args [1].AsNumber ();if _eeecd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efffb =_eeecd .ValueNumber ;};if _efffb < 0&&_cffec .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_ea .Ceil (_cffec .ValueNumber ));};_eeaf :=_cffec .ValueNumber ;_eeaf ,_dacea :=_ea .Modf (_eeaf /_efffb );if _dacea > 0{_eeaf ++;};return MakeNumberResult (_eeaf *_efffb );};func (_fff *defEval )checkLastEvalIsRef (_ed Context ,_bdf Expression ){switch _bdf .(type ){case FunctionCall :switch _bdf .(FunctionCall )._begfc {case "\u0049\u0053\u0052E\u0046":for _ ,_adg :=range _bdf .(FunctionCall )._gdefg {switch _adg .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_fbf :=_adg .Eval (_ed ,_fff );_fff ._dda =!(_fbf .Type ==ResultTypeError &&_fbf .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_fff ._dda =false ;};};};};};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggccb :=args [0].AsString ();if _ggccb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_ggccb .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_ggccb .ValueString [0]));};

// Reference returns an invalid reference for String.
func (_fcabc String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _gdad =false ;func _cfa (_dcac Context ,_bfdbe ,_bfbee int )(string ,string ){_begeeb :="\u0041"+_cbe .Itoa (_bfdbe );_bceg :=_dcac .LastColumn (_bfdbe ,_bfbee );_cecb :=_bceg +_cbe .Itoa (_bfbee );return _begeeb ,_cecb ;};type node struct{_ebca tokenType ;_adcgd string ;};type yyLexer interface{Lex (_cdfee *yySymType )int ;Error (_fbggg string );};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ebbf :=[]float64 {};for _ ,_ecdbb :=range args {switch _ecdbb .Type {case ResultTypeString :_gaab :=_ecdbb .AsNumber ();if _gaab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ebbf =append (_ebbf ,_gaab .ValueNumber );case ResultTypeList ,ResultTypeArray :_cgac :=GCD (_ecdbb .ListValues ());if _cgac .Type !=ResultTypeNumber {return _cgac ;};_ebbf =append (_ebbf ,_cgac .ValueNumber );case ResultTypeNumber :_ebbf =append (_ebbf ,_ecdbb .ValueNumber );case ResultTypeError :return _ecdbb ;default:return MakeErrorResult (_g .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecdbb .Type ));};};if _ebbf [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_ebbf )==1{return MakeNumberResult (_ebbf [0]);};_bdad :=_ebbf [0];for _cgfff :=1;_cgfff < len (_ebbf );_cgfff ++{if _ebbf [_cgfff ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdad =_ebce (_bdad ,_ebbf [_cgfff ]);};return MakeNumberResult (_bdad );};const _fdbdcg =187;

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_ecdb :=len (args );if _ecdb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ecdb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_caabb :=args [0];_afff :=args [1];if _afff .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bged :=args [2].AsNumber ();if _bged .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bagfd :=false ;if _ecdb ==4&&args [3].Type !=ResultTypeEmpty {_dadf :=args [3].AsNumber ();if _dadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dadf .ValueNumber ==0{_bagfd =true ;};};_ccdae :=int (_bged .ValueNumber )-1;_dbcd :=-1;_gbcd :=false ;_fbce :for _ebdg ,_acefb :=range _afff .ValueArray {if len (_acefb )==0{continue ;};_gcfd :=_acefb [0];switch _ebeb (_gcfd ,_caabb ,false ,_bagfd ){case _bgdfb :_dbcd =_ebdg ;case _fcbg :_dbcd =_ebdg ;_gbcd =true ;break _fbce ;};};if _dbcd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gdfd :=_afff .ValueArray [_dbcd ];if _ccdae < 0||_ccdae >=len (_gdfd ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gbcd ||!_bagfd {return _gdfd [_ccdae ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var _ffded =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _dcdf =57377;

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acba :=0;_gedgf :=false ;for _ ,_fadb :=range args {switch _fadb .Type {case ResultTypeList ,ResultTypeArray :_dcded :=Xor (_fadb .ListValues ());if _dcded .Type ==ResultTypeError {return _dcded ;};if _dcded .ValueNumber !=0{_acba ++;};_gedgf =true ;case ResultTypeNumber :if _fadb .ValueNumber !=0{_acba ++;};_gedgf =true ;case ResultTypeString :case ResultTypeError :return _fadb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_gedgf {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_acba %2!=0);};func _ebeb (_gdeef ,_ddad Result ,_bcfb ,_gfee bool )cmpResult {_gdeef =_gdeef .AsNumber ();_ddad =_ddad .AsNumber ();if _gdeef .Type !=_ddad .Type {return _dbdce ;};if _gdeef .Type ==ResultTypeNumber {if _gdeef .ValueNumber ==_ddad .ValueNumber {return _fcbg ;};if _gdeef .ValueNumber < _ddad .ValueNumber {return _bgdfb ;};return _bbaa ;};if _gdeef .Type ==ResultTypeString {_aebfd :=_gdeef .ValueString ;_cgbge :=_ddad .ValueString ;if !_bcfb {_aebfd =_ae .ToLower (_aebfd );_cgbge =_ae .ToLower (_cgbge );};if _gfee {_fdddg :=_dgg .Match (_cgbge ,_aebfd );if _fdddg {return _fcbg ;}else {return _bbaa ;};};return cmpResult (_ae .Compare (_aebfd ,_cgbge ));};if _gdeef .Type ==ResultTypeEmpty {return _fcbg ;};if _gdeef .Type ==ResultTypeList {if len (_gdeef .ValueList )< len (_ddad .ValueList ){return _bgdfb ;};if len (_gdeef .ValueList )> len (_ddad .ValueList ){return _bbaa ;};for _edad :=range _gdeef .ValueList {_geded :=_ebeb (_gdeef .ValueList [_edad ],_ddad .ValueList [_edad ],_bcfb ,_gfee );if _geded !=_fcbg {return _geded ;};};return _fcbg ;};if _gdeef .Type ==ResultTypeList {if len (_gdeef .ValueArray )< len (_ddad .ValueArray ){return _bgdfb ;};if len (_gdeef .ValueArray )> len (_ddad .ValueArray ){return _bbaa ;};for _cbeg :=range _gdeef .ValueArray {_bfedf :=_gdeef .ValueArray [_cbeg ];_bbfc :=_gdeef .ValueArray [_cbeg ];if len (_bfedf )< len (_bbfc ){return _bgdfb ;};if len (_bfedf )> len (_bbfc ){return _bbaa ;};for _adff :=range _bfedf {_eaca :=_ebeb (_bfedf [_adff ],_bbfc [_adff ],_bcfb ,_gfee );if _eaca !=_fcbg {return _eaca ;};};};return _fcbg ;};return _dbdce ;};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_feeg (args ,_bgcb ))};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_dabff :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dabff =int (args [1].ValueNumber );if _dabff < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _dabff ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_bcea :=args [0].Value ();_ccbg :=len (_bcea );if _dabff > _ccbg {return MakeStringResult (_bcea );};return MakeStringResult (_bcea [_ccbg -_dabff :_ccbg ]);};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_daac Expression ;_bedgf ,_bbde string ;};const _bffea ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";func _abca (){_eaff =_be .MustCompile ("\u005e\u0030\u002b\u0024");_cgec =_be .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_aede =_be .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_cadd =_be .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_dbcdc =_be .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_caea =_be .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cegd =_be .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_gcfe =_be .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_ddee =_be .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_cbef =_be .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_cdgd =_be .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_ggcg =_be .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_eedf +_eedf +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_eedf +_eedf +"\u0029\u002b\u0059+\u0024");_affd =_be .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_eedf +_eedf +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_eedf +_eedf +"\u0029\u002b\u0059+\u0024");_ccbd =_be .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_gade =_be .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};func _bgad (_egcb Result ,_cacf ,_gdgf string )(float64 ,Result ){var _add float64 ;switch _egcb .Type {case ResultTypeNumber :_add =float64 (int (_egcb .ValueNumber ));case ResultTypeString :_dcga :=DateValue ([]Result {_egcb });if _dcga .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_cacf +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_gdgf );};_add =_dcga .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_gdgf );};if _add < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_cacf +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _add ,_bgd ;};func _gadef (_aadg ,_ecbc []string )[]string {for _ ,_dcef :=range _ecbc {_aadg =append (_aadg ,_dcef );};return _aadg ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_cgdeb ,_aged :=_babg ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _aged .Type !=ResultTypeEmpty {return _aged ;};_cdgbf :=_cgdeb ._bcae ;_ecfdf :=_cgdeb ._fddb ;_gfdg :=_cgdeb ._aeeg ;_gcgca :=_cgdeb ._abbcfa ;_cbcd :=len (_cdgbf );if _ecfdf > _cbcd {_ecfdf =_cbcd ;};_ggdc :=_ecfdf +_gfdg ;if _ggdc > _cbcd {_ggdc =_cbcd ;};_ebfa :=_cdgbf [0:_ecfdf ]+_gcgca +_cdgbf [_ggdc :];return MakeStringResult (_ebfa );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};func _ceeg (){_abe ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_be .MustCompile ("\u005e"+_dad +_afe );_abe ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_be .MustCompile ("\u005e"+_ead +_afe );_abe ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_be .MustCompile ("\u005e"+_df +_afe );_abe ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_be .MustCompile ("\u005e"+_eda +_afe );_cg ["\u0068\u0068"]=_be .MustCompile (_bdd +_egefc +"\u0024");_cg ["\u0068\u0068\u003am\u006d"]=_be .MustCompile (_bdd +_agcc +"\u0024");_cg ["\u006d\u006d\u003as\u0073"]=_be .MustCompile (_bdd +_cea +"\u0024");_cg ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_be .MustCompile (_bdd +_aga +"\u0024");_aed =[]*_be .Regexp {_be .MustCompile ("\u005e"+_dad +"\u0024"),_be .MustCompile ("\u005e"+_ead +"\u0024"),_be .MustCompile ("\u005e"+_df +"\u0024"),_be .MustCompile ("\u005e"+_eda +"\u0024")};_bgf =[]*_be .Regexp {_be .MustCompile ("\u005e"+_egefc +"\u0024"),_be .MustCompile ("\u005e"+_agcc +"\u0024"),_be .MustCompile ("\u005e"+_cea +"\u0024"),_be .MustCompile ("\u005e"+_aga +"\u0024")};};

// Update updates the FunctionCall references after removing a row/column.
func (_ccage FunctionCall )Update (q *_de .UpdateQuery )Expression {_gfdad :=[]Expression {};for _ ,_geag :=range _ccage ._gdefg {_gddaf :=_geag .Update (q );_gfdad =append (_gfdad ,_gddaf );};return FunctionCall {_begfc :_ccage ._begfc ,_gdefg :_gfdad };};

// Update updates references in the PrefixExpr after removing a row/column.
func (_ddaa PrefixExpr )Update (q *_de .UpdateQuery )Expression {_ggdcg :=_ddaa ;_ebde :=_ddaa ._fbfaf .String ();if _ebde ==q .SheetToUpdate {_caeag :=*q ;_caeag .UpdateCurrentSheet =true ;_ggdcg ._gbag =_ddaa ._gbag .Update (&_caeag );};return _ggdcg ;};func (_bfcbc Result )String ()string {return _bfcbc .Value ()};func (_baca *Lexer )lex (_ecgc _fd .Reader ){_ggeb ,_gbbd ,_efaa :=0,0,0;_ecad :=-1;_ececf ,_badge ,_agggg :=0,0,0;_ =_agggg ;_afcfa :=1;_ =_afcfa ;_effdg :=make ([]byte ,4096);_dbagf :=false ;for !_dbagf {_gdba :=0;if _ececf > 0{_gdba =_gbbd -_ececf ;};_gbbd =0;_aadf ,_cgaff :=_ecgc .Read (_effdg [_gdba :]);if _aadf ==0||_cgaff !=nil {_dbagf =true ;};_efaa =_aadf +_gdba ;if _efaa < len (_effdg ){_ecad =_efaa ;};{_ggeb =_gbbbg ;_ececf =0;_badge =0;_agggg =0;};{var _ggdfa int ;var _abdda uint ;if _gbbd ==_efaa {goto _aggae ;};if _ggeb ==0{goto _dfce ;};_fbae :_ggdfa =int (_edcae [_ggeb ]);_abdda =uint (_bgfd [_ggdfa ]);_ggdfa ++;for ;_abdda > 0;_abdda --{_ggdfa ++;switch _bgfd [_ggdfa -1]{case 2:_ececf =_gbbd ;};};switch _ggeb {case 30:switch _effdg [_gbbd ]{case 34:goto _bbeee ;case 35:goto _gbfd ;case 36:goto _dfgcc ;case 38:goto _bbac ;case 39:goto _abagb ;case 40:goto _eaeg ;case 41:goto _gbcdg ;case 42:goto _ffgda ;case 43:goto _bbbbg ;case 44:goto _acfab ;case 45:goto _adgaf ;case 47:goto _ggded ;case 58:goto _acbaa ;case 59:goto _ecccga ;case 60:goto _gabda ;case 61:goto _eadbe ;case 62:goto _bdgcg ;case 63:goto _cdeb ;case 70:goto _bbaec ;case 84:goto _bebed ;case 92:goto _fcdac ;case 94:goto _cgebg ;case 95:goto _agef ;case 123:goto _abgae ;case 125:goto _cdfc ;};switch {case _effdg [_gbbd ]< 65:switch {case _effdg [_gbbd ]> 37:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cgafb ;};case _effdg [_gbbd ]>=33:goto _cdeb ;};case _effdg [_gbbd ]> 90:switch {case _effdg [_gbbd ]> 93:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _gcef ;};case _effdg [_gbbd ]>=91:goto _cdeb ;};default:goto _cabaa ;};goto _cggfd ;case 1:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _adfd ;case 123:goto _adfd ;case 125:goto _adfd ;};switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _adfd ;};case _effdg [_gbbd ]> 45:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _adfd ;};case _effdg [_gbbd ]>=58:goto _adfd ;};default:goto _adfd ;};goto _cggfd ;case 0:goto _dfce ;case 2:if _effdg [_gbbd ]==34{goto _dcfgc ;};goto _bbeee ;case 31:if _effdg [_gbbd ]==34{goto _bbeee ;};goto _aada ;case 3:switch _effdg [_gbbd ]{case 78:goto _gdfcg ;case 82:goto _bcgd ;};goto _cdeb ;case 4:switch _effdg [_gbbd ]{case 47:goto _abged ;case 85:goto _ceebdf ;};goto _cdeb ;case 5:if _effdg [_gbbd ]==65{goto _bbddf ;};goto _cdeb ;case 6:switch _effdg [_gbbd ]{case 76:goto _bbcfa ;case 77:goto _dddd ;};goto _cdeb ;case 7:if _effdg [_gbbd ]==76{goto _dddd ;};goto _cdeb ;case 8:if _effdg [_gbbd ]==33{goto _bbddf ;};goto _cdeb ;case 9:if _effdg [_gbbd ]==69{goto _fgbb ;};goto _cdeb ;case 10:if _effdg [_gbbd ]==70{goto _bdca ;};goto _cdeb ;case 11:if _effdg [_gbbd ]==33{goto _cggg ;};goto _cdeb ;case 12:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _cdeb ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=45{goto _cdeb ;};case _effdg [_gbbd ]>=34:goto _cdeb ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]< 65:if 58<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=63{goto _cdeb ;};case _effdg [_gbbd ]> 90:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _cdeb ;};default:goto _abffa ;};default:goto _faae ;};goto _cggfd ;case 13:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _cdeb ;case 58:goto _dggcb ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=45{goto _cdeb ;};case _effdg [_gbbd ]>=34:goto _cdeb ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _cdeb ;};case _effdg [_gbbd ]>=59:goto _cdeb ;};default:goto _faae ;};goto _cggfd ;case 14:if _effdg [_gbbd ]==36{goto _eeecda ;};if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _adcc ;};goto _adfd ;case 15:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _adcc ;};goto _adfd ;case 32:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _adcc ;};goto _ebfaf ;case 16:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 47:goto _cdeb ;case 58:goto _gggce ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 45:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _daadd ;};case _effdg [_gbbd ]>=34:goto _cdeb ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]> 90:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _cdeb ;};case _effdg [_gbbd ]>=65:goto _abffa ;};default:goto _cdeb ;};goto _cggfd ;case 17:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _adfd ;case 123:goto _adfd ;case 125:goto _adfd ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=45{goto _adfd ;};case _effdg [_gbbd ]>=34:goto _adfd ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _adfd ;};case _effdg [_gbbd ]>=58:goto _adfd ;};default:goto _daadd ;};goto _cggfd ;case 33:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _aagfb ;case 123:goto _aagfb ;case 125:goto _aagfb ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=45{goto _aagfb ;};case _effdg [_gbbd ]>=34:goto _aagfb ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _aagfb ;};case _effdg [_gbbd ]>=58:goto _aagfb ;};default:goto _daadd ;};goto _cggfd ;case 18:if _effdg [_gbbd ]==36{goto _ecfeg ;};if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _efbaf ;};goto _adfd ;case 19:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _efbaf ;};goto _adfd ;case 34:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _efbaf ;};goto _dadd ;case 20:switch _effdg [_gbbd ]{case 39:goto _cdeb ;case 42:goto _cdeb ;case 47:goto _cdeb ;case 58:goto _cdeb ;case 63:goto _cdeb ;};if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=93{goto _cdeb ;};goto _ccgg ;case 21:switch _effdg [_gbbd ]{case 39:goto _cbbaf ;case 42:goto _cdeb ;case 47:goto _cdeb ;case 58:goto _cdeb ;case 63:goto _cdeb ;};if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=93{goto _cdeb ;};goto _ccgg ;case 22:if _effdg [_gbbd ]==33{goto _aeagc ;};goto _cdeb ;case 35:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _dacedg ;case 58:goto _dggcb ;case 101:goto _cgga ;case 123:goto _ecce ;case 125:goto _ecce ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=47{goto _ecce ;};case _effdg [_gbbd ]>=34:goto _ecce ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _ecce ;};case _effdg [_gbbd ]>=59:goto _ecce ;};default:goto _cgafb ;};goto _cggfd ;case 36:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _ecce ;case 101:goto _cgga ;case 123:goto _ecce ;case 125:goto _ecce ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=45{goto _ecce ;};case _effdg [_gbbd ]>=34:goto _ecce ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _ecce ;};case _effdg [_gbbd ]>=58:goto _ecce ;};default:goto _dacedg ;};goto _cggfd ;case 23:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _cgef ;case 123:goto _cgef ;case 125:goto _cgef ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=45{goto _cgef ;};case _effdg [_gbbd ]>=34:goto _cgef ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _cgef ;};case _effdg [_gbbd ]>=58:goto _cgef ;};default:goto _gacad ;};goto _cggfd ;case 37:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 47:goto _ecce ;case 123:goto _ecce ;case 125:goto _ecce ;};switch {case _effdg [_gbbd ]< 48:switch {case _effdg [_gbbd ]> 35:if 37<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=45{goto _ecce ;};case _effdg [_gbbd ]>=34:goto _ecce ;};case _effdg [_gbbd ]> 57:switch {case _effdg [_gbbd ]> 63:if 91<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=94{goto _ecce ;};case _effdg [_gbbd ]>=58:goto _ecce ;};default:goto _gacad ;};goto _cggfd ;case 38:switch _effdg [_gbbd ]{case 61:goto _egbb ;case 62:goto _gccc ;};goto _daafc ;case 39:if _effdg [_gbbd ]==61{goto _ddbfa ;};goto _afbbd ;case 24:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _cdeb ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _cdeb ;};default:goto _cdeb ;};goto _cggfd ;case 40:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _fecbg ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _fecbg ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 41:switch _effdg [_gbbd ]{case 46:goto _babcg ;case 92:goto _babcg ;case 95:goto _babcg ;};switch {case _effdg [_gbbd ]< 65:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _babcg ;};case _effdg [_gbbd ]> 90:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _babcg ;};default:goto _babcg ;};goto _fabed ;case 42:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 43:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _aagfb ;case 125:goto _aagfb ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _aagfb ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};default:goto _aagfb ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _fecbg ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _aagfb ;};default:goto _aagfb ;};goto _cggfd ;case 44:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _adfd ;case 125:goto _adfd ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _adfd ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _adfd ;};default:goto _adfd ;};goto _cggfd ;case 25:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 65:goto _cebf ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _cdeb ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 66<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _cdeb ;};default:goto _cdeb ;};goto _cggfd ;case 45:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 76:goto _eagcf ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 46:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 83:goto _agba ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 47:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 69:goto _cbcb ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 26:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 79:goto _ffcdf ;case 82:goto _eegdb ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _cdeb ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _cdeb ;};default:goto _cdeb ;};goto _cggfd ;case 48:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 68:goto _ecbe ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 49:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 79:goto _fcgdd ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 50:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 36:goto _fgage ;case 40:goto _bbdafc ;case 46:goto _fecbg ;case 58:goto _gggce ;case 85:goto _agba ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 59:switch {case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _ccfb ;};case _effdg [_gbbd ]>=34:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _daefd ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 27:switch _effdg [_gbbd ]{case 46:goto _babcg ;case 92:goto _babcg ;case 95:goto _babcg ;};switch {case _effdg [_gbbd ]< 65:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _babcg ;};case _effdg [_gbbd ]> 90:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _babcg ;};default:goto _babcg ;};goto _cdeb ;case 28:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _cegb ;case 120:goto _eafd ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _cdeb ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _cdeb ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _cdeb ;};default:goto _cdeb ;};goto _cggfd ;case 51:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _cegb ;case 108:goto _adce ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 52:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _cegb ;case 102:goto _fgfac ;case 110:goto _badfc ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 53:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _cegb ;case 110:goto _dadc ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 54:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _gabef ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 55:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _gfcfa ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _gfcfa ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 56:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 40:goto _agab ;case 46:goto _gfcfa ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _gfcfa ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _gfcfa ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 57:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _cegb ;case 109:goto _efedb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 58:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _dfaf ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _fabed ;case 125:goto _fabed ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _fabed ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _fabed ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _fabed ;};default:goto _fabed ;};goto _cggfd ;case 59:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _bbfa ;case 123:goto _adfd ;case 125:goto _adfd ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _adfd ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _adfd ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _bbfa ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _adfd ;};default:goto _adfd ;};goto _cggfd ;case 29:switch _effdg [_gbbd ]{case 33:goto _bbed ;case 46:goto _cegb ;case 92:goto _babcg ;case 95:goto _cegb ;case 123:goto _cdeb ;case 125:goto _cdeb ;};switch {case _effdg [_gbbd ]< 58:switch {case _effdg [_gbbd ]< 37:if 34<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=35{goto _cdeb ;};case _effdg [_gbbd ]> 47:if 48<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=57{goto _cegb ;};default:goto _cdeb ;};case _effdg [_gbbd ]> 63:switch {case _effdg [_gbbd ]< 91:if 65<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=90{goto _cegb ;};case _effdg [_gbbd ]> 94:if 97<=_effdg [_gbbd ]&&_effdg [_gbbd ]<=122{goto _cegb ;};default:goto _cdeb ;};default:goto _cdeb ;};goto _cggfd ;};_cdeb :_ggeb =0;goto _fcef ;_cggfd :_ggeb =1;goto _fcef ;_bbeee :_ggeb =2;goto _fcef ;_gbfd :_ggeb =3;goto _fcef ;_gdfcg :_ggeb =4;goto _fcef ;_abged :_ggeb =5;goto _fcef ;_ceebdf :_ggeb =6;goto _fcef ;_bbcfa :_ggeb =7;goto _fcef ;_dddd :_ggeb =8;goto _fcef ;_bcgd :_ggeb =9;goto _fcef ;_fgbb :_ggeb =10;goto _fcef ;_bdca :_ggeb =11;goto _fcef ;_dfgcc :_ggeb =12;goto _fcef ;_faae :_ggeb =13;goto _fcef ;_dggcb :_ggeb =14;goto _fcef ;_eeecda :_ggeb =15;goto _fcef ;_abffa :_ggeb =16;goto _fcef ;_fgage :_ggeb =17;goto _fcef ;_gggce :_ggeb =18;goto _fcef ;_ecfeg :_ggeb =19;goto _fcef ;_abagb :_ggeb =20;goto _fcef ;_ccgg :_ggeb =21;goto _fcef ;_cbbaf :_ggeb =22;goto _fcef ;_cgga :_ggeb =23;goto _fcef ;_cabaa :_ggeb =24;goto _fcef ;_bbaec :_ggeb =25;goto _fcef ;_bebed :_ggeb =26;goto _fcef ;_fcdac :_ggeb =27;goto _fcef ;_agef :_ggeb =28;goto _fcef ;_gcef :_ggeb =29;goto _fcef ;_adfd :_ggeb =30;goto _egga ;_bbed :_ggeb =30;goto _geea ;_bbddf :_ggeb =30;goto _bebbb ;_cggg :_ggeb =30;goto _aege ;_aeagc :_ggeb =30;goto _aaedc ;_cgef :_ggeb =30;goto _bcfce ;_bbdafc :_ggeb =30;goto _dafd ;_bbac :_ggeb =30;goto _cbcdd ;_eaeg :_ggeb =30;goto _aeeff ;_gbcdg :_ggeb =30;goto _bfbd ;_ffgda :_ggeb =30;goto _feege ;_bbbbg :_ggeb =30;goto _faced ;_acfab :_ggeb =30;goto _ffag ;_adgaf :_ggeb =30;goto _cadb ;_ggded :_ggeb =30;goto _febg ;_acbaa :_ggeb =30;goto _cacb ;_ecccga :_ggeb =30;goto _cgfbd ;_eadbe :_ggeb =30;goto _ggaae ;_cgebg :_ggeb =30;goto _bgeda ;_abgae :_ggeb =30;goto _acafc ;_cdfc :_ggeb =30;goto _abacf ;_aada :_ggeb =30;goto _ffecd ;_ebfaf :_ggeb =30;goto _aceba ;_aagfb :_ggeb =30;goto _aadfa ;_dadd :_ggeb =30;goto _gbfe ;_ecce :_ggeb =30;goto _gcfg ;_daafc :_ggeb =30;goto _bdfe ;_egbb :_ggeb =30;goto _bedc ;_gccc :_ggeb =30;goto _abaa ;_afbbd :_ggeb =30;goto _cfddb ;_ddbfa :_ggeb =30;goto _bdgf ;_fabed :_ggeb =30;goto _bbaad ;_agab :_ggeb =30;goto _acebd ;_dcfgc :_ggeb =31;goto _gfbf ;_adcc :_ggeb =32;goto _fcef ;_daadd :_ggeb =33;goto _ccbbfa ;_efbaf :_ggeb =34;goto _fcef ;_cgafb :_ggeb =35;goto _ggfd ;_dacedg :_ggeb =36;goto _ggfd ;_gacad :_ggeb =37;goto _ggfd ;_gabda :_ggeb =38;goto _fcef ;_bdgcg :_ggeb =39;goto _fcef ;_fecbg :_ggeb =40;goto _agfg ;_babcg :_ggeb =41;goto _fcef ;_cegb :_ggeb =42;goto _agfg ;_ccfb :_ggeb =43;goto _ccbbfa ;_daefd :_ggeb =44;goto _agfg ;_cbcb :_ggeb =44;goto _aabe ;_fcgdd :_ggeb =44;goto _cgafg ;_cebf :_ggeb =45;goto _agfg ;_eagcf :_ggeb =46;goto _agfg ;_agba :_ggeb =47;goto _agfg ;_ffcdf :_ggeb =48;goto _agfg ;_ecbe :_ggeb =49;goto _agfg ;_eegdb :_ggeb =50;goto _agfg ;_eafd :_ggeb =51;goto _agfg ;_adce :_ggeb =52;goto _agfg ;_fgfac :_ggeb =53;goto _agfg ;_dadc :_ggeb =54;goto _agfg ;_gabef :_ggeb =55;goto _agfg ;_gfcfa :_ggeb =56;goto _agfg ;_badfc :_ggeb =57;goto _agfg ;_efedb :_ggeb =58;goto _agfg ;_dfaf :_ggeb =59;goto _agfg ;_bbfa :_ggeb =59;goto _edfb ;_bebbb :_ggdfa =3;goto _febe ;_aege :_ggdfa =5;goto _febe ;_geea :_ggdfa =7;goto _febe ;_aaedc :_ggdfa =9;goto _febe ;_dafd :_ggdfa =11;goto _febe ;_acebd :_ggdfa =13;goto _febe ;_cbcdd :_ggdfa =15;goto _febe ;_acafc :_ggdfa =17;goto _febe ;_abacf :_ggdfa =19;goto _febe ;_aeeff :_ggdfa =21;goto _febe ;_bfbd :_ggdfa =23;goto _febe ;_faced :_ggdfa =25;goto _febe ;_cadb :_ggdfa =27;goto _febe ;_feege :_ggdfa =29;goto _febe ;_febg :_ggdfa =31;goto _febe ;_bgeda :_ggdfa =33;goto _febe ;_ggaae :_ggdfa =35;goto _febe ;_bedc :_ggdfa =37;goto _febe ;_bdgf :_ggdfa =39;goto _febe ;_abaa :_ggdfa =41;goto _febe ;_cacb :_ggdfa =43;goto _febe ;_cgfbd :_ggdfa =45;goto _febe ;_ffag :_ggdfa =47;goto _febe ;_gcfg :_ggdfa =49;goto _febe ;_aadfa :_ggdfa =51;goto _febe ;_aceba :_ggdfa =53;goto _febe ;_gbfe :_ggdfa =55;goto _febe ;_bbaad :_ggdfa =57;goto _febe ;_ffecd :_ggdfa =59;goto _febe ;_bdfe :_ggdfa =61;goto _febe ;_cfddb :_ggdfa =63;goto _febe ;_bcfce :_ggdfa =65;goto _febe ;_egga :_ggdfa =67;goto _febe ;_aabe :_ggdfa =72;goto _febe ;_ggfd :_ggdfa =75;goto _febe ;_ccbbfa :_ggdfa =78;goto _febe ;_cgafg :_ggdfa =81;goto _febe ;_edfb :_ggdfa =84;goto _febe ;_agfg :_ggdfa =87;goto _febe ;_gfbf :_ggdfa =90;goto _febe ;_febe :_abdda =uint (_bgfd [_ggdfa ]);_ggdfa ++;for ;_abdda > 0;_abdda --{_ggdfa ++;switch _bgfd [_ggdfa -1]{case 3:_badge =_gbbd +1;case 4:_agggg =1;case 5:_agggg =2;case 6:_agggg =3;case 7:_agggg =4;case 8:_agggg =11;case 9:_agggg =14;case 10:_agggg =15;case 11:_badge =_gbbd +1;{_baca .emit (_fabga ,_effdg [_ececf :_badge ]);};case 12:_badge =_gbbd +1;{_baca .emit (_daccb ,_effdg [_ececf :_badge ]);};case 13:_badge =_gbbd +1;{_baca .emit (_fabd ,_effdg [_ececf :_badge -1]);};case 14:_badge =_gbbd +1;{_baca .emit (_fabd ,_effdg [_ececf +1:_badge -2]);};case 15:_badge =_gbbd +1;{_baca .emit (_acbbg ,_effdg [_ececf :_badge -1]);};case 16:_badge =_gbbd +1;{_baca .emit (_acbbg ,_effdg [_ececf :_badge -1]);};case 17:_badge =_gbbd +1;{_baca .emit (_dcdf ,_effdg [_ececf :_badge ]);};case 18:_badge =_gbbd +1;{_baca .emit (_bbbad ,_effdg [_ececf :_badge ]);};case 19:_badge =_gbbd +1;{_baca .emit (_gbcec ,_effdg [_ececf :_badge ]);};case 20:_badge =_gbbd +1;{_baca .emit (_abece ,_effdg [_ececf :_badge ]);};case 21:_badge =_gbbd +1;{_baca .emit (_gecad ,_effdg [_ececf :_badge ]);};case 22:_badge =_gbbd +1;{_baca .emit (_afdbc ,_effdg [_ececf :_badge ]);};case 23:_badge =_gbbd +1;{_baca .emit (_bddbf ,_effdg [_ececf :_badge ]);};case 24:_badge =_gbbd +1;{_baca .emit (_gdbd ,_effdg [_ececf :_badge ]);};case 25:_badge =_gbbd +1;{_baca .emit (_cbdc ,_effdg [_ececf :_badge ]);};case 26:_badge =_gbbd +1;{_baca .emit (_effc ,_effdg [_ececf :_badge ]);};case 27:_badge =_gbbd +1;{_baca .emit (_fcec ,_effdg [_ececf :_badge ]);};case 28:_badge =_gbbd +1;{_baca .emit (_bebda ,_effdg [_ececf :_badge ]);};case 29:_badge =_gbbd +1;{_baca .emit (_agbdf ,_effdg [_ececf :_badge ]);};case 30:_badge =_gbbd +1;{_baca .emit (_baeagg ,_effdg [_ececf :_badge ]);};case 31:_badge =_gbbd +1;{_baca .emit (_faea ,_effdg [_ececf :_badge ]);};case 32:_badge =_gbbd +1;{_baca .emit (_fbdab ,_effdg [_ececf :_badge ]);};case 33:_badge =_gbbd +1;{_baca .emit (_ebgdf ,_effdg [_ececf :_badge ]);};case 34:_badge =_gbbd ;_gbbd --;{_baca .emit (_fbcf ,_effdg [_ececf :_badge ]);};case 35:_badge =_gbbd ;_gbbd --;{_baca .emit (_cefc ,_effdg [_ececf :_badge ]);};case 36:_badge =_gbbd ;_gbbd --;{_baca .emit (_gcff ,_effdg [_ececf :_badge ]);};case 37:_badge =_gbbd ;_gbbd --;{_baca .emit (_aaba ,_effdg [_ececf :_badge ]);};case 38:_badge =_gbbd ;_gbbd --;{_baca .emit (_aaccg ,_effdg [_ececf :_badge ]);};case 39:_badge =_gbbd ;_gbbd --;{_baca .emit (_ccaea ,_effdg [_ececf +1:_badge -1]);};case 40:_badge =_gbbd ;_gbbd --;{_baca .emit (_dgbe ,_effdg [_ececf :_badge ]);};case 41:_badge =_gbbd ;_gbbd --;{_baca .emit (_cbbbg ,_effdg [_ececf :_badge ]);};case 42:_gbbd =(_badge )-1;{_baca .emit (_fbcf ,_effdg [_ececf :_badge ]);};case 43:switch _agggg {case 0:{_ggeb =0;goto _fcef ;};case 1:{_gbbd =(_badge )-1;_baca .emit (_eadgg ,_effdg [_ececf :_badge ]);};case 2:{_gbbd =(_badge )-1;_baca .emit (_fbcf ,_effdg [_ececf :_badge ]);};case 3:{_gbbd =(_badge )-1;_baca .emit (_cefc ,_effdg [_ececf :_badge ]);};case 4:{_gbbd =(_badge )-1;_baca .emit (_gaeed ,_effdg [_ececf :_badge ]);};case 11:{_gbbd =(_badge )-1;_baca .emit (_ffaf ,_effdg [_ececf :_badge ]);};case 14:{_gbbd =(_badge )-1;_baca .emit (_aaccg ,_effdg [_ececf :_badge ]);};case 15:{_gbbd =(_badge )-1;_baca .emit (_ccaea ,_effdg [_ececf +1:_badge -1]);};};};};goto _fcef ;_fcef :_ggdfa =int (_fgfc [_ggeb ]);_abdda =uint (_bgfd [_ggdfa ]);_ggdfa ++;for ;_abdda > 0;_abdda --{_ggdfa ++;switch _bgfd [_ggdfa -1]{case 0:_ececf =0;case 1:_agggg =0;};};if _ggeb ==0{goto _dfce ;};if _gbbd ++;_gbbd !=_efaa {goto _fbae ;};_aggae :{};if _gbbd ==_ecad {switch _ggeb {case 1:goto _adfd ;case 2:goto _adfd ;case 31:goto _aada ;case 14:goto _adfd ;case 15:goto _adfd ;case 32:goto _ebfaf ;case 17:goto _adfd ;case 33:goto _aagfb ;case 18:goto _adfd ;case 19:goto _adfd ;case 34:goto _dadd ;case 35:goto _ecce ;case 36:goto _ecce ;case 23:goto _cgef ;case 37:goto _ecce ;case 38:goto _daafc ;case 39:goto _afbbd ;case 40:goto _fabed ;case 41:goto _fabed ;case 42:goto _fabed ;case 43:goto _aagfb ;case 44:goto _adfd ;case 45:goto _fabed ;case 46:goto _fabed ;case 47:goto _fabed ;case 48:goto _fabed ;case 49:goto _fabed ;case 50:goto _fabed ;case 51:goto _fabed ;case 52:goto _fabed ;case 53:goto _fabed ;case 54:goto _fabed ;case 55:goto _fabed ;case 56:goto _fabed ;case 57:goto _fabed ;case 58:goto _fabed ;case 59:goto _adfd ;};};_dfce :{};};if _ececf > 0{copy (_effdg [0:],_effdg [_ececf :]);};};_ =_ecad ;if _ggeb ==_gbbf {_baca .emit (_gaccb ,nil );};close (_baca ._dfdg );};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _gedea (args ,_dabb )};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebcd :=args [0].AsString ();if _ebcd .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_ebcd .ValueString )));};var InvalidReferenceContext =&ivr {};

// Reference returns a string reference value to an expression with prefix.
func (_ecbg PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_faab :=_ecbg ._fbfaf .Reference (ctx ,ev );_ddca :=_ecbg ._gbag .Reference (ctx ,ev );if _faab .Type ==ReferenceTypeSheet &&_ddca .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_faab .Value +"\u0021"+_ddca .Value };};return ReferenceInvalid ;};const (_ byte =iota ;_ecae ;_bcbc ;_fdba ;_gddc ;_fgega ;);type rangeIndex struct{_dfade int ;_abfb int ;};const _afdbc =57364;

// Reference returns an invalid reference for Error.
func (_ecf Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// FunctionCall is a function call expression.
type FunctionCall struct{_begfc string ;_gdefg []Expression ;};const _fed =_e .Second *1;func _faag (_gfcec []Result ,_fbeae string )(*cumulArgs ,Result ){if len (_gfcec )!=6{return nil ,MakeErrorResult (_fbeae +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gfcec [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbeae +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_faba :=_gfcec [0].ValueNumber ;if _faba <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gfcec [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbeae +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fada :=_gfcec [1].ValueNumber ;if _fada <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _gfcec [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbeae +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbdg :=_gfcec [2].ValueNumber ;if _bbdg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gfcec [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbeae +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_agfb :=_gfcec [3].ValueNumber ;if _agfb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gfcec [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fbeae +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbaf :=_gfcec [4].ValueNumber ;if _gbaf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _gbaf < _agfb {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _gbaf > _fada {return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_ddec :=int (_gfcec [5].ValueNumber );if _ddec !=0&&_ddec !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_fbeae +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_faba ,_fada ,_bbdg ,_agfb ,_gbaf ,_ddec },_bgd ;};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fdagd :=args [0];if _fdagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fececc :=int (_fdagd .ValueNumber );if _fececc < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_fececc {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_fececc ];};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_afb :=_ae .ToLower (args [0].ValueString );if !_efa (_afb ){_ ,_ ,_ ,_ ,_adc ,_ggaa :=_age (_afb );if _ggaa .Type ==ResultTypeError {_ggaa .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _ggaa ;};if _adc {return MakeNumberResult (0);};};_cdbg ,_cgbc ,_fabe ,_ ,_fece :=_gdg (_afb );if _fece .Type ==ResultTypeError {return _fece ;};return MakeNumberResult (_fgda (_cdbg ,_cgbc ,_fabe ));};var _aaecgf =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};const _cbbbg =57371;func _bgbc (_cegg string ,_cdgfc func (_cbac float64 )float64 )Function {return func (_afbf []Result )Result {if len (_afbf )!=1{return MakeErrorResult (_cegg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggda :=_afbf [0].AsNumber ();switch _ggda .Type {case ResultTypeNumber :_ffea :=_cdgfc (_ggda .ValueNumber );if _ea .IsNaN (_ffea ){return MakeErrorResult (_cegg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ea .IsInf (_ffea ,0){return MakeErrorResult (_cegg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_ffea );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_cegg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _ggda ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cegg ,_ggda .Type ));};};};

// GetLocked returns FALSE for the invalid reference context.
func (_fefb *ivr )GetLocked (cellRef string )bool {return false };func _fda (_dacc string ,_afg *_de .UpdateQuery )string {_bc ,_fea :=_ca .ParseCellReference (_dacc );if _fea !=nil {return "\u0023\u0052\u0045F\u0021";};if _afg .UpdateType ==_de .UpdateActionRemoveColumn {_bda :=_afg .ColumnIdx ;_gga :=_bc .ColumnIdx ;if _gga < _bda {return _dacc ;}else if _gga ==_bda {return "\u0023\u0052\u0045F\u0021";}else {return _bc .Update (_de .UpdateActionRemoveColumn ).String ();};};return _dacc ;};const _gbbf int =0;

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_egdbf ,_gbad ,_abadg :=_becag (args );if _abadg .Type ==ResultTypeError {return _abadg ;};return MakeNumberResult (_gcdfa (_egdbf )/_gbad );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);var _acdcf =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Negate is a negate expression like -A1.
type Negate struct{_eaccb Expression };func _gbgac (_cbgge string ,_dddfg []Result )(*parsedSearchObject ,Result ){_faffa :=len (_dddfg );if _faffa !=2&&_faffa !=3{return nil ,MakeErrorResult (_cbgge +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbdad :=_dddfg [0];if _bbdad .Type ==ResultTypeError {return nil ,_bbdad ;};if _bbdad .Type !=ResultTypeString &&_bbdad .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_edebg :=_dddfg [1];if _edebg .Type ==ResultTypeError {return nil ,_edebg ;};if _edebg .Type !=ResultTypeString &&_edebg .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_cbfac :=_edebg .Value ();_ffac :=_bbdad .Value ();_cacfb :=1;if _faffa ==3&&_dddfg [2].Type !=ResultTypeEmpty {_dacgc :=_dddfg [2];if _dacgc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_cacfb =int (_dacgc .ValueNumber );if _cacfb < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _cacfb > len (_cbfac ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_ffac ,_cbfac ,_cacfb },_bgd ;};var _bdab =[...]int {-1,1,1,-1,-2,0};

// Reference returns an invalid reference for FunctionCall.
func (_ggbe FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};const _afcb =-1000;

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_cfddc ,_dfbf :=_gbgac ("\u0046\u0049\u004e\u0044",args );if _dfbf .Type !=ResultTypeEmpty {return _dfbf ;};_fecg :=_cfddc ._gbbegd ;if _fecg ==""{return MakeNumberResult (1.0);};_ddda :=_cfddc ._acfg ;_gfeee :=_cfddc ._geccc ;_bgddg :=1;for _acfee :=range _ddda {if _bgddg < _gfeee {_bgddg ++;continue ;};_gbbee :=_ae .Index (_ddda [_acfee :],_fecg );if _gbbee ==0{return MakeNumberResult (float64 (_bgddg ));};_bgddg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Value returns a string version of the result.
func (_cbebg Result )Value ()string {switch _cbebg .Type {case ResultTypeNumber :_egfda :=_cbe .FormatFloat (_cbebg .ValueNumber ,'f',-1,64);if len (_egfda )> 12{_aecbf :=12;for _eggbff :=_aecbf ;_eggbff > 0&&_egfda [_eggbff ]=='0';_eggbff --{_aecbf --;};_egfda =_egfda [0:_aecbf +1];};return _egfda ;case ResultTypeError :return _cbebg .ValueString ;case ResultTypeString :return _cbebg .ValueString ;case ResultTypeList :if len (_cbebg .ValueList )==0{return "";};return _cbebg .ValueList [0].Value ();case ResultTypeArray :if len (_cbebg .ValueArray )==0||len (_cbebg .ValueArray [0])==0{return "";};return _cbebg .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _gdg (_cga string )(int ,int ,int ,bool ,Result ){_dfd :="";_fbb :=[]string {};for _dagd ,_geg :=range _abe {_fbb =_geg .FindStringSubmatch (_cga );if len (_fbb )> 1{_dfd =_dagd ;break ;};};if _dfd ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_ece :=false ;var _edag ,_eff ,_eggb int ;var _ccb error ;switch _dfd {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_eff ,_ccb =_cbe .Atoi (_fbb [1]);if _ccb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_eggb ,_ccb =_cbe .Atoi (_fbb [3]);if _ccb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_edag ,_ccb =_cbe .Atoi (_fbb [5]);if _ccb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};if _edag < 0||_edag > 9999||(_edag > 99&&_edag < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_edag =_fbeb (_edag );_ece =_fbb [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_eff =_dbbc [_fbb [1]];_eggb ,_ccb =_cbe .Atoi (_fbb [14]);if _ccb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_edag ,_ccb =_cbe .Atoi (_fbb [16]);if _ccb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};if _edag < 0||_edag > 9999||(_edag > 99&&_edag < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_edag =_fbeb (_edag );_ece =_fbb [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_dbc ,_ggce :=_cbe .Atoi (_fbb [1]);if _ggce !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_cdae ,_ggce :=_cbe .Atoi (_fbb [3]);if _ggce !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_eced ,_ggce :=_cbe .Atoi (_fbb [5]);if _ggce !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};if _dbc >=1900&&_dbc < 10000{_edag =_dbc ;_eff =_cdae ;_eggb =_eced ;}else if _dbc > 0&&_dbc < 13{_eff =_dbc ;_eggb =_cdae ;_edag =_eced ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_ece =_fbb [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_edag ,_ccb =_cbe .Atoi (_fbb [16]);if _ccb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_eff =_dbbc [_fbb [3]];_eggb ,_ccb =_cbe .Atoi (_fbb [1]);if _ccb !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};_ece =_fbb [19]=="";};if !_dbgd (_edag ,_eff ,_eggb ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_dcg );};return _edag ,_eff ,_eggb ,_ece ,_bgd ;};const _gaccb =57350;

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ae .NewReader (s ));};const _abece =57362;

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_gadbf :=args [0].AsNumber ();_agbf :=args [1].AsNumber ();if _gadbf .Type ==ResultTypeNumber &&_agbf .Type ==ResultTypeNumber {_gccg :=_ea .Atan2 (_agbf .ValueNumber ,_gadbf .ValueNumber );if _gccg !=_gccg {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_gccg );};for _ ,_eefe :=range []ResultType {_gadbf .Type ,_agbf .Type }{switch _eefe {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _gadbf ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eefe ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Eval evaluates and returns a string.
func (_ggbd String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_ggbd ._ffbe )};const _bbbad =57360;func _degcb (_cbde Result ,_cgdgc *criteriaParsed )bool {_bbca :=_ae .ToLower (_cbde .ValueString );_gbcg :=_cgdgc ._bgae ._gccb ;_cdfg :=_cgdgc ._bgae ._ebbfe ;if _gbcg ==_ecae {return _bbca ==_cdfg ||_dgg .Match (_cdfg ,_bbca );};if _cbde .Type !=ResultTypeEmpty {if _bbca ==_cgdgc ._bbdfa ||_dgg .Match (_cgdgc ._bbdfa ,_bbca ){return true ;};if _ ,_fgdaa :=_cbe .ParseFloat (_cdfg ,64);_fgdaa ==nil {return false ;};switch _gbcg {case _bcbc :return _bbca <=_cdfg ;case _fdba :return _bbca >=_cdfg ;case _gddc :return _bbca < _cdfg ;case _fgega :return _bbca > _cdfg ;};};return false ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_acaeb :=args [0];switch _acaeb .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_cgfb :=0.0;_gegf :=0.0;for _ ,_fedg :=range _acaeb .ValueString {_fbeccf :=0.0;switch _fedg {case 'I':_fbeccf =1;case 'V':_fbeccf =5;case 'X':_fbeccf =10;case 'L':_fbeccf =50;case 'C':_fbeccf =100;case 'D':_fbeccf =500;case 'M':_fbeccf =1000;};_cgfb +=_fbeccf ;switch {case _gegf ==_fbeccf &&(_gegf ==5||_gegf ==50||_gegf ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_gegf ==_fbeccf :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _gegf < _fbeccf {_cgfb -=2*_gegf ;};_gegf =_fbeccf ;};return MakeNumberResult (_cgfb );case ResultTypeError :return _acaeb ;default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_acaeb .Type ));};};

// GetFilename returns an empty string for the invalid reference context.
func (_feacf *ivr )GetFilename ()string {return ""};

// Update updates the horizontal range references after removing a row/column.
func (_gedec HorizontalRange )Update (q *_de .UpdateQuery )Expression {return _gedec };

// String returns a string representation for Negate.
func (_ggaabb Negate )String ()string {return "\u002d"+_ggaabb ._eaccb .String ()};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffab :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_facg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edf :=args [2].ValueNumber ;if _edf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_ffab -_facg )/_edf );};func _abafg (_aeaee []string ,_fbfd int )string {return _cbe .Itoa (len (_aeaee [len (_aeaee )-1-_fbfd ]))};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _fgda (_ded ,_gag ,_ddb int )float64 {return float64 (_eccc (_ded ,_e .Month (_gag ),_ddb )/86400)+_ffd ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_ccbbf ,_cffg :=_gbgac ("\u0046\u0049\u004e\u0044",args );if _cffg .Type !=ResultTypeEmpty {return _cffg ;};_cfca :=_ccbbf ._gbbegd ;if _cfca ==""{return MakeNumberResult (1.0);};_baeag :=_ccbbf ._acfg ;_ccedd :=_ccbbf ._geccc -1;_fgfa :=1;_becce :=0;for _badgf :=range _baeag {if _badgf !=0{_cffaa :=1;if _badgf -_becce > 1{_cffaa =2;};_fgfa +=_cffaa ;};if _fgfa > _ccedd {_ebff :=_ae .Index (_baeag [_badgf :],_cfca );if _ebff ==0{return MakeNumberResult (float64 (_fgfa ));};};_becce =_badgf ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};const _gbcec =57361;func _gcdfa (_dafe float64 )float64 {_ddfcc :=float64 (1);for _cfdd :=float64 (2);_cfdd <=_dafe ;_cfdd ++{_ddfcc *=_cfdd ;};return _ddfcc ;};type durationArgs struct{_gcbf float64 ;_aebb float64 ;_cafe float64 ;_eecf float64 ;_fefg float64 ;_abbc int ;};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_cfg :=len (args );if _cfg !=4&&_cfg !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bebcf ,_fadc ,_gfda :=_ggd (args [0],args [1],"\u0044\u0049\u0053\u0043");if _gfda .Type ==ResultTypeError {return _gfda ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bddg :=args [2].ValueNumber ;if _bddg <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bde :=args [3].ValueNumber ;if _bde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acgf :=0;if _cfg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acgf =int (args [4].ValueNumber );if !_gede (_acgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_acef ,_gfda :=_fgfe (_bebcf ,_fadc ,_acgf );if _gfda .Type ==ResultTypeError {return _gfda ;};return MakeNumberResult ((_bde -_bddg )/_bde /_acef );};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbbg :=args [0];switch _gbbg .Type {case ResultTypeError :return _gbbg ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gbbg .ValueNumber !=0);};if _gbbg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _dgbb (args );case ResultTypeArray :return _aeaafa (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};const _fabd =57357;

// LastRow returns 0 for the invalid reference context.
func (_bgaa *ivr )LastRow (colFrom string )int {return 0};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ae .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_ffbe :v };};func (_fggae *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_acag :=len (args );if _acag < 3||_acag > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eeef :=args [0].ValueNumber ;if _eeef !=float64 (int (_eeef )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccdf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ddcb :=args [2].ValueNumber ;_eaaa :=0.0;if _acag >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eaaa =args [3].ValueNumber ;};_fefge :=0.0;if _acag >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fefge =args [4].ValueNumber ;if _fefge !=0{_fefge =1;};};_cdd :=0.1;if _acag >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdd =args [5].ValueNumber ;};_gedf :=100;_dbcec :=0;_gdaa :=false ;_efaf :=1e-6;_aeeb :=_cdd ;for _dbcec < _gedf &&!_gdaa {_fagc :=_ea .Pow (_aeeb +1,_eeef );_dadbf :=_ea .Pow (_aeeb +1,_eeef -1);_fbebe :=_aeeb *_fefge +1;_aeaaf :=_ccdf *(_fagc -1);_ceda :=_eaaa +_fagc *_ddcb +_aeaaf *_fbebe /_aeeb ;_caade :=_eeef *_dadbf *_ddcb -_aeaaf *_fbebe /_ea .Pow (_aeeb ,2);_gaba :=(_eeef *_ccdf *_dadbf *_fbebe +_aeaaf *_fefge )/_aeeb ;_cdcd :=_ceda /(_caade +_gaba );if _ea .Abs (_cdcd )< _efaf {_gdaa =true ;};_dbcec ++;_aeeb -=_cdcd ;};return MakeNumberResult (_aeeb );};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;func (_gbccc ResultType )String ()string {if _gbccc >=ResultType (len (_fege )-1){return _g .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gbccc );};return _bdge [_fege [_gbccc ]:_fege [_gbccc +1]];};type yyParserImpl struct{_ebga yySymType ;_gafb [_ggdea ]yySymType ;_fbde int ;};const _ffaf =57348;var _ccgc =[...]int {0};

// IsDBCS returns false for the invalid reference context.
func (_aeddf *ivr )IsDBCS ()bool {return false };

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_ccfd :=args [0].ValueNumber ;if _ccfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_dcgf :=float64 (int (args [1].ValueNumber ));if _dcgf < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_ea .Pow ((1+_ccfd /_dcgf ),_dcgf )-1);};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_afcg :=_bebd (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _afcg .Type !=ResultTypeEmpty {return _afcg ;};_cebd :=_efcae (args [1:]);_cabad :=_ea .MaxFloat64 ;_accaa :=_baebc (args [0]);for _ ,_ffbd :=range _cebd {_cbdgf :=_accaa [_ffbd ._dfade ][_ffbd ._abfb ].ValueNumber ;if _cabad > _cbdgf {_cabad =_cbdgf ;};};if _cabad ==_ea .MaxFloat64 {_cabad =0;};return MakeNumberResult (float64 (_cabad ));};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdbea :=args [0].AsString ();if _bdbea .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_bdbea .ValueString ,ev );};func LexReader (r _fd .Reader )chan *node {_fgag :=NewLexer ();go _fgag .lex (r );return _fgag ._dfdg };

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_decdd .Lock ();defer _decdd .Unlock ();if _ ,_eefeg :=_dface [name ];_eefeg {_bd .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_dface [name ]=fn ;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_af BinaryExpr )Update (q *_de .UpdateQuery )Expression {_cdc :=_af ;_cdc ._ff =_af ._ff .Update (q );_cdc ._beg =_af ._beg .Update (q );return _cdc ;};var _gfeg =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};var _agc =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_aec ,_cefd :=_fdab (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _cefd .Type ==ResultTypeError {return _cefd ;};return MakeNumberResult (_gab (_aec ._cgeg ,_aec ._gec ,_aec ._bbece ,_aec ._gaa ));};

// String is a string expression.
type String struct{_ffbe string };

// String returns a string representation of a range with prefix.
func (_fgfg PrefixRangeExpr )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fgfg ._cebe .String (),_fgfg ._gage .String (),_fgfg ._fageea .String ());};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _efdc (_gbceca ,_eefa Reference )string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_gbceca .Value ,_eefa .Value );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gacf :=args [0].AsNumber ();if _gacf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eeadf :=10.0;if len (args )> 1{_fbaa :=args [1].AsNumber ();if _fbaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_eeadf =args [1].ValueNumber ;};if _gacf .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _eeadf ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_ea .Log (_gacf .ValueNumber )/_ea .Log (_eeadf ));};

// CellRef is a reference to a single cell
type CellRef struct{_bg string };var _cg =map[string ]*_be .Regexp {};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_bddgd :=_ae .Split (v ,"\u003a");if len (_bddgd )!=2{return nil ;};if _bddgd [0]> _bddgd [1]{_bddgd [0],_bddgd [1]=_bddgd [1],_bddgd [0];};return PrefixVerticalRange {_daac :pfx ,_bedgf :_bddgd [0],_bbde :_bddgd [1]};};

// GetFormat returns an empty string for the invalid reference context.
func (_dbgf *ivr )GetFormat (cellRef string )string {return ""};func _ccabb (_efgf yyLexer ,_afegg *yySymType )(_dagae ,_dfff int ){_dfff =0;_dagae =_efgf .Lex (_afegg );if _dagae <=0{_dfff =_dbcad [0];goto _dbfbd ;};if _dagae < len (_dbcad ){_dfff =_dbcad [_dagae ];goto _dbfbd ;};if _dagae >=_fegf {if _dagae < _fegf +len (_ecca ){_dfff =_ecca [_dagae -_fegf ];goto _dbfbd ;};};for _bcgbg :=0;_bcgbg < len (_ccgc );_bcgbg +=2{_dfff =_ccgc [_bcgbg +0];if _dfff ==_dagae {_dfff =_ccgc [_bcgbg +1];goto _dbfbd ;};};_dbfbd :if _dfff ==0{_dfff =_ecca [1];};if _acec >=3{_g .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_dfac (_dfff ),uint (_dagae ));};return _dagae ,_dfff ;};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gcdfg :=args [0];if _gcdfg .Type !=ResultTypeArray &&_gcdfg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_edbc :=_gcdfg .ValueArray ;if len (_edbc )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_edbc [0])));};func _bggeg (_gagc []Result ,_bbgg bool )Result {_bfbbe :="\u004d\u0041\u0058";if _bbgg {_bfbbe ="\u004d\u0041\u0058\u0041";};if len (_gagc )==0{return MakeErrorResult (_bfbbe +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfb :=-_ea .MaxFloat64 ;for _ ,_bgfce :=range _gagc {switch _bgfce .Type {case ResultTypeNumber :if (_bbgg ||!_bgfce .IsBoolean )&&_bgfce .ValueNumber > _acfb {_acfb =_bgfce .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bacb :=_bggeg (_bgfce .ListValues (),_bbgg );if _bacb .ValueNumber > _acfb {_acfb =_bacb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ddbd :=0.0;if _bbgg {_ddbd =_bgfce .AsNumber ().ValueNumber ;};if _ddbd > _acfb {_acfb =_ddbd ;};default:_bd .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bfbbe +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bgfce .Type );};};if _acfb ==-_ea .MaxFloat64 {_acfb =0;};return MakeNumberResult (_acfb );};func _bfgg (_dcdd Result ,_fgea int )[]Result {_gcbfa :=[]Result {};switch _dcdd .Type {case ResultTypeList :_efbe :=_dcdd .ValueList ;_ecbd :=len (_efbe );for _cdfa :=0;_cdfa < _fgea ;_cdfa ++{if _cdfa < _ecbd {_gcbfa =append (_gcbfa ,_efbe [_cdfa ]);}else {_gcbfa =append (_gcbfa ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bdagc :=0;_bdagc < _fgea ;_bdagc ++{_gcbfa =append (_gcbfa ,_dcdd );};};return _gcbfa ;};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfbg :=args [0];if _bfbg .Type !=ResultTypeArray &&_bfbg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eeae :=_baebc (_bfbg );_ggcbg :=args [2];if _ggcbg .Type !=ResultTypeArray &&_ggcbg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_faagc :=_baebc (_ggcbg );_cgag :=_fdedc (args [1]);_abcfb :=0.0;for _fbga ,_cdbff :=range _eeae {for _ebcg ,_cced :=range _cdbff {if _acgg (_cced ,_cgag ){_abcfb +=_faagc [_fbga ][_ebcg ].ValueNumber ;};};};return MakeNumberResult (_abcfb );};func _fbgg (_fegb ,_gbdg ,_egbcb ,_gbee ,_ggaf ,_aebff float64 )float64 {var _fgfeg ,_edec float64 ;_gacb :=0.0;_efcg :=_ea .Ceil (_ggaf );_cfdc :=_fegb -_gbdg ;_bdgb :=false ;_febb :=0.0;for _geadg :=1.0;_geadg <=_efcg ;_geadg ++{if !_bdgb {_fgfeg =_bcde (_fegb ,_gbdg ,_egbcb ,_geadg ,_aebff );_febb =_cfdc /(_egbcb -_geadg +1);if _febb > _fgfeg {_edec =_febb ;_bdgb =true ;}else {_edec =_fgfeg ;_cfdc -=_fgfeg ;};}else {_edec =_febb ;};if _geadg ==_efcg {_edec *=_ggaf +1-_efcg ;};_gacb +=_edec ;};return _gacb ;};type Expression interface{Eval (_agd Context ,_feg Evaluator )Result ;Reference (_gdd Context ,_afdc Evaluator )Reference ;String ()string ;Update (_faee *_de .UpdateQuery )Expression ;};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _gedea (args ,_ggcec )};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgfgb :=args [0].AsNumber ();if _dgfgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_ea .Pi *_dgfgb .ValueNumber );};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbbed :=args [0];_fade :=args [1];if _fade .Type !=ResultTypeArray &&_fade .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abdf :=_ggfcd (_fade );_cgee :=-1;for _fdaa ,_cbg :=range _abdf {if _ebeb (_fbbed ,_cbg ,false ,false )==_fcbg {_cgee =_fdaa ;};};if _cgee ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_gagda :=_abdf ;if len (args )==3{_gagda =_ggfcd (args [2]);};if _cgee < 0||_cgee >=len (_gagda ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _gagda [_cgee ];};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_eeeba :=MakeNumberResult (0);for _ ,_ggbc :=range args {_ggbc =_ggbc .AsNumber ();switch _ggbc .Type {case ResultTypeNumber :_eeeba .ValueNumber +=_ggbc .ValueNumber *_ggbc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fgac :=SumSquares (_ggbc .ListValues ());if _fgac .Type !=ResultTypeNumber {return _fgac ;};_eeeba .ValueNumber +=_fgac .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ggbc ;case ResultTypeEmpty :default:return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_ggbc .Type ));};};return _eeeba ;};var _fbff =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};const _gbbbg int =30;const _dcg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dacf :=args [0];switch _dacf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_adba :=_fbgd (_dacf .ValueNumber );return MakeNumberResult (float64 (_adba .Day ()));case ResultTypeString :_ffcc :=_ae .ToLower (_dacf .ValueString );if !_efa (_ffcc ){_ ,_ ,_ ,_ ,_aff ,_bcd :=_age (_ffcc );if _bcd .Type ==ResultTypeError {_bcd .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _bcd ;};if _aff {return MakeNumberResult (0);};};_ ,_ ,_caa ,_ ,_dga :=_gdg (_ffcc );if _dga .Type ==ResultTypeError {return _dga ;};return MakeNumberResult (float64 (_caa ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};func _dbd (_dddf ,_geb _e .Time )bool {_cagc :=_dddf .Unix ();_cgc :=_geb .Unix ();_gba :=_dddf .Year ();_cacg :=_eccc (_gba ,_e .March ,1);if _efc (_gba )&&_cagc < _cacg &&_cgc >=_cacg {return true ;};var _gfdd =_geb .Year ();var _gbge =_eccc (_gfdd ,_e .March ,1);return (_efc (_gfdd )&&_cgc >=_gbge &&_cagc < _gbge );};func _eefb (_afcd []Result ,_cdcda bool )(float64 ,float64 ){_dfgc :=0.0;_bcbbf :=0.0;for _ ,_fdcd :=range _afcd {switch _fdcd .Type {case ResultTypeNumber :if _cdcda ||!_fdcd .IsBoolean {_bcbbf +=_fdcd .ValueNumber ;_dfgc ++;};case ResultTypeList ,ResultTypeArray :_adbb ,_cfcc :=_eefb (_fdcd .ListValues (),_cdcda );_bcbbf +=_adbb ;_dfgc +=_cfcc ;case ResultTypeString :if _cdcda {_dfgc ++;};case ResultTypeEmpty :};};return _bcbbf ,_dfgc ;};func (_bcece PrefixHorizontalRange )horizontalRangeReference (_egeaa string )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_egeaa ,_bcece ._cddfa ,_bcece ._fceb );};func (_efbeg tokenType )String ()string {return _dfac (int (_efbeg ))};var _ffd float64 =25569.0;func (_gadee *Lexer )emit (_aagf tokenType ,_aggdf []byte ){if _gdad {_g .Println ("\u0065\u006d\u0069\u0074",_aagf ,_gcfa (string (_aggdf )));};_gadee ._dfdg <-&node {_aagf ,string (_aggdf )};};var _ecca =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_eag EmptyExpr )Update (q *_de .UpdateQuery )Expression {return _eag };const _aecfc =2;const _ccaea =57354;const _dad ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_dedee ,_dedec Expression };

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_adgd PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_eaedg :=_adgd ._ggadb .Reference (ctx ,ev );switch _eaedg .Type {case ReferenceTypeSheet :if _fddea (_eaedg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eaedg .Value ));};_gddae :=_adgd .horizontalRangeReference (_eaedg .Value );if _gcbcd ,_ecde :=ev .GetFromCache (_gddae );_ecde {return _gcbcd ;};_efcff :=ctx .Sheet (_eaedg .Value );_ggbff ,_fdcab :=_cfa (_efcff ,_adgd ._cddfa ,_adgd ._fceb );_cdegf :=_bbbbf (_efcff ,ev ,_ggbff ,_fdcab );ev .SetCache (_gddae ,_cdegf );return _cdegf ;default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eaedg .Type ));};};

// LastColumn returns empty string for the invalid reference context.
func (_gacfg *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func _fdab (_egfd []Result ,_fcca string )(*couponArgs ,Result ){_fbc :=len (_egfd );if _fbc !=3&&_fbc !=4{return nil ,MakeErrorResult (_fcca +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fba ,_bfaa ,_gad :=_ggd (_egfd [0],_egfd [1],_fcca );if _gad .Type ==ResultTypeError {return nil ,_gad ;};if _egfd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fcca +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfac :=_egfd [2].ValueNumber ;if !_beee (_ecfac ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_fcca );};_gfa :=0;if _fbc ==4&&_egfd [3].Type !=ResultTypeEmpty {if _egfd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_fcca +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfa =int (_egfd [3].ValueNumber );if !_gede (_gfa ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_fcca );};};return &couponArgs {_fba ,_bfaa ,int (_ecfac ),_gfa },_bgd ;};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_acdaf ,_bdcdb string };

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_ggadb Expression ;_cddfa ,_fceb int ;};func _ggfcd (_aecf Result )[]Result {_fdebd :=_aecf .ValueList ;if _aecf .Type ==ResultTypeArray {_fdebd =nil ;for _ ,_dbabd :=range _aecf .ValueArray {if len (_dbabd )> 0{_fdebd =append (_fdebd ,_dbabd [0]);}else {_fdebd =append (_fdebd ,_bgd );};};};return _fdebd ;};

// String returns a string representation of a horizontal range.
func (_efec HorizontalRange )String ()string {return _efec .horizontalRangeReference ()};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_aefef :=len (args );if _aefef !=4&&_aefef !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egeaf ,_bbbc ,_ecef :=_ggd (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _ecef .Type ==ResultTypeError {return _ecef ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbeb :=args [2].ValueNumber ;if _cbeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bfec :=args [3].ValueNumber ;if _bfec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_fgbf :=0;if _aefef ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgbf =int (args [4].ValueNumber );if !_gede (_fgbf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_abdd ,_ecef :=_fgfe (_egeaf ,_bbbc ,_fgbf );if _ecef .Type ==ResultTypeError {return _ecef ;};return MakeNumberResult (_bfec *(1-_cbeb *_abdd ));};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcdfe :=args [0].ValueNumber ;if _gcdfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_ddbb ,_aece :=_fccec (args [1],args [2],"\u0058\u004e\u0050\u0056");if _aece .Type ==ResultTypeError {return _aece ;};_abga :=_ddbb ._cbage ;_ddga :=_ddbb ._fgce ;_dbcb :=0.0;_efge :=_ddga [0];for _badf ,_beegg :=range _abga {_dbcb +=_beegg /_ea .Pow (1+_gcdfe ,(_ddga [_badf ]-_efge )/365);};return MakeNumberResult (_dbcb );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_bbecdf :=len (args );if _bbecdf !=4&&_bbecdf !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbee ,_ffdb ,_edbgg :=_ggd (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _edbgg .Type ==ResultTypeError {return _edbgg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bae :=args [2].ValueNumber ;if _bae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dcce :=args [3].ValueNumber ;if _dcce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_daffd :=0;if _bbecdf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_daffd =int (args [4].ValueNumber );if !_gede (_daffd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_ffcd ,_edbgg :=_fgfe (_dbee ,_ffdb ,_daffd );if _edbgg .Type ==ResultTypeError {return _edbgg ;};return MakeNumberResult ((_dcce -_bae )/_bae /_ffcd );};const _eda ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_bad +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";type Reference struct{Type ReferenceType ;Value string ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaacd :=_aeebdb (args );_d .Float64s (_gaacd );var _ebgg float64 ;if len (_gaacd )%2==0{_ebgg =(_gaacd [len (_gaacd )/2-1]+_gaacd [len (_gaacd )/2])/2;}else {_ebgg =_gaacd [len (_gaacd )/2];};return MakeNumberResult (_ebgg );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_ggcdg NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_caace :=ctx .NamedRange (_ggcdg ._egba );_bcdccg :=_caace .Value ;if _afef ,_ebegf :=ev .GetFromCache (_bcdccg );_ebegf {return _afef ;};_ffaga :=_ae .Split (_bcdccg ,"\u0021");if len (_ffaga )!=2{return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_bcdccg ));};_ffga :=ctx .Sheet (_ffaga [0]);_gagaa :=_ae .Split (_ffaga [1],"\u003a");switch len (_gagaa ){case 1:_agec :=ev .Eval (_ffga ,_gagaa [0]);ev .SetCache (_bcdccg ,_agec );return _agec ;case 2:_ggab :=_bbbbf (_ffga ,ev ,_gagaa [0],_gagaa [1]);ev .SetCache (_bcdccg ,_ggab );return _ggab ;};return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_caace .Type ));};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ecfag :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ddfd :=args [2].ValueNumber +1;if _ddfd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fgcb :=_baebc (args [0]);_ccg :=float64 (len (_fgcb ));_gfaa ,_fbbe :=0.0,0.0;_bcfg ,_ddfba :=1.0,1.0;_daae ,_defa :=false ,false ;for _ ,_dadb :=range _fgcb {for _ ,_dccf :=range _dadb {if _dccf .Type ==ResultTypeNumber &&!_dccf .IsBoolean {_abfe :=_dccf .ValueNumber ;if _abfe ==0{continue ;}else {if _abfe > 0{_daae =true ;_fbbe +=_dccf .ValueNumber *_ddfba ;}else {_defa =true ;_gfaa +=_dccf .ValueNumber *_bcfg ;};_bcfg /=_ecfag ;_ddfba /=_ddfd ;};};};};if !_daae ||!_defa {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_geaf :=-_fbbe /_gfaa ;_geaf *=_ea .Pow (_ddfd ,_ccg -1);_geaf =_ea .Pow (_geaf ,1/(_ccg -1));return MakeNumberResult (_geaf -1);};const _ggdea =16;func _gf (_bege ,_cbc [][]Result )bool {if len (_bege )!=len (_cbc ){return false ;};for _dd :=range _bege {if len (_bege [_dd ])!=len (_cbc [_dd ]){return false ;};};return true ;};type tokenType int ;

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_dgb :=len (args );if _dgb !=2&&_dgb !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ceba ,_acdc :=_fccec (args [0],args [1],"\u0058\u0049\u0052\u0052");if _acdc .Type ==ResultTypeError {return _acdc ;};_afdf :=_ceba ._cbage ;_cdf :=_ceba ._fgce ;_cgff :=0.1;if _dgb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgff =args [2].ValueNumber ;if _cgff <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _fdfe (_afdf ,_cdf ,_cgff );};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbaa :=args [0].AsNumber ();if _dbaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ea .Pi /180.0*_dbaa .ValueNumber );};var _eddea =[...]string {};

// Update returns the same object as updating sheet references does not affect Error.
func (_aeae Error )Update (q *_de .UpdateQuery )Expression {return _aeae };func _gfde (_afcff ,_fecb int )string {const TOKSTART =4;if !_feace {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_aded :=range _bdbc {if _aded ._aaf ==_afcff &&_aded ._fceag ==_fecb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_aded ._afba ;};};_ggdaf :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_dfac (_fecb );_efbgc :=make ([]int ,0,4);_fbade :=_gfeg [_afcff ];for _egcee :=TOKSTART ;_egcee -1< len (_dbga );_egcee ++{if _adcg :=_fbade +_egcee ;_adcg >=0&&_adcg < _fdbdcg &&_aaecgf [_ccac [_adcg ]]==_egcee {if len (_efbgc )==cap (_efbgc ){return _ggdaf ;};_efbgc =append (_efbgc ,_egcee );};};if _abfd [_afcff ]==-2{_cdba :=0;for _bdab [_cdba ]!=-1||_bdab [_cdba +1]!=_afcff {_cdba +=2;};for _cdba +=2;_bdab [_cdba ]>=0;_cdba +=2{_daaf :=_bdab [_cdba ];if _daaf < TOKSTART ||_bdab [_cdba +1]==0{continue ;};if len (_efbgc )==cap (_efbgc ){return _ggdaf ;};_efbgc =append (_efbgc ,_daaf );};if _bdab [_cdba +1]!=0{return _ggdaf ;};};for _ggba ,_agdg :=range _efbgc {if _ggba ==0{_ggdaf +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_ggdaf +="\u0020\u006f\u0072\u0020";};_ggdaf +=_dfac (_agdg );};return _ggdaf ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_begfc :name ,_gdefg :args };};const _acbbg =57359;

// Update updates references in the Range after removing a row/column.
func (_aagfa Range )Update (q *_de .UpdateQuery )Expression {_eafa :=_aagfa ;if q .UpdateCurrentSheet {_eafa ._dedee =_aagfa ._dedee .Update (q );_eafa ._dedec =_aagfa ._dedec .Update (q );};return _eafa ;};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fddd ,_eegf ,_fecec :=_ggd (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _fecec .Type ==ResultTypeError {return _fecec ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdad :=_eegf -_fddd ;if _fdad > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dged :=args [2].ValueNumber ;if _dged <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddgf :=(100-_dged )/_dged ;_dcfg :=360/_fdad ;return MakeNumberResult (_ddgf *_dcfg );};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fdbc :=args [0];if _fdbc .Type ==ResultTypeError ||_fdbc .Type ==ResultTypeString {return _fdbc ;};return _bgd ;};func _baebc (_geddcf Result )[][]Result {switch _geddcf .Type {case ResultTypeArray :return _geddcf .ValueArray ;case ResultTypeList :return [][]Result {_geddcf .ValueList };default:return [][]Result {};};};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_dgcac :=len (args );if _dgcac < 2||_dgcac > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggccc :=args [0];if _ggccc .Type !=ResultTypeArray &&_ggccc .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gcbc :=args [1].AsNumber ();if _gcbc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bdea :=int (_gcbc .ValueNumber )-1;_abbb :=-1;if _dgcac ==3&&args [2].Type !=ResultTypeEmpty {_cafgc :=args [2].AsNumber ();if _cafgc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_abbb =int (_cafgc .ValueNumber )-1;};if _bdea ==-1&&_abbb ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _gdeed []Result ;if _ggccc .Type ==ResultTypeArray {_beag :=_ggccc .ValueArray ;if _bdea < -1||_bdea >=len (_beag ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bdea ==-1{if _abbb >=len (_beag [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bbdaf :=[][]Result {};for _ ,_gabaa :=range _beag {_ebgb :=_gabaa [_abbb ];if _ebgb .Type ==ResultTypeEmpty {_ebgb =MakeNumberResult (0);};_bbdaf =append (_bbdaf ,[]Result {_ebgb });};return MakeArrayResult (_bbdaf );};_gdeed =_beag [_bdea ];}else {_gcab :=_ggccc .ValueList ;if _bdea < -1||_bdea >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bdea ==-1{if _abbb >=len (_gcab ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bdced :=_gcab [_abbb ];if _bdced .Type ==ResultTypeEmpty {_bdced =MakeNumberResult (0);};return _bdced ;};_gdeed =_gcab ;};if _abbb < -1||_abbb > len (_gdeed ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _abbb ==-1{_bfbb :=[]Result {};for _ ,_cebc :=range _gdeed {if _cebc .Type ==ResultTypeEmpty {_bfbb =append (_bfbb ,MakeNumberResult (0));}else {_bfbb =append (_bfbb ,_cebc );};};return MakeArrayResult ([][]Result {_bfbb });};_bagg :=_gdeed [_abbb ];if _bagg .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bagg ;};func _fc (_ege BinOpType ,_fbg [][]Result ,_ce Result )Result {_bea :=[][]Result {};for _gd :=range _fbg {_egef :=_gac (_ege ,_fbg [_gd ],_ce );if _egef .Type ==ResultTypeError {return _egef ;};_bea =append (_bea ,_egef .ValueList );};return MakeArrayResult (_bea );};const _baeagg =57374;const _agcc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// String returns a string representation of a vertical range with prefix.
func (_dadde PrefixVerticalRange )String ()string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dadde ._daac .String (),_dadde ._bedgf ,_dadde ._bbde );};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_fggf ,_geab ,_bbeb :=_cgcb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _bbeb .Type ==ResultTypeError {return _bbeb ;};if _geab ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fggf ==0{return MakeNumberResult (0);};_gcdf :=_fggf < 0;if _gcdf {_fggf =-_fggf ;};_caaf :=float64 (int (_fggf ));_bfb :=args [0].Value ();_dfeg :=_ae .Split (_bfb ,"\u002e");_ffa :=0.0;if len (_dfeg )> 1{var _agcd error ;_dbfa :=_dfeg [1];_ffa ,_agcd =_cbe .ParseFloat (_dbfa ,64);if _agcd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_dede :=float64 (len (_dbfa ));_ffa /=_ea .Pow (10,_dede );};_adda :=_ffa *_geab /_ea .Pow (10,float64 (int (_ea .Log10 (_geab )))+1)+_caaf ;if _gcdf {_adda =-_adda ;};return MakeNumberResult (_adda );};func (_efce HorizontalRange )horizontalRangeReference ()string {return _g .Sprintf ("\u0025\u0064\u003a%\u0064",_efce ._bgdc ,_efce ._dedeg );};type parsedReplaceObject struct{_bcae string ;_fddb int ;_aeeg int ;_abbcfa string ;};func (_dbg BinOpType )String ()string {if _dbg >=BinOpType (len (_agc )-1){return _g .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_dbg );};return _acc [_agc [_dbg ]:_agc [_dbg +1]];};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_bgeb ,_geef :=_cbe .ParseFloat (v ,64);if _geef !=nil {_bd .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_geef );};return Number {_abdfb :_bgeb };};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_facd ,_gfeb ,_bgff :=_ggd (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bgff .Type ==ResultTypeError {return _bgff ;};_ffee ,_bgff :=_bgad (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _bgff .Type ==ResultTypeError {return _bgff ;};if _ffee >=_facd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_eae :=args [3];if _eae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bfbe :=_eae .ValueNumber ;if _bfbe < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_eccbb :=args [4];if _eccbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gcg :=_eccbb .ValueNumber ;if _gcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cdaf :=args [5];if _cdaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_geccg :=_cdaf .ValueNumber ;if _geccg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_fagb :=args [6];if _fagb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eggg :=float64 (int (_fagb .ValueNumber ));if !_beee (_eggg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bbaf :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_acefe :=args [7];if _acefe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbaf =int (_acefe .ValueNumber );if !_gede (_bbaf ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_gaac ,_bgff :=_fgfe (_ffee ,_gfeb ,_bbaf );if _bgff .Type ==ResultTypeError {return _bgff ;};_gaac *=_eggg ;_gdee ,_bgff :=_fgfe (_facd ,_gfeb ,_bbaf );if _bgff .Type ==ResultTypeError {return _bgff ;};_gdee *=_eggg ;_abcc ,_bgff :=_fgfe (_ffee ,_facd ,_bbaf );if _bgff .Type ==ResultTypeError {return _bgff ;};_abcc *=_eggg ;_aceb :=_geccg +_gaac *100*_bfbe /_eggg ;_aceb /=_gdee *_gcg /_eggg +1;_aceb -=_abcc *100*_bfbe /_eggg ;return MakeNumberResult (_aceb );};func (_abf *evCache )SetCache (key string ,value Result ){_abf ._gbg .Lock ();_abf ._fde [key ]=value ;_abf ._gbg .Unlock ();};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_ceaf ,_afgc :=_fdab (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _afgc .Type ==ResultTypeError {return _afgc ;};return MakeNumberResult (_eege (_ceaf ._cgeg ,_ceaf ._gec ,_ceaf ._bbece ,_ceaf ._gaa ));};func _bebd (_acce []Result ,_abfea bool ,_fbaf string )Result {var _fageg ,_eagc string ;if _abfea {_fageg ="\u0074\u0068\u0072e\u0065";_eagc ="\u006f\u0064\u0064";}else {_fageg ="\u0074\u0077\u006f";_eagc ="\u0065\u0076\u0065\u006e";};_fffbc :=len (_acce );if (_abfea &&_fffbc < 3)||(!_abfea &&_fffbc < 2){return MakeErrorResult (_fbaf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_fageg +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_fffbc /2*2==_fffbc )==_abfea {return MakeErrorResult (_fbaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_eagc +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_beege :=-1;_caec :=-1;for _fbdd :=0;_fbdd < _fffbc ;_fbdd +=2{_bbdd :=_acce [_fbdd ];if _bbdd .Type !=ResultTypeArray &&_bbdd .Type !=ResultTypeList {return MakeErrorResult (_fbaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_aegbd :=_baebc (_bbdd );if _caec ==-1{_caec =len (_aegbd );_beege =len (_aegbd [0]);}else if len (_aegbd )!=_caec ||len (_aegbd [0])!=_beege {return MakeErrorResult (_fbaf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _abfea &&_fbdd ==0{_fbdd --;};};return _bgd ;};const _df ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";type countMode byte ;const _cefc =57358;

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_gedg ,_ffgg :=_gcec (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _ffgg .Type ==ResultTypeError {return _ffgg ;};_fdbdc :=_gedg ._fcge ;_fecc :=_gedg ._facb ;_ggg :=_gedg ._bdaf ;_ceb :=_gedg ._dbbbd ;_badd :=_gedg ._ccea ;_gagb :=_gedg ._cccba ;if _gagb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_fgb :=_gedg ._feb ;_cdag :=1.0/_gagb ;_adde :=2.5;if _cdag < 3{_adde =1;}else if _cdag < 5{_adde =1.5;}else if _cdag <=6{_adde =2;};_gagb *=_adde ;_ddce ,_dfgf :=_fgfe (_fecc ,_ggg ,_fgb );if _dfgf .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_dcd :=_gfgf (_ddce *_gagb *_fdbdc );_fdbdc -=_dcd ;_fge :=_fdbdc -_ceb ;for _afcc :=0;_afcc < _badd ;_afcc ++{_dcd =_gfgf (_gagb *_fdbdc );_fge -=_dcd ;if _fge < 0{switch _badd -_afcc {case 0:case 1:return MakeNumberResult (_gfgf (_fdbdc *0.5));default:return MakeNumberResult (0);};};_fdbdc -=_dcd ;};return MakeNumberResult (_dcd );};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;const _fcec =57369;const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _bdg ,_egbf float64 ;switch args [0].Type {case ResultTypeNumber :_egbf =args [0].ValueNumber ;case ResultTypeString :_dgfa :=DateValue ([]Result {args [0]});if _dgfa .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_egbf =_dgfa .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_bdg =args [1].ValueNumber ;if _bdg < 62&&_egbf >=62{_bdg --;};case ResultTypeString :_defed :=DateValue ([]Result {args [1]});if _defed .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_bdg =_defed .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_cef :=float64 (int (_egbf -_bdg ));return MakeNumberResult (_cef );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebc :=ctx .GetEpoch ();_eed ,_cge :=_cffcb (args [0].Value (),_ebc );if _cge !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_eed .Year ()));};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cgf :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_cgf *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_fedfc :=_baebc (args [1]);for _ ,_bage :=range _fedfc {for _ ,_eegea :=range _bage {if _eegea .Type !=ResultTypeNumber ||_eegea .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_cgf *=1.0+_eegea .ValueNumber ;};};return MakeNumberResult (_cgf );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// Reference returns an invalid reference for ConstArrayExpr.
func (_fgd ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bbbbf (_gccfb Context ,_egbgf Evaluator ,_bdbeb ,_bddf string )Result {_dedecc ,_abda :=_ca .ParseCellReference (_bdbeb );if _abda !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bdbeb ,_abda .Error ()));};_dbcf ,_bdffb :=_dedecc .ColumnIdx ,_dedecc .RowIdx ;_gfcbg ,_gdaeb :=_ca .ParseCellReference (_bddf );if _gdaeb !=nil {return MakeErrorResult (_g .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bddf ,_gdaeb .Error ()));};_ggdg ,_adcf :=_gfcbg .ColumnIdx ,_gfcbg .RowIdx ;_debd :=[][]Result {};for _fdgf :=_bdffb ;_fdgf <=_adcf ;_fdgf ++{_bfdg :=[]Result {};for _dgeb :=_dbcf ;_dgeb <=_ggdg ;_dgeb ++{_bfegb :=_gccfb .Cell (_g .Sprintf ("\u0025\u0073\u0025\u0064",_ca .IndexToColumn (_dgeb ),_fdgf ),_egbgf );_bfdg =append (_bfdg ,_bfegb );};_debd =append (_debd ,_bfdg );};if len (_debd )==1{if len (_debd [0])==1{return _debd [0][0];};return MakeListResult (_debd [0]);};return MakeArrayResult (_debd );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfga :=args [0].AsNumber ();if _bfga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bfga .ValueNumber < 0{return MakeNumberResult (-1);}else if _bfga .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};func _ada (_cf string ,_bfc uint32 )string {_dec :=_ca .ColumnToIndex (_cf );if _dec ==_bfc {return "\u0023\u0052\u0045F\u0021";}else if _dec > _bfc {return _ca .IndexToColumn (_dec -1);}else {return _cf ;};};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_defe :v }};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _gebe (args ,true )};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_eade :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_eade =int (args [1].ValueNumber );if _eade < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _eade ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_adeb :=args [0].Value ();if _eade > len (_adeb ){return MakeStringResult (_adeb );};return MakeStringResult (_adeb [0:_eade ]);};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecfaa :=args [0].AsString ();_adaf :=args [1].AsString ();if _ecfaa .Type !=ResultTypeString ||_adaf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_ecfaa .ValueString ==_adaf .ValueString );};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_feccd ,_ebbaf ,_gccf :=_ggagc (from ,to );if _gccf !=nil {_bd .Log (_gccf .Error ());return NewError (_gccf .Error ());};return PrefixRangeExpr {_cebe :pfx ,_gage :_feccd ,_fageea :_ebbaf };};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfgb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbdcb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecaf :=args [2].ValueNumber ;if _ecaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbca :=args [3].ValueNumber ;if _fbca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fbca > _ecaf {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_bfabb :=(_dfgb -_dbdcb )*(_ecaf -_fbca +1)*2;_aaea :=_ecaf *(_ecaf +1);return MakeNumberResult (_bfabb /_aaea );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_dcfab :=len (args );if _dcfab !=5&&_dcfab !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aebd ,_afab ,_gfcd :=_ggd (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gfcd .Type ==ResultTypeError {return _gfcd ;};_fbbf ,_gfcd :=_bgad (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gfcd .Type ==ResultTypeError {return _gfcd ;};if _fbbf >=_aebd {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_eaef :=args [3].ValueNumber ;if _eaef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_efba :=args [4].ValueNumber ;if _efba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_feda :=0;if _dcfab ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feda =int (args [5].ValueNumber );if !_gede (_feda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_agfbe ,_gfcd :=_fgfe (_aebd ,_afab ,_feda );if _gfcd .Type ==ResultTypeError {return _gfcd ;};_cedd ,_gfcd :=_fgfe (_fbbf ,_afab ,_feda );if _gfcd .Type ==ResultTypeError {return _gfcd ;};_fgeb ,_gfcd :=_fgfe (_fbbf ,_aebd ,_feda );if _gfcd .Type ==ResultTypeError {return _gfcd ;};_efae :=1+_cedd *_eaef ;_bfge :=1+_agfbe *_efba ;return MakeNumberResult ((_efae /_bfge -_fgeb *_eaef )*100);};

// Eval evaluates and returns a number.
func (_febdd Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_febdd ._abdfb )};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_egba :v }};func _ebag (_cgbcb ,_bbg float64 )bool {return _ea .Abs (_cgbcb -_bbg )< 1.0e-6};func _gcb (_cdg ,_egce float64 ,_abg ,_bdce int )(float64 ,Result ){_afbb ,_abbg :=_fbgd (_cdg ),_fbgd (_egce );if _abbg .After (_afbb ){_adbf :=_dgcg (_afbb ,_abbg ,_abg ,_bdce );_decb :=(_abbg .Year ()-_adbf .Year ())*12+int (_abbg .Month ())-int (_adbf .Month ());return float64 (_decb *_abg )/12.0,_bgd ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_aea ,_ee :=_cbe .ParseBool (v );if _ee !=nil {_bd .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_ee );};return Bool {_bba :_aea };};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_afeg :=len (args );if (_afeg !=2&&_afeg !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dece :=0;if _afeg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dece =int (args [2].ValueNumber );if !_gede (_dece ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbbb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ceeeb :=args [1].ValueNumber ;_fcff ,_cab :=_fgfe (_gbbb ,_ceeeb ,_dece );if _cab .Type ==ResultTypeError {return _cab ;};return MakeNumberResult (_fcff );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_gedee string };

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_feeg (args ,_dbcce ));};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_ggeda ,_fdae :=_gbgac ("\u0046\u0049\u004e\u0044",args );if _fdae .Type !=ResultTypeEmpty {return _fdae ;};_cadg :=_ae .ToLower (_ggeda ._gbbegd );if _cadg ==""{return MakeNumberResult (1.0);};_decdg :=_ae .ToLower (_ggeda ._acfg );_cgdcf :=_ggeda ._geccc ;_fgff :=1;for _fffcc :=range _decdg {if _fgff < _cgdcf {_fgff ++;continue ;};_dbae :=_dgg .Index (_cadg ,_decdg [_fffcc :]);if _dbae ==0{return MakeNumberResult (float64 (_fgff ));};_fgff ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};var _cdcab =map[string ]Function {};func _ddbc (_agcb [][]Result )float64 {if len (_agcb )==2{_bafga :=_agcb [0][0].AsNumber ();_cbdg :=_agcb [0][1].AsNumber ();_ccfdf :=_agcb [1][0].AsNumber ();_fedbe :=_agcb [1][1].AsNumber ();if _bafga .Type !=ResultTypeNumber ||_cbdg .Type !=ResultTypeNumber ||_ccfdf .Type !=ResultTypeNumber ||_fedbe .Type !=ResultTypeNumber {return _ea .NaN ();};return _bafga .ValueNumber *_fedbe .ValueNumber -_ccfdf .ValueNumber *_cbdg .ValueNumber ;};_aggc :=float64 (0);_ceaff :=float64 (1);for _cbfeb :=range _agcb {_aggc +=_ceaff *_agcb [0][_cbfeb ].ValueNumber *_ddbc (_gadbe (_agcb ,_cbfeb ));_ceaff *=-1;};return _aggc ;};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_baage PrefixHorizontalRange )Update (q *_de .UpdateQuery )Expression {return _baage };var _fgfc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _gadbe (_fbbff [][]Result ,_dggc int )[][]Result {_ffde :=[][]Result {};for _befe :=range _fbbff {if _befe ==0{continue ;};_deaf :=[]Result {};for _caadc :=range _fbbff {if _caadc ==_dggc {continue ;};_deaf =append (_deaf ,_fbbff [_befe ][_caadc ]);};_ffde =append (_ffde ,_deaf );};return _ffde ;};

// Eval evaluates and returns an expression with prefix.
func (_adbed PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_gdgd :=_adbed ._fbfaf .Reference (ctx ,ev );switch _gdgd .Type {case ReferenceTypeSheet :if _fddea (_gdgd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_g .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_gdgd .Value ));};_dfea :=ctx .Sheet (_gdgd .Value );return _adbed ._gbag .Eval (_dfea ,ev );default:return MakeErrorResult (_g .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gdgd .Type ));};};func _ggagc (_aebdc ,_bcgff Expression )(Expression ,Expression ,error ){_aecg ,_ffabe :=_aebdc .(CellRef );if !_ffabe {return nil ,nil ,_c .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_aebdc .String ()));};_gafbgf ,_ffabe :=_bcgff .(CellRef );if !_ffabe {return nil ,nil ,_c .New (_g .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_bcgff .String ()));};_ebddd ,_cafba :=_ca .ParseCellReference (_aecg ._bg );if _cafba !=nil {return nil ,nil ,_cafba ;};_bccbd ,_ffaec :=_ca .ParseCellReference (_gafbgf ._bg );if _ffaec !=nil {return nil ,nil ,_ffaec ;};_bcdeg :=false ;if _ebddd .RowIdx > _bccbd .RowIdx {_bcdeg =true ;_ebddd .RowIdx ,_bccbd .RowIdx =_bccbd .RowIdx ,_ebddd .RowIdx ;};if _ebddd .ColumnIdx > _bccbd .ColumnIdx {_bcdeg =true ;_ebddd .ColumnIdx ,_bccbd .ColumnIdx =_bccbd .ColumnIdx ,_ebddd .ColumnIdx ;_ebddd .Column ,_bccbd .Column =_bccbd .Column ,_ebddd .Column ;};if _bcdeg {return NewCellRef (_ebddd .String ()),NewCellRef (_bccbd .String ()),nil ;};return _aebdc ,_bcgff ,nil ;};const _faac =1;

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_cgfc :=len (args );if _cgfc < 5||_cgfc > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdcg :=args [0].ValueNumber ;if _gdcg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbeg :=args [1].ValueNumber ;if _bbeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcbf :=args [2].ValueNumber ;if _bcbf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bcbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbbbb :=args [3].ValueNumber ;if _dbbbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dab :=args [4].ValueNumber ;if _dbbbb > _dab {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _dab > _bcbf {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_aaded :=2.0;if _cgfc > 5{if args [5].Type ==ResultTypeEmpty {_aaded =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaded =args [5].ValueNumber ;if _aaded < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_fabg :=false ;if _cgfc > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fabg =args [6].ValueNumber !=0;};_bgcf :=0.0;_dbdg :=_ea .Floor (_dbbbb );_cgcge :=_ea .Ceil (_dab );if _fabg {for _edc :=_dbdg +1;_edc <=_cgcge ;_edc ++{_cgba :=_bcde (_gdcg ,_bbeg ,_bcbf ,_edc ,_aaded );if _edc ==_dbdg +1{_cgba *=_ea .Min (_dab ,_dbdg +1)-_dbbbb ;}else if _edc ==_cgcge {_cgba *=_dab +1-_cgcge ;};_bgcf +=_cgba ;};}else {_fafg :=_bcbf ;var _efbb float64 ;if !_ebag (_dbbbb ,_ea .Floor (_dbbbb )){if _aaded ==1{_dacfd :=_bcbf /2;if _dbbbb > _dacfd ||_ebag (_dbbbb ,_dacfd ){_efbb =_dbbbb -_dacfd ;_dbbbb =_dacfd ;_dab -=_efbb ;_fafg ++;};};};if _aaded !=0{_gdcg -=_fbgg (_gdcg ,_bbeg ,_bcbf ,_fafg ,_dbbbb ,_aaded );};_bgcf =_fbgg (_gdcg ,_bbeg ,_bcbf ,_bcbf -_dbbbb ,_dab -_dbbbb ,_aaded );};return MakeNumberResult (_bgcf );};var _abfd =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Eval evaluates the binary expression using the context given.
func (_fa BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_def :=_fa ._ff .Eval (ctx ,ev );if _def .Type ==ResultTypeError {return _def ;};_eb :=_fa ._beg .Eval (ctx ,ev );if _eb .Type ==ResultTypeError {return _eb ;};if _def .Type ==_eb .Type {if _def .Type ==ResultTypeArray {if !_gf (_def .ValueArray ,_eb .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ac (_fa ._cac ,_def .ValueArray ,_eb .ValueArray );}else if _def .Type ==ResultTypeList {if len (_def .ValueList )!=len (_eb .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _gb (_fa ._cac ,_def .ValueList ,_eb .ValueList );};}else if _def .Type ==ResultTypeArray &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return _fc (_fa ._cac ,_def .ValueArray ,_eb );}else if _def .Type ==ResultTypeList &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return _gac (_fa ._cac ,_def .ValueList ,_eb );};switch _fa ._cac {case BinOpTypePlus :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeNumberResult (_def .ValueNumber +_eb .ValueNumber );};};case BinOpTypeMinus :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeNumberResult (_def .ValueNumber -_eb .ValueNumber );};};case BinOpTypeMult :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeNumberResult (_def .ValueNumber *_eb .ValueNumber );};};case BinOpTypeDiv :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {if _eb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_def .ValueNumber /_eb .ValueNumber );};};case BinOpTypeExp :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeNumberResult (_ea .Pow (_def .ValueNumber ,_eb .ValueNumber ));};};case BinOpTypeLT :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeBoolResult (_def .ValueNumber < _eb .ValueNumber );};if _def .Type ==ResultTypeString {return MakeBoolResult (_def .ValueString < _eb .ValueString );};if _def .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _def .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _def .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _def .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_def .Type ==ResultTypeNumber ||_def .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeBoolResult (_def .ValueNumber > _eb .ValueNumber );};if _def .Type ==ResultTypeString {return MakeBoolResult (_def .ValueString > _eb .ValueString );};if _def .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _def .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _def .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _def .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_def .Type ==ResultTypeNumber ||_def .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeBoolResult (_def .ValueNumber ==_eb .ValueNumber );};if _def .Type ==ResultTypeString {return MakeBoolResult (_def .ValueString ==_eb .ValueString );};if _def .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_def .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber )||(_def .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _def .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (_ab (_eb ));}else if (_def .Type ==ResultTypeNumber ||_def .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_def ));};case BinOpTypeNE :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeBoolResult (_def .ValueNumber !=_eb .ValueNumber );};if _def .Type ==ResultTypeString {return MakeBoolResult (_def .ValueString !=_eb .ValueString );};if _def .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_def .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber )||(_def .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _def .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (!_ab (_eb ));}else if (_def .Type ==ResultTypeNumber ||_def .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (!_ab (_def ));};case BinOpTypeLEQ :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeBoolResult (_def .ValueNumber <=_eb .ValueNumber );};if _def .Type ==ResultTypeString {return MakeBoolResult (_def .ValueString <=_eb .ValueString );};if _def .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _def .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _def .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _def .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (_ab (_eb ));}else if (_def .Type ==ResultTypeNumber ||_def .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_def ));};case BinOpTypeGEQ :if _def .Type ==_eb .Type {if _def .Type ==ResultTypeNumber {return MakeBoolResult (_def .ValueNumber >=_eb .ValueNumber );};if _def .Type ==ResultTypeString {return MakeBoolResult (_def .ValueString >=_eb .ValueString );};if _def .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _def .Type ==ResultTypeString &&_eb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _def .Type ==ResultTypeNumber &&_eb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _def .Type ==ResultTypeEmpty &&(_eb .Type ==ResultTypeNumber ||_eb .Type ==ResultTypeString ){return MakeBoolResult (_ab (_eb ));}else if (_def .Type ==ResultTypeNumber ||_def .Type ==ResultTypeString )&&_eb .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_def ));};case BinOpTypeConcat :return MakeStringResult (_def .Value ()+_eb .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func _gcfa (_dedcf string )string {_dedcf =_ae .Replace (_dedcf ,"\u000a","\u005c\u006e",-1);_dedcf =_ae .Replace (_dedcf ,"\u000d","\u005c\u0072",-1);_dedcf =_ae .Replace (_dedcf ,"\u0009","\u005c\u0074",-1);return _dedcf ;};func _efcae (_dcec []Result )[]rangeIndex {_eecd :=[]rangeIndex {};_cddf :=len (_dcec );for _abfec :=0;_abfec < _cddf -1;_abfec +=2{_baga :=[]rangeIndex {};_gccge :=_baebc (_dcec [_abfec ]);_gfcb :=_fdedc (_dcec [_abfec +1]);if _abfec ==0{for _ccbcf ,_ddcd :=range _gccge {for _fgebg ,_dcgb :=range _ddcd {if _acgg (_dcgb ,_gfcb ){_baga =append (_baga ,rangeIndex {_ccbcf ,_fgebg });};};};}else {for _ ,_afda :=range _eecd {_eeaed :=_gccge [_afda ._dfade ][_afda ._abfb ];if _acgg (_eeaed ,_gfcb ){_baga =append (_baga ,_afda );};};};if len (_baga )==0{return []rangeIndex {};};_eecd =_baga [:];};return _eecd ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_ea .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_faeba :=args [0];if _faeba .Type !=ResultTypeArray &&_faeba .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dabae :=_faeba .ValueArray ;if len (_dabae )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_dabae )));};func _fgfe (_ddfc ,_dbbb float64 ,_gfe int )(float64 ,Result ){_dggdg ,_dedf :=_fbgd (_ddfc ),_fbgd (_dbbb );_fedf :=_dggdg .Unix ();_adga :=_dedf .Unix ();if _fedf ==_adga {return 0,_bgd ;};_faa ,_cfd ,_agdc :=_dggdg .Date ();_aedf ,_dgea ,_ecec :=_dedf .Date ();_cde ,_ggcf :=int (_cfd ),int (_dgea );var _edbe ,_dafa float64 ;switch _gfe {case 0:if _agdc ==31{_agdc --;};if _agdc ==30&&_ecec ==31{_ecec --;}else if _gcf :=_efc (_faa );_cde ==2&&((_gcf &&_agdc ==29)||(!_gcf &&_agdc ==28)){_agdc =30;if _dbe :=_efc (_aedf );_ggcf ==2&&((_dbe &&_ecec ==29)||(!_dbe &&_ecec ==28)){_ecec =30;};};_edbe =float64 ((_aedf -_faa )*360+(_ggcf -_cde )*30+(_ecec -_agdc ));_dafa =360;case 1:_edbe =_dbbb -_ddfc ;_aaed :=_faa !=_aedf ;if _aaed &&(_aedf !=_faa +1||_cde < _ggcf ||(_cde ==_ggcf &&_agdc < _ecec )){_adgg :=0;for _fbd :=_faa ;_fbd <=_aedf ;_fbd ++{_adgg +=_fgc (_fbd ,1);};_dafa =float64 (_adgg )/float64 (_aedf -_faa +1);}else {if !_aaed &&_efc (_faa ){_dafa =366;}else {if _aaed &&((_efc (_faa )&&(_cde < 2||(_cde ==2&&_agdc <=29)))||(_efc (_aedf )&&(_ggcf > 2||(_ggcf ==2&&_ecec ==29)))){_dafa =366;}else {_dafa =365;};};};case 2:_edbe =_dbbb -_ddfc ;_dafa =360;case 3:_edbe =_dbbb -_ddfc ;_dafa =365;case 4:if _agdc ==31{_agdc --;};if _ecec ==31{_ecec --;};_edbe =float64 ((_aedf -_faa )*360+(_ggcf -_cde )*30+(_ecec -_agdc ));_dafa =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _edbe /_dafa ,_bgd ;};

// String returns a string representation of ConstArrayExpr.
func (_dbb ConstArrayExpr )String ()string {return ""};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};const _aaccg =57351;const (_fcbg cmpResult =0;_bgdfb cmpResult =-1;_bbaa cmpResult =1;_dbdce cmpResult =2;);

// Eval evaluates and returns the result of a constant array expression.
func (_afd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_ebe :=[][]Result {};for _ ,_ge :=range _afd ._fec {_bega :=[]Result {};for _ ,_aca :=range _ge {_bega =append (_bega ,_aca .Eval (ctx ,ev ));};_ebe =append (_ebe ,_bega );};return MakeArrayResult (_ebe );};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_dcad .Float64 ());};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_abcd :=[]float64 {};for _ ,_faffg :=range args {switch _faffg .Type {case ResultTypeString :_egfc :=_faffg .AsNumber ();if _egfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_abcd =append (_abcd ,_egfc .ValueNumber );case ResultTypeList :_gged :=LCM (_faffg .ValueList );if _gged .Type !=ResultTypeNumber {return _gged ;};_abcd =append (_abcd ,_gged .ValueNumber );case ResultTypeNumber :_abcd =append (_abcd ,_faffg .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _faffg ;};};if len (_abcd )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _abcd [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_abcd )==1{return MakeNumberResult (_abcd [0]);};_cffea :=_abcd [0];for _aabb :=1;_aabb < len (_abcd );_aabb ++{if _abcd [_aabb ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cffea =_ecee (_cffea ,_abcd [_aabb ]);};return MakeNumberResult (_cffea );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _gedea (args ,_beggd )};func _fccec (_caab ,_adca Result ,_dbfb string )(*xargs ,Result ){if _caab .Type !=ResultTypeList &&_caab .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dbfb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_eeadd :=_baebc (_caab );_ecge :=[]float64 {};for _ ,_bfba :=range _eeadd {for _ ,_fggee :=range _bfba {if _fggee .Type ==ResultTypeNumber &&!_fggee .IsBoolean {_ecge =append (_ecge ,_fggee .ValueNumber );}else {return nil ,MakeErrorResult (_dbfb +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_adec :=len (_ecge );if len (_ecge )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _adca .Type !=ResultTypeList &&_adca .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dbfb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_aag :=_baebc (_adca );_febd :=[]float64 {};_gbde :=0.0;for _ ,_aggg :=range _aag {for _ ,_gafc :=range _aggg {if _gafc .Type ==ResultTypeNumber &&!_gafc .IsBoolean {_ecega :=float64 (int (_gafc .ValueNumber ));if _ecega < _gbde {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbfb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_febd =append (_febd ,_ecega );_gbde =_ecega ;}else {return nil ,MakeErrorResult (_dbfb +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_febd )!=_adec {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_ecge ,_febd },MakeEmptyResult ();};

// String returns a string representation of FunctionCall expression.
func (_fdgbf FunctionCall )String ()string {_ebbc :=_fg .Buffer {};_ebbc .WriteString (_fdgbf ._begfc );_ebbc .WriteString ("\u0028");_fcfe :=len (_fdgbf ._gdefg )-1;for _ggdad ,_edba :=range _fdgbf ._gdefg {_ebbc .WriteString (_edba .String ());if _ggdad !=_fcfe {_ebbc .WriteString ("\u002c");};};_ebbc .WriteString ("\u0029");return _ebbc .String ();};func _acg (_acge ,_adbe ,_eggbf ,_ddgb float64 ,_egee int )float64 {var _abff float64 ;if _acge ==0{_abff =_ddgb +_eggbf *_adbe ;}else {_ffb :=_ea .Pow (1+_acge ,_adbe );if _egee ==1{_abff =_ddgb *_ffb +_eggbf *(1+_acge )*(_ffb -1)/_acge ;}else {_abff =_ddgb *_ffb +_eggbf *(_ffb -1)/_acge ;};};return -_abff ;};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgeg :=args [0].ValueNumber ;if _fgeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbfg :=args [1].ValueNumber ;if _cbfg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcgc :=args [2].ValueNumber ;if _dcgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_ea .Pow (_dcgc /_cbfg ,1/_fgeg )-1);};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgbc :=false ;for _ ,_egdb :=range args {switch _egdb .Type {case ResultTypeList ,ResultTypeArray :_dcda :=Or (_egdb .ListValues ());if _dcda .Type ==ResultTypeError {return _dcda ;};if _dcda .ValueNumber !=0{_dgbc =true ;};case ResultTypeNumber :if _egdb .ValueNumber !=0{_dgbc =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _egdb ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_dgbc );};const _gcff =57346;func _acda (_gegbc float64 ,_gfef *criteriaRegex )bool {_aebc ,_ccgd :=_cbe .ParseFloat (_gfef ._ebbfe ,64);if _ccgd !=nil {return false ;};switch _gfef ._gccb {case _ecae :return _gegbc ==_aebc ;case _bcbc :return _gegbc <=_aebc ;case _fdba :return _gegbc >=_aebc ;case _gddc :return _gegbc < _aebc ;case _fgega :return _gegbc > _aebc ;};return false ;};const _egefc ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_fec [][]Expression };

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_egbc :=args [1].ValueNumber ;_ggf :=args [0];var _aef float64 ;switch _ggf .Type {case ResultTypeEmpty :_aef =0;case ResultTypeNumber :_aef =_ggf .ValueNumber ;case ResultTypeString :_acae :=DateValue ([]Result {args [0]});if _acae .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_aef =_acae .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gbb :=_fbgd (_aef );_aedd :=_gbb .AddDate (0,int (_egbc +1),0);_dace ,_bec ,_ :=_aedd .Date ();_cff :=_fgda (_dace ,int (_bec ),0);if _cff < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _dace ==1900&&_bec ==3{_cff --;};return MakeNumberResult (_cff );};func (_cbfeg VerticalRange )verticalRangeReference ()string {return _g .Sprintf ("\u0025\u0073\u003a%\u0073",_cbfeg ._acdaf ,_cbfeg ._bdcdb );};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_bbaeg *ivr )GetLabelPrefix (cellRef string )string {return ""};func _fdfe (_ddcc ,_acaa []float64 ,_ggfc float64 )Result {_cacga :=false ;_eafg :=false ;for _bffg :=0;_bffg < len (_ddcc );_bffg ++{if _ddcc [_bffg ]> 0{_cacga =true ;};if _ddcc [_bffg ]< 0{_eafg =true ;};};if !_cacga ||!_eafg {return MakeErrorResultType (ErrorTypeNum ,"");};_ffbb :=_ggfc ;_bgaf :=1e-10;_dgca :=0;_gabd :=50;_bgc :=false ;for {_adf :=_dceb (_ddcc ,_acaa ,_ffbb );_bddb :=_ffbb -_adf /_ggfa (_ddcc ,_acaa ,_ffbb );_gbce :=_ea .Abs (_bddb -_ffbb );_ffbb =_bddb ;_dgca ++;if _gbce <=_bgaf ||_ea .Abs (_adf )<=_bgaf {break ;};if _dgca > _gabd {_bgc =true ;break ;};};if _bgc ||_ea .IsNaN (_ffbb )||_ea .IsInf (_ffbb ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_ffbb );};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_egea :=args [1].ValueNumber ;_cfb :=args [0];var _eeb float64 ;switch _cfb .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_eeb =_cfb .ValueNumber ;case ResultTypeString :_deac :=DateValue ([]Result {args [0]});if _deac .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_eeb =_deac .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_facc :=_fbgd (_eeb );_gda :=_facc .AddDate (0,int (_egea ),0);_eac ,_gfg ,_bbe :=_gda .Date ();_dfg :=_fgda (_eac ,int (_gfg ),_bbe );if _dfg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_dfg );};var _dcad *_a .Rand ;func (_cadf *noCache )SetCache (key string ,value Result ){};func _bcde (_fadcc ,_fabgb ,_fbeg ,_ecdg ,_gded float64 )float64 {var _bbfe float64 ;_bdga :=_gded /_fbeg ;if _bdga >=1{_bdga =1;if _ecdg ==1{_bbfe =_fadcc ;}else {_bbfe =0;};}else {_bbfe =_fadcc *_ea .Pow (1-_bdga ,_ecdg -1);};_dagf :=_fadcc *_ea .Pow (1-_bdga ,_ecdg );var _dbab float64 ;if _dagf < _fabgb {_dbab =_bbfe -_fabgb ;}else {_dbab =_bbfe -_dagf ;};if _dbab < 0{_dbab =0;};return _dbab ;};func (_cdegb *noCache )GetFromCache (key string )(Result ,bool ){return _bgd ,false };

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_decdd .Lock ();defer _decdd .Unlock ();if _ ,_becaa :=_cdcab [name ];_becaa {_bd .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_cdcab [name ]=fn ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_geda :=args [0].AsNumber ();if _geda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbaf :=float64 (1);_cacgb :=args [1].AsNumber ();if _cacgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_dbaf =_cacgb .ValueNumber ;if _dbaf < 0&&_geda .ValueNumber > 0||_dbaf > 0&&_geda .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_dadfe :=_geda .ValueNumber ;_dadfe ,_bdcda :=_ea .Modf (_dadfe /_dbaf );if _ea .Trunc (_bdcda +0.5)> 0{_dadfe ++;};return MakeNumberResult (_dadfe *_dbaf );};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_decdd .Lock ();defer _decdd .Unlock ();if _bbcg ,_ceggb :=_dface [name ];_ceggb {return _bbcg ;};return nil ;};func _faeea (_ffca ,_baac ,_ade int )int {if _ffca > _baac {return 0;};if _dbdc (_ade ){return (_baac -_ffca +1)*360;};_aeff :=0;for _fage :=_ffca ;_fage <=_baac ;_fage ++{_dbce :=365;if _efc (_fage ){_dbce =366;};_aeff +=_dbce ;};return _aeff ;};var _bffb =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_gfbcd :=_ae .Split (v ,"\u003a");if len (_gfbcd )!=2{return nil ;};if _gfbcd [0]> _gfbcd [1]{_gfbcd [0],_gfbcd [1]=_gfbcd [1],_gfbcd [0];};return VerticalRange {_acdaf :_gfbcd [0],_bdcdb :_gfbcd [1]};};const _cbdc =57367;func _feeg (_fbbd []Result ,_dade countMode )float64 {_aeebd :=0.0;for _ ,_fccb :=range _fbbd {switch _fccb .Type {case ResultTypeNumber :if _dade ==_gefe ||(_dade ==_bgcb &&!_fccb .IsBoolean ){_aeebd ++;};case ResultTypeList ,ResultTypeArray :_aeebd +=_feeg (_fccb .ListValues (),_dade );case ResultTypeString :if _dade ==_gefe {_aeebd ++;};case ResultTypeEmpty :if _dade ==_dbcce {_aeebd ++;};};};return _aeebd ;};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_accdc :=args [0].AsNumber ();if _accdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fffe :=int (_accdc .ValueNumber );if _fffe < 0||_fffe > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_g .Sprintf ("\u0025\u0063",_fffe ));};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func _age (_daccg string )(int ,int ,float64 ,bool ,bool ,Result ){_gaef :="";_eeec :=[]string {};for _edb ,_dagc :=range _cg {_eeec =_dagc .FindStringSubmatch (_daccg );if len (_eeec )> 1{_gaef =_edb ;break ;};};if _gaef ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};_aeddb :=_eeec [1]=="";_eeec =_eeec [49:];_eebb :=len (_eeec );_dce :=_eeec [_eebb -1];_eba :=_dce =="\u0061\u006d";_bdag :=_dce =="\u0070\u006d";var _eef ,_bbef int ;var _begd float64 ;var _dbf error ;switch _gaef {case "\u0068\u0068":_eef ,_dbf =_cbe .Atoi (_eeec [0]);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};_bbef =0;_begd =0;case "\u0068\u0068\u003am\u006d":_eef ,_dbf =_cbe .Atoi (_eeec [0]);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};_bbef ,_dbf =_cbe .Atoi (_eeec [2]);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};_begd =0;case "\u006d\u006d\u003as\u0073":_eef =0;_bbef ,_dbf =_cbe .Atoi (_eeec [0]);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};_begd ,_dbf =_cbe .ParseFloat (_eeec [2],64);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_eef ,_dbf =_cbe .Atoi (_eeec [0]);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};_bbef ,_dbf =_cbe .Atoi (_eeec [2]);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};_begd ,_dbf =_cbe .ParseFloat (_eeec [4],64);if _dbf !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};};if _bbef >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};if _eba ||_bdag {if _eef > 12||_begd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );}else if _eef ==12{_eef =0;};}else if _eef >=24||_begd >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_eee );};return _eef ,_bbef ,_begd ,_bdag ,_aeddb ,_bgd ;};func (_gcbcf *ivr )Sheet (name string )Context {return _gcbcf };

// Eval evaluates a vertical range returning a list of results or an error.
func (_ccdb VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_becd :=_ccdb .verticalRangeReference ();if _gdcgb ,_cdbgd :=ev .GetFromCache (_becd );_cdbgd {return _gdcgb ;};_abeg ,_bccbf :=_dgbdea (ctx ,_ccdb ._acdaf ,_ccdb ._bdcdb );_ccbdb :=_bbbbf (ctx ,ev ,_abeg ,_bccbf );ev .SetCache (_becd ,_ccbdb );return _ccbdb ;};func _gb (_aa BinOpType ,_bf ,_fgg []Result )Result {_eaf :=[]Result {};for _ag :=range _bf {_ffc :=_bf [_ag ].AsNumber ();_fb :=_fgg [_ag ].AsNumber ();if _ffc .Type !=ResultTypeNumber ||_fb .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _aa {case BinOpTypePlus :_eaf =append (_eaf ,MakeNumberResult (_ffc .ValueNumber +_fb .ValueNumber ));case BinOpTypeMinus :_eaf =append (_eaf ,MakeNumberResult (_ffc .ValueNumber -_fb .ValueNumber ));case BinOpTypeMult :_eaf =append (_eaf ,MakeNumberResult (_ffc .ValueNumber *_fb .ValueNumber ));case BinOpTypeDiv :if _fb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_eaf =append (_eaf ,MakeNumberResult (_ffc .ValueNumber /_fb .ValueNumber ));case BinOpTypeExp :_eaf =append (_eaf ,MakeNumberResult (_ea .Pow (_ffc .ValueNumber ,_fb .ValueNumber )));case BinOpTypeLT :_eaf =append (_eaf ,MakeBoolResult (_ffc .ValueNumber < _fb .ValueNumber ));case BinOpTypeGT :_eaf =append (_eaf ,MakeBoolResult (_ffc .ValueNumber > _fb .ValueNumber ));case BinOpTypeEQ :_eaf =append (_eaf ,MakeBoolResult (_ffc .ValueNumber ==_fb .ValueNumber ));case BinOpTypeLEQ :_eaf =append (_eaf ,MakeBoolResult (_ffc .ValueNumber <=_fb .ValueNumber ));case BinOpTypeGEQ :_eaf =append (_eaf ,MakeBoolResult (_ffc .ValueNumber >=_fb .ValueNumber ));case BinOpTypeNE :_eaf =append (_eaf ,MakeBoolResult (_ffc .ValueNumber !=_fb .ValueNumber ));default:return MakeErrorResult (_g .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_aa ));};};return MakeListResult (_eaf );};

// Reference returns an invalid reference for Negate.
func (_cccafd Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _gafbg (_bgfa ,_aebe ,_daefdg Reference )string {return _g .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bgfa .Value ,_aebe .Value ,_daefdg .Value );};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_dffa :=len (args );if _dffa !=3&&_dffa !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_daga ,_effdb :=_gaad (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _effdb .Type ==ResultTypeError {return _effdb ;};_cbgd ,_effdb :=_gaad (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _effdb .Type ==ResultTypeError {return _effdb ;};_cdggb ,_effdb :=_gaad (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _effdb .Type ==ResultTypeError {return _effdb ;};_ddbg :=0;if _dffa ==3{return MakeStringResult (_ae .Replace (_daga ,_cbgd ,_cdggb ,-1));}else {_fgec ,_febbbd :=_gaeg (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _febbbd .Type ==ResultTypeError {return _febbbd ;};_ddbg =int (_fgec );if _ddbg < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_aadeg :=_daga ;_cecdb :=_ddbg ;_bbbb :=-1;_cggca :=len (_cbgd );_eeadg :=0;for {_cecdb --;_eacaa :=_ae .Index (_aadeg ,_cbgd );if _eacaa ==-1{_bbbb =-1;break ;}else {_bbbb =_eacaa +_eeadg ;if _cecdb ==0{break ;};_gbfb :=_cggca +_eacaa ;_eeadg +=_gbfb ;_aadeg =_aadeg [_gbfb :];};};if _bbbb ==-1{return MakeStringResult (_daga );}else {_cbbc :=_daga [:_bbbb ];_aeag :=_daga [_bbbb +_cggca :];return MakeStringResult (_cbbc +_cdggb +_aeag );};};};func _ab (_gg Result )bool {if _gg .Type ==ResultTypeString {return _gg .ValueString =="";};return _gg .ValueNumber ==0;};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_edg ,_begee :=_fdab (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _begee .Type ==ResultTypeError {return _begee ;};_dcfa :=_fbgd (_edg ._cgeg );_ddc :=_fbgd (_edg ._gec );_fcdf :=_edg ._bbece ;_bagf :=_edg ._gaa ;_dbag :=_dgcg (_dcfa ,_ddc ,_fcdf ,_bagf );_fee ,_fgaf ,_fgga :=_dbag .Date ();return MakeNumberResult (_fgda (_fee ,int (_fgaf ),_fgga ));};