//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_edc "bytes";_ed "errors";_d "fmt";_ab "github.com/unidoc/unioffice/common/logger";_ef "github.com/unidoc/unioffice/internal/mergesort";_efa "github.com/unidoc/unioffice/internal/wildcard";_ag "github.com/unidoc/unioffice/spreadsheet/format";_af "github.com/unidoc/unioffice/spreadsheet/reference";_dbg "github.com/unidoc/unioffice/spreadsheet/update";_b "io";_de "math";_c "math/big";_cb "math/rand";_db "regexp";_a "sort";_bd "strconv";_bf "strings";_dc "sync";_ae "time";_g "unicode";);

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _gegg (_aegc int )bool {if _aegc ==_aegc /400*400{return true ;};if _aegc ==_aegc /100*100{return false ;};return _aegc ==_aegc /4*4;};func (_acg *defEval )checkLastEvalIsRef (_bge Context ,_ebe Expression ){switch _ebe .(type ){case FunctionCall :switch _ebe .(FunctionCall )._afebc {case "\u0049\u0053\u0052E\u0046":for _ ,_gb :=range _ebe .(FunctionCall )._gcec {switch _gb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_cdd :=_gb .Eval (_bge ,_acg );_acg ._dff =!(_cdd .Type ==ResultTypeError &&_cdd .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_acg ._dff =false ;};};};};};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gccc :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_gccc *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_cdga :=_cdgc (args [1]);for _ ,_ebef :=range _cdga {for _ ,_edfg :=range _ebef {if _edfg .Type !=ResultTypeNumber ||_edfg .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_gccc *=1.0+_edfg .ValueNumber ;};};return MakeNumberResult (_gccc );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// Update returns the same object as updating sheet references does not affect String.
func (_eaagc String )Update (q *_dbg .UpdateQuery )Expression {return _eaagc };

// CellRef is a reference to a single cell
type CellRef struct{_bee string };func _aaab (_cdgf ,_eebf float64 )float64 {_cdgf =_de .Trunc (_cdgf );_eebf =_de .Trunc (_eebf );if _cdgf ==0{return _eebf ;};if _eebf ==0{return _cdgf ;};for _cdgf !=_eebf {if _cdgf > _eebf {_cdgf =_cdgf -_eebf ;}else {_eebf =_eebf -_cdgf ;};};return _cdgf ;};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func _fee (_fed ,_gbee float64 ,_dfbfc ,_bccba int )float64 {_geag :=_gdd (_fed );_agbb :=_gdd (_gbee );_fcdg :=_cadg (_geag ,_agbb ,_dfbfc );return _efae (_geag ,_fcdg ,_bccba );};func _face (_aaaab []Result )Result {_cagg :=_aaaab [0].ValueArray ;if len (_aaaab )==1{_cdcgg :=[][]Result {};for _ ,_ggga :=range _cagg {_cdcgg =append (_cdcgg ,_fcfe ([]Result {MakeListResult (_ggga )}).ValueList );};return MakeArrayResult (_cdcgg );}else if len (_aaaab )==2{_fgcg :=len (_cagg );_fcfd :=len (_cagg [0]);_gfbga :=_efad (_aaaab [1],_fgcg ,_fcfd );_ddeg :=len (_gfbga );_afba :=[][]Result {};var _bebg []Result ;for _gadg ,_cddgf :=range _cagg {if _gadg < _ddeg {_bebg =_gfbga [_gadg ];}else {_bebg =_gfec (MakeErrorResultType (ErrorTypeNA ,""),_fcfd );};_afba =append (_afba ,_fcfe ([]Result {MakeListResult (_cddgf ),MakeListResult (_bebg )}).ValueList );};return MakeArrayResult (_afba );}else if len (_aaaab )==3{_gddb :=len (_cagg );_fbdc :=len (_cagg [0]);_afaae :=_efad (_aaaab [1],_gddb ,_fbdc );_gggbg :=_efad (_aaaab [2],_gddb ,_fbdc );_eagb :=len (_afaae );_egdg :=len (_gggbg );_egcb :=[][]Result {};var _ebea ,_gefaa []Result ;for _bdccb ,_agff :=range _cagg {if _bdccb < _eagb {_ebea =_afaae [_bdccb ];}else {_ebea =_gfec (MakeErrorResultType (ErrorTypeNA ,""),_fbdc );};if _bdccb < _egdg {_gefaa =_gggbg [_bdccb ];}else {_gefaa =_gfec (MakeErrorResultType (ErrorTypeNA ,""),_fbdc );};_egcb =append (_egcb ,_fcfe ([]Result {MakeListResult (_agff ),MakeListResult (_ebea ),MakeListResult (_gefaa )}).ValueList );};return MakeArrayResult (_egcb );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _bafc (args ,false )};type yyLexer interface{Lex (_cacbc *yySymType )int ;Error (_ggabf string );};func _cgfg (_dbdc ,_agbe float64 ,_ebfd ,_gbf int )float64 {_deee :=_gdd (_dbdc );_dea :=_gdd (_agbe );_cdab :=_dbdaf (_deee ,_dea ,_ebfd ,_gbf );return _efae (_cdab ,_deee ,_gbf );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_ecf ConstArrayExpr )Update (q *_dbg .UpdateQuery )Expression {return _ecf };func _ebeed (_bafef Result ,_eaeed *criteriaParsed )bool {_dgbg :=_bf .ToLower (_bafef .ValueString );_fefga :=_eaeed ._gbcg ._fegc ;_gcgf :=_eaeed ._gbcg ._cacg ;if _fefga ==_gfggb {return _dgbg ==_gcgf ||_efa .Match (_gcgf ,_dgbg );};if _bafef .Type !=ResultTypeEmpty {if _dgbg ==_eaeed ._ebcfb ||_efa .Match (_eaeed ._ebcfb ,_dgbg ){return true ;};if _ ,_aeceg :=_bd .ParseFloat (_gcgf ,64);_aeceg ==nil {return false ;};switch _fefga {case _aaaff :return _dgbg <=_gcgf ;case _afagc :return _dgbg >=_gcgf ;case _bagcd :return _dgbg < _gcgf ;case _bfce :return _dgbg > _gcgf ;};};return false ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_cbccc :=_bf .Split (v ,"\u003a");if len (_cbccc )!=2{return nil ;};_accac ,_ :=_bd .Atoi (_cbccc [0]);_abcca ,_ :=_bd .Atoi (_cbccc [1]);if _accac > _abcca {_accac ,_abcca =_abcca ,_accac ;};return HorizontalRange {_dacd :_accac ,_fcfdd :_abcca };};

// Error is called in the case of parsing error and saves an error to a plex.
func (_dbfc *plex )Error (s string ){_ab .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_dbfc ._ecgd =s ;};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egffg :=args [0].AsString ();_gabf :=args [1].AsString ();if _egffg .Type !=ResultTypeString ||_gabf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_egffg .ValueString ==_gabf .ValueString );};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acdg :=args [0].ValueNumber ;_acgc :=args [1].ValueNumber ;_edab :=args [2].ValueNumber ;_bdbc :=_bgb (_acdg ,_acgc ,_edab );if _bdbc >=0{return MakeNumberResult (_bdbc );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};var _cbecf =[...]string {};type ri struct{_gfef float64 ;_gaac string ;};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_gdbd ,_cabb :=_abgf (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _cabb .Type ==ResultTypeError {return _cabb ;};_gdgc :=_gdbd ._fbd ;_bbdd :=_gdbd ._cbea ;_cfg :=_gdbd ._deade ;_efce :=_gdbd ._dbdg ;_cafa :=_gdbd ._accae ;_fgfc :=_gdbd ._bfec ;_ccac :=_gdbd ._deba ;_egaf ,_dgae :=_efg (_bbdd ,_cfg ,_ccac );if _dgae .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_gcba :=_egaf *_fgfc *_gdgc ;if _cafa ==0{return MakeNumberResult (_gcba );};_dgag :=_gdgc *_fgfc ;_cbeb :=_gdgc -_efce ;_adg :=int ((_cbeb -_gcba )/_dgag );if _cafa <=_adg {return MakeNumberResult (_dgag );}else if _cafa ==_adg +1{return MakeNumberResult (_cbeb -_dgag *float64 (_adg )-_gcba );}else {return MakeNumberResult (0);};};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_bee :v }};func _ecdd (_gddc Result )bool {_ebgg :=_gddc .Type ;return _ebgg !=ResultTypeArray &&_ebgg !=ResultTypeList ;};func _eddg (_gbddc float64 )bool {return _gbddc ==1||_gbddc ==2||_gbddc ==4};const _cdabg =57348;func _adgb (_beaac ,_cbcba float64 )float64 {_beaac =_de .Trunc (_beaac );_cbcba =_de .Trunc (_cbcba );if _beaac ==0&&_cbcba ==0{return 0;};return _beaac *_cbcba /_aaab (_beaac ,_cbcba );};const _gceg =57362;func _ffg (_bbgg []Result ,_ffec string )(float64 ,float64 ,Result ){if len (_bbgg )!=2{return 0,0,MakeErrorResult (_ffec +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bbgg [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_ffec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eeff :=_bbgg [0].ValueNumber ;if _bbgg [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_ffec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcdc :=float64 (int (_bbgg [1].ValueNumber ));if _bcdc < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_ffec +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _eeff ,_bcdc ,_dacf ;};

// String returns a string representation of SheetPrefixExpr.
func (_bfbefe SheetPrefixExpr )String ()string {return _bfbefe ._egagfe };

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddde :=int (args [0].ValueNumber );return MakeBoolResult (_ddde ==_ddde /2*2);};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcd :=args [0].Ref ;if _egcd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_egcd .Value ,ev ).IsBoolean );};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_ced :=len (args );if _ced < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdab :=args [0].ValueNumber ;if _fdab ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_dgbbf :=[]float64 {};for _ ,_fecc :=range args [1:]{switch _fecc .Type {case ResultTypeNumber :_dgbbf =append (_dgbbf ,_fecc .ValueNumber );case ResultTypeArray ,ResultTypeList :_accd :=_cdgc (_fecc );for _ ,_addf :=range _accd {for _ ,_afcc :=range _addf {if _afcc .Type ==ResultTypeNumber &&!_afcc .IsBoolean {_dgbbf =append (_dgbbf ,_afcc .ValueNumber );};};};};};_efde :=0.0;for _fabfb ,_aace :=range _dgbbf {_efde +=_aace /_de .Pow (1+_fdab ,float64 (_fabfb )+1);};return MakeNumberResult (_efde );};var _feea =[...]int {0};

// Update returns the same object as updating sheet references does not affect Bool.
func (_edca Bool )Update (q *_dbg .UpdateQuery )Expression {return _edca };type amorArgs struct{_fbd float64 ;_cbea float64 ;_deade float64 ;_dbdg float64 ;_accae int ;_bfec float64 ;_deba int ;};var _bbf =[]*_db .Regexp {};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fddg :=args [0].AsNumber ();_debe :=args [1].AsNumber ();if _fddg .Type !=ResultTypeNumber ||_debe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _debe .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_de .Trunc (_fddg .ValueNumber /_debe .ValueNumber ));};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_edcb EmptyExpr )Update (q *_dbg .UpdateQuery )Expression {return _edcb };

// String returns a string representation of a range with prefix.
func (_dfcc PrefixRangeExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dfcc ._cadcg .String (),_dfcc ._faag .String (),_dfcc ._gffdg .String ());};const _gbafa =57357;func _aaf (){_fbc ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_db .MustCompile ("\u005e"+_afc +_dgb );_fbc ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_db .MustCompile ("\u005e"+_geef +_dgb );_fbc ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_db .MustCompile ("\u005e"+_fde +_dgb );_fbc ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_db .MustCompile ("\u005e"+_gcaf +_dgb );_eea ["\u0068\u0068"]=_db .MustCompile (_cea +_baa +"\u0024");_eea ["\u0068\u0068\u003am\u006d"]=_db .MustCompile (_cea +_ecc +"\u0024");_eea ["\u006d\u006d\u003as\u0073"]=_db .MustCompile (_cea +_abd +"\u0024");_eea ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_db .MustCompile (_cea +_ffd +"\u0024");_bbf =[]*_db .Regexp {_db .MustCompile ("\u005e"+_afc +"\u0024"),_db .MustCompile ("\u005e"+_geef +"\u0024"),_db .MustCompile ("\u005e"+_fde +"\u0024"),_db .MustCompile ("\u005e"+_gcaf +"\u0024")};_dad =[]*_db .Regexp {_db .MustCompile ("\u005e"+_baa +"\u0024"),_db .MustCompile ("\u005e"+_ecc +"\u0024"),_db .MustCompile ("\u005e"+_abd +"\u0024"),_db .MustCompile ("\u005e"+_ffd +"\u0024")};};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_dgbbe ,_bbbc :=_dbgb (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _bbbc .Type ==ResultTypeError {return _bbbc ;};_egac :=_dgbbe ._cgbaa ;_afae :=_dgbbe ._acb ;_deeeg :=_dgbbe ._ffbb ;_cagc :=_dgbbe ._bfd ;_cfge :=_dgbbe ._gefe ;_cbaea :=_dgbbe ._fcdf ;_ade :=_debb (_egac ,_afae ,_deeeg ,_cagc ,_cfge ,_cbaea );if _ade .Type ==ResultTypeError {return _ade ;};_fbae :=_ade .ValueNumber /(1.0+_cagc /_cfge );return MakeNumberResult (_fbae );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_cafc Expression ;_dfdbg ,_fdga string ;};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_gagf :=len (args );if _gagf < 3||_gagf > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_egbf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cadgf :=args [1].ValueNumber ;if _cadgf !=float64 (int (_cadgf )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbcd :=args [2].ValueNumber ;_ggdb :=0.0;if _gagf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggdb =args [3].ValueNumber ;};_fbgf :=0.0;if _gagf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbgf =args [4].ValueNumber ;if _fbgf !=0{_fbgf =1;};};if _egbf ==0{return MakeNumberResult (-_bbcd *_cadgf -_ggdb );}else {return MakeNumberResult ((((1-_de .Pow (1+_egbf ,_cadgf ))/_egbf )*_bbcd *(1+_egbf *_fbgf )-_ggdb )/_de .Pow (1+_egbf ,_cadgf ));};};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _bafc (args ,true )};const (_gbca rmode =iota ;_dcag ;_bcgc ;);

// Eval evaluates the binary expression using the context given.
func (_cg BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_ba :=_cg ._ac .Eval (ctx ,ev );if _ba .Type ==ResultTypeError {return _ba ;};_bb :=_cg ._ec .Eval (ctx ,ev );if _bb .Type ==ResultTypeError {return _bb ;};if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeArray {if !_gc (_ba .ValueArray ,_bb .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ee (_cg ._f ,_ba .ValueArray ,_bb .ValueArray );}else if _ba .Type ==ResultTypeList {if len (_ba .ValueList )!=len (_bb .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _ge (_cg ._f ,_ba .ValueList ,_bb .ValueList );};}else if _ba .Type ==ResultTypeArray &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return _geb (_cg ._f ,_ba .ValueArray ,_bb );}else if _ba .Type ==ResultTypeList &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return _aab (_cg ._f ,_ba .ValueList ,_bb );};switch _cg ._f {case BinOpTypePlus :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeNumberResult (_ba .ValueNumber +_bb .ValueNumber );};};case BinOpTypeMinus :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeNumberResult (_ba .ValueNumber -_bb .ValueNumber );};};case BinOpTypeMult :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeNumberResult (_ba .ValueNumber *_bb .ValueNumber );};};case BinOpTypeDiv :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {if _bb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_ba .ValueNumber /_bb .ValueNumber );};};case BinOpTypeExp :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeNumberResult (_de .Pow (_ba .ValueNumber ,_bb .ValueNumber ));};};case BinOpTypeLT :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeBoolResult (_ba .ValueNumber < _bb .ValueNumber );};if _ba .Type ==ResultTypeString {return MakeBoolResult (_ba .ValueString < _bb .ValueString );};if _ba .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _ba .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _ba .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _ba .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_ba .Type ==ResultTypeNumber ||_ba .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeBoolResult (_ba .ValueNumber > _bb .ValueNumber );};if _ba .Type ==ResultTypeString {return MakeBoolResult (_ba .ValueString > _bb .ValueString );};if _ba .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _ba .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _ba .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _ba .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_ba .Type ==ResultTypeNumber ||_ba .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeBoolResult (_ba .ValueNumber ==_bb .ValueNumber );};if _ba .Type ==ResultTypeString {return MakeBoolResult (_ba .ValueString ==_bb .ValueString );};if _ba .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_ba .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber )||(_ba .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _ba .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (_cd (_bb ));}else if (_ba .Type ==ResultTypeNumber ||_ba .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (_cd (_ba ));};case BinOpTypeNE :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeBoolResult (_ba .ValueNumber !=_bb .ValueNumber );};if _ba .Type ==ResultTypeString {return MakeBoolResult (_ba .ValueString !=_bb .ValueString );};if _ba .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_ba .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber )||(_ba .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _ba .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (!_cd (_bb ));}else if (_ba .Type ==ResultTypeNumber ||_ba .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (!_cd (_ba ));};case BinOpTypeLEQ :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeBoolResult (_ba .ValueNumber <=_bb .ValueNumber );};if _ba .Type ==ResultTypeString {return MakeBoolResult (_ba .ValueString <=_bb .ValueString );};if _ba .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _ba .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _ba .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (true );}else if _ba .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (_cd (_bb ));}else if (_ba .Type ==ResultTypeNumber ||_ba .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (_cd (_ba ));};case BinOpTypeGEQ :if _ba .Type ==_bb .Type {if _ba .Type ==ResultTypeNumber {return MakeBoolResult (_ba .ValueNumber >=_bb .ValueNumber );};if _ba .Type ==ResultTypeString {return MakeBoolResult (_ba .ValueString >=_bb .ValueString );};if _ba .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _ba .Type ==ResultTypeString &&_bb .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _ba .Type ==ResultTypeNumber &&_bb .Type ==ResultTypeString {return MakeBoolResult (false );}else if _ba .Type ==ResultTypeEmpty &&(_bb .Type ==ResultTypeNumber ||_bb .Type ==ResultTypeString ){return MakeBoolResult (_cd (_bb ));}else if (_ba .Type ==ResultTypeNumber ||_ba .Type ==ResultTypeString )&&_bb .Type ==ResultTypeEmpty {return MakeBoolResult (_cd (_ba ));};case BinOpTypeConcat :return MakeStringResult (_ba .Value ()+_bb .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_fbcb ,_fgebd :=_gfde (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _fgebd .Type ==ResultTypeError {return _fgebd ;};_fcaa :=_gdd (_fbcb ._gfegf );_fdae :=_gdd (_fbcb ._adbd );_cgba :=_fbcb ._dfbc ;_eefa :=_cadg (_fcaa ,_fdae ,_cgba );_dbbc ,_beed ,_ffc :=_eefa .Date ();return MakeNumberResult (_acf (_dbbc ,int (_beed ),_ffc ));};const _agbef =57352;const _abgff =187;const _gbcd =57368;

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_egfb :=len (args );if _egfb < 2||_egfb > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecee :=args [0];if _ecee .Type !=ResultTypeArray &&_ecee .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_decbc :=args [1].AsNumber ();if _decbc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dcbd :=int (_decbc .ValueNumber )-1;_beaa :=-1;if _egfb ==3&&args [2].Type !=ResultTypeEmpty {_fbfa :=args [2].AsNumber ();if _fbfa .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_beaa =int (_fbfa .ValueNumber )-1;};if _dcbd ==-1&&_beaa ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _aede []Result ;if _ecee .Type ==ResultTypeArray {_ggff :=_ecee .ValueArray ;if _dcbd < -1||_dcbd >=len (_ggff ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _dcbd ==-1{if _beaa >=len (_ggff [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_gadeg :=[][]Result {};for _ ,_egacc :=range _ggff {_abe :=_egacc [_beaa ];if _abe .Type ==ResultTypeEmpty {_abe =MakeNumberResult (0);};_gadeg =append (_gadeg ,[]Result {_abe });};return MakeArrayResult (_gadeg );};_aede =_ggff [_dcbd ];}else {_ddbed :=_ecee .ValueList ;if _dcbd < -1||_dcbd >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _dcbd ==-1{if _beaa >=len (_ddbed ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_gdfg :=_ddbed [_beaa ];if _gdfg .Type ==ResultTypeEmpty {_gdfg =MakeNumberResult (0);};return _gdfg ;};_aede =_ddbed ;};if _beaa < -1||_beaa > len (_aede ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _beaa ==-1{_cdefe :=[]Result {};for _ ,_dffa :=range _aede {if _dffa .Type ==ResultTypeEmpty {_cdefe =append (_cdefe ,MakeNumberResult (0));}else {_cdefe =append (_cdefe ,_dffa );};};return MakeArrayResult ([][]Result {_cdefe });};_adeec :=_aede [_beaa ];if _adeec .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _adeec ;};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_abg :=args [1].ValueNumber ;_bfa :=args [0];var _ffdfd float64 ;switch _bfa .Type {case ResultTypeEmpty :_ffdfd =0;case ResultTypeNumber :_ffdfd =_bfa .ValueNumber ;case ResultTypeString :_dfg :=DateValue ([]Result {args [0]});if _dfg .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ffdfd =_dfg .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ebgd :=_gdd (_ffdfd );_eec :=_ebgd .AddDate (0,int (_abg +1),0);_ccf ,_gfeb ,_ :=_eec .Date ();_efab :=_acf (_ccf ,int (_gfeb ),0);if _efab < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _ccf ==1900&&_gfeb ==3{_efab --;};return MakeNumberResult (_efab );};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_geaed :=[]float64 {};for _ ,_ccdb :=range args {switch _ccdb .Type {case ResultTypeString :_bdad :=_ccdb .AsNumber ();if _bdad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_geaed =append (_geaed ,_bdad .ValueNumber );case ResultTypeList :_adgbg :=LCM (_ccdb .ValueList );if _adgbg .Type !=ResultTypeNumber {return _adgbg ;};_geaed =append (_geaed ,_adgbg .ValueNumber );case ResultTypeNumber :_geaed =append (_geaed ,_ccdb .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _ccdb ;};};if len (_geaed )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _geaed [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_geaed )==1{return MakeNumberResult (_geaed [0]);};_ccfc :=_geaed [0];for _efbe :=1;_efbe < len (_geaed );_efbe ++{if _geaed [_efbe ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ccfc =_adgb (_ccfc ,_geaed [_efbe ]);};return MakeNumberResult (_ccfc );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_bggg .Lock ();defer _bggg .Unlock ();if _ ,_cdcc :=_ffcdd [name ];_cdcc {_ab .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_ffcdd [name ]=fn ;};func _bafa (){_gggg =_db .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_bfef =_db .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_febg =_db .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_gdeba =_db .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_faefc =_db .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_dgbcb =_db .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfbb :=args [0].AsString ();if _cfbb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_gggb :="\u0041\u0031";if len (args )==2{_dedc :=args [1].Ref ;if _dedc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_gggb =_dedc .Value ;};switch _cfbb .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_gebc ,_ecgc :=_af .ParseCellReference (_gggb );if _ecgc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gggb );};_defcf :="\u0024"+_gebc .Column +"\u0024"+_bd .Itoa (int (_gebc .RowIdx ));if _gebc .SheetName !=""{_defcf =_gebc .SheetName +"\u0021"+_defcf ;};return MakeStringResult (_defcf );case "\u0063\u006f\u006c":_bcfe ,_caga :=_af .ParseCellReference (_gggb );if _caga !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gggb );};return MakeNumberResult (float64 (_bcfe .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_deae :=_bf .Contains (ctx .GetFormat (_gggb ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_deae );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_eeac :="\u0047";_afag :=ctx .GetFormat (_gggb );if _afag =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_aafb .MatchString (_afag ){_eeac ="\u0046\u0030";}else if _afag =="\u0030\u0025"{_eeac ="\u0050\u0030";}else if _afag =="\u004d\u004d\u004d\u0020\u0044\u0044"{_eeac ="\u0044\u0032";}else if _afag =="\u004d\u004d\u002fY\u0059"{_eeac ="\u0044\u0033";}else if _afag =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_afag =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_eeac ="\u0044\u0034";}else if _afag =="\u004d\u004d\u005c\u002d\u0044\u0044"{_eeac ="\u0044\u0035";}else if _afag =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_eeac ="\u0044\u0036";}else if _afag =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_eeac ="\u0044\u0037";}else if _afag =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_eeac ="\u0044\u0038";}else if _afag =="\u0048\u0048\u003aM\u004d"{_eeac ="\u0044\u0039";}else if _gabc .MatchString (_afag ){_eeac ="\u002e\u0030";}else if _cfef .MatchString (_afag ){_eeac ="\u002e\u0030\u0028\u0029";}else if _ffab .MatchString (_afag ){_eeac ="\u0043\u0030";}else if _fea .MatchString (_afag )||_baagd .MatchString (_afag ){_eeac ="\u0044\u0031";}else if _bbef :=_acbf .FindStringSubmatch (_afag );len (_bbef )> 1{_eeac ="\u0046"+_bd .Itoa (len (_bbef [1]));}else if _egcg :=_cgeb .FindStringSubmatch (_afag );len (_egcg )> 1{_eeac ="\u002e"+_bd .Itoa (len (_egcg [2]));}else if _bbdc :=_aggb .FindStringSubmatch (_afag );len (_bbdc )> 1{_eeac ="\u0050"+_bd .Itoa (len (_bbdc [2]));}else if _cdfc :=_defa .FindStringSubmatch (_afag );len (_cdfc )> 1{_eeac ="\u0043"+_caca (_cdfc ,1);}else if _faeb :=_cgaaa .FindStringSubmatch (_afag );len (_faeb )> 1{_eeac ="\u0043"+_caca (_faeb ,1);}else if _edfgf :=_fceb .FindStringSubmatch (_afag );len (_edfgf )> 1{_eeac ="\u002e"+_caca (_edfgf ,1)+"\u0028\u0029";}else if _gacg :=_cbbcb .FindStringSubmatch (_afag );len (_gacg )> 1{_eeac ="\u002e"+_caca (_gacg ,1);}else if _ecgfc :=_gcfda .FindStringSubmatch (_afag );len (_ecgfc )> 1{_eeac ="\u0053"+_caca (_ecgfc ,3);};if _eeac !="\u0047"&&_bf .Contains (_afag ,"\u005b\u0052\u0045D\u005d"){_eeac +="\u002d";};return MakeStringResult (_eeac );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_acagf :=ctx .GetFormat (_gggb );if _ecace .MatchString (_acagf ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_gggb ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_fdec :=0.0;if ctx .GetLocked (_gggb ){_fdec =1.0;};return MakeNumberResult (_fdec );case "\u0072\u006f\u0077":_fgea ,_bdcc :=_af .ParseCellReference (_gggb );if _bdcc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gggb );};return MakeNumberResult (float64 (_fgea .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_ffdc ,_afeab :=_af .ParseCellReference (_gggb );if _afeab !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gggb );};if _ffdc .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_ffdc .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_ffdc .SheetName ).GetWidth (int (_ffdc .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_cfbb .ValueString );};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_acced :=args [0].AsString ();if _acced .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_dedd :=_edc .Buffer {};_ecddc :=false ;for _ ,_bfea :=range _acced .ValueString {if !_ecddc &&_g .IsLetter (_bfea ){_dedd .WriteRune (_g .ToUpper (_bfea ));}else {_dedd .WriteRune (_g .ToLower (_bfea ));};_ecddc =_g .IsLetter (_bfea );};return MakeStringResult (_dedd .String ());};func (_fbabb Result )AsString ()Result {switch _fbabb .Type {case ResultTypeNumber :return MakeStringResult (_fbabb .Value ());default:return _fbabb ;};};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// String returns a string representation of Number.
func (_gfaac Number )String ()string {return _bd .FormatFloat (_gfaac ._ecgce ,'f',-1,64)};func init (){_aaf ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_cbee ,_geac :=_fcbb ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _geac .Type !=ResultTypeEmpty {return _geac ;};_gcfdg :=_cbee ._cage ;_baae :=_cbee ._edbdf ;_gdecg :=_cbee ._bfeeb ;_eebfe :=_cbee ._ccee ;_cccb :=len (_gcfdg );if _baae > _cccb {_baae =_cccb ;};_ecgcg :=_baae +_gdecg ;if _ecgcg > _cccb {_ecgcg =_cccb ;};_cbdc :=_gcfdg [0:_baae ]+_eebfe +_gcfdg [_ecgcg :];return MakeStringResult (_cbdc );};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _dcc ,_daab float64 ;switch args [0].Type {case ResultTypeNumber :_daab =args [0].ValueNumber ;case ResultTypeString :_gfb :=DateValue ([]Result {args [0]});if _gfb .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_daab =_gfb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_dcc =args [1].ValueNumber ;if _dcc < 62&&_daab >=62{_dcc --;};case ResultTypeString :_ecdc :=DateValue ([]Result {args [1]});if _ecdc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_dcc =_ecdc .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_eeaf :=float64 (int (_daab -_dcc ));return MakeNumberResult (_eeaf );};const _gabfe =57374;

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggfde :=args [0].AsNumber ();if _ggfde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_efgff :=float64 (1);if _ggfde .ValueNumber < 0{_efgff =-1;};if len (args )> 1{_afcb :=args [1].AsNumber ();if _afcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efgff =_afcb .ValueNumber ;};_afdf :=float64 (1);if len (args )> 2{_fcedd :=args [2].AsNumber ();if _fcedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_afdf =_fcedd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_de .Ceil (_ggfde .ValueNumber ));};_fddfe :=_ggfde .ValueNumber ;_fddfe ,_aaebb :=_de .Modf (_fddfe /_efgff );if _aaebb !=0{if _ggfde .ValueNumber > 0{_fddfe ++;}else if _afdf < 0{_fddfe --;};};return MakeNumberResult (_fddfe *_efgff );};func _ebbe (_dgfc ,_eggdf float64 )bool {return _de .Abs (_dgfc -_eggdf )< 1.0e-6};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ebegd :=args [0].AsNumber ();if _ebegd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edeff :=_de .Signbit (_ebegd .ValueNumber );_bafed ,_bafeg :=_de .Modf (_ebegd .ValueNumber /2);_dccf :=_bafed *2;if _bafeg !=0{if !_edeff {_dccf +=2;}else {_dccf -=2;};};return MakeNumberResult (_dccf );};const _cgaf =57353;func _agfe (_cggf ,_bebc Result ,_cdged ,_gegb bool )cmpResult {_cggf =_cggf .AsNumber ();_bebc =_bebc .AsNumber ();if _cggf .Type !=_bebc .Type {return _cdba ;};if _cggf .Type ==ResultTypeNumber {if _cggf .ValueNumber ==_bebc .ValueNumber {return _gbae ;};if _cggf .ValueNumber < _bebc .ValueNumber {return _bffbe ;};return _fffb ;};if _cggf .Type ==ResultTypeString {_gafd :=_cggf .ValueString ;_geaea :=_bebc .ValueString ;if !_cdged {_gafd =_bf .ToLower (_gafd );_geaea =_bf .ToLower (_geaea );};if _gegb {_ebbeg :=_efa .Match (_geaea ,_gafd );if _ebbeg {return _gbae ;}else {return _fffb ;};};return cmpResult (_bf .Compare (_gafd ,_geaea ));};if _cggf .Type ==ResultTypeEmpty {return _gbae ;};if _cggf .Type ==ResultTypeList {if len (_cggf .ValueList )< len (_bebc .ValueList ){return _bffbe ;};if len (_cggf .ValueList )> len (_bebc .ValueList ){return _fffb ;};for _fgdcc :=range _cggf .ValueList {_ccga :=_agfe (_cggf .ValueList [_fgdcc ],_bebc .ValueList [_fgdcc ],_cdged ,_gegb );if _ccga !=_gbae {return _ccga ;};};return _gbae ;};if _cggf .Type ==ResultTypeList {if len (_cggf .ValueArray )< len (_bebc .ValueArray ){return _bffbe ;};if len (_cggf .ValueArray )> len (_bebc .ValueArray ){return _fffb ;};for _gadd :=range _cggf .ValueArray {_efac :=_cggf .ValueArray [_gadd ];_bacd :=_cggf .ValueArray [_gadd ];if len (_efac )< len (_bacd ){return _bffbe ;};if len (_efac )> len (_bacd ){return _fffb ;};for _afaa :=range _efac {_bfda :=_agfe (_efac [_afaa ],_bacd [_afaa ],_cdged ,_gegb );if _bfda !=_gbae {return _bfda ;};};};return _gbae ;};return _cdba ;};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbcbe :=args [0].AsNumber ();if _fbcbe .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcdfc ,_fcbg :=_de .Modf (_fbcbe .ValueNumber );if _fcbg < 0{_gcdfc --;};return MakeNumberResult (_gcdfc );};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_agcfg :=args [0].AsNumber ();if _agcfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgcd :=args [1].AsNumber ();if _cgcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bcage :=int (_cgcd .ValueNumber );if _bcage < 0||_bcage > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_bccge :=0;if len (args )> 2{_accaf :=args [2].AsNumber ();if _accaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bccge =int (_accaf .ValueNumber );};_aaadb :=_bd .FormatInt (int64 (_agcfg .ValueNumber ),_bcage );if len (_aaadb )< _bccge {_aaadb =_bf .Repeat ("\u0030",_bccge -len (_aaadb ))+_aaadb ;};return MakeStringResult (_aaadb );};func _dcad (_gdgd int )string {if _gdgd >=1&&_gdgd -1< len (_ebdde ){if _ebdde [_gdgd -1]!=""{return _ebdde [_gdgd -1];};};return _d .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_gdgd );};

// Eval evaluates and returns the result of a formula.
func (_ada *defEval )Eval (ctx Context ,formula string )Result {_bgca :=ParseString (formula );_afa :=make (chan Result );go func (){if _bgca ==nil {_afa <-MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_ada .checkLastEvalIsRef (ctx ,_bgca );_afa <-_bgca .Eval (ctx ,_ada );};}();select{case _gfe :=<-_afa :return _gfe ;case <-_ae .After (_gafa ):_ab .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ac ,_ec Expression ;_f BinOpType ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_cadc chan *node ;_feeddf _dc .Mutex ;_bccac []chan *node ;_fcgc []*node ;};const _cgcf =57363;

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eece :=args [0];_faec :=args [1];if _faec .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cdefg :=args [2].AsNumber ();if _cdefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgdcf :=false ;if len (args )==4{_fagf :=args [3].AsNumber ();if _fagf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _fagf .ValueNumber ==0{_fgdcf =true ;};};_acfec :=-1;_cgdc :=false ;if len (_faec .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_ddac :=_faec .ValueArray [0];_ccbf :for _bdaeg ,_bgagc :=range _ddac {switch _agfe (_bgagc ,_eece ,false ,_fgdcf ){case _bffbe :_acfec =_bdaeg ;case _gbae :_acfec =_bdaeg ;_cgdc =true ;break _ccbf ;};};if _acfec ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gdcg :=int (_cdefg .ValueNumber )-1;if _gdcg < 0||_gdcg > len (_faec .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_ddac =_faec .ValueArray [_gdcg ];if _acfec < 0||_acfec >=len (_ddac ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _cgdc ||!_fgdcf {return _ddac [_acfec ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eafe :=int (args [0].ValueNumber );return MakeBoolResult (_eafe !=_eafe /2*2);};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _efddb (args ,false )};const _cba ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";func _fcfdeg (_gafe yyLexer )int {return _degf ().Parse (_gafe )};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_afebc :name ,_gcec :args };};func _fdggb (_aecaa []Result ,_agbd bool ,_gdbc string )Result {var _ffdg ,_gacf string ;if _agbd {_ffdg ="\u0074\u0068\u0072e\u0065";_gacf ="\u006f\u0064\u0064";}else {_ffdg ="\u0074\u0077\u006f";_gacf ="\u0065\u0076\u0065\u006e";};_afde :=len (_aecaa );if (_agbd &&_afde < 3)||(!_agbd &&_afde < 2){return MakeErrorResult (_gdbc +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_ffdg +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_afde /2*2==_afde )==_agbd {return MakeErrorResult (_gdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gacf +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_cdeb :=-1;_dggbg :=-1;for _fbgcf :=0;_fbgcf < _afde ;_fbgcf +=2{_bafedd :=_aecaa [_fbgcf ];if _bafedd .Type !=ResultTypeArray &&_bafedd .Type !=ResultTypeList {return MakeErrorResult (_gdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_ecedg :=_cdgc (_bafedd );if _dggbg ==-1{_dggbg =len (_ecedg );_cdeb =len (_ecedg [0]);}else if len (_ecedg )!=_dggbg ||len (_ecedg [0])!=_cdeb {return MakeErrorResult (_gdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _agbd &&_fbgcf ==0{_fbgcf --;};};return _dacf ;};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dcbb :=args [0].Ref ;if _dcbb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_ddbfc ,_gffd :=_af .ParseCellReference (_dcbb .Value );if _gffd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_dcbb .Value );};return MakeNumberResult (float64 (_ddbfc .ColumnIdx +1));};const _gafa =_ae .Second *1;const _faccb =57358;

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbbcb :=false ;for _ ,_dgda :=range args {switch _dgda .Type {case ResultTypeList ,ResultTypeArray :_ffgf :=Or (_dgda .ListValues ());if _ffgf .Type ==ResultTypeError {return _ffgf ;};if _ffgf .ValueNumber !=0{_bbbcb =true ;};case ResultTypeNumber :if _dgda .ValueNumber !=0{_bbbcb =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _dgda ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_bbbcb );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_dda :=&defEval {};_dda .evCache =_dec ();return _dda };

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_bggg .Lock ();defer _bggg .Unlock ();if _ ,_decd :=_cbbd [name ];_decd {_ab .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_cbbd [name ]=fn ;};const _efggg =57366;const _cea ="\u005e\u0028\u0028"+_afc +"\u007c"+_geef +"\u007c"+_fde +"\u007c"+_gcaf +"\u0029\u0020\u0029\u003f";func _adda (_gde int )bool {return _gde >=0&&_gde <=4};func _gefag (_gaca Result ,_aeae ,_adgdg string )(float64 ,Result ){switch _gaca .Type {case ResultTypeEmpty :return 0,_dacf ;case ResultTypeNumber :return _gaca .ValueNumber ,_dacf ;case ResultTypeString :_faed ,_fgddd :=_bd .ParseFloat (_gaca .ValueString ,64);if _fgddd !=nil {return 0,MakeErrorResult (_adgdg +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_aeae );};return _faed ,_dacf ;default:return 0,MakeErrorResult (_aeae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_adgdg +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbaa :=args [0];switch _gbaa .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_geeb :=_gdd (_gbaa .ValueNumber );return MakeNumberResult (float64 (_geeb .Minute ()));case ResultTypeString :_ffef :=_bf .ToLower (_gbaa .ValueString );if !_fgeg (_ffef ){_ ,_ ,_ ,_eda ,_ggf :=_dagg (_ffef );if _ggf .Type ==ResultTypeError {_ggf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _ggf ;};if _eda {return MakeNumberResult (0);};};_ ,_cddbd ,_ ,_ ,_ ,_dgg :=_bdd (_ffef );if _dgg .Type ==ResultTypeError {return _dgg ;};return MakeNumberResult (float64 (_cddbd ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};const _abd ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_begee :pfx ,_gefff :exp }};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_cceff :=_fdggb (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _cceff .Type !=ResultTypeEmpty {return _cceff ;};_gfad :=_aecf (args );return MakeNumberResult (float64 (len (_gfad )));};var _ggaae =[...]struct{_fcfde int ;_ccdc int ;_egfcb string ;}{};func _eccee (_dgcga yyLexer ,_adabc *yySymType )(_gdbed ,_cddea int ){_cddea =0;_gdbed =_dgcga .Lex (_adabc );if _gdbed <=0{_cddea =_cfccg [0];goto _bbaa ;};if _gdbed < len (_cfccg ){_cddea =_cfccg [_gdbed ];goto _bbaa ;};if _gdbed >=_gedf {if _gdbed < _gedf +len (_ccea ){_cddea =_ccea [_gdbed -_gedf ];goto _bbaa ;};};for _cbgcc :=0;_cbgcc < len (_feea );_cbgcc +=2{_cddea =_feea [_cbgcc +0];if _cddea ==_gdbed {_cddea =_feea [_cbgcc +1];goto _bbaa ;};};_bbaa :if _cddea ==0{_cddea =_ccea [1];};if _cbgb >=3{_d .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_dcad (_cddea ),uint (_gdbed ));};return _gdbed ,_cddea ;};func _gfec (_abfe Result ,_cddf int )[]Result {_ddcb :=[]Result {};switch _abfe .Type {case ResultTypeList :_eded :=_abfe .ValueList ;_gfgab :=len (_eded );for _fegb :=0;_fegb < _cddf ;_fegb ++{if _fegb < _gfgab {_ddcb =append (_ddcb ,_eded [_fegb ]);}else {_ddcb =append (_ddcb ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ecaf :=0;_ecaf < _cddf ;_ecaf ++{_ddcb =append (_ddcb ,_abfe );};};return _ddcb ;};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdda :=args [0].AsString ();if _cdda .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_bf .ToUpper (_cdda .ValueString ));};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_deg :data }};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bebfc :=args [0];_fgbgc :=args [1];if _fgbgc .Type !=ResultTypeArray &&_fgbgc .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bcca :=_ffbg (_fgbgc );_fdfb :=-1;for _egag ,_baeg :=range _bcca {if _agfe (_bebfc ,_baeg ,false ,false )==_gbae {_fdfb =_egag ;};};if _fdfb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_ccacb :=_bcca ;if len (args )==3{_ccacb =_ffbg (args [2]);};if _fdfb < 0||_fdfb >=len (_ccacb ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _ccacb [_fdfb ];};func (_fcecc *Lexer )lex (_fdfca _b .Reader ){_fcddf ,_dgeg ,_ccefc :=0,0,0;_fdcg :=-1;_bggc ,_bgdb ,_bbbfg :=0,0,0;_ =_bbbfg ;_agdfc :=1;_ =_agdfc ;_acdbb :=make ([]byte ,4096);_bdbb :=false ;for !_bdbb {_aefcc :=0;if _bggc > 0{_aefcc =_dgeg -_bggc ;};_dgeg =0;_bdccd ,_fabbd :=_fdfca .Read (_acdbb [_aefcc :]);if _bdccd ==0||_fabbd !=nil {_bdbb =true ;};_ccefc =_bdccd +_aefcc ;if _ccefc < len (_acdbb ){_fdcg =_ccefc ;};{_fcddf =_abfbb ;_bggc =0;_bgdb =0;_bbbfg =0;};{var _fegcd int ;var _gcgc uint ;if _dgeg ==_ccefc {goto _egebb ;};if _fcddf ==0{goto _fbbf ;};_ggcf :_fegcd =int (_ggbgd [_fcddf ]);_gcgc =uint (_cgag [_fegcd ]);_fegcd ++;for ;_gcgc > 0;_gcgc --{_fegcd ++;switch _cgag [_fegcd -1]{case 2:_bggc =_dgeg ;};};switch _fcddf {case 30:switch _acdbb [_dgeg ]{case 34:goto _dabg ;case 35:goto _cgaaae ;case 36:goto _ecgba ;case 38:goto _fgca ;case 39:goto _dbad ;case 40:goto _dcdc ;case 41:goto _acgf ;case 42:goto _fbdg ;case 43:goto _edac ;case 44:goto _adaa ;case 45:goto _acae ;case 47:goto _cegd ;case 58:goto _dcded ;case 59:goto _bceg ;case 60:goto _debad ;case 61:goto _egagf ;case 62:goto _cbebcb ;case 63:goto _cgdf ;case 70:goto _fbedf ;case 84:goto _gagd ;case 92:goto _cbafgc ;case 94:goto _edabc ;case 95:goto _bdbgb ;case 123:goto _cabbg ;case 125:goto _aafc ;};switch {case _acdbb [_dgeg ]< 65:switch {case _acdbb [_dgeg ]> 37:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _bbbaag ;};case _acdbb [_dgeg ]>=33:goto _cgdf ;};case _acdbb [_dgeg ]> 90:switch {case _acdbb [_dgeg ]> 93:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _fafg ;};case _acdbb [_dgeg ]>=91:goto _cgdf ;};default:goto _debbf ;};goto _dbdaa ;case 1:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _bbeg ;case 123:goto _bbeg ;case 125:goto _bbeg ;};switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _bbeg ;};case _acdbb [_dgeg ]> 45:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _bbeg ;};case _acdbb [_dgeg ]>=58:goto _bbeg ;};default:goto _bbeg ;};goto _dbdaa ;case 0:goto _fbbf ;case 2:if _acdbb [_dgeg ]==34{goto _gbff ;};goto _dabg ;case 31:if _acdbb [_dgeg ]==34{goto _dabg ;};goto _ddfge ;case 3:switch _acdbb [_dgeg ]{case 78:goto _ecba ;case 82:goto _edcbd ;};goto _cgdf ;case 4:switch _acdbb [_dgeg ]{case 47:goto _cecfd ;case 85:goto _abdac ;};goto _cgdf ;case 5:if _acdbb [_dgeg ]==65{goto _fgae ;};goto _cgdf ;case 6:switch _acdbb [_dgeg ]{case 76:goto _dffb ;case 77:goto _faafe ;};goto _cgdf ;case 7:if _acdbb [_dgeg ]==76{goto _faafe ;};goto _cgdf ;case 8:if _acdbb [_dgeg ]==33{goto _fgae ;};goto _cgdf ;case 9:if _acdbb [_dgeg ]==69{goto _dgfdb ;};goto _cgdf ;case 10:if _acdbb [_dgeg ]==70{goto _cbcdd ;};goto _cgdf ;case 11:if _acdbb [_dgeg ]==33{goto _cdbc ;};goto _cgdf ;case 12:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _cgdf ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=45{goto _cgdf ;};case _acdbb [_dgeg ]>=34:goto _cgdf ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]< 65:if 58<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=63{goto _cgdf ;};case _acdbb [_dgeg ]> 90:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _cgdf ;};default:goto _fgga ;};default:goto _fcffc ;};goto _dbdaa ;case 13:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _cgdf ;case 58:goto _gcga ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=45{goto _cgdf ;};case _acdbb [_dgeg ]>=34:goto _cgdf ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _cgdf ;};case _acdbb [_dgeg ]>=59:goto _cgdf ;};default:goto _fcffc ;};goto _dbdaa ;case 14:if _acdbb [_dgeg ]==36{goto _edgea ;};if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _egfbc ;};goto _bbeg ;case 15:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _egfbc ;};goto _bbeg ;case 32:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _egfbc ;};goto _afgd ;case 16:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 47:goto _cgdf ;case 58:goto _gbaee ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 45:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _afgf ;};case _acdbb [_dgeg ]>=34:goto _cgdf ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]> 90:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _cgdf ;};case _acdbb [_dgeg ]>=65:goto _fgga ;};default:goto _cgdf ;};goto _dbdaa ;case 17:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _bbeg ;case 123:goto _bbeg ;case 125:goto _bbeg ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=45{goto _bbeg ;};case _acdbb [_dgeg ]>=34:goto _bbeg ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _bbeg ;};case _acdbb [_dgeg ]>=58:goto _bbeg ;};default:goto _afgf ;};goto _dbdaa ;case 33:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _edcbb ;case 123:goto _edcbb ;case 125:goto _edcbb ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=45{goto _edcbb ;};case _acdbb [_dgeg ]>=34:goto _edcbb ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _edcbb ;};case _acdbb [_dgeg ]>=58:goto _edcbb ;};default:goto _afgf ;};goto _dbdaa ;case 18:if _acdbb [_dgeg ]==36{goto _fdce ;};if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bbbae ;};goto _bbeg ;case 19:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bbbae ;};goto _bbeg ;case 34:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bbbae ;};goto _eddgd ;case 20:switch _acdbb [_dgeg ]{case 39:goto _cgdf ;case 42:goto _cgdf ;case 47:goto _cgdf ;case 58:goto _cgdf ;case 63:goto _cgdf ;};if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=93{goto _cgdf ;};goto _cbaga ;case 21:switch _acdbb [_dgeg ]{case 39:goto _beeg ;case 42:goto _cgdf ;case 47:goto _cgdf ;case 58:goto _cgdf ;case 63:goto _cgdf ;};if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=93{goto _cgdf ;};goto _cbaga ;case 22:if _acdbb [_dgeg ]==33{goto _eaad ;};goto _cgdf ;case 35:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _bbfee ;case 58:goto _gcga ;case 101:goto _gbad ;case 123:goto _adgf ;case 125:goto _adgf ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=47{goto _adgf ;};case _acdbb [_dgeg ]>=34:goto _adgf ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _adgf ;};case _acdbb [_dgeg ]>=59:goto _adgf ;};default:goto _bbbaag ;};goto _dbdaa ;case 36:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _adgf ;case 101:goto _gbad ;case 123:goto _adgf ;case 125:goto _adgf ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=45{goto _adgf ;};case _acdbb [_dgeg ]>=34:goto _adgf ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _adgf ;};case _acdbb [_dgeg ]>=58:goto _adgf ;};default:goto _bbfee ;};goto _dbdaa ;case 23:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _ededd ;case 123:goto _ededd ;case 125:goto _ededd ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=45{goto _ededd ;};case _acdbb [_dgeg ]>=34:goto _ededd ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _ededd ;};case _acdbb [_dgeg ]>=58:goto _ededd ;};default:goto _befg ;};goto _dbdaa ;case 37:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 47:goto _adgf ;case 123:goto _adgf ;case 125:goto _adgf ;};switch {case _acdbb [_dgeg ]< 48:switch {case _acdbb [_dgeg ]> 35:if 37<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=45{goto _adgf ;};case _acdbb [_dgeg ]>=34:goto _adgf ;};case _acdbb [_dgeg ]> 57:switch {case _acdbb [_dgeg ]> 63:if 91<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=94{goto _adgf ;};case _acdbb [_dgeg ]>=58:goto _adgf ;};default:goto _befg ;};goto _dbdaa ;case 38:switch _acdbb [_dgeg ]{case 61:goto _dfdc ;case 62:goto _gede ;};goto _dcbbd ;case 39:if _acdbb [_dgeg ]==61{goto _gedd ;};goto _gacfd ;case 24:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _cgdf ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _cgdf ;};default:goto _cgdf ;};goto _dbdaa ;case 40:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _ffgg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _ffgg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 41:switch _acdbb [_dgeg ]{case 46:goto _addbf ;case 92:goto _addbf ;case 95:goto _addbf ;};switch {case _acdbb [_dgeg ]< 65:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _addbf ;};case _acdbb [_dgeg ]> 90:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _addbf ;};default:goto _addbf ;};goto _gffgc ;case 42:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 43:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _edcbb ;case 125:goto _edcbb ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _edcbb ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};default:goto _edcbb ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _ffgg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _edcbb ;};default:goto _edcbb ;};goto _dbdaa ;case 44:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _bbeg ;case 125:goto _bbeg ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _bbeg ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _bbeg ;};default:goto _bbeg ;};goto _dbdaa ;case 25:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 65:goto _cgeba ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _cgdf ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 66<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _cgdf ;};default:goto _cgdf ;};goto _dbdaa ;case 45:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 76:goto _eeffa ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 46:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 83:goto _gffde ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 47:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 69:goto _bad ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 26:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 79:goto _dffga ;case 82:goto _bdaaa ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _cgdf ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _cgdf ;};default:goto _cgdf ;};goto _dbdaa ;case 48:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 68:goto _eged ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 49:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 79:goto _gfcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 50:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 36:goto _cdee ;case 40:goto _ddfea ;case 46:goto _ffgg ;case 58:goto _gbaee ;case 85:goto _gffde ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 59:switch {case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _geggb ;};case _acdbb [_dgeg ]>=34:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _bgcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 27:switch _acdbb [_dgeg ]{case 46:goto _addbf ;case 92:goto _addbf ;case 95:goto _addbf ;};switch {case _acdbb [_dgeg ]< 65:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _addbf ;};case _acdbb [_dgeg ]> 90:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _addbf ;};default:goto _addbf ;};goto _cgdf ;case 28:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 120:goto _eacaf ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _cgdf ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _cgdf ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _cgdf ;};default:goto _cgdf ;};goto _dbdaa ;case 51:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 108:goto _ebfaa ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 52:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 102:goto _agae ;case 110:goto _ebac ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 53:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 110:goto _ffefb ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 54:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _acad ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 55:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _affb ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _affb ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 56:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 40:goto _abafa ;case 46:goto _affb ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _affb ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _affb ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 57:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 109:goto _dfbcd ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 58:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _cdgg ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _gffgc ;case 125:goto _gffgc ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _gffgc ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _gffgc ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _gffgc ;};default:goto _gffgc ;};goto _dbdaa ;case 59:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _ceef ;case 123:goto _bbeg ;case 125:goto _bbeg ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _bbeg ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _bbeg ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _ceef ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _bbeg ;};default:goto _bbeg ;};goto _dbdaa ;case 29:switch _acdbb [_dgeg ]{case 33:goto _dggfd ;case 46:goto _abcg ;case 92:goto _addbf ;case 95:goto _abcg ;case 123:goto _cgdf ;case 125:goto _cgdf ;};switch {case _acdbb [_dgeg ]< 58:switch {case _acdbb [_dgeg ]< 37:if 34<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=35{goto _cgdf ;};case _acdbb [_dgeg ]> 47:if 48<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=57{goto _abcg ;};default:goto _cgdf ;};case _acdbb [_dgeg ]> 63:switch {case _acdbb [_dgeg ]< 91:if 65<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=90{goto _abcg ;};case _acdbb [_dgeg ]> 94:if 97<=_acdbb [_dgeg ]&&_acdbb [_dgeg ]<=122{goto _abcg ;};default:goto _cgdf ;};default:goto _cgdf ;};goto _dbdaa ;};_cgdf :_fcddf =0;goto _adea ;_dbdaa :_fcddf =1;goto _adea ;_dabg :_fcddf =2;goto _adea ;_cgaaae :_fcddf =3;goto _adea ;_ecba :_fcddf =4;goto _adea ;_cecfd :_fcddf =5;goto _adea ;_abdac :_fcddf =6;goto _adea ;_dffb :_fcddf =7;goto _adea ;_faafe :_fcddf =8;goto _adea ;_edcbd :_fcddf =9;goto _adea ;_dgfdb :_fcddf =10;goto _adea ;_cbcdd :_fcddf =11;goto _adea ;_ecgba :_fcddf =12;goto _adea ;_fcffc :_fcddf =13;goto _adea ;_gcga :_fcddf =14;goto _adea ;_edgea :_fcddf =15;goto _adea ;_fgga :_fcddf =16;goto _adea ;_cdee :_fcddf =17;goto _adea ;_gbaee :_fcddf =18;goto _adea ;_fdce :_fcddf =19;goto _adea ;_dbad :_fcddf =20;goto _adea ;_cbaga :_fcddf =21;goto _adea ;_beeg :_fcddf =22;goto _adea ;_gbad :_fcddf =23;goto _adea ;_debbf :_fcddf =24;goto _adea ;_fbedf :_fcddf =25;goto _adea ;_gagd :_fcddf =26;goto _adea ;_cbafgc :_fcddf =27;goto _adea ;_bdbgb :_fcddf =28;goto _adea ;_fafg :_fcddf =29;goto _adea ;_bbeg :_fcddf =30;goto _dbfe ;_dggfd :_fcddf =30;goto _fccf ;_fgae :_fcddf =30;goto _dafeb ;_cdbc :_fcddf =30;goto _dfeb ;_eaad :_fcddf =30;goto _bdffg ;_ededd :_fcddf =30;goto _gffa ;_ddfea :_fcddf =30;goto _feeddb ;_fgca :_fcddf =30;goto _efcfc ;_dcdc :_fcddf =30;goto _bafb ;_acgf :_fcddf =30;goto _gdcb ;_fbdg :_fcddf =30;goto _fdabb ;_edac :_fcddf =30;goto _ffge ;_adaa :_fcddf =30;goto _abege ;_acae :_fcddf =30;goto _gcbb ;_cegd :_fcddf =30;goto _dabf ;_dcded :_fcddf =30;goto _bgdbe ;_bceg :_fcddf =30;goto _aafef ;_egagf :_fcddf =30;goto _acafg ;_edabc :_fcddf =30;goto _fccb ;_cabbg :_fcddf =30;goto _gacff ;_aafc :_fcddf =30;goto _edec ;_ddfge :_fcddf =30;goto _fefe ;_afgd :_fcddf =30;goto _fcafe ;_edcbb :_fcddf =30;goto _bfbeg ;_eddgd :_fcddf =30;goto _abga ;_adgf :_fcddf =30;goto _cddbdb ;_dcbbd :_fcddf =30;goto _baaba ;_dfdc :_fcddf =30;goto _abea ;_gede :_fcddf =30;goto _bffeg ;_gacfd :_fcddf =30;goto _fdded ;_gedd :_fcddf =30;goto _edga ;_gffgc :_fcddf =30;goto _afafa ;_abafa :_fcddf =30;goto _eaeb ;_gbff :_fcddf =31;goto _deece ;_egfbc :_fcddf =32;goto _adea ;_afgf :_fcddf =33;goto _ecdff ;_bbbae :_fcddf =34;goto _adea ;_bbbaag :_fcddf =35;goto _acbc ;_bbfee :_fcddf =36;goto _acbc ;_befg :_fcddf =37;goto _acbc ;_debad :_fcddf =38;goto _adea ;_cbebcb :_fcddf =39;goto _adea ;_ffgg :_fcddf =40;goto _bdfd ;_addbf :_fcddf =41;goto _adea ;_abcg :_fcddf =42;goto _bdfd ;_geggb :_fcddf =43;goto _ecdff ;_bgcg :_fcddf =44;goto _bdfd ;_bad :_fcddf =44;goto _ddeb ;_gfcg :_fcddf =44;goto _ggdag ;_cgeba :_fcddf =45;goto _bdfd ;_eeffa :_fcddf =46;goto _bdfd ;_gffde :_fcddf =47;goto _bdfd ;_dffga :_fcddf =48;goto _bdfd ;_eged :_fcddf =49;goto _bdfd ;_bdaaa :_fcddf =50;goto _bdfd ;_eacaf :_fcddf =51;goto _bdfd ;_ebfaa :_fcddf =52;goto _bdfd ;_agae :_fcddf =53;goto _bdfd ;_ffefb :_fcddf =54;goto _bdfd ;_acad :_fcddf =55;goto _bdfd ;_affb :_fcddf =56;goto _bdfd ;_ebac :_fcddf =57;goto _bdfd ;_dfbcd :_fcddf =58;goto _bdfd ;_cdgg :_fcddf =59;goto _bdfd ;_ceef :_fcddf =59;goto _dafef ;_dafeb :_fegcd =3;goto _gaagf ;_dfeb :_fegcd =5;goto _gaagf ;_fccf :_fegcd =7;goto _gaagf ;_bdffg :_fegcd =9;goto _gaagf ;_feeddb :_fegcd =11;goto _gaagf ;_eaeb :_fegcd =13;goto _gaagf ;_efcfc :_fegcd =15;goto _gaagf ;_gacff :_fegcd =17;goto _gaagf ;_edec :_fegcd =19;goto _gaagf ;_bafb :_fegcd =21;goto _gaagf ;_gdcb :_fegcd =23;goto _gaagf ;_ffge :_fegcd =25;goto _gaagf ;_gcbb :_fegcd =27;goto _gaagf ;_fdabb :_fegcd =29;goto _gaagf ;_dabf :_fegcd =31;goto _gaagf ;_fccb :_fegcd =33;goto _gaagf ;_acafg :_fegcd =35;goto _gaagf ;_abea :_fegcd =37;goto _gaagf ;_edga :_fegcd =39;goto _gaagf ;_bffeg :_fegcd =41;goto _gaagf ;_bgdbe :_fegcd =43;goto _gaagf ;_aafef :_fegcd =45;goto _gaagf ;_abege :_fegcd =47;goto _gaagf ;_cddbdb :_fegcd =49;goto _gaagf ;_bfbeg :_fegcd =51;goto _gaagf ;_fcafe :_fegcd =53;goto _gaagf ;_abga :_fegcd =55;goto _gaagf ;_afafa :_fegcd =57;goto _gaagf ;_fefe :_fegcd =59;goto _gaagf ;_baaba :_fegcd =61;goto _gaagf ;_fdded :_fegcd =63;goto _gaagf ;_gffa :_fegcd =65;goto _gaagf ;_dbfe :_fegcd =67;goto _gaagf ;_ddeb :_fegcd =72;goto _gaagf ;_acbc :_fegcd =75;goto _gaagf ;_ecdff :_fegcd =78;goto _gaagf ;_ggdag :_fegcd =81;goto _gaagf ;_dafef :_fegcd =84;goto _gaagf ;_bdfd :_fegcd =87;goto _gaagf ;_deece :_fegcd =90;goto _gaagf ;_gaagf :_gcgc =uint (_cgag [_fegcd ]);_fegcd ++;for ;_gcgc > 0;_gcgc --{_fegcd ++;switch _cgag [_fegcd -1]{case 3:_bgdb =_dgeg +1;case 4:_bbbfg =1;case 5:_bbbfg =2;case 6:_bbbfg =3;case 7:_bbbfg =4;case 8:_bbbfg =11;case 9:_bbbfg =14;case 10:_bbbfg =15;case 11:_bgdb =_dgeg +1;{_fcecc .emit (_ecgb ,_acdbb [_bggc :_bgdb ]);};case 12:_bgdb =_dgeg +1;{_fcecc .emit (_dadd ,_acdbb [_bggc :_bgdb ]);};case 13:_bgdb =_dgeg +1;{_fcecc .emit (_gbafa ,_acdbb [_bggc :_bgdb -1]);};case 14:_bgdb =_dgeg +1;{_fcecc .emit (_gbafa ,_acdbb [_bggc +1:_bgdb -2]);};case 15:_bgdb =_dgeg +1;{_fcecc .emit (_adfd ,_acdbb [_bggc :_bgdb -1]);};case 16:_bgdb =_dgeg +1;{_fcecc .emit (_adfd ,_acdbb [_bggc :_bgdb -1]);};case 17:_bgdb =_dgeg +1;{_fcecc .emit (_gbegd ,_acdbb [_bggc :_bgdb ]);};case 18:_bgdb =_dgeg +1;{_fcecc .emit (_fgdcd ,_acdbb [_bggc :_bgdb ]);};case 19:_bgdb =_dgeg +1;{_fcecc .emit (_eddb ,_acdbb [_bggc :_bgdb ]);};case 20:_bgdb =_dgeg +1;{_fcecc .emit (_gceg ,_acdbb [_bggc :_bgdb ]);};case 21:_bgdb =_dgeg +1;{_fcecc .emit (_cgcf ,_acdbb [_bggc :_bgdb ]);};case 22:_bgdb =_dgeg +1;{_fcecc .emit (_gcged ,_acdbb [_bggc :_bgdb ]);};case 23:_bgdb =_dgeg +1;{_fcecc .emit (_fgbfe ,_acdbb [_bggc :_bgdb ]);};case 24:_bgdb =_dgeg +1;{_fcecc .emit (_efggg ,_acdbb [_bggc :_bgdb ]);};case 25:_bgdb =_dgeg +1;{_fcecc .emit (_gcde ,_acdbb [_bggc :_bgdb ]);};case 26:_bgdb =_dgeg +1;{_fcecc .emit (_gbcd ,_acdbb [_bggc :_bgdb ]);};case 27:_bgdb =_dgeg +1;{_fcecc .emit (_cggdg ,_acdbb [_bggc :_bgdb ]);};case 28:_bgdb =_dgeg +1;{_fcecc .emit (_ebddf ,_acdbb [_bggc :_bgdb ]);};case 29:_bgdb =_dgeg +1;{_fcecc .emit (_efbd ,_acdbb [_bggc :_bgdb ]);};case 30:_bgdb =_dgeg +1;{_fcecc .emit (_gabfe ,_acdbb [_bggc :_bgdb ]);};case 31:_bgdb =_dgeg +1;{_fcecc .emit (_bcede ,_acdbb [_bggc :_bgdb ]);};case 32:_bgdb =_dgeg +1;{_fcecc .emit (_cagab ,_acdbb [_bggc :_bgdb ]);};case 33:_bgdb =_dgeg +1;{_fcecc .emit (_ggfgd ,_acdbb [_bggc :_bgdb ]);};case 34:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_cgaf ,_acdbb [_bggc :_bgdb ]);};case 35:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_faccb ,_acdbb [_bggc :_bgdb ]);};case 36:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_dedef ,_acdbb [_bggc :_bgdb ]);};case 37:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_fdeba ,_acdbb [_bggc :_bgdb ]);};case 38:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_dfbff ,_acdbb [_bggc :_bgdb ]);};case 39:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_gfcd ,_acdbb [_bggc +1:_bgdb -1]);};case 40:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_gbebf ,_acdbb [_bggc :_bgdb ]);};case 41:_bgdb =_dgeg ;_dgeg --;{_fcecc .emit (_dfgc ,_acdbb [_bggc :_bgdb ]);};case 42:_dgeg =(_bgdb )-1;{_fcecc .emit (_cgaf ,_acdbb [_bggc :_bgdb ]);};case 43:switch _bbbfg {case 0:{_fcddf =0;goto _adea ;};case 1:{_dgeg =(_bgdb )-1;_fcecc .emit (_agbef ,_acdbb [_bggc :_bgdb ]);};case 2:{_dgeg =(_bgdb )-1;_fcecc .emit (_cgaf ,_acdbb [_bggc :_bgdb ]);};case 3:{_dgeg =(_bgdb )-1;_fcecc .emit (_faccb ,_acdbb [_bggc :_bgdb ]);};case 4:{_dgeg =(_bgdb )-1;_fcecc .emit (_gdbcf ,_acdbb [_bggc :_bgdb ]);};case 11:{_dgeg =(_bgdb )-1;_fcecc .emit (_cdabg ,_acdbb [_bggc :_bgdb ]);};case 14:{_dgeg =(_bgdb )-1;_fcecc .emit (_dfbff ,_acdbb [_bggc :_bgdb ]);};case 15:{_dgeg =(_bgdb )-1;_fcecc .emit (_gfcd ,_acdbb [_bggc +1:_bgdb -1]);};};};};goto _adea ;_adea :_fegcd =int (_ccfa [_fcddf ]);_gcgc =uint (_cgag [_fegcd ]);_fegcd ++;for ;_gcgc > 0;_gcgc --{_fegcd ++;switch _cgag [_fegcd -1]{case 0:_bggc =0;case 1:_bbbfg =0;};};if _fcddf ==0{goto _fbbf ;};if _dgeg ++;_dgeg !=_ccefc {goto _ggcf ;};_egebb :{};if _dgeg ==_fdcg {switch _fcddf {case 1:goto _bbeg ;case 2:goto _bbeg ;case 31:goto _ddfge ;case 14:goto _bbeg ;case 15:goto _bbeg ;case 32:goto _afgd ;case 17:goto _bbeg ;case 33:goto _edcbb ;case 18:goto _bbeg ;case 19:goto _bbeg ;case 34:goto _eddgd ;case 35:goto _adgf ;case 36:goto _adgf ;case 23:goto _ededd ;case 37:goto _adgf ;case 38:goto _dcbbd ;case 39:goto _gacfd ;case 40:goto _gffgc ;case 41:goto _gffgc ;case 42:goto _gffgc ;case 43:goto _edcbb ;case 44:goto _bbeg ;case 45:goto _gffgc ;case 46:goto _gffgc ;case 47:goto _gffgc ;case 48:goto _gffgc ;case 49:goto _gffgc ;case 50:goto _gffgc ;case 51:goto _gffgc ;case 52:goto _gffgc ;case 53:goto _gffgc ;case 54:goto _gffgc ;case 55:goto _gffgc ;case 56:goto _gffgc ;case 57:goto _gffgc ;case 58:goto _gffgc ;case 59:goto _bbeg ;};};_fbbf :{};};if _bggc > 0{copy (_acdbb [0:],_acdbb [_bggc :]);};};_ =_fdcg ;if _fcddf ==_gaaf {_fcecc .emit (_caaf ,nil );};close (_fcecc ._cadc );};func _cagbb (_afccg ,_ggfeg int )string {const TOKSTART =4;if !_ebcc {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_fdef :=range _ggaae {if _fdef ._fcfde ==_afccg &&_fdef ._ccdc ==_ggfeg {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_fdef ._egfcb ;};};_gdaad :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_dcad (_ggfeg );_ebgc :=make ([]int ,0,4);_eddfa :=_afbb [_afccg ];for _eabg :=TOKSTART ;_eabg -1< len (_ebdde );_eabg ++{if _bfffd :=_eddfa +_eabg ;_bfffd >=0&&_bfffd < _abgff &&_ggcab [_edce [_bfffd ]]==_eabg {if len (_ebgc )==cap (_ebgc ){return _gdaad ;};_ebgc =append (_ebgc ,_eabg );};};if _cdcea [_afccg ]==-2{_cddff :=0;for _gafafc [_cddff ]!=-1||_gafafc [_cddff +1]!=_afccg {_cddff +=2;};for _cddff +=2;_gafafc [_cddff ]>=0;_cddff +=2{_caeg :=_gafafc [_cddff ];if _caeg < TOKSTART ||_gafafc [_cddff +1]==0{continue ;};if len (_ebgc )==cap (_ebgc ){return _gdaad ;};_ebgc =append (_ebgc ,_caeg );};if _gafafc [_cddff +1]!=0{return _gdaad ;};};for _fabg ,_gcfca :=range _ebgc {if _fabg ==0{_gdaad +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_gdaad +="\u0020\u006f\u0072\u0020";};_gdaad +=_dcad (_gcfca );};return _gdaad ;};type defEval struct{evCache ;_dff bool ;};

// Reference returns a string reference value to a range with prefix.
func (_abfbg PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_dffge :=_abfbg ._cadcg .Reference (ctx ,ev );_gbef :=_abfbg ._faag .Reference (ctx ,ev );_abfeg :=_abfbg ._gffdg .Reference (ctx ,ev );if _dffge .Type ==ReferenceTypeSheet &&_gbef .Type ==ReferenceTypeCell &&_abfeg .Type ==ReferenceTypeCell {return MakeRangeReference (_fdfd (_dffge ,_gbef ,_abfeg ));};return ReferenceInvalid ;};

// Update updates the horizontal range references after removing a row/column.
func (_acef HorizontalRange )Update (q *_dbg .UpdateQuery )Expression {return _acef };

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ffdf :=_bf .ToLower (args [0].ValueString );if !_fec (_ffdf ){_ ,_ ,_ ,_ ,_ecg ,_daba :=_bdd (_ffdf );if _daba .Type ==ResultTypeError {_daba .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _daba ;};if _ecg {return MakeNumberResult (0);};};_gaa ,_cce ,_ccb ,_ ,_fabe :=_dagg (_ffdf );if _fabe .Type ==ResultTypeError {return _fabe ;};return MakeNumberResult (_acf (_gaa ,_cce ,_ccb ));};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_bggg .Lock ();defer _bggg .Unlock ();if _dedbb ,_gafec :=_cbbd [name ];_gafec {return _dedbb ;};return nil ;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bfbag ,_cccd :=_fbfgf ("\u0046\u0049\u004e\u0044",args );if _cccd .Type !=ResultTypeEmpty {return _cccd ;};_cfedf :=_bf .ToLower (_bfbag ._aegg );_cbafg :=_bf .ToLower (_bfbag ._dfag );if _cfedf ==""{return MakeNumberResult (1.0);};_cgcb :=_bfbag ._baed -1;_bfdb :=1;_bedga :=0;for _faade :=range _cbafg {if _faade !=0{_fecbc :=1;if _faade -_bedga > 1{_fecbc =2;};_bfdb +=_fecbc ;};if _bfdb > _cgcb {_egec :=_efa .Index (_cfedf ,_cbafg [_faade :]);if _egec ==0{return MakeNumberResult (float64 (_bfdb ));};};_bedga =_faade ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cgfd ,_gdba ,_gcaa :=_eecg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _gcaa .Type ==ResultTypeError {return _gcaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaace :=_gdba -_cgfd ;if _eaace > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_ccgb :=args [2].ValueNumber ;if _ccgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfge :=(100-_ccgb )/_ccgb ;_dbec :=360/_eaace ;return MakeNumberResult (_gfge *_dbec );};var _fbc =map[string ]*_db .Regexp {};

// Db implements the Excel DB function.
func Db (args []Result )Result {_gcf :=len (args );if _gcf !=4&&_gcf !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_abdgf :=args [0].ValueNumber ;if _abdgf < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feeg :=args [1].ValueNumber ;if _feeg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcac :=args [2].ValueNumber ;if _gcac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_edaeg :=args [3].ValueNumber ;if _edaeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _edaeg -_gcac > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_ffaa :=12.0;if _gcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffaa =args [4].ValueNumber ;if _ffaa < 1||_ffaa > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _ffaa ==12&&_edaeg > _gcac {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _feeg >=_abdgf {return MakeNumberResult (0);};_cfc :=1-_de .Pow (_feeg /_abdgf ,1/_gcac );_cfc =float64 (int (_cfc *1000+0.5))/1000;_ffeg :=_abdgf *_cfc *_ffaa /12;if _edaeg ==1{return MakeNumberResult (_ffeg );};_aadd :=_ffeg ;_fbcbb :=0.0;_dcgc :=_gcac ;if _dcgc > _edaeg {_dcgc =_edaeg ;};for _aagc :=2.0;_aagc <=_dcgc ;_aagc ++{_fbcbb =(_abdgf -_aadd )*_cfc ;_aadd +=_fbcbb ;};if _edaeg > _gcac {return MakeNumberResult ((_abdgf -_aadd )*_cfc *(12-_ffaa )/12);};return MakeNumberResult (_fbcbb );};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efdcg :=0;_cfgeg :=false ;for _ ,_dgdg :=range args {switch _dgdg .Type {case ResultTypeList ,ResultTypeArray :_gaeeb :=Xor (_dgdg .ListValues ());if _gaeeb .Type ==ResultTypeError {return _gaeeb ;};if _gaeeb .ValueNumber !=0{_efdcg ++;};_cfgeg =true ;case ResultTypeNumber :if _dgdg .ValueNumber !=0{_efdcg ++;};_cfgeg =true ;case ResultTypeString :case ResultTypeError :return _dgdg ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_cfgeg {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_efdcg %2!=0);};

// Reference returns a string reference value to a range.
func (_eecec Range )Reference (ctx Context ,ev Evaluator )Reference {_cebfg :=_eecec ._ggded .Reference (ctx ,ev );_adcdc :=_eecec ._eebeb .Reference (ctx ,ev );if _cebfg .Type ==ReferenceTypeCell &&_adcdc .Type ==ReferenceTypeCell {return MakeRangeReference (_cgcbg (_cebfg ,_adcdc ));};return ReferenceInvalid ;};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agde :=[]float64 {};for _ ,_ggcg :=range args {switch _ggcg .Type {case ResultTypeString :_fgfec :=_ggcg .AsNumber ();if _fgfec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agde =append (_agde ,_fgfec .ValueNumber );case ResultTypeList ,ResultTypeArray :_fgdd :=GCD (_ggcg .ListValues ());if _fgdd .Type !=ResultTypeNumber {return _fgdd ;};_agde =append (_agde ,_fgdd .ValueNumber );case ResultTypeNumber :_agde =append (_agde ,_ggcg .ValueNumber );case ResultTypeError :return _ggcg ;default:return MakeErrorResult (_d .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggcg .Type ));};};if _agde [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_agde )==1{return MakeNumberResult (_agde [0]);};_cebf :=_agde [0];for _adafa :=1;_adafa < len (_agde );_adafa ++{if _agde [_adafa ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cebf =_aaab (_cebf ,_agde [_adafa ]);};return MakeNumberResult (_cebf );};

// Eval evaluates and returns the result of a Negate expression.
func (_gbcdd Negate )Eval (ctx Context ,ev Evaluator )Result {_ggccb :=_gbcdd ._dgea .Eval (ctx ,ev );if _ggccb .Type ==ResultTypeNumber {return MakeNumberResult (-_ggccb .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};func _ggea (_fbgc []Result )(float64 ,float64 ,Result ){_cceg :=0.0;_fffgg :=1.0;for _ ,_feb :=range _fbgc {switch _feb .Type {case ResultTypeNumber :_cceg +=_feb .ValueNumber ;_fffgg *=_edbbe (_feb .ValueNumber );case ResultTypeList ,ResultTypeArray :_cabeaa ,_dgbd ,_abfef :=_ggea (_feb .ListValues ());_cceg +=_cabeaa ;_fffgg *=_edbbe (_dgbd );if _abfef .Type ==ResultTypeError {return 0,0,_abfef ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_feb ;};};return _cceg ,_fffgg ,_dacf ;};func _degf ()yyParser {return &yyParserImpl {}};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_abac Expression ;_ecbag ,_eagg int ;};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};func _fceg (_aef ,_baea ,_cgcc ,_efb float64 ,_bfcb int )float64 {var _gbab float64 ;if _aef ==0{_gbab =_efb +_cgcc *_baea ;}else {_agefg :=_de .Pow (1+_aef ,_baea );if _bfcb ==1{_gbab =_efb *_agefg +_cgcc *(1+_aef )*(_agefg -1)/_aef ;}else {_gbab =_efb *_agefg +_cgcc *(_agefg -1)/_aef ;};};return -_gbab ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdag :=_dgge (args );_a .Float64s (_fdag );var _beac float64 ;if len (_fdag )%2==0{_beac =(_fdag [len (_fdag )/2-1]+_fdag [len (_fdag )/2])/2;}else {_beac =_fdag [len (_fdag )/2];};return MakeNumberResult (_beac );};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgegb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gace :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aece :=args [2].ValueNumber ;if _aece <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdcg :=args [3].ValueNumber ;return MakeNumberResult (_cdcg *_cgegb *(_gace /_aece -1));};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};const _ffd ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_baf ,_eccd :=_gfde (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _eccd .Type ==ResultTypeError {return _eccd ;};return MakeNumberResult (_cgfg (_baf ._gfegf ,_baf ._adbd ,_baf ._dfbc ,_baf ._cdef ));};func (_cedfe *Lexer )emit (_ggbd tokenType ,_adcd []byte ){if _bdfg {_d .Println ("\u0065\u006d\u0069\u0074",_ggbd ,_gbdec (string (_adcd )));};_cedfe ._cadc <-&node {_ggbd ,string (_adcd )};};

// String returns a string representation for Bool.
func (_gd Bool )String ()string {if _gd ._ffe {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Reference returns a string reference value to a named range.
func (_ecedf NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_ecedf ._adacf };};func _gecb (_bbgb ,_dba []float64 ,_eeb float64 )float64 {_ffbbb :=_eeb +1;_edbb :=_bbgb [0];_edbc :=len (_bbgb );_cac :=_dba [0];for _fdbb :=1;_fdbb < _edbc ;_fdbb ++{_edbb +=_bbgb [_fdbb ]/_de .Pow (_ffbbb ,(_dba [_fdbb ]-_cac )/365);};return _edbb ;};func _dbdaf (_cgfa ,_ggfg _ae .Time ,_agef ,_cbde int )_ae .Time {_ccg :=_ggfg ;_geec :=_cgfa .Year ()-_ggfg .Year ();_ccg =_ccg .AddDate (_geec ,0,0);if _cgfa .After (_ccg ){_ccg =_ccg .AddDate (1,0,0);};_debc :=-12/_agef ;for _ccg .After (_cgfa ){_ccg =_ccg .AddDate (0,_debc ,0);};return _ccg ;};func _acf (_cbab ,_dab ,_aac int )float64 {return float64 (_eecc (_cbab ,_ae .Month (_dab ),_aac )/86400)+_cge ;};func _cbafa (_eacd ,_dbag Expression )(Expression ,Expression ,error ){_ggafb ,_eadbd :=_eacd .(CellRef );if !_eadbd {return nil ,nil ,_ed .New (_d .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_eacd .String ()));};_deggge ,_eadbd :=_dbag .(CellRef );if !_eadbd {return nil ,nil ,_ed .New (_d .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_dbag .String ()));};_bdcg ,_ggdbg :=_af .ParseCellReference (_ggafb ._bee );if _ggdbg !=nil {return nil ,nil ,_ggdbg ;};_eagea ,_afef :=_af .ParseCellReference (_deggge ._bee );if _afef !=nil {return nil ,nil ,_afef ;};_bfbbe :=false ;if _bdcg .RowIdx > _eagea .RowIdx {_bfbbe =true ;_bdcg .RowIdx ,_eagea .RowIdx =_eagea .RowIdx ,_bdcg .RowIdx ;};if _bdcg .ColumnIdx > _eagea .ColumnIdx {_bfbbe =true ;_bdcg .ColumnIdx ,_eagea .ColumnIdx =_eagea .ColumnIdx ,_bdcg .ColumnIdx ;_bdcg .Column ,_eagea .Column =_eagea .Column ,_bdcg .Column ;};if _bfbbe {return NewCellRef (_bdcg .String ()),NewCellRef (_eagea .String ()),nil ;};return _eacd ,_dbag ,nil ;};type noCache struct{};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fega :=args [0].AsString ();if _fega .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_fega .ValueString ,ev );};func _debb (_cec ,_bffab ,_cff ,_ggge ,_ddgf float64 ,_fbef int )Result {_dfd ,_bcag :=_efg (_cec ,_bffab ,_fbef );if _bcag .Type ==ResultTypeError {return _bcag ;};_cfba ,_bafe :=_fae (_cec ,_bffab ,int (_ddgf ),_fbef );if _bafe .Type ==ResultTypeError {return _bafe ;};_bbbac :=0.0;_dfe :=0.0;_cff *=100/_ddgf ;_ggge /=_ddgf ;_ggge ++;_facbg :=_dfd *_ddgf -_cfba ;for _bfbc :=1.0;_bfbc < _cfba ;_bfbc ++{_gbed :=_bfbc +_facbg ;_eddc :=_cff /_de .Pow (_ggge ,_gbed );_dfe +=_eddc ;_bbbac +=_gbed *_eddc ;};_fadd :=(_cff +100)/_de .Pow (_ggge ,_cfba +_facbg );_dfe +=_fadd ;_bbbac +=(_cfba +_facbg )*_fadd ;_bbbac /=_dfe ;_bbbac /=_ddgf ;return MakeNumberResult (_bbbac );};func _dbgb (_adbb []Result ,_ddbe string )(*durationArgs ,Result ){_cdde :=len (_adbb );if _cdde !=5&&_cdde !=6{return nil ,MakeErrorResult (_ddbe +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfda ,_gcab ,_gfbe :=_eecg (_adbb [0],_adbb [1],_ddbe );if _gfbe .Type ==ResultTypeError {return nil ,_gfbe ;};_bae :=_adbb [2];if _bae .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddbe +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fcdd :=_bae .ValueNumber ;if _fcdd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fdcc :=_adbb [3];if _fdcc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddbe +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bbff :=_fdcc .ValueNumber ;if _bbff < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_gfdea :=_adbb [4];if _gfdea .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddbe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dfee :=float64 (int (_gfdea .ValueNumber ));if !_eddg (_dfee ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bec :=0;if _cdde ==6&&_adbb [5].Type !=ResultTypeEmpty {_abdg :=_adbb [5];if _abdg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddbe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bec =int (_abdg .ValueNumber );if !_adda (_bec ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_ddbe );};};return &durationArgs {_cfda ,_gcab ,_fcdd ,_bbff ,_dfee ,_bec },_dacf ;};var _bggg _dc .Mutex ;

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cbge :=args [0].AsString ();if _cbge .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbfge :=args [1].AsNumber ();if _fbfge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acddb :=_cbge .ValueString ;if len (_acddb )> 2&&(_bf .HasPrefix (_acddb ,"\u0030\u0078")||_bf .HasPrefix (_acddb ,"\u0030\u0058")){_acddb =_acddb [2:];};_acda ,_agbbf :=_bd .ParseInt (_acddb ,int (_fbfge .ValueNumber ),64);if _agbbf !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_acda ));};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_gbced :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbced =int (args [1].ValueNumber );if _gbced < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _gbced ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_edbgca :=args [0].Value ();_eeccf :=len (_edbgca );if _gbced > _eeccf {return MakeStringResult (_edbgca );};return MakeStringResult (_edbgca [_eeccf -_gbced :_eeccf ]);};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gfbeg ,_cafde ,_dgac :=_eecg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _dgac .Type ==ResultTypeError {return _dgac ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcef :=_cafde -_gfbeg ;if _gcef > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_fabc :=args [2].ValueNumber ;if _fabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_fabc *_gcef /360));};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_aea ,_fcd :=_bd .ParseBool (v );if _fcd !=nil {_ab .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_fcd );};return Bool {_ffe :_aea };};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eca :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aabc :=args [2].ValueNumber +1;if _aabc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bgee :=_cdgc (args [0]);_fabf :=float64 (len (_bgee ));_aaaa ,_ddef :=0.0,0.0;_ggfa ,_ffae :=1.0,1.0;_deab ,_fadf :=false ,false ;for _ ,_bcee :=range _bgee {for _ ,_gbabf :=range _bcee {if _gbabf .Type ==ResultTypeNumber &&!_gbabf .IsBoolean {_faa :=_gbabf .ValueNumber ;if _faa ==0{continue ;}else {if _faa > 0{_deab =true ;_ddef +=_gbabf .ValueNumber *_ffae ;}else {_fadf =true ;_aaaa +=_gbabf .ValueNumber *_ggfa ;};_ggfa /=_eca ;_ffae /=_aabc ;};};};};if !_deab ||!_fadf {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bagc :=-_ddef /_aaaa ;_bagc *=_de .Pow (_aabc ,_fabf -1);_bagc =_de .Pow (_bagc ,1/(_fabf -1));return MakeNumberResult (_bagc -1);};const (_gbae cmpResult =0;_bffbe cmpResult =-1;_fffb cmpResult =1;_cdba cmpResult =2;);

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_decc (args ,_fgcge ));};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_cadcg ,_faag ,_gffdg Expression };func _bda (_bdaa ,_fcca int )int {if _fcca ==2&&_gegg (_bdaa ){return 29;}else {return _cgf [_fcca -1];};};func _cbdd (_bdadf string )*criteriaRegex {_afaf :=&criteriaRegex {};if _bdadf ==""{return _afaf ;};if _ebcee :=_gggg .FindStringSubmatch (_bdadf );len (_ebcee )> 1{_afaf ._fegc =_gfggb ;_afaf ._cacg =_ebcee [1];}else if _cbaa :=_bfef .FindStringSubmatch (_bdadf );len (_cbaa )> 1{_afaf ._fegc =_gfggb ;_afaf ._cacg =_cbaa [1];}else if _gage :=_faefc .FindStringSubmatch (_bdadf );len (_gage )> 1{_afaf ._fegc =_aaaff ;_afaf ._cacg =_gage [1];}else if _fcfb :=_dgbcb .FindStringSubmatch (_bdadf );len (_fcfb )> 1{_afaf ._fegc =_afagc ;_afaf ._cacg =_fcfb [1];}else if _fcedg :=_febg .FindStringSubmatch (_bdadf );len (_fcedg )> 1{_afaf ._fegc =_bagcd ;_afaf ._cacg =_fcedg [1];}else if _edbg :=_gdeba .FindStringSubmatch (_bdadf );len (_edbg )> 1{_afaf ._fegc =_bfce ;_afaf ._cacg =_edbg [1];};return _afaf ;};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_gbcef ,_eee :=_fbfgf ("\u0046\u0049\u004e\u0044",args );if _eee .Type !=ResultTypeEmpty {return _eee ;};_beab :=_bf .ToLower (_gbcef ._aegg );if _beab ==""{return MakeNumberResult (1.0);};_fffbb :=_bf .ToLower (_gbcef ._dfag );_accf :=_gbcef ._baed ;_bebb :=1;for _agba :=range _fffbb {if _bebb < _accf {_bebb ++;continue ;};_afeba :=_efa .Index (_beab ,_fffbb [_agba :]);if _afeba ==0{return MakeNumberResult (float64 (_bebb ));};_bebb ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eggf :=ctx .GetEpoch ();_fecf ,_dfae :=_bfffc (args [0].Value (),_eggf );if _dfae !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ccgab :=_fecf .Year ();return MakeBoolResult (_gegg (_ccgab ));};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};var _cddee =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_egagfe string };

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_ebb ,_aabe ,_bdff :=_ffg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _bdff .Type ==ResultTypeError {return _bdff ;};if _aabe < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _ebb ==0{return MakeNumberResult (0);};_adgc :=_ebb < 0;if _adgc {_ebb =-_ebb ;};_bccg :=args [0].Value ();_gfbg :=_bf .Split (_bccg ,"\u002e");_dbbb :=float64 (int (_ebb ));_adbc :=_gfbg [1];_adcb :=len (_adbc );_fggg :=int (_de .Log10 (_aabe ))+1;_dfbca :=float64 (_fggg -_adcb );_dafd ,_dfec :=_bd .ParseFloat (_adbc ,64);if _dfec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_dafd *=_de .Pow (10,_dfbca );_dbgd :=_dbbb +_dafd /_aabe ;if _adgc {_dbgd =-_dbgd ;};return MakeNumberResult (_dbgd );};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_ffbae :=len (args );if _ffbae !=4&&_ffbae !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggde ,_baab ,_acgg :=_eecg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _acgg .Type ==ResultTypeError {return _acgg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgadg :=args [2].ValueNumber ;if _cgadg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_begg :=args [3].ValueNumber ;if _begg <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_egfe :=0;if _ffbae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfe =int (args [4].ValueNumber );if !_adda (_egfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_edgd ,_acgg :=_efg (_ggde ,_baab ,_egfe );if _acgg .Type ==ResultTypeError {return _acgg ;};return MakeNumberResult ((_begg /_cgadg -1)/_edgd );};const _abfbb int =30;

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cabea :=args [0].AsNumber ();if _cabea .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gbdff :=float64 (1);if _cabea .ValueNumber < 0{_gbdff =-1;};if len (args )> 1{_aegce :=args [1].AsNumber ();if _aegce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gbdff =_aegce .ValueNumber ;};_bbead :=float64 (1);if len (args )> 2{_cdca :=args [2].AsNumber ();if _cdca .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbead =_cdca .ValueNumber ;};if len (args )==1{return MakeNumberResult (_de .Floor (_cabea .ValueNumber ));};_ccff :=_cabea .ValueNumber ;_ccff ,_ffbaf :=_de .Modf (_ccff /_gbdff );if _ffbaf !=0&&_cabea .ValueNumber < 0&&_bbead > 0{_ccff ++;};return MakeNumberResult (_ccff *_gbdff );};

// String returns a string of a range.
func (_gfce Range )String ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_gfce ._ggded .String (),_gfce ._eebeb .String ());};func _fae (_cddg ,_eefe float64 ,_bafg ,_cae int )(float64 ,Result ){_bba ,_abca :=_gdd (_cddg ),_gdd (_eefe );if _abca .After (_bba ){_cgad :=_dbdaf (_bba ,_abca ,_bafg ,_cae );_bbec :=(_abca .Year ()-_cgad .Year ())*12+int (_abca .Month ())-int (_cgad .Month ());return float64 (_bbec *_bafg )/12.0,_dacf ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Eval evaluates and returns a boolean.
func (_fdc Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_fdc ._ffe )};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcccg :=args [0].AsNumber ();if _gcccg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbcge :=int (_gcccg .ValueNumber );if _gbcge < 0||_gbcge > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_d .Sprintf ("\u0025\u0063",_gbcge ));};const _dadd =57356;type parsedReplaceObject struct{_cage string ;_edbdf int ;_bfeeb int ;_ccee string ;};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_caag ,_cgccc :=_eebd (args ,false );if _cgccc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_caag /_cgccc );};var _cgf =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_efcf ,_fedf :=_dbgb (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _fedf .Type ==ResultTypeError {return _fedf ;};_fgfe :=_efcf ._cgbaa ;_fbcfc :=_efcf ._acb ;_bfg :=_efcf ._ffbb ;_fdggd :=_efcf ._bfd ;_adag :=_efcf ._gefe ;_ddga :=_efcf ._fcdf ;return _debb (_fgfe ,_fbcfc ,_bfg ,_fdggd ,_adag ,_ddga );};const _dafbd =16;func _fbb (_bagf ,_ddff ,_eaac int )int {if _bagf > _ddff {return 0;};if _ceg (_eaac ){return (_ddff -_bagf +1)*360;};_fbabc :=0;for _gefa :=_bagf ;_gefa <=_ddff ;_gefa ++{_cfbg :=365;if _gegg (_gefa ){_cfbg =366;};_fbabc +=_cfbg ;};return _fbabc ;};func _dgge (_begf []Result )[]float64 {_aabd :=make ([]float64 ,0);for _ ,_bbcc :=range _begf {if _bbcc .Type ==ResultTypeEmpty {continue ;};_bbcc =_bbcc .AsNumber ();switch _bbcc .Type {case ResultTypeNumber :if !_bbcc .IsBoolean {_aabd =append (_aabd ,_bbcc .ValueNumber );};case ResultTypeList ,ResultTypeArray :_aabd =append (_aabd ,_dgge (_bbcc .ListValues ())...);case ResultTypeString :default:_ab .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbcc .Type );};};return _aabd ;};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebab :=args [0];switch _ebab .Type {case ResultTypeError :return _ebab ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_ebab .ValueNumber !=0);};if _ebab .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _fcfe (args );case ResultTypeArray :return _face (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_acfe :=len (args );if _acfe !=4&&_acfe !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gdag ,_feg ,_gcgg :=_eecg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _gcgg .Type ==ResultTypeError {return _gcgg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bab :=args [2].ValueNumber ;if _bab <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcef :=args [3].ValueNumber ;if _fcef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edef :=0;if _acfe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edef =int (args [4].ValueNumber );if !_adda (_edef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_edge ,_gcgg :=_efg (_gdag ,_feg ,_edef );if _gcgg .Type ==ResultTypeError {return _gcgg ;};return MakeNumberResult ((_fcef -_bab )/_fcef /_edge );};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_baegd :=args [0].Ref ;if _baegd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_baegd .Value ));};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_ffde :=len (args );if _ffde < 3||_ffde > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebbd :=args [0].ValueNumber ;if _ebbd !=float64 (int (_ebbd )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebaf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cdgea :=args [2].ValueNumber ;_ffga :=0.0;if _ffde >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ffga =args [3].ValueNumber ;};_eaee :=0.0;if _ffde >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eaee =args [4].ValueNumber ;if _eaee !=0{_eaee =1;};};_eefgb :=0.1;if _ffde >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eefgb =args [5].ValueNumber ;};_bgbf :=100;_defe :=0;_deac :=false ;_dbbg :=1e-6;_dbee :=_eefgb ;for _defe < _bgbf &&!_deac {_fabeb :=_de .Pow (_dbee +1,_ebbd );_cbdb :=_de .Pow (_dbee +1,_ebbd -1);_dedb :=_dbee *_eaee +1;_dbgg :=_ebaf *(_fabeb -1);_ddae :=_ffga +_fabeb *_cdgea +_dbgg *_dedb /_dbee ;_efdce :=_ebbd *_cbdb *_cdgea -_dbgg *_dedb /_de .Pow (_dbee ,2);_eecaf :=(_ebbd *_ebaf *_cbdb *_dedb +_dbgg *_eaee )/_dbee ;_bfbg :=_ddae /(_efdce +_eecaf );if _de .Abs (_bfbg )< _dbbg {_deac =true ;};_defe ++;_dbee -=_bfbg ;};return MakeNumberResult (_dbee );};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_eadc :=_fdggb (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _eadc .Type !=ResultTypeEmpty {return _eadc ;};_fbgcfc :=_aecf (args [1:]);_gcfg :=-_de .MaxFloat64 ;_daefb :=_cdgc (args [0]);for _ ,_cagb :=range _fbgcfc {_eaccd :=_daefb [_cagb ._abdbf ][_cagb ._cfcd ].ValueNumber ;if _gcfg < _eaccd {_gcfg =_eaccd ;};};if _gcfg ==-_de .MaxFloat64 {_gcfg =0;};return MakeNumberResult (float64 (_gcfg ));};const _geaa =1;

// String returns a string representation of String.
func (_bgdcf String )String ()string {return "\u0022"+_bgdcf ._edaea +"\u0022"};func _dcab (_efgfd Result )Result {if _efgfd .Type ==ResultTypeEmpty {return _efgfd ;};_bbggf :=_efgfd .AsString ();if _bbggf .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _efgfd .IsBoolean {if _bbggf .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _bbggf .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_bf .ToLower (_bbggf .ValueString ));};};func _cecg (_fegcb _ae .Time )bool {return _ae .Now ().Sub (_fegcb )>=_gdbcg };func _acff (_feab []Result ,_eeccc bool )Result {_cccf :="\u004d\u0049\u004e";if _eeccc {_cccf ="\u004d\u0049\u004e\u0041";};if len (_feab )==0{return MakeErrorResult (_cccf +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdadb :=_de .MaxFloat64 ;for _ ,_bbade :=range _feab {switch _bbade .Type {case ResultTypeNumber :if (_eeccc ||!_bbade .IsBoolean )&&_bbade .ValueNumber < _bdadb {_bdadb =_bbade .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_edagf :=_acff (_bbade .ListValues (),_eeccc );if _edagf .ValueNumber < _bdadb {_bdadb =_edagf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_dgagg :=0.0;if _eeccc {_dgagg =_bbade .AsNumber ().ValueNumber ;};if _dgagg < _bdadb {_bdadb =_dgagg ;};default:_ab .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_cccf +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbade .Type );};};if _bdadb ==_de .MaxFloat64 {_bdadb =0;};return MakeNumberResult (_bdadb );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_gcfd :=len (args );if _gcfd !=4&&_gcfd !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egfcc ,_feca ,_gfffd :=_eecg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _gfffd .Type ==ResultTypeError {return _gfffd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cdf :=args [2].ValueNumber ;if _cdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aebf :=args [3].ValueNumber ;if _aebf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_eeffe :=0;if _gcfd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eeffe =int (args [4].ValueNumber );if !_adda (_eeffe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_eabde ,_gfffd :=_efg (_egfcc ,_feca ,_eeffe );if _gfffd .Type ==ResultTypeError {return _gfffd ;};return MakeNumberResult ((_aebf -_cdf )/_cdf /_eabde );};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_gbabd :=_fdggb (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _gbabd .Type !=ResultTypeEmpty {return _gbabd ;};_cfee :=_aecf (args [1:]);_facba :=_de .MaxFloat64 ;_eceb :=_cdgc (args [0]);for _ ,_caad :=range _cfee {_dgdf :=_eceb [_caad ._abdbf ][_caad ._cfcd ].ValueNumber ;if _facba > _dgdf {_facba =_dgdf ;};};if _facba ==_de .MaxFloat64 {_facba =0;};return MakeNumberResult (float64 (_facba ));};func _efddb (_dgcd []Result ,_abed bool )Result {var _egacf string ;if _abed {_egacf ="\u004c\u0041\u0052G\u0045";}else {_egacf ="\u0053\u004d\u0041L\u004c";};if len (_dgcd )!=2{return MakeErrorResult (_egacf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bage :=_dgcd [0];var _feed [][]Result ;switch _bage .Type {case ResultTypeArray :_feed =_bage .ValueArray ;case ResultTypeList :_feed =[][]Result {_bage .ValueList };default:return MakeErrorResult (_egacf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_feed )==0{return MakeErrorResult (_egacf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _dgcd [1].Type !=ResultTypeNumber {return MakeErrorResult (_egacf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_dfgb :=_dgcd [1].ValueNumber ;if _dfgb < 1{return MakeErrorResultType (ErrorTypeNum ,_egacf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_gcefe :=int (_dfgb );if float64 (_gcefe )!=_dfgb {return MakeErrorResultType (ErrorTypeNum ,_egacf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_abdgg :=[]float64 {};for _ ,_fedd :=range _feed {for _ ,_bfccg :=range _fedd {if _bfccg .Type ==ResultTypeNumber {_abdgg =append (_abdgg ,_bfccg .ValueNumber );};};};if _gcefe > len (_abdgg ){return MakeErrorResultType (ErrorTypeNum ,_egacf +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_edba :=_ef .MergeSort (_abdgg );if _abed {return MakeNumberResult (_edba [len (_edba )-_gcefe ]);}else {return MakeNumberResult (_edba [_gcefe -1]);};};

// Eval evaluates the binary expression using the context given.
func (_dcb BinaryExpr )String ()string {_cbc :="";switch _dcb ._f {case BinOpTypePlus :_cbc ="\u002b";case BinOpTypeMinus :_cbc ="\u002d";case BinOpTypeMult :_cbc ="\u002a";case BinOpTypeDiv :_cbc ="\u002f";case BinOpTypeExp :_cbc ="\u005e";case BinOpTypeLT :_cbc ="\u003c";case BinOpTypeGT :_cbc ="\u003e";case BinOpTypeEQ :_cbc ="\u003d";case BinOpTypeLEQ :_cbc ="\u003c\u003d";case BinOpTypeGEQ :_cbc ="\u003e\u003d";case BinOpTypeNE :_cbc ="\u003c\u003e";case BinOpTypeConcat :_cbc ="\u0026";};return _dcb ._ac .String ()+_cbc +_dcb ._ec .String ();};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbff :=args [0].AsNumber ();if _fbff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _fbff .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bcfb :=float64 (1);_edcf :=_de .Trunc (_fbff .ValueNumber );for _bagb :=_edcf ;_bagb > 1;_bagb -=2{_bcfb *=_bagb ;};return MakeNumberResult (_bcfb );};const _gbebf =57370;

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_eaabd ,_ecedc string };

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdb :=args [0];if _dfdb .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbcb :=len (_dfdb .ValueArray );for _ ,_aee :=range _dfdb .ValueArray {if len (_aee )!=_bbcb {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_ccecf (_dfdb .ValueArray ));};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_aeeg ,_bfab ,_bdeb :=_cbafa (from ,to );if _bdeb !=nil {_ab .Log .Debug (_bdeb .Error ());return NewError (_bdeb .Error ());};return PrefixRangeExpr {_cadcg :pfx ,_faag :_aeeg ,_gffdg :_bfab };};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_dbd string ,_acdc Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_acc string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_ae .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_acab int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_fdf string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_fdg string )string ;

// GetFormat returns if cell is protected.
GetLocked (_dbc string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_cbf string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_df string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_dcd ,_cfbd int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_eg string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_fac string ,_caf bool );

// NamedRange returns a named range.
NamedRange (_bgdd string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_efd ,_afd uint32 );};

// String returns a string representation of a vertical range.
func (_eddge VerticalRange )String ()string {return _eddge .verticalRangeReference ()};type cmpResult int8 ;var _afbb =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};func _ge (_ce BinOpType ,_fdb ,_aa []Result )Result {_cf :=[]Result {};for _fa :=range _fdb {_gfg :=_fdb [_fa ].AsNumber ();_edb :=_aa [_fa ].AsNumber ();if _gfg .Type !=ResultTypeNumber ||_edb .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ce {case BinOpTypePlus :_cf =append (_cf ,MakeNumberResult (_gfg .ValueNumber +_edb .ValueNumber ));case BinOpTypeMinus :_cf =append (_cf ,MakeNumberResult (_gfg .ValueNumber -_edb .ValueNumber ));case BinOpTypeMult :_cf =append (_cf ,MakeNumberResult (_gfg .ValueNumber *_edb .ValueNumber ));case BinOpTypeDiv :if _edb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cf =append (_cf ,MakeNumberResult (_gfg .ValueNumber /_edb .ValueNumber ));case BinOpTypeExp :_cf =append (_cf ,MakeNumberResult (_de .Pow (_gfg .ValueNumber ,_edb .ValueNumber )));case BinOpTypeLT :_cf =append (_cf ,MakeBoolResult (_gfg .ValueNumber < _edb .ValueNumber ));case BinOpTypeGT :_cf =append (_cf ,MakeBoolResult (_gfg .ValueNumber > _edb .ValueNumber ));case BinOpTypeEQ :_cf =append (_cf ,MakeBoolResult (_gfg .ValueNumber ==_edb .ValueNumber ));case BinOpTypeLEQ :_cf =append (_cf ,MakeBoolResult (_gfg .ValueNumber <=_edb .ValueNumber ));case BinOpTypeGEQ :_cf =append (_cf ,MakeBoolResult (_gfg .ValueNumber >=_edb .ValueNumber ));case BinOpTypeNE :_cf =append (_cf ,MakeBoolResult (_gfg .ValueNumber !=_edb .ValueNumber ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ce ));};};return MakeListResult (_cf );};

// Eval evaluates and returns a number.
func (_gdff Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_gdff ._ecgce )};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_dacd ,_fcfdd int };

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbe :=ctx .GetEpoch ();_deb ,_eef :=_bfffc (args [0].Value (),_gbe );if _eef !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_deb .Year ()));};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _dafa (args ,_dcag )};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geecb :=args [0].AsNumber ();_aefc :=args [1].AsNumber ();if _geecb .Type !=ResultTypeNumber ||_aefc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fffaf :=_de .Trunc (_geecb .ValueNumber );_bcac :=_de .Trunc (_aefc .ValueNumber );if _fffaf < _bcac {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _fffaf ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_fffaf +_bcac -1);args [1]=MakeNumberResult (_fffaf -1);return Combin (args );};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_ccgbg :=_edc .Buffer {};for _ ,_dcdgg :=range args {switch _dcdgg .Type {case ResultTypeString :_ccgbg .WriteString (_dcdgg .ValueString );case ResultTypeNumber :var _cdefgf string ;if _dcdgg .IsBoolean {if _dcdgg .ValueNumber ==0{_cdefgf ="\u0046\u0041\u004cS\u0045";}else {_cdefgf ="\u0054\u0052\u0055\u0045";};}else {_cdefgf =_dcdgg .AsString ().ValueString ;};_ccgbg .WriteString (_cdefgf );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_ccgbg .String ());};type criteriaParsed struct{_bcddd bool ;_caae float64 ;_ebcfb string ;_gbcg *criteriaRegex ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// String returns a string representation of a horizontal range.
func (_bbddc HorizontalRange )String ()string {return _bbddc .horizontalRangeReference ()};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _faecc :=0;_faecc < len (args )-1;_faecc +=2{if args [_faecc ].ValueNumber ==1{return args [_faecc +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gbeeg :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_gebcf :=args [1].ValueNumber !=0;_ecege :=_fcdag (args [2:],[]string {},_gebcf );return MakeStringResult (_bf .Join (_ecege ,_gbeeg ));};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cggd :=args [0].AsNumber ();if _cggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_de .Pi /180.0*_cggd .ValueNumber );};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _efddb (args ,true )};var _eaccg =[...]uint8 {0,17,33,49,63,78,93,108};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_ddaf :=_bf .Split (v ,"\u003a");if len (_ddaf )!=2{return nil ;};if _ddaf [0]> _ddaf [1]{_ddaf [0],_ddaf [1]=_ddaf [1],_ddaf [0];};return PrefixVerticalRange {_cafc :pfx ,_dfdbg :_ddaf [0],_fdga :_ddaf [1]};};func _efad (_bcad Result ,_fbeab ,_ggfd int )[][]Result {_bbfbd :=[][]Result {};switch _bcad .Type {case ResultTypeArray :for _ecbc ,_deeb :=range _bcad .ValueArray {if _ecbc < _fbeab {_bbfbd =append (_bbfbd ,_gfec (MakeListResult (_deeb ),_ggfd ));}else {_bbfbd =append (_bbfbd ,_gfec (MakeErrorResultType (ErrorTypeNA ,""),_ggfd ));};};case ResultTypeList :_gegag :=_gfec (_bcad ,_ggfd );for _ebc :=0;_ebc < _fbeab ;_ebc ++{_bbfbd =append (_bbfbd ,_gegag );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gebbg :=0;_gebbg < _fbeab ;_gebbg ++{_ebbda :=_gfec (_bcad ,_ggfd );_bbfbd =append (_bbfbd ,_ebbda );};};return _bbfbd ;};func _ccecf (_faad [][]Result )float64 {if len (_faad )==2{_dcfg :=_faad [0][0].AsNumber ();_bebe :=_faad [0][1].AsNumber ();_aaacb :=_faad [1][0].AsNumber ();_eccb :=_faad [1][1].AsNumber ();if _dcfg .Type !=ResultTypeNumber ||_bebe .Type !=ResultTypeNumber ||_aaacb .Type !=ResultTypeNumber ||_eccb .Type !=ResultTypeNumber {return _de .NaN ();};return _dcfg .ValueNumber *_eccb .ValueNumber -_aaacb .ValueNumber *_bebe .ValueNumber ;};_dafeg :=float64 (0);_ddcg :=float64 (1);for _decbcb :=range _faad {_dafeg +=_ddcg *_faad [0][_decbcb ].ValueNumber *_ccecf (_ebga (_faad ,_decbcb ));_ddcg *=-1;};return _dafeg ;};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_edfge :=args [0];if _edfge .Type !=ResultTypeArray &&_edfge .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bgcb :=_cgea (args [1]);_ccbfe :=0;for _ ,_cbga :=range _cdgc (_edfge ){for _ ,_dceba :=range _cbga {if _cedfb (_dceba ,_bgcb ){_ccbfe ++;};};};return MakeNumberResult (float64 (_ccbfe ));};func (_ff BinOpType )String ()string {if _ff >=BinOpType (len (_cc )-1){return _d .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ff );};return _cgd [_cc [_ff ]:_cc [_ff +1]];};var _edce =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Reference returns an invalid reference for Negate.
func (_gdaf Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _cge float64 =25569.0;const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);type evCache struct{_facc map[string ]Result ;_ccd *_dc .Mutex ;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};const _gfcd =57354;

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_afga ,_dede ,_adgd :=_ffg (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _adgd .Type ==ResultTypeError {return _adgd ;};if _dede ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _afga ==0{return MakeNumberResult (0);};_fded :=_afga < 0;if _fded {_afga =-_afga ;};_fffg :=float64 (int (_afga ));_dbbdd :=args [0].Value ();_dafe :=_bf .Split (_dbbdd ,"\u002e");_egef :=0.0;if len (_dafe )> 1{var _gbfe error ;_bdfb :=_dafe [1];_egef ,_gbfe =_bd .ParseFloat (_bdfb ,64);if _gbfe !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_fdcf :=float64 (len (_bdfb ));_egef /=_de .Pow (10,_fdcf );};_bgae :=_egef *_dede /_de .Pow (10,float64 (int (_de .Log10 (_dede )))+1)+_fffg ;if _fded {_bgae =-_bgae ;};return MakeNumberResult (_bgae );};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_ecfdb :=_bf .Split (v ,"\u003a");if len (_ecfdb )!=2{return nil ;};if _ecfdb [0]> _ecfdb [1]{_ecfdb [0],_ecfdb [1]=_ecfdb [1],_ecfdb [0];};return VerticalRange {_eaabd :_ecfdb [0],_ecedc :_ecfdb [1]};};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_fge CellRef )Update (q *_dbg .UpdateQuery )Expression {if q .UpdateCurrentSheet {_fge ._bee =_dee (_fge ._bee ,q );};return _fge ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_gcca :=len (args );if _gcca < 3||_gcca > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_daacd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agfc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fece :=args [2].ValueNumber ;_acdd :=0.0;if _gcca >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_acdd =args [3].ValueNumber ;};_bcbc :=0.0;if _gcca ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcbc =args [4].ValueNumber ;if _bcbc !=0{_bcbc =1;};};_bdcb :=_agfc *(1+_daacd *_bcbc )-_acdd *_daacd ;_bcba :=(_fece *_daacd +_agfc *(1+_daacd *_bcbc ));return MakeNumberResult (_de .Log (_bdcb /_bcba )/_de .Log (1+_daacd ));};func init (){_cffb ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};var _agfcd =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _egeca ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";var _cgfb =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func (_eabe HorizontalRange )horizontalRangeReference ()string {return _d .Sprintf ("\u0025\u0064\u003a%\u0064",_eabe ._dacd ,_eabe ._fcfdd );};const _baa ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_cfac Result )AsNumber ()Result {if _cfac .Type ==ResultTypeString {_dbea ,_ddce :=_bd .ParseFloat (_cfac .ValueString ,64);if _ddce ==nil {return MakeNumberResult (_dbea );};};if _cfac .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _cfac ;};const (_ byte =iota ;_gfggb ;_aaaff ;_afagc ;_bagcd ;_bfce ;);var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };var _aaeb string =string ([]byte {92});

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_cbgf ,_ddfe :=_fbfgf ("\u0046\u0049\u004e\u0044",args );if _ddfe .Type !=ResultTypeEmpty {return _ddfe ;};_dgggc :=_cbgf ._aegg ;if _dgggc ==""{return MakeNumberResult (1.0);};_ecbcg :=_cbgf ._dfag ;_efeb :=_cbgf ._baed ;_beffe :=1;for _fefa :=range _ecbcg {if _beffe < _efeb {_beffe ++;continue ;};_fbed :=_bf .Index (_ecbcg [_fefa :],_dgggc );if _fbed ==0{return MakeNumberResult (float64 (_beffe ));};_beffe ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _decc (_aceb []Result ,_bfeea countMode )float64 {_eefd :=0.0;for _ ,_gabac :=range _aceb {switch _gabac .Type {case ResultTypeNumber :if _bfeea ==_aadac ||(_bfeea ==_eabdd &&!_gabac .IsBoolean ){_eefd ++;};case ResultTypeList ,ResultTypeArray :_eefd +=_decc (_gabac .ListValues (),_bfeea );case ResultTypeString :if _bfeea ==_aadac {_eefd ++;};case ResultTypeEmpty :if _bfeea ==_fgcge {_eefd ++;};};};return _eefd ;};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_dac Context ,formula string )Result ;SetCache (_eabd string ,_fab Result );GetFromCache (_fgeb string )(Result ,bool );LastEvalIsRef ()bool ;};var _eed int64 =_eecc (1900,_ae .January ,1);func (_egaae *ivr )Sheet (name string )Context {return _egaae };

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// GetFilename returns an empty string for the invalid reference context.
func (_edegg *ivr )GetFilename ()string {return ""};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ggaf :=args [0];if _ggaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aeag :=int (_ggaf .ValueNumber );if _aeag < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_aeag {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_aeag ];};func (_bdb *evCache )SetCache (key string ,value Result ){_bdb ._ccd .Lock ();_bdb ._facc [key ]=value ;_bdb ._ccd .Unlock ();};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_acddd NamedRangeRef )Update (q *_dbg .UpdateQuery )Expression {return _acddd };

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_decc (args ,_eabdd ))};

// IsBool returns false for the invalid reference context.
func (_cfcf *ivr )IsBool (cellRef string )bool {return false };func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};type criteriaRegex struct{_fegc byte ;_cacg string ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_de .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fgebg :=args [0];if _fgebg .Type ==ResultTypeError ||_fgebg .Type ==ResultTypeString {return _fgebg ;};return _dacf ;};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbaa :=args [0].Type ;for _ ,_dccc :=range args {if _dccc .Type !=_dbaa {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _dbaa {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_bafec :=len (args [0].ListValues ());_ecbce :=make ([]float64 ,_bafec );for _dabb :=range _ecbce {_ecbce [_dabb ]=1.0;};for _ ,_ageg :=range args {if len (_ageg .ListValues ())!=_bafec {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _cbcc ,_ebdb :=range _ageg .ListValues (){_ebdb =_ebdb .AsNumber ();if _ebdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_ecbce [_cbcc ]=_ecbce [_cbcc ]*_ebdb .ValueNumber ;};};_dcdae :=0.0;for _ ,_abeg :=range _ecbce {_dcdae +=_abeg ;};return MakeNumberResult (_dcdae );};return MakeNumberResult (1.0);};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};func _dafa (_fffad []Result ,_cebfe rmode )Result {if len (_fffad )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfbcc :=_fffad [0].AsNumber ();if _dfbcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aebb :=_fffad [1].AsNumber ();if _aebb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_adacc :=_aebb .ValueNumber ;_eega :=_dfbcc .ValueNumber ;_deggg :=1.0;if _adacc > 0{_deggg =_de .Pow (1/10.0,_adacc );}else {_deggg =_de .Pow (10.0,-_adacc );};_eega ,_dbccf :=_de .Modf (_eega /_deggg );switch _cebfe {case _gbca :const _eafcd =0.499999999;if _dbccf >=_eafcd {_eega ++;}else if _dbccf <=-_eafcd {_eega --;};case _dcag :case _bcgc :if _dbccf > 0{_eega ++;}else if _dbccf < 0{_eega --;};};return MakeNumberResult (_eega *_deggg );};func _ee (_agd BinOpType ,_gaf ,_acd [][]Result )Result {_gf :=[][]Result {};for _bg :=range _gaf {_fd :=_ge (_agd ,_gaf [_bg ],_acd [_bg ]);if _fd .Type ==ResultTypeError {return _fd ;};_gf =append (_gf ,_fd .ValueList );};return MakeArrayResult (_gf );};var _eea =map[string ]*_db .Regexp {};const _dfbcac int =30;const _cgc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_geeee :=args [0].AsString ();if _geeee .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfffb :=_edc .Buffer {};_dbfd :=false ;_gded :=false ;_fagd :=0;for _ ,_dcefg :=range _geeee .ValueString {_fgac :=_dcefg ==' ';if _fgac {if !_dbfd {continue ;};if !_gded {_fagd ++;_bfffb .WriteRune (_dcefg );};}else {_fagd =0;_dbfd =true ;_bfffb .WriteRune (_dcefg );};_gded =_fgac ;};_bfffb .Truncate (_bfffb .Len ()-_fagd );return MakeStringResult (_bfffb .String ());};func _fcbb (_edfe string ,_decae []Result )(*parsedReplaceObject ,Result ){if len (_decae )!=4{return nil ,MakeErrorResult (_edfe +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _decae [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_edfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_agdb :=_decae [0].ValueString ;if _decae [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_fbad :=int (_decae [1].ValueNumber )-1;if _decae [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_cdce :=int (_decae [2].ValueNumber );if _decae [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_edfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_bdega :=_decae [3].ValueString ;return &parsedReplaceObject {_agdb ,_fbad ,_cdce ,_bdega },_dacf ;};const _efbd =57373;

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbdge :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ceaf :=args [2].ValueNumber ;if _ceaf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_cbdge -_egcc )/_ceaf );};

// String returns a string representation of ConstArrayExpr.
func (_aba ConstArrayExpr )String ()string {return ""};const _gdbcf =57349;func init (){_gaec =_cb .New (_cb .NewSource (_ae .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_bgfg ("\u0041\u0053\u0049\u004e",_de .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_bgfg ("\u0041\u0053\u0049\u004e",_de .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_bgfg ("\u0041\u0053\u0049\u004e",_de .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_bgfg ("\u0041\u0043\u004f\u0054",func (_ebgbe float64 )float64 {return _de .Pi /2-_de .Atan (_ebgbe )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_bgfg ("\u0041\u0043\u004fT\u0048",func (_caefe float64 )float64 {return _de .Atanh (1/_caefe )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_bgfg ("\u0041\u0053\u0049\u004e",_de .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_bgfg ("\u0041\u0053\u0049N\u0048",_de .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_bgfg ("\u0041\u0054\u0041\u004e",_de .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_bgfg ("\u0041\u0054\u0041N\u0048",_de .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_bgfg ("\u0043\u004f\u0053",_de .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_bgfg ("\u0043\u004f\u0053\u0048",_de .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_ggbe ("\u0043\u004f\u0054",_de .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_ggbe ("\u0043\u004f\u0054\u0048",_de .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_ggbe ("\u0043\u0053\u0043",_de .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_ggbe ("\u0043\u0053\u0043",_de .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_bgfg ("\u0045\u0058\u0050",_de .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_bgfg ("\u004c\u004e",_de .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_bgfg ("\u004c\u004f\u00471\u0030",_de .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_ggbe ("\u0053\u0045\u0043",_de .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_ggbe ("\u0053\u0045\u0043\u0048",_de .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_bgfg ("\u0053\u0049\u004e",_de .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_bgfg ("\u0053\u0049\u004e\u0048",_de .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_bgfg ("\u0053\u0051\u0052\u0054",_de .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_bgfg ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_afbf float64 )float64 {return _de .Sqrt (_afbf *_de .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_bgfg ("\u0054\u0041\u004e",_de .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_bgfg ("\u0054\u0041\u004e\u0048",_de .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};func _fdfd (_ddcc ,_degcgb ,_bdcbg Reference )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ddcc .Value ,_degcgb .Value ,_bdcbg .Value );};func _cdgc (_cdec Result )[][]Result {switch _cdec .Type {case ResultTypeArray :return _cdec .ValueArray ;case ResultTypeList :return [][]Result {_cdec .ValueList };default:return [][]Result {};};};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgcac :=args [0].AsNumber ();if _bgcac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ddec :=float64 (1);if _bgcac .ValueNumber < 0{_ddec =-1;};if len (args )> 1{_ceab :=args [1].AsNumber ();if _ceab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddec =_ceab .ValueNumber ;};if _ddec < 0&&_bgcac .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_de .Ceil (_bgcac .ValueNumber ));};_gcggb :=_bgcac .ValueNumber ;_gcggb ,_gdge :=_de .Modf (_gcggb /_ddec );if _gdge > 0{_gcggb ++;};return MakeNumberResult (_gcggb *_ddec );};const _dfgc =57371;

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_baff :=args [0].Ref ;for _baff .Type ==ReferenceTypeNamedRange {_baff =ctx .NamedRange (_baff .Value );};_fdbde :="";switch _baff .Type {case ReferenceTypeCell :_fdbde =_baff .Value ;case ReferenceTypeRange :_gege :=_bf .Split (_baff .Value ,"\u003a");if len (_gege )==2{_fdbde =_gege [0];};default:return MakeErrorResult (_d .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_baff .Type ));};_fddb ,_dbab :=_af .ParseCellReference (_fdbde );if _dbab !=nil {return MakeErrorResult (_d .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_dbab .Error ()));};_fgfa ,_gdca ,_dggf :=_fddb .Column ,_fddb .RowIdx ,_fddb .SheetName ;_faef :=args [1].AsNumber ();if _faef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_cbag :=args [2].AsNumber ();if _cbag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _cbfb ,_bfafe Result ;if len (args )==3{_cbfb =MakeNumberResult (1);_bfafe =MakeNumberResult (1);}else {_cbfb =args [3].AsNumber ();if _cbfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _cbfb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_bfafe =args [4].AsNumber ();if _bfafe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _bfafe .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_adab :=_af .ColumnToIndex (_fgfa );_deag :=_gdca +uint32 (_faef .ValueNumber );_fef :=_adab +uint32 (_cbag .ValueNumber );_cabe :=_deag +uint32 (_cbfb .ValueNumber );_edggd :=_fef +uint32 (_bfafe .ValueNumber );if _cbfb .ValueNumber > 0{_cabe --;}else {_cabe ++;_deag ,_cabe =_cabe ,_deag ;};if _bfafe .ValueNumber > 0{_edggd --;}else {_edggd ++;_fef ,_edggd =_edggd ,_fef ;};_fgbg :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_af .IndexToColumn (_fef ),_deag );_dabd :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_af .IndexToColumn (_edggd ),_cabe );if _dggf ==""{return _fbcbg (ctx ,ev ,_fgbg ,_dabd );}else {return _fbcbg (ctx .Sheet (_dggf ),ev ,_fgbg ,_dabd );};};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbbc :=args [0].AsNumber ();if _gbbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgbcf :=float64 (1);_fdfe :=args [1].AsNumber ();if _fdfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_dgbcf =_fdfe .ValueNumber ;if _dgbcf < 0&&_gbbc .ValueNumber > 0||_dgbcf > 0&&_gbbc .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_cfdad :=_gbbc .ValueNumber ;_cfdad ,_fage :=_de .Modf (_cfdad /_dgbcf );if _de .Trunc (_fage +0.5)> 0{_cfdad ++;};return MakeNumberResult (_cfdad *_dgbcf );};func _bbgd (_acag ,_fbegb ,_cgde ,_bdeab ,_dcca float64 )float64 {var _dgaea float64 ;_gabe :=_dcca /_cgde ;if _gabe >=1{_gabe =1;if _bdeab ==1{_dgaea =_acag ;}else {_dgaea =0;};}else {_dgaea =_acag *_de .Pow (1-_gabe ,_bdeab -1);};_adeg :=_acag *_de .Pow (1-_gabe ,_bdeab );var _ecgg float64 ;if _adeg < _fbegb {_ecgg =_dgaea -_fbegb ;}else {_ecgg =_dgaea -_adeg ;};if _ecgg < 0{_ecgg =0;};return _ecgg ;};

// GetLocked returns FALSE for the invalid reference context.
func (_cbdda *ivr )GetLocked (cellRef string )bool {return false };

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gfdf PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_eeffec :=_gfdf ._cafc .Reference (ctx ,ev );switch _eeffec .Type {case ReferenceTypeSheet :if _gfgbc (_eeffec ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eeffec .Value ));};_eeae :=_gfdf .verticalRangeReference (_eeffec .Value );if _egge ,_cegc :=ev .GetFromCache (_eeae );_cegc {return _egge ;};_fdeg :=ctx .Sheet (_eeffec .Value );_aacgg ,_feced :=_aabdc (_fdeg ,_gfdf ._dfdbg ,_gfdf ._fdga );_aegeg :=_fbcbg (_fdeg ,ev ,_aacgg ,_feced );ev .SetCache (_eeae ,_aegeg );return _aegeg ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eeffec .Type ));};};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func _ccaf (_geab ,_ddfae ,_fag ,_cdgd ,_gfab float64 ,_bbfg int )float64 {_ggaa :=_becd (_geab ,_fag ,_cdgd ,_gfab ,_bbfg );var _dca float64 ;if _ddfae ==1{if _bbfg ==1{_dca =0;}else {_dca =-_cdgd ;};}else {if _bbfg ==1{_dca =_fceg (_geab ,_ddfae -2,_ggaa ,_cdgd ,1)-_ggaa ;}else {_dca =_fceg (_geab ,_ddfae -1,_ggaa ,_cdgd ,0);};};return _dca *_geab ;};var _effd =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Eval evaluates and returns a string.
func (_feaa String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_feaa ._edaea )};const _fde ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_eede :=len (args );if _eede < 5||_eede > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efcba :=args [0].ValueNumber ;if _efcba < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceage :=args [1].ValueNumber ;if _ceage < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cead :=args [2].ValueNumber ;if _cead ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cead < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecbb :=args [3].ValueNumber ;if _ecbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebeg :=args [4].ValueNumber ;if _ecbb > _ebeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _ebeg > _cead {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_bgde :=2.0;if _eede > 5{if args [5].Type ==ResultTypeEmpty {_bgde =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgde =args [5].ValueNumber ;if _bgde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_fgb :=false ;if _eede > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fgb =args [6].ValueNumber !=0;};_adad :=0.0;_dgcg :=_de .Floor (_ecbb );_gggea :=_de .Ceil (_ebeg );if _fgb {for _dgbe :=_dgcg +1;_dgbe <=_gggea ;_dgbe ++{_deda :=_bbgd (_efcba ,_ceage ,_cead ,_dgbe ,_bgde );if _dgbe ==_dgcg +1{_deda *=_de .Min (_ebeg ,_dgcg +1)-_ecbb ;}else if _dgbe ==_gggea {_deda *=_ebeg +1-_gggea ;};_adad +=_deda ;};}else {_gegab :=_cead ;var _agfcg float64 ;if !_ebbe (_ecbb ,_de .Floor (_ecbb )){if _bgde ==1{_cfce :=_cead /2;if _ecbb > _cfce ||_ebbe (_ecbb ,_cfce ){_agfcg =_ecbb -_cfce ;_ecbb =_cfce ;_ebeg -=_agfcg ;_gegab ++;};};};if _bgde !=0{_efcba -=_efdd (_efcba ,_ceage ,_cead ,_gegab ,_ecbb ,_bgde );};_adad =_efdd (_efcba ,_ceage ,_cead ,_cead -_ecbb ,_ebeg -_ecbb ,_bgde );};return MakeNumberResult (_adad );};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};const _gaaf int =0;

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cacb :=args [0].AsString ();if _cacb .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_cacb .ValueString )));};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_aaac :=len (args );if _aaac !=6&&_aaac !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcaf ,_dfgg ,_efgfb :=_eecg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _efgfb .Type ==ResultTypeError {return _efgfb ;};_eefcb :=args [2];if _eefcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_adbg :=_eefcb .ValueNumber ;if _adbg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_degca :=args [3];if _degca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eaae :=_degca .ValueNumber ;if _eaae <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_cbafe :=args [4];if _cbafe .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_aagg :=_cbafe .ValueNumber ;if _aagg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_afecd :=args [5];if _afecd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_egeg :=float64 (int (_afecd .ValueNumber ));if !_eddg (_egeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ged :=0;if _aaac ==7&&args [6].Type !=ResultTypeEmpty {_gadc :=args [6];if _gadc .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ged =int (_gadc .ValueNumber );if !_adda (_ged ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_cabfd :=0.0;_bbbf :=0.0;_gbg :=1.0;_bgea ,_efgfb :=_becdb (_bcaf ,_dfgg ,_adbg ,_bbbf ,_aagg ,_egeg ,_ged );if _efgfb .Type ==ResultTypeError {return _efgfb ;};_gcbg ,_efgfb :=_becdb (_bcaf ,_dfgg ,_adbg ,_gbg ,_aagg ,_egeg ,_ged );if _efgfb .Type ==ResultTypeError {return _efgfb ;};_fgfcc :=(_gbg -_bbbf )*0.5;for _bfccf :=0;_bfccf < 100&&_cabfd !=_eaae ;_bfccf ++{_cabfd ,_efgfb =_becdb (_bcaf ,_dfgg ,_adbg ,_fgfcc ,_aagg ,_egeg ,_ged );if _efgfb .Type ==ResultTypeError {return _efgfb ;};if _eaae ==_bgea {return MakeNumberResult (_bbbf );}else if _eaae ==_gcbg {return MakeNumberResult (_gbg );}else if _eaae ==_cabfd {return MakeNumberResult (_fgfcc );}else if _eaae < _gcbg {_gbg *=2.0;_gcbg ,_efgfb =_becdb (_bcaf ,_dfgg ,_adbg ,_gbg ,_aagg ,_egeg ,_ged );if _efgfb .Type ==ResultTypeError {return _efgfb ;};_fgfcc =(_gbg -_bbbf )*0.5;}else {if _eaae < _cabfd {_bbbf =_fgfcc ;_bgea =_cabfd ;}else {_gbg =_fgfcc ;_gcbg =_cabfd ;};_fgfcc =_gbg -(_gbg -_bbbf )*((_eaae -_gcbg )/(_bgea -_gcbg ));};};return MakeNumberResult (_fgfcc );};

// LastRow returns 0 for the invalid reference context.
func (_dfbg *ivr )LastRow (colFrom string )int {return 0};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};var _ffdga =[...]uint8 {0,20,37,60,78,96};func _aab (_ad BinOpType ,_gef []Result ,_aad Result )Result {_gad :=[]Result {};switch _aad .Type {case ResultTypeNumber :_dg :=_aad .ValueNumber ;for _eaa :=range _gef {_gcd :=_gef [_eaa ].AsNumber ();if _gcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ad {case BinOpTypePlus :_gad =append (_gad ,MakeNumberResult (_gcd .ValueNumber +_dg ));case BinOpTypeMinus :_gad =append (_gad ,MakeNumberResult (_gcd .ValueNumber -_dg ));case BinOpTypeMult :_gad =append (_gad ,MakeNumberResult (_gcd .ValueNumber *_dg ));case BinOpTypeDiv :if _dg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gad =append (_gad ,MakeNumberResult (_gcd .ValueNumber /_dg ));case BinOpTypeExp :_gad =append (_gad ,MakeNumberResult (_de .Pow (_gcd .ValueNumber ,_dg )));case BinOpTypeLT :_gad =append (_gad ,MakeBoolResult (_gcd .ValueNumber < _dg ));case BinOpTypeGT :_gad =append (_gad ,MakeBoolResult (_gcd .ValueNumber > _dg ));case BinOpTypeEQ :_gad =append (_gad ,MakeBoolResult (_gcd .ValueNumber ==_dg ));case BinOpTypeLEQ :_gad =append (_gad ,MakeBoolResult (_gcd .ValueNumber <=_dg ));case BinOpTypeGEQ :_gad =append (_gad ,MakeBoolResult (_gcd .ValueNumber >=_dg ));case BinOpTypeNE :_gad =append (_gad ,MakeBoolResult (_gcd .ValueNumber !=_dg ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ad ));};};case ResultTypeString :_cga :=_aad .ValueString ;for _cfb :=range _gef {_eab :=_gef [_cfb ].AsString ();if _eab .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ad {case BinOpTypeLT :_gad =append (_gad ,MakeBoolResult (_eab .ValueString < _cga ));case BinOpTypeGT :_gad =append (_gad ,MakeBoolResult (_eab .ValueString > _cga ));case BinOpTypeEQ :_gad =append (_gad ,MakeBoolResult (_eab .ValueString ==_cga ));case BinOpTypeLEQ :_gad =append (_gad ,MakeBoolResult (_eab .ValueString <=_cga ));case BinOpTypeGEQ :_gad =append (_gad ,MakeBoolResult (_eab .ValueString >=_cga ));case BinOpTypeNE :_gad =append (_gad ,MakeBoolResult (_eab .ValueString !=_cga ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ad ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_gad );};const _ebddf =57372;type rmode byte ;const _dedef =57346;

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbbc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbce :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgbe :=args [2].ValueNumber ;if _cgbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbeb :=args [3].ValueNumber ;if _gbeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _gbeb > _cgbe {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_ecac :=(_fbbc -_dbce )*(_cgbe -_gbeb +1)*2;_ffee :=_cgbe *(_cgbe +1);return MakeNumberResult (_ecac /_ffee );};

// Update returns the same object as updating sheet references does not affect Number.
func (_fcfa Number )Update (q *_dbg .UpdateQuery )Expression {return _fcfa };

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_deg [][]Expression };

// Reference returns an invalid reference for FunctionCall.
func (_caeb FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_abbd ,_afb :=_gfde (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _afb .Type ==ResultTypeError {return _afb ;};return MakeNumberResult (_bfff (_abbd ._gfegf ,_abbd ._adbd ,_abbd ._dfbc ,_abbd ._cdef ));};type couponArgs struct{_gfegf float64 ;_adbd float64 ;_dfbc int ;_cdef int ;};func _cgea (_gabg Result )*criteriaParsed {_acdcc :=_gabg .Type ==ResultTypeNumber ;_ccbe :=_gabg .ValueNumber ;_cbfa :=_bf .ToLower (_gabg .ValueString );_adadd :=_cbdd (_cbfa );return &criteriaParsed {_acdcc ,_ccbe ,_cbfa ,_adadd };};type rangeIndex struct{_abdbf int ;_cfcd int ;};type plex struct{_bgfec chan *node ;_cgccbc Expression ;_ecgd string ;};const _ggfgd =57376;

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_dafc :=args [0];if _dafc .Type !=ResultTypeNumber &&_dafc .Type !=ResultTypeString &&_dafc .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_cgdg :=args [1].ValueString ;switch _dafc .Type {case ResultTypeNumber :return MakeStringResult (_ag .Number (_dafc .ValueNumber ,_cgdg ));case ResultTypeString :return MakeStringResult (_ag .String (_dafc .ValueString ,_cgdg ));case ResultTypeEmpty :return MakeStringResult (_ag .Number (0,_cgdg ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_dade :=len (args );if _dade !=5&&_dade !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adcc ,_dfab ,_acee :=_eecg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _acee .Type ==ResultTypeError {return _acee ;};_gafafe ,_acee :=_dfcd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _acee .Type ==ResultTypeError {return _acee ;};if _gafafe >=_adcc {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_caabf :=args [3].ValueNumber ;if _caabf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbeg :=args [4].ValueNumber ;if _gbeg <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_aaaf :=0;if _dade ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaaf =int (args [5].ValueNumber );if !_adda (_aaaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_abfg ,_acee :=_efg (_gafafe ,_dfab ,_aaaf );if _acee .Type ==ResultTypeError {return _acee ;};_gaga ,_acee :=_efg (_gafafe ,_adcc ,_aaaf );if _acee .Type ==ResultTypeError {return _acee ;};_cbbf ,_acee :=_efg (_adcc ,_dfab ,_aaaf );if _acee .Type ==ResultTypeError {return _acee ;};_afed :=1+_abfg *_caabf ;_afed /=_gbeg /100+_gaga *_caabf ;_afed --;_afed /=_cbbf ;return MakeNumberResult (_afed );};func (_bfcab ResultType )String ()string {if _bfcab >=ResultType (len (_eaccg )-1){return _d .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bfcab );};return _ffcc [_eaccg [_bfcab ]:_eaccg [_bfcab +1]];};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_gaec .Float64 ());};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_dfbf :=args [0];switch _dfbf .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_bfaf :=_gdd (_dfbf .ValueNumber );return MakeNumberResult (float64 (_bfaf .Month ()));case ResultTypeString :_fcgd :=_bf .ToLower (_dfbf .ValueString );if !_fec (_fcgd ){_ ,_ ,_ ,_ ,_daf ,_bef :=_bdd (_fcgd );if _bef .Type ==ResultTypeError {_bef .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _bef ;};if _daf {return MakeNumberResult (1);};};_ ,_edae ,_ ,_ ,_gga :=_dagg (_fcgd );if _gga .Type ==ResultTypeError {return _gga ;};return MakeNumberResult (float64 (_edae ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_egagfe :s }};func _gbdb (_cdb ,_adc ,_afda ,_dge int )int {if _adc > _afda {return 0;};if _ceg (_dge ){return (_afda -_adc +1)*30;};_dcde :=0;for _gab :=_adc ;_gab <=_afda ;_gab ++{_dcde +=_bda (_cdb ,_gab );};return _dcde ;};func (_fddbe *ivr )SetOffset (col ,row uint32 ){};

// Eval evaluates and returns an expression with prefix.
func (_daage PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_dcagb :=_daage ._begee .Reference (ctx ,ev );switch _dcagb .Type {case ReferenceTypeSheet :if _gfgbc (_dcagb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dcagb .Value ));};_accga :=ctx .Sheet (_dcagb .Value );return _daage ._gefff .Eval (_accga ,ev );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dcagb .Type ));};};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdbaa :=args [0];if _gdbaa .Type ==ResultTypeNumber {return _gdbaa ;};if _gdbaa .Type ==ResultTypeString {_cbaag ,_bcadd :=_bd .ParseFloat (_gdbaa .Value (),64);if _bcadd ==nil {return MakeNumberResult (_cbaag );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func _gc (_gca ,_fg [][]Result )bool {if len (_gca )!=len (_fg ){return false ;};for _be :=range _gca {if len (_gca [_be ])!=len (_fg [_be ]){return false ;};};return true ;};

// String returns a string representation of FunctionCall expression.
func (_fdgb FunctionCall )String ()string {_ddbee :=_edc .Buffer {};_ddbee .WriteString (_fdgb ._afebc );_ddbee .WriteString ("\u0028");_fcec :=len (_fdgb ._gcec )-1;for _ddgbg ,_geaee :=range _fdgb ._gcec {_ddbee .WriteString (_geaee .String ());if _ddgbg !=_fcec {_ddbee .WriteString ("\u002c");};};_ddbee .WriteString ("\u0029");return _ddbee .String ();};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abaa ,_cdff ,_cdabc :=_eecg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cdabc .Type ==ResultTypeError {return _cdabc ;};_agc ,_cdabc :=_dfcd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cdabc .Type ==ResultTypeError {return _cdabc ;};if _agc >=_abaa {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_bcg :=args [3];if _bcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_dbgda :=_bcg .ValueNumber ;if _dbgda < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_gdadf :=args [4];if _gdadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dcgcd :=_gdadf .ValueNumber ;if _dcgcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ccef :=args [5];if _ccef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gdbb :=_ccef .ValueNumber ;if _gdbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bced :=args [6];if _bced .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_addg :=float64 (int (_bced .ValueNumber ));if !_eddg (_addg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_adac :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_addb :=args [7];if _addb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_adac =int (_addb .ValueNumber );if !_adda (_adac ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_dgded ,_cdabc :=_efg (_agc ,_cdff ,_adac );if _cdabc .Type ==ResultTypeError {return _cdabc ;};_dgded *=_addg ;_bbea ,_cdabc :=_efg (_abaa ,_cdff ,_adac );if _cdabc .Type ==ResultTypeError {return _cdabc ;};_bbea *=_addg ;_acdf ,_cdabc :=_efg (_agc ,_abaa ,_adac );if _cdabc .Type ==ResultTypeError {return _cdabc ;};_acdf *=_addg ;_gecg :=_gdbb +_dgded *100*_dbgda /_addg ;_gecg /=_bbea *_dcgcd /_addg +1;_gecg -=_acdf *100*_dbgda /_addg ;return MakeNumberResult (_gecg );};func (_gdef *noCache )SetCache (key string ,value Result ){};func NewLexer ()*Lexer {return &Lexer {_cadc :make (chan *node )}};var _cfccg =[...]int {1};func _bedb (_dbca _ae .Time )_ae .Time {_dbca =_dbca .UTC ();return _ae .Date (_dbca .Year (),_dbca .Month (),_dbca .Day (),_dbca .Hour (),_dbca .Minute (),_dbca .Second (),_dbca .Nanosecond (),_ae .Local );};func (_bebdf PrefixHorizontalRange )horizontalRangeReference (_dbbfa string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_dbbfa ,_bebdf ._ecbag ,_bebdf ._eagg );};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_fdeb :=len (args );if _fdeb !=3&&_fdeb !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aaba ,_bfad :=_ddgc (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _bfad .Type ==ResultTypeError {return _bfad ;};_caff ,_bfad :=_ddgc (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _bfad .Type ==ResultTypeError {return _bfad ;};_fgegb ,_bfad :=_ddgc (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _bfad .Type ==ResultTypeError {return _bfad ;};_dgfbd :=0;if _fdeb ==3{return MakeStringResult (_bf .Replace (_aaba ,_caff ,_fgegb ,-1));}else {_ebgab ,_dgbde :=_gefag (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _dgbde .Type ==ResultTypeError {return _dgbde ;};_dgfbd =int (_ebgab );if _dgfbd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_bedgc :=_aaba ;_efaea :=_dgfbd ;_efdf :=-1;_fegab :=len (_caff );_bafd :=0;for {_efaea --;_fbgbb :=_bf .Index (_bedgc ,_caff );if _fbgbb ==-1{_efdf =-1;break ;}else {_efdf =_fbgbb +_bafd ;if _efaea ==0{break ;};_agfcf :=_fegab +_fbgbb ;_bafd +=_agfcf ;_bedgc =_bedgc [_agfcf :];};};if _efdf ==-1{return MakeStringResult (_aaba );}else {_dgga :=_aaba [:_efdf ];_gcacg :=_aaba [_efdf +_fegab :];return MakeStringResult (_dgga +_fgegb +_gcacg );};};};func _dfcd (_eaf Result ,_gdbe ,_fccgb string )(float64 ,Result ){var _eafc float64 ;switch _eaf .Type {case ResultTypeNumber :_eafc =float64 (int (_eaf .ValueNumber ));case ResultTypeString :_dggg :=DateValue ([]Result {_eaf });if _dggg .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_gdbe +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_fccgb );};_eafc =_dggg .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_fccgb );};if _eafc < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_gdbe +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _eafc ,_dacf ;};func (_dcbbg *yyParserImpl )Lookahead ()int {return _dcbbg ._accg };

// String returns a string representation of a horizontal range with prefix.
func (_cddac PrefixHorizontalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_cddac ._abac .String (),_cddac ._ecbag ,_cddac ._eagg );};func (_bagbe VerticalRange )verticalRangeReference ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_bagbe ._eaabd ,_bagbe ._ecedc );};

// GetEpoch returns a null time object for the invalid reference context.
func (_fdff *ivr )GetEpoch ()_ae .Time {return _ae .Time {}};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_decc (args ,_aadac ))};func init (){_bafa ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};func _fccd (_ebbf ,_gceee []string )[]string {for _ ,_bcacd :=range _gceee {_ebbf =append (_ebbf ,_bcacd );};return _ebbf ;};var _gggg ,_bfef ,_gdeba ,_febg ,_dgbcb ,_faefc *_db .Regexp ;func (_bgad ReferenceType )String ()string {if _bgad >=ReferenceType (len (_ffdga )-1){return _d .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bgad );};return _egeca [_ffdga [_bgad ]:_ffdga [_bgad +1]];};func (_gabcf tokenType )String ()string {return _dcad (int (_gabcf ))};func _efae (_acfg ,_befe _ae .Time ,_fccg int )float64 {if _acfg .After (_befe ){_acfg ,_befe =_befe ,_acfg ;};_caa :=0;_aaad ,_bfb ,_gdce :=_acfg .Date ();_egdb ,_ebgb ,_bce :=_befe .Date ();_ceb ,_fdde :=int (_bfb ),int (_ebgb );_ebad ,_aggd :=_ggg (_aaad ,_ceb ,_gdce ,_fccg ),_ggg (_egdb ,_fdde ,_bce ,_fccg );if !_ceg (_fccg ){return _acf (_egdb ,_fdde ,_aggd )-_acf (_aaad ,_ceb ,_ebad );};if _fccg ==0{if (_ceb ==2||_ebad < 30)&&_bce ==31{_aggd =31;}else if _fdde ==2&&_aggd ==_bda (_egdb ,_fdde ){_aggd =_bda (_egdb ,2);};}else {if _ceb ==2&&_ebad ==30{_ebad =_bda (_aaad ,2);};if _fdde ==2&&_aggd ==30{_aggd =_bda (_egdb ,2);};};if _aaad < _egdb ||(_aaad ==_egdb &&_ceb < _fdde ){_caa =30-_ebad +1;_gdce =1;_ebad =1;_dacc :=_ae .Date (_aaad ,_ae .Month (_ceb ),_gdce ,0,0,0,0,_ae .UTC ).AddDate (0,1,0);if _dacc .Year ()< _egdb {_caa +=_gbdb (_dacc .Year (),int (_dacc .Month ()),12,_fccg );_dacc =_dacc .AddDate (0,13-int (_dacc .Month ()),0);_caa +=_fbb (_dacc .Year (),_egdb -1,_fccg );};_caa +=_gbdb (_egdb ,int (_dacc .Month ()),_fdde -1,_fccg );_dacc =_dacc .AddDate (0,_fdde -int (_dacc .Month ()),0);_ceb =_dacc .Day ();};_caa +=_aggd -_ebad ;if _caa > 0{return float64 (_caa );}else {return 0;};};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbcb :=args [0];switch _gbcb .Type {case ResultTypeError :return _gbcb ;case ResultTypeNumber ,ResultTypeString :return _dcab (args [0]);case ResultTypeList :_ceafa :=_gbcb .ValueList ;_dfcda :=[]Result {};for _ ,_gebdg :=range _ceafa {_dcbde :=_dcab (_gebdg );if _dcbde .Type ==ResultTypeError {return _dcbde ;};_dfcda =append (_dfcda ,_dcbde );};return MakeListResult (_dfcda );case ResultTypeArray :_fbbed :=_gbcb .ValueArray ;_bfbf :=[][]Result {};for _ ,_cabef :=range _fbbed {_facd :=[]Result {};for _ ,_bfeb :=range _cabef {_cbcd :=_dcab (_bfeb );if _cbcd .Type ==ResultTypeError {return _cbcd ;};_facd =append (_facd ,_cbcd );};_bfbf =append (_bfbf ,_facd );};return MakeArrayResult (_bfbf );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Match implements the MATCH function.
func Match (args []Result )Result {_edeb :=len (args );if _edeb !=2&&_edeb !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edag :=1;if _edeb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gcbf :=args [2].ValueNumber ;if _gcbf ==-1||_gcbf ==0{_edag =int (_gcbf );};};_ggee :=args [1];var _egaa []Result ;switch _ggee .Type {case ResultTypeList :_egaa =_ggee .ValueList ;case ResultTypeArray :_cbgc :=_ggee .ValueArray ;for _ ,_bbda :=range _cbgc {if len (_bbda )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_egaa =append (_egaa ,_bbda [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_gacee :=_cgea (args [0]);switch _edag {case 0:for _cbec ,_dgdd :=range _egaa {if _fbgee (_dgdd ,_gacee ){return MakeNumberResult (float64 (_cbec +1));};};case -1:for _cgfad :=0;_cgfad < len (_egaa );_cgfad ++{if _fbgee (_egaa [_cgfad ],_gacee ){return MakeNumberResult (float64 (_cgfad +1));};if _gacee ._bcddd &&(_egaa [_cgfad ].ValueNumber < _gacee ._caae ){if _cgfad ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cgfad ));};};case 1:for _bggb :=0;_bggb < len (_egaa );_bggb ++{if _fbgee (_egaa [_bggb ],_gacee ){return MakeNumberResult (float64 (_bggb +1));};if _gacee ._bcddd &&(_egaa [_bggb ].ValueNumber > _gacee ._caae ){if _bggb ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_bggb ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_cdaf PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_bcaabf :=_cdaf ._cadcg .Reference (ctx ,ev );_acbg :=_cdaf ._faag .Reference (ctx ,ev );_bddb :=_cdaf ._gffdg .Reference (ctx ,ev );switch _bcaabf .Type {case ReferenceTypeSheet :if _gfgbc (_bcaabf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bcaabf .Value ));};_gfba :=_fdfd (_bcaabf ,_acbg ,_bddb );if _acbg .Type ==ReferenceTypeCell &&_bddb .Type ==ReferenceTypeCell {if _fead ,_cbebd :=ev .GetFromCache (_gfba );_cbebd {return _fead ;}else {_eegd :=_fbcbg (ctx .Sheet (_bcaabf .Value ),ev ,_acbg .Value ,_bddb .Value );ev .SetCache (_gfba ,_eegd );return _eegd ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gfba );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bcaabf .Type ));};};var _gee =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};type Expression interface{Eval (_dfb Context ,_gfeg Evaluator )Result ;Reference (_ecb Context ,_fgg Evaluator )Reference ;String ()string ;Update (_ege *_dbg .UpdateQuery )Expression ;};type yyParserImpl struct{_ddag yySymType ;_abafg [_dafbd ]yySymType ;_accg int ;};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ac :lhs ,_ec :rhs ,_f :op };};

// String returns a string representation of a named range.
func (_aeaa NamedRangeRef )String ()string {return _aeaa ._adacf };

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _acff (args ,true )};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_dggga :=len (args );if _dggga ==0||_dggga > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_gfgb :=_cdgc (args [0]);_dged :=[]float64 {};for _ ,_decbf :=range _gfgb {for _ ,_bcaa :=range _decbf {if _bcaa .Type ==ResultTypeNumber &&!_bcaa .IsBoolean {_dged =append (_dged ,_bcaa .ValueNumber );};};};_caab :=len (_dged );if len (_dged )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_daabd :=0.1;if _dggga ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_daabd =args [1].ValueNumber ;if _daabd <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_abdd :=[]float64 {};for _gec :=0;_gec < _caab ;_gec ++{if _gec ==0{_abdd =append (_abdd ,0);}else {_abdd =append (_abdd ,_abdd [_gec -1]+365);};};return _fgaf (_dged ,_abdd ,_daabd );};func _becd (_bdf ,_bdfc ,_caaa ,_ccdd float64 ,_bffb int )float64 {var _dcec float64 ;if _bdf ==0{_dcec =(_caaa +_ccdd )/_bdfc ;}else {_cef :=_de .Pow (1+_bdf ,_bdfc );if _bffb ==1{_dcec =(_ccdd *_bdf /(_cef -1)+_caaa *_bdf /(1-1/_cef ))/(1+_bdf );}else {_dcec =_ccdd *_bdf /(_cef -1)+_caaa *_bdf /(1-1/_cef );};};return -_dcec ;};func _fcc (_ebee ,_ecbf ,_aeg int )bool {if _ecbf < 1||_ecbf > 12{return false ;};if _aeg < 1{return false ;};return _aeg <=_bda (_ebee ,_ecbf );};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_cefa :=MakeNumberResult (0);for _ ,_eafg :=range args {_eafg =_eafg .AsNumber ();switch _eafg .Type {case ResultTypeNumber :_cefa .ValueNumber +=_eafg .ValueNumber *_eafg .ValueNumber ;case ResultTypeList ,ResultTypeArray :_adfb :=SumSquares (_eafg .ListValues ());if _adfb .Type !=ResultTypeNumber {return _adfb ;};_cefa .ValueNumber +=_adfb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _eafg ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_eafg .Type ));};};return _cefa ;};func _fda (_dgfd ,_beef int64 )float64 {return float64 (int (0.5+float64 ((_beef -_dgfd )/86400)))};func _fgeg (_bffa string )bool {for _ ,_deca :=range _dad {_bacc :=_deca .FindStringSubmatch (_bffa );if len (_bacc )> 1{return true ;};};return false ;};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_bggg .Lock ();defer _bggg .Unlock ();if _cgbee ,_fcba :=_ffcdd [name ];_fcba {return _cgbee ;};return nil ;};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_begee Expression ;_gefff Expression ;};

// LastColumn returns empty string for the invalid reference context.
func (_bbbd *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func _fcfe (_defee []Result )Result {_gfbbf :=_defee [0].ValueList ;_dfbe :=len (_gfbbf );switch len (_defee ){case 1:_gebd :=[]Result {};for _ ,_edfc :=range _gfbbf {_gebd =append (_gebd ,MakeBoolResult (_edfc .ValueNumber !=0));};return MakeListResult (_gebd );case 2:_ebdg :=_defee [1];switch _ebdg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_bfbb :=[]Result {};for _ ,_daeb :=range _gfbbf {var _cafb Result ;if _daeb .ValueNumber ==0{_cafb =MakeBoolResult (false );}else {_cafb =_ebdg ;};_bfbb =append (_bfbb ,_cafb );};return MakeListResult (_bfbb );case ResultTypeList :_decaf :=_gfec (_ebdg ,_dfbe );_cfcg :=[]Result {};for _fgcb ,_gbgc :=range _gfbbf {var _fabcg Result ;if _gbgc .ValueNumber ==0{_fabcg =MakeBoolResult (false );}else {_fabcg =_decaf [_fgcb ];};_cfcg =append (_cfcg ,_fabcg );};return MakeListResult (_cfcg );case ResultTypeArray :_cagcc :=_efad (_ebdg ,len (_ebdg .ValueArray ),_dfbe );_eaff :=[][]Result {};for _ ,_dcgcb :=range _cagcc {_edbf :=[]Result {};for _bcfd ,_cee :=range _gfbbf {var _dgbbd Result ;if _cee .ValueNumber ==0{_dgbbd =MakeBoolResult (false );}else {_dgbbd =_dcgcb [_bcfd ];};_edbf =append (_edbf ,_dgbbd );};_eaff =append (_eaff ,_edbf );};return MakeArrayResult (_eaff );};case 3:_abeb :=_defee [1];_agcf :=_defee [2];_gebbe :=_ecdd (_abeb );_bggd :=_ecdd (_agcf );if _gebbe &&_bggd {_gebcd :=[]Result {};for _ ,_edde :=range _gfbbf {var _cgccf Result ;if _edde .ValueNumber ==0{_cgccf =_agcf ;}else {_cgccf =_abeb ;};_gebcd =append (_gebcd ,_cgccf );};return MakeListResult (_gebcd );};if _abeb .Type !=ResultTypeArray &&_agcf .Type !=ResultTypeArray {_efbg :=_gfec (_abeb ,_dfbe );_adgcf :=_gfec (_agcf ,_dfbe );_cffa :=[]Result {};for _fddfa ,_cgga :=range _gfbbf {var _aege Result ;if _cgga .ValueNumber ==0{_aege =_adgcf [_fddfa ];}else {_aege =_efbg [_fddfa ];};_cffa =append (_cffa ,_aege );};return MakeListResult (_cffa );};_bgbb ,_gfdeac :=len (_abeb .ValueArray ),len (_agcf .ValueArray );_ebce ,_cdfe :=_bgbb ,_gfdeac ;if _gfdeac > _ebce {_ebce ,_cdfe =_cdfe ,_ebce ;};_bccbb :=_efad (_abeb ,_ebce ,_dfbe );_fefd :=_efad (_agcf ,_ebce ,_dfbe );_cdfcd :=[][]Result {};for _fbfb :=0;_fbfb < _ebce ;_fbfb ++{_feedd :=[]Result {};for _edgbd ,_ebba :=range _gfbbf {var _edbd Result ;if _ebba .ValueNumber ==0{if _fbfb < _gfdeac {_edbd =_fefd [_fbfb ][_edgbd ];}else {_edbd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _fbfb < _bgbb {_edbd =_bccbb [_fbfb ][_edgbd ];}else {_edbd =MakeErrorResultType (ErrorTypeNA ,"");};};_feedd =append (_feedd ,_edbd );};_cdfcd =append (_cdfcd ,_feedd );};return MakeArrayResult (_cdfcd );};return MakeErrorResult ("");};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_afdg :=len (args );if (_afdg !=2&&_afdg !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fad :=0;if _afdg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fad =int (args [2].ValueNumber );if !_adda (_fad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfgf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dacb :=args [1].ValueNumber ;_gfff ,_dacbf :=_efg (_dfgf ,_dacb ,_fad );if _dacbf .Type ==ResultTypeError {return _dacbf ;};return MakeNumberResult (_gfff );};const _ecgb =57355;

// Eval evaluates and returns the result of a constant array expression.
func (_dgd ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_bbb :=[][]Result {};for _ ,_da :=range _dgd ._deg {_ddf :=[]Result {};for _ ,_ded :=range _da {_ddf =append (_ddf ,_ded .Eval (ctx ,ev ));};_bbb =append (_bbb ,_ddf );};return MakeArrayResult (_bbb );};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_abae :=args [0].ValueNumber ;if _abae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bdbfc :=float64 (int (args [1].ValueNumber ));if _bdbfc < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_de .Pow ((1+_abae /_bdbfc ),_bdbfc )-1);};

// HasFormula returns FALSE for the invalid reference context.
func (_gafc *ivr )HasFormula (cellRef string )bool {return false };var _ccea =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};var _bdfg =false ;

// Update updates references in the PrefixExpr after removing a row/column.
func (_adgg PrefixExpr )Update (q *_dbg .UpdateQuery )Expression {_aacg :=_adgg ;_cfefa :=_adgg ._begee .String ();if _cfefa ==q .SheetToUpdate {_gfdb :=*q ;_gfdb .UpdateCurrentSheet =true ;_aacg ._gefff =_adgg ._gefff .Update (&_gfdb );};return _aacg ;};

// Eval evaluates and returns the result of an error expression.
func (_fff Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_fff ._ebg )};func _efg (_ecgf ,_adb float64 ,_daad int )(float64 ,Result ){_fcce ,_gdaa :=_gdd (_ecgf ),_gdd (_adb );_gac :=_fcce .Unix ();_cfa :=_gdaa .Unix ();if _gac ==_cfa {return 0,_dacf ;};_abdb ,_eccc ,_bgbd :=_fcce .Date ();_aafe ,_age ,_cfe :=_gdaa .Date ();_ffb ,_cbd :=int (_eccc ),int (_age );var _ddbd ,_eeafg float64 ;switch _daad {case 0:if _bgbd ==31{_bgbd --;};if _bgbd ==30&&_cfe ==31{_cfe --;}else if _bbfa :=_gegg (_abdb );_ffb ==2&&((_bbfa &&_bgbd ==29)||(!_bbfa &&_bgbd ==28)){_bgbd =30;if _ebf :=_gegg (_aafe );_cbd ==2&&((_ebf &&_cfe ==29)||(!_ebf &&_cfe ==28)){_cfe =30;};};_ddbd =float64 ((_aafe -_abdb )*360+(_cbd -_ffb )*30+(_cfe -_bgbd ));_eeafg =360;case 1:_ddbd =_adb -_ecgf ;_gag :=_abdb !=_aafe ;if _gag &&(_aafe !=_abdb +1||_ffb < _cbd ||(_ffb ==_cbd &&_bgbd < _cfe )){_gcc :=0;for _cbdg :=_abdb ;_cbdg <=_aafe ;_cbdg ++{_gcc +=_gdg (_cbdg ,1);};_eeafg =float64 (_gcc )/float64 (_aafe -_abdb +1);}else {if !_gag &&_gegg (_abdb ){_eeafg =366;}else {if _gag &&((_gegg (_abdb )&&(_ffb < 2||(_ffb ==2&&_bgbd <=29)))||(_gegg (_aafe )&&(_cbd > 2||(_cbd ==2&&_cfe ==29)))){_eeafg =366;}else {_eeafg =365;};};};case 2:_ddbd =_adb -_ecgf ;_eeafg =360;case 3:_ddbd =_adb -_ecgf ;_eeafg =365;case 4:if _bgbd ==31{_bgbd --;};if _cfe ==31{_cfe --;};_ddbd =float64 ((_aafe -_abdb )*360+(_cbd -_ffb )*30+(_cfe -_bgbd ));_eeafg =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _ddbd /_eeafg ,_dacf ;};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_ddfa ,_agf :=_abgf (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _agf .Type ==ResultTypeError {return _agf ;};_cbae :=_ddfa ._fbd ;_efdc :=_ddfa ._cbea ;_gfc :=_ddfa ._deade ;_dgdb :=_ddfa ._dbdg ;_cgce :=_ddfa ._accae ;_def :=_ddfa ._bfec ;if _def >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_dafg :=_ddfa ._deba ;_efe :=1.0/_def ;_ddge :=2.5;if _efe < 3{_ddge =1;}else if _efe < 5{_ddge =1.5;}else if _efe <=6{_ddge =2;};_def *=_ddge ;_fgfg ,_cdad :=_efg (_efdc ,_gfc ,_dafg );if _cdad .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_egfgb :=_defd (_fgfg *_def *_cbae );_cbae -=_egfgb ;_ffbc :=_cbae -_dgdb ;for _fgaa :=0;_fgaa < _cgce ;_fgaa ++{_egfgb =_defd (_def *_cbae );_ffbc -=_egfgb ;if _ffbc < 0{switch _cgce -_fgaa {case 0:case 1:return MakeNumberResult (_defd (_cbae *0.5));default:return MakeNumberResult (0);};};_cbae -=_egfgb ;};return MakeNumberResult (_egfgb );};func _ddgc (_efba Result ,_dffgd ,_ebgfb string )(string ,Result ){switch _efba .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _efba .Value (),_dacf ;default:return "",MakeErrorResult (_dffgd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ebgfb +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgfb :=args [0].ValueNumber ;if _dgfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fedb :=args [1].ValueNumber ;if _fedb <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdbee :=args [2].ValueNumber ;if _gdbee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_de .Log10 (_gdbee )-_de .Log10 (_fedb ))/_de .Log10 (1+_dgfb ));};func _gfde (_bgdda []Result ,_acabb string )(*couponArgs ,Result ){_daaf :=len (_bgdda );if _daaf !=3&&_daaf !=4{return nil ,MakeErrorResult (_acabb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfca ,_agdd ,_add :=_eecg (_bgdda [0],_bgdda [1],_acabb );if _add .Type ==ResultTypeError {return nil ,_add ;};if _bgdda [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_acabb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdef :=_bgdda [2].ValueNumber ;if !_eddg (_bdef ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_acabb );};_aec :=0;if _daaf ==4&&_bgdda [3].Type !=ResultTypeEmpty {if _bgdda [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_acabb +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aec =int (_bgdda [3].ValueNumber );if !_adda (_aec ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_acabb );};};return &couponArgs {_bfca ,_agdd ,int (_bdef ),_aec },_dacf ;};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdeg :=args [0].AsString ();if _gdeg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_gdeg .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_gdeg .ValueString [0]));};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_bf .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_edaea :v };};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eceg :=args [0].AsNumber ();if _eceg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_de .Pi *_eceg .ValueNumber );};

// Update updates references in the Range after removing a row/column.
func (_cgega Range )Update (q *_dbg .UpdateQuery )Expression {_dgef :=_cgega ;if q .UpdateCurrentSheet {_dgef ._ggded =_cgega ._ggded .Update (q );_dgef ._eebeb =_cgega ._eebeb .Update (q );};return _dgef ;};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_geeec Context ,_gfggbb Evaluator ,_debg []Result )Result ;

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eafcg ,_fbac ,_efee :=_eecg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _efee .Type ==ResultTypeError {return _efee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgdf :=_fbac -_eafcg ;if _fgdf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_fgad :=args [2].ValueNumber ;if _fgad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_fgad )/(360-_fgad *_fgdf ));};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_adacf string };const (_eabdd countMode =iota ;_aadac ;_fgcge ;);

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baaf :=true ;for _ ,_afecdc :=range args {_afecdc =_afecdc .AsNumber ();switch _afecdc .Type {case ResultTypeList ,ResultTypeArray :_geaf :=And (_afecdc .ListValues ());if _geaf .Type ==ResultTypeError {return _geaf ;};if _geaf .ValueNumber ==0{_baaf =false ;};case ResultTypeNumber :if _afecdc .ValueNumber ==0{_baaf =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _afecdc ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_baaf );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fba *defEval )LastEvalIsRef ()bool {return _fba ._dff };

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_adacf :v }};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dgbf :=args [0];switch _dgbf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_cfd :=_gdd (_dgbf .ValueNumber );return MakeNumberResult (float64 (_cfd .Day ()));case ResultTypeString :_gge :=_bf .ToLower (_dgbf .ValueString );if !_fec (_gge ){_ ,_ ,_ ,_ ,_bfc ,_ggb :=_bdd (_gge );if _ggb .Type ==ResultTypeError {_ggb .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _ggb ;};if _bfc {return MakeNumberResult (0);};};_ ,_ ,_bdee ,_ ,_cbac :=_dagg (_gge );if _cbac .Type ==ResultTypeError {return _cbac ;};return MakeNumberResult (float64 (_bdee ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};var _bfbe =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbaff :=args [0].AsString ();if _fbaff .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbae :=_edc .Buffer {};for _ ,_defcg :=range _fbaff .ValueString {if _g .IsPrint (_defcg ){_dbae .WriteRune (_defcg );};};return MakeStringResult (_dbae .String ());};

// Reference returns a string reference value to a sheet.
func (_ceeef SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_ceeef ._egagfe };};func _aecf (_fabfd []Result )[]rangeIndex {_dffaa :=[]rangeIndex {};_gffg :=len (_fabfd );for _cgcg :=0;_cgcg < _gffg -1;_cgcg +=2{_eagff :=[]rangeIndex {};_ccgf :=_cdgc (_fabfd [_cgcg ]);_acfca :=_cgea (_fabfd [_cgcg +1]);if _cgcg ==0{for _gggag ,_gdgg :=range _ccgf {for _dbgdc ,_edbgc :=range _gdgg {if _cedfb (_edbgc ,_acfca ){_eagff =append (_eagff ,rangeIndex {_gggag ,_dbgdc });};};};}else {for _ ,_agddf :=range _dffaa {_feff :=_ccgf [_agddf ._abdbf ][_agddf ._cfcd ];if _cedfb (_feff ,_acfca ){_eagff =append (_eagff ,_agddf );};};};if len (_eagff )==0{return []rangeIndex {};};_dffaa =_eagff [:];};return _dffaa ;};func _ebga (_gaag [][]Result ,_geee int )[][]Result {_cggb :=[][]Result {};for _bfbcd :=range _gaag {if _bfbcd ==0{continue ;};_ffgfa :=[]Result {};for _bdcd :=range _gaag {if _bdcd ==_geee {continue ;};_ffgfa =append (_ffgfa ,_gaag [_bfbcd ][_bdcd ]);};_cggb =append (_cggb ,_ffgfa );};return _cggb ;};

// Reference returns a string reference value to a vertical range.
func (_cadf VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_cadf .verticalRangeReference ()};};var _dfafc =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};func _cecf (_agdda []Result ,_cbg string )(*cumulArgs ,Result ){if len (_agdda )!=6{return nil ,MakeErrorResult (_cbg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _agdda [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_acdcg :=_agdda [0].ValueNumber ;if _acdcg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agdda [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bfcf :=_agdda [1].ValueNumber ;if _bfcf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _agdda [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbg +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdgd :=_agdda [2].ValueNumber ;if _fdgd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agdda [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbg +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cgfgc :=_agdda [3].ValueNumber ;if _cgfgc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agdda [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cbg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdaaf :=_agdda [4].ValueNumber ;if _gdaaf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _gdaaf < _cgfgc {return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _gdaaf > _bfcf {return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_dbe :=int (_agdda [5].ValueNumber );if _dbe !=0&&_dbe !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_cbg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_acdcg ,_bfcf ,_fdgd ,_cgfgc ,_gdaaf ,_dbe },_dacf ;};var (_cbgb =0;_ebcc =false ;);func _geb (_cdg BinOpType ,_fc [][]Result ,_dd Result )Result {_ea :=[][]Result {};for _eae :=range _fc {_bc :=_aab (_cdg ,_fc [_eae ],_dd );if _bc .Type ==ResultTypeError {return _bc ;};_ea =append (_ea ,_bc .ValueList );};return MakeArrayResult (_ea );};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_gfaa ,_cag :=_gfde (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _cag .Type ==ResultTypeError {return _cag ;};_dcbf :=_gfaa ._dfbc ;_bfe :=_gfaa ._cdef ;_gadbb ,_cag :=_fae (_gfaa ._gfegf ,_gfaa ._adbd ,_dcbf ,_bfe );if _cag .Type ==ResultTypeError {return _cag ;};return MakeNumberResult (_gadbb );};func _ggg (_cad ,_abc ,_cdc ,_acca int )int {if !_ceg (_acca ){return _cdc ;};_gega :=_cdc ;_ecfg :=_bda (_cad ,_abc );if _gega > 30||_cdc >=_ecfg ||_gega >=_ecfg {_gega =30;};return _gega ;};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ffacb :=args [0].AsNumber ();_beae :=args [1].AsNumber ();if _ffacb .Type !=ResultTypeNumber ||_beae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _beae .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_edcc ,_feaf :=_de .Modf (_ffacb .ValueNumber /_beae .ValueNumber );if _feaf < 0{_edcc --;};return MakeNumberResult (_ffacb .ValueNumber -_beae .ValueNumber *_edcc );};

// Update updates the FunctionCall references after removing a row/column.
func (_gfdcf FunctionCall )Update (q *_dbg .UpdateQuery )Expression {_bebd :=[]Expression {};for _ ,_ffbdd :=range _gfdcf ._gcec {_bgdfc :=_ffbdd .Update (q );_bebd =append (_bebd ,_bgdfc );};return FunctionCall {_afebc :_gfdcf ._afebc ,_gcec :_bebd };};func _edbbe (_gcccc float64 )float64 {_aead :=float64 (1);for _ebde :=float64 (2);_ebde <=_gcccc ;_ebde ++{_aead *=_ebde ;};return _aead ;};var _ggbgd []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Update updates references in the VerticalRange after removing a row/column.
func (_dgad VerticalRange )Update (q *_dbg .UpdateQuery )Expression {if q .UpdateType ==_dbg .UpdateActionRemoveColumn {_gbec :=_dgad ;if q .UpdateCurrentSheet {_afab :=q .ColumnIdx ;_gbec ._eaabd =_ca (_dgad ._eaabd ,_afab );_gbec ._ecedc =_ca (_dgad ._ecedc ,_afab );};return _gbec ;};return _dgad ;};func _bdd (_cgac string )(int ,int ,float64 ,bool ,bool ,Result ){_daag :="";_bdeaa :=[]string {};for _befa ,_bbd :=range _eea {_bdeaa =_bbd .FindStringSubmatch (_cgac );if len (_bdeaa )> 1{_daag =_befa ;break ;};};if _daag ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_cde :=_bdeaa [1]=="";_bdeaa =_bdeaa [49:];_ecff :=len (_bdeaa );_acfbb :=_bdeaa [_ecff -1];_fffa :=_acfbb =="\u0061\u006d";_dgf :=_acfbb =="\u0070\u006d";var _dgc ,_egfg int ;var _ecdca float64 ;var _bccbg error ;switch _daag {case "\u0068\u0068":_dgc ,_bccbg =_bd .Atoi (_bdeaa [0]);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_egfg =0;_ecdca =0;case "\u0068\u0068\u003am\u006d":_dgc ,_bccbg =_bd .Atoi (_bdeaa [0]);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_egfg ,_bccbg =_bd .Atoi (_bdeaa [2]);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_ecdca =0;case "\u006d\u006d\u003as\u0073":_dgc =0;_egfg ,_bccbg =_bd .Atoi (_bdeaa [0]);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_ecdca ,_bccbg =_bd .ParseFloat (_bdeaa [2],64);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_dgc ,_bccbg =_bd .Atoi (_bdeaa [0]);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_egfg ,_bccbg =_bd .Atoi (_bdeaa [2]);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};_ecdca ,_bccbg =_bd .ParseFloat (_bdeaa [4],64);if _bccbg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};};if _egfg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};if _fffa ||_dgf {if _dgc > 12||_ecdca >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );}else if _dgc ==12{_dgc =0;};}else if _dgc >=24||_ecdca >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cgc );};return _dgc ,_egfg ,_ecdca ,_dgf ,_cde ,_dacf ;};

// Reference returns an invalid reference for String.
func (_ffdaa String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _gaec *_cb .Rand ;const _adfd =57359;

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_fddef ,_abcf :=_eebd (args ,true );if _abcf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_fddef /_abcf );};func _ceg (_gdaag int )bool {return _gdaag ==0||_gdaag ==4};func _bafc (_ddbdg []Result ,_eafef bool )Result {_edcff :="\u004d\u0041\u0058";if _eafef {_edcff ="\u004d\u0041\u0058\u0041";};if len (_ddbdg )==0{return MakeErrorResult (_edcff +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfaa :=-_de .MaxFloat64 ;for _ ,_gdagf :=range _ddbdg {switch _gdagf .Type {case ResultTypeNumber :if (_eafef ||!_gdagf .IsBoolean )&&_gdagf .ValueNumber > _dfaa {_dfaa =_gdagf .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_agcb :=_bafc (_gdagf .ListValues (),_eafef );if _agcb .ValueNumber > _dfaa {_dfaa =_agcb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_faga :=0.0;if _eafef {_faga =_gdagf .AsNumber ().ValueNumber ;};if _faga > _dfaa {_dfaa =_faga ;};default:_ab .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_edcff +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gdagf .Type );};};if _dfaa ==-_de .MaxFloat64 {_dfaa =0;};return MakeNumberResult (_dfaa );};

// Update updates references in the Negate after removing a row/column.
func (_fcadg Negate )Update (q *_dbg .UpdateQuery )Expression {return Negate {_dgea :_fcadg ._dgea .Update (q )};};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};var _dacf Result =MakeEmptyResult ();

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_fbda :=len (args );if _fbda !=2&&_fbda !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ffcd ,_eaab :=_ddab (args [0],args [1],"\u0058\u0049\u0052\u0052");if _eaab .Type ==ResultTypeError {return _eaab ;};_bcga :=_ffcd ._ccae ;_bed :=_ffcd ._gdeb ;_gbfg :=0.1;if _fbda ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbfg =args [2].ValueNumber ;if _gbfg <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _fgaf (_bcga ,_bed ,_gbfg );};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_ddfag :=1.0;for _ ,_gfgba :=range args {_gfgba =_gfgba .AsNumber ();switch _gfgba .Type {case ResultTypeNumber :_ddfag *=_gfgba .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bccc :=Product (_gfgba .ListValues ());if _bccc .Type !=ResultTypeNumber {return _bccc ;};_ddfag *=_bccc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gfgba ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gfgba .Type ));};};return MakeNumberResult (_ddfag );};func LexReader (r _b .Reader )chan *node {_cfbgc :=NewLexer ();go _cfbgc .lex (r );return _cfbgc ._cadc };

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_afeg :=len (args );if _afeg !=4&&_afeg !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_eddf ,_cadb ,_bdfe :=_eecg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _bdfe .Type ==ResultTypeError {return _bdfe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdbd :=args [2].ValueNumber ;if _bdbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eff :=args [3].ValueNumber ;if _eff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdeg :=0;if _afeg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdeg =int (args [4].ValueNumber );if !_adda (_bdeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_gcfc ,_bdfe :=_efg (_eddf ,_cadb ,_bdeg );if _bdfe .Type ==ResultTypeError {return _bdfe ;};return MakeNumberResult (_bdbd /(1-_eff *_gcfc ));};

// Reference returns an invalid reference for Error.
func (_gcg Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_acdcd :=len (args );if _acdcd < 4||_acdcd > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbgdd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcdg :=args [1].ValueNumber ;if _dcdg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceag :=args [2].ValueNumber ;if _ceag < _dcdg {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aefe :=args [3].ValueNumber ;_ddbf :=0.0;if _acdcd >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddbf =args [4].ValueNumber ;};_gbedc :=0;if _acdcd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gbedc =int (args [5].ValueNumber );if _gbedc !=0{_gbedc =1;};};return MakeNumberResult (_becd (_fbgdd ,_ceag ,_aefe ,_ddbf ,_gbedc )-_ccaf (_fbgdd ,_dcdg ,_ceag ,_aefe ,_ddbf ,_gbedc ));};

// Reference returns an invalid reference for Bool.
func (_fb Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _gdbcg =_ae .Millisecond *1000;type parsedSearchObject struct{_aegg string ;_dfag string ;_baed int ;};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_dcdac :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dcdac =int (args [1].ValueNumber );if _dcdac < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _dcdac ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_fcac :=args [0].Value ();if _dcdac > len (_fcac ){return MakeStringResult (_fcac );};return MakeStringResult (_fcac [0:_dcdac ]);};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_cfadc NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_cced :=ctx .NamedRange (_cfadc ._adacf );_fgge :=_cced .Value ;if _acecde ,_adcde :=ev .GetFromCache (_fgge );_adcde {return _acecde ;};_fggeb :=_bf .Split (_fgge ,"\u0021");if len (_fggeb )!=2{return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_fgge ));};_cfgeb :=ctx .Sheet (_fggeb [0]);_egdc :=_bf .Split (_fggeb [1],"\u003a");switch len (_egdc ){case 1:_bcde :=ev .Eval (_cfgeb ,_egdc [0]);ev .SetCache (_fgge ,_bcde );return _bcde ;case 2:_ccgg :=_fbcbg (_cfgeb ,ev ,_egdc [0],_egdc [1]);ev .SetCache (_fgge ,_ccgg );return _ccgg ;};return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_cced .Type ));};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddd ,_eefb ,_gdbbb :=_eecg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _gdbbb .Type ==ResultTypeError {return _gdbbb ;};_eeab ,_gdbbb :=_dfcd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gdbbb .Type ==ResultTypeError {return _gdbbb ;};if _eeab >=_ddd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_eag :=args [3].ValueNumber ;if _eag < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fagg :=args [4].ValueNumber ;if _fagg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_aebe :=args [5].ValueNumber ;if _aebe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgaef :=float64 (int (args [6].ValueNumber ));if !_eddg (_dgaef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gafaf :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gafaf =int (args [7].ValueNumber );if !_adda (_gafaf ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_baag ,_gdbbb :=_efg (_eeab ,_eefb ,_gafaf );if _gdbbb .Type ==ResultTypeError {return _gdbbb ;};_baag *=_dgaef ;_cgg ,_gdbbb :=_efg (_ddd ,_eefb ,_gafaf );if _gdbbb .Type ==ResultTypeError {return _gdbbb ;};_cgg *=_dgaef ;_efaae ,_gdbbb :=_efg (_eeab ,_ddd ,_gafaf );if _gdbbb .Type ==ResultTypeError {return _gdbbb ;};_efaae *=_dgaef ;_bdae :=_aebe +_baag *100*_eag /_dgaef ;_bdae /=_fagg +_efaae *100*_eag /_dgaef ;_bdae --;_bdae *=_dgaef /_cgg ;return MakeNumberResult (_bdae );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_defc :=len (args );if _defc !=4&&_defc !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdbg :=args [0].ValueNumber ;if _fdbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebc :=args [1].ValueNumber ;if _cebc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dafgb :=args [2].ValueNumber ;if _dafgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggbf :=args [3].ValueNumber ;if _ggbf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _ggbf > _dafgb {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_eac :=2.0;if _defc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eac =args [4].ValueNumber ;if _eac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_bbgd (_fdbg ,_cebc ,_dafgb ,_ggbf ,_eac ));};func _defd (_dbbd float64 )float64 {return float64 (int (_dbbd +0.5))};const _gedf =57344;

// Reference returns an invalid reference for ConstArrayExpr.
func (_fca ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns a string reference value to a vertical range with prefix.
func (_bfbef PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_babg :=_bfbef ._cafc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_bfbef .verticalRangeReference (_babg .Value )};};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _acff (args ,false )};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_facgg :=args [0].AsNumber ();if _facgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbgbe :=0;if len (args )> 1{_gddd :=args [1];if _gddd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_fbgbe =int (_gddd .ValueNumber );if _fbgbe < 0{_fbgbe =0;}else if _fbgbe > 4{_fbgbe =4;};};_caefb :=_fbbe ;switch _fbgbe {case 1:_caefb =_effd ;case 2:_caefb =_aefa ;case 3:_caefb =_agfcd ;case 4:_caefb =_cddee ;};_efgc :=_de .Trunc (_facgg .ValueNumber );_gfdg :=_edc .Buffer {};for _ ,_ecbbg :=range _caefb {for _efgc >=_ecbbg ._gfef {_gfdg .WriteString (_ecbbg ._gaac );_efgc -=_ecbbg ._gfef ;};};return MakeStringResult (_gfdg .String ());};const _gedc =-1000;const _caaf =57350;const _fdeba =57347;

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_ggded ,_eebeb Expression };

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fgee :=args [0].AsNumber ();if _fgee .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _fgee .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_edbbe (_fgee .ValueNumber ));};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbabfa :=args [0].Ref ;if _gbabfa .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_ebd ,_gefd :=_af .ParseCellReference (_gbabfa .Value );if _gefd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gbabfa .Value );};return MakeNumberResult (float64 (_ebd .RowIdx ));};func _fbcbg (_cdgga Context ,_acga Evaluator ,_debag ,_fdfce string )Result {_ggeg ,_cegdf :=_af .ParseCellReference (_debag );if _cegdf !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_debag ,_cegdf .Error ()));};_bfcd ,_efcab :=_ggeg .ColumnIdx ,_ggeg .RowIdx ;_acac ,_ebbdf :=_af .ParseCellReference (_fdfce );if _ebbdf !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_fdfce ,_ebbdf .Error ()));};_egccg ,_bdegd :=_acac .ColumnIdx ,_acac .RowIdx ;_cagae :=[][]Result {};for _efdaf :=_efcab ;_efdaf <=_bdegd ;_efdaf ++{_dfggb :=[]Result {};for _feedc :=_bfcd ;_feedc <=_egccg ;_feedc ++{_ggcca :=_cdgga .Cell (_d .Sprintf ("\u0025\u0073\u0025\u0064",_af .IndexToColumn (_feedc ),_efdaf ),_acga );_dfggb =append (_dfggb ,_ggcca );};_cagae =append (_cagae ,_dfggb );};if len (_cagae )==1{if len (_cagae [0])==1{return _cagae [0][0];};return MakeListResult (_cagae [0]);};return MakeArrayResult (_cagae );};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _ggbe (_efga string ,_cefd func (_fgdb float64 )float64 )Function {return func (_bacf []Result )Result {if len (_bacf )!=1{return MakeErrorResult (_efga +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_adedb :=_bacf [0].AsNumber ();switch _adedb .Type {case ResultTypeNumber :_fbdd :=_cefd (_adedb .ValueNumber );if _de .IsNaN (_fbdd ){return MakeErrorResult (_efga +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _de .IsInf (_fbdd ,0){return MakeErrorResult (_efga +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fbdd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_efga +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fbdd );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_efga +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _adedb ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efga ,_adedb .Type ));};};};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_cfec :=args [0].ValueNumber ;if _cfec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbb :=float64 (int (args [1].ValueNumber ));if _gfbb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_de .Pow (_cfec +1,1/_gfbb )-1)*_gfbb );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_ecfa :=len (args );if _ecfa !=5&&_ecfa !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcegf ,_adagc ,_ddbg :=_eecg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _ddbg .Type ==ResultTypeError {return _ddbg ;};_eeabe ,_ddbg :=_dfcd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _ddbg .Type ==ResultTypeError {return _ddbg ;};if _eeabe >=_dcegf {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bfcc :=args [3].ValueNumber ;if _bfcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_eebc :=args [4].ValueNumber ;if _eebc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dace :=0;if _ecfa ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dace =int (args [5].ValueNumber );if !_adda (_dace ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_gdbf ,_ddbg :=_efg (_dcegf ,_adagc ,_dace );if _ddbg .Type ==ResultTypeError {return _ddbg ;};_gbdbb ,_ddbg :=_efg (_eeabe ,_adagc ,_dace );if _ddbg .Type ==ResultTypeError {return _ddbg ;};_fgdc ,_ddbg :=_efg (_eeabe ,_dcegf ,_dace );if _ddbg .Type ==ResultTypeError {return _ddbg ;};_acfc :=1+_gbdbb *_bfcc ;_deggb :=1+_gdbf *_eebc ;return MakeNumberResult ((_acfc /_deggb -_fgdc *_bfcc )*100);};

// GetFormat returns an empty string for the invalid reference context.
func (_dedf *ivr )GetFormat (cellRef string )string {return ""};func (_becda *Lexer )nextRaw ()*node {for len (_becda ._bccac )!=0{_edbcg :=<-_becda ._bccac [len (_becda ._bccac )-1];if _edbcg !=nil {return _edbcg ;};_becda ._bccac =_becda ._bccac [0:len (_becda ._bccac )-1];};return <-_becda ._cadc ;};func _efdd (_bdag ,_ccfg ,_eefeb ,_cbed ,_afge ,_ebfdc float64 )float64 {var _gccb ,_deef float64 ;_agcdc :=0.0;_ceac :=_de .Ceil (_afge );_efaef :=_bdag -_ccfg ;_ecge :=false ;_beeb :=0.0;for _bbae :=1.0;_bbae <=_ceac ;_bbae ++{if !_ecge {_gccb =_bbgd (_bdag ,_ccfg ,_eefeb ,_bbae ,_ebfdc );_beeb =_efaef /(_eefeb -_bbae +1);if _beeb > _gccb {_deef =_beeb ;_ecge =true ;}else {_deef =_gccb ;_efaef -=_gccb ;};}else {_deef =_beeb ;};if _bbae ==_ceac {_deef *=_afge +1-_ceac ;};_agcdc +=_deef ;};return _agcdc ;};func _gfgbc (_bebbc Reference ,_dgab Context )bool {return _dgab .Sheet (_bebbc .Value )==InvalidReferenceContext ;};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_aacbg SheetPrefixExpr )Update (q *_dbg .UpdateQuery )Expression {return _aacbg };

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_bfbd :=args [0].AsNumber ();if _bfbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_efcd :=10.0;if len (args )> 1{_gcabe :=args [1].AsNumber ();if _gcabe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_efcd =args [1].ValueNumber ;};if _bfbd .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _efcd ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_de .Log (_bfbd .ValueNumber )/_de .Log (_efcd ));};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_de .Pi );};func _aabdc (_cagd Context ,_eecea ,_fffe string )(string ,string ){_cdgb :=_eecea +"\u0031";_beeea :=_cagd .LastRow (_eecea );_ecgbe :=_fffe +_bd .Itoa (_beeea );return _cdgb ,_ecgbe ;};func _caca (_bfgb []string ,_bgeaf int )string {return _bd .Itoa (len (_bfgb [len (_bfgb )-1-_bgeaf ]))};type Reference struct{Type ReferenceType ;Value string ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_ceafd PrefixVerticalRange )Update (q *_dbg .UpdateQuery )Expression {if q .UpdateType ==_dbg .UpdateActionRemoveColumn {_efec :=_ceafd ;_cade :=_ceafd ._cafc .String ();if _cade ==q .SheetToUpdate {_fedc :=q .ColumnIdx ;_efec ._dfdbg =_ca (_ceafd ._dfdbg ,_fedc );_efec ._fdga =_ca (_ceafd ._fdga ,_fedc );};return _efec ;};return _ceafd ;};

// Reference returns a string reference value to a horizontal range with prefix.
func (_ggba PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_beegc :=_ggba ._abac .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_ggba .horizontalRangeReference (_beegc .Value )};};func _ffbg (_ggab Result )[]Result {_bgbad :=_ggab .ValueList ;if _ggab .Type ==ResultTypeArray {_bgbad =nil ;for _ ,_abdf :=range _ggab .ValueArray {if len (_abdf )> 0{_bgbad =append (_bgbad ,_abdf [0]);}else {_bgbad =append (_bgbad ,_dacf );};};};return _bgbad ;};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_beebf :=args [0].AsString ();if _beebf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_beebf .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_beebf .ValueString [0]));};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdec :=args [0].AsNumber ();if _gdec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdec .ValueNumber < 0{return MakeNumberResult (-1);}else if _gdec .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fcad :=int (args [0].ValueNumber );if _fcad < 0||_fcad >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _fcad <=1899{_fcad +=1900;};_agb :=_ae .Month (args [1].ValueNumber );_cda :=int (args [2].ValueNumber );_decg :=_eecc (_fcad ,_agb ,_cda );_abaf :=_fda (_eed ,_decg )+1;if _abaf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_abaf );};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_daac ,_cdea :=_cecf (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _cdea .Type ==ResultTypeError {return _cdea ;};_ece :=_daac ._egaff ;_acbd :=_daac ._acecd ;_aada :=_daac ._fdgg ;_fdee :=_daac ._decb ;_ffaf :=_daac ._aag ;_edeg :=_daac ._dgee ;_fgcc :=_becd (_ece ,_acbd ,_aada ,0,_edeg );_cfeb :=0.0;if _fdee ==1{if _edeg ==0{_cfeb =-_aada ;_fdee ++;};};for _ccbb :=_fdee ;_ccbb <=_ffaf ;_ccbb ++{if _edeg ==1{_cfeb +=_fceg (_ece ,_ccbb -2,_fgcc ,_aada ,1)-_fgcc ;}else {_cfeb +=_fceg (_ece ,_ccbb -1,_fgcc ,_aada ,0);};};_cfeb *=_ece ;return MakeNumberResult (_cfeb );};func _fcdag (_ccdde []Result ,_ffgb []string ,_cebgf bool )[]string {for _ ,_eabc :=range _ccdde {switch _eabc .Type {case ResultTypeEmpty :if !_cebgf {_ffgb =append (_ffgb ,"");};case ResultTypeString :if _eabc .ValueString !=""||!_cebgf {_ffgb =append (_ffgb ,_eabc .ValueString );};case ResultTypeNumber :_ffgb =append (_ffgb ,_eabc .Value ());case ResultTypeList :_ffgb =_fccd (_ffgb ,_fcdag (_eabc .ValueList ,[]string {},_cebgf ));case ResultTypeArray :for _ ,_cggff :=range _eabc .ValueArray {_ffgb =_fccd (_ffgb ,_fcdag (_cggff ,[]string {},_cebgf ));};};};return _ffgb ;};

// String returns a string representation of a vertical range with prefix.
func (_gebdd PrefixVerticalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gebdd ._cafc .String (),_gebdd ._dfdbg ,_gebdd ._fdga );};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_cdfb PrefixHorizontalRange )Update (q *_dbg .UpdateQuery )Expression {return _cdfb };

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};func _fbbga (_geabd Context ,_abgg ,_aaff int )(string ,string ){_gdfc :="\u0041"+_bd .Itoa (_abgg );_gedcb :=_geabd .LastColumn (_abgg ,_aaff );_eefbf :=_gedcb +_bd .Itoa (_aaff );return _gdfc ,_eefbf ;};

// Eval evaluates and returns the result of an empty expression.
func (_fcf EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};func _ebgaf (_aadg float64 ,_ggfaa *criteriaRegex )bool {_ddad ,_acdcf :=_bd .ParseFloat (_ggfaa ._cacg ,64);if _acdcf !=nil {return false ;};switch _ggfaa ._fegc {case _gfggb :return _aadg ==_ddad ;case _aaaff :return _aadg <=_ddad ;case _afagc :return _aadg >=_ddad ;case _bagcd :return _aadg < _ddad ;case _bfce :return _aadg > _ddad ;};return false ;};const _cgd ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";func _cd (_ecd Result )bool {if _ecd .Type ==ResultTypeString {return _ecd .ValueString =="";};return _ecd .ValueNumber ==0;};const _gcaf ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_cba +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Negate is a negate expression like -A1.
type Negate struct{_dgea Expression };var _ebdde =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};func _fec (_ggc string )bool {for _ ,_abbe :=range _bbf {_gbb :=_abbe .FindStringSubmatch (_ggc );if len (_gbb )> 1{return true ;};};return false ;};const _bcede =57375;

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_dfefc :=_bf .Split (v ,"\u003a");if len (_dfefc )!=2{return nil ;};_fadda ,_ :=_bd .Atoi (_dfefc [0]);_acfgc ,_ :=_bd .Atoi (_dfefc [1]);if _fadda > _acfgc {_fadda ,_acfgc =_acfgc ,_fadda ;};return PrefixHorizontalRange {_abac :pfx ,_ecbag :_fadda ,_eagg :_acfgc };};var _ccfa []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgfba :=args [0].ValueNumber ;if _dgfba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_aga ,_ddbda :=_ddab (args [1],args [2],"\u0058\u004e\u0050\u0056");if _ddbda .Type ==ResultTypeError {return _ddbda ;};_ccec :=_aga ._ccae ;_dgfce :=_aga ._gdeb ;_eddfc :=0.0;_eaca :=_dgfce [0];for _ebfa ,_ecad :=range _ccec {_eddfc +=_ecad /_de .Pow (1+_dgfba ,(_dgfce [_ebfa ]-_eaca )/365);};return MakeNumberResult (_eddfc );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eadb :=args [0];if _eadb .Type !=ResultTypeArray &&_eadb .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_acbe :=_cdgc (_eadb );_gefca :=args [2];if _gefca .Type !=ResultTypeArray &&_gefca .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gbde :=_cdgc (_gefca );_cbad :=_cgea (args [1]);_eagf :=0.0;for _gbaf ,_dgca :=range _acbe {for _babd ,_gdbdf :=range _dgca {if _cedfb (_gdbdf ,_cbad ){_eagf +=_gbde [_gbaf ][_babd ].ValueNumber ;};};};return MakeNumberResult (_eagf );};

// String is a string expression.
type String struct{_edaea string };func _fbfgf (_bbfed string ,_fcde []Result )(*parsedSearchObject ,Result ){_aadf :=len (_fcde );if _aadf !=2&&_aadf !=3{return nil ,MakeErrorResult (_bbfed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adadg :=_fcde [0];if _adadg .Type ==ResultTypeError {return nil ,_adadg ;};if _adadg .Type !=ResultTypeString &&_adadg .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dfde :=_fcde [1];if _dfde .Type ==ResultTypeError {return nil ,_dfde ;};if _dfde .Type !=ResultTypeString &&_dfde .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_ecebg :=_dfde .Value ();_efgga :=_adadg .Value ();_eacaa :=1;if _aadf ==3&&_fcde [2].Type !=ResultTypeEmpty {_ddaaa :=_fcde [2];if _ddaaa .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_eacaa =int (_ddaaa .ValueNumber );if _eacaa < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _eacaa > len (_ecebg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_efgga ,_ecebg ,_eacaa },_dacf ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_fagfc :=args [0].AsNumber ();_bfbad :=args [1].AsNumber ();if _fagfc .Type ==ResultTypeNumber &&_bfbad .Type ==ResultTypeNumber {_ggda :=_de .Atan2 (_bfbad .ValueNumber ,_fagfc .ValueNumber );if _ggda !=_ggda {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_ggda );};for _ ,_fcda :=range []ResultType {_fagfc .Type ,_bfbad .Type }{switch _fcda {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _fagfc ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcda ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ecadg :=args [0].AsNumber ();_ddcd :=args [1].AsNumber ();if _ecadg .Type !=ResultTypeNumber ||_ddcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _ddcd .ValueNumber < _ecadg .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_dbcc :=int64 (_ecadg .ValueNumber );_aaced :=int64 (_ddcd .ValueNumber );return MakeNumberResult (float64 (_gaec .Int63n (_aaced -_dbcc +1)+_dbcc ));};var _ffcdd =map[string ]FunctionComplex {};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_gbddcb ,_afbc ,_agbbd :=_cbafa (from ,to );if _agbbd !=nil {_ab .Log .Debug (_agbbd .Error ());return NewError (_agbbd .Error ());};return Range {_ggded :_gbddcb ,_eebeb :_afbc };};func _cffb (){_aafb =_db .MustCompile ("\u005e\u0030\u002b\u0024");_gabc =_db .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_cfef =_db .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_acbf =_db .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_cbbcb =_db .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_cgeb =_db .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_fceb =_db .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_aggb =_db .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_ffab =_db .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_defa =_db .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_cgaaa =_db .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_fea =_db .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_aaeb +_aaeb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_aaeb +_aaeb +"\u0029\u002b\u0059+\u0024");_baagd =_db .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_aaeb +_aaeb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_aaeb +_aaeb +"\u0029\u002b\u0059+\u0024");_gcfda =_db .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_ecace =_db .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};func (_afad *plex )Lex (lval *yySymType )int {_ebcc =true ;_gfefd :=<-_afad ._bgfec ;if _gfefd !=nil {lval ._dfaaf =_gfefd ;return int (lval ._dfaaf ._dbddb );};return 0;};

// Update updates references in the BinaryExpr after removing a row/column.
func (_bde BinaryExpr )Update (q *_dbg .UpdateQuery )Expression {_bgd :=_bde ;_bgd ._ac =_bde ._ac .Update (q );_bgd ._ec =_bde ._ec .Update (q );return _bgd ;};func _eecg (_accb ,_bcdd Result ,_edg string )(float64 ,float64 ,Result ){_ageb ,_bgba :=_dfcd (_accb ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_edg );if _bgba .Type ==ResultTypeError {return 0,0,_bgba ;};_fcb ,_bgba :=_dfcd (_bcdd ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_edg );if _bgba .Type ==ResultTypeError {return 0,0,_bgba ;};if _ageb >=_fcb {return 0,0,MakeErrorResultType (ErrorTypeNum ,_edg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _ageb ,_fcb ,_dacf ;};const _dgb ="\u0028\u0020\u0028"+_baa +"\u007c"+_ecc +"\u007c"+_abd +"\u007c"+_ffd +"\u0029\u0029\u003f\u0024";func _bgb (_degg ,_dafb ,_aaa float64 )float64 {return (_degg *3600+_dafb *60+_aaa )/86400};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// SetLocked does nothing for the invalid reference context.
func (_eccda *ivr )SetLocked (cellRef string ,locked bool ){};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_bdbg ,_ggd :=_cecf (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _ggd .Type ==ResultTypeError {return _ggd ;};_edgb :=_bdbg ._egaff ;_eeca :=_bdbg ._acecd ;_gbdg :=_bdbg ._fdgg ;_bbeb :=_bdbg ._decb ;_dafgd :=_bdbg ._aag ;_edf :=_bdbg ._dgee ;_eedd :=_becd (_edgb ,_eeca ,_gbdg ,0,_edf );_egab :=0.0;if _bbeb ==1{if _edf ==0{_egab =_eedd +_gbdg *_edgb ;}else {_egab =_eedd ;};_bbeb ++;};for _cdge :=_bbeb ;_cdge <=_dafgd ;_cdge ++{if _edf ==1{_egab +=_eedd -(_fceg (_edgb ,_cdge -2,_eedd ,_gbdg ,1)-_eedd )*_edgb ;}else {_egab +=_eedd -_fceg (_edgb ,_cdge -1,_eedd ,_gbdg ,0)*_edgb ;};};return MakeNumberResult (_egab );};

// String returns a string representation of PrefixExpr.
func (_ecag PrefixExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021%\u0073",_ecag ._begee .String (),_ecag ._gefff .String ());};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_fdbd :=len (args );if _fdbd < 3||_fdbd > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgag :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ecfc :=args [1].ValueNumber ;if _ecfc !=float64 (int (_ecfc )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaea :=args [2].ValueNumber ;_gdcc :=0.0;if _fdbd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdcc =args [3].ValueNumber ;};_fcdb :=0;if _fdbd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcdb =int (args [4].ValueNumber );if _fcdb !=0{_fcdb =1;};};return MakeNumberResult (_fceg (_bgag ,_ecfc ,_eaea ,_gdcc ,_fcdb ));};const _geef =_cba +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_dbac :=args [0];if _dbac .Type !=ResultTypeArray &&_dbac .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bbfb :=_dbac .ValueArray ;if len (_bbfb )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_bbfb [0])));};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_fbf ,_dbb :=_gfde (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _dbb .Type ==ResultTypeError {return _dbb ;};_geagf :=_gdd (_fbf ._gfegf );_edcaa :=_gdd (_fbf ._adbd );_bcbe :=_fbf ._dfbc ;_beee :=_fbf ._cdef ;_gbdd :=_dbdaf (_geagf ,_edcaa ,_bcbe ,_beee );_bca ,_bgab ,_fbaf :=_gbdd .Date ();return MakeNumberResult (_acf (_bca ,int (_bgab ),_fbaf ));};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_ebgf :=_fdggb (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _ebgf .Type !=ResultTypeEmpty {return _ebgf ;};_egfd :=_aecf (args [1:]);_adada :=0.0;_adgcc :=_cdgc (args [0]);for _ ,_cbebc :=range _egfd {_adada +=_adgcc [_cbebc ._abdbf ][_cbebc ._cfcd ].ValueNumber ;};return MakeNumberResult (float64 (_adada ));};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_bgbg PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fabba :=_bgbg ._abac .Reference (ctx ,ev );switch _fabba .Type {case ReferenceTypeSheet :if _gfgbc (_fabba ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fabba .Value ));};_fcdgg :=_bgbg .horizontalRangeReference (_fabba .Value );if _eeef ,_edea :=ev .GetFromCache (_fcdgg );_edea {return _eeef ;};_ceee :=ctx .Sheet (_fabba .Value );_caabg ,_ffad :=_fbbga (_ceee ,_bgbg ._ecbag ,_bgbg ._eagg );_ddbde :=_fbcbg (_ceee ,ev ,_caabg ,_ffad );ev .SetCache (_fcdgg ,_ddbde );return _ddbde ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fabba .Type ));};};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_dcagc :=args [0].AsString ();if _dcagc .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cbgad :=args [1].AsNumber ();if _cbgad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _cbgad .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _cbgad .ValueNumber ==0{return MakeStringResult ("");};_cecb :=_edc .Buffer {};for _cffe :=0;_cffe < int (_cbgad .ValueNumber );_cffe ++{_cecb .WriteString (_dcagc .ValueString );};return MakeStringResult (_cecb .String ());};

// Eval evaluates and returns the result of a function call.
func (_eggg FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_edfed :=LookupFunction (_eggg ._afebc );if _edfed !=nil {_bccbd :=make ([]Result ,len (_eggg ._gcec ));for _beba ,_fgfeg :=range _eggg ._gcec {_bccbd [_beba ]=_fgfeg .Eval (ctx ,ev );_bccbd [_beba ].Ref =_fgfeg .Reference (ctx ,ev );};if _ ,_bgbag :=_cegg [_eggg ._afebc ];!_bgbag {if _cecc ,_ceada :=_aadea (_bccbd );_cecc {return _ceada ;};};return _edfed (_bccbd );};_ffaca :=LookupFunctionComplex (_eggg ._afebc );if _ffaca !=nil {_edbcd :=make ([]Result ,len (_eggg ._gcec ));for _adedd ,_bbfec :=range _eggg ._gcec {_edbcd [_adedd ]=_bbfec .Eval (ctx ,ev );_edbcd [_adedd ].Ref =_bbfec .Reference (ctx ,ev );};if _ ,_efbf :=_cegg [_eggg ._afebc ];!_efbf {if _fdaa ,_ffbad :=_aadea (_edbcd );_fdaa {return _ffbad ;};};return _ffaca (ctx ,ev ,_edbcd );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_eggg ._afebc );};func _abgf (_ggfe []Result ,_dcef string )(*amorArgs ,Result ){_abcad :=len (_ggfe );if _abcad !=6&&_abcad !=7{return nil ,MakeErrorResult (_dcef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ggfe [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcef +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ggcd :=_ggfe [0].ValueNumber ;if _ggcd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcef +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_eefg ,_egde :=_dfcd (_ggfe [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_dcef );if _egde .Type ==ResultTypeError {return nil ,_egde ;};_dceb ,_egde :=_dfcd (_ggfe [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_dcef );if _egde .Type ==ResultTypeError {return nil ,_egde ;};if _dceb < _eefg {return nil ,MakeErrorResultType (ErrorTypeNum ,_dcef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _ggfe [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cffg :=_ggfe [3].ValueNumber ;if _cffg < 0||_cffg > _ggcd {return nil ,MakeErrorResultType (ErrorTypeNum ,_dcef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _ggfe [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcef +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_daafb :=int (_ggfe [4].ValueNumber );if _daafb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcef +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _ggfe [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcef +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adde :=_ggfe [5].ValueNumber ;if _adde < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dcef +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_abda :=0;if _abcad ==7&&_ggfe [6].Type !=ResultTypeEmpty {if _ggfe [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dcef +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abda =int (_ggfe [6].ValueNumber );if !_adda (_abda )||_abda ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dcef );};};return &amorArgs {_ggcd ,_eefg ,_dceb ,_cffg ,_daafb ,_adde ,_abda },_dacf ;};const _dfef int =30;

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_bf .NewReader (s ));};type yySymType struct{_gefb int ;_dfaaf *node ;_fadg Expression ;_cebe []Expression ;_ebdd [][]Expression ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ccddc :=args [0].AsNumber ();if _ccddc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_eecf :=int (_ccddc .ValueNumber );_dcaf :=make ([][]Result ,0,_eecf );for _fecd :=0;_fecd < _eecf ;_fecd ++{_dcdd :=make ([]Result ,_eecf );for _ffbd :=0;_ffbd < _eecf ;_ffbd ++{if _fecd ==_ffbd {_dcdd [_ffbd ]=MakeNumberResult (1.0);}else {_dcdd [_ffbd ]=MakeNumberResult (0.0);};};_dcaf =append (_dcaf ,_dcdd );};return MakeArrayResult (_dcaf );};func _aadea (_deegg []Result )(bool ,Result ){for _ ,_efca :=range _deegg {if _efca .Type ==ResultTypeError {return true ,_efca ;};};return false ,MakeEmptyResult ();};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_eage :=MakeNumberResult (0);for _ ,_egeb :=range args {_egeb =_egeb .AsNumber ();switch _egeb .Type {case ResultTypeNumber :_eage .ValueNumber +=_egeb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_gbce :=Sum (_egeb .ListValues ());if _gbce .Type !=ResultTypeNumber {return _gbce ;};_eage .ValueNumber +=_gbce .ValueNumber ;case ResultTypeString :case ResultTypeError :return _egeb ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egeb .Type ));};};return _eage ;};

// Eval evaluates a range returning a list of results or an error.
func (_febd Range )Eval (ctx Context ,ev Evaluator )Result {_ddea :=_febd ._ggded .Reference (ctx ,ev );_geecd :=_febd ._eebeb .Reference (ctx ,ev );_caed :=_cgcbg (_ddea ,_geecd );if _ddea .Type ==ReferenceTypeCell &&_geecd .Type ==ReferenceTypeCell {if _bfbgf ,_cddbb :=ev .GetFromCache (_caed );_cddbb {return _bfbgf ;}else {_eeccg :=_fbcbg (ctx ,ev ,_ddea .Value ,_geecd .Value );ev .SetCache (_caed ,_eeccg );return _eeccg ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_caed );};var _ggcab =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// Reference returns an invalid reference for BinaryExpr.
func (_ga BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgfe :=args [0];if _cgfe .Type ==ResultTypeList {_gfdc :=[][]Result {};for _ ,_gdbec :=range _cgfe .ValueList {_gfdc =append (_gfdc ,[]Result {_gdbec });};return MakeArrayResult (_gfdc );};_afeb :=make ([][]Result ,len (_cgfe .ValueArray [0]));for _ ,_bdegb :=range _cgfe .ValueArray {for _fddf ,_fcff :=range _bdegb {_afeb [_fddf ]=append (_afeb [_fddf ],_fcff );};};return MakeArrayResult (_afeb );};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_bcab :=len (args );if _bcab !=6&&_bcab !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fdaec ,_bfba ,_ecfgf :=_eecg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _ecfgf .Type ==ResultTypeError {return _ecfgf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_geae :=args [2].ValueNumber ;if _geae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_cfcc :=args [3].ValueNumber ;if _cfcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eeaff :=args [4].ValueNumber ;if _eeaff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbca :=args [5];if _cbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dedg :=_cbca .ValueNumber ;if !_eddg (_dedg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ccdf :=0;if _bcab ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccdf =int (args [6].ValueNumber );if !_adda (_ccdf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_cgecf ,_ecfgf :=_becdb (_fdaec ,_bfba ,_geae ,_cfcc ,_eeaff ,_dedg ,_ccdf );if _ecfgf .Type ==ResultTypeError {return _ecfgf ;};return MakeNumberResult (_cgecf );};const _ecc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dadeb :=args [0].AsNumber ();_fdgf :=args [1].AsNumber ();_dfcdb :=args [2].AsNumber ();_fdfg :=args [3].ListValues ();if _dadeb .Type !=ResultTypeNumber ||_fdgf .Type !=ResultTypeNumber ||_dfcdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cgdb :=float64 (0);for _eebe ,_fffba :=range _fdfg {_cgdb +=_fffba .ValueNumber *_de .Pow (_dadeb .ValueNumber ,_fdgf .ValueNumber +float64 (_eebe )*_dfcdb .ValueNumber );};return MakeNumberResult (_cgdb );};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dgde :=args [1].ValueNumber ;_dffg :=args [0];var _dfc float64 ;switch _dffg .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_dfc =_dffg .ValueNumber ;case ResultTypeString :_fbgb :=DateValue ([]Result {args [0]});if _fbgb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dfc =_fbgb .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bdea :=_gdd (_dfc );_cbfc :=_bdea .AddDate (0,int (_dgde ),0);_fgc ,_bff ,_cbff :=_cbfc .Date ();_fbgd :=_acf (_fgc ,int (_bff ),_cbff );if _fbgd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_fbgd );};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_ccbc ,_dfcdbf :=_bd .ParseFloat (v ,64);if _dfcdbf !=nil {_ab .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_dfcdbf );};return Number {_ecgce :_ccbc };};

// Value returns a string version of the result.
func (_gegbf Result )Value ()string {switch _gegbf .Type {case ResultTypeNumber :_caefc :=_bd .FormatFloat (_gegbf .ValueNumber ,'f',-1,64);if len (_caefc )> 12{_ddaab :=12;for _ggdd :=_ddaab ;_ggdd > 0&&_caefc [_ggdd ]=='0';_ggdd --{_ddaab --;};_caefc =_caefc [0:_ddaab +1];};return _caefc ;case ResultTypeError :return _gegbf .ValueString ;case ResultTypeString :return _gegbf .ValueString ;case ResultTypeList :if len (_gegbf .ValueList )==0{return "";};return _gegbf .ValueList [0].Value ();case ResultTypeArray :if len (_gegbf .ValueArray )==0||len (_gegbf .ValueArray [0])==0{return "";};return _gegbf .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _fgaf (_efda ,_ead []float64 ,_cgccb float64 )Result {_becf :=false ;_efgf :=false ;for _accbg :=0;_accbg < len (_efda );_accbg ++{if _efda [_accbg ]> 0{_becf =true ;};if _efda [_accbg ]< 0{_efgf =true ;};};if !_becf ||!_efgf {return MakeErrorResultType (ErrorTypeNum ,"");};_edgg :=_cgccb ;_cgeg :=1e-10;_agec :=0;_eaaf :=50;_fbdf :=false ;for {_cgbd :=_gecb (_efda ,_ead ,_edgg );_bdba :=_edgg -_cgbd /_ffac (_efda ,_ead ,_edgg );_eeg :=_de .Abs (_bdba -_edgg );_edgg =_bdba ;_agec ++;if _eeg <=_cgeg ||_de .Abs (_cgbd )<=_cgeg {break ;};if _agec > _eaaf {_fbdf =true ;break ;};};if _fbdf ||_de .IsNaN (_edgg )||_de .IsInf (_edgg ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_edgg );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_beff :=args [0];switch _beff .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_bbfe :=0.0;_dbef :=0.0;for _ ,_eacc :=range _beff .ValueString {_bgdc :=0.0;switch _eacc {case 'I':_bgdc =1;case 'V':_bgdc =5;case 'X':_bgdc =10;case 'L':_bgdc =50;case 'C':_bgdc =100;case 'D':_bgdc =500;case 'M':_bgdc =1000;};_bbfe +=_bgdc ;switch {case _dbef ==_bgdc &&(_dbef ==5||_dbef ==50||_dbef ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_dbef ==_bgdc :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _dbef < _bgdc {_bbfe -=2*_dbef ;};_dbef =_bgdc ;};return MakeNumberResult (_bbfe );case ResultTypeError :return _beff ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_beff .Type ));};};

// String returns an empty string for Error.
func (_gcb Error )String ()string {return ""};const _gcged =57364;

// Function is a standard function whose result only depends on its arguments.
type Function func (_deea []Result )Result ;

// Number is a nubmer expression.
type Number struct{_ecgce float64 };func _dagg (_agdf string )(int ,int ,int ,bool ,Result ){_gfd :="";_abfc :=[]string {};for _aebg ,_faf :=range _fbc {_abfc =_faf .FindStringSubmatch (_agdf );if len (_abfc )> 1{_gfd =_aebg ;break ;};};if _gfd ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_egd :=false ;var _bcb ,_gff ,_bac int ;var _cabf error ;switch _gfd {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_gff ,_cabf =_bd .Atoi (_abfc [1]);if _cabf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_bac ,_cabf =_bd .Atoi (_abfc [3]);if _cabf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_bcb ,_cabf =_bd .Atoi (_abfc [5]);if _cabf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};if _bcb < 0||_bcb > 9999||(_bcb > 99&&_bcb < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_bcb =_gdad (_bcb );_egd =_abfc [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_gff =_gee [_abfc [1]];_bac ,_cabf =_bd .Atoi (_abfc [14]);if _cabf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_bcb ,_cabf =_bd .Atoi (_abfc [16]);if _cabf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};if _bcb < 0||_bcb > 9999||(_bcb > 99&&_bcb < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_bcb =_gdad (_bcb );_egd =_abfc [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_ddg ,_cbaf :=_bd .Atoi (_abfc [1]);if _cbaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_gfa ,_cbaf :=_bd .Atoi (_abfc [3]);if _cbaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_ede ,_cbaf :=_bd .Atoi (_abfc [5]);if _cbaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};if _ddg >=1900&&_ddg < 10000{_bcb =_ddg ;_gff =_gfa ;_bac =_ede ;}else if _ddg > 0&&_ddg < 13{_gff =_ddg ;_bac =_gfa ;_bcb =_ede ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_egd =_abfc [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_bcb ,_cabf =_bd .Atoi (_abfc [16]);if _cabf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_gff =_gee [_abfc [3]];_bac ,_cabf =_bd .Atoi (_abfc [1]);if _cabf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};_egd =_abfc [19]=="";};if !_fcc (_bcb ,_gff ,_bac ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_bbba );};return _bcb ,_gff ,_bac ,_egd ,_dacf ;};var _dad =[]*_db .Regexp {};const _eddb =57361;

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_ebg :v }};func (_cfcb *Lexer )Next ()*node {_cfcb ._feeddf .Lock ();defer _cfcb ._feeddf .Unlock ();if len (_cfcb ._fcgc )> 0{_cgacc :=_cfcb ._fcgc [0];_cfcb ._fcgc =_cfcb ._fcgc [1:];return _cgacc ;};return _cfcb .nextRaw ();};func (_dcege *yyParserImpl )Parse (yylex yyLexer )int {_bafda :=_ae .Now ();var _fdccb int ;var _afbba yySymType ;var _gdbbc []yySymType ;_ =_gdbbc ;_ddba :=_dcege ._abafg [:];Nerrs :=0;Errflag :=0;_gfebd :=0;_dcege ._accg =-1;_bgfe :=-1;defer func (){_gfebd =-1;_dcege ._accg =-1;_bgfe =-1}();_gaagc :=-1;goto _cecfg ;_aebc :return 0;_fcaf :return 1;_cecfg :if _cecg (_bafda ){_ab .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _fcaf ;};if _cbgb >=4{_d .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_dcad (_bgfe ),_defg (_gfebd ));};_gaagc ++;if _gaagc >=len (_ddba ){_adffe :=make ([]yySymType ,len (_ddba )*2);copy (_adffe ,_ddba );_ddba =_adffe ;};_ddba [_gaagc ]=_afbba ;_ddba [_gaagc ]._gefb =_gfebd ;_dgbge :if _cecg (_bafda ){_ab .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _fcaf ;};_fdccb =_afbb [_gfebd ];if _fdccb <=_gedc {goto _afee ;};if _dcege ._accg < 0{_dcege ._accg ,_bgfe =_eccee (yylex ,&_dcege ._ddag );};_fdccb +=_bgfe ;if _fdccb < 0||_fdccb >=_abgff {goto _afee ;};_fdccb =_edce [_fdccb ];if _ggcab [_fdccb ]==_bgfe {_dcege ._accg =-1;_bgfe =-1;_afbba =_dcege ._ddag ;_gfebd =_fdccb ;if Errflag > 0{Errflag --;};goto _cecfg ;};_afee :if _cecg (_bafda ){_ab .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _fcaf ;};_fdccb =_cdcea [_gfebd ];if _fdccb ==-2{if _dcege ._accg < 0{_dcege ._accg ,_bgfe =_eccee (yylex ,&_dcege ._ddag );};_cdebb :=0;for {if _gafafc [_cdebb +0]==-1&&_gafafc [_cdebb +1]==_gfebd {break ;};_cdebb +=2;};for _cdebb +=2;;_cdebb +=2{_fdccb =_gafafc [_cdebb +0];if _fdccb < 0||_fdccb ==_bgfe {break ;};};_fdccb =_gafafc [_cdebb +1];if _fdccb < 0{goto _aebc ;};};if _fdccb ==0{switch Errflag {case 0:yylex .Error (_cagbb (_gfebd ,_bgfe ));Nerrs ++;if _cbgb >=1{_d .Printf ("\u0025\u0073",_defg (_gfebd ));_d .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_dcad (_bgfe ));};fallthrough;case 1,2:Errflag =3;for _gaagc >=0{_fdccb =_afbb [_ddba [_gaagc ]._gefb ]+_daga ;if _fdccb >=0&&_fdccb < _abgff {_gfebd =_edce [_fdccb ];if _ggcab [_gfebd ]==_daga {goto _cecfg ;};};if _cbgb >=2{_d .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_ddba [_gaagc ]._gefb );};_gaagc --;};goto _fcaf ;case 3:if _cbgb >=2{_d .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_dcad (_bgfe ));};if _bgfe ==_geaa {goto _fcaf ;};_dcege ._accg =-1;_bgfe =-1;goto _dgbge ;};};if _cbgb >=2{_d .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_fdccb ,_defg (_gfebd ));};_abfb :=_fdccb ;_aabce :=_gaagc ;_ =_aabce ;_gaagc -=_dfafc [_fdccb ];if _gaagc +1>=len (_ddba ){_gdgcg :=make ([]yySymType ,len (_ddba )*2);copy (_gdgcg ,_ddba );_ddba =_gdgcg ;};_afbba =_ddba [_gaagc +1];_fdccb =_bfbe [_fdccb ];_cbfag :=_cgfb [_fdccb ];_ggadb :=_cbfag +_ddba [_gaagc ]._gefb +1;if _ggadb >=_abgff {_gfebd =_edce [_cbfag ];}else {_gfebd =_edce [_ggadb ];if _ggcab [_gfebd ]!=-_fdccb {_gfebd =_edce [_cbfag ];};};switch _abfb {case 1:_gdbbc =_ddba [_aabce -1:_aabce +1];{yylex .(*plex )._cgccbc =_afbba ._fadg ;};case 3:_gdbbc =_ddba [_aabce -2:_aabce +1];{_afbba ._fadg =_gdbbc [2]._fadg ;};case 4:_gdbbc =_ddba [_aabce -4:_aabce +1];{};case 5:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewBool (_gdbbc [1]._dfaaf ._ecfd );};case 6:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewNumber (_gdbbc [1]._dfaaf ._ecfd );};case 7:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewString (_gdbbc [1]._dfaaf ._ecfd );};case 8:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewError (_gdbbc [1]._dfaaf ._ecfd );};case 9:_gdbbc =_ddba [_aabce -2:_aabce +1];{_afbba ._fadg =_gdbbc [2]._fadg ;};case 10:_gdbbc =_ddba [_aabce -2:_aabce +1];{_afbba ._fadg =NewNegate (_gdbbc [2]._fadg );};case 15:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =_gdbbc [2]._fadg ;};case 17:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewConstArrayExpr (_gdbbc [2]._ebdd );};case 18:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._ebdd =append (_afbba ._ebdd ,_gdbbc [1]._cebe );};case 19:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._ebdd =append (_gdbbc [1]._ebdd ,_gdbbc [3]._cebe );};case 20:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._cebe =append (_afbba ._cebe ,_gdbbc [1]._fadg );};case 21:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._cebe =append (_gdbbc [1]._cebe ,_gdbbc [3]._fadg );};case 23:_gdbbc =_ddba [_aabce -2:_aabce +1];{_afbba ._fadg =NewPrefixExpr (_gdbbc [1]._fadg ,_gdbbc [2]._fadg );};case 25:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewSheetPrefixExpr (_gdbbc [1]._dfaaf ._ecfd );};case 26:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewCellRef (_gdbbc [1]._dfaaf ._ecfd );};case 27:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewRange (_gdbbc [1]._fadg ,_gdbbc [3]._fadg );};case 28:_gdbbc =_ddba [_aabce -4:_aabce +1];{_afbba ._fadg =NewPrefixRangeExpr (_gdbbc [1]._fadg ,_gdbbc [2]._fadg ,_gdbbc [4]._fadg );};case 29:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewNamedRangeRef (_gdbbc [1]._dfaaf ._ecfd );};case 30:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewHorizontalRange (_gdbbc [1]._dfaaf ._ecfd );};case 31:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._fadg =NewVerticalRange (_gdbbc [1]._dfaaf ._ecfd );};case 32:_gdbbc =_ddba [_aabce -2:_aabce +1];{_afbba ._fadg =NewPrefixHorizontalRange (_gdbbc [1]._fadg ,_gdbbc [2]._dfaaf ._ecfd );};case 33:_gdbbc =_ddba [_aabce -2:_aabce +1];{_afbba ._fadg =NewPrefixVerticalRange (_gdbbc [1]._fadg ,_gdbbc [2]._dfaaf ._ecfd );};case 34:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypePlus ,_gdbbc [3]._fadg );};case 35:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeMinus ,_gdbbc [3]._fadg );};case 36:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeMult ,_gdbbc [3]._fadg );};case 37:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeDiv ,_gdbbc [3]._fadg );};case 38:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeExp ,_gdbbc [3]._fadg );};case 39:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeLT ,_gdbbc [3]._fadg );};case 40:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeGT ,_gdbbc [3]._fadg );};case 41:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeLEQ ,_gdbbc [3]._fadg );};case 42:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeGEQ ,_gdbbc [3]._fadg );};case 43:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeEQ ,_gdbbc [3]._fadg );};case 44:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeNE ,_gdbbc [3]._fadg );};case 45:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewBinaryExpr (_gdbbc [1]._fadg ,BinOpTypeConcat ,_gdbbc [3]._fadg );};case 47:_gdbbc =_ddba [_aabce -2:_aabce +1];{_afbba ._fadg =NewFunction (_gdbbc [1]._dfaaf ._ecfd ,nil );};case 48:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._fadg =NewFunction (_gdbbc [1]._dfaaf ._ecfd ,_gdbbc [2]._cebe );};case 49:_gdbbc =_ddba [_aabce -1:_aabce +1];{_afbba ._cebe =append (_afbba ._cebe ,_gdbbc [1]._fadg );};case 50:_gdbbc =_ddba [_aabce -3:_aabce +1];{_afbba ._cebe =append (_gdbbc [1]._cebe ,_gdbbc [3]._fadg );};case 53:_gdbbc =_ddba [_aabce -0:_aabce +1];{_afbba ._fadg =NewEmptyExpr ();};};goto _cecfg ;};func _cedfb (_dfga Result ,_bdg *criteriaParsed )bool {if _dfga .IsBoolean {return false ;};_faaf :=_dfga .Type ;if _bdg ._bcddd {return _faaf ==ResultTypeNumber &&_dfga .ValueNumber ==_bdg ._caae ;}else if _faaf ==ResultTypeNumber {return _ebgaf (_dfga .ValueNumber ,_bdg ._gbcg );};return _ebeed (_dfga ,_bdg );};type cumulArgs struct{_egaff float64 ;_acecd float64 ;_fdgg float64 ;_decb float64 ;_aag float64 ;_dgee int ;};const _bgdf =86400000000000;

// GetWidth returns 0 for the invalid reference context.
func (_cgbc *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfcbg :=args [0].AsNumber ();_bffe :=args [1].AsNumber ();if _dfcbg .Type !=ResultTypeNumber ||_bffe .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dgcgc :=_de .Trunc (_dfcbg .ValueNumber );_aade :=_de .Trunc (_bffe .ValueNumber );if _aade > _dgcgc {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _aade ==_dgcgc ||_aade ==0{return MakeNumberResult (1);};_bcaab :=float64 (1);for _bgec :=float64 (1);_bgec <=_aade ;_bgec ++{_bcaab *=(_dgcgc +1-_bgec )/_bgec ;};return MakeNumberResult (_bcaab );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _dafa (args ,_gbca )};

// Error is an error expression.
type Error struct{_ebg string };func _ddab (_caaag ,_ffgd Result ,_dcda string )(*xargs ,Result ){if _caaag .Type !=ResultTypeList &&_caaag .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dcda +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_aded :=_cdgc (_caaag );_cedf :=[]float64 {};for _ ,_daea :=range _aded {for _ ,_cfad :=range _daea {if _cfad .Type ==ResultTypeNumber &&!_cfad .IsBoolean {_cedf =append (_cedf ,_cfad .ValueNumber );}else {return nil ,MakeErrorResult (_dcda +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_aacf :=len (_cedf );if len (_cedf )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _ffgd .Type !=ResultTypeList &&_ffgd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dcda +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bgcee :=_cdgc (_ffgd );_cbbc :=[]float64 {};_gcad :=0.0;for _ ,_adee :=range _bgcee {for _ ,_gcfb :=range _adee {if _gcfb .Type ==ResultTypeNumber &&!_gcfb .IsBoolean {_dgbc :=float64 (int (_gcfb .ValueNumber ));if _dgbc < _gcad {return nil ,MakeErrorResultType (ErrorTypeNum ,_dcda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_cbbc =append (_cbbc ,_dgbc );_gcad =_dgbc ;}else {return nil ,MakeErrorResult (_dcda +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_cbbc )!=_aacf {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_cedf ,_cbbc },MakeEmptyResult ();};const _dfbff =57351;type ivr struct{};const _fgdcd =57360;

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_gdc :=_ae .Now ();_ ,_efaa :=_gdc .Zone ();_gbdf :=_cge +float64 (_gdc .Unix ()+int64 (_efaa ))/86400;return MakeNumberResult (_gbdf );};type countMode byte ;

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func _gdad (_cgb int )int {if _cgb < 1900{if _cgb < 30{_cgb +=2000;}else {_cgb +=1900;};};return _cgb ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_bfcdc VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ddaae :=_bfcdc .verticalRangeReference ();if _ebadb ,_ecgfb :=ev .GetFromCache (_ddaae );_ecgfb {return _ebadb ;};_cbeg ,_eecgg :=_aabdc (ctx ,_bfcdc ._eaabd ,_bfcdc ._ecedc );_feeb :=_fbcbg (ctx ,ev ,_cbeg ,_eecgg );ev .SetCache (_ddaae ,_feeb );return _feeb ;};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_gdgb *ivr )GetLabelPrefix (cellRef string )string {return ""};var _cbbd =map[string ]Function {};func _becdb (_egc ,_cedg ,_agcd ,_gebb ,_afec ,_abcc float64 ,_accag int )(float64 ,Result ){_adce :=int (_abcc );_dgbba :=_bfff (_egc ,_cedg ,_adce ,_accag );_facg :=_fee (_egc ,_cedg ,_adce ,_accag )/_dgbba ;_degc ,_cebcb :=_fae (_egc ,_cedg ,_adce ,_accag );if _cebcb .Type ==ResultTypeError {return 0,_cebcb ;};_gcdf :=_cgfg (_egc ,_cedg ,_adce ,_accag );_bagca :=_afec /_de .Pow (1+_gebb /_abcc ,_degc -1+_facg );_bagca -=100*_agcd /_abcc *_gcdf /_dgbba ;_eaef :=100*_agcd /_abcc ;_bfee :=1+_gebb /_abcc ;for _dcbff :=0.0;_dcbff < _degc ;_dcbff ++{_bagca +=_eaef /_de .Pow (_bfee ,_dcbff +_facg );};return _bagca ,MakeEmptyResult ();};var _aafb ,_acbf ,_gabc ,_cfef ,_cbbcb ,_cgeb ,_fceb ,_ecace ,_aggb ,_ffab ,_defa ,_cgaaa ,_fea ,_baagd ,_gcfda *_db .Regexp ;func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdbb :=args [0].AsNumber ();if _cdbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgdbd :=float64 (0);if len (args )> 1{_fbbg :=args [1].AsNumber ();if _fbbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgdbd =_fbbg .ValueNumber ;};_ecce :=_cdbb .ValueNumber ;_ecbd :=1.0;if _dgdbd >=0{_ecbd =_de .Pow (1/10.0,_dgdbd );}else {return MakeNumberResult (0);};_ecce ,_cebg :=_de .Modf (_ecce /_ecbd );_gdee :=0.99999;if _cebg > _gdee {_ecce ++;}else if _cebg < -_gdee {_ecce --;};_ =_cebg ;return MakeNumberResult (_ecce *_ecbd );};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_fcbf :=len (args );if _fcbf !=4&&_fcbf !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbad ,_bbbaa ,_fcfga :=_eecg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _fcfga .Type ==ResultTypeError {return _fcfga ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agge :=args [2].ValueNumber ;if _agge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_fgdg :=args [3].ValueNumber ;if _fgdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_gcacd :=0;if _fcbf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcacd =int (args [4].ValueNumber );if !_adda (_gcacd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_ggbfd ,_fcfga :=_efg (_bbad ,_bbbaa ,_gcacd );if _fcfga .Type ==ResultTypeError {return _fcfga ;};return MakeNumberResult (_fgdg *(1-_agge *_ggbfd ));};

// Bool is a boolean expression.
type Bool struct{_ffe bool };func (_fbe *evCache )GetFromCache (key string )(Result ,bool ){_fbe ._ccd .Lock ();_fcg ,_bgf :=_fbe ._facc [key ];_fbe ._ccd .Unlock ();return _fcg ,_bgf ;};type node struct{_dbddb tokenType ;_ecfd string ;};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_faggd :=args [0];if _faggd .Type ==ResultTypeError {return _faggd ;};if _faggd .Type !=ResultTypeString &&_faggd .Type !=ResultTypeNumber &&_faggd .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ggbg :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_daebe :=int (args [1].ValueNumber );if _daebe < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcceb :=int (args [2].ValueNumber );if _fcceb < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_edda :=len (_ggbg );if _daebe > _edda {return MakeStringResult ("");};_daebe --;_bgegf :=_daebe +_fcceb ;if _bgegf > _edda {return MakeStringResult (_ggbg [_daebe :]);}else {return MakeStringResult (_ggbg [_daebe :_bgegf ]);};};

// FunctionCall is a function call expression.
type FunctionCall struct{_afebc string ;_gcec []Expression ;};func _defg (_deaa int )string {if _deaa >=0&&_deaa < len (_cbecf ){if _cbecf [_deaa ]!=""{return _cbecf [_deaa ];};};return _d .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_deaa );};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_ebcd HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fcaab :=_ebcd .horizontalRangeReference ();if _efcae ,_ddedf :=ev .GetFromCache (_fcaab );_ddedf {return _efcae ;};_ebeae ,_gbbg :=_fbbga (ctx ,_ebcd ._dacd ,_ebcd ._fcfdd );_eebdf :=_fbcbg (ctx ,ev ,_ebeae ,_gbbg );ev .SetCache (_fcaab ,_eebdf );return _eebdf ;};

// Reference returns an invalid reference for Number.
func (_bedd Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _ffcc ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";func _cgcbg (_gcdd ,_dfaeg Reference )string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_gcdd .Value ,_dfaeg .Value );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Reference returns a string reference value to a cell.
func (_abb CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_abb ._bee };};var _cgag []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};func (_ccacg *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};func _bfffc (_gbfd string ,_dbdd _ae .Time )(_ae .Time ,error ){_eebb ,_ ,_fbea :=_c .ParseFloat (_gbfd ,10,128,_c .ToNearestEven );if _fbea !=nil {return _ae .Time {},_fbea ;};_caef :=new (_c .Float );_caef .SetUint64 (uint64 (24*_ae .Hour ));_eebb .Mul (_eebb ,_caef );_dgcb ,_ :=_eebb .Uint64 ();_ggeb :=_dbdd .Add (_ae .Duration (_dgcb ));return _bedb (_ggeb ),nil ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_dgea :e }};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_faecd PrefixRangeExpr )Update (q *_dbg .UpdateQuery )Expression {_baabd :=_faecd ;_edaa :=_faecd ._cadcg .String ();if _edaa ==q .SheetToUpdate {_gefaf :=*q ;_gefaf .UpdateCurrentSheet =true ;_baabd ._faag =_faecd ._faag .Update (&_gefaf );_baabd ._gffdg =_faecd ._gffdg .Update (&_gefaf );};return _baabd ;};func _dec ()evCache {_daa :=evCache {};_daa ._facc =make (map[string ]Result );_daa ._ccd =&_dc .Mutex {};return _daa ;};const _cggdg =57369;type durationArgs struct{_cgbaa float64 ;_acb float64 ;_ffbb float64 ;_bfd float64 ;_gefe float64 ;_fcdf int ;};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _dafa (args ,_bcgc )};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_dgce :=args [0];if _dgce .Type !=ResultTypeArray &&_dgce .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ggdba :=_dgce .ValueArray ;if len (_ggdba )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_ggdba )));};

// Reference returns an invalid reference for EmptyExpr.
func (_gfgd EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// IsDBCS returns false for the invalid reference context.
func (_bfgg *ivr )IsDBCS ()bool {return false };

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_dcgb :=len (args );if _dcgb !=4&&_dcgb !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_agbf ,_gcee :=_dfcd (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _gcee .Type ==ResultTypeError {return _gcee ;};_gcce ,_gcee :=_dfcd (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _gcee .Type ==ResultTypeError {return _gcee ;};if _agbf >=_gcce {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_afg :=args [2].ValueNumber ;if _afg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afea :=args [3].ValueNumber ;if _afea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbe :=0;if _dcgb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbe =int (args [4].ValueNumber );if !_adda (_cbe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_dceg ,_gcee :=_efg (_agbf ,_gcce ,_cbe );if _gcee .Type ==ResultTypeError {return _gcee ;};return MakeNumberResult (_afea *_afg *_dceg );};func _ffac (_eead ,_affd []float64 ,_daef float64 )float64 {_efcb :=_daef +1;_bgfb :=0.0;_agebb :=len (_eead );_gcfe :=_affd [0];for _ddc :=1;_ddc < _agebb ;_ddc ++{_gae :=(_affd [_ddc ]-_gcfe )/365;_bgfb -=_gae *_eead [_ddc ]/_de .Pow (_efcb ,_gae +1);};return _bgfb ;};func _eebd (_dddf []Result ,_befed bool )(float64 ,float64 ){_ebggc :=0.0;_gfcf :=0.0;for _ ,_bagd :=range _dddf {switch _bagd .Type {case ResultTypeNumber :if _befed ||!_bagd .IsBoolean {_gfcf +=_bagd .ValueNumber ;_ebggc ++;};case ResultTypeList ,ResultTypeArray :_dbbe ,_agffg :=_eebd (_bagd .ListValues (),_befed );_gfcf +=_dbbe ;_ebggc +=_agffg ;case ResultTypeString :if _befed {_ebggc ++;};case ResultTypeEmpty :};};return _gfcf ,_ebggc ;};const _gcde =57367;var InvalidReferenceContext =&ivr {};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eadg :=args [0].AsNumber ();if _eadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bead :=float64 (1);if _eadg .ValueNumber < 0{_bead =-1;};if len (args )> 1{_cfgfg :=args [1].AsNumber ();if _cfgfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bead =_de .Abs (_cfgfg .ValueNumber );};if len (args )==1{return MakeNumberResult (_de .Ceil (_eadg .ValueNumber ));};_dbeb :=_eadg .ValueNumber ;_dbeb ,_fecb :=_de .Modf (_dbeb /_bead );if _fecb !=0{if _eadg .ValueNumber > 0{_dbeb ++;};};return MakeNumberResult (_dbeb *_bead );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_bgfa :=len (args );if _bgfa < 4||_bgfa > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gefc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfgf :=args [1].ValueNumber ;if _cfgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acgd :=args [2].ValueNumber ;if _acgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ffba :=args [3].ValueNumber ;_fbcd :=0.0;if _bgfa > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbcd =args [4].ValueNumber ;};_bace :=0;if _bgfa ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bace =int (args [5].ValueNumber );if _bace !=0{_bace =1;};};return MakeNumberResult (_ccaf (_gefc ,_cfgf ,_acgd ,_ffba ,_fbcd ,_bace ));};func _ca (_cca string ,_eb uint32 )string {_aca :=_af .ColumnToIndex (_cca );if _aca ==_eb {return "\u0023\u0052\u0045F\u0021";}else if _aca > _eb {return _af .IndexToColumn (_aca -1);}else {return _cca ;};};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gafdg :=args [0].AsNumber ();if _gafdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _ecdf float64 ;_cdac :=args [1].AsNumber ();if _cdac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ecdf =_cdac .ValueNumber ;if _ecdf < 0&&_gafdg .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_acaf :=_gafdg .ValueNumber ;_acaf ,_dgaf :=_de .Modf (_acaf /_ecdf );if _dgaf !=0{if _gafdg .ValueNumber < 0&&_dgaf < 0{_acaf --;};};return MakeNumberResult (_acaf *_ecdf );};func _bfff (_gfgg ,_bbca float64 ,_cada ,_gffff int )float64 {_fcfg :=_gdd (_gfgg );_eggd :=_gdd (_bbca );if _gffff ==1{_bgg :=_dbdaf (_fcfg ,_eggd ,_cada ,1);_dbda :=_bgg .AddDate (0,12/_cada ,0);return _efae (_bgg ,_dbda ,_gffff );};return float64 (_gdg (0,_gffff ))/float64 (_cada );};const _gbegd =57377;

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbcf :=_ae .Now ();_ ,_ace :=_fbcf .Zone ();_cbcga :=_fda (_eed ,_fbcf .Unix ()+int64 (_ace ))+1;return MakeNumberResult (_cbcga );};const _afc ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func (_ffebf Result )String ()string {return _ffebf .Value ()};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_dgcgb ,_eedf ,_bfgd :=_ggea (args );if _bfgd .Type ==ResultTypeError {return _bfgd ;};return MakeNumberResult (_edbbe (_dgcgb )/_eedf );};type tokenType int ;const _bbba ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;const _fgbfe =57365;func _fbgee (_ceda Result ,_fdfc *criteriaParsed )bool {if _ceda .Type ==ResultTypeEmpty {return false ;};if _fdfc ._bcddd {return _ceda .ValueNumber ==_fdfc ._caae ;}else {_cccg :=_bf .ToLower (_ceda .ValueString );return _fdfc ._ebcfb ==_cccg ||_efa .Match (_fdfc ._ebcfb ,_cccg );};};

// Update returns the same object as updating sheet references does not affect Error.
func (_fbg Error )Update (q *_dbg .UpdateQuery )Expression {return _fbg };func (_bdfcf *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };func (_bfceg PrefixVerticalRange )verticalRangeReference (_bfbff string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bfbff ,_bfceg ._dfdbg ,_bfceg ._fdga );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_bgce ,_cbbb :=_gfde (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _cbbb .Type ==ResultTypeError {return _cbbb ;};return MakeNumberResult (_fee (_bgce ._gfegf ,_bgce ._adbd ,_bgce ._dfbc ,_bgce ._cdef ));};var _cdcea =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Eval evaluates and returns the result of a sheet expression.
func (_gedde SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcge :=args [0].AsNumber ();if _fcge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbdb :=args [1].AsNumber ();if _bbdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_de .Pow (_fcge .ValueNumber ,_bbdb .ValueNumber ));};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_fbbcd ,_facbaa :=_fbfgf ("\u0046\u0049\u004e\u0044",args );if _facbaa .Type !=ResultTypeEmpty {return _facbaa ;};_ddbeb :=_fbbcd ._aegg ;if _ddbeb ==""{return MakeNumberResult (1.0);};_aefac :=_fbbcd ._dfag ;_cccfd :=_fbbcd ._baed -1;_fcddb :=1;_adacb :=0;for _gcada :=range _aefac {if _gcada !=0{_cggab :=1;if _gcada -_adacb > 1{_cggab =2;};_fcddb +=_cggab ;};if _fcddb > _cccfd {_ffda :=_bf .Index (_aefac [_gcada :],_ddbeb );if _ffda ==0{return MakeNumberResult (float64 (_fcddb ));};};_adacb =_gcada ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;func _gbdec (_gaae string )string {_gaae =_bf .Replace (_gaae ,"\u000a","\u005c\u006e",-1);_gaae =_bf .Replace (_gaae ,"\u000d","\u005c\u0072",-1);_gaae =_bf .Replace (_gaae ,"\u0009","\u005c\u0074",-1);return _gaae ;};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// String returns a string representation of CellRef.
func (_abf CellRef )String ()string {return _abf ._bee };

// Eval evaluates and returns the result of the cell reference.
func (_bgc CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_bgc ._bee ,ev )};var _aefa =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_ggdbf :=len (args );if _ggdbf < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ggdbf > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eced :=args [0];_cbcb :=args [1];if _cbcb .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ebbeb :=args [2].AsNumber ();if _ebbeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbgbd :=false ;if _ggdbf ==4&&args [3].Type !=ResultTypeEmpty {_fceaa :=args [3].AsNumber ();if _fceaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _fceaa .ValueNumber ==0{_fbgbd =true ;};};_aae :=int (_ebbeb .ValueNumber )-1;_dfcb :=-1;_gccd :=false ;_deacb :for _deeg ,_dded :=range _cbcb .ValueArray {if len (_dded )==0{continue ;};_bbge :=_dded [0];switch _agfe (_bbge ,_eced ,false ,_fbgbd ){case _bffbe :_dfcb =_deeg ;case _gbae :_dfcb =_deeg ;_gccd =true ;break _deacb ;};};if _dfcb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_baee :=_cbcb .ValueArray [_dfcb ];if _aae < 0||_aae >=len (_baee ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gccd ||!_fbgbd {return _baee [_aae ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ggca :=args [0].AsNumber ();if _ggca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcge :=_de .Signbit (_ggca .ValueNumber );_bbdg ,_efgg :=_de .Modf ((_ggca .ValueNumber -1)/2);_cbedc :=_bbdg *2+1;if _efgg !=0{if !_gcge {_cbedc +=2;}else {_cbedc -=2;};};return MakeNumberResult (_cbedc );};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ega :=_bf .ToLower (args [0].ValueString );if !_fgeg (_ega ){_ ,_ ,_ ,_gdcf ,_agg :=_dagg (_ega );if _agg .Type ==ResultTypeError {_agg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _agg ;};if _gdcf {return MakeNumberResult (0);};};_bga ,_ddb ,_cgdd ,_ffa ,_ ,_bbc :=_bdd (_ega );if _bbc .Type ==ResultTypeError {return _bbc ;};_dga :=_bgb (float64 (_bga ),float64 (_ddb ),_cgdd );if _ffa {_dga +=0.5;}else if _dga >=1{_dga -=float64 (int (_dga ));};return MakeNumberResult (_dga );};func _gdg (_bbg ,_bbfc int )int {switch _bbfc {case 1:if _gegg (_bbg ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};

// Reference returns a string reference value to an expression with prefix.
func (_agbag PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_gdcff :=_agbag ._begee .Reference (ctx ,ev );_dege :=_agbag ._gefff .Reference (ctx ,ev );if _gdcff .Type ==ReferenceTypeSheet &&_dege .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_gdcff .Value +"\u0021"+_dege .Value };};return ReferenceInvalid ;};

// String returns a string representation for Negate.
func (_fccfc Negate )String ()string {return "\u002d"+_fccfc ._dgea .String ()};func _dee (_fgd string ,_dcg *_dbg .UpdateQuery )string {_bcc ,_fdba :=_af .ParseCellReference (_fgd );if _fdba !=nil {return "\u0023\u0052\u0045F\u0021";};if _dcg .UpdateType ==_dbg .UpdateActionRemoveColumn {_ccc :=_dcg .ColumnIdx ;_gea :=_bcc .ColumnIdx ;if _gea < _ccc {return _fgd ;}else if _gea ==_ccc {return "\u0023\u0052\u0045F\u0021";}else {return _bcc .Update (_dbg .UpdateActionRemoveColumn ).String ();};};return _fgd ;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func (_dbbf node )String ()string {return _d .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_dbbf ._dbddb ,_gbdec (string (_dbbf ._ecfd )));};type xargs struct{_ccae []float64 ;_gdeb []float64 ;};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_egff :=args [0].AsNumber ();if _egff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggbbf :=float64 (1);if _egff .ValueNumber < 0{_ggbbf =-1;};if len (args )> 1{_dddd :=args [1].AsNumber ();if _dddd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_ggbbf =_de .Abs (_dddd .ValueNumber );};if len (args )==1{return MakeNumberResult (_de .Floor (_egff .ValueNumber ));};_deecd :=_egff .ValueNumber ;_deecd ,_ddaa :=_de .Modf (_deecd /_ggbbf );if _ddaa !=0{if _egff .ValueNumber < 0{_deecd --;};};return MakeNumberResult (_deecd *_ggbbf );};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};func (_adffc *noCache )GetFromCache (key string )(Result ,bool ){return _dacf ,false };const _daga =2;

// Reference returns a string reference value to a horizontal range.
func (_agcg HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_agcg .horizontalRangeReference ()};};var _fbbe =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _gdd (_ecfe float64 )_ae .Time {_bcd :=int64 ((_ecfe -_cge )*_bgdf );return _ae .Unix (0,_bcd ).UTC ();};const _cagab =57378;var _gafafc =[...]int {-1,1,1,-1,-2,0};func _cadg (_gbfb ,_bebf _ae .Time ,_dead int )_ae .Time {_dcfc :=_ae .Date (_gbfb .Year (),_bebf .Month (),_bebf .Day (),0,0,0,0,_ae .UTC );if _dcfc .After (_gbfb ){_dcfc =_dcfc .AddDate (-1,0,0);};for !_dcfc .After (_gbfb ){_dcfc =_dcfc .AddDate (0,12/_dead ,0);};return _dcfc ;};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _b .Reader )Expression {_ffcb :=&plex {_bgfec :LexReader (r )};_fcfdeg (_ffcb );if _ffcb ._ecgd !=""{return nil ;};return _ffcb ._cgccbc ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};var _cegg =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };func _bdc (_gce ,_gbag _ae .Time )bool {_gafb :=_gce .Unix ();_aedd :=_gbag .Unix ();_ggbb :=_gce .Year ();_eba :=_eecc (_ggbb ,_ae .March ,1);if _gegg (_ggbb )&&_gafb < _eba &&_aedd >=_eba {return true ;};var _facb =_gbag .Year ();var _cafd =_eecc (_facb ,_ae .March ,1);return (_gegg (_facb )&&_aedd >=_cafd &&_gafb < _cafd );};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dddc :=args [0].ValueNumber ;if _dddc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gegc :=args [1].ValueNumber ;if _gegc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcbff :=args [2].ValueNumber ;if _fcbff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_de .Pow (_fcbff /_gegc ,1/_dddc )-1);};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_eaec Result )ListValues ()[]Result {if _eaec .Type ==ResultTypeArray {_acgb :=[]Result {};for _ ,_ageea :=range _eaec .ValueArray {for _ ,_gcbbc :=range _ageea {_acgb =append (_acgb ,_gcbbc );};};return _acgb ;};if _eaec .Type ==ResultTypeList {return _eaec .ValueList ;};return nil ;};func _bgfg (_adf string ,_dggb func (_aeca float64 )float64 )Function {return func (_bedg []Result )Result {if len (_bedg )!=1{return MakeErrorResult (_adf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dcgf :=_bedg [0].AsNumber ();switch _dcgf .Type {case ResultTypeNumber :_deaf :=_dggb (_dcgf .ValueNumber );if _de .IsNaN (_deaf ){return MakeErrorResult (_adf +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _de .IsInf (_deaf ,0){return MakeErrorResult (_adf +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_deaf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_adf +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _dcgf ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_adf ,_dcgf .Type ));};};};

// String returns an empty string for EmptyExpr.
func (_gbd EmptyExpr )String ()string {return ""};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_ecfb :=len (args );if _ecfb < 3||_ecfb > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_defca :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daefc :=args [1].ValueNumber ;if _daefc ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgaa :=args [2].ValueNumber ;_gead :=0.0;if _ecfb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gead =args [3].ValueNumber ;};_daggb :=0.0;if _ecfb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_daggb =args [4].ValueNumber ;if _daggb !=0{_daggb =1;};};var _fbge float64 ;if _defca ==0{_fbge =(_cgaa +_gead )/_daefc ;}else {_fbeg :=_de .Pow (1+_defca ,_daefc );if _daggb ==1{_fbge =(_gead *_defca /(_fbeg -1)+_cgaa *_defca /(1-1/_fbeg ))/(1+_defca );}else {_fbge =_gead *_defca /(_fbeg -1)+_cgaa *_defca /(1-1/_fbeg );};};return MakeNumberResult (-_fbge );};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_geff :=args [0].ValueNumber ;_bccb :=args [1].ValueNumber ;if _bccb < _geff {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _bccb ==_geff {return MakeNumberResult (0);};_dae :=_bf .ToLower (args [2].ValueString );if _dae =="\u0064"{return MakeNumberResult (_bccb -_geff );};_abfd :=_gdd (_geff );_cbb :=_gdd (_bccb );_beb ,_cbce ,_cddb :=_abfd .Date ();_fce ,_bgeg ,_gba :=_cbb .Date ();_fbab :=int (_cbce );_dcf :=int (_bgeg );var _cbcg float64 ;switch _dae {case "\u0079":_cbcg =float64 (_fce -_beb );if _dcf < _fbab ||(_dcf ==_fbab &&_gba < _cddb ){_cbcg --;};case "\u006d":_cab :=_fce -_beb ;_gadb :=_dcf -_fbab ;if _gba < _cddb {_gadb --;};if _gadb < 0{_cab --;_gadb +=12;};_cbcg =float64 (_cab *12+_gadb );case "\u006d\u0064":_bea :=_dcf ;if _gba < _cddb {_bea --;};_cbcg =float64 (int (_bccb -_acf (_fce ,_bea ,_cddb )));case "\u0079\u006d":_cbcg =float64 (_dcf -_fbab );if _gba < _cddb {_cbcg --;};if _cbcg < 0{_cbcg +=12;};case "\u0079\u0064":_bdbf :=_fce ;if _dcf < _fbab ||(_dcf ==_fbab &&_gba < _cddb ){_bdbf --;};_cbcg =float64 (int (_bccb -_acf (_bdbf ,_fbab ,_cddb )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_cbcg );};var _cc =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_gcbc :=[]string {};for _eaag :=range _cbbd {_gcbc =append (_gcbc ,_eaag );};for _accc :=range _ffcdd {_gcbc =append (_gcbc ,_accc );};_a .Strings (_gcbc );return _gcbc ;};func _eecc (_dgbb int ,_eefc _ae .Month ,_gdf int )int64 {if _dgbb ==1900&&int (_eefc )<=2{_gdf --;};_acec :=_ae .Date (_dgbb ,_eefc ,_gdf ,0,0,0,0,_ae .UTC );return _acec .Unix ();};