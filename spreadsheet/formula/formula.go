//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_g "bytes";_aa "errors";_a "fmt";_aff "github.com/unidoc/unioffice/common/logger";_ag "github.com/unidoc/unioffice/internal/mergesort";_gb "github.com/unidoc/unioffice/internal/wildcard";_dg "github.com/unidoc/unioffice/spreadsheet/format";_fa "github.com/unidoc/unioffice/spreadsheet/reference";_af "github.com/unidoc/unioffice/spreadsheet/update";_b "io";_eg "math";_c "math/big";_da "math/rand";_f "regexp";_ed "sort";_ae "strconv";_ef "strings";_ea "sync";_bg "time";_e "unicode";);func _aaec (_gaefa ,_ecce float64 )float64 {_gaefa =_eg .Trunc (_gaefa );_ecce =_eg .Trunc (_ecce );if _gaefa ==0{return _ecce ;};if _ecce ==0{return _gaefa ;};for _gaefa !=_ecce {if _gaefa > _ecce {_gaefa =_gaefa -_ecce ;}else {_ecce =_ecce -_gaefa ;};};return _gaefa ;};const _dage =57344;

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_edg [][]Expression };

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_feffb (args ,_eecg ));};func _eacce (_cgdf float64 )bool {return _cgdf ==1||_cgdf ==2||_cgdf ==4};var _abaa =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_agee :=args [0].Ref ;if _agee .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_agee .Value ));};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gbcg :=args [0];if _gbcg .Type !=ResultTypeArray &&_gbcg .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cfeb :=_gbcg .ValueArray ;if len (_cfeb )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_cfeb [0])));};func _eac (_gd BinOpType ,_gdb []Result ,_aeef Result )Result {_gbc :=[]Result {};switch _aeef .Type {case ResultTypeNumber :_ca :=_aeef .ValueNumber ;for _ged :=range _gdb {_gdg :=_gdb [_ged ].AsNumber ();if _gdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gd {case BinOpTypePlus :_gbc =append (_gbc ,MakeNumberResult (_gdg .ValueNumber +_ca ));case BinOpTypeMinus :_gbc =append (_gbc ,MakeNumberResult (_gdg .ValueNumber -_ca ));case BinOpTypeMult :_gbc =append (_gbc ,MakeNumberResult (_gdg .ValueNumber *_ca ));case BinOpTypeDiv :if _ca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gbc =append (_gbc ,MakeNumberResult (_gdg .ValueNumber /_ca ));case BinOpTypeExp :_gbc =append (_gbc ,MakeNumberResult (_eg .Pow (_gdg .ValueNumber ,_ca )));case BinOpTypeLT :_gbc =append (_gbc ,MakeBoolResult (_gdg .ValueNumber < _ca ));case BinOpTypeGT :_gbc =append (_gbc ,MakeBoolResult (_gdg .ValueNumber > _ca ));case BinOpTypeEQ :_gbc =append (_gbc ,MakeBoolResult (_gdg .ValueNumber ==_ca ));case BinOpTypeLEQ :_gbc =append (_gbc ,MakeBoolResult (_gdg .ValueNumber <=_ca ));case BinOpTypeGEQ :_gbc =append (_gbc ,MakeBoolResult (_gdg .ValueNumber >=_ca ));case BinOpTypeNE :_gbc =append (_gbc ,MakeBoolResult (_gdg .ValueNumber !=_ca ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gd ));};};case ResultTypeString :_caa :=_aeef .ValueString ;for _fg :=range _gdb {_gc :=_gdb [_fg ].AsString ();if _gc .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _gd {case BinOpTypeLT :_gbc =append (_gbc ,MakeBoolResult (_gc .ValueString < _caa ));case BinOpTypeGT :_gbc =append (_gbc ,MakeBoolResult (_gc .ValueString > _caa ));case BinOpTypeEQ :_gbc =append (_gbc ,MakeBoolResult (_gc .ValueString ==_caa ));case BinOpTypeLEQ :_gbc =append (_gbc ,MakeBoolResult (_gc .ValueString <=_caa ));case BinOpTypeGEQ :_gbc =append (_gbc ,MakeBoolResult (_gc .ValueString >=_caa ));case BinOpTypeNE :_gbc =append (_gbc ,MakeBoolResult (_gc .ValueString !=_caa ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_gd ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_gbc );};func _gggbb (_efeda string )string {_efeda =_ef .Replace (_efeda ,"\u000a","\u005c\u006e",-1);_efeda =_ef .Replace (_efeda ,"\u000d","\u005c\u0072",-1);_efeda =_ef .Replace (_efeda ,"\u0009","\u005c\u0074",-1);return _efeda ;};

// String returns a string representation of String.
func (_dceaf String )String ()string {return "\u0022"+_dceaf ._bceg +"\u0022"};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dffdc :=args [0];if _dffdc .Type ==ResultTypeError ||_dffdc .Type ==ResultTypeString {return _dffdc ;};return _edgf ;};

// String returns a string representation of FunctionCall expression.
func (_bffa FunctionCall )String ()string {_cgda :=_g .Buffer {};_cgda .WriteString (_bffa ._aedfb );_cgda .WriteString ("\u0028");_fgeae :=len (_bffa ._eefggc )-1;for _adfe ,_cegec :=range _bffa ._eefggc {_cgda .WriteString (_cegec .String ());if _adfe !=_fgeae {_cgda .WriteString ("\u002c");};};_cgda .WriteString ("\u0029");return _cgda .String ();};func _cdefd (_fgdd []Result ,_gbbac rmode )Result {if len (_fgdd )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbad :=_fgdd [0].AsNumber ();if _gbad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abdde :=_fgdd [1].AsNumber ();if _abdde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_acgb :=_abdde .ValueNumber ;_eddd :=_gbad .ValueNumber ;_gafgc :=1.0;if _acgb > 0{_gafgc =_eg .Pow (1/10.0,_acgb );}else {_gafgc =_eg .Pow (10.0,-_acgb );};_eddd ,_eefg :=_eg .Modf (_eddd /_gafgc );switch _gbbac {case _bagg :const _ffcd =0.499999999;if _eefg >=_ffcd {_eddd ++;}else if _eefg <=-_ffcd {_eddd --;};case _ggdc :case _dafcf :if _eefg > 0{_eddd ++;}else if _eefg < 0{_eddd --;};};return MakeNumberResult (_eddd *_gafgc );};type durationArgs struct{_acc float64 ;_adea float64 ;_ffec float64 ;_cdcaa float64 ;_gaed float64 ;_bfa int ;};func _bced (_gdde ,_bfb int64 )float64 {return float64 (int (0.5+float64 ((_bfb -_gdde )/86400)))};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dgea :=args [0].AsNumber ();if _dgea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_beafb :=args [1].AsNumber ();if _beafb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_eg .Pow (_dgea .ValueNumber ,_beafb .ValueNumber ));};func _aege (_badc ,_eed ,_aaef ,_edag int )int {if _eed > _aaef {return 0;};if _bge (_edag ){return (_aaef -_eed +1)*30;};_dbbf :=0;for _dfgf :=_eed ;_dfgf <=_aaef ;_dfgf ++{_dbbf +=_cfa (_badc ,_dfgf );};return _dbbf ;};

// Reference returns a string reference value to a vertical range.
func (_bfdcef VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_bfdcef .verticalRangeReference ()};};

// Eval evaluates and returns a boolean.
func (_dda Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_dda ._cdb )};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eace :=args [0];switch _eace .Type {case ResultTypeError :return _eace ;case ResultTypeNumber ,ResultTypeString :return _abea (args [0]);case ResultTypeList :_efgd :=_eace .ValueList ;_aedf :=[]Result {};for _ ,_ebef :=range _efgd {_gabc :=_abea (_ebef );if _gabc .Type ==ResultTypeError {return _gabc ;};_aedf =append (_aedf ,_gabc );};return MakeListResult (_aedf );case ResultTypeArray :_eecbd :=_eace .ValueArray ;_afae :=[][]Result {};for _ ,_aecf :=range _eecbd {_dce :=[]Result {};for _ ,_bcge :=range _aecf {_fbbga :=_abea (_bcge );if _fbbga .Type ==ResultTypeError {return _fbbga ;};_dce =append (_dce ,_fbbga );};_afae =append (_afae ,_dce );};return MakeArrayResult (_afae );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};func (_ega BinOpType )String ()string {if _ega >=BinOpType (len (_fb )-1){return _a .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ega );};return _edd [_fb [_ega ]:_fb [_ega +1]];};const _faegd =57373;func _ebed (_bdcf ,_fbf float64 ,_fgca int )(float64 ,Result ){_cdeb ,_ddga :=_edgg (_bdcf ),_edgg (_fbf );_gfdd :=_cdeb .Unix ();_gbe :=_ddga .Unix ();if _gfdd ==_gbe {return 0,_edgf ;};_eafdb ,_gacae ,_acdd :=_cdeb .Date ();_egga ,_gbbg ,_aged :=_ddga .Date ();_gbbde ,_deef :=int (_gacae ),int (_gbbg );var _ebca ,_dea float64 ;switch _fgca {case 0:if _acdd ==31{_acdd --;};if _acdd ==30&&_aged ==31{_aged --;}else if _abcg :=_ffdc (_eafdb );_gbbde ==2&&((_abcg &&_acdd ==29)||(!_abcg &&_acdd ==28)){_acdd =30;if _eebe :=_ffdc (_egga );_deef ==2&&((_eebe &&_aged ==29)||(!_eebe &&_aged ==28)){_aged =30;};};_ebca =float64 ((_egga -_eafdb )*360+(_deef -_gbbde )*30+(_aged -_acdd ));_dea =360;case 1:_ebca =_fbf -_bdcf ;_dbcb :=_eafdb !=_egga ;if _dbcb &&(_egga !=_eafdb +1||_gbbde < _deef ||(_gbbde ==_deef &&_acdd < _aged )){_afbe :=0;for _acf :=_eafdb ;_acf <=_egga ;_acf ++{_afbe +=_faa (_acf ,1);};_dea =float64 (_afbe )/float64 (_egga -_eafdb +1);}else {if !_dbcb &&_ffdc (_eafdb ){_dea =366;}else {if _dbcb &&((_ffdc (_eafdb )&&(_gbbde < 2||(_gbbde ==2&&_acdd <=29)))||(_ffdc (_egga )&&(_deef > 2||(_deef ==2&&_aged ==29)))){_dea =366;}else {_dea =365;};};};case 2:_ebca =_fbf -_bdcf ;_dea =360;case 3:_ebca =_fbf -_bdcf ;_dea =365;case 4:if _acdd ==31{_acdd --;};if _aged ==31{_aged --;};_ebca =float64 ((_egga -_eafdb )*360+(_deef -_gbbde )*30+(_aged -_acdd ));_dea =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _ebca /_dea ,_edgf ;};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_gabbg ,_bebe :=_fadc (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _bebe .Type ==ResultTypeError {return _bebe ;};_ggcf :=_gabbg ._dabc ;_ggga :=_gabbg ._cgef ;_bcc :=_gabbg ._gecf ;_aca :=_gabbg ._ebba ;_ffbg :=_gabbg ._dbbg ;_feedg :=_gabbg ._aega ;_gbec :=_aafd (_ggcf ,_ggga ,_bcc ,0,_feedg );_cbed :=0.0;if _aca ==1{if _feedg ==0{_cbed =_gbec +_bcc *_ggcf ;}else {_cbed =_gbec ;};_aca ++;};for _ddaa :=_aca ;_ddaa <=_ffbg ;_ddaa ++{if _feedg ==1{_cbed +=_gbec -(_dfcbg (_ggcf ,_ddaa -2,_gbec ,_bcc ,1)-_gbec )*_ggcf ;}else {_cbed +=_gbec -_dfcbg (_ggcf ,_ddaa -1,_gbec ,_bcc ,0)*_ggcf ;};};return MakeNumberResult (_cbed );};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _aggg ,_gfa float64 ;switch args [0].Type {case ResultTypeNumber :_gfa =args [0].ValueNumber ;case ResultTypeString :_gege :=DateValue ([]Result {args [0]});if _gege .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gfa =_gege .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_aggg =args [1].ValueNumber ;if _aggg < 62&&_gfa >=62{_aggg --;};case ResultTypeString :_gdbd :=DateValue ([]Result {args [1]});if _gdbd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_aggg =_gdbd .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_bcee :=float64 (int (_gfa -_aggg ));return MakeNumberResult (_bcee );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_abbca Expression ;_debae Expression ;};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdef ,_edad ,_efb :=_cedg (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _efb .Type ==ResultTypeError {return _efb ;};_fagb ,_efb :=_ecb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _efb .Type ==ResultTypeError {return _efb ;};if _fagb >=_fdef {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_acfeg :=args [3];if _acfeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_acdg :=_acfeg .ValueNumber ;if _acdg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fcfcd :=args [4];if _fcfcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ggcd :=_fcfcd .ValueNumber ;if _ggcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_aece :=args [5];if _aece .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_afcc :=_aece .ValueNumber ;if _afcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cbfb :=args [6];if _cbfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dcgf :=float64 (int (_cbfb .ValueNumber ));if !_eacce (_dcgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_efeb :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_caff :=args [7];if _caff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_efeb =int (_caff .ValueNumber );if !_aeb (_efeb ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_decb ,_efb :=_ebed (_fagb ,_edad ,_efeb );if _efb .Type ==ResultTypeError {return _efb ;};_decb *=_dcgf ;_dfaa ,_efb :=_ebed (_fdef ,_edad ,_efeb );if _efb .Type ==ResultTypeError {return _efb ;};_dfaa *=_dcgf ;_ecec ,_efb :=_ebed (_fagb ,_fdef ,_efeb );if _efb .Type ==ResultTypeError {return _efb ;};_ecec *=_dcgf ;_acfg :=_afcc +_decb *100*_acdg /_dcgf ;_acfg /=_dfaa *_ggcd /_dcgf +1;_acfg -=_ecec *100*_acdg /_dcgf ;return MakeNumberResult (_acfg );};func _cgege (_fcabd Result ,_gcbe *criteriaParsed )bool {_bceb :=_ef .ToLower (_fcabd .ValueString );_bfffg :=_gcbe ._gdgc ._fbecg ;_cegga :=_gcbe ._gdgc ._aabff ;if _bfffg ==_fgfff {return _bceb ==_cegga ||_gb .Match (_cegga ,_bceb );};if _fcabd .Type !=ResultTypeEmpty {if _bceb ==_gcbe ._cfaa ||_gb .Match (_gcbe ._cfaa ,_bceb ){return true ;};if _ ,_aacg :=_ae .ParseFloat (_cegga ,64);_aacg ==nil {return false ;};switch _bfffg {case _fcdgc :return _bceb <=_cegga ;case _bcgba :return _bceb >=_cegga ;case _caeef :return _bceb < _cegga ;case _dbbcc :return _bceb > _cegga ;};};return false ;};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_baadg ,_faff ,_dadg :=_dffca (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _dadg .Type ==ResultTypeError {return _dadg ;};if _faff < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _baadg ==0{return MakeNumberResult (0);};_dcff :=_baadg < 0;if _dcff {_baadg =-_baadg ;};_ecdb :=args [0].Value ();_caca :=_ef .Split (_ecdb ,"\u002e");_dbgf :=float64 (int (_baadg ));_abdb :=_caca [1];_bdad :=len (_abdb );_dcdg :=int (_eg .Log10 (_faff ))+1;_cace :=float64 (_dcdg -_bdad );_fbdg ,_ceg :=_ae .ParseFloat (_abdb ,64);if _ceg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_fbdg *=_eg .Pow (10,_cace );_aaefa :=_dbgf +_fbdg /_faff ;if _dcff {_aaefa =-_aaefa ;};return MakeNumberResult (_aaefa );};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_adcgf ,_ffbcd :=_geba ("\u0046\u0049\u004e\u0044",args );if _ffbcd .Type !=ResultTypeEmpty {return _ffbcd ;};_dffb :=_adcgf ._edfac ;if _dffb ==""{return MakeNumberResult (1.0);};_gded :=_adcgf ._adef ;_fcagf :=_adcgf ._deegb -1;_ggfaa :=1;_fgfd :=0;for _dbdcg :=range _gded {if _dbdcg !=0{_fefae :=1;if _dbdcg -_fgfd > 1{_fefae =2;};_ggfaa +=_fefae ;};if _ggfaa > _fcagf {_bfgc :=_ef .Index (_gded [_dbdcg :],_dffb );if _bfgc ==0{return MakeNumberResult (float64 (_ggfaa ));};};_fgfd =_dbdcg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func (_afc *evCache )GetFromCache (key string )(Result ,bool ){_afc ._abg .Lock ();_eacc ,_age :=_afc ._gfd [key ];_afc ._abg .Unlock ();return _eacc ,_age ;};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_bdbe ,_abec ,_dbadf :=_gebeaf (from ,to );if _dbadf !=nil {_aff .Log .Debug (_dbadf .Error ());return NewError (_dbadf .Error ());};return Range {_bgge :_bdbe ,_cfge :_abec };};const _egcc =57354;

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_abggf :=args [0];if _abggf .Type !=ResultTypeNumber &&_abggf .Type !=ResultTypeString &&_abggf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_befdc :=args [1].ValueString ;switch _abggf .Type {case ResultTypeNumber :return MakeStringResult (_dg .Number (_abggf .ValueNumber ,_befdc ));case ResultTypeString :return MakeStringResult (_dg .String (_abggf .ValueString ,_befdc ));case ResultTypeEmpty :return MakeStringResult (_dg .Number (0,_befdc ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};func _cbfef (_egfb []Result )[]float64 {_bgffa :=make ([]float64 ,0);for _ ,_bcdff :=range _egfb {if _bcdff .Type ==ResultTypeEmpty {continue ;};_bcdff =_bcdff .AsNumber ();switch _bcdff .Type {case ResultTypeNumber :if !_bcdff .IsBoolean {_bgffa =append (_bgffa ,_bcdff .ValueNumber );};case ResultTypeList ,ResultTypeArray :_bgffa =append (_bgffa ,_cbfef (_bcdff .ListValues ())...);case ResultTypeString :default:_aff .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bcdff .Type );};};return _bgffa ;};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfcbg :=args [0].AsString ();if _gfcbg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_ecdf :=args [1].AsNumber ();if _ecdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcef :=_gfcbg .ValueString ;if len (_bcef )> 2&&(_ef .HasPrefix (_bcef ,"\u0030\u0078")||_ef .HasPrefix (_bcef ,"\u0030\u0058")){_bcef =_bcef [2:];};_dbbb ,_agbbd :=_ae .ParseInt (_bcef ,int (_ecdf .ValueNumber ),64);if _agbbd !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_dbbb ));};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gaaf :=args [0].AsNumber ();_dbgef :=args [1].AsNumber ();if _gaaf .Type !=ResultTypeNumber ||_dbgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dbgef .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_eg .Trunc (_gaaf .ValueNumber /_dbgef .ValueNumber ));};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fafe :=_ef .ToLower (args [0].ValueString );if !_gab (_fafe ){_ ,_ ,_ ,_dbg ,_bddd :=_eeg (_fafe );if _bddd .Type ==ResultTypeError {_bddd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _bddd ;};if _dbg {return MakeNumberResult (0);};};_abfd ,_gaf ,_fca ,_fbgf ,_ ,_gfda :=_cbd (_fafe );if _gfda .Type ==ResultTypeError {return _gfda ;};_aga :=_gbg (float64 (_abfd ),float64 (_gaf ),_fca );if _fbgf {_aga +=0.5;}else if _aga >=1{_aga -=float64 (int (_aga ));};return MakeNumberResult (_aga );};func (_fgfdg ResultType )String ()string {if _fgfdg >=ResultType (len (_ffbb )-1){return _a .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fgfdg );};return _fbeb [_ffbb [_fgfdg ]:_ffbb [_fgfdg +1]];};const _fffd ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// LastRow returns 0 for the invalid reference context.
func (_ddbdc *ivr )LastRow (colFrom string )int {return 0};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gbab :=args [0].AsString ();if _gbab .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_fdgg :="\u0041\u0031";if len (args )==2{_dedf :=args [1].Ref ;if _dedf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_fdgg =_dedf .Value ;};switch _gbab .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_aead ,_cgdcg :=_fa .ParseCellReference (_fdgg );if _cgdcg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fdgg );};_bbcf :="\u0024"+_aead .Column +"\u0024"+_ae .Itoa (int (_aead .RowIdx ));if _aead .SheetName !=""{_bbcf =_aead .SheetName +"\u0021"+_bbcf ;};return MakeStringResult (_bbcf );case "\u0063\u006f\u006c":_cgeg ,_acag :=_fa .ParseCellReference (_fdgg );if _acag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fdgg );};return MakeNumberResult (float64 (_cgeg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_gbcad :=_ef .Contains (ctx .GetFormat (_fdgg ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_gbcad );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bcgf :="\u0047";_fgbc :=ctx .GetFormat (_fdgg );if _fgbc =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_cgea .MatchString (_fgbc ){_bcgf ="\u0046\u0030";}else if _fgbc =="\u0030\u0025"{_bcgf ="\u0050\u0030";}else if _fgbc =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bcgf ="\u0044\u0032";}else if _fgbc =="\u004d\u004d\u002fY\u0059"{_bcgf ="\u0044\u0033";}else if _fgbc =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_fgbc =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bcgf ="\u0044\u0034";}else if _fgbc =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bcgf ="\u0044\u0035";}else if _fgbc =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bcgf ="\u0044\u0036";}else if _fgbc =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bcgf ="\u0044\u0037";}else if _fgbc =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bcgf ="\u0044\u0038";}else if _fgbc =="\u0048\u0048\u003aM\u004d"{_bcgf ="\u0044\u0039";}else if _edcg .MatchString (_fgbc ){_bcgf ="\u002e\u0030";}else if _fgea .MatchString (_fgbc ){_bcgf ="\u002e\u0030\u0028\u0029";}else if _cebee .MatchString (_fgbc ){_bcgf ="\u0043\u0030";}else if _bgfg .MatchString (_fgbc )||_acce .MatchString (_fgbc ){_bcgf ="\u0044\u0031";}else if _gfed :=_bfgff .FindStringSubmatch (_fgbc );len (_gfed )> 1{_bcgf ="\u0046"+_ae .Itoa (len (_gfed [1]));}else if _fccc :=_ddfbe .FindStringSubmatch (_fgbc );len (_fccc )> 1{_bcgf ="\u002e"+_ae .Itoa (len (_fccc [2]));}else if _cdgb :=_dbcf .FindStringSubmatch (_fgbc );len (_cdgb )> 1{_bcgf ="\u0050"+_ae .Itoa (len (_cdgb [2]));}else if _edaf :=_fdbgf .FindStringSubmatch (_fgbc );len (_edaf )> 1{_bcgf ="\u0043"+_gfge (_edaf ,1);}else if _daag :=_fafd .FindStringSubmatch (_fgbc );len (_daag )> 1{_bcgf ="\u0043"+_gfge (_daag ,1);}else if _bdddd :=_dfba .FindStringSubmatch (_fgbc );len (_bdddd )> 1{_bcgf ="\u002e"+_gfge (_bdddd ,1)+"\u0028\u0029";}else if _egge :=_afcgc .FindStringSubmatch (_fgbc );len (_egge )> 1{_bcgf ="\u002e"+_gfge (_egge ,1);}else if _eaec :=_ddgag .FindStringSubmatch (_fgbc );len (_eaec )> 1{_bcgf ="\u0053"+_gfge (_eaec ,3);};if _bcgf !="\u0047"&&_ef .Contains (_fgbc ,"\u005b\u0052\u0045D\u005d"){_bcgf +="\u002d";};return MakeStringResult (_bcgf );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_dcab :=ctx .GetFormat (_fdgg );if _ffgf .MatchString (_dcab ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_fdgg ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_gadf :=0.0;if ctx .GetLocked (_fdgg ){_gadf =1.0;};return MakeNumberResult (_gadf );case "\u0072\u006f\u0077":_efed ,_ggdbg :=_fa .ParseCellReference (_fdgg );if _ggdbg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fdgg );};return MakeNumberResult (float64 (_efed .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_gccbc ,_bdgf :=_fa .ParseCellReference (_fdgg );if _bdgf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fdgg );};if _gccbc .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_gccbc .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_gccbc .SheetName ).GetWidth (int (_gccbc .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_gbab .ValueString );};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_fgdf ,_dgdb ,_gaab :=_gebeaf (from ,to );if _gaab !=nil {_aff .Log .Debug (_gaab .Error ());return NewError (_gaab .Error ());};return PrefixRangeExpr {_acaga :pfx ,_cdec :_fgdf ,_aggf :_dgdb };};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_degff :=_ef .Split (v ,"\u003a");if len (_degff )!=2{return nil ;};_cbadg ,_ :=_ae .Atoi (_degff [0]);_ceffc ,_ :=_ae .Atoi (_degff [1]);if _cbadg > _ceffc {_cbadg ,_ceffc =_ceffc ,_cbadg ;};return PrefixHorizontalRange {_gfgb :pfx ,_bdadc :_cbadg ,_bgccb :_ceffc };};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gafed PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_fdaa :=_gafed ._cegab .Reference (ctx ,ev );switch _fdaa .Type {case ReferenceTypeSheet :if _ecfec (_fdaa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fdaa .Value ));};_edcf :=_gafed .verticalRangeReference (_fdaa .Value );if _dbce ,_bdec :=ev .GetFromCache (_edcf );_bdec {return _dbce ;};_aceb :=ctx .Sheet (_fdaa .Value );_aeedd ,_cebf :=_fdgc (_aceb ,_gafed ._eeaed ,_gafed ._abcad );_bgag :=_affa (_aceb ,ev ,_aeedd ,_cebf );ev .SetCache (_edcf ,_bgag );return _bgag ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdaa .Type ));};};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_bdagd ,_ddef ,_bgcg :=_ababa (args );if _bgcg .Type ==ResultTypeError {return _bgcg ;};return MakeNumberResult (_dbbgb (_bdagd )/_ddef );};var _ggb =[]*_f .Regexp {};func _dbbgb (_agec float64 )float64 {_fdbe :=float64 (1);for _gbcdb :=float64 (2);_gbcdb <=_agec ;_gbcdb ++{_fdbe *=_gbcdb ;};return _fdbe ;};func _bccb (_abdd ,_gaea ,_ecdd ,_gacc ,_bfdfb ,_bbba float64 ,_beaf int )(float64 ,Result ){_edgdgf :=int (_bbba );_ffdca :=_ggec (_abdd ,_gaea ,_edgdgf ,_beaf );_gdded :=_ead (_abdd ,_gaea ,_edgdgf ,_beaf )/_ffdca ;_bcgd ,_gcgce :=_acbff (_abdd ,_gaea ,_edgdgf ,_beaf );if _gcgce .Type ==ResultTypeError {return 0,_gcgce ;};_aed :=_cded (_abdd ,_gaea ,_edgdgf ,_beaf );_ffdcab :=_bfdfb /_eg .Pow (1+_gacc /_bbba ,_bcgd -1+_gdded );_ffdcab -=100*_ecdd /_bbba *_aed /_ffdca ;_eeea :=100*_ecdd /_bbba ;_efdd :=1+_gacc /_bbba ;for _bafg :=0.0;_bafg < _bcgd ;_bafg ++{_ffdcab +=_eeea /_eg .Pow (_efdd ,_bafg +_gdded );};return _ffdcab ,MakeEmptyResult ();};type tokenType int ;const _eea ="\u005e\u0028\u0028"+_gec +"\u007c"+_aba +"\u007c"+_gbd +"\u007c"+_efg +"\u0029\u0020\u0029\u003f";func _gab (_aeg string )bool {for _ ,_fdf :=range _ggb {_cad :=_fdf .FindStringSubmatch (_aeg );if len (_cad )> 1{return true ;};};return false ;};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_fd ,_eaf Expression ;_ab BinOpType ;};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_cgcg ,_bcgb :=_fadc (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _bcgb .Type ==ResultTypeError {return _bcgb ;};_bcfc :=_cgcg ._dabc ;_cfda :=_cgcg ._cgef ;_egeg :=_cgcg ._gecf ;_adcd :=_cgcg ._ebba ;_adb :=_cgcg ._dbbg ;_efad :=_cgcg ._aega ;_bac :=_aafd (_bcfc ,_cfda ,_egeg ,0,_efad );_bfab :=0.0;if _adcd ==1{if _efad ==0{_bfab =-_egeg ;_adcd ++;};};for _bbbb :=_adcd ;_bbbb <=_adb ;_bbbb ++{if _efad ==1{_bfab +=_dfcbg (_bcfc ,_bbbb -2,_bac ,_egeg ,1)-_bac ;}else {_bfab +=_dfcbg (_bcfc ,_bbbb -1,_bac ,_egeg ,0);};};_bfab *=_bcfc ;return MakeNumberResult (_bfab );};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_bfgee NamedRangeRef )Update (q *_af .UpdateQuery )Expression {return _bfgee };

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dbcg :=args [0].ValueNumber ;_ccf :=args [1].ValueNumber ;_cdc :=args [2].ValueNumber ;_dddc :=_gbg (_dbcg ,_ccf ,_cdc );if _dddc >=0{return MakeNumberResult (_dddc );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};type defEval struct{evCache ;_bgf bool ;};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfebf :=args [0];switch _cfebf .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_aagfa :=0.0;_dffgb :=0.0;for _ ,_cbgd :=range _cfebf .ValueString {_eead :=0.0;switch _cbgd {case 'I':_eead =1;case 'V':_eead =5;case 'X':_eead =10;case 'L':_eead =50;case 'C':_eead =100;case 'D':_eead =500;case 'M':_eead =1000;};_aagfa +=_eead ;switch {case _dffgb ==_eead &&(_dffgb ==5||_dffgb ==50||_dffgb ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_dffgb ==_eead :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _dffgb < _eead {_aagfa -=2*_dffgb ;};_dffgb =_eead ;};return MakeNumberResult (_aagfa );case ResultTypeError :return _cfebf ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cfebf .Type ));};};func init (){_dgg ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};func (_acebc PrefixVerticalRange )verticalRangeReference (_fdegd string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fdegd ,_acebc ._eeaed ,_acebc ._abcad );};func _eeba (_cbdf ,_eedc _bg .Time ,_ffc int )_bg .Time {_bcab :=_bg .Date (_cbdf .Year (),_eedc .Month (),_eedc .Day (),0,0,0,0,_bg .UTC );if _bcab .After (_cbdf ){_bcab =_bcab .AddDate (-1,0,0);};for !_bcab .After (_cbdf ){_bcab =_bcab .AddDate (0,12/_ffc ,0);};return _bcab ;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_aecec ,_gfgf :=_ae .ParseFloat (v ,64);if _gfgf !=nil {_aff .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_gfgf );};return Number {_adgc :_aecec };};func _gcec (_fcge []Result ,_affg string )(*durationArgs ,Result ){_cede :=len (_fcge );if _cede !=5&&_cede !=6{return nil ,MakeErrorResult (_affg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccfg ,_bef ,_gfcb :=_cedg (_fcge [0],_fcge [1],_affg );if _gfcb .Type ==ResultTypeError {return nil ,_gfcb ;};_ffee :=_fcge [2];if _ffee .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fbca :=_ffee .ValueNumber ;if _fbca < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_aag :=_fcge [3];if _aag .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dagc :=_aag .ValueNumber ;if _dagc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_ggbf :=_fcge [4];if _ggbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affg +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eabf :=float64 (int (_ggbf .ValueNumber ));if !_eacce (_eabf ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ffa :=0;if _cede ==6&&_fcge [5].Type !=ResultTypeEmpty {_baad :=_fcge [5];if _baad .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_affg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffa =int (_baad .ValueNumber );if !_aeb (_ffa ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_affg );};};return &durationArgs {_ccfg ,_bef ,_fbca ,_dagc ,_eabf ,_ffa },_edgf ;};const _cdfc =57363;const _gfg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_cbfd ,_ffgb ,_effd :=_dffca (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _effd .Type ==ResultTypeError {return _effd ;};if _ffgb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cbfd ==0{return MakeNumberResult (0);};_cdda :=_cbfd < 0;if _cdda {_cbfd =-_cbfd ;};_cabae :=float64 (int (_cbfd ));_gcc :=args [0].Value ();_ebdc :=_ef .Split (_gcc ,"\u002e");_fggfd :=0.0;if len (_ebdc )> 1{var _effdd error ;_dbda :=_ebdc [1];_fggfd ,_effdd =_ae .ParseFloat (_dbda ,64);if _effdd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_efea :=float64 (len (_dbda ));_fggfd /=_eg .Pow (10,_efea );};_gcda :=_fggfd *_ffgb /_eg .Pow (10,float64 (int (_eg .Log10 (_ffgb )))+1)+_cabae ;if _cdda {_gcda =-_gcda ;};return MakeNumberResult (_gcda );};

// Update updates references in the Range after removing a row/column.
func (_aeggfc Range )Update (q *_af .UpdateQuery )Expression {_gdddb :=_aeggfc ;if q .UpdateCurrentSheet {_gdddb ._bgge =_aeggfc ._bgge .Update (q );_gdddb ._cfge =_aeggfc ._cfge .Update (q );};return _gdddb ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_fcfc :=len (args );if (_fcfc !=2&&_fcfc !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afb :=0;if _fcfc ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_afb =int (args [2].ValueNumber );if !_aeb (_afb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdf :=args [1].ValueNumber ;_eef ,_bab :=_ebed (_ddf ,_bdf ,_afb );if _bab .Type ==ResultTypeError {return _bab ;};return MakeNumberResult (_eef );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dgeeg ,_gafec ,_afdb :=_cedg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _afdb .Type ==ResultTypeError {return _afdb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebeg :=_gafec -_dgeeg ;if _ebeg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_fegb :=args [2].ValueNumber ;if _fegb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_fegb *_ebeg /360));};

// String returns a string representation of PrefixExpr.
func (_edddb PrefixExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021%\u0073",_edddb ._abbca .String (),_edddb ._debae .String ());};

// Update returns the same object as updating sheet references does not affect Error.
func (_aea Error )Update (q *_af .UpdateQuery )Expression {return _aea };

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_ceaf PrefixVerticalRange )Update (q *_af .UpdateQuery )Expression {if q .UpdateType ==_af .UpdateActionRemoveColumn {_gafbf :=_ceaf ;_cfdf :=_ceaf ._cegab .String ();if _cfdf ==q .SheetToUpdate {_efbac :=q .ColumnIdx ;_gafbf ._eeaed =_gdgg (_ceaf ._eeaed ,_efbac );_gafbf ._abcad =_gdgg (_ceaf ._abcad ,_efbac );};return _gafbf ;};return _ceaf ;};

// String is a string expression.
type String struct{_bceg string };func _fdad (_abff Result ,_efee ,_ceaa string )(float64 ,Result ){switch _abff .Type {case ResultTypeEmpty :return 0,_edgf ;case ResultTypeNumber :return _abff .ValueNumber ,_edgf ;case ResultTypeString :_dfcfb ,_ffdbf :=_ae .ParseFloat (_abff .ValueString ,64);if _ffdbf !=nil {return 0,MakeErrorResult (_ceaa +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_efee );};return _dfcfb ,_edgf ;default:return 0,MakeErrorResult (_efee +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ceaa +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_dabd :=len (args );if _dabd !=4&&_dabd !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_gdgf ,_cacac ,_agff :=_cedg (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _agff .Type ==ResultTypeError {return _agff ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcfce :=args [2].ValueNumber ;if _fcfce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dbcgd :=args [3].ValueNumber ;if _dbcgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dagd :=0;if _dabd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dagd =int (args [4].ValueNumber );if !_aeb (_dagd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_dabde ,_agff :=_ebed (_gdgf ,_cacac ,_dagd );if _agff .Type ==ResultTypeError {return _agff ;};return MakeNumberResult (_fcfce /(1-_dbcgd *_dabde ));};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};func (_efdac *noCache )GetFromCache (key string )(Result ,bool ){return _edgf ,false };

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_bdfb Result )AsNumber ()Result {if _bdfb .Type ==ResultTypeString {_ggbfa ,_bggaa :=_ae .ParseFloat (_bdfb .ValueString ,64);if _bggaa ==nil {return MakeNumberResult (_ggbfa );};};if _bdfb .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bdfb ;};var _edgf Result =MakeEmptyResult ();

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bcfa :=args [0].Ref ;if _bcfa .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_acea ,_gbdfc :=_fa .ParseCellReference (_bcfa .Value );if _gbdfc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bcfa .Value );};return MakeNumberResult (float64 (_acea .RowIdx ));};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bgcf :=int (args [0].ValueNumber );if _bgcf < 0||_bgcf >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _bgcf <=1899{_bgcf +=1900;};_dgga :=_bg .Month (args [1].ValueNumber );_ggdf :=int (args [2].ValueNumber );_gace :=_gfgc (_bgcf ,_dgga ,_ggdf );_eae :=_bced (_cc ,_gace )+1;if _eae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_eae );};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_dbd ,_ad :=_ae .ParseBool (v );if _ad !=nil {_aff .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_ad );};return Bool {_cdb :_dbd };};const _ddbde =57367;

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};const _ccde =57366;const _edd ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";var _dafcg =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func _abdbe (_fdda Result ,_dfgg *criteriaParsed )bool {if _fdda .Type ==ResultTypeEmpty {return false ;};if _dfgg ._edfb {return _fdda .ValueNumber ==_dfgg ._cfeeg ;}else {_fcb :=_ef .ToLower (_fdda .ValueString );return _dfgg ._cfaa ==_fcb ||_gb .Match (_dfgg ._cfaa ,_fcb );};};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_gffe string };func _geeb (_dgef [][]Result )float64 {if len (_dgef )==2{_gggaf :=_dgef [0][0].AsNumber ();_faaf :=_dgef [0][1].AsNumber ();_cbadf :=_dgef [1][0].AsNumber ();_bfff :=_dgef [1][1].AsNumber ();if _gggaf .Type !=ResultTypeNumber ||_faaf .Type !=ResultTypeNumber ||_cbadf .Type !=ResultTypeNumber ||_bfff .Type !=ResultTypeNumber {return _eg .NaN ();};return _gggaf .ValueNumber *_bfff .ValueNumber -_cbadf .ValueNumber *_faaf .ValueNumber ;};_fecad :=float64 (0);_dcb :=float64 (1);for _gafb :=range _dgef {_fecad +=_dcb *_dgef [0][_gafb ].ValueNumber *_geeb (_bgfc (_dgef ,_gafb ));_dcb *=-1;};return _fecad ;};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgdcc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caefd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgca :=args [2].ValueNumber ;if _cgca ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_bgdcc -_caefd )/_cgca );};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _fcbea (args ,true )};var _ddbd =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_beaab :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_beaab =int (args [1].ValueNumber );if _beaab < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _beaab ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_bdae :=args [0].Value ();if _beaab > len (_bdae ){return MakeStringResult (_bdae );};return MakeStringResult (_bdae [0:_beaab ]);};var _dgae *_da .Rand ;var _bggf []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cacc :=args [0].AsNumber ();if _cacc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gffa ,_eeac :=_eg .Modf (_cacc .ValueNumber );if _eeac < 0{_gffa --;};return MakeNumberResult (_gffa );};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_abba :=_gccf (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _abba .Type !=ResultTypeEmpty {return _abba ;};_ggad :=_degfa (args );return MakeNumberResult (float64 (len (_ggad )));};func _fad (_fe string ,_ff *_af .UpdateQuery )string {_ebb ,_fec :=_fa .ParseCellReference (_fe );if _fec !=nil {return "\u0023\u0052\u0045F\u0021";};if _ff .UpdateType ==_af .UpdateActionRemoveColumn {_gbbd :=_ff .ColumnIdx ;_egdd :=_ebb .ColumnIdx ;if _egdd < _gbbd {return _fe ;}else if _egdd ==_gbbd {return "\u0023\u0052\u0045F\u0021";}else {return _ebb .Update (_af .UpdateActionRemoveColumn ).String ();};};return _fe ;};var _fb =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_bede PrefixRangeExpr )Update (q *_af .UpdateQuery )Expression {_abbf :=_bede ;_ebgaa :=_bede ._acaga .String ();if _ebgaa ==q .SheetToUpdate {_cggfc :=*q ;_cggfc .UpdateCurrentSheet =true ;_abbf ._cdec =_bede ._cdec .Update (&_cggfc );_abbf ._aggf =_bede ._aggf .Update (&_cggfc );};return _abbf ;};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_fecag :=MakeNumberResult (0);for _ ,_egafe :=range args {_egafe =_egafe .AsNumber ();switch _egafe .Type {case ResultTypeNumber :_fecag .ValueNumber +=_egafe .ValueNumber ;case ResultTypeList ,ResultTypeArray :_geae :=Sum (_egafe .ListValues ());if _geae .Type !=ResultTypeNumber {return _geae ;};_fecag .ValueNumber +=_geae .ValueNumber ;case ResultTypeString :case ResultTypeError :return _egafe ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egafe .Type ));};};return _fecag ;};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _fgf (_baa string )bool {for _ ,_cga :=range _be {_ade :=_cga .FindStringSubmatch (_baa );if len (_ade )> 1{return true ;};};return false ;};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgbf :=args [0].AsNumber ();if _bgbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _ebedbb float64 ;_dabdb :=args [1].AsNumber ();if _dabdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebedbb =_dabdb .ValueNumber ;if _ebedbb < 0&&_bgbf .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_cbce :=_bgbf .ValueNumber ;_cbce ,_gggdb :=_eg .Modf (_cbce /_ebedbb );if _gggdb !=0{if _bgbf .ValueNumber < 0&&_gggdb < 0{_cbce --;};};return MakeNumberResult (_cbce *_ebedbb );};type cmpResult int8 ;func _fcg (_dfc int )int {if _dfc < 1900{if _dfc < 30{_dfc +=2000;}else {_dfc +=1900;};};return _dfc ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgcb :=_cbfef (args );_ed .Float64s (_dgcb );var _fgafe float64 ;if len (_dgcb )%2==0{_fgafe =(_dgcb [len (_dgcb )/2-1]+_dgcb [len (_dgcb )/2])/2;}else {_fgafe =_dgcb [len (_dgcb )/2];};return MakeNumberResult (_fgafe );};var _bbgf =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};func _dbgb (_efgc Result ,_gaef int )[]Result {_bebf :=[]Result {};switch _efgc .Type {case ResultTypeList :_gceeg :=_efgc .ValueList ;_aaaa :=len (_gceeg );for _bgcc :=0;_bgcc < _gaef ;_bgcc ++{if _bgcc < _aaaa {_bebf =append (_bebf ,_gceeg [_bgcc ]);}else {_bebf =append (_bebf ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _abeb :=0;_abeb < _gaef ;_abeb ++{_bebf =append (_bebf ,_efgc );};};return _bebf ;};type plex struct{_ddgcg chan *node ;_cffd Expression ;_adeg string ;};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_bbbe :=len (args );if _bbbe < 5||_bbbe > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gggdc :=args [0].ValueNumber ;if _gggdc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edgef :=args [1].ValueNumber ;if _edgef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cafc :=args [2].ValueNumber ;if _cafc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cafc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbbc :=args [3].ValueNumber ;if _dbbc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbdfe :=args [4].ValueNumber ;if _dbbc > _gbdfe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _gbdfe > _cafc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_agcc :=2.0;if _bbbe > 5{if args [5].Type ==ResultTypeEmpty {_agcc =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agcc =args [5].ValueNumber ;if _agcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_gafeb :=false ;if _bbbe > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gafeb =args [6].ValueNumber !=0;};_ceac :=0.0;_gfdac :=_eg .Floor (_dbbc );_cbfg :=_eg .Ceil (_gbdfe );if _gafeb {for _fcef :=_gfdac +1;_fcef <=_cbfg ;_fcef ++{_fecgc :=_bbc (_gggdc ,_edgef ,_cafc ,_fcef ,_agcc );if _fcef ==_gfdac +1{_fecgc *=_eg .Min (_gbdfe ,_gfdac +1)-_dbbc ;}else if _fcef ==_cbfg {_fecgc *=_gbdfe +1-_cbfg ;};_ceac +=_fecgc ;};}else {_eagcd :=_cafc ;var _bcbe float64 ;if !_babba (_dbbc ,_eg .Floor (_dbbc )){if _agcc ==1{_fddbb :=_cafc /2;if _dbbc > _fddbb ||_babba (_dbbc ,_fddbb ){_bcbe =_dbbc -_fddbb ;_dbbc =_fddbb ;_gbdfe -=_bcbe ;_eagcd ++;};};};if _agcc !=0{_gggdc -=_egdc (_gggdc ,_edgef ,_cafc ,_eagcd ,_dbbc ,_agcc );};_ceac =_egdc (_gggdc ,_edgef ,_cafc ,_cafc -_dbbc ,_gbdfe -_dbbc ,_agcc );};return MakeNumberResult (_ceac );};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_eggfd :=len (args );if _eggfd !=6&&_eggfd !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aeff ,_effec ,_baccd :=_cedg (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _baccd .Type ==ResultTypeError {return _baccd ;};_fgaa :=args [2];if _fgaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgfb :=_fgaa .ValueNumber ;if _cgfb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_eeeea :=args [3];if _eeeea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eadb :=_eeeea .ValueNumber ;if _eadb <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_ccage :=args [4];if _ccage .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_gcae :=_ccage .ValueNumber ;if _gcae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_afbd :=args [5];if _afbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dfgb :=float64 (int (_afbd .ValueNumber ));if !_eacce (_dfgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bbgc :=0;if _eggfd ==7&&args [6].Type !=ResultTypeEmpty {_efdg :=args [6];if _efdg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bbgc =int (_efdg .ValueNumber );if !_aeb (_bbgc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_bfefc :=0.0;_eecb :=0.0;_aeeab :=1.0;_bagb ,_baccd :=_bccb (_aeff ,_effec ,_cgfb ,_eecb ,_gcae ,_dfgb ,_bbgc );if _baccd .Type ==ResultTypeError {return _baccd ;};_bbffc ,_baccd :=_bccb (_aeff ,_effec ,_cgfb ,_aeeab ,_gcae ,_dfgb ,_bbgc );if _baccd .Type ==ResultTypeError {return _baccd ;};_bcdf :=(_aeeab -_eecb )*0.5;for _cgff :=0;_cgff < 100&&_bfefc !=_eadb ;_cgff ++{_bfefc ,_baccd =_bccb (_aeff ,_effec ,_cgfb ,_bcdf ,_gcae ,_dfgb ,_bbgc );if _baccd .Type ==ResultTypeError {return _baccd ;};if _eadb ==_bagb {return MakeNumberResult (_eecb );}else if _eadb ==_bbffc {return MakeNumberResult (_aeeab );}else if _eadb ==_bfefc {return MakeNumberResult (_bcdf );}else if _eadb < _bbffc {_aeeab *=2.0;_bbffc ,_baccd =_bccb (_aeff ,_effec ,_cgfb ,_aeeab ,_gcae ,_dfgb ,_bbgc );if _baccd .Type ==ResultTypeError {return _baccd ;};_bcdf =(_aeeab -_eecb )*0.5;}else {if _eadb < _bfefc {_eecb =_bcdf ;_bagb =_bfefc ;}else {_aeeab =_bcdf ;_bbffc =_bfefc ;};_bcdf =_aeeab -(_aeeab -_eecb )*((_eadb -_bbffc )/(_bagb -_bbffc ));};};return MakeNumberResult (_bcdf );};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_aegc :=args [0].ValueNumber ;if _aegc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_fbea :=float64 (int (args [1].ValueNumber ));if _fbea < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_eg .Pow (_aegc +1,1/_fbea )-1)*_fbea );};const _bfgeb =1;

// GetFormat returns an empty string for the invalid reference context.
func (_gadca *ivr )GetFormat (cellRef string )string {return ""};func _bgfc (_dabcae [][]Result ,_ccfe int )[][]Result {_adgda :=[][]Result {};for _cbcb :=range _dabcae {if _cbcb ==0{continue ;};_fgcgf :=[]Result {};for _aede :=range _dabcae {if _aede ==_ccfe {continue ;};_fgcgf =append (_fgcgf ,_dabcae [_cbcb ][_aede ]);};_adgda =append (_adgda ,_fgcgf );};return _adgda ;};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};func _ccgc (_gdgge int )string {if _gdgge >=1&&_gdgge -1< len (_bfad ){if _bfad [_gdgge -1]!=""{return _bfad [_gdgge -1];};};return _a .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_gdgge );};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_geac :=args [0].AsNumber ();if _geac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfbgb :=float64 (1);if _geac .ValueNumber < 0{_cfbgb =-1;};if len (args )> 1{_fcdf :=args [1].AsNumber ();if _fcdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cfbgb =_eg .Abs (_fcdf .ValueNumber );};if len (args )==1{return MakeNumberResult (_eg .Ceil (_geac .ValueNumber ));};_fdcdc :=_geac .ValueNumber ;_fdcdc ,_bebcb :=_eg .Modf (_fdcdc /_cfbgb );if _bebcb !=0{if _geac .ValueNumber > 0{_fdcdc ++;};};return MakeNumberResult (_fdcdc *_cfbgb );};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bcbc :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_bcbc *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_bfg :=_fbef (args [1]);for _ ,_cbbf :=range _bfg {for _ ,_abcd :=range _cbbf {if _abcd .Type !=ResultTypeNumber ||_abcd .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_bcbc *=1.0+_abcd .ValueNumber ;};};return MakeNumberResult (_bcbc );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_gffe :s }};func _ggecb (_cgec ,_dcbg []string )[]string {for _ ,_dcac :=range _dcbg {_cgec =append (_cgec ,_dcac );};return _cgec ;};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_bbbg ,_fede :=_geba ("\u0046\u0049\u004e\u0044",args );if _fede .Type !=ResultTypeEmpty {return _fede ;};_cdcc :=_bbbg ._edfac ;if _cdcc ==""{return MakeNumberResult (1.0);};_acae :=_bbbg ._adef ;_acgec :=_bbbg ._deegb ;_aggc :=1;for _deeeb :=range _acae {if _aggc < _acgec {_aggc ++;continue ;};_cceb :=_ef .Index (_acae [_deeeb :],_cdcc );if _cceb ==0{return MakeNumberResult (float64 (_aggc ));};_aggc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};type ivr struct{};var InvalidReferenceContext =&ivr {};func (_abacgg Result )AsString ()Result {switch _abacgg .Type {case ResultTypeNumber :return MakeStringResult (_abacgg .Value ());default:return _abacgg ;};};

// String returns an empty string for Error.
func (_dff Error )String ()string {return ""};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gagbc :=args [0].AsNumber ();if _gagbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gagbc .ValueNumber < 0{return MakeNumberResult (-1);}else if _gagbc .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Update returns the same object as updating sheet references does not affect Number.
func (_gfeab Number )Update (q *_af .UpdateQuery )Expression {return _gfeab };const _gbda =57365;type evCache struct{_gfd map[string ]Result ;_abg *_ea .Mutex ;};func (_abcgc *Lexer )emit (_bcac tokenType ,_ggeg []byte ){if _gcaef {_a .Println ("\u0065\u006d\u0069\u0074",_bcac ,_gggbb (string (_ggeg )));};_abcgc ._ffcf <-&node {_bcac ,string (_ggeg )};};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_fega :=_gccf (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _fega .Type !=ResultTypeEmpty {return _fega ;};_cffa :=_degfa (args [1:]);_fgbce :=-_eg .MaxFloat64 ;_dcaf :=_fbef (args [0]);for _ ,_bbdg :=range _cffa {_egafg :=_dcaf [_bbdg ._cbae ][_bbdg ._cdbd ].ValueNumber ;if _fgbce < _egafg {_fgbce =_egafg ;};};if _fgbce ==-_eg .MaxFloat64 {_fgbce =0;};return MakeNumberResult (float64 (_fgbce ));};func (_eabb *yyParserImpl )Lookahead ()int {return _eabb ._aedee };const _dbdbd =16;

// String returns a string representation of ConstArrayExpr.
func (_dfb ConstArrayExpr )String ()string {return ""};func _abea (_dgcc Result )Result {if _dgcc .Type ==ResultTypeEmpty {return _dgcc ;};_bffed :=_dgcc .AsString ();if _bffed .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dgcc .IsBoolean {if _bffed .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _bffed .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_ef .ToLower (_bffed .ValueString ));};};type noCache struct{};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebdcg :=args [0].AsNumber ();_dgbgd :=args [1].AsNumber ();if _ebdcg .Type !=ResultTypeNumber ||_dgbgd .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cdace :=_eg .Trunc (_ebdcg .ValueNumber );_deff :=_eg .Trunc (_dgbgd .ValueNumber );if _deff > _cdace {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _deff ==_cdace ||_deff ==0{return MakeNumberResult (1);};_babe :=float64 (1);for _fgead :=float64 (1);_fgead <=_deff ;_fgead ++{_babe *=(_cdace +1-_fgead )/_fgead ;};return MakeNumberResult (_babe );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_caefe SheetPrefixExpr )Update (q *_af .UpdateQuery )Expression {return _caefe };

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_cbab :=len (args );if _cbab !=4&&_cbab !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebff ,_fdca ,_cebe :=_cedg (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _cebe .Type ==ResultTypeError {return _cebe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccaa :=args [2].ValueNumber ;if _ccaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cfdb :=args [3].ValueNumber ;if _cfdb <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_gagd :=0;if _cbab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gagd =int (args [4].ValueNumber );if !_aeb (_gagd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_bbbdd ,_cebe :=_ebed (_ebff ,_fdca ,_gagd );if _cebe .Type ==ResultTypeError {return _cebe ;};return MakeNumberResult ((_cfdb /_ccaa -1)/_bbbdd );};

// Reference returns a string reference value to a sheet.
func (_dfeeec SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_dfeeec ._gffe };};var _ddbec =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Reference returns a string reference value to a horizontal range with prefix.
func (_dagdf PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_daca :=_dagdf ._gfgb .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dagdf .horizontalRangeReference (_daca .Value )};};func _fdcg (_decc ,_adaa []float64 ,_bgdg float64 )float64 {_ccab :=_bgdg +1;_agedd :=0.0;_gfea :=len (_decc );_ffeef :=_adaa [0];for _bffe :=1;_bffe < _gfea ;_bffe ++{_bffcd :=(_adaa [_bffe ]-_ffeef )/365;_agedd -=_bffcd *_decc [_bffe ]/_eg .Pow (_ccab ,_bffcd +1);};return _agedd ;};

// GetLocked returns FALSE for the invalid reference context.
func (_gfbg *ivr )GetLocked (cellRef string )bool {return false };func _efbd (_gfbf ,_edggb Result ,_aeda ,_fead bool )cmpResult {_gfbf =_gfbf .AsNumber ();_edggb =_edggb .AsNumber ();if _gfbf .Type !=_edggb .Type {return _gbfb ;};if _gfbf .Type ==ResultTypeNumber {if _gfbf .ValueNumber ==_edggb .ValueNumber {return _aefc ;};if _gfbf .ValueNumber < _edggb .ValueNumber {return _acbfff ;};return _ccbe ;};if _gfbf .Type ==ResultTypeString {_daeef :=_gfbf .ValueString ;_cgebd :=_edggb .ValueString ;if !_aeda {_daeef =_ef .ToLower (_daeef );_cgebd =_ef .ToLower (_cgebd );};if _fead {_eaaa :=_gb .Match (_cgebd ,_daeef );if _eaaa {return _aefc ;}else {return _ccbe ;};};return cmpResult (_ef .Compare (_daeef ,_cgebd ));};if _gfbf .Type ==ResultTypeEmpty {return _aefc ;};if _gfbf .Type ==ResultTypeList {if len (_gfbf .ValueList )< len (_edggb .ValueList ){return _acbfff ;};if len (_gfbf .ValueList )> len (_edggb .ValueList ){return _ccbe ;};for _gabfd :=range _gfbf .ValueList {_cegb :=_efbd (_gfbf .ValueList [_gabfd ],_edggb .ValueList [_gabfd ],_aeda ,_fead );if _cegb !=_aefc {return _cegb ;};};return _aefc ;};if _gfbf .Type ==ResultTypeList {if len (_gfbf .ValueArray )< len (_edggb .ValueArray ){return _acbfff ;};if len (_gfbf .ValueArray )> len (_edggb .ValueArray ){return _ccbe ;};for _ggafe :=range _gfbf .ValueArray {_cffcc :=_gfbf .ValueArray [_ggafe ];_degg :=_gfbf .ValueArray [_ggafe ];if len (_cffcc )< len (_degg ){return _acbfff ;};if len (_cffcc )> len (_degg ){return _ccbe ;};for _bbdb :=range _cffcc {_gfagc :=_efbd (_cffcc [_bbdb ],_degg [_bbdb ],_aeda ,_fead );if _gfagc !=_aefc {return _gfagc ;};};};return _aefc ;};return _gbfb ;};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eefe :=false ;for _ ,_bedfd :=range args {switch _bedfd .Type {case ResultTypeList ,ResultTypeArray :_acge :=Or (_bedfd .ListValues ());if _acge .Type ==ResultTypeError {return _acge ;};if _acge .ValueNumber !=0{_eefe =true ;};case ResultTypeNumber :if _bedfd .ValueNumber !=0{_eefe =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _bedfd ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_eefe );};const _aaea =_bg .Millisecond *1000;

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bddda :=args [0].Ref ;for _bddda .Type ==ReferenceTypeNamedRange {_bddda =ctx .NamedRange (_bddda .Value );};_becg :="";switch _bddda .Type {case ReferenceTypeCell :_becg =_bddda .Value ;case ReferenceTypeRange :_acddf :=_ef .Split (_bddda .Value ,"\u003a");if len (_acddf )==2{_becg =_acddf [0];};default:return MakeErrorResult (_a .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_bddda .Type ));};_fffdg ,_cdegg :=_fa .ParseCellReference (_becg );if _cdegg !=nil {return MakeErrorResult (_a .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_cdegg .Error ()));};_aagf ,_dcfa ,_ceff :=_fffdg .Column ,_fffdg .RowIdx ,_fffdg .SheetName ;_efef :=args [1].AsNumber ();if _efef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_cgcge :=args [2].AsNumber ();if _cgcge .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _gegec ,_bgbg Result ;if len (args )==3{_gegec =MakeNumberResult (1);_bgbg =MakeNumberResult (1);}else {_gegec =args [3].AsNumber ();if _gegec .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _gegec .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_bgbg =args [4].AsNumber ();if _bgbg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _bgbg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_eafg :=_fa .ColumnToIndex (_aagf );_ddca :=_dcfa +uint32 (_efef .ValueNumber );_gggf :=_eafg +uint32 (_cgcge .ValueNumber );_ffba :=_ddca +uint32 (_gegec .ValueNumber );_cege :=_gggf +uint32 (_bgbg .ValueNumber );if _gegec .ValueNumber > 0{_ffba --;}else {_ffba ++;_ddca ,_ffba =_ffba ,_ddca ;};if _bgbg .ValueNumber > 0{_cege --;}else {_cege ++;_gggf ,_cege =_cege ,_gggf ;};_eafa :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_fa .IndexToColumn (_gggf ),_ddca );_geed :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_fa .IndexToColumn (_cege ),_ffba );if _ceff ==""{return _affa (ctx ,ev ,_eafa ,_geed );}else {return _affa (ctx .Sheet (_ceff ),ev ,_eafa ,_geed );};};

// Reference returns an invalid reference for FunctionCall.
func (_aggdc FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecbbf :=args [0].AsString ();if _ecbbf .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_ecbbf .ValueString ,ev );};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_feedd string };

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_efeba :=_ef .Split (v ,"\u003a");if len (_efeba )!=2{return nil ;};_cecag ,_ :=_ae .Atoi (_efeba [0]);_gbecf ,_ :=_ae .Atoi (_efeba [1]);if _cecag > _gbecf {_cecag ,_gbecf =_gbecf ,_cecag ;};return HorizontalRange {_edgad :_cecag ,_badcb :_gbecf };};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_acaga ,_cdec ,_aggf Expression };

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bcgc :=args [1].ValueNumber ;_dee :=args [0];var _fgc float64 ;switch _dee .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_fgc =_dee .ValueNumber ;case ResultTypeString :_egda :=DateValue ([]Result {args [0]});if _egda .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_fgc =_egda .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bdg :=_edgg (_fgc );_ebc :=_bdg .AddDate (0,int (_bcgc ),0);_fdgd ,_cbe ,_abf :=_ebc .Date ();_fge :=_gef (_fdgd ,int (_cbe ),_abf );if _fge < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_fge );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fga :=_bg .Now ();_ ,_bcaa :=_fga .Zone ();_dfd :=_cfb +float64 (_fga .Unix ()+int64 (_bcaa ))/86400;return MakeNumberResult (_dfd );};

// Error is called in the case of parsing error and saves an error to a plex.
func (_aadf *plex )Error (s string ){_aff .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_aadf ._adeg =s ;};const _gbbf ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _b .Reader )Expression {_aabb :=&plex {_ddgcg :LexReader (r )};_bbbc (_aabb );if _aabb ._adeg !=""{return nil ;};return _aabb ._cffd ;};

// Reference returns a string reference value to an expression with prefix.
func (_eaaff PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_gbbcb :=_eaaff ._abbca .Reference (ctx ,ev );_ecge :=_eaaff ._debae .Reference (ctx ,ev );if _gbbcb .Type ==ReferenceTypeSheet &&_ecge .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_gbbcb .Value +"\u0021"+_ecge .Value };};return ReferenceInvalid ;};func _gbg (_dacg ,_gecd ,_gcgc float64 )float64 {return (_dacg *3600+_gecd *60+_gcgc )/86400};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_egaa :=len (args );if _egaa < 3||_egaa > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_egba :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efce :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fbfc :=args [2].ValueNumber ;_edgdg :=0.0;if _egaa >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_edgdg =args [3].ValueNumber ;};_eec :=0.0;if _egaa ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eec =args [4].ValueNumber ;if _eec !=0{_eec =1;};};_dabf :=_efce *(1+_egba *_eec )-_edgdg *_egba ;_ccfa :=(_fbfc *_egba +_efce *(1+_egba *_eec ));return MakeNumberResult (_eg .Log (_dabf /_ccfa )/_eg .Log (1+_egba ));};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_aeed :=len (args );if _aeed !=4&&_aeed !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dgee ,_fddb ,_bffb :=_cedg (args [0],args [1],"\u0044\u0049\u0053\u0043");if _bffb .Type ==ResultTypeError {return _bffb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebedb :=args [2].ValueNumber ;if _ebedb <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abfb :=args [3].ValueNumber ;if _abfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gabf :=0;if _aeed ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gabf =int (args [4].ValueNumber );if !_aeb (_gabf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_dbec ,_bffb :=_ebed (_dgee ,_fddb ,_gabf );if _bffb .Type ==ResultTypeError {return _bffb ;};return MakeNumberResult ((_abfb -_ebedb )/_abfb /_dbec );};

// Eval evaluates and returns the result of an error expression.
func (_bdc Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_bdc ._dga )};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gad :=args [0].ValueNumber ;if _gad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cffg :=args [1].ValueNumber ;if _cffg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bacc :=args [2].ValueNumber ;if _bacc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_eg .Log10 (_bacc )-_eg .Log10 (_cffg ))/_eg .Log10 (1+_gad ));};

// Reference returns an invalid reference for BinaryExpr.
func (_bb BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _gef (_ddae ,_fgg ,_dcg int )float64 {return float64 (_gfgc (_ddae ,_bg .Month (_fgg ),_dcg )/86400)+_cfb ;};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccgb :=args [0].Ref ;if _ccgb .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_ccgb .Value ,ev ).IsBoolean );};

// LastColumn returns empty string for the invalid reference context.
func (_ddbdd *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbebe :=args [0];if _cbebe .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgdca :=len (_cbebe .ValueArray );for _ ,_cefb :=range _cbebe .ValueArray {if len (_cefb )!=_cgdca {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_geeb (_cbebe .ValueArray ));};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_ecgec .Lock ();defer _ecgec .Unlock ();if _ ,_ddge :=_cfcde [name ];_ddge {_aff .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_cfcde [name ]=fn ;};const _ecceg =57360;var _ecgec _ea .Mutex ;

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cdefd (args ,_bagg )};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbff :=args [0].ValueNumber ;if _fbff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_eedca ,_effea :=_babd (args [1],args [2],"\u0058\u004e\u0050\u0056");if _effea .Type ==ResultTypeError {return _effea ;};_fbcad :=_eedca ._beff ;_acdf :=_eedca ._aeag ;_bedf :=0.0;_aafdc :=_acdf [0];for _cbdd ,_bbde :=range _fbcad {_bedf +=_bbde /_eg .Pow (1+_fbff ,(_acdf [_cbdd ]-_aafdc )/365);};return MakeNumberResult (_bedf );};var _afeed =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_cdefe :=1.0;for _ ,_aeaad :=range args {_aeaad =_aeaad .AsNumber ();switch _aeaad .Type {case ResultTypeNumber :_cdefe *=_aeaad .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fedcd :=Product (_aeaad .ListValues ());if _fedcd .Type !=ResultTypeNumber {return _fedcd ;};_cdefe *=_fedcd .ValueNumber ;case ResultTypeString :case ResultTypeError :return _aeaad ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_aeaad .Type ));};};return MakeNumberResult (_cdefe );};func _gedf (_ecg ,_bgea ,_cgac ,_edcd ,_feec float64 ,_bcb int )Result {_gece ,_edfg :=_ebed (_ecg ,_bgea ,_bcb );if _edfg .Type ==ResultTypeError {return _edfg ;};_agd ,_ccb :=_acbff (_ecg ,_bgea ,int (_feec ),_bcb );if _ccb .Type ==ResultTypeError {return _ccb ;};_ageg :=0.0;_ebgc :=0.0;_cgac *=100/_feec ;_edcd /=_feec ;_edcd ++;_dgce :=_gece *_feec -_agd ;for _cacg :=1.0;_cacg < _agd ;_cacg ++{_dgbb :=_cacg +_dgce ;_eaa :=_cgac /_eg .Pow (_edcd ,_dgbb );_ebgc +=_eaa ;_ageg +=_dgbb *_eaa ;};_bebg :=(_cgac +100)/_eg .Pow (_edcd ,_agd +_dgce );_ebgc +=_bebg ;_ageg +=(_agd +_dgce )*_bebg ;_ageg /=_ebgc ;_ageg /=_feec ;return MakeNumberResult (_ageg );};func _egca (_fdgda Result )*criteriaParsed {_afgb :=_fdgda .Type ==ResultTypeNumber ;_aafc :=_fdgda .ValueNumber ;_fbgd :=_ef .ToLower (_fdgda .ValueString );_cfeg :=_ddgc (_fbgd );return &criteriaParsed {_afgb ,_aafc ,_fbgd ,_cfeg };};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bbfa :=args [0].Ref ;if _bbfa .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_ddbe ,_aafdf :=_fa .ParseCellReference (_bbfa .Value );if _aafdf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bbfa .Value );};return MakeNumberResult (float64 (_ddbe .ColumnIdx +1));};

// Db implements the Excel DB function.
func Db (args []Result )Result {_bba :=len (args );if _bba !=4&&_bba !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eagg :=args [0].ValueNumber ;if _eagg < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edge :=args [1].ValueNumber ;if _edge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddda :=args [2].ValueNumber ;if _ddda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ecef :=args [3].ValueNumber ;if _ecef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _ecef -_ddda > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_gfe :=12.0;if _bba ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfe =args [4].ValueNumber ;if _gfe < 1||_gfe > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _gfe ==12&&_ecef > _ddda {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _edge >=_eagg {return MakeNumberResult (0);};_bcde :=1-_eg .Pow (_edge /_eagg ,1/_ddda );_bcde =float64 (int (_bcde *1000+0.5))/1000;_gfab :=_eagg *_bcde *_gfe /12;if _ecef ==1{return MakeNumberResult (_gfab );};_ffdb :=_gfab ;_cedeg :=0.0;_bfdf :=_ddda ;if _bfdf > _ecef {_bfdf =_ecef ;};for _bfdc :=2.0;_bfdc <=_bfdf ;_bfdc ++{_cedeg =(_eagg -_ffdb )*_bcde ;_ffdb +=_cedeg ;};if _ecef > _ddda {return MakeNumberResult ((_eagg -_ffdb )*_bcde *(12-_gfe )/12);};return MakeNumberResult (_cedeg );};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efgb :=args [0].AsString ();if _efgb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_ef .ToUpper (_efgb .ValueString ));};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_ffcf chan *node ;_ecfdb _ea .Mutex ;_gcgfc []chan *node ;_cebgc []*node ;};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_agbc :=_bg .Now ();_ ,_faf :=_agbc .Zone ();_gbdg :=_bced (_cc ,_agbc .Unix ()+int64 (_faf ))+1;return MakeNumberResult (_gbdg );};func _cfa (_aad ,_dgff int )int {if _dgff ==2&&_ffdc (_aad ){return 29;}else {return _ebbf [_dgff -1];};};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cff :=args [1].ValueNumber ;_fbd :=args [0];var _cdg float64 ;switch _fbd .Type {case ResultTypeEmpty :_cdg =0;case ResultTypeNumber :_cdg =_fbd .ValueNumber ;case ResultTypeString :_gfag :=DateValue ([]Result {args [0]});if _gfag .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cdg =_gfag .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_fgd :=_edgg (_cdg );_ecd :=_fgd .AddDate (0,int (_cff +1),0);_dac ,_efd ,_ :=_ecd .Date ();_gcfb :=_gef (_dac ,int (_efd ),0);if _gcfb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _dac ==1900&&_efd ==3{_gcfb --;};return MakeNumberResult (_gcfb );};const _faebb =57349;

// String returns a string representation for Negate.
func (_gdbag Negate )String ()string {return "\u002d"+_gdbag ._abdg .String ()};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_dbdef ,_cbgee :=_bbbdb ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _cbgee .Type !=ResultTypeEmpty {return _cbgee ;};_egfg :=_dbdef ._bgbfa ;_ebcga :=_dbdef ._bebec ;_bfag :=_dbdef ._eaff ;_gggb :=_dbdef ._gafca ;_acfb :=len (_egfg );if _ebcga > _acfb {_ebcga =_acfb ;};_dcca :=_ebcga +_bfag ;if _dcca > _acfb {_dcca =_acfb ;};_gcbg :=_egfg [0:_ebcga ]+_gggb +_egfg [_dcca :];return MakeStringResult (_gcbg );};func _cded (_ccce ,_adc float64 ,_gabb ,_dfcb int )float64 {_faga :=_edgg (_ccce );_gfc :=_edgg (_adc );_dedd :=_cbg (_faga ,_gfc ,_gabb ,_dfcb );return _gbf (_dedd ,_faga ,_dfcb );};func _eceg (_efge string ,_cecb func (_bceed float64 )float64 )Function {return func (_fdbbd []Result )Result {if len (_fdbbd )!=1{return MakeErrorResult (_efge +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fecgf :=_fdbbd [0].AsNumber ();switch _fecgf .Type {case ResultTypeNumber :_gdga :=_cecb (_fecgf .ValueNumber );if _eg .IsNaN (_gdga ){return MakeErrorResult (_efge +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _eg .IsInf (_gdga ,0){return MakeErrorResult (_efge +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_gdga );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_efge +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _fecgf ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efge ,_fecgf .Type ));};};};func _bbbdb (_ebedg string ,_ccff []Result )(*parsedReplaceObject ,Result ){if len (_ccff )!=4{return nil ,MakeErrorResult (_ebedg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ccff [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_ebedg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_egdaag :=_ccff [0].ValueString ;if _ccff [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebedg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_cdaeg :=int (_ccff [1].ValueNumber )-1;if _ccff [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebedg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gfdaf :=int (_ccff [2].ValueNumber );if _ccff [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_ebedg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_gcgfd :=_ccff [3].ValueString ;return &parsedReplaceObject {_egdaag ,_cdaeg ,_gfdaf ,_gcgfd },_edgf ;};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_efgg :=args [0];if _efgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffgc :=int (_efgg .ValueNumber );if _ffgc < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_ffgc {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_ffgc ];};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bee :=args [0].AsNumber ();if _bee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eaed :=float64 (1);if _bee .ValueNumber < 0{_eaed =-1;};if len (args )> 1{_dbdb :=args [1].AsNumber ();if _dbdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_eaed =_eg .Abs (_dbdb .ValueNumber );};if len (args )==1{return MakeNumberResult (_eg .Floor (_bee .ValueNumber ));};_gbabb :=_bee .ValueNumber ;_gbabb ,_cgb :=_eg .Modf (_gbabb /_eaed );if _cgb !=0{if _bee .ValueNumber < 0{_gbabb --;};};return MakeNumberResult (_gbabb *_eaed );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbgab :=args [0];if _dbgab .Type !=ResultTypeArray &&_dbgab .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bgga :=_fbef (_dbgab );_dggfa :=args [2];if _dggfa .Type !=ResultTypeArray &&_dggfa .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dfbd :=_fbef (_dggfa );_ffgg :=_egca (args [1]);_cgdcf :=0.0;for _acbb ,_eaaf :=range _bgga {for _dbece ,_agcd :=range _eaaf {if _aaeb (_agcd ,_ffgg ){_cgdcf +=_dfbd [_acbb ][_dbece ].ValueNumber ;};};};return MakeNumberResult (_cgdcf );};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_bcec Context ,formula string )Result ;SetCache (_ebbb string ,_bf Result );GetFromCache (_ded string )(Result ,bool );LastEvalIsRef ()bool ;};var _ceag []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};const _bdeb =57377;func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// String returns a string representation for Bool.
func (_ggg Bool )String ()string {if _ggg ._cdb {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};func _fbef (_cdefc Result )[][]Result {switch _cdefc .Type {case ResultTypeArray :return _cdefc .ValueArray ;case ResultTypeList :return [][]Result {_cdefc .ValueList };default:return [][]Result {};};};const _gcbgg =57353;func _fdgc (_eceb Context ,_bbeb ,_aaeg string )(string ,string ){_adca :=_bbeb +"\u0031";_gecc :=_eceb .LastRow (_bbeb );_edcgg :=_aaeg +_ae .Itoa (_gecc );return _adca ,_edcgg ;};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_edab :=args [0];if _edab .Type ==ResultTypeList {_cafa :=[][]Result {};for _ ,_daec :=range _edab .ValueList {_cafa =append (_cafa ,[]Result {_daec });};return MakeArrayResult (_cafa );};_edff :=make ([][]Result ,len (_edab .ValueArray [0]));for _ ,_fgfb :=range _edab .ValueArray {for _gbbcc ,_adfaf :=range _fgfb {_edff [_gbbcc ]=append (_edff [_gbbcc ],_adfaf );};};return MakeArrayResult (_edff );};func _gdc (_dcc ,_bebc _bg .Time )bool {_ebab :=_dcc .Unix ();_edfa :=_bebc .Unix ();_aefd :=_dcc .Year ();_bdea :=_gfgc (_aefd ,_bg .March ,1);if _ffdc (_aefd )&&_ebab < _bdea &&_edfa >=_bdea {return true ;};var _edga =_bebc .Year ();var _aeae =_gfgc (_edga ,_bg .March ,1);return (_ffdc (_edga )&&_edfa >=_aeae &&_ebab < _aeae );};func _cbgc (){_cgea =_f .MustCompile ("\u005e\u0030\u002b\u0024");_edcg =_f .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_fgea =_f .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_bfgff =_f .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_afcgc =_f .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_ddfbe =_f .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_dfba =_f .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_dbcf =_f .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_cebee =_f .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_fdbgf =_f .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_fafd =_f .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_bgfg =_f .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_agbcd +_agbcd +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_agbcd +_agbcd +"\u0029\u002b\u0059+\u0024");_acce =_f .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_agbcd +_agbcd +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_agbcd +_agbcd +"\u0029\u002b\u0059+\u0024");_ddgag =_f .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_ffgf =_f .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};func _cbg (_fdccg ,_dcdb _bg .Time ,_dgaa ,_bfcc int )_bg .Time {_fgge :=_dcdb ;_edgac :=_fdccg .Year ()-_dcdb .Year ();_fgge =_fgge .AddDate (_edgac ,0,0);if _fdccg .After (_fgge ){_fgge =_fgge .AddDate (1,0,0);};_adcc :=-12/_dgaa ;for _fgge .After (_fdccg ){_fgge =_fgge .AddDate (0,_adcc ,0);};return _fgge ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_feffb (args ,_cgcf ))};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_ffff ,_dcgb :=_badgb (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dcgb .Type ==ResultTypeError {return _dcgb ;};_gafe :=_ffff ._fcdb ;_eddg :=_ffff ._gbdf ;_gefb :=_ffff ._dabe ;_bfd :=_ffff ._baag ;_dfcf :=_ffff ._abda ;_cge :=_ffff ._cbde ;_bdeaa :=_ffff ._deag ;_ddgg ,_ede :=_ebed (_eddg ,_gefb ,_bdeaa );if _ede .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_abb :=_ddgg *_cge *_gafe ;if _dfcf ==0{return MakeNumberResult (_abb );};_efa :=_gafe *_cge ;_gde :=_gafe -_bfd ;_gggdg :=int ((_gde -_abb )/_efa );if _dfcf <=_gggdg {return MakeNumberResult (_efa );}else if _dfcf ==_gggdg +1{return MakeNumberResult (_gde -_efa *float64 (_gggdg )-_abb );}else {return MakeNumberResult (0);};};type criteriaRegex struct{_fbecg byte ;_aabff string ;};var _cce =map[string ]*_f .Regexp {};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_aedfb :name ,_eefggc :args };};

// Bool is a boolean expression.
type Bool struct{_cdb bool };func _gfge (_abdba []string ,_efced int )string {return _ae .Itoa (len (_abdba [len (_abdba )-1-_efced ]))};

// Negate is a negate expression like -A1.
type Negate struct{_abdg Expression };func _fcbea (_dagfb []Result ,_gebf bool )Result {_abeec :="\u004d\u0041\u0058";if _gebf {_abeec ="\u004d\u0041\u0058\u0041";};if len (_dagfb )==0{return MakeErrorResult (_abeec +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gacbc :=-_eg .MaxFloat64 ;for _ ,_aecb :=range _dagfb {switch _aecb .Type {case ResultTypeNumber :if (_gebf ||!_aecb .IsBoolean )&&_aecb .ValueNumber > _gacbc {_gacbc =_aecb .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_abgf :=_fcbea (_aecb .ListValues (),_gebf );if _abgf .ValueNumber > _gacbc {_gacbc =_abgf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_egabf :=0.0;if _gebf {_egabf =_aecb .AsNumber ().ValueNumber ;};if _egabf > _gacbc {_gacbc =_egabf ;};default:_aff .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_abeec +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aecb .Type );};};if _gacbc ==-_eg .MaxFloat64 {_gacbc =0;};return MakeNumberResult (_gacbc );};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ef .NewReader (s ));};

// SetLocked does nothing for the invalid reference context.
func (_fbgfd *ivr )SetLocked (cellRef string ,locked bool ){};func (_afef *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};const _dbbgg =57358;func init (){_cbgc ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Update updates references in the BinaryExpr after removing a row/column.
func (_gcf BinaryExpr )Update (q *_af .UpdateQuery )Expression {_gcg :=_gcf ;_gcg ._fd =_gcf ._fd .Update (q );_gcg ._eaf =_gcf ._eaf .Update (q );return _gcg ;};func _eeg (_ggfd string )(int ,int ,int ,bool ,Result ){_fed :="";_gbbaa :=[]string {};for _baf ,_cfe :=range _cce {_gbbaa =_cfe .FindStringSubmatch (_ggfd );if len (_gbbaa )> 1{_fed =_baf ;break ;};};if _fed ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_fcf :=false ;var _ceca ,_ebg ,_ecc int ;var _fgff error ;switch _fed {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_ebg ,_fgff =_ae .Atoi (_gbbaa [1]);if _fgff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_ecc ,_fgff =_ae .Atoi (_gbbaa [3]);if _fgff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_ceca ,_fgff =_ae .Atoi (_gbbaa [5]);if _fgff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};if _ceca < 0||_ceca > 9999||(_ceca > 99&&_ceca < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_ceca =_fcg (_ceca );_fcf =_gbbaa [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_ebg =_ddbd [_gbbaa [1]];_ecc ,_fgff =_ae .Atoi (_gbbaa [14]);if _fgff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_ceca ,_fgff =_ae .Atoi (_gbbaa [16]);if _fgff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};if _ceca < 0||_ceca > 9999||(_ceca > 99&&_ceca < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_ceca =_fcg (_ceca );_fcf =_gbbaa [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_eebf ,_gagc :=_ae .Atoi (_gbbaa [1]);if _gagc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_cbb ,_gagc :=_ae .Atoi (_gbbaa [3]);if _gagc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_ace ,_gagc :=_ae .Atoi (_gbbaa [5]);if _gagc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};if _eebf >=1900&&_eebf < 10000{_ceca =_eebf ;_ebg =_cbb ;_ecc =_ace ;}else if _eebf > 0&&_eebf < 13{_ebg =_eebf ;_ecc =_cbb ;_ceca =_ace ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_fcf =_gbbaa [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_ceca ,_fgff =_ae .Atoi (_gbbaa [16]);if _fgff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_ebg =_ddbd [_gbbaa [3]];_ecc ,_fgff =_ae .Atoi (_gbbaa [1]);if _fgff !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};_fcf =_gbbaa [19]=="";};if !_gba (_ceca ,_ebg ,_ecc ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfg );};return _ceca ,_ebg ,_ecc ,_fcf ,_edgf ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_add :=[]float64 {};for _ ,_gbaa :=range args {switch _gbaa .Type {case ResultTypeString :_ggge :=_gbaa .AsNumber ();if _ggge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_add =append (_add ,_ggge .ValueNumber );case ResultTypeList ,ResultTypeArray :_dedg :=GCD (_gbaa .ListValues ());if _dedg .Type !=ResultTypeNumber {return _dedg ;};_add =append (_add ,_dedg .ValueNumber );case ResultTypeNumber :_add =append (_add ,_gbaa .ValueNumber );case ResultTypeError :return _gbaa ;default:return MakeErrorResult (_a .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbaa .Type ));};};if _add [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_add )==1{return MakeNumberResult (_add [0]);};_bgcfd :=_add [0];for _cdfdb :=1;_cdfdb < len (_add );_cdfdb ++{if _add [_cdfdb ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgcfd =_aaec (_bgcfd ,_add [_cdfdb ]);};return MakeNumberResult (_bgcfd );};const _gbd ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _gbf (_cfbg ,_dcf _bg .Time ,_fgcd int )float64 {if _cfbg .After (_dcf ){_cfbg ,_dcf =_dcf ,_cfbg ;};_beag :=0;_faae ,_aafb ,_gggd :=_cfbg .Date ();_fce ,_bffc ,_fdgb :=_dcf .Date ();_aeac ,_gefe :=int (_aafb ),int (_bffc );_baaf ,_fdd :=_aae (_faae ,_aeac ,_gggd ,_fgcd ),_aae (_fce ,_gefe ,_fdgb ,_fgcd );if !_bge (_fgcd ){return _gef (_fce ,_gefe ,_fdd )-_gef (_faae ,_aeac ,_baaf );};if _fgcd ==0{if (_aeac ==2||_baaf < 30)&&_fdgb ==31{_fdd =31;}else if _gefe ==2&&_fdd ==_cfa (_fce ,_gefe ){_fdd =_cfa (_fce ,2);};}else {if _aeac ==2&&_baaf ==30{_baaf =_cfa (_faae ,2);};if _gefe ==2&&_fdd ==30{_fdd =_cfa (_fce ,2);};};if _faae < _fce ||(_faae ==_fce &&_aeac < _gefe ){_beag =30-_baaf +1;_gggd =1;_baaf =1;_egbfe :=_bg .Date (_faae ,_bg .Month (_aeac ),_gggd ,0,0,0,0,_bg .UTC ).AddDate (0,1,0);if _egbfe .Year ()< _fce {_beag +=_aege (_egbfe .Year (),int (_egbfe .Month ()),12,_fgcd );_egbfe =_egbfe .AddDate (0,13-int (_egbfe .Month ()),0);_beag +=_caba (_egbfe .Year (),_fce -1,_fgcd );};_beag +=_aege (_fce ,int (_egbfe .Month ()),_gefe -1,_fgcd );_egbfe =_egbfe .AddDate (0,_gefe -int (_egbfe .Month ()),0);_aeac =_egbfe .Day ();};_beag +=_fdd -_baaf ;if _beag > 0{return float64 (_beag );}else {return 0;};};func (_fcbb *Lexer )Next ()*node {_fcbb ._ecfdb .Lock ();defer _fcbb ._ecfdb .Unlock ();if len (_fcbb ._cebgc )> 0{_gagg :=_fcbb ._cebgc [0];_fcbb ._cebgc =_fcbb ._cebgc [1:];return _gagg ;};return _fcbb .nextRaw ();};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _fcbf (args ,true )};

// String returns a string representation of a horizontal range.
func (_ecfda HorizontalRange )String ()string {return _ecfda .horizontalRangeReference ()};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fgcc :=args [0];switch _fgcc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_fdb :=_edgg (_fgcc .ValueNumber );return MakeNumberResult (float64 (_fdb .Minute ()));case ResultTypeString :_deb :=_ef .ToLower (_fgcc .ValueString );if !_gab (_deb ){_ ,_ ,_ ,_gbcd ,_gfdg :=_eeg (_deb );if _gfdg .Type ==ResultTypeError {_gfdg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _gfdg ;};if _gbcd {return MakeNumberResult (0);};};_ ,_feac ,_ ,_ ,_ ,_cedb :=_cbd (_deb );if _cedb .Type ==ResultTypeError {return _cedb ;};return MakeNumberResult (float64 (_feac ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func _edgg (_bec float64 )_bg .Time {_bcg :=int64 ((_bec -_cfb )*_egg );return _bg .Unix (0,_bcg ).UTC ();};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_dcag ,_edagb :=_fafb (args ,false );if _edagb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_dcag /_edagb );};const _aba =_aaa +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cfae :=args [0].AsNumber ();_eacd :=args [1].AsNumber ();if _cfae .Type !=ResultTypeNumber ||_eacd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _eacd .ValueNumber < _cfae .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_ebeee :=int64 (_cfae .ValueNumber );_ddeg :=int64 (_eacd .ValueNumber );return MakeNumberResult (float64 (_dgae .Int63n (_ddeg -_ebeee +1)+_ebeee ));};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_cegab Expression ;_eeaed ,_abcad string ;};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};var _degcg =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};const _dgbe =57374;var _dffed =[...]string {};const _babeb int =0;func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};func _fde (_afd BinOpType ,_ee ,_bc []Result )Result {_dgf :=[]Result {};for _ga :=range _ee {_bgg :=_ee [_ga ].AsNumber ();_ge :=_bc [_ga ].AsNumber ();if _bgg .Type !=ResultTypeNumber ||_ge .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _afd {case BinOpTypePlus :_dgf =append (_dgf ,MakeNumberResult (_bgg .ValueNumber +_ge .ValueNumber ));case BinOpTypeMinus :_dgf =append (_dgf ,MakeNumberResult (_bgg .ValueNumber -_ge .ValueNumber ));case BinOpTypeMult :_dgf =append (_dgf ,MakeNumberResult (_bgg .ValueNumber *_ge .ValueNumber ));case BinOpTypeDiv :if _ge .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_dgf =append (_dgf ,MakeNumberResult (_bgg .ValueNumber /_ge .ValueNumber ));case BinOpTypeExp :_dgf =append (_dgf ,MakeNumberResult (_eg .Pow (_bgg .ValueNumber ,_ge .ValueNumber )));case BinOpTypeLT :_dgf =append (_dgf ,MakeBoolResult (_bgg .ValueNumber < _ge .ValueNumber ));case BinOpTypeGT :_dgf =append (_dgf ,MakeBoolResult (_bgg .ValueNumber > _ge .ValueNumber ));case BinOpTypeEQ :_dgf =append (_dgf ,MakeBoolResult (_bgg .ValueNumber ==_ge .ValueNumber ));case BinOpTypeLEQ :_dgf =append (_dgf ,MakeBoolResult (_bgg .ValueNumber <=_ge .ValueNumber ));case BinOpTypeGEQ :_dgf =append (_dgf ,MakeBoolResult (_bgg .ValueNumber >=_ge .ValueNumber ));case BinOpTypeNE :_dgf =append (_dgf ,MakeBoolResult (_bgg .ValueNumber !=_ge .ValueNumber ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_afd ));};};return MakeListResult (_dgf );};const _dfgbe =57375;

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eedee :=args [0].AsNumber ();if _eedee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfdc :=0;if len (args )> 1{_dbdbe :=args [1];if _dbdbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cfdc =int (_dbdbe .ValueNumber );if _cfdc < 0{_cfdc =0;}else if _cfdc > 4{_cfdc =4;};};_dfgd :=_ddbec ;switch _cfdc {case 1:_dfgd =_cggf ;case 2:_dfgd =_gebcd ;case 3:_dfgd =_cfba ;case 4:_dfgd =_afeed ;};_cecfd :=_eg .Trunc (_eedee .ValueNumber );_dece :=_g .Buffer {};for _ ,_fcgbf :=range _dfgd {for _cecfd >=_fcgbf ._eagcf {_dece .WriteString (_fcgbf ._edbg );_cecfd -=_fcgbf ._eagcf ;};};return MakeStringResult (_dece .String ());};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func _ecb (_aeaf Result ,_agedb ,_bbfc string )(float64 ,Result ){var _bbbd float64 ;switch _aeaf .Type {case ResultTypeNumber :_bbbd =float64 (int (_aeaf .ValueNumber ));case ResultTypeString :_gecb :=DateValue ([]Result {_aeaf });if _gecb .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_agedb +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_bbfc );};_bbbd =_gecb .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_bbfc );};if _bbbd < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_agedb +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _bbbd ,_edgf ;};

// String returns a string representation of a named range.
func (_geebe NamedRangeRef )String ()string {return _geebe ._feedd };type Reference struct{Type ReferenceType ;Value string ;};func LexReader (r _b .Reader )chan *node {_dfdga :=NewLexer ();go _dfdga .lex (r );return _dfdga ._ffcf };func _edba (_eaag Result )bool {_ebcaae :=_eaag .Type ;return _ebcaae !=ResultTypeArray &&_ebcaae !=ResultTypeList ;};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggaf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bebgd :=args [2].ValueNumber ;if _bebgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_def :=args [3].ValueNumber ;return MakeNumberResult (_def *_dbdc *(_ggaf /_bebgd -1));};

// Eval evaluates the binary expression using the context given.
func (_cg BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_cf :=_cg ._fd .Eval (ctx ,ev );if _cf .Type ==ResultTypeError {return _cf ;};_bd :=_cg ._eaf .Eval (ctx ,ev );if _bd .Type ==ResultTypeError {return _bd ;};if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeArray {if !_cgf (_cf .ValueArray ,_bd .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _gg (_cg ._ab ,_cf .ValueArray ,_bd .ValueArray );}else if _cf .Type ==ResultTypeList {if len (_cf .ValueList )!=len (_bd .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _fde (_cg ._ab ,_cf .ValueList ,_bd .ValueList );};}else if _cf .Type ==ResultTypeArray &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return _bbb (_cg ._ab ,_cf .ValueArray ,_bd );}else if _cf .Type ==ResultTypeList &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return _eac (_cg ._ab ,_cf .ValueList ,_bd );};switch _cg ._ab {case BinOpTypePlus :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeNumberResult (_cf .ValueNumber +_bd .ValueNumber );};};case BinOpTypeMinus :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeNumberResult (_cf .ValueNumber -_bd .ValueNumber );};};case BinOpTypeMult :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeNumberResult (_cf .ValueNumber *_bd .ValueNumber );};};case BinOpTypeDiv :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {if _bd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_cf .ValueNumber /_bd .ValueNumber );};};case BinOpTypeExp :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeNumberResult (_eg .Pow (_cf .ValueNumber ,_bd .ValueNumber ));};};case BinOpTypeLT :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeBoolResult (_cf .ValueNumber < _bd .ValueNumber );};if _cf .Type ==ResultTypeString {return MakeBoolResult (_cf .ValueString < _bd .ValueString );};if _cf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cf .Type ==ResultTypeString &&_bd .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cf .Type ==ResultTypeNumber &&_bd .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cf .Type ==ResultTypeEmpty &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_cf .Type ==ResultTypeNumber ||_cf .Type ==ResultTypeString )&&_bd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeBoolResult (_cf .ValueNumber > _bd .ValueNumber );};if _cf .Type ==ResultTypeString {return MakeBoolResult (_cf .ValueString > _bd .ValueString );};if _cf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cf .Type ==ResultTypeString &&_bd .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cf .Type ==ResultTypeNumber &&_bd .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cf .Type ==ResultTypeEmpty &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_cf .Type ==ResultTypeNumber ||_cf .Type ==ResultTypeString )&&_bd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeBoolResult (_cf .ValueNumber ==_bd .ValueNumber );};if _cf .Type ==ResultTypeString {return MakeBoolResult (_cf .ValueString ==_bd .ValueString );};if _cf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_cf .Type ==ResultTypeString &&_bd .Type ==ResultTypeNumber )||(_cf .Type ==ResultTypeNumber &&_bd .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _cf .Type ==ResultTypeEmpty &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return MakeBoolResult (_aec (_bd ));}else if (_cf .Type ==ResultTypeNumber ||_cf .Type ==ResultTypeString )&&_bd .Type ==ResultTypeEmpty {return MakeBoolResult (_aec (_cf ));};case BinOpTypeNE :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeBoolResult (_cf .ValueNumber !=_bd .ValueNumber );};if _cf .Type ==ResultTypeString {return MakeBoolResult (_cf .ValueString !=_bd .ValueString );};if _cf .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_cf .Type ==ResultTypeString &&_bd .Type ==ResultTypeNumber )||(_cf .Type ==ResultTypeNumber &&_bd .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _cf .Type ==ResultTypeEmpty &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return MakeBoolResult (!_aec (_bd ));}else if (_cf .Type ==ResultTypeNumber ||_cf .Type ==ResultTypeString )&&_bd .Type ==ResultTypeEmpty {return MakeBoolResult (!_aec (_cf ));};case BinOpTypeLEQ :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeBoolResult (_cf .ValueNumber <=_bd .ValueNumber );};if _cf .Type ==ResultTypeString {return MakeBoolResult (_cf .ValueString <=_bd .ValueString );};if _cf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cf .Type ==ResultTypeString &&_bd .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cf .Type ==ResultTypeNumber &&_bd .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cf .Type ==ResultTypeEmpty &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return MakeBoolResult (_aec (_bd ));}else if (_cf .Type ==ResultTypeNumber ||_cf .Type ==ResultTypeString )&&_bd .Type ==ResultTypeEmpty {return MakeBoolResult (_aec (_cf ));};case BinOpTypeGEQ :if _cf .Type ==_bd .Type {if _cf .Type ==ResultTypeNumber {return MakeBoolResult (_cf .ValueNumber >=_bd .ValueNumber );};if _cf .Type ==ResultTypeString {return MakeBoolResult (_cf .ValueString >=_bd .ValueString );};if _cf .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cf .Type ==ResultTypeString &&_bd .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cf .Type ==ResultTypeNumber &&_bd .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cf .Type ==ResultTypeEmpty &&(_bd .Type ==ResultTypeNumber ||_bd .Type ==ResultTypeString ){return MakeBoolResult (_aec (_bd ));}else if (_cf .Type ==ResultTypeNumber ||_cf .Type ==ResultTypeString )&&_bd .Type ==ResultTypeEmpty {return MakeBoolResult (_aec (_cf ));};case BinOpTypeConcat :return MakeStringResult (_cf .Value ()+_bd .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func _degfa (_ebaa []Result )[]rangeIndex {_bfac :=[]rangeIndex {};_cggff :=len (_ebaa );for _dbfcd :=0;_dbfcd < _cggff -1;_dbfcd +=2{_efbb :=[]rangeIndex {};_bcdef :=_fbef (_ebaa [_dbfcd ]);_becc :=_egca (_ebaa [_dbfcd +1]);if _dbfcd ==0{for _eggc ,_egee :=range _bcdef {for _eaafg ,_abfc :=range _egee {if _aaeb (_abfc ,_becc ){_efbb =append (_efbb ,rangeIndex {_eggc ,_eaafg });};};};}else {for _ ,_bdgg :=range _bfac {_febb :=_bcdef [_bdgg ._cbae ][_bdgg ._cdbd ];if _aaeb (_febb ,_becc ){_efbb =append (_efbb ,_bdgg );};};};if len (_efbb )==0{return []rangeIndex {};};_bfac =_efbb [:];};return _bfac ;};const _agc ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_bgd EmptyExpr )Update (q *_af .UpdateQuery )Expression {return _bgd };

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_eebg :=len (args );if _eebg < 4||_eebg > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caf :=args [1].ValueNumber ;if _caf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdf :=args [2].ValueNumber ;if _dfdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gegc :=args [3].ValueNumber ;_bfgg :=0.0;if _eebg > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfgg =args [4].ValueNumber ;};_dfac :=0;if _eebg ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfac =int (args [5].ValueNumber );if _dfac !=0{_dfac =1;};};return MakeNumberResult (_fefa (_afee ,_caf ,_dfdf ,_gegc ,_bfgg ,_dfac ));};func init (){_dgae =_da .New (_da .NewSource (_bg .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_eceg ("\u0041\u0053\u0049\u004e",_eg .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_eceg ("\u0041\u0053\u0049\u004e",_eg .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_eceg ("\u0041\u0053\u0049\u004e",_eg .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_eceg ("\u0041\u0043\u004f\u0054",func (_bbfff float64 )float64 {return _eg .Pi /2-_eg .Atan (_bbfff )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_eceg ("\u0041\u0043\u004fT\u0048",func (_bcecb float64 )float64 {return _eg .Atanh (1/_bcecb )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_eceg ("\u0041\u0053\u0049\u004e",_eg .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_eceg ("\u0041\u0053\u0049N\u0048",_eg .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_eceg ("\u0041\u0054\u0041\u004e",_eg .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_eceg ("\u0041\u0054\u0041N\u0048",_eg .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_eceg ("\u0043\u004f\u0053",_eg .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_eceg ("\u0043\u004f\u0053\u0048",_eg .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_fgegg ("\u0043\u004f\u0054",_eg .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_fgegg ("\u0043\u004f\u0054\u0048",_eg .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_fgegg ("\u0043\u0053\u0043",_eg .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_fgegg ("\u0043\u0053\u0043",_eg .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_eceg ("\u0045\u0058\u0050",_eg .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_eceg ("\u004c\u004e",_eg .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_eceg ("\u004c\u004f\u00471\u0030",_eg .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_fgegg ("\u0053\u0045\u0043",_eg .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_fgegg ("\u0053\u0045\u0043\u0048",_eg .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_eceg ("\u0053\u0049\u004e",_eg .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_eceg ("\u0053\u0049\u004e\u0048",_eg .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_eceg ("\u0053\u0051\u0052\u0054",_eg .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_eceg ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_gcef float64 )float64 {return _eg .Sqrt (_gcef *_eg .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_eceg ("\u0054\u0041\u004e",_eg .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_eceg ("\u0054\u0041\u004e\u0048",_eg .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const _bdbf =57348;const _gec ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Eval evaluates a vertical range returning a list of results or an error.
func (_bdbbb VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_fbdd :=_bdbbb .verticalRangeReference ();if _fefcd ,_gbbded :=ev .GetFromCache (_fbdd );_gbbded {return _fefcd ;};_gfbee ,_bdeeg :=_fdgc (ctx ,_bdbbb ._gfcg ,_bdbbb ._edefg );_ddde :=_affa (ctx ,ev ,_gfbee ,_bdeeg );ev .SetCache (_fbdd ,_ddde );return _ddde ;};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eecgd :=args [0].AsString ();if _eecgd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gecg :=_g .Buffer {};for _ ,_eagf :=range _eecgd .ValueString {if _e .IsPrint (_eagf ){_gecg .WriteRune (_eagf );};};return MakeStringResult (_gecg .String ());};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_ceda :=_ef .Split (v ,"\u003a");if len (_ceda )!=2{return nil ;};if _ceda [0]> _ceda [1]{_ceda [0],_ceda [1]=_ceda [1],_ceda [0];};return VerticalRange {_gfcg :_ceda [0],_edefg :_ceda [1]};};

// Reference returns an invalid reference for Error.
func (_fc Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fbc =_bg .Second *1;func _egf ()evCache {_bfc :=evCache {};_bfc ._gfd =make (map[string ]Result );_bfc ._abg =&_ea .Mutex {};return _bfc ;};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_feabd :=args [0].AsString ();if _feabd .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_gadg :=_g .Buffer {};_baef :=false ;for _ ,_bacf :=range _feabd .ValueString {if !_baef &&_e .IsLetter (_bacf ){_gadg .WriteRune (_e .ToUpper (_bacf ));}else {_gadg .WriteRune (_e .ToLower (_bacf ));};_baef =_e .IsLetter (_bacf );};return MakeStringResult (_gadg .String ());};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_fea :=&defEval {};_fea .evCache =_egf ();return _fea };

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_ffb ,_ddff :=_afdc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _ddff .Type ==ResultTypeError {return _ddff ;};return MakeNumberResult (_ead (_ffb ._dagb ,_ffb ._gced ,_ffb ._fgeg ,_ffb ._fgab ));};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dedbg :=int (args [0].ValueNumber );return MakeBoolResult (_dedbg !=_dedbg /2*2);};var _baeb =[...]int {-1,1,1,-1,-2,0};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_bada :=len (args );if _bada < 3||_bada > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bebb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcgf :=args [1].ValueNumber ;if _gcgf ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dagbg :=args [2].ValueNumber ;_baaa :=0.0;if _bada >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baaa =args [3].ValueNumber ;};_gedd :=0.0;if _bada ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gedd =args [4].ValueNumber ;if _gedd !=0{_gedd =1;};};var _dfdc float64 ;if _bebb ==0{_dfdc =(_dagbg +_baaa )/_gcgf ;}else {_bcfg :=_eg .Pow (1+_bebb ,_gcgf );if _gedd ==1{_dfdc =(_baaa *_bebb /(_bcfg -1)+_dagbg *_bebb /(1-1/_bcfg ))/(1+_bebb );}else {_dfdc =_baaa *_bebb /(_bcfg -1)+_dagbg *_bebb /(1-1/_bcfg );};};return MakeNumberResult (-_dfdc );};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fedf :=args [0].AsNumber ();if _fedf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcfcc :=args [1].AsNumber ();if _fcfcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eeae :=int (_fcfcc .ValueNumber );if _eeae < 0||_eeae > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_dafc :=0;if len (args )> 2{_ecbc :=args [2].AsNumber ();if _ecbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dafc =int (_ecbc .ValueNumber );};_ccbd :=_ae .FormatInt (int64 (_fedf .ValueNumber ),_eeae );if len (_ccbd )< _dafc {_ccbd =_ef .Repeat ("\u0030",_dafc -len (_ccbd ))+_ccbd ;};return MakeStringResult (_ccbd );};func _aafd (_edeb ,_cffc ,_cggg ,_dfeb float64 ,_fgbe int )float64 {var _dgfc float64 ;if _edeb ==0{_dgfc =(_cggg +_dfeb )/_cffc ;}else {_fdcd :=_eg .Pow (1+_edeb ,_cffc );if _fgbe ==1{_dgfc =(_dfeb *_edeb /(_fdcd -1)+_cggg *_edeb /(1-1/_fdcd ))/(1+_edeb );}else {_dgfc =_dfeb *_edeb /(_fdcd -1)+_cggg *_edeb /(1-1/_fdcd );};};return -_dgfc ;};const _cgae =57370;

// Match implements the MATCH function.
func Match (args []Result )Result {_cfcg :=len (args );if _cfcg !=2&&_cfcg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bga :=1;if _cfcg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_cdfe :=args [2].ValueNumber ;if _cdfe ==-1||_cdfe ==0{_bga =int (_cdfe );};};_adfb :=args [1];var _fdab []Result ;switch _adfb .Type {case ResultTypeList :_fdab =_adfb .ValueList ;case ResultTypeArray :_agea :=_adfb .ValueArray ;for _ ,_bgae :=range _agea {if len (_bgae )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fdab =append (_fdab ,_bgae [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fbbg :=_egca (args [0]);switch _bga {case 0:for _gfagg ,_daee :=range _fdab {if _abdbe (_daee ,_fbbg ){return MakeNumberResult (float64 (_gfagg +1));};};case -1:for _faee :=0;_faee < len (_fdab );_faee ++{if _abdbe (_fdab [_faee ],_fbbg ){return MakeNumberResult (float64 (_faee +1));};if _fbbg ._edfb &&(_fdab [_faee ].ValueNumber < _fbbg ._cfeeg ){if _faee ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_faee ));};};case 1:for _fgde :=0;_fgde < len (_fdab );_fgde ++{if _abdbe (_fdab [_fgde ],_fbbg ){return MakeNumberResult (float64 (_fgde +1));};if _fbbg ._edfb &&(_fdab [_fgde ].ValueNumber > _fbbg ._cfeeg ){if _fgde ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fgde ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};var _abgcf =[...]uint8 {0,20,37,60,78,96};func _afdc (_gga []Result ,_bfcf string )(*couponArgs ,Result ){_cdca :=len (_gga );if _cdca !=3&&_cdca !=4{return nil ,MakeErrorResult (_bfcf +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dae ,_ddeb ,_fbe :=_cedg (_gga [0],_gga [1],_bfcf );if _fbe .Type ==ResultTypeError {return nil ,_fbe ;};if _gga [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfcf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfc :=_gga [2].ValueNumber ;if !_eacce (_cfc ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_bfcf );};_dge :=0;if _cdca ==4&&_gga [3].Type !=ResultTypeEmpty {if _gga [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bfcf +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dge =int (_gga [3].ValueNumber );if !_aeb (_dge ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bfcf );};};return &couponArgs {_dae ,_ddeb ,int (_cfc ),_dge },_edgf ;};

// String returns a string representation of a vertical range.
func (_gegg VerticalRange )String ()string {return _gegg .verticalRangeReference ()};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_bgdcb :=_g .Buffer {};for _ ,_defg :=range args {switch _defg .Type {case ResultTypeString :_bgdcb .WriteString (_defg .ValueString );case ResultTypeNumber :var _bcfe string ;if _defg .IsBoolean {if _defg .ValueNumber ==0{_bcfe ="\u0046\u0041\u004cS\u0045";}else {_bcfe ="\u0054\u0052\u0055\u0045";};}else {_bcfe =_defg .AsString ().ValueString ;};_bgdcb .WriteString (_bcfe );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_bgdcb .String ());};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dbba :=args [0].AsNumber ();_edaff :=args [1].AsNumber ();if _dbba .Type !=ResultTypeNumber ||_edaff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _edaff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_bbeg ,_aabd :=_eg .Modf (_dbba .ValueNumber /_edaff .ValueNumber );if _aabd < 0{_bbeg --;};return MakeNumberResult (_dbba .ValueNumber -_edaff .ValueNumber *_bbeg );};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdae :=args [0].AsString ();if _cdae .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffdec :=_g .Buffer {};_gdcf :=false ;_eadge :=false ;_efag :=0;for _ ,_fegf :=range _cdae .ValueString {_fgbf :=_fegf ==' ';if _fgbf {if !_gdcf {continue ;};if !_eadge {_efag ++;_ffdec .WriteRune (_fegf );};}else {_efag =0;_gdcf =true ;_ffdec .WriteRune (_fegf );};_eadge =_fgbf ;};_ffdec .Truncate (_ffdec .Len ()-_efag );return MakeStringResult (_ffdec .String ());};func _acbff (_efcg ,_ebda float64 ,_cba ,_cdedc int )(float64 ,Result ){_aeaff ,_cef :=_edgg (_efcg ),_edgg (_ebda );if _cef .After (_aeaff ){_dfed :=_cbg (_aeaff ,_cef ,_cba ,_cdedc );_agbag :=(_cef .Year ()-_dfed .Year ())*12+int (_cef .Month ())-int (_dfed .Month ());return float64 (_agbag *_cba )/12.0,_edgf ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gcb ,_dgc :=_afdc (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _dgc .Type ==ResultTypeError {return _dgc ;};_abdf :=_edgg (_gcb ._dagb );_afe :=_edgg (_gcb ._gced );_dbde :=_gcb ._fgeg ;_fcc :=_gcb ._fgab ;_fabf :=_cbg (_abdf ,_afe ,_dbde ,_fcc );_cdfa ,_fee ,_gdfa :=_fabf .Date ();return MakeNumberResult (_gef (_cdfa ,int (_fee ),_gdfa ));};func _ggec (_aaab ,_ffe float64 ,_dfa ,_bbbda int )float64 {_bbff :=_edgg (_aaab );_fgcag :=_edgg (_ffe );if _bbbda ==1{_bgcfg :=_cbg (_bbff ,_fgcag ,_dfa ,1);_cea :=_bgcfg .AddDate (0,12/_dfa ,0);return _gbf (_bgcfg ,_cea ,_bbbda );};return float64 (_faa (0,_bbbda ))/float64 (_dfa );};const _cbef =57350;const _fafeb int =30;

// Reference returns an invalid reference for EmptyExpr.
func (_fff EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_feedd :v }};var _gebcd =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ffdfc :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_cbaeb :=args [1].ValueNumber !=0;_fdege :=_geffa (args [2:],[]string {},_cbaeb );return MakeStringResult (_ef .Join (_fdege ,_ffdfc ));};func _aae (_ddc ,_cfbf ,_feca ,_ege int )int {if !_bge (_ege ){return _feca ;};_dffg :=_feca ;_fecf :=_cfa (_ddc ,_cfbf );if _dffg > 30||_feca >=_fecf ||_dffg >=_fecf {_dffg =30;};return _dffg ;};const _fccf =57369;

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfeae :=args [0].AsNumber ();if _gfeae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_eg .Pi *_gfeae .ValueNumber );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddcg :=args [0].AsString ();_ebdag :=args [1].AsString ();if _ddcg .Type !=ResultTypeString ||_ebdag .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_ddcg .ValueString ==_ebdag .ValueString );};const _dcage =57371;type parsedReplaceObject struct{_bgbfa string ;_bebec int ;_eaff int ;_gafca string ;};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_cegg :=len (args );if _cegg !=6&&_cegg !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfff ,_efbg ,_fabd :=_cedg (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _fabd .Type ==ResultTypeError {return _fabd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_geca :=args [2].ValueNumber ;if _geca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dacgc :=args [3].ValueNumber ;if _dacgc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dedb :=args [4].ValueNumber ;if _dedb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eefb :=args [5];if _eefb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gebe :=_eefb .ValueNumber ;if !_eacce (_gebe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gagf :=0;if _cegg ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gagf =int (args [6].ValueNumber );if !_aeb (_gagf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_aaaf ,_fabd :=_bccb (_cfff ,_efbg ,_geca ,_dacgc ,_dedb ,_gebe ,_gagf );if _fabd .Type ==ResultTypeError {return _fabd ;};return MakeNumberResult (_aaaf );};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _fcbea (args ,false )};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_feffb (args ,_ffbe ))};const _egg =86400000000000;func _gcaf (_eeaea ,_caec float64 )float64 {_eeaea =_eg .Trunc (_eeaea );_caec =_eg .Trunc (_caec );if _eeaea ==0&&_caec ==0{return 0;};return _eeaea *_caec /_aaec (_eeaea ,_caec );};func _geba (_bfaad string ,_fcbef []Result )(*parsedSearchObject ,Result ){_fadcc :=len (_fcbef );if _fadcc !=2&&_fadcc !=3{return nil ,MakeErrorResult (_bfaad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edce :=_fcbef [0];if _edce .Type ==ResultTypeError {return nil ,_edce ;};if _edce .Type !=ResultTypeString &&_edce .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_cdcd :=_fcbef [1];if _cdcd .Type ==ResultTypeError {return nil ,_cdcd ;};if _cdcd .Type !=ResultTypeString &&_cdcd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_cegf :=_cdcd .Value ();_ebdg :=_edce .Value ();_eefgg :=1;if _fadcc ==3&&_fcbef [2].Type !=ResultTypeEmpty {_efdgb :=_fcbef [2];if _efdgb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_eefgg =int (_efdgb .ValueNumber );if _eefgg < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _eefgg > len (_cegf ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_ebdg ,_cegf ,_eefgg },_edgf ;};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_dfab :=_gccf (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _dfab .Type !=ResultTypeEmpty {return _dfab ;};_fdea :=_degfa (args [1:]);_aaeff :=_eg .MaxFloat64 ;_cdfaa :=_fbef (args [0]);for _ ,_ffde :=range _fdea {_eagd :=_cdfaa [_ffde ._cbae ][_ffde ._cdbd ].ValueNumber ;if _aaeff > _eagd {_aaeff =_eagd ;};};if _aaeff ==_eg .MaxFloat64 {_aaeff =0;};return MakeNumberResult (float64 (_aaeff ));};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_gaeed :=args [0].AsNumber ();if _gaeed .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgef :=_eg .Signbit (_gaeed .ValueNumber );_cefc ,_cedd :=_eg .Modf ((_gaeed .ValueNumber -1)/2);_gfcff :=_cefc *2+1;if _cedd !=0{if !_fgef {_gfcff +=2;}else {_gfcff -=2;};};return MakeNumberResult (_gfcff );};var _ggfe []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};var (_cegge =0;_bgfd =false ;);

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _dcgfg (){_fdeg =_f .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_ebgcc =_f .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_cbeba =_f .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_dbdae =_f .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_dbac =_f .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_aeecf =_f .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};type ri struct{_eagcf float64 ;_edbg string ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_abdg :e }};

// Eval evaluates the binary expression using the context given.
func (_egb BinaryExpr )String ()string {_gaa :="";switch _egb ._ab {case BinOpTypePlus :_gaa ="\u002b";case BinOpTypeMinus :_gaa ="\u002d";case BinOpTypeMult :_gaa ="\u002a";case BinOpTypeDiv :_gaa ="\u002f";case BinOpTypeExp :_gaa ="\u005e";case BinOpTypeLT :_gaa ="\u003c";case BinOpTypeGT :_gaa ="\u003e";case BinOpTypeEQ :_gaa ="\u003d";case BinOpTypeLEQ :_gaa ="\u003c\u003d";case BinOpTypeGEQ :_gaa ="\u003e\u003d";case BinOpTypeNE :_gaa ="\u003c\u003e";case BinOpTypeConcat :_gaa ="\u0026";};return _egb ._fd .String ()+_gaa +_egb ._eaf .String ();};func _bbc (_bcecf ,_cdfd ,_fdbg ,_gddeb ,_dccg float64 )float64 {var _aegaf float64 ;_adge :=_dccg /_fdbg ;if _adge >=1{_adge =1;if _gddeb ==1{_aegaf =_bcecf ;}else {_aegaf =0;};}else {_aegaf =_bcecf *_eg .Pow (1-_adge ,_gddeb -1);};_efda :=_bcecf *_eg .Pow (1-_adge ,_gddeb );var _acda float64 ;if _efda < _cdfd {_acda =_aegaf -_cdfd ;}else {_acda =_aegaf -_efda ;};if _acda < 0{_acda =0;};return _acda ;};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// String returns a string representation of CellRef.
func (_efc CellRef )String ()string {return _efc ._gdd };

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebcad :=args [0].AsNumber ();if _ebcad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ceeff :=float64 (1);_ceee :=args [1].AsNumber ();if _ceee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ceeff =_ceee .ValueNumber ;if _ceeff < 0&&_ebcad .ValueNumber > 0||_ceeff > 0&&_ebcad .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_acgg :=_ebcad .ValueNumber ;_acgg ,_fade :=_eg .Modf (_acgg /_ceeff );if _eg .Trunc (_fade +0.5)> 0{_acgg ++;};return MakeNumberResult (_acgg *_ceeff );};const _gcbc =2;func init (){_dcgfg ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bdefa :=ctx .GetEpoch ();_agcf ,_aeagf :=_gafc (args [0].Value (),_bdefa );if _aeagf !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ebgbc :=_agcf .Year ();return MakeBoolResult (_ffdc (_ebgbc ));};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gagaf :=args [0].AsNumber ();if _gagaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_efefd :=float64 (1);if _gagaf .ValueNumber < 0{_efefd =-1;};if len (args )> 1{_aacfe :=args [1].AsNumber ();if _aacfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efefd =_aacfe .ValueNumber ;};_adbbc :=float64 (1);if len (args )> 2{_bdga :=args [2].AsNumber ();if _bdga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_adbbc =_bdga .ValueNumber ;};if len (args )==1{return MakeNumberResult (_eg .Ceil (_gagaf .ValueNumber ));};_gfaa :=_gagaf .ValueNumber ;_gfaa ,_edabb :=_eg .Modf (_gfaa /_efefd );if _edabb !=0{if _gagaf .ValueNumber > 0{_gfaa ++;}else if _adbbc < 0{_gfaa --;};};return MakeNumberResult (_gfaa *_efefd );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_edgad ,_badcb int };

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _fcbf (args ,false )};

// Eval evaluates and returns the result of the cell reference.
func (_acb CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_acb ._gdd ,ev )};

// Eval evaluates and returns an expression with prefix.
func (_acbac PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_fdced :=_acbac ._abbca .Reference (ctx ,ev );switch _fdced .Type {case ReferenceTypeSheet :if _ecfec (_fdced ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fdced .Value ));};_dfabg :=ctx .Sheet (_fdced .Value );return _acbac ._debae .Eval (_dfabg ,ev );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdced .Type ));};};func _faa (_cgc ,_bcda int )int {switch _bcda {case 1:if _ffdc (_cgc ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};func _ccfc (_dgbf ,_bdda []float64 ,_adgd float64 )float64 {_eedcc :=_adgd +1;_cdbb :=_dgbf [0];_aacb :=len (_dgbf );_aabf :=_bdda [0];for _cgacc :=1;_cgacc < _aacb ;_cgacc ++{_cdbb +=_dgbf [_cgacc ]/_eg .Pow (_eedcc ,(_bdda [_cgacc ]-_aabf )/365);};return _cdbb ;};func _cega (_ffab ,_fded []float64 ,_eagc float64 )Result {_eaeg :=false ;_bacg :=false ;for _fdbb :=0;_fdbb < len (_ffab );_fdbb ++{if _ffab [_fdbb ]> 0{_eaeg =true ;};if _ffab [_fdbb ]< 0{_bacg =true ;};};if !_eaeg ||!_bacg {return MakeErrorResultType (ErrorTypeNum ,"");};_dabca :=_eagc ;_aecd :=1e-10;_cdac :=0;_dbaf :=50;_dagf :=false ;for {_bgcff :=_ccfc (_ffab ,_fded ,_dabca );_afdd :=_dabca -_bgcff /_fdcg (_ffab ,_fded ,_dabca );_fagc :=_eg .Abs (_afdd -_dabca );_dabca =_afdd ;_cdac ++;if _fagc <=_aecd ||_eg .Abs (_bgcff )<=_aecd {break ;};if _cdac > _dbaf {_dagf =true ;break ;};};if _dagf ||_eg .IsNaN (_dabca )||_eg .IsInf (_dabca ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_dabca );};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_deedd :=args [0].AsNumber ();if _deedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fcefd :=10.0;if len (args )> 1{_deege :=args [1].AsNumber ();if _deege .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_fcefd =args [1].ValueNumber ;};if _deedd .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _fcefd ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_eg .Log (_deedd .ValueNumber )/_eg .Log (_fcefd ));};func (_dcec *Lexer )lex (_fedgb _b .Reader ){_adbe ,_egff ,_faba :=0,0,0;_adged :=-1;_adfdg ,_gega ,_feacg :=0,0,0;_ =_feacg ;_bacb :=1;_ =_bacb ;_gagae :=make ([]byte ,4096);_bgda :=false ;for !_bgda {_deagg :=0;if _adfdg > 0{_deagg =_egff -_adfdg ;};_egff =0;_cbaab ,_aaccc :=_fedgb .Read (_gagae [_deagg :]);if _cbaab ==0||_aaccc !=nil {_bgda =true ;};_faba =_cbaab +_deagg ;if _faba < len (_gagae ){_adged =_faba ;};{_adbe =_aacff ;_adfdg =0;_gega =0;_feacg =0;};{var _dfaba int ;var _gedb uint ;if _egff ==_faba {goto _accbe ;};if _adbe ==0{goto _baaec ;};_dcde :_dfaba =int (_ceag [_adbe ]);_gedb =uint (_bggf [_dfaba ]);_dfaba ++;for ;_gedb > 0;_gedb --{_dfaba ++;switch _bggf [_dfaba -1]{case 2:_adfdg =_egff ;};};switch _adbe {case 30:switch _gagae [_egff ]{case 34:goto _daggg ;case 35:goto _accc ;case 36:goto _bdac ;case 38:goto _cfebg ;case 39:goto _ffdd ;case 40:goto _gfba ;case 41:goto _ggfad ;case 42:goto _gadd ;case 43:goto _bcca ;case 44:goto _aagg ;case 45:goto _gcbga ;case 47:goto _afgfd ;case 58:goto _cccg ;case 59:goto _abcef ;case 60:goto _agde ;case 61:goto _eaccg ;case 62:goto _eccgg ;case 63:goto _aaeaf ;case 70:goto _dbbgc ;case 84:goto _faebc ;case 92:goto _bggac ;case 94:goto _dadc ;case 95:goto _eegf ;case 123:goto _cafaf ;case 125:goto _efbbb ;};switch {case _gagae [_egff ]< 65:switch {case _gagae [_egff ]> 37:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _cdcg ;};case _gagae [_egff ]>=33:goto _aaeaf ;};case _gagae [_egff ]> 90:switch {case _gagae [_egff ]> 93:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _facb ;};case _gagae [_egff ]>=91:goto _aaeaf ;};default:goto _cfce ;};goto _gbeb ;case 1:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _gffaf ;case 123:goto _gffaf ;case 125:goto _gffaf ;};switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gffaf ;};case _gagae [_egff ]> 45:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _gffaf ;};case _gagae [_egff ]>=58:goto _gffaf ;};default:goto _gffaf ;};goto _gbeb ;case 0:goto _baaec ;case 2:if _gagae [_egff ]==34{goto _fbabc ;};goto _daggg ;case 31:if _gagae [_egff ]==34{goto _daggg ;};goto _dffbd ;case 3:switch _gagae [_egff ]{case 78:goto _ecca ;case 82:goto _fcae ;};goto _aaeaf ;case 4:switch _gagae [_egff ]{case 47:goto _efab ;case 85:goto _cbcaf ;};goto _aaeaf ;case 5:if _gagae [_egff ]==65{goto _gcde ;};goto _aaeaf ;case 6:switch _gagae [_egff ]{case 76:goto _gecge ;case 77:goto _gfee ;};goto _aaeaf ;case 7:if _gagae [_egff ]==76{goto _gfee ;};goto _aaeaf ;case 8:if _gagae [_egff ]==33{goto _gcde ;};goto _aaeaf ;case 9:if _gagae [_egff ]==69{goto _adaf ;};goto _aaeaf ;case 10:if _gagae [_egff ]==70{goto _ccgg ;};goto _aaeaf ;case 11:if _gagae [_egff ]==33{goto _dbfa ;};goto _aaeaf ;case 12:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _aaeaf ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=45{goto _aaeaf ;};case _gagae [_egff ]>=34:goto _aaeaf ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]< 65:if 58<=_gagae [_egff ]&&_gagae [_egff ]<=63{goto _aaeaf ;};case _gagae [_egff ]> 90:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _aaeaf ;};default:goto _afgf ;};default:goto _gfaab ;};goto _gbeb ;case 13:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _aaeaf ;case 58:goto _fbcd ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=45{goto _aaeaf ;};case _gagae [_egff ]>=34:goto _aaeaf ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _aaeaf ;};case _gagae [_egff ]>=59:goto _aaeaf ;};default:goto _gfaab ;};goto _gbeb ;case 14:if _gagae [_egff ]==36{goto _babg ;};if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _edbc ;};goto _gffaf ;case 15:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _edbc ;};goto _gffaf ;case 32:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _edbc ;};goto _cgcb ;case 16:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 47:goto _aaeaf ;case 58:goto _egecc ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 45:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _fcaf ;};case _gagae [_egff ]>=34:goto _aaeaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]> 90:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _aaeaf ;};case _gagae [_egff ]>=65:goto _afgf ;};default:goto _aaeaf ;};goto _gbeb ;case 17:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _gffaf ;case 123:goto _gffaf ;case 125:goto _gffaf ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=45{goto _gffaf ;};case _gagae [_egff ]>=34:goto _gffaf ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _gffaf ;};case _gagae [_egff ]>=58:goto _gffaf ;};default:goto _fcaf ;};goto _gbeb ;case 33:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _fafee ;case 123:goto _fafee ;case 125:goto _fafee ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=45{goto _fafee ;};case _gagae [_egff ]>=34:goto _fafee ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _fafee ;};case _gagae [_egff ]>=58:goto _fafee ;};default:goto _fcaf ;};goto _gbeb ;case 18:if _gagae [_egff ]==36{goto _egefb ;};if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bcgaa ;};goto _gffaf ;case 19:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bcgaa ;};goto _gffaf ;case 34:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bcgaa ;};goto _dfcbf ;case 20:switch _gagae [_egff ]{case 39:goto _aaeaf ;case 42:goto _aaeaf ;case 47:goto _aaeaf ;case 58:goto _aaeaf ;case 63:goto _aaeaf ;};if 91<=_gagae [_egff ]&&_gagae [_egff ]<=93{goto _aaeaf ;};goto _cddgf ;case 21:switch _gagae [_egff ]{case 39:goto _cafac ;case 42:goto _aaeaf ;case 47:goto _aaeaf ;case 58:goto _aaeaf ;case 63:goto _aaeaf ;};if 91<=_gagae [_egff ]&&_gagae [_egff ]<=93{goto _aaeaf ;};goto _cddgf ;case 22:if _gagae [_egff ]==33{goto _gbbdc ;};goto _aaeaf ;case 35:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _cgbd ;case 58:goto _fbcd ;case 101:goto _ceae ;case 123:goto _baaae ;case 125:goto _baaae ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=47{goto _baaae ;};case _gagae [_egff ]>=34:goto _baaae ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _baaae ;};case _gagae [_egff ]>=59:goto _baaae ;};default:goto _cdcg ;};goto _gbeb ;case 36:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _baaae ;case 101:goto _ceae ;case 123:goto _baaae ;case 125:goto _baaae ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=45{goto _baaae ;};case _gagae [_egff ]>=34:goto _baaae ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _baaae ;};case _gagae [_egff ]>=58:goto _baaae ;};default:goto _cgbd ;};goto _gbeb ;case 23:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _fgfa ;case 123:goto _fgfa ;case 125:goto _fgfa ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=45{goto _fgfa ;};case _gagae [_egff ]>=34:goto _fgfa ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _fgfa ;};case _gagae [_egff ]>=58:goto _fgfa ;};default:goto _abacg ;};goto _gbeb ;case 37:switch _gagae [_egff ]{case 33:goto _ddcc ;case 47:goto _baaae ;case 123:goto _baaae ;case 125:goto _baaae ;};switch {case _gagae [_egff ]< 48:switch {case _gagae [_egff ]> 35:if 37<=_gagae [_egff ]&&_gagae [_egff ]<=45{goto _baaae ;};case _gagae [_egff ]>=34:goto _baaae ;};case _gagae [_egff ]> 57:switch {case _gagae [_egff ]> 63:if 91<=_gagae [_egff ]&&_gagae [_egff ]<=94{goto _baaae ;};case _gagae [_egff ]>=58:goto _baaae ;};default:goto _abacg ;};goto _gbeb ;case 38:switch _gagae [_egff ]{case 61:goto _fcabc ;case 62:goto _acfc ;};goto _dbdg ;case 39:if _gagae [_egff ]==61{goto _fbab ;};goto _dcabb ;case 24:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _aaeaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _aaeaf ;};default:goto _aaeaf ;};goto _gbeb ;case 40:switch _gagae [_egff ]{case 33:goto _ddcc ;case 40:goto _efcd ;case 46:goto _fadfd ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _fadfd ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _fadfd ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 41:switch _gagae [_egff ]{case 46:goto _fgabf ;case 92:goto _fgabf ;case 95:goto _fgabf ;};switch {case _gagae [_egff ]< 65:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _fgabf ;};case _gagae [_egff ]> 90:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _fgabf ;};default:goto _fgabf ;};goto _gadga ;case 42:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 43:switch _gagae [_egff ]{case 33:goto _ddcc ;case 40:goto _efcd ;case 46:goto _fadfd ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _fafee ;case 125:goto _fafee ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _fafee ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};default:goto _fafee ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _fadfd ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _fafee ;};default:goto _fafee ;};goto _gbeb ;case 44:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gffaf ;case 125:goto _gffaf ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _gffaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gffaf ;};default:goto _gffaf ;};goto _gbeb ;case 25:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 65:goto _bdgfc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _aaeaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 66<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _aaeaf ;};default:goto _aaeaf ;};goto _gbeb ;case 45:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 76:goto _bbffa ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 46:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 83:goto _fefb ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 47:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 69:goto _dbdcf ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 26:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 79:goto _gfaf ;case 82:goto _dcfba ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _aaeaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _aaeaf ;};default:goto _aaeaf ;};goto _gbeb ;case 48:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 68:goto _ccddb ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 49:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 79:goto _dfegcd ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 50:switch _gagae [_egff ]{case 33:goto _ddcc ;case 36:goto _acba ;case 40:goto _efcd ;case 46:goto _fadfd ;case 58:goto _egecc ;case 85:goto _fefb ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 59:switch {case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _gcdfa ;};case _gagae [_egff ]>=34:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _addc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 27:switch _gagae [_egff ]{case 46:goto _fgabf ;case 92:goto _fgabf ;case 95:goto _fgabf ;};switch {case _gagae [_egff ]< 65:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _fgabf ;};case _gagae [_egff ]> 90:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _fgabf ;};default:goto _fgabf ;};goto _aaeaf ;case 28:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 120:goto _degcd ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _aaeaf ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _aaeaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _aaeaf ;};default:goto _aaeaf ;};goto _gbeb ;case 51:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 108:goto _ecff ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 52:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 102:goto _bgef ;case 110:goto _gdcb ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 53:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 110:goto _egfde ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 54:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _cbcf ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 55:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _dcea ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _dcea ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 56:switch _gagae [_egff ]{case 33:goto _ddcc ;case 40:goto _dede ;case 46:goto _dcea ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _dcea ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _dcea ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 57:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 109:goto _cabdd ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 58:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _caeefd ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _gadga ;case 125:goto _gadga ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gadga ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gadga ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gadga ;};default:goto _gadga ;};goto _gbeb ;case 59:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _debb ;case 123:goto _gffaf ;case 125:goto _gffaf ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _gffaf ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _gffaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _debb ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _gffaf ;};default:goto _gffaf ;};goto _gbeb ;case 29:switch _gagae [_egff ]{case 33:goto _ddcc ;case 46:goto _bgfdc ;case 92:goto _fgabf ;case 95:goto _bgfdc ;case 123:goto _aaeaf ;case 125:goto _aaeaf ;};switch {case _gagae [_egff ]< 58:switch {case _gagae [_egff ]< 37:if 34<=_gagae [_egff ]&&_gagae [_egff ]<=35{goto _aaeaf ;};case _gagae [_egff ]> 47:if 48<=_gagae [_egff ]&&_gagae [_egff ]<=57{goto _bgfdc ;};default:goto _aaeaf ;};case _gagae [_egff ]> 63:switch {case _gagae [_egff ]< 91:if 65<=_gagae [_egff ]&&_gagae [_egff ]<=90{goto _bgfdc ;};case _gagae [_egff ]> 94:if 97<=_gagae [_egff ]&&_gagae [_egff ]<=122{goto _bgfdc ;};default:goto _aaeaf ;};default:goto _aaeaf ;};goto _gbeb ;};_aaeaf :_adbe =0;goto _aadg ;_gbeb :_adbe =1;goto _aadg ;_daggg :_adbe =2;goto _aadg ;_accc :_adbe =3;goto _aadg ;_ecca :_adbe =4;goto _aadg ;_efab :_adbe =5;goto _aadg ;_cbcaf :_adbe =6;goto _aadg ;_gecge :_adbe =7;goto _aadg ;_gfee :_adbe =8;goto _aadg ;_fcae :_adbe =9;goto _aadg ;_adaf :_adbe =10;goto _aadg ;_ccgg :_adbe =11;goto _aadg ;_bdac :_adbe =12;goto _aadg ;_gfaab :_adbe =13;goto _aadg ;_fbcd :_adbe =14;goto _aadg ;_babg :_adbe =15;goto _aadg ;_afgf :_adbe =16;goto _aadg ;_acba :_adbe =17;goto _aadg ;_egecc :_adbe =18;goto _aadg ;_egefb :_adbe =19;goto _aadg ;_ffdd :_adbe =20;goto _aadg ;_cddgf :_adbe =21;goto _aadg ;_cafac :_adbe =22;goto _aadg ;_ceae :_adbe =23;goto _aadg ;_cfce :_adbe =24;goto _aadg ;_dbbgc :_adbe =25;goto _aadg ;_faebc :_adbe =26;goto _aadg ;_bggac :_adbe =27;goto _aadg ;_eegf :_adbe =28;goto _aadg ;_facb :_adbe =29;goto _aadg ;_gffaf :_adbe =30;goto _bgdb ;_ddcc :_adbe =30;goto _ddgdf ;_gcde :_adbe =30;goto _bgdfg ;_dbfa :_adbe =30;goto _bddg ;_gbbdc :_adbe =30;goto _dcdgg ;_fgfa :_adbe =30;goto _bgfcb ;_efcd :_adbe =30;goto _ebeab ;_cfebg :_adbe =30;goto _fcgc ;_gfba :_adbe =30;goto _bgdgd ;_ggfad :_adbe =30;goto _abdbg ;_gadd :_adbe =30;goto _fbgdc ;_bcca :_adbe =30;goto _afga ;_aagg :_adbe =30;goto _fgggc ;_gcbga :_adbe =30;goto _ggead ;_afgfd :_adbe =30;goto _fggg ;_cccg :_adbe =30;goto _fbdcea ;_abcef :_adbe =30;goto _feacd ;_eaccg :_adbe =30;goto _eegbb ;_dadc :_adbe =30;goto _ccfb ;_cafaf :_adbe =30;goto _ecae ;_efbbb :_adbe =30;goto _eegg ;_dffbd :_adbe =30;goto _ddddb ;_cgcb :_adbe =30;goto _cbcfd ;_fafee :_adbe =30;goto _adeaf ;_dfcbf :_adbe =30;goto _bdbc ;_baaae :_adbe =30;goto _bcdgc ;_dbdg :_adbe =30;goto _bagga ;_fcabc :_adbe =30;goto _daeg ;_acfc :_adbe =30;goto _ebce ;_dcabb :_adbe =30;goto _agfb ;_fbab :_adbe =30;goto _ceacc ;_gadga :_adbe =30;goto _fefba ;_dede :_adbe =30;goto _ccbc ;_fbabc :_adbe =31;goto _begee ;_edbc :_adbe =32;goto _aadg ;_fcaf :_adbe =33;goto _cacd ;_bcgaa :_adbe =34;goto _aadg ;_cdcg :_adbe =35;goto _bgdaf ;_cgbd :_adbe =36;goto _bgdaf ;_abacg :_adbe =37;goto _bgdaf ;_agde :_adbe =38;goto _aadg ;_eccgg :_adbe =39;goto _aadg ;_fadfd :_adbe =40;goto _ecba ;_fgabf :_adbe =41;goto _aadg ;_bgfdc :_adbe =42;goto _ecba ;_gcdfa :_adbe =43;goto _cacd ;_addc :_adbe =44;goto _ecba ;_dbdcf :_adbe =44;goto _acaca ;_dfegcd :_adbe =44;goto _bedfbb ;_bdgfc :_adbe =45;goto _ecba ;_bbffa :_adbe =46;goto _ecba ;_fefb :_adbe =47;goto _ecba ;_gfaf :_adbe =48;goto _ecba ;_ccddb :_adbe =49;goto _ecba ;_dcfba :_adbe =50;goto _ecba ;_degcd :_adbe =51;goto _ecba ;_ecff :_adbe =52;goto _ecba ;_bgef :_adbe =53;goto _ecba ;_egfde :_adbe =54;goto _ecba ;_cbcf :_adbe =55;goto _ecba ;_dcea :_adbe =56;goto _ecba ;_gdcb :_adbe =57;goto _ecba ;_cabdd :_adbe =58;goto _ecba ;_caeefd :_adbe =59;goto _ecba ;_debb :_adbe =59;goto _dbdca ;_bgdfg :_dfaba =3;goto _fbcgb ;_bddg :_dfaba =5;goto _fbcgb ;_ddgdf :_dfaba =7;goto _fbcgb ;_dcdgg :_dfaba =9;goto _fbcgb ;_ebeab :_dfaba =11;goto _fbcgb ;_ccbc :_dfaba =13;goto _fbcgb ;_fcgc :_dfaba =15;goto _fbcgb ;_ecae :_dfaba =17;goto _fbcgb ;_eegg :_dfaba =19;goto _fbcgb ;_bgdgd :_dfaba =21;goto _fbcgb ;_abdbg :_dfaba =23;goto _fbcgb ;_afga :_dfaba =25;goto _fbcgb ;_ggead :_dfaba =27;goto _fbcgb ;_fbgdc :_dfaba =29;goto _fbcgb ;_fggg :_dfaba =31;goto _fbcgb ;_ccfb :_dfaba =33;goto _fbcgb ;_eegbb :_dfaba =35;goto _fbcgb ;_daeg :_dfaba =37;goto _fbcgb ;_ceacc :_dfaba =39;goto _fbcgb ;_ebce :_dfaba =41;goto _fbcgb ;_fbdcea :_dfaba =43;goto _fbcgb ;_feacd :_dfaba =45;goto _fbcgb ;_fgggc :_dfaba =47;goto _fbcgb ;_bcdgc :_dfaba =49;goto _fbcgb ;_adeaf :_dfaba =51;goto _fbcgb ;_cbcfd :_dfaba =53;goto _fbcgb ;_bdbc :_dfaba =55;goto _fbcgb ;_fefba :_dfaba =57;goto _fbcgb ;_ddddb :_dfaba =59;goto _fbcgb ;_bagga :_dfaba =61;goto _fbcgb ;_agfb :_dfaba =63;goto _fbcgb ;_bgfcb :_dfaba =65;goto _fbcgb ;_bgdb :_dfaba =67;goto _fbcgb ;_acaca :_dfaba =72;goto _fbcgb ;_bgdaf :_dfaba =75;goto _fbcgb ;_cacd :_dfaba =78;goto _fbcgb ;_bedfbb :_dfaba =81;goto _fbcgb ;_dbdca :_dfaba =84;goto _fbcgb ;_ecba :_dfaba =87;goto _fbcgb ;_begee :_dfaba =90;goto _fbcgb ;_fbcgb :_gedb =uint (_bggf [_dfaba ]);_dfaba ++;for ;_gedb > 0;_gedb --{_dfaba ++;switch _bggf [_dfaba -1]{case 3:_gega =_egff +1;case 4:_feacg =1;case 5:_feacg =2;case 6:_feacg =3;case 7:_feacg =4;case 8:_feacg =11;case 9:_feacg =14;case 10:_feacg =15;case 11:_gega =_egff +1;{_dcec .emit (_gdaa ,_gagae [_adfdg :_gega ]);};case 12:_gega =_egff +1;{_dcec .emit (_dfca ,_gagae [_adfdg :_gega ]);};case 13:_gega =_egff +1;{_dcec .emit (_aaad ,_gagae [_adfdg :_gega -1]);};case 14:_gega =_egff +1;{_dcec .emit (_aaad ,_gagae [_adfdg +1:_gega -2]);};case 15:_gega =_egff +1;{_dcec .emit (_dfeee ,_gagae [_adfdg :_gega -1]);};case 16:_gega =_egff +1;{_dcec .emit (_dfeee ,_gagae [_adfdg :_gega -1]);};case 17:_gega =_egff +1;{_dcec .emit (_bdeb ,_gagae [_adfdg :_gega ]);};case 18:_gega =_egff +1;{_dcec .emit (_ecceg ,_gagae [_adfdg :_gega ]);};case 19:_gega =_egff +1;{_dcec .emit (_ddfg ,_gagae [_adfdg :_gega ]);};case 20:_gega =_egff +1;{_dcec .emit (_deddb ,_gagae [_adfdg :_gega ]);};case 21:_gega =_egff +1;{_dcec .emit (_cdfc ,_gagae [_adfdg :_gega ]);};case 22:_gega =_egff +1;{_dcec .emit (_gbaf ,_gagae [_adfdg :_gega ]);};case 23:_gega =_egff +1;{_dcec .emit (_gbda ,_gagae [_adfdg :_gega ]);};case 24:_gega =_egff +1;{_dcec .emit (_ccde ,_gagae [_adfdg :_gega ]);};case 25:_gega =_egff +1;{_dcec .emit (_ddbde ,_gagae [_adfdg :_gega ]);};case 26:_gega =_egff +1;{_dcec .emit (_dafgf ,_gagae [_adfdg :_gega ]);};case 27:_gega =_egff +1;{_dcec .emit (_fccf ,_gagae [_adfdg :_gega ]);};case 28:_gega =_egff +1;{_dcec .emit (_gadfc ,_gagae [_adfdg :_gega ]);};case 29:_gega =_egff +1;{_dcec .emit (_faegd ,_gagae [_adfdg :_gega ]);};case 30:_gega =_egff +1;{_dcec .emit (_dgbe ,_gagae [_adfdg :_gega ]);};case 31:_gega =_egff +1;{_dcec .emit (_dfgbe ,_gagae [_adfdg :_gega ]);};case 32:_gega =_egff +1;{_dcec .emit (_dgdd ,_gagae [_adfdg :_gega ]);};case 33:_gega =_egff +1;{_dcec .emit (_bgba ,_gagae [_adfdg :_gega ]);};case 34:_gega =_egff ;_egff --;{_dcec .emit (_gcbgg ,_gagae [_adfdg :_gega ]);};case 35:_gega =_egff ;_egff --;{_dcec .emit (_dbbgg ,_gagae [_adfdg :_gega ]);};case 36:_gega =_egff ;_egff --;{_dcec .emit (_afeeb ,_gagae [_adfdg :_gega ]);};case 37:_gega =_egff ;_egff --;{_dcec .emit (_faeg ,_gagae [_adfdg :_gega ]);};case 38:_gega =_egff ;_egff --;{_dcec .emit (_acafg ,_gagae [_adfdg :_gega ]);};case 39:_gega =_egff ;_egff --;{_dcec .emit (_egcc ,_gagae [_adfdg +1:_gega -1]);};case 40:_gega =_egff ;_egff --;{_dcec .emit (_cgae ,_gagae [_adfdg :_gega ]);};case 41:_gega =_egff ;_egff --;{_dcec .emit (_dcage ,_gagae [_adfdg :_gega ]);};case 42:_egff =(_gega )-1;{_dcec .emit (_gcbgg ,_gagae [_adfdg :_gega ]);};case 43:switch _feacg {case 0:{_adbe =0;goto _aadg ;};case 1:{_egff =(_gega )-1;_dcec .emit (_adgf ,_gagae [_adfdg :_gega ]);};case 2:{_egff =(_gega )-1;_dcec .emit (_gcbgg ,_gagae [_adfdg :_gega ]);};case 3:{_egff =(_gega )-1;_dcec .emit (_dbbgg ,_gagae [_adfdg :_gega ]);};case 4:{_egff =(_gega )-1;_dcec .emit (_faebb ,_gagae [_adfdg :_gega ]);};case 11:{_egff =(_gega )-1;_dcec .emit (_bdbf ,_gagae [_adfdg :_gega ]);};case 14:{_egff =(_gega )-1;_dcec .emit (_acafg ,_gagae [_adfdg :_gega ]);};case 15:{_egff =(_gega )-1;_dcec .emit (_egcc ,_gagae [_adfdg +1:_gega -1]);};};};};goto _aadg ;_aadg :_dfaba =int (_ggfe [_adbe ]);_gedb =uint (_bggf [_dfaba ]);_dfaba ++;for ;_gedb > 0;_gedb --{_dfaba ++;switch _bggf [_dfaba -1]{case 0:_adfdg =0;case 1:_feacg =0;};};if _adbe ==0{goto _baaec ;};if _egff ++;_egff !=_faba {goto _dcde ;};_accbe :{};if _egff ==_adged {switch _adbe {case 1:goto _gffaf ;case 2:goto _gffaf ;case 31:goto _dffbd ;case 14:goto _gffaf ;case 15:goto _gffaf ;case 32:goto _cgcb ;case 17:goto _gffaf ;case 33:goto _fafee ;case 18:goto _gffaf ;case 19:goto _gffaf ;case 34:goto _dfcbf ;case 35:goto _baaae ;case 36:goto _baaae ;case 23:goto _fgfa ;case 37:goto _baaae ;case 38:goto _dbdg ;case 39:goto _dcabb ;case 40:goto _gadga ;case 41:goto _gadga ;case 42:goto _gadga ;case 43:goto _fafee ;case 44:goto _gffaf ;case 45:goto _gadga ;case 46:goto _gadga ;case 47:goto _gadga ;case 48:goto _gadga ;case 49:goto _gadga ;case 50:goto _gadga ;case 51:goto _gadga ;case 52:goto _gadga ;case 53:goto _gadga ;case 54:goto _gadga ;case 55:goto _gadga ;case 56:goto _gadga ;case 57:goto _gadga ;case 58:goto _gadga ;case 59:goto _gffaf ;};};_baaec :{};};if _adfdg > 0{copy (_gagae [0:],_gagae [_adfdg :]);};};_ =_adged ;if _adbe ==_babeb {_dcec .emit (_cbef ,nil );};close (_dcec ._ffcf );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_aeaa ,_dec :=_afdc (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _dec .Type ==ResultTypeError {return _dec ;};_eegb :=_edgg (_aeaa ._dagb );_bed :=_edgg (_aeaa ._gced );_adfa :=_aeaa ._fgeg ;_gcee :=_eeba (_eegb ,_bed ,_adfa );_aacf ,_caee ,_dffc :=_gcee .Date ();return MakeNumberResult (_gef (_aacf ,int (_caee ),_dffc ));};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_bgge ,_cfge Expression };

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdcg :=args [0].ValueNumber ;if _bdcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gea :=args [1].ValueNumber ;if _gea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abfa :=args [2].ValueNumber ;if _abfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_eg .Pow (_abfa /_gea ,1/_bdcg )-1);};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_aegb :=args [0];if _aegb .Type !=ResultTypeArray &&_aegb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aeecc :=_egca (args [1]);_ebcd :=0;for _ ,_egdaa :=range _fbef (_aegb ){for _ ,_gdcg :=range _egdaa {if _aaeb (_gdcg ,_aeecc ){_ebcd ++;};};};return MakeNumberResult (float64 (_ebcd ));};

// Reference returns a string reference value to a horizontal range.
func (_gdeb HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_gdeb .horizontalRangeReference ()};};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aedb :=args [0].AsNumber ();_agdf :=args [1].AsNumber ();if _aedb .Type !=ResultTypeNumber ||_agdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gbde :=_eg .Trunc (_aedb .ValueNumber );_afeg :=_eg .Trunc (_agdf .ValueNumber );if _gbde < _afeg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _gbde ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_gbde +_afeg -1);args [1]=MakeNumberResult (_gbde -1);return Combin (args );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_efcgd :=args [0];if _efcgd .Type !=ResultTypeArray &&_efcgd .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_faef :=_efcgd .ValueArray ;if len (_faef )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_faef )));};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Update updates the horizontal range references after removing a row/column.
func (_ebcgb HorizontalRange )Update (q *_af .UpdateQuery )Expression {return _ebcgb };

// Eval evaluates a horizontal range returning a list of results or an error.
func (_gfegg HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_eafff :=_gfegg .horizontalRangeReference ();if _aagb ,_gfbe :=ev .GetFromCache (_eafff );_gfbe {return _aagb ;};_bcfb ,_gfae :=_gecbd (ctx ,_gfegg ._edgad ,_gfegg ._badcb );_dcagg :=_affa (ctx ,ev ,_bcfb ,_gfae );ev .SetCache (_eafff ,_dcagg );return _dcagg ;};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaae :=args [0].AsNumber ();if _gaae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_eg .Pi /180.0*_gaae .ValueNumber );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cac :=ctx .GetEpoch ();_gcd ,_gca :=_gafc (args [0].Value (),_cac );if _gca !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_gcd .Year ()));};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_fbga :=_ef .Split (v ,"\u003a");if len (_fbga )!=2{return nil ;};if _fbga [0]> _fbga [1]{_fbga [0],_fbga [1]=_fbga [1],_fbga [0];};return PrefixVerticalRange {_cegab :pfx ,_eeaed :_fbga [0],_abcad :_fbga [1]};};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fgda ,_cgcc ,_gdba :=_cedg (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _gdba .Type ==ResultTypeError {return _gdba ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbca :=_cgcc -_fgda ;if _dbca > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_cgdb :=args [2].ValueNumber ;if _cgdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bae :=(100-_cgdb )/_cgdb ;_bdef :=360/_dbca ;return MakeNumberResult (_bae *_bdef );};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccaga :=0;_caaag :=false ;for _ ,_ffbad :=range args {switch _ffbad .Type {case ResultTypeList ,ResultTypeArray :_cgfd :=Xor (_ffbad .ListValues ());if _cgfd .Type ==ResultTypeError {return _cgfd ;};if _cgfd .ValueNumber !=0{_ccaga ++;};_caaag =true ;case ResultTypeNumber :if _ffbad .ValueNumber !=0{_ccaga ++;};_caaag =true ;case ResultTypeString :case ResultTypeError :return _ffbad ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_caaag {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_ccaga %2!=0);};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_ebee :=len (args );if _ebee < 2||_ebee > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbag :=args [0];if _dbag .Type !=ResultTypeArray &&_dbag .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cffe :=args [1].AsNumber ();if _cffe .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caffb :=int (_cffe .ValueNumber )-1;_agede :=-1;if _ebee ==3&&args [2].Type !=ResultTypeEmpty {_bfgf :=args [2].AsNumber ();if _bfgf .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agede =int (_bfgf .ValueNumber )-1;};if _caffb ==-1&&_agede ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _ffda []Result ;if _dbag .Type ==ResultTypeArray {_gcdd :=_dbag .ValueArray ;if _caffb < -1||_caffb >=len (_gcdd ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _caffb ==-1{if _agede >=len (_gcdd [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_edfe :=[][]Result {};for _ ,_bcdg :=range _gcdd {_caeb :=_bcdg [_agede ];if _caeb .Type ==ResultTypeEmpty {_caeb =MakeNumberResult (0);};_edfe =append (_edfe ,[]Result {_caeb });};return MakeArrayResult (_edfe );};_ffda =_gcdd [_caffb ];}else {_egbb :=_dbag .ValueList ;if _caffb < -1||_caffb >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _caffb ==-1{if _agede >=len (_egbb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bfcb :=_egbb [_agede ];if _bfcb .Type ==ResultTypeEmpty {_bfcb =MakeNumberResult (0);};return _bfcb ;};_ffda =_egbb ;};if _agede < -1||_agede > len (_ffda ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _agede ==-1{_cefd :=[]Result {};for _ ,_dbfc :=range _ffda {if _dbfc .Type ==ResultTypeEmpty {_cefd =append (_cefd ,MakeNumberResult (0));}else {_cefd =append (_cefd ,_dbfc );};};return MakeArrayResult ([][]Result {_cefd });};_cdbe :=_ffda [_agede ];if _cdbe .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _cdbe ;};type yyParserImpl struct{_ffeeb yySymType ;_abdc [_dbdbd ]yySymType ;_aedee int ;};var _cggf =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfabg :=args [0];if _bfabg .Type ==ResultTypeNumber {return _bfabg ;};if _bfabg .Type ==ResultTypeString {_egdad ,_cgge :=_ae .ParseFloat (_bfabg .Value (),64);if _cgge ==nil {return MakeNumberResult (_egdad );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};const _aaa ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";func _edbed (_dfbae ,_fgfdd ,_agca Reference )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dfbae .Value ,_fgfdd .Value ,_agca .Value );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_beg :=len (args );if _beg < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _beg > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdab :=args [0];_dbge :=args [1];if _dbge .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gegeca :=args [2].AsNumber ();if _gegeca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgdc :=false ;if _beg ==4&&args [3].Type !=ResultTypeEmpty {_ffad :=args [3].AsNumber ();if _ffad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _ffad .ValueNumber ==0{_cgdc =true ;};};_abfde :=int (_gegeca .ValueNumber )-1;_cegd :=-1;_efdda :=false ;_gacd :for _dagdg ,_ccdb :=range _dbge .ValueArray {if len (_ccdb )==0{continue ;};_fbbc :=_ccdb [0];switch _efbd (_fbbc ,_bdab ,false ,_cgdc ){case _acbfff :_cegd =_dagdg ;case _aefc :_cegd =_dagdg ;_efdda =true ;break _gacd ;};};if _cegd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_faeb :=_dbge .ValueArray [_cegd ];if _abfde < 0||_abfde >=len (_faeb ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _efdda ||!_cgdc {return _faeb [_abfde ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};const _gdaa =57355;func _fadc (_ece []Result ,_dccc string )(*cumulArgs ,Result ){if len (_ece )!=6{return nil ,MakeErrorResult (_dccc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ece [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dccc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgde :=_ece [0].ValueNumber ;if _cgde <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ece [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dccc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fbec :=_ece [1].ValueNumber ;if _fbec <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _ece [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dccc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fabc :=_ece [2].ValueNumber ;if _fabc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ece [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dccc +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ecfb :=_ece [3].ValueNumber ;if _ecfb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ece [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dccc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efe :=_ece [4].ValueNumber ;if _efe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _efe < _ecfb {return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _efe > _fbec {return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_fgaf :=int (_ece [5].ValueNumber );if _fgaf !=0&&_fgaf !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_dccc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_cgde ,_fbec ,_fabc ,_ecfb ,_efe ,_fgaf },_edgf ;};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Eval evaluates and returns the result of a function call.
func (_dabg FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_bfge :=LookupFunction (_dabg ._aedfb );if _bfge !=nil {_ffggc :=make ([]Result ,len (_dabg ._eefggc ));for _gdacf ,_dgcg :=range _dabg ._eefggc {_ffggc [_gdacf ]=_dgcg .Eval (ctx ,ev );_ffggc [_gdacf ].Ref =_dgcg .Reference (ctx ,ev );};if _ ,_agcfb :=_gdedd [_dabg ._aedfb ];!_agcfb {if _baea ,_aeee :=_edbf (_ffggc );_baea {return _aeee ;};};return _bfge (_ffggc );};_fcec :=LookupFunctionComplex (_dabg ._aedfb );if _fcec !=nil {_abac :=make ([]Result ,len (_dabg ._eefggc ));for _cddg ,_aefdf :=range _dabg ._eefggc {_abac [_cddg ]=_aefdf .Eval (ctx ,ev );_abac [_cddg ].Ref =_aefdf .Reference (ctx ,ev );};if _ ,_ggecd :=_gdedd [_dabg ._aedfb ];!_ggecd {if _bbdc ,_ccgdf :=_edbf (_abac );_bbdc {return _ccgdf ;};};return _fcec (ctx ,ev ,_abac );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_dabg ._aedfb );};func (_acdae *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };const _gbaf =57364;

// String returns an empty string for EmptyExpr.
func (_abd EmptyExpr )String ()string {return ""};

// FunctionCall is a function call expression.
type FunctionCall struct{_aedfb string ;_eefggc []Expression ;};

// Value returns a string version of the result.
func (_cfegdb Result )Value ()string {switch _cfegdb .Type {case ResultTypeNumber :_bfdce :=_ae .FormatFloat (_cfegdb .ValueNumber ,'f',-1,64);if len (_bfdce )> 12{_afgbg :=12;for _gefff :=_afgbg ;_gefff > 0&&_bfdce [_gefff ]=='0';_gefff --{_afgbg --;};_bfdce =_bfdce [0:_afgbg +1];};return _bfdce ;case ResultTypeError :return _cfegdb .ValueString ;case ResultTypeString :return _cfegdb .ValueString ;case ResultTypeList :if len (_cfegdb .ValueList )==0{return "";};return _cfegdb .ValueList [0].Value ();case ResultTypeArray :if len (_cfegdb .ValueArray )==0||len (_cfegdb .ValueArray [0])==0{return "";};return _cfegdb .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdac :=args [0].AsString ();if _gdac .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_gdac .ValueString )));};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_fd :lhs ,_eaf :rhs ,_ab :op };};func _babba (_bdb ,_feab float64 )bool {return _eg .Abs (_bdb -_feab )< 1.0e-6};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_acbffa ,_edgd :=_gcec (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _edgd .Type ==ResultTypeError {return _edgd ;};_gdfc :=_acbffa ._acc ;_ggcfd :=_acbffa ._adea ;_eede :=_acbffa ._ffec ;_fadb :=_acbffa ._cdcaa ;_gefea :=_acbffa ._gaed ;_geec :=_acbffa ._bfa ;_deaa :=_gedf (_gdfc ,_ggcfd ,_eede ,_fadb ,_gefea ,_geec );if _deaa .Type ==ResultTypeError {return _deaa ;};_gbbdg :=_deaa .ValueNumber /(1.0+_fadb /_gefea );return MakeNumberResult (_gbbdg );};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_dddaa :=len (args );if _dddaa < 4||_dddaa > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eagga :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cccea :=args [1].ValueNumber ;if _cccea <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abaf :=args [2].ValueNumber ;if _abaf < _cccea {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ffdcg :=args [3].ValueNumber ;_gfb :=0.0;if _dddaa >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gfb =args [4].ValueNumber ;};_gagb :=0;if _dddaa ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gagb =int (args [5].ValueNumber );if _gagb !=0{_gagb =1;};};return MakeNumberResult (_aafd (_eagga ,_abaf ,_ffdcg ,_gfb ,_gagb )-_fefa (_eagga ,_cccea ,_abaf ,_ffdcg ,_gfb ,_gagb ));};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_gdd :v }};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};func _gafc (_fgeaf string ,_ebcg _bg .Time )(_bg .Time ,error ){_dfee ,_ ,_aadc :=_c .ParseFloat (_fgeaf ,10,128,_c .ToNearestEven );if _aadc !=nil {return _bg .Time {},_aadc ;};_eafae :=new (_c .Float );_eafae .SetUint64 (uint64 (24*_bg .Hour ));_dfee .Mul (_dfee ,_eafae );_dagg ,_ :=_dfee .Uint64 ();_bdcgg :=_ebcg .Add (_bg .Duration (_dagg ));return _bgff (_bdcgg ),nil ;};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};type node struct{_fgdc tokenType ;_babde string ;};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ebd :=args [0].ValueNumber ;_geb :=args [1].ValueNumber ;if _geb < _ebd {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _geb ==_ebd {return MakeNumberResult (0);};_fab :=_ef .ToLower (args [2].ValueString );if _fab =="\u0064"{return MakeNumberResult (_geb -_ebd );};_efcb :=_edgg (_ebd );_dca :=_edgg (_geb );_ebe ,_eee ,_beb :=_efcb .Date ();_eebd ,_daf ,_bdd :=_dca .Date ();_ebf :=int (_eee );_ggdb :=int (_daf );var _agbb float64 ;switch _fab {case "\u0079":_agbb =float64 (_eebd -_ebe );if _ggdb < _ebf ||(_ggdb ==_ebf &&_bdd < _beb ){_agbb --;};case "\u006d":_cebb :=_eebd -_ebe ;_eff :=_ggdb -_ebf ;if _bdd < _beb {_eff --;};if _eff < 0{_cebb --;_eff +=12;};_agbb =float64 (_cebb *12+_eff );case "\u006d\u0064":_dfeg :=_ggdb ;if _bdd < _beb {_dfeg --;};_agbb =float64 (int (_geb -_gef (_eebd ,_dfeg ,_beb )));case "\u0079\u006d":_agbb =float64 (_ggdb -_ebf );if _bdd < _beb {_agbb --;};if _agbb < 0{_agbb +=12;};case "\u0079\u0064":_faed :=_eebd ;if _ggdb < _ebf ||(_ggdb ==_ebf &&_bdd < _beb ){_faed --;};_agbb =float64 (int (_geb -_gef (_faed ,_ebf ,_beb )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_agbb );};

// Eval evaluates and returns the result of a constant array expression.
func (_ada ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_dab :=[][]Result {};for _ ,_aeec :=range _ada ._edg {_bgc :=[]Result {};for _ ,_fgb :=range _aeec {_bgc =append (_bgc ,_fgb .Eval (ctx ,ev ));};_dab =append (_dab ,_bgc );};return MakeArrayResult (_dab );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_ebgf NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_ebbg :=ctx .NamedRange (_ebgf ._feedd );_acddb :=_ebbg .Value ;if _cfdca ,_aedg :=ev .GetFromCache (_acddb );_aedg {return _cfdca ;};_abgeb :=_ef .Split (_acddb ,"\u0021");if len (_abgeb )!=2{return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_acddb ));};_fcdbb :=ctx .Sheet (_abgeb [0]);_gdgca :=_ef .Split (_abgeb [1],"\u003a");switch len (_gdgca ){case 1:_ggba :=ev .Eval (_fcdbb ,_gdgca [0]);ev .SetCache (_acddb ,_ggba );return _ggba ;case 2:_gecfb :=_affa (_fcdbb ,ev ,_gdgca [0],_gdgca [1]);ev .SetCache (_acddb ,_gecfb );return _gecfb ;};return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_ebbg .Type ));};const _baggb =187;

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_befa :=true ;for _ ,_fac :=range args {_fac =_fac .AsNumber ();switch _fac .Type {case ResultTypeList ,ResultTypeArray :_dbeb :=And (_fac .ListValues ());if _dbeb .Type ==ResultTypeError {return _dbeb ;};if _dbeb .ValueNumber ==0{_befa =false ;};case ResultTypeNumber :if _fac .ValueNumber ==0{_befa =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _fac ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_befa );};

// Reference returns an invalid reference for Number.
func (_cgce Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// HasFormula returns FALSE for the invalid reference context.
func (_ggfb *ivr )HasFormula (cellRef string )bool {return false };var _cfb float64 =25569.0;const (_ffbe countMode =iota ;_cgcf ;_eecg ;);

// Error is an error expression.
type Error struct{_dga string };const _dfeee =57359;const _fecg ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _gcbf (_dccaf _bg .Time )bool {return _bg .Now ().Sub (_dccaf )>=_aaea };func _egdf (_ceea []Result ,_dfbe bool )Result {var _fece string ;if _dfbe {_fece ="\u004c\u0041\u0052G\u0045";}else {_fece ="\u0053\u004d\u0041L\u004c";};if len (_ceea )!=2{return MakeErrorResult (_fece +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adbd :=_ceea [0];var _eebgc [][]Result ;switch _adbd .Type {case ResultTypeArray :_eebgc =_adbd .ValueArray ;case ResultTypeList :_eebgc =[][]Result {_adbd .ValueList };default:return MakeErrorResult (_fece +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_eebgc )==0{return MakeErrorResult (_fece +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _ceea [1].Type !=ResultTypeNumber {return MakeErrorResult (_fece +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_dfbb :=_ceea [1].ValueNumber ;if _dfbb < 1{return MakeErrorResultType (ErrorTypeNum ,_fece +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_abab :=int (_dfbb );if float64 (_abab )!=_dfbb {return MakeErrorResultType (ErrorTypeNum ,_fece +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_bbge :=[]float64 {};for _ ,_efdc :=range _eebgc {for _ ,_bccf :=range _efdc {if _bccf .Type ==ResultTypeNumber {_bbge =append (_bbge ,_bccf .ValueNumber );};};};if _abab > len (_bbge ){return MakeErrorResultType (ErrorTypeNum ,_fece +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bgdfd :=_ag .MergeSort (_bbge );if _dfbe {return MakeNumberResult (_bgdfd [len (_bgdfd )-_abab ]);}else {return MakeNumberResult (_bgdfd [_abab -1]);};};

// Eval evaluates and returns the result of a formula.
func (_fbg *defEval )Eval (ctx Context ,formula string )Result {_cabd :=ParseString (formula );_acd :=make (chan Result );go func (){if _cabd ==nil {_acd <-MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_fbg .checkLastEvalIsRef (ctx ,_cabd );_acd <-_cabd .Eval (ctx ,_fbg );};}();select{case _ggfa :=<-_acd :return _ggfa ;case <-_bg .After (_fbc ):_aff .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};func _cgeffc (_eagdg ,_fbaba Reference )string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_eagdg .Value ,_fbaba .Value );};func (_gdgfd *ivr )SetOffset (col ,row uint32 ){};func _bbbc (_bgdcf yyLexer )int {return _bbfd ().Parse (_bgdcf )};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbaba :=args [0].AsNumber ();if _cbaba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _cbaba .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dcfe :=float64 (1);_gfac :=_eg .Trunc (_cbaba .ValueNumber );for _fdcag :=_gfac ;_fdcag > 1;_fdcag -=2{_dcfe *=_fdcag ;};return MakeNumberResult (_dcfe );};type xargs struct{_beff []float64 ;_aeag []float64 ;};var _fbacf =[...]int {1};func _geffa (_eccg []Result ,_bagd []string ,_dcgbf bool )[]string {for _ ,_fdeb :=range _eccg {switch _fdeb .Type {case ResultTypeEmpty :if !_dcgbf {_bagd =append (_bagd ,"");};case ResultTypeString :if _fdeb .ValueString !=""||!_dcgbf {_bagd =append (_bagd ,_fdeb .ValueString );};case ResultTypeNumber :_bagd =append (_bagd ,_fdeb .Value ());case ResultTypeList :_bagd =_ggecb (_bagd ,_geffa (_fdeb .ValueList ,[]string {},_dcgbf ));case ResultTypeArray :for _ ,_dbcae :=range _fdeb .ValueArray {_bagd =_ggecb (_bagd ,_geffa (_dbcae ,[]string {},_dcgbf ));};};};return _bagd ;};var _gcaef =false ;func _babd (_dbee ,_dbfg Result ,_babfc string )(*xargs ,Result ){if _dbee .Type !=ResultTypeList &&_dbee .Type !=ResultTypeArray {return nil ,MakeErrorResult (_babfc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_daa :=_fbef (_dbee );_gffc :=[]float64 {};for _ ,_agbagb :=range _daa {for _ ,_afa :=range _agbagb {if _afa .Type ==ResultTypeNumber &&!_afa .IsBoolean {_gffc =append (_gffc ,_afa .ValueNumber );}else {return nil ,MakeErrorResult (_babfc +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_dfaca :=len (_gffc );if len (_gffc )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _dbfg .Type !=ResultTypeList &&_dbfg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_babfc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_agef :=_fbef (_dbfg );_ddab :=[]float64 {};_afcg :=0.0;for _ ,_fcdg :=range _agef {for _ ,_abcc :=range _fcdg {if _abcc .Type ==ResultTypeNumber &&!_abcc .IsBoolean {_cbbec :=float64 (int (_abcc .ValueNumber ));if _cbbec < _afcg {return nil ,MakeErrorResultType (ErrorTypeNum ,_babfc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_ddab =append (_ddab ,_cbbec );_afcg =_cbbec ;}else {return nil ,MakeErrorResult (_babfc +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_ddab )!=_dfaca {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_gffc ,_ddab },MakeEmptyResult ();};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_bcbb Context ,_bdfc Evaluator ,_gdedf []Result )Result ;func _fafb (_cgeae []Result ,_ecgc bool )(float64 ,float64 ){_ecfd :=0.0;_ecagf :=0.0;for _ ,_abddc :=range _cgeae {switch _abddc .Type {case ResultTypeNumber :if _ecgc ||!_abddc .IsBoolean {_ecagf +=_abddc .ValueNumber ;_ecfd ++;};case ResultTypeList ,ResultTypeArray :_fbbd ,_dffgf :=_fafb (_abddc .ListValues (),_ecgc );_ecagf +=_fbbd ;_ecfd +=_dffgf ;case ResultTypeString :if _ecgc {_ecfd ++;};case ResultTypeEmpty :};};return _ecagf ,_ecfd ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_egef :=args [0].AsNumber ();if _egef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_gabbgc :=int (_egef .ValueNumber );_dedfc :=make ([][]Result ,0,_gabbgc );for _gbaea :=0;_gbaea < _gabbgc ;_gbaea ++{_gdce :=make ([]Result ,_gabbgc );for _eedd :=0;_eedd < _gabbgc ;_eedd ++{if _gbaea ==_eedd {_gdce [_eedd ]=MakeNumberResult (1.0);}else {_gdce [_eedd ]=MakeNumberResult (0.0);};};_dedfc =append (_dedfc ,_gdce );};return MakeArrayResult (_dedfc );};type Expression interface{Eval (_bcdc Context ,_dgaf Evaluator )Result ;Reference (_egab Context ,_fae Evaluator )Reference ;String ()string ;Update (_eba *_af .UpdateQuery )Expression ;};

// Update updates references in the Negate after removing a row/column.
func (_daaba Negate )Update (q *_af .UpdateQuery )Expression {return Negate {_abdg :_daaba ._abdg .Update (q )};};func (_cbgg ReferenceType )String ()string {if _cbgg >=ReferenceType (len (_abgcf )-1){return _a .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cbgg );};return _dbgc [_abgcf [_cbgg ]:_abgcf [_cbgg +1]];};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgdef :=args [0].AsNumber ();if _bgdef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_abce :=float64 (1);if _bgdef .ValueNumber < 0{_abce =-1;};if len (args )> 1{_cgeac :=args [1].AsNumber ();if _cgeac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abce =_cgeac .ValueNumber ;};if _abce < 0&&_bgdef .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_eg .Ceil (_bgdef .ValueNumber ));};_gcfd :=_bgdef .ValueNumber ;_gcfd ,_deed :=_eg .Modf (_gcfd /_abce );if _deed > 0{_gcfd ++;};return MakeNumberResult (_gcfd *_abce );};

// IsDBCS returns false for the invalid reference context.
func (_ggbfg *ivr )IsDBCS ()bool {return false };const _dfca =57356;

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_agb ConstArrayExpr )Update (q *_af .UpdateQuery )Expression {return _agb };

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_agba ,_fbdc :=_afdc (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _fbdc .Type ==ResultTypeError {return _fbdc ;};return MakeNumberResult (_cded (_agba ._dagb ,_agba ._gced ,_agba ._fgeg ,_agba ._fgab ));};

// Reference returns a string reference value to a cell.
func (_egd CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_egd ._gdd };};const _aaad =57357;func _bbb (_gge BinOpType ,_gbb [][]Result ,_eb Result )Result {_ce :=[][]Result {};for _dd :=range _gbb {_cdef :=_eac (_gge ,_gbb [_dd ],_eb );if _cdef .Type ==ResultTypeError {return _cdef ;};_ce =append (_ce ,_cdef .ValueList );};return MakeArrayResult (_ce );};

// Reference returns an invalid reference for String.
func (_eeceg String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type amorArgs struct{_fcdb float64 ;_gbdf float64 ;_dabe float64 ;_baag float64 ;_abda int ;_cbde float64 ;_deag int ;};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfddf ,_dfegc ,_cccef :=_cedg (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _cccef .Type ==ResultTypeError {return _cccef ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feda :=_dfegc -_gfddf ;if _feda > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_decf :=args [2].ValueNumber ;if _decf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_decf )/(360-_decf *_feda ));};func _aeb (_ecbb int )bool {return _ecbb >=0&&_ecbb <=4};var _cfba =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _gfgc (_dbad int ,_cabb _bg .Month ,_bcaac int )int64 {if _dbad ==1900&&int (_cabb )<=2{_bcaac --;};_edggd :=_bg .Date (_dbad ,_cabb ,_bcaac ,0,0,0,0,_bg .UTC );return _edggd .Unix ();};var _begf =map[string ]FunctionComplex {};

// Reference returns a string reference value to a range with prefix.
func (_ebffb PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_faad :=_ebffb ._acaga .Reference (ctx ,ev );_ecbga :=_ebffb ._cdec .Reference (ctx ,ev );_egafeg :=_ebffb ._aggf .Reference (ctx ,ev );if _faad .Type ==ReferenceTypeSheet &&_ecbga .Type ==ReferenceTypeCell &&_egafeg .Type ==ReferenceTypeCell {return MakeRangeReference (_edbed (_faad ,_ecbga ,_egafeg ));};return ReferenceInvalid ;};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_eadab *ivr )GetLabelPrefix (cellRef string )string {return ""};

// String returns a string representation of Number.
func (_aeca Number )String ()string {return _ae .FormatFloat (_aeca ._adgc ,'f',-1,64)};

// Eval evaluates a range returning a list of results or an error.
func (_fdff Range )Eval (ctx Context ,ev Evaluator )Result {_gecgef :=_fdff ._bgge .Reference (ctx ,ev );_fbbde :=_fdff ._cfge .Reference (ctx ,ev );_cdfdg :=_cgeffc (_gecgef ,_fbbde );if _gecgef .Type ==ReferenceTypeCell &&_fbbde .Type ==ReferenceTypeCell {if _cdgd ,_edaeg :=ev .GetFromCache (_cdfdg );_edaeg {return _cdgd ;}else {_abceb :=_affa (ctx ,ev ,_gecgef .Value ,_fbbde .Value );ev .SetCache (_cdfdg ,_abceb );return _abceb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_cdfdg );};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_edg :data }};func (_cbfdb *Lexer )nextRaw ()*node {for len (_cbfdb ._gcgfc )!=0{_dddcc :=<-_cbfdb ._gcgfc [len (_cbfdb ._gcgfc )-1];if _dddcc !=nil {return _dddcc ;};_cbfdb ._gcgfc =_cbfdb ._gcgfc [0:len (_cbfdb ._gcgfc )-1];};return <-_cbfdb ._ffcf ;};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_ddebf :=len (args );if _ddebf < 3||_ddebf > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfe :=args [0].ValueNumber ;if _ecfe !=float64 (int (_ecfe )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eeab :=args [2].ValueNumber ;_feee :=0.0;if _ddebf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_feee =args [3].ValueNumber ;};_dgffb :=0.0;if _ddebf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dgffb =args [4].ValueNumber ;if _dgffb !=0{_dgffb =1;};};_edbb :=0.1;if _ddebf >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edbb =args [5].ValueNumber ;};_ebcaa :=100;_aafdb :=0;_agf :=false ;_egde :=1e-6;_bfabd :=_edbb ;for _aafdb < _ebcaa &&!_agf {_edbbb :=_eg .Pow (_bfabd +1,_ecfe );_baae :=_eg .Pow (_bfabd +1,_ecfe -1);_bcdaf :=_bfabd *_dgffb +1;_gabd :=_ecfc *(_edbbb -1);_aadb :=_feee +_edbbb *_eeab +_gabd *_bcdaf /_bfabd ;_bead :=_ecfe *_baae *_eeab -_gabd *_bcdaf /_eg .Pow (_bfabd ,2);_egc :=(_ecfe *_ecfc *_baae *_bcdaf +_gabd *_dgffb )/_bfabd ;_ecgb :=_aadb /(_bead +_egc );if _eg .Abs (_ecgb )< _egde {_agf =true ;};_aafdb ++;_bfabd -=_ecgb ;};return MakeNumberResult (_bfabd );};func _agfa (_badd int )string {if _badd >=0&&_badd < len (_dffed ){if _dffed [_badd ]!=""{return _dffed [_badd ];};};return _a .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_badd );};func (_cdf *evCache )SetCache (key string ,value Result ){_cdf ._abg .Lock ();_cdf ._gfd [key ]=value ;_cdf ._abg .Unlock ();};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_dbgae Result )ListValues ()[]Result {if _dbgae .Type ==ResultTypeArray {_accf :=[]Result {};for _ ,_efdaf :=range _dbgae .ValueArray {for _ ,_dfedd :=range _efdaf {_accf =append (_accf ,_dfedd );};};return _accf ;};if _dbgae .Type ==ResultTypeList {return _dbgae .ValueList ;};return nil ;};func (_eebac *plex )Lex (lval *yySymType )int {_bgfd =true ;_dfag :=<-_eebac ._ddgcg ;if _dfag !=nil {lval ._cbaa =_dfag ;return int (lval ._cbaa ._fgdc );};return 0;};func _ecfec (_eaedd Reference ,_aaacc Context )bool {return _aaacc .Sheet (_eaedd .Value )==InvalidReferenceContext ;};func _bcadc (_dcdf float64 ,_afgcg *criteriaRegex )bool {_accg ,_fcgd :=_ae .ParseFloat (_afgcg ._aabff ,64);if _fcgd !=nil {return false ;};switch _afgcg ._fbecg {case _fgfff :return _dcdf ==_accg ;case _fcdgc :return _dcdf <=_accg ;case _bcgba :return _dcdf >=_accg ;case _caeef :return _dcdf < _accg ;case _dbbcc :return _dcdf > _accg ;};return false ;};

// Number is a nubmer expression.
type Number struct{_adgc float64 };

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcce :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gadc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_adcg :=args [2].ValueNumber ;if _adcg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gffg :=args [3].ValueNumber ;if _gffg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _gffg > _adcg {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_ddffb :=(_bcce -_gadc )*(_adcg -_gffg +1)*2;_cdea :=_adcg *(_adcg +1);return MakeNumberResult (_ddffb /_cdea );};

// Update updates references in the VerticalRange after removing a row/column.
func (_eade VerticalRange )Update (q *_af .UpdateQuery )Expression {if q .UpdateType ==_af .UpdateActionRemoveColumn {_cdbde :=_eade ;if q .UpdateCurrentSheet {_gdgcb :=q .ColumnIdx ;_cdbde ._gfcg =_gdgg (_eade ._gfcg ,_gdgcb );_cdbde ._edefg =_gdgg (_eade ._edefg ,_gdgcb );};return _cdbde ;};return _eade ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_gfdgc :=args [0].AsNumber ();_dadd :=args [1].AsNumber ();if _gfdgc .Type ==ResultTypeNumber &&_dadd .Type ==ResultTypeNumber {_eebaa :=_eg .Atan2 (_dadd .ValueNumber ,_gfdgc .ValueNumber );if _eebaa !=_eebaa {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_eebaa );};for _ ,_ceggbd :=range []ResultType {_gfdgc .Type ,_dadd .Type }{switch _ceggbd {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _gfdgc ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ceggbd ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _gddd :=0;_gddd < len (args )-1;_gddd +=2{if args [_gddd ].ValueNumber ==1{return args [_gddd +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};const _bgba =57376;

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_edc *defEval )LastEvalIsRef ()bool {return _edc ._bgf };

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_bfef :=len (args );if _bfef < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_defd :=args [0].ValueNumber ;if _defd ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_affe :=[]float64 {};for _ ,_bbfcc :=range args [1:]{switch _bbfcc .Type {case ResultTypeNumber :_affe =append (_affe ,_bbfcc .ValueNumber );case ResultTypeArray ,ResultTypeList :_acg :=_fbef (_bbfcc );for _ ,_eabc :=range _acg {for _ ,_dfbcf :=range _eabc {if _dfbcf .Type ==ResultTypeNumber &&!_dfbcf .IsBoolean {_affe =append (_affe ,_dfbcf .ValueNumber );};};};};};_eggf :=0.0;for _ecdba ,_eagca :=range _affe {_eggf +=_eagca /_eg .Pow (1+_defd ,float64 (_ecdba )+1);};return MakeNumberResult (_eggf );};

// Update returns the same object as updating sheet references does not affect String.
func (_gabcg String )Update (q *_af .UpdateQuery )Expression {return _gabcg };type yyLexer interface{Lex (_fbdf *yySymType )int ;Error (_dfbde string );};func (_bfdd node )String ()string {return _a .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_bfdd ._fgdc ,_gggbb (string (_bfdd ._babde )));};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_fedb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fedb =int (args [1].ValueNumber );if _fedb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _fedb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cafcb :=args [0].Value ();_bbaa :=len (_cafcb );if _fedb > _bbaa {return MakeStringResult (_cafcb );};return MakeStringResult (_cafcb [_bbaa -_fedb :_bbaa ]);};func _fbcgg (_fdga Result ,_ggaed ,_egfc string )(string ,Result ){switch _fdga .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _fdga .Value (),_edgf ;default:return "",MakeErrorResult (_ggaed +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_egfc +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};var _dedbe =[...]struct{_eacbf int ;_ffadf int ;_ebga string ;}{};func _ababa (_ecga []Result )(float64 ,float64 ,Result ){_acaf :=0.0;_fged :=1.0;for _ ,_bffeb :=range _ecga {switch _bffeb .Type {case ResultTypeNumber :_acaf +=_bffeb .ValueNumber ;_fged *=_dbbgb (_bffeb .ValueNumber );case ResultTypeList ,ResultTypeArray :_bfcbd ,_aeafc ,_effee :=_ababa (_bffeb .ListValues ());_acaf +=_bfcbd ;_fged *=_dbbgb (_aeafc );if _effee .Type ==ResultTypeError {return 0,0,_effee ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_bffeb ;};};return _acaf ,_fged ,_edgf ;};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_egfa :=args [0].AsNumber ();if _egfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_agcee :=int (_egfa .ValueNumber );if _agcee < 0||_agcee > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_a .Sprintf ("\u0025\u0063",_agcee ));};var _cgea ,_bfgff ,_edcg ,_fgea ,_afcgc ,_ddfbe ,_dfba ,_ffgf ,_dbcf ,_cebee ,_fdbgf ,_fafd ,_bgfg ,_acce ,_ddgag *_f .Regexp ;func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dfgge :=args [0].AsNumber ();if _dfgge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_degfg :=float64 (0);if len (args )> 1{_dbcba :=args [1].AsNumber ();if _dbcba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_degfg =_dbcba .ValueNumber ;};_bfcg :=_dfgge .ValueNumber ;_egec :=1.0;if _degfg >=0{_egec =_eg .Pow (1/10.0,_degfg );}else {return MakeNumberResult (0);};_bfcg ,_cabc :=_eg .Modf (_bfcg /_egec );_abdda :=0.99999;if _cabc > _abdda {_bfcg ++;}else if _cabc < -_abdda {_bfcg --;};_ =_cabc ;return MakeNumberResult (_bfcg *_egec );};func _gg (_afg BinOpType ,_eafd ,_cgd [][]Result )Result {_ac :=[][]Result {};for _aee :=range _eafd {_db :=_fde (_afg ,_eafd [_aee ],_cgd [_aee ]);if _db .Type ==ResultTypeError {return _db ;};_ac =append (_ac ,_db .ValueList );};return MakeArrayResult (_ac );};func (_ebcag *ivr )Sheet (name string )Context {return _ebcag };func _ddgc (_ggcb string )*criteriaRegex {_becd :=&criteriaRegex {};if _ggcb ==""{return _becd ;};if _fgcb :=_fdeg .FindStringSubmatch (_ggcb );len (_fgcb )> 1{_becd ._fbecg =_fgfff ;_becd ._aabff =_fgcb [1];}else if _bccd :=_ebgcc .FindStringSubmatch (_ggcb );len (_bccd )> 1{_becd ._fbecg =_fgfff ;_becd ._aabff =_bccd [1];}else if _gabe :=_dbac .FindStringSubmatch (_ggcb );len (_gabe )> 1{_becd ._fbecg =_fcdgc ;_becd ._aabff =_gabe [1];}else if _cbgf :=_aeecf .FindStringSubmatch (_ggcb );len (_cbgf )> 1{_becd ._fbecg =_bcgba ;_becd ._aabff =_cbgf [1];}else if _eafc :=_cbeba .FindStringSubmatch (_ggcb );len (_eafc )> 1{_becd ._fbecg =_caeef ;_becd ._aabff =_eafc [1];}else if _abee :=_dbdae .FindStringSubmatch (_ggcb );len (_abee )> 1{_becd ._fbecg =_dbbcc ;_becd ._aabff =_abee [1];};return _becd ;};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// String returns a string representation of a horizontal range with prefix.
func (_aaebb PrefixHorizontalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_aaebb ._gfgb .String (),_aaebb ._bdadc ,_aaebb ._bgccb );};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_dga :v }};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_ecgec .Lock ();defer _ecgec .Unlock ();if _agcdc ,_baed :=_begf [name ];_baed {return _agcdc ;};return nil ;};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_gfgb Expression ;_bdadc ,_bgccb int ;};const _afeeb =57346;

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_ccceg :=args [0];if _ccceg .Type ==ResultTypeError {return _ccceg ;};if _ccceg .Type !=ResultTypeString &&_ccceg .Type !=ResultTypeNumber &&_ccceg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gdbgb :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bdaa :=int (args [1].ValueNumber );if _bdaa < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dcdd :=int (args [2].ValueNumber );if _dcdd < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cbgfg :=len (_gdbgb );if _bdaa > _cbgfg {return MakeStringResult ("");};_bdaa --;_ebea :=_bdaa +_dcdd ;if _ebea > _cbgfg {return MakeStringResult (_gdbgb [_bdaa :]);}else {return MakeStringResult (_gdbgb [_bdaa :_ebea ]);};};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_ecgec .Lock ();defer _ecgec .Unlock ();if _ ,_dgab :=_begf [name ];_dgab {_aff .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_begf [name ]=fn ;};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_gcddf :=args [0].AsString ();if _gcddf .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gecfc :=args [1].AsNumber ();if _gecfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _gecfc .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _gecfc .ValueNumber ==0{return MakeStringResult ("");};_dedgb :=_g .Buffer {};for _aggcb :=0;_aggcb < int (_gecfc .ValueNumber );_aggcb ++{_dedgb .WriteString (_gcddf .ValueString );};return MakeStringResult (_dedgb .String ());};

// Update returns the same object as updating sheet references does not affect Bool.
func (_df Bool )Update (q *_af .UpdateQuery )Expression {return _df };

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_abbca :pfx ,_debae :exp }};func (_dcef Result )String ()string {return _dcef .Value ()};func _fgegg (_gebea string ,_gaad func (_ddgd float64 )float64 )Function {return func (_eeef []Result )Result {if len (_eeef )!=1{return MakeErrorResult (_gebea +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gcdf :=_eeef [0].AsNumber ();switch _gcdf .Type {case ResultTypeNumber :_cbcae :=_gaad (_gcdf .ValueNumber );if _eg .IsNaN (_cbcae ){return MakeErrorResult (_gebea +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _eg .IsInf (_cbcae ,0){return MakeErrorResult (_gebea +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _cbcae ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_gebea +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_cbcae );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_gebea +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gcdf ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gebea ,_gcdf .Type ));};};};func _gecbd (_accea Context ,_facf ,_eefd int )(string ,string ){_gagfg :="\u0041"+_ae .Itoa (_facf );_bcfga :=_accea .LastColumn (_facf ,_eefd );_fcbgb :=_bcfga +_ae .Itoa (_eefd );return _gagfg ,_fcbgb ;};const _dafgf =57368;const _aacff int =30;

// Reference returns a string reference value to a range.
func (_acgge Range )Reference (ctx Context ,ev Evaluator )Reference {_ggfac :=_acgge ._bgge .Reference (ctx ,ev );_fabga :=_acgge ._cfge .Reference (ctx ,ev );if _ggfac .Type ==ReferenceTypeCell &&_fabga .Type ==ReferenceTypeCell {return MakeRangeReference (_cgeffc (_ggfac ,_fabga ));};return ReferenceInvalid ;};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fdfb :=args [0].AsNumber ();if _fdfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aegf :=_eg .Signbit (_fdfb .ValueNumber );_cebg ,_gegca :=_eg .Modf (_fdfb .ValueNumber /2);_gfcd :=_cebg *2;if _gegca !=0{if !_aegf {_gfcd +=2;}else {_gfcd -=2;};};return MakeNumberResult (_gfcd );};func (_fda *defEval )checkLastEvalIsRef (_bcd Context ,_agg Expression ){switch _agg .(type ){case FunctionCall :switch _agg .(FunctionCall )._aedfb {case "\u0049\u0053\u0052E\u0046":for _ ,_ddd :=range _agg .(FunctionCall )._eefggc {switch _ddd .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_abca :=_ddd .Eval (_bcd ,_fda );_fda ._bgf =!(_abca .Type ==ResultTypeError &&_abca .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_fda ._bgf =false ;};};};};};var _bbgg =[...]int {0};var _gfabe =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// GetEpoch returns a null time object for the invalid reference context.
func (_gfagcb *ivr )GetEpoch ()_bg .Time {return _bg .Time {}};var _cfcde =map[string ]Function {};

// Reference returns an invalid reference for ConstArrayExpr.
func (_gbba ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _fbeb ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";func _caab (_dfga Result ,_gbdb ,_fbfd int )[][]Result {_afgc :=[][]Result {};switch _dfga .Type {case ResultTypeArray :for _ggbea ,_ddfc :=range _dfga .ValueArray {if _ggbea < _gbdb {_afgc =append (_afgc ,_dbgb (MakeListResult (_ddfc ),_fbfd ));}else {_afgc =append (_afgc ,_dbgb (MakeErrorResultType (ErrorTypeNA ,""),_fbfd ));};};case ResultTypeList :_daab :=_dbgb (_dfga ,_fbfd );for _ccgbd :=0;_ccgbd < _gbdb ;_ccgbd ++{_afgc =append (_afgc ,_daab );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ddcac :=0;_ddcac < _gbdb ;_ddcac ++{_ecfa :=_dbgb (_dfga ,_fbfd );_afgc =append (_afgc ,_ecfa );};};return _afgc ;};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_cfee ,_ggfaf :=_afdc (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _ggfaf .Type ==ResultTypeError {return _ggfaf ;};return MakeNumberResult (_ggec (_cfee ._dagb ,_cfee ._gced ,_cfee ._fgeg ,_cfee ._fgab ));};var _fdeg ,_ebgcc ,_dbdae ,_cbeba ,_aeecf ,_dbac *_f .Regexp ;

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cdefd (args ,_dafcf )};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_dgbg ,_adg :=_badgb (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _adg .Type ==ResultTypeError {return _adg ;};_gfcf :=_dgbg ._fcdb ;_dfdg :=_dgbg ._gbdf ;_eacg :=_dgbg ._dabe ;_dddd :=_dgbg ._baag ;_cfd :=_dgbg ._abda ;_fbb :=_dgbg ._cbde ;if _fbb >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_beaa :=_dgbg ._deag ;_cacf :=1.0/_fbb ;_edca :=2.5;if _cacf < 3{_edca =1;}else if _cacf < 5{_edca =1.5;}else if _cacf <=6{_edca =2;};_fbb *=_edca ;_fdfd ,_gbgc :=_ebed (_dfdg ,_eacg ,_beaa );if _gbgc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_cadb :=_dbaa (_fdfd *_fbb *_gfcf );_gfcf -=_cadb ;_abge :=_gfcf -_dddd ;for _ecf :=0;_ecf < _cfd ;_ecf ++{_cadb =_dbaa (_fbb *_gfcf );_abge -=_cadb ;if _abge < 0{switch _cfd -_ecf {case 0:case 1:return MakeNumberResult (_dbaa (_gfcf *0.5));default:return MakeNumberResult (0);};};_gfcf -=_cadb ;};return MakeNumberResult (_cadb );};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _egdf (args ,true )};

// String returns a string of a range.
func (_babdd Range )String ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_babdd ._bgge .String (),_babdd ._cfge .String ());};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_febe PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_ebcde :=_febe ._acaga .Reference (ctx ,ev );_dggc :=_febe ._cdec .Reference (ctx ,ev );_debe :=_febe ._aggf .Reference (ctx ,ev );switch _ebcde .Type {case ReferenceTypeSheet :if _ecfec (_ebcde ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ebcde .Value ));};_addd :=_edbed (_ebcde ,_dggc ,_debe );if _dggc .Type ==ReferenceTypeCell &&_debe .Type ==ReferenceTypeCell {if _acbca ,_ccda :=ev .GetFromCache (_addd );_ccda {return _acbca ;}else {_edebg :=_affa (ctx .Sheet (_ebcde .Value ),ev ,_dggc .Value ,_debe .Value );ev .SetCache (_addd ,_edebg );return _edebg ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_addd );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebcde .Type ));};};func _bgff (_edee _bg .Time )_bg .Time {_edee =_edee .UTC ();return _bg .Date (_edee .Year (),_edee .Month (),_edee .Day (),_edee .Hour (),_edee .Minute (),_edee .Second (),_edee .Nanosecond (),_bg .Local );};const _edbba int =30;type rmode byte ;

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// CellRef is a reference to a single cell
type CellRef struct{_gdd string };var _ffbb =[...]uint8 {0,17,33,49,63,78,93,108};func _gebeaf (_fabad ,_eeca Expression )(Expression ,Expression ,error ){_ddfde ,_dccf :=_fabad .(CellRef );if !_dccf {return nil ,nil ,_aa .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fabad .String ()));};_cfdfd ,_dccf :=_eeca .(CellRef );if !_dccf {return nil ,nil ,_aa .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_eeca .String ()));};_ccbb ,_agbae :=_fa .ParseCellReference (_ddfde ._gdd );if _agbae !=nil {return nil ,nil ,_agbae ;};_gdbe ,_dcabg :=_fa .ParseCellReference (_cfdfd ._gdd );if _dcabg !=nil {return nil ,nil ,_dcabg ;};_edcde :=false ;if _ccbb .RowIdx > _gdbe .RowIdx {_edcde =true ;_ccbb .RowIdx ,_gdbe .RowIdx =_gdbe .RowIdx ,_ccbb .RowIdx ;};if _ccbb .ColumnIdx > _gdbe .ColumnIdx {_edcde =true ;_ccbb .ColumnIdx ,_gdbe .ColumnIdx =_gdbe .ColumnIdx ,_ccbb .ColumnIdx ;_ccbb .Column ,_gdbe .Column =_gdbe .Column ,_ccbb .Column ;};if _edcde {return NewCellRef (_ccbb .String ()),NewCellRef (_gdbe .String ()),nil ;};return _fabad ,_eeca ,nil ;};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cdefd (args ,_ggdc )};func _eeda (_ccgd []Result )Result {_dgcee :=_ccgd [0].ValueArray ;if len (_ccgd )==1{_cafg :=[][]Result {};for _ ,_ggfg :=range _dgcee {_cafg =append (_cafg ,_dcaab ([]Result {MakeListResult (_ggfg )}).ValueList );};return MakeArrayResult (_cafg );}else if len (_ccgd )==2{_befe :=len (_dgcee );_dafg :=len (_dgcee [0]);_edeee :=_caab (_ccgd [1],_befe ,_dafg );_dacf :=len (_edeee );_fdge :=[][]Result {};var _bcdad []Result ;for _cfde ,_accb :=range _dgcee {if _cfde < _dacf {_bcdad =_edeee [_cfde ];}else {_bcdad =_dbgb (MakeErrorResultType (ErrorTypeNA ,""),_dafg );};_fdge =append (_fdge ,_dcaab ([]Result {MakeListResult (_accb ),MakeListResult (_bcdad )}).ValueList );};return MakeArrayResult (_fdge );}else if len (_ccgd )==3{_bdbb :=len (_dgcee );_bggg :=len (_dgcee [0]);_gdef :=_caab (_ccgd [1],_bdbb ,_bggg );_agggf :=_caab (_ccgd [2],_bdbb ,_bggg );_caebg :=len (_gdef );_ffbd :=len (_agggf );_edgdc :=[][]Result {};var _fabg ,_dcfaa []Result ;for _gafff ,_ecgbc :=range _dgcee {if _gafff < _caebg {_fabg =_gdef [_gafff ];}else {_fabg =_dbgb (MakeErrorResultType (ErrorTypeNA ,""),_bggg );};if _gafff < _ffbd {_dcfaa =_agggf [_gafff ];}else {_dcfaa =_dbgb (MakeErrorResultType (ErrorTypeNA ,""),_bggg );};_edgdc =append (_edgdc ,_dcaab ([]Result {MakeListResult (_ecgbc ),MakeListResult (_fabg ),MakeListResult (_dcfaa )}).ValueList );};return MakeArrayResult (_edgdc );};return MakeErrorResultType (ErrorTypeValue ,"");};var _agbcd string =string ([]byte {92});

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};var _eebgf =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};func _gdgg (_edb string ,_abc uint32 )string {_ggf :=_fa .ColumnToIndex (_edb );if _ggf ==_abc {return "\u0023\u0052\u0045F\u0021";}else if _ggf > _abc {return _fa .IndexToColumn (_ggf -1);}else {return _edb ;};};type parsedSearchObject struct{_edfac string ;_adef string ;_deegb int ;};func _egdc (_bafa ,_gfdc ,_baee ,_ccac ,_cdbbd ,_bdff float64 )float64 {var _fbaa ,_dagfc float64 ;_adbg :=0.0;_gbdfa :=_eg .Ceil (_cdbbd );_bbgd :=_bafa -_gfdc ;_efba :=false ;_bbd :=0.0;for _ceggb :=1.0;_ceggb <=_gbdfa ;_ceggb ++{if !_efba {_fbaa =_bbc (_bafa ,_gfdc ,_baee ,_ceggb ,_bdff );_bbd =_bbgd /(_baee -_ceggb +1);if _bbd > _fbaa {_dagfc =_bbd ;_efba =true ;}else {_dagfc =_fbaa ;_bbgd -=_fbaa ;};}else {_dagfc =_bbd ;};if _ceggb ==_gbdfa {_dagfc *=_cdbbd +1-_gbdfa ;};_adbg +=_dagfc ;};return _adbg ;};func _gccf (_feag []Result ,_fgbd bool ,_acac string )Result {var _fbbf ,_gcafb string ;if _fgbd {_fbbf ="\u0074\u0068\u0072e\u0065";_gcafb ="\u006f\u0064\u0064";}else {_fbbf ="\u0074\u0077\u006f";_gcafb ="\u0065\u0076\u0065\u006e";};_edbbf :=len (_feag );if (_fgbd &&_edbbf < 3)||(!_fgbd &&_edbbf < 2){return MakeErrorResult (_acac +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_fbbf +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_edbbf /2*2==_edbbf )==_fgbd {return MakeErrorResult (_acac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gcafb +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_gdab :=-1;_ddega :=-1;for _fgaeg :=0;_fgaeg < _edbbf ;_fgaeg +=2{_dfbdb :=_feag [_fgaeg ];if _dfbdb .Type !=ResultTypeArray &&_dfbdb .Type !=ResultTypeList {return MakeErrorResult (_acac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_cdeff :=_fbef (_dfbdb );if _ddega ==-1{_ddega =len (_cdeff );_gdab =len (_cdeff [0]);}else if len (_cdeff )!=_ddega ||len (_cdeff [0])!=_gdab {return MakeErrorResult (_acac +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _fgbd &&_fgaeg ==0{_fgaeg --;};};return _edgf ;};func _fefa (_ddbf ,_bdag ,_bgcd ,_cccc ,_dfde float64 ,_bgdc int )float64 {_caef :=_aafd (_ddbf ,_bgcd ,_cccc ,_dfde ,_bgdc );var _ecag float64 ;if _bdag ==1{if _bgdc ==1{_ecag =0;}else {_ecag =-_cccc ;};}else {if _bgdc ==1{_ecag =_dfcbg (_ddbf ,_bdag -2,_caef ,_cccc ,1)-_caef ;}else {_ecag =_dfcbg (_ddbf ,_bdag -1,_caef ,_cccc ,0);};};return _ecag *_ddbf ;};func _aaeb (_agefg Result ,_eaab *criteriaParsed )bool {if _agefg .IsBoolean {return false ;};_fcgbd :=_agefg .Type ;if _eaab ._edfb {return _fcgbd ==ResultTypeNumber &&_agefg .ValueNumber ==_eaab ._cfeeg ;}else if _fcgbd ==ResultTypeNumber {return _bcadc (_agefg .ValueNumber ,_eaab ._gdgc );};return _cgege (_agefg ,_eaab );};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcbg :=args [0].AsNumber ();_dbga :=args [1].AsNumber ();_dgec :=args [2].AsNumber ();_cefdd :=args [3].ListValues ();if _fcbg .Type !=ResultTypeNumber ||_dbga .Type !=ResultTypeNumber ||_dgec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_egaf :=float64 (0);for _gaeef ,_adead :=range _cefdd {_egaf +=_adead .ValueNumber *_eg .Pow (_fcbg .ValueNumber ,_dbga .ValueNumber +float64 (_gaeef )*_dgec .ValueNumber );};return MakeNumberResult (_egaf );};type couponArgs struct{_dagb float64 ;_gced float64 ;_fgeg int ;_fgab int ;};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddfd ,_feff ,_fcgg :=_cedg (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _fcgg .Type ==ResultTypeError {return _fcgg ;};_ebae ,_fcgg :=_ecb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fcgg .Type ==ResultTypeError {return _fcgg ;};if _ebae >=_ddfd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_eedb :=args [3].ValueNumber ;if _eedb < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbea :=args [4].ValueNumber ;if _cbea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_fcgb :=args [5].ValueNumber ;if _fcgb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bgde :=float64 (int (args [6].ValueNumber ));if !_eacce (_bgde ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_daea :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_daea =int (args [7].ValueNumber );if !_aeb (_daea ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_feg ,_fcgg :=_ebed (_ebae ,_feff ,_daea );if _fcgg .Type ==ResultTypeError {return _fcgg ;};_feg *=_bgde ;_dcada ,_fcgg :=_ebed (_ddfd ,_feff ,_daea );if _fcgg .Type ==ResultTypeError {return _fcgg ;};_dcada *=_bgde ;_ecab ,_fcgg :=_ebed (_ebae ,_ddfd ,_daea );if _fcgg .Type ==ResultTypeError {return _fcgg ;};_ecab *=_bgde ;_beda :=_fcgb +_feg *100*_eedb /_bgde ;_beda /=_cbea +_ecab *100*_eedb /_bgde ;_beda --;_beda *=_bgde /_dcada ;return MakeNumberResult (_beda );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_acbffc :=len (args );if _acbffc !=5&&_acbffc !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_acfa ,_cddf ,_eeee :=_cedg (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _eeee .Type ==ResultTypeError {return _eeee ;};_fbac ,_eeee :=_ecb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _eeee .Type ==ResultTypeError {return _eeee ;};if _fbac >=_acfa {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ggea :=args [3].ValueNumber ;if _ggea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_afde :=args [4].ValueNumber ;if _afde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fedc :=0;if _acbffc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fedc =int (args [5].ValueNumber );if !_aeb (_fedc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_gafg ,_eeee :=_ebed (_acfa ,_cddf ,_fedc );if _eeee .Type ==ResultTypeError {return _eeee ;};_ccd ,_eeee :=_ebed (_fbac ,_cddf ,_fedc );if _eeee .Type ==ResultTypeError {return _eeee ;};_fgcg ,_eeee :=_ebed (_fbac ,_acfa ,_fedc );if _eeee .Type ==ResultTypeError {return _eeee ;};_fcabg :=1+_ccd *_ggea ;_eaca :=1+_gafg *_afde ;return MakeNumberResult ((_fcabg /_eaca -_fgcg *_ggea )*100);};

// Eval evaluates and returns the result of a sheet expression.
func (_eabe SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};var _gebb =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_bdee ,_cfga :=_geba ("\u0046\u0049\u004e\u0044",args );if _cfga .Type !=ResultTypeEmpty {return _cfga ;};_gefd :=_ef .ToLower (_bdee ._edfac );if _gefd ==""{return MakeNumberResult (1.0);};_edgfe :=_ef .ToLower (_bdee ._adef );_dcdff :=_bdee ._deegb ;_fbcg :=1;for _cffed :=range _edgfe {if _fbcg < _dcdff {_fbcg ++;continue ;};_dffe :=_gb .Index (_gefd ,_edgfe [_cffed :]);if _dffe ==0{return MakeNumberResult (float64 (_fbcg ));};_fbcg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Function is a standard function whose result only depends on its arguments.
type Function func (_ebcf []Result )Result ;func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cedbe :=args [0].AsString ();if _cedbe .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_cedbe .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_cedbe .ValueString [0]));};type countMode byte ;

// Eval evaluates and returns the result of a Negate expression.
func (_aagfd Negate )Eval (ctx Context ,ev Evaluator )Result {_cgdfd :=_aagfd ._abdg .Eval (ctx ,ev );if _cgdfd .Type ==ResultTypeNumber {return MakeNumberResult (-_cgdfd .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};func _cgf (_dgb ,_cb [][]Result )bool {if len (_dgb )!=len (_cb ){return false ;};for _cde :=range _dgb {if len (_dgb [_cde ])!=len (_cb [_cde ]){return false ;};};return true ;};

// GetFilename returns an empty string for the invalid reference context.
func (_gggfb *ivr )GetFilename ()string {return ""};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beeb :=args [0].Type ;for _ ,_cffgb :=range args {if _cffgb .Type !=_beeb {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _beeb {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_dabed :=len (args [0].ListValues ());_bggb :=make ([]float64 ,_dabed );for _dgaae :=range _bggb {_bggb [_dgaae ]=1.0;};for _ ,_afdbd :=range args {if len (_afdbd .ListValues ())!=_dabed {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _eaad ,_decg :=range _afdbd .ListValues (){_decg =_decg .AsNumber ();if _decg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_bggb [_eaad ]=_bggb [_eaad ]*_decg .ValueNumber ;};};_ecdde :=0.0;for _ ,_feb :=range _bggb {_ecdde +=_feb ;};return MakeNumberResult (_ecdde );};return MakeNumberResult (1.0);};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_gfcg ,_edefg string };

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_eedf :=len (args );if _eedf !=4&&_eedf !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ceef ,_fdgf :=_ecb (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fdgf .Type ==ResultTypeError {return _fdgf ;};_ffg ,_fdgf :=_ecb (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fdgf .Type ==ResultTypeError {return _fdgf ;};if _ceef >=_ffg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gdggg :=args [2].ValueNumber ;if _gdggg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgae :=args [3].ValueNumber ;if _fgae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcgb :=0;if _eedf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcgb =int (args [4].ValueNumber );if !_aeb (_gcgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_dcda ,_fdgf :=_ebed (_ceef ,_ffg ,_gcgb );if _fdgf .Type ==ResultTypeError {return _fdgf ;};return MakeNumberResult (_fgae *_gdggg *_dcda );};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func (_gggge HorizontalRange )horizontalRangeReference ()string {return _a .Sprintf ("\u0025\u0064\u003a%\u0064",_gggge ._edgad ,_gggge ._badcb );};func _cedg (_fdce ,_cgg Result ,_gda string )(float64 ,float64 ,Result ){_gacb ,_fecfb :=_ecb (_fdce ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_gda );if _fecfb .Type ==ResultTypeError {return 0,0,_fecfb ;};_effe ,_fecfb :=_ecb (_cgg ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_gda );if _fecfb .Type ==ResultTypeError {return 0,0,_fecfb ;};if _gacb >=_effe {return 0,0,MakeErrorResultType (ErrorTypeNum ,_gda +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _gacb ,_effe ,_edgf ;};

// Reference returns a string reference value to a named range.
func (_babbd NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_babbd ._feedd };};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_ecbg PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_ggdbga :=_ecbg ._gfgb .Reference (ctx ,ev );switch _ggdbga .Type {case ReferenceTypeSheet :if _ecfec (_ggdbga ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ggdbga .Value ));};_gabca :=_ecbg .horizontalRangeReference (_ggdbga .Value );if _caaf ,_baefd :=ev .GetFromCache (_gabca );_baefd {return _caaf ;};_eced :=ctx .Sheet (_ggdbga .Value );_bfcbf ,_cdbec :=_gecbd (_eced ,_ecbg ._bdadc ,_ecbg ._bgccb );_gccfd :=_affa (_eced ,ev ,_bfcbf ,_cdbec );ev .SetCache (_gabca ,_gccfd );return _gccfd ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggdbga .Type ));};};func _dcaab (_cadf []Result )Result {_geecc :=_cadf [0].ValueList ;_cbge :=len (_geecc );switch len (_cadf ){case 1:_bdgb :=[]Result {};for _ ,_edef :=range _geecc {_bdgb =append (_bdgb ,MakeBoolResult (_edef .ValueNumber !=0));};return MakeListResult (_bdgb );case 2:_agbaf :=_cadf [1];switch _agbaf .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_dbcc :=[]Result {};for _ ,_eebc :=range _geecc {var _cag Result ;if _eebc .ValueNumber ==0{_cag =MakeBoolResult (false );}else {_cag =_agbaf ;};_dbcc =append (_dbcc ,_cag );};return MakeListResult (_dbcc );case ResultTypeList :_fbaab :=_dbgb (_agbaf ,_cbge );_ceacb :=[]Result {};for _cbedc ,_bcedg :=range _geecc {var _eadg Result ;if _bcedg .ValueNumber ==0{_eadg =MakeBoolResult (false );}else {_eadg =_fbaab [_cbedc ];};_ceacb =append (_ceacb ,_eadg );};return MakeListResult (_ceacb );case ResultTypeArray :_cgcd :=_caab (_agbaf ,len (_agbaf .ValueArray ),_cbge );_cdcf :=[][]Result {};for _ ,_bedfb :=range _cgcd {_ebbfa :=[]Result {};for _gdcc ,_fcbe :=range _geecc {var _ebaf Result ;if _fcbe .ValueNumber ==0{_ebaf =MakeBoolResult (false );}else {_ebaf =_bedfb [_gdcc ];};_ebbfa =append (_ebbfa ,_ebaf );};_cdcf =append (_cdcf ,_ebbfa );};return MakeArrayResult (_cdcf );};case 3:_cfbfa :=_cadf [1];_ddaea :=_cadf [2];_aaac :=_edba (_cfbfa );_bedg :=_edba (_ddaea );if _aaac &&_bedg {_aegga :=[]Result {};for _ ,_cdga :=range _geecc {var _dbbd Result ;if _cdga .ValueNumber ==0{_dbbd =_ddaea ;}else {_dbbd =_cfbfa ;};_aegga =append (_aegga ,_dbbd );};return MakeListResult (_aegga );};if _cfbfa .Type !=ResultTypeArray &&_ddaea .Type !=ResultTypeArray {_efcaa :=_dbgb (_cfbfa ,_cbge );_gcdc :=_dbgb (_ddaea ,_cbge );_gfeg :=[]Result {};for _fcgbb ,_bege :=range _geecc {var _eecd Result ;if _bege .ValueNumber ==0{_eecd =_gcdc [_fcgbb ];}else {_eecd =_efcaa [_fcgbb ];};_gfeg =append (_gfeg ,_eecd );};return MakeListResult (_gfeg );};_feea ,_fedab :=len (_cfbfa .ValueArray ),len (_ddaea .ValueArray );_gecag ,_fdgeg :=_feea ,_fedab ;if _fedab > _gecag {_gecag ,_fdgeg =_fdgeg ,_gecag ;};_feaf :=_caab (_cfbfa ,_gecag ,_cbge );_gdff :=_caab (_ddaea ,_gecag ,_cbge );_efga :=[][]Result {};for _deee :=0;_deee < _gecag ;_deee ++{_ccceaa :=[]Result {};for _gccg ,_bbgeb :=range _geecc {var _fcdgg Result ;if _bbgeb .ValueNumber ==0{if _deee < _fedab {_fcdgg =_gdff [_deee ][_gccg ];}else {_fcdgg =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _deee < _feea {_fcdgg =_feaf [_deee ][_gccg ];}else {_fcdgg =MakeErrorResultType (ErrorTypeNA ,"");};};_ccceaa =append (_ccceaa ,_fcdgg );};_efga =append (_efga ,_ccceaa );};return MakeArrayResult (_efga );};return MakeErrorResult ("");};const (_ byte =iota ;_fgfff ;_fcdgc ;_bcgba ;_caeef ;_dbbcc ;);type yySymType struct{_bbad int ;_cbaa *node ;_adbdf Expression ;_dcfed []Expression ;_edgfg [][]Expression ;};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_cegag ,_efgec :=_fafb (args ,true );if _efgec ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_cegag /_efgec );};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bbgee ,_adeb :=_geba ("\u0046\u0049\u004e\u0044",args );if _adeb .Type !=ResultTypeEmpty {return _adeb ;};_beffb :=_ef .ToLower (_bbgee ._edfac );_ecaf :=_ef .ToLower (_bbgee ._adef );if _beffb ==""{return MakeNumberResult (1.0);};_dada :=_bbgee ._deegb -1;_dgd :=1;_cfgf :=0;for _gegbd :=range _ecaf {if _gegbd !=0{_ecafg :=1;if _gegbd -_cfgf > 1{_ecafg =2;};_dgd +=_ecafg ;};if _dgd > _dada {_afddf :=_gb .Index (_beffb ,_ecaf [_gegbd :]);if _afddf ==0{return MakeNumberResult (float64 (_dgd ));};};_cfgf =_gegbd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Eval evaluates and returns a string.
func (_gdcga String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_gdcga ._bceg )};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_edfc :=len (args );if _edfc ==0||_edfc > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_ebad :=_fbef (args [0]);_babb :=[]float64 {};for _ ,_gfcc :=range _ebad {for _ ,_cfcf :=range _gfcc {if _cfcf .Type ==ResultTypeNumber &&!_cfcf .IsBoolean {_babb =append (_babb ,_cfcf .ValueNumber );};};};_ebcc :=len (_babb );if len (_babb )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_agbfa :=0.1;if _edfc ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_agbfa =args [1].ValueNumber ;if _agbfa <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_dbfd :=[]float64 {};for _fdfg :=0;_fdfg < _ebcc ;_fdfg ++{if _fdfg ==0{_dbfd =append (_dbfd ,0);}else {_dbfd =append (_dbfd ,_dbfd [_fdfg -1]+365);};};return _cega (_babb ,_dbfd ,_agbfa );};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_bcf CellRef )Update (q *_af .UpdateQuery )Expression {if q .UpdateCurrentSheet {_bcf ._gdd =_fad (_bcf ._gdd ,q );};return _bcf ;};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_fgabc :=len (args );if _fgabc !=4&&_fgabc !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_agbf ,_dcgc ,_gfce :=_cedg (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _gfce .Type ==ResultTypeError {return _gfce ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cced :=args [2].ValueNumber ;if _cced <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aab :=args [3].ValueNumber ;if _aab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_bbab :=0;if _fgabc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bbab =int (args [4].ValueNumber );if !_aeb (_bbab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_gee ,_gfce :=_ebed (_agbf ,_dcgc ,_bbab );if _gfce .Type ==ResultTypeError {return _gfce ;};return MakeNumberResult ((_aab -_cced )/_cced /_gee );};func _bge (_ccc int )bool {return _ccc ==0||_ccc ==4};func (_bbefe VerticalRange )verticalRangeReference ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_bbefe ._gfcg ,_bbefe ._edefg );};const _faeg =57347;func _aec (_cd Result )bool {if _cd .Type ==ResultTypeString {return _cd .ValueString =="";};return _cd .ValueNumber ==0;};var _bfad =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// GetWidth returns 0 for the invalid reference context.
func (_aeffc *ivr )GetWidth (colIdx int )float64 {return float64 (0)};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcbc :=args [0].AsString ();if _fcbc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_fcbc .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_fcbc .ValueString [0]));};const _ecddc =-1000;

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_ffdbb :=len (args );if _ffdbb !=4&&_ffdbb !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gefc :=args [0].ValueNumber ;if _gefc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dead :=args [1].ValueNumber ;if _dead < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdcb :=args [2].ValueNumber ;if _bdcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbe :=args [3].ValueNumber ;if _bgbe < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _bgbe > _bdcb {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_cfca :=2.0;if _ffdbb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfca =args [4].ValueNumber ;if _cfca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_bbc (_gefc ,_dead ,_bdcb ,_bgbe ,_cfca ));};func _dffca (_gaff []Result ,_gecbe string )(float64 ,float64 ,Result ){if len (_gaff )!=2{return 0,0,MakeErrorResult (_gecbe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gaff [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gecbe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eadf :=_gaff [0].ValueNumber ;if _gaff [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_gecbe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cacgc :=float64 (int (_gaff [1].ValueNumber ));if _cacgc < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_gecbe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _eadf ,_cacgc ,_edgf ;};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _egdf (args ,false )};func _affa (_edece Context ,_fcga Evaluator ,_aagd ,_adfgc string )Result {_cbfda ,_adafd :=_fa .ParseCellReference (_aagd );if _adafd !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_aagd ,_adafd .Error ()));};_gbaec ,_beae :=_cbfda .ColumnIdx ,_cbfda .RowIdx ;_bfda ,_bdedg :=_fa .ParseCellReference (_adfgc );if _bdedg !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_adfgc ,_bdedg .Error ()));};_afbda ,_bcfbf :=_bfda .ColumnIdx ,_bfda .RowIdx ;_ddaae :=[][]Result {};for _fgdb :=_beae ;_fgdb <=_bcfbf ;_fgdb ++{_abdded :=[]Result {};for _dbafc :=_gbaec ;_dbafc <=_afbda ;_dbafc ++{_eedcf :=_edece .Cell (_a .Sprintf ("\u0025\u0073\u0025\u0064",_fa .IndexToColumn (_dbafc ),_fgdb ),_fcga );_abdded =append (_abdded ,_eedcf );};_ddaae =append (_ddaae ,_abdded );};if len (_ddaae )==1{if len (_ddaae [0])==1{return _ddaae [0][0];};return MakeListResult (_ddaae [0]);};return MakeArrayResult (_ddaae );};func _bbfd ()yyParser {return &yyParserImpl {}};func _dfcbg (_bcga ,_bfe ,_bfeg ,_fbed float64 ,_dbdea int )float64 {var _ggbd float64 ;if _bcga ==0{_ggbd =_fbed +_bfeg *_bfe ;}else {_cdeg :=_eg .Pow (1+_bcga ,_bfe );if _dbdea ==1{_ggbd =_fbed *_cdeg +_bfeg *(1+_bcga )*(_cdeg -1)/_bcga ;}else {_ggbd =_fbed *_cdeg +_bfeg *(_cdeg -1)/_bcga ;};};return -_ggbd ;};

// IsBool returns false for the invalid reference context.
func (_fgbb *ivr )IsBool (cellRef string )bool {return false };const _gag ="\u0028\u0020\u0028"+_agc +"\u007c"+_fffd +"\u007c"+_gbbf +"\u007c"+_fecg +"\u0029\u0029\u003f\u0024";const (_aefc cmpResult =0;_acbfff cmpResult =-1;_ccbe cmpResult =1;_gbfb cmpResult =2;);func _dbaa (_dcad float64 )float64 {return float64 (int (_dcad +0.5))};var _ebeff =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_gaeg :=len (args );if _gaeg < 3||_gaeg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdfc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_edfgd :=args [1].ValueNumber ;if _edfgd !=float64 (int (_edfgd )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfgg :=args [2].ValueNumber ;_bfaa :=0.0;if _gaeg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfaa =args [3].ValueNumber ;};_gbgb :=0;if _gaeg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbgb =int (args [4].ValueNumber );if _gbgb !=0{_gbgb =1;};};return MakeNumberResult (_dfcbg (_fdfc ,_edfgd ,_gfgg ,_bfaa ,_gbgb ));};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbdcf :=args [0].AsNumber ();if _fbdcf .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _fbdcf .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_dbbgb (_fbdcf .ValueNumber ));};func NewLexer ()*Lexer {return &Lexer {_ffcf :make (chan *node )}};type rangeIndex struct{_cbae int ;_cdbd int ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_ecgec .Lock ();defer _ecgec .Unlock ();if _afbc ,_edeeg :=_cfcde [name ];_edeeg {return _afbc ;};return nil ;};

// Reference returns a string reference value to a vertical range with prefix.
func (_cgdcb PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_bedb :=_cgdcb ._cegab .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_cgdcb .verticalRangeReference (_bedb .Value )};};func (_eeacc PrefixHorizontalRange )horizontalRangeReference (_afdeb string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_afdeb ,_eeacc ._bdadc ,_eeacc ._bgccb );};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eada :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fgged :=args [2].ValueNumber +1;if _fgged ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gfca :=_fbef (args [0]);_aacbb :=float64 (len (_gfca ));_abgd ,_bdcc :=0.0,0.0;_gegd ,_deba :=1.0,1.0;_abbc ,_fbae :=false ,false ;for _ ,_deae :=range _gfca {for _ ,_dddf :=range _deae {if _dddf .Type ==ResultTypeNumber &&!_dddf .IsBoolean {_bbed :=_dddf .ValueNumber ;if _bbed ==0{continue ;}else {if _bbed > 0{_abbc =true ;_bdcc +=_dddf .ValueNumber *_deba ;}else {_fbae =true ;_abgd +=_dddf .ValueNumber *_gegd ;};_gegd /=_eada ;_deba /=_fgged ;};};};};if !_abbc ||!_fbae {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fdfa :=-_bdcc /_abgd ;_fdfa *=_eg .Pow (_fgged ,_aacbb -1);_fdfa =_eg .Pow (_fdfa ,1/(_aacbb -1));return MakeNumberResult (_fdfa -1);};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_cbdg ,_fdac :=_afdc (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _fdac .Type ==ResultTypeError {return _fdac ;};_ccag :=_cbdg ._fgeg ;_caeg :=_cbdg ._fgab ;_acfec ,_fdac :=_acbff (_cbdg ._dagb ,_cbdg ._gced ,_ccag ,_caeg );if _fdac .Type ==ResultTypeError {return _fdac ;};return MakeNumberResult (_acfec );};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_abgc ,_bgbd :=_gcec (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _bgbd .Type ==ResultTypeError {return _bgbd ;};_fggd :=_abgc ._acc ;_bgca :=_abgc ._adea ;_eaea :=_abgc ._ffec ;_caaa :=_abgc ._cdcaa ;_ggee :=_abgc ._gaed ;_ggae :=_abgc ._bfa ;return _gedf (_fggd ,_bgca ,_eaea ,_caaa ,_ggee ,_ggae );};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_gcfba :=args [0].ValueNumber ;if _gcfba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_agbec :=float64 (int (args [1].ValueNumber ));if _agbec < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_eg .Pow ((1+_gcfba /_agbec ),_agbec )-1);};var _ebbf =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Update updates references in the PrefixExpr after removing a row/column.
func (_edaa PrefixExpr )Update (q *_af .UpdateQuery )Expression {_bbaf :=_edaa ;_gbbb :=_edaa ._abbca .String ();if _gbbb ==q .SheetToUpdate {_gdfg :=*q ;_gdfg .UpdateCurrentSheet =true ;_bbaf ._debae =_edaa ._debae .Update (&_gdfg );};return _bbaf ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfaac :=args [0];_cafe :=args [1];if _cafe .Type !=ResultTypeArray &&_cafe .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fcfg :=_egdcd (_cafe );_gegb :=-1;for _cbad ,_efca :=range _fcfg {if _efbd (_dfaac ,_efca ,false ,false )==_aefc {_gegb =_cbad ;};};if _gegb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_gbac :=_fcfg ;if len (args )==3{_gbac =_egdcd (args [2]);};if _gegb < 0||_gegb >=len (_gbac ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _gbac [_gegb ];};func _edbf (_bggd []Result )(bool ,Result ){for _ ,_edfd :=range _bggd {if _edfd .Type ==ResultTypeError {return true ,_edfd ;};};return false ,MakeEmptyResult ();};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_geedg :=len (args );if _geedg !=3&&_geedg !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcdc ,_cccb :=_fbcgg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _cccb .Type ==ResultTypeError {return _cccb ;};_gggg ,_cccb :=_fbcgg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _cccb .Type ==ResultTypeError {return _cccb ;};_cdee ,_cccb :=_fbcgg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _cccb .Type ==ResultTypeError {return _cccb ;};_dagbe :=0;if _geedg ==3{return MakeStringResult (_ef .Replace (_dcdc ,_gggg ,_cdee ,-1));}else {_cdab ,_cffcb :=_fdad (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _cffcb .Type ==ResultTypeError {return _cffcb ;};_dagbe =int (_cdab );if _dagbe < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_bfdg :=_dcdc ;_bdaag :=_dagbe ;_gcdcd :=-1;_dadf :=len (_gggg );_cgdd :=0;for {_bdaag --;_fbdce :=_ef .Index (_bfdg ,_gggg );if _fbdce ==-1{_gcdcd =-1;break ;}else {_gcdcd =_fbdce +_cgdd ;if _bdaag ==0{break ;};_agcge :=_dadf +_fbdce ;_cgdd +=_agcge ;_bfdg =_bfdg [_agcge :];};};if _gcdcd ==-1{return MakeStringResult (_dcdc );}else {_fggb :=_dcdc [:_gcdcd ];_fagcg :=_dcdc [_gcdcd +_dadf :];return MakeStringResult (_fggb +_cdee +_fagcg );};};};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_dgae .Float64 ());};

// Reference returns an invalid reference for Negate.
func (_acbc Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_bfga :=len (args );if _bfga < 3||_bfga > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_agaa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cbbe :=args [1].ValueNumber ;if _cbbe !=float64 (int (_cbbe )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aecg :=args [2].ValueNumber ;_fefc :=0.0;if _bfga >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fefc =args [3].ValueNumber ;};_ebgb :=0.0;if _bfga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebgb =args [4].ValueNumber ;if _ebgb !=0{_ebgb =1;};};if _agaa ==0{return MakeNumberResult (-_aecg *_cbbe -_fefc );}else {return MakeNumberResult ((((1-_eg .Pow (1+_agaa ,_cbbe ))/_agaa )*_aecg *(1+_agaa *_ebgb )-_fefc )/_eg .Pow (1+_agaa ,_cbbe ));};};var _cc int64 =_gfgc (1900,_bg .January ,1);var _be =[]*_f .Regexp {};

// String returns a string representation of a range with prefix.
func (_aggcd PrefixRangeExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_aggcd ._acaga .String (),_aggcd ._cdec .String (),_aggcd ._aggf .String ());};func _fcbf (_egfd []Result ,_acfef bool )Result {_bgfe :="\u004d\u0049\u004e";if _acfef {_bgfe ="\u004d\u0049\u004e\u0041";};if len (_egfd )==0{return MakeErrorResult (_bgfe +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfacb :=_eg .MaxFloat64 ;for _ ,_gddbcg :=range _egfd {switch _gddbcg .Type {case ResultTypeNumber :if (_acfef ||!_gddbcg .IsBoolean )&&_gddbcg .ValueNumber < _gfacb {_gfacb =_gddbcg .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bfggc :=_fcbf (_gddbcg .ListValues (),_acfef );if _bfggc .ValueNumber < _gfacb {_gfacb =_bfggc .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_efdb :=0.0;if _acfef {_efdb =_gddbcg .AsNumber ().ValueNumber ;};if _efdb < _gfacb {_gfacb =_efdb ;};default:_aff .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bgfe +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gddbcg .Type );};};if _gfacb ==_eg .MaxFloat64 {_gfacb =0;};return MakeNumberResult (_gfacb );};var _gaca =map[string ]*_f .Regexp {};

// String returns a string representation of SheetPrefixExpr.
func (_febbf SheetPrefixExpr )String ()string {return _febbf ._gffe };func _cbd (_bad string )(int ,int ,float64 ,bool ,bool ,Result ){_gbdd :="";_gce :=[]string {};for _bagc ,_afda :=range _gaca {_gce =_afda .FindStringSubmatch (_bad );if len (_gce )> 1{_gbdd =_bagc ;break ;};};if _gbdd ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};_bbe :=_gce [1]=="";_gce =_gce [49:];_gdf :=len (_gce );_dad :=_gce [_gdf -1];_gae :=_dad =="\u0061\u006d";_dggf :=_dad =="\u0070\u006d";var _bbg ,_dba int ;var _edf float64 ;var _badg error ;switch _gbdd {case "\u0068\u0068":_bbg ,_badg =_ae .Atoi (_gce [0]);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};_dba =0;_edf =0;case "\u0068\u0068\u003am\u006d":_bbg ,_badg =_ae .Atoi (_gce [0]);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};_dba ,_badg =_ae .Atoi (_gce [2]);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};_edf =0;case "\u006d\u006d\u003as\u0073":_bbg =0;_dba ,_badg =_ae .Atoi (_gce [0]);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};_edf ,_badg =_ae .ParseFloat (_gce [2],64);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_bbg ,_badg =_ae .Atoi (_gce [0]);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};_dba ,_badg =_ae .Atoi (_gce [2]);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};_edf ,_badg =_ae .ParseFloat (_gce [4],64);if _badg !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};};if _dba >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};if _gae ||_dggf {if _bbg > 12||_edf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );}else if _bbg ==12{_bbg =0;};}else if _bbg >=24||_edf >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_bbf );};return _bbg ,_dba ,_edf ,_dggf ,_bbe ,_edgf ;};func (_caaae tokenType )String ()string {return _ccgc (int (_caaae ))};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_eg .Pi );};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ef .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_bceg :v };};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cae :=_ef .ToLower (args [0].ValueString );if !_fgf (_cae ){_ ,_ ,_ ,_ ,_dfbc ,_dbc :=_cbd (_cae );if _dbc .Type ==ResultTypeError {_dbc .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _dbc ;};if _dfbc {return MakeNumberResult (0);};};_fggf ,_ggc ,_ba ,_ ,_dcaa :=_eeg (_cae );if _dcaa .Type ==ResultTypeError {return _dcaa ;};return MakeNumberResult (_gef (_fggf ,_ggc ,_ba ));};func _dgg (){_cce ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_f .MustCompile ("\u005e"+_gec +_gag );_cce ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_f .MustCompile ("\u005e"+_aba +_gag );_cce ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_f .MustCompile ("\u005e"+_gbd +_gag );_cce ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_f .MustCompile ("\u005e"+_efg +_gag );_gaca ["\u0068\u0068"]=_f .MustCompile (_eea +_agc +"\u0024");_gaca ["\u0068\u0068\u003am\u006d"]=_f .MustCompile (_eea +_fffd +"\u0024");_gaca ["\u006d\u006d\u003as\u0073"]=_f .MustCompile (_eea +_gbbf +"\u0024");_gaca ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_f .MustCompile (_eea +_fecg +"\u0024");_be =[]*_f .Regexp {_f .MustCompile ("\u005e"+_gec +"\u0024"),_f .MustCompile ("\u005e"+_aba +"\u0024"),_f .MustCompile ("\u005e"+_gbd +"\u0024"),_f .MustCompile ("\u005e"+_efg +"\u0024")};_ggb =[]*_f .Regexp {_f .MustCompile ("\u005e"+_agc +"\u0024"),_f .MustCompile ("\u005e"+_fffd +"\u0024"),_f .MustCompile ("\u005e"+_gbbf +"\u0024"),_f .MustCompile ("\u005e"+_fecg +"\u0024")};};const _ddfg =57361;const _acafg =57351;type criteriaParsed struct{_edfb bool ;_cfeeg float64 ;_cfaa string ;_gdgc *criteriaRegex ;};

// Eval evaluates and returns the result of an empty expression.
func (_de EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_agcgd :=args [0].AsNumber ();if _agcgd .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gcede :=float64 (1);if _agcgd .ValueNumber < 0{_gcede =-1;};if len (args )> 1{_dgbc :=args [1].AsNumber ();if _dgbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gcede =_dgbc .ValueNumber ;};_aaccb :=float64 (1);if len (args )> 2{_efgaf :=args [2].AsNumber ();if _efgaf .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aaccb =_efgaf .ValueNumber ;};if len (args )==1{return MakeNumberResult (_eg .Floor (_agcgd .ValueNumber ));};_cecg :=_agcgd .ValueNumber ;_cecg ,_cdbc :=_eg .Modf (_cecg /_gcede );if _cdbc !=0&&_agcgd .ValueNumber < 0&&_aaccb > 0{_cecg ++;};return MakeNumberResult (_cecg *_gcede );};var _gdedd =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };const _deddb =57362;func (_dbafe *noCache )SetCache (key string ,value Result ){};

// Eval evaluates and returns a number.
func (_aebg Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_aebg ._adgc )};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_aaf :=args [0];switch _aaf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_eeb :=_edgg (_aaf .ValueNumber );return MakeNumberResult (float64 (_eeb .Day ()));case ResultTypeString :_ced :=_ef .ToLower (_aaf .ValueString );if !_fgf (_ced ){_ ,_ ,_ ,_ ,_cedf ,_eacb :=_cbd (_ced );if _eacb .Type ==ResultTypeError {_eacb .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _eacb ;};if _cedf {return MakeNumberResult (0);};};_ ,_ ,_fag ,_ ,_bca :=_eeg (_ced );if _bca .Type ==ResultTypeError {return _bca ;};return MakeNumberResult (float64 (_fag ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};func _agedbe (_dccga ,_fgccc int )string {const TOKSTART =4;if !_bgfd {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_adfg :=range _dedbe {if _adfg ._eacbf ==_dccga &&_adfg ._ffadf ==_fgccc {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_adfg ._ebga ;};};_cdbf :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_ccgc (_fgccc );_fcbd :=make ([]int ,0,4);_cgeff :=_abaa [_dccga ];for _cfcd :=TOKSTART ;_cfcd -1< len (_bfad );_cfcd ++{if _cdbfc :=_cgeff +_cfcd ;_cdbfc >=0&&_cdbfc < _baggb &&_bbgf [_gfabe [_cdbfc ]]==_cfcd {if len (_fcbd )==cap (_fcbd ){return _cdbf ;};_fcbd =append (_fcbd ,_cfcd );};};if _gebb [_dccga ]==-2{_gefa :=0;for _baeb [_gefa ]!=-1||_baeb [_gefa +1]!=_dccga {_gefa +=2;};for _gefa +=2;_baeb [_gefa ]>=0;_gefa +=2{_fgfbf :=_baeb [_gefa ];if _fgfbf < TOKSTART ||_baeb [_gefa +1]==0{continue ;};if len (_fcbd )==cap (_fcbd ){return _cdbf ;};_fcbd =append (_fcbd ,_fgfbf );};if _baeb [_gefa +1]!=0{return _cdbf ;};};for _aecde ,_aeaec :=range _fcbd {if _aecde ==0{_cdbf +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_cdbf +="\u0020\u006f\u0072\u0020";};_cdbf +=_ccgc (_aeaec );};return _cdbf ;};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_edgga :=len (args );if _edgga !=4&&_edgga !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gegdc ,_dega ,_ccg :=_cedg (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _ccg .Type ==ResultTypeError {return _ccg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddfb :=args [2].ValueNumber ;if _ddfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_degf :=args [3].ValueNumber ;if _degf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_geff :=0;if _edgga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geff =int (args [4].ValueNumber );if !_aeb (_geff ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_fgcdg ,_ccg :=_ebed (_gegdc ,_dega ,_geff );if _ccg .Type ==ResultTypeError {return _ccg ;};return MakeNumberResult (_degf *(1-_ddfb *_fgcdg ));};func _fbde (_befc yyLexer ,_cbddd *yySymType )(_bega ,_bdeffg int ){_bdeffg =0;_bega =_befc .Lex (_cbddd );if _bega <=0{_bdeffg =_fbacf [0];goto _cfegd ;};if _bega < len (_fbacf ){_bdeffg =_fbacf [_bega ];goto _cfegd ;};if _bega >=_dage {if _bega < _dage +len (_eebgf ){_bdeffg =_eebgf [_bega -_dage ];goto _cfegd ;};};for _fbeg :=0;_fbeg < len (_bbgg );_fbeg +=2{_bdeffg =_bbgg [_fbeg +0];if _bdeffg ==_bega {_bdeffg =_bbgg [_fbeg +1];goto _cfegd ;};};_cfegd :if _bdeffg ==0{_bdeffg =_eebgf [1];};if _cegge >=3{_a .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_ccgc (_bdeffg ),uint (_bega ));};return _bega ,_bdeffg ;};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_ccdd :=_gccf (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _ccdd .Type !=ResultTypeEmpty {return _ccdd ;};_daeea :=_degfa (args [1:]);_dgeab :=0.0;_bcad :=_fbef (args [0]);for _ ,_dacb :=range _daeea {_dgeab +=_bcad [_dacb ._cbae ][_dacb ._cdbd ].ValueNumber ;};return MakeNumberResult (float64 (_dgeab ));};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_bfagf PrefixHorizontalRange )Update (q *_af .UpdateQuery )Expression {return _bfagf };

// Update updates the FunctionCall references after removing a row/column.
func (_afbdb FunctionCall )Update (q *_af .UpdateQuery )Expression {_ecbe :=[]Expression {};for _ ,_fgfbc :=range _afbdb ._eefggc {_cbdc :=_fgfbc .Update (q );_ecbe =append (_ecbe ,_cbdc );};return FunctionCall {_aedfb :_afbdb ._aedfb ,_eefggc :_ecbe };};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cee :=args [0];switch _cee .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_cedc :=_edgg (_cee .ValueNumber );return MakeNumberResult (float64 (_cedc .Month ()));case ResultTypeString :_fdc :=_ef .ToLower (_cee .ValueString );if !_fgf (_fdc ){_ ,_ ,_ ,_ ,_fbce ,_ffdf :=_cbd (_fdc );if _ffdf .Type ==ResultTypeError {_ffdf .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _ffdf ;};if _fbce {return MakeNumberResult (1);};};_ ,_ebbe ,_ ,_ ,_bafe :=_eeg (_fdc );if _bafe .Type ==ResultTypeError {return _bafe ;};return MakeNumberResult (float64 (_ebbe ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ffbef :=[]string {};for _abdaa :=range _cfcde {_ffbef =append (_ffbef ,_abdaa );};for _edfgb :=range _begf {_ffbef =append (_ffbef ,_edfgb );};_ed .Strings (_ffbef );return _ffbef ;};

// String returns a string representation of a vertical range with prefix.
func (_egcac PrefixVerticalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_egcac ._cegab .String (),_egcac ._eeaed ,_egcac ._abcad );};const _bbf ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";func _ead (_eca ,_fecc float64 ,_fcd ,_eag int )float64 {_agce :=_edgg (_eca );_bbef :=_edgg (_fecc );_gcab :=_eeba (_agce ,_bbef ,_fcd );return _gbf (_agce ,_gcab ,_eag );};const _gadfc =57372;

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_cec string ,_gdbg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_dbb string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_bg .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_bce int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_dag string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dc string )string ;

// GetFormat returns if cell is protected.
GetLocked (_gac string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_aef string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_edbe string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_fba ,_ddb int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_cab string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_geg string ,_dfe bool );

// NamedRange returns a named range.
NamedRange (_ceb string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_cbf ,_abe uint32 );};func _egdcd (_cafb Result )[]Result {_agfg :=_cafb .ValueList ;if _cafb .Type ==ResultTypeArray {_agfg =nil ;for _ ,_ffdbd :=range _cafb .ValueArray {if len (_ffdbd )> 0{_agfg =append (_agfg ,_ffdbd [0]);}else {_agfg =append (_agfg ,_edgf );};};};return _agfg ;};type cumulArgs struct{_dabc float64 ;_cgef float64 ;_gecf float64 ;_ebba float64 ;_dbbg float64 ;_aega int ;};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bcbae :=args [0];switch _bcbae .Type {case ResultTypeError :return _bcbae ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_bcbae .ValueNumber !=0);};if _bcbae .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _dcaab (args );case ResultTypeArray :return _eeda (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_eaegg :=MakeNumberResult (0);for _ ,_gbdbe :=range args {_gbdbe =_gbdbe .AsNumber ();switch _gbdbe .Type {case ResultTypeNumber :_eaegg .ValueNumber +=_gbdbe .ValueNumber *_gbdbe .ValueNumber ;case ResultTypeList ,ResultTypeArray :_aeedf :=SumSquares (_gbdbe .ListValues ());if _aeedf .Type !=ResultTypeNumber {return _aeedf ;};_eaegg .ValueNumber +=_aeedf .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gbdbe ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_gbdbe .Type ));};};return _eaegg ;};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffeg :=int (args [0].ValueNumber );return MakeBoolResult (_ffeg ==_ffeg /2*2);};func _feffb (_dafe []Result ,_gcfbae countMode )float64 {_abgg :=0.0;for _ ,_ccgdg :=range _dafe {switch _ccgdg .Type {case ResultTypeNumber :if _gcfbae ==_cgcf ||(_gcfbae ==_ffbe &&!_ccgdg .IsBoolean ){_abgg ++;};case ResultTypeList ,ResultTypeArray :_abgg +=_feffb (_ccgdg .ListValues (),_gcfbae );case ResultTypeString :if _gcfbae ==_cgcf {_abgg ++;};case ResultTypeEmpty :if _gcfbae ==_eecg {_abgg ++;};};};return _abgg ;};func (_cdeeb *yyParserImpl )Parse (yylex yyLexer )int {_ggcff :=_bg .Now ();var _dbagg int ;var _edfgg yySymType ;var _fecgg []yySymType ;_ =_fecgg ;_dafd :=_cdeeb ._abdc [:];Nerrs :=0;Errflag :=0;_egce :=0;_cdeeb ._aedee =-1;_eece :=-1;defer func (){_egce =-1;_cdeeb ._aedee =-1;_eece =-1}();_ggggc :=-1;goto _aage ;_fecgfc :return 0;_bdade :return 1;_aage :if _gcbf (_ggcff ){_aff .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bdade ;};if _cegge >=4{_a .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_ccgc (_eece ),_agfa (_egce ));};_ggggc ++;if _ggggc >=len (_dafd ){_ccaf :=make ([]yySymType ,len (_dafd )*2);copy (_ccaf ,_dafd );_dafd =_ccaf ;};_dafd [_ggggc ]=_edfgg ;_dafd [_ggggc ]._bbad =_egce ;_deeb :if _gcbf (_ggcff ){_aff .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bdade ;};_dbagg =_abaa [_egce ];if _dbagg <=_ecddc {goto _dadfb ;};if _cdeeb ._aedee < 0{_cdeeb ._aedee ,_eece =_fbde (yylex ,&_cdeeb ._ffeeb );};_dbagg +=_eece ;if _dbagg < 0||_dbagg >=_baggb {goto _dadfb ;};_dbagg =_gfabe [_dbagg ];if _bbgf [_dbagg ]==_eece {_cdeeb ._aedee =-1;_eece =-1;_edfgg =_cdeeb ._ffeeb ;_egce =_dbagg ;if Errflag > 0{Errflag --;};goto _aage ;};_dadfb :if _gcbf (_ggcff ){_aff .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _bdade ;};_dbagg =_gebb [_egce ];if _dbagg ==-2{if _cdeeb ._aedee < 0{_cdeeb ._aedee ,_eece =_fbde (yylex ,&_cdeeb ._ffeeb );};_efgad :=0;for {if _baeb [_efgad +0]==-1&&_baeb [_efgad +1]==_egce {break ;};_efgad +=2;};for _efgad +=2;;_efgad +=2{_dbagg =_baeb [_efgad +0];if _dbagg < 0||_dbagg ==_eece {break ;};};_dbagg =_baeb [_efgad +1];if _dbagg < 0{goto _fecgfc ;};};if _dbagg ==0{switch Errflag {case 0:yylex .Error (_agedbe (_egce ,_eece ));Nerrs ++;if _cegge >=1{_a .Printf ("\u0025\u0073",_agfa (_egce ));_a .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_ccgc (_eece ));};fallthrough;case 1,2:Errflag =3;for _ggggc >=0{_dbagg =_abaa [_dafd [_ggggc ]._bbad ]+_gcbc ;if _dbagg >=0&&_dbagg < _baggb {_egce =_gfabe [_dbagg ];if _bbgf [_egce ]==_gcbc {goto _aage ;};};if _cegge >=2{_a .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_dafd [_ggggc ]._bbad );};_ggggc --;};goto _bdade ;case 3:if _cegge >=2{_a .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_ccgc (_eece ));};if _eece ==_bfgeb {goto _bdade ;};_cdeeb ._aedee =-1;_eece =-1;goto _deeb ;};};if _cegge >=2{_a .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_dbagg ,_agfa (_egce ));};_cgaee :=_dbagg ;_faea :=_ggggc ;_ =_faea ;_ggggc -=_degcg [_dbagg ];if _ggggc +1>=len (_dafd ){_becgf :=make ([]yySymType ,len (_dafd )*2);copy (_becgf ,_dafd );_dafd =_becgf ;};_edfgg =_dafd [_ggggc +1];_dbagg =_dafcg [_dbagg ];_bdfd :=_ebeff [_dbagg ];_feaba :=_bdfd +_dafd [_ggggc ]._bbad +1;if _feaba >=_baggb {_egce =_gfabe [_bdfd ];}else {_egce =_gfabe [_feaba ];if _bbgf [_egce ]!=-_dbagg {_egce =_gfabe [_bdfd ];};};switch _cgaee {case 1:_fecgg =_dafd [_faea -1:_faea +1];{yylex .(*plex )._cffd =_edfgg ._adbdf ;};case 3:_fecgg =_dafd [_faea -2:_faea +1];{_edfgg ._adbdf =_fecgg [2]._adbdf ;};case 4:_fecgg =_dafd [_faea -4:_faea +1];{};case 5:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewBool (_fecgg [1]._cbaa ._babde );};case 6:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewNumber (_fecgg [1]._cbaa ._babde );};case 7:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewString (_fecgg [1]._cbaa ._babde );};case 8:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewError (_fecgg [1]._cbaa ._babde );};case 9:_fecgg =_dafd [_faea -2:_faea +1];{_edfgg ._adbdf =_fecgg [2]._adbdf ;};case 10:_fecgg =_dafd [_faea -2:_faea +1];{_edfgg ._adbdf =NewNegate (_fecgg [2]._adbdf );};case 15:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =_fecgg [2]._adbdf ;};case 17:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewConstArrayExpr (_fecgg [2]._edgfg );};case 18:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._edgfg =append (_edfgg ._edgfg ,_fecgg [1]._dcfed );};case 19:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._edgfg =append (_fecgg [1]._edgfg ,_fecgg [3]._dcfed );};case 20:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._dcfed =append (_edfgg ._dcfed ,_fecgg [1]._adbdf );};case 21:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._dcfed =append (_fecgg [1]._dcfed ,_fecgg [3]._adbdf );};case 23:_fecgg =_dafd [_faea -2:_faea +1];{_edfgg ._adbdf =NewPrefixExpr (_fecgg [1]._adbdf ,_fecgg [2]._adbdf );};case 25:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewSheetPrefixExpr (_fecgg [1]._cbaa ._babde );};case 26:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewCellRef (_fecgg [1]._cbaa ._babde );};case 27:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewRange (_fecgg [1]._adbdf ,_fecgg [3]._adbdf );};case 28:_fecgg =_dafd [_faea -4:_faea +1];{_edfgg ._adbdf =NewPrefixRangeExpr (_fecgg [1]._adbdf ,_fecgg [2]._adbdf ,_fecgg [4]._adbdf );};case 29:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewNamedRangeRef (_fecgg [1]._cbaa ._babde );};case 30:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewHorizontalRange (_fecgg [1]._cbaa ._babde );};case 31:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._adbdf =NewVerticalRange (_fecgg [1]._cbaa ._babde );};case 32:_fecgg =_dafd [_faea -2:_faea +1];{_edfgg ._adbdf =NewPrefixHorizontalRange (_fecgg [1]._adbdf ,_fecgg [2]._cbaa ._babde );};case 33:_fecgg =_dafd [_faea -2:_faea +1];{_edfgg ._adbdf =NewPrefixVerticalRange (_fecgg [1]._adbdf ,_fecgg [2]._cbaa ._babde );};case 34:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypePlus ,_fecgg [3]._adbdf );};case 35:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeMinus ,_fecgg [3]._adbdf );};case 36:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeMult ,_fecgg [3]._adbdf );};case 37:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeDiv ,_fecgg [3]._adbdf );};case 38:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeExp ,_fecgg [3]._adbdf );};case 39:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeLT ,_fecgg [3]._adbdf );};case 40:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeGT ,_fecgg [3]._adbdf );};case 41:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeLEQ ,_fecgg [3]._adbdf );};case 42:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeGEQ ,_fecgg [3]._adbdf );};case 43:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeEQ ,_fecgg [3]._adbdf );};case 44:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeNE ,_fecgg [3]._adbdf );};case 45:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewBinaryExpr (_fecgg [1]._adbdf ,BinOpTypeConcat ,_fecgg [3]._adbdf );};case 47:_fecgg =_dafd [_faea -2:_faea +1];{_edfgg ._adbdf =NewFunction (_fecgg [1]._cbaa ._babde ,nil );};case 48:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._adbdf =NewFunction (_fecgg [1]._cbaa ._babde ,_fecgg [2]._dcfed );};case 49:_fecgg =_dafd [_faea -1:_faea +1];{_edfgg ._dcfed =append (_edfgg ._dcfed ,_fecgg [1]._adbdf );};case 50:_fecgg =_dafd [_faea -3:_faea +1];{_edfgg ._dcfed =append (_fecgg [1]._dcfed ,_fecgg [3]._adbdf );};case 53:_fecgg =_dafd [_faea -0:_faea +1];{_edfgg ._adbdf =NewEmptyExpr ();};};goto _aage ;};func _badgb (_feed []Result ,_edec string )(*amorArgs ,Result ){_aefb :=len (_feed );if _aefb !=6&&_aefb !=7{return nil ,MakeErrorResult (_edec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _feed [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edec +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_eeeg :=_feed [0].ValueNumber ;if _eeeg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_edec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_cdd ,_bfaf :=_ecb (_feed [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_edec );if _bfaf .Type ==ResultTypeError {return nil ,_bfaf ;};_eggg ,_bfaf :=_ecb (_feed [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_edec );if _bfaf .Type ==ResultTypeError {return nil ,_bfaf ;};if _eggg < _cdd {return nil ,MakeErrorResultType (ErrorTypeNum ,_edec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _feed [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbe :=_feed [3].ValueNumber ;if _dbe < 0||_dbe > _eeeg {return nil ,MakeErrorResultType (ErrorTypeNum ,_edec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _feed [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgfd :=int (_feed [4].ValueNumber );if _dgfd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_edec +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _feed [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bdeag :=_feed [5].ValueNumber ;if _bdeag < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_edec +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_gddb :=0;if _aefb ==7&&_feed [6].Type !=ResultTypeEmpty {if _feed [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_edec +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gddb =int (_feed [6].ValueNumber );if !_aeb (_gddb )||_gddb ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_edec );};};return &amorArgs {_eeeg ,_cdd ,_eggg ,_dbe ,_dgfd ,_bdeag ,_gddb },_edgf ;};const _dbgc ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_aaafc :=len (args );if _aaafc !=5&&_aaafc !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dddca ,_dcccd ,_cbec :=_cedg (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _cbec .Type ==ResultTypeError {return _cbec ;};_adfd ,_cbec :=_ecb (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _cbec .Type ==ResultTypeError {return _cbec ;};if _adfd >=_dddca {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dcfb :=args [3].ValueNumber ;if _dcfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aacc :=args [4].ValueNumber ;if _aacc <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_cgag :=0;if _aaafc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgag =int (args [5].ValueNumber );if !_aeb (_cgag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_ebgbb ,_cbec :=_ebed (_adfd ,_dcccd ,_cgag );if _cbec .Type ==ResultTypeError {return _cbec ;};_acad ,_cbec :=_ebed (_adfd ,_dddca ,_cgag );if _cbec .Type ==ResultTypeError {return _cbec ;};_bcba ,_cbec :=_ebed (_dddca ,_dcccd ,_cgag );if _cbec .Type ==ResultTypeError {return _cbec ;};_cfed :=1+_ebgbb *_dcfb ;_cfed /=_aacc /100+_acad *_dcfb ;_cfed --;_cfed /=_bcba ;return MakeNumberResult (_cfed );};func _gba (_ffd ,_bde ,_dfg int )bool {if _bde < 1||_bde > 12{return false ;};if _dfg < 1{return false ;};return _dfg <=_cfa (_ffd ,_bde );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_cfdab :=len (args );if _cfdab !=2&&_cfdab !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ggbe ,_gaee :=_babd (args [0],args [1],"\u0058\u0049\u0052\u0052");if _gaee .Type ==ResultTypeError {return _gaee ;};_babf :=_ggbe ._beff ;_cgeb :=_ggbe ._aeag ;_ebabd :=0.1;if _cfdab ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebabd =args [2].ValueNumber ;if _ebabd <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _cega (_babf ,_cgeb ,_ebabd );};const _adgf =57352;const _efg ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_aaa +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";const _dgdd =57378;func _caba (_gff ,_bgdd ,_acfe int )int {if _gff > _bgdd {return 0;};if _bge (_acfe ){return (_bgdd -_gff +1)*360;};_dffd :=0;for _gbae :=_gff ;_gbae <=_bgdd ;_gbae ++{_fddd :=365;if _ffdc (_gbae ){_fddd =366;};_dffd +=_fddd ;};return _dffd ;};

// Reference returns an invalid reference for Bool.
func (_gf Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const (_bagg rmode =iota ;_ggdc ;_dafcf ;);

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_eg .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dgac :=[]float64 {};for _ ,_gacg :=range args {switch _gacg .Type {case ResultTypeString :_dagfce :=_gacg .AsNumber ();if _dagfce .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dgac =append (_dgac ,_dagfce .ValueNumber );case ResultTypeList :_caced :=LCM (_gacg .ValueList );if _caced .Type !=ResultTypeNumber {return _caced ;};_dgac =append (_dgac ,_caced .ValueNumber );case ResultTypeNumber :_dgac =append (_dgac ,_gacg .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _gacg ;};};if len (_dgac )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _dgac [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dgac )==1{return MakeNumberResult (_dgac [0]);};_aaaab :=_dgac [0];for _ggab :=1;_ggab < len (_dgac );_ggab ++{if _dgac [_ggab ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aaaab =_gcaf (_aaaab ,_dgac [_ggab ]);};return MakeNumberResult (_aaaab );};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ffae :=args [0];_adbb :=args [1];if _adbb .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dacgb :=args [2].AsNumber ();if _dacgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaga :=false ;if len (args )==4{_baab :=args [3].AsNumber ();if _baab .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _baab .ValueNumber ==0{_gaga =true ;};};_aggd :=-1;_gebc :=false ;if len (_adbb .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_gbca :=_adbb .ValueArray [0];_cbca :for _cdgg ,_gcgg :=range _gbca {switch _efbd (_gcgg ,_ffae ,false ,_gaga ){case _acbfff :_aggd =_cdgg ;case _aefc :_aggd =_cdgg ;_gebc =true ;break _cbca ;};};if _aggd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cabdg :=int (_dacgb .ValueNumber )-1;if _cabdg < 0||_cabdg > len (_adbb .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_gbca =_adbb .ValueArray [_cabdg ];if _aggd < 0||_aggd >=len (_gbca ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gebc ||!_gaga {return _gbca [_aggd ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _ffdc (_cda int )bool {if _cda ==_cda /400*400{return true ;};if _cda ==_cda /100*100{return false ;};return _cda ==_cda /4*4;};