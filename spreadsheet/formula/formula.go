//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_aafb "bytes";_e "fmt";_efcf "github.com/unidoc/unioffice";_bgadc "github.com/unidoc/unioffice/internal/mergesort";_eg "github.com/unidoc/unioffice/internal/wildcard";_dagc "github.com/unidoc/unioffice/spreadsheet/format";_deeb "github.com/unidoc/unioffice/spreadsheet/reference";_efad "github.com/unidoc/unioffice/spreadsheet/update";_ebde "io";_aeccg "math";_beefb "math/big";_ggg "math/rand";_fdcf "regexp";_bbfcb "sort";_df "strconv";_aea "strings";_abce "sync";_ecb "time";_adcf "unicode";);

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bbfgf :=args [1].ValueNumber ;_gfca :=args [0];var _ebdg float64 ;switch _gfca .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_ebdg =_gfca .ValueNumber ;case ResultTypeString :_cdff :=DateValue ([]Result {args [0]});if _cdff .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ebdg =_cdff .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bfagd :=_fbccg (_ebdg );_ecgg :=_bfagd .AddDate (0,int (_bbfgf ),0);_fadc ,_abec ,_adbe :=_ecgg .Date ();_bbdf :=_dcef (_fadc ,int (_abec ),_adbe );if _bbdf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_bbdf );};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};type parsedSearchObject struct{_efcd string ;_eced string ;_afgfa int ;};func _cddc (_ccgfd ,_egce ,_cdgf int )bool {if _egce < 1||_egce > 12{return false ;};if _cdgf < 1{return false ;};return _cdgf <=_gg (_ccgfd ,_egce );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_aded *defEval )LastEvalIsRef ()bool {return _aded ._eddaa };

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_cgfe ,_daaad :=_gacg (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _daaad .Type ==ResultTypeError {return _daaad ;};_bgbed :=_fbccg (_cgfe ._ddefg );_cbg :=_fbccg (_cgfe ._faae );_fced :=_cgfe ._dccdc ;_bfdag :=_cgfe ._cfcgb ;_dbfgb :=_gabd (_bgbed ,_cbg ,_fced ,_bfdag );_ebaa ,_egdc ,_gcaa :=_dbfgb .Date ();return MakeNumberResult (_dcef (_ebaa ,int (_egdc ),_gcaa ));};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffdcc :=args [0];if _ffdcc .Type ==ResultTypeNumber {return _ffdcc ;};if _ffdcc .Type ==ResultTypeString {_dbfcb ,_dfaf :=_df .ParseFloat (_ffdcc .Value (),64);if _dfaf ==nil {return MakeNumberResult (_dbfcb );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbag :=args [0].Type ;for _ ,_ecbb :=range args {if _ecbb .Type !=_gfbag {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _gfbag {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_dbfdf :=len (args [0].ListValues ());_ged :=make ([]float64 ,_dbfdf );for _dcdcc :=range _ged {_ged [_dcdcc ]=1.0;};for _ ,_ff :=range args {if len (_ff .ListValues ())!=_dbfdf {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _facg ,_bbfe :=range _ff .ListValues (){_bbfe =_bbfe .AsNumber ();if _bbfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_ged [_facg ]=_ged [_facg ]*_bbfe .ValueNumber ;};};_fcg :=0.0;for _ ,_baef :=range _ged {_fcg +=_baef ;};return MakeNumberResult (_fcg );};return MakeNumberResult (1.0);};const (_eaefe countMode =iota ;_edfd ;_agab ;);

// String returns an empty string for EmptyExpr.
func (_bbea EmptyExpr )String ()string {return ""};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {lhs ,rhs ,op };};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gcbee :=[]float64 {};for _ ,_ffebb :=range args {switch _ffebb .Type {case ResultTypeString :_ceac :=_ffebb .AsNumber ();if _ceac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gcbee =append (_gcbee ,_ceac .ValueNumber );case ResultTypeList ,ResultTypeArray :_cdcaa :=GCD (_ffebb .ListValues ());if _cdcaa .Type !=ResultTypeNumber {return _cdcaa ;};_gcbee =append (_gcbee ,_cdcaa .ValueNumber );case ResultTypeNumber :_gcbee =append (_gcbee ,_ffebb .ValueNumber );case ResultTypeError :return _ffebb ;default:return MakeErrorResult (_e .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffebb .Type ));};};if _gcbee [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_gcbee )==1{return MakeNumberResult (_gcbee [0]);};_deadc :=_gcbee [0];for _efb :=1;_efb < len (_gcbee );_efb ++{if _gcbee [_efb ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_deadc =_cfba (_deadc ,_gcbee [_efb ]);};return MakeNumberResult (_deadc );};func _acgd (_gefd Result ,_agdde ,_bbafa string )(float64 ,Result ){switch _gefd .Type {case ResultTypeEmpty :return 0,_eggc ;case ResultTypeNumber :return _gefd .ValueNumber ,_eggc ;case ResultTypeString :_babd ,_baagf :=_df .ParseFloat (_gefd .ValueString ,64);if _baagf !=nil {return 0,MakeErrorResult (_bbafa +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_agdde );};return _babd ,_eggc ;default:return 0,MakeErrorResult (_agdde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bbafa +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};type criteriaRegex struct{_cebf byte ;_dcfeb string ;};func _fecb (_bcaaa []Result ,_dfcfe string )(float64 ,float64 ,Result ){if len (_bcaaa )!=2{return 0,0,MakeErrorResult (_dfcfe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bcaaa [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_dfcfe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_agde :=_bcaaa [0].ValueNumber ;if _bcaaa [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_dfcfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afgf :=float64 (int (_bcaaa [1].ValueNumber ));if _afgf < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_dfcfe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _agde ,_afgf ,_eggc ;};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_fafc :=args [1].ValueNumber ;_bfd :=args [0];var _gaa float64 ;switch _bfd .Type {case ResultTypeEmpty :_gaa =0;case ResultTypeNumber :_gaa =_bfd .ValueNumber ;case ResultTypeString :_ebag :=DateValue ([]Result {args [0]});if _ebag .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gaa =_ebag .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_acbe :=_fbccg (_gaa );_gffg :=_acbe .AddDate (0,int (_fafc +1),0);_fdfa ,_bcaae ,_ :=_gffg .Date ();_geb :=_dcef (_fdfa ,int (_bcaae ),0);if _geb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _fdfa ==1900&&_bcaae ==3{_geb --;};return MakeNumberResult (_geb );};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_affbd :=args [0].AsNumber ();if _affbd .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffa :=float64 (1);if _affbd .ValueNumber < 0{_ffa =-1;};if len (args )> 1{_bafd :=args [1].AsNumber ();if _bafd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_ffa =_bafd .ValueNumber ;};_gdead :=float64 (1);if len (args )> 2{_dddc :=args [2].AsNumber ();if _dddc .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdead =_dddc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_aeccg .Floor (_affbd .ValueNumber ));};_ccba :=_affbd .ValueNumber ;_ccba ,_gcee :=_aeccg .Modf (_ccba /_ffa );if _gcee !=0&&_affbd .ValueNumber < 0&&_gdead > 0{_ccba ++;};return MakeNumberResult (_ccba *_ffa );};

// Reference returns an invalid reference for ConstArrayExpr.
func (_afcc ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _edfg =57352;func _ddfa (_cdef string )(int ,int ,float64 ,bool ,bool ,Result ){_adge :="";_dead :=[]string {};for _afdc ,_ffdf :=range _bbfg {_dead =_ffdf .FindStringSubmatch (_cdef );if len (_dead )> 1{_adge =_afdc ;break ;};};if _adge ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};_egea :=_dead [1]=="";_dead =_dead [49:];_egcd :=len (_dead );_bfef :=_dead [_egcd -1];_adbb :=_bfef =="\u0061\u006d";_ebea :=_bfef =="\u0070\u006d";var _eeg ,_ebdb int ;var _cfgf float64 ;var _bcfe error ;switch _adge {case "\u0068\u0068":_eeg ,_bcfe =_df .Atoi (_dead [0]);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};_ebdb =0;_cfgf =0;case "\u0068\u0068\u003am\u006d":_eeg ,_bcfe =_df .Atoi (_dead [0]);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};_ebdb ,_bcfe =_df .Atoi (_dead [2]);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};_cfgf =0;case "\u006d\u006d\u003as\u0073":_eeg =0;_ebdb ,_bcfe =_df .Atoi (_dead [0]);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};_cfgf ,_bcfe =_df .ParseFloat (_dead [2],64);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_eeg ,_bcfe =_df .Atoi (_dead [0]);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};_ebdb ,_bcfe =_df .Atoi (_dead [2]);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};_cfgf ,_bcfe =_df .ParseFloat (_dead [4],64);if _bcfe !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};};if _ebdb >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};if _adbb ||_ebea {if _eeg > 12||_cfgf >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );}else if _eeg ==12{_eeg =0;};}else if _eeg >=24||_cfgf >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_gbee );};return _eeg ,_ebdb ,_cfgf ,_ebea ,_egea ,_eggc ;};const (_fcgf cmpResult =0;_bfdb cmpResult =-1;_dadbb cmpResult =1;_gdba cmpResult =2;);

// ErrorType is a formula evaluation error type.
type ErrorType byte ;func _adef (_geec string ,_becb _ecb .Time )(_ecb .Time ,error ){_bbag ,_ ,_cdffc :=_beefb .ParseFloat (_geec ,10,128,_beefb .ToNearestEven );if _cdffc !=nil {return _ecb .Time {},_cdffc ;};_cbdga :=new (_beefb .Float );_cbdga .SetUint64 (uint64 (24*_ecb .Hour ));_bbag .Mul (_bbag ,_cbdga );_eafe ,_ :=_bbag .Uint64 ();_ceeba :=_becb .Add (_ecb .Duration (_eafe ));return _ggeb (_ceeba ),nil ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gcag :=args [0];switch _gcag .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_eeafb :=0.0;_ecad :=0.0;for _ ,_ddee :=range _gcag .ValueString {_aeeb :=0.0;switch _ddee {case 'I':_aeeb =1;case 'V':_aeeb =5;case 'X':_aeeb =10;case 'L':_aeeb =50;case 'C':_aeeb =100;case 'D':_aeeb =500;case 'M':_aeeb =1000;};_eeafb +=_aeeb ;switch {case _ecad ==_aeeb &&(_ecad ==5||_ecad ==50||_ecad ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_ecad ==_aeeb :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _ecad < _aeeb {_eeafb -=2*_ecad ;};_ecad =_aeeb ;};return MakeNumberResult (_eeafb );case ResultTypeError :return _gcag ;default:return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gcag .Type ));};};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_ecab ,_fgfd Expression };

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_ddafc :=len (args );if _ddafc < 4||_ddafc > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ebf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bagcc :=args [1].ValueNumber ;if _bagcc <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaba :=args [2].ValueNumber ;if _gaba < _bagcc {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bffd :=args [3].ValueNumber ;_bgdd :=0.0;if _ddafc >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgdd =args [4].ValueNumber ;};_gccd :=0;if _ddafc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gccd =int (args [5].ValueNumber );if _gccd !=0{_gccd =1;};};return MakeNumberResult (_baafc (_ebf ,_gaba ,_bffd ,_bgdd ,_gccd )-_efcad (_ebf ,_bagcc ,_gaba ,_bffd ,_bgdd ,_gccd ));};func _cdgc (_ggcg Result ,_egae *criteriaParsed )bool {_bbdff :=_aea .ToLower (_ggcg .ValueString );_fggcb :=_egae ._bedb ._cebf ;_afga :=_egae ._bedb ._dcfeb ;if _fggcb ==_bdgf {return _bbdff ==_afga ||_eg .Match (_afga ,_bbdff );};if _ggcg .Type !=ResultTypeEmpty {if _bbdff ==_egae ._degfa ||_eg .Match (_egae ._degfa ,_bbdff ){return true ;};if _ ,_fcedd :=_df .ParseFloat (_afga ,64);_fcedd ==nil {return false ;};switch _fggcb {case _cedc :return _bbdff <=_afga ;case _bbcf :return _bbdff >=_afga ;case _deada :return _bbdff < _afga ;case _ddea :return _bbdff > _afga ;};};return false ;};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {data }};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _agaec (_a ,_bee [][]Result )bool {if len (_a )!=len (_bee ){return false ;};for _gcdba :=range _a {if len (_a [_gcdba ])!=len (_bee [_gcdba ]){return false ;};};return true ;};const _begf =16;

// Eval evaluates and returns the result of a function call.
func (_gafgc FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_cfeba :=LookupFunction (_gafgc ._afgb );if _cfeba !=nil {_cfgd :=make ([]Result ,len (_gafgc ._cbab ));for _aaefe ,_dd :=range _gafgc ._cbab {_cfgd [_aaefe ]=_dd .Eval (ctx ,ev );_cfgd [_aaefe ].Ref =_dd .Reference (ctx ,ev );};return _cfeba (_cfgd );};_gcga :=LookupFunctionComplex (_gafgc ._afgb );if _gcga !=nil {_efaf :=make ([]Result ,len (_gafgc ._cbab ));for _eaegf ,_agf :=range _gafgc ._cbab {_efaf [_eaegf ]=_agf .Eval (ctx ,ev );_efaf [_eaegf ].Ref =_agf .Reference (ctx ,ev );};return _gcga (ctx ,ev ,_efaf );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_gafgc ._afgb );};func _adbfb (_ecec string )string {_ecec =_aea .Replace (_ecec ,"\u000a","\u005c\u006e",-1);_ecec =_aea .Replace (_ecec ,"\u000d","\u005c\u0072",-1);_ecec =_aea .Replace (_ecec ,"\u0009","\u005c\u0074",-1);return _ecec ;};func _efcad (_bc ,_aadb ,_gde ,_bfgf ,_facc float64 ,_gcaf int )float64 {_cee :=_baafc (_bc ,_gde ,_bfgf ,_facc ,_gcaf );var _dfabg float64 ;if _aadb ==1{if _gcaf ==1{_dfabg =0;}else {_dfabg =-_bfgf ;};}else {if _gcaf ==1{_dfabg =_bfeg (_bc ,_aadb -2,_cee ,_bfgf ,1)-_cee ;}else {_dfabg =_bfeg (_bc ,_aadb -1,_cee ,_bfgf ,0);};};return _dfabg *_bc ;};func _gfae (){_ecade =_fdcf .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_ccfec =_fdcf .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_gcbfg =_fdcf .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_abba =_fdcf .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_bgfa =_fdcf .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_cfb =_fdcf .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};const _ge ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_aeaa ,_egbea :=_cfac (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _egbea .Type ==ResultTypeError {return _egbea ;};_dfg :=_aeaa ._gebfg ;_afgfb :=_aeaa ._caefg ;_bcacf :=_aeaa ._fffb ;_aeeeg :=_aeaa ._faabg ;_bgde :=_aeaa ._fgbe ;_deec :=_aeaa ._ffbe ;return _adfd (_dfg ,_afgfb ,_bcacf ,_aeeeg ,_bgde ,_deec );};func Parse (r _ebde .Reader )Expression {_gebbe :=&plex {LexReader (r ),nil };_gaeeg (_gebbe );return _gebbe ._agga ;};type node struct{_ffdg tokenType ;_dggb string ;};

// Update updates references in the Negate after removing a row/column.
func (_gfge Negate )Update (q *_efad .UpdateQuery )Expression {return Negate {_gfge ._gaea .Update (q )}};

// String returns a string representation of ConstArrayExpr.
func (_ffab ConstArrayExpr )String ()string {return ""};func _cfgdfd (_ececg Result ,_cddb *criteriaParsed )bool {if _ececg .Type ==ResultTypeEmpty {return false ;};if _cddb ._gaceg {return _ececg .ValueNumber ==_cddb ._acfc ;}else {_abbf :=_aea .ToLower (_ececg .ValueString );return _cddb ._degfa ==_abbf ||_eg .Match (_cddb ._degfa ,_abbf );};};const _gbdd ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_aaegd +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_bdfag :=len (args );if _bdfag < 2||_bdfag > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abff :=args [0];if _abff .Type !=ResultTypeArray &&_abff .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_babde :=args [1].AsNumber ();if _babde .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bagdc :=int (_babde .ValueNumber )-1;_ebgg :=-1;if _bdfag ==3&&args [2].Type !=ResultTypeEmpty {_gacd :=args [2].AsNumber ();if _gacd .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ebgg =int (_gacd .ValueNumber )-1;};if _bagdc ==-1&&_ebgg ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _bcef []Result ;if _abff .Type ==ResultTypeArray {_eefd :=_abff .ValueArray ;if _bagdc < -1||_bagdc >=len (_eefd ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bagdc ==-1{if _ebgg >=len (_eefd [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_beggf :=[][]Result {};for _ ,_dfbc :=range _eefd {_eeaf :=_dfbc [_ebgg ];if _eeaf .Type ==ResultTypeEmpty {_eeaf =MakeNumberResult (0);};_beggf =append (_beggf ,[]Result {_eeaf });};return MakeArrayResult (_beggf );};_bcef =_eefd [_bagdc ];}else {_aabe :=_abff .ValueList ;if _bagdc < -1||_bagdc >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _bagdc ==-1{if _ebgg >=len (_aabe ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_acfaf :=_aabe [_ebgg ];if _acfaf .Type ==ResultTypeEmpty {_acfaf =MakeNumberResult (0);};return _acfaf ;};_bcef =_aabe ;};if _ebgg < -1||_ebgg > len (_bcef ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ebgg ==-1{_fdbaf :=[]Result {};for _ ,_cegf :=range _bcef {if _cegf .Type ==ResultTypeEmpty {_fdbaf =append (_fdbaf ,MakeNumberResult (0));}else {_fdbaf =append (_fdbaf ,_cegf );};};return MakeArrayResult ([][]Result {_fdbaf });};_ggeag :=_bcef [_ebgg ];if _ggeag .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _ggeag ;};func _bdee (_aca ,_edgd Result ,_efdgc string )(*xargs ,Result ){if _aca .Type !=ResultTypeList &&_aca .Type !=ResultTypeArray {return nil ,MakeErrorResult (_efdgc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_cbgba :=_ddd (_aca );_fbee :=[]float64 {};for _ ,_ccegd :=range _cbgba {for _ ,_egdfd :=range _ccegd {if _egdfd .Type ==ResultTypeNumber &&!_egdfd .IsBoolean {_fbee =append (_fbee ,_egdfd .ValueNumber );}else {return nil ,MakeErrorResult (_efdgc +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_dbab :=len (_fbee );if len (_fbee )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _edgd .Type !=ResultTypeList &&_edgd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_efdgc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_cadd :=_ddd (_edgd );_fff :=[]float64 {};_fdaf :=0.0;for _ ,_cbc :=range _cadd {for _ ,_caad :=range _cbc {if _caad .Type ==ResultTypeNumber &&!_caad .IsBoolean {_dfca :=float64 (int (_caad .ValueNumber ));if _dfca < _fdaf {return nil ,MakeErrorResultType (ErrorTypeNum ,_efdgc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_fff =append (_fff ,_dfca );_fdaf =_dfca ;}else {return nil ,MakeErrorResult (_efdgc +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_fff )!=_dbab {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_fbee ,_fff },MakeEmptyResult ();};func _faaf (_cecc int )string {if _cecc >=1&&_cecc -1< len (_dgdb ){if _dgdb [_cecc -1]!=""{return _dgdb [_cecc -1];};};return _e .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_cecc );};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egf :=args [0].AsNumber ();_dcccc :=args [1].AsNumber ();if _egf .Type !=ResultTypeNumber ||_dcccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bbgc :=_aeccg .Trunc (_egf .ValueNumber );_fgbg :=_aeccg .Trunc (_dcccc .ValueNumber );if _bbgc < _fgbg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _bbgc ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_bbgc +_fgbg -1);args [1]=MakeNumberResult (_bbgc -1);return Combin (args );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aefbg :=ctx .GetEpoch ();_bbbc ,_bdg :=_adef (args [0].Value (),_aefbg );if _bdg !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_bbbc .Year ()));};func _eaad (_gbcd ,_cdcf ,_cdfg ,_cccdd int )int {if !_gfga (_cccdd ){return _cdfg ;};_ccgdg :=_cdfg ;_adff :=_gg (_gbcd ,_cdcf );if _ccgdg > 30||_cdfg >=_adff ||_ccgdg >=_adff {_ccgdg =30;};return _ccgdg ;};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfeb :=args [0];_fceeg :=args [1];if _fceeg .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cfa :=args [2].AsNumber ();if _cfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afgfbb :=false ;if len (args )==4{_fadg :=args [3].AsNumber ();if _fadg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _fadg .ValueNumber ==0{_afgfbb =true ;};};_fage :=-1;_afaca :=false ;if len (_fceeg .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_ccef :=_fceeg .ValueArray [0];_acef :for _dfb ,_bcfa :=range _ccef {switch _efgf (_bcfa ,_cfeb ,false ,_afgfbb ){case _bfdb :_fage =_dfb ;case _fcgf :_fage =_dfb ;_afaca =true ;break _acef ;};};if _fage ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_afdag :=int (_cfa .ValueNumber )-1;if _afdag < 0||_afdag > len (_fceeg .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_ccef =_fceeg .ValueArray [_afdag ];if _fage < 0||_fage >=len (_ccef ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _afaca ||!_afgfbb {return _ccef [_fage ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _gabd (_caba ,_dcdc _ecb .Time ,_bffge ,_cbba int )_ecb .Time {_faffc :=_dcdc ;_bge :=_caba .Year ()-_dcdc .Year ();_faffc =_faffc .AddDate (_bge ,0,0);if _caba .After (_faffc ){_faffc =_faffc .AddDate (1,0,0);};_egab :=-12/_bffge ;for _faffc .After (_caba ){_faffc =_faffc .AddDate (0,_egab ,0);};return _faffc ;};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_gefcb HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_aede :=_gefcb .horizontalRangeReference ();if _gbcce ,_accdg :=ev .GetFromCache (_aede );_accdg {return _gbcce ;};_babag ,_dcdg :=_fec (ctx ,_gefcb ._bcffd ,_gefcb ._gbad );_cecb :=_deb (ctx ,ev ,_babag ,_dcdg );ev .SetCache (_aede ,_cecb );return _cecb ;};func _acfa (_dcc ,_gfbb ,_bgbe float64 )float64 {return (_dcc *3600+_gfbb *60+_bgbe )/86400};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_badb :=0;_egdg :=false ;for _ ,_bbdfd :=range args {switch _bbdfd .Type {case ResultTypeList ,ResultTypeArray :_bcc :=Xor (_bbdfd .ListValues ());if _bcc .Type ==ResultTypeError {return _bcc ;};if _bcc .ValueNumber !=0{_badb ++;};_egdg =true ;case ResultTypeNumber :if _bbdfd .ValueNumber !=0{_badb ++;};_egdg =true ;case ResultTypeString :case ResultTypeError :return _bbdfd ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_egdg {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_badb %2!=0);};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_acde :=len (args );if _acde !=6&&_acde !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gaced ,_eggb ,_afge :=_dca (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _afge .Type ==ResultTypeError {return _afge ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aabfa :=args [2].ValueNumber ;if _aabfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bbfb :=args [3].ValueNumber ;if _bbfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdeb :=args [4].ValueNumber ;if _gdeb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbae :=args [5];if _bbae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gaaac :=_bbae .ValueNumber ;if !_aeagb (_gaaac ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ggcd :=0;if _acde ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggcd =int (args [6].ValueNumber );if !_ecgf (_ggcd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_gffa ,_afge :=_bdga (_gaced ,_eggb ,_aabfa ,_bbfb ,_gdeb ,_gaaac ,_ggcd );if _afge .Type ==ResultTypeError {return _afge ;};return MakeNumberResult (_gffa );};func _gfga (_ccea int )bool {return _ccea ==0||_ccea ==4};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_cgff ,_beff :=_efff ("\u0046\u0049\u004e\u0044",args );if _beff .Type !=ResultTypeEmpty {return _beff ;};_cgcgg :=_cgff ._efcd ;if _cgcgg ==""{return MakeNumberResult (1.0);};_bbab :=_cgff ._eced ;_ggcbg :=_cgff ._afgfa ;_cbecc :=1;for _cgef :=range _bbab {if _cbecc < _ggcbg {_cbecc ++;continue ;};_dcddb :=_aea .Index (_bbab [_cgef :],_cgcgg );if _dcddb ==0{return MakeNumberResult (float64 (_cbecc ));};_cbecc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbeec :=args [0].AsNumber ();if _dbeec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_aeccg .Pi *_dbeec .ValueNumber );};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_bggg ,_abbfd ,_caef :=_fecb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _caef .Type ==ResultTypeError {return _caef ;};if _bggg ==0{return MakeNumberResult (0);};_bega :=_bggg < 0;if _bega {_bggg =-_bggg ;};_bdd :=float64 (int (_bggg ));_aag :=args [0].Value ();_cbga :=_aea .Split (_aag ,"\u002e");_cedca :=_cbga [1];_eggf ,_afgd :=_df .ParseFloat (_cedca ,64);if _afgd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_dabfc :=float64 (len (_cedca ));_eggf /=_aeccg .Pow (10,_dabfc );_dbaf :=_eggf *_abbfd /_aeccg .Pow (10,float64 (int (_aeccg .Log10 (_abbfd )))+1)+_bdd ;if _bega {_dbaf =-_dbaf ;};return MakeNumberResult (_dbaf );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _agbg (args ,true )};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_edca NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_bcbdf :=ctx .NamedRange (_edca ._aee );_dbcda :=_bcbdf .Value ;if _cdcd ,_edbfef :=ev .GetFromCache (_dbcda );_edbfef {return _cdcd ;};_ffaee :=_aea .Split (_dbcda ,"\u0021");if len (_ffaee )!=2{return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_dbcda ));};_geeb :=ctx .Sheet (_ffaee [0]);_ccc :=_aea .Split (_ffaee [1],"\u003a");switch len (_ccc ){case 1:_cdffb :=ev .Eval (_geeb ,_ccc [0]);ev .SetCache (_dbcda ,_cdffb );return _cdffb ;case 2:_cace :=_deb (_geeb ,ev ,_ccc [0],_ccc [1]);ev .SetCache (_dbcda ,_cace );return _cace ;};return MakeErrorResult (_e .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_bcbdf .Type ));};func init (){_ggad ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Reference returns a string reference value to a range.
func (_gggb Range )Reference (ctx Context ,ev Evaluator )Reference {_bbbdc :=_gggb ._ecab .Reference (ctx ,ev );_bbbb :=_gggb ._fgfd .Reference (ctx ,ev );if _bbbdc .Type ==ReferenceTypeCell &&_bbbb .Type ==ReferenceTypeCell {return MakeRangeReference (_dcge (_bbbdc ,_bbbb ));};return ReferenceInvalid ;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func _cfba (_gbcc ,_ded float64 )float64 {_gbcc =_aeccg .Trunc (_gbcc );_ded =_aeccg .Trunc (_ded );if _gbcc ==0{return _ded ;};if _ded ==0{return _gbcc ;};for _gbcc !=_ded {if _gbcc > _ded {_gbcc =_gbcc -_ded ;}else {_ded =_ded -_gbcc ;};};return _gbcc ;};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebfcc :=args [0].AsString ();if _ebfcc .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_beeb :=args [1].AsNumber ();if _beeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acdea :=_ebfcc .ValueString ;if len (_acdea )> 2&&(_aea .HasPrefix (_acdea ,"\u0030\u0078")||_aea .HasPrefix (_acdea ,"\u0030\u0058")){_acdea =_acdea [2:];};_edgdf ,_fac :=_df .ParseInt (_acdea ,int (_beeb .ValueNumber ),64);if _fac !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_edgdf ));};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Eval evaluates and returns the result of a constant array expression.
func (_bddg ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_aceg :=[][]Result {};for _ ,_fcec :=range _bddg ._bbc {_beceg :=[]Result {};for _ ,_ede :=range _fcec {_beceg =append (_beceg ,_ede .Eval (ctx ,ev ));};_aceg =append (_aceg ,_beceg );};return MakeArrayResult (_aceg );};func (_cgba *defEval )checkLastEvalIsRef (_fcagd Context ,_cdea Expression ){switch _cdea .(type ){case FunctionCall :switch _cdea .(FunctionCall )._afgb {case "\u0049\u0053\u0052E\u0046":for _ ,_gegb :=range _cdea .(FunctionCall )._cbab {switch _gegb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_afbe :=_gegb .Eval (_fcagd ,_cgba );_cgba ._eddaa =!(_afbe .Type ==ResultTypeError &&_afbe .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_cgba ._eddaa =false ;};};};};};func _dcef (_gcbf ,_ccbae ,_gdeee int )float64 {return float64 (_bcge (_gcbf ,_ecb .Month (_ccbae ),_gdeee )/86400)+_bac ;};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_fagce :=len (args );if _fagce !=3&&_fagce !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cacd ,_dcgd :=_fefg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _dcgd .Type ==ResultTypeError {return _dcgd ;};_ecbf ,_dcgd :=_fefg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _dcgd .Type ==ResultTypeError {return _dcgd ;};_beef ,_dcgd :=_fefg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _dcgd .Type ==ResultTypeError {return _dcgd ;};_febgd :=0;if _fagce ==3{return MakeStringResult (_aea .Replace (_cacd ,_ecbf ,_beef ,-1));}else {_eefb ,_cccb :=_acgd (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _cccb .Type ==ResultTypeError {return _cccb ;};_febgd =int (_eefb );if _febgd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_dadd :=_cacd ;_cafg :=_febgd ;_efcb :=-1;_dcfg :=len (_ecbf );_debcdc :=0;for {_cafg --;_gede :=_aea .Index (_dadd ,_ecbf );if _gede ==-1{_efcb =-1;break ;}else {_efcb =_gede +_debcdc ;if _cafg ==0{break ;};_caae :=_dcfg +_gede ;_debcdc +=_caae ;_dadd =_dadd [_caae :];};};if _efcb ==-1{return MakeStringResult (_cacd );}else {_cagd :=_cacd [:_efcb ];_cgga :=_cacd [_efcb +_dcfg :];return MakeStringResult (_cagd +_beef +_cgga );};};};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afdad :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eggfc :=args [2].ValueNumber ;if _eggfc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_afdad -_acc )/_eggfc );};

// String returns a string representation of FunctionCall expression.
func (_cgge FunctionCall )String ()string {_fbag :=_aafb .Buffer {};_fbag .WriteString (_cgge ._afgb );_fbag .WriteString ("\u0028");_gefg :=len (_cgge ._cbab )-1;for _cbf ,_edcd :=range _cgge ._cbab {_fbag .WriteString (_edcd .String ());if _cbf !=_gefg {_fbag .WriteString ("\u002c");};};_fbag .WriteString ("\u0029");return _fbag .String ();};func _febee (_eee string ,_feea *_efad .UpdateQuery )string {_gagf ,_fgde :=_deeb .ParseCellReference (_eee );if _fgde !=nil {return "\u0023\u0052\u0045F\u0021";};if _feea .UpdateType ==_efad .UpdateActionRemoveColumn {_ebdc :=_feea .ColumnIdx ;_bgfc :=_gagf .ColumnIdx ;if _bgfc < _ebdc {return _eee ;}else if _bgfc ==_ebdc {return "\u0023\u0052\u0045F\u0021";}else {return _gagf .Update (_efad .UpdateActionRemoveColumn ).String ();};};return _eee ;};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _gfcfe (args ,false )};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgae :=args [0];if _fgae .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbddd :=len (_fgae .ValueArray );for _ ,_eabd :=range _fgae .ValueArray {if len (_eabd )!=_cbddd {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_gdgf (_fgae .ValueArray ));};func _dgfg (_bdeg Result ,_dcea int )[]Result {_dcedf :=[]Result {};switch _bdeg .Type {case ResultTypeList :_fea :=_bdeg .ValueList ;_ceag :=len (_fea );for _dge :=0;_dge < _dcea ;_dge ++{if _dge < _ceag {_dcedf =append (_dcedf ,_fea [_dge ]);}else {_dcedf =append (_dcedf ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _aecde :=0;_aecde < _dcea ;_aecde ++{_dcedf =append (_dcedf ,_bdeg );};};return _dcedf ;};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_cdba .Float64 ());};type xargs struct{_aff []float64 ;_fcbc []float64 ;};

// String returns a string representation of PrefixExpr.
func (_acfg PrefixExpr )String ()string {return _e .Sprintf ("\u0025\u0073\u0021%\u0073",_acfg ._ccaa .String (),_acfg ._bdcg .String ());};func _cef (_gdced int )bool {if _gdced ==_gdced /400*400{return true ;};if _gdced ==_gdced /100*100{return false ;};return _gdced ==_gdced /4*4;};

// GetLocked returns FALSE for the invalid reference context.
func (_edga *ivr )GetLocked (cellRef string )bool {return false };

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_eaef :=args [0].AsNumber ();if _eaef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ec :=float64 (1);if _eaef .ValueNumber < 0{_ec =-1;};if len (args )> 1{_fdda :=args [1].AsNumber ();if _fdda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ec =_fdda .ValueNumber ;};if _ec < 0&&_eaef .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_aeccg .Ceil (_eaef .ValueNumber ));};_cdb :=_eaef .ValueNumber ;_cdb ,_eba :=_aeccg .Modf (_cdb /_ec );if _eba > 0{_cdb ++;};return MakeNumberResult (_cdb *_ec );};func _cfdea (_cgbf BinOpType ,_eab ,_ddfad []Result )Result {_gfce :=[]Result {};for _adbf :=range _eab {_bagbc :=_eab [_adbf ].AsNumber ();_bbdg :=_ddfad [_adbf ].AsNumber ();if _bagbc .Type !=ResultTypeNumber ||_bbdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _cgbf {case BinOpTypePlus :_gfce =append (_gfce ,MakeNumberResult (_bagbc .ValueNumber +_bbdg .ValueNumber ));case BinOpTypeMinus :_gfce =append (_gfce ,MakeNumberResult (_bagbc .ValueNumber -_bbdg .ValueNumber ));case BinOpTypeMult :_gfce =append (_gfce ,MakeNumberResult (_bagbc .ValueNumber *_bbdg .ValueNumber ));case BinOpTypeDiv :if _bbdg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gfce =append (_gfce ,MakeNumberResult (_bagbc .ValueNumber /_bbdg .ValueNumber ));case BinOpTypeExp :_gfce =append (_gfce ,MakeNumberResult (_aeccg .Pow (_bagbc .ValueNumber ,_bbdg .ValueNumber )));case BinOpTypeLT :_gfce =append (_gfce ,MakeBoolResult (_bagbc .ValueNumber < _bbdg .ValueNumber ));case BinOpTypeGT :_gfce =append (_gfce ,MakeBoolResult (_bagbc .ValueNumber > _bbdg .ValueNumber ));case BinOpTypeEQ :_gfce =append (_gfce ,MakeBoolResult (_bagbc .ValueNumber ==_bbdg .ValueNumber ));case BinOpTypeLEQ :_gfce =append (_gfce ,MakeBoolResult (_bagbc .ValueNumber <=_bbdg .ValueNumber ));case BinOpTypeGEQ :_gfce =append (_gfce ,MakeBoolResult (_bagbc .ValueNumber >=_bbdg .ValueNumber ));case BinOpTypeNE :_gfce =append (_gfce ,MakeBoolResult (_bagbc .ValueNumber !=_bbdg .ValueNumber ));default:return MakeErrorResult (_e .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_cgbf ));};};return MakeListResult (_gfce );};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bbaf :=args [0].AsNumber ();if _bbaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faa :=_aeccg .Signbit (_bbaf .ValueNumber );_bgebb ,_ebfa :=_aeccg .Modf (_bbaf .ValueNumber /2);_gggg :=_bgebb *2;if _ebfa !=0{if !_faa {_gggg +=2;}else {_gggg -=2;};};return MakeNumberResult (_gggg );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_geff :=len (args );if _geff !=5&&_geff !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egbg ,_bbfbdb ,_dbag :=_dca (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _dbag .Type ==ResultTypeError {return _dbag ;};_aafbf ,_dbag :=_aabf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _dbag .Type ==ResultTypeError {return _dbag ;};if _aafbf >=_egbg {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_edcbd :=args [3].ValueNumber ;if _edcbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbbd :=args [4].ValueNumber ;if _gbbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fcdcd :=0;if _geff ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcdcd =int (args [5].ValueNumber );if !_ecgf (_fcdcd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_edag ,_dbag :=_acab (_egbg ,_bbfbdb ,_fcdcd );if _dbag .Type ==ResultTypeError {return _dbag ;};_cdcaf ,_dbag :=_acab (_aafbf ,_bbfbdb ,_fcdcd );if _dbag .Type ==ResultTypeError {return _dbag ;};_bceg ,_dbag :=_acab (_aafbf ,_egbg ,_fcdcd );if _dbag .Type ==ResultTypeError {return _dbag ;};_gefc :=1+_cdcaf *_edcbd ;_addb :=1+_edag *_gbbd ;return MakeNumberResult ((_gefc /_addb -_bceg *_edcbd )*100);};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_ecc ,_cgb ,_gcgg :=_ccgce (args );if _gcgg .Type ==ResultTypeError {return _gcgg ;};return MakeNumberResult (_dgeg (_ecc )/_cgb );};const _efgb =57372;

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func _fgad (_deda string ,_agdf []Result )(*parsedReplaceObject ,Result ){if len (_agdf )!=4{return nil ,MakeErrorResult (_deda +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _agdf [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_deda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_fcce :=_agdf [0].ValueString ;if _agdf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_deda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_daab :=int (_agdf [1].ValueNumber )-1;if _agdf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_deda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ac :=int (_agdf [2].ValueNumber );if _agdf [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_deda +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_edbdg :=_agdf [3].ValueString ;return &parsedReplaceObject {_fcce ,_daab ,_ac ,_edbdg },_eggc ;};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_befa :=args [0].ValueNumber ;_dfbf :=args [1].ValueNumber ;if _dfbf < _befa {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _dfbf ==_befa {return MakeNumberResult (0);};_bgb :=_aea .ToLower (args [2].ValueString );if _bgb =="\u0064"{return MakeNumberResult (_dfbf -_befa );};_cabc :=_fbccg (_befa );_fbgb :=_fbccg (_dfbf );_aeac ,_bcde ,_cbad :=_cabc .Date ();_cded ,_aebe ,_ececb :=_fbgb .Date ();_aabc :=int (_bcde );_ab :=int (_aebe );var _bgc float64 ;switch _bgb {case "\u0079":_bgc =float64 (_cded -_aeac );if _ab < _aabc ||(_ab ==_aabc &&_ececb < _cbad ){_bgc --;};case "\u006d":_fdcg :=_cded -_aeac ;_dag :=_ab -_aabc ;if _ececb < _cbad {_dag --;};if _dag < 0{_fdcg --;_dag +=12;};_bgc =float64 (_fdcg *12+_dag );case "\u006d\u0064":_faab :=_ab ;if _ececb < _cbad {_faab --;};_bgc =float64 (int (_dfbf -_dcef (_cded ,_faab ,_cbad )));case "\u0079\u006d":_bgc =float64 (_ab -_aabc );if _ececb < _cbad {_bgc --;};if _bgc < 0{_bgc +=12;};case "\u0079\u0064":_cfg :=_cded ;if _ab < _aabc ||(_ab ==_aabc &&_ececb < _cbad ){_cfg --;};_bgc =float64 (int (_dfbf -_dcef (_cfg ,_aabc ,_cbad )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_bgc );};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfcc :=args [0].AsString ();if _bfcc .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_aea .ToUpper (_bfcc .ValueString ));};const _cfc =57377;

// Reference returns an invalid reference for Number.
func (_gbbaa Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _afa =57356;

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_egdgf :=args [0];if _egdgf .Type ==ResultTypeError {return _egdgf ;};if _egdgf .Type !=ResultTypeString &&_egdgf .Type !=ResultTypeNumber &&_egdgf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_c :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dgfd :=int (args [1].ValueNumber );if _dgfd < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_cbgf :=int (args [2].ValueNumber );if _cbgf < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_bead :=len (_c );if _dgfd > _bead {return MakeStringResult ("");};_dgfd --;_bged :=_dgfd +_cbgf ;if _bged > _bead +1{return MakeStringResult (_c [_dgfd :]);}else {return MakeStringResult (_c [_dgfd :_bged ]);};};var _dafa =[...]int {-1,1,1,-1,-2,0};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_faegf ,_dacbg :=_cfag (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _dacbg .Type ==ResultTypeError {return _dacbg ;};_adecd :=_faegf ._fdba ;_ffgc :=_faegf ._dedf ;_dbb :=_faegf ._cbcdd ;_cfgff :=_faegf ._adgea ;_efgbb :=_faegf ._fead ;_afec :=_faegf ._ccce ;_bdega :=_baafc (_adecd ,_ffgc ,_dbb ,0,_afec );_ebgf :=0.0;if _cfgff ==1{if _afec ==0{_ebgf =_bdega +_dbb *_adecd ;}else {_ebgf =_bdega ;};_cfgff ++;};for _afdb :=_cfgff ;_afdb <=_efgbb ;_afdb ++{if _afec ==1{_ebgf +=_bdega -(_bfeg (_adecd ,_afdb -2,_bdega ,_dbb ,1)-_bdega )*_adecd ;}else {_ebgf +=_bdega -_bfeg (_adecd ,_afdb -1,_bdega ,_dbb ,0)*_adecd ;};};return MakeNumberResult (_ebgf );};var _ebg =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_gddf Result )ListValues ()[]Result {if _gddf .Type ==ResultTypeArray {_ace :=[]Result {};for _ ,_bfga :=range _gddf .ValueArray {for _ ,_faacg :=range _bfga {_ace =append (_ace ,_faacg );};};return _ace ;};if _gddf .Type ==ResultTypeList {return _gddf .ValueList ;};return nil ;};

// Reference returns an invalid reference for Negate.
func (_bcb Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func LexReader (r _ebde .Reader )chan*node {_gd :=NewLexer ();go _gd .lex (r );return _gd ._edbd };type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// CellRef is a reference to a single cell
type CellRef struct{_agge string };const _ebfe =57346;

// Reference returns an invalid reference for Error.
func (_efgbe Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_bfefb :=len (args );if _bfefb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bfefb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_de :=args [0];_fggbe :=args [1];if _fggbe .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bfcf :=args [2].AsNumber ();if _bfcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efae :=false ;if _bfefb ==4&&args [3].Type !=ResultTypeEmpty {_aed :=args [3].AsNumber ();if _aed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _aed .ValueNumber ==0{_efae =true ;};};_egec :=int (_bfcf .ValueNumber )-1;_gdd :=-1;_beag :=false ;_egfa :for _aac ,_gbe :=range _fggbe .ValueArray {if len (_gbe )==0{continue ;};_efee :=_gbe [0];switch _efgf (_efee ,_de ,false ,_efae ){case _bfdb :_gdd =_aac ;case _fcgf :_gdd =_aac ;_beag =true ;break _egfa ;};};if _gdd ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gbaf :=_fggbe .ValueArray [_gdd ];if _egec < 0||_egec >=len (_gbaf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _beag ||!_efae {return _gbaf [_egec ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};const _dddgg =57375;

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_bfefd :=len (args );if _bfefd < 3||_bfefd > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggdc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccfc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gcgc :=args [2].ValueNumber ;_eedb :=0.0;if _bfefd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eedb =args [3].ValueNumber ;};_baaa :=0.0;if _bfefd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_baaa =args [4].ValueNumber ;if _baaa !=0{_baaa =1;};};_dgba :=_ccfc *(1+_ggdc *_baaa )-_eedb *_ggdc ;_egb :=(_gcgc *_ggdc +_ccfc *(1+_ggdc *_baaa ));return MakeNumberResult (_aeccg .Log (_dgba /_egb )/_aeccg .Log (1+_ggdc ));};

// FunctionCall is a function call expression.
type FunctionCall struct{_afgb string ;_cbab []Expression ;};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_dcg :=[]string {};for _ccdf :=range _dfgc {_dcg =append (_dcg ,_ccdf );};for _bggb :=range _cadb {_dcg =append (_dcg ,_bggb );};_bbfcb .Strings (_dcg );return _dcg ;};

// Reference returns an invalid reference for Bool.
func (_ebba Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _ccd (_gdbaf ,_ecda ,_dfeg Reference )string {return _e .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gdbaf .Value ,_ecda .Value ,_dfeg .Value );};func _cfag (_dabeb []Result ,_afaad string )(*cumulArgs ,Result ){if len (_dabeb )!=6{return nil ,MakeErrorResult (_afaad +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dabeb [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afaad +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cda :=_dabeb [0].ValueNumber ;if _cda <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dabeb [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afaad +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dda :=_dabeb [1].ValueNumber ;if _dda <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _dabeb [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afaad +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebbc :=_dabeb [2].ValueNumber ;if _ebbc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dabeb [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afaad +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gagcd :=_dabeb [3].ValueNumber ;if _gagcd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dabeb [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_afaad +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbc :=_dabeb [4].ValueNumber ;if _fbc <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _fbc < _gagcd {return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _fbc > _dda {return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_afgec :=int (_dabeb [5].ValueNumber );if _afgec !=0&&_afgec !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_afaad +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_cda ,_dda ,_ebbc ,_gagcd ,_fbc ,_afgec },_eggc ;};

// GetWidth returns 0 for the invalid reference context.
func (_bdfbf *ivr )GetWidth (colIdx int )float64 {return float64 (0)};func _adfd (_gdeea ,_bffgc ,_gdcc ,_cec ,_bga float64 ,_abb int )Result {_effcc ,_gfe :=_acab (_gdeea ,_bffgc ,_abb );if _gfe .Type ==ResultTypeError {return _gfe ;};_cdcg ,_cedd :=_bbee (_gdeea ,_bffgc ,int (_bga ),_abb );if _cedd .Type ==ResultTypeError {return _cedd ;};_effe :=0.0;_efef :=0.0;_gdcc *=100/_bga ;_cec /=_bga ;_cec ++;_bgcb :=_effcc *_bga -_cdcg ;for _dbcb :=1.0;_dbcb < _cdcg ;_dbcb ++{_ddg :=_dbcb +_bgcb ;_aba :=_gdcc /_aeccg .Pow (_cec ,_ddg );_efef +=_aba ;_effe +=_ddg *_aba ;};_caac :=(_gdcc +100)/_aeccg .Pow (_cec ,_cdcg +_bgcb );_efef +=_caac ;_effe +=(_cdcg +_bgcb )*_caac ;_effe /=_efef ;_effe /=_bga ;return MakeNumberResult (_effe );};const _gdg ="\u0028\u0020\u0028"+_fedg +"\u007c"+_affe +"\u007c"+_ccec +"\u007c"+_bcdfb +"\u0029\u0029\u003f\u0024";

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_aea .Replace (v ,"\u0022\u0022","\u0022",-1);return String {v };};const _gafa =57378;

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfad :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beaef :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcfb :=args [2].ValueNumber ;if _gcfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbfe :=args [3].ValueNumber ;if _ffbfe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _ffbfe > _gcfb {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_gbfb :=(_dfad -_beaef )*(_gcfb -_ffbfe +1)*2;_gece :=_gcfb *(_gcfb +1);return MakeNumberResult (_gbfb /_gece );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afdgb :=int (args [0].ValueNumber );return MakeBoolResult (_afdgb ==_afdgb /2*2);};func _eea (_cfafc ,_ebad []float64 ,_abeg float64 )Result {_gggff :=false ;_gbac :=false ;for _bfa :=0;_bfa < len (_cfafc );_bfa ++{if _cfafc [_bfa ]> 0{_gggff =true ;};if _cfafc [_bfa ]< 0{_gbac =true ;};};if !_gggff ||!_gbac {return MakeErrorResultType (ErrorTypeNum ,"");};_ccaf :=_abeg ;_fgfg :=1e-10;_eeafe :=0;_dgdg :=50;_fddeb :=false ;for {_aaa :=_cbfe (_cfafc ,_ebad ,_ccaf );_bdbb :=_ccaf -_aaa /_caabg (_cfafc ,_ebad ,_ccaf );_dffg :=_aeccg .Abs (_bdbb -_ccaf );_ccaf =_bdbb ;_eeafe ++;if _dffg <=_fgfg ||_aeccg .Abs (_aaa )<=_fgfg {break ;};if _eeafe > _dgdg {_fddeb =true ;break ;};};if _fddeb ||_aeccg .IsNaN (_ccaf )||_aeccg .IsInf (_ccaf ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_ccaf );};const (_feeg rmode =iota ;_eeed ;_geefe ;);func _ggeb (_fceg _ecb .Time )_ecb .Time {_fceg =_fceg .UTC ();return _ecb .Date (_fceg .Year (),_fceg .Month (),_fceg .Day (),_fceg .Hour (),_fceg .Minute (),_fceg .Second (),_fceg .Nanosecond (),_ecb .Local );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_fgfc :=_ecb .Now ();_ ,_cggeg :=_fgfc .Zone ();_ffga :=_bac +float64 (_fgfc .Unix ()+int64 (_cggeg ))/86400;return MakeNumberResult (_ffga );};var _cgcce =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_cgeb :=args [0];if _cgeb .Type !=ResultTypeArray &&_cgeb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ebacf :=_cgeb .ValueArray ;if len (_ebacf )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_ebacf [0])));};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dede :=int (args [0].ValueNumber );if _dede < 0||_dede >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _dede <=1899{_dede +=1900;};_effc :=_ecb .Month (args [1].ValueNumber );_ggcba :=int (args [2].ValueNumber );_ceaf :=_bcge (_dede ,_effc ,_ggcba );_fafe :=_gedg (_abgb ,_ceaf )+1;if _fafe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_fafe );};const _begd =57359;

// GetFilename returns an empty string for the invalid reference context.
func (_dgeb *ivr )GetFilename ()string {return ""};const _eagg ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";func (_egad PrefixVerticalRange )verticalRangeReference (_eafc string )string {return _e .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_eafc ,_egad ._bebe ,_egad ._fgcc );};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_gdee ,_eeaba ,_faaa :=_fecb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _faaa .Type ==ResultTypeError {return _faaa ;};if _eeaba < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _gdee ==0{return MakeNumberResult (0);};_bdeega :=_gdee < 0;if _bdeega {_gdee =-_gdee ;};_aadd :=args [0].Value ();_daef :=_aea .Split (_aadd ,"\u002e");_fgecf :=float64 (int (_gdee ));_efag :=_daef [1];_eff :=len (_efag );_ggdcg :=int (_aeccg .Log10 (_eeaba ))+1;_aegfc :=float64 (_ggdcg -_eff );_bedd ,_fggg :=_df .ParseFloat (_efag ,64);if _fggg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_bedd *=_aeccg .Pow (10,_aegfc );_deebbd :=_fgecf +_bedd /_eeaba ;if _bdeega {_deebbd =-_deebbd ;};return MakeNumberResult (_deebbd );};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gagaa :=args [0].AsNumber ();if _gagaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gagaa .ValueNumber < 0{return MakeNumberResult (-1);}else if _gagaa .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};func _bbffd (_agcf Result )bool {_ffgd :=_agcf .Type ;return _ffgd !=ResultTypeArray &&_ffgd !=ResultTypeList ;};const _dgg =57350;

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bdbdd :=args [0].AsNumber ();_ebbd :=args [1].AsNumber ();if _bdbdd .Type !=ResultTypeNumber ||_ebbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _ebbd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_fdaga ,_cgae :=_aeccg .Modf (_bdbdd .ValueNumber /_ebbd .ValueNumber );if _cgae < 0{_fdaga --;};return MakeNumberResult (_bdbdd .ValueNumber -_ebbd .ValueNumber *_fdaga );};func _cg (_bgdg ,_dae _ecb .Time ,_fcaab int )_ecb .Time {_agec :=_ecb .Date (_bgdg .Year (),_dae .Month (),_dae .Day (),0,0,0,0,_ecb .UTC );if _agec .After (_bgdg ){_agec =_agec .AddDate (-1,0,0);};for !_agec .After (_bgdg ){_agec =_agec .AddDate (0,12/_fcaab ,0);};return _agec ;};

// Eval evaluates and returns an expression with prefix.
func (_bbfc PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_bgag :=_bbfc ._ccaa .Reference (ctx ,ev );switch _bgag .Type {case ReferenceTypeSheet :_agdd :=ctx .Sheet (_bgag .Value );return _bbfc ._bdcg .Eval (_agdd ,ev );default:return MakeErrorResult (_e .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bgag .Type ));};};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_acbgd :=len (args );if _acbgd > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_cbbgf :=_ddd (args [0]);_gbbb :=[]float64 {};for _ ,_gdada :=range _cbbgf {for _ ,_afbed :=range _gdada {if _afbed .Type ==ResultTypeNumber &&!_afbed .IsBoolean {_gbbb =append (_gbbb ,_afbed .ValueNumber );};};};_gfgdf :=len (_gbbb );if len (_gbbb )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_acaec :=0.1;if _acbgd ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_acaec =args [1].ValueNumber ;if _acaec <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_bcgf :=[]float64 {};for _cccf :=0;_cccf < _gfgdf ;_cccf ++{if _cccf ==0{_bcgf =append (_bcgf ,0);}else {_bcgf =append (_bcgf ,_bcgf [_cccf -1]+365);};};return _eea (_gbbb ,_bcgf ,_acaec );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_ccgf :=len (args );if _ccgf !=4&&_ccgf !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dgd ,_afacag ,_bebg :=_dca (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _bebg .Type ==ResultTypeError {return _bebg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cgcc :=args [2].ValueNumber ;if _cgcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_efcge :=args [3].ValueNumber ;if _efcge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_acbg :=0;if _ccgf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_acbg =int (args [4].ValueNumber );if !_ecgf (_acbg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_fa ,_bebg :=_acab (_dgd ,_afacag ,_acbg );if _bebg .Type ==ResultTypeError {return _bebg ;};return MakeNumberResult ((_efcge -_cgcc )/_cgcc /_fa );};const _dffd ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;var _fd =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_aea .NewReader (s ));};func _bcdg (_ffda BinOpType ,_gbfd []Result ,_edba Result )Result {_dgbe :=[]Result {};switch _edba .Type {case ResultTypeNumber :_efa :=_edba .ValueNumber ;for _fgfb :=range _gbfd {_cbac :=_gbfd [_fgfb ].AsNumber ();if _cbac .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ffda {case BinOpTypePlus :_dgbe =append (_dgbe ,MakeNumberResult (_cbac .ValueNumber +_efa ));case BinOpTypeMinus :_dgbe =append (_dgbe ,MakeNumberResult (_cbac .ValueNumber -_efa ));case BinOpTypeMult :_dgbe =append (_dgbe ,MakeNumberResult (_cbac .ValueNumber *_efa ));case BinOpTypeDiv :if _efa ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_dgbe =append (_dgbe ,MakeNumberResult (_cbac .ValueNumber /_efa ));case BinOpTypeExp :_dgbe =append (_dgbe ,MakeNumberResult (_aeccg .Pow (_cbac .ValueNumber ,_efa )));case BinOpTypeLT :_dgbe =append (_dgbe ,MakeBoolResult (_cbac .ValueNumber < _efa ));case BinOpTypeGT :_dgbe =append (_dgbe ,MakeBoolResult (_cbac .ValueNumber > _efa ));case BinOpTypeEQ :_dgbe =append (_dgbe ,MakeBoolResult (_cbac .ValueNumber ==_efa ));case BinOpTypeLEQ :_dgbe =append (_dgbe ,MakeBoolResult (_cbac .ValueNumber <=_efa ));case BinOpTypeGEQ :_dgbe =append (_dgbe ,MakeBoolResult (_cbac .ValueNumber >=_efa ));case BinOpTypeNE :_dgbe =append (_dgbe ,MakeBoolResult (_cbac .ValueNumber !=_efa ));default:return MakeErrorResult (_e .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ffda ));};};case ResultTypeString :_bcdc :=_edba .ValueString ;for _gdca :=range _gbfd {_dfcgc :=_gbfd [_gdca ].AsString ();if _dfcgc .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ffda {case BinOpTypeLT :_dgbe =append (_dgbe ,MakeBoolResult (_dfcgc .ValueString < _bcdc ));case BinOpTypeGT :_dgbe =append (_dgbe ,MakeBoolResult (_dfcgc .ValueString > _bcdc ));case BinOpTypeEQ :_dgbe =append (_dgbe ,MakeBoolResult (_dfcgc .ValueString ==_bcdc ));case BinOpTypeLEQ :_dgbe =append (_dgbe ,MakeBoolResult (_dfcgc .ValueString <=_bcdc ));case BinOpTypeGEQ :_dgbe =append (_dgbe ,MakeBoolResult (_dfcgc .ValueString >=_bcdc ));case BinOpTypeNE :_dgbe =append (_dgbe ,MakeBoolResult (_dfcgc .ValueString !=_bcdc ));default:return MakeErrorResult (_e .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ffda ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_dgbe );};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_dacb :=_aafb .Buffer {};for _ ,_dggc :=range args {switch _dggc .Type {case ResultTypeString :_dacb .WriteString (_dggc .ValueString );case ResultTypeNumber :var _bgeb string ;if _dggc .IsBoolean {if _dggc .ValueNumber ==0{_bgeb ="\u0046\u0041\u004cS\u0045";}else {_bgeb ="\u0054\u0052\u0055\u0045";};}else {_bgeb =_dggc .AsString ().ValueString ;};_dacb .WriteString (_bgeb );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_dacb .String ());};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_acbd PrefixVerticalRange )Update (q *_efad .UpdateQuery )Expression {if q .UpdateType ==_efad .UpdateActionRemoveColumn {_aggf :=_acbd ;_egdf :=_acbd ._dgcc .String ();if _egdf ==q .SheetToUpdate {_aec :=q .ColumnIdx ;_aggf ._bebe =_fdcee (_acbd ._bebe ,_aec );_aggf ._fgcc =_fdcee (_acbd ._fgcc ,_aec );};return _aggf ;};return _acbd ;};func (_bfge *ivr )Sheet (name string )Context {return _bfge };var _abgb int64 =_bcge (1900,_ecb .January ,1);

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fbcd :=_aea .ToLower (args [0].ValueString );if !_fdfd (_fbcd ){_ ,_ ,_ ,_ ,_gac ,_dac :=_ddfa (_fbcd );if _dac .Type ==ResultTypeError {_dac .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _dac ;};if _gac {return MakeNumberResult (0);};};_abdc ,_ggca ,_def ,_ ,_dcgg :=_ddcc (_fbcd );if _dcgg .Type ==ResultTypeError {return _dcgg ;};return MakeNumberResult (_dcef (_abdc ,_ggca ,_def ));};func _dadc (_bced Result ,_ebdgc ,_ecag int )[][]Result {_bbe :=[][]Result {};switch _bced .Type {case ResultTypeArray :for _ffac ,_gedbc :=range _bced .ValueArray {if _ffac < _ebdgc {_bbe =append (_bbe ,_dgfg (MakeListResult (_gedbc ),_ecag ));}else {_bbe =append (_bbe ,_dgfg (MakeErrorResultType (ErrorTypeNA ,""),_ecag ));};};case ResultTypeList :_fgabf :=_dgfg (_bced ,_ecag );for _fddg :=0;_fddg < _ebdgc ;_fddg ++{_bbe =append (_bbe ,_fgabf );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _cdaf :=0;_cdaf < _ebdgc ;_cdaf ++{_fbef :=_dgfg (_bced ,_ecag );_bbe =append (_bbe ,_fbef );};};return _bbe ;};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_afbgf .Lock ();defer _afbgf .Unlock ();if _ ,_abea :=_dfgc [name ];_abea {_efcf .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_dfgc [name ]=fn ;};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);type couponArgs struct{_ddefg float64 ;_faae float64 ;_dccdc int ;_cfcgb int ;};func (_dgbb *plex )Error (s string ){_efcf .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfd ,_bfdf ,_fcdc :=_dca (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fcdc .Type ==ResultTypeError {return _fcdc ;};_faeb ,_fcdc :=_aabf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fcdc .Type ==ResultTypeError {return _fcdc ;};if _faeb >=_gfd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_gfgd :=args [3];if _gfgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aaed :=_gfgd .ValueNumber ;if _aaed < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_fcaa :=args [4];if _fcaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bdcb :=_fcaa .ValueNumber ;if _bdcb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gedec :=args [5];if _gedec .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_fbcea :=_gedec .ValueNumber ;if _fbcea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gfa :=args [6];if _gfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eeca :=float64 (int (_gfa .ValueNumber ));if !_aeagb (_eeca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gace :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_eda :=args [7];if _eda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gace =int (_eda .ValueNumber );if !_ecgf (_gace ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_dceaa ,_fcdc :=_acab (_faeb ,_bfdf ,_gace );if _fcdc .Type ==ResultTypeError {return _fcdc ;};_dceaa *=_eeca ;_bcab ,_fcdc :=_acab (_gfd ,_bfdf ,_gace );if _fcdc .Type ==ResultTypeError {return _fcdc ;};_bcab *=_eeca ;_eae ,_fcdc :=_acab (_faeb ,_gfd ,_gace );if _fcdc .Type ==ResultTypeError {return _fcdc ;};_eae *=_eeca ;_gbc :=_fbcea +_dceaa *100*_aaed /_eeca ;_gbc /=_bcab *_bdcb /_eeca +1;_gbc -=_eae *100*_aaed /_eeca ;return MakeNumberResult (_gbc );};const _acbee ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";var _afbgf _abce .Mutex ;const _cggg =57365;

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_bcg ,_ddeeg :=_gacg (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _ddeeg .Type ==ResultTypeError {return _ddeeg ;};return MakeNumberResult (_ebdgd (_bcg ._ddefg ,_bcg ._faae ,_bcg ._dccdc ,_bcg ._cfcgb ));};func (_ce *ivr )SetOffset (col ,row uint32 ){};func (_ddfe *plex )Lex (lval *yySymType )int {_cacb =true ;_fdbd :=<-_ddfe ._bba ;if _fdbd !=nil {lval ._bcaf =_fdbd ;return int (lval ._bcaf ._ffdg );};return 0;};func _baf (_gfgg ,_adga float64 ,_cbaf ,_cbec int )float64 {_acbbb :=_fbccg (_gfgg );_efdbb :=_fbccg (_adga );if _cbec ==1{_aafcc :=_gabd (_acbbb ,_efdbb ,_cbaf ,1);_egc :=_aafcc .AddDate (0,12/_cbaf ,0);return _dega (_aafcc ,_egc ,_cbec );};return float64 (_cccdc (0,_cbec ))/float64 (_cbaf );};func _ecgf (_decc int )bool {return _decc >=0&&_decc <=4};func _caabg (_ebbfc ,_dgda []float64 ,_ecfdc float64 )float64 {_eccc :=_ecfdc +1;_ebgbb :=0.0;_bceb :=len (_ebbfc );_egfe :=_dgda [0];for _beac :=1;_beac < _bceb ;_beac ++{_bcee :=(_dgda [_beac ]-_egfe )/365;_ebgbb -=_bcee *_ebbfc [_beac ]/_aeccg .Pow (_eccc ,_bcee +1);};return _ebgbb ;};func _ebbec (_fbcc ,_bcbf float64 )bool {return _aeccg .Abs (_fbcc -_bcbf )< 1.0e-6};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_fdde ,_cccbc :=_cfac (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _cccbc .Type ==ResultTypeError {return _cccbc ;};_dgb :=_fdde ._gebfg ;_fcge :=_fdde ._caefg ;_cdag :=_fdde ._fffb ;_daae :=_fdde ._faabg ;_aegff :=_fdde ._fgbe ;_ebge :=_fdde ._ffbe ;_fdfgg :=_adfd (_dgb ,_fcge ,_cdag ,_daae ,_aegff ,_ebge );if _fdfgg .Type ==ResultTypeError {return _fdfgg ;};_bgdgf :=_fdfgg .ValueNumber /(1.0+_daae /_aegff );return MakeNumberResult (_bgdgf );};const _bcdfb ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_acaee :=&defEval {};_acaee .evCache =_dfd ();return _acaee };func _deb (_accab Context ,_dcb Evaluator ,_aadfb ,_egeac string )Result {_ddbba ,_ecgge :=_deeb .ParseCellReference (_aadfb );if _ecgge !=nil {return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_aadfb ,_ecgge .Error ()));};_eggg ,_aeca :=_ddbba .ColumnIdx ,_ddbba .RowIdx ;_cfee ,_cggc :=_deeb .ParseCellReference (_egeac );if _cggc !=nil {return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_egeac ,_cggc .Error ()));};_ecfd ,_acaf :=_cfee .ColumnIdx ,_cfee .RowIdx ;_egff :=[][]Result {};for _cdcdf :=_aeca ;_cdcdf <=_acaf ;_cdcdf ++{_gdgfg :=[]Result {};for _gbcad :=_eggg ;_gbcad <=_ecfd ;_gbcad ++{_bbb :=_accab .Cell (_e .Sprintf ("\u0025\u0073\u0025\u0064",_deeb .IndexToColumn (_gbcad ),_cdcdf ),_dcb );_gdgfg =append (_gdgfg ,_bbb );};_egff =append (_egff ,_gdgfg );};if len (_egff )==1{if len (_egff [0])==1{return _egff [0][0];};return MakeListResult (_egff [0]);};return MakeArrayResult (_egff );};type countMode byte ;func _aced (_bedgg []Result ,_bf bool )Result {_ggebc :="\u004d\u0041\u0058";if _bf {_ggebc ="\u004d\u0041\u0058\u0041";};if len (_bedgg )==0{return MakeErrorResult (_ggebc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cabg :=-_aeccg .MaxFloat64 ;for _ ,_dcdca :=range _bedgg {switch _dcdca .Type {case ResultTypeNumber :if (_bf ||!_dcdca .IsBoolean )&&_dcdca .ValueNumber > _cabg {_cabg =_dcdca .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_eceec :=_aced (_dcdca .ListValues (),_bf );if _eceec .ValueNumber > _cabg {_cabg =_eceec .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_eaed :=0.0;if _bf {_eaed =_dcdca .AsNumber ().ValueNumber ;};if _eaed > _cabg {_cabg =_eaed ;};default:_efcf .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ggebc +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dcdca .Type );};};if _cabg ==-_aeccg .MaxFloat64 {_cabg =0;};return MakeNumberResult (_cabg );};func _ddde (_bfbc Result )[]Result {_eac :=_bfbc .ValueList ;if _bfbc .Type ==ResultTypeArray {_eac =nil ;for _ ,_fccda :=range _bfbc .ValueArray {if len (_fccda )> 0{_eac =append (_eac ,_fccda [0]);}else {_eac =append (_eac ,_eggc );};};};return _eac ;};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ecebf :=args [0].AsNumber ();if _ecebf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbd :=_aeccg .Signbit (_ecebf .ValueNumber );_ggd ,_egeb :=_aeccg .Modf ((_ecebf .ValueNumber -1)/2);_dgcee :=_ggd *2+1;if _egeb !=0{if !_efbd {_dgcee +=2;}else {_dgcee -=2;};};return MakeNumberResult (_dgcee );};func _gaeeg (_agfgb yyLexer )int {return _ggce ().Parse (_agfgb )};

// Reference returns a string reference value to a vertical range with prefix.
func (_ecac PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_bfbg :=_ecac ._dgcc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_ecac .verticalRangeReference (_bfbg .Value )};};

// Eval evaluates and returns the result of a Negate expression.
func (_fcd Negate )Eval (ctx Context ,ev Evaluator )Result {_aecbc :=_fcd ._gaea .Eval (ctx ,ev );if _aecbc .Type ==ResultTypeNumber {return MakeNumberResult (-_aecbc .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};const _eafb =57357;

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_gbd :=MakeNumberResult (0);for _ ,_gca :=range args {_gca =_gca .AsNumber ();switch _gca .Type {case ResultTypeNumber :_gbd .ValueNumber +=_gca .ValueNumber *_gca .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bdeed :=SumSquares (_gca .ListValues ());if _bdeed .Type !=ResultTypeNumber {return _bdeed ;};_gbd .ValueNumber +=_bdeed .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gca ;case ResultTypeEmpty :default:return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_gca .Type ));};};return _gbd ;};var _cdca =[...]uint8 {0,17,33,49,63,78,93,108};func _agedg (_adfe BinOpType ,_abee ,_gafb [][]Result )Result {_cfgef :=[][]Result {};for _bceef :=range _abee {_ggeab :=_cfdea (_adfe ,_abee [_bceef ],_gafb [_bceef ]);if _ggeab .Type ==ResultTypeError {return _ggeab ;};_cfgef =append (_cfgef ,_ggeab .ValueList );};return MakeArrayResult (_cfgef );};func (_eeafde *noCache )GetFromCache (key string )(Result ,bool ){return _eggc ,false };

// GetFormat returns an empty string for the invalid reference context.
func (_dgbd *ivr )GetFormat (cellRef string )string {return ""};var _bbfcd =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func _cgcg (){_dbbd =_fdcf .MustCompile ("\u005e\u0030\u002b\u0024");_afba =_fdcf .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_defc =_fdcf .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_cgdf =_fdcf .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_feec =_fdcf .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_bef =_fdcf .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cecgc =_fdcf .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_ddgeg =_fdcf .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_abfe =_fdcf .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_fdfb =_fdcf .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_gdbdd =_fdcf .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_egg =_fdcf .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_eadf +_eadf +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_eadf +_eadf +"\u0029\u002b\u0059+\u0024");_cbbg =_fdcf .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_eadf +_eadf +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_eadf +_eadf +"\u0029\u002b\u0059+\u0024");_gfea =_fdcf .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_fbgbab =_fdcf .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_fbaa :=_aea .Split (v ,"\u003a");if len (_fbaa )!=2{return nil ;};_edaea ,_ :=_df .Atoi (_fbaa [0]);_bbcggf ,_ :=_df .Atoi (_fbaa [1]);return HorizontalRange {_edaea ,_bbcggf };};func _fbea (_bbf []Result ,_fbcca rmode )Result {if len (_bbf )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebaf :=_bbf [0].AsNumber ();if _ebaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eggd :=_bbf [1].AsNumber ();if _eggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdgf :=_eggd .ValueNumber ;_cfffd :=_ebaf .ValueNumber ;_cccge :=1.0;if _fdgf > 0{_cccge =_aeccg .Pow (1/10.0,_fdgf );}else {_cccge =_aeccg .Pow (10.0,-_fdgf );};_cfffd ,_cfbe :=_aeccg .Modf (_cfffd /_cccge );switch _fbcca {case _feeg :const _gbegc =0.499999999;if _cfbe >=_gbegc {_cfffd ++;}else if _cfbe <=-_gbegc {_cfffd --;};case _eeed :case _geefe :if _cfbe > 0{_cfffd ++;}else if _cfbe < 0{_cfffd --;};};return MakeNumberResult (_cfffd *_cccge );};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aggc ,_bgbg ,_egda :=_dca (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _egda .Type ==ResultTypeError {return _egda ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgce :=_bgbg -_aggc ;if _cgce > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_dfcfa :=args [2].ValueNumber ;if _dfcfa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_dfcfa )/(360-_dfcfa *_cgce ));};const _ccdg =57360;

// Reference returns a string reference value to a horizontal range with prefix.
func (_fceba PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_ceea :=_fceba ._cadfc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_fceba .horizontalRangeReference (_ceea .Value )};};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};var _gfdd =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func (_bdceg HorizontalRange )horizontalRangeReference ()string {return _e .Sprintf ("\u0025\u0064\u003a%\u0064",_bdceg ._bcffd ,_bdceg ._gbad );};func NewLexer ()*Lexer {return &Lexer {_edbd :make (chan*node )}};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dabea :=ctx .GetEpoch ();_ebbe ,_geeg :=_adef (args [0].Value (),_dabea );if _geeg !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eagc :=_ebbe .Year ();return MakeBoolResult (_cef (_eagc ));};

// Error is an error expression.
type Error struct{_fdb string };

// Eval evaluates and returns a string.
func (_agfb String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_agfb ._cdgb )};func _bbee (_adgcf ,_egdga float64 ,_ggac ,_cceg int )(float64 ,Result ){_gfeb ,_eb :=_fbccg (_adgcf ),_fbccg (_egdga );if _eb .After (_gfeb ){_cdfdf :=_gabd (_gfeb ,_eb ,_ggac ,_cceg );_dfed :=(_eb .Year ()-_cdfdf .Year ())*12+int (_eb .Month ())-int (_cdfdf .Month ());return float64 (_dfed *_ggac )/12.0,_eggc ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};type cumulArgs struct{_fdba float64 ;_dedf float64 ;_cbcdd float64 ;_adgea float64 ;_fead float64 ;_ccce int ;};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ccedf ,_afbf ,_dada :=_dca (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _dada .Type ==ResultTypeError {return _dada ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_febe :=_afbf -_ccedf ;if _febe > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_acba :=args [2].ValueNumber ;if _acba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_acba *_febe /360));};const _bcgg =57363;type yySymType struct{_ddaag int ;_bcaf *node ;_eebe Expression ;_cafd []Expression ;_dgec [][]Expression ;};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_fcdfg :=_aea .Split (v ,"\u003a");if len (_fcdfg )!=2{return nil ;};return PrefixVerticalRange {pfx ,_fcdfg [0],_fcdfg [1]};};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_fdag :=len (args );if _fdag !=4&&_fdag !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fefb ,_egcc ,_gdfd :=_dca (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _gdfd .Type ==ResultTypeError {return _gdfd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfc :=args [2].ValueNumber ;if _egfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eaac :=args [3].ValueNumber ;if _eaac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgdf :=0;if _fdag ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgdf =int (args [4].ValueNumber );if !_ecgf (_ecgdf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_gafe ,_gdfd :=_acab (_fefb ,_egcc ,_ecgdf );if _gdfd .Type ==ResultTypeError {return _gdfd ;};return MakeNumberResult (_egfc /(1-_eaac *_gafe ));};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_dfbg :=len (args );if _dfbg !=4&&_dfbg !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_cdde ,_fdd :=_aabf (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fdd .Type ==ResultTypeError {return _fdd ;};_eece ,_fdd :=_aabf (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fdd .Type ==ResultTypeError {return _fdd ;};if _cdde >=_eece {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dbfgf :=args [2].ValueNumber ;if _dbfgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fga :=args [3].ValueNumber ;if _fga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbdd :=0;if _dfbg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbdd =int (args [4].ValueNumber );if !_ecgf (_dbdd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_aggg ,_fdd :=_acab (_cdde ,_eece ,_dbdd );if _fdd .Type ==ResultTypeError {return _fdd ;};return MakeNumberResult (_fga *_dbfgf *_aggg );};

// String returns a string representation of a vertical range with prefix.
func (_faeaa PrefixVerticalRange )String ()string {return _e .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_faeaa ._dgcc .String (),_faeaa ._bebe ,_faeaa ._fgcc );};func _gdgf (_egada [][]Result )float64 {if len (_egada )==2{_afgfad :=_egada [0][0].AsNumber ();_gadee :=_egada [0][1].AsNumber ();_ceaa :=_egada [1][0].AsNumber ();_afecg :=_egada [1][1].AsNumber ();if _afgfad .Type !=ResultTypeNumber ||_gadee .Type !=ResultTypeNumber ||_ceaa .Type !=ResultTypeNumber ||_afecg .Type !=ResultTypeNumber {return _aeccg .NaN ();};return _afgfad .ValueNumber *_afecg .ValueNumber -_ceaa .ValueNumber *_gadee .ValueNumber ;};_effaf :=float64 (0);_ecea :=float64 (1);for _bege :=range _egada {_effaf +=_ecea *_egada [0][_bege ].ValueNumber *_gdgf (_gdbd (_egada ,_bege ));_ecea *=-1;};return _effaf ;};var _effg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// String returns a string representation of CellRef.
func (_gcfae CellRef )String ()string {return _gcfae ._agge };type criteriaParsed struct{_gaceg bool ;_acfc float64 ;_degfa string ;_bedb *criteriaRegex ;};var _accd =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ccca :=args [0].Ref ;if _ccca .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_dcf ,_gffec :=_deeb .ParseCellReference (_ccca .Value );if _gffec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_ccca .Value );};return MakeNumberResult (float64 (_dcf .RowIdx ));};

// String returns a string representation of a named range.
func (_bcaa NamedRangeRef )String ()string {return _bcaa ._aee };var _bgac =[...]uint8 {0,20,37,60,78,96};const _gbee ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egd :=args [0].ValueNumber ;if _egd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baad :=args [1].ValueNumber ;if _baad <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbd :=args [2].ValueNumber ;if _fbd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_aeccg .Log10 (_fbd )-_aeccg .Log10 (_baad ))/_aeccg .Log10 (1+_egd ));};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_ccaa Expression ;_bdcg Expression ;};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fegde :=args [0].AsNumber ();if _fegde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cagg :=float64 (0);if len (args )> 1{_cfdg :=args [1].AsNumber ();if _cfdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cagg =_cfdg .ValueNumber ;};_bdcea :=_fegde .ValueNumber ;_egade :=1.0;if _cagg >=0{_egade =_aeccg .Pow (1/10.0,_cagg );}else {return MakeNumberResult (0);};_bdcea ,_dbc :=_aeccg .Modf (_bdcea /_egade );_dfbfb :=0.99999;if _dbc > _dfbfb {_bdcea ++;}else if _dbc < -_dfbfb {_bdcea --;};_ =_dbc ;return MakeNumberResult (_bdcea *_egade );};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ebcc :=args [0].AsNumber ();if _ebcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_bfefc :=int (_ebcc .ValueNumber );_ggea :=make ([][]Result ,0,_bfefc );for _accf :=0;_accf < _bfefc ;_accf ++{_beaefg :=make ([]Result ,_bfefc );for _cage :=0;_cage < _bfefc ;_cage ++{if _accf ==_cage {_beaefg [_cage ]=MakeNumberResult (1.0);}else {_beaefg [_cage ]=MakeNumberResult (0.0);};};_ggea =append (_ggea ,_beaefg );};return MakeArrayResult (_ggea );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_fcgc string };func _edbea (_cfad ,_g float64 ,_babcc ,_cea int )float64 {_dbfg :=_fbccg (_cfad );_fdbe :=_fbccg (_g );_edgc :=_cg (_dbfg ,_fdbe ,_babcc );return _dega (_dbfg ,_edgc ,_cea );};func (_fab *yyParserImpl )Parse (yylex yyLexer )int {var _dbfda int ;var _cbde yySymType ;var _fccg []yySymType ;_ =_fccg ;_gafaa :=_fab ._dgaa [:];Nerrs :=0;Errflag :=0;_aegf :=0;_fab ._fede =-1;_aecag :=-1;defer func (){_aegf =-1;_fab ._fede =-1;_aecag =-1}();_bdacf :=-1;goto _beaca ;_caade :return 0;_bcffe :return 1;_beaca :if _gbdc >=4{_e .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_faaf (_aecag ),_gcfa (_aegf ));};_bdacf ++;if _bdacf >=len (_gafaa ){_fdfgb :=make ([]yySymType ,len (_gafaa )*2);copy (_fdfgb ,_gafaa );_gafaa =_fdfgb ;};_gafaa [_bdacf ]=_cbde ;_gafaa [_bdacf ]._ddaag =_aegf ;_gbdad :_dbfda =_accd [_aegf ];if _dbfda <=_dfgd {goto _fad ;};if _fab ._fede < 0{_fab ._fede ,_aecag =_acceg (yylex ,&_fab ._fgdb );};_dbfda +=_aecag ;if _dbfda < 0||_dbfda >=_bdaa {goto _fad ;};_dbfda =_ggdgef [_dbfda ];if _eeddf [_dbfda ]==_aecag {_fab ._fede =-1;_aecag =-1;_cbde =_fab ._fgdb ;_aegf =_dbfda ;if Errflag > 0{Errflag --;};goto _beaca ;};_fad :_dbfda =_cgcce [_aegf ];if _dbfda ==-2{if _fab ._fede < 0{_fab ._fede ,_aecag =_acceg (yylex ,&_fab ._fgdb );};_cgf :=0;for {if _dafa [_cgf +0]==-1&&_dafa [_cgf +1]==_aegf {break ;};_cgf +=2;};for _cgf +=2;;_cgf +=2{_dbfda =_dafa [_cgf +0];if _dbfda < 0||_dbfda ==_aecag {break ;};};_dbfda =_dafa [_cgf +1];if _dbfda < 0{goto _caade ;};};if _dbfda ==0{switch Errflag {case 0:yylex .Error (_fed (_aegf ,_aecag ));Nerrs ++;if _gbdc >=1{_e .Printf ("\u0025\u0073",_gcfa (_aegf ));_e .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_faaf (_aecag ));};fallthrough;case 1,2:Errflag =3;for _bdacf >=0{_dbfda =_accd [_gafaa [_bdacf ]._ddaag ]+_dccd ;if _dbfda >=0&&_dbfda < _bdaa {_aegf =_ggdgef [_dbfda ];if _eeddf [_aegf ]==_dccd {goto _beaca ;};};if _gbdc >=2{_e .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_gafaa [_bdacf ]._ddaag );};_bdacf --;};goto _bcffe ;case 3:if _gbdc >=2{_e .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_faaf (_aecag ));};if _aecag ==_cbacg {goto _bcffe ;};_fab ._fede =-1;_aecag =-1;goto _gbdad ;};};if _gbdc >=2{_e .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_dbfda ,_gcfa (_aegf ));};_dcaa :=_dbfda ;_addf :=_bdacf ;_ =_addf ;_bdacf -=_ddga [_dbfda ];if _bdacf +1>=len (_gafaa ){_baea :=make ([]yySymType ,len (_gafaa )*2);copy (_baea ,_gafaa );_gafaa =_baea ;};_cbde =_gafaa [_bdacf +1];_dbfda =_bbfcd [_dbfda ];_bfabf :=_gfdd [_dbfda ];_dcaga :=_bfabf +_gafaa [_bdacf ]._ddaag +1;if _dcaga >=_bdaa {_aegf =_ggdgef [_bfabf ];}else {_aegf =_ggdgef [_dcaga ];if _eeddf [_aegf ]!=-_dbfda {_aegf =_ggdgef [_bfabf ];};};switch _dcaa {case 1:_fccg =_gafaa [_addf -1:_addf +1];{yylex .(*plex )._agga =_cbde ._eebe ;};case 3:_fccg =_gafaa [_addf -2:_addf +1];{_cbde ._eebe =_fccg [2]._eebe ;};case 4:_fccg =_gafaa [_addf -4:_addf +1];{};case 5:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewBool (_fccg [1]._bcaf ._dggb );};case 6:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewNumber (_fccg [1]._bcaf ._dggb );};case 7:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewString (_fccg [1]._bcaf ._dggb );};case 8:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewError (_fccg [1]._bcaf ._dggb );};case 9:_fccg =_gafaa [_addf -2:_addf +1];{_cbde ._eebe =_fccg [2]._eebe ;};case 10:_fccg =_gafaa [_addf -2:_addf +1];{_cbde ._eebe =NewNegate (_fccg [2]._eebe );};case 15:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =_fccg [2]._eebe ;};case 17:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewConstArrayExpr (_fccg [2]._dgec );};case 18:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._dgec =append (_cbde ._dgec ,_fccg [1]._cafd );};case 19:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._dgec =append (_fccg [1]._dgec ,_fccg [3]._cafd );};case 20:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._cafd =append (_cbde ._cafd ,_fccg [1]._eebe );};case 21:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._cafd =append (_fccg [1]._cafd ,_fccg [3]._eebe );};case 23:_fccg =_gafaa [_addf -2:_addf +1];{_cbde ._eebe =NewPrefixExpr (_fccg [1]._eebe ,_fccg [2]._eebe );};case 25:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewSheetPrefixExpr (_fccg [1]._bcaf ._dggb );};case 26:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewCellRef (_fccg [1]._bcaf ._dggb );};case 27:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewRange (_fccg [1]._eebe ,_fccg [3]._eebe );};case 28:_fccg =_gafaa [_addf -4:_addf +1];{_cbde ._eebe =NewPrefixRangeExpr (_fccg [1]._eebe ,_fccg [2]._eebe ,_fccg [4]._eebe );};case 29:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewNamedRangeRef (_fccg [1]._bcaf ._dggb );};case 30:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewHorizontalRange (_fccg [1]._bcaf ._dggb );};case 31:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._eebe =NewVerticalRange (_fccg [1]._bcaf ._dggb );};case 32:_fccg =_gafaa [_addf -2:_addf +1];{_cbde ._eebe =NewPrefixHorizontalRange (_fccg [1]._eebe ,_fccg [2]._bcaf ._dggb );};case 33:_fccg =_gafaa [_addf -2:_addf +1];{_cbde ._eebe =NewPrefixVerticalRange (_fccg [1]._eebe ,_fccg [2]._bcaf ._dggb );};case 34:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypePlus ,_fccg [3]._eebe );};case 35:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeMinus ,_fccg [3]._eebe );};case 36:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeMult ,_fccg [3]._eebe );};case 37:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeDiv ,_fccg [3]._eebe );};case 38:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeExp ,_fccg [3]._eebe );};case 39:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeLT ,_fccg [3]._eebe );};case 40:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeGT ,_fccg [3]._eebe );};case 41:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeLEQ ,_fccg [3]._eebe );};case 42:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeGEQ ,_fccg [3]._eebe );};case 43:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeEQ ,_fccg [3]._eebe );};case 44:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeNE ,_fccg [3]._eebe );};case 45:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewBinaryExpr (_fccg [1]._eebe ,BinOpTypeConcat ,_fccg [3]._eebe );};case 47:_fccg =_gafaa [_addf -2:_addf +1];{_cbde ._eebe =NewFunction (_fccg [1]._bcaf ._dggb ,nil );};case 48:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._eebe =NewFunction (_fccg [1]._bcaf ._dggb ,_fccg [2]._cafd );};case 49:_fccg =_gafaa [_addf -1:_addf +1];{_cbde ._cafd =append (_cbde ._cafd ,_fccg [1]._eebe );};case 50:_fccg =_gafaa [_addf -3:_addf +1];{_cbde ._cafd =append (_fccg [1]._cafd ,_fccg [3]._eebe );};case 53:_fccg =_gafaa [_addf -0:_addf +1];{_cbde ._eebe =NewEmptyExpr ();};};goto _beaca ;};

// Update updates references in the PrefixExpr after removing a row/column.
func (_cgdca PrefixExpr )Update (q *_efad .UpdateQuery )Expression {_daag :=_cgdca ;_fbccb :=_cgdca ._ccaa .String ();if _fbccb ==q .SheetToUpdate {_ead :=*q ;_ead .UpdateCurrentSheet =true ;_daag ._bdcg =_cgdca ._bdcg .Update (&_ead );};return _daag ;};func init (){_cgcg ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};type evCache struct{_cfed map[string ]Result ;_fdab *_abce .Mutex ;};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_afe :=args [0];if _afe .Type !=ResultTypeArray &&_afe .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bgec :=_ggcga (args [1]);_baagfb :=0;for _ ,_dbg :=range _ddd (_afe ){for _ ,_bdce :=range _dbg {if _cdbdg (_bdce ,_bgec ){_baagfb ++;};};};return MakeNumberResult (float64 (_baagfb ));};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_feb (args ,_agab ));};type defEval struct{evCache ;_eddaa bool ;};func _fdfgd (_gfdg string )*criteriaRegex {_cgbd :=&criteriaRegex {};if _gfdg ==""{return _cgbd ;};if _deebb :=_ecade .FindStringSubmatch (_gfdg );len (_deebb )> 1{_cgbd ._cebf =_bdgf ;_cgbd ._dcfeb =_deebb [1];}else if _fddeg :=_ccfec .FindStringSubmatch (_gfdg );len (_fddeg )> 1{_cgbd ._cebf =_bdgf ;_cgbd ._dcfeb =_fddeg [1];}else if _gfee :=_bgfa .FindStringSubmatch (_gfdg );len (_gfee )> 1{_cgbd ._cebf =_cedc ;_cgbd ._dcfeb =_gfee [1];}else if _cceac :=_cfb .FindStringSubmatch (_gfdg );len (_cceac )> 1{_cgbd ._cebf =_bbcf ;_cgbd ._dcfeb =_cceac [1];}else if _dcbce :=_gcbfg .FindStringSubmatch (_gfdg );len (_dcbce )> 1{_cgbd ._cebf =_deada ;_cgbd ._dcfeb =_dcbce [1];}else if _aeag :=_abba .FindStringSubmatch (_gfdg );len (_aeag )> 1{_cgbd ._cebf =_ddea ;_cgbd ._dcfeb =_aeag [1];};return _cgbd ;};func _bcdd (_afb []Result ,_bccce bool ,_dfcae string )Result {var _edbf ,_ccbg string ;if _bccce {_edbf ="\u0074\u0068\u0072e\u0065";_ccbg ="\u006f\u0064\u0064";}else {_edbf ="\u0074\u0077\u006f";_ccbg ="\u0065\u0076\u0065\u006e";};_dfcff :=len (_afb );if (_bccce &&_dfcff < 3)||(!_bccce &&_dfcff < 2){return MakeErrorResult (_dfcae +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_edbf +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_dfcff /2*2==_dfcff )==_bccce {return MakeErrorResult (_dfcae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ccbg +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_bbba :=-1;_ccga :=-1;for _baae :=0;_baae < _dfcff ;_baae +=2{_abgf :=_afb [_baae ];if _abgf .Type !=ResultTypeArray &&_abgf .Type !=ResultTypeList {return MakeErrorResult (_dfcae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_baed :=_ddd (_abgf );if _ccga ==-1{_ccga =len (_baed );_bbba =len (_baed [0]);}else if len (_baed )!=_ccga ||len (_baed [0])!=_bbba {return MakeErrorResult (_dfcae +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _bccce &&_baae ==0{_baae --;};};return _eggc ;};var _cfff =[...]int {0};const _bdgeg =57351;

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_gfdde ,_dee :=_ccfg (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dee .Type ==ResultTypeError {return _dee ;};_cag :=_gfdde ._ccae ;_face :=_gfdde ._adgc ;_cfaa :=_gfdde ._dcfc ;_fcgd :=_gfdde ._cead ;_afece :=_gfdde ._gbgd ;_cbe :=_gfdde ._gfebb ;_egeec :=_gfdde ._fbb ;_bgeeb ,_fe :=_acab (_face ,_cfaa ,_egeec );if _fe .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_caacd :=_bgeeb *_cbe *_cag ;if _afece ==0{return MakeNumberResult (_caacd );};_agbf :=_cag *_cbe ;_gdfe :=_cag -_fcgd ;_cgefe :=int ((_gdfe -_caacd )/_agbf );if _afece <=_cgefe {return MakeNumberResult (_agbf );}else if _afece ==_cgefe +1{return MakeNumberResult (_gdfe -_agbf *float64 (_cgefe )-_caacd );}else {return MakeNumberResult (0);};};const (_ byte =iota ;_bdgf ;_cedc ;_bbcf ;_deada ;_ddea ;);const _aaeb =57348;

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_aeccg .Pi );};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bff :=args [0].AsNumber ();if _bff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cceb :=0;if len (args )> 1{_dbgd :=args [1];if _dbgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_cceb =int (_dbgd .ValueNumber );if _cceb < 0{_cceb =0;}else if _cceb > 4{_cceb =4;};};_daaf :=_cfgg ;switch _cceb {case 1:_daaf =_ccgac ;case 2:_daaf =_ccegb ;case 3:_daaf =_fd ;case 4:_daaf =_afac ;};_fecfa :=_aeccg .Trunc (_bff .ValueNumber );_geeae :=_aafb .Buffer {};for _ ,_gagcg :=range _daaf {for _fecfa >=_gagcg ._bdcc {_geeae .WriteString (_gagcg ._aegd );_fecfa -=_gagcg ._bdcc ;};};return MakeStringResult (_geeae .String ());};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {name ,args }};

// LastRow returns 0 for the invalid reference context.
func (_cacf *ivr )LastRow (colFrom string )int {return 0};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_gdeaf ,_dgfda :=_efff ("\u0046\u0049\u004e\u0044",args );if _dgfda .Type !=ResultTypeEmpty {return _dgfda ;};_gagd :=_gdeaf ._efcd ;if _gagd ==""{return MakeNumberResult (1.0);};_be :=_gdeaf ._eced ;_ffeb :=_gdeaf ._afgfa -1;_cegg :=1;_cdc :=0;for _bg :=range _be {if _bg !=0{_gaf :=1;if _bg -_cdc > 1{_gaf =2;};_cegg +=_gaf ;};if _cegg > _ffeb {_aeff :=_aea .Index (_be [_bg :],_gagd );if _aeff ==0{return MakeNumberResult (float64 (_cegg ));};};_cdc =_bg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_fgfgd CellRef )Update (q *_efad .UpdateQuery )Expression {if q .UpdateCurrentSheet {_fgfgd ._agge =_febee (_fgfgd ._agge ,q );};return _fgfgd ;};type rmode byte ;

// Eval evaluates and returns the result of an empty expression.
func (_dggf EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Reference returns a string reference value to a cell.
func (_ccdfd CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_ccdfd ._agge };};func _efca (_bdae []Result )[]float64 {_ddfea :=make ([]float64 ,0);for _ ,_cafb :=range _bdae {if _cafb .Type ==ResultTypeEmpty {continue ;};_cafb =_cafb .AsNumber ();switch _cafb .Type {case ResultTypeNumber :if !_cafb .IsBoolean {_ddfea =append (_ddfea ,_cafb .ValueNumber );};case ResultTypeList ,ResultTypeArray :_ddfea =append (_ddfea ,_efca (_cafb .ListValues ())...);case ResultTypeString :default:_efcf .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cafb .Type );};};return _ddfea ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _gfcfe (args ,true )};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_ced :=args [0].AsString ();if _ced .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_baab :=_aafb .Buffer {};_gbgcg :=false ;for _ ,_agb :=range _ced .ValueString {if !_gbgcg &&_adcf .IsLetter (_agb ){_baab .WriteRune (_adcf .ToUpper (_agb ));}else {_baab .WriteRune (_adcf .ToLower (_agb ));};_gbgcg =_adcf .IsLetter (_agb );};return MakeStringResult (_baab .String ());};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dedag :=args [0].AsString ();if _dedag .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_dedag .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_dedag .ValueString [0]));};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_fagg ,_becff :=_gacg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _becff .Type ==ResultTypeError {return _becff ;};return MakeNumberResult (_baf (_fagg ._ddefg ,_fagg ._faae ,_fagg ._dccdc ,_fagg ._cfcgb ));};func _ecabd (_fdg Result )bool {if _fdg .Type ==ResultTypeString {return _fdg .ValueString =="";};return _fdg .ValueNumber ==0;};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_dccc Context ,_fef Evaluator ,_bgdec []Result )Result ;func _gacg (_cfca []Result ,_accg string )(*couponArgs ,Result ){_ddcf :=len (_cfca );if _ddcf !=3&&_ddcf !=4{return nil ,MakeErrorResult (_accg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adcb ,_dab ,_dgga :=_dca (_cfca [0],_cfca [1],_accg );if _dgga .Type ==ResultTypeError {return nil ,_dgga ;};if _cfca [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_accg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_debab :=_cfca [2].ValueNumber ;if !_aeagb (_debab ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_accg );};_gaga :=0;if _ddcf ==4&&_cfca [3].Type !=ResultTypeEmpty {if _cfca [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_accg +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaga =int (_cfca [3].ValueNumber );if !_ecgf (_gaga ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_accg );};};return &couponArgs {_adcb ,_dab ,int (_debab ),_gaga },_eggc ;};func (_bcba *noCache )SetCache (key string ,value Result ){};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_edbd chan*node ;_cabd _abce .Mutex ;_gacc []chan*node ;_efaa []*node ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfabf :=args [0].AsNumber ();if _dfabf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dadbc :=float64 (1);_edaf :=args [1].AsNumber ();if _edaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_dadbc =_edaf .ValueNumber ;if _dadbc < 0&&_dfabf .ValueNumber > 0||_dadbc > 0&&_dfabf .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_gcfg :=_dfabf .ValueNumber ;_gcfg ,_abcea :=_aeccg .Modf (_gcfg /_dadbc );if _aeccg .Trunc (_abcea +0.5)> 0{_gcfg ++;};return MakeNumberResult (_gcfg *_dadbc );};func _fdcee (_gbaed string ,_beaeb uint32 )string {_ggf :=_deeb .ColumnToIndex (_gbaed );if _ggf ==_beaeb {return "\u0023\u0052\u0045F\u0021";}else if _ggf > _beaeb {return _deeb .IndexToColumn (_ggf -1);}else {return _gbaed ;};};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _aced (args ,true )};var (_gbdc =0;_cacb =false ;);

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_adee :=_bcdd (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _adee .Type !=ResultTypeEmpty {return _adee ;};_cad :=_fbac (args );return MakeNumberResult (float64 (len (_cad )));};func _gafgb (_gfg ,_gea []string )[]string {for _ ,_ebafc :=range _gea {_gfg =append (_gfg ,_ebafc );};return _gfg ;};const _edeg =_aaegd +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func init (){_cdba =_ggg .New (_ggg .NewSource (_ecb .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_bccd ("\u0041\u0053\u0049\u004e",_aeccg .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_bccd ("\u0041\u0053\u0049\u004e",_aeccg .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_bccd ("\u0041\u0053\u0049\u004e",_aeccg .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_bccd ("\u0041\u0043\u004f\u0054",func (_eeag float64 )float64 {return _aeccg .Pi /2-_aeccg .Atan (_eeag )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_bccd ("\u0041\u0043\u004fT\u0048",func (_fddf float64 )float64 {return _aeccg .Atanh (1/_fddf )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_bccd ("\u0041\u0053\u0049\u004e",_aeccg .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_bccd ("\u0041\u0053\u0049N\u0048",_aeccg .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_bccd ("\u0041\u0054\u0041\u004e",_aeccg .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_bccd ("\u0041\u0054\u0041N\u0048",_aeccg .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_bccd ("\u0043\u004f\u0053",_aeccg .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_bccd ("\u0043\u004f\u0053\u0048",_aeccg .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gebc ("\u0043\u004f\u0054",_aeccg .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gebc ("\u0043\u004f\u0054\u0048",_aeccg .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gebc ("\u0043\u0053\u0043",_aeccg .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gebc ("\u0043\u0053\u0043",_aeccg .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_bccd ("\u0045\u0058\u0050",_aeccg .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_bccd ("\u004c\u004e",_aeccg .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_bccd ("\u004c\u004f\u00471\u0030",_aeccg .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gebc ("\u0053\u0045\u0043",_aeccg .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gebc ("\u0053\u0045\u0043\u0048",_aeccg .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_bccd ("\u0053\u0049\u004e",_aeccg .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_bccd ("\u0053\u0049\u004e\u0048",_aeccg .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_bccd ("\u0053\u0051\u0052\u0054",_aeccg .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_bccd ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_afde float64 )float64 {return _aeccg .Sqrt (_afde *_aeccg .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_bccd ("\u0054\u0041\u004e",_aeccg .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_bccd ("\u0054\u0041\u004e\u0048",_aeccg .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// Reference returns a string reference value to a sheet.
func (_cdgga SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_cdgga ._fcgc };};var _fgea =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};type Reference struct{Type ReferenceType ;Value string ;};const _ddfd =57361;

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_befc :=args [0].Ref ;if _befc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_adefe ,_aged :=_deeb .ParseCellReference (_befc .Value );if _aged !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_befc .Value );};return MakeNumberResult (float64 (_adefe .ColumnIdx +1));};

// String returns a string representation for Bool.
func (_becf Bool )String ()string {if _becf ._cefc {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bfagb ,_gc ,_faadd :=_dca (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _faadd .Type ==ResultTypeError {return _faadd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgad :=_gc -_bfagb ;if _bgad > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_gfgb :=args [2].ValueNumber ;if _gfgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcba :=(100-_gfgb )/_gfgb ;_bdfe :=360/_bgad ;return MakeNumberResult (_fcba *_bdfe );};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_gbbcf :=len (args );if _gbbcf !=4&&_gbbcf !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efd ,_bab ,_eaee :=_dca (args [0],args [1],"\u0044\u0049\u0053\u0043");if _eaee .Type ==ResultTypeError {return _eaee ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cegca :=args [2].ValueNumber ;if _cegca <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efdf :=args [3].ValueNumber ;if _efdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbf :=0;if _gbbcf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbf =int (args [4].ValueNumber );if !_ecgf (_bgbf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_gdgd ,_eaee :=_acab (_efd ,_bab ,_bgbf );if _eaee .Type ==ResultTypeError {return _eaee ;};return MakeNumberResult ((_efdf -_cegca )/_efdf /_gdgd );};func _agbg (_bdff []Result ,_bgea bool )Result {_aef :="\u004d\u0049\u004e";if _bgea {_aef ="\u004d\u0049\u004e\u0041";};if len (_bdff )==0{return MakeErrorResult (_aef +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dddb :=_aeccg .MaxFloat64 ;for _ ,_ecce :=range _bdff {switch _ecce .Type {case ResultTypeNumber :if (_bgea ||!_ecce .IsBoolean )&&_ecce .ValueNumber < _dddb {_dddb =_ecce .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bfccb :=_agbg (_ecce .ListValues (),_bgea );if _bfccb .ValueNumber < _dddb {_dddb =_bfccb .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_fggb :=0.0;if _bgea {_fggb =_ecce .AsNumber ().ValueNumber ;};if _fggb < _dddb {_dddb =_fggb ;};default:_efcf .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_aef +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecce .Type );};};if _dddb ==_aeccg .MaxFloat64 {_dddb =0;};return MakeNumberResult (_dddb );};

// Value returns a string version of the result.
func (_fdcdc Result )Value ()string {switch _fdcdc .Type {case ResultTypeNumber :_cdbf :=_df .FormatFloat (_fdcdc .ValueNumber ,'f',-1,64);if len (_cdbf )> 12{_gfff :=12;for _cdce :=_gfff ;_cdce > 0&&_cdbf [_cdce ]=='0';_cdce --{_gfff --;};_cdbf =_cdbf [0:_gfff +1];};return _cdbf ;case ResultTypeError :return _fdcdc .ValueString ;case ResultTypeString :return _fdcdc .ValueString ;case ResultTypeList :if len (_fdcdc .ValueList )==0{return "";};return _fdcdc .ValueList [0].Value ();case ResultTypeArray :if len (_fdcdc .ValueArray )==0||len (_fdcdc .ValueArray [0])==0{return "";};return _fdcdc .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _aeagb (_dagd float64 )bool {return _dagd ==1||_dagd ==2||_dagd ==4};const _bbga =57370;func _dcge (_adfb ,_adac Reference )string {return _e .Sprintf ("\u0025\u0073\u003a%\u0073",_adfb .Value ,_adac .Value );};var _ccgac =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func (_dgbf *Lexer )lex (_gcbc _ebde .Reader ){_cebce ,_abgff ,_gafgf :=0,0,0;_bdc :=-1;_fegf ,_gadb ,_dfdd :=0,0,0;_ =_dfdd ;_dagcc :=1;_ =_dagcc ;_dba :=make ([]byte ,4096);_fccd :=false ;for !_fccd {_fggf :=0;if _fegf > 0{_fggf =_abgff -_fegf ;};_abgff =0;_defe ,_ceg :=_gcbc .Read (_dba [_fggf :]);if _defe ==0||_ceg !=nil {_fccd =true ;};_gafgf =_defe +_fggf ;if _gafgf < len (_dba ){_bdc =_gafgf ;};{_cebce =_babb ;_fegf =0;_gadb =0;_dfdd =0;};{var _gceef int ;var _dggdf uint ;if _abgff ==_gafgf {goto _agdaf ;};if _cebce ==0{goto _cefe ;};_bcdb :_gceef =int (_effg [_cebce ]);_dggdf =uint (_bffa [_gceef ]);_gceef ++;for ;_dggdf > 0;_dggdf --{_gceef ++;switch _bffa [_gceef -1]{case 2:_fegf =_abgff ;};};switch _cebce {case 30:switch _dba [_abgff ]{case 34:goto _ccgef ;case 35:goto _dgdgc ;case 36:goto _acag ;case 38:goto _addde ;case 39:goto _ccdgf ;case 40:goto _cafa ;case 41:goto _db ;case 42:goto _ggcbc ;case 43:goto _ebca ;case 44:goto _agd ;case 45:goto _ggace ;case 47:goto _baba ;case 58:goto _aagd ;case 59:goto _aagfc ;case 60:goto _cebg ;case 61:goto _edce ;case 62:goto _begef ;case 63:goto _gfba ;case 70:goto _bdgab ;case 84:goto _dfdbg ;case 92:goto _gbfc ;case 94:goto _bfbe ;case 95:goto _cf ;case 123:goto _fgfbc ;case 125:goto _cdffe ;};switch {case _dba [_abgff ]< 65:switch {case _dba [_abgff ]> 37:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _egdgd ;};case _dba [_abgff ]>=33:goto _gfba ;};case _dba [_abgff ]> 90:switch {case _dba [_abgff ]> 93:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _babba ;};case _dba [_abgff ]>=91:goto _gfba ;};default:goto _efaeg ;};goto _ggdf ;case 1:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _dcba ;case 123:goto _dcba ;case 125:goto _dcba ;};switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _dcba ;};case _dba [_abgff ]> 45:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _dcba ;};case _dba [_abgff ]>=58:goto _dcba ;};default:goto _dcba ;};goto _ggdf ;case 0:goto _cefe ;case 2:if _dba [_abgff ]==34{goto _cbaee ;};goto _ccgef ;case 31:if _dba [_abgff ]==34{goto _ccgef ;};goto _ceff ;case 3:switch _dba [_abgff ]{case 78:goto _cdgg ;case 82:goto _agcd ;};goto _gfba ;case 4:switch _dba [_abgff ]{case 47:goto _eeea ;case 85:goto _aaef ;};goto _gfba ;case 5:if _dba [_abgff ]==65{goto _egdfc ;};goto _gfba ;case 6:switch _dba [_abgff ]{case 76:goto _fdc ;case 77:goto _ddfaf ;};goto _gfba ;case 7:if _dba [_abgff ]==76{goto _ddfaf ;};goto _gfba ;case 8:if _dba [_abgff ]==33{goto _egdfc ;};goto _gfba ;case 9:if _dba [_abgff ]==69{goto _bgada ;};goto _gfba ;case 10:if _dba [_abgff ]==70{goto _acbb ;};goto _gfba ;case 11:if _dba [_abgff ]==33{goto _cbbgg ;};goto _gfba ;case 12:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _gfba ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=45{goto _gfba ;};case _dba [_abgff ]>=34:goto _gfba ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]< 65:if 58<=_dba [_abgff ]&&_dba [_abgff ]<=63{goto _gfba ;};case _dba [_abgff ]> 90:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _gfba ;};default:goto _cbff ;};default:goto _abfc ;};goto _ggdf ;case 13:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _gfba ;case 58:goto _ceacf ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=45{goto _gfba ;};case _dba [_abgff ]>=34:goto _gfba ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _gfba ;};case _dba [_abgff ]>=59:goto _gfba ;};default:goto _abfc ;};goto _ggdf ;case 14:if _dba [_abgff ]==36{goto _fgfgb ;};if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _afff ;};goto _dcba ;case 15:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _afff ;};goto _dcba ;case 32:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _afff ;};goto _cfgb ;case 16:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 47:goto _gfba ;case 58:goto _daagf ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 45:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _afgg ;};case _dba [_abgff ]>=34:goto _gfba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]> 90:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _gfba ;};case _dba [_abgff ]>=65:goto _cbff ;};default:goto _gfba ;};goto _ggdf ;case 17:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _dcba ;case 123:goto _dcba ;case 125:goto _dcba ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=45{goto _dcba ;};case _dba [_abgff ]>=34:goto _dcba ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _dcba ;};case _dba [_abgff ]>=58:goto _dcba ;};default:goto _afgg ;};goto _ggdf ;case 33:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _eegeb ;case 123:goto _eegeb ;case 125:goto _eegeb ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=45{goto _eegeb ;};case _dba [_abgff ]>=34:goto _eegeb ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _eegeb ;};case _dba [_abgff ]>=58:goto _eegeb ;};default:goto _afgg ;};goto _ggdf ;case 18:if _dba [_abgff ]==36{goto _cbae ;};if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _ecdd ;};goto _dcba ;case 19:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _ecdd ;};goto _dcba ;case 34:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _ecdd ;};goto _fba ;case 20:switch _dba [_abgff ]{case 39:goto _gfba ;case 42:goto _gfba ;case 47:goto _gfba ;case 58:goto _gfba ;case 63:goto _gfba ;};if 91<=_dba [_abgff ]&&_dba [_abgff ]<=93{goto _gfba ;};goto _gfeaa ;case 21:switch _dba [_abgff ]{case 39:goto _dbfc ;case 42:goto _gfba ;case 47:goto _gfba ;case 58:goto _gfba ;case 63:goto _gfba ;};if 91<=_dba [_abgff ]&&_dba [_abgff ]<=93{goto _gfba ;};goto _gfeaa ;case 22:if _dba [_abgff ]==33{goto _gffed ;};goto _gfba ;case 35:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _bceed ;case 58:goto _ceacf ;case 101:goto _deag ;case 123:goto _bdeb ;case 125:goto _bdeb ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=47{goto _bdeb ;};case _dba [_abgff ]>=34:goto _bdeb ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _bdeb ;};case _dba [_abgff ]>=59:goto _bdeb ;};default:goto _egdgd ;};goto _ggdf ;case 36:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _bdeb ;case 101:goto _deag ;case 123:goto _bdeb ;case 125:goto _bdeb ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=45{goto _bdeb ;};case _dba [_abgff ]>=34:goto _bdeb ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _bdeb ;};case _dba [_abgff ]>=58:goto _bdeb ;};default:goto _bceed ;};goto _ggdf ;case 23:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _bggc ;case 123:goto _bggc ;case 125:goto _bggc ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=45{goto _bggc ;};case _dba [_abgff ]>=34:goto _bggc ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _bggc ;};case _dba [_abgff ]>=58:goto _bggc ;};default:goto _dced ;};goto _ggdf ;case 37:switch _dba [_abgff ]{case 33:goto _cfeg ;case 47:goto _bdeb ;case 123:goto _bdeb ;case 125:goto _bdeb ;};switch {case _dba [_abgff ]< 48:switch {case _dba [_abgff ]> 35:if 37<=_dba [_abgff ]&&_dba [_abgff ]<=45{goto _bdeb ;};case _dba [_abgff ]>=34:goto _bdeb ;};case _dba [_abgff ]> 57:switch {case _dba [_abgff ]> 63:if 91<=_dba [_abgff ]&&_dba [_abgff ]<=94{goto _bdeb ;};case _dba [_abgff ]>=58:goto _bdeb ;};default:goto _dced ;};goto _ggdf ;case 38:switch _dba [_abgff ]{case 61:goto _adb ;case 62:goto _daba ;};goto _aefc ;case 39:if _dba [_abgff ]==61{goto _gad ;};goto _befg ;case 24:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _gfba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _gfba ;};default:goto _gfba ;};goto _ggdf ;case 40:switch _dba [_abgff ]{case 33:goto _cfeg ;case 40:goto _eec ;case 46:goto _ddef ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _ddef ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _ddef ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 41:switch _dba [_abgff ]{case 46:goto _acf ;case 92:goto _acf ;case 95:goto _acf ;};switch {case _dba [_abgff ]< 65:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _acf ;};case _dba [_abgff ]> 90:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _acf ;};default:goto _acf ;};goto _cgbb ;case 42:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 43:switch _dba [_abgff ]{case 33:goto _cfeg ;case 40:goto _eec ;case 46:goto _ddef ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _eegeb ;case 125:goto _eegeb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _eegeb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};default:goto _eegeb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _ddef ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _eegeb ;};default:goto _eegeb ;};goto _ggdf ;case 44:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _dcba ;case 125:goto _dcba ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _dcba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _dcba ;};default:goto _dcba ;};goto _ggdf ;case 25:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 65:goto _cgfa ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _gfba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 66<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _gfba ;};default:goto _gfba ;};goto _ggdf ;case 45:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 76:goto _ffdc ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 46:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 83:goto _bd ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 47:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 69:goto _cddcf ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 26:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 79:goto _bed ;case 82:goto _ffbf ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _gfba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _gfba ;};default:goto _gfba ;};goto _ggdf ;case 48:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 68:goto _fdfaef ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 49:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 79:goto _gecg ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 50:switch _dba [_abgff ]{case 33:goto _cfeg ;case 36:goto _fegd ;case 40:goto _eec ;case 46:goto _ddef ;case 58:goto _daagf ;case 85:goto _bd ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 59:switch {case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _bbeg ;};case _dba [_abgff ]>=34:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _cegc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 27:switch _dba [_abgff ]{case 46:goto _acf ;case 92:goto _acf ;case 95:goto _acf ;};switch {case _dba [_abgff ]< 65:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _acf ;};case _dba [_abgff ]> 90:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _acf ;};default:goto _acf ;};goto _gfba ;case 28:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _debd ;case 120:goto _dbec ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _gfba ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _gfba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _gfba ;};default:goto _gfba ;};goto _ggdf ;case 51:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _debd ;case 108:goto _fege ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 52:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _debd ;case 102:goto _fb ;case 110:goto _fada ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 53:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _debd ;case 110:goto _dcfe ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 54:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _gbca ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 55:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _ggaf ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _ggaf ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 56:switch _dba [_abgff ]{case 33:goto _cfeg ;case 40:goto _afbad ;case 46:goto _ggaf ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _ggaf ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _ggaf ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 57:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _debd ;case 109:goto _fcag ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 58:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _ddbd ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _cgbb ;case 125:goto _cgbb ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _cgbb ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _cgbb ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _cgbb ;};default:goto _cgbb ;};goto _ggdf ;case 59:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _dcbc ;case 123:goto _dcba ;case 125:goto _dcba ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _dcba ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _dcba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _dcbc ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _dcba ;};default:goto _dcba ;};goto _ggdf ;case 29:switch _dba [_abgff ]{case 33:goto _cfeg ;case 46:goto _debd ;case 92:goto _acf ;case 95:goto _debd ;case 123:goto _gfba ;case 125:goto _gfba ;};switch {case _dba [_abgff ]< 58:switch {case _dba [_abgff ]< 37:if 34<=_dba [_abgff ]&&_dba [_abgff ]<=35{goto _gfba ;};case _dba [_abgff ]> 47:if 48<=_dba [_abgff ]&&_dba [_abgff ]<=57{goto _debd ;};default:goto _gfba ;};case _dba [_abgff ]> 63:switch {case _dba [_abgff ]< 91:if 65<=_dba [_abgff ]&&_dba [_abgff ]<=90{goto _debd ;};case _dba [_abgff ]> 94:if 97<=_dba [_abgff ]&&_dba [_abgff ]<=122{goto _debd ;};default:goto _gfba ;};default:goto _gfba ;};goto _ggdf ;};_gfba :_cebce =0;goto _fdec ;_ggdf :_cebce =1;goto _fdec ;_ccgef :_cebce =2;goto _fdec ;_dgdgc :_cebce =3;goto _fdec ;_cdgg :_cebce =4;goto _fdec ;_eeea :_cebce =5;goto _fdec ;_aaef :_cebce =6;goto _fdec ;_fdc :_cebce =7;goto _fdec ;_ddfaf :_cebce =8;goto _fdec ;_agcd :_cebce =9;goto _fdec ;_bgada :_cebce =10;goto _fdec ;_acbb :_cebce =11;goto _fdec ;_acag :_cebce =12;goto _fdec ;_abfc :_cebce =13;goto _fdec ;_ceacf :_cebce =14;goto _fdec ;_fgfgb :_cebce =15;goto _fdec ;_cbff :_cebce =16;goto _fdec ;_fegd :_cebce =17;goto _fdec ;_daagf :_cebce =18;goto _fdec ;_cbae :_cebce =19;goto _fdec ;_ccdgf :_cebce =20;goto _fdec ;_gfeaa :_cebce =21;goto _fdec ;_dbfc :_cebce =22;goto _fdec ;_deag :_cebce =23;goto _fdec ;_efaeg :_cebce =24;goto _fdec ;_bdgab :_cebce =25;goto _fdec ;_dfdbg :_cebce =26;goto _fdec ;_gbfc :_cebce =27;goto _fdec ;_cf :_cebce =28;goto _fdec ;_babba :_cebce =29;goto _fdec ;_dcba :_cebce =30;goto _bbg ;_cfeg :_cebce =30;goto _cabbf ;_egdfc :_cebce =30;goto _ddaf ;_cbbgg :_cebce =30;goto _cdeab ;_gffed :_cebce =30;goto _fbce ;_bggc :_cebce =30;goto _fdbg ;_eec :_cebce =30;goto _bdb ;_addde :_cebce =30;goto _edbee ;_cafa :_cebce =30;goto _agc ;_db :_cebce =30;goto _egaa ;_ggcbc :_cebce =30;goto _dcbd ;_ebca :_cebce =30;goto _beagc ;_agd :_cebce =30;goto _ceb ;_ggace :_cebce =30;goto _edbb ;_baba :_cebce =30;goto _afbg ;_aagd :_cebce =30;goto _eaaf ;_aagfc :_cebce =30;goto _ecfa ;_edce :_cebce =30;goto _egbb ;_bfbe :_cebce =30;goto _eege ;_fgfbc :_cebce =30;goto _bgfag ;_cdffe :_cebce =30;goto _gcdc ;_ceff :_cebce =30;goto _gb ;_cfgb :_cebce =30;goto _gbdee ;_eegeb :_cebce =30;goto _debcd ;_fba :_cebce =30;goto _fcdd ;_bdeb :_cebce =30;goto _ecacc ;_aefc :_cebce =30;goto _ecd ;_adb :_cebce =30;goto _eeaa ;_daba :_cebce =30;goto _fbdfd ;_befg :_cebce =30;goto _cfbaf ;_gad :_cebce =30;goto _gaab ;_cgbb :_cebce =30;goto _cfagg ;_afbad :_cebce =30;goto _geag ;_cbaee :_cebce =31;goto _bfbb ;_afff :_cebce =32;goto _fdec ;_afgg :_cebce =33;goto _aaf ;_ecdd :_cebce =34;goto _fdec ;_egdgd :_cebce =35;goto _edecg ;_bceed :_cebce =36;goto _edecg ;_dced :_cebce =37;goto _edecg ;_cebg :_cebce =38;goto _fdec ;_begef :_cebce =39;goto _fdec ;_ddef :_cebce =40;goto _defb ;_acf :_cebce =41;goto _fdec ;_debd :_cebce =42;goto _defb ;_bbeg :_cebce =43;goto _aaf ;_cegc :_cebce =44;goto _defb ;_cddcf :_cebce =44;goto _bbgd ;_gecg :_cebce =44;goto _dcff ;_cgfa :_cebce =45;goto _defb ;_ffdc :_cebce =46;goto _defb ;_bd :_cebce =47;goto _defb ;_bed :_cebce =48;goto _defb ;_fdfaef :_cebce =49;goto _defb ;_ffbf :_cebce =50;goto _defb ;_dbec :_cebce =51;goto _defb ;_fege :_cebce =52;goto _defb ;_fb :_cebce =53;goto _defb ;_dcfe :_cebce =54;goto _defb ;_gbca :_cebce =55;goto _defb ;_ggaf :_cebce =56;goto _defb ;_fada :_cebce =57;goto _defb ;_fcag :_cebce =58;goto _defb ;_ddbd :_cebce =59;goto _defb ;_dcbc :_cebce =59;goto _dcd ;_ddaf :_gceef =3;goto _gadbf ;_cdeab :_gceef =5;goto _gadbf ;_cabbf :_gceef =7;goto _gadbf ;_fbce :_gceef =9;goto _gadbf ;_bdb :_gceef =11;goto _gadbf ;_geag :_gceef =13;goto _gadbf ;_edbee :_gceef =15;goto _gadbf ;_bgfag :_gceef =17;goto _gadbf ;_gcdc :_gceef =19;goto _gadbf ;_agc :_gceef =21;goto _gadbf ;_egaa :_gceef =23;goto _gadbf ;_beagc :_gceef =25;goto _gadbf ;_edbb :_gceef =27;goto _gadbf ;_dcbd :_gceef =29;goto _gadbf ;_afbg :_gceef =31;goto _gadbf ;_eege :_gceef =33;goto _gadbf ;_egbb :_gceef =35;goto _gadbf ;_eeaa :_gceef =37;goto _gadbf ;_gaab :_gceef =39;goto _gadbf ;_fbdfd :_gceef =41;goto _gadbf ;_eaaf :_gceef =43;goto _gadbf ;_ecfa :_gceef =45;goto _gadbf ;_ceb :_gceef =47;goto _gadbf ;_ecacc :_gceef =49;goto _gadbf ;_debcd :_gceef =51;goto _gadbf ;_gbdee :_gceef =53;goto _gadbf ;_fcdd :_gceef =55;goto _gadbf ;_cfagg :_gceef =57;goto _gadbf ;_gb :_gceef =59;goto _gadbf ;_ecd :_gceef =61;goto _gadbf ;_cfbaf :_gceef =63;goto _gadbf ;_fdbg :_gceef =65;goto _gadbf ;_bbg :_gceef =67;goto _gadbf ;_bbgd :_gceef =72;goto _gadbf ;_edecg :_gceef =75;goto _gadbf ;_aaf :_gceef =78;goto _gadbf ;_dcff :_gceef =81;goto _gadbf ;_dcd :_gceef =84;goto _gadbf ;_defb :_gceef =87;goto _gadbf ;_bfbb :_gceef =90;goto _gadbf ;_gadbf :_dggdf =uint (_bffa [_gceef ]);_gceef ++;for ;_dggdf > 0;_dggdf --{_gceef ++;switch _bffa [_gceef -1]{case 3:_gadb =_abgff +1;case 4:_dfdd =1;case 5:_dfdd =2;case 6:_dfdd =3;case 7:_dfdd =4;case 8:_dfdd =11;case 9:_dfdd =14;case 10:_dfdd =15;case 11:_gadb =_abgff +1;{_dgbf .emit (_acfgd ,_dba [_fegf :_gadb ]);};case 12:_gadb =_abgff +1;{_dgbf .emit (_afa ,_dba [_fegf :_gadb ]);};case 13:_gadb =_abgff +1;{_dgbf .emit (_eafb ,_dba [_fegf :_gadb -1]);};case 14:_gadb =_abgff +1;{_dgbf .emit (_eafb ,_dba [_fegf +1:_gadb -2]);};case 15:_gadb =_abgff +1;{_dgbf .emit (_begd ,_dba [_fegf :_gadb -1]);};case 16:_gadb =_abgff +1;{_dgbf .emit (_begd ,_dba [_fegf :_gadb -1]);};case 17:_gadb =_abgff +1;{_dgbf .emit (_cfc ,_dba [_fegf :_gadb ]);};case 18:_gadb =_abgff +1;{_dgbf .emit (_ccdg ,_dba [_fegf :_gadb ]);};case 19:_gadb =_abgff +1;{_dgbf .emit (_ddfd ,_dba [_fegf :_gadb ]);};case 20:_gadb =_abgff +1;{_dgbf .emit (_bbd ,_dba [_fegf :_gadb ]);};case 21:_gadb =_abgff +1;{_dgbf .emit (_bcgg ,_dba [_fegf :_gadb ]);};case 22:_gadb =_abgff +1;{_dgbf .emit (_babad ,_dba [_fegf :_gadb ]);};case 23:_gadb =_abgff +1;{_dgbf .emit (_cggg ,_dba [_fegf :_gadb ]);};case 24:_gadb =_abgff +1;{_dgbf .emit (_cdcag ,_dba [_fegf :_gadb ]);};case 25:_gadb =_abgff +1;{_dgbf .emit (_bfbfd ,_dba [_fegf :_gadb ]);};case 26:_gadb =_abgff +1;{_dgbf .emit (_cddbe ,_dba [_fegf :_gadb ]);};case 27:_gadb =_abgff +1;{_dgbf .emit (_ebab ,_dba [_fegf :_gadb ]);};case 28:_gadb =_abgff +1;{_dgbf .emit (_efgb ,_dba [_fegf :_gadb ]);};case 29:_gadb =_abgff +1;{_dgbf .emit (_feae ,_dba [_fegf :_gadb ]);};case 30:_gadb =_abgff +1;{_dgbf .emit (_fbdc ,_dba [_fegf :_gadb ]);};case 31:_gadb =_abgff +1;{_dgbf .emit (_dddgg ,_dba [_fegf :_gadb ]);};case 32:_gadb =_abgff +1;{_dgbf .emit (_gafa ,_dba [_fegf :_gadb ]);};case 33:_gadb =_abgff +1;{_dgbf .emit (_begga ,_dba [_fegf :_gadb ]);};case 34:_gadb =_abgff ;_abgff --;{_dgbf .emit (_baee ,_dba [_fegf :_gadb ]);};case 35:_gadb =_abgff ;_abgff --;{_dgbf .emit (_affbe ,_dba [_fegf :_gadb ]);};case 36:_gadb =_abgff ;_abgff --;{_dgbf .emit (_ebfe ,_dba [_fegf :_gadb ]);};case 37:_gadb =_abgff ;_abgff --;{_dgbf .emit (_fdcd ,_dba [_fegf :_gadb ]);};case 38:_gadb =_abgff ;_abgff --;{_dgbf .emit (_bdgeg ,_dba [_fegf :_gadb ]);};case 39:_gadb =_abgff ;_abgff --;{_dgbf .emit (_fbgbg ,_dba [_fegf +1:_gadb -1]);};case 40:_gadb =_abgff ;_abgff --;{_dgbf .emit (_bbga ,_dba [_fegf :_gadb ]);};case 41:_gadb =_abgff ;_abgff --;{_dgbf .emit (_geg ,_dba [_fegf :_gadb ]);};case 42:_abgff =(_gadb )-1;{_dgbf .emit (_baee ,_dba [_fegf :_gadb ]);};case 43:switch _dfdd {case 0:{_cebce =0;goto _fdec ;};case 1:{_abgff =(_gadb )-1;_dgbf .emit (_edfg ,_dba [_fegf :_gadb ]);};case 2:{_abgff =(_gadb )-1;_dgbf .emit (_baee ,_dba [_fegf :_gadb ]);};case 3:{_abgff =(_gadb )-1;_dgbf .emit (_affbe ,_dba [_fegf :_gadb ]);};case 4:{_abgff =(_gadb )-1;_dgbf .emit (_dabb ,_dba [_fegf :_gadb ]);};case 11:{_abgff =(_gadb )-1;_dgbf .emit (_aaeb ,_dba [_fegf :_gadb ]);};case 14:{_abgff =(_gadb )-1;_dgbf .emit (_bdgeg ,_dba [_fegf :_gadb ]);};case 15:{_abgff =(_gadb )-1;_dgbf .emit (_fbgbg ,_dba [_fegf +1:_gadb -1]);};};};};goto _fdec ;_fdec :_gceef =int (_b [_cebce ]);_dggdf =uint (_bffa [_gceef ]);_gceef ++;for ;_dggdf > 0;_dggdf --{_gceef ++;switch _bffa [_gceef -1]{case 0:_fegf =0;case 1:_dfdd =0;};};if _cebce ==0{goto _cefe ;};if _abgff ++;_abgff !=_gafgf {goto _bcdb ;};_agdaf :{};if _abgff ==_bdc {switch _cebce {case 1:goto _dcba ;case 2:goto _dcba ;case 31:goto _ceff ;case 14:goto _dcba ;case 15:goto _dcba ;case 32:goto _cfgb ;case 17:goto _dcba ;case 33:goto _eegeb ;case 18:goto _dcba ;case 19:goto _dcba ;case 34:goto _fba ;case 35:goto _bdeb ;case 36:goto _bdeb ;case 23:goto _bggc ;case 37:goto _bdeb ;case 38:goto _aefc ;case 39:goto _befg ;case 40:goto _cgbb ;case 41:goto _cgbb ;case 42:goto _cgbb ;case 43:goto _eegeb ;case 44:goto _dcba ;case 45:goto _cgbb ;case 46:goto _cgbb ;case 47:goto _cgbb ;case 48:goto _cgbb ;case 49:goto _cgbb ;case 50:goto _cgbb ;case 51:goto _cgbb ;case 52:goto _cgbb ;case 53:goto _cgbb ;case 54:goto _cgbb ;case 55:goto _cgbb ;case 56:goto _cgbb ;case 57:goto _cgbb ;case 58:goto _cgbb ;case 59:goto _dcba ;};};_cefe :{};};if _fegf > 0{copy (_dba [0:],_dba [_fegf :]);};};_ =_bdc ;if _cebce ==_cbfc {_dgbf .emit (_dgg ,nil );};close (_dgbf ._edbd );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_efedf :=len (args );if _efedf !=2&&_efedf !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dadf ,_ffged :=_bdee (args [0],args [1],"\u0058\u0049\u0052\u0052");if _ffged .Type ==ResultTypeError {return _ffged ;};_gfcef :=_dadf ._aff ;_gff :=_dadf ._fcbc ;_bdgc :=0.1;if _efedf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdgc =args [2].ValueNumber ;if _bdgc <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _eea (_gfcef ,_gff ,_bdgc );};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_abeed :=len (args );if _abeed < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cac :=args [0].ValueNumber ;if _cac ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_feaf :=[]float64 {};for _ ,_degaa :=range args [1:]{switch _degaa .Type {case ResultTypeNumber :_feaf =append (_feaf ,_degaa .ValueNumber );case ResultTypeArray ,ResultTypeList :_dcdde :=_ddd (_degaa );for _ ,_bfeag :=range _dcdde {for _ ,_aada :=range _bfeag {if _aada .Type ==ResultTypeNumber &&!_aada .IsBoolean {_feaf =append (_feaf ,_aada .ValueNumber );};};};};};_eead :=0.0;for _acbeb ,_begdd :=range _feaf {_eead +=_begdd /_aeccg .Pow (1+_cac ,float64 (_acbeb )+1);};return MakeNumberResult (_eead );};func (_ffe *Lexer )emit (_bcff tokenType ,_fdfc []byte ){if _ccad {_e .Println ("\u0065\u006d\u0069\u0074",_bcff ,_adbfb (string (_fdfc )));};_ffe ._edbd <-&node {_bcff ,string (_fdfc )};};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaegg :=args [0].AsNumber ();if _eaegg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_aeccg .Pi /180.0*_eaegg .ValueNumber );};

// HasFormula returns FALSE for the invalid reference context.
func (_cgbg *ivr )HasFormula (cellRef string )bool {return false };func _egabc (_fbdg []string ,_ebbb int )string {return _df .Itoa (len (_fbdg [len (_fbdg )-1-_ebbb ]))};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_feb (args ,_eaefe ))};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _gfcfe (_ccdae []Result ,_bfba bool )Result {var _fcfcd string ;if _bfba {_fcfcd ="\u004c\u0041\u0052G\u0045";}else {_fcfcd ="\u0053\u004d\u0041L\u004c";};if len (_ccdae )!=2{return MakeErrorResult (_fcfcd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdcea :=_ccdae [0];var _beefd [][]Result ;switch _fdcea .Type {case ResultTypeArray :_beefd =_fdcea .ValueArray ;case ResultTypeList :_beefd =[][]Result {_fdcea .ValueList };default:return MakeErrorResult (_fcfcd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_beefd )==0{return MakeErrorResult (_fcfcd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _ccdae [1].Type !=ResultTypeNumber {return MakeErrorResult (_fcfcd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_bbegf :=_ccdae [1].ValueNumber ;if _bbegf < 1{return MakeErrorResultType (ErrorTypeNum ,_fcfcd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_bfefg :=int (_bbegf );if float64 (_bfefg )!=_bbegf {return MakeErrorResultType (ErrorTypeNum ,_fcfcd +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_bfad :=[]float64 {};for _ ,_bbffdc :=range _beefd {for _ ,_cfedg :=range _bbffdc {if _cfedg .Type ==ResultTypeNumber {_bfad =append (_bfad ,_cfedg .ValueNumber );};};};if _bfefg > len (_bfad ){return MakeErrorResultType (ErrorTypeNum ,_fcfcd +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_agfge :=_bgadc .MergeSort (_bfad );if _bfba {return MakeNumberResult (_agfge [len (_agfge )-_bfefg ]);}else {return MakeNumberResult (_agfge [_bfefg -1]);};};func _efgf (_beba ,_facef Result ,_ccgbb ,_bbbd bool )cmpResult {_beba =_beba .AsNumber ();_facef =_facef .AsNumber ();if _beba .Type !=_facef .Type {return _gdba ;};if _beba .Type ==ResultTypeNumber {if _beba .ValueNumber ==_facef .ValueNumber {return _fcgf ;};if _beba .ValueNumber < _facef .ValueNumber {return _bfdb ;};return _dadbb ;};if _beba .Type ==ResultTypeString {_ecgag :=_beba .ValueString ;_dfda :=_facef .ValueString ;if !_ccgbb {_ecgag =_aea .ToLower (_ecgag );_dfda =_aea .ToLower (_dfda );};if _bbbd {_degf :=_eg .Match (_dfda ,_ecgag );if _degf {return _fcgf ;}else {return _dadbb ;};};return cmpResult (_aea .Compare (_ecgag ,_dfda ));};if _beba .Type ==ResultTypeEmpty {return _fcgf ;};if _beba .Type ==ResultTypeList {if len (_beba .ValueList )< len (_facef .ValueList ){return _bfdb ;};if len (_beba .ValueList )> len (_facef .ValueList ){return _dadbb ;};for _gfbab :=range _beba .ValueList {_dagg :=_efgf (_beba .ValueList [_gfbab ],_facef .ValueList [_gfbab ],_ccgbb ,_bbbd );if _dagg !=_fcgf {return _dagg ;};};return _fcgf ;};if _beba .Type ==ResultTypeList {if len (_beba .ValueArray )< len (_facef .ValueArray ){return _bfdb ;};if len (_beba .ValueArray )> len (_facef .ValueArray ){return _dadbb ;};for _dc :=range _beba .ValueArray {_baaf :=_beba .ValueArray [_dc ];_beae :=_beba .ValueArray [_dc ];if len (_baaf )< len (_beae ){return _bfdb ;};if len (_baaf )> len (_beae ){return _dadbb ;};for _ebac :=range _baaf {_cgfc :=_efgf (_baaf [_ebac ],_beae [_ebac ],_ccgbb ,_bbbd );if _cgfc !=_fcgf {return _cgfc ;};};};return _fcgf ;};return _gdba ;};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_fgggd :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_adc :=args [1].ValueNumber !=0;_aebgc :=_adda (args [2:],[]string {},_adc );return MakeStringResult (_aea .Join (_aebgc ,_fgggd ));};func _bfeg (_cgdc ,_cbce ,_bfgd ,_efcaa float64 ,_debdc int )float64 {var _fgf float64 ;if _cgdc ==0{_fgf =_efcaa +_bfgd *_cbce ;}else {_agdb :=_aeccg .Pow (1+_cgdc ,_cbce );if _debdc ==1{_fgf =_efcaa *_agdb +_bfgd *(1+_cgdc )*(_agdb -1)/_cgdc ;}else {_fgf =_efcaa *_agdb +_bfgd *(_agdb -1)/_cgdc ;};};return -_fgf ;};func (_cfcg tokenType )String ()string {return _faaf (int (_cfcg ))};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {return PrefixRangeExpr {pfx ,from ,to }};

// Reference returns a string reference value to an expression with prefix.
func (_ffea PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_ffec :=_ffea ._ccaa .Reference (ctx ,ev );_edbfe :=_ffea ._bdcg .Reference (ctx ,ev );if _ffec .Type ==ReferenceTypeSheet &&_edbfe .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_ffec .Value +"\u0021"+_edbfe .Value };};return ReferenceInvalid ;};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_cecf :=len (args );if _cecf !=4&&_cecf !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_egbgb ,_ddcd ,_gbdf :=_dca (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _gbdf .Type ==ResultTypeError {return _gbdf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccaee :=args [2].ValueNumber ;if _ccaee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_efac :=args [3].ValueNumber ;if _efac <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_gcdb :=0;if _cecf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcdb =int (args [4].ValueNumber );if !_ecgf (_gcdb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_ece ,_gbdf :=_acab (_egbgb ,_ddcd ,_gcdb );if _gbdf .Type ==ResultTypeError {return _gbdf ;};return MakeNumberResult (_efac *(1-_ccaee *_ece ));};const _dec int =30;

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_feb (args ,_edfd ))};const _cbfc int =0;

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_fgfe ConstArrayExpr )Update (q *_efad .UpdateQuery )Expression {return _fgfe };

// String returns a string representation of a horizontal range with prefix.
func (_deab PrefixHorizontalRange )String ()string {return _e .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_deab ._cadfc .String (),_deab ._bgdc ,_deab ._efce );};func _fdfd (_gcc string )bool {for _ ,_ccbf :=range _bcda {_cbfb :=_ccbf .FindStringSubmatch (_gcc );if len (_cbfb )> 1{return true ;};};return false ;};func (_abcg *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};type noCache struct{};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_deeg ,_dadb :=_efff ("\u0046\u0049\u004e\u0044",args );if _dadb .Type !=ResultTypeEmpty {return _dadb ;};_ca :=_aea .ToLower (_deeg ._efcd );if _ca ==""{return MakeNumberResult (1.0);};_fagcc :=_aea .ToLower (_deeg ._eced );_deba :=_deeg ._afgfa ;_cb :=1;for _afdea :=range _fagcc {if _cb < _deba {_cb ++;continue ;};_afae :=_eg .Index (_ca ,_fagcc [_afdea :]);if _afae ==0{return MakeNumberResult (float64 (_cb ));};_cb ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_eddbg string ,_dbdg Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_eecd string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_ecb .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_begb int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_cgd string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dbff string )string ;

// GetFormat returns if cell is protected.
GetLocked (_fcgfd string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_ccag string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_gbge string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_ccfeg ,_aafd int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_gaagd string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_efcg string ,_fbg bool );

// NamedRange returns a named range.
NamedRange (_dfdc string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_febg ,_da uint32 );};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_dcdd ,_ddbg :=_cfag (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _ddbg .Type ==ResultTypeError {return _ddbg ;};_cafgg :=_dcdd ._fdba ;_bcdf :=_dcdd ._dedf ;_agfcd :=_dcdd ._cbcdd ;_aeea :=_dcdd ._adgea ;_dce :=_dcdd ._fead ;_dfa :=_dcdd ._ccce ;_gdab :=_baafc (_cafgg ,_bcdf ,_agfcd ,0,_dfa );_addg :=0.0;if _aeea ==1{if _dfa ==0{_addg =-_agfcd ;_aeea ++;};};for _cbeccb :=_aeea ;_cbeccb <=_dce ;_cbeccb ++{if _dfa ==1{_addg +=_bfeg (_cafgg ,_cbeccb -2,_gdab ,_agfcd ,1)-_gdab ;}else {_addg +=_bfeg (_cafgg ,_cbeccb -1,_gdab ,_agfcd ,0);};};_addg *=_cafgg ;return MakeNumberResult (_addg );};

// Reference returns a string reference value to a range with prefix.
func (_bbed PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_gbba :=_bbed ._ddgb .Reference (ctx ,ev );_agcac :=_bbed ._bgddf .Reference (ctx ,ev );_eebdd :=_bbed ._ccecd .Reference (ctx ,ev );if _gbba .Type ==ReferenceTypeSheet &&_agcac .Type ==ReferenceTypeCell &&_eebdd .Type ==ReferenceTypeCell {return MakeRangeReference (_ccd (_gbba ,_agcac ,_eebdd ));};return ReferenceInvalid ;};func _bfgg (_gbae ,_dfbb ,_bdac int )int {if _gbae > _dfbb {return 0;};if _gfga (_bdac ){return (_dfbb -_gbae +1)*360;};_bebc :=0;for _acbc :=_gbae ;_acbc <=_dfbb ;_acbc ++{_bagc :=365;if _cef (_acbc ){_bagc =366;};_bebc +=_bagc ;};return _bebc ;};var _eadf string =string ([]byte {92});

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_efc ,_acdf :=_efff ("\u0046\u0049\u004e\u0044",args );if _acdf .Type !=ResultTypeEmpty {return _acdf ;};_cgeg :=_aea .ToLower (_efc ._efcd );_gf :=_aea .ToLower (_efc ._eced );if _cgeg ==""{return MakeNumberResult (1.0);};_bfab :=_efc ._afgfa -1;_ada :=1;_baffc :=0;for _fbcg :=range _gf {if _fbcg !=0{_agacc :=1;if _fbcg -_baffc > 1{_agacc =2;};_ada +=_agacc ;};if _ada > _bfab {_cccg :=_eg .Index (_cgeg ,_gf [_fbcg :]);if _cccg ==0{return MakeNumberResult (float64 (_ada ));};};_baffc =_fbcg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};const _bfbfd =57367;

// String returns a string representation of Number.
func (_aefcf Number )String ()string {return _df .FormatFloat (_aefcf ._bdeec ,'f',-1,64)};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fde :=args [0].AsString ();if _fde .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbcg :=_aafb .Buffer {};_bfde :=false ;_dacee :=false ;_ebbgd :=0;for _ ,_fggd :=range _fde .ValueString {_bcdea :=_fggd ==' ';if _bcdea {if !_bfde {continue ;};if !_dacee {_ebbgd ++;_dbcg .WriteRune (_fggd );};}else {_ebbgd =0;_bfde =true ;_dbcg .WriteRune (_fggd );};_dacee =_bcdea ;};_dbcg .Truncate (_dbcg .Len ()-_ebbgd );return MakeStringResult (_dbcg .String ());};func (_daec VerticalRange )verticalRangeReference ()string {return _e .Sprintf ("\u0025\u0073\u003a%\u0073",_daec ._gcff ,_daec ._eeedf );};func _ddbe (_cbeb float64 )float64 {return float64 (int (_cbeb +0.5))};func (_aefb *evCache )GetFromCache (key string )(Result ,bool ){_aefb ._fdab .Lock ();_gcbg ,_abca :=_aefb ._cfed [key ];_aefb ._fdab .Unlock ();return _gcbg ,_abca ;};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_eegg :=args [0];if _eegg .Type !=ResultTypeNumber &&_eegg .Type !=ResultTypeString &&_eegg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_gfcg :=args [1].ValueString ;switch _eegg .Type {case ResultTypeNumber :return MakeStringResult (_dagc .Number (_eegg .ValueNumber ,_gfcg ));case ResultTypeString :return MakeStringResult (_dagc .String (_eegg .ValueString ,_gfcg ));case ResultTypeEmpty :return MakeStringResult (_dagc .Number (0,_gfcg ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};var _bac float64 =25569.0;func _gg (_dgebb ,_ddgg int )int {if _ddgg ==2&&_cef (_dgebb ){return 29;}else {return _ebg [_ddgg -1];};};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_cc *ivr )GetLabelPrefix (cellRef string )string {return ""};

// String returns a string representation of a vertical range.
func (_fcff VerticalRange )String ()string {return _fcff .verticalRangeReference ()};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_affg ,_agfbd :=_ccfg (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _agfbd .Type ==ResultTypeError {return _agfbd ;};_ccgb :=_affg ._ccae ;_faac :=_affg ._adgc ;_ebgb :=_affg ._dcfc ;_eedf :=_affg ._cead ;_fgfcc :=_affg ._gbgd ;_eaa :=_affg ._gfebb ;if _eaa >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_cbcb :=_affg ._fbb ;_fbccbe :=1.0/_eaa ;_cge :=2.5;if _fbccbe < 3{_cge =1;}else if _fbccbe < 5{_cge =1.5;}else if _fbccbe <=6{_cge =2;};_eaa *=_cge ;_ddae ,_gaff :=_acab (_faac ,_ebgb ,_cbcb );if _gaff .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_gcf :=_ddbe (_ddae *_eaa *_ccgb );_ccgb -=_gcf ;_bbfbd :=_ccgb -_eedf ;for _dgef :=0;_dgef < _fgfcc ;_dgef ++{_gcf =_ddbe (_eaa *_ccgb );_bbfbd -=_gcf ;if _bbfbd < 0{switch _fgfcc -_dgef {case 0:case 1:return MakeNumberResult (_ddbe (_ccgb *0.5));default:return MakeNumberResult (0);};};_ccgb -=_gcf ;};return MakeNumberResult (_gcf );};func _gdbd (_afaga [][]Result ,_aabfg int )[][]Result {_aeagd :=[][]Result {};for _adcbfc :=range _afaga {if _adcbfc ==0{continue ;};_dbd :=[]Result {};for _cbcd :=range _afaga {if _cbcd ==_aabfg {continue ;};_dbd =append (_dbd ,_afaga [_adcbfc ][_cbcd ]);};_aeagd =append (_aeagd ,_dbd );};return _aeagd ;};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dbgg :=args [0];switch _dbgg .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_befb :=_fbccg (_dbgg .ValueNumber );return MakeNumberResult (float64 (_befb .Day ()));case ResultTypeString :_afg :=_aea .ToLower (_dbgg .ValueString );if !_fdfd (_afg ){_ ,_ ,_ ,_ ,_bffg ,_eaba :=_ddfa (_afg );if _eaba .Type ==ResultTypeError {_eaba .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _eaba ;};if _bffg {return MakeNumberResult (0);};};_ ,_ ,_eegd ,_ ,_ccda :=_ddcc (_afg );if _ccda .Type ==ResultTypeError {return _ccda ;};return MakeNumberResult (float64 (_eegd ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};type cmpResult int8 ;func init (){_gfae ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgfaa :=args [0];if _fgfaa .Type !=ResultTypeArray &&_fgfaa .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aab :=_ddd (_fgfaa );_ggda :=args [2];if _ggda .Type !=ResultTypeArray &&_ggda .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gefe :=_ddd (_ggda );_bcdeb :=_ggcga (args [1]);_edda :=0.0;for _gcd ,_fadf :=range _aab {for _ffbd ,_edbg :=range _fadf {if _cdbdg (_edbg ,_bcdeb ){_edda +=_gefe [_gcd ][_ffbd ].ValueNumber ;};};};return MakeNumberResult (_edda );};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _agbg (args ,false )};

// Reference returns a string reference value to a vertical range.
func (_efdcb VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_efdcb .verticalRangeReference ()};};func _dfcd (_caa []Result ,_cfef bool )(float64 ,float64 ){_dffa :=0.0;_aabd :=0.0;for _ ,_dagdc :=range _caa {switch _dagdc .Type {case ResultTypeNumber :if _cfef ||!_dagdc .IsBoolean {_aabd +=_dagdc .ValueNumber ;_dffa ++;};case ResultTypeList ,ResultTypeArray :_eeddc ,_aeee :=_dfcd (_dagdc .ListValues (),_cfef );_aabd +=_eeddc ;_dffa +=_aeee ;case ResultTypeString :if _cfef {_dffa ++;};case ResultTypeEmpty :};};return _aabd ,_dffa ;};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccege :=args [0];switch _ccege .Type {case ResultTypeError :return _ccege ;case ResultTypeNumber ,ResultTypeString :return _deed (args [0]);case ResultTypeList :_cgbbd :=_ccege .ValueList ;_dagf :=[]Result {};for _ ,_fag :=range _cgbbd {_cfce :=_deed (_fag );if _cfce .Type ==ResultTypeError {return _cfce ;};_dagf =append (_dagf ,_cfce );};return MakeListResult (_dagf );case ResultTypeArray :_faee :=_ccege .ValueArray ;_eeafd :=[][]Result {};for _ ,_cfbb :=range _faee {_fefge :=[]Result {};for _ ,_ffgag :=range _cfbb {_bcd :=_deed (_ffgag );if _bcd .Type ==ResultTypeError {return _bcd ;};_fefge =append (_fefge ,_bcd );};_eeafd =append (_eeafd ,_fefge );};return MakeArrayResult (_eeafd );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_cbbc ,_bfeb :=_fgad ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _bfeb .Type !=ResultTypeEmpty {return _bfeb ;};_ffff :=_cbbc ._ceec ;_ccge :=_cbbc ._ccb ;_ffc :=_cbbc ._fgd ;_ebdgcf :=_cbbc ._ebcg ;_bbcg :=len (_ffff );if _ccge > _bbcg {_ccge =_bbcg ;};_eag :=_ccge +_ffc ;if _eag > _bbcg {_eag =_bbcg ;};_adcbf :=_ffff [0:_ccge ]+_ebdgcf +_ffff [_eag :];return MakeStringResult (_adcbf );};func (_bdbd *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_gcff ,_eeedf string };var _bffa []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};const _dfbgf =57344;

// String returns an empty string for Error.
func (_edfe Error )String ()string {return ""};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};var _adab =[...]struct{_dabe int ;_dfdb int ;_gdfa string ;}{};var _eeddf =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};func _gegd (_afda float64 ,_bffbb *criteriaRegex )bool {_abegf ,_gbde :=_df .ParseFloat (_bffbb ._dcfeb ,64);if _gbde !=nil {return false ;};switch _bffbb ._cebf {case _bdgf :return _afda ==_abegf ;case _cedc :return _afda <=_abegf ;case _bbcf :return _afda >=_abegf ;case _deada :return _afda < _abegf ;case _ddea :return _afda > _abegf ;};return false ;};

// Negate is a negate expression like -A1.
type Negate struct{_gaea Expression };

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cecfe :=args [0].AsString ();if _cecfe .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cebc :=_aafb .Buffer {};for _ ,_adgg :=range _cecfe .ValueString {if _adcf .IsPrint (_adgg ){_cebc .WriteRune (_adgg );};};return MakeStringResult (_cebc .String ());};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_ebc ,_cbadb :=_dfcd (args ,false );if _cbadb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_ebc /_cbadb );};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfedgc :=args [0].ValueNumber ;if _cfedgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_bb :=float64 (int (args [1].ValueNumber ));if _bb < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_aeccg .Pow ((1+_cfedgc /_bb ),_bb )-1);};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_effb :=_efca (args );_bbfcb .Float64s (_effb );var _caccc float64 ;if len (_effb )%2==0{_caccc =(_effb [len (_effb )/2-1]+_effb [len (_effb )/2])/2;}else {_caccc =_effb [len (_effb )/2];};return MakeNumberResult (_caccc );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_dgcc Expression ;_bebe ,_fgcc string ;};const _bbd =57362;

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_dffc :=MakeNumberResult (0);for _ ,_cdbe :=range args {_cdbe =_cdbe .AsNumber ();switch _cdbe .Type {case ResultTypeNumber :_dffc .ValueNumber +=_cdbe .ValueNumber ;case ResultTypeList ,ResultTypeArray :_geac :=Sum (_cdbe .ListValues ());if _geac .Type !=ResultTypeNumber {return _geac ;};_dffc .ValueNumber +=_geac .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cdbe ;case ResultTypeEmpty :default:return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cdbe .Type ));};};return _dffc ;};func _fec (_debb Context ,_aace ,_dgbaa int )(string ,string ){_acg :="\u0041"+_df .Itoa (_aace );_ggdbg :=_debb .LastColumn (_aace ,_dgbaa );_edbcd :=_ggdbg +_df .Itoa (_dgbaa );return _acg ,_edbcd ;};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_aad :=len (args );if _aad < 4||_aad > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aecd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fadfd :=args [1].ValueNumber ;if _fadfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afgbf :=args [2].ValueNumber ;if _afgbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_acdc :=args [3].ValueNumber ;_bdfa :=0.0;if _aad > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdfa =args [4].ValueNumber ;};_adcc :=0;if _aad ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_adcc =int (args [5].ValueNumber );if _adcc !=0{_adcc =1;};};return MakeNumberResult (_efcad (_aecd ,_fadfd ,_afgbf ,_acdc ,_bdfa ,_adcc ));};func _efff (_fccga string ,_dcce []Result )(*parsedSearchObject ,Result ){_gebf :=len (_dcce );if _gebf !=2&&_gebf !=3{return nil ,MakeErrorResult (_fccga +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccefa :=_dcce [0];if _ccefa .Type ==ResultTypeError {return nil ,_ccefa ;};if _ccefa .Type !=ResultTypeString &&_ccefa .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_gfab :=_dcce [1];if _gfab .Type ==ResultTypeError {return nil ,_gfab ;};if _gfab .Type !=ResultTypeString &&_gfab .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_gcba :=_gfab .Value ();_efdc :=_ccefa .Value ();_fcaac :=1;if _gebf ==3&&_dcce [2].Type !=ResultTypeEmpty {_bbfd :=_dcce [2];if _bbfd .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_fcaac =int (_bbfd .ValueNumber );if _fcaac < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _fcaac > len (_gcba ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_efdc ,_gcba ,_fcaac },_eggc ;};

// String returns a string representation of String.
func (_dgecb String )String ()string {return "\u0022"+_dgecb ._cdgb +"\u0022"};func _fega (_aecbf ,_gcbdg ,_dbdf ,_bcffa int )int {if _gcbdg > _dbdf {return 0;};if _gfga (_bcffa ){return (_dbdf -_gcbdg +1)*30;};_dfabe :=0;for _dgde :=_gcbdg ;_dgde <=_dbdf ;_dgde ++{_dfabe +=_gg (_aecbf ,_dgde );};return _dfabe ;};func _facf (_cbabg string )bool {for _ ,_agfc :=range _cgdfb {_ebcaf :=_agfc .FindStringSubmatch (_cbabg );if len (_ebcaf )> 1{return true ;};};return false ;};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfda :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccbad :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddegd :=args [2].ValueNumber ;if _ddegd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eddgd :=args [3].ValueNumber ;return MakeNumberResult (_eddgd *_bfda *(_ccbad /_ddegd -1));};

// Eval evaluates the binary expression using the context given.
func (_bdfb BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_cddef :=_bdfb ._aeda .Eval (ctx ,ev );if _cddef .Type ==ResultTypeError {return _cddef ;};_fcbg :=_bdfb ._gfac .Eval (ctx ,ev );if _fcbg .Type ==ResultTypeError {return _fcbg ;};if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeArray {if !_agaec (_cddef .ValueArray ,_fcbg .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _agedg (_bdfb ._ggdb ,_cddef .ValueArray ,_fcbg .ValueArray );}else if _cddef .Type ==ResultTypeList {if len (_cddef .ValueList )!=len (_fcbg .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _cfdea (_bdfb ._ggdb ,_cddef .ValueList ,_fcbg .ValueList );};}else if _cddef .Type ==ResultTypeArray &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return _adfg (_bdfb ._ggdb ,_cddef .ValueArray ,_fcbg );}else if _cddef .Type ==ResultTypeList &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return _bcdg (_bdfb ._ggdb ,_cddef .ValueList ,_fcbg );};switch _bdfb ._ggdb {case BinOpTypePlus :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeNumberResult (_cddef .ValueNumber +_fcbg .ValueNumber );};};case BinOpTypeMinus :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeNumberResult (_cddef .ValueNumber -_fcbg .ValueNumber );};};case BinOpTypeMult :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeNumberResult (_cddef .ValueNumber *_fcbg .ValueNumber );};};case BinOpTypeDiv :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {if _fcbg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_cddef .ValueNumber /_fcbg .ValueNumber );};};case BinOpTypeExp :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeNumberResult (_aeccg .Pow (_cddef .ValueNumber ,_fcbg .ValueNumber ));};};case BinOpTypeLT :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeBoolResult (_cddef .ValueNumber < _fcbg .ValueNumber );};if _cddef .Type ==ResultTypeString {return MakeBoolResult (_cddef .ValueString < _fcbg .ValueString );};if _cddef .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cddef .Type ==ResultTypeString &&_fcbg .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cddef .Type ==ResultTypeNumber &&_fcbg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cddef .Type ==ResultTypeEmpty &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_cddef .Type ==ResultTypeNumber ||_cddef .Type ==ResultTypeString )&&_fcbg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeBoolResult (_cddef .ValueNumber > _fcbg .ValueNumber );};if _cddef .Type ==ResultTypeString {return MakeBoolResult (_cddef .ValueString > _fcbg .ValueString );};if _cddef .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cddef .Type ==ResultTypeString &&_fcbg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cddef .Type ==ResultTypeNumber &&_fcbg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cddef .Type ==ResultTypeEmpty &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_cddef .Type ==ResultTypeNumber ||_cddef .Type ==ResultTypeString )&&_fcbg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeBoolResult (_cddef .ValueNumber ==_fcbg .ValueNumber );};if _cddef .Type ==ResultTypeString {return MakeBoolResult (_cddef .ValueString ==_fcbg .ValueString );};if _cddef .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_cddef .Type ==ResultTypeString &&_fcbg .Type ==ResultTypeNumber )||(_cddef .Type ==ResultTypeNumber &&_fcbg .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _cddef .Type ==ResultTypeEmpty &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return MakeBoolResult (_ecabd (_fcbg ));}else if (_cddef .Type ==ResultTypeNumber ||_cddef .Type ==ResultTypeString )&&_fcbg .Type ==ResultTypeEmpty {return MakeBoolResult (_ecabd (_cddef ));};case BinOpTypeNE :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeBoolResult (_cddef .ValueNumber !=_fcbg .ValueNumber );};if _cddef .Type ==ResultTypeString {return MakeBoolResult (_cddef .ValueString !=_fcbg .ValueString );};if _cddef .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_cddef .Type ==ResultTypeString &&_fcbg .Type ==ResultTypeNumber )||(_cddef .Type ==ResultTypeNumber &&_fcbg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _cddef .Type ==ResultTypeEmpty &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return MakeBoolResult (!_ecabd (_fcbg ));}else if (_cddef .Type ==ResultTypeNumber ||_cddef .Type ==ResultTypeString )&&_fcbg .Type ==ResultTypeEmpty {return MakeBoolResult (!_ecabd (_cddef ));};case BinOpTypeLEQ :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeBoolResult (_cddef .ValueNumber <=_fcbg .ValueNumber );};if _cddef .Type ==ResultTypeString {return MakeBoolResult (_cddef .ValueString <=_fcbg .ValueString );};if _cddef .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cddef .Type ==ResultTypeString &&_fcbg .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cddef .Type ==ResultTypeNumber &&_fcbg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cddef .Type ==ResultTypeEmpty &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return MakeBoolResult (_ecabd (_fcbg ));}else if (_cddef .Type ==ResultTypeNumber ||_cddef .Type ==ResultTypeString )&&_fcbg .Type ==ResultTypeEmpty {return MakeBoolResult (_ecabd (_cddef ));};case BinOpTypeGEQ :if _cddef .Type ==_fcbg .Type {if _cddef .Type ==ResultTypeNumber {return MakeBoolResult (_cddef .ValueNumber >=_fcbg .ValueNumber );};if _cddef .Type ==ResultTypeString {return MakeBoolResult (_cddef .ValueString >=_fcbg .ValueString );};if _cddef .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cddef .Type ==ResultTypeString &&_fcbg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cddef .Type ==ResultTypeNumber &&_fcbg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cddef .Type ==ResultTypeEmpty &&(_fcbg .Type ==ResultTypeNumber ||_fcbg .Type ==ResultTypeString ){return MakeBoolResult (_ecabd (_fcbg ));}else if (_cddef .Type ==ResultTypeNumber ||_cddef .Type ==ResultTypeString )&&_fcbg .Type ==ResultTypeEmpty {return MakeBoolResult (_ecabd (_cddef ));};case BinOpTypeConcat :return MakeStringResult (_cddef .Value ()+_fcbg .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func _ebdgd (_cgec ,_fbda float64 ,_ceae ,_ffg int )float64 {_abge :=_fbccg (_cgec );_gdccg :=_fbccg (_fbda );_eceb :=_gabd (_abge ,_gdccg ,_ceae ,_ffg );return _dega (_eceb ,_abge ,_ffg );};var _gccdd =[...]int {1};func _ddcg (_cbb []Result )Result {_cbede :=_cbb [0].ValueArray ;if len (_cbb )==1{_eebdc :=[][]Result {};for _ ,_dbfd :=range _cbede {_eebdc =append (_eebdc ,_egge ([]Result {MakeListResult (_dbfd )}).ValueList );};return MakeArrayResult (_eebdc );}else if len (_cbb )==2{_afad :=len (_cbede );_agdg :=len (_cbede [0]);_bebee :=_dadc (_cbb [1],_afad ,_agdg );_fge :=len (_bebee );_degcc :=[][]Result {};var _dddf []Result ;for _adcg ,_abeb :=range _cbede {if _adcg < _fge {_dddf =_bebee [_adcg ];}else {_dddf =_dgfg (MakeErrorResultType (ErrorTypeNA ,""),_agdg );};_degcc =append (_degcc ,_egge ([]Result {MakeListResult (_abeb ),MakeListResult (_dddf )}).ValueList );};return MakeArrayResult (_degcc );}else if len (_cbb )==3{_gbbgb :=len (_cbede );_cacc :=len (_cbede [0]);_cdbb :=_dadc (_cbb [1],_gbbgb ,_cacc );_eedgc :=_dadc (_cbb [2],_gbbgb ,_cacc );_adfa :=len (_cdbb );_fddb :=len (_eedgc );_gdbb :=[][]Result {};var _affb ,_aedc []Result ;for _agaf ,_gddb :=range _cbede {if _agaf < _adfa {_affb =_cdbb [_agaf ];}else {_affb =_dgfg (MakeErrorResultType (ErrorTypeNA ,""),_cacc );};if _agaf < _fddb {_aedc =_eedgc [_agaf ];}else {_aedc =_dgfg (MakeErrorResultType (ErrorTypeNA ,""),_cacc );};_gdbb =append (_gdbb ,_egge ([]Result {MakeListResult (_gddb ),MakeListResult (_affb ),MakeListResult (_aedc )}).ValueList );};return MakeArrayResult (_gdbb );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fdfe :=args [0];switch _fdfe .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_daagd :=_fbccg (_fdfe .ValueNumber );return MakeNumberResult (float64 (_daagd .Minute ()));case ResultTypeString :_egbf :=_aea .ToLower (_fdfe .ValueString );if !_facf (_egbf ){_ ,_ ,_ ,_beb ,_dg :=_ddcc (_egbf );if _dg .Type ==ResultTypeError {_dg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _dg ;};if _beb {return MakeNumberResult (0);};};_ ,_adf ,_ ,_ ,_ ,_ccgbe :=_ddfa (_egbf );if _ccgbe .Type ==ResultTypeError {return _ccgbe ;};return MakeNumberResult (float64 (_adf ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dece :=int (args [0].ValueNumber );return MakeBoolResult (_dece !=_dece /2*2);};const _fdcd =57347;

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_cfcb :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfcb =int (args [1].ValueNumber );if _cfcb < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _cfcb ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ggaa :=args [0].Value ();_edcce :=len (_ggaa );if _cfcb > _edcce {return MakeStringResult (_ggaa );};return MakeStringResult (_ggaa [_edcce -_cfcb :_edcce ]);};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bce :=true ;for _ ,_dcae :=range args {_dcae =_dcae .AsNumber ();switch _dcae .Type {case ResultTypeList ,ResultTypeArray :_dbef :=And (_dcae .ListValues ());if _dbef .Type ==ResultTypeError {return _dbef ;};if _dbef .ValueNumber ==0{_bce =false ;};case ResultTypeNumber :if _dcae .ValueNumber ==0{_bce =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _dcae ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_bce );};func _ggce ()yyParser {return &yyParserImpl {}};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_efec :=args [0].AsNumber ();_fbe :=args [1].AsNumber ();if _efec .Type !=ResultTypeNumber ||_fbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _fbe .ValueNumber < _efec .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_agcg :=int64 (_efec .ValueNumber );_eegf :=int64 (_fbe .ValueNumber );return MakeNumberResult (float64 (_cdba .Int63n (_eegf -_agcg +1)+_agcg ));};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deg :=args [0].AsNumber ();_bbad :=args [1].AsNumber ();if _deg .Type !=ResultTypeNumber ||_bbad .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gdcg :=_aeccg .Trunc (_deg .ValueNumber );_bebd :=_aeccg .Trunc (_bbad .ValueNumber );if _bebd > _gdcg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _bebd ==_gdcg ||_bebd ==0{return MakeNumberResult (1);};_fefed :=float64 (1);for _bgfd :=float64 (1);_bgfd <=_bebd ;_bgfd ++{_fefed *=(_gdcg +1-_bgfd )/_bgfd ;};return MakeNumberResult (_fefed );};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_cadfc Expression ;_bgdc ,_efce int ;};

// String returns a string representation of a range with prefix.
func (_aaab PrefixRangeExpr )String ()string {return _e .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_aaab ._ddgb .String (),_aaab ._bgddf .String (),_aaab ._ccecd .String ());};const _dfgd =-1000;

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ddf :=args [0].AsString ();if _ddf .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_gbb :=args [1].AsNumber ();if _gbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _gbb .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _gbb .ValueNumber ==0{return MakeStringResult ("");};_gffe :=_aafb .Buffer {};for _cbaeef :=0;_cbaeef < int (_gbb .ValueNumber );_cbaeef ++{_gffe .WriteString (_ddf .ValueString );};return MakeStringResult (_gffe .String ());};

// Eval evaluates the binary expression using the context given.
func (_fgcb BinaryExpr )String ()string {_acce :="";switch _fgcb ._ggdb {case BinOpTypePlus :_acce ="\u002b";case BinOpTypeMinus :_acce ="\u002d";case BinOpTypeMult :_acce ="\u002a";case BinOpTypeDiv :_acce ="\u002f";case BinOpTypeExp :_acce ="\u005e";case BinOpTypeLT :_acce ="\u003c";case BinOpTypeGT :_acce ="\u003e";case BinOpTypeEQ :_acce ="\u003d";case BinOpTypeLEQ :_acce ="\u003c\u003d";case BinOpTypeGEQ :_acce ="\u003e\u003d";case BinOpTypeNE :_acce ="\u003c\u003e";case BinOpTypeConcat :_acce ="\u0026";};return _fgcb ._aeda .String ()+_acce +_fgcb ._gfac .String ();};var _cgdd =map[string ]*_fdcf .Regexp {};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cdded :=args [0].AsNumber ();if _cdded .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_efdcgf ,_cfde :=_aeccg .Modf (_cdded .ValueNumber );if _cfde < 0{_efdcgf --;};return MakeNumberResult (_efdcgf );};const _dccd =2;

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_ccgcc ,_faebe :=_gacg (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _faebe .Type ==ResultTypeError {return _faebe ;};return MakeNumberResult (_edbea (_ccgcc ._ddefg ,_ccgcc ._faae ,_ccgcc ._dccdc ,_ccgcc ._cfcgb ));};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_agfdb :=args [0];switch _agfdb .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_gbdg :=_fbccg (_agfdb .ValueNumber );return MakeNumberResult (float64 (_gbdg .Month ()));case ResultTypeString :_cabb :=_aea .ToLower (_agfdb .ValueString );if !_fdfd (_cabb ){_ ,_ ,_ ,_ ,_bcbd ,_bacg :=_ddfa (_cabb );if _bacg .Type ==ResultTypeError {_bacg .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _bacg ;};if _bcbd {return MakeNumberResult (1);};};_ ,_eegb ,_ ,_ ,_gcbga :=_ddcc (_cabb );if _gcbga .Type ==ResultTypeError {return _gcbga ;};return MakeNumberResult (float64 (_eegb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// Function is a standard function whose result only depends on its arguments.
type Function func (_aecc []Result )Result ;func _ebegd (_bdebc ,_gbgc _ecb .Time )bool {_aagc :=_bdebc .Unix ();_cgda :=_gbgc .Unix ();_bafa :=_bdebc .Year ();_bcefg :=_bcge (_bafa ,_ecb .March ,1);if _cef (_bafa )&&_aagc < _bcefg &&_cgda >=_bcefg {return true ;};var _bdcfb =_gbgc .Year ();var _agbd =_bcge (_bdcfb ,_ecb .March ,1);return (_cef (_bdcfb )&&_cgda >=_agbd &&_aagc < _agbd );};const _affe ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _fbea (args ,_eeed )};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_afbgf .Lock ();defer _afbgf .Unlock ();if _cced ,_ccgfb :=_dfgc [name ];_ccgfb {return _cced ;};return nil ;};

// Update updates the FunctionCall references after removing a row/column.
func (_gfcec FunctionCall )Update (q *_efad .UpdateQuery )Expression {_egee :=[]Expression {};for _ ,_eed :=range _gfcec ._cbab {_bbbbb :=_eed .Update (q );_egee =append (_egee ,_bbbbb );};return FunctionCall {_afgb :_gfcec ._afgb ,_cbab :_egee };};const _cddbe =57368;var InvalidReferenceContext =&ivr {};type ri struct{_bdcc float64 ;_aegd string ;};const _babb int =30;

// Update returns the same object as updating sheet references does not affect Error.
func (_dcee Error )Update (q *_efad .UpdateQuery )Expression {return _dcee };

// Update updates references in the BinaryExpr after removing a row/column.
func (_eddg BinaryExpr )Update (q *_efad .UpdateQuery )Expression {_beda :=_eddg ;_beda ._aeda =_eddg ._aeda .Update (q );_beda ._gfac =_eddg ._gfac .Update (q );return _beda ;};var _dfgc =map[string ]Function {};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};const _dcffc ="\u005e\u0028\u0028"+_ge +"\u007c"+_edeg +"\u007c"+_aedb +"\u007c"+_gbdd +"\u0029\u0020\u0029\u003f";

// String returns a string representation of SheetPrefixExpr.
func (_dcdcb SheetPrefixExpr )String ()string {return _dcdcb ._fcgc };type Expression interface{Eval (_gfece Context ,_eeeb Evaluator )Result ;Reference (_aacd Context ,_geegd Evaluator )Reference ;String ()string ;Update (_abfbc *_efad .UpdateQuery )Expression ;};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_gggc :=len (args );if _gggc !=6&&_gggc !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfbff ,_beaefga ,_fdef :=_dca (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _fdef .Type ==ResultTypeError {return _fdef ;};_ffed :=args [2];if _ffed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eeba :=_ffed .ValueNumber ;if _eeba < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ebfca :=args [3];if _ebfca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bccc :=_ebfca .ValueNumber ;if _bccc <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_gagde :=args [4];if _gagde .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_eegc :=_gagde .ValueNumber ;if _eegc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ecga :=args [5];if _ecga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fceef :=float64 (int (_ecga .ValueNumber ));if !_aeagb (_fceef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ad :=0;if _gggc ==7&&args [6].Type !=ResultTypeEmpty {_afcg :=args [6];if _afcg .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ad =int (_afcg .ValueNumber );if !_ecgf (_ad ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_feg :=0.0;_afdd :=0.0;_faad :=1.0;_baff ,_fdef :=_bdga (_dfbff ,_beaefga ,_eeba ,_afdd ,_eegc ,_fceef ,_ad );if _fdef .Type ==ResultTypeError {return _fdef ;};_bcedc ,_fdef :=_bdga (_dfbff ,_beaefga ,_eeba ,_faad ,_eegc ,_fceef ,_ad );if _fdef .Type ==ResultTypeError {return _fdef ;};_ecaa :=(_faad -_afdd )*0.5;for _ccf :=0;_ccf < 100&&_feg !=_bccc ;_ccf ++{_feg ,_fdef =_bdga (_dfbff ,_beaefga ,_eeba ,_ecaa ,_eegc ,_fceef ,_ad );if _fdef .Type ==ResultTypeError {return _fdef ;};if _bccc ==_baff {return MakeNumberResult (_afdd );}else if _bccc ==_bcedc {return MakeNumberResult (_faad );}else if _bccc ==_feg {return MakeNumberResult (_ecaa );}else if _bccc < _bcedc {_faad *=2.0;_bcedc ,_fdef =_bdga (_dfbff ,_beaefga ,_eeba ,_faad ,_eegc ,_fceef ,_ad );if _fdef .Type ==ResultTypeError {return _fdef ;};_ecaa =(_faad -_afdd )*0.5;}else {if _bccc < _feg {_afdd =_ecaa ;_baff =_feg ;}else {_faad =_ecaa ;_bcedc =_feg ;};_ecaa =_faad -(_faad -_afdd )*((_bccc -_bcedc )/(_baff -_bcedc ));};};return MakeNumberResult (_ecaa );};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {v }};const _aaegd ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// GetEpoch returns a null time object for the invalid reference context.
func (_cecae *ivr )GetEpoch ()_ecb .Time {return _ecb .Time {}};var _bbfg =map[string ]*_fdcf .Regexp {};const _dabb =57349;func (_caacc *yyParserImpl )Lookahead ()int {return _caacc ._fede };

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_afdcg :=len (args );if _afdcg !=4&&_afdcg !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgcae :=args [0].ValueNumber ;if _cgcae < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfgbg :=args [1].ValueNumber ;if _gfgbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gadd :=args [2].ValueNumber ;if _gadd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bedde :=args [3].ValueNumber ;if _bedde < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _bedde > _gadd {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_bfafd :=2.0;if _afdcg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfafd =args [4].ValueNumber ;if _bfafd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_aebc (_cgcae ,_gfgbg ,_gadd ,_bedde ,_bfafd ));};type ivr struct{};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cdcda :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_cdcda *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_eecce :=_ddd (args [1]);for _ ,_gcbe :=range _eecce {for _ ,_daecc :=range _gcbe {if _daecc .Type !=ResultTypeNumber ||_daecc .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_cdcda *=1.0+_daecc .ValueNumber ;};};return MakeNumberResult (_cdcda );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};func _bcge (_acga int ,_ggfg _ecb .Month ,_bbabe int )int64 {if _acga ==1900&&int (_ggfg )<=2{_bbabe --;};_debg :=_ecb .Date (_acga ,_ggfg ,_bbabe ,0,0,0,0,_ecb .UTC );return _debg .Unix ();};var _ggdgef =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// String returns a string representation for Negate.
func (_bbbcb Negate )String ()string {return "\u002d"+_bbbcb ._gaea .String ()};func _fed (_cbdc ,_edeb int )string {const TOKSTART =4;if !_cacb {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_acecg :=range _adab {if _acecg ._dabe ==_cbdc &&_acecg ._dfdb ==_edeb {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_acecg ._gdfa ;};};_fgcg :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_faaf (_edeb );_bedga :=make ([]int ,0,4);_eegbe :=_accd [_cbdc ];for _fbca :=TOKSTART ;_fbca -1< len (_dgdb );_fbca ++{if _edcf :=_eegbe +_fbca ;_edcf >=0&&_edcf < _bdaa &&_eeddf [_ggdgef [_edcf ]]==_fbca {if len (_bedga )==cap (_bedga ){return _fgcg ;};_bedga =append (_bedga ,_fbca );};};if _cgcce [_cbdc ]==-2{_aaaf :=0;for _dafa [_aaaf ]!=-1||_dafa [_aaaf +1]!=_cbdc {_aaaf +=2;};for _aaaf +=2;_dafa [_aaaf ]>=0;_aaaf +=2{_bad :=_dafa [_aaaf ];if _bad < TOKSTART ||_dafa [_aaaf +1]==0{continue ;};if len (_bedga )==cap (_bedga ){return _fgcg ;};_bedga =append (_bedga ,_bad );};if _dafa [_aaaf +1]!=0{return _fgcg ;};};for _acaed ,_bcca :=range _bedga {if _acaed ==0{_fgcg +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_fgcg +="\u0020\u006f\u0072\u0020";};_fgcg +=_faaf (_bcca );};return _fgcg ;};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdg :=args [0].AsNumber ();if _cdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebda :=int (_cdg .ValueNumber );if _ebda < 0||_ebda > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_e .Sprintf ("\u0025\u0063",_ebda ));};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aedgg ,_efdd ,_acdfg :=_dca (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _acdfg .Type ==ResultTypeError {return _acdfg ;};_gefb ,_acdfg :=_aabf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _acdfg .Type ==ResultTypeError {return _acdfg ;};if _gefb >=_aedgg {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_egccc :=args [3].ValueNumber ;if _egccc < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggdcb :=args [4].ValueNumber ;if _ggdcb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_affc :=args [5].ValueNumber ;if _affc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efeb :=float64 (int (args [6].ValueNumber ));if !_aeagb (_efeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ffaa :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ffaa =int (args [7].ValueNumber );if !_ecgf (_ffaa ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_gcg ,_acdfg :=_acab (_gefb ,_efdd ,_ffaa );if _acdfg .Type ==ResultTypeError {return _acdfg ;};_gcg *=_efeb ;_bfb ,_acdfg :=_acab (_aedgg ,_efdd ,_ffaa );if _acdfg .Type ==ResultTypeError {return _acdfg ;};_bfb *=_efeb ;_bede ,_acdfg :=_acab (_gefb ,_aedgg ,_ffaa );if _acdfg .Type ==ResultTypeError {return _acdfg ;};_bede *=_efeb ;_afd :=_affc +_gcg *100*_egccc /_efeb ;_afd /=_ggdcb +_bede *100*_egccc /_efeb ;_afd --;_afd *=_efeb /_bfb ;return MakeNumberResult (_afd );};var _b []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _bdga (_caagc ,_bfac ,_bdbf ,_afc ,_ggedg ,_fdf float64 ,_gedgg int )(float64 ,Result ){_cadde :=int (_fdf );_agg :=_baf (_caagc ,_bfac ,_cadde ,_gedgg );_fabe :=_edbea (_caagc ,_bfac ,_cadde ,_gedgg )/_agg ;_cce ,_fedae :=_bbee (_caagc ,_bfac ,_cadde ,_gedgg );if _fedae .Type ==ResultTypeError {return 0,_fedae ;};_addbe :=_ebdgd (_caagc ,_bfac ,_cadde ,_gedgg );_gfag :=_ggedg /_aeccg .Pow (1+_afc /_fdf ,_cce -1+_fabe );_gfag -=100*_bdbf /_fdf *_addbe /_agg ;_aafag :=100*_bdbf /_fdf ;_cbdg :=1+_afc /_fdf ;for _gce :=0.0;_gce < _cce ;_gce ++{_gfag +=_aafag /_aeccg .Pow (_cbdg ,_gce +_fabe );};return _gfag ,MakeEmptyResult ();};func _ggcga (_fegcc Result )*criteriaParsed {_fdfg :=_fegcc .Type ==ResultTypeNumber ;_deac :=_fegcc .ValueNumber ;_fadfda :=_aea .ToLower (_fegcc .ValueString );_cacg :=_fdfgd (_fadfda );return &criteriaParsed {_fdfg ,_deac ,_fadfda ,_cacg };};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_deae :=args [0].AsNumber ();if _deae .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gcef :=10.0;if len (args )> 1{_gcbd :=args [1].AsNumber ();if _gcbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_gcef =args [1].ValueNumber ;};if _deae .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _gcef ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_aeccg .Log (_deae .ValueNumber )/_aeccg .Log (_gcef ));};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {e }};

// Eval evaluates and returns a number.
func (_gfbf Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_gfbf ._bdeec )};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_gdce :=len (args );if _gdce < 3||_gdce > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_agdc :=args [1].ValueNumber ;if _agdc !=float64 (int (_agdc )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eecf :=args [2].ValueNumber ;_befaf :=0.0;if _gdce >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_befaf =args [3].ValueNumber ;};_gbf :=0;if _gdce ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbf =int (args [4].ValueNumber );if _gbf !=0{_gbf =1;};};return MakeNumberResult (_bfeg (_ebb ,_agdc ,_eecf ,_befaf ,_gbf ));};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_bcebb :=_bcdd (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _bcebb .Type !=ResultTypeEmpty {return _bcebb ;};_aafc :=_fbac (args [1:]);_gba :=-_aeccg .MaxFloat64 ;_bfc :=_ddd (args [0]);for _ ,_gdf :=range _aafc {_aecb :=_bfc [_gdf ._gab ][_gdf ._fgge ].ValueNumber ;if _gba < _aecb {_gba =_aecb ;};};if _gba ==-_aeccg .MaxFloat64 {_gba =0;};return MakeNumberResult (float64 (_gba ));};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_bbc [][]Expression };

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {v }};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fcc :=args [0];if _fcc .Type ==ResultTypeError ||_fcc .Type ==ResultTypeString {return _fcc ;};return _eggc ;};

// SetLocked does nothing for the invalid reference context.
func (_bffga *ivr )SetLocked (cellRef string ,locked bool ){};type parsedReplaceObject struct{_ceec string ;_ccb int ;_fgd int ;_ebcg string ;};func _adda (_gdadc []Result ,_dfab []string ,_aade bool )[]string {for _ ,_ebefd :=range _gdadc {switch _ebefd .Type {case ResultTypeEmpty :if !_aade {_dfab =append (_dfab ,"");};case ResultTypeString :if _ebefd .ValueString !=""||!_aade {_dfab =append (_dfab ,_ebefd .ValueString );};case ResultTypeNumber :_dfab =append (_dfab ,_ebefd .Value ());case ResultTypeList :_dfab =_gafgb (_dfab ,_adda (_ebefd .ValueList ,[]string {},_aade ));case ResultTypeArray :for _ ,_dged :=range _ebefd .ValueArray {_dfab =_gafgb (_dfab ,_adda (_dged ,[]string {},_aade ));};};};return _dfab ;};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_afbgf .Lock ();defer _afbgf .Unlock ();if _addc ,_geeee :=_cadb [name ];_geeee {return _addc ;};return nil ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_cfbae ,_cgcag :=_gacg (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _cgcag .Type ==ResultTypeError {return _cgcag ;};_eddf :=_fbccg (_cfbae ._ddefg );_gfbad :=_fbccg (_cfbae ._faae );_befcd :=_cfbae ._dccdc ;_ebbbb :=_cg (_eddf ,_gfbad ,_befcd );_faeg ,_fdcca ,_abg :=_ebbbb .Date ();return MakeNumberResult (_dcef (_faeg ,int (_fdcca ),_abg ));};func _acab (_adec ,_efeeg float64 ,_dbe int )(float64 ,Result ){_fgfba ,_abf :=_fbccg (_adec ),_fbccg (_efeeg );_ea :=_fgfba .Unix ();_dad :=_abf .Unix ();if _ea ==_dad {return 0,_eggc ;};_gffb ,_cgag ,_edac :=_fgfba .Date ();_dcgee ,_aebg ,_dde :=_abf .Date ();_addd ,_ffb :=int (_cgag ),int (_aebg );var _ag ,_caf float64 ;switch _dbe {case 0:if _edac ==31{_edac --;};if _edac ==30&&_dde ==31{_dde --;}else if _fgbfg :=_cef (_gffb );_addd ==2&&((_fgbfg &&_edac ==29)||(!_fgbfg &&_edac ==28)){_edac =30;if _dgcb :=_cef (_dcgee );_ffb ==2&&((_dgcb &&_dde ==29)||(!_dgcb &&_dde ==28)){_dde =30;};};_ag =float64 ((_dcgee -_gffb )*360+(_ffb -_addd )*30+(_dde -_edac ));_caf =360;case 1:_ag =_efeeg -_adec ;_abfb :=_gffb !=_dcgee ;if _abfb &&(_dcgee !=_gffb +1||_addd < _ffb ||(_addd ==_ffb &&_edac < _dde )){_cbdb :=0;for _gced :=_gffb ;_gced <=_dcgee ;_gced ++{_cbdb +=_cccdc (_gced ,1);};_caf =float64 (_cbdb )/float64 (_dcgee -_gffb +1);}else {if !_abfb &&_cef (_gffb ){_caf =366;}else {if _abfb &&((_cef (_gffb )&&(_addd < 2||(_addd ==2&&_edac <=29)))||(_cef (_dcgee )&&(_ffb > 2||(_ffb ==2&&_dde ==29)))){_caf =366;}else {_caf =365;};};};case 2:_ag =_efeeg -_adec ;_caf =360;case 3:_ag =_efeeg -_adec ;_caf =365;case 4:if _edac ==31{_edac --;};if _dde ==31{_dde --;};_ag =float64 ((_dcgee -_gffb )*360+(_ffb -_addd )*30+(_dde -_edac ));_caf =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _ag /_caf ,_eggc ;};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_daa :=args [0];if _daa .Type !=ResultTypeArray &&_daa .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ceef :=_daa .ValueArray ;if len (_ceef )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_ceef )));};

// Eval evaluates and returns the result of an error expression.
func (_efcab Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_efcab ._fdb )};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdad :=args [0].AsNumber ();if _gdad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdad .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dggd :=float64 (1);_gaee :=_aeccg .Trunc (_gdad .ValueNumber );for _bbce :=_gaee ;_bbce > 1;_bbce -=2{_dggd *=_bbce ;};return MakeNumberResult (_dggd );};

// Update updates references in the VerticalRange after removing a row/column.
func (_fce VerticalRange )Update (q *_efad .UpdateQuery )Expression {if q .UpdateType ==_efad .UpdateActionRemoveColumn {_beaec :=_fce ;if q .UpdateCurrentSheet {_abc :=q .ColumnIdx ;_beaec ._gcff =_fdcee (_fce ._gcff ,_abc );_beaec ._eeedf =_fdcee (_fce ._eeedf ,_abc );};return _beaec ;};return _fce ;};

// String returns a string representation of a horizontal range.
func (_gfcfd HorizontalRange )String ()string {return _gfcfd .horizontalRangeReference ()};

// Db implements the Excel DB function.
func Db (args []Result )Result {_bcfc :=len (args );if _bcfc !=4&&_bcfc !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_agae :=args [0].ValueNumber ;if _agae < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcag :=args [1].ValueNumber ;if _dcag < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgca :=args [2].ValueNumber ;if _cgca <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ffeag :=args [3].ValueNumber ;if _ffeag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _ffeag -_cgca > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cbaa :=12.0;if _bcfc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbaa =args [4].ValueNumber ;if _cbaa < 1||_cbaa > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _cbaa ==12&&_ffeag > _cgca {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _dcag >=_agae {return MakeNumberResult (0);};_gcb :=1-_aeccg .Pow (_dcag /_agae ,1/_cgca );_gcb =float64 (int (_gcb *1000+0.5))/1000;_ffag :=_agae *_gcb *_cbaa /12;if _ffeag ==1{return MakeNumberResult (_ffag );};_cd :=_ffag ;_aaag :=0.0;_daeca :=_cgca ;if _daeca > _ffeag {_daeca =_ffeag ;};for _cgbad :=2.0;_cgbad <=_daeca ;_cgbad ++{_aaag =(_agae -_cd )*_gcb ;_cd +=_aaag ;};if _ffeag > _cgca {return MakeNumberResult ((_agae -_cd )*_gcb *(12-_cbaa )/12);};return MakeNumberResult (_aaag );};const _fbdc =57374;

// Match implements the MATCH function.
func Match (args []Result )Result {_bbdc :=len (args );if _bbdc !=2&&_bbdc !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aaebd :=1;if _bbdc ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_fedaa :=args [2].ValueNumber ;if _fedaa ==-1||_fedaa ==0{_aaebd =int (_fedaa );};};_fbfa :=args [1];var _aacec []Result ;switch _fbfa .Type {case ResultTypeList :_aacec =_fbfa .ValueList ;case ResultTypeArray :_ga :=_fbfa .ValueArray ;if len (_ga [0])!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};for _ ,_bgfb :=range _ga {_aacec =append (_aacec ,_bgfb [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_gdb :=_ggcga (args [0]);switch _aaebd {case 0:for _adag ,_efed :=range _aacec {if _cfgdfd (_efed ,_gdb ){return MakeNumberResult (float64 (_adag +1));};};case -1:for _fcac :=0;_fcac < len (_aacec );_fcac ++{if _cfgdfd (_aacec [_fcac ],_gdb ){return MakeNumberResult (float64 (_fcac +1));};if _gdb ._gaceg &&(_aacec [_fcac ].ValueNumber < _gdb ._acfc ){if _fcac ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fcac ));};};case 1:for _cdbdc :=0;_cdbdc < len (_aacec );_cdbdc ++{if _cfgdfd (_aacec [_cdbdc ],_gdb ){return MakeNumberResult (float64 (_cdbdc +1));};if _gdb ._gaceg &&(_aacec [_cdbdc ].ValueNumber > _gdb ._acfc ){if _cdbdc ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cdbdc ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bag :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gaaf :=args [2].ValueNumber +1;if _gaaf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_afca :=_ddd (args [0]);_aaeg :=float64 (len (_afca ));_fdac ,_eccf :=0.0,0.0;_bafcb ,_gae :=1.0,1.0;_aaba ,_fbf :=false ,false ;for _ ,_feegg :=range _afca {for _ ,_fafd :=range _feegg {if _fafd .Type ==ResultTypeNumber &&!_fafd .IsBoolean {_cegce :=_fafd .ValueNumber ;if _cegce ==0{continue ;}else {if _cegce > 0{_aaba =true ;_eccf +=_fafd .ValueNumber *_gae ;}else {_fbf =true ;_fdac +=_fafd .ValueNumber *_bafcb ;};_bafcb /=_bag ;_gae /=_gaaf ;};};};};if !_aaba ||!_fbf {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cga :=-_eccf /_fdac ;_cga *=_aeccg .Pow (_gaaf ,_aaeg -1);_cga =_aeccg .Pow (_cga ,1/(_aaeg -1));return MakeNumberResult (_cga -1);};func _baafc (_edb ,_fagc ,_gcecd ,_ffegf float64 ,_fbdfc int )float64 {var _debcc float64 ;if _edb ==0{_debcc =(_gcecd +_ffegf )/_fagc ;}else {_aeg :=_aeccg .Pow (1+_edb ,_fagc );if _fbdfc ==1{_debcc =(_ffegf *_edb /(_aeg -1)+_gcecd *_edb /(1-1/_aeg ))/(1+_edb );}else {_debcc =_ffegf *_edb /(_aeg -1)+_gcecd *_edb /(1-1/_aeg );};};return -_debcc ;};func _dgeg (_abfbd float64 )float64 {_daaaa :=float64 (1);for _ebggd :=float64 (2);_ebggd <=_abfbd ;_ebggd ++{_daaaa *=_ebggd ;};return _daaaa ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _faca :=0;_faca < len (args )-1;_faca +=2{if args [_faca ].ValueNumber ==1{return args [_faca +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};const _geg =57371;var _cgdfb =[]*_fdcf .Regexp {};func _gcfa (_fae int )string {if _fae >=0&&_fae < len (_abe ){if _abe [_fae ]!=""{return _abe [_fae ];};};return _e .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_fae );};

// Reference returns an invalid reference for String.
func (_fgfde String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_dbfgbb PrefixHorizontalRange )horizontalRangeReference (_ecba string )string {return _e .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_ecba ,_dbfgbb ._bgdc ,_dbfgbb ._efce );};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);func (_acec Result )String ()string {return _acec .Value ()};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_eggde :=len (args );if _eggde !=4&&_eggde !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acdd ,_egfb ,_fddfa :=_dca (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _fddfa .Type ==ResultTypeError {return _fddfa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ee :=args [2].ValueNumber ;if _ee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ccbc :=args [3].ValueNumber ;if _ccbc <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fcdca :=0;if _eggde ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcdca =int (args [4].ValueNumber );if !_ecgf (_fcdca ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_ddeac ,_fddfa :=_acab (_acdd ,_egfb ,_fcdca );if _fddfa .Type ==ResultTypeError {return _fddfa ;};return MakeNumberResult ((_ccbc /_ee -1)/_ddeac );};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Eval evaluates and returns a boolean.
func (_gbbbg Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_gbbbg ._cefc )};func _ddcc (_fadca string )(int ,int ,int ,bool ,Result ){_bde :="";_eafcd :=[]string {};for _edd ,_dbffe :=range _cgdd {_eafcd =_dbffe .FindStringSubmatch (_fadca );if len (_eafcd )> 1{_bde =_edd ;break ;};};if _bde ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_bcggc :=false ;var _afgac ,_ageb ,_fdbgb int ;var _gcbfge error ;switch _bde {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_ageb ,_gcbfge =_df .Atoi (_eafcd [1]);if _gcbfge !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_fdbgb ,_gcbfge =_df .Atoi (_eafcd [3]);if _gcbfge !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_afgac ,_gcbfge =_df .Atoi (_eafcd [5]);if _gcbfge !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};if _afgac < 0||_afgac > 9999||(_afgac > 99&&_afgac < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_afgac =_gfc (_afgac );_bcggc =_eafcd [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_ageb =_fegc [_eafcd [1]];_fdbgb ,_gcbfge =_df .Atoi (_eafcd [14]);if _gcbfge !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_afgac ,_gcbfge =_df .Atoi (_eafcd [16]);if _gcbfge !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};if _afgac < 0||_afgac > 9999||(_afgac > 99&&_afgac < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_afgac =_gfc (_afgac );_bcggc =_eafcd [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_aggb ,_deecf :=_df .Atoi (_eafcd [1]);if _deecf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_agaea ,_deecf :=_df .Atoi (_eafcd [3]);if _deecf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_gffc ,_deecf :=_df .Atoi (_eafcd [5]);if _deecf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};if _aggb >=1900&&_aggb < 10000{_afgac =_aggb ;_ageb =_agaea ;_fdbgb =_gffc ;}else if _aggb > 0&&_aggb < 13{_ageb =_aggb ;_fdbgb =_agaea ;_afgac =_gffc ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_bcggc =_eafcd [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_afgac ,_gcbfge =_df .Atoi (_eafcd [16]);if _gcbfge !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_ageb =_fegc [_eafcd [3]];_fdbgb ,_gcbfge =_df .Atoi (_eafcd [1]);if _gcbfge !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};_bcggc =_eafcd [19]=="";};if !_cddc (_afgac ,_ageb ,_fdbgb ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_eagg );};return _afgac ,_ageb ,_fdbgb ,_bcggc ,_eggc ;};type rangeIndex struct{_gab int ;_fgge int ;};type amorArgs struct{_ccae float64 ;_adgc float64 ;_dcfc float64 ;_cead float64 ;_gbgd int ;_gfebb float64 ;_fbb int ;};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ddb :=args [0].AsNumber ();if _ddb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cffce :=float64 (1);if _ddb .ValueNumber < 0{_cffce =-1;};if len (args )> 1{_acfb :=args [1].AsNumber ();if _acfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_cffce =_aeccg .Abs (_acfb .ValueNumber );};if len (args )==1{return MakeNumberResult (_aeccg .Floor (_ddb .ValueNumber ));};_acb :=_ddb .ValueNumber ;_acb ,_abbg :=_aeccg .Modf (_acb /_cffce );if _abbg !=0{if _ddb .ValueNumber < 0{_acb --;};};return MakeNumberResult (_acb *_cffce );};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_eeafdg NamedRangeRef )Update (q *_efad .UpdateQuery )Expression {return _eeafdg };var _ccegb =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Update returns the same object as updating sheet references does not affect Bool.
func (_gdcaf Bool )Update (q *_efad .UpdateQuery )Expression {return _gdcaf };

// BinaryExpr is a binary expression.
type BinaryExpr struct{_aeda ,_gfac Expression ;_ggdb BinOpType ;};func _bccd (_afgge string ,_gcbb func (_eaedf float64 )float64 )Function {return func (_bcec []Result )Result {if len (_bcec )!=1{return MakeErrorResult (_afgge +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfgdd :=_bcec [0].AsNumber ();switch _cfgdd .Type {case ResultTypeNumber :_ggae :=_gcbb (_cfgdd .ValueNumber );if _aeccg .IsNaN (_ggae ){return MakeErrorResult (_afgge +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _aeccg .IsInf (_ggae ,0){return MakeErrorResult (_afgge +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_ggae );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_afgge +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _cfgdd ;default:return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afgge ,_cfgdd .Type ));};};};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_fgb ,_bgd :=_df .ParseBool (v );if _bgd !=nil {_efcf .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_bgd );};return Bool {_fgb };};func _fefg (_agbe Result ,_cccd ,_fdgg string )(string ,Result ){switch _agbe .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _agbe .Value (),_eggc ;default:return "",MakeErrorResult (_cccd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_fdgg +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _cdbdg (_ebbg Result ,_cegcc *criteriaParsed )bool {if _ebbg .IsBoolean {return false ;};_acfd :=_ebbg .Type ;if _cegcc ._gaceg {return _acfd ==ResultTypeNumber &&_ebbg .ValueNumber ==_cegcc ._acfc ;}else if _acfd ==ResultTypeNumber {return _gegd (_ebbg .ValueNumber ,_cegcc ._bedb );};return _cdgc (_ebbg ,_cegcc );};const _aedb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _fbac (_fcb []Result )[]rangeIndex {_befcb :=[]rangeIndex {};_efg :=len (_fcb );for _cgfd :=0;_cgfd < _efg -1;_cgfd +=2{_ccgdc :=[]rangeIndex {};_egcccf :=_ddd (_fcb [_cgfd ]);_cbbe :=_ggcga (_fcb [_cgfd +1]);if _cgfd ==0{for _ebdbe ,_fgdd :=range _egcccf {for _ccdb ,_edc :=range _fgdd {if _cdbdg (_edc ,_cbbe ){_ccgdc =append (_ccgdc ,rangeIndex {_ebdbe ,_ccdb });};};};}else {for _ ,_geebf :=range _befcb {_cdd :=_egcccf [_geebf ._gab ][_geebf ._fgge ];if _cdbdg (_cdd ,_cbbe ){_ccgdc =append (_ccgdc ,_geebf );};};};if len (_ccgdc )==0{return []rangeIndex {};};_befcb =_ccgdc [:];};return _befcb ;};var _fegc =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};const _fedg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Eval evaluates and returns the result of a formula.
func (_cdga *defEval )Eval (ctx Context ,formula string )Result {_efbf :=ParseString (formula );if _efbf !=nil {_cdga .checkLastEvalIsRef (ctx ,_efbf );_aeb :=_efbf .Eval (ctx ,_cdga );return _aeb ;};return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_dbad PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_abcc :=_dbad ._cadfc .Reference (ctx ,ev );switch _abcc .Type {case ReferenceTypeSheet :_adfac :=_dbad .horizontalRangeReference (_abcc .Value );if _ebbf ,_ecbe :=ev .GetFromCache (_adfac );_ecbe {return _ebbf ;};_aecca :=ctx .Sheet (_abcc .Value );_ffd ,_dgce :=_fec (_aecca ,_dbad ._bgdc ,_dbad ._efce );_ggdff :=_deb (_aecca ,ev ,_ffd ,_dgce );ev .SetCache (_adfac ,_ggdff );return _ggdff ;default:return MakeErrorResult (_e .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abcc .Type ));};};const _feae =57373;

// IsBool returns false for the invalid reference context.
func (_dbce *ivr )IsBool (cellRef string )bool {return false };type plex struct{_bba chan*node ;_agga Expression ;};func (_dgge node )String ()string {return _e .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_dgge ._ffdg ,_adbfb (string (_dgge ._dggb )));};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_ddeg :=args [0].AsNumber ();if _ddeg .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _ddeg .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_dgeg (_ddeg .ValueNumber ));};const _degc ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";var _abe =[...]string {};func _aebc (_gcdd ,_ddc ,_bgddd ,_cca ,_abcf float64 )float64 {var _acac float64 ;_faf :=_abcf /_bgddd ;if _faf >=1{_faf =1;if _cca ==1{_acac =_gcdd ;}else {_acac =0;};}else {_acac =_gcdd *_aeccg .Pow (1-_faf ,_cca -1);};_bcfbd :=_gcdd *_aeccg .Pow (1-_faf ,_cca );var _agegc float64 ;if _bcfbd < _ddc {_agegc =_acac -_ddc ;}else {_agegc =_acac -_bcfbd ;};if _agegc < 0{_agegc =0;};return _agegc ;};type durationArgs struct{_gebfg float64 ;_caefg float64 ;_fffb float64 ;_faabg float64 ;_fgbe float64 ;_ffbe int ;};var _gfdfb =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_abbc :=args [0].ValueNumber ;if _abbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_cdfc ,_bccb :=_bdee (args [1],args [2],"\u0058\u004e\u0050\u0056");if _bccb .Type ==ResultTypeError {return _bccb ;};_beccb :=_cdfc ._aff ;_gge :=_cdfc ._fcbc ;_edg :=0.0;_gdgc :=_gge [0];for _bgeag ,_gfcb :=range _beccb {_edg +=_gfcb /_aeccg .Pow (1+_abbc ,(_gge [_bgeag ]-_gdgc )/365);};return MakeNumberResult (_edg );};func _edae (_fdad Context ,_efdg ,_fbbag string )(string ,string ){_befae :=_efdg +"\u0031";_gbcgb :=_fdad .LastRow (_efdg );_dgbed :=_fbbag +_df .Itoa (_gbcgb );return _befae ,_dgbed ;};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _aced (args ,false )};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {v }};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_fcdf :=_bcdd (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _fcdf .Type !=ResultTypeEmpty {return _fcdf ;};_fggc :=_fbac (args [1:]);_cbdd :=_aeccg .MaxFloat64 ;_egde :=_ddd (args [0]);for _ ,_ceca :=range _fggc {_gbbda :=_egde [_ceca ._gab ][_ceca ._fgge ].ValueNumber ;if _cbdd > _gbbda {_cbdd =_gbbda ;};};if _cbdd ==_aeccg .MaxFloat64 {_cbdd =0;};return MakeNumberResult (float64 (_cbdd ));};func _feb (_aegg []Result ,_acbag countMode )float64 {_acdef :=0.0;for _ ,_baa :=range _aegg {switch _baa .Type {case ResultTypeNumber :if _acbag ==_edfd ||(_acbag ==_eaefe &&!_baa .IsBoolean ){_acdef ++;};case ResultTypeList ,ResultTypeArray :_acdef +=_feb (_baa .ListValues (),_acbag );case ResultTypeString :if _acbag ==_edfd {_acdef ++;};case ResultTypeEmpty :if _acbag ==_agab {_acdef ++;};};};return _acdef ;};

// Eval evaluates a range returning a list of results or an error.
func (_ebeb Range )Eval (ctx Context ,ev Evaluator )Result {_cae :=_ebeb ._ecab .Reference (ctx ,ev );_gedb :=_ebeb ._fgfd .Reference (ctx ,ev );_feebf :=_dcge (_cae ,_gedb );if _cae .Type ==ReferenceTypeCell &&_gedb .Type ==ReferenceTypeCell {if _cdbbd ,_gfcf :=ev .GetFromCache (_feebf );_gfcf {return _cdbbd ;}else {_daaa :=_deb (ctx ,ev ,_cae .Value ,_gedb .Value );ev .SetCache (_feebf ,_daaa );return _daaa ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_feebf );};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ffde :=args [0].Ref ;for _ffde .Type ==ReferenceTypeNamedRange {_ffde =ctx .NamedRange (_ffde .Value );};_cbfg :="";switch _ffde .Type {case ReferenceTypeCell :_cbfg =_ffde .Value ;case ReferenceTypeRange :_fddd :=_aea .Split (_ffde .Value ,"\u003a");if len (_fddd )==2{_cbfg =_fddd [0];};default:return MakeErrorResult (_e .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_ffde .Type ));};_fbfc ,_bagb :=_deeb .ParseCellReference (_cbfg );if _bagb !=nil {return MakeErrorResult (_e .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_bagb .Error ()));};_fadd ,_eef ,_cbcbg :=_fbfc .Column ,_fbfc .RowIdx ,_fbfc .SheetName ;_adacg :=args [1].AsNumber ();if _adacg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_ebeg :=args [2].AsNumber ();if _ebeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _egdcf ,_gccca Result ;if len (args )==3{_egdcf =MakeNumberResult (1);_gccca =MakeNumberResult (1);}else {_egdcf =args [3].AsNumber ();if _egdcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _egdcf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_gccca =args [4].AsNumber ();if _gccca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _gccca .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_babg :=_deeb .ColumnToIndex (_fadd );_bedg :=_eef +uint32 (_adacg .ValueNumber );_afbef :=_babg +uint32 (_ebeg .ValueNumber );_edef :=_bedg +uint32 (_egdcf .ValueNumber );_faga :=_afbef +uint32 (_gccca .ValueNumber );if _egdcf .ValueNumber > 0{_edef --;}else {_edef ++;_bedg ,_edef =_edef ,_bedg ;};if _gccca .ValueNumber > 0{_faga --;}else {_faga ++;_afbef ,_faga =_faga ,_afbef ;};_eaae :=_e .Sprintf ("\u0025\u0073\u0025\u0064",_deeb .IndexToColumn (_afbef ),_bedg );_bdcf :=_e .Sprintf ("\u0025\u0073\u0025\u0064",_deeb .IndexToColumn (_faga ),_edef );if _cbcbg ==""{return _deb (ctx ,ev ,_eaae ,_bdcf );}else {return _deb (ctx .Sheet (_cbcbg ),ev ,_eaae ,_bdcf );};};func _gfc (_affd int )int {if _affd < 1900{if _affd < 30{_affd +=2000;}else {_affd +=1900;};};return _affd ;};func (_gddc *Lexer )Next ()*node {_gddc ._cabd .Lock ();defer _gddc ._cabd .Unlock ();if len (_gddc ._efaa )> 0{_cggb :=_gddc ._efaa [0];_gddc ._efaa =_gddc ._efaa [1:];return _cggb ;};return _gddc .nextRaw ();};func _ccfg (_ffef []Result ,_dbgb string )(*amorArgs ,Result ){_afcgc :=len (_ffef );if _afcgc !=6&&_afcgc !=7{return nil ,MakeErrorResult (_dbgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ffef [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbgb +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ade :=_ffef [0].ValueNumber ;if _ade < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbgb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_gged ,_fcfc :=_aabf (_ffef [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_dbgb );if _fcfc .Type ==ResultTypeError {return nil ,_fcfc ;};_agfa ,_fcfc :=_aabf (_ffef [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_dbgb );if _fcfc .Type ==ResultTypeError {return nil ,_fcfc ;};if _agfa < _gged {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _ffef [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fddge :=_ffef [3].ValueNumber ;if _fddge < 0||_fddge > _ade {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _ffef [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_adca :=int (_ffef [4].ValueNumber );if _adca < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbgb +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _ffef [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbgb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ggb :=_ffef [5].ValueNumber ;if _ggb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbgb +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_abdg :=0;if _afcgc ==7&&_ffef [6].Type !=ResultTypeEmpty {if _ffef [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbgb +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abdg =int (_ffef [6].ValueNumber );if !_ecgf (_abdg )||_abdg ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dbgb );};};return &amorArgs {_ade ,_gged ,_agfa ,_fddge ,_adca ,_ggb ,_abdg },_eggc ;};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_eedd :=args [0].AsNumber ();_cbd :=args [1].AsNumber ();if _eedd .Type ==ResultTypeNumber &&_cbd .Type ==ResultTypeNumber {_ebcgf :=_aeccg .Atan2 (_cbd .ValueNumber ,_eedd .ValueNumber );if _ebcgf !=_ebcgf {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_ebcgf );};for _ ,_gbcg :=range []ResultType {_eedd .Type ,_cbd .Type }{switch _gbcg {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _eedd ;default:return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbcg ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};const _begga =57376;const _acfgd =57355;var _ecade ,_ccfec ,_abba ,_gcbfg ,_cfb ,_bgfa *_fdcf .Regexp ;const _baee =57353;

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bece :=args [0].AsNumber ();if _bece .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bagdf :=float64 (1);if _bece .ValueNumber < 0{_bagdf =-1;};if len (args )> 1{_egcb :=args [1].AsNumber ();if _egcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bagdf =_aeccg .Abs (_egcb .ValueNumber );};if len (args )==1{return MakeNumberResult (_aeccg .Ceil (_bece .ValueNumber ));};_bbac :=_bece .ValueNumber ;_bbac ,_fgfa :=_aeccg .Modf (_bbac /_bagdf );if _fgfa !=0{if _bece .ValueNumber > 0{_bbac ++;};};return MakeNumberResult (_bbac *_bagdf );};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_geef :=len (args );if _geef < 3||_geef > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fafa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cdf :=args [1].ValueNumber ;if _cdf !=float64 (int (_cdf )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dabc :=args [2].ValueNumber ;_defd :=0.0;if _geef >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_defd =args [3].ValueNumber ;};_cabbd :=0.0;if _geef ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cabbd =args [4].ValueNumber ;if _cabbd !=0{_cabbd =1;};};if _fafa ==0{return MakeNumberResult (-_dabc *_cdf -_defd );}else {return MakeNumberResult ((((1-_aeccg .Pow (1+_fafa ,_cdf ))/_fafa )*_dabc *(1+_fafa *_cabbd )-_defd )/_aeccg .Pow (1+_fafa ,_cdf ));};};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_cfaf :=len (args );if _cfaf < 3||_cfaf > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecacg :=args [0].ValueNumber ;if _ecacg !=float64 (int (_ecacg )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bagg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_efba :=args [2].ValueNumber ;_ddaa :=0.0;if _cfaf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddaa =args [3].ValueNumber ;};_cdcee :=0.0;if _cfaf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cdcee =args [4].ValueNumber ;if _cdcee !=0{_cdcee =1;};};_abebf :=0.1;if _cfaf >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abebf =args [5].ValueNumber ;};_ffdbd :=100;_cdbee :=0;_aacc :=false ;_fdagf :=1e-6;_agfcc :=_abebf ;for _cdbee < _ffdbd &&!_aacc {_bfff :=_aeccg .Pow (_agfcc +1,_ecacg );_dgbeg :=_aeccg .Pow (_agfcc +1,_ecacg -1);_ffaeb :=_agfcc *_cdcee +1;_bgdgfa :=_bagg *(_bfff -1);_geea :=_ddaa +_bfff *_efba +_bgdgfa *_ffaeb /_agfcc ;_afee :=_ecacg *_dgbeg *_efba -_bgdgfa *_ffaeb /_aeccg .Pow (_agfcc ,2);_ef :=(_ecacg *_bagg *_dgbeg *_ffaeb +_bgdgfa *_cdcee )/_agfcc ;_efga :=_geea /(_afee +_ef );if _aeccg .Abs (_efga )< _fdagf {_aacc =true ;};_cdbee ++;_agfcc -=_efga ;};return MakeNumberResult (_agfcc );};

// Eval evaluates a vertical range returning a list of results or an error.
func (_efdfa VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gbfg :=_efdfa .verticalRangeReference ();if _efgc ,_bccbf :=ev .GetFromCache (_gbfg );_bccbf {return _efgc ;};_adcaa ,_dfec :=_edae (ctx ,_efdfa ._gcff ,_efdfa ._eeedf );_degd :=_deb (ctx ,ev ,_adcaa ,_dfec );ev .SetCache (_gbfg ,_degd );return _degd ;};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_fgbf Context ,formula string )Result ;SetCache (_cdfa string ,_gaafa Result );GetFromCache (_bbcgg string )(Result ,bool );LastEvalIsRef ()bool ;};

// Eval evaluates and returns the result of the cell reference.
func (_agdga CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_agdga ._agge ,ev )};

// String is a string expression.
type String struct{_cdgb string };

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_abfcf :=args [0].ValueNumber ;_cgggg :=args [1].ValueNumber ;_aaegg :=args [2].ValueNumber ;_edcc :=_acfa (_abfcf ,_cgggg ,_aaegg );if _edcc >=0{return MakeNumberResult (_edcc );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};func (_cdcgdc *Lexer )nextRaw ()*node {for len (_cdcgdc ._gacc )!=0{_cebd :=<-_cdcgdc ._gacc [len (_cdcgdc ._gacc )-1];if _cebd !=nil {return _cebd ;};_cdcgdc ._gacc =_cdcgdc ._gacc [0:len (_cdcgdc ._gacc )-1];};return <-_cdcgdc ._edbd ;};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_ddgb ,_bgddf ,_ccecd Expression };

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _fbea (args ,_geefe )};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_faef :=1.0;for _ ,_acee :=range args {_acee =_acee .AsNumber ();switch _acee .Type {case ResultTypeNumber :_faef *=_acee .ValueNumber ;case ResultTypeList ,ResultTypeArray :_edcb :=Product (_acee .ListValues ());if _edcb .Type !=ResultTypeNumber {return _edcb ;};_faef *=_edcb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _acee ;case ResultTypeEmpty :default:return MakeErrorResult (_e .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_acee .Type ));};};return MakeNumberResult (_faef );};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_cgfde EmptyExpr )Update (q *_efad .UpdateQuery )Expression {return _cgfde };func _cfac (_addda []Result ,_gagc string )(*durationArgs ,Result ){_eebg :=len (_addda );if _eebg !=5&&_eebg !=6{return nil ,MakeErrorResult (_gagc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgbcf ,_ebbgf ,_efdcg :=_dca (_addda [0],_addda [1],_gagc );if _efdcg .Type ==ResultTypeError {return nil ,_efdcg ;};_aebgb :=_addda [2];if _aebgb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gagc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fca :=_aebgb .ValueNumber ;if _fca < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_ffdcf :=_addda [3];if _ffdcf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gagc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ebee :=_ffdcf .ValueNumber ;if _ebee < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_faace :=_addda [4];if _faace .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gagc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_agdab :=float64 (int (_faace .ValueNumber ));if !_aeagb (_agdab ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fcfa :=0;if _eebg ==6&&_addda [5].Type !=ResultTypeEmpty {_bdab :=_addda [5];if _bdab .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_gagc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcfa =int (_bdab .ValueNumber );if !_ecgf (_fcfa ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_gagc );};};return &durationArgs {_fgbcf ,_ebbgf ,_fca ,_ebee ,_agdab ,_fcfa },_eggc ;};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_feda :=_bcdd (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _feda .Type !=ResultTypeEmpty {return _feda ;};_dabd :=_fbac (args [1:]);_gggf :=0.0;_bbbce :=_ddd (args [0]);for _ ,_adba :=range _dabd {_gggf +=_bbbce [_adba ._gab ][_adba ._fgge ].ValueNumber ;};return MakeNumberResult (float64 (_gggf ));};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dbbda :=_aea .ToLower (args [0].ValueString );if !_facf (_dbbda ){_ ,_ ,_ ,_gfec ,_fdccd :=_ddcc (_dbbda );if _fdccd .Type ==ResultTypeError {_fdccd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _fdccd ;};if _gfec {return MakeNumberResult (0);};};_afaf ,_cbed ,_cabda ,_efgce ,_ ,_ba :=_ddfa (_dbbda );if _ba .Type ==ResultTypeError {return _ba ;};_cgbe :=_acfa (float64 (_afaf ),float64 (_cbed ),_cabda );if _efgce {_cgbe +=0.5;}else if _cgbe >=1{_cgbe -=float64 (int (_cgbe ));};return MakeNumberResult (_cgbe );};var _ddga =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_bdgg ,_dgdae :=_df .ParseFloat (v ,64);if _dgdae !=nil {_efcf .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_dgdae );};return Number {_bdgg };};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_bcffd ,_gbad int };

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_eaab :=len (args );if _eaab < 5||_eaab > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bec :=args [0].ValueNumber ;if _bec < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfbab :=args [1].ValueNumber ;if _cfbab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcad :=args [2].ValueNumber ;if _fcad ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fcad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eecac :=args [3].ValueNumber ;if _eecac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_age :=args [4].ValueNumber ;if _eecac > _age {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _age > _fcad {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_afdg :=2.0;if _eaab > 5{if args [5].Type ==ResultTypeEmpty {_afdg =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afdg =args [5].ValueNumber ;if _afdg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_bfea :=false ;if _eaab > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bfea =args [6].ValueNumber !=0;};_bdec :=0.0;_cffc :=_aeccg .Floor (_eecac );_cfdd :=_aeccg .Ceil (_age );if _bfea {for _acgf :=_cffc +1;_acgf <=_cfdd ;_acgf ++{_bcbe :=_aebc (_bec ,_cfbab ,_fcad ,_acgf ,_afdg );if _acgf ==_cffc +1{_bcbe *=_aeccg .Min (_age ,_cffc +1)-_eecac ;}else if _acgf ==_cfdd {_bcbe *=_age +1-_cfdd ;};_bdec +=_bcbe ;};}else {_dcbde :=_fcad ;var _cbca float64 ;if !_ebbec (_eecac ,_aeccg .Floor (_eecac )){if _afdg ==1{_fdgd :=_fcad /2;if _eecac > _fdgd ||_ebbec (_eecac ,_fdgd ){_cbca =_eecac -_fdgd ;_eecac =_fdgd ;_age -=_cbca ;_dcbde ++;};};};if _afdg !=0{_bec -=_gbbc (_bec ,_cfbab ,_fcad ,_dcbde ,_eecac ,_afdg );};_bdec =_gbbc (_bec ,_cfbab ,_fcad ,_fcad -_eecac ,_age -_eecac ,_afdg );};return MakeNumberResult (_bdec );};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _fbea (args ,_feeg )};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_decba :=args [0].AsNumber ();if _decba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fedaf :=args [1].AsNumber ();if _fedaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fffe :=int (_fedaf .ValueNumber );if _fffe < 0||_fffe > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_eedg :=0;if len (args )> 2{_ecde :=args [2].AsNumber ();if _ecde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eedg =int (_ecde .ValueNumber );};_ggga :=_df .FormatInt (int64 (_decba .ValueNumber ),_fffe );if len (_ggga )< _eedg {_ggga =_aea .Repeat ("\u0030",_eedg -len (_ggga ))+_ggga ;};return MakeStringResult (_ggga );};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dace :=args [0].AsString ();if _dace .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_dace .ValueString ,ev );};const _babad =57364;

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_fbfag :=len (args );if _fbfag < 3||_fbfag > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_faed :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bedec :=args [1].ValueNumber ;if _bedec ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbge :=args [2].ValueNumber ;_bedecg :=0.0;if _fbfag >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bedecg =args [3].ValueNumber ;};_dabf :=0.0;if _fbfag ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dabf =args [4].ValueNumber ;if _dabf !=0{_dabf =1;};};var _ggde float64 ;if _faed ==0{_ggde =(_cbge +_bedecg )/_bedec ;}else {_cffa :=_aeccg .Pow (1+_faed ,_bedec );if _dabf ==1{_ggde =(_bedecg *_faed /(_cffa -1)+_cbge *_faed /(1-1/_cffa ))/(1+_faed );}else {_ggde =_bedecg *_faed /(_cffa -1)+_cbge *_faed /(1-1/_cffa );};};return MakeNumberResult (-_ggde );};

// LastColumn returns empty string for the invalid reference context.
func (_aeded *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Update updates references in the Range after removing a row/column.
func (_cgg Range )Update (q *_efad .UpdateQuery )Expression {_cfd :=_cgg ;if q .UpdateCurrentSheet {_cfd ._ecab =_cgg ._ecab .Update (q );_cfd ._fgfd =_cgg ._fgfd .Update (q );};return _cfd ;};

// Bool is a boolean expression.
type Bool struct{_cefc bool };

// Reference returns an invalid reference for FunctionCall.
func (_cdbd FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _deed (_f Result )Result {if _f .Type ==ResultTypeEmpty {return _f ;};_aadf :=_f .AsString ();if _aadf .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _f .IsBoolean {if _aadf .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _aadf .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_aea .ToLower (_aadf .ValueString ));};};const _fbgbg =57354;

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_gbdda ,_bcdgb :=_gacg (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _bcdgb .Type ==ResultTypeError {return _bcdgb ;};_begfg :=_gbdda ._dccdc ;_efe :=_gbdda ._cfcgb ;_fbgd ,_bcdgb :=_bbee (_gbdda ._ddefg ,_gbdda ._faae ,_begfg ,_efe );if _bcdgb .Type ==ResultTypeError {return _bcdgb ;};return MakeNumberResult (_fbgd );};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0049\u0046\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdfae :=args [0];switch _bdfae .Type {case ResultTypeError :return _bdfae ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_bdfae .ValueNumber !=0);};if _bdfae .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _egge (args );case ResultTypeArray :return _ddcg (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_afbgf .Lock ();defer _afbgf .Unlock ();if _ ,_faff :=_cadb [name ];_faff {_efcf .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_cadb [name ]=fn ;};var _bcda =[]*_fdcf .Regexp {};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_eddbb ,_fgga :=_dfcd (args ,true );if _fgga ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_eddbb /_fgga );};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_ceee :=args [0];if _ceee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbcg :=int (_ceee .ValueNumber );if len (args )<=_cbcg {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_cbcg ];};

// Reference returns a string reference value to a horizontal range.
func (_fgdc HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_fgdc .horizontalRangeReference ()};};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fgaed :=args [0].ValueNumber ;if _fgaed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_dedaa :=float64 (int (args [1].ValueNumber ));if _dedaa < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_aeccg .Pow (_fgaed +1,1/_dedaa )-1)*_dedaa );};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efbfg :=args [0];_bbda :=args [1];if _bbda .Type !=ResultTypeArray &&_bbda .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_geee :=_ddde (_bbda );_baeee :=-1;for _affbc ,_debcg :=range _geee {if _efgf (_efbfg ,_debcg ,false ,false )==_fcgf {_baeee =_affbc ;};};if _baeee ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_cde :=_geee ;if len (args )==3{_cde =_ddde (args [2]);};if _baeee < 0||_baeee >=len (_cde ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _cde [_baeee ];};

// Number is a nubmer expression.
type Number struct{_bdeec float64 };const _ceagg int =30;

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_bca PrefixHorizontalRange )Update (q *_efad .UpdateQuery )Expression {return _bca };

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func (_cdbg ReferenceType )String ()string {if _cdbg >=ReferenceType (len (_bgac )-1){return _e .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cdbg );};return _acbee [_bgac [_cdbg ]:_bgac [_cdbg +1]];};const _cdbbf =86400000000000;

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {return Range {from ,to }};

// Update updates the horizontal range references after removing a row/column.
func (_gaafc HorizontalRange )Update (q *_efad .UpdateQuery )Expression {return _gaafc };

// IsDBCS returns false for the invalid reference context.
func (_eeab *ivr )IsDBCS ()bool {return false };func _cbfe (_gacf ,_dbae []float64 ,_fbcb float64 )float64 {_daaeb :=_fbcb +1;_ecbg :=_gacf [0];_fgab :=len (_gacf );_ege :=_dbae [0];for _bcfag :=1;_bcfag < _fgab ;_bcfag ++{_ecbg +=_gacf [_bcfag ]/_aeccg .Pow (_daaeb ,(_dbae [_bcfag ]-_ege )/365);};return _ecbg ;};func _gbbc (_bcf ,_agdgb ,_dea ,_bgg ,_effd ,_gccc float64 )float64 {var _beab ,_fdccb float64 ;_gdceg :=0.0;_fcf :=_aeccg .Ceil (_effd );_ebdbf :=_bcf -_agdgb ;_cfe :=false ;_gebfd :=0.0;for _cdcgd :=1.0;_cdcgd <=_fcf ;_cdcgd ++{if !_cfe {_beab =_aebc (_bcf ,_agdgb ,_dea ,_cdcgd ,_gccc );_gebfd =_ebdbf /(_dea -_cdcgd +1);if _gebfd > _beab {_fdccb =_gebfd ;_cfe =true ;}else {_fdccb =_beab ;_ebdbf -=_beab ;};}else {_fdccb =_gebfd ;};if _cdcgd ==_fcf {_fdccb *=_effd +1-_fcf ;};_gdceg +=_fdccb ;};return _gdceg ;};func _adfg (_ceeb BinOpType ,_dcda [][]Result ,_fgda Result )Result {_efddc :=[][]Result {};for _gaag :=range _dcda {_gfbg :=_bcdg (_ceeb ,_dcda [_gaag ],_fgda );if _gfbg .Type ==ResultTypeError {return _gfbg ;};_efddc =append (_efddc ,_gfbg .ValueList );};return MakeArrayResult (_efddc );};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {s }};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _cfge ,_gdcca float64 ;switch args [0].Type {case ResultTypeNumber :_gdcca =args [0].ValueNumber ;case ResultTypeString :_cfage :=DateValue ([]Result {args [0]});if _cfage .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gdcca =_cfage .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_cfge =args [1].ValueNumber ;if _cfge < 62&&_gdcca >=62{_cfge --;};case ResultTypeString :_baag :=DateValue ([]Result {args [1]});if _baag .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_cfge =_baag .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gdgb :=float64 (int (_gdcca -_cfge ));return MakeNumberResult (_gdgb );};const _cbacg =1;

// Reference returns an invalid reference for BinaryExpr.
func (_bdeeg BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fged :=args [0].Ref ;if _fged .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_fged .Value ));};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_becfe :=args [0].AsNumber ();if _becfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_bggbd :=float64 (1);if _becfe .ValueNumber < 0{_bggbd =-1;};if len (args )> 1{_geed :=args [1].AsNumber ();if _geed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bggbd =_geed .ValueNumber ;};_fda :=float64 (1);if len (args )> 2{_fagf :=args [2].AsNumber ();if _fagf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_fda =_fagf .ValueNumber ;};if len (args )==1{return MakeNumberResult (_aeccg .Ceil (_becfe .ValueNumber ));};_dbbf :=_becfe .ValueNumber ;_dbbf ,_ffae :=_aeccg .Modf (_dbbf /_bggbd );if _ffae !=0{if _becfe .ValueNumber > 0{_dbbf ++;}else if _fda < 0{_dbbf --;};};return MakeNumberResult (_dbbf *_bggbd );};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_dbee :=_aea .Split (v ,"\u003a");if len (_dbee )!=2{return nil ;};return VerticalRange {_dbee [0],_dbee [1]};};func _ffgf (_fdfae ,_ffdb float64 )float64 {_fdfae =_aeccg .Trunc (_fdfae );_ffdb =_aeccg .Trunc (_ffdb );if _fdfae ==0&&_ffdb ==0{return 0;};return _fdfae *_ffdb /_cfba (_fdfae ,_ffdb );};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);var _ccad =false ;func _egge (_gee []Result )Result {_efdff :=_gee [0].ValueList ;_geeca :=len (_efdff );switch len (_gee ){case 1:_ggge :=[]Result {};for _ ,_ccfe :=range _efdff {_ggge =append (_ggge ,MakeBoolResult (_ccfe .ValueNumber !=0));};return MakeListResult (_ggge );case 2:_gaaa :=_gee [1];switch _gaaa .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_eegeg :=[]Result {};for _ ,_eeeg :=range _efdff {var _eecc Result ;if _eeeg .ValueNumber ==0{_eecc =MakeBoolResult (false );}else {_eecc =_gaaa ;};_eegeg =append (_eegeg ,_eecc );};return MakeListResult (_eegeg );case ResultTypeList :_dfcba :=_dgfg (_gaaa ,_geeca );_fecf :=[]Result {};for _ebd ,_ggee :=range _efdff {var _fgfbe Result ;if _ggee .ValueNumber ==0{_fgfbe =MakeBoolResult (false );}else {_fgfbe =_dfcba [_ebd ];};_fecf =append (_fecf ,_fgfbe );};return MakeListResult (_fecf );case ResultTypeArray :_eeac :=_dadc (_gaaa ,len (_gaaa .ValueArray ),_geeca );_gcca :=[][]Result {};for _ ,_gagb :=range _eeac {_bffe :=[]Result {};for _gbbg ,_adffd :=range _efdff {var _cbgb Result ;if _adffd .ValueNumber ==0{_cbgb =MakeBoolResult (false );}else {_cbgb =_gagb [_gbbg ];};_bffe =append (_bffe ,_cbgb );};_gcca =append (_gcca ,_bffe );};return MakeArrayResult (_gcca );};case 3:_ffeg :=_gee [1];_dbeff :=_gee [2];_cafdf :=_bbffd (_ffeg );_bdf :=_bbffd (_dbeff );if _cafdf &&_bdf {_eebd :=[]Result {};for _ ,_aadg :=range _efdff {var _dfcg Result ;if _aadg .ValueNumber ==0{_dfcg =_dbeff ;}else {_dfcg =_ffeg ;};_eebd =append (_eebd ,_dfcg );};return MakeListResult (_eebd );};if _ffeg .Type !=ResultTypeArray &&_dbeff .Type !=ResultTypeArray {_cgbc :=_dgfg (_ffeg ,_geeca );_gda :=_dgfg (_dbeff ,_geeca );_bgga :=[]Result {};for _bfag ,_ddffd :=range _efdff {var _fgbcg Result ;if _ddffd .ValueNumber ==0{_fgbcg =_gda [_bfag ];}else {_fgbcg =_cgbc [_bfag ];};_bgga =append (_bgga ,_fgbcg );};return MakeListResult (_bgga );};_ebebf :=len (_ffeg .ValueArray );if len (_dbeff .ValueArray )> _ebebf {_ebebf =len (_dbeff .ValueArray );};_fg :=_dadc (_ffeg ,_ebebf ,_geeca );_bffb :=_dadc (_dbeff ,_ebebf ,_geeca );_eddb :=[][]Result {};for _acae :=0;_acae < _ebebf ;_acae ++{_ddge :=[]Result {};for _febf ,_abecf :=range _efdff {var _cgde Result ;if _abecf .ValueNumber ==0{_cgde =_bffb [_acae ][_febf ];}else {_cgde =_fg [_acae ][_febf ];};_ddge =append (_ddge ,_cgde );};_eddb =append (_eddb ,_ddge );};return MakeArrayResult (_eddb );};return MakeErrorResult ("");};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_cebdg PrefixRangeExpr )Update (q *_efad .UpdateQuery )Expression {_fceb :=_cebdg ;_gdc :=_cebdg ._ddgb .String ();if _gdc ==q .SheetToUpdate {_gdag :=*q ;_gdag .UpdateCurrentSheet =true ;_fceb ._bgddf =_cebdg ._bgddf .Update (&_gdag );_fceb ._ccecd =_cebdg ._ccecd .Update (&_gdag );};return _fceb ;};var _cadb =map[string ]FunctionComplex {};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};func (_fgddc BinOpType )String ()string {if _fgddc >=BinOpType (len (_gfdfb )-1){return _e .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_fgddc );};return _degc [_gfdfb [_fgddc ]:_gfdfb [_fgddc +1]];};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_dgc PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_fegb :=_dgc ._ddgb .Reference (ctx ,ev );_cgdg :=_dgc ._bgddf .Reference (ctx ,ev );_beec :=_dgc ._ccecd .Reference (ctx ,ev );switch _fegb .Type {case ReferenceTypeSheet :_dbcd :=_ccd (_fegb ,_cgdg ,_beec );if _cgdg .Type ==ReferenceTypeCell &&_beec .Type ==ReferenceTypeCell {if _gabf ,_adfge :=ev .GetFromCache (_dbcd );_adfge {return _gabf ;}else {_eeb :=_deb (ctx .Sheet (_fegb .Value ),ev ,_cgdg .Value ,_beec .Value );ev .SetCache (_dbcd ,_eeb );return _eeb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_dbcd );default:return MakeErrorResult (_e .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fegb .Type ));};};

// Update returns the same object as updating sheet references does not affect Number.
func (_dffdg Number )Update (q *_efad .UpdateQuery )Expression {return _dffdg };

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfb :=args [0].AsString ();if _gfb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_gfb .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_gfb .ValueString [0]));};

// Reference returns an invalid reference for EmptyExpr.
func (_dgeca EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abd :=args [0].Ref ;if _abd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_abd .Value ,ev ).IsBoolean );};const _ebab =57369;

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccgd :=_ecb .Now ();_ ,_aeed :=_ccgd .Zone ();_dfe :=_gedg (_abgb ,_ccgd .Unix ()+int64 (_aeed ))+1;return MakeNumberResult (_dfe );};func (_agfd ResultType )String ()string {if _agfd >=ResultType (len (_cdca )-1){return _e .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_agfd );};return _dffd [_cdca [_agfd ]:_cdca [_agfd +1]];};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_dfcb :=len (args );if _dfcb !=5&&_dfcb !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfc ,_fdce ,_bafb :=_dca (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _bafb .Type ==ResultTypeError {return _bafb ;};_dcec ,_bafb :=_aabf (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _bafb .Type ==ResultTypeError {return _bafb ;};if _dcec >=_dfc {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcga :=args [3].ValueNumber ;if _fcga < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgbd :=args [4].ValueNumber ;if _fgbd <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_fgg :=0;if _dfcb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgg =int (args [5].ValueNumber );if !_ecgf (_fgg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_ebfd ,_bafb :=_acab (_dcec ,_fdce ,_fgg );if _bafb .Type ==ResultTypeError {return _bafb ;};_gdge ,_bafb :=_acab (_dcec ,_dfc ,_fgg );if _bafb .Type ==ResultTypeError {return _bafb ;};_gceda ,_bafb :=_acab (_dfc ,_fdce ,_fgg );if _bafb .Type ==ResultTypeError {return _bafb ;};_ggfd :=1+_ebfd *_fcga ;_ggfd /=_fgbd /100+_gdge *_fcga ;_ggfd --;_ggfd /=_gceda ;return MakeNumberResult (_ggfd );};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_edafd SheetPrefixExpr )Update (q *_efad .UpdateQuery )Expression {return _edafd };var _cfgg =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efdb :=args [0].ValueNumber ;if _efdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gcec :=args [1].ValueNumber ;if _gcec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecg :=args [2].ValueNumber ;if _ecg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_aeccg .Pow (_ecg /_gcec ,1/_efdb )-1);};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_ebe PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_ddgbc :=_ebe ._dgcc .Reference (ctx ,ev );switch _ddgbc .Type {case ReferenceTypeSheet :_bcac :=_ebe .verticalRangeReference (_ddgbc .Value );if _acgb ,_dgcd :=ev .GetFromCache (_bcac );_dgcd {return _acgb ;};_fgbc :=ctx .Sheet (_ddgbc .Value );_eefbe ,_ebaaa :=_edae (_fgbc ,_ebe ._bebe ,_ebe ._fgcc );_bbff :=_deb (_fgbc ,ev ,_eefbe ,_ebaaa );ev .SetCache (_bcac ,_bbff );return _bbff ;default:return MakeErrorResult (_e .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddgbc .Type ));};};func _ccgce (_cfagf []Result )(float64 ,float64 ,Result ){_cagc :=0.0;_eefc :=1.0;for _ ,_gaaga :=range _cfagf {switch _gaaga .Type {case ResultTypeNumber :_cagc +=_gaaga .ValueNumber ;_eefc *=_dgeg (_gaaga .ValueNumber );case ResultTypeList ,ResultTypeArray :_ccgc ,_gbeg ,_acca :=_ccgce (_gaaga .ListValues ());_cagc +=_ccgc ;_eefc *=_dgeg (_gbeg );if _acca .Type ==ResultTypeError {return 0,0,_acca ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_gaaga ;};};return _cagc ,_eefc ,_eggc ;};

// Update returns the same object as updating sheet references does not affect String.
func (_babe String )Update (q *_efad .UpdateQuery )Expression {return _babe };const _affbe =57358;

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbcdc :=args [0].AsNumber ();_bcabc :=args [1].AsNumber ();if _fbcdc .Type !=ResultTypeNumber ||_bcabc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bcabc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_aeccg .Trunc (_fbcdc .ValueNumber /_bcabc .ValueNumber ));};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbf :=args [0].AsNumber ();if _dbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ecgd :=args [1].AsNumber ();if _ecgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_aeccg .Pow (_dbf .ValueNumber ,_ecgd .ValueNumber ));};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bafc :=args [0].AsString ();_cgaf :=args [1].AsString ();if _bafc .Type !=ResultTypeString ||_cgaf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_bafc .ValueString ==_cgaf .ValueString );};const _ccec ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _dfd ()evCache {_cba :=evCache {};_cba ._cfed =make (map[string ]Result );_cba ._fdab =&_abce .Mutex {};return _cba ;};const _bdaa =187;func _aabf (_eca Result ,_bda ,_fffbf string )(float64 ,Result ){var _fccdc float64 ;switch _eca .Type {case ResultTypeNumber :_fccdc =float64 (int (_eca .ValueNumber ));case ResultTypeString :_edf :=DateValue ([]Result {_eca });if _edf .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_bda +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_fffbf );};_fccdc =_edf .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_fffbf );};if _fccdc < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_bda +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _fccdc ,_eggc ;};func _gedg (_dffdf ,_fegcf int64 )float64 {return float64 (int (0.5+float64 ((_fegcf -_dffdf )/86400)))};

// Eval evaluates and returns the result of a sheet expression.
func (_dgff SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func _ggad (){_cgdd ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_fdcf .MustCompile ("\u005e"+_ge +_gdg );_cgdd ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_fdcf .MustCompile ("\u005e"+_edeg +_gdg );_cgdd ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_fdcf .MustCompile ("\u005e"+_aedb +_gdg );_cgdd ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_fdcf .MustCompile ("\u005e"+_gbdd +_gdg );_bbfg ["\u0068\u0068"]=_fdcf .MustCompile (_dcffc +_fedg +"\u0024");_bbfg ["\u0068\u0068\u003am\u006d"]=_fdcf .MustCompile (_dcffc +_affe +"\u0024");_bbfg ["\u006d\u006d\u003as\u0073"]=_fdcf .MustCompile (_dcffc +_ccec +"\u0024");_bbfg ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_fdcf .MustCompile (_dcffc +_bcdfb +"\u0024");_bcda =[]*_fdcf .Regexp {_fdcf .MustCompile ("\u005e"+_ge +"\u0024"),_fdcf .MustCompile ("\u005e"+_edeg +"\u0024"),_fdcf .MustCompile ("\u005e"+_aedb +"\u0024"),_fdcf .MustCompile ("\u005e"+_gbdd +"\u0024")};_cgdfb =[]*_fdcf .Regexp {_fdcf .MustCompile ("\u005e"+_fedg +"\u0024"),_fdcf .MustCompile ("\u005e"+_affe +"\u0024"),_fdcf .MustCompile ("\u005e"+_ccec +"\u0024"),_fdcf .MustCompile ("\u005e"+_bcdfb +"\u0024")};};var _eggc Result =MakeEmptyResult ();func _ddd (_geegc Result )[][]Result {switch _geegc .Type {case ResultTypeArray :return _geegc .ValueArray ;case ResultTypeList :return [][]Result {_geegc .ValueList };default:return [][]Result {};};};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_fbdfcc Result )AsNumber ()Result {if _fbdfcc .Type ==ResultTypeString {_decb ,_aaccd :=_df .ParseFloat (_fbdfcc .ValueString ,64);if _aaccd ==nil {return MakeNumberResult (_decb );};};if _fbdfcc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _fbdfcc ;};type tokenType int ;

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdge :=args [0].AsNumber ();_acdfa :=args [1].AsNumber ();_bfaf :=args [2].AsNumber ();_gbda :=args [3].ListValues ();if _bdge .Type !=ResultTypeNumber ||_acdfa .Type !=ResultTypeNumber ||_bfaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_edbe :=float64 (0);for _dcfa ,_cgc :=range _gbda {_edbe +=_cgc .ValueNumber *_aeccg .Pow (_bdge .ValueNumber ,_acdfa .ValueNumber +float64 (_dcfa )*_bfaf .ValueNumber );};return MakeNumberResult (_edbe );};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcgee :=args [0].AsNumber ();if _fcgee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _eefa float64 ;_bdgb :=args [1].AsNumber ();if _bdgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eefa =_bdgb .ValueNumber ;if _eefa < 0&&_fcgee .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_aaea :=_fcgee .ValueNumber ;_aaea ,_bgcf :=_aeccg .Modf (_aaea /_eefa );if _bgcf !=0{if _fcgee .ValueNumber < 0&&_bgcf < 0{_aaea --;};};return MakeNumberResult (_aaea *_eefa );};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dcdgg :=[]float64 {};for _ ,_fee :=range args {switch _fee .Type {case ResultTypeString :_dddg :=_fee .AsNumber ();if _dddg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dcdgg =append (_dcdgg ,_dddg .ValueNumber );case ResultTypeList :_ddba :=LCM (_fee .ValueList );if _ddba .Type !=ResultTypeNumber {return _ddba ;};_dcdgg =append (_dcdgg ,_ddba .ValueNumber );case ResultTypeNumber :_dcdgg =append (_dcdgg ,_fee .ValueNumber );case ResultTypeError :return _fee ;};};if _dcdgg [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dcdgg )==1{return MakeNumberResult (_dcdgg [0]);};_acbbc :=_dcdgg [0];for _adbc :=1;_adbc < len (_dcdgg );_adbc ++{if _dcdgg [_adbc ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_acbbc =_ffgf (_acbbc ,_dcdgg [_adbc ]);};return MakeNumberResult (_acbbc );};var _dbbd ,_cgdf ,_afba ,_defc ,_feec ,_bef ,_cecgc ,_fbgbab ,_ddgeg ,_abfe ,_fdfb ,_gdbdd ,_egg ,_cbbg ,_gfea *_fdcf .Regexp ;

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbage :=args [0].AsString ();if _dbage .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_egba :=args [1].Ref ;if _egba .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_cadf :=_egba .Value ;switch _dbage .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_cafdb ,_ddbc :=_deeb .ParseCellReference (_cadf );if _ddbc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cadf );};_eebc :="\u0024"+_cafdb .Column +"\u0024"+_df .Itoa (int (_cafdb .RowIdx ));if _cafdb .SheetName !=""{_eebc =_cafdb .SheetName +"\u0021"+_eebc ;};return MakeStringResult (_eebc );case "\u0063\u006f\u006c":_begg ,_bacc :=_deeb .ParseCellReference (_cadf );if _bacc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cadf );};return MakeNumberResult (float64 (_begg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_eebgc :=_aea .Contains (ctx .GetFormat (_cadf ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_eebgc );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bcebc :="\u0047";_effa :=ctx .GetFormat (_cadf );if _effa =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_dbbd .MatchString (_effa ){_bcebc ="\u0046\u0030";}else if _effa =="\u0030\u0025"{_bcebc ="\u0050\u0030";}else if _effa =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bcebc ="\u0044\u0032";}else if _effa =="\u004d\u004d\u002fY\u0059"{_bcebc ="\u0044\u0033";}else if _effa =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_effa =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bcebc ="\u0044\u0034";}else if _effa =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bcebc ="\u0044\u0035";}else if _effa =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bcebc ="\u0044\u0036";}else if _effa =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bcebc ="\u0044\u0037";}else if _effa =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bcebc ="\u0044\u0038";}else if _effa =="\u0048\u0048\u003aM\u004d"{_bcebc ="\u0044\u0039";}else if _afba .MatchString (_effa ){_bcebc ="\u002e\u0030";}else if _defc .MatchString (_effa ){_bcebc ="\u002e\u0030\u0028\u0029";}else if _abfe .MatchString (_effa ){_bcebc ="\u0043\u0030";}else if _egg .MatchString (_effa )||_cbbg .MatchString (_effa ){_bcebc ="\u0044\u0031";}else if _beffd :=_cgdf .FindStringSubmatch (_effa );len (_beffd )> 1{_bcebc ="\u0046"+_df .Itoa (len (_beffd [1]));}else if _cddg :=_bef .FindStringSubmatch (_effa );len (_cddg )> 1{_bcebc ="\u002e"+_df .Itoa (len (_cddg [2]));}else if _edec :=_ddgeg .FindStringSubmatch (_effa );len (_edec )> 1{_bcebc ="\u0050"+_df .Itoa (len (_edec [2]));}else if _bgf :=_fdfb .FindStringSubmatch (_effa );len (_bgf )> 1{_bcebc ="\u0043"+_egabc (_bgf ,1);}else if _feegc :=_gdbdd .FindStringSubmatch (_effa );len (_feegc )> 1{_bcebc ="\u0043"+_egabc (_feegc ,1);}else if _gec :=_cecgc .FindStringSubmatch (_effa );len (_gec )> 1{_bcebc ="\u002e"+_egabc (_gec ,1)+"\u0028\u0029";}else if _babc :=_feec .FindStringSubmatch (_effa );len (_babc )> 1{_bcebc ="\u002e"+_egabc (_babc ,1);}else if _fdcc :=_gfea .FindStringSubmatch (_effa );len (_fdcc )> 1{_bcebc ="\u0053"+_egabc (_fdcc ,3);};if _bcebc !="\u0047"&&_aea .Contains (_effa ,"\u005b\u0052\u0045D\u005d"){_bcebc +="\u002d";};return MakeStringResult (_bcebc );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_gffbf :=ctx .GetFormat (_cadf );if _fbgbab .MatchString (_gffbf ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_cadf ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_febc :=0.0;if ctx .GetLocked (_cadf ){_febc =1.0;};return MakeNumberResult (_febc );case "\u0072\u006f\u0077":_ecee ,_fafag :=_deeb .ParseCellReference (_cadf );if _fafag !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cadf );};return MakeNumberResult (float64 (_ecee .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_dgf ,_abab :=_deeb .ParseCellReference (_cadf );if _abab !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cadf );};if _dgf .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_dgf .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_dgf .SheetName ).GetWidth (int (_dgf .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_dbage .ValueString );};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_d :=_aea .Split (v ,"\u003a");if len (_d )!=2{return nil ;};_fbgba ,_ :=_df .Atoi (_d [0]);_defeb ,_ :=_df .Atoi (_d [1]);return PrefixHorizontalRange {pfx ,_fbgba ,_defeb };};func _acceg (_ccafb yyLexer ,_deaa *yySymType )(_beg ,_eafcf int ){_eafcf =0;_beg =_ccafb .Lex (_deaa );if _beg <=0{_eafcf =_gccdd [0];goto _bcddf ;};if _beg < len (_gccdd ){_eafcf =_gccdd [_beg ];goto _bcddf ;};if _beg >=_dfbgf {if _beg < _dfbgf +len (_fgea ){_eafcf =_fgea [_beg -_dfbgf ];goto _bcddf ;};};for _geaf :=0;_geaf < len (_cfff );_geaf +=2{_eafcf =_cfff [_geaf +0];if _eafcf ==_beg {_eafcf =_cfff [_geaf +1];goto _bcddf ;};};_bcddf :if _eafcf ==0{_eafcf =_fgea [1];};if _gbdc >=3{_e .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_faaf (_eafcf ),uint (_beg ));};return _beg ,_eafcf ;};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ceffe :=args [0];if _ceffe .Type ==ResultTypeList {_fgec :=[][]Result {};for _ ,_cfega :=range _ceffe .ValueList {_fgec =append (_fgec ,[]Result {_cfega });};return MakeArrayResult (_fgec );};_gdea :=make ([][]Result ,len (_ceffe .ValueArray [0]));for _ ,_fcgda :=range _ceffe .ValueArray {for _bcdad ,_eaf :=range _fcgda {_gdea [_bcdad ]=append (_gdea [_bcdad ],_eaf );};};return MakeArrayResult (_gdea );};func _gebc (_bfcd string ,_cedg func (_bage float64 )float64 )Function {return func (_eddfb []Result )Result {if len (_eddfb )!=1{return MakeErrorResult (_bfcd +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_beee :=_eddfb [0].AsNumber ();switch _beee .Type {case ResultTypeNumber :_ffge :=_cedg (_beee .ValueNumber );if _aeccg .IsNaN (_ffge ){return MakeErrorResult (_bfcd +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _aeccg .IsInf (_ffge ,0){return MakeErrorResult (_bfcd +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _ffge ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_bfcd +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_ffge );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_bfcd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _beee ;default:return MakeErrorResult (_e .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bfcd ,_beee .Type ));};};};var _dgdb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_cbeg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_cbeg =int (args [1].ValueNumber );if _cbeg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _cbeg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_agac :=args [0].Value ();if _cbeg > len (_agac ){return MakeStringResult (_agac );};return MakeStringResult (_agac [0:_cbeg ]);};func (_edbc *evCache )SetCache (key string ,value Result ){_edbc ._fdab .Lock ();_edbc ._cfed [key ]=value ;_edbc ._fdab .Unlock ();};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_aee string };

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_aeccg .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};func _fbccg (_caag float64 )_ecb .Time {_eebgcb :=int64 ((_caag -_bac )*_cdbbf );return _ecb .Unix (0,_eebgcb ).UTC ();};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_bcea :=len (args );if (_bcea !=2&&_bcea !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffaf :=0;if _bcea ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffaf =int (args [2].ValueNumber );if !_ecgf (_ffaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gade :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdag :=args [1].ValueNumber ;_aae ,_fc :=_acab (_gade ,_bdag ,_ffaf );if _fc .Type ==ResultTypeError {return _fc ;};return MakeNumberResult (_aae );};func _dega (_cdbfd ,_bea _ecb .Time ,_adeg int )float64 {if _cdbfd .After (_bea ){_cdbfd ,_bea =_bea ,_cdbfd ;};_fefe :=0;_fbead ,_aafe ,_bagd :=_cdbfd .Date ();_aafa ,_gfgdfc ,_faea :=_bea .Date ();_feeb ,_fbdb :=int (_aafe ),int (_gfgdfc );_bfe ,_bcbaf :=_eaad (_fbead ,_feeb ,_bagd ,_adeg ),_eaad (_aafa ,_fbdb ,_faea ,_adeg );if !_gfga (_adeg ){return _dcef (_aafa ,_fbdb ,_bcbaf )-_dcef (_fbead ,_feeb ,_bfe );};if _adeg ==0{if (_feeb ==2||_bfe < 30)&&_faea ==31{_bcbaf =31;}else if _fbdb ==2&&_bcbaf ==_gg (_aafa ,_fbdb ){_bcbaf =_gg (_aafa ,2);};}else {if _feeb ==2&&_bfe ==30{_bfe =_gg (_fbead ,2);};if _fbdb ==2&&_bcbaf ==30{_bcbaf =_gg (_aafa ,2);};};if _fbead < _aafa ||(_fbead ==_aafa &&_feeb < _fbdb ){_fefe =30-_bfe +1;_bagd =1;_bfe =1;_bcddd :=_ecb .Date (_fbead ,_ecb .Month (_feeb ),_bagd ,0,0,0,0,_ecb .UTC ).AddDate (0,1,0);if _bcddd .Year ()< _aafa {_fefe +=_fega (_bcddd .Year (),int (_bcddd .Month ()),12,_adeg );_bcddd =_bcddd .AddDate (0,13-int (_bcddd .Month ()),0);_fefe +=_bfgg (_bcddd .Year (),_aafa -1,_adeg );};_fefe +=_fega (_aafa ,int (_bcddd .Month ()),_fbdb -1,_adeg );_bcddd =_bcddd .AddDate (0,_fbdb -int (_bcddd .Month ()),0);_feeb =_bcddd .Day ();};_fefe +=_bcbaf -_bfe ;if _fefe > 0{return float64 (_fefe );}else {return 0;};};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebef :=args [0].AsString ();if _ebef .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_ebef .ValueString )));};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cff :=false ;for _ ,_afag :=range args {switch _afag .Type {case ResultTypeList ,ResultTypeArray :_egeg :=Or (_afag .ListValues ());if _egeg .Type ==ResultTypeError {return _egeg ;};if _egeg .ValueNumber !=0{_cff =true ;};case ResultTypeNumber :if _afag .ValueNumber !=0{_cff =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _afag ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_cff );};

// String returns a string of a range.
func (_cggba Range )String ()string {return _e .Sprintf ("\u0025\u0073\u003a%\u0073",_cggba ._ecab .String (),_cggba ._fgfd .String ());};func (_bdda Result )AsString ()Result {switch _bdda .Type {case ResultTypeNumber :return MakeStringResult (_bdda .Value ());default:return _bdda ;};};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {pfx ,exp }};func _cccdc (_eecb ,_dgbg int )int {switch _dgbg {case 1:if _cef (_eecb ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};type yyLexer interface{Lex (_adg *yySymType )int ;Error (_eeged string );};const _cdcag =57366;func _dca (_dbcea ,_ega Result ,_fadb string )(float64 ,float64 ,Result ){_daed ,_gag :=_aabf (_dbcea ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_fadb );if _gag .Type ==ResultTypeError {return 0,0,_gag ;};_afeb ,_gag :=_aabf (_ega ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_fadb );if _gag .Type ==ResultTypeError {return 0,0,_gag ;};if _daed >=_afeb {return 0,0,MakeErrorResultType (ErrorTypeNum ,_fadb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _daed ,_afeb ,_eggc ;};var _afac =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Reference returns a string reference value to a named range.
func (_bcfb NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_bcfb ._aee };};var _cdba *_ggg .Rand ;type yyParserImpl struct{_fgdb yySymType ;_dgaa [_begf ]yySymType ;_fede int ;};