//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_e "bytes";_b "errors";_a "fmt";_gc "github.com/unidoc/unioffice/common/logger";_gd "github.com/unidoc/unioffice/internal/mergesort";_fb "github.com/unidoc/unioffice/internal/wildcard";_ba "github.com/unidoc/unioffice/spreadsheet/format";_ga "github.com/unidoc/unioffice/spreadsheet/reference";_bf "github.com/unidoc/unioffice/spreadsheet/update";_f "io";_gg "math";_ad "math/big";_eb "math/rand";_d "regexp";_bc "sort";_fe "strconv";_c "strings";_ec "sync";_dc "time";_bd "unicode";);func _fcbf (_begg []Result ,_acfe string )(*cumulArgs ,Result ){if len (_begg )!=6{return nil ,MakeErrorResult (_acfe +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _begg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_acfe +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ddg :=_begg [0].ValueNumber ;if _ddg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _begg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_acfe +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_abe :=_begg [1].ValueNumber ;if _abe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _begg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_acfe +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfea :=_begg [2].ValueNumber ;if _acfea <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _begg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_acfe +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dgcb :=_begg [3].ValueNumber ;if _dgcb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _begg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_acfe +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdff :=_begg [4].ValueNumber ;if _gdff <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _gdff < _dgcb {return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _gdff > _abe {return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_fbd :=int (_begg [5].ValueNumber );if _fbd !=0&&_fbd !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_acfe +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_ddg ,_abe ,_acfea ,_dgcb ,_gdff ,_fbd },_efb ;};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deegd :=args [0].AsNumber ();if _deegd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_gg .Pi *_deegd .ValueNumber );};func _eef (){_cga ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_d .MustCompile ("\u005e"+_ebd +_bcff );_cga ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_d .MustCompile ("\u005e"+_fadc +_bcff );_cga ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_d .MustCompile ("\u005e"+_acee +_bcff );_cga ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_d .MustCompile ("\u005e"+_aef +_bcff );_eff ["\u0068\u0068"]=_d .MustCompile (_cea +_aeb +"\u0024");_eff ["\u0068\u0068\u003am\u006d"]=_d .MustCompile (_cea +_cad +"\u0024");_eff ["\u006d\u006d\u003as\u0073"]=_d .MustCompile (_cea +_dgc +"\u0024");_eff ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_d .MustCompile (_cea +_cfgf +"\u0024");_aee =[]*_d .Regexp {_d .MustCompile ("\u005e"+_ebd +"\u0024"),_d .MustCompile ("\u005e"+_fadc +"\u0024"),_d .MustCompile ("\u005e"+_acee +"\u0024"),_d .MustCompile ("\u005e"+_aef +"\u0024")};_dcc =[]*_d .Regexp {_d .MustCompile ("\u005e"+_aeb +"\u0024"),_d .MustCompile ("\u005e"+_cad +"\u0024"),_d .MustCompile ("\u005e"+_dgc +"\u0024"),_d .MustCompile ("\u005e"+_cfgf +"\u0024")};};var _ecegf =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};type criteriaParsed struct{_abca bool ;_ffbae float64 ;_ebcc string ;_bagc *criteriaRegex ;};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bbaa :=args [0].AsNumber ();_aaea :=args [1].AsNumber ();if _bbaa .Type !=ResultTypeNumber ||_aaea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _aaea .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_gg .Trunc (_bbaa .ValueNumber /_aaea .ValueNumber ));};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_afgcc PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_bbffbc :=_afgcc ._cdea .Reference (ctx ,ev );switch _bbffbc .Type {case ReferenceTypeSheet :if _ddab (_bbffbc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bbffbc .Value ));};_bfbeg :=_afgcc .horizontalRangeReference (_bbffbc .Value );if _cbcac ,_gegff :=ev .GetFromCache (_bfbeg );_gegff {return _cbcac ;};_dfdde :=ctx .Sheet (_bbffbc .Value );_dfba ,_fbcba :=_ecagb (_dfdde ,_afgcc ._cdaca ,_afgcc ._dabc );_gcbc :=_egabge (_dfdde ,ev ,_dfba ,_fbcba );ev .SetCache (_bfbeg ,_gcbc );return _gcbc ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbffbc .Type ));};};func (_fffe *evCache )SetCache (key string ,value Result ){_fffe ._egf .Lock ();_fffe ._edbb [key ]=value ;_fffe ._egf .Unlock ();};var _bfeg =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};var _accgb =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _bab ,_fcf float64 ;switch args [0].Type {case ResultTypeNumber :_fcf =args [0].ValueNumber ;case ResultTypeString :_adf :=DateValue ([]Result {args [0]});if _adf .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_fcf =_adf .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_bab =args [1].ValueNumber ;if _bab < 62&&_fcf >=62{_bab --;};case ResultTypeString :_cbec :=DateValue ([]Result {args [1]});if _cbec .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_bab =_cbec .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_dbgd :=float64 (int (_fcf -_bab ));return MakeNumberResult (_dbgd );};func _ffaaa (_fgaf ,_acac float64 ,_fdfc ,_gdaca int )(float64 ,Result ){_acda ,_bfge :=_fbec (_fgaf ),_fbec (_acac );if _bfge .After (_acda ){_dba :=_gegg (_acda ,_bfge ,_fdfc ,_gdaca );_fdfd :=(_bfge .Year ()-_dba .Year ())*12+int (_bfge .Month ())-int (_dba .Month ());return float64 (_fdfd *_fdfc )/12.0,_efb ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfeb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aeff :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdda :=args [2].ValueNumber ;if _cdda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgfd :=args [3].ValueNumber ;if _fgfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fgfd > _cdda {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_gcge :=(_dfeb -_aeff )*(_cdda -_fgfd +1)*2;_fdgbc :=_cdda *(_cdda +1);return MakeNumberResult (_gcge /_fdgbc );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_daef :=args [0];switch _daef .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_cef :=_fbec (_daef .ValueNumber );return MakeNumberResult (float64 (_cef .Month ()));case ResultTypeString :_cbcf :=_c .ToLower (_daef .ValueString );if !_cdec (_cbcf ){_ ,_ ,_ ,_ ,_bbb ,_feec :=_dfb (_cbcf );if _feec .Type ==ResultTypeError {_feec .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _feec ;};if _bbb {return MakeNumberResult (1);};};_ ,_ebgf ,_ ,_ ,_bac :=_baefa (_cbcf );if _bac .Type ==ResultTypeError {return _bac ;};return MakeNumberResult (float64 (_ebgf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};type criteriaRegex struct{_acgf byte ;_feba string ;};

// Update returns the same object as updating sheet references does not affect Bool.
func (_ge Bool )Update (q *_bf .UpdateQuery )Expression {return _ge };

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_deeg ,_agdfb ,_cgge :=_fcbb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _cgge .Type ==ResultTypeError {return _cgge ;};if _agdfb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _deeg ==0{return MakeNumberResult (0);};_ccgfe :=_deeg < 0;if _ccgfe {_deeg =-_deeg ;};_agcf :=float64 (int (_deeg ));_afc :=args [0].Value ();_dffb :=_c .Split (_afc ,"\u002e");_cfbce :=0.0;if len (_dffb )> 1{var _aacb error ;_gbaf :=_dffb [1];_cfbce ,_aacb =_fe .ParseFloat (_gbaf ,64);if _aacb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_abgf :=float64 (len (_gbaf ));_cfbce /=_gg .Pow (10,_abgf );};_gcbb :=_cfbce *_agdfb /_gg .Pow (10,float64 (int (_gg .Log10 (_agdfb )))+1)+_agcf ;if _ccgfe {_gcbb =-_gcbb ;};return MakeNumberResult (_gcbb );};func _ee (_fbb string ,_fee uint32 )string {_dbe :=_ga .ColumnToIndex (_fbb );if _dbe ==_fee {return "\u0023\u0052\u0045F\u0021";}else if _dbe > _fee {return _ga .IndexToColumn (_dbe -1);}else {return _fbb ;};};

// GetWidth returns 0 for the invalid reference context.
func (_bcefa *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_adea (args ,_ggdbd ))};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdefd :=args [0].AsString ();if _bdefd .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebfge :=_e .Buffer {};_cgea :=false ;_edfb :=false ;_acfba :=0;for _ ,_eeebc :=range _bdefd .ValueString {_ecfb :=_eeebc ==' ';if _ecfb {if !_cgea {continue ;};if !_edfb {_acfba ++;_ebfge .WriteRune (_eeebc );};}else {_acfba =0;_cgea =true ;_ebfge .WriteRune (_eeebc );};_edfb =_ecfb ;};_ebfge .Truncate (_ebfge .Len ()-_acfba );return MakeStringResult (_ebfge .String ());};var _aee =[]*_d .Regexp {};func _afeg (_abfa string )*criteriaRegex {_acbg :=&criteriaRegex {};if _abfa ==""{return _acbg ;};if _ebgd :=_bdae .FindStringSubmatch (_abfa );len (_ebgd )> 1{_acbg ._acgf =_bbgf ;_acbg ._feba =_ebgd [1];}else if _decbe :=_bcaed .FindStringSubmatch (_abfa );len (_decbe )> 1{_acbg ._acgf =_bbgf ;_acbg ._feba =_decbe [1];}else if _ccgef :=_baea .FindStringSubmatch (_abfa );len (_ccgef )> 1{_acbg ._acgf =_bdaed ;_acbg ._feba =_ccgef [1];}else if _beddg :=_aadd .FindStringSubmatch (_abfa );len (_beddg )> 1{_acbg ._acgf =_febd ;_acbg ._feba =_beddg [1];}else if _gceffd :=_cggdb .FindStringSubmatch (_abfa );len (_gceffd )> 1{_acbg ._acgf =_agbac ;_acbg ._feba =_gceffd [1];}else if _eccf :=_aabe .FindStringSubmatch (_abfa );len (_eccf )> 1{_acbg ._acgf =_feadc ;_acbg ._feba =_eccf [1];};return _acbg ;};

// Negate is a negate expression like -A1.
type Negate struct{_fbeag Expression };

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _ddbda (args ,true )};type amorArgs struct{_fgg float64 ;_cgaa float64 ;_cbeb float64 ;_baffg float64 ;_bcec int ;_fagb float64 ;_fcc int ;};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fba :=ctx .GetEpoch ();_efccf ,_gbad :=_eege (args [0].Value (),_fba );if _gbad !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_afcf :=_efccf .Year ();return MakeBoolResult (_cbb (_afcf ));};func _ecb (_bgc ,_eda ,_efga int )int {if _bgc > _eda {return 0;};if _fce (_efga ){return (_eda -_bgc +1)*360;};_ecaa :=0;for _ecde :=_bgc ;_ecde <=_eda ;_ecde ++{_dbdd :=365;if _cbb (_ecde ){_dbdd =366;};_ecaa +=_dbdd ;};return _ecaa ;};

// Update updates the FunctionCall references after removing a row/column.
func (_dbfg FunctionCall )Update (q *_bf .UpdateQuery )Expression {_dgfbg :=[]Expression {};for _ ,_efebc :=range _dbfg ._dceed {_caad :=_efebc .Update (q );_dgfbg =append (_dgfbg ,_caad );};return FunctionCall {_bffa :_dbfg ._bffa ,_dceed :_dgfbg };};func _adg (_beb BinOpType ,_fca ,_ef []Result )Result {_cdc :=[]Result {};for _cfb :=range _fca {_cfg :=_fca [_cfb ].AsNumber ();_gcg :=_ef [_cfb ].AsNumber ();if _cfg .Type !=ResultTypeNumber ||_gcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _beb {case BinOpTypePlus :_cdc =append (_cdc ,MakeNumberResult (_cfg .ValueNumber +_gcg .ValueNumber ));case BinOpTypeMinus :_cdc =append (_cdc ,MakeNumberResult (_cfg .ValueNumber -_gcg .ValueNumber ));case BinOpTypeMult :_cdc =append (_cdc ,MakeNumberResult (_cfg .ValueNumber *_gcg .ValueNumber ));case BinOpTypeDiv :if _gcg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cdc =append (_cdc ,MakeNumberResult (_cfg .ValueNumber /_gcg .ValueNumber ));case BinOpTypeExp :_cdc =append (_cdc ,MakeNumberResult (_gg .Pow (_cfg .ValueNumber ,_gcg .ValueNumber )));case BinOpTypeLT :_cdc =append (_cdc ,MakeBoolResult (_cfg .ValueNumber < _gcg .ValueNumber ));case BinOpTypeGT :_cdc =append (_cdc ,MakeBoolResult (_cfg .ValueNumber > _gcg .ValueNumber ));case BinOpTypeEQ :_cdc =append (_cdc ,MakeBoolResult (_cfg .ValueNumber ==_gcg .ValueNumber ));case BinOpTypeLEQ :_cdc =append (_cdc ,MakeBoolResult (_cfg .ValueNumber <=_gcg .ValueNumber ));case BinOpTypeGEQ :_cdc =append (_cdc ,MakeBoolResult (_cfg .ValueNumber >=_gcg .ValueNumber ));case BinOpTypeNE :_cdc =append (_cdc ,MakeBoolResult (_cfg .ValueNumber !=_gcg .ValueNumber ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_beb ));};};return MakeListResult (_cdc );};

// Eval evaluates and returns the result of an error expression.
func (_dcbg Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_dcbg ._dcg )};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agff :=args [0];if _agff .Type ==ResultTypeError ||_agff .Type ==ResultTypeString {return _agff ;};return _efb ;};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_eeaf :=args [0].AsString ();if _eeaf .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_eeaf .ValueString ,ev );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _bfbd (args ,false )};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcbdc :=args [0].AsNumber ();if _dcbdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aabb :=0;if len (args )> 1{_deec :=args [1];if _deec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_aabb =int (_deec .ValueNumber );if _aabb < 0{_aabb =0;}else if _aabb > 4{_aabb =4;};};_adad :=_gdgdg ;switch _aabb {case 1:_adad =_accgb ;case 2:_adad =_fgdf ;case 3:_adad =_gdb ;case 4:_adad =_acffc ;};_fffgd :=_gg .Trunc (_dcbdc .ValueNumber );_aafga :=_e .Buffer {};for _ ,_afcc :=range _adad {for _fffgd >=_afcc ._gfda {_aafga .WriteString (_afcc ._aeed );_fffgd -=_afcc ._gfda ;};};return MakeStringResult (_aafga .String ());};

// String returns an empty string for Error.
func (_cbc Error )String ()string {return ""};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aece :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cafg :=args [2].ValueNumber +1;if _cafg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_dcgg :=_bcbd (args [0]);_fefb :=float64 (len (_dcgg ));_bcece ,_bbgb :=0.0,0.0;_acbad ,_bedd :=1.0,1.0;_gcfaf ,_ecfa :=false ,false ;for _ ,_dgaf :=range _dcgg {for _ ,_fdaf :=range _dgaf {if _fdaf .Type ==ResultTypeNumber &&!_fdaf .IsBoolean {_begf :=_fdaf .ValueNumber ;if _begf ==0{continue ;}else {if _begf > 0{_gcfaf =true ;_bbgb +=_fdaf .ValueNumber *_bedd ;}else {_ecfa =true ;_bcece +=_fdaf .ValueNumber *_acbad ;};_acbad /=_aece ;_bedd /=_cafg ;};};};};if !_gcfaf ||!_ecfa {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gfcg :=-_bbgb /_bcece ;_gfcg *=_gg .Pow (_cafg ,_fefb -1);_gfcg =_gg .Pow (_gfcg ,1/(_fefb -1));return MakeNumberResult (_gfcg -1);};func (_fge *defEval )checkLastEvalIsRef (_dce Context ,_acf Expression ){switch _acf .(type ){case FunctionCall :switch _acf .(FunctionCall )._bffa {case "\u0049\u0053\u0052E\u0046":for _ ,_bb :=range _acf .(FunctionCall )._dceed {switch _bb .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_gba :=_bb .Eval (_dce ,_fge );_fge ._abg =!(_gba .Type ==ResultTypeError &&_gba .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_fge ._abg =false ;};};};};};var _bdae ,_bcaed ,_aabe ,_cggdb ,_aadd ,_baea *_d .Regexp ;

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_gcfab *ivr )GetLabelPrefix (cellRef string )string {return ""};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egde :=args [0];_dbda :=args [1];if _dbda .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_debg :=args [2].AsNumber ();if _debg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcggf :=false ;if len (args )==4{_egggd :=args [3].AsNumber ();if _egggd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _egggd .ValueNumber ==0{_gcggf =true ;};};_befe :=-1;_gffg :=false ;if len (_dbda .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_fcaf :=_dbda .ValueArray [0];_bcgc :for _ccggga ,_ddba :=range _fcaf {switch _abbe (_ddba ,_egde ,false ,_gcggf ){case _baec :_befe =_ccggga ;case _eaaaa :_befe =_ccggga ;_gffg =true ;break _bcgc ;};};if _befe ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_beda :=int (_debg .ValueNumber )-1;if _beda < 0||_beda > len (_dbda .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_fcaf =_dbda .ValueArray [_beda ];if _befe < 0||_befe >=len (_fcaf ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _gffg ||!_gcggf {return _fcaf [_befe ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};type Reference struct{Type ReferenceType ;Value string ;};func (_bgdge PrefixVerticalRange )verticalRangeReference (_fddac string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_fddac ,_bgdge ._eaegf ,_bgdge ._cbafg );};func _ebaa (_ffc ,_abb ,_ede float64 )float64 {return (_ffc *3600+_abb *60+_ede )/86400};func _eca (_gfd string ,_gff *_bf .UpdateQuery )string {_bcca ,_gfg :=_ga .ParseCellReference (_gfd );if _gfg !=nil {return "\u0023\u0052\u0045F\u0021";};if _gff .UpdateType ==_bf .UpdateActionRemoveColumn {_cbe :=_gff .ColumnIdx ;_edb :=_bcca .ColumnIdx ;if _edb < _cbe {return _gfd ;}else if _edb ==_cbe {return "\u0023\u0052\u0045F\u0021";}else {return _bcca .Update (_bf .UpdateActionRemoveColumn ).String ();};};return _gfd ;};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faad :=int (args [0].ValueNumber );return MakeBoolResult (_faad !=_faad /2*2);};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_bcege :pfx ,_fgfdbf :exp }};const (_bbeg countMode =iota ;_ggdbd ;_fcdg ;);

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_gbee :=_bffe (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _gbee .Type !=ResultTypeEmpty {return _gbee ;};_gbcd :=_cbeca (args [1:]);_efce :=0.0;_agdfe :=_bcbd (args [0]);for _ ,_dbgf :=range _gbcd {_efce +=_agdfe [_dbgf ._gddb ][_dbgf ._gbebg ].ValueNumber ;};return MakeNumberResult (float64 (_efce ));};var _eff =map[string ]*_d .Regexp {};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_effbgg :=[]string {};for _bdfbb :=range _bcaf {_effbgg =append (_effbgg ,_bdfbb );};for _fafce :=range _gbafb {_effbgg =append (_effbgg ,_fafce );};_bc .Strings (_effbgg );return _effbgg ;};const _bgdc int =30;func _baadf (_ccae float64 )float64 {_fead :=float64 (1);for _dgacb :=float64 (2);_dgacb <=_ccae ;_dgacb ++{_fead *=_dgacb ;};return _fead ;};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcadc :=args [0].AsString ();if _bcadc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgbd :=_e .Buffer {};for _ ,_egbeb :=range _bcadc .ValueString {if _bd .IsPrint (_egbeb ){_bgbd .WriteRune (_egbeb );};};return MakeStringResult (_bgbd .String ());};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_ggfc Result )ListValues ()[]Result {if _ggfc .Type ==ResultTypeArray {_fgfad :=[]Result {};for _ ,_edabd :=range _ggfc .ValueArray {for _ ,_fagae :=range _edabd {_fgfad =append (_fgfad ,_fagae );};};return _fgfad ;};if _ggfc .Type ==ResultTypeList {return _ggfc .ValueList ;};return nil ;};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_dcag ,_fcbbe Expression };type rangeIndex struct{_gddb int ;_gbebg int ;};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_egff :=args [0].AsNumber ();if _egff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edgef :=args [1].AsNumber ();if _edgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_gg .Pow (_egff .ValueNumber ,_edgef .ValueNumber ));};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fgca :=args [0].AsNumber ();_gefg :=args [1].AsNumber ();if _fgca .Type !=ResultTypeNumber ||_gefg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _gefg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_gagb ,_eded :=_gg .Modf (_fgca .ValueNumber /_gefg .ValueNumber );if _eded < 0{_gagb --;};return MakeNumberResult (_fgca .ValueNumber -_gefg .ValueNumber *_gagb );};var _ecbfd =[...]struct{_baedf int ;_gdgg int ;_eecc string ;}{};const _cad ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func init (){_eef ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// String returns a string representation of Number.
func (_dfce Number )String ()string {return _fe .FormatFloat (_dfce ._eccfa ,'f',-1,64)};var _fgdf =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _agfb (_fbgff ,_deaab int )string {const TOKSTART =4;if !_dagg {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_egbc :=range _ecbfd {if _egbc ._baedf ==_fbgff &&_egbc ._gdgg ==_deaab {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_egbc ._eecc ;};};_aged :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_ecaad (_deaab );_bfcegb :=make ([]int ,0,4);_gdagc :=_ebbe [_fbgff ];for _fgdfg :=TOKSTART ;_fgdfg -1< len (_aaaca );_fgdfg ++{if _eefd :=_gdagc +_fgdfg ;_eefd >=0&&_eefd < _gbfg &&_cbeag [_adac [_eefd ]]==_fgdfg {if len (_bfcegb )==cap (_bfcegb ){return _aged ;};_bfcegb =append (_bfcegb ,_fgdfg );};};if _debbd [_fbgff ]==-2{_bdgg :=0;for _gegag [_bdgg ]!=-1||_gegag [_bdgg +1]!=_fbgff {_bdgg +=2;};for _bdgg +=2;_gegag [_bdgg ]>=0;_bdgg +=2{_caca :=_gegag [_bdgg ];if _caca < TOKSTART ||_gegag [_bdgg +1]==0{continue ;};if len (_bfcegb )==cap (_bfcegb ){return _aged ;};_bfcegb =append (_bfcegb ,_caca );};if _gegag [_bdgg +1]!=0{return _aged ;};};for _fbega ,_adcag :=range _bfcegb {if _fbega ==0{_aged +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_aged +="\u0020\u006f\u0072\u0020";};_aged +=_ecaad (_adcag );};return _aged ;};func _gaccc (_cggbf []Result ,_ebfd bool )Result {_cggdg :="\u004d\u0049\u004e";if _ebfd {_cggdg ="\u004d\u0049\u004e\u0041";};if len (_cggbf )==0{return MakeErrorResult (_cggdg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_affb :=_gg .MaxFloat64 ;for _ ,_dfcc :=range _cggbf {switch _dfcc .Type {case ResultTypeNumber :if (_ebfd ||!_dfcc .IsBoolean )&&_dfcc .ValueNumber < _affb {_affb =_dfcc .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_eacf :=_gaccc (_dfcc .ListValues (),_ebfd );if _eacf .ValueNumber < _affb {_affb =_eacf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_bgbe :=0.0;if _ebfd {_bgbe =_dfcc .AsNumber ().ValueNumber ;};if _bgbe < _affb {_affb =_bgbe ;};default:_gc .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_cggdg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfcc .Type );};};if _affb ==_gg .MaxFloat64 {_affb =0;};return MakeNumberResult (_affb );};func (_babfe *Lexer )lex (_febgd _f .Reader ){_gbce ,_gbcdc ,_egce :=0,0,0;_cgfag :=-1;_fdfb ,_cecdg ,_gdbf :=0,0,0;_ =_gdbf ;_gbda :=1;_ =_gbda ;_cafbf :=make ([]byte ,4096);_afca :=false ;for !_afca {_gbbba :=0;if _fdfb > 0{_gbbba =_gbcdc -_fdfb ;};_gbcdc =0;_cbdbb ,_abad :=_febgd .Read (_cafbf [_gbbba :]);if _cbdbb ==0||_abad !=nil {_afca =true ;};_egce =_cbdbb +_gbbba ;if _egce < len (_cafbf ){_cgfag =_egce ;};{_gbce =_fabc ;_fdfb =0;_cecdg =0;_gdbf =0;};{var _eabe int ;var _ebedg uint ;if _gbcdc ==_egce {goto _gcfcb ;};if _gbce ==0{goto _dabag ;};_cdece :_eabe =int (_bfbde [_gbce ]);_ebedg =uint (_dbcc [_eabe ]);_eabe ++;for ;_ebedg > 0;_ebedg --{_eabe ++;switch _dbcc [_eabe -1]{case 2:_fdfb =_gbcdc ;};};switch _gbce {case 30:switch _cafbf [_gbcdc ]{case 34:goto _fdgbb ;case 35:goto _ffgc ;case 36:goto _bbffb ;case 38:goto _efgfe ;case 39:goto _geed ;case 40:goto _edbce ;case 41:goto _fabe ;case 42:goto _aefcd ;case 43:goto _abac ;case 44:goto _dbecb ;case 45:goto _ggdc ;case 47:goto _edfa ;case 58:goto _deegf ;case 59:goto _fgedf ;case 60:goto _baedb ;case 61:goto _egacg ;case 62:goto _egbaa ;case 63:goto _dagbd ;case 70:goto _bbbde ;case 84:goto _bcba ;case 92:goto _bgca ;case 94:goto _aaceg ;case 95:goto _acfga ;case 123:goto _eacdf ;case 125:goto _edagc ;};switch {case _cafbf [_gbcdc ]< 65:switch {case _cafbf [_gbcdc ]> 37:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _bgbbe ;};case _cafbf [_gbcdc ]>=33:goto _dagbd ;};case _cafbf [_gbcdc ]> 90:switch {case _cafbf [_gbcdc ]> 93:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _fbbbb ;};case _cafbf [_gbcdc ]>=91:goto _dagbd ;};default:goto _ecedf ;};goto _ddgg ;case 1:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _eefda ;case 123:goto _eefda ;case 125:goto _eefda ;};switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _eefda ;};case _cafbf [_gbcdc ]> 45:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _eefda ;};case _cafbf [_gbcdc ]>=58:goto _eefda ;};default:goto _eefda ;};goto _ddgg ;case 0:goto _dabag ;case 2:if _cafbf [_gbcdc ]==34{goto _ebdgde ;};goto _fdgbb ;case 31:if _cafbf [_gbcdc ]==34{goto _fdgbb ;};goto _defb ;case 3:switch _cafbf [_gbcdc ]{case 78:goto _fagbb ;case 82:goto _gfeb ;};goto _dagbd ;case 4:switch _cafbf [_gbcdc ]{case 47:goto _ffdba ;case 85:goto _baddfb ;};goto _dagbd ;case 5:if _cafbf [_gbcdc ]==65{goto _fccfg ;};goto _dagbd ;case 6:switch _cafbf [_gbcdc ]{case 76:goto _aebcf ;case 77:goto _cddb ;};goto _dagbd ;case 7:if _cafbf [_gbcdc ]==76{goto _cddb ;};goto _dagbd ;case 8:if _cafbf [_gbcdc ]==33{goto _fccfg ;};goto _dagbd ;case 9:if _cafbf [_gbcdc ]==69{goto _cbeae ;};goto _dagbd ;case 10:if _cafbf [_gbcdc ]==70{goto _bgabg ;};goto _dagbd ;case 11:if _cafbf [_gbcdc ]==33{goto _cfee ;};goto _dagbd ;case 12:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _dagbd ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=45{goto _dagbd ;};case _cafbf [_gbcdc ]>=34:goto _dagbd ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]< 65:if 58<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=63{goto _dagbd ;};case _cafbf [_gbcdc ]> 90:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _dagbd ;};default:goto _gcfc ;};default:goto _ffgcg ;};goto _ddgg ;case 13:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _dagbd ;case 58:goto _gadag ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=45{goto _dagbd ;};case _cafbf [_gbcdc ]>=34:goto _dagbd ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _dagbd ;};case _cafbf [_gbcdc ]>=59:goto _dagbd ;};default:goto _ffgcg ;};goto _ddgg ;case 14:if _cafbf [_gbcdc ]==36{goto _ddgb ;};if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _gfgca ;};goto _eefda ;case 15:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _gfgca ;};goto _eefda ;case 32:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _gfgca ;};goto _badbc ;case 16:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 47:goto _dagbd ;case 58:goto _cggbd ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 45:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _eade ;};case _cafbf [_gbcdc ]>=34:goto _dagbd ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]> 90:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _dagbd ;};case _cafbf [_gbcdc ]>=65:goto _gcfc ;};default:goto _dagbd ;};goto _ddgg ;case 17:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _eefda ;case 123:goto _eefda ;case 125:goto _eefda ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=45{goto _eefda ;};case _cafbf [_gbcdc ]>=34:goto _eefda ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _eefda ;};case _cafbf [_gbcdc ]>=58:goto _eefda ;};default:goto _eade ;};goto _ddgg ;case 33:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _aagbc ;case 123:goto _aagbc ;case 125:goto _aagbc ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=45{goto _aagbc ;};case _cafbf [_gbcdc ]>=34:goto _aagbc ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _aagbc ;};case _cafbf [_gbcdc ]>=58:goto _aagbc ;};default:goto _eade ;};goto _ddgg ;case 18:if _cafbf [_gbcdc ]==36{goto _cagab ;};if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _ecef ;};goto _eefda ;case 19:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _ecef ;};goto _eefda ;case 34:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _ecef ;};goto _dddc ;case 20:switch _cafbf [_gbcdc ]{case 39:goto _dagbd ;case 42:goto _dagbd ;case 47:goto _dagbd ;case 58:goto _dagbd ;case 63:goto _dagbd ;};if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=93{goto _dagbd ;};goto _bgcbg ;case 21:switch _cafbf [_gbcdc ]{case 39:goto _geaee ;case 42:goto _dagbd ;case 47:goto _dagbd ;case 58:goto _dagbd ;case 63:goto _dagbd ;};if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=93{goto _dagbd ;};goto _bgcbg ;case 22:if _cafbf [_gbcdc ]==33{goto _ecgf ;};goto _dagbd ;case 35:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _cadbcd ;case 58:goto _gadag ;case 101:goto _ebgee ;case 123:goto _ccec ;case 125:goto _ccec ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=47{goto _ccec ;};case _cafbf [_gbcdc ]>=34:goto _ccec ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _ccec ;};case _cafbf [_gbcdc ]>=59:goto _ccec ;};default:goto _bgbbe ;};goto _ddgg ;case 36:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _ccec ;case 101:goto _ebgee ;case 123:goto _ccec ;case 125:goto _ccec ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=45{goto _ccec ;};case _cafbf [_gbcdc ]>=34:goto _ccec ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _ccec ;};case _cafbf [_gbcdc ]>=58:goto _ccec ;};default:goto _cadbcd ;};goto _ddgg ;case 23:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _dddd ;case 123:goto _dddd ;case 125:goto _dddd ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=45{goto _dddd ;};case _cafbf [_gbcdc ]>=34:goto _dddd ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _dddd ;};case _cafbf [_gbcdc ]>=58:goto _dddd ;};default:goto _agcde ;};goto _ddgg ;case 37:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 47:goto _ccec ;case 123:goto _ccec ;case 125:goto _ccec ;};switch {case _cafbf [_gbcdc ]< 48:switch {case _cafbf [_gbcdc ]> 35:if 37<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=45{goto _ccec ;};case _cafbf [_gbcdc ]>=34:goto _ccec ;};case _cafbf [_gbcdc ]> 57:switch {case _cafbf [_gbcdc ]> 63:if 91<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=94{goto _ccec ;};case _cafbf [_gbcdc ]>=58:goto _ccec ;};default:goto _agcde ;};goto _ddgg ;case 38:switch _cafbf [_gbcdc ]{case 61:goto _ddbde ;case 62:goto _egcgg ;};goto _dffcf ;case 39:if _cafbf [_gbcdc ]==61{goto _gdfbe ;};goto _cbaa ;case 24:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dagbd ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dagbd ;};default:goto _dagbd ;};goto _ddgg ;case 40:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 40:goto _beeec ;case 46:goto _fgbg ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _fgbg ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _fgbg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 41:switch _cafbf [_gbcdc ]{case 46:goto _agfae ;case 92:goto _agfae ;case 95:goto _agfae ;};switch {case _cafbf [_gbcdc ]< 65:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _agfae ;};case _cafbf [_gbcdc ]> 90:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _agfae ;};default:goto _agfae ;};goto _dcff ;case 42:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 43:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 40:goto _beeec ;case 46:goto _fgbg ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _aagbc ;case 125:goto _aagbc ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _aagbc ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};default:goto _aagbc ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _fgbg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _aagbc ;};default:goto _aagbc ;};goto _ddgg ;case 44:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _eefda ;case 125:goto _eefda ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _eefda ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _eefda ;};default:goto _eefda ;};goto _ddgg ;case 25:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 65:goto _acgg ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dagbd ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 66<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dagbd ;};default:goto _dagbd ;};goto _ddgg ;case 45:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 76:goto _fdffa ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 46:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 83:goto _edfaf ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 47:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 69:goto _ccedf ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 26:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 79:goto _bbcb ;case 82:goto _deff ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dagbd ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dagbd ;};default:goto _dagbd ;};goto _ddgg ;case 48:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 68:goto _dgdb ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 49:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 79:goto _becf ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 50:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 36:goto _ccfag ;case 40:goto _beeec ;case 46:goto _fgbg ;case 58:goto _cggbd ;case 85:goto _edfaf ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 59:switch {case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _caeg ;};case _cafbf [_gbcdc ]>=34:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _bbdbgg ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 27:switch _cafbf [_gbcdc ]{case 46:goto _agfae ;case 92:goto _agfae ;case 95:goto _agfae ;};switch {case _cafbf [_gbcdc ]< 65:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _agfae ;};case _cafbf [_gbcdc ]> 90:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _agfae ;};default:goto _agfae ;};goto _dagbd ;case 28:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _dbfe ;case 120:goto _bfac ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dagbd ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dagbd ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dagbd ;};default:goto _dagbd ;};goto _ddgg ;case 51:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _dbfe ;case 108:goto _dfad ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 52:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _dbfe ;case 102:goto _afde ;case 110:goto _aafd ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 53:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _dbfe ;case 110:goto _cegg ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 54:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _cebb ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 55:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _ebbfa ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _ebbfa ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 56:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 40:goto _afae ;case 46:goto _ebbfa ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _ebbfa ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _ebbfa ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 57:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _dbfe ;case 109:goto _ggfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 58:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _gcec ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dcff ;case 125:goto _dcff ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dcff ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dcff ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dcff ;};default:goto _dcff ;};goto _ddgg ;case 59:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _fdffc ;case 123:goto _eefda ;case 125:goto _eefda ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _eefda ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _eefda ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _fdffc ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _eefda ;};default:goto _eefda ;};goto _ddgg ;case 29:switch _cafbf [_gbcdc ]{case 33:goto _abfc ;case 46:goto _dbfe ;case 92:goto _agfae ;case 95:goto _dbfe ;case 123:goto _dagbd ;case 125:goto _dagbd ;};switch {case _cafbf [_gbcdc ]< 58:switch {case _cafbf [_gbcdc ]< 37:if 34<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=35{goto _dagbd ;};case _cafbf [_gbcdc ]> 47:if 48<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=57{goto _dbfe ;};default:goto _dagbd ;};case _cafbf [_gbcdc ]> 63:switch {case _cafbf [_gbcdc ]< 91:if 65<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=90{goto _dbfe ;};case _cafbf [_gbcdc ]> 94:if 97<=_cafbf [_gbcdc ]&&_cafbf [_gbcdc ]<=122{goto _dbfe ;};default:goto _dagbd ;};default:goto _dagbd ;};goto _ddgg ;};_dagbd :_gbce =0;goto _gbcb ;_ddgg :_gbce =1;goto _gbcb ;_fdgbb :_gbce =2;goto _gbcb ;_ffgc :_gbce =3;goto _gbcb ;_fagbb :_gbce =4;goto _gbcb ;_ffdba :_gbce =5;goto _gbcb ;_baddfb :_gbce =6;goto _gbcb ;_aebcf :_gbce =7;goto _gbcb ;_cddb :_gbce =8;goto _gbcb ;_gfeb :_gbce =9;goto _gbcb ;_cbeae :_gbce =10;goto _gbcb ;_bgabg :_gbce =11;goto _gbcb ;_bbffb :_gbce =12;goto _gbcb ;_ffgcg :_gbce =13;goto _gbcb ;_gadag :_gbce =14;goto _gbcb ;_ddgb :_gbce =15;goto _gbcb ;_gcfc :_gbce =16;goto _gbcb ;_ccfag :_gbce =17;goto _gbcb ;_cggbd :_gbce =18;goto _gbcb ;_cagab :_gbce =19;goto _gbcb ;_geed :_gbce =20;goto _gbcb ;_bgcbg :_gbce =21;goto _gbcb ;_geaee :_gbce =22;goto _gbcb ;_ebgee :_gbce =23;goto _gbcb ;_ecedf :_gbce =24;goto _gbcb ;_bbbde :_gbce =25;goto _gbcb ;_bcba :_gbce =26;goto _gbcb ;_bgca :_gbce =27;goto _gbcb ;_acfga :_gbce =28;goto _gbcb ;_fbbbb :_gbce =29;goto _gbcb ;_eefda :_gbce =30;goto _bdbc ;_abfc :_gbce =30;goto _ageb ;_fccfg :_gbce =30;goto _cgcc ;_cfee :_gbce =30;goto _fagg ;_ecgf :_gbce =30;goto _cadbe ;_dddd :_gbce =30;goto _ddeb ;_beeec :_gbce =30;goto _bccbe ;_efgfe :_gbce =30;goto _adbeg ;_edbce :_gbce =30;goto _bddg ;_fabe :_gbce =30;goto _bcdb ;_aefcd :_gbce =30;goto _edgeg ;_abac :_gbce =30;goto _fbabb ;_dbecb :_gbce =30;goto _ddee ;_ggdc :_gbce =30;goto _ddbaa ;_edfa :_gbce =30;goto _eggeb ;_deegf :_gbce =30;goto _abbfg ;_fgedf :_gbce =30;goto _gdcdc ;_egacg :_gbce =30;goto _dgdfb ;_aaceg :_gbce =30;goto _cdgf ;_eacdf :_gbce =30;goto _befg ;_edagc :_gbce =30;goto _eeeee ;_defb :_gbce =30;goto _baag ;_badbc :_gbce =30;goto _affag ;_aagbc :_gbce =30;goto _abgeb ;_dddc :_gbce =30;goto _bdbdcb ;_ccec :_gbce =30;goto _bbcf ;_dffcf :_gbce =30;goto _ccgeb ;_ddbde :_gbce =30;goto _dffe ;_egcgg :_gbce =30;goto _dbcg ;_cbaa :_gbce =30;goto _debcd ;_gdfbe :_gbce =30;goto _efcfa ;_dcff :_gbce =30;goto _agfd ;_afae :_gbce =30;goto _gdebf ;_ebdgde :_gbce =31;goto _cafcf ;_gfgca :_gbce =32;goto _gbcb ;_eade :_gbce =33;goto _faac ;_ecef :_gbce =34;goto _gbcb ;_bgbbe :_gbce =35;goto _adede ;_cadbcd :_gbce =36;goto _adede ;_agcde :_gbce =37;goto _adede ;_baedb :_gbce =38;goto _gbcb ;_egbaa :_gbce =39;goto _gbcb ;_fgbg :_gbce =40;goto _defd ;_agfae :_gbce =41;goto _gbcb ;_dbfe :_gbce =42;goto _defd ;_caeg :_gbce =43;goto _faac ;_bbdbgg :_gbce =44;goto _defd ;_ccedf :_gbce =44;goto _fdaef ;_becf :_gbce =44;goto _gbecb ;_acgg :_gbce =45;goto _defd ;_fdffa :_gbce =46;goto _defd ;_edfaf :_gbce =47;goto _defd ;_bbcb :_gbce =48;goto _defd ;_dgdb :_gbce =49;goto _defd ;_deff :_gbce =50;goto _defd ;_bfac :_gbce =51;goto _defd ;_dfad :_gbce =52;goto _defd ;_afde :_gbce =53;goto _defd ;_cegg :_gbce =54;goto _defd ;_cebb :_gbce =55;goto _defd ;_ebbfa :_gbce =56;goto _defd ;_aafd :_gbce =57;goto _defd ;_ggfe :_gbce =58;goto _defd ;_gcec :_gbce =59;goto _defd ;_fdffc :_gbce =59;goto _cgcga ;_cgcc :_eabe =3;goto _ebeec ;_fagg :_eabe =5;goto _ebeec ;_ageb :_eabe =7;goto _ebeec ;_cadbe :_eabe =9;goto _ebeec ;_bccbe :_eabe =11;goto _ebeec ;_gdebf :_eabe =13;goto _ebeec ;_adbeg :_eabe =15;goto _ebeec ;_befg :_eabe =17;goto _ebeec ;_eeeee :_eabe =19;goto _ebeec ;_bddg :_eabe =21;goto _ebeec ;_bcdb :_eabe =23;goto _ebeec ;_fbabb :_eabe =25;goto _ebeec ;_ddbaa :_eabe =27;goto _ebeec ;_edgeg :_eabe =29;goto _ebeec ;_eggeb :_eabe =31;goto _ebeec ;_cdgf :_eabe =33;goto _ebeec ;_dgdfb :_eabe =35;goto _ebeec ;_dffe :_eabe =37;goto _ebeec ;_efcfa :_eabe =39;goto _ebeec ;_dbcg :_eabe =41;goto _ebeec ;_abbfg :_eabe =43;goto _ebeec ;_gdcdc :_eabe =45;goto _ebeec ;_ddee :_eabe =47;goto _ebeec ;_bbcf :_eabe =49;goto _ebeec ;_abgeb :_eabe =51;goto _ebeec ;_affag :_eabe =53;goto _ebeec ;_bdbdcb :_eabe =55;goto _ebeec ;_agfd :_eabe =57;goto _ebeec ;_baag :_eabe =59;goto _ebeec ;_ccgeb :_eabe =61;goto _ebeec ;_debcd :_eabe =63;goto _ebeec ;_ddeb :_eabe =65;goto _ebeec ;_bdbc :_eabe =67;goto _ebeec ;_fdaef :_eabe =72;goto _ebeec ;_adede :_eabe =75;goto _ebeec ;_faac :_eabe =78;goto _ebeec ;_gbecb :_eabe =81;goto _ebeec ;_cgcga :_eabe =84;goto _ebeec ;_defd :_eabe =87;goto _ebeec ;_cafcf :_eabe =90;goto _ebeec ;_ebeec :_ebedg =uint (_dbcc [_eabe ]);_eabe ++;for ;_ebedg > 0;_ebedg --{_eabe ++;switch _dbcc [_eabe -1]{case 3:_cecdg =_gbcdc +1;case 4:_gdbf =1;case 5:_gdbf =2;case 6:_gdbf =3;case 7:_gdbf =4;case 8:_gdbf =11;case 9:_gdbf =14;case 10:_gdbf =15;case 11:_cecdg =_gbcdc +1;{_babfe .emit (_gdee ,_cafbf [_fdfb :_cecdg ]);};case 12:_cecdg =_gbcdc +1;{_babfe .emit (_gabb ,_cafbf [_fdfb :_cecdg ]);};case 13:_cecdg =_gbcdc +1;{_babfe .emit (_egef ,_cafbf [_fdfb :_cecdg -1]);};case 14:_cecdg =_gbcdc +1;{_babfe .emit (_egef ,_cafbf [_fdfb +1:_cecdg -2]);};case 15:_cecdg =_gbcdc +1;{_babfe .emit (_aaafd ,_cafbf [_fdfb :_cecdg -1]);};case 16:_cecdg =_gbcdc +1;{_babfe .emit (_aaafd ,_cafbf [_fdfb :_cecdg -1]);};case 17:_cecdg =_gbcdc +1;{_babfe .emit (_ebdd ,_cafbf [_fdfb :_cecdg ]);};case 18:_cecdg =_gbcdc +1;{_babfe .emit (_caabg ,_cafbf [_fdfb :_cecdg ]);};case 19:_cecdg =_gbcdc +1;{_babfe .emit (_ebfe ,_cafbf [_fdfb :_cecdg ]);};case 20:_cecdg =_gbcdc +1;{_babfe .emit (_caef ,_cafbf [_fdfb :_cecdg ]);};case 21:_cecdg =_gbcdc +1;{_babfe .emit (_fdeg ,_cafbf [_fdfb :_cecdg ]);};case 22:_cecdg =_gbcdc +1;{_babfe .emit (_bbde ,_cafbf [_fdfb :_cecdg ]);};case 23:_cecdg =_gbcdc +1;{_babfe .emit (_debc ,_cafbf [_fdfb :_cecdg ]);};case 24:_cecdg =_gbcdc +1;{_babfe .emit (_aaege ,_cafbf [_fdfb :_cecdg ]);};case 25:_cecdg =_gbcdc +1;{_babfe .emit (_dcaad ,_cafbf [_fdfb :_cecdg ]);};case 26:_cecdg =_gbcdc +1;{_babfe .emit (_dcce ,_cafbf [_fdfb :_cecdg ]);};case 27:_cecdg =_gbcdc +1;{_babfe .emit (_aabc ,_cafbf [_fdfb :_cecdg ]);};case 28:_cecdg =_gbcdc +1;{_babfe .emit (_bggfb ,_cafbf [_fdfb :_cecdg ]);};case 29:_cecdg =_gbcdc +1;{_babfe .emit (_fbac ,_cafbf [_fdfb :_cecdg ]);};case 30:_cecdg =_gbcdc +1;{_babfe .emit (_ffadb ,_cafbf [_fdfb :_cecdg ]);};case 31:_cecdg =_gbcdc +1;{_babfe .emit (_bcbdb ,_cafbf [_fdfb :_cecdg ]);};case 32:_cecdg =_gbcdc +1;{_babfe .emit (_cdffg ,_cafbf [_fdfb :_cecdg ]);};case 33:_cecdg =_gbcdc +1;{_babfe .emit (_eafda ,_cafbf [_fdfb :_cecdg ]);};case 34:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_deca ,_cafbf [_fdfb :_cecdg ]);};case 35:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_caaf ,_cafbf [_fdfb :_cecdg ]);};case 36:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_acbd ,_cafbf [_fdfb :_cecdg ]);};case 37:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_dcafc ,_cafbf [_fdfb :_cecdg ]);};case 38:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_egae ,_cafbf [_fdfb :_cecdg ]);};case 39:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_edga ,_cafbf [_fdfb +1:_cecdg -1]);};case 40:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_aebb ,_cafbf [_fdfb :_cecdg ]);};case 41:_cecdg =_gbcdc ;_gbcdc --;{_babfe .emit (_gdeb ,_cafbf [_fdfb :_cecdg ]);};case 42:_gbcdc =(_cecdg )-1;{_babfe .emit (_deca ,_cafbf [_fdfb :_cecdg ]);};case 43:switch _gdbf {case 0:{_gbce =0;goto _gbcb ;};case 1:{_gbcdc =(_cecdg )-1;_babfe .emit (_ageeed ,_cafbf [_fdfb :_cecdg ]);};case 2:{_gbcdc =(_cecdg )-1;_babfe .emit (_deca ,_cafbf [_fdfb :_cecdg ]);};case 3:{_gbcdc =(_cecdg )-1;_babfe .emit (_caaf ,_cafbf [_fdfb :_cecdg ]);};case 4:{_gbcdc =(_cecdg )-1;_babfe .emit (_cabca ,_cafbf [_fdfb :_cecdg ]);};case 11:{_gbcdc =(_cecdg )-1;_babfe .emit (_gcad ,_cafbf [_fdfb :_cecdg ]);};case 14:{_gbcdc =(_cecdg )-1;_babfe .emit (_egae ,_cafbf [_fdfb :_cecdg ]);};case 15:{_gbcdc =(_cecdg )-1;_babfe .emit (_edga ,_cafbf [_fdfb +1:_cecdg -1]);};};};};goto _gbcb ;_gbcb :_eabe =int (_ffbe [_gbce ]);_ebedg =uint (_dbcc [_eabe ]);_eabe ++;for ;_ebedg > 0;_ebedg --{_eabe ++;switch _dbcc [_eabe -1]{case 0:_fdfb =0;case 1:_gdbf =0;};};if _gbce ==0{goto _dabag ;};if _gbcdc ++;_gbcdc !=_egce {goto _cdece ;};_gcfcb :{};if _gbcdc ==_cgfag {switch _gbce {case 1:goto _eefda ;case 2:goto _eefda ;case 31:goto _defb ;case 14:goto _eefda ;case 15:goto _eefda ;case 32:goto _badbc ;case 17:goto _eefda ;case 33:goto _aagbc ;case 18:goto _eefda ;case 19:goto _eefda ;case 34:goto _dddc ;case 35:goto _ccec ;case 36:goto _ccec ;case 23:goto _dddd ;case 37:goto _ccec ;case 38:goto _dffcf ;case 39:goto _cbaa ;case 40:goto _dcff ;case 41:goto _dcff ;case 42:goto _dcff ;case 43:goto _aagbc ;case 44:goto _eefda ;case 45:goto _dcff ;case 46:goto _dcff ;case 47:goto _dcff ;case 48:goto _dcff ;case 49:goto _dcff ;case 50:goto _dcff ;case 51:goto _dcff ;case 52:goto _dcff ;case 53:goto _dcff ;case 54:goto _dcff ;case 55:goto _dcff ;case 56:goto _dcff ;case 57:goto _dcff ;case 58:goto _dcff ;case 59:goto _eefda ;};};_dabag :{};};if _fdfb > 0{copy (_cafbf [0:],_cafbf [_fdfb :]);};};_ =_cgfag ;if _gbce ==_abfab {_babfe .emit (_dgcaa ,nil );};close (_babfe ._eafdag );};func _bgbg (_gcdg _dc .Time )_dc .Time {_gcdg =_gcdg .UTC ();return _dc .Date (_gcdg .Year (),_gcdg .Month (),_gcdg .Day (),_gcdg .Hour (),_gcdg .Minute (),_gcdg .Second (),_gcdg .Nanosecond (),_dc .Local );};const _aef ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_gbe +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _dfg (_age ,_dbb _dc .Time )bool {_ege :=_age .Unix ();_ggbe :=_dbb .Unix ();_cdf :=_age .Year ();_efgb :=_bgag (_cdf ,_dc .March ,1);if _cbb (_cdf )&&_ege < _efgb &&_ggbe >=_efgb {return true ;};var _dgf =_dbb .Year ();var _aad =_bgag (_dgf ,_dc .March ,1);return (_cbb (_dgf )&&_ggbe >=_aad &&_ege < _aad );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_cbd :=len (args );if _cbd < 4||_cbd > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfae :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fggc :=args [1].ValueNumber ;if _fggc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdff :=args [2].ValueNumber ;if _fdff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ebff :=args [3].ValueNumber ;_fegd :=0.0;if _cbd > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fegd =args [4].ValueNumber ;};_agee :=0;if _cbd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_agee =int (args [5].ValueNumber );if _agee !=0{_agee =1;};};return MakeNumberResult (_agfa (_gfae ,_fggc ,_fdff ,_ebff ,_fegd ,_agee ));};var _acffc =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _agbf (_bcefe ,_ebade []string )[]string {for _ ,_fbgfg :=range _ebade {_bcefe =append (_bcefe ,_fbgfg );};return _bcefe ;};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_eaa :=int (args [0].ValueNumber );if _eaa < 0||_eaa >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _eaa <=1899{_eaa +=1900;};_dff :=_dc .Month (args [1].ValueNumber );_egge :=int (args [2].ValueNumber );_cac :=_bgag (_eaa ,_dff ,_egge );_ega :=_ffae (_efa ,_cac )+1;if _ega < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_ega );};type defEval struct{evCache ;_abg bool ;};type parsedSearchObject struct{_dcca string ;_facb string ;_fece int ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_daf CellRef )Update (q *_bf .UpdateQuery )Expression {if q .UpdateCurrentSheet {_daf ._ebc =_eca (_daf ._ebc ,q );};return _daf ;};var _dcc =[]*_d .Regexp {};

// String returns a string representation of CellRef.
func (_baef CellRef )String ()string {return _baef ._ebc };

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_fabfg string };

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ffbfd :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_gbfd :=args [1].ValueNumber !=0;_cdff :=_ecdbb (args [2:],[]string {},_gbfd );return MakeStringResult (_c .Join (_cdff ,_ffbfd ));};const _dcafc =57347;

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdcf :=true ;for _ ,_dccca :=range args {_dccca =_dccca .AsNumber ();switch _dccca .Type {case ResultTypeList ,ResultTypeArray :_faga :=And (_dccca .ListValues ());if _faga .Type ==ResultTypeError {return _faga ;};if _faga .ValueNumber ==0{_bdcf =false ;};case ResultTypeNumber :if _dccca .ValueNumber ==0{_bdcf =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _dccca ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_bdcf );};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _bfbd (args ,true )};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_eggcbg :=len (args );if _eggcbg !=2&&_eggcbg !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ffba ,_eaac :=_aafbb (args [0],args [1],"\u0058\u0049\u0052\u0052");if _eaac .Type ==ResultTypeError {return _eaac ;};_aaca :=_ffba ._bceg ;_ggff :=_ffba ._gecb ;_egdd :=0.1;if _eggcbg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egdd =args [2].ValueNumber ;if _egdd <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _gdcg (_aaca ,_ggff ,_egdd );};

// Update updates references in the VerticalRange after removing a row/column.
func (_bgbae VerticalRange )Update (q *_bf .UpdateQuery )Expression {if q .UpdateType ==_bf .UpdateActionRemoveColumn {_bggfe :=_bgbae ;if q .UpdateCurrentSheet {_ggdda :=q .ColumnIdx ;_bggfe ._decad =_ee (_bgbae ._decad ,_ggdda );_bggfe ._dfceg =_ee (_bgbae ._dfceg ,_ggdda );};return _bggfe ;};return _bgbae ;};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cbgee :=args [0].AsNumber ();if _cbgee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbag :=float64 (1);if _cbgee .ValueNumber < 0{_fbag =-1;};if len (args )> 1{_affe :=args [1].AsNumber ();if _affe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_fbag =_gg .Abs (_affe .ValueNumber );};if len (args )==1{return MakeNumberResult (_gg .Floor (_cbgee .ValueNumber ));};_bdcd :=_cbgee .ValueNumber ;_bdcd ,_ggdg :=_gg .Modf (_bdcd /_fbag );if _ggdg !=0{if _cbgee .ValueNumber < 0{_bdcd --;};};return MakeNumberResult (_bdcd *_fbag );};

// String returns a string representation of a range with prefix.
func (_ecggc PrefixRangeExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ecggc ._bgbgc .String (),_ecggc ._gggb .String (),_ecggc ._fdfda .String ());};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gefde :=args [0];if _gefde .Type ==ResultTypeList {_edef :=[][]Result {};for _ ,_aagfg :=range _gefde .ValueList {_edef =append (_edef ,[]Result {_aagfg });};return MakeArrayResult (_edef );};_egbg :=make ([][]Result ,len (_gefde .ValueArray [0]));for _ ,_acfc :=range _gefde .ValueArray {for _dfbe ,_ebed :=range _acfc {_egbg [_dfbe ]=append (_egbg [_dfbe ],_ebed );};};return MakeArrayResult (_egbg );};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);var _cbeag =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};var _cbdb =[...]string {};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_fdfe :=args [0];if _fdfe .Type !=ResultTypeArray &&_fdfe .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fbgeg :=_cbead (args [1]);_adddg :=0;for _ ,_bgegc :=range _bcbd (_fdfe ){for _ ,_adff :=range _bgegc {if _fgedc (_adff ,_fbgeg ){_adddg ++;};};};return MakeNumberResult (float64 (_adddg ));};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ccgg :=_c .ToLower (args [0].ValueString );if !_beee (_ccgg ){_ ,_ ,_ ,_bgg ,_cag :=_baefa (_ccgg );if _cag .Type ==ResultTypeError {_cag .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _cag ;};if _bgg {return MakeNumberResult (0);};};_cggb ,_abbf ,_ebb ,_aca ,_ ,_bga :=_dfb (_ccgg );if _bga .Type ==ResultTypeError {return _bga ;};_bgeg :=_ebaa (float64 (_cggb ),float64 (_abbf ),_ebb );if _aca {_bgeg +=0.5;}else if _bgeg >=1{_bgeg -=float64 (int (_bgeg ));};return MakeNumberResult (_bgeg );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_fdgb :=len (args );if _fdgb !=5&&_fdgb !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fggb ,_fegdf ,_gaca :=_babbe (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gaca .Type ==ResultTypeError {return _gaca ;};_fccc ,_gaca :=_ddfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gaca .Type ==ResultTypeError {return _gaca ;};if _fccc >=_fggb {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ecfaf :=args [3].ValueNumber ;if _ecfaf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_dfgdg :=args [4].ValueNumber ;if _dfgdg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_gbdd :=0;if _fdgb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbdd =int (args [5].ValueNumber );if !_addc (_gbdd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_gebf ,_gaca :=_gbcg (_fggb ,_fegdf ,_gbdd );if _gaca .Type ==ResultTypeError {return _gaca ;};_dagdf ,_gaca :=_gbcg (_fccc ,_fegdf ,_gbdd );if _gaca .Type ==ResultTypeError {return _gaca ;};_afgda ,_gaca :=_gbcg (_fccc ,_fggb ,_gbdd );if _gaca .Type ==ResultTypeError {return _gaca ;};_dgde :=1+_dagdf *_ecfaf ;_fadcf :=1+_gebf *_dfgdg ;return MakeNumberResult ((_dgde /_fadcf -_afgda *_ecfaf )*100);};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_ddcb :=len (args );if _ddcb ==0||_ddcb > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_ffef :=_bcbd (args [0]);_ggefc :=[]float64 {};for _ ,_afgc :=range _ffef {for _ ,_fef :=range _afgc {if _fef .Type ==ResultTypeNumber &&!_fef .IsBoolean {_ggefc =append (_ggefc ,_fef .ValueNumber );};};};_aadg :=len (_ggefc );if len (_ggefc )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_fggg :=0.1;if _ddcb ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fggg =args [1].ValueNumber ;if _fggg <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_cbff :=[]float64 {};for _gfbe :=0;_gfbe < _aadg ;_gfbe ++{if _gfbe ==0{_cbff =append (_cbff ,0);}else {_cbff =append (_cbff ,_cbff [_gfbe -1]+365);};};return _gdcg (_ggefc ,_cbff ,_fggg );};

// String is a string expression.
type String struct{_ddeac string };

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_ebefe :=args [0].AsNumber ();if _ebefe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_egabb :=10.0;if len (args )> 1{_ggdgg :=args [1].AsNumber ();if _ggdgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_egabb =args [1].ValueNumber ;};if _ebefe .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _egabb ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_gg .Log (_ebefe .ValueNumber )/_gg .Log (_egabb ));};const _ffadb =57374;type plex struct{_cbdfg chan *node ;_bfef Expression ;_gceg string ;};type cumulArgs struct{_caga float64 ;_cfaa float64 ;_bfgb float64 ;_gade float64 ;_cdbf float64 ;_agdc int ;};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cegf :=args [0].AsNumber ();if _cegf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _ddbe float64 ;_eadd :=args [1].AsNumber ();if _eadd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddbe =_eadd .ValueNumber ;if _ddbe < 0&&_cegf .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_eecd :=_cegf .ValueNumber ;_eecd ,_bedbc :=_gg .Modf (_eecd /_ddbe );if _bedbc !=0{if _cegf .ValueNumber < 0&&_bedbc < 0{_eecd --;};};return MakeNumberResult (_eecd *_ddbe );};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bee :=args [0].ValueNumber ;_abf :=args [1].ValueNumber ;if _abf < _bee {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _abf ==_bee {return MakeNumberResult (0);};_ceg :=_c .ToLower (args [2].ValueString );if _ceg =="\u0064"{return MakeNumberResult (_abf -_bee );};_fcga :=_fbec (_bee );_bdad :=_fbec (_abf );_feg ,_cfag ,_eeb :=_fcga .Date ();_babf ,_dbde ,_egfa :=_bdad .Date ();_fgea :=int (_cfag );_ag :=int (_dbde );var _gcf float64 ;switch _ceg {case "\u0079":_gcf =float64 (_babf -_feg );if _ag < _fgea ||(_ag ==_fgea &&_egfa < _eeb ){_gcf --;};case "\u006d":_agc :=_babf -_feg ;_egged :=_ag -_fgea ;if _egfa < _eeb {_egged --;};if _egged < 0{_agc --;_egged +=12;};_gcf =float64 (_agc *12+_egged );case "\u006d\u0064":_bccb :=_ag ;if _egfa < _eeb {_bccb --;};_gcf =float64 (int (_abf -_fcg (_babf ,_bccb ,_eeb )));case "\u0079\u006d":_gcf =float64 (_ag -_fgea );if _egfa < _eeb {_gcf --;};if _gcf < 0{_gcf +=12;};case "\u0079\u0064":_cgbc :=_babf ;if _ag < _fgea ||(_ag ==_fgea &&_egfa < _eeb ){_cgbc --;};_gcf =float64 (int (_abf -_fcg (_cgbc ,_fgea ,_eeb )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_gcf );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_fbdabe :=args [0].AsNumber ();_cedge :=args [1].AsNumber ();if _fbdabe .Type ==ResultTypeNumber &&_cedge .Type ==ResultTypeNumber {_afga :=_gg .Atan2 (_cedge .ValueNumber ,_fbdabe .ValueNumber );if _afga !=_afga {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_afga );};for _ ,_acfdc :=range []ResultType {_fbdabe .Type ,_cedge .Type }{switch _acfdc {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _fbdabe ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_acfdc ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Reference returns a string reference value to a sheet.
func (_dbffc SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_dbffc ._abdec };};func _ebfcc (_fcfe ,_gga ,_fbf ,_deea int )int {if !_fce (_deea ){return _fbf ;};_ebdf :=_fbf ;_ecdb :=_defe (_fcfe ,_gga );if _ebdf > 30||_fbf >=_ecdb ||_ebdf >=_ecdb {_ebdf =30;};return _ebdf ;};const _bfdfa =_dc .Millisecond *1000;type couponArgs struct{_aadc float64 ;_bcae float64 ;_baa int ;_dcfc int ;};

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_aeeaa PrefixVerticalRange )Update (q *_bf .UpdateQuery )Expression {if q .UpdateType ==_bf .UpdateActionRemoveColumn {_bdcca :=_aeeaa ;_baab :=_aeeaa ._eeae .String ();if _baab ==q .SheetToUpdate {_dcdda :=q .ColumnIdx ;_bdcca ._eaegf =_ee (_aeeaa ._eaegf ,_dcdda );_bdcca ._cbafg =_ee (_aeeaa ._cbafg ,_dcdda );};return _bdcca ;};return _aeeaa ;};

// CellRef is a reference to a single cell
type CellRef struct{_ebc string };

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dadd :=args [0].AsNumber ();_gdccc :=args [1].AsNumber ();if _dadd .Type !=ResultTypeNumber ||_gdccc .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efgf :=_gg .Trunc (_dadd .ValueNumber );_egfbb :=_gg .Trunc (_gdccc .ValueNumber );if _egfbb > _efgf {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _egfbb ==_efgf ||_egfbb ==0{return MakeNumberResult (1);};_ffbf :=float64 (1);for _fdaeae :=float64 (1);_fdaeae <=_egfbb ;_fdaeae ++{_ffbf *=(_efgf +1-_fdaeae )/_fdaeae ;};return MakeNumberResult (_ffbf );};

// Update updates the horizontal range references after removing a row/column.
func (_adgg HorizontalRange )Update (q *_bf .UpdateQuery )Expression {return _adgg };const _dcaac =57344;

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_dge ,_dagb :=_fcbf (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _dagb .Type ==ResultTypeError {return _dagb ;};_abc :=_dge ._caga ;_cfagf :=_dge ._cfaa ;_cfba :=_dge ._bfgb ;_cca :=_dge ._gade ;_eebf :=_dge ._cdbf ;_effbe :=_dge ._agdc ;_eddb :=_gfec (_abc ,_cfagf ,_cfba ,0,_effbe );_gdea :=0.0;if _cca ==1{if _effbe ==0{_gdea =_eddb +_cfba *_abc ;}else {_gdea =_eddb ;};_cca ++;};for _fcac :=_cca ;_fcac <=_eebf ;_fcac ++{if _effbe ==1{_gdea +=_eddb -(_gcef (_abc ,_fcac -2,_eddb ,_cfba ,1)-_eddb )*_abc ;}else {_gdea +=_eddb -_gcef (_abc ,_fcac -1,_eddb ,_cfba ,0)*_abc ;};};return MakeNumberResult (_gdea );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_eeae Expression ;_eaegf ,_cbafg string ;};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ac :lhs ,_fbe :rhs ,_da :op };};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cggbe :=args [0];if _cggbe .Type !=ResultTypeArray &&_cggbe .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_baffb :=_bcbd (_cggbe );_dedgd :=args [2];if _dedgd .Type !=ResultTypeArray &&_dedgd .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cbbeg :=_bcbd (_dedgd );_ddga :=_cbead (args [1]);_babe :=0.0;for _gcagf ,_baggd :=range _baffb {for _eccc ,_cfdf :=range _baggd {if _fgedc (_cfdf ,_ddga ){_babe +=_cbbeg [_gcagf ][_eccc ].ValueNumber ;};};};return MakeNumberResult (_babe );};func LexReader (r _f .Reader )chan *node {_fdbae :=NewLexer ();go _fdbae .lex (r );return _fdbae ._eafdag };

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_eddcc Result )AsNumber ()Result {if _eddcc .Type ==ResultTypeString {_abbeb ,_eedbe :=_fe .ParseFloat (_eddcc .ValueString ,64);if _eedbe ==nil {return MakeNumberResult (_abbeb );};};if _eddcc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _eddcc ;};func _eege (_gcde string ,_fde _dc .Time )(_dc .Time ,error ){_eafgd ,_ ,_dccc :=_ad .ParseFloat (_gcde ,10,128,_ad .ToNearestEven );if _dccc !=nil {return _dc .Time {},_dccc ;};_edgec :=new (_ad .Float );_edgec .SetUint64 (uint64 (24*_dc .Hour ));_eafgd .Mul (_eafgd ,_edgec );_bdbf ,_ :=_eafgd .Uint64 ();_gdfff :=_fde .Add (_dc .Duration (_bdbf ));return _bgbg (_gdfff ),nil ;};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_ebc :v }};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_ffbb :=len (args );if _ffbb !=4&&_ffbb !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_feed ,_dgcg ,_fgge :=_babbe (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _fgge .Type ==ResultTypeError {return _fgge ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgebe :=args [2].ValueNumber ;if _bgebe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bbfd :=args [3].ValueNumber ;if _bbfd <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_fgeaa :=0;if _ffbb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgeaa =int (args [4].ValueNumber );if !_addc (_fgeaa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_bgab ,_fgge :=_gbcg (_feed ,_dgcg ,_fgeaa );if _fgge .Type ==ResultTypeError {return _fgge ;};return MakeNumberResult ((_bbfd /_bgebe -1)/_bgab );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _gaccc (args ,true )};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_aaaa :=args [0].ValueNumber ;if _aaaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_ageg :=float64 (int (args [1].ValueNumber ));if _ageg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_gg .Pow (_aaaa +1,1/_ageg )-1)*_ageg );};const _fbaa int =30;

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afcd :=args [0].AsNumber ();if _afcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfbff :=_gg .Signbit (_afcd .ValueNumber );_bafg ,_efef :=_gg .Modf (_afcd .ValueNumber /2);_ffdf :=_bafg *2;if _efef !=0{if !_dfbff {_ffdf +=2;}else {_ffdf -=2;};};return MakeNumberResult (_ffdf );};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};var _bfc =[]int {31,28,31,30,31,30,31,31,30,31,30,31};func _gegg (_cddf ,_aaa _dc .Time ,_acdb ,_ebec int )_dc .Time {_dgdd :=_aaa ;_efc :=_cddf .Year ()-_aaa .Year ();_dgdd =_dgdd .AddDate (_efc ,0,0);if _cddf .After (_dgdd ){_dgdd =_dgdd .AddDate (1,0,0);};_beg :=-12/_acdb ;for _dgdd .After (_cddf ){_dgdd =_dgdd .AddDate (0,_beg ,0);};return _dgdd ;};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_gaa :=_dc .Now ();_ ,_bcab :=_gaa .Zone ();_eaf :=_cff +float64 (_gaa .Unix ()+int64 (_bcab ))/86400;return MakeNumberResult (_eaf );};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecce :=args [0].ValueNumber ;if _ecce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bebad :=args [1].ValueNumber ;if _bebad <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afbe :=args [2].ValueNumber ;if _afbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_gg .Log10 (_afbe )-_gg .Log10 (_bebad ))/_gg .Log10 (1+_ecce ));};func _gad (_acae []Result ,_ebbg string )(*amorArgs ,Result ){_bfgf :=len (_acae );if _bfgf !=6&&_bfgf !=7{return nil ,MakeErrorResult (_ebbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _acae [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bbd :=_acae [0].ValueNumber ;if _bbd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_ebba ,_aeee :=_ddfd (_acae [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_ebbg );if _aeee .Type ==ResultTypeError {return nil ,_aeee ;};_eceg ,_aeee :=_ddfd (_acae [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_ebbg );if _aeee .Type ==ResultTypeError {return nil ,_aeee ;};if _eceg < _ebba {return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _acae [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddcf :=_acae [3].ValueNumber ;if _ddcf < 0||_ddcf > _bbd {return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _acae [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcfg :=int (_acae [4].ValueNumber );if _dcfg < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _acae [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fdb :=_acae [5].ValueNumber ;if _fdb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ebbg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_bdga :=0;if _bfgf ==7&&_acae [6].Type !=ResultTypeEmpty {if _acae [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbg +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdga =int (_acae [6].ValueNumber );if !_addc (_bdga )||_bdga ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ebbg );};};return &amorArgs {_bbd ,_ebba ,_eceg ,_ddcf ,_dcfg ,_fdb ,_bdga },_efb ;};var _aaaca =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_eaff ,_gbadd :=_ecgc ("\u0046\u0049\u004e\u0044",args );if _gbadd .Type !=ResultTypeEmpty {return _gbadd ;};_bcaa :=_eaff ._dcca ;if _bcaa ==""{return MakeNumberResult (1.0);};_egaff :=_eaff ._facb ;_aaaba :=_eaff ._fece ;_ffdaa :=1;for _fdeb :=range _egaff {if _ffdaa < _aaaba {_ffdaa ++;continue ;};_adddd :=_c .Index (_egaff [_fdeb :],_bcaa );if _adddd ==0{return MakeNumberResult (float64 (_ffdaa ));};_ffdaa ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efbg :=args [0].ValueNumber ;if _efbg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gded :=args [1].ValueNumber ;if _gded <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beea :=args [2].ValueNumber ;if _beea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_gg .Pow (_beea /_gded ,1/_efbg )-1);};const _bcff ="\u0028\u0020\u0028"+_aeb +"\u007c"+_cad +"\u007c"+_dgc +"\u007c"+_cfgf +"\u0029\u0029\u003f\u0024";

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_adea (args ,_bbeg ))};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dfdd :=[]float64 {};for _ ,_cebfc :=range args {switch _cebfc .Type {case ResultTypeString :_gdccd :=_cebfc .AsNumber ();if _gdccd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dfdd =append (_dfdd ,_gdccd .ValueNumber );case ResultTypeList :_ecfe :=LCM (_cebfc .ValueList );if _ecfe .Type !=ResultTypeNumber {return _ecfe ;};_dfdd =append (_dfdd ,_ecfe .ValueNumber );case ResultTypeNumber :_dfdd =append (_dfdd ,_cebfc .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _cebfc ;};};if len (_dfdd )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _dfdd [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dfdd )==1{return MakeNumberResult (_dfdd [0]);};_eeec :=_dfdd [0];for _efgdd :=1;_efgdd < len (_dfdd );_efgdd ++{if _dfdd [_efgdd ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eeec =_dbab (_eeec ,_dfdd [_efgdd ]);};return MakeNumberResult (_eeec );};

// Eval evaluates the binary expression using the context given.
func (_gcc BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_dd :=_gcc ._ac .Eval (ctx ,ev );if _dd .Type ==ResultTypeError {return _dd ;};_fa :=_gcc ._fbe .Eval (ctx ,ev );if _fa .Type ==ResultTypeError {return _fa ;};if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeArray {if !_cc (_dd .ValueArray ,_fa .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _de (_gcc ._da ,_dd .ValueArray ,_fa .ValueArray );}else if _dd .Type ==ResultTypeList {if len (_dd .ValueList )!=len (_fa .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _adg (_gcc ._da ,_dd .ValueList ,_fa .ValueList );};}else if _dd .Type ==ResultTypeArray &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return _efd (_gcc ._da ,_dd .ValueArray ,_fa );}else if _dd .Type ==ResultTypeList &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return _gb (_gcc ._da ,_dd .ValueList ,_fa );};switch _gcc ._da {case BinOpTypePlus :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeNumberResult (_dd .ValueNumber +_fa .ValueNumber );};};case BinOpTypeMinus :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeNumberResult (_dd .ValueNumber -_fa .ValueNumber );};};case BinOpTypeMult :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeNumberResult (_dd .ValueNumber *_fa .ValueNumber );};};case BinOpTypeDiv :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {if _fa .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_dd .ValueNumber /_fa .ValueNumber );};};case BinOpTypeExp :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeNumberResult (_gg .Pow (_dd .ValueNumber ,_fa .ValueNumber ));};};case BinOpTypeLT :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeBoolResult (_dd .ValueNumber < _fa .ValueNumber );};if _dd .Type ==ResultTypeString {return MakeBoolResult (_dd .ValueString < _fa .ValueString );};if _dd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _dd .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _dd .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (true );}else if _dd .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_dd .Type ==ResultTypeNumber ||_dd .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeBoolResult (_dd .ValueNumber > _fa .ValueNumber );};if _dd .Type ==ResultTypeString {return MakeBoolResult (_dd .ValueString > _fa .ValueString );};if _dd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _dd .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _dd .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (false );}else if _dd .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_dd .Type ==ResultTypeNumber ||_dd .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeBoolResult (_dd .ValueNumber ==_fa .ValueNumber );};if _dd .Type ==ResultTypeString {return MakeBoolResult (_dd .ValueString ==_fa .ValueString );};if _dd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_dd .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber )||(_dd .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _dd .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (_ce (_fa ));}else if (_dd .Type ==ResultTypeNumber ||_dd .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (_ce (_dd ));};case BinOpTypeNE :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeBoolResult (_dd .ValueNumber !=_fa .ValueNumber );};if _dd .Type ==ResultTypeString {return MakeBoolResult (_dd .ValueString !=_fa .ValueString );};if _dd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_dd .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber )||(_dd .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _dd .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (!_ce (_fa ));}else if (_dd .Type ==ResultTypeNumber ||_dd .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (!_ce (_dd ));};case BinOpTypeLEQ :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeBoolResult (_dd .ValueNumber <=_fa .ValueNumber );};if _dd .Type ==ResultTypeString {return MakeBoolResult (_dd .ValueString <=_fa .ValueString );};if _dd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _dd .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _dd .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (true );}else if _dd .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (_ce (_fa ));}else if (_dd .Type ==ResultTypeNumber ||_dd .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (_ce (_dd ));};case BinOpTypeGEQ :if _dd .Type ==_fa .Type {if _dd .Type ==ResultTypeNumber {return MakeBoolResult (_dd .ValueNumber >=_fa .ValueNumber );};if _dd .Type ==ResultTypeString {return MakeBoolResult (_dd .ValueString >=_fa .ValueString );};if _dd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _dd .Type ==ResultTypeString &&_fa .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _dd .Type ==ResultTypeNumber &&_fa .Type ==ResultTypeString {return MakeBoolResult (false );}else if _dd .Type ==ResultTypeEmpty &&(_fa .Type ==ResultTypeNumber ||_fa .Type ==ResultTypeString ){return MakeBoolResult (_ce (_fa ));}else if (_dd .Type ==ResultTypeNumber ||_dd .Type ==ResultTypeString )&&_fa .Type ==ResultTypeEmpty {return MakeBoolResult (_ce (_dd ));};case BinOpTypeConcat :return MakeStringResult (_dd .Value ()+_fa .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// Value returns a string version of the result.
func (_ebbgd Result )Value ()string {switch _ebbgd .Type {case ResultTypeNumber :_gdcdb :=_fe .FormatFloat (_ebbgd .ValueNumber ,'f',-1,64);if len (_gdcdb )> 12{_eebca :=12;for _dbaf :=_eebca ;_dbaf > 0&&_gdcdb [_dbaf ]=='0';_dbaf --{_eebca --;};_gdcdb =_gdcdb [0:_eebca +1];};return _gdcdb ;case ResultTypeError :return _ebbgd .ValueString ;case ResultTypeString :return _ebbgd .ValueString ;case ResultTypeList :if len (_ebbgd .ValueList )==0{return "";};return _ebbgd .ValueList [0].Value ();case ResultTypeArray :if len (_ebbgd .ValueArray )==0||len (_ebbgd .ValueArray [0])==0{return "";};return _ebbgd .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _fbcc (_bcfaa []Result )[]float64 {_fadbb :=make ([]float64 ,0);for _ ,_bdgf :=range _bcfaa {if _bdgf .Type ==ResultTypeEmpty {continue ;};_bdgf =_bdgf .AsNumber ();switch _bdgf .Type {case ResultTypeNumber :if !_bdgf .IsBoolean {_fadbb =append (_fadbb ,_bdgf .ValueNumber );};case ResultTypeList ,ResultTypeArray :_fadbb =append (_fadbb ,_fbcc (_bdgf .ListValues ())...);case ResultTypeString :default:_gc .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bdgf .Type );};};return _fadbb ;};func _ce (_fc Result )bool {if _fc .Type ==ResultTypeString {return _fc .ValueString =="";};return _fc .ValueNumber ==0;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_dacbe :=_c .Split (v ,"\u003a");if len (_dacbe )!=2{return nil ;};if _dacbe [0]> _dacbe [1]{_dacbe [0],_dacbe [1]=_dacbe [1],_dacbe [0];};return VerticalRange {_decad :_dacbe [0],_dfceg :_dacbe [1]};};

// String returns a string representation of a horizontal range.
func (_cgffb HorizontalRange )String ()string {return _cgffb .horizontalRangeReference ()};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cce :=_dc .Now ();_ ,_gecg :=_cce .Zone ();_dfe :=_ffae (_efa ,_cce .Unix ()+int64 (_gecg ))+1;return MakeNumberResult (_dfe );};func _ddbda (_edac []Result ,_gccf bool )Result {_bfdb :="\u004d\u0041\u0058";if _gccf {_bfdb ="\u004d\u0041\u0058\u0041";};if len (_edac )==0{return MakeErrorResult (_bfdb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adee :=-_gg .MaxFloat64 ;for _ ,_ffgef :=range _edac {switch _ffgef .Type {case ResultTypeNumber :if (_gccf ||!_ffgef .IsBoolean )&&_ffgef .ValueNumber > _adee {_adee =_ffgef .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_bdcfa :=_ddbda (_ffgef .ListValues (),_gccf );if _bdcfa .ValueNumber > _adee {_adee =_bdcfa .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_bedc :=0.0;if _gccf {_bedc =_ffgef .AsNumber ().ValueNumber ;};if _bedc > _adee {_adee =_bedc ;};default:_gc .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bfdb +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffgef .Type );};};if _adee ==-_gg .MaxFloat64 {_adee =0;};return MakeNumberResult (_adee );};func (_ddca *Lexer )emit (_gbbb tokenType ,_fdbec []byte ){if _abcg {_a .Println ("\u0065\u006d\u0069\u0074",_gbbb ,_eccfgc (string (_fdbec )));};_ddca ._eafdag <-&node {_gbbb ,string (_fdbec )};};type ivr struct{};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_cgae ,_cccb ,_fdcgd :=_cecc (args );if _fdcgd .Type ==ResultTypeError {return _fdcgd ;};return MakeNumberResult (_baadf (_cgae )/_cccb );};const _abfab int =0;

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_eedd :=len (args );if _eedd < 3||_eedd > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgade :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dged :=args [1].ValueNumber ;if _dged !=float64 (int (_dged )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geea :=args [2].ValueNumber ;_fggcg :=0.0;if _eedd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fggcg =args [3].ValueNumber ;};_gfdc :=0.0;if _eedd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfdc =args [4].ValueNumber ;if _gfdc !=0{_gfdc =1;};};if _cgade ==0{return MakeNumberResult (-_geea *_dged -_fggcg );}else {return MakeNumberResult ((((1-_gg .Pow (1+_cgade ,_dged ))/_cgade )*_geea *(1+_cgade *_gfdc )-_fggcg )/_gg .Pow (1+_cgade ,_dged ));};};func (_bafb *noCache )SetCache (key string ,value Result ){};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _cbeca (_ecedb []Result )[]rangeIndex {_cdbb :=[]rangeIndex {};_gacd :=len (_ecedb );for _fedad :=0;_fedad < _gacd -1;_fedad +=2{_cdgcc :=[]rangeIndex {};_bdadd :=_bcbd (_ecedb [_fedad ]);_cecd :=_cbead (_ecedb [_fedad +1]);if _fedad ==0{for _dabe ,_bebac :=range _bdadd {for _aced ,_fgggf :=range _bebac {if _fgedc (_fgggf ,_cecd ){_cdgcc =append (_cdgcc ,rangeIndex {_dabe ,_aced });};};};}else {for _ ,_ccfg :=range _cdbb {_geeg :=_bdadd [_ccfg ._gddb ][_ccfg ._gbebg ];if _fgedc (_geeg ,_cecd ){_cdgcc =append (_cdgcc ,_ccfg );};};};if len (_cdgcc )==0{return []rangeIndex {};};_cdbb =_cdgcc [:];};return _cdbb ;};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cdcfb :=args [0].AsNumber ();if _cdcfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _cdcfb .ValueNumber < 0{return MakeNumberResult (-1);}else if _cdcfb .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};const _cabca =57349;func _egdc (_bbfe Result ,_fdcg *criteriaParsed )bool {if _bbfe .Type ==ResultTypeEmpty {return false ;};if _fdcg ._abca {return _bbfe .ValueNumber ==_fdcg ._ffbae ;}else {_gcgea :=_c .ToLower (_bbfe .ValueString );return _fdcg ._ebcc ==_gcgea ||_fb .Match (_fdcg ._ebcc ,_gcgea );};};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdbd :=args [0].AsString ();if _cdbd .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_cdbd .ValueString )));};const _cdbdg =-1000;

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_bcggg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_bcggg =int (args [1].ValueNumber );if _bcggg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _bcggg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_eebb :=args [0].Value ();if _bcggg > len (_eebb ){return MakeStringResult (_eebb );};return MakeStringResult (_eebb [0:_bcggg ]);};

// String returns a string representation of String.
func (_fbgega String )String ()string {return "\u0022"+_fbgega ._ddeac +"\u0022"};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfcab :=args [0].Ref ;if _dfcab .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_dfcab .Value ,ev ).IsBoolean );};var _debbd =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Reference returns an invalid reference for EmptyExpr.
func (_beba EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };const _gdeb =57371;

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_cgff :=_bffe (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _cgff .Type !=ResultTypeEmpty {return _cgff ;};_afbec :=_cbeca (args [1:]);_ecbb :=-_gg .MaxFloat64 ;_ggfd :=_bcbd (args [0]);for _ ,_gcaf :=range _afbec {_bcefc :=_ggfd [_gcaf ._gddb ][_gcaf ._gbebg ].ValueNumber ;if _ecbb < _bcefc {_ecbb =_bcefc ;};};if _ecbb ==-_gg .MaxFloat64 {_ecbb =0;};return MakeNumberResult (float64 (_ecbb ));};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbeff :=args [0].Ref ;for _dbeff .Type ==ReferenceTypeNamedRange {_dbeff =ctx .NamedRange (_dbeff .Value );};_fbbb :="";switch _dbeff .Type {case ReferenceTypeCell :_fbbb =_dbeff .Value ;case ReferenceTypeRange :_gbaec :=_c .Split (_dbeff .Value ,"\u003a");if len (_gbaec )==2{_fbbb =_gbaec [0];};default:return MakeErrorResult (_a .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_dbeff .Type ));};_eceb ,_gfea :=_ga .ParseCellReference (_fbbb );if _gfea !=nil {return MakeErrorResult (_a .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_gfea .Error ()));};_ccebg ,_efbb ,_fbegf :=_eceb .Column ,_eceb .RowIdx ,_eceb .SheetName ;_acccc :=args [1].AsNumber ();if _acccc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_geda :=args [2].AsNumber ();if _geda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _dccg ,_gfdbf Result ;if len (args )==3{_dccg =MakeNumberResult (1);_gfdbf =MakeNumberResult (1);}else {_dccg =args [3].AsNumber ();if _dccg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _dccg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_gfdbf =args [4].AsNumber ();if _gfdbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _gfdbf .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_cedgf :=_ga .ColumnToIndex (_ccebg );_dfgae :=_efbb +uint32 (_acccc .ValueNumber );_edadc :=_cedgf +uint32 (_geda .ValueNumber );_abbfa :=_dfgae +uint32 (_dccg .ValueNumber );_aaage :=_edadc +uint32 (_gfdbf .ValueNumber );if _dccg .ValueNumber > 0{_abbfa --;}else {_abbfa ++;_dfgae ,_abbfa =_abbfa ,_dfgae ;};if _gfdbf .ValueNumber > 0{_aaage --;}else {_aaage ++;_edadc ,_aaage =_aaage ,_edadc ;};_gcac :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_ga .IndexToColumn (_edadc ),_dfgae );_bfdab :=_a .Sprintf ("\u0025\u0073\u0025\u0064",_ga .IndexToColumn (_aaage ),_abbfa );if _fbegf ==""{return _egabge (ctx ,ev ,_gcac ,_bfdab );}else {return _egabge (ctx .Sheet (_fbegf ),ev ,_gcac ,_bfdab );};};type cmpResult int8 ;type evCache struct{_edbb map[string ]Result ;_egf *_ec .Mutex ;};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_ccef ,_fedbc :=_eaed (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _fedbc .Type ==ResultTypeError {return _fedbc ;};_afe :=_ccef ._baa ;_eggb :=_ccef ._dcfc ;_edgfd ,_fedbc :=_ffaaa (_ccef ._aadc ,_ccef ._bcae ,_afe ,_eggb );if _fedbc .Type ==ResultTypeError {return _fedbc ;};return MakeNumberResult (_edgfd );};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_bbacd .Lock ();defer _bbacd .Unlock ();if _edbgd ,_cfaae :=_gbafb [name ];_cfaae {return _edbgd ;};return nil ;};type ri struct{_gfda float64 ;_aeed string ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abdd :=args [0].AsString ();if _abdd .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_aebdc :=args [1].AsNumber ();if _aebdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fadg :=_abdd .ValueString ;if len (_fadg )> 2&&(_c .HasPrefix (_fadg ,"\u0030\u0078")||_c .HasPrefix (_fadg ,"\u0030\u0058")){_fadg =_fadg [2:];};_cbafa ,_geagf :=_fe .ParseInt (_fadg ,int (_aebdc .ValueNumber ),64);if _geagf !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_cbafa ));};const _gbfg =187;func (_cbaad *plex )Lex (lval *yySymType )int {_dagg =true ;_fafd :=<-_cbaad ._cbdfg ;if _fafd !=nil {lval ._fdacf =_fafd ;return int (lval ._fdacf ._bfee );};return 0;};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_c .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_ddeac :v };};var _egffc =[...]uint8 {0,17,33,49,63,78,93,108};func _gaeea (_gefea string ,_cbbbe func (_eaaf float64 )float64 )Function {return func (_bfed []Result )Result {if len (_bfed )!=1{return MakeErrorResult (_gefea +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gfge :=_bfed [0].AsNumber ();switch _gfge .Type {case ResultTypeNumber :_fcbdg :=_cbbbe (_gfge .ValueNumber );if _gg .IsNaN (_fcbdg ){return MakeErrorResult (_gefea +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gg .IsInf (_fcbdg ,0){return MakeErrorResult (_gefea +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _fcbdg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_gefea +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_fcbdg );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_gefea +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gfge ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gefea ,_gfge .Type ));};};};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_dfbec :=args [0];if _dfbec .Type ==ResultTypeError {return _dfbec ;};if _dfbec .Type !=ResultTypeString &&_dfbec .Type !=ResultTypeNumber &&_dfbec .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_efcf :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dbad :=int (args [1].ValueNumber );if _dbad < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_feaf :=int (args [2].ValueNumber );if _feaf < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_dbae :=len (_efcf );if _dbad > _dbae {return MakeStringResult ("");};_dbad --;_becdd :=_dbad +_feaf ;if _becdd > _dbae {return MakeStringResult (_efcf [_dbad :]);}else {return MakeStringResult (_efcf [_dbad :_becdd ]);};};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};var _ebbe =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_bfbfce ,_ebbff :=_eefa (args ,false );if _ebbff ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_bfbfce /_ebbff );};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_adea (args ,_fcdg ));};const _ebdd =57377;

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_fcfc ,_fcgbe :=_eeca (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _fcgbe .Type ==ResultTypeError {return _fcgbe ;};_deaa :=_fcfc ._agde ;_ebef :=_fcfc ._ggc ;_cefb :=_fcfc ._afbg ;_dgee :=_fcfc ._bec ;_fdfa :=_fcfc ._bbf ;_agf :=_fcfc ._dacd ;return _dgb (_deaa ,_ebef ,_cefb ,_dgee ,_fdfa ,_agf );};const _cde =86400000000000;

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_daeff :=args [0].AsNumber ();_ebaf :=args [1].AsNumber ();if _daeff .Type !=ResultTypeNumber ||_ebaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _ebaf .ValueNumber < _daeff .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_dacc :=int64 (_daeff .ValueNumber );_fffg :=int64 (_ebaf .ValueNumber );return MakeNumberResult (float64 (_fbcd .Int63n (_fffg -_dacc +1)+_dacc ));};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_acg ,_dggbd :=_eaed (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _dggbd .Type ==ResultTypeError {return _dggbd ;};return MakeNumberResult (_cba (_acg ._aadc ,_acg ._bcae ,_acg ._baa ,_acg ._dcfc ));};func _baefa (_fcfa string )(int ,int ,int ,bool ,Result ){_acfd :="";_abd :=[]string {};for _bebf ,_cggd :=range _cga {_abd =_cggd .FindStringSubmatch (_fcfa );if len (_abd )> 1{_acfd =_bebf ;break ;};};if _acfd ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_ffe :=false ;var _bcfb ,_dec ,_cfbe int ;var _ced error ;switch _acfd {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_dec ,_ced =_fe .Atoi (_abd [1]);if _ced !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_cfbe ,_ced =_fe .Atoi (_abd [3]);if _ced !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_bcfb ,_ced =_fe .Atoi (_abd [5]);if _ced !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};if _bcfb < 0||_bcfb > 9999||(_bcfb > 99&&_bcfb < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_bcfb =_acff (_bcfb );_ffe =_abd [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_dec =_dcd [_abd [1]];_cfbe ,_ced =_fe .Atoi (_abd [14]);if _ced !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_bcfb ,_ced =_fe .Atoi (_abd [16]);if _ced !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};if _bcfb < 0||_bcfb > 9999||(_bcfb > 99&&_bcfb < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_bcfb =_acff (_bcfb );_ffe =_abd [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_cfcg ,_ffaa :=_fe .Atoi (_abd [1]);if _ffaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_ebfc ,_ffaa :=_fe .Atoi (_abd [3]);if _ffaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_gcgg ,_ffaa :=_fe .Atoi (_abd [5]);if _ffaa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};if _cfcg >=1900&&_cfcg < 10000{_bcfb =_cfcg ;_dec =_ebfc ;_cfbe =_gcgg ;}else if _cfcg > 0&&_cfcg < 13{_dec =_cfcg ;_cfbe =_ebfc ;_bcfb =_gcgg ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_ffe =_abd [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_bcfb ,_ced =_fe .Atoi (_abd [16]);if _ced !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_dec =_dcd [_abd [3]];_cfbe ,_ced =_fe .Atoi (_abd [1]);if _ced !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};_ffe =_abd [19]=="";};if !_gcfa (_bcfb ,_dec ,_cfbe ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_gfgc );};return _bcfb ,_dec ,_cfbe ,_ffe ,_efb ;};func _acccg (_bfaa [][]Result ,_fadgb int )[][]Result {_cgbb :=[][]Result {};for _eabbd :=range _bfaa {if _eabbd ==0{continue ;};_dfbfe :=[]Result {};for _ggda :=range _bfaa {if _ggda ==_fadgb {continue ;};_dfbfe =append (_dfbfe ,_bfaa [_eabbd ][_ggda ]);};_cgbb =append (_cgbb ,_dfbfe );};return _cgbb ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_fbeag :e }};func _egec (_gaf float64 )bool {return _gaf ==1||_gaf ==2||_gaf ==4};const _aaege =57366;

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agcd :=args [0].ValueNumber ;_gef :=args [1].ValueNumber ;_ebca :=args [2].ValueNumber ;_fcgab :=_ebaa (_agcd ,_gef ,_ebca );if _fcgab >=0{return MakeNumberResult (_fcgab );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};var _bbacd _ec .Mutex ;func (_ffgcb *noCache )GetFromCache (key string )(Result ,bool ){return _efb ,false };var _bfgg =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_bgge :=args [0].AsNumber ();if _bgge .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_cacef :=int (_bgge .ValueNumber );_eagff :=make ([][]Result ,0,_cacef );for _eegdc :=0;_eegdc < _cacef ;_eegdc ++{_baddc :=make ([]Result ,_cacef );for _cfbfd :=0;_cfbfd < _cacef ;_cfbfd ++{if _eegdc ==_cfbfd {_baddc [_cfbfd ]=MakeNumberResult (1.0);}else {_baddc [_cfbfd ]=MakeNumberResult (0.0);};};_eagff =append (_eagff ,_baddc );};return MakeArrayResult (_eagff );};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_bbacd .Lock ();defer _bbacd .Unlock ();if _ ,_deege :=_bcaf [name ];_deege {_gc .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_bcaf [name ]=fn ;};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};func _efe (_ecec ,_eage _dc .Time ,_edg int )float64 {if _ecec .After (_eage ){_ecec ,_eage =_eage ,_ecec ;};_eaaa :=0;_bfg ,_aba ,_gbaa :=_ecec .Date ();_cbcc ,_ggf ,_bfbf :=_eage .Date ();_cdbe ,_egabg :=int (_aba ),int (_ggf );_add ,_bgb :=_ebfcc (_bfg ,_cdbe ,_gbaa ,_edg ),_ebfcc (_cbcc ,_egabg ,_bfbf ,_edg );if !_fce (_edg ){return _fcg (_cbcc ,_egabg ,_bgb )-_fcg (_bfg ,_cdbe ,_add );};if _edg ==0{if (_cdbe ==2||_add < 30)&&_bfbf ==31{_bgb =31;}else if _egabg ==2&&_bgb ==_defe (_cbcc ,_egabg ){_bgb =_defe (_cbcc ,2);};}else {if _cdbe ==2&&_add ==30{_add =_defe (_bfg ,2);};if _egabg ==2&&_bgb ==30{_bgb =_defe (_cbcc ,2);};};if _bfg < _cbcc ||(_bfg ==_cbcc &&_cdbe < _egabg ){_eaaa =30-_add +1;_gbaa =1;_add =1;_gfe :=_dc .Date (_bfg ,_dc .Month (_cdbe ),_gbaa ,0,0,0,0,_dc .UTC ).AddDate (0,1,0);if _gfe .Year ()< _cbcc {_eaaa +=_gged (_gfe .Year (),int (_gfe .Month ()),12,_edg );_gfe =_gfe .AddDate (0,13-int (_gfe .Month ()),0);_eaaa +=_ecb (_gfe .Year (),_cbcc -1,_edg );};_eaaa +=_gged (_cbcc ,int (_gfe .Month ()),_egabg -1,_edg );_gfe =_gfe .AddDate (0,_egabg -int (_gfe .Month ()),0);_cdbe =_gfe .Day ();};_eaaa +=_bgb -_add ;if _eaaa > 0{return float64 (_eaaa );}else {return 0;};};

// HasFormula returns FALSE for the invalid reference context.
func (_edfgg *ivr )HasFormula (cellRef string )bool {return false };

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_ccgea ,_fcfb ,_bfaca :=_dbac (from ,to );if _bfaca !=nil {_gc .Log .Debug (_bfaca .Error ());return NewError (_bfaca .Error ());};return Range {_dcag :_ccgea ,_fcbbe :_fcfb };};const _gfgc ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_deee :=len (args );if _deee < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_caab :=args [0].ValueNumber ;if _caab ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_abfg :=[]float64 {};for _ ,_baga :=range args [1:]{switch _baga .Type {case ResultTypeNumber :_abfg =append (_abfg ,_baga .ValueNumber );case ResultTypeArray ,ResultTypeList :_aadf :=_bcbd (_baga );for _ ,_gdfb :=range _aadf {for _ ,_dfc :=range _gdfb {if _dfc .Type ==ResultTypeNumber &&!_dfc .IsBoolean {_abfg =append (_abfg ,_dfc .ValueNumber );};};};};};_gfcb :=0.0;for _cdfg ,_gdadg :=range _abfg {_gfcb +=_gdadg /_gg .Pow (1+_caab ,float64 (_cdfg )+1);};return MakeNumberResult (_gfcb );};var _gdb =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_beff :=args [0].AsNumber ();if _beff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_ccdbc :=float64 (1);if _beff .ValueNumber < 0{_ccdbc =-1;};if len (args )> 1{_ccge :=args [1].AsNumber ();if _ccge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccdbc =_ccge .ValueNumber ;};_feca :=float64 (1);if len (args )> 2{_babc :=args [2].AsNumber ();if _babc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_feca =_babc .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gg .Ceil (_beff .ValueNumber ));};_ebcef :=_beff .ValueNumber ;_ebcef ,_bddca :=_gg .Modf (_ebcef /_ccdbc );if _bddca !=0{if _beff .ValueNumber > 0{_ebcef ++;}else if _feca < 0{_ebcef --;};};return MakeNumberResult (_ebcef *_ccdbc );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _dcfdb (args ,_dbfd )};const _gbe ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggba :=0;_dgfb :=false ;for _ ,_cgdg :=range args {switch _cgdg .Type {case ResultTypeList ,ResultTypeArray :_dbbfd :=Xor (_cgdg .ListValues ());if _dbbfd .Type ==ResultTypeError {return _dbbfd ;};if _dbbfd .ValueNumber !=0{_ggba ++;};_dgfb =true ;case ResultTypeNumber :if _cgdg .ValueNumber !=0{_ggba ++;};_dgfb =true ;case ResultTypeString :case ResultTypeError :return _cgdg ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_dgfb {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_ggba %2!=0);};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bag :=args [1].ValueNumber ;_cafb :=args [0];var _bge float64 ;switch _cafb .Type {case ResultTypeEmpty :_bge =0;case ResultTypeNumber :_bge =_cafb .ValueNumber ;case ResultTypeString :_cdd :=DateValue ([]Result {args [0]});if _cdd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_bge =_cdd .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cedc :=_fbec (_bge );_bef :=_cedc .AddDate (0,int (_bag +1),0);_gae ,_ddfb ,_ :=_bef .Date ();_ccb :=_fcg (_gae ,int (_ddfb ),0);if _ccb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _gae ==1900&&_ddfb ==3{_ccb --;};return MakeNumberResult (_ccb );};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_aecd :=len (args );if _aecd < 2||_aecd > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fffc :=args [0];if _fffc .Type !=ResultTypeArray &&_fffc .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gacg :=args [1].AsNumber ();if _gacg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fbgf :=int (_gacg .ValueNumber )-1;_abaa :=-1;if _aecd ==3&&args [2].Type !=ResultTypeEmpty {_bfcfb :=args [2].AsNumber ();if _bfcfb .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_abaa =int (_bfcfb .ValueNumber )-1;};if _fbgf ==-1&&_abaa ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _aegg []Result ;if _fffc .Type ==ResultTypeArray {_ccce :=_fffc .ValueArray ;if _fbgf < -1||_fbgf >=len (_ccce ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _fbgf ==-1{if _abaa >=len (_ccce [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bdbdd :=[][]Result {};for _ ,_fddc :=range _ccce {_ggdb :=_fddc [_abaa ];if _ggdb .Type ==ResultTypeEmpty {_ggdb =MakeNumberResult (0);};_bdbdd =append (_bdbdd ,[]Result {_ggdb });};return MakeArrayResult (_bdbdd );};_aegg =_ccce [_fbgf ];}else {_dagbg :=_fffc .ValueList ;if _fbgf < -1||_fbgf >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _fbgf ==-1{if _abaa >=len (_dagbg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_gcbba :=_dagbg [_abaa ];if _gcbba .Type ==ResultTypeEmpty {_gcbba =MakeNumberResult (0);};return _gcbba ;};_aegg =_dagbg ;};if _abaa < -1||_abaa > len (_aegg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _abaa ==-1{_fdac :=[]Result {};for _ ,_eggcd :=range _aegg {if _eggcd .Type ==ResultTypeEmpty {_fdac =append (_fdac ,MakeNumberResult (0));}else {_fdac =append (_fdac ,_eggcd );};};return MakeArrayResult ([][]Result {_fdac });};_bbab :=_aegg [_abaa ];if _bbab .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bbab ;};

// Update returns the same object as updating sheet references does not affect Error.
func (_eac Error )Update (q *_bf .UpdateQuery )Expression {return _eac };const _aaafd =57359;

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_fabg ,_eebe :=_fe .ParseFloat (v ,64);if _eebe !=nil {_gc .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_eebe );};return Number {_eccfa :_fabg };};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_ccbd :=len (args );if _ccbd !=4&&_ccbd !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_dcbe ,_aab :=_ddfd (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _aab .Type ==ResultTypeError {return _aab ;};_eeg ,_aab :=_ddfd (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _aab .Type ==ResultTypeError {return _aab ;};if _dcbe >=_eeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cefd :=args [2].ValueNumber ;if _cefd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afad :=args [3].ValueNumber ;if _afad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcec :=0;if _ccbd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcec =int (args [4].ValueNumber );if !_addc (_fcec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_bafa ,_aab :=_gbcg (_dcbe ,_eeg ,_fcec );if _aab .Type ==ResultTypeError {return _aab ;};return MakeNumberResult (_afad *_cefd *_bafa );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_fffd ,_baegb :=_cbdab ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _baegb .Type !=ResultTypeEmpty {return _baegb ;};_cdga :=_fffd ._abdc ;_cceec :=_fffd ._efebf ;_dabaf :=_fffd ._aebdd ;_ggea :=_fffd ._bbef ;_cggg :=len (_cdga );if _cceec > _cggg {_cceec =_cggg ;};_ccdde :=_cceec +_dabaf ;if _ccdde > _cggg {_ccdde =_cggg ;};_addac :=_cdga [0:_cceec ]+_ggea +_cdga [_ccdde :];return MakeStringResult (_addac );};

// IsBool returns false for the invalid reference context.
func (_fbde *ivr )IsBool (cellRef string )bool {return false };

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _f .Reader )Expression {_efbe :=&plex {_cbdfg :LexReader (r )};_aaddb (_efbe );if _efbe ._gceg !=""{return nil ;};return _efbe ._bfef ;};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abdbb :=args [0].AsNumber ();if _abdbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _abdbb .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gbac :=float64 (1);_ffega :=_gg .Trunc (_abdbb .ValueNumber );for _ddea :=_ffega ;_ddea > 1;_ddea -=2{_gbac *=_ddea ;};return MakeNumberResult (_gbac );};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ffade :=args [0];_eggbd :=args [1];if _eggbd .Type !=ResultTypeArray &&_eggbd .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_afbef :=_bgda (_eggbd );_aecg :=-1;for _fcea ,_fbegb :=range _afbef {if _abbe (_ffade ,_fbegb ,false ,false )==_eaaaa {_aecg =_fcea ;};};if _aecg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_cae :=_afbef ;if len (args )==3{_cae =_bgda (args [2]);};if _aecg < 0||_aecg >=len (_cae ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _cae [_aecg ];};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_ebab :=len (args );if _ebab !=6&&_ebab !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfa ,_eegc ,_baaf :=_babbe (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _baaf .Type ==ResultTypeError {return _baaf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_effd :=args [2].ValueNumber ;if _effd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_egfe :=args [3].ValueNumber ;if _egfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dagd :=args [4].ValueNumber ;if _dagd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebgg :=args [5];if _ebgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gbfec :=_ebgg .ValueNumber ;if !_egec (_gbfec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_egaf :=0;if _ebab ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egaf =int (args [6].ValueNumber );if !_addc (_egaf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_fbdc ,_baaf :=_ffdb (_bfa ,_eegc ,_effd ,_egfe ,_dagd ,_gbfec ,_egaf );if _baaf .Type ==ResultTypeError {return _baaf ;};return MakeNumberResult (_fbdc );};func _fce (_deae int )bool {return _deae ==0||_deae ==4};type xargs struct{_bceg []float64 ;_gecb []float64 ;};const _dcaad =57367;func init (){_bbaca ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_fbce ,_gdcc :=_eeca (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _gdcc .Type ==ResultTypeError {return _gdcc ;};_bgdgc :=_fbce ._agde ;_afag :=_fbce ._ggc ;_fcbg :=_fbce ._afbg ;_accc :=_fbce ._bec ;_bgbf :=_fbce ._bbf ;_cffa :=_fbce ._dacd ;_befa :=_dgb (_bgdgc ,_afag ,_fcbg ,_accc ,_bgbf ,_cffa );if _befa .Type ==ResultTypeError {return _befa ;};_ggfgc :=_befa .ValueNumber /(1.0+_accc /_bgbf );return MakeNumberResult (_ggfgc );};type countMode byte ;const _dgc ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _gcfa (_aeg ,_dga ,_caa int )bool {if _dga < 1||_dga > 12{return false ;};if _caa < 1{return false ;};return _caa <=_defe (_aeg ,_dga );};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_aacf ,_bgaa :=_eaed (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _bgaa .Type ==ResultTypeError {return _bgaa ;};_cgd :=_fbec (_aacf ._aadc );_dfgd :=_fbec (_aacf ._bcae );_acaf :=_aacf ._baa ;_gdf :=_aacf ._dcfc ;_bgce :=_gegg (_cgd ,_dfgd ,_acaf ,_gdf );_ccgf ,_adda ,_adfb :=_bgce .Date ();return MakeNumberResult (_fcg (_ccgf ,int (_adda ),_adfb ));};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_adbe :=args [0].AsNumber ();if _adbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffge :=args [1].AsNumber ();if _ffge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gadb :=int (_ffge .ValueNumber );if _gadb < 0||_gadb > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_fbgd :=0;if len (args )> 2{_cbea :=args [2].AsNumber ();if _cbea .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbgd =int (_cbea .ValueNumber );};_geceb :=_fe .FormatInt (int64 (_adbe .ValueNumber ),_gadb );if len (_geceb )< _fbgd {_geceb =_c .Repeat ("\u0030",_fbgd -len (_geceb ))+_geceb ;};return MakeStringResult (_geceb );};func _dfde (_dfebf float64 ,_fgbd *criteriaRegex )bool {_bgdb ,_becgc :=_fe .ParseFloat (_fgbd ._feba ,64);if _becgc !=nil {return false ;};switch _fgbd ._acgf {case _bbgf :return _dfebf ==_bgdb ;case _bdaed :return _dfebf <=_bgdb ;case _febd :return _dfebf >=_bgdb ;case _agbac :return _dfebf < _bgdb ;case _feadc :return _dfebf > _bgdb ;};return false ;};const (_bedg rmode =iota ;_dbfd ;_dbed ;);

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_eaegb :=args [0];if _eaegb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_becc :=int (_eaegb .ValueNumber );if _becc < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_becc {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_becc ];};const _gcad =57348;

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cffge :=false ;for _ ,_becde :=range args {switch _becde .Type {case ResultTypeList ,ResultTypeArray :_bbe :=Or (_becde .ListValues ());if _bbe .Type ==ResultTypeError {return _bbe ;};if _bbe .ValueNumber !=0{_cffge =true ;};case ResultTypeNumber :if _becde .ValueNumber !=0{_cffge =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _becde ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_cffge );};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_cbbad ,_cgbf :=_ecgc ("\u0046\u0049\u004e\u0044",args );if _cgbf .Type !=ResultTypeEmpty {return _cgbf ;};_egdda :=_cbbad ._dcca ;if _egdda ==""{return MakeNumberResult (1.0);};_gegc :=_cbbad ._facb ;_aeda :=_cbbad ._fece -1;_bdcc :=1;_ggaac :=0;for _ddecd :=range _gegc {if _ddecd !=0{_dbdad :=1;if _ddecd -_ggaac > 1{_dbdad =2;};_bdcc +=_dbdad ;};if _bdcc > _aeda {_aaef :=_c .Index (_gegc [_ddecd :],_egdda );if _aaef ==0{return MakeNumberResult (float64 (_bdcc ));};};_ggaac =_ddecd ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gcaa ,_bfe ,_cbed :=_babbe (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _cbed .Type ==ResultTypeError {return _cbed ;};_gab ,_cbed :=_ddfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cbed .Type ==ResultTypeError {return _cbed ;};if _gab >=_gcaa {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_adcd :=args [3].ValueNumber ;if _adcd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_egfd :=args [4].ValueNumber ;if _egfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dfgce :=args [5].ValueNumber ;if _dfgce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfdf :=float64 (int (args [6].ValueNumber ));if !_egec (_bfdf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cceba :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cceba =int (args [7].ValueNumber );if !_addc (_cceba ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_cgag ,_cbed :=_gbcg (_gab ,_bfe ,_cceba );if _cbed .Type ==ResultTypeError {return _cbed ;};_cgag *=_bfdf ;_becd ,_cbed :=_gbcg (_gcaa ,_bfe ,_cceba );if _cbed .Type ==ResultTypeError {return _cbed ;};_becd *=_bfdf ;_ceebb ,_cbed :=_gbcg (_gab ,_gcaa ,_cceba );if _cbed .Type ==ResultTypeError {return _cbed ;};_ceebb *=_bfdf ;_ffaf :=_dfgce +_cgag *100*_adcd /_bfdf ;_ffaf /=_egfd +_ceebb *100*_adcd /_bfdf ;_ffaf --;_ffaf *=_bfdf /_becd ;return MakeNumberResult (_ffaf );};func (_effcb *yyParserImpl )Parse (yylex yyLexer )int {_aaed :=_dc .Now ();var _fddfd int ;var _dcaag yySymType ;var _cgbge []yySymType ;_ =_cgbge ;_bgbaa :=_effcb ._gage [:];Nerrs :=0;Errflag :=0;_ebdda :=0;_effcb ._aefc =-1;_afed :=-1;defer func (){_ebdda =-1;_effcb ._aefc =-1;_afed =-1}();_fdafg :=-1;goto _debfg ;_bcgb :return 0;_dgfdd :return 1;_debfg :if _fbcb (_aaed ){_gc .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _dgfdd ;};if _gfdac >=4{_a .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_ecaad (_afed ),_acfdcf (_ebdda ));};_fdafg ++;if _fdafg >=len (_bgbaa ){_cegb :=make ([]yySymType ,len (_bgbaa )*2);copy (_cegb ,_bgbaa );_bgbaa =_cegb ;};_bgbaa [_fdafg ]=_dcaag ;_bgbaa [_fdafg ]._abddg =_ebdda ;_ggfda :if _fbcb (_aaed ){_gc .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _dgfdd ;};_fddfd =_ebbe [_ebdda ];if _fddfd <=_cdbdg {goto _fadgg ;};if _effcb ._aefc < 0{_effcb ._aefc ,_afed =_baaeb (yylex ,&_effcb ._bebba );};_fddfd +=_afed ;if _fddfd < 0||_fddfd >=_gbfg {goto _fadgg ;};_fddfd =_adac [_fddfd ];if _cbeag [_fddfd ]==_afed {_effcb ._aefc =-1;_afed =-1;_dcaag =_effcb ._bebba ;_ebdda =_fddfd ;if Errflag > 0{Errflag --;};goto _debfg ;};_fadgg :if _fbcb (_aaed ){_gc .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _dgfdd ;};_fddfd =_debbd [_ebdda ];if _fddfd ==-2{if _effcb ._aefc < 0{_effcb ._aefc ,_afed =_baaeb (yylex ,&_effcb ._bebba );};_fbffa :=0;for {if _gegag [_fbffa +0]==-1&&_gegag [_fbffa +1]==_ebdda {break ;};_fbffa +=2;};for _fbffa +=2;;_fbffa +=2{_fddfd =_gegag [_fbffa +0];if _fddfd < 0||_fddfd ==_afed {break ;};};_fddfd =_gegag [_fbffa +1];if _fddfd < 0{goto _bcgb ;};};if _fddfd ==0{switch Errflag {case 0:yylex .Error (_agfb (_ebdda ,_afed ));Nerrs ++;if _gfdac >=1{_a .Printf ("\u0025\u0073",_acfdcf (_ebdda ));_a .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_ecaad (_afed ));};fallthrough;case 1,2:Errflag =3;for _fdafg >=0{_fddfd =_ebbe [_bgbaa [_fdafg ]._abddg ]+_bcdcd ;if _fddfd >=0&&_fddfd < _gbfg {_ebdda =_adac [_fddfd ];if _cbeag [_ebdda ]==_bcdcd {goto _debfg ;};};if _gfdac >=2{_a .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_bgbaa [_fdafg ]._abddg );};_fdafg --;};goto _dgfdd ;case 3:if _gfdac >=2{_a .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_ecaad (_afed ));};if _afed ==_fdacc {goto _dgfdd ;};_effcb ._aefc =-1;_afed =-1;goto _ggfda ;};};if _gfdac >=2{_a .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_fddfd ,_acfdcf (_ebdda ));};_ccbfa :=_fddfd ;_feccb :=_fdafg ;_ =_feccb ;_fdafg -=_bfgg [_fddfd ];if _fdafg +1>=len (_bgbaa ){_feebb :=make ([]yySymType ,len (_bgbaa )*2);copy (_feebb ,_bgbaa );_bgbaa =_feebb ;};_dcaag =_bgbaa [_fdafg +1];_fddfd =_ecegf [_fddfd ];_baecb :=_bfeg [_fddfd ];_eeeca :=_baecb +_bgbaa [_fdafg ]._abddg +1;if _eeeca >=_gbfg {_ebdda =_adac [_baecb ];}else {_ebdda =_adac [_eeeca ];if _cbeag [_ebdda ]!=-_fddfd {_ebdda =_adac [_baecb ];};};switch _ccbfa {case 1:_cgbge =_bgbaa [_feccb -1:_feccb +1];{yylex .(*plex )._bfef =_dcaag ._gbde ;};case 3:_cgbge =_bgbaa [_feccb -2:_feccb +1];{_dcaag ._gbde =_cgbge [2]._gbde ;};case 4:_cgbge =_bgbaa [_feccb -4:_feccb +1];{};case 5:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewBool (_cgbge [1]._fdacf ._decfg );};case 6:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewNumber (_cgbge [1]._fdacf ._decfg );};case 7:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewString (_cgbge [1]._fdacf ._decfg );};case 8:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewError (_cgbge [1]._fdacf ._decfg );};case 9:_cgbge =_bgbaa [_feccb -2:_feccb +1];{_dcaag ._gbde =_cgbge [2]._gbde ;};case 10:_cgbge =_bgbaa [_feccb -2:_feccb +1];{_dcaag ._gbde =NewNegate (_cgbge [2]._gbde );};case 15:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =_cgbge [2]._gbde ;};case 17:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewConstArrayExpr (_cgbge [2]._deg );};case 18:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._deg =append (_dcaag ._deg ,_cgbge [1]._cgffe );};case 19:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._deg =append (_cgbge [1]._deg ,_cgbge [3]._cgffe );};case 20:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._cgffe =append (_dcaag ._cgffe ,_cgbge [1]._gbde );};case 21:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._cgffe =append (_cgbge [1]._cgffe ,_cgbge [3]._gbde );};case 23:_cgbge =_bgbaa [_feccb -2:_feccb +1];{_dcaag ._gbde =NewPrefixExpr (_cgbge [1]._gbde ,_cgbge [2]._gbde );};case 25:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewSheetPrefixExpr (_cgbge [1]._fdacf ._decfg );};case 26:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewCellRef (_cgbge [1]._fdacf ._decfg );};case 27:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewRange (_cgbge [1]._gbde ,_cgbge [3]._gbde );};case 28:_cgbge =_bgbaa [_feccb -4:_feccb +1];{_dcaag ._gbde =NewPrefixRangeExpr (_cgbge [1]._gbde ,_cgbge [2]._gbde ,_cgbge [4]._gbde );};case 29:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewNamedRangeRef (_cgbge [1]._fdacf ._decfg );};case 30:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewHorizontalRange (_cgbge [1]._fdacf ._decfg );};case 31:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._gbde =NewVerticalRange (_cgbge [1]._fdacf ._decfg );};case 32:_cgbge =_bgbaa [_feccb -2:_feccb +1];{_dcaag ._gbde =NewPrefixHorizontalRange (_cgbge [1]._gbde ,_cgbge [2]._fdacf ._decfg );};case 33:_cgbge =_bgbaa [_feccb -2:_feccb +1];{_dcaag ._gbde =NewPrefixVerticalRange (_cgbge [1]._gbde ,_cgbge [2]._fdacf ._decfg );};case 34:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypePlus ,_cgbge [3]._gbde );};case 35:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeMinus ,_cgbge [3]._gbde );};case 36:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeMult ,_cgbge [3]._gbde );};case 37:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeDiv ,_cgbge [3]._gbde );};case 38:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeExp ,_cgbge [3]._gbde );};case 39:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeLT ,_cgbge [3]._gbde );};case 40:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeGT ,_cgbge [3]._gbde );};case 41:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeLEQ ,_cgbge [3]._gbde );};case 42:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeGEQ ,_cgbge [3]._gbde );};case 43:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeEQ ,_cgbge [3]._gbde );};case 44:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeNE ,_cgbge [3]._gbde );};case 45:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewBinaryExpr (_cgbge [1]._gbde ,BinOpTypeConcat ,_cgbge [3]._gbde );};case 47:_cgbge =_bgbaa [_feccb -2:_feccb +1];{_dcaag ._gbde =NewFunction (_cgbge [1]._fdacf ._decfg ,nil );};case 48:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._gbde =NewFunction (_cgbge [1]._fdacf ._decfg ,_cgbge [2]._cgffe );};case 49:_cgbge =_bgbaa [_feccb -1:_feccb +1];{_dcaag ._cgffe =append (_dcaag ._cgffe ,_cgbge [1]._gbde );};case 50:_cgbge =_bgbaa [_feccb -3:_feccb +1];{_dcaag ._cgffe =append (_cgbge [1]._cgffe ,_cgbge [3]._gbde );};case 53:_cgbge =_bgbaa [_feccb -0:_feccb +1];{_dcaag ._gbde =NewEmptyExpr ();};};goto _debfg ;};var _gdgdg =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _dcce =57368;func _bffe (_dbebb []Result ,_dcecb bool ,_cbfg string )Result {var _dfgdf ,_baeg string ;if _dcecb {_dfgdf ="\u0074\u0068\u0072e\u0065";_baeg ="\u006f\u0064\u0064";}else {_dfgdf ="\u0074\u0077\u006f";_baeg ="\u0065\u0076\u0065\u006e";};_adegf :=len (_dbebb );if (_dcecb &&_adegf < 3)||(!_dcecb &&_adegf < 2){return MakeErrorResult (_cbfg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_dfgdf +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_adegf /2*2==_adegf )==_dcecb {return MakeErrorResult (_cbfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_baeg +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_ebadb :=-1;_bgagg :=-1;for _beffd :=0;_beffd < _adegf ;_beffd +=2{_fgddd :=_dbebb [_beffd ];if _fgddd .Type !=ResultTypeArray &&_fgddd .Type !=ResultTypeList {return MakeErrorResult (_cbfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_agbg :=_bcbd (_fgddd );if _bgagg ==-1{_bgagg =len (_agbg );_ebadb =len (_agbg [0]);}else if len (_agbg )!=_bgagg ||len (_agbg [0])!=_ebadb {return MakeErrorResult (_cbfg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _dcecb &&_beffd ==0{_beffd --;};};return _efb ;};var _bfbde []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _gbcg (_eeba ,_aggc float64 ,_ebbf int )(float64 ,Result ){_dbc ,_aafb :=_fbec (_eeba ),_fbec (_aggc );_fdad :=_dbc .Unix ();_ccbf :=_aafb .Unix ();if _fdad ==_ccbf {return 0,_efb ;};_gdgd ,_eafg ,_ecee :=_dbc .Date ();_cbf ,_eae ,_eab :=_aafb .Date ();_cffd ,_fede :=int (_eafg ),int (_eae );var _cgac ,_eabc float64 ;switch _ebbf {case 0:if _ecee ==31{_ecee --;};if _ecee ==30&&_eab ==31{_eab --;}else if _efgd :=_cbb (_gdgd );_cffd ==2&&((_efgd &&_ecee ==29)||(!_efgd &&_ecee ==28)){_ecee =30;if _fadb :=_cbb (_cbf );_fede ==2&&((_fadb &&_eab ==29)||(!_fadb &&_eab ==28)){_eab =30;};};_cgac =float64 ((_cbf -_gdgd )*360+(_fede -_cffd )*30+(_eab -_ecee ));_eabc =360;case 1:_cgac =_aggc -_eeba ;_dag :=_gdgd !=_cbf ;if _dag &&(_cbf !=_gdgd +1||_cffd < _fede ||(_cffd ==_fede &&_ecee < _eab )){_gecd :=0;for _dffc :=_gdgd ;_dffc <=_cbf ;_dffc ++{_gecd +=_babb (_dffc ,1);};_eabc =float64 (_gecd )/float64 (_cbf -_gdgd +1);}else {if !_dag &&_cbb (_gdgd ){_eabc =366;}else {if _dag &&((_cbb (_gdgd )&&(_cffd < 2||(_cffd ==2&&_ecee <=29)))||(_cbb (_cbf )&&(_fede > 2||(_fede ==2&&_eab ==29)))){_eabc =366;}else {_eabc =365;};};};case 2:_cgac =_aggc -_eeba ;_eabc =360;case 3:_cgac =_aggc -_eeba ;_eabc =365;case 4:if _ecee ==31{_ecee --;};if _eab ==31{_eab --;};_cgac =float64 ((_cbf -_gdgd )*360+(_fede -_cffd )*30+(_eab -_ecee ));_eabc =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _cgac /_eabc ,_efb ;};func (_adag tokenType )String ()string {return _ecaad (int (_adag ))};

// Reference returns a string reference value to a horizontal range with prefix.
func (_deffb PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_adcdb :=_deffb ._cdea .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_deffb .horizontalRangeReference (_adcdb .Value )};};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_fbab ,_fdce int };

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_gfed :=len (args );if _gfed !=5&&_gfed !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbda ,_cfgg ,_eggg :=_babbe (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _eggg .Type ==ResultTypeError {return _eggg ;};_fgcg ,_eggg :=_ddfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _eggg .Type ==ResultTypeError {return _eggg ;};if _fgcg >=_bbda {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dabd :=args [3].ValueNumber ;if _dabd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bbbd :=args [4].ValueNumber ;if _bbbd <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_eegd :=0;if _gfed ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eegd =int (args [5].ValueNumber );if !_addc (_eegd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_gaaf ,_eggg :=_gbcg (_fgcg ,_cfgg ,_eegd );if _eggg .Type ==ResultTypeError {return _eggg ;};_dage ,_eggg :=_gbcg (_fgcg ,_bbda ,_eegd );if _eggg .Type ==ResultTypeError {return _eggg ;};_gagd ,_eggg :=_gbcg (_bbda ,_cfgg ,_eegd );if _eggg .Type ==ResultTypeError {return _eggg ;};_ccfa :=1+_gaaf *_dabd ;_ccfa /=_bbbd /100+_dage *_dabd ;_ccfa --;_ccfa /=_gagd ;return MakeNumberResult (_ccfa );};

// Eval evaluates and returns a boolean.
func (_ccd Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_ccd ._bde )};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_baca :=args [0].AsNumber ();if _baca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edgb :=float64 (1);_gcgf :=args [1].AsNumber ();if _gcgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_edgb =_gcgf .ValueNumber ;if _edgb < 0&&_baca .ValueNumber > 0||_edgb > 0&&_baca .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_bdgb :=_baca .ValueNumber ;_bdgb ,_gaabg :=_gg .Modf (_bdgb /_edgb );if _gg .Trunc (_gaabg +0.5)> 0{_bdgb ++;};return MakeNumberResult (_bdgb *_edgb );};var _cff float64 =25569.0;const (_eaaaa cmpResult =0;_baec cmpResult =-1;_gcbe cmpResult =1;_eagd cmpResult =2;);func _fbcb (_geaf _dc .Time )bool {return _dc .Now ().Sub (_geaf )>=_bfdfa };

// SetLocked does nothing for the invalid reference context.
func (_adaef *ivr )SetLocked (cellRef string ,locked bool ){};func _cbead (_gcab Result )*criteriaParsed {_ddcee :=_gcab .Type ==ResultTypeNumber ;_ebda :=_gcab .ValueNumber ;_fdba :=_c .ToLower (_gcab .ValueString );_gdcgd :=_afeg (_fdba );return &criteriaParsed {_ddcee ,_ebda ,_fdba ,_gdcgd };};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgdc :=args [0].AsNumber ();if _cgdc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fabb ,_eeddf :=_gg .Modf (_cgdc .ValueNumber );if _eeddf < 0{_fabb --;};return MakeNumberResult (_fabb );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_bcege Expression ;_fgfdbf Expression ;};const _egef =57357;

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggace :=args [0].AsNumber ();if _ggace .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_gg .Pi /180.0*_ggace .ValueNumber );};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_bffa :name ,_dceed :args };};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gagc ,_bbbb ,_fadcg :=_babbe (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _fadcg .Type ==ResultTypeError {return _fadcg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebabd :=_bbbb -_gagc ;if _ebabd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dbf :=args [2].ValueNumber ;if _dbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adeg :=(100-_dbf )/_dbf ;_becg :=360/_ebabd ;return MakeNumberResult (_adeg *_becg );};func _dbab (_ccbcg ,_abeg float64 )float64 {_ccbcg =_gg .Trunc (_ccbcg );_abeg =_gg .Trunc (_abeg );if _ccbcg ==0&&_abeg ==0{return 0;};return _ccbcg *_abeg /_cbcbg (_ccbcg ,_abeg );};func init (){_fbcd =_eb .New (_eb .NewSource (_dc .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_efaa ("\u0041\u0053\u0049\u004e",_gg .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_efaa ("\u0041\u0053\u0049\u004e",_gg .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_efaa ("\u0041\u0053\u0049\u004e",_gg .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_efaa ("\u0041\u0043\u004f\u0054",func (_ecdgd float64 )float64 {return _gg .Pi /2-_gg .Atan (_ecdgd )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_efaa ("\u0041\u0043\u004fT\u0048",func (_gcdgc float64 )float64 {return _gg .Atanh (1/_gcdgc )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_efaa ("\u0041\u0053\u0049\u004e",_gg .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_efaa ("\u0041\u0053\u0049N\u0048",_gg .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_efaa ("\u0041\u0054\u0041\u004e",_gg .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_efaa ("\u0041\u0054\u0041N\u0048",_gg .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_efaa ("\u0043\u004f\u0053",_gg .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_efaa ("\u0043\u004f\u0053\u0048",_gg .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_gaeea ("\u0043\u004f\u0054",_gg .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_gaeea ("\u0043\u004f\u0054\u0048",_gg .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_gaeea ("\u0043\u0053\u0043",_gg .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_gaeea ("\u0043\u0053\u0043",_gg .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_efaa ("\u0045\u0058\u0050",_gg .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_efaa ("\u004c\u004e",_gg .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_efaa ("\u004c\u004f\u00471\u0030",_gg .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_gaeea ("\u0053\u0045\u0043",_gg .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_gaeea ("\u0053\u0045\u0043\u0048",_gg .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_efaa ("\u0053\u0049\u004e",_gg .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_efaa ("\u0053\u0049\u004e\u0048",_gg .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_efaa ("\u0053\u0051\u0052\u0054",_gg .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_efaa ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_aecf float64 )float64 {return _gg .Sqrt (_aecf *_gg .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_efaa ("\u0054\u0041\u004e",_gg .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_efaa ("\u0054\u0041\u004e\u0048",_gg .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const _debc =57365;func (_fecaf node )String ()string {return _a .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_fecaf ._bfee ,_eccfgc (string (_fecaf ._decfg )));};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_dcf string ,_edc Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_gbd string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_dc .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_afa int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_fcdf string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dbef string )string ;

// GetFormat returns if cell is protected.
GetLocked (_dgg string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_gbc string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_edcc string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_ff ,_ae int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_daa string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_ccc string ,_df bool );

// NamedRange returns a named range.
NamedRange (_fbc string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_efdg ,_ebg uint32 );};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_edbaf :=_bffe (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _edbaf .Type !=ResultTypeEmpty {return _edbaf ;};_gedac :=_cbeca (args );return MakeNumberResult (float64 (len (_gedac )));};

// Eval evaluates a range returning a list of results or an error.
func (_ggcg Range )Eval (ctx Context ,ev Evaluator )Result {_agggg :=_ggcg ._dcag .Reference (ctx ,ev );_deed :=_ggcg ._fcbbe .Reference (ctx ,ev );_fgead :=_egecg (_agggg ,_deed );if _agggg .Type ==ReferenceTypeCell &&_deed .Type ==ReferenceTypeCell {if _gdgc ,_cfaf :=ev .GetFromCache (_fgead );_cfaf {return _gdgc ;}else {_acfa :=_egabge (ctx ,ev ,_agggg .Value ,_deed .Value );ev .SetCache (_fgead ,_acfa );return _acfa ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_fgead );};func _bgda (_debb Result )[]Result {_gfde :=_debb .ValueList ;if _debb .Type ==ResultTypeArray {_gfde =nil ;for _ ,_eede :=range _debb .ValueArray {if len (_eede )> 0{_gfde =append (_gfde ,_eede [0]);}else {_gfde =append (_gfde ,_efb );};};};return _gfde ;};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_bffef :=_c .Split (v ,"\u003a");if len (_bffef )!=2{return nil ;};_ecag ,_ :=_fe .Atoi (_bffef [0]);_cbdff ,_ :=_fe .Atoi (_bffef [1]);if _ecag > _cbdff {_ecag ,_cbdff =_cbdff ,_ecag ;};return HorizontalRange {_fbab :_ecag ,_fdce :_cbdff };};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};func _egabge (_fbcdf Context ,_efca Evaluator ,_cggbed ,_afdcd string )Result {_bcdbd ,_aecad :=_ga .ParseCellReference (_cggbed );if _aecad !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_cggbed ,_aecad .Error ()));};_acdf ,_afgcd :=_bcdbd .ColumnIdx ,_bcdbd .RowIdx ;_edgbf ,_dfbag :=_ga .ParseCellReference (_afdcd );if _dfbag !=nil {return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_afdcd ,_dfbag .Error ()));};_eaab ,_dcgc :=_edgbf .ColumnIdx ,_edgbf .RowIdx ;_bdbe :=[][]Result {};for _ebdgdf :=_afgcd ;_ebdgdf <=_dcgc ;_ebdgdf ++{_egdeb :=[]Result {};for _bgdbf :=_acdf ;_bgdbf <=_eaab ;_bgdbf ++{_gccgg :=_fbcdf .Cell (_a .Sprintf ("\u0025\u0073\u0025\u0064",_ga .IndexToColumn (_bgdbf ),_ebdgdf ),_efca );_egdeb =append (_egdeb ,_gccgg );};_bdbe =append (_bdbe ,_egdeb );};if len (_bdbe )==1{if len (_bdbe [0])==1{return _bdbe [0][0];};return MakeListResult (_bdbe [0]);};return MakeArrayResult (_bdbe );};func _gffga (_ecbff []Result )(bool ,Result ){for _ ,_dgca :=range _ecbff {if _dgca .Type ==ResultTypeError {return true ,_dgca ;};};return false ,MakeEmptyResult ();};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dafgd :=args [0].Ref ;if _dafgd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_dafgd .Value ));};func _dgb (_aagd ,_bgae ,_dfa ,_cec ,_efed float64 ,_dgbc int )Result {_abbg ,_gega :=_gbcg (_aagd ,_bgae ,_dgbc );if _gega .Type ==ResultTypeError {return _gega ;};_gefe ,_gcfg :=_ffaaa (_aagd ,_bgae ,int (_efed ),_dgbc );if _gcfg .Type ==ResultTypeError {return _gcfg ;};_ddce :=0.0;_dedfe :=0.0;_dfa *=100/_efed ;_cec /=_efed ;_cec ++;_dffg :=_abbg *_efed -_gefe ;for _fgb :=1.0;_fgb < _gefe ;_fgb ++{_ccee :=_fgb +_dffg ;_fdg :=_dfa /_gg .Pow (_cec ,_ccee );_dedfe +=_fdg ;_ddce +=_ccee *_fdg ;};_baff :=(_dfa +100)/_gg .Pow (_cec ,_gefe +_dffg );_dedfe +=_baff ;_ddce +=(_gefe +_dffg )*_baff ;_ddce /=_dedfe ;_ddce /=_efed ;return MakeNumberResult (_ddce );};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func (_cbae *ivr )Sheet (name string )Context {return _cbae };

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_eagfc ,_ffgb :=_ecgc ("\u0046\u0049\u004e\u0044",args );if _ffgb .Type !=ResultTypeEmpty {return _ffgb ;};_gfbee :=_c .ToLower (_eagfc ._dcca );if _gfbee ==""{return MakeNumberResult (1.0);};_cabc :=_c .ToLower (_eagfc ._facb );_efda :=_eagfc ._fece ;_dbggb :=1;for _bbfc :=range _cabc {if _dbggb < _efda {_dbggb ++;continue ;};_edafc :=_fb .Index (_gfbee ,_cabc [_bbfc :]);if _edafc ==0{return MakeNumberResult (float64 (_dbggb ));};_dbggb ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _dfb (_bfcf string )(int ,int ,float64 ,bool ,bool ,Result ){_abgg :="";_cagb :=[]string {};for _bdff ,_bba :=range _eff {_cagb =_bba .FindStringSubmatch (_bfcf );if len (_cagb )> 1{_abgg =_bdff ;break ;};};if _abgg ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};_aac :=_cagb [1]=="";_cagb =_cagb [49:];_affc :=len (_cagb );_geg :=_cagb [_affc -1];_ddd :=_geg =="\u0061\u006d";_eec :=_geg =="\u0070\u006d";var _gdad ,_bcg int ;var _cbcb float64 ;var _ceac error ;switch _abgg {case "\u0068\u0068":_gdad ,_ceac =_fe .Atoi (_cagb [0]);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};_bcg =0;_cbcb =0;case "\u0068\u0068\u003am\u006d":_gdad ,_ceac =_fe .Atoi (_cagb [0]);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};_bcg ,_ceac =_fe .Atoi (_cagb [2]);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};_cbcb =0;case "\u006d\u006d\u003as\u0073":_gdad =0;_bcg ,_ceac =_fe .Atoi (_cagb [0]);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};_cbcb ,_ceac =_fe .ParseFloat (_cagb [2],64);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_gdad ,_ceac =_fe .Atoi (_cagb [0]);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};_bcg ,_ceac =_fe .Atoi (_cagb [2]);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};_cbcb ,_ceac =_fe .ParseFloat (_cagb [4],64);if _ceac !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};};if _bcg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};if _ddd ||_eec {if _gdad > 12||_cbcb >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );}else if _gdad ==12{_gdad =0;};}else if _gdad >=24||_cbcb >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_egac );};return _gdad ,_bcg ,_cbcb ,_eec ,_aac ,_efb ;};const _caaf =57358;

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_eed :=args [0];switch _eed .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_aeeg :=_fbec (_eed .ValueNumber );return MakeNumberResult (float64 (_aeeg .Day ()));case ResultTypeString :_gec :=_c .ToLower (_eed .ValueString );if !_cdec (_gec ){_ ,_ ,_ ,_ ,_bdf ,_bea :=_dfb (_gec );if _bea .Type ==ResultTypeError {_bea .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _bea ;};if _bdf {return MakeNumberResult (0);};};_ ,_ ,_gbdc ,_ ,_bg :=_baefa (_gec );if _bg .Type ==ResultTypeError {return _bg ;};return MakeNumberResult (float64 (_gbdc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};func _edaf (_ffda ,_dgfd []float64 ,_gedc float64 )float64 {_acba :=_gedc +1;_ebffe :=_ffda [0];_fddeb :=len (_ffda );_eggcb :=_dgfd [0];for _bddcg :=1;_bddcg < _fddeb ;_bddcg ++{_ebffe +=_ffda [_bddcg ]/_gg .Pow (_acba ,(_dgfd [_bddcg ]-_eggcb )/365);};return _ebffe ;};

// Reference returns a string reference value to a horizontal range.
func (_afgb HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_afgb .horizontalRangeReference ()};};func _ecaad (_cdcc int )string {if _cdcc >=1&&_cdcc -1< len (_aaaca ){if _aaaca [_cdcc -1]!=""{return _aaaca [_cdcc -1];};};return _a .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_cdcc );};var _abcg =false ;

// Reference returns a string reference value to a named range.
func (_dggfa NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_dggfa ._fabfg };};

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_dfffa :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfffa =int (args [1].ValueNumber );if _dfffa < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _dfffa ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_bfage :=args [0].Value ();_ccgfa :=len (_bfage );if _dfffa > _ccgfa {return MakeStringResult (_bfage );};return MakeStringResult (_bfage [_ccgfa -_dfffa :_ccgfa ]);};const _caef =57362;

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcdgc :=_fbcc (args );_bc .Float64s (_dcdgc );var _addcc float64 ;if len (_dcdgc )%2==0{_addcc =(_dcdgc [len (_dcdgc )/2-1]+_dcdgc [len (_dcdgc )/2])/2;}else {_addcc =_dcdgc [len (_dcdgc )/2];};return MakeNumberResult (_addcc );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fcbe :=args [0].ValueNumber ;if _fcbe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_geee ,_gfcc :=_aafbb (args [1],args [2],"\u0058\u004e\u0050\u0056");if _gfcc .Type ==ResultTypeError {return _gfcc ;};_aded :=_geee ._bceg ;_afeb :=_geee ._gecb ;_gbgg :=0.0;_cecb :=_afeb [0];for _efad ,_eeeb :=range _aded {_gbgg +=_eeeb /_gg .Pow (1+_fcbe ,(_afeb [_efad ]-_cecb )/365);};return MakeNumberResult (_gbgg );};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_abdec string };func _ggeb (_abbga Result )Result {if _abbga .Type ==ResultTypeEmpty {return _abbga ;};_afdc :=_abbga .AsString ();if _afdc .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _abbga .IsBoolean {if _afdc .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _afdc .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_c .ToLower (_afdc .ValueString ));};};func _gged (_gfa ,_dggb ,_gca ,_cggda int )int {if _dggb > _gca {return 0;};if _fce (_cggda ){return (_gca -_dggb +1)*30;};_dac :=0;for _gea :=_dggb ;_gea <=_gca ;_gea ++{_dac +=_defe (_gfa ,_gea );};return _dac ;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_bcgec []Result )Result ;const _eafda =57376;

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ac ,_fbe Expression ;_da BinOpType ;};

// Update updates references in the Negate after removing a row/column.
func (_edde Negate )Update (q *_bf .UpdateQuery )Expression {return Negate {_fbeag :_edde ._fbeag .Update (q )};};

// Update updates references in the Range after removing a row/column.
func (_ddcag Range )Update (q *_bf .UpdateQuery )Expression {_faeab :=_ddcag ;if q .UpdateCurrentSheet {_faeab ._dcag =_ddcag ._dcag .Update (q );_faeab ._fcbbe =_ddcag ._fcbbe .Update (q );};return _faeab ;};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_egdb :=args [0].AsString ();if _egdb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_gfgf :=_e .Buffer {};_bbaf :=false ;for _ ,_geef :=range _egdb .ValueString {if !_bbaf &&_bd .IsLetter (_geef ){_gfgf .WriteRune (_bd .ToUpper (_geef ));}else {_gfgf .WriteRune (_bd .ToLower (_geef ));};_bbaf =_bd .IsLetter (_geef );};return MakeStringResult (_gfgf .String ());};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcef :=args [0].AsNumber ();_addf :=args [1].AsNumber ();if _bcef .Type !=ResultTypeNumber ||_addf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fdfac :=_gg .Trunc (_bcef .ValueNumber );_dcdd :=_gg .Trunc (_addf .ValueNumber );if _fdfac < _dcdd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _fdfac ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_fdfac +_dcdd -1);args [1]=MakeNumberResult (_fdfac -1);return Combin (args );};

// String returns a string representation of FunctionCall expression.
func (_cgaabd FunctionCall )String ()string {_eccfg :=_e .Buffer {};_eccfg .WriteString (_cgaabd ._bffa );_eccfg .WriteString ("\u0028");_daab :=len (_cgaabd ._dceed )-1;for _ggbcc ,_babeg :=range _cgaabd ._dceed {_eccfg .WriteString (_babeg .String ());if _ggbcc !=_daab {_eccfg .WriteString ("\u002c");};};_eccfg .WriteString ("\u0029");return _eccfg .String ();};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgga ,_bgfc ,_ccggg :=_babbe (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _ccggg .Type ==ResultTypeError {return _ccggg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgee :=_bgfc -_cgga ;if _cgee > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_agcdg :=args [2].ValueNumber ;if _agcdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_agcdg )/(360-_agcdg *_cgee ));};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_fabfg :v }};func _aaddb (_fbcae yyLexer )int {return _egad ().Parse (_fbcae )};const _ded ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";const _cdffg =57378;

// Reference returns a string reference value to a cell.
func (_geb CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_geb ._ebc };};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_dedd :=_bffe (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _dedd .Type !=ResultTypeEmpty {return _dedd ;};_cfcf :=_cbeca (args [1:]);_ccbdb :=_gg .MaxFloat64 ;_acbf :=_bcbd (args [0]);for _ ,_ffcc :=range _cfcf {_bcgg :=_acbf [_ffcc ._gddb ][_ffcc ._gbebg ].ValueNumber ;if _ccbdb > _bcgg {_ccbdb =_bcgg ;};};if _ccbdb ==_gg .MaxFloat64 {_ccbdb =0;};return MakeNumberResult (float64 (_ccbdb ));};func _cafbg (_fbea []Result )Result {_bbdb :=_fbea [0].ValueArray ;if len (_fbea )==1{_eacga :=[][]Result {};for _ ,_ceag :=range _bbdb {_eacga =append (_eacga ,_dccb ([]Result {MakeListResult (_ceag )}).ValueList );};return MakeArrayResult (_eacga );}else if len (_fbea )==2{_dafa :=len (_bbdb );_acgd :=len (_bbdb [0]);_eagf :=_fggde (_fbea [1],_dafa ,_acgd );_fcde :=len (_eagf );_gfgce :=[][]Result {};var _cbfda []Result ;for _fcff ,_adcbc :=range _bbdb {if _fcff < _fcde {_cbfda =_eagf [_fcff ];}else {_cbfda =_dbba (MakeErrorResultType (ErrorTypeNA ,""),_acgd );};_gfgce =append (_gfgce ,_dccb ([]Result {MakeListResult (_adcbc ),MakeListResult (_cbfda )}).ValueList );};return MakeArrayResult (_gfgce );}else if len (_fbea )==3{_fegfe :=len (_bbdb );_bdada :=len (_bbdb [0]);_abbc :=_fggde (_fbea [1],_fegfe ,_bdada );_dfge :=_fggde (_fbea [2],_fegfe ,_bdada );_ccdb :=len (_abbc );_fccb :=len (_dfge );_gcfd :=[][]Result {};var _eedef ,_ccfc []Result ;for _aegd ,_bbdf :=range _bbdb {if _aegd < _ccdb {_eedef =_abbc [_aegd ];}else {_eedef =_dbba (MakeErrorResultType (ErrorTypeNA ,""),_bdada );};if _aegd < _fccb {_ccfc =_dfge [_aegd ];}else {_ccfc =_dbba (MakeErrorResultType (ErrorTypeNA ,""),_bdada );};_gcfd =append (_gcfd ,_dccb ([]Result {MakeListResult (_bbdf ),MakeListResult (_eedef ),MakeListResult (_ccfc )}).ValueList );};return MakeArrayResult (_gcfd );};return MakeErrorResultType (ErrorTypeValue ,"");};const _dgcaa =57350;

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_bfbe :=args [0].AsNumber ();if _bfbe .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _bfbe .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_baadf (_bfbe .ValueNumber ));};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afddd :=args [0].AsString ();if _afddd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_afddd .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_afddd .ValueString [0]));};const _bcbdb =57375;func (_dfcbe ReferenceType )String ()string {if _dfcbe >=ReferenceType (len (_acefa )-1){return _a .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_dfcbe );};return _cbbf [_acefa [_dfcbe ]:_acefa [_dfcbe +1]];};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_af [][]Expression };

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_fcfd :=_e .Buffer {};for _ ,_ggag :=range args {switch _ggag .Type {case ResultTypeString :_fcfd .WriteString (_ggag .ValueString );case ResultTypeNumber :var _dbcf string ;if _ggag .IsBoolean {if _ggag .ValueNumber ==0{_dbcf ="\u0046\u0041\u004cS\u0045";}else {_dbcf ="\u0054\u0052\u0055\u0045";};}else {_dbcf =_ggag .AsString ().ValueString ;};_fcfd .WriteString (_dbcf );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_fcfd .String ());};

// Eval evaluates and returns a number.
func (_ggdd Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_ggdd ._eccfa )};

// Update updates references in the BinaryExpr after removing a row/column.
func (_cb BinaryExpr )Update (q *_bf .UpdateQuery )Expression {_fag :=_cb ;_fag ._ac =_cb ._ac .Update (q );_fag ._fbe =_cb ._fbe .Update (q );return _fag ;};

// Eval evaluates and returns the result of a formula.
func (_egg *defEval )Eval (ctx Context ,formula string )Result {_gccg :=ParseString (formula );_fedb :=make (chan Result );go func (){if _gccg ==nil {_fedb <-MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_egg .checkLastEvalIsRef (ctx ,_gccg );_fedb <-_gccg .Eval (ctx ,_egg );};}();select{case _dbgg :=<-_fedb :return _dbgg ;case <-_dc .After (_dae ):_gc .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};const _gdee =57355;

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_fggd :=args [0];if _fggd .Type !=ResultTypeArray &&_fggd .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aafg :=_fggd .ValueArray ;if len (_aafg )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_aafg [0])));};func init (){_dadf ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};const _fabc int =30;

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_dbd Context ,formula string )Result ;SetCache (_fff string ,_gfdd Result );GetFromCache (_bda string )(Result ,bool );LastEvalIsRef ()bool ;};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_gadfc PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_baffga :=_gadfc ._eeae .Reference (ctx ,ev );switch _baffga .Type {case ReferenceTypeSheet :if _ddab (_baffga ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_baffga .Value ));};_cbbab :=_gadfc .verticalRangeReference (_baffga .Value );if _dadae ,_gfdce :=ev .GetFromCache (_cbbab );_gfdce {return _dadae ;};_beedc :=ctx .Sheet (_baffga .Value );_bcgfd ,_caaff :=_eacfd (_beedc ,_gadfc ._eaegf ,_gadfc ._cbafg );_fgae :=_egabge (_beedc ,ev ,_bcgfd ,_caaff );ev .SetCache (_cbbab ,_fgae );return _fgae ;default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_baffga .Type ));};};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ddfe :=args [0].AsString ();if _ddfe .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_geage :=args [1].AsNumber ();if _geage .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _geage .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _geage .ValueNumber ==0{return MakeStringResult ("");};_caee :=_e .Buffer {};for _eedb :=0;_eedb < int (_geage .ValueNumber );_eedb ++{_caee .WriteString (_ddfe .ValueString );};return MakeStringResult (_caee .String ());};const _ageeed =57352;

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_cgb ConstArrayExpr )Update (q *_bf .UpdateQuery )Expression {return _cgb };

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_dbeb :=MakeNumberResult (0);for _ ,_ccab :=range args {_ccab =_ccab .AsNumber ();switch _ccab .Type {case ResultTypeNumber :_dbeb .ValueNumber +=_ccab .ValueNumber *_ccab .ValueNumber ;case ResultTypeList ,ResultTypeArray :_efeb :=SumSquares (_ccab .ListValues ());if _efeb .Type !=ResultTypeNumber {return _efeb ;};_dbeb .ValueNumber +=_efeb .ValueNumber ;case ResultTypeString :case ResultTypeError :return _ccab ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_ccab .Type ));};};return _dbeb ;};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_ebfef PrefixHorizontalRange )Update (q *_bf .UpdateQuery )Expression {return _ebfef };var _fcad =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };func _eccfgc (_fccg string )string {_fccg =_c .Replace (_fccg ,"\u000a","\u005c\u006e",-1);_fccg =_c .Replace (_fccg ,"\u000d","\u005c\u0072",-1);_fccg =_c .Replace (_fccg ,"\u0009","\u005c\u0074",-1);return _fccg ;};

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_eafdag chan *node ;_bagcg _ec .Mutex ;_bbce []chan *node ;_dcbge []*node ;};const _fdeg =57363;func _baaeb (_bbbad yyLexer ,_daga *yySymType )(_bccg ,_eeff int ){_eeff =0;_bccg =_bbbad .Lex (_daga );if _bccg <=0{_eeff =_ggg [0];goto _gbeea ;};if _bccg < len (_ggg ){_eeff =_ggg [_bccg ];goto _gbeea ;};if _bccg >=_dcaac {if _bccg < _dcaac +len (_bfcfc ){_eeff =_bfcfc [_bccg -_dcaac ];goto _gbeea ;};};for _dgeef :=0;_dgeef < len (_bedec );_dgeef +=2{_eeff =_bedec [_dgeef +0];if _eeff ==_bccg {_eeff =_bedec [_dgeef +1];goto _gbeea ;};};_gbeea :if _eeff ==0{_eeff =_bfcfc [1];};if _gfdac >=3{_a .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_ecaad (_eeff ),uint (_bccg ));};return _bccg ,_eeff ;};const _gabb =57356;

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_gg .Pi );};const _ebfe =57361;const _deca =57353;const _egac ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";const _caabg =57360;func (_ebcb *ivr )SetOffset (col ,row uint32 ){};const _cbbf ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";var _fbcd *_eb .Rand ;func _cba (_fgf ,_gcgd float64 ,_aec ,_ggbc int )float64 {_fga :=_fbec (_fgf );_cedg :=_fbec (_gcgd );if _ggbc ==1{_cbfd :=_gegg (_fga ,_cedg ,_aec ,1);_fgdc :=_cbfd .AddDate (0,12/_aec ,0);return _efe (_cbfd ,_fgdc ,_ggbc );};return float64 (_babb (0,_ggbc ))/float64 (_aec );};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgea :=args [0].AsNumber ();_dcaf :=args [1].AsNumber ();_acaff :=args [2].AsNumber ();_bgfd :=args [3].ListValues ();if _bgea .Type !=ResultTypeNumber ||_dcaf .Type !=ResultTypeNumber ||_acaff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_acef :=float64 (0);for _efdgg ,_dfcb :=range _bgfd {_acef +=_dfcb .ValueNumber *_gg .Pow (_bgea .ValueNumber ,_dcaf .ValueNumber +float64 (_efdgg )*_acaff .ValueNumber );};return MakeNumberResult (_acef );};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_bdda :=len (args );if _bdda < 3||_bdda > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aadbc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbec :=args [1].ValueNumber ;if _dbec ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ccdd :=args [2].ValueNumber ;_gedf :=0.0;if _bdda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gedf =args [3].ValueNumber ;};_dadb :=0.0;if _bdda ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dadb =args [4].ValueNumber ;if _dadb !=0{_dadb =1;};};var _afgd float64 ;if _aadbc ==0{_afgd =(_ccdd +_gedf )/_dbec ;}else {_fegg :=_gg .Pow (1+_aadbc ,_dbec );if _dadb ==1{_afgd =(_gedf *_aadbc /(_fegg -1)+_ccdd *_aadbc /(1-1/_fegg ))/(1+_aadbc );}else {_afgd =_gedf *_aadbc /(_fegg -1)+_ccdd *_aadbc /(1-1/_fegg );};};return MakeNumberResult (-_afgd );};

// Update updates references in the PrefixExpr after removing a row/column.
func (_gcdef PrefixExpr )Update (q *_bf .UpdateQuery )Expression {_becfb :=_gcdef ;_dgbg :=_gcdef ._bcege .String ();if _dgbg ==q .SheetToUpdate {_eebcd :=*q ;_eebcd .UpdateCurrentSheet =true ;_becfb ._fgfdbf =_gcdef ._fgfdbf .Update (&_eebcd );};return _becfb ;};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_dcg :v }};func (_deaga *yyParserImpl )Lookahead ()int {return _deaga ._aefc };func (_ebdbf VerticalRange )verticalRangeReference ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_ebdbf ._decad ,_ebdbf ._dfceg );};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_efcc ,_dgge :=_gad (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dgge .Type ==ResultTypeError {return _dgge ;};_dbdg :=_efcc ._fgg ;_ebcg :=_efcc ._cgaa ;_cbac :=_efcc ._cbeb ;_adbc :=_efcc ._baffg ;_egb :=_efcc ._bcec ;_bdeg :=_efcc ._fagb ;_ggaa :=_efcc ._fcc ;_aaaf ,_fcecg :=_gbcg (_ebcg ,_cbac ,_ggaa );if _fcecg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_dgcc :=_aaaf *_bdeg *_dbdg ;if _egb ==0{return MakeNumberResult (_dgcc );};_eaee :=_dbdg *_bdeg ;_bbc :=_dbdg -_adbc ;_edbg :=int ((_bbc -_dgcc )/_eaee );if _egb <=_edbg {return MakeNumberResult (_eaee );}else if _egb ==_edbg +1{return MakeNumberResult (_bbc -_eaee *float64 (_edbg )-_dgcc );}else {return MakeNumberResult (0);};};const _acbd =57346;

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddda :=args [0];switch _ddda .Type {case ResultTypeError :return _ddda ;case ResultTypeNumber ,ResultTypeString :return _ggeb (args [0]);case ResultTypeList :_gdeaf :=_ddda .ValueList ;_eeag :=[]Result {};for _ ,_gdae :=range _gdeaf {_gdcb :=_ggeb (_gdae );if _gdcb .Type ==ResultTypeError {return _gdcb ;};_eeag =append (_eeag ,_gdcb );};return MakeListResult (_eeag );case ResultTypeArray :_baac :=_ddda .ValueArray ;_agfac :=[][]Result {};for _ ,_gddgb :=range _baac {_acgfb :=[]Result {};for _ ,_ageee :=range _gddgb {_ffaca :=_ggeb (_ageee );if _ffaca .Type ==ResultTypeError {return _ffaca ;};_acgfb =append (_acgfb ,_ffaca );};_agfac =append (_agfac ,_acgfb );};return MakeArrayResult (_agfac );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};func _bege (_abgc Result )bool {_cafc :=_abgc .Type ;return _cafc !=ResultTypeArray &&_cafc !=ResultTypeList ;};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _gaccc (args ,false )};const _ebd ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_gafd PrefixRangeExpr )Update (q *_bf .UpdateQuery )Expression {_deaeg :=_gafd ;_cgdab :=_gafd ._bgbgc .String ();if _cgdab ==q .SheetToUpdate {_fgfe :=*q ;_fgfe .UpdateCurrentSheet =true ;_deaeg ._gggb =_gafd ._gggb .Update (&_fgfe );_deaeg ._fdfda =_gafd ._fdfda .Update (&_fgfe );};return _deaeg ;};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);

// String returns a string representation of SheetPrefixExpr.
func (_caceb SheetPrefixExpr )String ()string {return _caceb ._abdec };

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_bbacd .Lock ();defer _bbacd .Unlock ();if _ ,_fdgf :=_gbafb [name ];_fdgf {_gc .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_gbafb [name ]=fn ;};var InvalidReferenceContext =&ivr {};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_cefgf ,_addde ,_geafa :=_dbac (from ,to );if _geafa !=nil {_gc .Log .Debug (_geafa .Error ());return NewError (_geafa .Error ());};return PrefixRangeExpr {_bgbgc :pfx ,_gggb :_cefgf ,_fdfda :_addde };};func _aafbb (_ceebd ,_acga Result ,_dada string )(*xargs ,Result ){if _ceebd .Type !=ResultTypeList &&_ceebd .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dada +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_ecge :=_bcbd (_ceebd );_becdf :=[]float64 {};for _ ,_ffaae :=range _ecge {for _ ,_gadf :=range _ffaae {if _gadf .Type ==ResultTypeNumber &&!_gadf .IsBoolean {_becdf =append (_becdf ,_gadf .ValueNumber );}else {return nil ,MakeErrorResult (_dada +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_acfb :=len (_becdf );if len (_becdf )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _acga .Type !=ResultTypeList &&_acga .Type !=ResultTypeArray {return nil ,MakeErrorResult (_dada +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bdfb :=_bcbd (_acga );_agca :=[]float64 {};_ecdg :=0.0;for _ ,_fgaa :=range _bdfb {for _ ,_cced :=range _fgaa {if _cced .Type ==ResultTypeNumber &&!_cced .IsBoolean {_gaae :=float64 (int (_cced .ValueNumber ));if _gaae < _ecdg {return nil ,MakeErrorResultType (ErrorTypeNum ,_dada +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_agca =append (_agca ,_gaae );_ecdg =_gaae ;}else {return nil ,MakeErrorResult (_dada +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_agca )!=_acfb {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_becdf ,_agca },MakeEmptyResult ();};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_fecg :=len (args );if _fecg !=4&&_fecg !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdb ,_aegb ,_gecf :=_babbe (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _gecf .Type ==ResultTypeError {return _gecf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdfff :=args [2].ValueNumber ;if _fdfff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_eaeda :=args [3].ValueNumber ;if _eaeda <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_aebc :=0;if _fecg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aebc =int (args [4].ValueNumber );if !_addc (_aebc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_cacd ,_gecf :=_gbcg (_bdb ,_aegb ,_aebc );if _gecf .Type ==ResultTypeError {return _gecf ;};return MakeNumberResult (_eaeda *(1-_fdfff *_cacd ));};func _fbec (_ffa float64 )_dc .Time {_aag :=int64 ((_ffa -_cff )*_cde );return _dc .Unix (0,_aag ).UTC ();};func _de (_dcb BinOpType ,_be ,_gda [][]Result )Result {_fcd :=[][]Result {};for _ea :=range _be {_fg :=_adg (_dcb ,_be [_ea ],_gda [_ea ]);if _fg .Type ==ResultTypeError {return _fg ;};_fcd =append (_fcd ,_fg .ValueList );};return MakeArrayResult (_fcd );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebgef :=args [0].AsNumber ();if _ebgef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abef :=float64 (0);if len (args )> 1{_ebgeb :=args [1].AsNumber ();if _ebgeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abef =_ebgeb .ValueNumber ;};_gddga :=_ebgef .ValueNumber ;_gbga :=1.0;if _abef >=0{_gbga =_gg .Pow (1/10.0,_abef );}else {return MakeNumberResult (0);};_gddga ,_ecca :=_gg .Modf (_gddga /_gbga );_gebgf :=0.99999;if _ecca > _gebgf {_gddga ++;}else if _ecca < -_gebgf {_gddga --;};_ =_ecca ;return MakeNumberResult (_gddga *_gbga );};

// LastRow returns 0 for the invalid reference context.
func (_ecgg *ivr )LastRow (colFrom string )int {return 0};const _cea ="\u005e\u0028\u0028"+_ebd +"\u007c"+_fadc +"\u007c"+_acee +"\u007c"+_aef +"\u0029\u0020\u0029\u003f";

// Eval evaluates and returns the result of an empty expression.
func (_baee EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// LastColumn returns empty string for the invalid reference context.
func (_dacdd *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_fbbf :=len (args );if _fbbf !=4&&_fbbf !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_adeb ,_dffbe ,_cfge :=_babbe (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _cfge .Type ==ResultTypeError {return _cfge ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dacb :=args [2].ValueNumber ;if _dacb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fggf :=args [3].ValueNumber ;if _fggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deag :=0;if _fbbf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deag =int (args [4].ValueNumber );if !_addc (_deag ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_gacc ,_cfge :=_gbcg (_adeb ,_dffbe ,_deag );if _cfge .Type ==ResultTypeError {return _cfge ;};return MakeNumberResult (_dacb /(1-_fggf *_gacc ));};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dagc :=args [0].AsString ();if _dagc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_fagf :="\u0041\u0031";if len (args )==2{_fced :=args [1].Ref ;if _fced .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_fagf =_fced .Value ;};switch _dagc .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_eagg ,_bgedg :=_ga .ParseCellReference (_fagf );if _bgedg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fagf );};_dabdc :="\u0024"+_eagg .Column +"\u0024"+_fe .Itoa (int (_eagg .RowIdx ));if _eagg .SheetName !=""{_dabdc =_eagg .SheetName +"\u0021"+_dabdc ;};return MakeStringResult (_dabdc );case "\u0063\u006f\u006c":_bbcaa ,_dded :=_ga .ParseCellReference (_fagf );if _dded !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fagf );};return MakeNumberResult (float64 (_bbcaa .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_dgac :=_c .Contains (ctx .GetFormat (_fagf ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_dgac );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bcegd :="\u0047";_efcgg :=ctx .GetFormat (_fagf );if _efcgg =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_bcecc .MatchString (_efcgg ){_bcegd ="\u0046\u0030";}else if _efcgg =="\u0030\u0025"{_bcegd ="\u0050\u0030";}else if _efcgg =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bcegd ="\u0044\u0032";}else if _efcgg =="\u004d\u004d\u002fY\u0059"{_bcegd ="\u0044\u0033";}else if _efcgg =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_efcgg =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bcegd ="\u0044\u0034";}else if _efcgg =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bcegd ="\u0044\u0035";}else if _efcgg =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bcegd ="\u0044\u0036";}else if _efcgg =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bcegd ="\u0044\u0037";}else if _efcgg =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bcegd ="\u0044\u0038";}else if _efcgg =="\u0048\u0048\u003aM\u004d"{_bcegd ="\u0044\u0039";}else if _faed .MatchString (_efcgg ){_bcegd ="\u002e\u0030";}else if _eaeb .MatchString (_efcgg ){_bcegd ="\u002e\u0030\u0028\u0029";}else if _fcgg .MatchString (_efcgg ){_bcegd ="\u0043\u0030";}else if _agfaa .MatchString (_efcgg )||_cgf .MatchString (_efcgg ){_bcegd ="\u0044\u0031";}else if _bbge :=_dcef .FindStringSubmatch (_efcgg );len (_bbge )> 1{_bcegd ="\u0046"+_fe .Itoa (len (_bbge [1]));}else if _effe :=_bfceg .FindStringSubmatch (_efcgg );len (_effe )> 1{_bcegd ="\u002e"+_fe .Itoa (len (_effe [2]));}else if _eaae :=_ffbg .FindStringSubmatch (_efcgg );len (_eaae )> 1{_bcegd ="\u0050"+_fe .Itoa (len (_eaae [2]));}else if _aage :=_febg .FindStringSubmatch (_efcgg );len (_aage )> 1{_bcegd ="\u0043"+_eacd (_aage ,1);}else if _fbdab :=_ffbgb .FindStringSubmatch (_efcgg );len (_fbdab )> 1{_bcegd ="\u0043"+_eacd (_fbdab ,1);}else if _dfae :=_fadce .FindStringSubmatch (_efcgg );len (_dfae )> 1{_bcegd ="\u002e"+_eacd (_dfae ,1)+"\u0028\u0029";}else if _cgdac :=_dfca .FindStringSubmatch (_efcgg );len (_cgdac )> 1{_bcegd ="\u002e"+_eacd (_cgdac ,1);}else if _abfb :=_gecdb .FindStringSubmatch (_efcgg );len (_abfb )> 1{_bcegd ="\u0053"+_eacd (_abfb ,3);};if _bcegd !="\u0047"&&_c .Contains (_efcgg ,"\u005b\u0052\u0045D\u005d"){_bcegd +="\u002d";};return MakeStringResult (_bcegd );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_aecbd :=ctx .GetFormat (_fagf );if _ecac .MatchString (_aecbd ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_fagf ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_bacg :=0.0;if ctx .GetLocked (_fagf ){_bacg =1.0;};return MakeNumberResult (_bacg );case "\u0072\u006f\u0077":_ggcd ,_faaf :=_ga .ParseCellReference (_fagf );if _faaf !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fagf );};return MakeNumberResult (float64 (_ggcd .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_cefaa ,_cbge :=_ga .ParseCellReference (_fagf );if _cbge !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fagf );};if _cefaa .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_cefaa .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_cefaa .SheetName ).GetWidth (int (_cefaa .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_dagc .ValueString );};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_affa :=args [0].AsNumber ();if _affa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eefcd :=int (_affa .ValueNumber );if _eefcd < 0||_eefcd > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_a .Sprintf ("\u0025\u0063",_eefcd ));};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgcb :=args [0].AsString ();if _bgcb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_c .ToUpper (_bgcb .ValueString ));};func _eacfd (_abfgc Context ,_bagb ,_eabcc string )(string ,string ){_cgbege :=_bagb +"\u0031";_ggagb :=_abfgc .LastRow (_bagb );_cbdc :=_eabcc +_fe .Itoa (_ggagb );return _cgbege ,_cbdc ;};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_af :data }};

// Eval evaluates and returns a string.
func (_cgbcd String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_cgbcd ._ddeac )};

// GetEpoch returns a null time object for the invalid reference context.
func (_efgfd *ivr )GetEpoch ()_dc .Time {return _dc .Time {}};const _bbde =57364;type tokenType int ;func _gb (_ed BinOpType ,_gcd []Result ,_dbg Result )Result {_acd :=[]Result {};switch _dbg .Type {case ResultTypeNumber :_gdag :=_dbg .ValueNumber ;for _cfa :=range _gcd {_cdcd :=_gcd [_cfa ].AsNumber ();if _cdcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ed {case BinOpTypePlus :_acd =append (_acd ,MakeNumberResult (_cdcd .ValueNumber +_gdag ));case BinOpTypeMinus :_acd =append (_acd ,MakeNumberResult (_cdcd .ValueNumber -_gdag ));case BinOpTypeMult :_acd =append (_acd ,MakeNumberResult (_cdcd .ValueNumber *_gdag ));case BinOpTypeDiv :if _gdag ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_acd =append (_acd ,MakeNumberResult (_cdcd .ValueNumber /_gdag ));case BinOpTypeExp :_acd =append (_acd ,MakeNumberResult (_gg .Pow (_cdcd .ValueNumber ,_gdag )));case BinOpTypeLT :_acd =append (_acd ,MakeBoolResult (_cdcd .ValueNumber < _gdag ));case BinOpTypeGT :_acd =append (_acd ,MakeBoolResult (_cdcd .ValueNumber > _gdag ));case BinOpTypeEQ :_acd =append (_acd ,MakeBoolResult (_cdcd .ValueNumber ==_gdag ));case BinOpTypeLEQ :_acd =append (_acd ,MakeBoolResult (_cdcd .ValueNumber <=_gdag ));case BinOpTypeGEQ :_acd =append (_acd ,MakeBoolResult (_cdcd .ValueNumber >=_gdag ));case BinOpTypeNE :_acd =append (_acd ,MakeBoolResult (_cdcd .ValueNumber !=_gdag ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ed ));};};case ResultTypeString :_cfe :=_dbg .ValueString ;for _ab :=range _gcd {_ca :=_gcd [_ab ].AsString ();if _ca .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ed {case BinOpTypeLT :_acd =append (_acd ,MakeBoolResult (_ca .ValueString < _cfe ));case BinOpTypeGT :_acd =append (_acd ,MakeBoolResult (_ca .ValueString > _cfe ));case BinOpTypeEQ :_acd =append (_acd ,MakeBoolResult (_ca .ValueString ==_cfe ));case BinOpTypeLEQ :_acd =append (_acd ,MakeBoolResult (_ca .ValueString <=_cfe ));case BinOpTypeGEQ :_acd =append (_acd ,MakeBoolResult (_ca .ValueString >=_cfe ));case BinOpTypeNE :_acd =append (_acd ,MakeBoolResult (_ca .ValueString !=_cfe ));default:return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ed ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_acd );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_dedg :=len (args );if _dedg < 3||_dedg > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gdca :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gdaf :=args [1].ValueNumber ;if _gdaf !=float64 (int (_gdaf )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdde :=args [2].ValueNumber ;_aed :=0.0;if _dedg >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aed =args [3].ValueNumber ;};_cbag :=0;if _dedg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbag =int (args [4].ValueNumber );if _cbag !=0{_cbag =1;};};return MakeNumberResult (_gcef (_gdca ,_gdaf ,_fdde ,_aed ,_cbag ));};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_fgfb HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gfcd :=_fgfb .horizontalRangeReference ();if _gbebf ,_dbebd :=ev .GetFromCache (_gfcd );_dbebd {return _gbebf ;};_faeed ,_bbdbg :=_ecagb (ctx ,_fgfb ._fbab ,_fgfb ._fdce );_gbge :=_egabge (ctx ,ev ,_faeed ,_bbdbg );ev .SetCache (_gfcd ,_gbge );return _gbge ;};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_dedfc :=len (args );if _dedfc !=6&&_dedfc !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eafa ,_cgbcg ,_bgdgg :=_babbe (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bgdgg .Type ==ResultTypeError {return _bgdgg ;};_adegd :=args [2];if _adegd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdda :=_adegd .ValueNumber ;if _gdda < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_gbca :=args [3];if _gbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aede :=_gbca .ValueNumber ;if _aede <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_dcfa :=args [4];if _dcfa .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ggac :=_dcfa .ValueNumber ;if _ggac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gdde :=args [5];if _gdde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dbgdf :=float64 (int (_gdde .ValueNumber ));if !_egec (_dbgdf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_aadgg :=0;if _dedfc ==7&&args [6].Type !=ResultTypeEmpty {_ceda :=args [6];if _ceda .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_aadgg =int (_ceda .ValueNumber );if !_addc (_aadgg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_gfbd :=0.0;_cbefe :=0.0;_bcfg :=1.0;_edge ,_bgdgg :=_ffdb (_eafa ,_cgbcg ,_gdda ,_cbefe ,_ggac ,_dbgdf ,_aadgg );if _bgdgg .Type ==ResultTypeError {return _bgdgg ;};_dggd ,_bgdgg :=_ffdb (_eafa ,_cgbcg ,_gdda ,_bcfg ,_ggac ,_dbgdf ,_aadgg );if _bgdgg .Type ==ResultTypeError {return _bgdgg ;};_dcbd :=(_bcfg -_cbefe )*0.5;for _cdad :=0;_cdad < 100&&_gfbd !=_aede ;_cdad ++{_gfbd ,_bgdgg =_ffdb (_eafa ,_cgbcg ,_gdda ,_dcbd ,_ggac ,_dbgdf ,_aadgg );if _bgdgg .Type ==ResultTypeError {return _bgdgg ;};if _aede ==_edge {return MakeNumberResult (_cbefe );}else if _aede ==_dggd {return MakeNumberResult (_bcfg );}else if _aede ==_gfbd {return MakeNumberResult (_dcbd );}else if _aede < _dggd {_bcfg *=2.0;_dggd ,_bgdgg =_ffdb (_eafa ,_cgbcg ,_gdda ,_bcfg ,_ggac ,_dbgdf ,_aadgg );if _bgdgg .Type ==ResultTypeError {return _bgdgg ;};_dcbd =(_bcfg -_cbefe )*0.5;}else {if _aede < _gfbd {_cbefe =_dcbd ;_edge =_gfbd ;}else {_bcfg =_dcbd ;_dggd =_gfbd ;};_dcbd =_bcfg -(_bcfg -_cbefe )*((_aede -_dggd )/(_edge -_dggd ));};};return MakeNumberResult (_dcbd );};const _fdacc =1;

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};var _gegag =[...]int {-1,1,1,-1,-2,0};func (_adbca PrefixHorizontalRange )horizontalRangeReference (_bada string )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bada ,_adbca ._cdaca ,_adbca ._dabc );};var (_gfdac =0;_dagg =false ;);

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbfe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcadb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eedg :=args [2].ValueNumber ;if _eedg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cacg :=args [3].ValueNumber ;return MakeNumberResult (_cacg *_gbfe *(_bcadb /_eedg -1));};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dgbe :=args [0].AsNumber ();if _dgbe .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cadd :=float64 (1);if _dgbe .ValueNumber < 0{_cadd =-1;};if len (args )> 1{_dfda :=args [1].AsNumber ();if _dfda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_cadd =_dfda .ValueNumber ;};_cbdae :=float64 (1);if len (args )> 2{_gcag :=args [2].AsNumber ();if _gcag .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbdae =_gcag .ValueNumber ;};if len (args )==1{return MakeNumberResult (_gg .Floor (_dgbe .ValueNumber ));};_egecf :=_dgbe .ValueNumber ;_egecf ,_aeeec :=_gg .Modf (_egecf /_cadd );if _aeeec !=0&&_dgbe .ValueNumber < 0&&_cbdae > 0{_egecf ++;};return MakeNumberResult (_egecf *_cadd );};

// Reference returns an invalid reference for Negate.
func (_adfae Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func (_dfd *evCache )GetFromCache (key string )(Result ,bool ){_dfd ._egf .Lock ();_adc ,_cfc :=_dfd ._edbb [key ];_dfd ._egf .Unlock ();return _adc ,_cfc ;};func _dadf (){_bdae =_d .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_bcaed =_d .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_cggdb =_d .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_aabe =_d .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_baea =_d .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_aadd =_d .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};const _aabc =57369;

// String returns a string of a range.
func (_gaef Range )String ()string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_gaef ._dcag .String (),_gaef ._fcbbe .String ());};const _fbac =57373;

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Error is an error expression.
type Error struct{_dcg string };const _bggfb =57372;

// GetFilename returns an empty string for the invalid reference context.
func (_eggbf *ivr )GetFilename ()string {return ""};

// String returns a string representation for Negate.
func (_fgab Negate )String ()string {return "\u002d"+_fgab ._fbeag .String ()};type node struct{_bfee tokenType ;_decfg string ;};type parsedReplaceObject struct{_abdc string ;_efebf int ;_aebdd int ;_bbef string ;};func _eaed (_ecba []Result ,_baed string )(*couponArgs ,Result ){_ddefa :=len (_ecba );if _ddefa !=3&&_ddefa !=4{return nil ,MakeErrorResult (_baed +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbdb ,_fddd ,_geac :=_babbe (_ecba [0],_ecba [1],_baed );if _geac .Type ==ResultTypeError {return nil ,_geac ;};if _ecba [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_baed +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cceb :=_ecba [2].ValueNumber ;if !_egec (_cceb ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_baed );};_dda :=0;if _ddefa ==4&&_ecba [3].Type !=ResultTypeEmpty {if _ecba [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_baed +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dda =int (_ecba [3].ValueNumber );if !_addc (_dda ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_baed );};};return &couponArgs {_gbdb ,_fddd ,int (_cceb ),_dda },_efb ;};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcbed :=args [0].AsNumber ();if _dcbed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abbcb :=float64 (1);if _dcbed .ValueNumber < 0{_abbcb =-1;};if len (args )> 1{_gaaee :=args [1].AsNumber ();if _gaaee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abbcb =_gg .Abs (_gaaee .ValueNumber );};if len (args )==1{return MakeNumberResult (_gg .Ceil (_dcbed .ValueNumber ));};_dfbd :=_dcbed .ValueNumber ;_dfbd ,_beffg :=_gg .Modf (_dfbd /_abbcb );if _beffg !=0{if _dcbed .ValueNumber > 0{_dfbd ++;};};return MakeNumberResult (_dfbd *_abbcb );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bcgf ,_aaadg ,_bcaef :=_babbe (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _bcaef .Type ==ResultTypeError {return _bcaef ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbcg :=_aaadg -_bcgf ;if _cbcg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_fegf :=args [2].ValueNumber ;if _fegf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_fegf *_cbcg /360));};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _ddbda (args ,false )};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_fged :=len (args );if _fged !=4&&_fged !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fecc :=args [0].ValueNumber ;if _fecc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daca :=args [1].ValueNumber ;if _daca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfce :=args [2].ValueNumber ;if _cfce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cace :=args [3].ValueNumber ;if _cace < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _cace > _cfce {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_agb :=2.0;if _fged ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agb =args [4].ValueNumber ;if _agb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_ebcd (_fecc ,_daca ,_cfce ,_cace ,_agb ));};func _bfbd (_cfbef []Result ,_ffece bool )Result {var _dfbf string ;if _ffece {_dfbf ="\u004c\u0041\u0052G\u0045";}else {_dfbf ="\u0053\u004d\u0041L\u004c";};if len (_cfbef )!=2{return MakeErrorResult (_dfbf +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_acfg :=_cfbef [0];var _fbgbg [][]Result ;switch _acfg .Type {case ResultTypeArray :_fbgbg =_acfg .ValueArray ;case ResultTypeList :_fbgbg =[][]Result {_acfg .ValueList };default:return MakeErrorResult (_dfbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_fbgbg )==0{return MakeErrorResult (_dfbf +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _cfbef [1].Type !=ResultTypeNumber {return MakeErrorResult (_dfbf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_gddg :=_cfbef [1].ValueNumber ;if _gddg < 1{return MakeErrorResultType (ErrorTypeNum ,_dfbf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_aefe :=int (_gddg );if float64 (_aefe )!=_gddg {return MakeErrorResultType (ErrorTypeNum ,_dfbf +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_fgdec :=[]float64 {};for _ ,_eagde :=range _fbgbg {for _ ,_cadbc :=range _eagde {if _cadbc .Type ==ResultTypeNumber {_fgdec =append (_fgdec ,_cadbc .ValueNumber );};};};if _aefe > len (_fgdec ){return MakeErrorResultType (ErrorTypeNum ,_dfbf +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dgfc :=_gd .MergeSort (_fgdec );if _ffece {return MakeNumberResult (_dgfc [len (_dgfc )-_aefe ]);}else {return MakeNumberResult (_dgfc [_aefe -1]);};};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Reference returns an invalid reference for FunctionCall.
func (_faae FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns a string reference value to an expression with prefix.
func (_gfgcde PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_aeaa :=_gfgcde ._bcege .Reference (ctx ,ev );_afgg :=_gfgcde ._fgfdbf .Reference (ctx ,ev );if _aeaa .Type ==ReferenceTypeSheet &&_afgg .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_aeaa .Value +"\u0021"+_afgg .Value };};return ReferenceInvalid ;};

// GetFormat returns an empty string for the invalid reference context.
func (_cgdbf *ivr )GetFormat (cellRef string )string {return ""};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cbgf :=args [0].Ref ;if _cbgf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_deaf ,_cfed :=_ga .ParseCellReference (_cbgf .Value );if _cfed !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_cbgf .Value );};return MakeNumberResult (float64 (_deaf .RowIdx ));};

// Update returns the same object as updating sheet references does not affect Number.
func (_bcfbd Number )Update (q *_bf .UpdateQuery )Expression {return _bcfbd };

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_cfdd :=len (args );if _cfdd !=4&&_cfdd !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ecdba ,_cdfd ,_ggbd :=_babbe (args [0],args [1],"\u0044\u0049\u0053\u0043");if _ggbd .Type ==ResultTypeError {return _ggbd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_efcg :=args [2].ValueNumber ;if _efcg <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gbab :=args [3].ValueNumber ;if _gbab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bafd :=0;if _cfdd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bafd =int (args [4].ValueNumber );if !_addc (_bafd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_afg ,_ggbd :=_gbcg (_ecdba ,_cdfd ,_bafd );if _ggbd .Type ==ResultTypeError {return _ggbd ;};return MakeNumberResult ((_gbab -_efcg )/_gbab /_afg );};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aaf :=ctx .GetEpoch ();_ada ,_aaff :=_eege (args [0].Value (),_aaf );if _aaff !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_ada .Year ()));};func _dadg (_aafa Result ,_dbff ,_bbgcd string )(string ,Result ){switch _aafa .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _aafa .Value (),_efb ;default:return "",MakeErrorResult (_dbff +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bbgcd +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_cdde :=args [0].ValueNumber ;if _cdde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_aeef :=float64 (int (args [1].ValueNumber ));if _aeef < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_gg .Pow ((1+_cdde /_aeef ),_aeef )-1);};

// Bool is a boolean expression.
type Bool struct{_bde bool };

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_bcf ,_fgc :=_fe .ParseBool (v );if _fgc !=nil {_gc .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_fgc );};return Bool {_bde :_bcf };};func _ffafb (_bgbfa ,_agede ,_fdea Reference )string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bgbfa .Value ,_agede .Value ,_fdea .Value );};

// String returns an empty string for EmptyExpr.
func (_bcd EmptyExpr )String ()string {return ""};func _abbe (_cbba ,_fdfg Result ,_aagf ,_aacbd bool )cmpResult {_cbba =_cbba .AsNumber ();_fdfg =_fdfg .AsNumber ();if _cbba .Type !=_fdfg .Type {return _eagd ;};if _cbba .Type ==ResultTypeNumber {if _cbba .ValueNumber ==_fdfg .ValueNumber {return _eaaaa ;};if _cbba .ValueNumber < _fdfg .ValueNumber {return _baec ;};return _gcbe ;};if _cbba .Type ==ResultTypeString {_bggd :=_cbba .ValueString ;_bede :=_fdfg .ValueString ;if !_aagf {_bggd =_c .ToLower (_bggd );_bede =_c .ToLower (_bede );};if _aacbd {_efgag :=_fb .Match (_bede ,_bggd );if _efgag {return _eaaaa ;}else {return _gcbe ;};};return cmpResult (_c .Compare (_bggd ,_bede ));};if _cbba .Type ==ResultTypeEmpty {return _eaaaa ;};if _cbba .Type ==ResultTypeList {if len (_cbba .ValueList )< len (_fdfg .ValueList ){return _baec ;};if len (_cbba .ValueList )> len (_fdfg .ValueList ){return _gcbe ;};for _cdca :=range _cbba .ValueList {_ffad :=_abbe (_cbba .ValueList [_cdca ],_fdfg .ValueList [_cdca ],_aagf ,_aacbd );if _ffad !=_eaaaa {return _ffad ;};};return _eaaaa ;};if _cbba .Type ==ResultTypeList {if len (_cbba .ValueArray )< len (_fdfg .ValueArray ){return _baec ;};if len (_cbba .ValueArray )> len (_fdfg .ValueArray ){return _gcbe ;};for _aeca :=range _cbba .ValueArray {_cgcg :=_cbba .ValueArray [_aeca ];_cbg :=_cbba .ValueArray [_aeca ];if len (_cgcg )< len (_cbg ){return _baec ;};if len (_cgcg )> len (_cbg ){return _gcbe ;};for _fdaea :=range _cgcg {_fdbfc :=_abbe (_cgcg [_fdaea ],_cbg [_fdaea ],_aagf ,_aacbd );if _fdbfc !=_eaaaa {return _fdbfc ;};};};return _eaaaa ;};return _eagd ;};func _eaba (_fafc Result ,_cdgb ,_gfac string )(float64 ,Result ){switch _fafc .Type {case ResultTypeEmpty :return 0,_efb ;case ResultTypeNumber :return _fafc .ValueNumber ,_efb ;case ResultTypeString :_bddcge ,_baacc :=_fe .ParseFloat (_fafc .ValueString ,64);if _baacc !=nil {return 0,MakeErrorResult (_gfac +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_cdgb );};return _bddcge ,_efb ;default:return 0,MakeErrorResult (_cdgb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gfac +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// GetLocked returns FALSE for the invalid reference context.
func (_dfebg *ivr )GetLocked (cellRef string )bool {return false };func _ecagb (_dcgdf Context ,_egeb ,_bbaba int )(string ,string ){_geegb :="\u0041"+_fe .Itoa (_egeb );_ddfbd :=_dcgdf .LastColumn (_egeb ,_bbaba );_eafdg :=_ddfbd +_fe .Itoa (_bbaba );return _geegb ,_eafdg ;};var _bcaf =map[string ]Function {};func _bddc (_bfd ,_efeg _dc .Time ,_eea int )_dc .Time {_fea :=_dc .Date (_bfd .Year (),_efeg .Month (),_efeg .Day (),0,0,0,0,_dc .UTC );if _fea .After (_bfd ){_fea =_fea .AddDate (-1,0,0);};for !_fea .After (_bfd ){_fea =_fea .AddDate (0,12/_eea ,0);};return _fea ;};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// String returns a string representation of a vertical range with prefix.
func (_dceg PrefixVerticalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dceg ._eeae .String (),_dceg ._eaegf ,_dceg ._cbafg );};var _ggg =[...]int {1};func (_ebeg *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};func _cbb (_aegf int )bool {if _aegf ==_aegf /400*400{return true ;};if _aegf ==_aegf /100*100{return false ;};return _aegf ==_aegf /4*4;};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daba :=args [0].Type ;for _ ,_fbba :=range args {if _fbba .Type !=_daba {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _daba {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_begc :=len (args [0].ListValues ());_fccf :=make ([]float64 ,_begc );for _feeae :=range _fccf {_fccf [_feeae ]=1.0;};for _ ,_cbgg :=range args {if len (_cbgg .ListValues ())!=_begc {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _aefd ,_fgfa :=range _cbgg .ListValues (){_fgfa =_fgfa .AsNumber ();if _fgfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_fccf [_aefd ]=_fccf [_aefd ]*_fgfa .ValueNumber ;};};_gbeg :=0.0;for _ ,_edag :=range _fccf {_gbeg +=_edag ;};return MakeNumberResult (_gbeg );};return MakeNumberResult (1.0);};

// Error is called in the case of parsing error and saves an error to a plex.
func (_dgfdc *plex )Error (s string ){_gc .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_dgfdc ._gceg =s ;};func _gfec (_dfgc ,_bcfd ,_aefa ,_badd float64 ,_bdfc int )float64 {var _adab float64 ;if _dfgc ==0{_adab =(_aefa +_badd )/_bcfd ;}else {_fgde :=_gg .Pow (1+_dfgc ,_bcfd );if _bdfc ==1{_adab =(_badd *_dfgc /(_fgde -1)+_aefa *_dfgc /(1-1/_fgde ))/(1+_dfgc );}else {_adab =_badd *_dfgc /(_fgde -1)+_aefa *_dfgc /(1-1/_fgde );};};return -_adab ;};

// String returns a string representation of a named range.
func (_adfbb NamedRangeRef )String ()string {return _adfbb ._fabfg };func _ebcd (_fcbd ,_agcb ,_feff ,_accf ,_bfcg float64 )float64 {var _eefc float64 ;_acaeg :=_bfcg /_feff ;if _acaeg >=1{_acaeg =1;if _accf ==1{_eefc =_fcbd ;}else {_eefc =0;};}else {_eefc =_fcbd *_gg .Pow (1-_acaeg ,_accf -1);};_bfag :=_fcbd *_gg .Pow (1-_acaeg ,_accf );var _gfeg float64 ;if _bfag < _agcb {_gfeg =_eefc -_agcb ;}else {_gfeg =_eefc -_bfag ;};if _gfeg < 0{_gfeg =0;};return _gfeg ;};var _bfcfc =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};const _cfgf ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gfga :=args [0].AsNumber ();if _gfga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_egbe :=float64 (1);if _gfga .ValueNumber < 0{_egbe =-1;};if len (args )> 1{_beggg :=args [1].AsNumber ();if _beggg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_egbe =_beggg .ValueNumber ;};if _egbe < 0&&_gfga .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_gg .Ceil (_gfga .ValueNumber ));};_efdf :=_gfga .ValueNumber ;_efdf ,_gbeb :=_gg .Modf (_efdf /_egbe );if _gbeb > 0{_efdf ++;};return MakeNumberResult (_efdf *_egbe );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_gebg ,_gee :=_eaed (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _gee .Type ==ResultTypeError {return _gee ;};return MakeNumberResult (_ddcg (_gebg ._aadc ,_gebg ._bcae ,_gebg ._baa ,_gebg ._dcfc ));};

// Update returns the same object as updating sheet references does not affect String.
func (_caafc String )Update (q *_bf .UpdateQuery )Expression {return _caafc };var _dcd =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};

// Number is a nubmer expression.
type Number struct{_eccfa float64 };

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _bcddd :=0;_bcddd < len (args )-1;_bcddd +=2{if args [_bcddd ].ValueNumber ==1{return args [_bcddd +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;func (_ccfd *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// String returns a string representation of ConstArrayExpr.
func (_efdc ConstArrayExpr )String ()string {return ""};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfddb :=args [0].Ref ;if _bfddb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_dcfb ,_dgbcg :=_ga .ParseCellReference (_bfddb .Value );if _dgbcg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_bfddb .Value );};return MakeNumberResult (float64 (_dcfb .ColumnIdx +1));};

// String returns a string representation for Bool.
func (_gf Bool )String ()string {if _gf ._bde {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_cdea Expression ;_cdaca ,_dabc int ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_gg .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};const _edga =57354;const _eefe ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";type rmode byte ;

// Eval evaluates and returns the result of a function call.
func (_bbff FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_afdab :=LookupFunction (_bbff ._bffa );if _afdab !=nil {_dgag :=make ([]Result ,len (_bbff ._dceed ));for _bdfg ,_gecfd :=range _bbff ._dceed {_dgag [_bdfg ]=_gecfd .Eval (ctx ,ev );_dgag [_bdfg ].Ref =_gecfd .Reference (ctx ,ev );};if _ ,_ebag :=_fcad [_bbff ._bffa ];!_ebag {if _cbdf ,_agefb :=_gffga (_dgag );_cbdf {return _agefb ;};};return _afdab (_dgag );};_bbad :=LookupFunctionComplex (_bbff ._bffa );if _bbad !=nil {_geece :=make ([]Result ,len (_bbff ._dceed ));for _bdaf ,_dfebc :=range _bbff ._dceed {_geece [_bdaf ]=_dfebc .Eval (ctx ,ev );_geece [_bdaf ].Ref =_dfebc .Reference (ctx ,ev );};if _ ,_cfgga :=_fcad [_bbff ._bffa ];!_cfgga {if _faddg ,_gffa :=_gffga (_geece );_faddg {return _gffa ;};};return _bbad (ctx ,ev ,_geece );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_bbff ._bffa );};const _egae =57351;

// Reference returns a string reference value to a range.
func (_fbfad Range )Reference (ctx Context ,ev Evaluator )Reference {_gbcba :=_fbfad ._dcag .Reference (ctx ,ev );_cfadf :=_fbfad ._fcbbe .Reference (ctx ,ev );if _gbcba .Type ==ReferenceTypeCell &&_cfadf .Type ==ReferenceTypeCell {return MakeRangeReference (_egecg (_gbcba ,_cfadf ));};return ReferenceInvalid ;};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_gde ,_cafd :=_eaed (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _cafd .Type ==ResultTypeError {return _cafd ;};return MakeNumberResult (_bfcd (_gde ._aadc ,_gde ._bcae ,_gde ._baa ,_gde ._dcfc ));};

// Eval evaluates and returns the result of a constant array expression.
func (_cbef ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_bff :=[][]Result {};for _ ,_fad :=range _cbef ._af {_gac :=[]Result {};for _ ,_eg :=range _fad {_gac =append (_gac ,_eg .Eval (ctx ,ev ));};_bff =append (_bff ,_gac );};return MakeArrayResult (_bff );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_dgcd :=len (args );if _dgcd !=4&&_dgcd !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfda ,_abae ,_ceaa :=_babbe (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _ceaa .Type ==ResultTypeError {return _ceaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_egbf :=args [2].ValueNumber ;if _egbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ecga :=args [3].ValueNumber ;if _ecga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_ffdc :=0;if _dgcd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ffdc =int (args [4].ValueNumber );if !_addc (_ffdc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_ggfaf ,_ceaa :=_gbcg (_bfda ,_abae ,_ffdc );if _ceaa .Type ==ResultTypeError {return _ceaa ;};return MakeNumberResult ((_ecga -_egbf )/_egbf /_ggfaf );};func _fgee (_ggfa float64 )float64 {return float64 (int (_ggfa +0.5))};

// Eval evaluates and returns the result of a Negate expression.
func (_ccgbf Negate )Eval (ctx Context ,ev Evaluator )Result {_dcdgce :=_ccgbf ._fbeag .Eval (ctx ,ev );if _dcdgce .Type ==ResultTypeNumber {return MakeNumberResult (-_dcdgce .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _ffbe []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _fggde (_edcb Result ,_bbfgc ,_fecgd int )[][]Result {_ddcgf :=[][]Result {};switch _edcb .Type {case ResultTypeArray :for _gaea ,_gdgdf :=range _edcb .ValueArray {if _gaea < _bbfgc {_ddcgf =append (_ddcgf ,_dbba (MakeListResult (_gdgdf ),_fecgd ));}else {_ddcgf =append (_ddcgf ,_dbba (MakeErrorResultType (ErrorTypeNA ,""),_fecgd ));};};case ResultTypeList :_gege :=_dbba (_edcb ,_fecgd );for _dfgg :=0;_dfgg < _bbfgc ;_dfgg ++{_ddcgf =append (_ddcgf ,_gege );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _addd :=0;_addd < _bbfgc ;_addd ++{_cegd :=_dbba (_edcb ,_fecgd );_ddcgf =append (_ddcgf ,_cegd );};};return _ddcgf ;};type yyLexer interface{Lex (_fgbde *yySymType )int ;Error (_acfca string );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_cgbeg NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_gaaeeb :=ctx .NamedRange (_cgbeg ._fabfg );_dabafd :=_gaaeeb .Value ;if _beaeg ,_faeg :=ev .GetFromCache (_dabafd );_faeg {return _beaeg ;};_agfe :=_c .Split (_dabafd ,"\u0021");if len (_agfe )!=2{return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_dabafd ));};_bgee :=ctx .Sheet (_agfe [0]);_abadc :=_c .Split (_agfe [1],"\u003a");switch len (_abadc ){case 1:_dggaf :=ev .Eval (_bgee ,_abadc [0]);ev .SetCache (_dabafd ,_dggaf );return _dggaf ;case 2:_ecage :=_egabge (_bgee ,ev ,_abadc [0],_abadc [1]);ev .SetCache (_dabafd ,_ecage );return _ecage ;};return MakeErrorResult (_a .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_gaaeeb .Type ));};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_ebabb NamedRangeRef )Update (q *_bf .UpdateQuery )Expression {return _ebabb };func _babb (_egdg ,_eaeg int )int {switch _eaeg {case 1:if _cbb (_egdg ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};func _efaa (_agcgcf string ,_gddf func (_eddbd float64 )float64 )Function {return func (_gedd []Result )Result {if len (_gedd )!=1{return MakeErrorResult (_agcgcf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dedb :=_gedd [0].AsNumber ();switch _dedb .Type {case ResultTypeNumber :_bdffc :=_gddf (_dedb .ValueNumber );if _gg .IsNaN (_bdffc ){return MakeErrorResult (_agcgcf +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _gg .IsInf (_bdffc ,0){return MakeErrorResult (_agcgcf +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_bdffc );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_agcgcf +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _dedb ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_agcgcf ,_dedb .Type ));};};};func _cecc (_dabf []Result )(float64 ,float64 ,Result ){_dcee :=0.0;_bggdf :=1.0;for _ ,_dfea :=range _dabf {switch _dfea .Type {case ResultTypeNumber :_dcee +=_dfea .ValueNumber ;_bggdf *=_baadf (_dfea .ValueNumber );case ResultTypeList ,ResultTypeArray :_cfgee ,_edcgc ,_ffdfa :=_cecc (_dfea .ListValues ());_dcee +=_cfgee ;_bggdf *=_baadf (_edcgc );if _ffdfa .Type ==ResultTypeError {return 0,0,_ffdfa ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_dfea ;};};return _dcee ,_bggdf ,_efb ;};var _fgfdb string =string ([]byte {92});func _cgfc (_bgbb [][]Result )float64 {if len (_bgbb )==2{_egcg :=_bgbb [0][0].AsNumber ();_fcdeb :=_bgbb [0][1].AsNumber ();_ggfga :=_bgbb [1][0].AsNumber ();_bdgaf :=_bgbb [1][1].AsNumber ();if _egcg .Type !=ResultTypeNumber ||_fcdeb .Type !=ResultTypeNumber ||_ggfga .Type !=ResultTypeNumber ||_bdgaf .Type !=ResultTypeNumber {return _gg .NaN ();};return _egcg .ValueNumber *_bdgaf .ValueNumber -_ggfga .ValueNumber *_fcdeb .ValueNumber ;};_bbbe :=float64 (0);_edddd :=float64 (1);for _adega :=range _bgbb {_bbbe +=_edddd *_bgbb [0][_adega ].ValueNumber *_cgfc (_acccg (_bgbb ,_adega ));_edddd *=-1;};return _bbbe ;};func (_gggf *Lexer )Next ()*node {_gggf ._bagcg .Lock ();defer _gggf ._bagcg .Unlock ();if len (_gggf ._dcbge )> 0{_dfag :=_gggf ._dcbge [0];_gggf ._dcbge =_gggf ._dcbge [1:];return _dfag ;};return _gggf .nextRaw ();};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfceb :=args [0];if _bfceb .Type ==ResultTypeNumber {return _bfceb ;};if _bfceb .Type ==ResultTypeString {_gadc ,_dagf :=_fe .ParseFloat (_bfceb .Value (),64);if _dagf ==nil {return MakeNumberResult (_gadc );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func _ddfd (_cge Result ,_effb ,_dedf string )(float64 ,Result ){var _bged float64 ;switch _cge .Type {case ResultTypeNumber :_bged =float64 (int (_cge .ValueNumber ));case ResultTypeString :_bacb :=DateValue ([]Result {_cge });if _bacb .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_effb +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_dedf );};_bged =_bacb .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_dedf );};if _bged < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_effb +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _bged ,_efb ;};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_fgd *defEval )LastEvalIsRef ()bool {return _fgd ._abg };func _fgedc (_fgdg Result ,_gada *criteriaParsed )bool {if _fgdg .IsBoolean {return false ;};_eecdg :=_fgdg .Type ;if _gada ._abca {return _eecdg ==ResultTypeNumber &&_fgdg .ValueNumber ==_gada ._ffbae ;}else if _eecdg ==ResultTypeNumber {return _dfde (_fgdg .ValueNumber ,_gada ._bagc );};return _dcfca (_fgdg ,_gada );};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_dad EmptyExpr )Update (q *_bf .UpdateQuery )Expression {return _dad };

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _dcfdb (args ,_dbed )};func _cc (_db ,_cd [][]Result )bool {if len (_db )!=len (_cd ){return false ;};for _bcc :=range _db {if len (_db [_bcc ])!=len (_cd [_bcc ]){return false ;};};return true ;};func _efd (_cdcf BinOpType ,_efg [][]Result ,_bae Result )Result {_ggb :=[][]Result {};for _aa :=range _efg {_eba :=_gb (_cdcf ,_efg [_aa ],_bae );if _eba .Type ==ResultTypeError {return _eba ;};_ggb =append (_ggb ,_eba .ValueList );};return MakeArrayResult (_ggb );};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_gcea :=_c .Split (v ,"\u003a");if len (_gcea )!=2{return nil ;};if _gcea [0]> _gcea [1]{_gcea [0],_gcea [1]=_gcea [1],_gcea [0];};return PrefixVerticalRange {_eeae :pfx ,_eaegf :_gcea [0],_cbafg :_gcea [1]};};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_cbafb ,_dffgd :=_eefa (args ,true );if _dffgd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_cbafb /_dffgd );};

// FunctionCall is a function call expression.
type FunctionCall struct{_bffa string ;_dceed []Expression ;};func _fcbb (_bgdg []Result ,_fdddd string )(float64 ,float64 ,Result ){if len (_bgdg )!=2{return 0,0,MakeErrorResult (_fdddd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bgdg [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fdddd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dagbb :=_bgdg [0].ValueNumber ;if _bgdg [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fdddd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bbcc :=float64 (int (_bgdg [1].ValueNumber ));if _bbcc < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_fdddd +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _dagbb ,_bbcc ,_efb ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_bbacd .Lock ();defer _bbacd .Unlock ();if _dfabb ,_ebgeea :=_bcaf [name ];_ebgeea {return _dfabb ;};return nil ;};const (_ byte =iota ;_bbgf ;_bdaed ;_febd ;_agbac ;_feadc ;);func _eefa (_cffbb []Result ,_faafb bool )(float64 ,float64 ){_cade :=0.0;_bfde :=0.0;for _ ,_accbd :=range _cffbb {switch _accbd .Type {case ResultTypeNumber :if _faafb ||!_accbd .IsBoolean {_bfde +=_accbd .ValueNumber ;_cade ++;};case ResultTypeList ,ResultTypeArray :_bfdeb ,_gdge :=_eefa (_accbd .ListValues (),_faafb );_bfde +=_bfdeb ;_cade +=_gdge ;case ResultTypeString :if _faafb {_cade ++;};case ResultTypeEmpty :};};return _bfde ,_cade ;};const _fadc =_gbe +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// String returns a string representation of a vertical range.
func (_agfaaa VerticalRange )String ()string {return _agfaaa .verticalRangeReference ()};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_cdcdc :=len (args );if _cdcdc < 4||_cdcdc > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bgeb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cefg :=args [1].ValueNumber ;if _cefg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcecf :=args [2].ValueNumber ;if _fcecf < _cefg {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gaee :=args [3].ValueNumber ;_ddbb :=0.0;if _cdcdc >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddbb =args [4].ValueNumber ;};_cfcgf :=0;if _cdcdc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfcgf =int (args [5].ValueNumber );if _cfcgf !=0{_cfcgf =1;};};return MakeNumberResult (_gfec (_bgeb ,_fcecf ,_gaee ,_ddbb ,_cfcgf )-_agfa (_bgeb ,_cefg ,_fcecf ,_gaee ,_ddbb ,_cfcgf ));};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _dcfdb (args ,_bedg )};func _cdbee (_abde ,_efbc float64 )bool {return _gg .Abs (_abde -_efbc )< 1.0e-6};func _egecg (_acgga ,_eecb Reference )string {return _a .Sprintf ("\u0025\u0073\u003a%\u0073",_acgga .Value ,_eecb .Value );};func _ecdbb (_gffb []Result ,_fgeea []string ,_daae bool )[]string {for _ ,_aegbb :=range _gffb {switch _aegbb .Type {case ResultTypeEmpty :if !_daae {_fgeea =append (_fgeea ,"");};case ResultTypeString :if _aegbb .ValueString !=""||!_daae {_fgeea =append (_fgeea ,_aegbb .ValueString );};case ResultTypeNumber :_fgeea =append (_fgeea ,_aegbb .Value ());case ResultTypeList :_fgeea =_agbf (_fgeea ,_ecdbb (_aegbb .ValueList ,[]string {},_daae ));case ResultTypeArray :for _ ,_efec :=range _aegbb .ValueArray {_fgeea =_agbf (_fgeea ,_ecdbb (_efec ,[]string {},_daae ));};};};return _fgeea ;};func _acfdcf (_dbebc int )string {if _dbebc >=0&&_dbebc < len (_cbdb ){if _cbdb [_dbebc ]!=""{return _cbdb [_dbebc ];};};return _a .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_dbebc );};func _dccb (_cead []Result )Result {_dfbfg :=_cead [0].ValueList ;_egfef :=len (_dfbfg );switch len (_cead ){case 1:_ffbc :=[]Result {};for _ ,_ffeg :=range _dfbfg {_ffbc =append (_ffbc ,MakeBoolResult (_ffeg .ValueNumber !=0));};return MakeListResult (_ffbc );case 2:_fdbe :=_cead [1];switch _fdbe .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_cbebc :=[]Result {};for _ ,_ccba :=range _dfbfg {var _fbfb Result ;if _ccba .ValueNumber ==0{_fbfb =MakeBoolResult (false );}else {_fbfb =_fdbe ;};_cbebc =append (_cbebc ,_fbfb );};return MakeListResult (_cbebc );case ResultTypeList :_fddg :=_dbba (_fdbe ,_egfef );_bedb :=[]Result {};for _baaa ,_gede :=range _dfbfg {var _cgeb Result ;if _gede .ValueNumber ==0{_cgeb =MakeBoolResult (false );}else {_cgeb =_fddg [_baaa ];};_bedb =append (_bedb ,_cgeb );};return MakeListResult (_bedb );case ResultTypeArray :_bdde :=_fggde (_fdbe ,len (_fdbe .ValueArray ),_egfef );_adfc :=[][]Result {};for _ ,_acdgd :=range _bdde {_fbbe :=[]Result {};for _dggf ,_eabbf :=range _dfbfg {var _eabd Result ;if _eabbf .ValueNumber ==0{_eabd =MakeBoolResult (false );}else {_eabd =_acdgd [_dggf ];};_fbbe =append (_fbbe ,_eabd );};_adfc =append (_adfc ,_fbbe );};return MakeArrayResult (_adfc );};case 3:_gceff :=_cead [1];_ddeg :=_cead [2];_fbge :=_bege (_gceff );_fgbc :=_bege (_ddeg );if _fbge &&_fgbc {_dgbcge :=[]Result {};for _ ,_decf :=range _dfbfg {var _ebge Result ;if _decf .ValueNumber ==0{_ebge =_ddeg ;}else {_ebge =_gceff ;};_dgbcge =append (_dgbcge ,_ebge );};return MakeListResult (_dgbcge );};if _gceff .Type !=ResultTypeArray &&_ddeg .Type !=ResultTypeArray {_egfdd :=_dbba (_gceff ,_egfef );_edgc :=_dbba (_ddeg ,_egfef );_dgga :=[]Result {};for _accb ,_feda :=range _dfbfg {var _fbga Result ;if _feda .ValueNumber ==0{_fbga =_edgc [_accb ];}else {_fbga =_egfdd [_accb ];};_dgga =append (_dgga ,_fbga );};return MakeListResult (_dgga );};_ccgb ,_ddge :=len (_gceff .ValueArray ),len (_ddeg .ValueArray );_gaabb ,_bbba :=_ccgb ,_ddge ;if _ddge > _gaabb {_gaabb ,_bbba =_bbba ,_gaabb ;};_baad :=_fggde (_gceff ,_gaabb ,_egfef );_fggef :=_fggde (_ddeg ,_gaabb ,_egfef );_adca :=[][]Result {};for _cged :=0;_cged < _gaabb ;_cged ++{_cfff :=[]Result {};for _bfab ,_egdf :=range _dfbfg {var _eccd Result ;if _egdf .ValueNumber ==0{if _cged < _ddge {_eccd =_fggef [_cged ][_bfab ];}else {_eccd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _cged < _ccgb {_eccd =_baad [_cged ][_bfab ];}else {_eccd =MakeErrorResultType (ErrorTypeNA ,"");};};_cfff =append (_cfff ,_eccd );};_adca =append (_adca ,_cfff );};return MakeArrayResult (_adca );};return MakeErrorResult ("");};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_decad ,_dfceg string };

// Db implements the Excel DB function.
func Db (args []Result )Result {_cgab :=len (args );if _cgab !=4&&_cgab !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgeg :=args [0].ValueNumber ;if _cgeg < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffb :=args [1].ValueNumber ;if _ffb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fffb :=args [2].ValueNumber ;if _fffb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eddd :=args [3].ValueNumber ;if _eddd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _eddd -_fffb > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_cbca :=12.0;if _cgab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbca =args [4].ValueNumber ;if _cbca < 1||_cbca > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _cbca ==12&&_eddd > _fffb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _ffb >=_cgeg {return MakeNumberResult (0);};_cefa :=1-_gg .Pow (_ffb /_cgeg ,1/_fffb );_cefa =float64 (int (_cefa *1000+0.5))/1000;_gadd :=_cgeg *_cefa *_cbca /12;if _eddd ==1{return MakeNumberResult (_gadd );};_fdbf :=_gadd ;_ggfg :=0.0;_aagc :=_fffb ;if _aagc > _eddd {_aagc =_eddd ;};for _aace :=2.0;_aace <=_aagc ;_aace ++{_ggfg =(_cgeg -_fdbf )*_cefa ;_fdbf +=_ggfg ;};if _eddd > _fffb {return MakeNumberResult ((_cgeg -_fdbf )*_cefa *(12-_cbca )/12);};return MakeNumberResult (_ggfg );};func _dcfdb (_adbd []Result ,_eefce rmode )Result {if len (_adbd )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_cbegd :=_adbd [0].AsNumber ();if _cbegd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aeba :=_adbd [1].AsNumber ();if _aeba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eabcg :=_aeba .ValueNumber ;_daaa :=_cbegd .ValueNumber ;_fbfg :=1.0;if _eabcg > 0{_fbfg =_gg .Pow (1/10.0,_eabcg );}else {_fbfg =_gg .Pow (10.0,-_eabcg );};_daaa ,_cgbbc :=_gg .Modf (_daaa /_fbfg );switch _eefce {case _bedg :const _cgfa =0.499999999;if _cgbbc >=_cgfa {_daaa ++;}else if _cgbbc <=-_cgfa {_daaa --;};case _dbfd :case _dbed :if _cgbbc > 0{_daaa ++;}else if _cgbbc < 0{_daaa --;};};return MakeNumberResult (_daaa *_fbfg );};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_dgbb :=len (args );if _dgbb < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dgbb > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ddfa :=args [0];_cbda :=args [1];if _cbda .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_abdb :=args [2].AsNumber ();if _abdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_deeaf :=false ;if _dgbb ==4&&args [3].Type !=ResultTypeEmpty {_fefe :=args [3].AsNumber ();if _fefe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _fefe .ValueNumber ==0{_deeaf =true ;};};_gfega :=int (_abdb .ValueNumber )-1;_gacad :=-1;_dcdb :=false ;_agae :for _deb ,_ffdag :=range _cbda .ValueArray {if len (_ffdag )==0{continue ;};_bgedb :=_ffdag [0];switch _abbe (_bgedb ,_ddfa ,false ,_deeaf ){case _baec :_gacad =_deb ;case _eaaaa :_gacad =_deb ;_dcdb =true ;break _agae ;};};if _gacad ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_cage :=_cbda .ValueArray [_gacad ];if _gfega < 0||_gfega >=len (_cage ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _dcdb ||!_deeaf {return _cage [_gfega ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bdg :=_c .ToLower (args [0].ValueString );if !_cdec (_bdg ){_ ,_ ,_ ,_ ,_ffg ,_beed :=_dfb (_bdg );if _beed .Type ==ResultTypeError {_beed .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _beed ;};if _ffg {return MakeNumberResult (0);};};_fd ,_ebdc ,_feeb ,_ ,_ceeb :=_baefa (_bdg );if _ceeb .Type ==ResultTypeError {return _ceeb ;};return MakeNumberResult (_fcg (_fd ,_ebdc ,_feeb ));};const _bcdcd =2;

// Reference returns an invalid reference for ConstArrayExpr.
func (_ace ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bfcd (_ffd ,_badb float64 ,_fec ,_egeg int )float64 {_aaee :=_fbec (_ffd );_fcgb :=_fbec (_badb );_eeee :=_gegg (_aaee ,_fcgb ,_fec ,_egeg );return _efe (_eeee ,_aaee ,_egeg );};type Expression interface{Eval (_ecf Context ,_gfb Evaluator )Result ;Reference (_eag Context ,_ece Evaluator )Reference ;String ()string ;Update (_gge *_bf .UpdateQuery )Expression ;};func _ddcg (_bacbb ,_ggaf float64 ,_edgf ,_edba int )float64 {_fdf :=_fbec (_bacbb );_aga :=_fbec (_ggaf );_cafa :=_bddc (_fdf ,_aga ,_edgf );return _efe (_fdf ,_cafa ,_edba );};

// String returns a string representation of a horizontal range with prefix.
func (_afegc PrefixHorizontalRange )String ()string {return _a .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_afegc ._cdea .String (),_afegc ._cdaca ,_afegc ._dabc );};

// Reference returns an invalid reference for String.
func (_effea String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agba :=[]float64 {};for _ ,_egc :=range args {switch _egc .Type {case ResultTypeString :_adae :=_egc .AsNumber ();if _adae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agba =append (_agba ,_adae .ValueNumber );case ResultTypeList ,ResultTypeArray :_abdee :=GCD (_egc .ListValues ());if _abdee .Type !=ResultTypeNumber {return _abdee ;};_agba =append (_agba ,_abdee .ValueNumber );case ResultTypeNumber :_agba =append (_agba ,_egc .ValueNumber );case ResultTypeError :return _egc ;default:return MakeErrorResult (_a .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egc .Type ));};};if _agba [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_agba )==1{return MakeNumberResult (_agba [0]);};_gead :=_agba [0];for _gagcc :=1;_gagcc < len (_agba );_gagcc ++{if _agba [_gagcc ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gead =_cbcbg (_gead ,_agba [_gagcc ]);};return MakeNumberResult (_gead );};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_agcg ,_ccdf :=_eaed (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _ccdf .Type ==ResultTypeError {return _ccdf ;};_gce :=_fbec (_agcg ._aadc );_ebcf :=_fbec (_agcg ._bcae );_ade :=_agcg ._baa ;_bebg :=_bddc (_gce ,_ebcf ,_ade );_faf ,_eefb ,_ceee :=_bebg .Date ();return MakeNumberResult (_fcg (_faf ,int (_eefb ),_ceee ));};var _efa int64 =_bgag (1900,_dc .January ,1);func _cbcbg (_caeb ,_acdbb float64 )float64 {_caeb =_gg .Trunc (_caeb );_acdbb =_gg .Trunc (_acdbb );if _caeb ==0{return _acdbb ;};if _acdbb ==0{return _caeb ;};for _caeb !=_acdbb {if _caeb > _acdbb {_caeb =_caeb -_acdbb ;}else {_acdbb =_acdbb -_caeb ;};};return _caeb ;};func _fcg (_cgg ,_caf ,_gbg int )float64 {return float64 (_bgag (_cgg ,_dc .Month (_caf ),_gbg )/86400)+_cff ;};func _cdec (_gece string )bool {for _ ,_gbae :=range _aee {_fda :=_gbae .FindStringSubmatch (_gece );if len (_fda )> 1{return true ;};};return false ;};

// Eval evaluates and returns the result of the cell reference.
func (_gdd CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_gdd ._ebc ,ev )};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_dgeed SheetPrefixExpr )Update (q *_bf .UpdateQuery )Expression {return _dgeed };

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_abee :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_abee *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_cefbf :=_bcbd (args [1]);for _ ,_aagb :=range _cefbf {for _ ,_aadb :=range _aagb {if _aadb .Type !=ResultTypeNumber ||_aadb .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_abee *=1.0+_aadb .ValueNumber ;};};return MakeNumberResult (_abee );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_fbcd .Float64 ());};func _addc (_accg int )bool {return _accg >=0&&_accg <=4};var _adac =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};func _adea (_addg []Result ,_adfa countMode )float64 {_dcfe :=0.0;for _ ,_gdgf :=range _addg {switch _gdgf .Type {case ResultTypeNumber :if _adfa ==_ggdbd ||(_adfa ==_bbeg &&!_gdgf .IsBoolean ){_dcfe ++;};case ResultTypeList ,ResultTypeArray :_dcfe +=_adea (_gdgf .ListValues (),_adfa );case ResultTypeString :if _adfa ==_ggdbd {_dcfe ++;};case ResultTypeEmpty :if _adfa ==_fcdg {_dcfe ++;};};};return _dcfe ;};var _bedec =[...]int {0};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_affd :=MakeNumberResult (0);for _ ,_fcdc :=range args {_fcdc =_fcdc .AsNumber ();switch _fcdc .Type {case ResultTypeNumber :_affd .ValueNumber +=_fcdc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_feea :=Sum (_fcdc .ListValues ());if _feea .Type !=ResultTypeNumber {return _feea ;};_affd .ValueNumber +=_feea .ValueNumber ;case ResultTypeString :case ResultTypeError :return _fcdc ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fcdc .Type ));};};return _affd ;};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_defg Context ,_fffbc Evaluator ,_gfgcag []Result )Result ;

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_cbbe :=len (args );if _cbbe < 3||_cbbe > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_decb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfdgc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_daaf :=args [2].ValueNumber ;_bagg :=0.0;if _cbbe >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bagg =args [3].ValueNumber ;};_fbcg :=0.0;if _cbbe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbcg =args [4].ValueNumber ;if _fbcg !=0{_fbcg =1;};};_cgad :=_gfdgc *(1+_decb *_fbcg )-_bagg *_decb ;_dccd :=(_daaf *_decb +_gfdgc *(1+_decb *_fbcg ));return MakeNumberResult (_gg .Log (_cgad /_dccd )/_gg .Log (1+_decb ));};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfab ,_deeb ,_cfbf :=_babbe (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cfbf .Type ==ResultTypeError {return _cfbf ;};_ebfa ,_cfbf :=_ddfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _cfbf .Type ==ResultTypeError {return _cfbf ;};if _ebfa >=_cfab {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_ebbcd :=args [3];if _ebbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aafba :=_ebbcd .ValueNumber ;if _aafba < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_cacb :=args [4];if _cacb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cggef :=_cacb .ValueNumber ;if _cggef < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_aeeb :=args [5];if _aeeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_ebdcc :=_aeeb .ValueNumber ;if _ebdcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ebad :=args [6];if _ebad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eecf :=float64 (int (_ebad .ValueNumber ));if !_egec (_eecf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_beggc :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_fbff :=args [7];if _fbff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_beggc =int (_fbff .ValueNumber );if !_addc (_beggc ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_ecea ,_cfbf :=_gbcg (_ebfa ,_deeb ,_beggc );if _cfbf .Type ==ResultTypeError {return _cfbf ;};_ecea *=_eecf ;_fadd ,_cfbf :=_gbcg (_cfab ,_deeb ,_beggc );if _cfbf .Type ==ResultTypeError {return _cfbf ;};_fadd *=_eecf ;_caag ,_cfbf :=_gbcg (_ebfa ,_cfab ,_beggc );if _cfbf .Type ==ResultTypeError {return _cfbf ;};_caag *=_eecf ;_fbda :=_ebdcc +_ecea *100*_aafba /_eecf ;_fbda /=_fadd *_cggef /_eecf +1;_fbda -=_caag *100*_aafba /_eecf ;return MakeNumberResult (_fbda );};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfaa :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efcce :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_geae :=args [2].ValueNumber ;if _geae ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_dfaa -_efcce )/_geae );};const _aebb =57370;

// Reference returns an invalid reference for Bool.
func (_cg Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cfgc :=args [0].AsNumber ();if _cfgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eccb :=_gg .Signbit (_cfgc .ValueNumber );_bfgbg ,_fecd :=_gg .Modf ((_cfgc .ValueNumber -1)/2);_bgba :=_bfgbg *2+1;if _fecd !=0{if !_eccb {_bgba +=2;}else {_bgba -=2;};};return MakeNumberResult (_bgba );};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_cdbbb ,_befd :=_ecgc ("\u0046\u0049\u004e\u0044",args );if _befd .Type !=ResultTypeEmpty {return _befd ;};_cggfd :=_c .ToLower (_cdbbb ._dcca );_adegdd :=_c .ToLower (_cdbbb ._facb );if _cggfd ==""{return MakeNumberResult (1.0);};_bfgfd :=_cdbbb ._fece -1;_gdgfg :=1;_efgba :=0;for _afbc :=range _adegdd {if _afbc !=0{_bgbad :=1;if _afbc -_efgba > 1{_bgbad =2;};_gdgfg +=_bgbad ;};if _gdgfg > _bfgfd {_ceef :=_fb .Index (_cggfd ,_adegdd [_afbc :]);if _ceef ==0{return MakeNumberResult (float64 (_gdgfg ));};};_efgba =_afbc ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_c .NewReader (s ));};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_ddc :=args [1].ValueNumber ;_bdd :=args [0];var _bccba float64 ;switch _bdd .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_bccba =_bdd .ValueNumber ;case ResultTypeString :_dafb :=DateValue ([]Result {args [0]});if _dafb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_bccba =_dafb .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_edf :=_fbec (_bccba );_aaeg :=_edf .AddDate (0,int (_ddc ),0);_aebg ,_ccca ,_bca :=_aaeg .Date ();_cdgc :=_fcg (_aebg ,int (_ccca ),_bca );if _cdgc < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_cdgc );};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_eaad ,_cgda :=_fcbf (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _cgda .Type ==ResultTypeError {return _cgda ;};_agdf :=_eaad ._caga ;_gbgf :=_eaad ._cfaa ;_cgacg :=_eaad ._bfgb ;_cecg :=_eaad ._gade ;_agcgc :=_eaad ._cdbf ;_edfg :=_eaad ._agdc ;_dbbf :=_gfec (_agdf ,_gbgf ,_cgacg ,0,_edfg );_cedcb :=0.0;if _cecg ==1{if _edfg ==0{_cedcb =-_cgacg ;_cecg ++;};};for _baeb :=_cecg ;_baeb <=_agcgc ;_baeb ++{if _edfg ==1{_cedcb +=_gcef (_agdf ,_baeb -2,_dbbf ,_cgacg ,1)-_dbbf ;}else {_cedcb +=_gcef (_agdf ,_baeb -1,_dbbf ,_cgacg ,0);};};_cedcb *=_agdf ;return MakeNumberResult (_cedcb );};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func _ffed (_ecbg ,_aaab []float64 ,_afd float64 )float64 {_afcg :=_afd +1;_cgaab :=0.0;_dfga :=len (_ecbg );_dcgd :=_aaab [0];for _decd :=1;_decd < _dfga ;_decd ++{_acffe :=(_aaab [_decd ]-_dcgd )/365;_cgaab -=_acffe *_ecbg [_decd ]/_gg .Pow (_afcg ,_acffe +1);};return _cgaab ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_aecdc VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_gbgcf :=_aecdc .verticalRangeReference ();if _dabcb ,_dgbec :=ev .GetFromCache (_gbgcf );_dgbec {return _dabcb ;};_dbcb ,_cdbg :=_eacfd (ctx ,_aecdc ._decad ,_aecdc ._dfceg );_cgege :=_egabge (ctx ,ev ,_dbcb ,_cdbg );ev .SetCache (_gbgcf ,_cgege );return _cgege ;};var _gbafb =map[string ]FunctionComplex {};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfcf :=int (args [0].ValueNumber );return MakeBoolResult (_gfcf ==_gfcf /2*2);};func _babbe (_egacf ,_cadb Result ,_ggd string )(float64 ,float64 ,Result ){_abge ,_ccf :=_ddfd (_egacf ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_ggd );if _ccf .Type ==ResultTypeError {return 0,0,_ccf ;};_agef ,_ccf :=_ddfd (_cadb ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_ggd );if _ccf .Type ==ResultTypeError {return 0,0,_ccf ;};if _abge >=_agef {return 0,0,MakeErrorResultType (ErrorTypeNum ,_ggd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _abge ,_agef ,_efb ;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func (_ecbac *Lexer )nextRaw ()*node {for len (_ecbac ._bbce )!=0{_ggece :=<-_ecbac ._bbce [len (_ecbac ._bbce )-1];if _ggece !=nil {return _ggece ;};_ecbac ._bbce =_ecbac ._bbce [0:len (_ecbac ._bbce )-1];};return <-_ecbac ._eafdag ;};func _ffdb (_gabg ,_fbca ,_afdd ,_agac ,_eeaa ,_bcdc float64 ,_bfeb int )(float64 ,Result ){_ceb :=int (_bcdc );_fac :=_cba (_gabg ,_fbca ,_ceb ,_bfeb );_ageeb :=_ddcg (_gabg ,_fbca ,_ceb ,_bfeb )/_fac ;_egba ,_cbcad :=_ffaaa (_gabg ,_fbca ,_ceb ,_bfeb );if _cbcad .Type ==ResultTypeError {return 0,_cbcad ;};_cgdb :=_bfcd (_gabg ,_fbca ,_ceb ,_bfeb );_abcd :=_eeaa /_gg .Pow (1+_agac /_bcdc ,_egba -1+_ageeb );_abcd -=100*_afdd /_bcdc *_cgdb /_fac ;_gfca :=100*_afdd /_bcdc ;_cffb :=1+_agac /_bcdc ;for _dafe :=0.0;_dafe < _egba ;_dafe ++{_abcd +=_gfca /_gg .Pow (_cffb ,_dafe +_ageeb );};return _abcd ,MakeEmptyResult ();};func _acff (_aae int )int {if _aae < 1900{if _aae < 30{_aae +=2000;}else {_aae +=1900;};};return _aae ;};

// Reference returns an invalid reference for Number.
func (_gbgcb Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _beee (_bcdd string )bool {for _ ,_agd :=range _dcc {_eebd :=_agd .FindStringSubmatch (_bcdd );if len (_eebd )> 1{return true ;};};return false ;};var _efb Result =MakeEmptyResult ();

// IsDBCS returns false for the invalid reference context.
func (_cefgc *ivr )IsDBCS ()bool {return false };

// Eval evaluates the binary expression using the context given.
func (_dee BinaryExpr )String ()string {_fed :="";switch _dee ._da {case BinOpTypePlus :_fed ="\u002b";case BinOpTypeMinus :_fed ="\u002d";case BinOpTypeMult :_fed ="\u002a";case BinOpTypeDiv :_fed ="\u002f";case BinOpTypeExp :_fed ="\u005e";case BinOpTypeLT :_fed ="\u003c";case BinOpTypeGT :_fed ="\u003e";case BinOpTypeEQ :_fed ="\u003d";case BinOpTypeLEQ :_fed ="\u003c\u003d";case BinOpTypeGEQ :_fed ="\u003e\u003d";case BinOpTypeNE :_fed ="\u003c\u003e";case BinOpTypeConcat :_fed ="\u0026";};return _dee ._ac .String ()+_fed +_dee ._fbe .String ();};type yySymType struct{_abddg int ;_fdacf *node ;_gbde Expression ;_cgffe []Expression ;_deg [][]Expression ;};const _acee ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func (_gfaf Result )AsString ()Result {switch _gfaf .Type {case ResultTypeNumber :return MakeStringResult (_gfaf .Value ());default:return _gfaf ;};};var _dbcc []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// Eval evaluates and returns an expression with prefix.
func (_facf PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_cfcc :=_facf ._bcege .Reference (ctx ,ev );switch _cfcc .Type {case ReferenceTypeSheet :if _ddab (_cfcc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_cfcc .Value ));};_dagcg :=ctx .Sheet (_cfcc .Value );return _facf ._fgfdbf .Eval (_dagcg ,ev );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cfcc .Type ));};};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_egfdf :=args [0];if _egfdf .Type !=ResultTypeArray &&_egfdf .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cbaf :=_egfdf .ValueArray ;if len (_cbaf )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_cbaf )));};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_eagdd :=args [0];if _eagdd .Type !=ResultTypeNumber &&_eagdd .Type !=ResultTypeString &&_eagdd .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_bbaff :=args [1].ValueString ;switch _eagdd .Type {case ResultTypeNumber :return MakeStringResult (_ba .Number (_eagdd .ValueNumber ,_bbaff ));case ResultTypeString :return MakeStringResult (_ba .String (_eagdd .ValueString ,_bbaff ));case ResultTypeEmpty :return MakeStringResult (_ba .Number (0,_bbaff ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};const _ebee =16;

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_bgbgc ,_gggb ,_fdfda Expression };

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_bbcd :=len (args );if _bbcd < 5||_bbcd > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_edgg :=args [0].ValueNumber ;if _edgg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdbd :=args [1].ValueNumber ;if _bdbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdda :=args [2].ValueNumber ;if _fdda ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _fdda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgbg :=args [3].ValueNumber ;if _cgbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aebd :=args [4].ValueNumber ;if _cgbg > _aebd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _aebd > _fdda {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_aggg :=2.0;if _bbcd > 5{if args [5].Type ==ResultTypeEmpty {_aggg =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aggg =args [5].ValueNumber ;if _aggg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_bebb :=false ;if _bbcd > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bebb =args [6].ValueNumber !=0;};_ffff :=0.0;_cbeg :=_gg .Floor (_cgbg );_fdc :=_gg .Ceil (_aebd );if _bebb {for _ebdb :=_cbeg +1;_ebdb <=_fdc ;_ebdb ++{_dcaa :=_ebcd (_edgg ,_bdbd ,_fdda ,_ebdb ,_aggg );if _ebdb ==_cbeg +1{_dcaa *=_gg .Min (_aebd ,_cbeg +1)-_cgbg ;}else if _ebdb ==_fdc {_dcaa *=_aebd +1-_fdc ;};_ffff +=_dcaa ;};}else {_eedgg :=_fdda ;var _fddf float64 ;if !_cdbee (_cgbg ,_gg .Floor (_cgbg )){if _aggg ==1{_cfda :=_fdda /2;if _cgbg > _cfda ||_cdbee (_cgbg ,_cfda ){_fddf =_cgbg -_cfda ;_cgbg =_cfda ;_aebd -=_fddf ;_eedgg ++;};};};if _aggg !=0{_edgg -=_effc (_edgg ,_bdbd ,_fdda ,_eedgg ,_cgbg ,_aggg );};_ffff =_effc (_edgg ,_bdbd ,_fdda ,_fdda -_cgbg ,_aebd -_cgbg ,_aggg );};return MakeNumberResult (_ffff );};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;type durationArgs struct{_agde float64 ;_ggc float64 ;_afbg float64 ;_bec float64 ;_bbf float64 ;_dacd int ;};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_edgeb :=args [0].AsString ();_ffac :=args [1].AsString ();if _edgeb .Type !=ResultTypeString ||_ffac .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_edgeb .ValueString ==_ffac .ValueString );};

// Reference returns a string reference value to a vertical range with prefix.
func (_addab PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_decfe :=_addab ._eeae .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_addab .verticalRangeReference (_decfe .Value )};};func _ecgc (_cgaag string ,_bggc []Result )(*parsedSearchObject ,Result ){_adaeb :=len (_bggc );if _adaeb !=2&&_adaeb !=3{return nil ,MakeErrorResult (_cgaag +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aabf :=_bggc [0];if _aabf .Type ==ResultTypeError {return nil ,_aabf ;};if _aabf .Type !=ResultTypeString &&_aabf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_bcabb :=_bggc [1];if _bcabb .Type ==ResultTypeError {return nil ,_bcabb ;};if _bcabb .Type !=ResultTypeString &&_bcabb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_fdgg :=_bcabb .Value ();_dcebb :=_aabf .Value ();_acde :=1;if _adaeb ==3&&_bggc [2].Type !=ResultTypeEmpty {_abfaa :=_bggc [2];if _abfaa .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_acde =int (_abfaa .ValueNumber );if _acde < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _acde > len (_fdgg ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_dcebb ,_fdgg ,_acde },_efb ;};func _gcef (_eebc ,_gbgb ,_gbf ,_bcad float64 ,_edadf int )float64 {var _ebgff float64 ;if _eebc ==0{_ebgff =_bcad +_gbf *_gbgb ;}else {_eabf :=_gg .Pow (1+_eebc ,_gbgb );if _edadf ==1{_ebgff =_bcad *_eabf +_gbf *(1+_eebc )*(_eabf -1)/_eebc ;}else {_ebgff =_bcad *_eabf +_gbf *(_eabf -1)/_eebc ;};};return -_ebgff ;};const _aeb ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_egdec :=_c .Split (v ,"\u003a");if len (_egdec )!=2{return nil ;};_abga ,_ :=_fe .Atoi (_egdec [0]);_adacb ,_ :=_fe .Atoi (_egdec [1]);if _abga > _adacb {_abga ,_adacb =_adacb ,_abga ;};return PrefixHorizontalRange {_cdea :pfx ,_cdaca :_abga ,_dabc :_adacb };};func (_fbbbc ResultType )String ()string {if _fbbbc >=ResultType (len (_egffc )-1){return _a .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fbbbc );};return _eefe [_egffc [_fbbbc ]:_egffc [_fbbbc +1]];};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_ggee :=1.0;for _ ,_bega :=range args {_bega =_bega .AsNumber ();switch _bega .Type {case ResultTypeNumber :_ggee *=_bega .ValueNumber ;case ResultTypeList ,ResultTypeArray :_fgaac :=Product (_bega .ListValues ());if _fgaac .Type !=ResultTypeNumber {return _fgaac ;};_ggee *=_fgaac .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bega ;case ResultTypeEmpty :default:return MakeErrorResult (_a .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_bega .Type ));};};return MakeNumberResult (_ggee );};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ddbd :=args [0];switch _ddbd .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_cfcb :=0.0;_eceeb :=0.0;for _ ,_cebf :=range _ddbd .ValueString {_bgdga :=0.0;switch _cebf {case 'I':_bgdga =1;case 'V':_bgdga =5;case 'X':_bgdga =10;case 'L':_bgdga =50;case 'C':_bgdga =100;case 'D':_bgdga =500;case 'M':_bgdga =1000;};_cfcb +=_bgdga ;switch {case _eceeb ==_bgdga &&(_eceeb ==5||_eceeb ==50||_eceeb ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_eceeb ==_bgdga :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _eceeb < _bgdga {_cfcb -=2*_eceeb ;};_eceeb =_bgdga ;};return MakeNumberResult (_cfcb );case ResultTypeError :return _ddbd ;default:return MakeErrorResult (_a .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ddbd .Type ));};};func _eacd (_bbgc []string ,_fcdb int )string {return _fe .Itoa (len (_bbgc [len (_bbgc )-1-_fcdb ]))};func _ffae (_fdd ,_ebe int64 )float64 {return float64 (int (0.5+float64 ((_ebe -_fdd )/86400)))};func _cbdab (_babg string ,_fgba []Result )(*parsedReplaceObject ,Result ){if len (_fgba )!=4{return nil ,MakeErrorResult (_babg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _fgba [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_babg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dfdg :=_fgba [0].ValueString ;if _fgba [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_babg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_aaac :=int (_fgba [1].ValueNumber )-1;if _fgba [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_babg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_eccg :=int (_fgba [2].ValueNumber );if _fgba [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_babg +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_edgga :=_fgba [3].ValueString ;return &parsedReplaceObject {_dfdg ,_aaac ,_eccg ,_edgga },_efb ;};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_bfgd :=len (args );if _bfgd !=3&&_bfgd !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aecdd ,_aadgf :=_dadg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _aadgf .Type ==ResultTypeError {return _aadgf ;};_dafed ,_aadgf :=_dadg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _aadgf .Type ==ResultTypeError {return _aadgf ;};_fggbb ,_aadgf :=_dadg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _aadgf .Type ==ResultTypeError {return _aadgf ;};_dfdc :=0;if _bfgd ==3{return MakeStringResult (_c .Replace (_aecdd ,_dafed ,_fggbb ,-1));}else {_adfe ,_cegc :=_eaba (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _cegc .Type ==ResultTypeError {return _cegc ;};_dfdc =int (_adfe );if _dfdc < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_fbgaa :=_aecdd ;_bgdd :=_dfdc ;_dgba :=-1;_eddc :=len (_dafed );_ebdgd :=0;for {_bgdd --;_cefda :=_c .Index (_fbgaa ,_dafed );if _cefda ==-1{_dgba =-1;break ;}else {_dgba =_cefda +_ebdgd ;if _bgdd ==0{break ;};_ccdba :=_eddc +_cefda ;_ebdgd +=_ccdba ;_fbgaa =_fbgaa [_ccdba :];};};if _dgba ==-1{return MakeStringResult (_aecdd );}else {_bceff :=_aecdd [:_dgba ];_aabg :=_aecdd [_dgba +_eddc :];return MakeStringResult (_bceff +_fggbb +_aabg );};};};func _gdcg (_gdead ,_bgf []float64 ,_dcdg float64 )Result {_gfc :=false ;_gfbb :=false ;for _dcda :=0;_dcda < len (_gdead );_dcda ++{if _gdead [_dcda ]> 0{_gfc =true ;};if _gdead [_dcda ]< 0{_gfbb =true ;};};if !_gfc ||!_gfbb {return MakeErrorResultType (ErrorTypeNum ,"");};_acacc :=_dcdg ;_ffec :=1e-10;_eafd :=0;_ebbc :=50;_fecf :=false ;for {_gfdg :=_edaf (_gdead ,_bgf ,_acacc );_cfbg :=_acacc -_gfdg /_ffed (_gdead ,_bgf ,_acacc );_eggd :=_gg .Abs (_cfbg -_acacc );_acacc =_cfbg ;_eafd ++;if _eggd <=_ffec ||_gg .Abs (_gfdg )<=_ffec {break ;};if _eafd > _ebbc {_fecf =true ;break ;};};if _fecf ||_gg .IsNaN (_acacc )||_gg .IsInf (_acacc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_acacc );};const _dae =_dc .Second *1;

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_bffg ,_cfbc :=_gad (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _cfbc .Type ==ResultTypeError {return _cfbc ;};_ead :=_bffg ._fgg ;_dfab :=_bffg ._cgaa ;_bbfb :=_bffg ._cbeb ;_aaag :=_bffg ._baffg ;_ecc :=_bffg ._bcec ;_geec :=_bffg ._fagb ;if _geec >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_egfb :=_bffg ._fcc ;_gafa :=1.0/_geec ;_aggcb :=2.5;if _gafa < 3{_aggcb =1;}else if _gafa < 5{_aggcb =1.5;}else if _gafa <=6{_aggcb =2;};_geec *=_aggcb ;_ebdg ,_bfgec :=_gbcg (_dfab ,_bbfb ,_egfb );if _bfgec .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_eebdf :=_fgee (_ebdg *_geec *_ead );_ead -=_eebdf ;_ddff :=_ead -_aaag ;for _ggef :=0;_ggef < _ecc ;_ggef ++{_eebdf =_fgee (_geec *_ead );_ddff -=_eebdf ;if _ddff < 0{switch _ecc -_ggef {case 0:case 1:return MakeNumberResult (_fgee (_ead *0.5));default:return MakeNumberResult (0);};};_ead -=_eebdf ;};return MakeNumberResult (_eebdf );};type noCache struct{};

// Reference returns a string reference value to a range with prefix.
func (_aabd PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_gegb :=_aabd ._bgbgc .Reference (ctx ,ev );_bfaf :=_aabd ._gggb .Reference (ctx ,ev );_cfae :=_aabd ._fdfda .Reference (ctx ,ev );if _gegb .Type ==ReferenceTypeSheet &&_bfaf .Type ==ReferenceTypeCell &&_cfae .Type ==ReferenceTypeCell {return MakeRangeReference (_ffafb (_gegb ,_bfaf ,_cfae ));};return ReferenceInvalid ;};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_def :=&defEval {};_def .evCache =_cdg ();return _def };func (_aada Result )String ()string {return _aada .Value ()};

// Match implements the MATCH function.
func Match (args []Result )Result {_bbfg :=len (args );if _bbfg !=2&&_bbfg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efdcg :=1;if _bbfg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_gbcc :=args [2].ValueNumber ;if _gbcc ==-1||_gbcc ==0{_efdcg =int (_gbcc );};};_ceab :=args [1];var _bbdaa []Result ;switch _ceab .Type {case ResultTypeList :_bbdaa =_ceab .ValueList ;case ResultTypeArray :_bbac :=_ceab .ValueArray ;for _ ,_gbdg :=range _bbac {if len (_gbdg )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_bbdaa =append (_bbdaa ,_gbdg [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_dacea :=_cbead (args [0]);switch _efdcg {case 0:for _edbc ,_ecbf :=range _bbdaa {if _egdc (_ecbf ,_dacea ){return MakeNumberResult (float64 (_edbc +1));};};case -1:for _cccd :=0;_cccd < len (_bbdaa );_cccd ++{if _egdc (_bbdaa [_cccd ],_dacea ){return MakeNumberResult (float64 (_cccd +1));};if _dacea ._abca &&(_bbdaa [_cccd ].ValueNumber < _dacea ._ffbae ){if _cccd ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_cccd ));};};case 1:for _aeea :=0;_aeea < len (_bbdaa );_aeea ++{if _egdc (_bbdaa [_aeea ],_dacea ){return MakeNumberResult (float64 (_aeea +1));};if _dacea ._abca &&(_bbdaa [_aeea ].ValueNumber > _dacea ._ffbae ){if _aeea ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_aeea ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};func (_fbg BinOpType )String ()string {if _fbg >=BinOpType (len (_gdc )-1){return _a .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_fbg );};return _ded [_gdc [_fbg ]:_gdc [_fbg +1]];};

// Reference returns a string reference value to a vertical range.
func (_gegeg VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_gegeg .verticalRangeReference ()};};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdce :=args [0];switch _bdce .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_bad :=_fbec (_bdce .ValueNumber );return MakeNumberResult (float64 (_bad .Minute ()));case ResultTypeString :_faa :=_c .ToLower (_bdce .ValueString );if !_beee (_faa ){_ ,_ ,_ ,_feb ,_ddec :=_baefa (_faa );if _ddec .Type ==ResultTypeError {_ddec .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _ddec ;};if _feb {return MakeNumberResult (0);};};_ ,_ebce ,_ ,_ ,_ ,_ecd :=_dfb (_faa );if _ecd .Type ==ResultTypeError {return _ecd ;};return MakeNumberResult (float64 (_ebce ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};func _dcfca (_ccfae Result ,_eaaaac *criteriaParsed )bool {_efccc :=_c .ToLower (_ccfae .ValueString );_cgbe :=_eaaaac ._bagc ._acgf ;_dfcf :=_eaaaac ._bagc ._feba ;if _cgbe ==_bbgf {return _efccc ==_dfcf ||_fb .Match (_dfcf ,_efccc );};if _ccfae .Type !=ResultTypeEmpty {if _efccc ==_eaaaac ._ebcc ||_fb .Match (_eaaaac ._ebcc ,_efccc ){return true ;};if _ ,_cggf :=_fe .ParseFloat (_dfcf ,64);_cggf ==nil {return false ;};switch _cgbe {case _bdaed :return _efccc <=_dfcf ;case _febd :return _efccc >=_dfcf ;case _agbac :return _efccc < _dfcf ;case _feadc :return _efccc > _dfcf ;};};return false ;};var _gdc =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_dgaa ,_cffg ,_bage :=_fcbb (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _bage .Type ==ResultTypeError {return _bage ;};if _cffg < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _dgaa ==0{return MakeNumberResult (0);};_ffcf :=_dgaa < 0;if _ffcf {_dgaa =-_dgaa ;};_cgce :=args [0].Value ();_edbbf :=_c .Split (_cgce ,"\u002e");_dafg :=float64 (int (_dgaa ));_beab :=_edbbf [1];_dacaa :=len (_beab );_cfgfa :=int (_gg .Log10 (_cffg ))+1;_bcde :=float64 (_cfgfa -_dacaa );_fab ,_aaad :=_fe .ParseFloat (_beab ,64);if _aaad !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_fab *=_gg .Pow (10,_bcde );_dab :=_dafg +_fab /_cffg ;if _ffcf {_dab =-_dab ;};return MakeNumberResult (_dab );};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_cffc PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_dbfdg :=_cffc ._bgbgc .Reference (ctx ,ev );_afbga :=_cffc ._gggb .Reference (ctx ,ev );_ffecf :=_cffc ._fdfda .Reference (ctx ,ev );switch _dbfdg .Type {case ReferenceTypeSheet :if _ddab (_dbfdg ,ctx ){return MakeErrorResultType (ErrorTypeName ,_a .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dbfdg .Value ));};_gdgb :=_ffafb (_dbfdg ,_afbga ,_ffecf );if _afbga .Type ==ReferenceTypeCell &&_ffecf .Type ==ReferenceTypeCell {if _cbgfg ,_gdec :=ev .GetFromCache (_gdgb );_gdec {return _cbgfg ;}else {_bbga :=_egabge (ctx .Sheet (_dbfdg .Value ),ev ,_afbga .Value ,_ffecf .Value );ev .SetCache (_gdgb ,_bbga );return _bbga ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_gdgb );default:return MakeErrorResult (_a .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dbfdg .Type ));};};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);func _ddab (_dcdc Reference ,_aaedb Context )bool {return _aaedb .Sheet (_dcdc .Value )==InvalidReferenceContext ;};

// Reference returns an invalid reference for Error.
func (_bbg Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdfca :=args [0].AsString ();if _fdfca .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_fdfca .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_fdfca .ValueString [0]));};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_abdec :s }};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};var _acefa =[...]uint8 {0,20,37,60,78,96};var _cga =map[string ]*_d .Regexp {};func _dbac (_gdfd ,_edab Expression )(Expression ,Expression ,error ){_agdff ,_ceefa :=_gdfd .(CellRef );if !_ceefa {return nil ,nil ,_b .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_gdfd .String ()));};_gabd ,_ceefa :=_edab .(CellRef );if !_ceefa {return nil ,nil ,_b .New (_a .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_edab .String ()));};_deebd ,_gdgfd :=_ga .ParseCellReference (_agdff ._ebc );if _gdgfd !=nil {return nil ,nil ,_gdgfd ;};_ddddg ,_dfgf :=_ga .ParseCellReference (_gabd ._ebc );if _dfgf !=nil {return nil ,nil ,_dfgf ;};_aafc :=false ;if _deebd .RowIdx > _ddddg .RowIdx {_aafc =true ;_deebd .RowIdx ,_ddddg .RowIdx =_ddddg .RowIdx ,_deebd .RowIdx ;};if _deebd .ColumnIdx > _ddddg .ColumnIdx {_aafc =true ;_deebd .ColumnIdx ,_ddddg .ColumnIdx =_ddddg .ColumnIdx ,_deebd .ColumnIdx ;_deebd .Column ,_ddddg .Column =_ddddg .Column ,_deebd .Column ;};if _aafc {return NewCellRef (_deebd .String ()),NewCellRef (_ddddg .String ()),nil ;};return _gdfd ,_edab ,nil ;};func _bcbd (_baae Result )[][]Result {switch _baae .Type {case ResultTypeArray :return _baae .ValueArray ;case ResultTypeList :return [][]Result {_baae .ValueList };default:return [][]Result {};};};func NewLexer ()*Lexer {return &Lexer {_eafdag :make (chan *node )}};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_ggec :=len (args );if (_ggec !=2&&_ggec !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cadf :=0;if _ggec ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cadf =int (args [2].ValueNumber );if !_addc (_cadf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgd :=args [1].ValueNumber ;_acb ,_gbgc :=_gbcg (_ddb ,_bgd ,_cadf );if _gbgc .Type ==ResultTypeError {return _gbgc ;};return MakeNumberResult (_acb );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};func _cdg ()evCache {_cee :=evCache {};_cee ._edbb =make (map[string ]Result );_cee ._egf =&_ec .Mutex {};return _cee ;};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggacf :=args [0];if _ggacf .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faea :=len (_ggacf .ValueArray );for _ ,_dggde :=range _ggacf .ValueArray {if len (_dggde )!=_faea {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_cgfc (_ggacf .ValueArray ));};func _effc (_bgec ,_ceba ,_deeae ,_cfef ,_bcfa ,_effbg float64 )float64 {var _abdg ,_gebgd float64 ;_ggeg :=0.0;_gcgc :=_gg .Ceil (_bcfa );_bfbfc :=_bgec -_ceba ;_abggd :=false ;_dfff :=0.0;for _fabf :=1.0;_fabf <=_gcgc ;_fabf ++{if !_abggd {_abdg =_ebcd (_bgec ,_ceba ,_deeae ,_fabf ,_effbg );_dfff =_bfbfc /(_deeae -_fabf +1);if _dfff > _abdg {_gebgd =_dfff ;_abggd =true ;}else {_gebgd =_abdg ;_bfbfc -=_abdg ;};}else {_gebgd =_dfff ;};if _fabf ==_gcgc {_gebgd *=_bcfa +1-_gcgc ;};_ggeg +=_gebgd ;};return _ggeg ;};

// Eval evaluates and returns the result of a sheet expression.
func (_cbegg SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};func (_baaca HorizontalRange )horizontalRangeReference ()string {return _a .Sprintf ("\u0025\u0064\u003a%\u0064",_baaca ._fbab ,_baaca ._fdce );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// Reference returns an invalid reference for BinaryExpr.
func (_cf BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _bgag (_bfcc int ,_dafbf _dc .Month ,_gag int )int64 {if _bfcc ==1900&&int (_dafbf )<=2{_gag --;};_gefd :=_dc .Date (_bfcc ,_dafbf ,_gag ,0,0,0,0,_dc .UTC );return _gefd .Unix ();};var _bcecc ,_dcef ,_faed ,_eaeb ,_dfca ,_bfceg ,_fadce ,_ecac ,_ffbg ,_fcgg ,_febg ,_ffbgb ,_agfaa ,_cgf ,_gecdb *_d .Regexp ;

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};func _bbaca (){_bcecc =_d .MustCompile ("\u005e\u0030\u002b\u0024");_faed =_d .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_eaeb =_d .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_dcef =_d .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_dfca =_d .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_bfceg =_d .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_fadce =_d .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_ffbg =_d .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_fcgg =_d .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_febg =_d .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_ffbgb =_d .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_agfaa =_d .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fgfdb +_fgfdb +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_fgfdb +_fgfdb +"\u0029\u002b\u0059+\u0024");_cgf =_d .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_fgfdb +_fgfdb +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_fgfdb +_fgfdb +"\u0029\u002b\u0059+\u0024");_gecdb =_d .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_ecac =_d .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};func _dbba (_eedeg Result ,_aaec int )[]Result {_cab :=[]Result {};switch _eedeg .Type {case ResultTypeList :_gcacd :=_eedeg .ValueList ;_gbec :=len (_gcacd );for _bagag :=0;_bagag < _aaec ;_bagag ++{if _bagag < _gbec {_cab =append (_cab ,_gcacd [_bagag ]);}else {_cab =append (_cab ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _adcb :=0;_adcb < _aaec ;_adcb ++{_cab =append (_cab ,_eedeg );};};return _cab ;};func _eeca (_cda []Result ,_cdge string )(*durationArgs ,Result ){_ecg :=len (_cda );if _ecg !=5&&_ecg !=6{return nil ,MakeErrorResult (_cdge +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddde ,_aega ,_bfce :=_babbe (_cda [0],_cda [1],_cdge );if _bfce .Type ==ResultTypeError {return nil ,_bfce ;};_bdef :=_cda [2];if _bdef .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdge +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gebb :=_bdef .ValueNumber ;if _gebb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_bggf :=_cda [3];if _bggf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdge +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fbgb :=_bggf .ValueNumber ;if _fbgb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_faee :=_cda [4];if _faee .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdge +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edad :=float64 (int (_faee .ValueNumber ));if !_egec (_edad ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_aacd :=0;if _ecg ==6&&_cda [5].Type !=ResultTypeEmpty {_cfd :=_cda [5];if _cfd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cdge +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aacd =int (_cfd .ValueNumber );if !_addc (_aacd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_cdge );};};return &durationArgs {_ddde ,_aega ,_gebb ,_fbgb ,_edad ,_aacd },_efb ;};type yyParserImpl struct{_bebba yySymType ;_gage [_ebee ]yySymType ;_aefc int ;};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffdd :=args [0];switch _ffdd .Type {case ResultTypeError :return _ffdd ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_ffdd .ValueNumber !=0);};if _ffdd .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _dccb (args );case ResultTypeArray :return _cafbg (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_ggedc :=len (args );if _ggedc < 3||_ggedc > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcb :=args [0].ValueNumber ;if _bcb !=float64 (int (_bcb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfdd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_agcgb :=args [2].ValueNumber ;_gaab :=0.0;if _ggedc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gaab =args [3].ValueNumber ;};_aecb :=0.0;if _ggedc >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aecb =args [4].ValueNumber ;if _aecb !=0{_aecb =1;};};_ebfg :=0.1;if _ggedc >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebfg =args [5].ValueNumber ;};_edcg :=100;_dgdfa :=0;_dace :=false ;_egfdc :=1e-6;_ddbbe :=_ebfg ;for _dgdfa < _edcg &&!_dace {_adce :=_gg .Pow (_ddbbe +1,_bcb );_bebgc :=_gg .Pow (_ddbbe +1,_bcb -1);_cgceg :=_ddbbe *_aecb +1;_bdfd :=_bfdd *(_adce -1);_fcge :=_gaab +_adce *_agcgb +_bdfd *_cgceg /_ddbbe ;_eacg :=_bcb *_bebgc *_agcgb -_bdfd *_cgceg /_gg .Pow (_ddbbe ,2);_gcfb :=(_bcb *_bfdd *_bebgc *_cgceg +_bdfd *_aecb )/_ddbbe ;_ccbc :=_fcge /(_eacg +_gcfb );if _gg .Abs (_ccbc )< _egfdc {_dace =true ;};_dgdfa ++;_ddbbe -=_ccbc ;};return MakeNumberResult (_ddbbe );};func _egad ()yyParser {return &yyParserImpl {}};

// String returns a string representation of PrefixExpr.
func (_gcgcc PrefixExpr )String ()string {return _a .Sprintf ("\u0025\u0073\u0021%\u0073",_gcgcc ._bcege .String (),_gcgcc ._fgfdbf .String ());};func _defe (_ddf ,_adfd int )int {if _adfd ==2&&_cbb (_ddf ){return 29;}else {return _bfc [_adfd -1];};};func _agfa (_cfad ,_dcfd ,_beae ,_cbbb ,_ecaf float64 ,_dgdf int )float64 {_cacec :=_gfec (_cfad ,_beae ,_cbbb ,_ecaf ,_dgdf );var _baeda float64 ;if _dcfd ==1{if _dgdf ==1{_baeda =0;}else {_baeda =-_cbbb ;};}else {if _dgdf ==1{_baeda =_gcef (_cfad ,_dcfd -2,_cacec ,_cbbb ,1)-_cacec ;}else {_baeda =_gcef (_cfad ,_dcfd -1,_cacec ,_cbbb ,0);};};return _baeda *_cfad ;};