//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_e "bytes";_da "errors";_f "fmt";_edb "github.com/unidoc/unioffice";_eab "github.com/unidoc/unioffice/internal/mergesort";_bf "github.com/unidoc/unioffice/internal/wildcard";_cb "github.com/unidoc/unioffice/spreadsheet/format";_ae "github.com/unidoc/unioffice/spreadsheet/reference";_b "github.com/unidoc/unioffice/spreadsheet/update";_a "io";_ee "math";_fc "math/big";_ad "math/rand";_df "regexp";_de "sort";_af "strconv";_ed "strings";_eb "sync";_ea "time";_c "unicode";);

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ecd :=args [0].ValueNumber ;_cecf :=args [1].ValueNumber ;_fgb :=args [2].ValueNumber ;_ebbc :=_ggd (_ecd ,_cecf ,_fgb );if _ebbc >=0{return MakeNumberResult (_ebbc );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};var _cbgb =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _edee string =string ([]byte {92});

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gef :=args [0];switch _gef .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_egaba :=_ffee (_gef .ValueNumber );return MakeNumberResult (float64 (_egaba .Minute ()));case ResultTypeString :_dbef :=_ed .ToLower (_gef .ValueString );if !_ddeb (_dbef ){_ ,_ ,_ ,_cgfa ,_eccf :=_aecc (_dbef );if _eccf .Type ==ResultTypeError {_eccf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _eccf ;};if _cgfa {return MakeNumberResult (0);};};_ ,_fac ,_ ,_ ,_ ,_fcfb :=_debc (_dbef );if _fcfb .Type ==ResultTypeError {return _fcfb ;};return MakeNumberResult (float64 (_fac ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gdg :=_ed .ToLower (args [0].ValueString );if !_ddeb (_gdg ){_ ,_ ,_ ,_eaa ,_acecf :=_aecc (_gdg );if _acecf .Type ==ResultTypeError {_acecf .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _acecf ;};if _eaa {return MakeNumberResult (0);};};_gfd ,_ecca ,_gbb ,_aegc ,_ ,_bba :=_debc (_gdg );if _bba .Type ==ResultTypeError {return _bba ;};_dcg :=_ggd (float64 (_gfd ),float64 (_ecca ),_gbb );if _aegc {_dcg +=0.5;}else if _dcg >=1{_dcg -=float64 (int (_dcg ));};return MakeNumberResult (_dcg );};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_deda :=args [0];if _deda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbga :=int (_deda .ValueNumber );if _fbga < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_fbga {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_fbga ];};const _dffa =57356;var _fbf =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _cgab (_agbg []Result ,_gfbe bool )Result {_bbgg :="\u004d\u0049\u004e";if _gfbe {_bbgg ="\u004d\u0049\u004e\u0041";};if len (_agbg )==0{return MakeErrorResult (_bbgg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdca :=_ee .MaxFloat64 ;for _ ,_dfgde :=range _agbg {switch _dfgde .Type {case ResultTypeNumber :if (_gfbe ||!_dfgde .IsBoolean )&&_dfgde .ValueNumber < _gdca {_gdca =_dfgde .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_adbbf :=_cgab (_dfgde .ListValues (),_gfbe );if _adbbf .ValueNumber < _gdca {_gdca =_adbbf .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_deadb :=0.0;if _gfbe {_deadb =_dfgde .AsNumber ().ValueNumber ;};if _deadb < _gdca {_gdca =_deadb ;};default:_edb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_bbgg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfgde .Type );};};if _gdca ==_ee .MaxFloat64 {_gdca =0;};return MakeNumberResult (_gdca );};const _eeec =1;var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cabd :=args [0].AsNumber ();if _cabd .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _cabd .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_ebfb (_cabd .ValueNumber ));};var _bddga =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};func (_fbgb tokenType )String ()string {return _bdcd (int (_fbgb ))};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbcc :=args [0].AsString ();if _bbcc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdgd :=_e .Buffer {};for _ ,_deaea :=range _bbcc .ValueString {if _c .IsPrint (_deaea ){_bdgd .WriteRune (_deaea );};};return MakeStringResult (_bdgd .String ());};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_begb :=args [0].ValueNumber ;_afea :=args [1].ValueNumber ;if _afea < _begb {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _afea ==_begb {return MakeNumberResult (0);};_abee :=_ed .ToLower (args [2].ValueString );if _abee =="\u0064"{return MakeNumberResult (_afea -_begb );};_aab :=_ffee (_begb );_ddbe :=_ffee (_afea );_cab ,_cbde ,_ebca :=_aab .Date ();_abc ,_gaba ,_bcfd :=_ddbe .Date ();_abf :=int (_cbde );_eea :=int (_gaba );var _bda float64 ;switch _abee {case "\u0079":_bda =float64 (_abc -_cab );if _eea < _abf ||(_eea ==_abf &&_bcfd < _ebca ){_bda --;};case "\u006d":_fbfb :=_abc -_cab ;_fcf :=_eea -_abf ;if _bcfd < _ebca {_fcf --;};if _fcf < 0{_fbfb --;_fcf +=12;};_bda =float64 (_fbfb *12+_fcf );case "\u006d\u0064":_eef :=_eea ;if _bcfd < _ebca {_eef --;};_bda =float64 (int (_afea -_fee (_abc ,_eef ,_ebca )));case "\u0079\u006d":_bda =float64 (_eea -_abf );if _bcfd < _ebca {_bda --;};if _bda < 0{_bda +=12;};case "\u0079\u0064":_fafg :=_abc ;if _eea < _abf ||(_eea ==_abf &&_bcfd < _ebca ){_fafg --;};_bda =float64 (int (_afea -_fee (_fafg ,_abf ,_ebca )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_bda );};func _aee ()evCache {_ceb :=evCache {};_ceb ._aca =make (map[string ]Result );_ceb ._cbbf =&_eb .Mutex {};return _ceb ;};type criteriaParsed struct{_gefbf bool ;_faab float64 ;_baecb string ;_ecga *criteriaRegex ;};

// Eval evaluates a vertical range returning a list of results or an error.
func (_bcbaf VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dccfg :=_bcbaf .verticalRangeReference ();if _ddfdf ,_bcefd :=ev .GetFromCache (_dccfg );_bcefd {return _ddfdf ;};_dgeec ,_ggccbg :=_cdeg (ctx ,_bcbaf ._dcfbe ,_bcbaf ._dfeec );_deddd :=_acegg (ctx ,ev ,_dgeec ,_ggccbg );ev .SetCache (_dccfg ,_deddd );return _deddd ;};var _aec Result =MakeEmptyResult ();

// String returns a string representation of ConstArrayExpr.
func (_ada ConstArrayExpr )String ()string {return ""};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdef :=args [0];switch _cdef .Type {case ResultTypeError :return _cdef ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_cdef .ValueNumber !=0);};if _cdef .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _eccfd (args );case ResultTypeArray :return _fbeca (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};func _fbb (_eadb ,_egf float64 ,_bbd int )(float64 ,Result ){_fbbf ,_dcda :=_ffee (_eadb ),_ffee (_egf );_bac :=_fbbf .Unix ();_aeaf :=_dcda .Unix ();if _bac ==_aeaf {return 0,_aec ;};_aeeb ,_edf ,_gebe :=_fbbf .Date ();_ecgg ,_fag ,_cfb :=_dcda .Date ();_abgb ,_dbbc :=int (_edf ),int (_fag );var _gea ,_gcd float64 ;switch _bbd {case 0:if _gebe ==31{_gebe --;};if _gebe ==30&&_cfb ==31{_cfb --;}else if _fcef :=_dgdb (_aeeb );_abgb ==2&&((_fcef &&_gebe ==29)||(!_fcef &&_gebe ==28)){_gebe =30;if _efa :=_dgdb (_ecgg );_dbbc ==2&&((_efa &&_cfb ==29)||(!_efa &&_cfb ==28)){_cfb =30;};};_gea =float64 ((_ecgg -_aeeb )*360+(_dbbc -_abgb )*30+(_cfb -_gebe ));_gcd =360;case 1:_gea =_egf -_eadb ;_cceg :=_aeeb !=_ecgg ;if _cceg &&(_ecgg !=_aeeb +1||_abgb < _dbbc ||(_abgb ==_dbbc &&_gebe < _cfb )){_gcc :=0;for _cge :=_aeeb ;_cge <=_ecgg ;_cge ++{_gcc +=_dbbab (_cge ,1);};_gcd =float64 (_gcc )/float64 (_ecgg -_aeeb +1);}else {if !_cceg &&_dgdb (_aeeb ){_gcd =366;}else {if _cceg &&((_dgdb (_aeeb )&&(_abgb < 2||(_abgb ==2&&_gebe <=29)))||(_dgdb (_ecgg )&&(_dbbc > 2||(_dbbc ==2&&_cfb ==29)))){_gcd =366;}else {_gcd =365;};};};case 2:_gea =_egf -_eadb ;_gcd =360;case 3:_gea =_egf -_eadb ;_gcd =365;case 4:if _gebe ==31{_gebe --;};if _cfb ==31{_cfb --;};_gea =float64 ((_ecgg -_aeeb )*360+(_dbbc -_abgb )*30+(_cfb -_gebe ));_gcd =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _gea /_gcd ,_aec ;};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_bdbf ,_egcd :=_beae (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _egcd .Type ==ResultTypeError {return _egcd ;};_ddfb :=_bdbf ._bcbe ;_daa :=_bdbf ._cebg ;_bfbg ,_egcd :=_egeg (_bdbf ._eeg ,_bdbf ._fgdg ,_ddfb ,_daa );if _egcd .Type ==ResultTypeError {return _egcd ;};return MakeNumberResult (_bfbg );};

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_gbgbd :=len (args );if _gbgbd < 3||_gbgbd > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcffe :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_bafg :=args [1].ValueNumber ;if _bafg !=float64 (int (_bafg )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geec :=args [2].ValueNumber ;_dbae :=0.0;if _gbgbd >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbae =args [3].ValueNumber ;};_faeg :=0;if _gbgbd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_faeg =int (args [4].ValueNumber );if _faeg !=0{_faeg =1;};};return MakeNumberResult (_gfbg (_fcffe ,_bafg ,_geec ,_dbae ,_faeg ));};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acec :=int (args [0].ValueNumber );if _acec < 0||_acec >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _acec <=1899{_acec +=1900;};_ffdf :=_ea .Month (args [1].ValueNumber );_cgbf :=int (args [2].ValueNumber );_eaeb :=_gfdc (_acec ,_ffdf ,_cgbf );_fga :=_abga (_acd ,_eaeb )+1;if _fga < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_fga );};func _bbg (_dga ,_abad ,_feg int )int {if _dga > _abad {return 0;};if _gdfd (_feg ){return (_abad -_dga +1)*360;};_aeee :=0;for _gaeg :=_dga ;_gaeg <=_abad ;_gaeg ++{_faff :=365;if _dgdb (_gaeg ){_faff =366;};_aeee +=_faff ;};return _aeee ;};var _deeea *_ad .Rand ;

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_bgdee SheetPrefixExpr )Update (q *_b .UpdateQuery )Expression {return _bgdee };

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_gdbe :=len (args );if _gdbe < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gdbe > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbcg :=args [0];_ebdcg :=args [1];if _ebdcg .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_faef :=args [2].AsNumber ();if _faef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dadbg :=false ;if _gdbe ==4&&args [3].Type !=ResultTypeEmpty {_bedd :=args [3].AsNumber ();if _bedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bedd .ValueNumber ==0{_dadbg =true ;};};_cdb :=int (_faef .ValueNumber )-1;_fdfee :=-1;_bcbd :=false ;_gdff :for _gbdaf ,_gbeb :=range _ebdcg .ValueArray {if len (_gbeb )==0{continue ;};_fcgf :=_gbeb [0];switch _gfde (_fcgf ,_dbcg ,false ,_dadbg ){case _dbfga :_fdfee =_gbdaf ;case _cace :_fdfee =_gbdaf ;_bcbd =true ;break _gdff ;};};if _fdfee ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_ggdeg :=_ebdcg .ValueArray [_fdfee ];if _cdb < 0||_cdb >=len (_ggdeg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _bcbd ||!_dadbg {return _ggdeg [_cdb ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func _ecce (){_edad =_df .MustCompile ("\u005e\u0030\u002b\u0024");_dgebf =_df .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_cacde =_df .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_agfcg =_df .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_ccgbd =_df .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_decc =_df .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_gebc =_df .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_ebcb =_df .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_adaf =_df .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_afcf =_df .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_cdag =_df .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_cfgf =_df .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_edee +_edee +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_edee +_edee +"\u0029\u002b\u0059+\u0024");_gcec =_df .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_edee +_edee +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_edee +_edee +"\u0029\u002b\u0059+\u0024");_gabfc =_df .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_abbf =_df .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dece :=args [0].AsString ();if _dece .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_dece .ValueString ,ev );};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cgf :=args [0];switch _cgf .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_gae :=_ffee (_cgf .ValueNumber );return MakeNumberResult (float64 (_gae .Day ()));case ResultTypeString :_fdf :=_ed .ToLower (_cgf .ValueString );if !_egg (_fdf ){_ ,_ ,_ ,_ ,_gcg ,_aag :=_debc (_fdf );if _aag .Type ==ResultTypeError {_aag .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _aag ;};if _gcg {return MakeNumberResult (0);};};_ ,_ ,_bdf ,_ ,_ffe :=_aecc (_fdf );if _ffe .Type ==ResultTypeError {return _ffe ;};return MakeNumberResult (float64 (_bdf ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_cbaff :=_e .Buffer {};for _ ,_eaabg :=range args {switch _eaabg .Type {case ResultTypeString :_cbaff .WriteString (_eaabg .ValueString );case ResultTypeNumber :var _fcae string ;if _eaabg .IsBoolean {if _eaabg .ValueNumber ==0{_fcae ="\u0046\u0041\u004cS\u0045";}else {_fcae ="\u0054\u0052\u0055\u0045";};}else {_fcae =_eaabg .AsString ().ValueString ;};_cbaff .WriteString (_fcae );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_cbaff .String ());};const _dgef =57346;func _dedfa (_gfdae Result )Result {if _gfdae .Type ==ResultTypeEmpty {return _gfdae ;};_aggfe :=_gfdae .AsString ();if _aggfe .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gfdae .IsBoolean {if _aggfe .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _aggfe .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_ed .ToLower (_aggfe .ValueString ));};};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_aabb ,_dfgdf :=_bfdgf ("\u0046\u0049\u004e\u0044",args );if _dfgdf .Type !=ResultTypeEmpty {return _dfgdf ;};_acdf :=_ed .ToLower (_aabb ._daddg );_dgafc :=_ed .ToLower (_aabb ._bfae );if _acdf ==""{return MakeNumberResult (1.0);};_dadf :=_aabb ._gccf -1;_dadc :=1;_gegbb :=0;for _geea :=range _dgafc {if _geea !=0{_dfbc :=1;if _geea -_gegbb > 1{_dfbc =2;};_dadc +=_dfbc ;};if _dadc > _dadf {_cgagg :=_bf .Index (_acdf ,_dgafc [_geea :]);if _cgagg ==0{return MakeNumberResult (float64 (_dadc ));};};_gegbb =_geea ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _cddb (_cbfa ,_aagcf ,_bbac ,_cgfgc ,_ecgb float64 )float64 {var _abddd float64 ;_cddf :=_ecgb /_bbac ;if _cddf >=1{_cddf =1;if _cgfgc ==1{_abddd =_cbfa ;}else {_abddd =0;};}else {_abddd =_cbfa *_ee .Pow (1-_cddf ,_cgfgc -1);};_bbdf :=_cbfa *_ee .Pow (1-_cddf ,_cgfgc );var _fegb float64 ;if _bbdf < _aagcf {_fegb =_abddd -_aagcf ;}else {_fegb =_abddd -_bbdf ;};if _fegb < 0{_fegb =0;};return _fegb ;};func _cdeg (_ceefa Context ,_gecbb ,_cedc string )(string ,string ){_fgede :=_gecbb +"\u0031";_dcedcg :=_ceefa .LastRow (_gecbb );_faebc :=_cedc +_af .Itoa (_dcedcg );return _fgede ,_faebc ;};

// Eval evaluates the binary expression using the context given.
func (_begf BinaryExpr )String ()string {_dd :="";switch _begf ._bc {case BinOpTypePlus :_dd ="\u002b";case BinOpTypeMinus :_dd ="\u002d";case BinOpTypeMult :_dd ="\u002a";case BinOpTypeDiv :_dd ="\u002f";case BinOpTypeExp :_dd ="\u005e";case BinOpTypeLT :_dd ="\u003c";case BinOpTypeGT :_dd ="\u003e";case BinOpTypeEQ :_dd ="\u003d";case BinOpTypeLEQ :_dd ="\u003c\u003d";case BinOpTypeGEQ :_dd ="\u003e\u003d";case BinOpTypeNE :_dd ="\u003c\u003e";case BinOpTypeConcat :_dd ="\u0026";};return _begf ._dc .String ()+_dd +_begf ._ac .String ();};var _bb =map[string ]*_df .Regexp {};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_adbb :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ceaf :=args [2].ValueNumber +1;if _ceaf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bdd :=_gffe (args [0]);_becd :=float64 (len (_bdd ));_ddaab ,_cacd :=0.0,0.0;_edca ,_ffba :=1.0,1.0;_gdef ,_efgb :=false ,false ;for _ ,_ceef :=range _bdd {for _ ,_fdfa :=range _ceef {if _fdfa .Type ==ResultTypeNumber &&!_fdfa .IsBoolean {_gebfd :=_fdfa .ValueNumber ;if _gebfd ==0{continue ;}else {if _gebfd > 0{_gdef =true ;_cacd +=_fdfa .ValueNumber *_ffba ;}else {_efgb =true ;_ddaab +=_fdfa .ValueNumber *_edca ;};_edca /=_adbb ;_ffba /=_ceaf ;};};};};if !_gdef ||!_efgb {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fcad :=-_cacd /_ddaab ;_fcad *=_ee .Pow (_ceaf ,_becd -1);_fcad =_ee .Pow (_fcad ,1/(_becd -1));return MakeNumberResult (_fcad -1);};func _aecca (_ecfge yyLexer ,_fffa *yySymType )(_gfcg ,_ccae int ){_ccae =0;_gfcg =_ecfge .Lex (_fffa );if _gfcg <=0{_ccae =_acebg [0];goto _fffec ;};if _gfcg < len (_acebg ){_ccae =_acebg [_gfcg ];goto _fffec ;};if _gfcg >=_efab {if _gfcg < _efab +len (_agfce ){_ccae =_agfce [_gfcg -_efab ];goto _fffec ;};};for _dacc :=0;_dacc < len (_bgfdd );_dacc +=2{_ccae =_bgfdd [_dacc +0];if _ccae ==_gfcg {_ccae =_bgfdd [_dacc +1];goto _fffec ;};};_fffec :if _ccae ==0{_ccae =_agfce [1];};if _gegc >=3{_f .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_bdcd (_ccae ),uint (_gfcg ));};return _gfcg ,_ccae ;};

// GetFormat returns an empty string for the invalid reference context.
func (_egcff *ivr )GetFormat (cellRef string )string {return ""};func _fcfbf (_cef ,_aaab _ea .Time ,_cgcc ,_gcb int )_ea .Time {_bbc :=_aaab ;_add :=_cef .Year ()-_aaab .Year ();_bbc =_bbc .AddDate (_add ,0,0);if _cef .After (_bbc ){_bbc =_bbc .AddDate (1,0,0);};_dagf :=-12/_cgcc ;for _bbc .After (_cef ){_bbc =_bbc .AddDate (0,_dagf ,0);};return _bbc ;};func _gdfd (_fbda int )bool {return _fbda ==0||_fbda ==4};

// Reference returns a string reference value to a horizontal range with prefix.
func (_bdad PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_edcaf :=_bdad ._cggba .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bdad .horizontalRangeReference (_edcaf .Value )};};type amorArgs struct{_gdgb float64 ;_dega float64 ;_gdbgd float64 ;_gca float64 ;_cggf int ;_ebef float64 ;_babf int ;};const _bffee =57357;

// String returns a string representation of a named range.
func (_adfca NamedRangeRef )String ()string {return _adfca ._cfdg };

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_egadg (args ,_bbeb ))};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdgc :=args [0].ValueNumber ;if _cdgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cede :=args [1].ValueNumber ;if _cede <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aabd :=args [2].ValueNumber ;if _aabd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_ee .Pow (_aabd /_cede ,1/_cdgc )-1);};const (_ byte =iota ;_gggbg ;_egada ;_gdcf ;_acbag ;_gcefe ;);func (_ceabe Result )AsString ()Result {switch _ceabe .Type {case ResultTypeNumber :return MakeStringResult (_ceabe .Value ());default:return _ceabe ;};};func _eag (_gde ,_dab ,_aabc ,_cdf int )int {if !_gdfd (_cdf ){return _aabc ;};_ece :=_aabc ;_dbbe :=_cfe (_gde ,_dab );if _ece > 30||_aabc >=_dbbe ||_ece >=_dbbe {_ece =30;};return _ece ;};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcdg :=args [0].AsString ();if _gcdg .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_gegec :=_e .Buffer {};_gfaa :=false ;for _ ,_feeg :=range _gcdg .ValueString {if !_gfaa &&_c .IsLetter (_feeg ){_gegec .WriteRune (_c .ToUpper (_feeg ));}else {_gegec .WriteRune (_c .ToLower (_feeg ));};_gfaa =_c .IsLetter (_feeg );};return MakeStringResult (_gegec .String ());};func _fbba (_ggadf string ,_cecfc func (_edcae float64 )float64 )Function {return func (_cbegd []Result )Result {if len (_cbegd )!=1{return MakeErrorResult (_ggadf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cega :=_cbegd [0].AsNumber ();switch _cega .Type {case ResultTypeNumber :_dfgce :=_cecfc (_cega .ValueNumber );if _ee .IsNaN (_dfgce ){return MakeErrorResult (_ggadf +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ee .IsInf (_dfgce ,0){return MakeErrorResult (_ggadf +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_dfgce );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ggadf +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _cega ;default:return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ggadf ,_cega .Type ));};};};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gcecd :=args [0];switch _gcecd .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_dbce :=0.0;_gcba :=0.0;for _ ,_bdag :=range _gcecd .ValueString {_aecce :=0.0;switch _bdag {case 'I':_aecce =1;case 'V':_aecce =5;case 'X':_aecce =10;case 'L':_aecce =50;case 'C':_aecce =100;case 'D':_aecce =500;case 'M':_aecce =1000;};_dbce +=_aecce ;switch {case _gcba ==_aecce &&(_gcba ==5||_gcba ==50||_gcba ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_gcba ==_aecce :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _gcba < _aecce {_dbce -=2*_gcba ;};_gcba =_aecce ;};return MakeNumberResult (_dbce );case ResultTypeError :return _gcecd ;default:return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gcecd .Type ));};};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_gfega ,_abaf :=_af .ParseFloat (v ,64);if _abaf !=nil {_edb .Log ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0073",v ,_abaf );};return Number {_cgbdd :_gfega };};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_cgd ,_dbc :=_af .ParseBool (v );if _dbc !=nil {_edb .Log ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0073",v ,_dbc );};return Bool {_dbb :_cgd };};func init (){_bcde ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _cbda (args ,_gdeb )};func _ffebba (_afbef yyLexer )int {return _fcbbd ().Parse (_afbef )};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gdeg ,_agf :=_beae (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _agf .Type ==ResultTypeError {return _agf ;};_cgc :=_ffee (_gdeg ._eeg );_dccf :=_ffee (_gdeg ._fgdg );_cfg :=_gdeg ._bcbe ;_cfdc :=_gdeg ._cebg ;_gcgd :=_fcfbf (_cgc ,_dccf ,_cfg ,_cfdc );_eeaf ,_ddef ,_gbda :=_gcgd .Date ();return MakeNumberResult (_fee (_eeaf ,int (_ddef ),_gbda ));};

// GetFilename returns an empty string for the invalid reference context.
func (_agga *ivr )GetFilename ()string {return ""};func (_fcadb VerticalRange )verticalRangeReference ()string {return _f .Sprintf ("\u0025\u0073\u003a%\u0073",_fcadb ._dcfbe ,_fcadb ._dfeec );};func _cdedg (_cbaea ,_eeacd []string )[]string {for _ ,_bgaa :=range _eeacd {_cbaea =append (_cbaea ,_bgaa );};return _cbaea ;};func _ab (_bcb Result )bool {if _bcb .Type ==ResultTypeString {return _bcb .ValueString =="";};return _bcb .ValueNumber ==0;};

// Reference returns an invalid reference for Error.
func (_fcd Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _face (_feeb ,_degc float64 )bool {return _ee .Abs (_feeb -_degc )< 1.0e-6};

// Eval evaluates and returns a boolean.
func (_dcc Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_dcc ._dbb )};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_ebbfb :=len (args );if _ebbfb !=6&&_ebbfb !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cbega ,_acebb ,_agag :=_caed (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _agag .Type ==ResultTypeError {return _agag ;};_dabd :=args [2];if _dabd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abfbd :=_dabd .ValueNumber ;if _abfbd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_badg :=args [3];if _badg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebegf :=_badg .ValueNumber ;if _ebegf <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_debb :=args [4];if _debb .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ffdfg :=_debb .ValueNumber ;if _ffdfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cgecb :=args [5];if _cgecb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_befd :=float64 (int (_cgecb .ValueNumber ));if !_edc (_befd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_fbgc :=0;if _ebbfb ==7&&args [6].Type !=ResultTypeEmpty {_faba :=args [6];if _faba .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fbgc =int (_faba .ValueNumber );if !_afce (_fbgc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_gbba :=0.0;_dcad :=0.0;_fbee :=1.0;_gbc ,_agag :=_gdec (_cbega ,_acebb ,_abfbd ,_dcad ,_ffdfg ,_befd ,_fbgc );if _agag .Type ==ResultTypeError {return _agag ;};_fdfd ,_agag :=_gdec (_cbega ,_acebb ,_abfbd ,_fbee ,_ffdfg ,_befd ,_fbgc );if _agag .Type ==ResultTypeError {return _agag ;};_faea :=(_fbee -_dcad )*0.5;for _faec :=0;_faec < 100&&_gbba !=_ebegf ;_faec ++{_gbba ,_agag =_gdec (_cbega ,_acebb ,_abfbd ,_faea ,_ffdfg ,_befd ,_fbgc );if _agag .Type ==ResultTypeError {return _agag ;};if _ebegf ==_gbc {return MakeNumberResult (_dcad );}else if _ebegf ==_fdfd {return MakeNumberResult (_fbee );}else if _ebegf ==_gbba {return MakeNumberResult (_faea );}else if _ebegf < _fdfd {_fbee *=2.0;_fdfd ,_agag =_gdec (_cbega ,_acebb ,_abfbd ,_fbee ,_ffdfg ,_befd ,_fbgc );if _agag .Type ==ResultTypeError {return _agag ;};_faea =(_fbee -_dcad )*0.5;}else {if _ebegf < _gbba {_dcad =_faea ;_gbc =_gbba ;}else {_fbee =_faea ;_fdfd =_gbba ;};_faea =_fbee -(_fbee -_dcad )*((_ebegf -_fdfd )/(_gbc -_fdfd ));};};return MakeNumberResult (_faea );};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_ccegg ,_fcfe Expression };const _cfad ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_aeda PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_fged :=_aeda ._cggba .Reference (ctx ,ev );switch _fged .Type {case ReferenceTypeSheet :if _cadc (_fged ,ctx ){return MakeErrorResultType (ErrorTypeName ,_f .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_fged .Value ));};_ebdfd :=_aeda .horizontalRangeReference (_fged .Value );if _dgafe ,_dgfga :=ev .GetFromCache (_ebdfd );_dgfga {return _dgafe ;};_bacea :=ctx .Sheet (_fged .Value );_fdafd ,_ecbef :=_gbcdd (_bacea ,_aeda ._gdabc ,_aeda ._agdb );_edfeeb :=_acegg (_bacea ,ev ,_fdafd ,_ecbef );ev .SetCache (_ebdfd ,_edfeeb );return _edfeeb ;default:return MakeErrorResult (_f .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fged .Type ));};};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_dfcb :=_ed .Split (v ,"\u003a");if len (_dfcb )!=2{return nil ;};_cgcb ,_ :=_af .Atoi (_dfcb [0]);_eeacc ,_ :=_af .Atoi (_dfcb [1]);if _cgcb > _eeacc {_cgcb ,_eeacc =_eeacc ,_cgcb ;};return HorizontalRange {_eace :_cgcb ,_aacfc :_eeacc };};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_ed .NewReader (s ));};

// Reference returns an invalid reference for String.
func (_aead String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns a string reference value to a horizontal range.
func (_bbeg HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bbeg .horizontalRangeReference ()};};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_babgd :=args [0];if _babgd .Type ==ResultTypeNumber {return _babgd ;};if _babgd .Type ==ResultTypeString {_eabed ,_fdcg :=_af .ParseFloat (_babgd .Value (),64);if _fdcg ==nil {return MakeNumberResult (_eabed );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// GetWidth returns 0 for the invalid reference context.
func (_abgaa *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fccf :=args [0].AsNumber ();if _fccf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aeccd :=int (_fccf .ValueNumber );if _aeccd < 0||_aeccd > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_f .Sprintf ("\u0025\u0063",_aeccd ));};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_afff :=len (args );if _afff !=4&&_afff !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccfb :=args [0].ValueNumber ;if _ccfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdce :=args [1].ValueNumber ;if _bdce < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfba :=args [2].ValueNumber ;if _bfba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebad :=args [3].ValueNumber ;if _ebad < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _ebad > _bfba {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_gefb :=2.0;if _afff ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gefb =args [4].ValueNumber ;if _gefb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_cddb (_ccfb ,_bdce ,_bfba ,_ebad ,_gefb ));};func _fbeca (_begbf []Result )Result {_dccg :=_begbf [0].ValueArray ;if len (_begbf )==1{_gbee :=[][]Result {};for _ ,_eega :=range _dccg {_gbee =append (_gbee ,_eccfd ([]Result {MakeListResult (_eega )}).ValueList );};return MakeArrayResult (_gbee );}else if len (_begbf )==2{_gbdf :=len (_dccg );_cdfd :=len (_dccg [0]);_bcgc :=_bbba (_begbf [1],_gbdf ,_cdfd );_edba :=len (_bcgc );_abcd :=[][]Result {};var _cbgd []Result ;for _cbbec ,_egcb :=range _dccg {if _cbbec < _edba {_cbgd =_bcgc [_cbbec ];}else {_cbgd =_afbdg (MakeErrorResultType (ErrorTypeNA ,""),_cdfd );};_abcd =append (_abcd ,_eccfd ([]Result {MakeListResult (_egcb ),MakeListResult (_cbgd )}).ValueList );};return MakeArrayResult (_abcd );}else if len (_begbf )==3{_egae :=len (_dccg );_gdcb :=len (_dccg [0]);_cdga :=_bbba (_begbf [1],_egae ,_gdcb );_bcagd :=_bbba (_begbf [2],_egae ,_gdcb );_agcc :=len (_cdga );_dgfb :=len (_bcagd );_gge :=[][]Result {};var _bfed ,_gdacg []Result ;for _adbaf ,_facg :=range _dccg {if _adbaf < _agcc {_bfed =_cdga [_adbaf ];}else {_bfed =_afbdg (MakeErrorResultType (ErrorTypeNA ,""),_gdcb );};if _adbaf < _dgfb {_gdacg =_bcagd [_adbaf ];}else {_gdacg =_afbdg (MakeErrorResultType (ErrorTypeNA ,""),_gdcb );};_gge =append (_gge ,_eccfd ([]Result {MakeListResult (_facg ),MakeListResult (_bfed ),MakeListResult (_gdacg )}).ValueList );};return MakeArrayResult (_gge );};return MakeErrorResultType (ErrorTypeValue ,"");};func _cbbd (_gadc ,_fcfcd Expression )(Expression ,Expression ,error ){_agfbe ,_acdfe :=_gadc .(CellRef );if !_acdfe {return nil ,nil ,_da .New (_f .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_gadc .String ()));};_bcgcc ,_acdfe :=_fcfcd .(CellRef );if !_acdfe {return nil ,nil ,_da .New (_f .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_fcfcd .String ()));};_cdcdb ,_daba :=_ae .ParseCellReference (_agfbe ._afb );if _daba !=nil {return nil ,nil ,_daba ;};_edcg ,_abdg :=_ae .ParseCellReference (_bcgcc ._afb );if _abdg !=nil {return nil ,nil ,_abdg ;};_bacef :=false ;if _cdcdb .RowIdx > _edcg .RowIdx {_bacef =true ;_cdcdb .RowIdx ,_edcg .RowIdx =_edcg .RowIdx ,_cdcdb .RowIdx ;};if _cdcdb .ColumnIdx > _edcg .ColumnIdx {_bacef =true ;_cdcdb .ColumnIdx ,_edcg .ColumnIdx =_edcg .ColumnIdx ,_cdcdb .ColumnIdx ;_cdcdb .Column ,_edcg .Column =_edcg .Column ,_cdcdb .Column ;};if _bacef {return NewCellRef (_cdcdb .String ()),NewCellRef (_edcg .String ()),nil ;};return _gadc ,_fcfcd ,nil ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_ggfce :e }};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _beace (args ,true )};

// Eval evaluates and returns the result of the cell reference.
func (_fdd CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_fdd ._afb ,ev )};const _ddgfb =57372;

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _cfga (_gdabg []Result )(bool ,Result ){for _ ,_abedc :=range _gdabg {if _abedc .Type ==ResultTypeError {return true ,_abedc ;};};return false ,MakeEmptyResult ();};

// Reference returns an invalid reference for Bool.
func (_ecf Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _bbf =[]*_df .Regexp {};func _fee (_gfgg ,_fcb ,_fea int )float64 {return float64 (_gfdc (_gfgg ,_ea .Month (_fcb ),_fea )/86400)+_eadc ;};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_baae :=len (args );if _baae !=4&&_baae !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adfcc ,_bfdgg ,_cbdf :=_caed (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _cbdf .Type ==ResultTypeError {return _cbdf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abdd :=args [2].ValueNumber ;if _abdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_fcega :=args [3].ValueNumber ;if _fcega <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_dgae :=0;if _baae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgae =int (args [4].ValueNumber );if !_afce (_dgae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_dacg ,_cbdf :=_fbb (_adfcc ,_bfdgg ,_dgae );if _cbdf .Type ==ResultTypeError {return _cbdf ;};return MakeNumberResult (_fcega *(1-_abdd *_dacg ));};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_febaf :=len (args );if _febaf !=2&&_febaf !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gead ,_bcef :=_aagfd (args [0],args [1],"\u0058\u0049\u0052\u0052");if _bcef .Type ==ResultTypeError {return _bcef ;};_acecg :=_gead ._gafd ;_abdb :=_gead ._bagf ;_gddd :=0.1;if _febaf ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gddd =args [2].ValueNumber ;if _gddd <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _fgdb (_acecg ,_abdb ,_gddd );};

// String returns an empty string for Error.
func (_dda Error )String ()string {return ""};func _dgdb (_ggdc int )bool {if _ggdc ==_ggdc /400*400{return true ;};if _ggdc ==_ggdc /100*100{return false ;};return _ggdc ==_ggdc /4*4;};const _caaag =2;

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_ee .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_afe Context ,formula string )Result ;SetCache (_fe string ,_caa Result );GetFromCache (_gb string )(Result ,bool );LastEvalIsRef ()bool ;};func _cgafc (_bbecc ,_cbbbg int )string {const TOKSTART =4;if !_cadb {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_fadc :=range _fgbf {if _fadc ._geggf ==_bbecc &&_fadc ._acgcb ==_cbbbg {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_fadc ._afddc ;};};_cgaec :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_bdcd (_cbbbg );_eeecb :=make ([]int ,0,4);_fgbd :=_bddga [_bbecc ];for _ccdb :=TOKSTART ;_ccdb -1< len (_eccb );_ccdb ++{if _dfcg :=_fgbd +_ccdb ;_dfcg >=0&&_dfcg < _cdedc &&_efadc [_fecafe [_dfcg ]]==_ccdb {if len (_eeecb )==cap (_eeecb ){return _cgaec ;};_eeecb =append (_eeecb ,_ccdb );};};if _ccdd [_bbecc ]==-2{_abdeb :=0;for _gaae [_abdeb ]!=-1||_gaae [_abdeb +1]!=_bbecc {_abdeb +=2;};for _abdeb +=2;_gaae [_abdeb ]>=0;_abdeb +=2{_dcgag :=_gaae [_abdeb ];if _dcgag < TOKSTART ||_gaae [_abdeb +1]==0{continue ;};if len (_eeecb )==cap (_eeecb ){return _cgaec ;};_eeecb =append (_eeecb ,_dcgag );};if _gaae [_abdeb +1]!=0{return _cgaec ;};};for _bfeb ,_gffd :=range _eeecb {if _bfeb ==0{_cgaec +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_cgaec +="\u0020\u006f\u0072\u0020";};_cgaec +=_bdcd (_gffd );};return _cgaec ;};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecff :=args [0].AsString ();if _ecff .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aede :=_e .Buffer {};_bdff :=false ;_ecdd :=false ;_ggef :=0;for _ ,_bfaba :=range _ecff .ValueString {_egadd :=_bfaba ==' ';if _egadd {if !_bdff {continue ;};if !_ecdd {_ggef ++;_aede .WriteRune (_bfaba );};}else {_ggef =0;_bdff =true ;_aede .WriteRune (_bfaba );};_ecdd =_egadd ;};_aede .Truncate (_aede .Len ()-_ggef );return MakeStringResult (_aede .String ());};func _dbbcb (_fegf string ,_eafa func (_ebeea float64 )float64 )Function {return func (_ggcaa []Result )Result {if len (_ggcaa )!=1{return MakeErrorResult (_fegf +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dgda :=_ggcaa [0].AsNumber ();switch _dgda .Type {case ResultTypeNumber :_aegf :=_eafa (_dgda .ValueNumber );if _ee .IsNaN (_aegf ){return MakeErrorResult (_fegf +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _ee .IsInf (_aegf ,0){return MakeErrorResult (_fegf +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _aegf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_fegf +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_aegf );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fegf +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _dgda ;default:return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fegf ,_dgda .Type ));};};};

// Value returns a string version of the result.
func (_bgeef Result )Value ()string {switch _bgeef .Type {case ResultTypeNumber :_eggb :=_af .FormatFloat (_bgeef .ValueNumber ,'f',-1,64);if len (_eggb )> 12{_bfdgb :=12;for _cgbac :=_bfdgb ;_cgbac > 0&&_eggb [_cgbac ]=='0';_cgbac --{_bfdgb --;};_eggb =_eggb [0:_bfdgb +1];};return _eggb ;case ResultTypeError :return _bgeef .ValueString ;case ResultTypeString :return _bgeef .ValueString ;case ResultTypeList :if len (_bgeef .ValueList )==0{return "";};return _bgeef .ValueList [0].Value ();case ResultTypeArray :if len (_bgeef .ValueArray )==0||len (_bgeef .ValueArray [0])==0{return "";};return _bgeef .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};const _cdedc =187;

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ffeg :=args [0].AsNumber ();_ggbg :=args [1].AsNumber ();_gbdfb :=args [2].AsNumber ();_afbb :=args [3].ListValues ();if _ffeg .Type !=ResultTypeNumber ||_ggbg .Type !=ResultTypeNumber ||_gbdfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_egfbg :=float64 (0);for _cdbf ,_ffag :=range _afbb {_egfbg +=_ffag .ValueNumber *_ee .Pow (_ffeg .ValueNumber ,_ggbg .ValueNumber +float64 (_cdbf )*_gbdfb .ValueNumber );};return MakeNumberResult (_egfbg );};const _cfa =_ea .Second *1;const _ccfee =57350;const _dgff =57367;var _eccb =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_deea ,_faed ,_fec :=_accd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _fec .Type ==ResultTypeError {return _fec ;};if _faed ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _deea ==0{return MakeNumberResult (0);};_dcaa :=_deea < 0;if _dcaa {_deea =-_deea ;};_gccb :=float64 (int (_deea ));_bdfc :=args [0].Value ();_afada :=_ed .Split (_bdfc ,"\u002e");_eac :=0.0;if len (_afada )> 1{var _beda error ;_fffd :=_afada [1];_eac ,_beda =_af .ParseFloat (_fffd ,64);if _beda !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_gedb :=float64 (len (_fffd ));_eac /=_ee .Pow (10,_gedb );};_fegd :=_eac *_faed /_ee .Pow (10,float64 (int (_ee .Log10 (_faed )))+1)+_gccb ;if _dcaa {_fegd =-_fegd ;};return MakeNumberResult (_fegd );};

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_begag :=args [0].AsNumber ();if _begag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_ee .Pi *_begag .ValueNumber );};

// String returns a string representation of Number.
func (_aagd Number )String ()string {return _af .FormatFloat (_aagd ._cgbdd ,'f',-1,64)};

// Reference returns an invalid reference for ConstArrayExpr.
func (_dcd ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _adcbe (_dcdb [][]Result ,_ecfce int )[][]Result {_begd :=[][]Result {};for _bdbcb :=range _dcdb {if _bdbcb ==0{continue ;};_dccfc :=[]Result {};for _fbge :=range _dcdb {if _fbge ==_ecfce {continue ;};_dccfc =append (_dccfc ,_dcdb [_bdbcb ][_fbge ]);};_begd =append (_begd ,_dccfc );};return _begd ;};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_aef :=args [0].ValueNumber ;if _aef <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_gaac :=float64 (int (args [1].ValueNumber ));if _gaac < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_ee .Pow ((1+_aef /_gaac ),_gaac )-1);};func _dbbab (_gefa ,_gee int )int {switch _gee {case 1:if _dgdb (_gefa ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};func _fcbbd ()yyParser {return &yyParserImpl {}};func _fgbeb (_aggf _ea .Time )_ea .Time {_aggf =_aggf .UTC ();return _ea .Date (_aggf .Year (),_aggf .Month (),_aggf .Day (),_aggf .Hour (),_aggf .Minute (),_aggf .Second (),_aggf .Nanosecond (),_ea .Local );};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbad :=[]float64 {};for _ ,_daeb :=range args {switch _daeb .Type {case ResultTypeString :_ecfg :=_daeb .AsNumber ();if _ecfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cbad =append (_cbad ,_ecfg .ValueNumber );case ResultTypeList :_fecd :=LCM (_daeb .ValueList );if _fecd .Type !=ResultTypeNumber {return _fecd ;};_cbad =append (_cbad ,_fecd .ValueNumber );case ResultTypeNumber :_cbad =append (_cbad ,_daeb .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _daeb ;};};if len (_cbad )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _cbad [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cbad )==1{return MakeNumberResult (_cbad [0]);};_bdee :=_cbad [0];for _ffge :=1;_ffge < len (_cbad );_ffge ++{if _cbad [_ffge ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdee =_cgbd (_bdee ,_cbad [_ffge ]);};return MakeNumberResult (_bdee );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gabgd ,_bgbbc ,_fgcf :=_caed (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _fgcf .Type ==ResultTypeError {return _fgcf ;};_abeef ,_fgcf :=_geff (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fgcf .Type ==ResultTypeError {return _fgcf ;};if _abeef >=_gabgd {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_caeg :=args [3].ValueNumber ;if _caeg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbcc :=args [4].ValueNumber ;if _fbcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_gfbf :=args [5].ValueNumber ;if _gfbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbgb :=float64 (int (args [6].ValueNumber ));if !_edc (_dbgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dbfe :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dbfe =int (args [7].ValueNumber );if !_afce (_dbfe ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_gcgf ,_fgcf :=_fbb (_abeef ,_bgbbc ,_dbfe );if _fgcf .Type ==ResultTypeError {return _fgcf ;};_gcgf *=_dbgb ;_gcgg ,_fgcf :=_fbb (_gabgd ,_bgbbc ,_dbfe );if _fgcf .Type ==ResultTypeError {return _fgcf ;};_gcgg *=_dbgb ;_ceab ,_fgcf :=_fbb (_abeef ,_gabgd ,_dbfe );if _fgcf .Type ==ResultTypeError {return _fgcf ;};_ceab *=_dbgb ;_gfccg :=_gfbf +_gcgf *100*_caeg /_dbgb ;_gfccg /=_fbcc +_ceab *100*_caeg /_dbgb ;_gfccg --;_gfccg *=_dbgb /_gcgg ;return MakeNumberResult (_gfccg );};

// Update updates references in the Negate after removing a row/column.
func (_adad Negate )Update (q *_b .UpdateQuery )Expression {return Negate {_ggfce :_adad ._ggfce .Update (q )};};

// Db implements the Excel DB function.
func Db (args []Result )Result {_abdc :=len (args );if _abdc !=4&&_abdc !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfbd :=args [0].ValueNumber ;if _cfbd < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baa :=args [1].ValueNumber ;if _baa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aeae :=args [2].ValueNumber ;if _aeae <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fcgg :=args [3].ValueNumber ;if _fcgg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _fcgg -_aeae > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_eddag :=12.0;if _abdc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eddag =args [4].ValueNumber ;if _eddag < 1||_eddag > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _eddag ==12&&_fcgg > _aeae {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _baa >=_cfbd {return MakeNumberResult (0);};_aecg :=1-_ee .Pow (_baa /_cfbd ,1/_aeae );_aecg =float64 (int (_aecg *1000+0.5))/1000;_eaeg :=_cfbd *_aecg *_eddag /12;if _fcgg ==1{return MakeNumberResult (_eaeg );};_afee :=_eaeg ;_aeab :=0.0;_gcdd :=_aeae ;if _gcdd > _fcgg {_gcdd =_fcgg ;};for _gac :=2.0;_gac <=_gcdd ;_gac ++{_aeab =(_cfbd -_afee )*_aecg ;_afee +=_aeab ;};if _fcgg > _aeae {return MakeNumberResult ((_cfbd -_afee )*_aecg *(12-_eddag )/12);};return MakeNumberResult (_aeab );};func (_gccfd PrefixHorizontalRange )horizontalRangeReference (_eaec string )string {return _f .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_eaec ,_gccfd ._gdabc ,_gccfd ._agdb );};const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cagc :=args [0].AsNumber ();_aabed :=args [1].AsNumber ();if _cagc .Type !=ResultTypeNumber ||_aabed .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _aabed .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_abbg ,_ffbbc :=_ee .Modf (_cagc .ValueNumber /_aabed .ValueNumber );if _ffbbc < 0{_abbg --;};return MakeNumberResult (_cagc .ValueNumber -_aabed .ValueNumber *_abbg );};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);func _deac (_efcdc float64 )float64 {return float64 (int (_efcdc +0.5))};var _gaae =[...]int {-1,1,1,-1,-2,0};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_aged :=len (args );if _aged !=4&&_aged !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_daed ,_fdbcg :=_geff (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fdbcg .Type ==ResultTypeError {return _fdbcg ;};_ecfe ,_fdbcg :=_geff (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _fdbcg .Type ==ResultTypeError {return _fdbcg ;};if _daed >=_ecfe {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gfcc :=args [2].ValueNumber ;if _gfcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgeff :=args [3].ValueNumber ;if _fgeff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbfc :=0;if _aged ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbfc =int (args [4].ValueNumber );if !_afce (_dbfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_gdbg ,_fdbcg :=_fbb (_daed ,_ecfe ,_dbfc );if _fdbcg .Type ==ResultTypeError {return _fdbcg ;};return MakeNumberResult (_fgeff *_gfcc *_gdbg );};func (_eaba *yyParserImpl )Parse (yylex yyLexer )int {_dcdd :=_ea .Now ();var _agff int ;var _acgeg yySymType ;var _gdcbf []yySymType ;_ =_gdcbf ;_geac :=_eaba ._eedb [:];Nerrs :=0;Errflag :=0;_adga :=0;_eaba ._agfcb =-1;_bccd :=-1;defer func (){_adga =-1;_eaba ._agfcb =-1;_bccd =-1}();_cfab :=-1;goto _beceg ;_gaecf :return 0;_ddabg :return 1;_beceg :if _afcgb (_dcdd ){_edb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ddabg ;};if _gegc >=4{_f .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_bdcd (_bccd ),_ccgge (_adga ));};_cfab ++;if _cfab >=len (_geac ){_dadac :=make ([]yySymType ,len (_geac )*2);copy (_dadac ,_geac );_geac =_dadac ;};_geac [_cfab ]=_acgeg ;_geac [_cfab ]._fbea =_adga ;_edcaeg :if _afcgb (_dcdd ){_edb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ddabg ;};_agff =_bddga [_adga ];if _agff <=_gegfb {goto _edea ;};if _eaba ._agfcb < 0{_eaba ._agfcb ,_bccd =_aecca (yylex ,&_eaba ._baedbd );};_agff +=_bccd ;if _agff < 0||_agff >=_cdedc {goto _edea ;};_agff =_fecafe [_agff ];if _efadc [_agff ]==_bccd {_eaba ._agfcb =-1;_bccd =-1;_acgeg =_eaba ._baedbd ;_adga =_agff ;if Errflag > 0{Errflag --;};goto _beceg ;};_edea :if _afcgb (_dcdd ){_edb .Log ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _ddabg ;};_agff =_ccdd [_adga ];if _agff ==-2{if _eaba ._agfcb < 0{_eaba ._agfcb ,_bccd =_aecca (yylex ,&_eaba ._baedbd );};_ffac :=0;for {if _gaae [_ffac +0]==-1&&_gaae [_ffac +1]==_adga {break ;};_ffac +=2;};for _ffac +=2;;_ffac +=2{_agff =_gaae [_ffac +0];if _agff < 0||_agff ==_bccd {break ;};};_agff =_gaae [_ffac +1];if _agff < 0{goto _gaecf ;};};if _agff ==0{switch Errflag {case 0:yylex .Error (_cgafc (_adga ,_bccd ));Nerrs ++;if _gegc >=1{_f .Printf ("\u0025\u0073",_ccgge (_adga ));_f .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_bdcd (_bccd ));};fallthrough;case 1,2:Errflag =3;for _cfab >=0{_agff =_bddga [_geac [_cfab ]._fbea ]+_caaag ;if _agff >=0&&_agff < _cdedc {_adga =_fecafe [_agff ];if _efadc [_adga ]==_caaag {goto _beceg ;};};if _gegc >=2{_f .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_geac [_cfab ]._fbea );};_cfab --;};goto _ddabg ;case 3:if _gegc >=2{_f .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_bdcd (_bccd ));};if _bccd ==_eeec {goto _ddabg ;};_eaba ._agfcb =-1;_bccd =-1;goto _edcaeg ;};};if _gegc >=2{_f .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_agff ,_ccgge (_adga ));};_cgbc :=_agff ;_eedf :=_cfab ;_ =_eedf ;_cfab -=_ebed [_agff ];if _cfab +1>=len (_geac ){_abge :=make ([]yySymType ,len (_geac )*2);copy (_abge ,_geac );_geac =_abge ;};_acgeg =_geac [_cfab +1];_agff =_gbbe [_agff ];_fggg :=_gddec [_agff ];_aeaba :=_fggg +_geac [_cfab ]._fbea +1;if _aeaba >=_cdedc {_adga =_fecafe [_fggg ];}else {_adga =_fecafe [_aeaba ];if _efadc [_adga ]!=-_agff {_adga =_fecafe [_fggg ];};};switch _cgbc {case 1:_gdcbf =_geac [_eedf -1:_eedf +1];{yylex .(*plex )._dbdbe =_acgeg ._ccga ;};case 3:_gdcbf =_geac [_eedf -2:_eedf +1];{_acgeg ._ccga =_gdcbf [2]._ccga ;};case 4:_gdcbf =_geac [_eedf -4:_eedf +1];{};case 5:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewBool (_gdcbf [1]._cddad ._fcbg );};case 6:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewNumber (_gdcbf [1]._cddad ._fcbg );};case 7:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewString (_gdcbf [1]._cddad ._fcbg );};case 8:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewError (_gdcbf [1]._cddad ._fcbg );};case 9:_gdcbf =_geac [_eedf -2:_eedf +1];{_acgeg ._ccga =_gdcbf [2]._ccga ;};case 10:_gdcbf =_geac [_eedf -2:_eedf +1];{_acgeg ._ccga =NewNegate (_gdcbf [2]._ccga );};case 15:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =_gdcbf [2]._ccga ;};case 17:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewConstArrayExpr (_gdcbf [2]._gaec );};case 18:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._gaec =append (_acgeg ._gaec ,_gdcbf [1]._aade );};case 19:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._gaec =append (_gdcbf [1]._gaec ,_gdcbf [3]._aade );};case 20:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._aade =append (_acgeg ._aade ,_gdcbf [1]._ccga );};case 21:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._aade =append (_gdcbf [1]._aade ,_gdcbf [3]._ccga );};case 23:_gdcbf =_geac [_eedf -2:_eedf +1];{_acgeg ._ccga =NewPrefixExpr (_gdcbf [1]._ccga ,_gdcbf [2]._ccga );};case 25:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewSheetPrefixExpr (_gdcbf [1]._cddad ._fcbg );};case 26:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewCellRef (_gdcbf [1]._cddad ._fcbg );};case 27:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewRange (_gdcbf [1]._ccga ,_gdcbf [3]._ccga );};case 28:_gdcbf =_geac [_eedf -4:_eedf +1];{_acgeg ._ccga =NewPrefixRangeExpr (_gdcbf [1]._ccga ,_gdcbf [2]._ccga ,_gdcbf [4]._ccga );};case 29:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewNamedRangeRef (_gdcbf [1]._cddad ._fcbg );};case 30:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewHorizontalRange (_gdcbf [1]._cddad ._fcbg );};case 31:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._ccga =NewVerticalRange (_gdcbf [1]._cddad ._fcbg );};case 32:_gdcbf =_geac [_eedf -2:_eedf +1];{_acgeg ._ccga =NewPrefixHorizontalRange (_gdcbf [1]._ccga ,_gdcbf [2]._cddad ._fcbg );};case 33:_gdcbf =_geac [_eedf -2:_eedf +1];{_acgeg ._ccga =NewPrefixVerticalRange (_gdcbf [1]._ccga ,_gdcbf [2]._cddad ._fcbg );};case 34:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypePlus ,_gdcbf [3]._ccga );};case 35:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeMinus ,_gdcbf [3]._ccga );};case 36:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeMult ,_gdcbf [3]._ccga );};case 37:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeDiv ,_gdcbf [3]._ccga );};case 38:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeExp ,_gdcbf [3]._ccga );};case 39:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeLT ,_gdcbf [3]._ccga );};case 40:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeGT ,_gdcbf [3]._ccga );};case 41:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeLEQ ,_gdcbf [3]._ccga );};case 42:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeGEQ ,_gdcbf [3]._ccga );};case 43:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeEQ ,_gdcbf [3]._ccga );};case 44:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeNE ,_gdcbf [3]._ccga );};case 45:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewBinaryExpr (_gdcbf [1]._ccga ,BinOpTypeConcat ,_gdcbf [3]._ccga );};case 47:_gdcbf =_geac [_eedf -2:_eedf +1];{_acgeg ._ccga =NewFunction (_gdcbf [1]._cddad ._fcbg ,nil );};case 48:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._ccga =NewFunction (_gdcbf [1]._cddad ._fcbg ,_gdcbf [2]._aade );};case 49:_gdcbf =_geac [_eedf -1:_eedf +1];{_acgeg ._aade =append (_acgeg ._aade ,_gdcbf [1]._ccga );};case 50:_gdcbf =_geac [_eedf -3:_eedf +1];{_acgeg ._aade =append (_gdcbf [1]._aade ,_gdcbf [3]._ccga );};case 53:_gdcbf =_geac [_eedf -0:_eedf +1];{_acgeg ._ccga =NewEmptyExpr ();};};goto _beceg ;};

// Update updates references in the PrefixExpr after removing a row/column.
func (_eaabga PrefixExpr )Update (q *_b .UpdateQuery )Expression {_cfde :=_eaabga ;_affc :=_eaabga ._bgac .String ();if _affc ==q .SheetToUpdate {_cagad :=*q ;_cagad .UpdateCurrentSheet =true ;_cfde ._fbde =_eaabga ._fbde .Update (&_cagad );};return _cfde ;};

// String returns a string of a range.
func (_ffaca Range )String ()string {return _f .Sprintf ("\u0025\u0073\u003a%\u0073",_ffaca ._ccegg .String (),_ffaca ._fcfe .String ());};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_fbbg ,_gcbg :=_fbec (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _gcbg .Type ==ResultTypeError {return _gcbg ;};_aed :=_fbbg ._abca ;_cage :=_fbbg ._aga ;_bfa :=_fbbg ._gaegd ;_bedbc :=_fbbg ._fgae ;_dbdb :=_fbbg ._cced ;_dcfa :=_fbbg ._gdc ;_ccg :=_fcdf (_aed ,_cage ,_bfa ,_bedbc ,_dbdb ,_dcfa );if _ccg .Type ==ResultTypeError {return _ccg ;};_efe :=_ccg .ValueNumber /(1.0+_bedbc /_dbdb );return MakeNumberResult (_efe );};func _gdbb (_cdfab Result )bool {_aedfa :=_cdfab .Type ;return _aedfa !=ResultTypeArray &&_aedfa !=ResultTypeList ;};type countMode byte ;

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_aecge :=len (args );if _aecge < 2||_aecge > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ade :=args [0];if _ade .Type !=ResultTypeArray &&_ade .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cggfg :=args [1].AsNumber ();if _cggfg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_caee :=int (_cggfg .ValueNumber )-1;_dcdc :=-1;if _aecge ==3&&args [2].Type !=ResultTypeEmpty {_bcae :=args [2].AsNumber ();if _bcae .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dcdc =int (_bcae .ValueNumber )-1;};if _caee ==-1&&_dcdc ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _eff []Result ;if _ade .Type ==ResultTypeArray {_caca :=_ade .ValueArray ;if _caee < -1||_caee >=len (_caca ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _caee ==-1{if _dcdc >=len (_caca [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_bbce :=[][]Result {};for _ ,_ede :=range _caca {_cbbfe :=_ede [_dcdc ];if _cbbfe .Type ==ResultTypeEmpty {_cbbfe =MakeNumberResult (0);};_bbce =append (_bbce ,[]Result {_cbbfe });};return MakeArrayResult (_bbce );};_eff =_caca [_caee ];}else {_ebecg :=_ade .ValueList ;if _caee < -1||_caee >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _caee ==-1{if _dcdc >=len (_ebecg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_abbae :=_ebecg [_dcdc ];if _abbae .Type ==ResultTypeEmpty {_abbae =MakeNumberResult (0);};return _abbae ;};_eff =_ebecg ;};if _dcdc < -1||_dcdc > len (_eff ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _dcdc ==-1{_faaf :=[]Result {};for _ ,_ddda :=range _eff {if _ddda .Type ==ResultTypeEmpty {_faaf =append (_faaf ,MakeNumberResult (0));}else {_faaf =append (_faaf ,_ddda );};};return MakeArrayResult ([][]Result {_faaf });};_bgdc :=_eff [_dcdc ];if _bgdc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bgdc ;};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aefd :=args [0].Type ;for _ ,_ebdcf :=range args {if _ebdcf .Type !=_aefd {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _aefd {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_afbe :=len (args [0].ListValues ());_adfdg :=make ([]float64 ,_afbe );for _cafge :=range _adfdg {_adfdg [_cafge ]=1.0;};for _ ,_gfccga :=range args {if len (_gfccga .ListValues ())!=_afbe {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _cfgg ,_adfad :=range _gfccga .ListValues (){_adfad =_adfad .AsNumber ();if _adfad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_adfdg [_cfgg ]=_adfdg [_cfgg ]*_adfad .ValueNumber ;};};_cgbe :=0.0;for _ ,_gggba :=range _adfdg {_cgbe +=_gggba ;};return MakeNumberResult (_cgbe );};return MakeNumberResult (1.0);};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_bcbb :=len (args );if _bcbb < 3||_bcbb > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_eacf :=args [1].ValueNumber ;if _eacf !=float64 (int (_eacf )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_befb :=args [2].ValueNumber ;_fabb :=0.0;if _bcbb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fabb =args [3].ValueNumber ;};_fecg :=0.0;if _bcbb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fecg =args [4].ValueNumber ;if _fecg !=0{_fecg =1;};};if _afd ==0{return MakeNumberResult (-_befb *_eacf -_fabb );}else {return MakeNumberResult ((((1-_ee .Pow (1+_afd ,_eacf ))/_afd )*_befb *(1+_afd *_fecg )-_fabb )/_ee .Pow (1+_afd ,_eacf ));};};const _fedb =57377;var _accc []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};const _gd ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _gddec =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gdbd :=args [0].Ref ;if _gdbd .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_gbgf ,_badgb :=_ae .ParseCellReference (_gdbd .Value );if _badgb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gdbd .Value );};return MakeNumberResult (float64 (_gbgf .RowIdx ));};func (_fcbde *Lexer )lex (_edbf _a .Reader ){_gggf ,_bbegc ,_cebga :=0,0,0;_ffded :=-1;_ffbf ,_gfee ,_fabgd :=0,0,0;_ =_fabgd ;_gbedc :=1;_ =_gbedc ;_ccfd :=make ([]byte ,4096);_edfbg :=false ;for !_edfbg {_fbdcg :=0;if _ffbf > 0{_fbdcg =_bbegc -_ffbf ;};_bbegc =0;_fedbe ,_geeda :=_edbf .Read (_ccfd [_fbdcg :]);if _fedbe ==0||_geeda !=nil {_edfbg =true ;};_cebga =_fedbe +_fbdcg ;if _cebga < len (_ccfd ){_ffded =_cebga ;};{_gggf =_cdec ;_ffbf =0;_gfee =0;_fabgd =0;};{var _aeeeg int ;var _ffec uint ;if _bbegc ==_cebga {goto _ebgc ;};if _gggf ==0{goto _fbfff ;};_aaegg :_aeeeg =int (_bfded [_gggf ]);_ffec =uint (_accc [_aeeeg ]);_aeeeg ++;for ;_ffec > 0;_ffec --{_aeeeg ++;switch _accc [_aeeeg -1]{case 2:_ffbf =_bbegc ;};};switch _gggf {case 30:switch _ccfd [_bbegc ]{case 34:goto _ddfdba ;case 35:goto _bgab ;case 36:goto _aded ;case 38:goto _gbce ;case 39:goto _cdgagf ;case 40:goto _ecfeb ;case 41:goto _abgeb ;case 42:goto _dafd ;case 43:goto _ggfa ;case 44:goto _cggb ;case 45:goto _beef ;case 47:goto _eggad ;case 58:goto _bcfcf ;case 59:goto _fbdd ;case 60:goto _ggfab ;case 61:goto _fcgdb ;case 62:goto _agfb ;case 63:goto _fdfc ;case 70:goto _ecgae ;case 84:goto _abcff ;case 92:goto _cgafd ;case 94:goto _bbegb ;case 95:goto _gdcg ;case 123:goto _agac ;case 125:goto _cfcg ;};switch {case _ccfd [_bbegc ]< 65:switch {case _ccfd [_bbegc ]> 37:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _ecgff ;};case _ccfd [_bbegc ]>=33:goto _fdfc ;};case _ccfd [_bbegc ]> 90:switch {case _ccfd [_bbegc ]> 93:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _egcba ;};case _ccfd [_bbegc ]>=91:goto _fdfc ;};default:goto _egfe ;};goto _fgea ;case 1:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _gefd ;case 123:goto _gefd ;case 125:goto _gefd ;};switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _gefd ;};case _ccfd [_bbegc ]> 45:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _gefd ;};case _ccfd [_bbegc ]>=58:goto _gefd ;};default:goto _gefd ;};goto _fgea ;case 0:goto _fbfff ;case 2:if _ccfd [_bbegc ]==34{goto _gbgdg ;};goto _ddfdba ;case 31:if _ccfd [_bbegc ]==34{goto _ddfdba ;};goto _adgeg ;case 3:switch _ccfd [_bbegc ]{case 78:goto _eabfc ;case 82:goto _addca ;};goto _fdfc ;case 4:switch _ccfd [_bbegc ]{case 47:goto _ecba ;case 85:goto _eaada ;};goto _fdfc ;case 5:if _ccfd [_bbegc ]==65{goto _caeee ;};goto _fdfc ;case 6:switch _ccfd [_bbegc ]{case 76:goto _bfgcg ;case 77:goto _fcdc ;};goto _fdfc ;case 7:if _ccfd [_bbegc ]==76{goto _fcdc ;};goto _fdfc ;case 8:if _ccfd [_bbegc ]==33{goto _caeee ;};goto _fdfc ;case 9:if _ccfd [_bbegc ]==69{goto _edbb ;};goto _fdfc ;case 10:if _ccfd [_bbegc ]==70{goto _afeee ;};goto _fdfc ;case 11:if _ccfd [_bbegc ]==33{goto _abbec ;};goto _fdfc ;case 12:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _fdfc ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=45{goto _fdfc ;};case _ccfd [_bbegc ]>=34:goto _fdfc ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]< 65:if 58<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=63{goto _fdfc ;};case _ccfd [_bbegc ]> 90:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _fdfc ;};default:goto _deba ;};default:goto _aebc ;};goto _fgea ;case 13:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _fdfc ;case 58:goto _gfbeg ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=45{goto _fdfc ;};case _ccfd [_bbegc ]>=34:goto _fdfc ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _fdfc ;};case _ccfd [_bbegc ]>=59:goto _fdfc ;};default:goto _aebc ;};goto _fgea ;case 14:if _ccfd [_bbegc ]==36{goto _gdaae ;};if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _ecbc ;};goto _gefd ;case 15:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _ecbc ;};goto _gefd ;case 32:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _ecbc ;};goto _gbbc ;case 16:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 47:goto _fdfc ;case 58:goto _cfggd ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 45:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _fdbbd ;};case _ccfd [_bbegc ]>=34:goto _fdfc ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]> 90:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _fdfc ;};case _ccfd [_bbegc ]>=65:goto _deba ;};default:goto _fdfc ;};goto _fgea ;case 17:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _gefd ;case 123:goto _gefd ;case 125:goto _gefd ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=45{goto _gefd ;};case _ccfd [_bbegc ]>=34:goto _gefd ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _gefd ;};case _ccfd [_bbegc ]>=58:goto _gefd ;};default:goto _fdbbd ;};goto _fgea ;case 33:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _gfaae ;case 123:goto _gfaae ;case 125:goto _gfaae ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=45{goto _gfaae ;};case _ccfd [_bbegc ]>=34:goto _gfaae ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _gfaae ;};case _ccfd [_bbegc ]>=58:goto _gfaae ;};default:goto _fdbbd ;};goto _fgea ;case 18:if _ccfd [_bbegc ]==36{goto _afcc ;};if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _agdc ;};goto _gefd ;case 19:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _agdc ;};goto _gefd ;case 34:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _agdc ;};goto _adacd ;case 20:switch _ccfd [_bbegc ]{case 39:goto _fdfc ;case 42:goto _fdfc ;case 47:goto _fdfc ;case 58:goto _fdfc ;case 63:goto _fdfc ;};if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=93{goto _fdfc ;};goto _eegceb ;case 21:switch _ccfd [_bbegc ]{case 39:goto _bgeac ;case 42:goto _fdfc ;case 47:goto _fdfc ;case 58:goto _fdfc ;case 63:goto _fdfc ;};if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=93{goto _fdfc ;};goto _eegceb ;case 22:if _ccfd [_bbegc ]==33{goto _bdceg ;};goto _fdfc ;case 35:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _cefg ;case 58:goto _gfbeg ;case 101:goto _fadd ;case 123:goto _acgaf ;case 125:goto _acgaf ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=47{goto _acgaf ;};case _ccfd [_bbegc ]>=34:goto _acgaf ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _acgaf ;};case _ccfd [_bbegc ]>=59:goto _acgaf ;};default:goto _ecgff ;};goto _fgea ;case 36:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _acgaf ;case 101:goto _fadd ;case 123:goto _acgaf ;case 125:goto _acgaf ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=45{goto _acgaf ;};case _ccfd [_bbegc ]>=34:goto _acgaf ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _acgaf ;};case _ccfd [_bbegc ]>=58:goto _acgaf ;};default:goto _cefg ;};goto _fgea ;case 23:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _dgac ;case 123:goto _dgac ;case 125:goto _dgac ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=45{goto _dgac ;};case _ccfd [_bbegc ]>=34:goto _dgac ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _dgac ;};case _ccfd [_bbegc ]>=58:goto _dgac ;};default:goto _cgeg ;};goto _fgea ;case 37:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 47:goto _acgaf ;case 123:goto _acgaf ;case 125:goto _acgaf ;};switch {case _ccfd [_bbegc ]< 48:switch {case _ccfd [_bbegc ]> 35:if 37<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=45{goto _acgaf ;};case _ccfd [_bbegc ]>=34:goto _acgaf ;};case _ccfd [_bbegc ]> 57:switch {case _ccfd [_bbegc ]> 63:if 91<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=94{goto _acgaf ;};case _ccfd [_bbegc ]>=58:goto _acgaf ;};default:goto _cgeg ;};goto _fgea ;case 38:switch _ccfd [_bbegc ]{case 61:goto _efdeg ;case 62:goto _fefc ;};goto _gfbdg ;case 39:if _ccfd [_bbegc ]==61{goto _gdce ;};goto _dbacb ;case 24:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _fdfc ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _fdfc ;};default:goto _fdfc ;};goto _fgea ;case 40:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 40:goto _ccad ;case 46:goto _fdce ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _fdce ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fdce ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 41:switch _ccfd [_bbegc ]{case 46:goto _gfcbd ;case 92:goto _gfcbd ;case 95:goto _gfcbd ;};switch {case _ccfd [_bbegc ]< 65:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gfcbd ;};case _ccfd [_bbegc ]> 90:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _gfcbd ;};default:goto _gfcbd ;};goto _daedd ;case 42:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 43:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 40:goto _ccad ;case 46:goto _fdce ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _gfaae ;case 125:goto _gfaae ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _gfaae ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};default:goto _gfaae ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fdce ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _gfaae ;};default:goto _gfaae ;};goto _fgea ;case 44:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _gefd ;case 125:goto _gefd ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _gefd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _gefd ;};default:goto _gefd ;};goto _fgea ;case 25:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 65:goto _eaff ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _fdfc ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 66<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _fdfc ;};default:goto _fdfc ;};goto _fgea ;case 45:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 76:goto _fdcf ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 46:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 83:goto _cbecg ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 47:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 69:goto _aggfb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 26:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 79:goto _edgca ;case 82:goto _gcca ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _fdfc ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _fdfc ;};default:goto _fdfc ;};goto _fgea ;case 48:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 68:goto _debga ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 49:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 79:goto _bagfa ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 50:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 36:goto _fbfbb ;case 40:goto _ccad ;case 46:goto _fdce ;case 58:goto _cfggd ;case 85:goto _cbecg ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 59:switch {case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gdecb ;};case _ccfd [_bbegc ]>=34:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _fbfbc ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 27:switch _ccfd [_bbegc ]{case 46:goto _gfcbd ;case 92:goto _gfcbd ;case 95:goto _gfcbd ;};switch {case _ccfd [_bbegc ]< 65:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _gfcbd ;};case _ccfd [_bbegc ]> 90:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _gfcbd ;};default:goto _gfcbd ;};goto _fdfc ;case 28:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 120:goto _dfbcd ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _fdfc ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _fdfc ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _fdfc ;};default:goto _fdfc ;};goto _fgea ;case 51:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 108:goto _dfcfg ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 52:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 102:goto _dedaa ;case 110:goto _bdgec ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 53:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 110:goto _gfgdc ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 54:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _debgd ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 55:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _abab ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _abab ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 56:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 40:goto _fgacd ;case 46:goto _abab ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _abab ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _abab ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 57:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 109:goto _gaaf ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 58:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _afec ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _daedd ;case 125:goto _daedd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _daedd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _daedd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _daedd ;};default:goto _daedd ;};goto _fgea ;case 59:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _ebefg ;case 123:goto _gefd ;case 125:goto _gefd ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _gefd ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _gefd ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _ebefg ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _gefd ;};default:goto _gefd ;};goto _fgea ;case 29:switch _ccfd [_bbegc ]{case 33:goto _agcgb ;case 46:goto _becb ;case 92:goto _gfcbd ;case 95:goto _becb ;case 123:goto _fdfc ;case 125:goto _fdfc ;};switch {case _ccfd [_bbegc ]< 58:switch {case _ccfd [_bbegc ]< 37:if 34<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=35{goto _fdfc ;};case _ccfd [_bbegc ]> 47:if 48<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=57{goto _becb ;};default:goto _fdfc ;};case _ccfd [_bbegc ]> 63:switch {case _ccfd [_bbegc ]< 91:if 65<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=90{goto _becb ;};case _ccfd [_bbegc ]> 94:if 97<=_ccfd [_bbegc ]&&_ccfd [_bbegc ]<=122{goto _becb ;};default:goto _fdfc ;};default:goto _fdfc ;};goto _fgea ;};_fdfc :_gggf =0;goto _cbfab ;_fgea :_gggf =1;goto _cbfab ;_ddfdba :_gggf =2;goto _cbfab ;_bgab :_gggf =3;goto _cbfab ;_eabfc :_gggf =4;goto _cbfab ;_ecba :_gggf =5;goto _cbfab ;_eaada :_gggf =6;goto _cbfab ;_bfgcg :_gggf =7;goto _cbfab ;_fcdc :_gggf =8;goto _cbfab ;_addca :_gggf =9;goto _cbfab ;_edbb :_gggf =10;goto _cbfab ;_afeee :_gggf =11;goto _cbfab ;_aded :_gggf =12;goto _cbfab ;_aebc :_gggf =13;goto _cbfab ;_gfbeg :_gggf =14;goto _cbfab ;_gdaae :_gggf =15;goto _cbfab ;_deba :_gggf =16;goto _cbfab ;_fbfbb :_gggf =17;goto _cbfab ;_cfggd :_gggf =18;goto _cbfab ;_afcc :_gggf =19;goto _cbfab ;_cdgagf :_gggf =20;goto _cbfab ;_eegceb :_gggf =21;goto _cbfab ;_bgeac :_gggf =22;goto _cbfab ;_fadd :_gggf =23;goto _cbfab ;_egfe :_gggf =24;goto _cbfab ;_ecgae :_gggf =25;goto _cbfab ;_abcff :_gggf =26;goto _cbfab ;_cgafd :_gggf =27;goto _cbfab ;_gdcg :_gggf =28;goto _cbfab ;_egcba :_gggf =29;goto _cbfab ;_gefd :_gggf =30;goto _ggcdd ;_agcgb :_gggf =30;goto _abfa ;_caeee :_gggf =30;goto _ffdea ;_abbec :_gggf =30;goto _aaccd ;_bdceg :_gggf =30;goto _aacff ;_dgac :_gggf =30;goto _dbcc ;_ccad :_gggf =30;goto _ccddc ;_gbce :_gggf =30;goto _bdfb ;_ecfeb :_gggf =30;goto _abaeef ;_abgeb :_gggf =30;goto _cgde ;_dafd :_gggf =30;goto _abgf ;_ggfa :_gggf =30;goto _dedff ;_cggb :_gggf =30;goto _cbeb ;_beef :_gggf =30;goto _ggcef ;_eggad :_gggf =30;goto _cfdcb ;_bcfcf :_gggf =30;goto _acfbc ;_fbdd :_gggf =30;goto _fbca ;_fcgdb :_gggf =30;goto _bbbf ;_bbegb :_gggf =30;goto _dcgcd ;_agac :_gggf =30;goto _beddf ;_cfcg :_gggf =30;goto _ccfg ;_adgeg :_gggf =30;goto _fefe ;_gbbc :_gggf =30;goto _dgfg ;_gfaae :_gggf =30;goto _ebbec ;_adacd :_gggf =30;goto _ggaeg ;_acgaf :_gggf =30;goto _ceffd ;_gfbdg :_gggf =30;goto _afab ;_efdeg :_gggf =30;goto _ddge ;_fefc :_gggf =30;goto _bbbad ;_dbacb :_gggf =30;goto _bdbad ;_gdce :_gggf =30;goto _fgbag ;_daedd :_gggf =30;goto _gafcc ;_fgacd :_gggf =30;goto _cadfa ;_gbgdg :_gggf =31;goto _ffcb ;_ecbc :_gggf =32;goto _cbfab ;_fdbbd :_gggf =33;goto _gcagb ;_agdc :_gggf =34;goto _cbfab ;_ecgff :_gggf =35;goto _bdfe ;_cefg :_gggf =36;goto _bdfe ;_cgeg :_gggf =37;goto _bdfe ;_ggfab :_gggf =38;goto _cbfab ;_agfb :_gggf =39;goto _cbfab ;_fdce :_gggf =40;goto _efdc ;_gfcbd :_gggf =41;goto _cbfab ;_becb :_gggf =42;goto _efdc ;_gdecb :_gggf =43;goto _gcagb ;_fbfbc :_gggf =44;goto _efdc ;_aggfb :_gggf =44;goto _dgcd ;_bagfa :_gggf =44;goto _ddcac ;_eaff :_gggf =45;goto _efdc ;_fdcf :_gggf =46;goto _efdc ;_cbecg :_gggf =47;goto _efdc ;_edgca :_gggf =48;goto _efdc ;_debga :_gggf =49;goto _efdc ;_gcca :_gggf =50;goto _efdc ;_dfbcd :_gggf =51;goto _efdc ;_dfcfg :_gggf =52;goto _efdc ;_dedaa :_gggf =53;goto _efdc ;_gfgdc :_gggf =54;goto _efdc ;_debgd :_gggf =55;goto _efdc ;_abab :_gggf =56;goto _efdc ;_bdgec :_gggf =57;goto _efdc ;_gaaf :_gggf =58;goto _efdc ;_afec :_gggf =59;goto _efdc ;_ebefg :_gggf =59;goto _bdgdg ;_ffdea :_aeeeg =3;goto _fbag ;_aaccd :_aeeeg =5;goto _fbag ;_abfa :_aeeeg =7;goto _fbag ;_aacff :_aeeeg =9;goto _fbag ;_ccddc :_aeeeg =11;goto _fbag ;_cadfa :_aeeeg =13;goto _fbag ;_bdfb :_aeeeg =15;goto _fbag ;_beddf :_aeeeg =17;goto _fbag ;_ccfg :_aeeeg =19;goto _fbag ;_abaeef :_aeeeg =21;goto _fbag ;_cgde :_aeeeg =23;goto _fbag ;_dedff :_aeeeg =25;goto _fbag ;_ggcef :_aeeeg =27;goto _fbag ;_abgf :_aeeeg =29;goto _fbag ;_cfdcb :_aeeeg =31;goto _fbag ;_dcgcd :_aeeeg =33;goto _fbag ;_bbbf :_aeeeg =35;goto _fbag ;_ddge :_aeeeg =37;goto _fbag ;_fgbag :_aeeeg =39;goto _fbag ;_bbbad :_aeeeg =41;goto _fbag ;_acfbc :_aeeeg =43;goto _fbag ;_fbca :_aeeeg =45;goto _fbag ;_cbeb :_aeeeg =47;goto _fbag ;_ceffd :_aeeeg =49;goto _fbag ;_ebbec :_aeeeg =51;goto _fbag ;_dgfg :_aeeeg =53;goto _fbag ;_ggaeg :_aeeeg =55;goto _fbag ;_gafcc :_aeeeg =57;goto _fbag ;_fefe :_aeeeg =59;goto _fbag ;_afab :_aeeeg =61;goto _fbag ;_bdbad :_aeeeg =63;goto _fbag ;_dbcc :_aeeeg =65;goto _fbag ;_ggcdd :_aeeeg =67;goto _fbag ;_dgcd :_aeeeg =72;goto _fbag ;_bdfe :_aeeeg =75;goto _fbag ;_gcagb :_aeeeg =78;goto _fbag ;_ddcac :_aeeeg =81;goto _fbag ;_bdgdg :_aeeeg =84;goto _fbag ;_efdc :_aeeeg =87;goto _fbag ;_ffcb :_aeeeg =90;goto _fbag ;_fbag :_ffec =uint (_accc [_aeeeg ]);_aeeeg ++;for ;_ffec > 0;_ffec --{_aeeeg ++;switch _accc [_aeeeg -1]{case 3:_gfee =_bbegc +1;case 4:_fabgd =1;case 5:_fabgd =2;case 6:_fabgd =3;case 7:_fabgd =4;case 8:_fabgd =11;case 9:_fabgd =14;case 10:_fabgd =15;case 11:_gfee =_bbegc +1;{_fcbde .emit (_gbcd ,_ccfd [_ffbf :_gfee ]);};case 12:_gfee =_bbegc +1;{_fcbde .emit (_dffa ,_ccfd [_ffbf :_gfee ]);};case 13:_gfee =_bbegc +1;{_fcbde .emit (_bffee ,_ccfd [_ffbf :_gfee -1]);};case 14:_gfee =_bbegc +1;{_fcbde .emit (_bffee ,_ccfd [_ffbf +1:_gfee -2]);};case 15:_gfee =_bbegc +1;{_fcbde .emit (_ebegga ,_ccfd [_ffbf :_gfee -1]);};case 16:_gfee =_bbegc +1;{_fcbde .emit (_ebegga ,_ccfd [_ffbf :_gfee -1]);};case 17:_gfee =_bbegc +1;{_fcbde .emit (_fedb ,_ccfd [_ffbf :_gfee ]);};case 18:_gfee =_bbegc +1;{_fcbde .emit (_dfad ,_ccfd [_ffbf :_gfee ]);};case 19:_gfee =_bbegc +1;{_fcbde .emit (_bcbba ,_ccfd [_ffbf :_gfee ]);};case 20:_gfee =_bbegc +1;{_fcbde .emit (_egegg ,_ccfd [_ffbf :_gfee ]);};case 21:_gfee =_bbegc +1;{_fcbde .emit (_gdege ,_ccfd [_ffbf :_gfee ]);};case 22:_gfee =_bbegc +1;{_fcbde .emit (_eegce ,_ccfd [_ffbf :_gfee ]);};case 23:_gfee =_bbegc +1;{_fcbde .emit (_acbd ,_ccfd [_ffbf :_gfee ]);};case 24:_gfee =_bbegc +1;{_fcbde .emit (_fbced ,_ccfd [_ffbf :_gfee ]);};case 25:_gfee =_bbegc +1;{_fcbde .emit (_dgff ,_ccfd [_ffbf :_gfee ]);};case 26:_gfee =_bbegc +1;{_fcbde .emit (_ffgfc ,_ccfd [_ffbf :_gfee ]);};case 27:_gfee =_bbegc +1;{_fcbde .emit (_cadd ,_ccfd [_ffbf :_gfee ]);};case 28:_gfee =_bbegc +1;{_fcbde .emit (_ddgfb ,_ccfd [_ffbf :_gfee ]);};case 29:_gfee =_bbegc +1;{_fcbde .emit (_cbafe ,_ccfd [_ffbf :_gfee ]);};case 30:_gfee =_bbegc +1;{_fcbde .emit (_bggce ,_ccfd [_ffbf :_gfee ]);};case 31:_gfee =_bbegc +1;{_fcbde .emit (_afdd ,_ccfd [_ffbf :_gfee ]);};case 32:_gfee =_bbegc +1;{_fcbde .emit (_eaaag ,_ccfd [_ffbf :_gfee ]);};case 33:_gfee =_bbegc +1;{_fcbde .emit (_efaf ,_ccfd [_ffbf :_gfee ]);};case 34:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_dfdacf ,_ccfd [_ffbf :_gfee ]);};case 35:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_gcde ,_ccfd [_ffbf :_gfee ]);};case 36:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_dgef ,_ccfd [_ffbf :_gfee ]);};case 37:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_ggab ,_ccfd [_ffbf :_gfee ]);};case 38:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_fegdb ,_ccfd [_ffbf :_gfee ]);};case 39:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_gdagd ,_ccfd [_ffbf +1:_gfee -1]);};case 40:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_dafa ,_ccfd [_ffbf :_gfee ]);};case 41:_gfee =_bbegc ;_bbegc --;{_fcbde .emit (_geab ,_ccfd [_ffbf :_gfee ]);};case 42:_bbegc =(_gfee )-1;{_fcbde .emit (_dfdacf ,_ccfd [_ffbf :_gfee ]);};case 43:switch _fabgd {case 0:{_gggf =0;goto _cbfab ;};case 1:{_bbegc =(_gfee )-1;_fcbde .emit (_gacff ,_ccfd [_ffbf :_gfee ]);};case 2:{_bbegc =(_gfee )-1;_fcbde .emit (_dfdacf ,_ccfd [_ffbf :_gfee ]);};case 3:{_bbegc =(_gfee )-1;_fcbde .emit (_gcde ,_ccfd [_ffbf :_gfee ]);};case 4:{_bbegc =(_gfee )-1;_fcbde .emit (_abdec ,_ccfd [_ffbf :_gfee ]);};case 11:{_bbegc =(_gfee )-1;_fcbde .emit (_adfde ,_ccfd [_ffbf :_gfee ]);};case 14:{_bbegc =(_gfee )-1;_fcbde .emit (_fegdb ,_ccfd [_ffbf :_gfee ]);};case 15:{_bbegc =(_gfee )-1;_fcbde .emit (_gdagd ,_ccfd [_ffbf +1:_gfee -1]);};};};};goto _cbfab ;_cbfab :_aeeeg =int (_cbcf [_gggf ]);_ffec =uint (_accc [_aeeeg ]);_aeeeg ++;for ;_ffec > 0;_ffec --{_aeeeg ++;switch _accc [_aeeeg -1]{case 0:_ffbf =0;case 1:_fabgd =0;};};if _gggf ==0{goto _fbfff ;};if _bbegc ++;_bbegc !=_cebga {goto _aaegg ;};_ebgc :{};if _bbegc ==_ffded {switch _gggf {case 1:goto _gefd ;case 2:goto _gefd ;case 31:goto _adgeg ;case 14:goto _gefd ;case 15:goto _gefd ;case 32:goto _gbbc ;case 17:goto _gefd ;case 33:goto _gfaae ;case 18:goto _gefd ;case 19:goto _gefd ;case 34:goto _adacd ;case 35:goto _acgaf ;case 36:goto _acgaf ;case 23:goto _dgac ;case 37:goto _acgaf ;case 38:goto _gfbdg ;case 39:goto _dbacb ;case 40:goto _daedd ;case 41:goto _daedd ;case 42:goto _daedd ;case 43:goto _gfaae ;case 44:goto _gefd ;case 45:goto _daedd ;case 46:goto _daedd ;case 47:goto _daedd ;case 48:goto _daedd ;case 49:goto _daedd ;case 50:goto _daedd ;case 51:goto _daedd ;case 52:goto _daedd ;case 53:goto _daedd ;case 54:goto _daedd ;case 55:goto _daedd ;case 56:goto _daedd ;case 57:goto _daedd ;case 58:goto _daedd ;case 59:goto _gefd ;};};_fbfff :{};};if _ffbf > 0{copy (_ccfd [0:],_ccfd [_ffbf :]);};};_ =_ffded ;if _gggf ==_ffbaf {_fcbde .emit (_ccfee ,nil );};close (_fcbde ._cdfdc );};

// String returns a string representation of CellRef.
func (_ef CellRef )String ()string {return _ef ._afb };

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_feaba :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_dedb :=args [1].ValueNumber !=0;_gdba :=_gbdff (args [2:],[]string {},_dedb );return MakeStringResult (_ed .Join (_gdba ,_feaba ));};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_ceed .Lock ();defer _ceed .Unlock ();if _ ,_gefbe :=_bffae [name ];_gefbe {_edb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_bffae [name ]=fn ;};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_ccce PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_dfccf :=_ccce ._ebdaf .Reference (ctx ,ev );_eadg :=_ccce ._fbefa .Reference (ctx ,ev );_cdcdd :=_ccce ._bgccc .Reference (ctx ,ev );switch _dfccf .Type {case ReferenceTypeSheet :if _cadc (_dfccf ,ctx ){return MakeErrorResultType (ErrorTypeName ,_f .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dfccf .Value ));};_bbcb :=_ggfgb (_dfccf ,_eadg ,_cdcdd );if _eadg .Type ==ReferenceTypeCell &&_cdcdd .Type ==ReferenceTypeCell {if _gedbe ,_beebc :=ev .GetFromCache (_bbcb );_beebc {return _gedbe ;}else {_fbfa :=_acegg (ctx .Sheet (_dfccf .Value ),ev ,_eadg .Value ,_cdcdd .Value );ev .SetCache (_bbcb ,_fbfa );return _fbfa ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bbcb );default:return MakeErrorResult (_f .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfccf .Type ));};};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_agba :=len (args );if _agba !=5&&_agba !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egbf ,_adfdf ,_gccd :=_caed (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gccd .Type ==ResultTypeError {return _gccd ;};_affe ,_gccd :=_geff (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _gccd .Type ==ResultTypeError {return _gccd ;};if _affe >=_egbf {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_ffbg :=args [3].ValueNumber ;if _ffbg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_daff :=args [4].ValueNumber ;if _daff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fgge :=0;if _agba ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgge =int (args [5].ValueNumber );if !_afce (_fgge ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_eaagf ,_gccd :=_fbb (_egbf ,_adfdf ,_fgge );if _gccd .Type ==ResultTypeError {return _gccd ;};_bcag ,_gccd :=_fbb (_affe ,_adfdf ,_fgge );if _gccd .Type ==ResultTypeError {return _gccd ;};_fgddf ,_gccd :=_fbb (_affe ,_egbf ,_fgge );if _gccd .Type ==ResultTypeError {return _gccd ;};_aeebb :=1+_bcag *_ffbg ;_gdbfe :=1+_eaagf *_daff ;return MakeNumberResult ((_aeebb /_gdbfe -_fgddf *_ffbg )*100);};

// Eval evaluates the binary expression using the context given.
func (_fce BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_cg :=_fce ._dc .Eval (ctx ,ev );if _cg .Type ==ResultTypeError {return _cg ;};_fd :=_fce ._ac .Eval (ctx ,ev );if _fd .Type ==ResultTypeError {return _fd ;};if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeArray {if !_ec (_cg .ValueArray ,_fd .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _dba (_fce ._bc ,_cg .ValueArray ,_fd .ValueArray );}else if _cg .Type ==ResultTypeList {if len (_cg .ValueList )!=len (_fd .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _beg (_fce ._bc ,_cg .ValueList ,_fd .ValueList );};}else if _cg .Type ==ResultTypeArray &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return _ead (_fce ._bc ,_cg .ValueArray ,_fd );}else if _cg .Type ==ResultTypeList &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return _acc (_fce ._bc ,_cg .ValueList ,_fd );};switch _fce ._bc {case BinOpTypePlus :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_cg .ValueNumber +_fd .ValueNumber );};};case BinOpTypeMinus :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_cg .ValueNumber -_fd .ValueNumber );};};case BinOpTypeMult :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_cg .ValueNumber *_fd .ValueNumber );};};case BinOpTypeDiv :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {if _fd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_cg .ValueNumber /_fd .ValueNumber );};};case BinOpTypeExp :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeNumberResult (_ee .Pow (_cg .ValueNumber ,_fd .ValueNumber ));};};case BinOpTypeLT :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber < _fd .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString < _fd .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cg .Type ==ResultTypeString &&_fd .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cg .Type ==ResultTypeNumber &&_fd .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeEmpty &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_fd .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber > _fd .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString > _fd .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _cg .Type ==ResultTypeString &&_fd .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeNumber &&_fd .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cg .Type ==ResultTypeEmpty &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_fd .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber ==_fd .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString ==_fd .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_cg .Type ==ResultTypeString &&_fd .Type ==ResultTypeNumber )||(_cg .Type ==ResultTypeNumber &&_fd .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _cg .Type ==ResultTypeEmpty &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return MakeBoolResult (_ab (_fd ));}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_fd .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_cg ));};case BinOpTypeNE :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber !=_fd .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString !=_fd .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_cg .Type ==ResultTypeString &&_fd .Type ==ResultTypeNumber )||(_cg .Type ==ResultTypeNumber &&_fd .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _cg .Type ==ResultTypeEmpty &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return MakeBoolResult (!_ab (_fd ));}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_fd .Type ==ResultTypeEmpty {return MakeBoolResult (!_ab (_cg ));};case BinOpTypeLEQ :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber <=_fd .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString <=_fd .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cg .Type ==ResultTypeString &&_fd .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _cg .Type ==ResultTypeNumber &&_fd .Type ==ResultTypeString {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeEmpty &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return MakeBoolResult (_ab (_fd ));}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_fd .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_cg ));};case BinOpTypeGEQ :if _cg .Type ==_fd .Type {if _cg .Type ==ResultTypeNumber {return MakeBoolResult (_cg .ValueNumber >=_fd .ValueNumber );};if _cg .Type ==ResultTypeString {return MakeBoolResult (_cg .ValueString >=_fd .ValueString );};if _cg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _cg .Type ==ResultTypeString &&_fd .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _cg .Type ==ResultTypeNumber &&_fd .Type ==ResultTypeString {return MakeBoolResult (false );}else if _cg .Type ==ResultTypeEmpty &&(_fd .Type ==ResultTypeNumber ||_fd .Type ==ResultTypeString ){return MakeBoolResult (_ab (_fd ));}else if (_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString )&&_fd .Type ==ResultTypeEmpty {return MakeBoolResult (_ab (_cg ));};case BinOpTypeConcat :return MakeStringResult (_cg .Value ()+_fd .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_bcdae Result )ListValues ()[]Result {if _bcdae .Type ==ResultTypeArray {_eggadf :=[]Result {};for _ ,_ebdag :=range _bcdae .ValueArray {for _ ,_aefg :=range _ebdag {_eggadf =append (_eggadf ,_aefg );};};return _eggadf ;};if _bcdae .Type ==ResultTypeList {return _bcdae .ValueList ;};return nil ;};const _dgcb =86400000000000;func _afcgb (_edfdf _ea .Time )bool {return _ea .Now ().Sub (_edfdf )>=_bfac };

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_ag [][]Expression };func _cdc (_bddg []Result ,_aaddb bool )Result {var _beea string ;if _aaddb {_beea ="\u004c\u0041\u0052G\u0045";}else {_beea ="\u0053\u004d\u0041L\u004c";};if len (_bddg )!=2{return MakeErrorResult (_beea +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cegc :=_bddg [0];var _fbedg [][]Result ;switch _cegc .Type {case ResultTypeArray :_fbedg =_cegc .ValueArray ;case ResultTypeList :_fbedg =[][]Result {_cegc .ValueList };default:return MakeErrorResult (_beea +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_fbedg )==0{return MakeErrorResult (_beea +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _bddg [1].Type !=ResultTypeNumber {return MakeErrorResult (_beea +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ffbc :=_bddg [1].ValueNumber ;if _ffbc < 1{return MakeErrorResultType (ErrorTypeNum ,_beea +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_debg :=int (_ffbc );if float64 (_debg )!=_ffbc {return MakeErrorResultType (ErrorTypeNum ,_beea +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_decec :=[]float64 {};for _ ,_fgdef :=range _fbedg {for _ ,_accec :=range _fgdef {if _accec .Type ==ResultTypeNumber {_decec =append (_decec ,_accec .ValueNumber );};};};if _debg > len (_decec ){return MakeErrorResultType (ErrorTypeNum ,_beea +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fgee :=_eab .MergeSort (_decec );if _aaddb {return MakeNumberResult (_fgee [len (_fgee )-_debg ]);}else {return MakeNumberResult (_fgee [_debg -1]);};};const _gacff =57352;

// Number is a nubmer expression.
type Number struct{_cgbdd float64 };

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_aaae :=MakeNumberResult (0);for _ ,_defee :=range args {_defee =_defee .AsNumber ();switch _defee .Type {case ResultTypeNumber :_aaae .ValueNumber +=_defee .ValueNumber ;case ResultTypeList ,ResultTypeArray :_bafe :=Sum (_defee .ListValues ());if _bafe .Type !=ResultTypeNumber {return _bafe ;};_aaae .ValueNumber +=_bafe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _defee ;case ResultTypeEmpty :default:return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_defee .Type ));};};return _aaae ;};func _abgd (_efae []Result )[]float64 {_ggae :=make ([]float64 ,0);for _ ,_fbab :=range _efae {if _fbab .Type ==ResultTypeEmpty {continue ;};_fbab =_fbab .AsNumber ();switch _fbab .Type {case ResultTypeNumber :if !_fbab .IsBoolean {_ggae =append (_ggae ,_fbab .ValueNumber );};case ResultTypeList ,ResultTypeArray :_ggae =append (_ggae ,_abgd (_fbab .ListValues ())...);case ResultTypeString :default:_edb .Log ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fbab .Type );};};return _ggae ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_gefab :=len (args );if _gefab < 3||_gefab > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_caedg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aegce :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cfaa :=args [2].ValueNumber ;_fefd :=0.0;if _gefab >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fefd =args [3].ValueNumber ;};_baee :=0.0;if _gefab ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_baee =args [4].ValueNumber ;if _baee !=0{_baee =1;};};_bdeb :=_aegce *(1+_caedg *_baee )-_fefd *_caedg ;_bdece :=(_cfaa *_caedg +_aegce *(1+_caedg *_baee ));return MakeNumberResult (_ee .Log (_bdeb /_bdece )/_ee .Log (1+_caedg ));};const _fbced =57366;

// String returns a string representation of PrefixExpr.
func (_cdagg PrefixExpr )String ()string {return _f .Sprintf ("\u0025\u0073\u0021%\u0073",_cdagg ._bgac .String (),_cdagg ._fbde .String ());};var _ffebc =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ccb :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_ccb *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_dgbf :=_gffe (args [1]);for _ ,_afbd :=range _dgbf {for _ ,_cgagd :=range _afbd {if _cgagd .Type !=ResultTypeNumber ||_cgagd .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_ccb *=1.0+_cgagd .ValueNumber ;};};return MakeNumberResult (_ccb );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};func _gfde (_dcgab ,_cfceb Result ,_gfbb ,_bggf bool )cmpResult {_dcgab =_dcgab .AsNumber ();_cfceb =_cfceb .AsNumber ();if _dcgab .Type !=_cfceb .Type {return _geggg ;};if _dcgab .Type ==ResultTypeNumber {if _dcgab .ValueNumber ==_cfceb .ValueNumber {return _cace ;};if _dcgab .ValueNumber < _cfceb .ValueNumber {return _dbfga ;};return _bagbd ;};if _dcgab .Type ==ResultTypeString {_gfbc :=_dcgab .ValueString ;_egegf :=_cfceb .ValueString ;if !_gfbb {_gfbc =_ed .ToLower (_gfbc );_egegf =_ed .ToLower (_egegf );};if _bggf {_ccgb :=_bf .Match (_egegf ,_gfbc );if _ccgb {return _cace ;}else {return _bagbd ;};};return cmpResult (_ed .Compare (_gfbc ,_egegf ));};if _dcgab .Type ==ResultTypeEmpty {return _cace ;};if _dcgab .Type ==ResultTypeList {if len (_dcgab .ValueList )< len (_cfceb .ValueList ){return _dbfga ;};if len (_dcgab .ValueList )> len (_cfceb .ValueList ){return _bagbd ;};for _dgee :=range _dcgab .ValueList {_cffb :=_gfde (_dcgab .ValueList [_dgee ],_cfceb .ValueList [_dgee ],_gfbb ,_bggf );if _cffb !=_cace {return _cffb ;};};return _cace ;};if _dcgab .Type ==ResultTypeList {if len (_dcgab .ValueArray )< len (_cfceb .ValueArray ){return _dbfga ;};if len (_dcgab .ValueArray )> len (_cfceb .ValueArray ){return _bagbd ;};for _gbae :=range _dcgab .ValueArray {_fed :=_dcgab .ValueArray [_gbae ];_fdcc :=_dcgab .ValueArray [_gbae ];if len (_fed )< len (_fdcc ){return _dbfga ;};if len (_fed )> len (_fdcc ){return _bagbd ;};for _ecgd :=range _fed {_ddccb :=_gfde (_fed [_ecgd ],_fdcc [_ecgd ],_gfbb ,_bggf );if _ddccb !=_cace {return _ddccb ;};};};return _cace ;};return _geggg ;};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbeaf :=args [0];if _cbeaf .Type ==ResultTypeList {_bcaea :=[][]Result {};for _ ,_agaag :=range _cbeaf .ValueList {_bcaea =append (_bcaea ,[]Result {_agaag });};return MakeArrayResult (_bcaea );};_acf :=make ([][]Result ,len (_cbeaf .ValueArray [0]));for _ ,_dcfb :=range _cbeaf .ValueArray {for _gcbc ,_gbde :=range _dcfb {_acf [_gcbc ]=append (_acf [_gcbc ],_gbde );};};return MakeArrayResult (_acf );};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ggfc :=args [0];if _ggfc .Type !=ResultTypeArray &&_ggfc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bfeaf :=_gffe (_ggfc );_afaee :=args [2];if _afaee .Type !=ResultTypeArray &&_afaee .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dfccd :=_gffe (_afaee );_bgde :=_aebee (args [1]);_fcdb :=0.0;for _dgcef ,_bacde :=range _bfeaf {for _ecbd ,_agee :=range _bacde {if _eged (_agee ,_bgde ){_fcdb +=_dfccd [_dgcef ][_ecbd ].ValueNumber ;};};};return MakeNumberResult (_fcdb );};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_dacf :=len (args );if _dacf !=4&&_dacf !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_egba ,_dfb ,_dbfcd :=_caed (args [0],args [1],"\u0044\u0049\u0053\u0043");if _dbfcd .Type ==ResultTypeError {return _dbfcd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bebf :=args [2].ValueNumber ;if _bebf <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feba :=args [3].ValueNumber ;if _feba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geef :=0;if _dacf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geef =int (args [4].ValueNumber );if !_afce (_geef ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_afad ,_dbfcd :=_fbb (_egba ,_dfb ,_geef );if _dbfcd .Type ==ResultTypeError {return _dbfcd ;};return MakeNumberResult ((_feba -_bebf )/_feba /_afad );};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};var _eadc float64 =25569.0;

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gaf :=_ed .ToLower (args [0].ValueString );if !_egg (_gaf ){_ ,_ ,_ ,_ ,_edgd ,_dfc :=_debc (_gaf );if _dfc .Type ==ResultTypeError {_dfc .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _dfc ;};if _edgd {return MakeNumberResult (0);};};_dea ,_bge ,_aafa ,_ ,_fda :=_aecc (_gaf );if _fda .Type ==ResultTypeError {return _fda ;};return MakeNumberResult (_fee (_dea ,_bge ,_aafa ));};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _cgab (args ,true )};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_edbc ,_cacb :=_fabe (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _cacb .Type ==ResultTypeError {return _cacb ;};_geeg :=_edbc ._gdgb ;_fbdg :=_edbc ._dega ;_bdbc :=_edbc ._gdbgd ;_ebbd :=_edbc ._gca ;_egb :=_edbc ._cggf ;_afeag :=_edbc ._ebef ;if _afeag >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_eaag :=_edbc ._babf ;_dgcf :=1.0/_afeag ;_gdeae :=2.5;if _dgcf < 3{_gdeae =1;}else if _dgcf < 5{_gdeae =1.5;}else if _dgcf <=6{_gdeae =2;};_afeag *=_gdeae ;_bbaa ,_gfeg :=_fbb (_fbdg ,_bdbc ,_eaag );if _gfeg .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_afcb :=_deac (_bbaa *_afeag *_geeg );_geeg -=_afcb ;_gaa :=_geeg -_ebbd ;for _adfc :=0;_adfc < _egb ;_adfc ++{_afcb =_deac (_afeag *_geeg );_gaa -=_afcb ;if _gaa < 0{switch _egb -_adfc {case 0:case 1:return MakeNumberResult (_deac (_geeg *0.5));default:return MakeNumberResult (0);};};_geeg -=_afcb ;};return MakeNumberResult (_afcb );};func (_cbgaf PrefixVerticalRange )verticalRangeReference (_ggdg string )string {return _f .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_ggdg ,_cbgaf ._fdafdc ,_cbgaf ._febae );};type tokenType int ;

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_gegd ,_gede :=_defb (args ,false );if _gede ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_gegd /_gede );};func _eddf (_agaf []Result ,_cgec string )(*cumulArgs ,Result ){if len (_agaf )!=6{return nil ,MakeErrorResult (_cgec +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _agaf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgec +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbba :=_agaf [0].ValueNumber ;if _cbba <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agaf [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgec +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gabf :=_agaf [1].ValueNumber ;if _gabf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _agaf [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgec +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddd :=_agaf [2].ValueNumber ;if _ddd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agaf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgec +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eecfg :=_agaf [3].ValueNumber ;if _eecfg <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _agaf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cgec +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agd :=_agaf [4].ValueNumber ;if _agd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _agd < _eecfg {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _agd > _gabf {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_ddfd :=int (_agaf [5].ValueNumber );if _ddfd !=0&&_ddfd !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_cgec +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_cbba ,_gabf ,_ddd ,_eecfg ,_agd ,_ddfd },_aec ;};func (_addeg *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};type criteriaRegex struct{_degb byte ;_eggec string ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_bad ,_eee :=_beae (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _eee .Type ==ResultTypeError {return _eee ;};_eeb :=_ffee (_bad ._eeg );_dacd :=_ffee (_bad ._fgdg );_gdea :=_bad ._bcbe ;_fffg :=_ecbg (_eeb ,_dacd ,_gdea );_dbeb ,_fcg ,_fegg :=_fffg .Date ();return MakeNumberResult (_fee (_dbeb ,int (_fcg ),_fegg ));};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_ebdaf ,_fbefa ,_bgccc Expression };

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _fggb ,_afae float64 ;switch args [0].Type {case ResultTypeNumber :_afae =args [0].ValueNumber ;case ResultTypeString :_bgb :=DateValue ([]Result {args [0]});if _bgb .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_afae =_bgb .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_fggb =args [1].ValueNumber ;if _fggb < 62&&_afae >=62{_fggb --;};case ResultTypeString :_dedd :=DateValue ([]Result {args [1]});if _dedd .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_fggb =_dedd .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_acdb :=float64 (int (_afae -_fggb ));return MakeNumberResult (_acdb );};

// Reference returns a string reference value to a vertical range.
func (_bada VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_bada .verticalRangeReference ()};};type Expression interface{Eval (_cee Context ,_ecc Evaluator )Result ;Reference (_feb Context ,_dge Evaluator )Reference ;String ()string ;Update (_gf *_b .UpdateQuery )Expression ;};func _fbd (_ddbfe ,_efbf _ea .Time ,_cae int )float64 {if _ddbfe .After (_efbf ){_ddbfe ,_efbf =_efbf ,_ddbfe ;};_gfge :=0;_efdg ,_dac ,_dbeff :=_ddbfe .Date ();_gbgg ,_aceaf ,_ceaa :=_efbf .Date ();_gbgc ,_cecfe :=int (_dac ),int (_aceaf );_cbf ,_fcebd :=_eag (_efdg ,_gbgc ,_dbeff ,_cae ),_eag (_gbgg ,_cecfe ,_ceaa ,_cae );if !_gdfd (_cae ){return _fee (_gbgg ,_cecfe ,_fcebd )-_fee (_efdg ,_gbgc ,_cbf );};if _cae ==0{if (_gbgc ==2||_cbf < 30)&&_ceaa ==31{_fcebd =31;}else if _cecfe ==2&&_fcebd ==_cfe (_gbgg ,_cecfe ){_fcebd =_cfe (_gbgg ,2);};}else {if _gbgc ==2&&_cbf ==30{_cbf =_cfe (_efdg ,2);};if _cecfe ==2&&_fcebd ==30{_fcebd =_cfe (_gbgg ,2);};};if _efdg < _gbgg ||(_efdg ==_gbgg &&_gbgc < _cecfe ){_gfge =30-_cbf +1;_dbeff =1;_cbf =1;_ecge :=_ea .Date (_efdg ,_ea .Month (_gbgc ),_dbeff ,0,0,0,0,_ea .UTC ).AddDate (0,1,0);if _ecge .Year ()< _gbgg {_gfge +=_dag (_ecge .Year (),int (_ecge .Month ()),12,_cae );_ecge =_ecge .AddDate (0,13-int (_ecge .Month ()),0);_gfge +=_bbg (_ecge .Year (),_gbgg -1,_cae );};_gfge +=_dag (_gbgg ,int (_ecge .Month ()),_cecfe -1,_cae );_ecge =_ecge .AddDate (0,_cecfe -int (_ecge .Month ()),0);_gbgc =_ecge .Day ();};_gfge +=_fcebd -_cbf ;if _gfge > 0{return float64 (_gfge );}else {return 0;};};func _eged (_ffgc Result ,_cagd *criteriaParsed )bool {if _ffgc .IsBoolean {return false ;};_fbdbg :=_ffgc .Type ;if _cagd ._gefbf {return _fbdbg ==ResultTypeNumber &&_ffgc .ValueNumber ==_cagd ._faab ;}else if _fbdbg ==ResultTypeNumber {return _fcag (_ffgc .ValueNumber ,_cagd ._ecga );};return _fecaf (_ffgc ,_cagd );};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_abeg NamedRangeRef )Update (q *_b .UpdateQuery )Expression {return _abeg };var _agfce =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// Eval evaluates and returns the result of a constant array expression.
func (_cec ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_abb :=[][]Result {};for _ ,_geb :=range _cec ._ag {_ebb :=[]Result {};for _ ,_fa :=range _geb {_ebb =append (_ebb ,_fa .Eval (ctx ,ev ));};_abb =append (_abb ,_ebb );};return MakeArrayResult (_abb );};const _cadd =57369;

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_daag *ivr )GetLabelPrefix (cellRef string )string {return ""};const (_baff rmode =iota ;_gdeb ;_dgca ;);type ri struct{_cabc float64 ;_egge string ;};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_dcca string ,_efb Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_ded string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_ea .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_aad int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_fff string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dae string )string ;

// GetFormat returns if cell is protected.
GetLocked (_bcfe string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_abe string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_fgde string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_ecg ,_abef int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_gc string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_dec string ,_cbd bool );

// NamedRange returns a named range.
NamedRange (_deb string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_fab ,_faf uint32 );};func _gdec (_defe ,_dcgc ,_eaefg ,_abba ,_dcdg ,_bagc float64 ,_ebec int )(float64 ,Result ){_becf :=int (_bagc );_gegf :=_aegcf (_defe ,_dcgc ,_becf ,_ebec );_cda :=_ddc (_defe ,_dcgc ,_becf ,_ebec )/_gegf ;_bggg ,_fcab :=_egeg (_defe ,_dcgc ,_becf ,_ebec );if _fcab .Type ==ResultTypeError {return 0,_fcab ;};_cece :=_adf (_defe ,_dcgc ,_becf ,_ebec );_afeg :=_dcdg /_ee .Pow (1+_abba /_bagc ,_bggg -1+_cda );_afeg -=100*_eaefg /_bagc *_cece /_gegf ;_ceega :=100*_eaefg /_bagc ;_acgc :=1+_abba /_bagc ;for _ebbf :=0.0;_ebbf < _bggg ;_ebbf ++{_afeg +=_ceega /_ee .Pow (_acgc ,_ebbf +_cda );};return _afeg ,MakeEmptyResult ();};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_eca :=args [1].ValueNumber ;_aadc :=args [0];var _cgba float64 ;switch _aadc .Type {case ResultTypeEmpty :_cgba =0;case ResultTypeNumber :_cgba =_aadc .ValueNumber ;case ResultTypeString :_deae :=DateValue ([]Result {args [0]});if _deae .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_cgba =_deae .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ced :=_ffee (_cgba );_bab :=_ced .AddDate (0,int (_eca +1),0);_cac ,_fba ,_ :=_bab .Date ();_ggf :=_fee (_cac ,int (_fba ),0);if _ggf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _cac ==1900&&_fba ==3{_ggf --;};return MakeNumberResult (_ggf );};

// IsDBCS returns false for the invalid reference context.
func (_cfaeb *ivr )IsDBCS ()bool {return false };const _abdec =57349;type yyParserImpl struct{_baedbd yySymType ;_eedb [_efcf ]yySymType ;_agfcb int ;};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_abcdc ,_adbg :=_bfdgf ("\u0046\u0049\u004e\u0044",args );if _adbg .Type !=ResultTypeEmpty {return _adbg ;};_gbadc :=_abcdc ._daddg ;if _gbadc ==""{return MakeNumberResult (1.0);};_gfgag :=_abcdc ._bfae ;_dbfbe :=_abcdc ._gccf ;_badfc :=1;for _gcfa :=range _gfgag {if _badfc < _dbfbe {_badfc ++;continue ;};_fdgdb :=_ed .Index (_gfgag [_gcfa :],_gbadc );if _fdgdb ==0{return MakeNumberResult (float64 (_badfc ));};_badfc ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Error is an error expression.
type Error struct{_cag string };func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_feagf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eceb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_abfbf :=args [2].ValueNumber ;if _abfbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eggc :=args [3].ValueNumber ;if _eggc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _eggc > _abfbf {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_gbad :=(_feagf -_eceb )*(_abfbf -_eggc +1)*2;_fefg :=_abfbf *(_abfbf +1);return MakeNumberResult (_gbad /_fefg );};const (_cace cmpResult =0;_dbfga cmpResult =-1;_bagbd cmpResult =1;_geggg cmpResult =2;);

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_cedg ,_ecgee ,_gfeb :=_eeee (args );if _gfeb .Type ==ResultTypeError {return _gfeb ;};return MakeNumberResult (_ebfb (_cedg )/_ecgee );};func _dba (_aa BinOpType ,_be ,_bff [][]Result )Result {_eg :=[][]Result {};for _edd :=range _be {_g :=_beg (_aa ,_be [_edd ],_bff [_edd ]);if _g .Type ==ResultTypeError {return _g ;};_eg =append (_eg ,_g .ValueList );};return MakeArrayResult (_eg );};func _ffee (_fef float64 )_ea .Time {_egad :=int64 ((_fef -_eadc )*_dgcb );return _ea .Unix (0,_egad ).UTC ();};func _ggfgb (_gabb ,_degbe ,_bdagd Reference )string {return _f .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gabb .Value ,_degbe .Value ,_bdagd .Value );};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbge :=args [0].AsString ();if _bbge .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_bbge .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_bbge .ValueString [0]));};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aeafa :=args [0].Ref ;if _aeafa .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_aeafa .Value ));};type node struct{_gfgd tokenType ;_fcbg string ;};func _edc (_cgbaf float64 )bool {return _cgbaf ==1||_cgbaf ==2||_cgbaf ==4};func _beae (_cgdd []Result ,_aaa string )(*couponArgs ,Result ){_daea :=len (_cgdd );if _daea !=3&&_daea !=4{return nil ,MakeErrorResult (_aaa +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_deab ,_agfc ,_dfcc :=_caed (_cgdd [0],_cgdd [1],_aaa );if _dfcc .Type ==ResultTypeError {return nil ,_dfcc ;};if _cgdd [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_aaa +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cafa :=_cgdd [2].ValueNumber ;if !_edc (_cafa ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_aaa );};_fcde :=0;if _daea ==4&&_cgdd [3].Type !=ResultTypeEmpty {if _cgdd [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_aaa +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fcde =int (_cgdd [3].ValueNumber );if !_afce (_fcde ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_aaa );};};return &couponArgs {_deab ,_agfc ,int (_cafa ),_fcde },_aec ;};var _cdbfd ,_bbfb ,_fcce ,_cded ,_dbfef ,_decbe *_df .Regexp ;var _egbbg =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// String is a string expression.
type String struct{_fabda string };

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_bfeg PrefixVerticalRange )Update (q *_b .UpdateQuery )Expression {if q .UpdateType ==_b .UpdateActionRemoveColumn {_efefd :=_bfeg ;_ecbad :=_bfeg ._gcbaa .String ();if _ecbad ==q .SheetToUpdate {_afbdgc :=q .ColumnIdx ;_efefd ._fdafdc =_dgg (_bfeg ._fdafdc ,_afbdgc );_efefd ._febae =_dgg (_bfeg ._febae ,_afbdgc );};return _efefd ;};return _bfeg ;};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Update returns the same object as updating sheet references does not affect Number.
func (_gfcge Number )Update (q *_b .UpdateQuery )Expression {return _gfcge };func _cgbd (_ddff ,_bgdcf float64 )float64 {_ddff =_ee .Trunc (_ddff );_bgdcf =_ee .Trunc (_bgdcf );if _ddff ==0&&_bgdcf ==0{return 0;};return _ddff *_bgdcf /_gbaeb (_ddff ,_bgdcf );};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfbe :=args [0].AsNumber ();if _dfbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edfee :=args [1].AsNumber ();if _edfee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbfd :=int (_edfee .ValueNumber );if _fbfd < 0||_fbfd > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_egff :=0;if len (args )> 2{_fcba :=args [2].AsNumber ();if _fcba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_egff =int (_fcba .ValueNumber );};_efga :=_af .FormatInt (int64 (_dfbe .ValueNumber ),_fbfd );if len (_efga )< _egff {_efga =_ed .Repeat ("\u0030",_egff -len (_efga ))+_efga ;};return MakeStringResult (_efga );};func _cdeb (_gdgbd string )*criteriaRegex {_bdecee :=&criteriaRegex {};if _gdgbd ==""{return _bdecee ;};if _ccgd :=_cdbfd .FindStringSubmatch (_gdgbd );len (_ccgd )> 1{_bdecee ._degb =_gggbg ;_bdecee ._eggec =_ccgd [1];}else if _bcab :=_bbfb .FindStringSubmatch (_gdgbd );len (_bcab )> 1{_bdecee ._degb =_gggbg ;_bdecee ._eggec =_bcab [1];}else if _eabe :=_decbe .FindStringSubmatch (_gdgbd );len (_eabe )> 1{_bdecee ._degb =_egada ;_bdecee ._eggec =_eabe [1];}else if _fbcf :=_dbfef .FindStringSubmatch (_gdgbd );len (_fbcf )> 1{_bdecee ._degb =_gdcf ;_bdecee ._eggec =_fbcf [1];}else if _bbed :=_cded .FindStringSubmatch (_gdgbd );len (_bbed )> 1{_bdecee ._degb =_acbag ;_bdecee ._eggec =_bbed [1];}else if _aadb :=_fcce .FindStringSubmatch (_gdgbd );len (_aadb )> 1{_bdecee ._degb =_gcefe ;_bdecee ._eggec =_aadb [1];};return _bdecee ;};func init (){_ecce ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_debcf :=len (args );if _debcf < 4||_debcf > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_degd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcf :=args [1].ValueNumber ;if _gcf <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dagc :=args [2].ValueNumber ;if _dagc < _gcf {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bdfcb :=args [3].ValueNumber ;_aadg :=0.0;if _debcf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aadg =args [4].ValueNumber ;};_cgfg :=0;if _debcf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cgfg =int (args [5].ValueNumber );if _cgfg !=0{_cgfg =1;};};return MakeNumberResult (_bcfc (_degd ,_dagc ,_bdfcb ,_aadg ,_cgfg )-_eecfe (_degd ,_gcf ,_dagc ,_bdfcb ,_aadg ,_cgfg ));};func _fecaf (_cdba Result ,_cffbc *criteriaParsed )bool {_bcfef :=_ed .ToLower (_cdba .ValueString );_cdfda :=_cffbc ._ecga ._degb ;_acbcc :=_cffbc ._ecga ._eggec ;if _cdfda ==_gggbg {return _bcfef ==_acbcc ||_bf .Match (_acbcc ,_bcfef );};if _cdba .Type !=ResultTypeEmpty {if _bcfef ==_cffbc ._baecb ||_bf .Match (_cffbc ._baecb ,_bcfef ){return true ;};if _ ,_eebc :=_af .ParseFloat (_acbcc ,64);_eebc ==nil {return false ;};switch _cdfda {case _egada :return _bcfef <=_acbcc ;case _gdcf :return _bcfef >=_acbcc ;case _acbag :return _bcfef < _acbcc ;case _gcefe :return _bcfef > _acbcc ;};};return false ;};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_eeac :=len (args );if _eeac ==0||_eeac > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_ddcc :=_gffe (args [0]);_fcgd :=[]float64 {};for _ ,_dff :=range _ddcc {for _ ,_ebbga :=range _dff {if _ebbga .Type ==ResultTypeNumber &&!_ebbga .IsBoolean {_fcgd =append (_fcgd ,_ebbga .ValueNumber );};};};_ggcdb :=len (_fcgd );if len (_fcgd )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_afbc :=0.1;if _eeac ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_afbc =args [1].ValueNumber ;if _afbc <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_geeca :=[]float64 {};for _deed :=0;_deed < _ggcdb ;_deed ++{if _deed ==0{_geeca =append (_geeca ,0);}else {_geeca =append (_geeca ,_geeca [_deed -1]+365);};};return _fgdb (_fcgd ,_geeca ,_afbc );};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_ecbde :s }};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecae :=args [0];_gbed :=args [1];if _gbed .Type !=ResultTypeArray &&_gbed .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_adge :=_dcde (_gbed );_fcefg :=-1;for _ccaf ,_geafe :=range _adge {if _gfde (_ecae ,_geafe ,false ,false )==_cace {_fcefg =_ccaf ;};};if _fcefg ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_cfca :=_adge ;if len (args )==3{_cfca =_dcde (args [2]);};if _fcefg < 0||_fcefg >=len (_cfca ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _cfca [_fcefg ];};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_dffg :name ,_bbaga :args };};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_accdf :=args [0];switch _accdf .Type {case ResultTypeError :return _accdf ;case ResultTypeNumber ,ResultTypeString :return _dedfa (args [0]);case ResultTypeList :_befba :=_accdf .ValueList ;_aaabe :=[]Result {};for _ ,_fggd :=range _befba {_bfbgc :=_dedfa (_fggd );if _bfbgc .Type ==ResultTypeError {return _bfbgc ;};_aaabe =append (_aaabe ,_bfbgc );};return MakeListResult (_aaabe );case ResultTypeArray :_bfgc :=_accdf .ValueArray ;_dbebg :=[][]Result {};for _ ,_efaec :=range _bfgc {_gbdef :=[]Result {};for _ ,_eeab :=range _efaec {_feffb :=_dedfa (_eeab );if _feffb .Type ==ResultTypeError {return _feffb ;};_gbdef =append (_gbdef ,_feffb );};_dbebg =append (_dbebg ,_gbdef );};return MakeArrayResult (_dbebg );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};func _caed (_egfg ,_gfec Result ,_gbgbb string )(float64 ,float64 ,Result ){_bebb ,_edda :=_geff (_egfg ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_gbgbb );if _edda .Type ==ResultTypeError {return 0,0,_edda ;};_cfeb ,_edda :=_geff (_gfec ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_gbgbb );if _edda .Type ==ResultTypeError {return 0,0,_edda ;};if _bebb >=_cfeb {return 0,0,MakeErrorResultType (ErrorTypeNum ,_gbgbb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _bebb ,_cfeb ,_aec ;};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_abbef :=len (args );if _abbef !=3&&_abbef !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bddf ,_cdbg :=_decba (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _cdbg .Type ==ResultTypeError {return _cdbg ;};_gdbfb ,_cdbg :=_decba (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _cdbg .Type ==ResultTypeError {return _cdbg ;};_fggae ,_cdbg :=_decba (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _cdbg .Type ==ResultTypeError {return _cdbg ;};_dgga :=0;if _abbef ==3{return MakeStringResult (_ed .Replace (_bddf ,_gdbfb ,_fggae ,-1));}else {_fecc ,_cgbfg :=_ceca (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _cgbfg .Type ==ResultTypeError {return _cgbfg ;};_dgga =int (_fecc );if _dgga < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_feffc :=_bddf ;_adcgac :=_dgga ;_dgea :=-1;_gcgdd :=len (_gdbfb );_dcedc :=0;for {_adcgac --;_gega :=_ed .Index (_feffc ,_gdbfb );if _gega ==-1{_dgea =-1;break ;}else {_dgea =_gega +_dcedc ;if _adcgac ==0{break ;};_cacbg :=_gcgdd +_gega ;_dcedc +=_cacbg ;_feffc =_feffc [_cacbg :];};};if _dgea ==-1{return MakeStringResult (_bddf );}else {_gbbae :=_bddf [:_dgea ];_bacg :=_bddf [_dgea +_gcgdd :];return MakeStringResult (_gbbae +_fggae +_bacg );};};};func (_ebgd *ivr )SetOffset (col ,row uint32 ){};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_dgde :=_ea .Now ();_ ,_dada :=_dgde .Zone ();_fafe :=_eadc +float64 (_dgde .Unix ()+int64 (_dada ))/86400;return MakeNumberResult (_fafe );};const _cbafe =57373;

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _cfbb :=0;_cfbb < len (args )-1;_cfbb +=2{if args [_cfbb ].ValueNumber ==1{return args [_cfbb +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};type rangeIndex struct{_cdff int ;_aeeee int ;};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfcdc :=args [0].AsNumber ();if _gfcdc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _fbfg float64 ;_gdgf :=args [1].AsNumber ();if _gdgf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbfg =_gdgf .ValueNumber ;if _fbfg < 0&&_gfcdc .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_ccac :=_gfcdc .ValueNumber ;_ccac ,_cbff :=_ee .Modf (_ccac /_fbfg );if _cbff !=0{if _gfcdc .ValueNumber < 0&&_cbff < 0{_ccac --;};};return MakeNumberResult (_ccac *_fbfg );};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_fcfc ,_cebgb :=_beae (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _cebgb .Type ==ResultTypeError {return _cebgb ;};return MakeNumberResult (_ddc (_fcfc ._eeg ,_fcfc ._fgdg ,_fcfc ._bcbe ,_fcfc ._cebg ));};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggbc :=args [0].AsNumber ();_daad :=args [1].AsNumber ();if _ggbc .Type !=ResultTypeNumber ||_daad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cfaga :=_ee .Trunc (_ggbc .ValueNumber );_becdd :=_ee .Trunc (_daad .ValueNumber );if _cfaga < _becdd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _cfaga ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_cfaga +_becdd -1);args [1]=MakeNumberResult (_cfaga -1);return Combin (args );};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_baeb :=args [0].AsString ();if _baeb .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_ed .ToUpper (_baeb .ValueString ));};func (_efef *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };const _ggab =57347;func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};const _fdbe ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ebdf :=args [0];if _ebdf .Type !=ResultTypeNumber &&_ebdf .Type !=ResultTypeString &&_ebdf .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_fggcb :=args [1].ValueString ;switch _ebdf .Type {case ResultTypeNumber :return MakeStringResult (_cb .Number (_ebdf .ValueNumber ,_fggcb ));case ResultTypeString :return MakeStringResult (_cb .String (_ebdf .ValueString ,_fggcb ));case ResultTypeEmpty :return MakeStringResult (_cb .Number (0,_fggcb ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};func _geff (_cbeca Result ,_ecfa ,_fgac string )(float64 ,Result ){var _abgbd float64 ;switch _cbeca .Type {case ResultTypeNumber :_abgbd =float64 (int (_cbeca .ValueNumber ));case ResultTypeString :_fdgd :=DateValue ([]Result {_cbeca });if _fdgd .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_ecfa +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_fgac );};_abgbd =_fdgd .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_fgac );};if _abgbd < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_ecfa +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _abgbd ,_aec ;};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _gffe (_abeag Result )[][]Result {switch _abeag .Type {case ResultTypeArray :return _abeag .ValueArray ;case ResultTypeList :return [][]Result {_abeag .ValueList };default:return [][]Result {};};};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// GetLocked returns FALSE for the invalid reference context.
func (_egca *ivr )GetLocked (cellRef string )bool {return false };

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gbbb :=args [0].Ref ;if _gbbb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_afac ,_bgef :=_ae .ParseCellReference (_gbbb .Value );if _bgef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gbbb .Value );};return MakeNumberResult (float64 (_afac .ColumnIdx +1));};

// Reference returns an invalid reference for Negate.
func (_caebf Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _eecfe (_bbfa ,_cfeg ,_bgcd ,_fdfb ,_ddec float64 ,_ecdg int )float64 {_bcg :=_bcfc (_bbfa ,_bgcd ,_fdfb ,_ddec ,_ecdg );var _edfb float64 ;if _cfeg ==1{if _ecdg ==1{_edfb =0;}else {_edfb =-_fdfb ;};}else {if _ecdg ==1{_edfb =_gfbg (_bbfa ,_cfeg -2,_bcg ,_fdfb ,1)-_bcg ;}else {_edfb =_gfbg (_bbfa ,_cfeg -1,_bcg ,_fdfb ,0);};};return _edfb *_bbfa ;};func _ccgge (_fgaed int )string {if _fgaed >=0&&_fgaed < len (_eeegb ){if _eeegb [_fgaed ]!=""{return _eeegb [_fgaed ];};};return _f .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_fgaed );};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_fdgeg :=len (args );if _fdgeg !=6&&_fdgeg !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fbed ,_adfa ,_fgbae :=_caed (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _fgbae .Type ==ResultTypeError {return _fgbae ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcca :=args [2].ValueNumber ;if _fcca < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_caeb :=args [3].ValueNumber ;if _caeb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feag :=args [4].ValueNumber ;if _feag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbge :=args [5];if _cbge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_adce :=_cbge .ValueNumber ;if !_edc (_adce ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_bedf :=0;if _fdgeg ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bedf =int (args [6].ValueNumber );if !_afce (_bedf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_eeed ,_fgbae :=_gdec (_fbed ,_adfa ,_fcca ,_caeb ,_feag ,_adce ,_bedf );if _fgbae .Type ==ResultTypeError {return _fgbae ;};return MakeNumberResult (_eeed );};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gbaa :=args [0].AsString ();if _gbaa .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_gbaa .ValueString )));};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_fagd ,_bea :=_beae (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _bea .Type ==ResultTypeError {return _bea ;};return MakeNumberResult (_aegcf (_fagd ._eeg ,_fagd ._fgdg ,_fagd ._bcbe ,_fagd ._cebg ));};

// Reference returns an invalid reference for BinaryExpr.
func (_abg BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_fbbb ,_adag :=_eddf (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _adag .Type ==ResultTypeError {return _adag ;};_bbb :=_fbbb ._gegg ;_bdaa :=_fbbb ._beed ;_ffbd :=_fbbb ._dabg ;_bdaf :=_fbbb ._fde ;_fbad :=_fbbb ._bffg ;_cege :=_fbbb ._bgcc ;_gfecf :=_bcfc (_bbb ,_bdaa ,_ffbd ,0,_cege );_adfe :=0.0;if _bdaf ==1{if _cege ==0{_adfe =-_ffbd ;_bdaf ++;};};for _dfa :=_bdaf ;_dfa <=_fbad ;_dfa ++{if _cege ==1{_adfe +=_gfbg (_bbb ,_dfa -2,_gfecf ,_ffbd ,1)-_gfecf ;}else {_adfe +=_gfbg (_bbb ,_dfa -1,_gfecf ,_ffbd ,0);};};_adfe *=_bbb ;return MakeNumberResult (_adfe );};func init (){_deeea =_ad .New (_ad .NewSource (_ea .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_fbba ("\u0041\u0053\u0049\u004e",_ee .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_fbba ("\u0041\u0053\u0049\u004e",_ee .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_fbba ("\u0041\u0053\u0049\u004e",_ee .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_fbba ("\u0041\u0043\u004f\u0054",func (_cdcd float64 )float64 {return _ee .Pi /2-_ee .Atan (_cdcd )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_fbba ("\u0041\u0043\u004fT\u0048",func (_deaa float64 )float64 {return _ee .Atanh (1/_deaa )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_fbba ("\u0041\u0053\u0049\u004e",_ee .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_fbba ("\u0041\u0053\u0049N\u0048",_ee .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_fbba ("\u0041\u0054\u0041\u004e",_ee .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_fbba ("\u0041\u0054\u0041N\u0048",_ee .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_fbba ("\u0043\u004f\u0053",_ee .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_fbba ("\u0043\u004f\u0053\u0048",_ee .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_dbbcb ("\u0043\u004f\u0054",_ee .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_dbbcb ("\u0043\u004f\u0054\u0048",_ee .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_dbbcb ("\u0043\u0053\u0043",_ee .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_dbbcb ("\u0043\u0053\u0043",_ee .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_fbba ("\u0045\u0058\u0050",_ee .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_fbba ("\u004c\u004e",_ee .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_fbba ("\u004c\u004f\u00471\u0030",_ee .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_dbbcb ("\u0053\u0045\u0043",_ee .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_dbbcb ("\u0053\u0045\u0043\u0048",_ee .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_fbba ("\u0053\u0049\u004e",_ee .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_fbba ("\u0053\u0049\u004e\u0048",_ee .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_fbba ("\u0053\u0051\u0052\u0054",_ee .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_fbba ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_gadd float64 )float64 {return _ee .Sqrt (_gadd *_ee .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_fbba ("\u0054\u0041\u004e",_ee .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_fbba ("\u0054\u0041\u004e\u0048",_ee .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};const _acbd =57365;func _ddeb (_ebfd string )bool {for _ ,_adcb :=range _ace {_def :=_adcb .FindStringSubmatch (_ebfd );if len (_def )> 1{return true ;};};return false ;};func _fgga (_fgbe ,_aaddf []float64 ,_cdfa float64 )float64 {_ffg :=_cdfa +1;_bagb :=_fgbe [0];_egcc :=len (_fgbe );_cfgc :=_aaddf [0];for _eade :=1;_eade < _egcc ;_eade ++{_bagb +=_fgbe [_eade ]/_ee .Pow (_ffg ,(_aaddf [_eade ]-_cfgc )/365);};return _bagb ;};func NewLexer ()*Lexer {return &Lexer {_cdfdc :make (chan *node )}};

// Function is a standard function whose result only depends on its arguments.
type Function func (_gebaa []Result )Result ;

// Update returns the same object as updating sheet references does not affect Error.
func (_caf Error )Update (q *_b .UpdateQuery )Expression {return _caf };func (_aac *evCache )SetCache (key string ,value Result ){_aac ._cbbf .Lock ();_aac ._aca [key ]=value ;_aac ._cbbf .Unlock ();};func _ddc (_fbfc ,_eafd float64 ,_bgc ,_dgcbd int )float64 {_gdac :=_ffee (_fbfc );_ebaa :=_ffee (_eafd );_gdde :=_ecbg (_gdac ,_ebaa ,_bgc );return _fbd (_gdac ,_gdde ,_dgcbd );};type noCache struct{};const _egegg =57362;func _abaa (_gbgcg []string ,_bbbg int )string {return _af .Itoa (len (_gbgcg [len (_gbgcg )-1-_bbbg ]))};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _a .Reader )Expression {_afag :=&plex {_cgdb :LexReader (r )};_ffebba (_afag );if _afag ._agab !=""{return nil ;};return _afag ._dbdbe ;};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_fcc :=len (args );if (_fcc !=2&&_fcc !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_adg :=0;if _fcc ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_adg =int (args [2].ValueNumber );if !_afce (_adg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aadd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eecf :=args [1].ValueNumber ;_ddf ,_bef :=_fbb (_aadd ,_eecf ,_adg );if _bef .Type ==ResultTypeError {return _bef ;};return MakeNumberResult (_ddf );};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_faegg ,_cafab ,_becdf :=_caed (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _becdf .Type ==ResultTypeError {return _becdf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abded :=_cafab -_faegg ;if _abded > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_aedf :=args [2].ValueNumber ;if _aedf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdafg :=(100-_aedf )/_aedf ;_gcdb :=360/_abded ;return MakeNumberResult (_bdafg *_gcdb );};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_cggba Expression ;_gdabc ,_agdb int ;};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_eead :=ctx .GetEpoch ();_gcef ,_acca :=_cbgc (args [0].Value (),_eead );if _acca !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gbdc :=_gcef .Year ();return MakeBoolResult (_dgdb (_gbdc ));};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};func (_gdcbd *plex )Lex (lval *yySymType )int {_cadb =true ;_dfbb :=<-_gdcbd ._cgdb ;if _dfbb !=nil {lval ._cddad =_dfbb ;return int (lval ._cddad ._gfgd );};return 0;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_daedc :=_ed .Split (v ,"\u003a");if len (_daedc )!=2{return nil ;};if _daedc [0]> _daedc [1]{_daedc [0],_daedc [1]=_daedc [1],_daedc [0];};return VerticalRange {_dcfbe :_daedc [0],_dfeec :_daedc [1]};};var _bbacd =[...]uint8 {0,20,37,60,78,96};func _aebee (_accb Result )*criteriaParsed {_bbca :=_accb .Type ==ResultTypeNumber ;_baac :=_accb .ValueNumber ;_cefd :=_ed .ToLower (_accb .ValueString );_cgfc :=_cdeb (_cefd );return &criteriaParsed {_bbca ,_baac ,_cefd ,_cgfc };};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_ffaa ,_ggeb :=_bfdgf ("\u0046\u0049\u004e\u0044",args );if _ggeb .Type !=ResultTypeEmpty {return _ggeb ;};_bcba :=_ed .ToLower (_ffaa ._daddg );if _bcba ==""{return MakeNumberResult (1.0);};_fcaab :=_ed .ToLower (_ffaa ._bfae );_cfcf :=_ffaa ._gccf ;_abfbe :=1;for _fbdf :=range _fcaab {if _abfbe < _cfcf {_abfbe ++;continue ;};_cbbbc :=_bf .Index (_bcba ,_fcaab [_fbdf :]);if _cbbbc ==0{return MakeNumberResult (float64 (_abfbe ));};_abfbe ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};type durationArgs struct{_abca float64 ;_aga float64 ;_gaegd float64 ;_fgae float64 ;_cced float64 ;_gdc int ;};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Reference returns a string reference value to a cell.
func (_cc CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_cc ._afb };};func _eeee (_ebfc []Result )(float64 ,float64 ,Result ){_eage :=0.0;_gfdg :=1.0;for _ ,_bcad :=range _ebfc {switch _bcad .Type {case ResultTypeNumber :_eage +=_bcad .ValueNumber ;_gfdg *=_ebfb (_bcad .ValueNumber );case ResultTypeList ,ResultTypeArray :_caef ,_addg ,_dfcca :=_eeee (_bcad .ListValues ());_eage +=_caef ;_gfdg *=_ebfb (_addg );if _dfcca .Type ==ResultTypeError {return 0,0,_dfcca ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_bcad ;};};return _eage ,_gfdg ,_aec ;};

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _cbda (args ,_baff )};var _fgbf =[...]struct{_geggf int ;_acgcb int ;_afddc string ;}{};

// Reference returns an invalid reference for FunctionCall.
func (_cdae FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_acbc :=args [0].AsNumber ();if _acbc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gafe ,_bagcg :=_ee .Modf (_acbc .ValueNumber );if _bagcg < 0{_gafe --;};return MakeNumberResult (_gafe );};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_dafc :=_eede (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _dafc .Type !=ResultTypeEmpty {return _dafc ;};_eege :=_addf (args [1:]);_becaa :=-_ee .MaxFloat64 ;_edadf :=_gffe (args [0]);for _ ,_eabb :=range _eege {_eeafc :=_edadf [_eabb ._cdff ][_eabb ._aeeee ].ValueNumber ;if _becaa < _eeafc {_becaa =_eeafc ;};};if _becaa ==-_ee .MaxFloat64 {_becaa =0;};return MakeNumberResult (float64 (_becaa ));};func _afdb (_ebbde string ,_bbcfe []Result )(*parsedReplaceObject ,Result ){if len (_bbcfe )!=4{return nil ,MakeErrorResult (_ebbde +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bbcfe [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_ebbde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_dgag :=_bbcfe [0].ValueString ;if _bbcfe [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbde +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_addeb :=int (_bbcfe [1].ValueNumber )-1;if _bbcfe [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ebbde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dfce :=int (_bbcfe [2].ValueNumber );if _bbcfe [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_ebbde +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_gfcb :=_bbcfe [3].ValueString ;return &parsedReplaceObject {_dgag ,_addeb ,_dfce ,_gfcb },_aec ;};func _accg (_bdgf [][]Result )float64 {if len (_bdgf )==2{_gdfb :=_bdgf [0][0].AsNumber ();_egdgg :=_bdgf [0][1].AsNumber ();_efgbb :=_bdgf [1][0].AsNumber ();_bddb :=_bdgf [1][1].AsNumber ();if _gdfb .Type !=ResultTypeNumber ||_egdgg .Type !=ResultTypeNumber ||_efgbb .Type !=ResultTypeNumber ||_bddb .Type !=ResultTypeNumber {return _ee .NaN ();};return _gdfb .ValueNumber *_bddb .ValueNumber -_efgbb .ValueNumber *_egdgg .ValueNumber ;};_eaea :=float64 (0);_aafc :=float64 (1);for _gaeb :=range _bdgf {_eaea +=_aafc *_bdgf [0][_gaeb ].ValueNumber *_accg (_adcbe (_bdgf ,_gaeb ));_aafc *=-1;};return _eaea ;};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_becag ,_cbaf :=_defb (args ,true );if _cbaf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_becag /_cbaf );};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fabd :=args [0].AsNumber ();_agfcf :=args [1].AsNumber ();if _fabd .Type !=ResultTypeNumber ||_agfcf .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_daga :=_ee .Trunc (_fabd .ValueNumber );_abcc :=_ee .Trunc (_agfcf .ValueNumber );if _abcc > _daga {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _abcc ==_daga ||_abcc ==0{return MakeNumberResult (1);};_bdcb :=float64 (1);for _efag :=float64 (1);_efag <=_abcc ;_efag ++{_bdcb *=(_daga +1-_efag )/_efag ;};return MakeNumberResult (_bdcb );};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_ebbcd :=args [0].AsNumber ();if _ebbcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fecgb :=float64 (1);if _ebbcd .ValueNumber < 0{_fecgb =-1;};if len (args )> 1{_ceba :=args [1].AsNumber ();if _ceba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_fecgb =_ee .Abs (_ceba .ValueNumber );};if len (args )==1{return MakeNumberResult (_ee .Floor (_ebbcd .ValueNumber ));};_bffe :=_ebbcd .ValueNumber ;_bffe ,_debcd :=_ee .Modf (_bffe /_fecgb );if _debcd !=0{if _ebbcd .ValueNumber < 0{_bffe --;};};return MakeNumberResult (_bffe *_fecgb );};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_bbgf HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_abce :=_bbgf .horizontalRangeReference ();if _ecebg ,_gfdeb :=ev .GetFromCache (_abce );_gfdeb {return _ecebg ;};_fcdg ,_eafdc :=_gbcdd (ctx ,_bbgf ._eace ,_bbgf ._aacfc );_egfdd :=_acegg (ctx ,ev ,_fcdg ,_eafdc );ev .SetCache (_abce ,_egfdd );return _egfdd ;};type defEval struct{evCache ;_fdgc bool ;};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afcg :=args [0].AsString ();if _afcg .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_afcg .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_afcg .ValueString [0]));};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_aagf :=len (args );if _aagf !=4&&_aagf !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dcaaf ,_ecfcf ,_gcbb :=_caed (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _gcbb .Type ==ResultTypeError {return _gcbb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbaa :=args [2].ValueNumber ;if _dbaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_cegd :=args [3].ValueNumber ;if _cegd <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_aaffc :=0;if _aagf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaffc =int (args [4].ValueNumber );if !_afce (_aaffc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_bdda ,_gcbb :=_fbb (_dcaaf ,_ecfcf ,_aaffc );if _gcbb .Type ==ResultTypeError {return _gcbb ;};return MakeNumberResult ((_cegd /_dbaa -1)/_bdda );};func _egeg (_edab ,_ffebb float64 ,_gdaa ,_gggb int )(float64 ,Result ){_bfg ,_aeef :=_ffee (_edab ),_ffee (_ffebb );if _aeef .After (_bfg ){_daeag :=_fcfbf (_bfg ,_aeef ,_gdaa ,_gggb );_eed :=(_aeef .Year ()-_daeag .Year ())*12+int (_aeef .Month ())-int (_daeag .Month ());return float64 (_eed *_gdaa )/12.0,_aec ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// IsBool returns false for the invalid reference context.
func (_gafc *ivr )IsBool (cellRef string )bool {return false };func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgdf :=args [0].AsNumber ();if _bgdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddfdbg :=float64 (0);if len (args )> 1{_befg :=args [1].AsNumber ();if _befg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddfdbg =_befg .ValueNumber ;};_bgfd :=_bgdf .ValueNumber ;_bgfg :=1.0;if _ddfdbg >=0{_bgfg =_ee .Pow (1/10.0,_ddfdbg );}else {return MakeNumberResult (0);};_bgfd ,_afbcg :=_ee .Modf (_bgfd /_bgfg );_ecfcg :=0.99999;if _afbcg > _ecfcg {_bgfd ++;}else if _afbcg < -_ecfcg {_bgfd --;};_ =_afbcg ;return MakeNumberResult (_bgfd *_bgfg );};const _dfdacf =57353;

// Eval evaluates and returns the result of a Negate expression.
func (_fege Negate )Eval (ctx Context ,ev Evaluator )Result {_ggaee :=_fege ._ggfce .Eval (ctx ,ev );if _ggaee .Type ==ResultTypeNumber {return MakeNumberResult (-_ggaee .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fafd :=args [0].AsNumber ();if _fafd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gfbce :=float64 (1);_gcfd :=args [1].AsNumber ();if _gcfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_gfbce =_gcfd .ValueNumber ;if _gfbce < 0&&_fafd .ValueNumber > 0||_gfbce > 0&&_fafd .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_adca :=_fafd .ValueNumber ;_adca ,_gcfdg :=_ee .Modf (_adca /_gfbce );if _ee .Trunc (_gcfdg +0.5)> 0{_adca ++;};return MakeNumberResult (_adca *_gfbce );};

// Reference returns a string reference value to an expression with prefix.
func (_fgbff PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_feccc :=_fgbff ._bgac .Reference (ctx ,ev );_efgbbc :=_fgbff ._fbde .Reference (ctx ,ev );if _feccc .Type ==ReferenceTypeSheet &&_efgbbc .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_feccc .Value +"\u0021"+_efgbbc .Value };};return ReferenceInvalid ;};const _deg ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";func _eacd (){_cdbfd =_df .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_bbfb =_df .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_cded =_df .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_fcce =_df .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_decbe =_df .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_dbfef =_df .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_ceed .Lock ();defer _ceed .Unlock ();if _gaebg ,_bffb :=_bffae [name ];_bffb {return _gaebg ;};return nil ;};

// Eval evaluates a range returning a list of results or an error.
func (_cafea Range )Eval (ctx Context ,ev Evaluator )Result {_gaagb :=_cafea ._ccegg .Reference (ctx ,ev );_bgba :=_cafea ._fcfe .Reference (ctx ,ev );_efgf :=_degbb (_gaagb ,_bgba );if _gaagb .Type ==ReferenceTypeCell &&_bgba .Type ==ReferenceTypeCell {if _deef ,_dbab :=ev .GetFromCache (_efgf );_dbab {return _deef ;}else {_dffe :=_acegg (ctx ,ev ,_gaagb .Value ,_bgba .Value );ev .SetCache (_efgf ,_dffe );return _dffe ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_efgf );};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddbc :=args [0].ValueNumber ;if _ddbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfecb :=args [1].ValueNumber ;if _gfecb <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_febab :=args [2].ValueNumber ;if _febab <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_ee .Log10 (_febab )-_ee .Log10 (_gfecb ))/_ee .Log10 (1+_ddbc ));};var _ega =map[string ]*_df .Regexp {};

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_aadcff ,_edfdb ,_cecfde :=_cbbd (from ,to );if _cecfde !=nil {_edb .Log (_cecfde .Error ());return NewError (_cecfde .Error ());};return Range {_ccegg :_aadcff ,_fcfe :_edfdb };};type ivr struct{};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbec :=args [0].AsNumber ();if _bbec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bbec .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cbga :=float64 (1);_baec :=_ee .Trunc (_bbec .ValueNumber );for _afda :=_baec ;_afda > 1;_afda -=2{_cbga *=_afda ;};return MakeNumberResult (_cbga );};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_geba ,_bfde ,_geaf :=_caed (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _geaf .Type ==ResultTypeError {return _geaf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beac :=_bfde -_geba ;if _beac > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_agbcc :=args [2].ValueNumber ;if _agbcc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_agbcc )/(360-_agbcc *_beac ));};var _ace =[]*_df .Regexp {};func _afa (_ffd string ,_dbba *_b .UpdateQuery )string {_dde ,_ce :=_ae .ParseCellReference (_ffd );if _ce !=nil {return "\u0023\u0052\u0045F\u0021";};if _dbba .UpdateType ==_b .UpdateActionRemoveColumn {_cbec :=_dbba .ColumnIdx ;_bcf :=_dde .ColumnIdx ;if _bcf < _cbec {return _ffd ;}else if _bcf ==_cbec {return "\u0023\u0052\u0045F\u0021";}else {return _dde .Update (_b .UpdateActionRemoveColumn ).String ();};};return _ffd ;};func _fgdb (_gagd ,_bbfdb []float64 ,_gfa float64 )Result {_bga :=false ;_bedgc :=false ;for _fffdd :=0;_fffdd < len (_gagd );_fffdd ++{if _gagd [_fffdd ]> 0{_bga =true ;};if _gagd [_fffdd ]< 0{_bedgc =true ;};};if !_bga ||!_bedgc {return MakeErrorResultType (ErrorTypeNum ,"");};_gfda :=_gfa ;_ggb :=1e-10;_ccde :=0;_fdgg :=50;_cbbae :=false ;for {_deee :=_fgga (_gagd ,_bbfdb ,_gfda );_bedaf :=_gfda -_deee /_bfdg (_gagd ,_bbfdb ,_gfda );_eafda :=_ee .Abs (_bedaf -_gfda );_gfda =_bedaf ;_ccde ++;if _eafda <=_ggb ||_ee .Abs (_deee )<=_ggb {break ;};if _ccde > _fdgg {_cbbae =true ;break ;};};if _cbbae ||_ee .IsNaN (_gfda )||_ee .IsInf (_gfda ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_gfda );};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_gebb ,_bbdab ,_bead :=_cbbd (from ,to );if _bead !=nil {_edb .Log (_bead .Error ());return NewError (_bead .Error ());};return PrefixRangeExpr {_ebdaf :pfx ,_fbefa :_gebb ,_bgccc :_bbdab };};func (_egbg ReferenceType )String ()string {if _egbg >=ReferenceType (len (_bbacd )-1){return _f .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_egbg );};return _daffd [_bbacd [_egbg ]:_bbacd [_egbg +1]];};func init (){_eacd ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};func _decba (_ddca Result ,_gagg ,_dcece string )(string ,Result ){switch _ddca .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _ddca .Value (),_aec ;default:return "",MakeErrorResult (_gagg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dcece +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};func _dgg (_aba string ,_aaf uint32 )string {_bdc :=_ae .ColumnToIndex (_aba );if _bdc ==_aaf {return "\u0023\u0052\u0045F\u0021";}else if _bdc > _aaf {return _ae .IndexToColumn (_bdc -1);}else {return _aba ;};};func (_fdff *ivr )Sheet (name string )Context {return _fdff };type couponArgs struct{_eeg float64 ;_fgdg float64 ;_bcbe int ;_cebg int ;};

// String returns a string representation for Negate.
func (_efcg Negate )String ()string {return "\u002d"+_efcg ._ggfce .String ()};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_fbgcf :=args [0];if _fbgcf .Type !=ResultTypeArray &&_fbgcf .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cdfc :=_fbgcf .ValueArray ;if len (_cdfc )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_cdfc [0])));};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_gcdf :=len (args );if _gcdf !=4&&_gcdf !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_faeb ,_acbe ,_agdf :=_caed (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _agdf .Type ==ResultTypeError {return _agdf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agdd :=args [2].ValueNumber ;if _agdd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdge :=args [3].ValueNumber ;if _bdge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbdc :=0;if _gcdf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbdc =int (args [4].ValueNumber );if !_afce (_cbdc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_cbdcb ,_agdf :=_fbb (_faeb ,_acbe ,_cbdc );if _agdf .Type ==ResultTypeError {return _agdf ;};return MakeNumberResult (_agdd /(1-_bdge *_cbdcb ));};var _ccdd =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};type cmpResult int8 ;var (_gegc =0;_cadb =false ;);func _ebdc (_age ,_ceag ,_dbde int )bool {if _ceag < 1||_ceag > 12{return false ;};if _dbde < 1{return false ;};return _dbde <=_cfe (_age ,_ceag );};

// Reference returns a string reference value to a range with prefix.
func (_cfecb PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_cafd :=_cfecb ._ebdaf .Reference (ctx ,ev );_bebc :=_cfecb ._fbefa .Reference (ctx ,ev );_dbbd :=_cfecb ._bgccc .Reference (ctx ,ev );if _cafd .Type ==ReferenceTypeSheet &&_bebc .Type ==ReferenceTypeCell &&_dbbd .Type ==ReferenceTypeCell {return MakeRangeReference (_ggfgb (_cafd ,_bebc ,_dbbd ));};return ReferenceInvalid ;};const _bgca ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";

// Match implements the MATCH function.
func Match (args []Result )Result {_cad :=len (args );if _cad !=2&&_cad !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecgf :=1;if _cad ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_dbfd :=args [2].ValueNumber ;if _dbfd ==-1||_dbfd ==0{_ecgf =int (_dbfd );};};_fead :=args [1];var _bbgc []Result ;switch _fead .Type {case ResultTypeList :_bbgc =_fead .ValueList ;case ResultTypeArray :_adeb :=_fead .ValueArray ;for _ ,_fbbbd :=range _adeb {if len (_fbbbd )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_bbgc =append (_bbgc ,_fbbbd [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fgff :=_aebee (args [0]);switch _ecgf {case 0:for _gdag ,_bccad :=range _bbgc {if _dcec (_bccad ,_fgff ){return MakeNumberResult (float64 (_gdag +1));};};case -1:for _agcg :=0;_agcg < len (_bbgc );_agcg ++{if _dcec (_bbgc [_agcg ],_fgff ){return MakeNumberResult (float64 (_agcg +1));};if _fgff ._gefbf &&(_bbgc [_agcg ].ValueNumber < _fgff ._faab ){if _agcg ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_agcg ));};};case 1:for _dgaa :=0;_dgaa < len (_bbgc );_dgaa ++{if _dcec (_bbgc [_dgaa ],_fgff ){return MakeNumberResult (float64 (_dgaa +1));};if _fgff ._gefbf &&(_bbgc [_dgaa ].ValueNumber > _fgff ._faab ){if _dgaa ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_dgaa ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_fdfg ,_dbad :=_fbec (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _dbad .Type ==ResultTypeError {return _dbad ;};_fdfe :=_fdfg ._abca ;_ebg :=_fdfg ._aga ;_efbg :=_fdfg ._gaegd ;_ecafg :=_fdfg ._fgae ;_fdge :=_fdfg ._cced ;_dbffc :=_fdfg ._gdc ;return _fcdf (_fdfe ,_ebg ,_efbg ,_ecafg ,_fdge ,_dbffc );};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;const _dfad =57360;

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fdbf :=args [0].AsNumber ();if _fdbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_bagd :=float64 (1);if _fdbf .ValueNumber < 0{_bagd =-1;};if len (args )> 1{_feff :=args [1].AsNumber ();if _feff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bagd =_feff .ValueNumber ;};if _bagd < 0&&_fdbf .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_ee .Ceil (_fdbf .ValueNumber ));};_cdcab :=_fdbf .ValueNumber ;_cdcab ,_gaaca :=_ee .Modf (_cdcab /_bagd );if _gaaca > 0{_cdcab ++;};return MakeNumberResult (_cdcab *_bagd );};func _cbgc (_bfab string ,_ggad _ea .Time )(_ea .Time ,error ){_daeg ,_ ,_cegf :=_fc .ParseFloat (_bfab ,10,128,_fc .ToNearestEven );if _cegf !=nil {return _ea .Time {},_cegf ;};_efbc :=new (_fc .Float );_efbc .SetUint64 (uint64 (24*_ea .Hour ));_daeg .Mul (_daeg ,_efbc );_beedc ,_ :=_daeg .Uint64 ();_fcea :=_ggad .Add (_ea .Duration (_beedc ));return _fgbeb (_fcea ),nil ;};const _adfde =57348;const _afdd =57375;

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_fbefb :=[]string {};for _fdaa :=range _bffae {_fbefb =append (_fbefb ,_fdaa );};for _aeafg :=range _cccbc {_fbefb =append (_fbefb ,_aeafg );};_de .Strings (_fbefb );return _fbefb ;};func _acegg (_fcged Context ,_gcce Evaluator ,_feabf ,_adgg string )Result {_cebf ,_dafe :=_ae .ParseCellReference (_feabf );if _dafe !=nil {return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_feabf ,_dafe .Error ()));};_acaed ,_bffd :=_cebf .ColumnIdx ,_cebf .RowIdx ;_dabe ,_bbcad :=_ae .ParseCellReference (_adgg );if _bbcad !=nil {return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_adgg ,_bbcad .Error ()));};_cgcg ,_gbdcc :=_dabe .ColumnIdx ,_dabe .RowIdx ;_gaagbf :=[][]Result {};for _cccb :=_bffd ;_cccb <=_gbdcc ;_cccb ++{_gbdcf :=[]Result {};for _gdcbc :=_acaed ;_gdcbc <=_cgcg ;_gdcbc ++{_ebfgc :=_fcged .Cell (_f .Sprintf ("\u0025\u0073\u0025\u0064",_ae .IndexToColumn (_gdcbc ),_cccb ),_gcce );_gbdcf =append (_gbdcf ,_ebfgc );};_gaagbf =append (_gaagbf ,_gbdcf );};if len (_gaagbf )==1{if len (_gaagbf [0])==1{return _gaagbf [0][0];};return MakeListResult (_gaagbf [0]);};return MakeArrayResult (_gaagbf );};

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_ceed .Lock ();defer _ceed .Unlock ();if _ ,_ccgde :=_cccbc [name ];_ccgde {_edb .Log ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_cccbc [name ]=fn ;};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_dgc ConstArrayExpr )Update (q *_b .UpdateQuery )Expression {return _dgc };

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_bfec :=_ed .Split (v ,"\u003a");if len (_bfec )!=2{return nil ;};if _bfec [0]> _bfec [1]{_bfec [0],_bfec [1]=_bfec [1],_bfec [0];};return PrefixVerticalRange {_gcbaa :pfx ,_fdafdc :_bfec [0],_febae :_bfec [1]};};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cceb :=args [0];switch _cceb .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_gag :=_ffee (_cceb .ValueNumber );return MakeNumberResult (float64 (_gag .Month ()));case ResultTypeString :_cga :=_ed .ToLower (_cceb .ValueString );if !_egg (_cga ){_ ,_ ,_ ,_ ,_gbd ,_gdb :=_debc (_cga );if _gdb .Type ==ResultTypeError {_gdb .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _gdb ;};if _gbd {return MakeNumberResult (1);};};_ ,_aegba ,_ ,_ ,_cfaf :=_aecc (_cga );if _cfaf .Type ==ResultTypeError {return _cfaf ;};return MakeNumberResult (float64 (_aegba ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// LastColumn returns empty string for the invalid reference context.
func (_dagaa *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};const _ffbaf int =0;

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};func _ddaa (_gdf int )int {if _gdf < 1900{if _gdf < 30{_gdf +=2000;}else {_gdf +=1900;};};return _gdf ;};func _bfdgf (_cgce string ,_adec []Result )(*parsedSearchObject ,Result ){_ddfg :=len (_adec );if _ddfg !=2&&_ddfg !=3{return nil ,MakeErrorResult (_cgce +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gagb :=_adec [0];if _gagb .Type ==ResultTypeError {return nil ,_gagb ;};if _gagb .Type !=ResultTypeString &&_gagb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_fggc :=_adec [1];if _fggc .Type ==ResultTypeError {return nil ,_fggc ;};if _fggc .Type !=ResultTypeString &&_fggc .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_bgdb :=_fggc .Value ();_bgcgf :=_gagb .Value ();_egbc :=1;if _ddfg ==3&&_adec [2].Type !=ResultTypeEmpty {_bddaf :=_adec [2];if _bddaf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_egbc =int (_bddaf .ValueNumber );if _egbc < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _egbc > len (_bgdb ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_bgcgf ,_bgdb ,_egbc },_aec ;};

// Reference returns an invalid reference for EmptyExpr.
func (_ebc EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type parsedReplaceObject struct{_fagc string ;_bbag int ;_afege int ;_bbcf string ;};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_daedda Result )AsNumber ()Result {if _daedda .Type ==ResultTypeString {_gaaac ,_dgfbd :=_af .ParseFloat (_daedda .ValueString ,64);if _dgfbd ==nil {return MakeNumberResult (_gaaac );};};if _daedda .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _daedda ;};func _beg (_eae BinOpType ,_cgb ,_bfb []Result )Result {_cf :=[]Result {};for _dbf :=range _cgb {_bce :=_cgb [_dbf ].AsNumber ();_cbe :=_bfb [_dbf ].AsNumber ();if _bce .Type !=ResultTypeNumber ||_cbe .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _eae {case BinOpTypePlus :_cf =append (_cf ,MakeNumberResult (_bce .ValueNumber +_cbe .ValueNumber ));case BinOpTypeMinus :_cf =append (_cf ,MakeNumberResult (_bce .ValueNumber -_cbe .ValueNumber ));case BinOpTypeMult :_cf =append (_cf ,MakeNumberResult (_bce .ValueNumber *_cbe .ValueNumber ));case BinOpTypeDiv :if _cbe .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_cf =append (_cf ,MakeNumberResult (_bce .ValueNumber /_cbe .ValueNumber ));case BinOpTypeExp :_cf =append (_cf ,MakeNumberResult (_ee .Pow (_bce .ValueNumber ,_cbe .ValueNumber )));case BinOpTypeLT :_cf =append (_cf ,MakeBoolResult (_bce .ValueNumber < _cbe .ValueNumber ));case BinOpTypeGT :_cf =append (_cf ,MakeBoolResult (_bce .ValueNumber > _cbe .ValueNumber ));case BinOpTypeEQ :_cf =append (_cf ,MakeBoolResult (_bce .ValueNumber ==_cbe .ValueNumber ));case BinOpTypeLEQ :_cf =append (_cf ,MakeBoolResult (_bce .ValueNumber <=_cbe .ValueNumber ));case BinOpTypeGEQ :_cf =append (_cf ,MakeBoolResult (_bce .ValueNumber >=_cbe .ValueNumber ));case BinOpTypeNE :_cf =append (_cf ,MakeBoolResult (_bce .ValueNumber !=_cbe .ValueNumber ));default:return MakeErrorResult (_f .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_eae ));};};return MakeListResult (_cf );};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_fdcba ,_fdae :=_afdb ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _fdae .Type !=ResultTypeEmpty {return _fdae ;};_ggcc :=_fdcba ._fagc ;_fagdc :=_fdcba ._bbag ;_cbae :=_fdcba ._afege ;_aege :=_fdcba ._bbcf ;_edffee :=len (_ggcc );if _fagdc > _edffee {_fagdc =_edffee ;};_dded :=_fagdc +_cbae ;if _dded > _edffee {_dded =_edffee ;};_ceec :=_ggcc [0:_fagdc ]+_aege +_ggcc [_dded :];return MakeStringResult (_ceec );};const _gcde =57358;

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_bbgca :=_eede (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _bbgca .Type !=ResultTypeEmpty {return _bbgca ;};_dfea :=_addf (args [1:]);_fagfg :=_ee .MaxFloat64 ;_fceae :=_gffe (args [0]);for _ ,_ggce :=range _dfea {_dcaab :=_fceae [_ggce ._cdff ][_ggce ._aeeee ].ValueNumber ;if _fagfg > _dcaab {_fagfg =_dcaab ;};};if _fagfg ==_ee .MaxFloat64 {_fagfg =0;};return MakeNumberResult (float64 (_fagfg ));};func _acc (_fdb BinOpType ,_dad []Result ,_bfd Result )Result {_ff :=[]Result {};switch _bfd .Type {case ResultTypeNumber :_fdc :=_bfd .ValueNumber ;for _ge :=range _dad {_gg :=_dad [_ge ].AsNumber ();if _gg .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fdb {case BinOpTypePlus :_ff =append (_ff ,MakeNumberResult (_gg .ValueNumber +_fdc ));case BinOpTypeMinus :_ff =append (_ff ,MakeNumberResult (_gg .ValueNumber -_fdc ));case BinOpTypeMult :_ff =append (_ff ,MakeNumberResult (_gg .ValueNumber *_fdc ));case BinOpTypeDiv :if _fdc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ff =append (_ff ,MakeNumberResult (_gg .ValueNumber /_fdc ));case BinOpTypeExp :_ff =append (_ff ,MakeNumberResult (_ee .Pow (_gg .ValueNumber ,_fdc )));case BinOpTypeLT :_ff =append (_ff ,MakeBoolResult (_gg .ValueNumber < _fdc ));case BinOpTypeGT :_ff =append (_ff ,MakeBoolResult (_gg .ValueNumber > _fdc ));case BinOpTypeEQ :_ff =append (_ff ,MakeBoolResult (_gg .ValueNumber ==_fdc ));case BinOpTypeLEQ :_ff =append (_ff ,MakeBoolResult (_gg .ValueNumber <=_fdc ));case BinOpTypeGEQ :_ff =append (_ff ,MakeBoolResult (_gg .ValueNumber >=_fdc ));case BinOpTypeNE :_ff =append (_ff ,MakeBoolResult (_gg .ValueNumber !=_fdc ));default:return MakeErrorResult (_f .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fdb ));};};case ResultTypeString :_bd :=_bfd .ValueString ;for _abd :=range _dad {_ebe :=_dad [_abd ].AsString ();if _ebe .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _fdb {case BinOpTypeLT :_ff =append (_ff ,MakeBoolResult (_ebe .ValueString < _bd ));case BinOpTypeGT :_ff =append (_ff ,MakeBoolResult (_ebe .ValueString > _bd ));case BinOpTypeEQ :_ff =append (_ff ,MakeBoolResult (_ebe .ValueString ==_bd ));case BinOpTypeLEQ :_ff =append (_ff ,MakeBoolResult (_ebe .ValueString <=_bd ));case BinOpTypeGEQ :_ff =append (_ff ,MakeBoolResult (_ebe .ValueString >=_bd ));case BinOpTypeNE :_ff =append (_ff ,MakeBoolResult (_ebe .ValueString !=_bd ));default:return MakeErrorResult (_f .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_fdb ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_ff );};const _fegdb =57351;

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eec :=_ea .Now ();_ ,_dfd :=_eec .Zone ();_eaf :=_abga (_acd ,_eec .Unix ()+int64 (_dfd ))+1;return MakeNumberResult (_eaf );};

// String returns a string representation of SheetPrefixExpr.
func (_eabea SheetPrefixExpr )String ()string {return _eabea ._ecbde };

// String returns a string representation of a range with prefix.
func (_gggcf PrefixRangeExpr )String ()string {return _f .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gggcf ._ebdaf .String (),_gggcf ._fbefa .String (),_gggcf ._bgccc .String ());};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_bdcfaf :=_ed .Split (v ,"\u003a");if len (_bdcfaf )!=2{return nil ;};_gedba ,_ :=_af .Atoi (_bdcfaf [0]);_fdbec ,_ :=_af .Atoi (_bdcfaf [1]);if _gedba > _fdbec {_gedba ,_fdbec =_fdbec ,_gedba ;};return PrefixHorizontalRange {_cggba :pfx ,_gdabc :_gedba ,_agdb :_fdbec };};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_gaef :=args [0];_gdfgb :=args [1];if _gdfgb .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gdgd :=args [2].AsNumber ();if _gdgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afgca :=false ;if len (args )==4{_bcage :=args [3].AsNumber ();if _bcage .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _bcage .ValueNumber ==0{_afgca =true ;};};_eeeb :=-1;_faegf :=false ;if len (_gdfgb .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_ebdd :=_gdfgb .ValueArray [0];_baab :for _dfacc ,_efda :=range _ebdd {switch _gfde (_efda ,_gaef ,false ,_afgca ){case _dbfga :_eeeb =_dfacc ;case _cace :_eeeb =_dfacc ;_faegf =true ;break _baab ;};};if _eeeb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_edeg :=int (_gdgd .ValueNumber )-1;if _edeg < 0||_edeg > len (_gdfgb .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_ebdd =_gdfgb .ValueArray [_edeg ];if _eeeb < 0||_eeeb >=len (_ebdd ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _faegf ||!_afgca {return _ebdd [_eeeb ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var _egc =[]int {31,28,31,30,31,30,31,31,30,31,30,31};type cumulArgs struct{_gegg float64 ;_beed float64 ;_dabg float64 ;_fde float64 ;_bffg float64 ;_bgcc int ;};var _cccbc =map[string ]FunctionComplex {};func _gbaeb (_egfb ,_aaed float64 )float64 {_egfb =_ee .Trunc (_egfb );_aaed =_ee .Trunc (_aaed );if _egfb ==0{return _aaed ;};if _aaed ==0{return _egfb ;};for _egfb !=_aaed {if _egfb > _aaed {_egfb =_egfb -_aaed ;}else {_aaed =_aaed -_egfb ;};};return _egfb ;};const _dafa =57370;

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_aadge :=len (args );if _aadge < 5||_aadge > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eeagc :=args [0].ValueNumber ;if _eeagc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efcc :=args [1].ValueNumber ;if _efcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbbb :=args [2].ValueNumber ;if _cbbb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cbbb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gefaa :=args [3].ValueNumber ;if _gefaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgd :=args [4].ValueNumber ;if _gefaa > _bgd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _bgd > _cbbb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_dbac :=2.0;if _aadge > 5{if args [5].Type ==ResultTypeEmpty {_dbac =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbac =args [5].ValueNumber ;if _dbac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_cfef :=false ;if _aadge > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cfef =args [6].ValueNumber !=0;};_gddb :=0.0;_dddd :=_ee .Floor (_gefaa );_aeb :=_ee .Ceil (_bgd );if _cfef {for _bcga :=_dddd +1;_bcga <=_aeb ;_bcga ++{_fafa :=_cddb (_eeagc ,_efcc ,_cbbb ,_bcga ,_dbac );if _bcga ==_dddd +1{_fafa *=_ee .Min (_bgd ,_dddd +1)-_gefaa ;}else if _bcga ==_aeb {_fafa *=_bgd +1-_aeb ;};_gddb +=_fafa ;};}else {_bggb :=_cbbb ;var _cbeg float64 ;if !_face (_gefaa ,_ee .Floor (_gefaa )){if _dbac ==1{_ebfa :=_cbbb /2;if _gefaa > _ebfa ||_face (_gefaa ,_ebfa ){_cbeg =_gefaa -_ebfa ;_gefaa =_ebfa ;_bgd -=_cbeg ;_bggb ++;};};};if _dbac !=0{_eeagc -=_bcbc (_eeagc ,_efcc ,_cbbb ,_bggb ,_gefaa ,_dbac );};_gddb =_bcbc (_eeagc ,_efcc ,_cbbb ,_cbbb -_gefaa ,_bgd -_gefaa ,_dbac );};return MakeNumberResult (_gddb );};const _daffd ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";func _cfe (_fgeb ,_gba int )int {if _gba ==2&&_dgdb (_fgeb ){return 29;}else {return _egc [_gba -1];};};

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_cag :v }};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_dcfbe ,_dfeec string };

// Update updates references in the Range after removing a row/column.
func (_baad Range )Update (q *_b .UpdateQuery )Expression {_bcdg :=_baad ;if q .UpdateCurrentSheet {_bcdg ._ccegg =_baad ._ccegg .Update (q );_bcdg ._fcfe =_baad ._fcfe .Update (q );};return _bcdg ;};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_fbce :=len (args );if _fbce < 3||_fbce > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbcec :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdbb :=args [1].ValueNumber ;if _fdbb ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_faedf :=args [2].ValueNumber ;_fgcb :=0.0;if _fbce >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgcb =args [3].ValueNumber ;};_cff :=0.0;if _fbce ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cff =args [4].ValueNumber ;if _cff !=0{_cff =1;};};var _ccbg float64 ;if _fbcec ==0{_ccbg =(_faedf +_fgcb )/_fdbb ;}else {_cdda :=_ee .Pow (1+_fbcec ,_fdbb );if _cff ==1{_ccbg =(_fgcb *_fbcec /(_cdda -1)+_faedf *_fbcec /(1-1/_cdda ))/(1+_fbcec );}else {_ccbg =_fgcb *_fbcec /(_cdda -1)+_faedf *_fbcec /(1-1/_cdda );};};return MakeNumberResult (-_ccbg );};func _gbcdd (_affd Context ,_cgcd ,_afaf int )(string ,string ){_ffc :="\u0041"+_af .Itoa (_cgcd );_eaggg :=_affd .LastColumn (_cgcd ,_afaf );_eccd :=_eaggg +_af .Itoa (_afaf );return _ffc ,_eccd ;};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_befbc :=args [0];if _befbc .Type !=ResultTypeArray &&_befbc .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gbgfc :=_befbc .ValueArray ;if len (_gbgfc )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_gbgfc )));};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bcfg :=args [0].AsNumber ();if _bcfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bgcg :=float64 (1);if _bcfg .ValueNumber < 0{_bgcg =-1;};if len (args )> 1{_ffeee :=args [1].AsNumber ();if _ffeee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bgcg =_ee .Abs (_ffeee .ValueNumber );};if len (args )==1{return MakeNumberResult (_ee .Ceil (_bcfg .ValueNumber ));};_gdab :=_bcfg .ValueNumber ;_gdab ,_adbd :=_ee .Modf (_gdab /_bgcg );if _adbd !=0{if _bcfg .ValueNumber > 0{_gdab ++;};};return MakeNumberResult (_gdab *_bgcg );};

// Update updates references in the VerticalRange after removing a row/column.
func (_bbdbf VerticalRange )Update (q *_b .UpdateQuery )Expression {if q .UpdateType ==_b .UpdateActionRemoveColumn {_dffce :=_bbdbf ;if q .UpdateCurrentSheet {_geafc :=q .ColumnIdx ;_dffce ._dcfbe =_dgg (_bbdbf ._dcfbe ,_geafc );_dffce ._dfeec =_dgg (_bbdbf ._dfeec ,_geafc );};return _dffce ;};return _bbdbf ;};

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_bgac :pfx ,_fbde :exp }};type yySymType struct{_fbea int ;_cddad *node ;_ccga Expression ;_aade []Expression ;_gaec [][]Expression ;};const _ebegga =57359;var _dbded =[...]uint8 {0,17,33,49,63,78,93,108};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ceadb :=args [0].AsNumber ();if _ceadb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edgc :=args [1].AsNumber ();if _edgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_ee .Pow (_ceadb .ValueNumber ,_edgc .ValueNumber ));};func (_fgcc *noCache )SetCache (key string ,value Result ){};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eeea ,_adcf ,_fcffd :=_caed (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fcffd .Type ==ResultTypeError {return _fcffd ;};_fdcb ,_fcffd :=_geff (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _fcffd .Type ==ResultTypeError {return _fcffd ;};if _fdcb >=_eeea {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_ecad :=args [3];if _ecad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_dcga :=_ecad .ValueNumber ;if _dcga < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_babb :=args [4];if _babb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cgeed :=_babb .ValueNumber ;if _cgeed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_cgeb :=args [5];if _cgeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_addaf :=_cgeb .ValueNumber ;if _addaf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_faaa :=args [6];if _faaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebab :=float64 (int (_faaa .ValueNumber ));if !_edc (_ebab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_adba :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_cfbdf :=args [7];if _cfbdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_adba =int (_cfbdf .ValueNumber );if !_afce (_adba ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_addc ,_fcffd :=_fbb (_fdcb ,_adcf ,_adba );if _fcffd .Type ==ResultTypeError {return _fcffd ;};_addc *=_ebab ;_ggfd ,_fcffd :=_fbb (_eeea ,_adcf ,_adba );if _fcffd .Type ==ResultTypeError {return _fcffd ;};_ggfd *=_ebab ;_egcf ,_fcffd :=_fbb (_fdcb ,_eeea ,_adba );if _fcffd .Type ==ResultTypeError {return _fcffd ;};_egcf *=_ebab ;_dddf :=_addaf +_addc *100*_dcga /_ebab ;_dddf /=_ggfd *_cgeed /_ebab +1;_dddf -=_egcf *100*_dcga /_ebab ;return MakeNumberResult (_dddf );};func _beace (_dcff []Result ,_fccg bool )Result {_ceff :="\u004d\u0041\u0058";if _fccg {_ceff ="\u004d\u0041\u0058\u0041";};if len (_dcff )==0{return MakeErrorResult (_ceff +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdadd :=-_ee .MaxFloat64 ;for _ ,_bcade :=range _dcff {switch _bcade .Type {case ResultTypeNumber :if (_fccg ||!_bcade .IsBoolean )&&_bcade .ValueNumber > _fdadd {_fdadd =_bcade .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_ccdad :=_beace (_bcade .ListValues (),_fccg );if _ccdad .ValueNumber > _fdadd {_fdadd =_ccdad .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ceefc :=0.0;if _fccg {_ceefc =_bcade .AsNumber ().ValueNumber ;};if _ceefc > _fdadd {_fdadd =_ceefc ;};default:_edb .Log ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ceff +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bcade .Type );};};if _fdadd ==-_ee .MaxFloat64 {_fdadd =0;};return MakeNumberResult (_fdadd );};func _eede (_bfbd []Result ,_dfde bool ,_defeb string )Result {var _gadba ,_cedd string ;if _dfde {_gadba ="\u0074\u0068\u0072e\u0065";_cedd ="\u006f\u0064\u0064";}else {_gadba ="\u0074\u0077\u006f";_cedd ="\u0065\u0076\u0065\u006e";};_eddfd :=len (_bfbd );if (_dfde &&_eddfd < 3)||(!_dfde &&_eddfd < 2){return MakeErrorResult (_defeb +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_gadba +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_eddfd /2*2==_eddfd )==_dfde {return MakeErrorResult (_defeb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_cedd +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_beec :=-1;_gbgcf :=-1;for _bgfe :=0;_bgfe < _eddfd ;_bgfe +=2{_fbgg :=_bfbd [_bgfe ];if _fbgg .Type !=ResultTypeArray &&_fbgg .Type !=ResultTypeList {return MakeErrorResult (_defeb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_eefg :=_gffe (_fbgg );if _gbgcf ==-1{_gbgcf =len (_eefg );_beec =len (_eefg [0]);}else if len (_eefg )!=_gbgcf ||len (_eefg [0])!=_beec {return MakeErrorResult (_defeb +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _dfde &&_bgfe ==0{_bgfe --;};};return _aec ;};

// Reference returns an invalid reference for Number.
func (_efgg Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };type rmode byte ;

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_cdfdc chan *node ;_aafb _eb .Mutex ;_adbaa []chan *node ;_beggc []*node ;};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_fge CellRef )Update (q *_b .UpdateQuery )Expression {if q .UpdateCurrentSheet {_fge ._afb =_afa (_fge ._afb ,q );};return _fge ;};func (_gabae *yyParserImpl )Lookahead ()int {return _gabae ._agfcb };const _beb ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_ee .Pi );};const _cdec int =30;const _gdege =57363;

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_ccbf :=args [0].ValueNumber ;if _ccbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_eadcb :=float64 (int (args [1].ValueNumber ));if _eadcb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_ee .Pow (_ccbf +1,1/_eadcb )-1)*_eadcb );};const _efcf =16;

// HasFormula returns FALSE for the invalid reference context.
func (_bgbf *ivr )HasFormula (cellRef string )bool {return false };

// Update updates the horizontal range references after removing a row/column.
func (_agea HorizontalRange )Update (q *_b .UpdateQuery )Expression {return _agea };func (_gabga *Lexer )nextRaw ()*node {for len (_gabga ._adbaa )!=0{_aabge :=<-_gabga ._adbaa [len (_gabga ._adbaa )-1];if _aabge !=nil {return _aabge ;};_gabga ._adbaa =_gabga ._adbaa [0:len (_gabga ._adbaa )-1];};return <-_gabga ._cdfdc ;};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_eace ,_aacfc int };

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agafg :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcee :=args [2].ValueNumber ;if _gcee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdac :=args [3].ValueNumber ;return MakeNumberResult (_dfdac *_bgg *(_agafg /_gcee -1));};func _dcde (_dagcf Result )[]Result {_beca :=_dagcf .ValueList ;if _dagcf .Type ==ResultTypeArray {_beca =nil ;for _ ,_eeagf :=range _dagcf .ValueArray {if len (_eeagf )> 0{_beca =append (_beca ,_eeagf [0]);}else {_beca =append (_beca ,_aec );};};};return _beca ;};

// Update updates the FunctionCall references after removing a row/column.
func (_cacg FunctionCall )Update (q *_b .UpdateQuery )Expression {_cgcf :=[]Expression {};for _ ,_agbb :=range _cacg ._bbaga {_cbecb :=_agbb .Update (q );_cgcf =append (_cgcf ,_cbecb );};return FunctionCall {_dffg :_cacg ._dffg ,_bbaga :_cgcf };};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_dc :lhs ,_ac :rhs ,_bc :op };};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _beace (args ,false )};func _degbb (_eefba ,_aace Reference )string {return _f .Sprintf ("\u0025\u0073\u003a%\u0073",_eefba .Value ,_aace .Value );};

// LastRow returns 0 for the invalid reference context.
func (_geded *ivr )LastRow (colFrom string )int {return 0};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_cfdg string };

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_bbcbd PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_bbfff :=_bbcbd ._gcbaa .Reference (ctx ,ev );switch _bbfff .Type {case ReferenceTypeSheet :if _cadc (_bbfff ,ctx ){return MakeErrorResultType (ErrorTypeName ,_f .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bbfff .Value ));};_bafgd :=_bbcbd .verticalRangeReference (_bbfff .Value );if _edfgc ,_dbgc :=ev .GetFromCache (_bafgd );_dbgc {return _edfgc ;};_caeef :=ctx .Sheet (_bbfff .Value );_aeed ,_fbcd :=_cdeg (_caeef ,_bbcbd ._fdafdc ,_bbcbd ._febae );_eabc :=_acegg (_caeef ,ev ,_aeed ,_fbcd );ev .SetCache (_bafgd ,_eabc );return _eabc ;default:return MakeErrorResult (_f .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bbfff .Type ));};};

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_gfdab :=args [0];if _gfdab .Type ==ResultTypeError {return _gfdab ;};if _gfdab .Type !=ResultTypeString &&_gfdab .Type !=ResultTypeNumber &&_gfdab .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_dcfca :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_fecag :=int (args [1].ValueNumber );if _fecag < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_ccef :=int (args [2].ValueNumber );if _ccef < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cagdg :=len (_dcfca );if _fecag > _cagdg {return MakeStringResult ("");};_fecag --;_gfba :=_fecag +_ccef ;if _gfba > _cagdg {return MakeStringResult (_dcfca [_fecag :]);}else {return MakeStringResult (_dcfca [_fecag :_gfba ]);};};func _cadc (_daafe Reference ,_gfdabd Context )bool {return _gfdabd .Sheet (_daafe .Value )==InvalidReferenceContext ;};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_adcga :=args [0].AsNumber ();_edfg :=args [1].AsNumber ();if _adcga .Type !=ResultTypeNumber ||_edfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _edfg .ValueNumber < _adcga .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_daafa :=int64 (_adcga .ValueNumber );_cecfcc :=int64 (_edfg .ValueNumber );return MakeNumberResult (float64 (_deeea .Int63n (_cecfcc -_daafa +1)+_daafa ));};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_cfee ,_cdgg :=_eddf (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cdgg .Type ==ResultTypeError {return _cdgg ;};_egag :=_cfee ._gegg ;_edff :=_cfee ._beed ;_acg :=_cfee ._dabg ;_cggd :=_cfee ._fde ;_adda :=_cfee ._bffg ;_cgga :=_cfee ._bgcc ;_dfda :=_bcfc (_egag ,_edff ,_acg ,0,_cgga );_gedc :=0.0;if _cggd ==1{if _cgga ==0{_gedc =_dfda +_acg *_egag ;}else {_gedc =_dfda ;};_cggd ++;};for _eegc :=_cggd ;_eegc <=_adda ;_eegc ++{if _cgga ==1{_gedc +=_dfda -(_gfbg (_egag ,_eegc -2,_dfda ,_acg ,1)-_dfda )*_egag ;}else {_gedc +=_dfda -_gfbg (_egag ,_eegc -1,_dfda ,_acg ,0)*_egag ;};};return MakeNumberResult (_gedc );};func _ceca (_gedbg Result ,_afeec ,_bafac string )(float64 ,Result ){switch _gedbg .Type {case ResultTypeEmpty :return 0,_aec ;case ResultTypeNumber :return _gedbg .ValueNumber ,_aec ;case ResultTypeString :_aaegd ,_ceda :=_af .ParseFloat (_gedbg .ValueString ,64);if _ceda !=nil {return 0,MakeErrorResult (_bafac +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_afeec );};return _aaegd ,_aec ;default:return 0,MakeErrorResult (_afeec +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bafac +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};func _bfdg (_fcdd ,_egdg []float64 ,_acga float64 )float64 {_gff :=_acga +1;_ebcd :=0.0;_fcge :=len (_fcdd );_dede :=_egdg [0];for _edcd :=1;_edcd < _fcge ;_edcd ++{_abda :=(_egdg [_edcd ]-_dede )/365;_ebcd -=_abda *_fcdd [_edcd ]/_ee .Pow (_gff ,_abda +1);};return _ebcd ;};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_acae NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_afcff :=ctx .NamedRange (_acae ._cfdg );_gcedf :=_afcff .Value ;if _dbbb ,_aaegdg :=ev .GetFromCache (_gcedf );_aaegdg {return _dbbb ;};_adbc :=_ed .Split (_gcedf ,"\u0021");if len (_adbc )!=2{return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_gcedf ));};_gggd :=ctx .Sheet (_adbc [0]);_adedc :=_ed .Split (_adbc [1],"\u003a");switch len (_adedc ){case 1:_febe :=ev .Eval (_gggd ,_adedc [0]);ev .SetCache (_gcedf ,_febe );return _febe ;case 2:_bgaae :=_acegg (_gggd ,ev ,_adedc [0],_adedc [1]);ev .SetCache (_gcedf ,_bgaae );return _bgaae ;};return MakeErrorResult (_f .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_afcff .Type ));};const _eacdc int =30;func _adf (_adb ,_abfb float64 ,_gda ,_abadc int )float64 {_acbb :=_ffee (_adb );_cbbfb :=_ffee (_abfb );_fagf :=_fcfbf (_acbb ,_cbbfb ,_gda ,_abadc );return _fbd (_fagf ,_acbb ,_abadc );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _cdc (args ,false )};func (_cba *defEval )checkLastEvalIsRef (_cea Context ,_ga Expression ){switch _ga .(type ){case FunctionCall :switch _ga .(FunctionCall )._dffg {case "\u0049\u0053\u0052E\u0046":for _ ,_dced :=range _ga .(FunctionCall )._bbaga {switch _dced .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_ebd :=_dced .Eval (_cea ,_cba );_cba ._fdgc =!(_ebd .Type ==ResultTypeError &&_ebd .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_cba ._fdgc =false ;};};};};};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_efceb :=1.0;for _ ,_cedf :=range args {_cedf =_cedf .AsNumber ();switch _cedf .Type {case ResultTypeNumber :_efceb *=_cedf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dcdgc :=Product (_cedf .ListValues ());if _dcdgc .Type !=ResultTypeNumber {return _dcdgc ;};_efceb *=_dcdgc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cedf ;case ResultTypeEmpty :default:return MakeErrorResult (_f .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_cedf .Type ));};};return MakeNumberResult (_efceb );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_dggc :=len (args );if _dggc < 4||_dggc > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdded :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cegg :=args [1].ValueNumber ;if _cegg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dadb :=args [2].ValueNumber ;if _dadb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gfgge :=args [3].ValueNumber ;_eecfc :=0.0;if _dggc > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eecfc =args [4].ValueNumber ;};_bdec :=0;if _dggc ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bdec =int (args [5].ValueNumber );if _bdec !=0{_bdec =1;};};return MakeNumberResult (_eecfe (_fdded ,_cegg ,_dadb ,_gfgge ,_eecfc ,_bdec ));};

// Reference returns a string reference value to a vertical range with prefix.
func (_cggde PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_dcaac :=_cggde ._gcbaa .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_cggde .verticalRangeReference (_dcaac .Value )};};func _egadg (_ecafd []Result ,_gebfc countMode )float64 {_ageb :=0.0;for _ ,_bafa :=range _ecafd {switch _bafa .Type {case ResultTypeNumber :if _gebfc ==_bbeb ||(_gebfc ==_fgafc &&!_bafa .IsBoolean ){_ageb ++;};case ResultTypeList ,ResultTypeArray :_ageb +=_egadg (_bafa .ListValues (),_gebfc );case ResultTypeString :if _gebfc ==_bbeb {_ageb ++;};case ResultTypeEmpty :if _gebfc ==_cebc {_ageb ++;};};};return _ageb ;};func (_ddb *evCache )GetFromCache (key string )(Result ,bool ){_ddb ._cbbf .Lock ();_eabf ,_edg :=_ddb ._aca [key ];_ddb ._cbbf .Unlock ();return _eabf ,_edg ;};

// GetEpoch returns a null time object for the invalid reference context.
func (_fggba *ivr )GetEpoch ()_ea .Time {return _ea .Time {}};const _eegce =57364;

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gdbc :=args [0].ValueNumber ;if _gdbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_daac ,_gceeb :=_aagfd (args [1],args [2],"\u0058\u004e\u0050\u0056");if _gceeb .Type ==ResultTypeError {return _gceeb ;};_cfce :=_daac ._gafd ;_feef :=_daac ._bagf ;_cggg :=0.0;_dbbfd :=_feef [0];for _gaag ,_dcfg :=range _cfce {_cggg +=_dcfg /_ee .Pow (1+_gdbc ,(_feef [_gaag ]-_dbbfd )/365);};return MakeNumberResult (_cggg );};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_ebabf :=MakeNumberResult (0);for _ ,_dgbe :=range args {_dgbe =_dgbe .AsNumber ();switch _dgbe .Type {case ResultTypeNumber :_ebabf .ValueNumber +=_dgbe .ValueNumber *_dgbe .ValueNumber ;case ResultTypeList ,ResultTypeArray :_edffe :=SumSquares (_dgbe .ListValues ());if _edffe .Type !=ResultTypeNumber {return _edffe ;};_ebabf .ValueNumber +=_edffe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _dgbe ;case ResultTypeEmpty :default:return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_dgbe .Type ));};};return _ebabf ;};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efcab :=int (args [0].ValueNumber );return MakeBoolResult (_efcab !=_efcab /2*2);};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_cecbf :=_eede (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _cecbf .Type !=ResultTypeEmpty {return _cecbf ;};_fccc :=_addf (args [1:]);_fccae :=0.0;_dfefb :=_gffe (args [0]);for _ ,_fcdde :=range _fccc {_fccae +=_dfefb [_fcdde ._cdff ][_fcdde ._aeeee ].ValueNumber ;};return MakeNumberResult (float64 (_fccae ));};var _gbbe =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_adffa Context ,_dfdgd Evaluator ,_adagf []Result )Result ;

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_ag :data }};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);var _dcdfb =false ;func _accd (_dbaf []Result ,_fcbb string )(float64 ,float64 ,Result ){if len (_dbaf )!=2{return 0,0,MakeErrorResult (_fcbb +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dbaf [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fcbb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aadcf :=_dbaf [0].ValueNumber ;if _dbaf [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fcbb +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bec :=float64 (int (_dbaf [1].ValueNumber ));if _bec < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_fcbb +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _aadcf ,_bec ,_aec ;};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fefgd :=args [0].Ref ;if _fefgd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_fefgd .Value ,ev ).IsBoolean );};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};

// String returns a string representation of a horizontal range.
func (_efbd HorizontalRange )String ()string {return _efbd .horizontalRangeReference ()};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fddd :=args [0].Ref ;for _fddd .Type ==ReferenceTypeNamedRange {_fddd =ctx .NamedRange (_fddd .Value );};_bccc :="";switch _fddd .Type {case ReferenceTypeCell :_bccc =_fddd .Value ;case ReferenceTypeRange :_feca :=_ed .Split (_fddd .Value ,"\u003a");if len (_feca )==2{_bccc =_feca [0];};default:return MakeErrorResult (_f .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_fddd .Type ));};_bbe ,_gbdg :=_ae .ParseCellReference (_bccc );if _gbdg !=nil {return MakeErrorResult (_f .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_gbdg .Error ()));};_feefc ,_bgggg ,_dcdge :=_bbe .Column ,_bbe .RowIdx ,_bbe .SheetName ;_ebda :=args [1].AsNumber ();if _ebda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_efad :=args [2].AsNumber ();if _efad .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _ebfg ,_dffd Result ;if len (args )==3{_ebfg =MakeNumberResult (1);_dffd =MakeNumberResult (1);}else {_ebfg =args [3].AsNumber ();if _ebfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _ebfg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_dffd =args [4].AsNumber ();if _dffd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _dffd .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_faedfe :=_ae .ColumnToIndex (_feefc );_edgb :=_bgggg +uint32 (_ebda .ValueNumber );_bfdgd :=_faedfe +uint32 (_efad .ValueNumber );_gaaa :=_edgb +uint32 (_ebfg .ValueNumber );_dbfcb :=_bfdgd +uint32 (_dffd .ValueNumber );if _ebfg .ValueNumber > 0{_gaaa --;}else {_gaaa ++;_edgb ,_gaaa =_gaaa ,_edgb ;};if _dffd .ValueNumber > 0{_dbfcb --;}else {_dbfcb ++;_bfdgd ,_dbfcb =_dbfcb ,_bfdgd ;};_babg :=_f .Sprintf ("\u0025\u0073\u0025\u0064",_ae .IndexToColumn (_bfdgd ),_edgb );_aacc :=_f .Sprintf ("\u0025\u0073\u0025\u0064",_ae .IndexToColumn (_dbfcb ),_gaaa );if _dcdge ==""{return _acegg (ctx ,ev ,_babg ,_aacc );}else {return _acegg (ctx .Sheet (_dcdge ),ev ,_babg ,_aacc );};};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_afcbc :=args [0].AsNumber ();if _afcbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_beaa :=int (_afcbc .ValueNumber );_geae :=make ([][]Result ,0,_beaa );for _dfdg :=0;_dfdg < _beaa ;_dfdg ++{_fbff :=make ([]Result ,_beaa );for _beee :=0;_beee < _beaa ;_beee ++{if _dfdg ==_beee {_fbff [_beee ]=MakeNumberResult (1.0);}else {_fbff [_beee ]=MakeNumberResult (0.0);};};_geae =append (_geae ,_fbff );};return MakeArrayResult (_geae );};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecfgg :=args [0].AsNumber ();_dfee :=args [1].AsNumber ();if _ecfgg .Type !=ResultTypeNumber ||_dfee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _dfee .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_ee .Trunc (_ecfgg .ValueNumber /_dfee .ValueNumber ));};const (_fgafc countMode =iota ;_bbeb ;_cebc ;);var _ceed _eb .Mutex ;func (_adff *Lexer )Next ()*node {_adff ._aafb .Lock ();defer _adff ._aafb .Unlock ();if len (_adff ._beggc )> 0{_ffbdb :=_adff ._beggc [0];_adff ._beggc =_adff ._beggc [1:];return _ffbdb ;};return _adff .nextRaw ();};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _fcag (_cacf float64 ,_cdcc *criteriaRegex )bool {_cdgea ,_bbfdga :=_af .ParseFloat (_cdcc ._eggec ,64);if _bbfdga !=nil {return false ;};switch _cdcc ._degb {case _gggbg :return _cacf ==_cdgea ;case _egada :return _cacf <=_cdgea ;case _gdcf :return _cacf >=_cdgea ;case _acbag :return _cacf < _cdgea ;case _gcefe :return _cacf > _cdgea ;};return false ;};var _bffae =map[string ]Function {};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abaee :=args [0].AsNumber ();if _abaee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_ee .Pi /180.0*_abaee .ValueNumber );};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_gebg ,_ddde ,_gccg :=_accd (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _gccg .Type ==ResultTypeError {return _gccg ;};if _ddde < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _gebg ==0{return MakeNumberResult (0);};_ggca :=_gebg < 0;if _ggca {_gebg =-_gebg ;};_bacd :=args [0].Value ();_ddba :=_ed .Split (_bacd ,"\u002e");_edfd :=float64 (int (_gebg ));_ggfg :=_ddba [1];_agc :=len (_ggfg );_adgd :=int (_ee .Log10 (_ddde ))+1;_dgeb :=float64 (_adgd -_agc );_ecbf ,_cfafb :=_af .ParseFloat (_ggfg ,64);if _cfafb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_ecbf *=_ee .Pow (10,_dgeb );_fafb :=_edfd +_ecbf /_ddde ;if _ggca {_fafb =-_fafb ;};return MakeNumberResult (_fafb );};type Reference struct{Type ReferenceType ;Value string ;};func _defb (_cgfge []Result ,_abcf bool )(float64 ,float64 ){_ccgg :=0.0;_ddab :=0.0;for _ ,_eecb :=range _cgfge {switch _eecb .Type {case ResultTypeNumber :if _abcf ||!_eecb .IsBoolean {_ddab +=_eecb .ValueNumber ;_ccgg ++;};case ResultTypeList ,ResultTypeArray :_fbafd ,_ggda :=_defb (_eecb .ListValues (),_abcf );_ddab +=_fbafd ;_ccgg +=_ggda ;case ResultTypeString :if _abcf {_ccgg ++;};case ResultTypeEmpty :};};return _ddab ,_ccgg ;};func (_egbbc ResultType )String ()string {if _egbbc >=ResultType (len (_dbded )-1){return _f .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_egbbc );};return _bgca [_dbded [_egbbc ]:_dbded [_egbbc +1]];};

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgfc :=args [0].AsNumber ();if _fgfc .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eaaa :=float64 (1);if _fgfc .ValueNumber < 0{_eaaa =-1;};if len (args )> 1{_acge :=args [1].AsNumber ();if _acge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_eaaa =_acge .ValueNumber ;};_degdf :=float64 (1);if len (args )> 2{_geed :=args [2].AsNumber ();if _geed .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_degdf =_geed .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ee .Floor (_fgfc .ValueNumber ));};_ebge :=_fgfc .ValueNumber ;_ebge ,_bfdef :=_ee .Modf (_ebge /_eaaa );if _bfdef !=0&&_fgfc .ValueNumber < 0&&_degdf > 0{_ebge ++;};return MakeNumberResult (_ebge *_eaaa );};

// Error is called in the case of parsing error and saves an error to a plex.
func (_badgbf *plex )Error (s string ){_edb .Log ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_badgbf ._agab =s ;};type evCache struct{_aca map[string ]Result ;_cbbf *_eb .Mutex ;};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_ccee :=args [0];if _ccee .Type !=ResultTypeArray &&_ccee .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_eccc :=_aebee (args [1]);_agcb :=0;for _ ,_gcdc :=range _gffe (_ccee ){for _ ,_adcd :=range _gcdc {if _eged (_adcd ,_eccc ){_agcb ++;};};};return MakeNumberResult (float64 (_agcb ));};func (_ffgcc node )String ()string {return _f .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_ffgcc ._gfgd ,_beeec (string (_ffgcc ._fcbg )));};

// String returns a string representation of FunctionCall expression.
func (_defc FunctionCall )String ()string {_acag :=_e .Buffer {};_acag .WriteString (_defc ._dffg );_acag .WriteString ("\u0028");_cdgag :=len (_defc ._bbaga )-1;for _bbfc ,_eebcg :=range _defc ._bbaga {_acag .WriteString (_eebcg .String ());if _bbfc !=_cdgag {_acag .WriteString ("\u002c");};};_acag .WriteString ("\u0029");return _acag .String ();};func _debc (_ddee string )(int ,int ,float64 ,bool ,bool ,Result ){_bae :="";_afge :=[]string {};for _fbae ,_fbg :=range _ega {_afge =_fbg .FindStringSubmatch (_ddee );if len (_afge )> 1{_bae =_fbae ;break ;};};if _bae ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};_ddbf :=_afge [1]=="";_afge =_afge [49:];_ceeg :=len (_afge );_cgaa :=_afge [_ceeg -1];_gbgb :=_cgaa =="\u0061\u006d";_aaeg :=_cgaa =="\u0070\u006d";var _bdg ,_cdg int ;var _gfe float64 ;var _ecfc error ;switch _bae {case "\u0068\u0068":_bdg ,_ecfc =_af .Atoi (_afge [0]);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};_cdg =0;_gfe =0;case "\u0068\u0068\u003am\u006d":_bdg ,_ecfc =_af .Atoi (_afge [0]);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};_cdg ,_ecfc =_af .Atoi (_afge [2]);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};_gfe =0;case "\u006d\u006d\u003as\u0073":_bdg =0;_cdg ,_ecfc =_af .Atoi (_afge [0]);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};_gfe ,_ecfc =_af .ParseFloat (_afge [2],64);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_bdg ,_ecfc =_af .Atoi (_afge [0]);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};_cdg ,_ecfc =_af .Atoi (_afge [2]);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};_gfe ,_ecfc =_af .ParseFloat (_afge [4],64);if _ecfc !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};};if _cdg >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};if _gbgb ||_aaeg {if _bdg > 12||_gfe >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );}else if _bdg ==12{_bdg =0;};}else if _bdg >=24||_gfe >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_cfad );};return _bdg ,_cdg ,_gfe ,_aaeg ,_ddbf ,_aec ;};

// Eval evaluates and returns a string.
func (_gabbc String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_gabbc ._fabda )};var InvalidReferenceContext =&ivr {};func _beeec (_daee string )string {_daee =_ed .Replace (_daee ,"\u000a","\u005c\u006e",-1);_daee =_ed .Replace (_daee ,"\u000d","\u005c\u0072",-1);_daee =_ed .Replace (_daee ,"\u0009","\u005c\u0074",-1);return _daee ;};type yyLexer interface{Lex (_ccc *yySymType )int ;Error (_bfdb string );};func _afce (_bbff int )bool {return _bbff >=0&&_bbff <=4};const _fgg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";var _eeegb =[...]string {};

// Update returns the same object as updating sheet references does not affect String.
func (_eggbc String )Update (q *_b .UpdateQuery )Expression {return _eggbc };type xargs struct{_gafd []float64 ;_bagf []float64 ;};var _acd int64 =_gfdc (1900,_ea .January ,1);func _dcec (_dcbf Result ,_ebbgaa *criteriaParsed )bool {if _dcbf .Type ==ResultTypeEmpty {return false ;};if _ebbgaa ._gefbf {return _dcbf .ValueNumber ==_ebbgaa ._faab ;}else {_gga :=_ed .ToLower (_dcbf .ValueString );return _ebbgaa ._baecb ==_gga ||_bf .Match (_ebbgaa ._baecb ,_gga );};};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_ege ,_acbg :=_beae (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _acbg .Type ==ResultTypeError {return _acbg ;};return MakeNumberResult (_adf (_ege ._eeg ,_ege ._fgdg ,_ege ._bcbe ,_ege ._cebg ));};const _eaaag =57378;

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_bece :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bece =int (args [1].ValueNumber );if _bece < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _bece ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_eaac :=args [0].Value ();_bgbbcf :=len (_eaac );if _bece > _bgbbcf {return MakeStringResult (_eaac );};return MakeStringResult (_eaac [_bgbbcf -_bece :_bgbbcf ]);};func _gfdc (_gfc int ,_aage _ea .Month ,_efg int )int64 {if _gfc ==1900&&int (_aage )<=2{_efg --;};_dcee :=_ea .Date (_gfc ,_aage ,_efg ,0,0,0,0,_ea .UTC );return _dcee .Unix ();};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_gccgb PrefixRangeExpr )Update (q *_b .UpdateQuery )Expression {_dffc :=_gccgb ;_cdebf :=_gccgb ._ebdaf .String ();if _cdebf ==q .SheetToUpdate {_gedbd :=*q ;_gedbd .UpdateCurrentSheet =true ;_dffc ._fbefa =_gccgb ._fbefa .Update (&_gedbd );_dffc ._bgccc =_gccgb ._bgccc .Update (&_gedbd );};return _dffc ;};func (_egcag Result )String ()string {return _egcag .Value ()};

// String returns a string representation of a vertical range.
func (_gcdee VerticalRange )String ()string {return _gcdee .verticalRangeReference ()};const _faa =_bgf +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bdcfa :=args [0].AsString ();if _bdcfa .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_cfff :=args [1].AsNumber ();if _cfff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _cfff .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _cfff .ValueNumber ==0{return MakeStringResult ("");};_cagag :=_e .Buffer {};for _acdg :=0;_acdg < int (_cfff .ValueNumber );_acdg ++{_cagag .WriteString (_bdcfa .ValueString );};return MakeStringResult (_cagag .String ());};func _fcdf (_cafg ,_afbgc ,_ecaf ,_dbcdc ,_gfca float64 ,_fbgf int )Result {_adfd ,_caaa :=_fbb (_cafg ,_afbgc ,_fbgf );if _caaa .Type ==ResultTypeError {return _caaa ;};_efcd ,_eadbc :=_egeg (_cafg ,_afbgc ,int (_gfca ),_fbgf );if _eadbc .Type ==ResultTypeError {return _eadbc ;};_daf :=0.0;_cecd :=0.0;_ecaf *=100/_gfca ;_dbcdc /=_gfca ;_dbcdc ++;_cde :=_adfd *_gfca -_efcd ;for _egga :=1.0;_egga < _efcd ;_egga ++{_fae :=_egga +_cde ;_cgae :=_ecaf /_ee .Pow (_dbcdc ,_fae );_cecd +=_cgae ;_daf +=_fae *_cgae ;};_aff :=(_ecaf +100)/_ee .Pow (_dbcdc ,_efcd +_cde );_cecd +=_aff ;_daf +=(_efcd +_cde )*_aff ;_daf /=_cecd ;_daf /=_gfca ;return MakeNumberResult (_daf );};

// Negate is a negate expression like -A1.
type Negate struct{_ggfce Expression };var _dce =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecadf :=args [0].AsNumber ();if _ecadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adaga :=0;if len (args )> 1{_acecb :=args [1];if _acecb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_adaga =int (_acecb .ValueNumber );if _adaga < 0{_adaga =0;}else if _adaga > 4{_adaga =4;};};_cfegb :=_cbgb ;switch _adaga {case 1:_cfegb =_egde ;case 2:_cfegb =_ffebc ;case 3:_cfegb =_fabg ;case 4:_cfegb =_egbbg ;};_bebd :=_ee .Trunc (_ecadf .ValueNumber );_bbda :=_e .Buffer {};for _ ,_fdgee :=range _cfegb {for _bebd >=_fdgee ._cabc {_bbda .WriteString (_fdgee ._egge );_bebd -=_fdgee ._cabc ;};};return MakeStringResult (_bbda .String ());};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dfgdg :=args [0].AsNumber ();if _dfgdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _dfgdg .ValueNumber < 0{return MakeNumberResult (-1);}else if _dfgdg .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_badf :=len (args );if _badf < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aceb :=args [0].ValueNumber ;if _aceb ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fgaf :=[]float64 {};for _ ,_dbcb :=range args [1:]{switch _dbcb .Type {case ResultTypeNumber :_fgaf =append (_fgaf ,_dbcb .ValueNumber );case ResultTypeArray ,ResultTypeList :_bfdd :=_gffe (_dbcb );for _ ,_eaad :=range _bfdd {for _ ,_ddfbf :=range _eaad {if _ddfbf .Type ==ResultTypeNumber &&!_ddfbf .IsBoolean {_fgaf =append (_fgaf ,_ddfbf .ValueNumber );};};};};};_eecc :=0.0;for _gdfg ,_cbg :=range _fgaf {_eecc +=_cbg /_ee .Pow (1+_aceb ,float64 (_gdfg )+1);};return MakeNumberResult (_eecc );};const _dbcd ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_bgf +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _fabe (_abdf []Result ,_bace string )(*amorArgs ,Result ){_ceg :=len (_abdf );if _ceg !=6&&_ceg !=7{return nil ,MakeErrorResult (_bace +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _abdf [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bace +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bde :=_abdf [0].ValueNumber ;if _bde < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bace +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_beeg ,_gggc :=_geff (_abdf [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_bace );if _gggc .Type ==ResultTypeError {return nil ,_gggc ;};_babff ,_gggc :=_geff (_abdf [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_bace );if _gggc .Type ==ResultTypeError {return nil ,_gggc ;};if _babff < _beeg {return nil ,MakeErrorResultType (ErrorTypeNum ,_bace +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _abdf [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bace +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfb :=_abdf [3].ValueNumber ;if _gfb < 0||_gfb > _bde {return nil ,MakeErrorResultType (ErrorTypeNum ,_bace +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _abdf [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bace +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcec :=int (_abdf [4].ValueNumber );if _bcec < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bace +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _abdf [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bace +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cfae :=_abdf [5].ValueNumber ;if _cfae < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_bace +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_fggbd :=0;if _ceg ==7&&_abdf [6].Type !=ResultTypeEmpty {if _abdf [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_bace +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fggbd =int (_abdf [6].ValueNumber );if !_afce (_fggbd )||_fggbd ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_bace );};};return &amorArgs {_bde ,_beeg ,_babff ,_gfb ,_bcec ,_cfae ,_fggbd },_aec ;};func _aecc (_ebf string )(int ,int ,int ,bool ,Result ){_aega :="";_ecfd :=[]string {};for _cfd ,_aaec :=range _bb {_ecfd =_aaec .FindStringSubmatch (_ebf );if len (_ecfd )> 1{_aega =_cfd ;break ;};};if _aega ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_dee :=false ;var _aegb ,_edgf ,_fgf int ;var _gaee error ;switch _aega {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_edgf ,_gaee =_af .Atoi (_ecfd [1]);if _gaee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_fgf ,_gaee =_af .Atoi (_ecfd [3]);if _gaee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_aegb ,_gaee =_af .Atoi (_ecfd [5]);if _gaee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};if _aegb < 0||_aegb > 9999||(_aegb > 99&&_aegb < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_aegb =_ddaa (_aegb );_dee =_ecfd [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_edgf =_fbf [_ecfd [1]];_fgf ,_gaee =_af .Atoi (_ecfd [14]);if _gaee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_aegb ,_gaee =_af .Atoi (_ecfd [16]);if _gaee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};if _aegb < 0||_aegb > 9999||(_aegb > 99&&_aegb < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_aegb =_ddaa (_aegb );_dee =_ecfd [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_fceb ,_dgf :=_af .Atoi (_ecfd [1]);if _dgf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_egd ,_dgf :=_af .Atoi (_ecfd [3]);if _dgf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_ffeb ,_dgf :=_af .Atoi (_ecfd [5]);if _dgf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};if _fceb >=1900&&_fceb < 10000{_aegb =_fceb ;_edgf =_egd ;_fgf =_ffeb ;}else if _fceb > 0&&_fceb < 13{_edgf =_fceb ;_fgf =_egd ;_aegb =_ffeb ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_dee =_ecfd [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_aegb ,_gaee =_af .Atoi (_ecfd [16]);if _gaee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_edgf =_fbf [_ecfd [3]];_fgf ,_gaee =_af .Atoi (_ecfd [1]);if _gaee !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};_dee =_ecfd [19]=="";};if !_ebdc (_aegb ,_edgf ,_fgf ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_fgdd );};return _aegb ,_edgf ,_fgf ,_dee ,_aec ;};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdbaf :=0;_efdd :=false ;for _ ,_bdebf :=range args {switch _bdebf .Type {case ResultTypeList ,ResultTypeArray :_dfef :=Xor (_bdebf .ListValues ());if _dfef .Type ==ResultTypeError {return _dfef ;};if _dfef .ValueNumber !=0{_bdbaf ++;};_efdd =true ;case ResultTypeNumber :if _bdebf .ValueNumber !=0{_bdbaf ++;};_efdd =true ;case ResultTypeString :case ResultTypeError :return _bdebf ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_efdd {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_bdbaf %2!=0);};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _cbda (args ,_dgca )};const _dfcf int =30;func _afbdg (_cdeff Result ,_aeabb int )[]Result {_gecb :=[]Result {};switch _cdeff .Type {case ResultTypeList :_gaab :=_cdeff .ValueList ;_aeaed :=len (_gaab );for _bfff :=0;_bfff < _aeabb ;_bfff ++{if _bfff < _aeaed {_gecb =append (_gecb ,_gaab [_bfff ]);}else {_gecb =append (_gecb ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _adfab :=0;_adfab < _aeabb ;_adfab ++{_gecb =append (_gecb ,_cdeff );};};return _gecb ;};const _dbfb ="\u0028\u0020\u0028"+_gab +"\u007c"+_fgg +"\u007c"+_deg +"\u007c"+_beb +"\u0029\u0029\u003f\u0024";func _dag (_adac ,_cceba ,_dbg ,_cafec int )int {if _cceba > _dbg {return 0;};if _gdfd (_cafec ){return (_dbg -_cceba +1)*30;};_ebbg :=0;for _efce :=_cceba ;_efce <=_dbg ;_efce ++{_ebbg +=_cfe (_adac ,_efce );};return _ebbg ;};const _efaf =57376;const _fgdd ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";func _egg (_acba string )bool {for _ ,_efca :=range _bbf {_acea :=_efca .FindStringSubmatch (_acba );if len (_acea )> 1{return true ;};};return false ;};var _egde =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_cce *defEval )LastEvalIsRef ()bool {return _cce ._fdgc };

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_becfb :=true ;for _ ,_gfea :=range args {_gfea =_gfea .AsNumber ();switch _gfea .Type {case ResultTypeList ,ResultTypeArray :_dcfc :=And (_gfea .ListValues ());if _dcfc .Type ==ResultTypeError {return _dcfc ;};if _dcfc .ValueNumber ==0{_becfb =false ;};case ResultTypeNumber :if _gfea .ValueNumber ==0{_becfb =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _gfea ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_becfb );};const _bcbba =57361;

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_gbgd :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gbgd =int (args [1].ValueNumber );if _gbgd < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _gbgd ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_adbbd :=args [0].Value ();if _gbgd > len (_adbbd ){return MakeStringResult (_adbbd );};return MakeStringResult (_adbbd [0:_gbgd ]);};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};const _bfac =_ea .Millisecond *1000;type parsedSearchObject struct{_daddg string ;_bfae string ;_gccf int ;};func (_fecf HorizontalRange )horizontalRangeReference ()string {return _f .Sprintf ("\u0025\u0064\u003a%\u0064",_fecf ._eace ,_fecf ._aacfc );};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fbgd :=args [0].AsString ();_dfccb :=args [1].AsString ();if _fbgd .Type !=ResultTypeString ||_dfccb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_fbgd .ValueString ==_dfccb .ValueString );};const _gab ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";

// Eval evaluates and returns the result of an empty expression.
func (_bag EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _cgab (args ,false )};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;type plex struct{_cgdb chan *node ;_dbdbe Expression ;_agab string ;};const _dcbd ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";var _gbbbf =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };var _bfded []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccfe :=_abgd (args );_de .Float64s (_ccfe );var _dadd float64 ;if len (_ccfe )%2==0{_dadd =(_ccfe [len (_ccfe )/2-1]+_ccfe [len (_ccfe )/2])/2;}else {_dadd =_ccfe [len (_ccfe )/2];};return MakeNumberResult (_dadd );};

// SetLocked does nothing for the invalid reference context.
func (_bacbe *ivr )SetLocked (cellRef string ,locked bool ){};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_daaf ,_cgfd ,_gabfe :=_caed (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _gabfe .Type ==ResultTypeError {return _gabfe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfaaf :=_cgfd -_daaf ;if _cfaaf > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_fbdb :=args [2].ValueNumber ;if _fbdb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_fbdb *_cfaaf /360));};

// String returns a string representation of a vertical range with prefix.
func (_afcd PrefixVerticalRange )String ()string {return _f .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_afcd ._gcbaa .String (),_afcd ._fdafdc ,_afcd ._febae );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_aadf :=args [0].AsNumber ();_acbeb :=args [1].AsNumber ();if _aadf .Type ==ResultTypeNumber &&_acbeb .Type ==ResultTypeNumber {_bcece :=_ee .Atan2 (_acbeb .ValueNumber ,_aadf .ValueNumber );if _bcece !=_bcece {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_bcece );};for _ ,_aegff :=range []ResultType {_aadf .Type ,_acbeb .Type }{switch _aegff {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _aadf ;default:return MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_aegff ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebbff :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abea :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ceac :=args [2].ValueNumber ;if _ceac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_ebbff -_abea )/_ceac );};const _ffgfc =57368;var _efadc =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};

// String returns a string representation of String.
func (_dcdab String )String ()string {return "\u0022"+_dcdab ._fabda +"\u0022"};func _gbdff (_dafg []Result ,_edga []string ,_bacff bool )[]string {for _ ,_ggbce :=range _dafg {switch _ggbce .Type {case ResultTypeEmpty :if !_bacff {_edga =append (_edga ,"");};case ResultTypeString :if _ggbce .ValueString !=""||!_bacff {_edga =append (_edga ,_ggbce .ValueString );};case ResultTypeNumber :_edga =append (_edga ,_ggbce .Value ());case ResultTypeList :_edga =_cdedg (_edga ,_gbdff (_ggbce .ValueList ,[]string {},_bacff ));case ResultTypeArray :for _ ,_ggccb :=range _ggbce .ValueArray {_edga =_cdedg (_edga ,_gbdff (_ggccb ,[]string {},_bacff ));};};};return _edga ;};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbcb :=[]float64 {};for _ ,_fdca :=range args {switch _fdca .Type {case ResultTypeString :_ccda :=_fdca .AsNumber ();if _ccda .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cbcb =append (_cbcb ,_ccda .ValueNumber );case ResultTypeList ,ResultTypeArray :_cdaf :=GCD (_fdca .ListValues ());if _cdaf .Type !=ResultTypeNumber {return _cdaf ;};_cbcb =append (_cbcb ,_cdaf .ValueNumber );case ResultTypeNumber :_cbcb =append (_cbcb ,_fdca .ValueNumber );case ResultTypeError :return _fdca ;default:return MakeErrorResult (_f .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fdca .Type ));};};if _cbcb [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cbcb )==1{return MakeNumberResult (_cbcb [0]);};_bgea :=_cbcb [0];for _fad :=1;_fad < len (_cbcb );_fad ++{if _cbcb [_fad ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bgea =_gbaeb (_bgea ,_cbcb [_fad ]);};return MakeNumberResult (_bgea );};func _agb (_ged ,_cged _ea .Time )bool {_gbe :=_ged .Unix ();_gebf :=_cged .Unix ();_bcc :=_ged .Year ();_cdd :=_gfdc (_bcc ,_ea .March ,1);if _dgdb (_bcc )&&_gbe < _cdd &&_gebf >=_cdd {return true ;};var _cacc =_cged .Year ();var _dbbf =_gfdc (_cacc ,_ea .March ,1);return (_dgdb (_cacc )&&_gebf >=_dbbf &&_gbe < _dbbf );};

// String returns a string representation of a horizontal range with prefix.
func (_aecf PrefixHorizontalRange )String ()string {return _f .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_aecf ._cggba .String (),_aecf ._gdabc ,_aecf ._agdb );};func _aagfd (_bgbg ,_eagg Result ,_geece string )(*xargs ,Result ){if _bgbg .Type !=ResultTypeList &&_bgbg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_geece +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_eada :=_gffe (_bgbg );_bacb :=[]float64 {};for _ ,_adcg :=range _eada {for _ ,_ddea :=range _adcg {if _ddea .Type ==ResultTypeNumber &&!_ddea .IsBoolean {_bacb =append (_bacb ,_ddea .ValueNumber );}else {return nil ,MakeErrorResult (_geece +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_egfgf :=len (_bacb );if len (_bacb )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _eagg .Type !=ResultTypeList &&_eagg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_geece +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_aaffb :=_gffe (_eagg );_ccbe :=[]float64 {};_gadb :=0.0;for _ ,_aacfd :=range _aaffb {for _ ,_edfa :=range _aacfd {if _edfa .Type ==ResultTypeNumber &&!_edfa .IsBoolean {_debf :=float64 (int (_edfa .ValueNumber ));if _debf < _gadb {return nil ,MakeErrorResultType (ErrorTypeNum ,_geece +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_ccbe =append (_ccbe ,_debf );_gadb =_debf ;}else {return nil ,MakeErrorResult (_geece +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_ccbe )!=_egfgf {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_bacb ,_ccbe },MakeEmptyResult ();};func (_afg BinOpType )String ()string {if _afg >=BinOpType (len (_dce )-1){return _f .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_afg );};return _dcbd [_dce [_afg ]:_dce [_afg +1]];};func _ead (_dcb BinOpType ,_dg [][]Result ,_dbe Result )Result {_fgd :=[][]Result {};for _ca :=range _dg {_ba :=_acc (_dcb ,_dg [_ca ],_dbe );if _ba .Type ==ResultTypeError {return _ba ;};_fgd =append (_fgd ,_ba .ValueList );};return MakeArrayResult (_fgd );};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_ggcd :=len (args );if _ggcd !=4&&_ggcd !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edgde ,_dcf ,_afaa :=_caed (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _afaa .Type ==ResultTypeError {return _afaa ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adgf :=args [2].ValueNumber ;if _adgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ddefe :=args [3].ValueNumber ;if _ddefe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_ddg :=0;if _ggcd ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ddg =int (args [4].ValueNumber );if !_afce (_ddg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_ecged ,_afaa :=_fbb (_edgde ,_dcf ,_ddg );if _afaa .Type ==ResultTypeError {return _afaa ;};return MakeNumberResult ((_ddefe -_adgf )/_adgf /_ecged );};

// Reference returns a string reference value to a range.
func (_gacgc Range )Reference (ctx Context ,ev Evaluator )Reference {_fdbea :=_gacgc ._ccegg .Reference (ctx ,ev );_faaag :=_gacgc ._fcfe .Reference (ctx ,ev );if _fdbea .Type ==ReferenceTypeCell &&_faaag .Type ==ReferenceTypeCell {return MakeRangeReference (_degbb (_fdbea ,_faaag ));};return ReferenceInvalid ;};func _cbda (_geade []Result ,_baedb rmode )Result {if len (_geade )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_gbbfe :=_geade [0].AsNumber ();if _gbbfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gebd :=_geade [1].AsNumber ();if _gebd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbfd :=_gebd .ValueNumber ;_gacf :=_gbbfe .ValueNumber ;_fbdbd :=1.0;if _cbfd > 0{_fbdbd =_ee .Pow (1/10.0,_cbfd );}else {_fbdbd =_ee .Pow (10.0,-_cbfd );};_gacf ,_fbaf :=_ee .Modf (_gacf /_fbdbd );switch _baedb {case _baff :const _facgc =0.499999999;if _fbaf >=_facgc {_gacf ++;}else if _fbaf <=-_facgc {_gacf --;};case _gdeb :case _dgca :if _fbaf > 0{_gacf ++;}else if _fbaf < 0{_gacf --;};};return MakeNumberResult (_gacf *_fbdbd );};

// String returns a string representation for Bool.
func (_fdg Bool )String ()string {if _fdg ._dbb {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ddbef :=args [0].AsNumber ();if _ddbef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_dgce :=float64 (1);if _ddbef .ValueNumber < 0{_dgce =-1;};if len (args )> 1{_acbba :=args [1].AsNumber ();if _acbba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dgce =_acbba .ValueNumber ;};_gege :=float64 (1);if len (args )> 2{_cfdb :=args [2].AsNumber ();if _cfdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_gege =_cfdb .ValueNumber ;};if len (args )==1{return MakeNumberResult (_ee .Ceil (_ddbef .ValueNumber ));};_caec :=_ddbef .ValueNumber ;_caec ,_dbcf :=_ee .Modf (_caec /_dgce );if _dbcf !=0{if _ddbef .ValueNumber > 0{_caec ++;}else if _gege < 0{_caec --;};};return MakeNumberResult (_caec *_dgce );};

// FunctionCall is a function call expression.
type FunctionCall struct{_dffg string ;_bbaga []Expression ;};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_gedfd ,_gaed :=_bfdgf ("\u0046\u0049\u004e\u0044",args );if _gaed .Type !=ResultTypeEmpty {return _gaed ;};_dcgg :=_gedfd ._daddg ;if _dcgg ==""{return MakeNumberResult (1.0);};_cdgef :=_gedfd ._bfae ;_beag :=_gedfd ._gccf -1;_ebbe :=1;_eaage :=0;for _gced :=range _cdgef {if _gced !=0{_acgae :=1;if _gced -_eaage > 1{_acgae =2;};_ebbe +=_acgae ;};if _ebbe > _beag {_cecbfg :=_ed .Index (_cdgef [_gced :],_dcgg );if _cecbfg ==0{return MakeNumberResult (float64 (_ebbe ));};};_eaage =_gced ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_dagb :=args [0].AsNumber ();if _dagb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_efed :=10.0;if len (args )> 1{_badd :=args [1].AsNumber ();if _badd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_efed =args [1].ValueNumber ;};if _dagb .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _efed ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_ee .Log (_dagb .ValueNumber )/_ee .Log (_efed ));};func _addf (_eebd []Result )[]rangeIndex {_bcfa :=[]rangeIndex {};_bcbde :=len (_eebd );for _cgfb :=0;_cgfb < _bcbde -1;_cgfb +=2{_dgad :=[]rangeIndex {};_ffde :=_gffe (_eebd [_cgfb ]);_gcaa :=_aebee (_eebd [_cgfb +1]);if _cgfb ==0{for _cgfbg ,_bdcf :=range _ffde {for _fabf ,_gfeag :=range _bdcf {if _eged (_gfeag ,_gcaa ){_dgad =append (_dgad ,rangeIndex {_cgfbg ,_fabf });};};};}else {for _ ,_gedf :=range _bcfa {_adde :=_ffde [_gedf ._cdff ][_gedf ._aeeee ];if _eged (_adde ,_gcaa ){_dgad =append (_dgad ,_gedf );};};};if len (_dgad )==0{return []rangeIndex {};};_bcfa =_dgad [:];};return _bcfa ;};func _ebfb (_fdad float64 )float64 {_bdfcbf :=float64 (1);for _bffad :=float64 (2);_bffad <=_fdad ;_bffad ++{_bdfcbf *=_bffad ;};return _bdfcbf ;};const _bgf ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";func LexReader (r _a .Reader )chan *node {_cbdee :=NewLexer ();go _cbdee .lex (r );return _cbdee ._cdfdc };const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);func _bcfc (_ddag ,_cfag ,_fgca ,_eaee float64 ,_ccf int )float64 {var _aabe float64 ;if _ddag ==0{_aabe =(_fgca +_eaee )/_cfag ;}else {_dfdb :=_ee .Pow (1+_ddag ,_cfag );if _ccf ==1{_aabe =(_eaee *_ddag /(_dfdb -1)+_fgca *_ddag /(1-1/_dfdb ))/(1+_ddag );}else {_aabe =_eaee *_ddag /(_dfdb -1)+_fgca *_ddag /(1-1/_dfdb );};};return -_aabe ;};func _ec (_db ,_fb [][]Result )bool {if len (_db )!=len (_fb ){return false ;};for _fg :=range _db {if len (_db [_fg ])!=len (_fb [_fg ]){return false ;};};return true ;};

// Reference returns a string reference value to a sheet.
func (_cgac SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_cgac ._ecbde };};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddgf :=int (args [0].ValueNumber );return MakeBoolResult (_ddgf ==_ddgf /2*2);};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_dc ,_ac Expression ;_bc BinOpType ;};var _acebg =[...]int {1};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_dfg EmptyExpr )Update (q *_b .UpdateQuery )Expression {return _dfg };

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_bgac Expression ;_fbde Expression ;};var _fabg =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Update returns the same object as updating sheet references does not affect Bool.
func (_eaef Bool )Update (q *_b .UpdateQuery )Expression {return _eaef };const _bggce =57374;func (_edcf *noCache )GetFromCache (key string )(Result ,bool ){return _aec ,false };

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_egadg (args ,_fgafc ))};

// CellRef is a reference to a single cell
type CellRef struct{_afb string };

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_deeea .Float64 ());};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aedd :=args [0];if _aedd .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaad :=len (_aedd .ValueArray );for _ ,_abbe :=range _aedd .ValueArray {if len (_abbe )!=_gaad {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_accg (_aedd .ValueArray ));};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_acdba :=_eede (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _acdba .Type !=ResultTypeEmpty {return _acdba ;};_gaff :=_addf (args );return MakeNumberResult (float64 (len (_gaff )));};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cgaf :=args [0].AsNumber ();if _cgaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aebe :=_ee .Signbit (_cgaf .ValueNumber );_fffe ,_cfbdfb :=_ee .Modf (_cgaf .ValueNumber /2);_feed :=_fffe *2;if _cfbdfb !=0{if !_aebe {_feed +=2;}else {_feed -=2;};};return MakeNumberResult (_feed );};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};var _cbcf []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// Bool is a boolean expression.
type Bool struct{_dbb bool };

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_agaa :=len (args );if _agaa !=5&&_agaa !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_afgf ,_fgeba ,_gbff :=_caed (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _gbff .Type ==ResultTypeError {return _gbff ;};_dagdb ,_gbff :=_geff (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _gbff .Type ==ResultTypeError {return _gbff ;};if _dagdb >=_afgf {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_eagge :=args [3].ValueNumber ;if _eagge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_afdg :=args [4].ValueNumber ;if _afdg <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_fdgf :=0;if _agaa ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdgf =int (args [5].ValueNumber );if !_afce (_fdgf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_fbbd ,_gbff :=_fbb (_dagdb ,_fgeba ,_fdgf );if _gbff .Type ==ResultTypeError {return _gbff ;};_edac ,_gbff :=_fbb (_dagdb ,_afgf ,_fdgf );if _gbff .Type ==ResultTypeError {return _gbff ;};_fdaf ,_gbff :=_fbb (_afgf ,_fgeba ,_fdgf );if _gbff .Type ==ResultTypeError {return _gbff ;};_aagb :=1+_fbbd *_eagge ;_aagb /=_afdg /100+_edac *_eagge ;_aagb --;_aagb /=_fdaf ;return MakeNumberResult (_aagb );};const _gbcd =57355;

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_gfbd :=args [0].AsNumber ();if _gfbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddfdb :=_ee .Signbit (_gfbd .ValueNumber );_dbdd ,_ecgdf :=_ee .Modf ((_gfbd .ValueNumber -1)/2);_bgda :=_dbdd *2+1;if _ecgdf !=0{if !_ddfdb {_bgda +=2;}else {_bgda -=2;};};return MakeNumberResult (_bgda );};var _edad ,_agfcg ,_dgebf ,_cacde ,_ccgbd ,_decc ,_gebc ,_abbf ,_ebcb ,_adaf ,_afcf ,_cdag ,_cfgf ,_gcec ,_gabfc *_df .Regexp ;

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_afb :v }};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cbab :=args [1].ValueNumber ;_begg :=args [0];var _dbda float64 ;switch _begg .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_dbda =_begg .ValueNumber ;case ResultTypeString :_adc :=DateValue ([]Result {args [0]});if _adc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dbda =_adc .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cbea :=_ffee (_dbda );_abbc :=_cbea .AddDate (0,int (_cbab ),0);_gabg ,_egab ,_dca :=_abbc .Date ();_cafe :=_fee (_gabg ,int (_egab ),_dca );if _cafe < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_cafe );};func _aegcf (_ggg ,_cgg float64 ,_aafd ,_defa int )float64 {_geg :=_ffee (_ggg );_bee :=_ffee (_cgg );if _defa ==1{_ccd :=_fcfbf (_geg ,_bee ,_aafd ,1);_bdbe :=_ccd .AddDate (0,12/_aafd ,0);return _fbd (_ccd ,_bdbe ,_defa );};return float64 (_dbbab (0,_defa ))/float64 (_aafd );};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cedb :=args [0];if _cedb .Type ==ResultTypeError ||_cedb .Type ==ResultTypeString {return _cedb ;};return _aec ;};var _ebed =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_cfdg :v }};func _bdcd (_ddbd int )string {if _ddbd >=1&&_ddbd -1< len (_eccb ){if _eccb [_ddbd -1]!=""{return _eccb [_ddbd -1];};};return _f .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_ddbd );};func _bcbc (_agfa ,_fbdc ,_gffc ,_gfac ,_ebdb ,_fccd float64 )float64 {var _cbbe ,_bcca float64 ;_eaab :=0.0;_adfdd :=_ee .Ceil (_ebdb );_fdggc :=_agfa -_fbdc ;_dgbg :=false ;_aagc :=0.0;for _ecbe :=1.0;_ecbe <=_adfdd ;_ecbe ++{if !_dgbg {_cbbe =_cddb (_agfa ,_fbdc ,_gffc ,_ecbe ,_fccd );_aagc =_fdggc /(_gffc -_ecbe +1);if _aagc > _cbbe {_bcca =_aagc ;_dgbg =true ;}else {_bcca =_cbbe ;_fdggc -=_cbbe ;};}else {_bcca =_aagc ;};if _ecbe ==_adfdd {_bcca *=_ebdb +1-_adfdd ;};_eaab +=_bcca ;};return _eaab ;};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _cdc (args ,true )};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ebdcd :=args [0].AsString ();if _ebdcd .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_gaeee :=args [1].AsNumber ();if _gaeee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfga :=_ebdcd .ValueString ;if len (_gfga )> 2&&(_ed .HasPrefix (_gfga ,"\u0030\u0078")||_ed .HasPrefix (_gfga ,"\u0030\u0058")){_gfga =_gfga [2:];};_bedc ,_afdc :=_af .ParseInt (_gfga ,int (_gaeee .ValueNumber ),64);if _afdc !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_bedc ));};

// Reference returns a string reference value to a named range.
func (_eeafcb NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_eeafcb ._cfdg };};func _abga (_eba ,_dfgg int64 )float64 {return float64 (int (0.5+float64 ((_dfgg -_eba )/86400)))};var _fecafe =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_aeea ,_cgee :=_fabe (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _cgee .Type ==ResultTypeError {return _cgee ;};_dcdf :=_aeea ._gdgb ;_gceg :=_aeea ._dega ;_ffdc :=_aeea ._gdbgd ;_ggc :=_aeea ._gca ;_gfcd :=_aeea ._cggf ;_bedg :=_aeea ._ebef ;_aaff :=_aeea ._babf ;_bfbe ,_fcbd :=_fbb (_gceg ,_ffdc ,_aaff );if _fcbd .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_gabe :=_bfbe *_bedg *_dcdf ;if _gfcd ==0{return MakeNumberResult (_gabe );};_caae :=_dcdf *_bedg ;_fdab :=_dcdf -_ggc ;_daae :=int ((_fdab -_gabe )/_caae );if _gfcd <=_daae {return MakeNumberResult (_caae );}else if _gfcd ==_daae +1{return MakeNumberResult (_fdab -_caae *float64 (_daae )-_gabe );}else {return MakeNumberResult (0);};};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dged :=ctx .GetEpoch ();_afc ,_bgbe :=_cbgc (args [0].Value (),_dged );if _bgbe !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_afc .Year ()));};func _bcde (){_bb ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_df .MustCompile ("\u005e"+_gd +_dbfb );_bb ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_df .MustCompile ("\u005e"+_faa +_dbfb );_bb ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_df .MustCompile ("\u005e"+_fdbe +_dbfb );_bb ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_df .MustCompile ("\u005e"+_dbcd +_dbfb );_ega ["\u0068\u0068"]=_df .MustCompile (_fbc +_gab +"\u0024");_ega ["\u0068\u0068\u003am\u006d"]=_df .MustCompile (_fbc +_fgg +"\u0024");_ega ["\u006d\u006d\u003as\u0073"]=_df .MustCompile (_fbc +_deg +"\u0024");_ega ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_df .MustCompile (_fbc +_beb +"\u0024");_bbf =[]*_df .Regexp {_df .MustCompile ("\u005e"+_gd +"\u0024"),_df .MustCompile ("\u005e"+_faa +"\u0024"),_df .MustCompile ("\u005e"+_fdbe +"\u0024"),_df .MustCompile ("\u005e"+_dbcd +"\u0024")};_ace =[]*_df .Regexp {_df .MustCompile ("\u005e"+_gab +"\u0024"),_df .MustCompile ("\u005e"+_fgg +"\u0024"),_df .MustCompile ("\u005e"+_deg +"\u0024"),_df .MustCompile ("\u005e"+_beb +"\u0024")};};

// Eval evaluates and returns the result of a formula.
func (_aeg *defEval )Eval (ctx Context ,formula string )Result {_ffb :=ParseString (formula );_bcd :=make (chan Result );go func (){if _ffb ==nil {_bcd <-MakeErrorResult (_f .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_aeg .checkLastEvalIsRef (ctx ,_ffb );_bcd <-_ffb .Eval (ctx ,_aeg );};}();select{case _gce :=<-_bcd :return _gce ;case <-_ea .After (_cfa ):_edb .Log ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};const _gdagd =57354;

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_ceed .Lock ();defer _ceed .Unlock ();if _gcfb ,_bcaeg :=_cccbc [name ];_bcaeg {return _gcfb ;};return nil ;};const _efab =57344;

// Update updates references in the BinaryExpr after removing a row/column.
func (_bg BinaryExpr )Update (q *_b .UpdateQuery )Expression {_bed :=_bg ;_bed ._dc =_bg ._dc .Update (q );_bed ._ac =_bg ._ac .Update (q );return _bed ;};

// Eval evaluates and returns the result of a sheet expression.
func (_ddfe SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eddg :=args [0].AsString ();if _eddg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_fefa :="\u0041\u0031";if len (args )==2{_dcdff :=args [1].Ref ;if _dcdff .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_fefa =_dcdff .Value ;};switch _eddg .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_ffa ,_dcdee :=_ae .ParseCellReference (_fefa );if _dcdee !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fefa );};_feee :="\u0024"+_ffa .Column +"\u0024"+_af .Itoa (int (_ffa .RowIdx ));if _ffa .SheetName !=""{_feee =_ffa .SheetName +"\u0021"+_feee ;};return MakeStringResult (_feee );case "\u0063\u006f\u006c":_edgg ,_bcda :=_ae .ParseCellReference (_fefa );if _bcda !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fefa );};return MakeNumberResult (float64 (_edgg .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_bfea :=_ed .Contains (ctx .GetFormat (_fefa ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_bfea );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_eaaf :="\u0047";_deaef :=ctx .GetFormat (_fefa );if _deaef =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_edad .MatchString (_deaef ){_eaaf ="\u0046\u0030";}else if _deaef =="\u0030\u0025"{_eaaf ="\u0050\u0030";}else if _deaef =="\u004d\u004d\u004d\u0020\u0044\u0044"{_eaaf ="\u0044\u0032";}else if _deaef =="\u004d\u004d\u002fY\u0059"{_eaaf ="\u0044\u0033";}else if _deaef =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_deaef =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_eaaf ="\u0044\u0034";}else if _deaef =="\u004d\u004d\u005c\u002d\u0044\u0044"{_eaaf ="\u0044\u0035";}else if _deaef =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_eaaf ="\u0044\u0036";}else if _deaef =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_eaaf ="\u0044\u0037";}else if _deaef =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_eaaf ="\u0044\u0038";}else if _deaef =="\u0048\u0048\u003aM\u004d"{_eaaf ="\u0044\u0039";}else if _dgebf .MatchString (_deaef ){_eaaf ="\u002e\u0030";}else if _cacde .MatchString (_deaef ){_eaaf ="\u002e\u0030\u0028\u0029";}else if _adaf .MatchString (_deaef ){_eaaf ="\u0043\u0030";}else if _cfgf .MatchString (_deaef )||_gcec .MatchString (_deaef ){_eaaf ="\u0044\u0031";}else if _edfe :=_agfcg .FindStringSubmatch (_deaef );len (_edfe )> 1{_eaaf ="\u0046"+_af .Itoa (len (_edfe [1]));}else if _ceggc :=_decc .FindStringSubmatch (_deaef );len (_ceggc )> 1{_eaaf ="\u002e"+_af .Itoa (len (_ceggc [2]));}else if _ffab :=_ebcb .FindStringSubmatch (_deaef );len (_ffab )> 1{_eaaf ="\u0050"+_af .Itoa (len (_ffab [2]));}else if _fbedga :=_afcf .FindStringSubmatch (_deaef );len (_fbedga )> 1{_eaaf ="\u0043"+_abaa (_fbedga ,1);}else if _agde :=_cdag .FindStringSubmatch (_deaef );len (_agde )> 1{_eaaf ="\u0043"+_abaa (_agde ,1);}else if _fbeb :=_gebc .FindStringSubmatch (_deaef );len (_fbeb )> 1{_eaaf ="\u002e"+_abaa (_fbeb ,1)+"\u0028\u0029";}else if _acab :=_ccgbd .FindStringSubmatch (_deaef );len (_acab )> 1{_eaaf ="\u002e"+_abaa (_acab ,1);}else if _eecg :=_gabfc .FindStringSubmatch (_deaef );len (_eecg )> 1{_eaaf ="\u0053"+_abaa (_eecg ,3);};if _eaaf !="\u0047"&&_ed .Contains (_deaef ,"\u005b\u0052\u0045D\u005d"){_eaaf +="\u002d";};return MakeStringResult (_eaaf );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_cadf :=ctx .GetFormat (_fefa );if _abbf .MatchString (_cadf ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_fefa ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_cgbg :=0.0;if ctx .GetLocked (_fefa ){_cgbg =1.0;};return MakeNumberResult (_cgbg );case "\u0072\u006f\u0077":_cfdce ,_fbcecg :=_ae .ParseCellReference (_fefa );if _fbcecg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fefa );};return MakeNumberResult (float64 (_cfdce .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_debd ,_aefc :=_ae .ParseCellReference (_fefa );if _aefc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fefa );};if _debd .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_debd .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_debd .SheetName ).GetWidth (int (_debd .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_eddg .ValueString );};func _ecbg (_cdfb ,_afgc _ea .Time ,_fbfbe int )_ea .Time {_aeac :=_ea .Date (_cdfb .Year (),_afgc .Month (),_afgc .Day (),0,0,0,0,_ea .UTC );if _aeac .After (_cdfb ){_aeac =_aeac .AddDate (-1,0,0);};for !_aeac .After (_cdfb ){_aeac =_aeac .AddDate (0,12/_fbfbe ,0);};return _aeac ;};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};func _eccfd (_cddbb []Result )Result {_cecb :=_cddbb [0].ValueList ;_dgdg :=len (_cecb );switch len (_cddbb ){case 1:_bcff :=[]Result {};for _ ,_gabec :=range _cecb {_bcff =append (_bcff ,MakeBoolResult (_gabec .ValueNumber !=0));};return MakeListResult (_bcff );case 2:_ebdce :=_cddbb [1];switch _ebdce .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_gdeaf :=[]Result {};for _ ,_afdgd :=range _cecb {var _edeec Result ;if _afdgd .ValueNumber ==0{_edeec =MakeBoolResult (false );}else {_edeec =_ebdce ;};_gdeaf =append (_gdeaf ,_edeec );};return MakeListResult (_gdeaf );case ResultTypeList :_aecgb :=_afbdg (_ebdce ,_dgdg );_caag :=[]Result {};for _fbgab ,_cfecg :=range _cecb {var _bffa Result ;if _cfecg .ValueNumber ==0{_bffa =MakeBoolResult (false );}else {_bffa =_aecgb [_fbgab ];};_caag =append (_caag ,_bffa );};return MakeListResult (_caag );case ResultTypeArray :_ebba :=_bbba (_ebdce ,len (_ebdce .ValueArray ),_dgdg );_gegfg :=[][]Result {};for _ ,_bddc :=range _ebba {_bgefd :=[]Result {};for _dedf ,_ggfgg :=range _cecb {var _dccag Result ;if _ggfgg .ValueNumber ==0{_dccag =MakeBoolResult (false );}else {_dccag =_bddc [_dedf ];};_bgefd =append (_bgefd ,_dccag );};_gegfg =append (_gegfg ,_bgefd );};return MakeArrayResult (_gegfg );};case 3:_cagaa :=_cddbb [1];_dbbee :=_cddbb [2];_dgaf :=_gdbb (_cagaa );_gcbbf :=_gdbb (_dbbee );if _dgaf &&_gcbbf {_gbag :=[]Result {};for _ ,_decb :=range _cecb {var _feea Result ;if _decb .ValueNumber ==0{_feea =_dbbee ;}else {_feea =_cagaa ;};_gbag =append (_gbag ,_feea );};return MakeListResult (_gbag );};if _cagaa .Type !=ResultTypeArray &&_dbbee .Type !=ResultTypeArray {_ebaaf :=_afbdg (_cagaa ,_dgdg );_bbacf :=_afbdg (_dbbee ,_dgdg );_feab :=[]Result {};for _cdca ,_dfe :=range _cecb {var _efde Result ;if _dfe .ValueNumber ==0{_efde =_bbacf [_cdca ];}else {_efde =_ebaaf [_cdca ];};_feab =append (_feab ,_efde );};return MakeListResult (_feab );};_faefe ,_ebce :=len (_cagaa .ValueArray ),len (_dbbee .ValueArray );_fagb ,_eefa :=_faefe ,_ebce ;if _ebce > _fagb {_fagb ,_eefa =_eefa ,_fagb ;};_gcgfa :=_bbba (_cagaa ,_fagb ,_dgdg );_afegg :=_bbba (_dbbee ,_fagb ,_dgdg );_ggbb :=[][]Result {};for _abbcf :=0;_abbcf < _fagb ;_abbcf ++{_ebff :=[]Result {};for _bdcg ,_cdge :=range _cecb {var _ffbb Result ;if _cdge .ValueNumber ==0{if _abbcf < _ebce {_ffbb =_afegg [_abbcf ][_bdcg ];}else {_ffbb =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _abbcf < _faefe {_ffbb =_gcgfa [_abbcf ][_bdcg ];}else {_ffbb =MakeErrorResultType (ErrorTypeNA ,"");};};_ebff =append (_ebff ,_ffbb );};_ggbb =append (_ggbb ,_ebff );};return MakeArrayResult (_ggbb );};return MakeErrorResult ("");};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_egadg (args ,_cebc ));};var _bgfdd =[...]int {0};

// String returns an empty string for EmptyExpr.
func (_dgd EmptyExpr )String ()string {return ""};

// Eval evaluates and returns an expression with prefix.
func (_badfb PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_ecfb :=_badfb ._bgac .Reference (ctx ,ev );switch _ecfb .Type {case ReferenceTypeSheet :if _cadc (_ecfb ,ctx ){return MakeErrorResultType (ErrorTypeName ,_f .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_ecfb .Value ));};_cafc :=ctx .Sheet (_ecfb .Value );return _badfb ._fbde .Eval (_cafc ,ev );default:return MakeErrorResult (_f .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ecfb .Type ));};};const _geab =57371;

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_ed .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_fabda :v };};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_gcbaa Expression ;_fdafdc ,_febae string ;};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_cabf PrefixHorizontalRange )Update (q *_b .UpdateQuery )Expression {return _cabf };func (_bdab *Lexer )emit (_ebea tokenType ,_ccebaf []byte ){if _dcdfb {_f .Println ("\u0065\u006d\u0069\u0074",_ebea ,_beeec (string (_ccebaf )));};_bdab ._cdfdc <-&node {_ebea ,string (_ccebaf )};};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_dcedf :=len (args );if _dcedf < 3||_dcedf > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbdb :=args [0].ValueNumber ;if _bbdb !=float64 (int (_bbdb )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggfdd :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eafc :=args [2].ValueNumber ;_acce :=0.0;if _dcedf >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_acce =args [3].ValueNumber ;};_cca :=0.0;if _dcedf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cca =args [4].ValueNumber ;if _cca !=0{_cca =1;};};_dfgc :=0.1;if _dcedf >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfgc =args [5].ValueNumber ;};_cgef :=100;_dagd :=0;_dcaae :=false ;_gadf :=1e-6;_adfg :=_dfgc ;for _dagd < _cgef &&!_dcaae {_egbb :=_ee .Pow (_adfg +1,_bbdb );_gegb :=_ee .Pow (_adfg +1,_bbdb -1);_bbfdg :=_adfg *_cca +1;_bggc :=_ggfdd *(_egbb -1);_egfd :=_acce +_egbb *_eafc +_bggc *_bbfdg /_adfg ;_faag :=_bbdb *_gegb *_eafc -_bggc *_bbfdg /_ee .Pow (_adfg ,2);_feggb :=(_bbdb *_ggfdd *_gegb *_bbfdg +_bggc *_cca )/_adfg ;_dfgd :=_egfd /(_faag +_feggb );if _ee .Abs (_dfgd )< _gadf {_dcaae =true ;};_dagd ++;_adfg -=_dfgd ;};return MakeNumberResult (_adfg );};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_fdda :=&defEval {};_fdda .evCache =_aee ();return _fdda };

// Eval evaluates and returns a number.
func (_bgee Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_bgee ._cgbdd )};const _gegfb =-1000;

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};func _ggd (_gad ,_acaa ,_fdbc float64 )float64 {return (_gad *3600+_acaa *60+_fdbc )/86400};func _gfbg (_aegag ,_aacf ,_aabg ,_babd float64 ,_fceg int )float64 {var _aeec float64 ;if _aegag ==0{_aeec =_babd +_aabg *_aacf ;}else {_abae :=_ee .Pow (1+_aegag ,_aacf );if _fceg ==1{_aeec =_babd *_abae +_aabg *(1+_aegag )*(_abae -1)/_aegag ;}else {_aeec =_babd *_abae +_aabg *(_abae -1)/_aegag ;};};return -_aeec ;};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _bbba (_gaacf Result ,_cfgfa ,_dbdbc int )[][]Result {_fecgc :=[][]Result {};switch _gaacf .Type {case ResultTypeArray :for _fefdc ,_gagf :=range _gaacf .ValueArray {if _fefdc < _cfgfa {_fecgc =append (_fecgc ,_afbdg (MakeListResult (_gagf ),_dbdbc ));}else {_fecgc =append (_fecgc ,_afbdg (MakeErrorResultType (ErrorTypeNA ,""),_dbdbc ));};};case ResultTypeList :_fbef :=_afbdg (_gaacf ,_dbdbc );for _cbac :=0;_cbac < _cfgfa ;_cbac ++{_fecgc =append (_fecgc ,_fbef );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _ffgd :=0;_ffgd < _cfgfa ;_ffgd ++{_cead :=_afbdg (_gaacf ,_dbdbc );_fecgc =append (_fecgc ,_cead );};};return _fecgc ;};

// Eval evaluates and returns the result of an error expression.
func (_cbb Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_cbb ._cag )};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdba :=false ;for _ ,_bega :=range args {switch _bega .Type {case ResultTypeList ,ResultTypeArray :_fdec :=Or (_bega .ListValues ());if _fdec .Type ==ResultTypeError {return _fdec ;};if _fdec .ValueNumber !=0{_bdba =true ;};case ResultTypeNumber :if _bega .ValueNumber !=0{_bdba =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _bega ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_bdba );};func _fbec (_cbabd []Result ,_ddfba string )(*durationArgs ,Result ){_fcff :=len (_cbabd );if _fcff !=5&&_fcff !=6{return nil ,MakeErrorResult (_ddfba +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_baed ,_ggde ,_bffc :=_caed (_cbabd [0],_cbabd [1],_ddfba );if _bffc .Type ==ResultTypeError {return nil ,_bffc ;};_dcef :=_cbabd [2];if _dcef .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddfba +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_eefd :=_dcef .ValueNumber ;if _eefd < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cgdf :=_cbabd [3];if _cgdf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddfba +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_dgb :=_cgdf .ValueNumber ;if _dgb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_bca :=_cbabd [4];if _bca .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddfba +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fgba :=float64 (int (_bca .ValueNumber ));if !_edc (_fgba ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_decf :=0;if _fcff ==6&&_cbabd [5].Type !=ResultTypeEmpty {_bfgf :=_cbabd [5];if _bfgf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ddfba +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_decf =int (_bfgf .ValueNumber );if !_afce (_decf ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_ddfba );};};return &durationArgs {_baed ,_ggde ,_eefd ,_dgb ,_fgba ,_decf },_aec ;};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_ecbde string };

// Eval evaluates and returns the result of a function call.
func (_bgcb FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_fbeeg :=LookupFunction (_bgcb ._dffg );if _fbeeg !=nil {_ebcf :=make ([]Result ,len (_bgcb ._bbaga ));for _gdgg ,_cecc :=range _bgcb ._bbaga {_ebcf [_gdgg ]=_cecc .Eval (ctx ,ev );_ebcf [_gdgg ].Ref =_cecc .Reference (ctx ,ev );};if _ ,_acebbd :=_gbbbf [_bgcb ._dffg ];!_acebbd {if _deag ,_agec :=_cfga (_ebcf );_deag {return _agec ;};};return _fbeeg (_ebcf );};_cebd :=LookupFunctionComplex (_bgcb ._dffg );if _cebd !=nil {_facge :=make ([]Result ,len (_bgcb ._bbaga ));for _gcag ,_adef :=range _bgcb ._bbaga {_facge [_gcag ]=_adef .Eval (ctx ,ev );_facge [_gcag ].Ref =_adef .Reference (ctx ,ev );};if _ ,_fcgfb :=_gbbbf [_bgcb ._dffg ];!_fcgfb {if _gcad ,_ebdad :=_cfga (_facge );_gcad {return _ebdad ;};};return _cebd (ctx ,ev ,_facge );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_bgcb ._dffg );};const _fbc ="\u005e\u0028\u0028"+_gd +"\u007c"+_faa +"\u007c"+_fdbe +"\u007c"+_dbcd +"\u0029\u0020\u0029\u003f";