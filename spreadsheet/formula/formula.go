//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_eb "bytes";_aa "errors";_b "fmt";_da "github.com/unidoc/unioffice/common/logger";_dd "github.com/unidoc/unioffice/internal/mergesort";_be "github.com/unidoc/unioffice/internal/wildcard";_cg "github.com/unidoc/unioffice/spreadsheet/format";_ege "github.com/unidoc/unioffice/spreadsheet/reference";_ag "github.com/unidoc/unioffice/spreadsheet/update";_c "io";_eg "math";_ce "math/big";_ef "math/rand";_bc "regexp";_e "sort";_ae "strconv";_d "strings";_g "sync";_ge "time";_bf "unicode";);

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _efegb (args ,_cagbe )};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_ddg :=len (args );if _ddg !=4&&_ddg !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_deaa ,_afgg ,_gffb :=_ega (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _gffb .Type ==ResultTypeError {return _gffb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdcd :=args [2].ValueNumber ;if _gdcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bgad :=args [3].ValueNumber ;if _bgad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaebd :=0;if _ddg ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eaebd =int (args [4].ValueNumber );if !_ecgga (_eaebd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_bcaf ,_gffb :=_aedb (_deaa ,_afgg ,_eaebd );if _gffb .Type ==ResultTypeError {return _gffb ;};return MakeNumberResult (_gdcd /(1-_bgad *_bcaf ));};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_eegfd .Lock ();defer _eegfd .Unlock ();if _ ,_fafc :=_ggcac [name ];_fafc {_da .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_ggcac [name ]=fn ;};func _dcaa (_edgae ,_gafb float64 )float64 {_edgae =_eg .Trunc (_edgae );_gafb =_eg .Trunc (_gafb );if _edgae ==0&&_gafb ==0{return 0;};return _edgae *_gafb /_aefdd (_edgae ,_gafb );};func (_gabfb *Lexer )emit (_daeb tokenType ,_dccba []byte ){if _efbgd {_b .Println ("\u0065\u006d\u0069\u0074",_daeb ,_cgbb (string (_dccba )));};_gabfb ._bdff <-&node {_daeb ,string (_dccba )};};func (_bgba *plex )Lex (lval *yySymType )int {_ffbbe =true ;_gffbg :=<-_bgba ._efae ;if _gffbg !=nil {lval ._cgfa =_gffbg ;return int (lval ._cgfa ._bgfdc );};return 0;};func _acaa (_ddeg ,_acae float64 ,_ffac ,_ccf int )float64 {_ffaf :=_fdg (_ddeg );_bbca :=_fdg (_acae );_bafa :=_aebd (_ffaf ,_bbca ,_ffac ,_ccf );return _cge (_bafa ,_ffaf ,_ccf );};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_ace :=args [0];switch _ace .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_dcc :=_fdg (_ace .ValueNumber );return MakeNumberResult (float64 (_dcc .Month ()));case ResultTypeString :_eaac :=_d .ToLower (_ace .ValueString );if !_bcg (_eaac ){_ ,_ ,_ ,_ ,_facf ,_bda :=_bgeb (_eaac );if _bda .Type ==ResultTypeError {_bda .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _bda ;};if _facf {return MakeNumberResult (1);};};_ ,_ffb ,_ ,_ ,_deaf :=_feab (_eaac );if _deaf .Type ==ResultTypeError {return _deaf ;};return MakeNumberResult (float64 (_ffb ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgcb :=args [0].AsNumber ();_debc :=args [1].AsNumber ();if _bgcb .Type !=ResultTypeNumber ||_debc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _debc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_eg .Trunc (_bgcb .ValueNumber /_debc .ValueNumber ));};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};func _aaae (_feec ,_gef []float64 ,_ffbg float64 )float64 {_aecb :=_ffbg +1;_adea :=_feec [0];_cdda :=len (_feec );_eefg :=_gef [0];for _dabe :=1;_dabe < _cdda ;_dabe ++{_adea +=_feec [_dabe ]/_eg .Pow (_aecb ,(_gef [_dabe ]-_eefg )/365);};return _adea ;};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gfcaf :=args [0].Ref ;if _gfcaf .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_gbdee ,_cegg :=_ege .ParseCellReference (_gfcaf .Value );if _cegg !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_gfcaf .Value );};return MakeNumberResult (float64 (_gbdee .RowIdx ));};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _dbee (args ,false )};

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eddg ,_ggbe ,_agdb :=_ega (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _agdb .Type ==ResultTypeError {return _agdb ;};_ebba ,_agdb :=_adec (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _agdb .Type ==ResultTypeError {return _agdb ;};if _ebba >=_eddg {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_adfa :=args [3].ValueNumber ;if _adfa < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfgb :=args [4].ValueNumber ;if _bfgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_bgefa :=args [5].ValueNumber ;if _bgefa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_beed :=float64 (int (args [6].ValueNumber ));if !_dcfd (_beed ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_abcb :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_abcb =int (args [7].ValueNumber );if !_ecgga (_abcb ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_efga ,_agdb :=_aedb (_ebba ,_ggbe ,_abcb );if _agdb .Type ==ResultTypeError {return _agdb ;};_efga *=_beed ;_acce ,_agdb :=_aedb (_eddg ,_ggbe ,_abcb );if _agdb .Type ==ResultTypeError {return _agdb ;};_acce *=_beed ;_fgbc ,_agdb :=_aedb (_ebba ,_eddg ,_abcb );if _agdb .Type ==ResultTypeError {return _agdb ;};_fgbc *=_beed ;_caadb :=_bgefa +_efga *100*_adfa /_beed ;_caadb /=_bfgb +_fgbc *100*_adfa /_beed ;_caadb --;_caadb *=_beed /_acce ;return MakeNumberResult (_caadb );};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cgegb :=args [0];if _cgegb .Type ==ResultTypeList {_agccc :=[][]Result {};for _ ,_badf :=range _cgegb .ValueList {_agccc =append (_agccc ,[]Result {_badf });};return MakeArrayResult (_agccc );};_acbb :=make ([][]Result ,len (_cgegb .ValueArray [0]));for _ ,_aafe :=range _cgegb .ValueArray {for _aaga ,_feff :=range _aafe {_acbb [_aaga ]=append (_acbb [_aaga ],_feff );};};return MakeArrayResult (_acbb );};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_daf *defEval )LastEvalIsRef ()bool {return _daf ._bbd };func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cebdd :=args [0].AsNumber ();if _cebdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dagdb :=float64 (0);if len (args )> 1{_acga :=args [1].AsNumber ();if _acga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dagdb =_acga .ValueNumber ;};_gddag :=_cebdd .ValueNumber ;_gdfcb :=1.0;if _dagdb >=0{_gdfcb =_eg .Pow (1/10.0,_dagdb );}else {return MakeNumberResult (0);};_gddag ,_gefb :=_eg .Modf (_gddag /_gdfcb );_bcadf :=0.99999;if _gefb > _bcadf {_gddag ++;}else if _gefb < -_bcadf {_gddag --;};_ =_gefb ;return MakeNumberResult (_gddag *_gdfcb );};

// Eval evaluates and returns a number.
func (_degfc Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_degfc ._debfb )};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_afb :=len (args );if _afb !=4&&_afb !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eefe ,_ccbc ,_dcde :=_ega (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _dcde .Type ==ResultTypeError {return _dcde ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbdf :=args [2].ValueNumber ;if _dbdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbbff :=args [3].ValueNumber ;if _gbbff <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_aegge :=0;if _afb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aegge =int (args [4].ValueNumber );if !_ecgga (_aegge ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_eagf ,_dcde :=_aedb (_eefe ,_ccbc ,_aegge );if _dcde .Type ==ResultTypeError {return _dcde ;};return MakeNumberResult ((_gbbff /_dbdf -1)/_eagf );};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bcdg :=args [0].AsNumber ();if _bcdg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bbde :=float64 (1);_bdaf :=args [1].AsNumber ();if _bdaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_bbde =_bdaf .ValueNumber ;if _bbde < 0&&_bcdg .ValueNumber > 0||_bbde > 0&&_bcdg .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_dacb :=_bcdg .ValueNumber ;_dacb ,_dcaaa :=_eg .Modf (_dacb /_bbde );if _eg .Trunc (_dcaaa +0.5)> 0{_dacb ++;};return MakeNumberResult (_dacb *_bbde );};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_gbagg PrefixHorizontalRange )Update (q *_ag .UpdateQuery )Expression {return _gbagg };

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_bdff chan *node ;_caade _g .Mutex ;_gcgb []chan *node ;_ddbe []*node ;};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_aff [][]Expression };type yyLexer interface{Lex (_abfac *yySymType )int ;Error (_aeegd string );};var _bdefe =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_gacdg :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_gacdg =int (args [1].ValueNumber );if _gacdg < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _gacdg ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_ddbg :=args [0].Value ();if _gacdg > len (_ddbg ){return MakeStringResult (_ddbg );};return MakeStringResult (_ddbg [0:_gacdg ]);};var _gd =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_aabb :=args [0];if _aabb .Type !=ResultTypeArray &&_aabb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_acffg :=_aabb .ValueArray ;if len (_acffg )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_acffg [0])));};func _bedg (_ebg []Result ,_dddca string )(*durationArgs ,Result ){_cga :=len (_ebg );if _cga !=5&&_cga !=6{return nil ,MakeErrorResult (_dddca +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fcfa ,_dgfa ,_fbda :=_ega (_ebg [0],_ebg [1],_dddca );if _fbda .Type ==ResultTypeError {return nil ,_fbda ;};_gffc :=_ebg [2];if _gffc .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dddca +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bcc :=_gffc .ValueNumber ;if _bcc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fecf :=_ebg [3];if _fecf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dddca +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_aefe :=_fecf .ValueNumber ;if _aefe < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_deec :=_ebg [4];if _deec .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dddca +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aadg :=float64 (int (_deec .ValueNumber ));if !_dcfd (_aadg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_adgg :=0;if _cga ==6&&_ebg [5].Type !=ResultTypeEmpty {_dgd :=_ebg [5];if _dgd .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dddca +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_adgg =int (_dgd .ValueNumber );if !_ecgga (_adgg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_dddca );};};return &durationArgs {_fcfa ,_dgfa ,_bcc ,_aefe ,_aadg ,_adgg },_fea ;};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbfc :=args [0].AsNumber ();_ebdb :=args [1].AsNumber ();if _cdbfc .Type !=ResultTypeNumber ||_ebdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ddge :=_eg .Trunc (_cdbfc .ValueNumber );_feee :=_eg .Trunc (_ebdb .ValueNumber );if _ddge < _feee {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _ddge ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_ddge +_feee -1);args [1]=MakeNumberResult (_ddge -1);return Combin (args );};const _ggb ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _dagg (_abcc ,_aefbg float64 ,_bafb ,_cgce int )float64 {_cfc :=_fdg (_abcc );_fba :=_fdg (_aefbg );_gdf :=_bba (_cfc ,_fba ,_bafb );return _cge (_cfc ,_gdf ,_cgce );};func _bcbc (_ceab string ,_cgcbc func (_dffg float64 )float64 )Function {return func (_ggccb []Result )Result {if len (_ggccb )!=1{return MakeErrorResult (_ceab +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_aceeb :=_ggccb [0].AsNumber ();switch _aceeb .Type {case ResultTypeNumber :_bggb :=_cgcbc (_aceeb .ValueNumber );if _eg .IsNaN (_bggb ){return MakeErrorResult (_ceab +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _eg .IsInf (_bggb ,0){return MakeErrorResult (_ceab +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_bggb );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_ceab +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _aceeb ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ceab ,_aceeb .Type ));};};};func _cdb (_abd BinOpType ,_de ,_ed []Result )Result {_fa :=[]Result {};for _dee :=range _de {_gg :=_de [_dee ].AsNumber ();_eae :=_ed [_dee ].AsNumber ();if _gg .Type !=ResultTypeNumber ||_eae .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _abd {case BinOpTypePlus :_fa =append (_fa ,MakeNumberResult (_gg .ValueNumber +_eae .ValueNumber ));case BinOpTypeMinus :_fa =append (_fa ,MakeNumberResult (_gg .ValueNumber -_eae .ValueNumber ));case BinOpTypeMult :_fa =append (_fa ,MakeNumberResult (_gg .ValueNumber *_eae .ValueNumber ));case BinOpTypeDiv :if _eae .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_fa =append (_fa ,MakeNumberResult (_gg .ValueNumber /_eae .ValueNumber ));case BinOpTypeExp :_fa =append (_fa ,MakeNumberResult (_eg .Pow (_gg .ValueNumber ,_eae .ValueNumber )));case BinOpTypeLT :_fa =append (_fa ,MakeBoolResult (_gg .ValueNumber < _eae .ValueNumber ));case BinOpTypeGT :_fa =append (_fa ,MakeBoolResult (_gg .ValueNumber > _eae .ValueNumber ));case BinOpTypeEQ :_fa =append (_fa ,MakeBoolResult (_gg .ValueNumber ==_eae .ValueNumber ));case BinOpTypeLEQ :_fa =append (_fa ,MakeBoolResult (_gg .ValueNumber <=_eae .ValueNumber ));case BinOpTypeGEQ :_fa =append (_fa ,MakeBoolResult (_gg .ValueNumber >=_eae .ValueNumber ));case BinOpTypeNE :_fa =append (_fa ,MakeBoolResult (_gg .ValueNumber !=_eae .ValueNumber ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_abd ));};};return MakeListResult (_fa );};func _aefdd (_aefgg ,_fcdcb float64 )float64 {_aefgg =_eg .Trunc (_aefgg );_fcdcb =_eg .Trunc (_fcdcb );if _aefgg ==0{return _fcdcb ;};if _fcdcb ==0{return _aefgg ;};for _aefgg !=_fcdcb {if _aefgg > _fcdcb {_aefgg =_aefgg -_fcdcb ;}else {_fcdcb =_fcdcb -_aefgg ;};};return _aefgg ;};type defEval struct{evCache ;_bbd bool ;};func _gfed (_dgde ,_eagb []float64 ,_cdg float64 )Result {_bggf :=false ;_gecf :=false ;for _fcgc :=0;_fcgc < len (_dgde );_fcgc ++{if _dgde [_fcgc ]> 0{_bggf =true ;};if _dgde [_fcgc ]< 0{_gecf =true ;};};if !_bggf ||!_gecf {return MakeErrorResultType (ErrorTypeNum ,"");};_dbbg :=_cdg ;_cdce :=1e-10;_gega :=0;_aagd :=50;_gbga :=false ;for {_cff :=_aaae (_dgde ,_eagb ,_dbbg );_baag :=_dbbg -_cff /_ddaa (_dgde ,_eagb ,_dbbg );_eaf :=_eg .Abs (_baag -_dbbg );_dbbg =_baag ;_gega ++;if _eaf <=_cdce ||_eg .Abs (_cff )<=_cdce {break ;};if _gega > _aagd {_gbga =true ;break ;};};if _gbga ||_eg .IsNaN (_dbbg )||_eg .IsInf (_dbbg ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_dbbg );};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdbg :=int (args [0].ValueNumber );return MakeBoolResult (_bdbg ==_bdbg /2*2);};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_bdfccf Result )AsNumber ()Result {if _bdfccf .Type ==ResultTypeString {_dfeee ,_bedad :=_ae .ParseFloat (_bdfccf .ValueString ,64);if _bedad ==nil {return MakeNumberResult (_dfeee );};};if _bdfccf .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _bdfccf ;};func _dcda (_ebag Result ,_fabg ,_aacd int )[][]Result {_beg :=[][]Result {};switch _ebag .Type {case ResultTypeArray :for _bbeb ,_fggg :=range _ebag .ValueArray {if _bbeb < _fabg {_beg =append (_beg ,_cabce (MakeListResult (_fggg ),_aacd ));}else {_beg =append (_beg ,_cabce (MakeErrorResultType (ErrorTypeNA ,""),_aacd ));};};case ResultTypeList :_bdgg :=_cabce (_ebag ,_aacd );for _ccga :=0;_ccga < _fabg ;_ccga ++{_beg =append (_beg ,_bdgg );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _gccea :=0;_gccea < _fabg ;_gccea ++{_dcbff :=_cabce (_ebag ,_aacd );_beg =append (_beg ,_dcbff );};};return _beg ;};

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_bcae :=_ffbca (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _bcae .Type !=ResultTypeEmpty {return _bcae ;};_adabb :=_bbcbf (args [1:]);_acbba :=0.0;_dbcca :=_agfeg (args [0]);for _ ,_ggcadf :=range _adabb {_acbba +=_dbcca [_ggcadf ._gddd ][_ggcadf ._ddaad ].ValueNumber ;};return MakeNumberResult (float64 (_acbba ));};

// Eval evaluates and returns the result of a Negate expression.
func (_aeade Negate )Eval (ctx Context ,ev Evaluator )Result {_eadd :=_aeade ._aafc .Eval (ctx ,ev );if _eadd .Type ==ResultTypeNumber {return MakeNumberResult (-_eadd .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_daff :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geec :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgbc :=args [2].ValueNumber ;if _bgbc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aga :=args [3].ValueNumber ;return MakeNumberResult (_aga *_daff *(_geec /_bgbc -1));};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_afagb :=false ;for _ ,_ccgg :=range args {switch _ccgg .Type {case ResultTypeList ,ResultTypeArray :_egdc :=Or (_ccgg .ListValues ());if _egdc .Type ==ResultTypeError {return _egdc ;};if _egdc .ValueNumber !=0{_afagb =true ;};case ResultTypeNumber :if _ccgg .ValueNumber !=0{_afagb =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _ccgg ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_afagb );};var _bfe =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_ffeb :=args [0];if _ffeb .Type !=ResultTypeArray &&_ffeb .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cgfe :=_cfgd (args [1]);_gaeb :=0;for _ ,_cbdg :=range _agfeg (_ffeb ){for _ ,_agae :=range _cbdg {if _efba (_agae ,_cgfe ){_gaeb ++;};};};return MakeNumberResult (float64 (_gaeb ));};const _gbg ="\u0028\u0020\u0028"+_cbg +"\u007c"+_gec +"\u007c"+_feg +"\u007c"+_dgccg +"\u0029\u0029\u003f\u0024";var _bed float64 =25569.0;type cmpResult int8 ;

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_degf :=args [0].AsNumber ();if _degf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcfec :=float64 (1);if _degf .ValueNumber < 0{_fcfec =-1;};if len (args )> 1{_dfaa :=args [1].AsNumber ();if _dfaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_fcfec =_eg .Abs (_dfaa .ValueNumber );};if len (args )==1{return MakeNumberResult (_eg .Floor (_degf .ValueNumber ));};_ffbc :=_degf .ValueNumber ;_ffbc ,_dgecb :=_eg .Modf (_ffbc /_fcfec );if _dgecb !=0{if _degf .ValueNumber < 0{_ffbc --;};};return MakeNumberResult (_ffbc *_fcfec );};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_caaf Result )ListValues ()[]Result {if _caaf .Type ==ResultTypeArray {_gegabe :=[]Result {};for _ ,_aaca :=range _caaf .ValueArray {for _ ,_efceg :=range _aaca {_gegabe =append (_gegabe ,_efceg );};};return _gegabe ;};if _caaf .Type ==ResultTypeList {return _caaf .ValueList ;};return nil ;};

// String returns a string representation of FunctionCall expression.
func (_cdec FunctionCall )String ()string {_ddcag :=_eb .Buffer {};_ddcag .WriteString (_cdec ._aecc );_ddcag .WriteString ("\u0028");_egad :=len (_cdec ._aaec )-1;for _aadd ,_dbec :=range _cdec ._aaec {_ddcag .WriteString (_dbec .String ());if _aadd !=_egad {_ddcag .WriteString ("\u002c");};};_ddcag .WriteString ("\u0029");return _ddcag .String ();};

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_ecab :=len (args );if _ecab < 4||_ecab > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ggba :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfff :=args [1].ValueNumber ;if _cfff <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbc :=args [2].ValueNumber ;if _gfbc < _cfff {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fabe :=args [3].ValueNumber ;_cagb :=0.0;if _ecab >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cagb =args [4].ValueNumber ;};_bfdf :=0;if _ecab ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bfdf =int (args [5].ValueNumber );if _bfdf !=0{_bfdf =1;};};return MakeNumberResult (_bcab (_ggba ,_gfbc ,_fabe ,_cagb ,_bfdf )-_feae (_ggba ,_cfff ,_gfbc ,_fabe ,_cagb ,_bfdf ));};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_dcab :=args [0].AsNumber ();_dfff :=args [1].AsNumber ();if _dcab .Type !=ResultTypeNumber ||_dfff .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _dfff .ValueNumber < _dcab .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_fccf :=int64 (_dcab .ValueNumber );_gbccb :=int64 (_dfff .ValueNumber );return MakeNumberResult (float64 (_gbfd .Int63n (_gbccb -_fccf +1)+_fccf ));};

// IsDBCS returns false for the invalid reference context.
func (_edfd *ivr )IsDBCS ()bool {return false };var _ccdae =[...]int {-1,1,1,-1,-2,0};

// Eval evaluates and returns the result of a function call.
func (_ddafc FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_cfbg :=LookupFunction (_ddafc ._aecc );if _cfbg !=nil {_bdeed :=make ([]Result ,len (_ddafc ._aaec ));for _dgeccg ,_cafb :=range _ddafc ._aaec {_bdeed [_dgeccg ]=_cafb .Eval (ctx ,ev );_bdeed [_dgeccg ].Ref =_cafb .Reference (ctx ,ev );};if _ ,_fgff :=_fgda [_ddafc ._aecc ];!_fgff {if _bcfad ,_badbg :=_eedd (_bdeed );_bcfad {return _badbg ;};};return _cfbg (_bdeed );};_fggac :=LookupFunctionComplex (_ddafc ._aecc );if _fggac !=nil {_eeabg :=make ([]Result ,len (_ddafc ._aaec ));for _fbbce ,_bbbdg :=range _ddafc ._aaec {_eeabg [_fbbce ]=_bbbdg .Eval (ctx ,ev );_eeabg [_fbbce ].Ref =_bbbdg .Reference (ctx ,ev );};if _ ,_afaag :=_fgda [_ddafc ._aecc ];!_afaag {if _dfgb ,_bdef :=_eedd (_eeabg );_dfgb {return _bdef ;};};return _fggac (ctx ,ev ,_eeabg );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_ddafc ._aecc );};

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aged :=args [0].Type ;for _ ,_ffefc :=range args {if _ffefc .Type !=_aged {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _aged {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_gbdb :=len (args [0].ListValues ());_caee :=make ([]float64 ,_gbdb );for _eddff :=range _caee {_caee [_eddff ]=1.0;};for _ ,_dcfde :=range args {if len (_dcfde .ListValues ())!=_gbdb {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _facg ,_eacfb :=range _dcfde .ListValues (){_eacfb =_eacfb .AsNumber ();if _eacfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_caee [_facg ]=_caee [_facg ]*_eacfb .ValueNumber ;};};_dbga :=0.0;for _ ,_bgcd :=range _caee {_dbga +=_bgcd ;};return MakeNumberResult (_dbga );};return MakeNumberResult (1.0);};func _ebadc (_bbfg ,_degdgf Reference )string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_bbfg .Value ,_degdgf .Value );};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};const _dbccbe =57348;func init (){_cbgf ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_ggcad :=len (args );if _ggcad < 3||_ggcad > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fedb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fggcd :=args [1].ValueNumber ;if _fggcd !=float64 (int (_fggcd )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afcg :=args [2].ValueNumber ;_ecdc :=0.0;if _ggcad >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecdc =args [3].ValueNumber ;};_ebgb :=0.0;if _ggcad ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebgb =args [4].ValueNumber ;if _ebgb !=0{_ebgb =1;};};if _fedb ==0{return MakeNumberResult (-_afcg *_fggcd -_ecdc );}else {return MakeNumberResult ((((1-_eg .Pow (1+_fedb ,_fggcd ))/_fedb )*_afcg *(1+_fedb *_ebgb )-_ecdc )/_eg .Pow (1+_fedb ,_fggcd ));};};const _afgb =2;

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_fgd :=len (args );if _fgd < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_daag :=args [0].ValueNumber ;if _daag ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bef :=[]float64 {};for _ ,_eacba :=range args [1:]{switch _eacba .Type {case ResultTypeNumber :_bef =append (_bef ,_eacba .ValueNumber );case ResultTypeArray ,ResultTypeList :_dbag :=_agfeg (_eacba );for _ ,_cbff :=range _dbag {for _ ,_fddf :=range _cbff {if _fddf .Type ==ResultTypeNumber &&!_fddf .IsBoolean {_bef =append (_bef ,_fddf .ValueNumber );};};};};};_fbbe :=0.0;for _aeac ,_dadg :=range _bef {_fbbe +=_dadg /_eg .Pow (1+_daag ,float64 (_aeac )+1);};return MakeNumberResult (_fbbe );};func (_cccc *defEval )checkLastEvalIsRef (_fb Context ,_ffa Expression ){switch _ffa .(type ){case FunctionCall :switch _ffa .(FunctionCall )._aecc {case "\u0049\u0053\u0052E\u0046":for _ ,_aaa :=range _ffa .(FunctionCall )._aaec {switch _aaa .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_gda :=_aaa .Eval (_fb ,_cccc );_cccc ._bbd =!(_gda .Type ==ResultTypeError &&_gda .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_cccc ._bbd =false ;};};};};};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_efag :=args [0];if _efag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cgdf :=int (_efag .ValueNumber );if _cgdf < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_cgdf {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_cgdf ];};var _adba =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_gbae :=len (args );if _gbae < 4||_gbae > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gde :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gabc :=args [1].ValueNumber ;if _gabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgcf :=args [2].ValueNumber ;if _fgcf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ceea :=args [3].ValueNumber ;_cead :=0.0;if _gbae > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cead =args [4].ValueNumber ;};_egcc :=0;if _gbae ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_egcc =int (args [5].ValueNumber );if _egcc !=0{_egcc =1;};};return MakeNumberResult (_feae (_gde ,_gabc ,_fgcf ,_ceea ,_cead ,_egcc ));};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fabc :=_ge .Now ();_ ,_gdbb :=_fabc .Zone ();_fdb :=_dcdg (_fdf ,_fabc .Unix ()+int64 (_gdbb ))+1;return MakeNumberResult (_fdb );};

// Error is an error expression.
type Error struct{_ggd string };

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_bdceg :=args [0].AsNumber ();if _bdceg .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _bdceg .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_ffef (_bdceg .ValueNumber ));};func _agdd (_gdad ,_bdec float64 )bool {return _eg .Abs (_gdad -_bdec )< 1.0e-6};const _fcgfc =57373;

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_dbdfe :=args [0].AsNumber ();if _dbdfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cdeec :=10.0;if len (args )> 1{_gecfa :=args [1].AsNumber ();if _gecfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_cdeec =args [1].ValueNumber ;};if _dbdfe .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _cdeec ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_eg .Log (_dbdfe .ValueNumber )/_eg .Log (_cdeec ));};func _aedb (_bagd ,_ede float64 ,_bbg int )(float64 ,Result ){_gff ,_dda :=_fdg (_bagd ),_fdg (_ede );_bcd :=_gff .Unix ();_gcdc :=_dda .Unix ();if _bcd ==_gcdc {return 0,_fea ;};_bbbd ,_fff ,_dcdc :=_gff .Date ();_bfa ,_adg ,_aca :=_dda .Date ();_cbcc ,_fbgd :=int (_fff ),int (_adg );var _eccd ,_cedg float64 ;switch _bbg {case 0:if _dcdc ==31{_dcdc --;};if _dcdc ==30&&_aca ==31{_aca --;}else if _fcca :=_fde (_bbbd );_cbcc ==2&&((_fcca &&_dcdc ==29)||(!_fcca &&_dcdc ==28)){_dcdc =30;if _ecce :=_fde (_bfa );_fbgd ==2&&((_ecce &&_aca ==29)||(!_ecce &&_aca ==28)){_aca =30;};};_eccd =float64 ((_bfa -_bbbd )*360+(_fbgd -_cbcc )*30+(_aca -_dcdc ));_cedg =360;case 1:_eccd =_ede -_bagd ;_eged :=_bbbd !=_bfa ;if _eged &&(_bfa !=_bbbd +1||_cbcc < _fbgd ||(_cbcc ==_fbgd &&_dcdc < _aca )){_bcfc :=0;for _afdcc :=_bbbd ;_afdcc <=_bfa ;_afdcc ++{_bcfc +=_cgd (_afdcc ,1);};_cedg =float64 (_bcfc )/float64 (_bfa -_bbbd +1);}else {if !_eged &&_fde (_bbbd ){_cedg =366;}else {if _eged &&((_fde (_bbbd )&&(_cbcc < 2||(_cbcc ==2&&_dcdc <=29)))||(_fde (_bfa )&&(_fbgd > 2||(_fbgd ==2&&_aca ==29)))){_cedg =366;}else {_cedg =365;};};};case 2:_eccd =_ede -_bagd ;_cedg =360;case 3:_eccd =_ede -_bagd ;_cedg =365;case 4:if _dcdc ==31{_dcdc --;};if _aca ==31{_aca --;};_eccd =float64 ((_bfa -_bbbd )*360+(_fbgd -_cbcc )*30+(_aca -_dcdc ));_cedg =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _eccd /_cedg ,_fea ;};const _effce int =30;const _dcded =57347;const _acgd =57353;func _debfa (_ffag []Result )Result {_eeff :=_ffag [0].ValueList ;_dddbg :=len (_eeff );switch len (_ffag ){case 1:_gdccd :=[]Result {};for _ ,_dgecc :=range _eeff {_gdccd =append (_gdccd ,MakeBoolResult (_dgecc .ValueNumber !=0));};return MakeListResult (_gdccd );case 2:_ddea :=_ffag [1];switch _ddea .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_befe :=[]Result {};for _ ,_dbgdf :=range _eeff {var _eagdb Result ;if _dbgdf .ValueNumber ==0{_eagdb =MakeBoolResult (false );}else {_eagdb =_ddea ;};_befe =append (_befe ,_eagdb );};return MakeListResult (_befe );case ResultTypeList :_effc :=_cabce (_ddea ,_dddbg );_ggcce :=[]Result {};for _ebae ,_bggfc :=range _eeff {var _dagd Result ;if _bggfc .ValueNumber ==0{_dagd =MakeBoolResult (false );}else {_dagd =_effc [_ebae ];};_ggcce =append (_ggcce ,_dagd );};return MakeListResult (_ggcce );case ResultTypeArray :_cbca :=_dcda (_ddea ,len (_ddea .ValueArray ),_dddbg );_gacda :=[][]Result {};for _ ,_dcdda :=range _cbca {_agfdd :=[]Result {};for _febbg ,_aagf :=range _eeff {var _egecg Result ;if _aagf .ValueNumber ==0{_egecg =MakeBoolResult (false );}else {_egecg =_dcdda [_febbg ];};_agfdd =append (_agfdd ,_egecg );};_gacda =append (_gacda ,_agfdd );};return MakeArrayResult (_gacda );};case 3:_effd :=_ffag [1];_egff :=_ffag [2];_gcac :=_dgafc (_effd );_fdbg :=_dgafc (_egff );if _gcac &&_fdbg {_fagb :=[]Result {};for _ ,_cggf :=range _eeff {var _bfcb Result ;if _cggf .ValueNumber ==0{_bfcb =_egff ;}else {_bfcb =_effd ;};_fagb =append (_fagb ,_bfcb );};return MakeListResult (_fagb );};if _effd .Type !=ResultTypeArray &&_egff .Type !=ResultTypeArray {_cdgf :=_cabce (_effd ,_dddbg );_gfdf :=_cabce (_egff ,_dddbg );_gabcc :=[]Result {};for _gfea ,_afbe :=range _eeff {var _bedeb Result ;if _afbe .ValueNumber ==0{_bedeb =_gfdf [_gfea ];}else {_bedeb =_cdgf [_gfea ];};_gabcc =append (_gabcc ,_bedeb );};return MakeListResult (_gabcc );};_ccfb ,_bcdbb :=len (_effd .ValueArray ),len (_egff .ValueArray );_gbceg ,_gebf :=_ccfb ,_bcdbb ;if _bcdbb > _gbceg {_gbceg ,_gebf =_gebf ,_gbceg ;};_aaaa :=_dcda (_effd ,_gbceg ,_dddbg );_badcg :=_dcda (_egff ,_gbceg ,_dddbg );_ddbcg :=[][]Result {};for _dfda :=0;_dfda < _gbceg ;_dfda ++{_fcfc :=[]Result {};for _abde ,_bfda :=range _eeff {var _fdcf Result ;if _bfda .ValueNumber ==0{if _dfda < _bcdbb {_fdcf =_badcg [_dfda ][_abde ];}else {_fdcf =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _dfda < _ccfb {_fdcf =_aaaa [_dfda ][_abde ];}else {_fdcf =MakeErrorResultType (ErrorTypeNA ,"");};};_fcfc =append (_fcfc ,_fdcf );};_ddbcg =append (_ddbcg ,_fcfc );};return MakeArrayResult (_ddbcg );};return MakeErrorResult ("");};var _adgc string =string ([]byte {92});

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ebga :=args [0];if _ebga .Type ==ResultTypeError ||_ebga .Type ==ResultTypeString {return _ebga ;};return _fea ;};const _fbdf =57352;func _eef (_fce int )int {if _fce < 1900{if _fce < 30{_fce +=2000;}else {_fce +=1900;};};return _fce ;};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dabg :=ctx .GetEpoch ();_adgdb ,_fcag :=_cffd (args [0].Value (),_dabg );if _fcag !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_ddfac :=_adgdb .Year ();return MakeBoolResult (_fde (_ddfac ));};

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_dfdb ,_cba :=_dff (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _cba .Type ==ResultTypeError {return _cba ;};_dgdd :=_dfdb ._fceg ;_cceg :=_dfdb ._fbf ;_gaea :=_dfdb ._daac ;_ddc :=_dfdb ._cbec ;_bcbd :=_dfdb ._adgde ;_fbc :=_dfdb ._fded ;_gbca :=_bcab (_dgdd ,_cceg ,_gaea ,0,_fbc );_ecgc :=0.0;if _ddc ==1{if _fbc ==0{_ecgc =_gbca +_gaea *_dgdd ;}else {_ecgc =_gbca ;};_ddc ++;};for _abcf :=_ddc ;_abcf <=_bcbd ;_abcf ++{if _fbc ==1{_ecgc +=_gbca -(_eaef (_dgdd ,_abcf -2,_gbca ,_gaea ,1)-_gbca )*_dgdd ;}else {_ecgc +=_gbca -_eaef (_dgdd ,_abcf -1,_gbca ,_gaea ,0)*_dgdd ;};};return MakeNumberResult (_ecgc );};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ee ,_ca Expression ;_dc BinOpType ;};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bfae :=args [0];_aacf :=args [1];if _aacf .Type !=ResultTypeArray &&_aacf .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_degdg :=_cdafb (_aacf );_cfda :=-1;for _bgae ,_gabf :=range _degdg {if _dgfb (_bfae ,_gabf ,false ,false )==_deda {_cfda =_bgae ;};};if _cfda ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_agad :=_degdg ;if len (args )==3{_agad =_cdafb (args [2]);};if _cfda < 0||_cfda >=len (_agad ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _agad [_cfda ];};type evCache struct{_fbe map[string ]Result ;_ebf *_g .Mutex ;};func _dg (_cda BinOpType ,_ea ,_cgc [][]Result )Result {_ab :=[][]Result {};for _gb :=range _ea {_bg :=_cdb (_cda ,_ea [_gb ],_cgc [_gb ]);if _bg .Type ==ResultTypeError {return _bg ;};_ab =append (_ab ,_bg .ValueList );};return MakeArrayResult (_ab );};func _adbe (_aac ,_caebb ,_dfcd ,_aabg ,_egbf float64 ,_gadbe int )Result {_cabc ,_efaa :=_aedb (_aac ,_caebb ,_gadbe );if _efaa .Type ==ResultTypeError {return _efaa ;};_face ,_cdfe :=_egdb (_aac ,_caebb ,int (_egbf ),_gadbe );if _cdfe .Type ==ResultTypeError {return _cdfe ;};_efea :=0.0;_fdbb :=0.0;_dfcd *=100/_egbf ;_aabg /=_egbf ;_aabg ++;_bbdf :=_cabc *_egbf -_face ;for _bcgb :=1.0;_bcgb < _face ;_bcgb ++{_bcgda :=_bcgb +_bbdf ;_abaf :=_dfcd /_eg .Pow (_aabg ,_bcgda );_fdbb +=_abaf ;_efea +=_bcgda *_abaf ;};_cde :=(_dfcd +100)/_eg .Pow (_aabg ,_face +_bbdf );_fdbb +=_cde ;_efea +=(_face +_bbdf )*_cde ;_efea /=_fdbb ;_efea /=_egbf ;return MakeNumberResult (_efea );};const _egbc =57360;

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _faae (args ,false )};

// Eval evaluates and returns the result of an error expression.
func (_age Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_age ._ggd )};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};func _aabdb (_cgae Result ,_fefec *criteriaParsed )bool {_dbfe :=_d .ToLower (_cgae .ValueString );_gddee :=_fefec ._adfc ._aeeb ;_ffefe :=_fefec ._adfc ._aede ;if _gddee ==_dfdge {return _dbfe ==_ffefe ||_be .Match (_ffefe ,_dbfe );};if _cgae .Type !=ResultTypeEmpty {if _dbfe ==_fefec ._bceae ||_be .Match (_fefec ._bceae ,_dbfe ){return true ;};if _ ,_aggfg :=_ae .ParseFloat (_ffefe ,64);_aggfg ==nil {return false ;};switch _gddee {case _beedf :return _dbfe <=_ffefe ;case _efagc :return _dbfe >=_ffefe ;case _gecc :return _dbfe < _ffefe ;case _cbddb :return _dbfe > _ffefe ;};};return false ;};var _eegfd _g .Mutex ;const _dgbgg =57356;

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddag :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdge :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcege :=args [2].ValueNumber ;if _bcege <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdfgf :=args [3].ValueNumber ;if _cdfgf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cdfgf > _bcege {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_deee :=(_ddag -_gdge )*(_bcege -_cdfgf +1)*2;_bdaa :=_bcege *(_bcege +1);return MakeNumberResult (_deee /_bdaa );};const (_deda cmpResult =0;_ecgf cmpResult =-1;_cade cmpResult =1;_dca cmpResult =2;);

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_ebaff :=args [0];if _ebaff .Type !=ResultTypeArray &&_ebaff .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fffb :=_ebaff .ValueArray ;if len (_fffb )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_fffb )));};func _ccgf (_eagbd int )string {if _eagbd >=1&&_eagbd -1< len (_bdefe ){if _bdefe [_eagbd -1]!=""{return _bdefe [_eagbd -1];};};return _b .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_eagbd );};type Reference struct{Type ReferenceType ;Value string ;};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_dbf ConstArrayExpr )Update (q *_ag .UpdateQuery )Expression {return _dbf };const _fbfbb =57372;func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdgg :=args [0].AsNumber ();if _gdgg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _gdgg .ValueNumber < 0{return MakeNumberResult (-1);}else if _gdgg .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Eval evaluates the binary expression using the context given.
func (_afd BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_ec :=_afd ._ee .Eval (ctx ,ev );if _ec .Type ==ResultTypeError {return _ec ;};_aed :=_afd ._ca .Eval (ctx ,ev );if _aed .Type ==ResultTypeError {return _aed ;};if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeArray {if !_bb (_ec .ValueArray ,_aed .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _dg (_afd ._dc ,_ec .ValueArray ,_aed .ValueArray );}else if _ec .Type ==ResultTypeList {if len (_ec .ValueList )!=len (_aed .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _cdb (_afd ._dc ,_ec .ValueList ,_aed .ValueList );};}else if _ec .Type ==ResultTypeArray &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return _ead (_afd ._dc ,_ec .ValueArray ,_aed );}else if _ec .Type ==ResultTypeList &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return _dgc (_afd ._dc ,_ec .ValueList ,_aed );};switch _afd ._dc {case BinOpTypePlus :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeNumberResult (_ec .ValueNumber +_aed .ValueNumber );};};case BinOpTypeMinus :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeNumberResult (_ec .ValueNumber -_aed .ValueNumber );};};case BinOpTypeMult :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeNumberResult (_ec .ValueNumber *_aed .ValueNumber );};};case BinOpTypeDiv :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {if _aed .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_ec .ValueNumber /_aed .ValueNumber );};};case BinOpTypeExp :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeNumberResult (_eg .Pow (_ec .ValueNumber ,_aed .ValueNumber ));};};case BinOpTypeLT :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeBoolResult (_ec .ValueNumber < _aed .ValueNumber );};if _ec .Type ==ResultTypeString {return MakeBoolResult (_ec .ValueString < _aed .ValueString );};if _ec .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _ec .Type ==ResultTypeString &&_aed .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _ec .Type ==ResultTypeNumber &&_aed .Type ==ResultTypeString {return MakeBoolResult (true );}else if _ec .Type ==ResultTypeEmpty &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_ec .Type ==ResultTypeNumber ||_ec .Type ==ResultTypeString )&&_aed .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeBoolResult (_ec .ValueNumber > _aed .ValueNumber );};if _ec .Type ==ResultTypeString {return MakeBoolResult (_ec .ValueString > _aed .ValueString );};if _ec .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _ec .Type ==ResultTypeString &&_aed .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _ec .Type ==ResultTypeNumber &&_aed .Type ==ResultTypeString {return MakeBoolResult (false );}else if _ec .Type ==ResultTypeEmpty &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_ec .Type ==ResultTypeNumber ||_ec .Type ==ResultTypeString )&&_aed .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeBoolResult (_ec .ValueNumber ==_aed .ValueNumber );};if _ec .Type ==ResultTypeString {return MakeBoolResult (_ec .ValueString ==_aed .ValueString );};if _ec .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_ec .Type ==ResultTypeString &&_aed .Type ==ResultTypeNumber )||(_ec .Type ==ResultTypeNumber &&_aed .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _ec .Type ==ResultTypeEmpty &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return MakeBoolResult (_cd (_aed ));}else if (_ec .Type ==ResultTypeNumber ||_ec .Type ==ResultTypeString )&&_aed .Type ==ResultTypeEmpty {return MakeBoolResult (_cd (_ec ));};case BinOpTypeNE :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeBoolResult (_ec .ValueNumber !=_aed .ValueNumber );};if _ec .Type ==ResultTypeString {return MakeBoolResult (_ec .ValueString !=_aed .ValueString );};if _ec .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_ec .Type ==ResultTypeString &&_aed .Type ==ResultTypeNumber )||(_ec .Type ==ResultTypeNumber &&_aed .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _ec .Type ==ResultTypeEmpty &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return MakeBoolResult (!_cd (_aed ));}else if (_ec .Type ==ResultTypeNumber ||_ec .Type ==ResultTypeString )&&_aed .Type ==ResultTypeEmpty {return MakeBoolResult (!_cd (_ec ));};case BinOpTypeLEQ :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeBoolResult (_ec .ValueNumber <=_aed .ValueNumber );};if _ec .Type ==ResultTypeString {return MakeBoolResult (_ec .ValueString <=_aed .ValueString );};if _ec .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _ec .Type ==ResultTypeString &&_aed .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _ec .Type ==ResultTypeNumber &&_aed .Type ==ResultTypeString {return MakeBoolResult (true );}else if _ec .Type ==ResultTypeEmpty &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return MakeBoolResult (_cd (_aed ));}else if (_ec .Type ==ResultTypeNumber ||_ec .Type ==ResultTypeString )&&_aed .Type ==ResultTypeEmpty {return MakeBoolResult (_cd (_ec ));};case BinOpTypeGEQ :if _ec .Type ==_aed .Type {if _ec .Type ==ResultTypeNumber {return MakeBoolResult (_ec .ValueNumber >=_aed .ValueNumber );};if _ec .Type ==ResultTypeString {return MakeBoolResult (_ec .ValueString >=_aed .ValueString );};if _ec .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _ec .Type ==ResultTypeString &&_aed .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _ec .Type ==ResultTypeNumber &&_aed .Type ==ResultTypeString {return MakeBoolResult (false );}else if _ec .Type ==ResultTypeEmpty &&(_aed .Type ==ResultTypeNumber ||_aed .Type ==ResultTypeString ){return MakeBoolResult (_cd (_aed ));}else if (_ec .Type ==ResultTypeNumber ||_ec .Type ==ResultTypeString )&&_aed .Type ==ResultTypeEmpty {return MakeBoolResult (_cd (_ec ));};case BinOpTypeConcat :return MakeStringResult (_ec .Value ()+_aed .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func _dfcaf (_dgccc []Result )[]float64 {_ccgbd :=make ([]float64 ,0);for _ ,_efbgb :=range _dgccc {if _efbgb .Type ==ResultTypeEmpty {continue ;};_efbgb =_efbgb .AsNumber ();switch _efbgb .Type {case ResultTypeNumber :if !_efbgb .IsBoolean {_ccgbd =append (_ccgbd ,_efbgb .ValueNumber );};case ResultTypeList ,ResultTypeArray :_ccgbd =append (_ccgbd ,_dfcaf (_efbgb .ListValues ())...);case ResultTypeString :default:_da .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efbgb .Type );};};return _ccgbd ;};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_ceff ,_bggc string };type amorArgs struct{_ccgb float64 ;_dgfe float64 ;_eabd float64 ;_adab float64 ;_caad int ;_faab float64 ;_fge int ;};

// Eval evaluates and returns the result of an empty expression.
func (_fc EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_fcefd :=len (args );if _fcefd !=6&&_fcefd !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fdcc ,_bece ,_egec :=_ega (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _egec .Type ==ResultTypeError {return _egec ;};_agef :=args [2];if _agef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdec :=_agef .ValueNumber ;if _fdec < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_gagd :=args [3];if _gagd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddgf :=_gagd .ValueNumber ;if _ddgf <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_aagb :=args [4];if _aagb .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_acad :=_aagb .ValueNumber ;if _acad < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_bfdd :=args [5];if _bfdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_bdfc :=float64 (int (_bfdd .ValueNumber ));if !_dcfd (_bdfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_edebd :=0;if _fcefd ==7&&args [6].Type !=ResultTypeEmpty {_fagc :=args [6];if _fagc .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_edebd =int (_fagc .ValueNumber );if !_ecgga (_edebd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_adff :=0.0;_fbfb :=0.0;_aacb :=1.0;_dcg ,_egec :=_dgdee (_fdcc ,_bece ,_fdec ,_fbfb ,_acad ,_bdfc ,_edebd );if _egec .Type ==ResultTypeError {return _egec ;};_acdfe ,_egec :=_dgdee (_fdcc ,_bece ,_fdec ,_aacb ,_acad ,_bdfc ,_edebd );if _egec .Type ==ResultTypeError {return _egec ;};_egae :=(_aacb -_fbfb )*0.5;for _afdf :=0;_afdf < 100&&_adff !=_ddgf ;_afdf ++{_adff ,_egec =_dgdee (_fdcc ,_bece ,_fdec ,_egae ,_acad ,_bdfc ,_edebd );if _egec .Type ==ResultTypeError {return _egec ;};if _ddgf ==_dcg {return MakeNumberResult (_fbfb );}else if _ddgf ==_acdfe {return MakeNumberResult (_aacb );}else if _ddgf ==_adff {return MakeNumberResult (_egae );}else if _ddgf < _acdfe {_aacb *=2.0;_acdfe ,_egec =_dgdee (_fdcc ,_bece ,_fdec ,_aacb ,_acad ,_bdfc ,_edebd );if _egec .Type ==ResultTypeError {return _egec ;};_egae =(_aacb -_fbfb )*0.5;}else {if _ddgf < _adff {_fbfb =_egae ;_dcg =_adff ;}else {_aacb =_egae ;_acdfe =_adff ;};_egae =_aacb -(_aacb -_fbfb )*((_ddgf -_acdfe )/(_dcg -_acdfe ));};};return MakeNumberResult (_egae );};

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbfb :=args [0];switch _cbfb .Type {case ResultTypeError :return _cbfb ;case ResultTypeNumber ,ResultTypeString :return _fcbag (args [0]);case ResultTypeList :_bbcg :=_cbfb .ValueList ;_aaacc :=[]Result {};for _ ,_gfbfc :=range _bbcg {_dgcf :=_fcbag (_gfbfc );if _dgcf .Type ==ResultTypeError {return _dgcf ;};_aaacc =append (_aaacc ,_dgcf );};return MakeListResult (_aaacc );case ResultTypeArray :_aegd :=_cbfb .ValueArray ;_fbfc :=[][]Result {};for _ ,_gdcb :=range _aegd {_cdbfd :=[]Result {};for _ ,_dbfag :=range _gdcb {_ebccg :=_fcbag (_dbfag );if _ebccg .Type ==ResultTypeError {return _ebccg ;};_cdbfd =append (_cdbfd ,_ebccg );};_fbfc =append (_fbfc ,_cdbfd );};return MakeArrayResult (_fbfc );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_adgfb :=len (args );if _adgfb < 2||_adgfb > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cegf :=args [0];if _cegf .Type !=ResultTypeArray &&_cegf .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bbba :=args [1].AsNumber ();if _bbba .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cfab :=int (_bbba .ValueNumber )-1;_fadeg :=-1;if _adgfb ==3&&args [2].Type !=ResultTypeEmpty {_abfe :=args [2].AsNumber ();if _abfe .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_fadeg =int (_abfe .ValueNumber )-1;};if _cfab ==-1&&_fadeg ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _gbde []Result ;if _cegf .Type ==ResultTypeArray {_fdcg :=_cegf .ValueArray ;if _cfab < -1||_cfab >=len (_fdcg ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _cfab ==-1{if _fadeg >=len (_fdcg [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_cfdc :=[][]Result {};for _ ,_ffcd :=range _fdcg {_adaa :=_ffcd [_fadeg ];if _adaa .Type ==ResultTypeEmpty {_adaa =MakeNumberResult (0);};_cfdc =append (_cfdc ,[]Result {_adaa });};return MakeArrayResult (_cfdc );};_gbde =_fdcg [_cfab ];}else {_agfce :=_cegf .ValueList ;if _cfab < -1||_cfab >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _cfab ==-1{if _fadeg >=len (_agfce ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_faad :=_agfce [_fadeg ];if _faad .Type ==ResultTypeEmpty {_faad =MakeNumberResult (0);};return _faad ;};_gbde =_agfce ;};if _fadeg < -1||_fadeg > len (_gbde ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _fadeg ==-1{_aggc :=[]Result {};for _ ,_cfbd :=range _gbde {if _cfbd .Type ==ResultTypeEmpty {_aggc =append (_aggc ,MakeNumberResult (0));}else {_aggc =append (_aggc ,_cfbd );};};return MakeArrayResult ([][]Result {_aggc });};_decb :=_gbde [_fadeg ];if _decb .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _decb ;};func _cfgd (_gdcg Result )*criteriaParsed {_fdab :=_gdcg .Type ==ResultTypeNumber ;_feece :=_gdcg .ValueNumber ;_fdaeb :=_d .ToLower (_gdcg .ValueString );_deab :=_fbbf (_fdaeb );return &criteriaParsed {_fdab ,_feece ,_fdaeb ,_deab };};

// String returns a string representation of String.
func (_dffa String )String ()string {return "\u0022"+_dffa ._cfbdb +"\u0022"};func _egdb (_gdaf ,_bdcd float64 ,_bfc ,_eacf int )(float64 ,Result ){_efabe ,_cea :=_fdg (_gdaf ),_fdg (_bdcd );if _cea .After (_efabe ){_bdd :=_aebd (_efabe ,_cea ,_bfc ,_eacf );_badc :=(_cea .Year ()-_bdd .Year ())*12+int (_cea .Month ())-int (_bdd .Month ());return float64 (_badc *_bfc )/12.0,_fea ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_gdff ,_ebdg :=_ebeec (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _ebdg .Type ==ResultTypeError {return _ebdg ;};_gdbd :=_gdff ._ccgb ;_aabd :=_gdff ._dgfe ;_dbfc :=_gdff ._eabd ;_gbab :=_gdff ._adab ;_bfed :=_gdff ._caad ;_fgaf :=_gdff ._faab ;if _fgaf >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_ccg :=_gdff ._fge ;_aaebg :=1.0/_fgaf ;_adae :=2.5;if _aaebg < 3{_adae =1;}else if _aaebg < 5{_adae =1.5;}else if _aaebg <=6{_adae =2;};_fgaf *=_adae ;_faec ,_gbda :=_aedb (_aabd ,_dbfc ,_ccg );if _gbda .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_bgbf :=_fege (_faec *_fgaf *_gdbd );_gdbd -=_bgbf ;_acee :=_gdbd -_gbab ;for _cfcb :=0;_cfcb < _bfed ;_cfcb ++{_bgbf =_fege (_fgaf *_gdbd );_acee -=_bgbf ;if _acee < 0{switch _bfed -_cfcb {case 0:case 1:return MakeNumberResult (_fege (_gdbd *0.5));default:return MakeNumberResult (0);};};_gdbd -=_bgbf ;};return MakeNumberResult (_bgbf );};

// String returns a string representation for Negate.
func (_cgdgc Negate )String ()string {return "\u002d"+_cgdgc ._aafc .String ()};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bde ,_acg ,_gdg :=_ega (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gdg .Type ==ResultTypeError {return _gdg ;};_eeab ,_gdg :=_adec (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _gdg .Type ==ResultTypeError {return _gdg ;};if _eeab >=_bde {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_cbfc :=args [3];if _cbfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_effa :=_cbfc .ValueNumber ;if _effa < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_dbda :=args [4];if _dbda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_edfg :=_dbda .ValueNumber ;if _edfg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_efgdd :=args [5];if _efgdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_ddab :=_efgdd .ValueNumber ;if _ddab < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gcda :=args [6];if _gcda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aeec :=float64 (int (_gcda .ValueNumber ));if !_dcfd (_aeec ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_cfdd :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_geac :=args [7];if _geac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cfdd =int (_geac .ValueNumber );if !_ecgga (_cfdd ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_dfcg ,_gdg :=_aedb (_eeab ,_acg ,_cfdd );if _gdg .Type ==ResultTypeError {return _gdg ;};_dfcg *=_aeec ;_cedac ,_gdg :=_aedb (_bde ,_acg ,_cfdd );if _gdg .Type ==ResultTypeError {return _gdg ;};_cedac *=_aeec ;_cddf ,_gdg :=_aedb (_eeab ,_bde ,_cfdd );if _gdg .Type ==ResultTypeError {return _gdg ;};_cddf *=_aeec ;_agd :=_ddab +_dfcg *100*_effa /_aeec ;_agd /=_cedac *_edfg /_aeec +1;_agd -=_cddf *100*_effa /_aeec ;return MakeNumberResult (_agd );};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_cdaa NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_eeecb :=ctx .NamedRange (_cdaa ._caeg );_eega :=_eeecb .Value ;if _affab ,_aceeg :=ev .GetFromCache (_eega );_aceeg {return _affab ;};_aggcc :=_d .Split (_eega ,"\u0021");if len (_aggcc )!=2{return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_eega ));};_ffdf :=ctx .Sheet (_aggcc [0]);_bcfba :=_d .Split (_aggcc [1],"\u003a");switch len (_bcfba ){case 1:_begg :=ev .Eval (_ffdf ,_bcfba [0]);ev .SetCache (_eega ,_begg );return _begg ;case 2:_cbbe :=_dddfe (_ffdf ,ev ,_bcfba [0],_bcfba [1]);ev .SetCache (_eega ,_cbbe );return _cbbe ;};return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_eeecb .Type ));};

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eaed :=args [0].AsNumber ();if _eaed .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgbaf :=_eg .Signbit (_eaed .ValueNumber );_edaa ,_cacd :=_eg .Modf (_eaed .ValueNumber /2);_feaeg :=_edaa *2;if _cacd !=0{if !_dgbaf {_feaeg +=2;}else {_feaeg -=2;};};return MakeNumberResult (_feaeg );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};

// Update returns the same object as updating sheet references does not affect Bool.
func (_eff Bool )Update (q *_ag .UpdateQuery )Expression {return _eff };func _bafd (_cfcbf string ,_gaeg []Result )(*parsedReplaceObject ,Result ){if len (_gaeg )!=4{return nil ,MakeErrorResult (_cfcbf +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gaeg [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_cfcbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_bfff :=_gaeg [0].ValueString ;if _gaeg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cfcbf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_bbfd :=int (_gaeg [1].ValueNumber )-1;if _gaeg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_cfcbf +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_cfbe :=int (_gaeg [2].ValueNumber );if _gaeg [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_cfcbf +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_ddceb :=_gaeg [3].ValueString ;return &parsedReplaceObject {_bfff ,_bbfd ,_cfbe ,_ddceb },_fea ;};

// String returns a string representation of a named range.
func (_gcgc NamedRangeRef )String ()string {return _gcgc ._caeg };

// Reference returns an invalid reference for Error.
func (_gab Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cagfe :=[]float64 {};for _ ,_cbgbg :=range args {switch _cbgbg .Type {case ResultTypeString :_ggga :=_cbgbg .AsNumber ();if _ggga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cagfe =append (_cagfe ,_ggga .ValueNumber );case ResultTypeList ,ResultTypeArray :_bdge :=GCD (_cbgbg .ListValues ());if _bdge .Type !=ResultTypeNumber {return _bdge ;};_cagfe =append (_cagfe ,_bdge .ValueNumber );case ResultTypeNumber :_cagfe =append (_cagfe ,_cbgbg .ValueNumber );case ResultTypeError :return _cbgbg ;default:return MakeErrorResult (_b .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cbgbg .Type ));};};if _cagfe [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cagfe )==1{return MakeNumberResult (_cagfe [0]);};_dfcb :=_cagfe [0];for _fgggf :=1;_fgggf < len (_cagfe );_fgggf ++{if _cagfe [_fgggf ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfcb =_aefdd (_dfcb ,_cagfe [_fgggf ]);};return MakeNumberResult (_dfcb );};func _fege (_efeb float64 )float64 {return float64 (int (_efeb +0.5))};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_gefd ,_ccbfd :=_bedg (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _ccbfd .Type ==ResultTypeError {return _ccbfd ;};_caebbd :=_gefd ._bagdg ;_cfbc :=_gefd ._bdad ;_cbf :=_gefd ._dgec ;_bbcb :=_gefd ._bbda ;_bcag :=_gefd ._ebcf ;_dadf :=_gefd ._cfa ;_caga :=_adbe (_caebbd ,_cfbc ,_cbf ,_bbcb ,_bcag ,_dadf );if _caga .Type ==ResultTypeError {return _caga ;};_cfgc :=_caga .ValueNumber /(1.0+_bbcb /_bcag );return MakeNumberResult (_cfgc );};func _acbgc (_bgcgb Context ,_dbde ,_acbf int )(string ,string ){_dafgf :="\u0041"+_ae .Itoa (_dbde );_afgga :=_bgcgb .LastColumn (_dbde ,_acbf );_dbgdfc :=_afgga +_ae .Itoa (_acbf );return _dafgf ,_dbgdfc ;};const _ece =57354;

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ffdad :=_dfcaf (args );_e .Float64s (_ffdad );var _gfbd float64 ;if len (_ffdad )%2==0{_gfbd =(_ffdad [len (_ffdad )/2-1]+_ffdad [len (_ffdad )/2])/2;}else {_gfbd =_ffdad [len (_ffdad )/2];};return MakeNumberResult (_gfbd );};type ivr struct{};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfdga :=args [0].AsString ();if _dfdga .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_afae :=_eb .Buffer {};_agfdc :=false ;_bcbdd :=false ;_edgce :=0;for _ ,_gdggd :=range _dfdga .ValueString {_becb :=_gdggd ==' ';if _becb {if !_agfdc {continue ;};if !_bcbdd {_edgce ++;_afae .WriteRune (_gdggd );};}else {_edgce =0;_agfdc =true ;_afae .WriteRune (_gdggd );};_bcbdd =_becb ;};_afae .Truncate (_afae .Len ()-_edgce );return MakeStringResult (_afae .String ());};

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_cgdd :=args [0].AsNumber ();if _cgdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cegff :=_eg .Signbit (_cgdd .ValueNumber );_bcbcf ,_gaabg :=_eg .Modf ((_cgdd .ValueNumber -1)/2);_gcaf :=_bcbcf *2+1;if _gaabg !=0{if !_cegff {_gcaf +=2;}else {_gcaf -=2;};};return MakeNumberResult (_gcaf );};

// String returns a string representation of CellRef.
func (_ad CellRef )String ()string {return _ad ._ffd };func _fdg (_ggec float64 )_ge .Time {_dcf :=int64 ((_ggec -_bed )*_fcf );return _ge .Unix (0,_dcf ).UTC ();};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_ccda :=args [0].AsNumber ();if _ccda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_cabe :=int (_ccda .ValueNumber );_cfbcf :=make ([][]Result ,0,_cabe );for _gafbb :=0;_gafbb < _cabe ;_gafbb ++{_aafd :=make ([]Result ,_cabe );for _gcee :=0;_gcee < _cabe ;_gcee ++{if _gafbb ==_gcee {_aafd [_gcee ]=MakeNumberResult (1.0);}else {_aafd [_gcee ]=MakeNumberResult (0.0);};};_cfbcf =append (_cfbcf ,_aafd );};return MakeArrayResult (_cfbcf );};

// GetLocked returns FALSE for the invalid reference context.
func (_fefa *ivr )GetLocked (cellRef string )bool {return false };

// Reference returns a string reference value to a vertical range.
func (_gaac VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_gaac .verticalRangeReference ()};};

// Match implements the MATCH function.
func Match (args []Result )Result {_bdeg :=len (args );if _bdeg !=2&&_bdeg !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_egde :=1;if _bdeg ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_fabae :=args [2].ValueNumber ;if _fabae ==-1||_fabae ==0{_egde =int (_fabae );};};_beda :=args [1];var _fcccb []Result ;switch _beda .Type {case ResultTypeList :_fcccb =_beda .ValueList ;case ResultTypeArray :_gbba :=_beda .ValueArray ;for _ ,_egg :=range _gbba {if len (_egg )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_fcccb =append (_fcccb ,_egg [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_abcd :=_cfgd (args [0]);switch _egde {case 0:for _dgaf ,_agb :=range _fcccb {if _febg (_agb ,_abcd ){return MakeNumberResult (float64 (_dgaf +1));};};case -1:for _gfcac :=0;_gfcac < len (_fcccb );_gfcac ++{if _febg (_fcccb [_gfcac ],_abcd ){return MakeNumberResult (float64 (_gfcac +1));};if _abcd ._gefa &&(_fcccb [_gfcac ].ValueNumber < _abcd ._gfccg ){if _gfcac ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gfcac ));};};case 1:for _dfag :=0;_dfag < len (_fcccb );_dfag ++{if _febg (_fcccb [_dfag ],_abcd ){return MakeNumberResult (float64 (_dfag +1));};if _abcd ._gefa &&(_fcccb [_dfag ].ValueNumber > _abcd ._gfccg ){if _dfag ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_dfag ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_efca :=&defEval {};_efca .evCache =_bbdg ();return _efca };func (_cbef tokenType )String ()string {return _ccgf (int (_cbef ))};func _addff (_ddfe float64 ,_cfef *criteriaRegex )bool {_efcab ,_gebg :=_ae .ParseFloat (_cfef ._aede ,64);if _gebg !=nil {return false ;};switch _cfef ._aeeb {case _dfdge :return _ddfe ==_efcab ;case _beedf :return _ddfe <=_efcab ;case _efagc :return _ddfe >=_efcab ;case _gecc :return _ddfe < _efcab ;case _cbddb :return _ddfe > _efcab ;};return false ;};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecgbd :=args [0];if _ecgbd .Type ==ResultTypeNumber {return _ecgbd ;};if _ecgbd .Type ==ResultTypeString {_fcgg ,_eacg :=_ae .ParseFloat (_ecgbd .Value (),64);if _eacg ==nil {return MakeNumberResult (_fcgg );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};func _cbgfe (_cag []Result ,_baeg string )(*couponArgs ,Result ){_ccd :=len (_cag );if _ccd !=3&&_ccd !=4{return nil ,MakeErrorResult (_baeg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fegc ,_fdaa ,_aaf :=_ega (_cag [0],_cag [1],_baeg );if _aaf .Type ==ResultTypeError {return nil ,_aaf ;};if _cag [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_baeg +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_deed :=_cag [2].ValueNumber ;if !_dcfd (_deed ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_baeg );};_dfb :=0;if _ccd ==4&&_cag [3].Type !=ResultTypeEmpty {if _cag [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_baeg +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dfb =int (_cag [3].ValueNumber );if !_ecgga (_dfb ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_baeg );};};return &couponArgs {_fegc ,_fdaa ,int (_deed ),_dfb },_fea ;};

// Reference returns an invalid reference for FunctionCall.
func (_gcgac FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dage :=args [0].AsNumber ();if _dage .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_eg .Pi *_dage .ValueNumber );};

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_eegfd .Lock ();defer _eegfd .Unlock ();if _bdbe ,_ebgc :=_efgc [name ];_ebgc {return _bdbe ;};return nil ;};

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_faece ,_cegd ,_bgbac :=_fdfeb (from ,to );if _bgbac !=nil {_da .Log .Debug (_bgbac .Error ());return NewError (_bgbac .Error ());};return PrefixRangeExpr {_baca :pfx ,_debba :_faece ,_defge :_cegd };};var _addbc =[...]uint8 {0,17,33,49,63,78,93,108};var _gaf =map[string ]*_bc .Regexp {};

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_begbd Context ,_aabaa Evaluator ,_fcfbf []Result )Result ;

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdga :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feecc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcdde :=args [2].ValueNumber ;if _gcdde ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_bdga -_feecc )/_gcdde );};func _fcgcb (_eabe [][]Result ,_dgfde int )[][]Result {_gdffd :=[][]Result {};for _gdbc :=range _eabe {if _gdbc ==0{continue ;};_ddega :=[]Result {};for _gffee :=range _eabe {if _gffee ==_dgfde {continue ;};_ddega =append (_ddega ,_eabe [_gdbc ][_gffee ]);};_gdffd =append (_gdffd ,_ddega );};return _gdffd ;};const _gfagf =57376;func _fde (_acc int )bool {if _acc ==_acc /400*400{return true ;};if _acc ==_acc /100*100{return false ;};return _acc ==_acc /4*4;};const _abdce =57350;

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_eacb :=args [0].ValueNumber ;if _eacb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_aebb :=float64 (int (args [1].ValueNumber ));if _aebb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_eg .Pow (_eacb +1,1/_aebb )-1)*_aebb );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dgg ,_cgf ,_efdc :=_ega (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _efdc .Type ==ResultTypeError {return _efdc ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_edcb :=_cgf -_dgg ;if _edcb > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_gebad :=args [2].ValueNumber ;if _gebad <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_gebad *_edcb /360));};

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_ade string ,_gge Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_cef string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_ge .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_dbd int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_adb string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_gca string )string ;

// GetFormat returns if cell is protected.
GetLocked (_afa string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_dcb string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_gfg string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_aee ,_bgf int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_efaf string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_eca string ,_egf bool );

// NamedRange returns a named range.
NamedRange (_gfd string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_dga ,_bac uint32 );};func _dcfd (_ccecd float64 )bool {return _ccecd ==1||_ccecd ==2||_ccecd ==4};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_adfd SheetPrefixExpr )Update (q *_ag .UpdateQuery )Expression {return _adfd };func _efba (_ecba Result ,_egffb *criteriaParsed )bool {if _ecba .IsBoolean {return false ;};_fgea :=_ecba .Type ;if _egffb ._gefa {return _fgea ==ResultTypeNumber &&_ecba .ValueNumber ==_egffb ._gfccg ;}else if _fgea ==ResultTypeNumber {return _addff (_ecba .ValueNumber ,_egffb ._adfc );};return _aabdb (_ecba ,_egffb );};const _gbe =_ge .Second *1;

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_fgbg :=1.0;for _ ,_gbfdc :=range args {_gbfdc =_gbfdc .AsNumber ();switch _gbfdc .Type {case ResultTypeNumber :_fgbg *=_gbfdc .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cbfe :=Product (_gbfdc .ListValues ());if _cbfe .Type !=ResultTypeNumber {return _cbfe ;};_fgbg *=_cbfe .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gbfdc ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_gbfdc .Type ));};};return MakeNumberResult (_fgbg );};func _agfeg (_dcag Result )[][]Result {switch _dcag .Type {case ResultTypeArray :return _dcag .ValueArray ;case ResultTypeList :return [][]Result {_dcag .ValueList };default:return [][]Result {};};};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_edfgc :=args [0].AsString ();if _edfgc .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_edfc :=args [1].AsNumber ();if _edfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _edfc .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _edfc .ValueNumber ==0{return MakeStringResult ("");};_acdb :=_eb .Buffer {};for _agde :=0;_agde < int (_edfc .ValueNumber );_agde ++{_acdb .WriteString (_edfgc .ValueString );};return MakeStringResult (_acdb .String ());};var _fea Result =MakeEmptyResult ();

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dffe :=args [0].AsNumber ();_gfeaa :=args [1].AsNumber ();_efcd :=args [2].AsNumber ();_afba :=args [3].ListValues ();if _dffe .Type !=ResultTypeNumber ||_gfeaa .Type !=ResultTypeNumber ||_efcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_ebfc :=float64 (0);for _acde ,_dgdb :=range _afba {_ebfc +=_dgdb .ValueNumber *_eg .Pow (_dffe .ValueNumber ,_gfeaa .ValueNumber +float64 (_acde )*_efcd .ValueNumber );};return MakeNumberResult (_ebfc );};

// Reference returns a string reference value to a sheet.
func (_cdcg SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_cdcg ._eadag };};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_ebee :=len (args );if _ebee !=4&&_ebee !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fdfe ,_gbbf :=_adec (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _gbbf .Type ==ResultTypeError {return _gbbf ;};_fdd ,_gbbf :=_adec (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _gbbf .Type ==ResultTypeError {return _gbbf ;};if _fdfe >=_fdd {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_decag :=args [2].ValueNumber ;if _decag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcaf :=args [3].ValueNumber ;if _fcaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbb :=0;if _ebee ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdbb =int (args [4].ValueNumber );if !_ecgga (_cdbb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_fef ,_gbbf :=_aedb (_fdfe ,_fdd ,_cdbb );if _gbbf .Type ==ResultTypeError {return _gbbf ;};return MakeNumberResult (_fcaf *_decag *_fef );};type countMode byte ;

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _efegb (args ,_gfaf )};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bbdd :=args [0].AsString ();if _bbdd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eafc :=_eb .Buffer {};for _ ,_gdbbe :=range _bbdd .ValueString {if _bf .IsPrint (_gdbbe ){_eafc .WriteRune (_gdbbe );};};return MakeStringResult (_eafc .String ());};

// Reference returns a string reference value to an expression with prefix.
func (_ddgee PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_abgd :=_ddgee ._ceeeg .Reference (ctx ,ev );_dafgc :=_ddgee ._bcfd .Reference (ctx ,ev );if _abgd .Type ==ReferenceTypeSheet &&_dafgc .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_abgd .Value +"\u0021"+_dafgc .Value };};return ReferenceInvalid ;};

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_dcfda :=len (args );if _dcfda < 3||_dcfda > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adgf :=args [0].ValueNumber ;if _adgf !=float64 (int (_adgf )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fced :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bedgf :=args [2].ValueNumber ;_fffcd :=0.0;if _dcfda >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fffcd =args [3].ValueNumber ;};_aaag :=0.0;if _dcfda >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aaag =args [4].ValueNumber ;if _aaag !=0{_aaag =1;};};_cebc :=0.1;if _dcfda >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cebc =args [5].ValueNumber ;};_bcec :=100;_cbfa :=0;_fgdg :=false ;_aefd :=1e-6;_fabb :=_cebc ;for _cbfa < _bcec &&!_fgdg {_fcda :=_eg .Pow (_fabb +1,_adgf );_cdgc :=_eg .Pow (_fabb +1,_adgf -1);_aegb :=_fabb *_aaag +1;_fddfc :=_fced *(_fcda -1);_dfdg :=_fffcd +_fcda *_bedgf +_fddfc *_aegb /_fabb ;_ecaf :=_adgf *_cdgc *_bedgf -_fddfc *_aegb /_eg .Pow (_fabb ,2);_acgb :=(_adgf *_fced *_cdgc *_aegb +_fddfc *_aaag )/_fabb ;_gcfc :=_dfdg /(_ecaf +_acgb );if _eg .Abs (_gcfc )< _aefd {_fgdg =true ;};_cbfa ++;_fabb -=_gcfc ;};return MakeNumberResult (_fabb );};

// Reference returns a string reference value to a cell.
func (_fg CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_fg ._ffd };};

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_ebccge ,_fdega int };

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};

// Update updates references in the BinaryExpr after removing a row/column.
func (_gc BinaryExpr )Update (q *_ag .UpdateQuery )Expression {_cdf :=_gc ;_cdf ._ee =_gc ._ee .Update (q );_cdf ._ca =_gc ._ca .Update (q );return _cdf ;};var _gagg =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};func _bbdg ()evCache {_bae :=evCache {};_bae ._fbe =make (map[string ]Result );_bae ._ebf =&_g .Mutex {};return _bae ;};func (_bcca HorizontalRange )horizontalRangeReference ()string {return _b .Sprintf ("\u0025\u0064\u003a%\u0064",_bcca ._ebccge ,_bcca ._fdega );};func (_dbgdd Result )AsString ()Result {switch _dbgdd .Type {case ResultTypeNumber :return MakeStringResult (_dbgdd .Value ());default:return _dbgdd ;};};

// Eval evaluates a range returning a list of results or an error.
func (_bagbd Range )Eval (ctx Context ,ev Evaluator )Result {_dafe :=_bagbd ._gdcbe .Reference (ctx ,ev );_bccgc :=_bagbd ._bgdg .Reference (ctx ,ev );_bgegf :=_ebadc (_dafe ,_bccgc );if _dafe .Type ==ReferenceTypeCell &&_bccgc .Type ==ReferenceTypeCell {if _fgfag ,_cagd :=ev .GetFromCache (_bgegf );_cagd {return _fgfag ;}else {_gadf :=_dddfe (ctx ,ev ,_dafe .Value ,_bccgc .Value );ev .SetCache (_bgegf ,_gadf );return _gadf ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_bgegf );};func _bgeb (_ddd string )(int ,int ,float64 ,bool ,bool ,Result ){_baf :="";_eac :=[]string {};for _bfb ,_fdad :=range _bdg {_eac =_fdad .FindStringSubmatch (_ddd );if len (_eac )> 1{_baf =_bfb ;break ;};};if _baf ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};_gadga :=_eac [1]=="";_eac =_eac [49:];_fad :=len (_eac );_decg :=_eac [_fad -1];_fbedf :=_decg =="\u0061\u006d";_fgf :=_decg =="\u0070\u006d";var _abdc ,_fca int ;var _cgcb float64 ;var _gedb error ;switch _baf {case "\u0068\u0068":_abdc ,_gedb =_ae .Atoi (_eac [0]);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};_fca =0;_cgcb =0;case "\u0068\u0068\u003am\u006d":_abdc ,_gedb =_ae .Atoi (_eac [0]);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};_fca ,_gedb =_ae .Atoi (_eac [2]);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};_cgcb =0;case "\u006d\u006d\u003as\u0073":_abdc =0;_fca ,_gedb =_ae .Atoi (_eac [0]);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};_cgcb ,_gedb =_ae .ParseFloat (_eac [2],64);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_abdc ,_gedb =_ae .Atoi (_eac [0]);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};_fca ,_gedb =_ae .Atoi (_eac [2]);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};_cgcb ,_gedb =_ae .ParseFloat (_eac [4],64);if _gedb !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};};if _fca >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};if _fbedf ||_fgf {if _abdc > 12||_cgcb >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );}else if _abdc ==12{_abdc =0;};}else if _abdc >=24||_cgcb >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_dgb );};return _abdc ,_fca ,_cgcb ,_fgf ,_gadga ,_fea ;};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_egda :=len (args );if _egda !=2&&_egda !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cfde ,_fgdb :=_befd (args [0],args [1],"\u0058\u0049\u0052\u0052");if _fgdb .Type ==ResultTypeError {return _fgdb ;};_cgdc :=_cfde ._bfdfc ;_ddca :=_cfde ._ddce ;_dfa :=0.1;if _egda ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfa =args [2].ValueNumber ;if _dfa <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _gfed (_cgdc ,_ddca ,_dfa );};

// Eval evaluates the binary expression using the context given.
func (_ecb BinaryExpr )String ()string {_gf :="";switch _ecb ._dc {case BinOpTypePlus :_gf ="\u002b";case BinOpTypeMinus :_gf ="\u002d";case BinOpTypeMult :_gf ="\u002a";case BinOpTypeDiv :_gf ="\u002f";case BinOpTypeExp :_gf ="\u005e";case BinOpTypeLT :_gf ="\u003c";case BinOpTypeGT :_gf ="\u003e";case BinOpTypeEQ :_gf ="\u003d";case BinOpTypeLEQ :_gf ="\u003c\u003d";case BinOpTypeGEQ :_gf ="\u003e\u003d";case BinOpTypeNE :_gf ="\u003c\u003e";case BinOpTypeConcat :_gf ="\u0026";};return _ecb ._ee .String ()+_gf +_ecb ._ca .String ();};func _ffef (_cbcb float64 )float64 {_adbd :=float64 (1);for _aaba :=float64 (2);_aaba <=_cbcb ;_aaba ++{_adbd *=_aaba ;};return _adbd ;};func _fcfb (_ebfg ,_feb ,_cbcf ,_cgedg int )int {if _feb > _cbcf {return 0;};if _aeba (_cgedg ){return (_cbcf -_feb +1)*30;};_abdd :=0;for _dgae :=_feb ;_dgae <=_cbcf ;_dgae ++{_abdd +=_bgg (_ebfg ,_dgae );};return _abdd ;};var _fgda =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };var _ecfd =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};func _cfeg (_ddaf _ge .Time )_ge .Time {_ddaf =_ddaf .UTC ();return _ge .Date (_ddaf .Year (),_ddaf .Month (),_ddaf .Day (),_ddaf .Hour (),_ddaf .Minute (),_ddaf .Second (),_ddaf .Nanosecond (),_ge .Local );};var _cafd =[]*_bc .Regexp {};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgbcf :=args [0].AsNumber ();if _bgbcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcage :=int (_bgbcf .ValueNumber );if _gcage < 0||_gcage > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_b .Sprintf ("\u0025\u0063",_gcage ));};const _agbcc ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Update updates references in the PrefixExpr after removing a row/column.
func (_bgbfe PrefixExpr )Update (q *_ag .UpdateQuery )Expression {_ageaf :=_bgbfe ;_adee :=_bgbfe ._ceeeg .String ();if _adee ==q .SheetToUpdate {_eceb :=*q ;_eceb .UpdateCurrentSheet =true ;_ageaf ._bcfd =_bgbfe ._bcfd .Update (&_eceb );};return _ageaf ;};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_d .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_cfbdb :v };};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_abgb :=args [0].ValueNumber ;if _abgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_dbgd ,_cgedd :=_befd (args [1],args [2],"\u0058\u004e\u0050\u0056");if _cgedd .Type ==ResultTypeError {return _cgedd ;};_bged :=_dbgd ._bfdfc ;_edeg :=_dbgd ._ddce ;_gaeca :=0.0;_acfe :=_edeg [0];for _gbce ,_gfcd :=range _bged {_gaeca +=_gfcd /_eg .Pow (1+_abgb ,(_edeg [_gbce ]-_acfe )/365);};return MakeNumberResult (_gaeca );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dafg :=args [0].AsString ();if _dafg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_decf :="\u0041\u0031";if len (args )==2{_ddbc :=args [1].Ref ;if _ddbc .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_decf =_ddbc .Value ;};switch _dafg .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_dbaca ,_agfca :=_ege .ParseCellReference (_decf );if _agfca !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_decf );};_fadb :="\u0024"+_dbaca .Column +"\u0024"+_ae .Itoa (int (_dbaca .RowIdx ));if _dbaca .SheetName !=""{_fadb =_dbaca .SheetName +"\u0021"+_fadb ;};return MakeStringResult (_fadb );case "\u0063\u006f\u006c":_acfa ,_gegd :=_ege .ParseCellReference (_decf );if _gegd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_decf );};return MakeNumberResult (float64 (_acfa .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_cfgcd :=_d .Contains (ctx .GetFormat (_decf ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_cfgcd );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_bada :="\u0047";_cdgcc :=ctx .GetFormat (_decf );if _cdgcc =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_bbbb .MatchString (_cdgcc ){_bada ="\u0046\u0030";}else if _cdgcc =="\u0030\u0025"{_bada ="\u0050\u0030";}else if _cdgcc =="\u004d\u004d\u004d\u0020\u0044\u0044"{_bada ="\u0044\u0032";}else if _cdgcc =="\u004d\u004d\u002fY\u0059"{_bada ="\u0044\u0033";}else if _cdgcc =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_cdgcc =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_bada ="\u0044\u0034";}else if _cdgcc =="\u004d\u004d\u005c\u002d\u0044\u0044"{_bada ="\u0044\u0035";}else if _cdgcc =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bada ="\u0044\u0036";}else if _cdgcc =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_bada ="\u0044\u0037";}else if _cdgcc =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_bada ="\u0044\u0038";}else if _cdgcc =="\u0048\u0048\u003aM\u004d"{_bada ="\u0044\u0039";}else if _dccb .MatchString (_cdgcc ){_bada ="\u002e\u0030";}else if _gace .MatchString (_cdgcc ){_bada ="\u002e\u0030\u0028\u0029";}else if _cdfed .MatchString (_cdgcc ){_bada ="\u0043\u0030";}else if _cbag .MatchString (_cdgcc )||_daffg .MatchString (_cdgcc ){_bada ="\u0044\u0031";}else if _ffdb :=_caadg .FindStringSubmatch (_cdgcc );len (_ffdb )> 1{_bada ="\u0046"+_ae .Itoa (len (_ffdb [1]));}else if _gaab :=_aadaa .FindStringSubmatch (_cdgcc );len (_gaab )> 1{_bada ="\u002e"+_ae .Itoa (len (_gaab [2]));}else if _eebg :=_gfgg .FindStringSubmatch (_cdgcc );len (_eebg )> 1{_bada ="\u0050"+_ae .Itoa (len (_eebg [2]));}else if _ebgf :=_gcgee .FindStringSubmatch (_cdgcc );len (_ebgf )> 1{_bada ="\u0043"+_cbbf (_ebgf ,1);}else if _fcba :=_faacg .FindStringSubmatch (_cdgcc );len (_fcba )> 1{_bada ="\u0043"+_cbbf (_fcba ,1);}else if _dfbe :=_agacg .FindStringSubmatch (_cdgcc );len (_dfbe )> 1{_bada ="\u002e"+_cbbf (_dfbe ,1)+"\u0028\u0029";}else if _gfdbc :=_abgef .FindStringSubmatch (_cdgcc );len (_gfdbc )> 1{_bada ="\u002e"+_cbbf (_gfdbc ,1);}else if _bddg :=_cffb .FindStringSubmatch (_cdgcc );len (_bddg )> 1{_bada ="\u0053"+_cbbf (_bddg ,3);};if _bada !="\u0047"&&_d .Contains (_cdgcc ,"\u005b\u0052\u0045D\u005d"){_bada +="\u002d";};return MakeStringResult (_bada );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_ddfa :=ctx .GetFormat (_decf );if _ggce .MatchString (_ddfa ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_decf ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_ffbbb :=0.0;if ctx .GetLocked (_decf ){_ffbbb =1.0;};return MakeNumberResult (_ffbbb );case "\u0072\u006f\u0077":_dadc ,_fcae :=_ege .ParseCellReference (_decf );if _fcae !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_decf );};return MakeNumberResult (float64 (_dadc .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_dafag ,_dfee :=_ege .ParseCellReference (_decf );if _dfee !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_decf );};if _dafag .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_dafag .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_dafag .SheetName ).GetWidth (int (_dafag .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_dafg .ValueString );};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cbab :=args [0].AsString ();if _cbab .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_cbab .ValueString )));};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_bbdb :=len (args );if _bbdb !=4&&_bbdb !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gece ,_bafg ,_agac :=_ega (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _agac .Type ==ResultTypeError {return _agac ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fed :=args [2].ValueNumber ;if _fed <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_dbgb :=args [3].ValueNumber ;if _dbgb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_gcfa :=0;if _bbdb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcfa =int (args [4].ValueNumber );if !_ecgga (_gcfa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_bec ,_agac :=_aedb (_gece ,_bafg ,_gcfa );if _agac .Type ==ResultTypeError {return _agac ;};return MakeNumberResult (_dbgb *(1-_fed *_bec ));};const _facgg =57349;

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_bbga ,_gaaga :=_dff (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _gaaga .Type ==ResultTypeError {return _gaaga ;};_afe :=_bbga ._fceg ;_eeg :=_bbga ._fbf ;_eege :=_bbga ._daac ;_cfac :=_bbga ._cbec ;_eccg :=_bbga ._adgde ;_bacgc :=_bbga ._fded ;_cgaf :=_bcab (_afe ,_eeg ,_eege ,0,_bacgc );_bceg :=0.0;if _cfac ==1{if _bacgc ==0{_bceg =-_eege ;_cfac ++;};};for _bgef :=_cfac ;_bgef <=_eccg ;_bgef ++{if _bacgc ==1{_bceg +=_eaef (_afe ,_bgef -2,_cgaf ,_eege ,1)-_cgaf ;}else {_bceg +=_eaef (_afe ,_bgef -1,_cgaf ,_eege ,0);};};_bceg *=_afe ;return MakeNumberResult (_bceg );};func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_gdefb :=args [0];if _gdefb .Type ==ResultTypeError {return _gdefb ;};if _gdefb .Type !=ResultTypeString &&_gdefb .Type !=ResultTypeNumber &&_gdefb .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_ccfbb :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gefg :=int (args [1].ValueNumber );if _gefg < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gaad :=int (args [2].ValueNumber );if _gaad < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_fagbf :=len (_ccfbb );if _gefg > _fagbf {return MakeStringResult ("");};_gefg --;_gdba :=_gefg +_gaad ;if _gdba > _fagbf {return MakeStringResult (_ccfbb [_gefg :]);}else {return MakeStringResult (_ccfbb [_gefg :_gdba ]);};};

// Update returns the same object as updating sheet references does not affect String.
func (_gdadb String )Update (q *_ag .UpdateQuery )Expression {return _gdadb };func _eeaf (_bfd ,_adcg ,_gbbg int )int {if _bfd > _adcg {return 0;};if _aeba (_gbbg ){return (_adcg -_bfd +1)*360;};_dcfa :=0;for _baebb :=_bfd ;_baebb <=_adcg ;_baebb ++{_eace :=365;if _fde (_baebb ){_eace =366;};_dcfa +=_eace ;};return _dcfa ;};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_ffd :v }};var _efbgd =false ;const _dfgfd =57377;const _cgbe ="\u005e\u0028\u0028"+_gddg +"\u007c"+_gcd +"\u007c"+_ggb +"\u007c"+_dbb +"\u0029\u0020\u0029\u003f";

// String returns a string representation of a vertical range.
func (_fabad VerticalRange )String ()string {return _fabad .verticalRangeReference ()};func _dcdg (_ecd ,_aeeg int64 )float64 {return float64 (int (0.5+float64 ((_aeeg -_ecd )/86400)))};

// Reference returns a string reference value to a horizontal range with prefix.
func (_bebeg PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_ebcada :=_bebeg ._dffd .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bebeg .horizontalRangeReference (_ebcada .Value )};};

// String returns a string representation of Number.
func (_cfea Number )String ()string {return _ae .FormatFloat (_cfea ._debfb ,'f',-1,64)};func _cdafb (_ddee Result )[]Result {_ggbc :=_ddee .ValueList ;if _ddee .Type ==ResultTypeArray {_ggbc =nil ;for _ ,_abgf :=range _ddee .ValueArray {if len (_abgf )> 0{_ggbc =append (_ggbc ,_abgf [0]);}else {_ggbc =append (_ggbc ,_fea );};};};return _ggbc ;};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_fbae ,_ccea :=_bedg (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _ccea .Type ==ResultTypeError {return _ccea ;};_bgff :=_fbae ._bagdg ;_gdca :=_fbae ._bdad ;_dba :=_fbae ._dgec ;_adac :=_fbae ._bbda ;_bcabe :=_fbae ._ebcf ;_fdea :=_fbae ._cfa ;return _adbe (_bgff ,_gdca ,_dba ,_adac ,_bcabe ,_fdea );};const _fbgbg =_ge .Millisecond *1000;

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_bbgc :=args [0].ValueNumber ;if _bbgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_acdf :=float64 (int (args [1].ValueNumber ));if _acdf < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_eg .Pow ((1+_bbgc /_acdf ),_acdf )-1);};

// Update updates references in the Range after removing a row/column.
func (_bdfdf Range )Update (q *_ag .UpdateQuery )Expression {_afffa :=_bdfdf ;if q .UpdateCurrentSheet {_afffa ._gdcbe =_bdfdf ._gdcbe .Update (q );_afffa ._bgdg =_bdfdf ._bgdg .Update (q );};return _afffa ;};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dcbdc :=[]float64 {};for _ ,_cgef :=range args {switch _cgef .Type {case ResultTypeString :_dgbgc :=_cgef .AsNumber ();if _dgbgc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dcbdc =append (_dcbdc ,_dgbgc .ValueNumber );case ResultTypeList :_aebef :=LCM (_cgef .ValueList );if _aebef .Type !=ResultTypeNumber {return _aebef ;};_dcbdc =append (_dcbdc ,_aebef .ValueNumber );case ResultTypeNumber :_dcbdc =append (_dcbdc ,_cgef .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _cgef ;};};if len (_dcbdc )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _dcbdc [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_dcbdc )==1{return MakeNumberResult (_dcbdc [0]);};_cfaee :=_dcbdc [0];for _gcff :=1;_gcff < len (_dcbdc );_gcff ++{if _dcbdc [_gcff ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfaee =_dcaa (_cfaee ,_dcbdc [_gcff ]);};return MakeNumberResult (_cfaee );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_fcdc :=len (args );if _fcdc !=4&&_fcdc !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcbb :=args [0].ValueNumber ;if _bcbb < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcgd :=args [1].ValueNumber ;if _fcgd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_eee :=args [2].ValueNumber ;if _eee <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_feba :=args [3].ValueNumber ;if _feba <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _feba -_eee > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_bdfe :=12.0;if _fcdc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdfe =args [4].ValueNumber ;if _bdfe < 1||_bdfe > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _bdfe ==12&&_feba > _eee {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _fcgd >=_bcbb {return MakeNumberResult (0);};_dbcg :=1-_eg .Pow (_fcgd /_bcbb ,1/_eee );_dbcg =float64 (int (_dbcg *1000+0.5))/1000;_cee :=_bcbb *_dbcg *_bdfe /12;if _feba ==1{return MakeNumberResult (_cee );};_afacb :=_cee ;_eeee :=0.0;_ebeg :=_eee ;if _ebeg > _feba {_ebeg =_feba ;};for _ddf :=2.0;_ddf <=_ebeg ;_ddf ++{_eeee =(_bcbb -_afacb )*_dbcg ;_afacb +=_eeee ;};if _feba > _eee {return MakeNumberResult ((_bcbb -_afacb )*_dbcg *(12-_bdfe )/12);};return MakeNumberResult (_eeee );};

// Value returns a string version of the result.
func (_adabe Result )Value ()string {switch _adabe .Type {case ResultTypeNumber :_cgga :=_ae .FormatFloat (_adabe .ValueNumber ,'f',-1,64);if len (_cgga )> 12{_fcde :=12;for _cdea :=_fcde ;_cdea > 0&&_cgga [_cdea ]=='0';_cdea --{_fcde --;};_cgga =_cgga [0:_fcde +1];};return _cgga ;case ResultTypeError :return _adabe .ValueString ;case ResultTypeString :return _adabe .ValueString ;case ResultTypeList :if len (_adabe .ValueList )==0{return "";};return _adabe .ValueList [0].Value ();case ResultTypeArray :if len (_adabe .ValueArray )==0||len (_adabe .ValueArray [0])==0{return "";};return _adabe .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_faecc :=_d .Split (v ,"\u003a");if len (_faecc )!=2{return nil ;};if _faecc [0]> _faecc [1]{_faecc [0],_faecc [1]=_faecc [1],_faecc [0];};return PrefixVerticalRange {_eddgc :pfx ,_fddaf :_faecc [0],_ccggd :_faecc [1]};};func init (){_ebad ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecda ,_bcdb ,_dbbd :=_ega (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _dbbd .Type ==ResultTypeError {return _dbbd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbfa :=_bcdb -_ecda ;if _dbfa > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_edaf :=args [2].ValueNumber ;if _edaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_edaf )/(360-_edaf *_dbfa ));};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_dffd Expression ;_badg ,_abdgc int ;};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eeaa :=args [0].Ref ;for _eeaa .Type ==ReferenceTypeNamedRange {_eeaa =ctx .NamedRange (_eeaa .Value );};_eadff :="";switch _eeaa .Type {case ReferenceTypeCell :_eadff =_eeaa .Value ;case ReferenceTypeRange :_ccee :=_d .Split (_eeaa .Value ,"\u003a");if len (_ccee )==2{_eadff =_ccee [0];};default:return MakeErrorResult (_b .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_eeaa .Type ));};_efgg ,_cbbg :=_ege .ParseCellReference (_eadff );if _cbbg !=nil {return MakeErrorResult (_b .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_cbbg .Error ()));};_fece ,_aagdb ,_cgccb :=_efgg .Column ,_efgg .RowIdx ,_efgg .SheetName ;_ggeg :=args [1].AsNumber ();if _ggeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_ddef :=args [2].AsNumber ();if _ddef .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _ebafc ,_bfag Result ;if len (args )==3{_ebafc =MakeNumberResult (1);_bfag =MakeNumberResult (1);}else {_ebafc =args [3].AsNumber ();if _ebafc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _ebafc .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_bfag =args [4].AsNumber ();if _bfag .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _bfag .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_dcbd :=_ege .ColumnToIndex (_fece );_fedf :=_aagdb +uint32 (_ggeg .ValueNumber );_dagge :=_dcbd +uint32 (_ddef .ValueNumber );_aefdb :=_fedf +uint32 (_ebafc .ValueNumber );_fcbb :=_dagge +uint32 (_bfag .ValueNumber );if _ebafc .ValueNumber > 0{_aefdb --;}else {_aefdb ++;_fedf ,_aefdb =_aefdb ,_fedf ;};if _bfag .ValueNumber > 0{_fcbb --;}else {_fcbb ++;_dagge ,_fcbb =_fcbb ,_dagge ;};_cad :=_b .Sprintf ("\u0025\u0073\u0025\u0064",_ege .IndexToColumn (_dagge ),_fedf );_dead :=_b .Sprintf ("\u0025\u0073\u0025\u0064",_ege .IndexToColumn (_fcbb ),_aefdb );if _cgccb ==""{return _dddfe (ctx ,ev ,_cad ,_dead );}else {return _dddfe (ctx .Sheet (_cgccb ),ev ,_cad ,_dead );};};func _adgdbe (_dcdf Result ,_ffdd ,_ccfeg string )(string ,Result ){switch _dcdf .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _dcdf .Value (),_fea ;default:return "",MakeErrorResult (_ffdd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_ccfeg +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};const _cdca =57359;const _bbcgc =57351;

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_bccd ,_gfgag ,_daege :=_fdfeb (from ,to );if _daege !=nil {_da .Log .Debug (_daege .Error ());return NewError (_daege .Error ());};return Range {_gdcbe :_bccd ,_bgdg :_gfgag };};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_fgaeb :=len (args );if _fgaeb !=4&&_fgaeb !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ccdb :=args [0].ValueNumber ;if _ccdb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfd :=args [1].ValueNumber ;if _cfd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cddc :=args [2].ValueNumber ;if _cddc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdeg :=args [3].ValueNumber ;if _fdeg < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _fdeg > _cddc {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_agfe :=2.0;if _fgaeb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agfe =args [4].ValueNumber ;if _agfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_ggbed (_ccdb ,_cfd ,_cddc ,_fdeg ,_agfe ));};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};func _faba (_ecf ,_agc float64 ,_ccbb ,_agebd int )float64 {_dbcf :=_fdg (_ecf );_cgcge :=_fdg (_agc );if _agebd ==1{_dag :=_aebd (_dbcf ,_cgcge ,_ccbb ,1);_bad :=_dag .AddDate (0,12/_ccbb ,0);return _cge (_dag ,_bad ,_agebd );};return float64 (_cgd (0,_agebd ))/float64 (_ccbb );};func _eaef (_cbdd ,_efgb ,_gdfd ,_gcge float64 ,_baab int )float64 {var _ccbg float64 ;if _cbdd ==0{_ccbg =_gcge +_gdfd *_efgb ;}else {_ageg :=_eg .Pow (1+_cbdd ,_efgb );if _baab ==1{_ccbg =_gcge *_ageg +_gdfd *(1+_cbdd )*(_ageg -1)/_cbdd ;}else {_ccbg =_gcge *_ageg +_gdfd *(_ageg -1)/_cbdd ;};};return -_ccbg ;};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_aff :data }};const _agbc =57366;

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cggb :=args [0].ValueNumber ;_fcga :=args [1].ValueNumber ;_acd :=args [2].ValueNumber ;_dfd :=_eada (_cggb ,_fcga ,_acd );if _dfd >=0{return MakeNumberResult (_dfd );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_gaag ,_bgeg :=_cbgfe (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _bgeg .Type ==ResultTypeError {return _bgeg ;};_deg :=_fdg (_gaag ._bcba );_gadb :=_fdg (_gaag ._eag );_bbcc :=_gaag ._addg ;_dgcb :=_gaag ._gfcf ;_aadc :=_aebd (_deg ,_gadb ,_bbcc ,_dgcb );_ddda ,_egaf ,_dcbg :=_aadc .Date ();return MakeNumberResult (_ced (_ddda ,int (_egaf ),_dcbg ));};

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_ccecc ,_cbad :=_dedag (args ,false );if _cbad ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_ccecc /_cbad );};var _ebgfb =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Eval evaluates and returns the result of a constant array expression.
func (_fe ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_afg :=[][]Result {};for _ ,_ba :=range _fe ._aff {_gfe :=[]Result {};for _ ,_dgf :=range _ba {_gfe =append (_gfe ,_dgf .Eval (ctx ,ev ));};_afg =append (_afg ,_gfe );};return MakeArrayResult (_afg );};const _fcfbb =57370;func _cabce (_dbcfg Result ,_gcgdf int )[]Result {_dggf :=[]Result {};switch _dbcfg .Type {case ResultTypeList :_ebfag :=_dbcfg .ValueList ;_fagg :=len (_ebfag );for _efec :=0;_efec < _gcgdf ;_efec ++{if _efec < _fagg {_dggf =append (_dggf ,_ebfag [_efec ]);}else {_dggf =append (_dggf ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _faeg :=0;_faeg < _gcgdf ;_faeg ++{_dggf =append (_dggf ,_dbcfg );};};return _dggf ;};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_dbeba ,_fecb :=_cbgfe (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _fecb .Type ==ResultTypeError {return _fecb ;};return MakeNumberResult (_faba (_dbeba ._bcba ,_dbeba ._eag ,_dbeba ._addg ,_dbeba ._gfcf ));};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_caeg :v }};

// Reference returns a string reference value to a vertical range with prefix.
func (_bfcaf PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_cfafc :=_bfcaf ._eddgc .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_bfcaf .verticalRangeReference (_cfafc .Value )};};

// String returns an empty string for EmptyExpr.
func (_gce EmptyExpr )String ()string {return ""};func _dbee (_dcddaa []Result ,_gede bool )Result {_ggee :="\u004d\u0049\u004e";if _gede {_ggee ="\u004d\u0049\u004e\u0041";};if len (_dcddaa )==0{return MakeErrorResult (_ggee +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dcbgf :=_eg .MaxFloat64 ;for _ ,_dabad :=range _dcddaa {switch _dabad .Type {case ResultTypeNumber :if (_gede ||!_dabad .IsBoolean )&&_dabad .ValueNumber < _dcbgf {_dcbgf =_dabad .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_baee :=_dbee (_dabad .ListValues (),_gede );if _baee .ValueNumber < _dcbgf {_dcbgf =_baee .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_agea :=0.0;if _gede {_agea =_dabad .AsNumber ().ValueNumber ;};if _agea < _dcbgf {_dcbgf =_agea ;};default:_da .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_ggee +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dabad .Type );};};if _dcbgf ==_eg .MaxFloat64 {_dcbgf =0;};return MakeNumberResult (_dcbgf );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_babb :=len (args );if _babb !=5&&_babb !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dfea ,_aagdd ,_dcdd :=_ega (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _dcdd .Type ==ResultTypeError {return _dcdd ;};_dgdg ,_dcdd :=_adec (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _dcdd .Type ==ResultTypeError {return _dcdd ;};if _dgdg >=_dfea {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_gdcc :=args [3].ValueNumber ;if _gdcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_ceed :=args [4].ValueNumber ;if _ceed < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_bdfg :=0;if _babb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdfg =int (args [5].ValueNumber );if !_ecgga (_bdfg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_eegd ,_dcdd :=_aedb (_dfea ,_aagdd ,_bdfg );if _dcdd .Type ==ResultTypeError {return _dcdd ;};_ggfb ,_dcdd :=_aedb (_dgdg ,_aagdd ,_bdfg );if _dcdd .Type ==ResultTypeError {return _dcdd ;};_egfg ,_dcdd :=_aedb (_dgdg ,_dfea ,_bdfg );if _dcdd .Type ==ResultTypeError {return _dcdd ;};_fcbc :=1+_ggfb *_gdcc ;_bfga :=1+_eegd *_ceed ;return MakeNumberResult ((_fcbc /_bfga -_egfg *_gdcc )*100);};

// Eval evaluates and returns the result of the cell reference.
func (_deb CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_deb ._ffd ,ev )};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _cae ,_gbcd float64 ;switch args [0].Type {case ResultTypeNumber :_gbcd =args [0].ValueNumber ;case ResultTypeString :_deae :=DateValue ([]Result {args [0]});if _deae .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_gbcd =_deae .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_cae =args [1].ValueNumber ;if _cae < 62&&_gbcd >=62{_cae --;};case ResultTypeString :_afdc :=DateValue ([]Result {args [1]});if _afdc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_cae =_afdc .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_baeb :=float64 (int (_gbcd -_cae ));return MakeNumberResult (_baeb );};type parsedReplaceObject struct{_fcggb string ;_cgfc int ;_fcgff int ;_gdgc string ;};

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_agfee :=args [0].Ref ;if _agfee .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_agfee .Value ,ev ).IsBoolean );};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;type criteriaParsed struct{_gefa bool ;_gfccg float64 ;_bceae string ;_adfc *criteriaRegex ;};func _dbcfe (_gagcb yyLexer ,_deefb *yySymType )(_cabed ,_gfecb int ){_gfecb =0;_cabed =_gagcb .Lex (_deefb );if _cabed <=0{_gfecb =_fafda [0];goto _dfgc ;};if _cabed < len (_fafda ){_gfecb =_fafda [_cabed ];goto _dfgc ;};if _cabed >=_gfgc {if _cabed < _gfgc +len (_dcef ){_gfecb =_dcef [_cabed -_gfgc ];goto _dfgc ;};};for _cffgf :=0;_cffgf < len (_cagfg );_cffgf +=2{_gfecb =_cagfg [_cffgf +0];if _gfecb ==_cabed {_gfecb =_cagfg [_cffgf +1];goto _dfgc ;};};_dfgc :if _gfecb ==0{_gfecb =_dcef [1];};if _aagg >=3{_b .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_ccgf (_gfecb ),uint (_cabed ));};return _cabed ,_gfecb ;};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_gbc :=args [0];switch _gbc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_edg :=_fdg (_gbc .ValueNumber );return MakeNumberResult (float64 (_edg .Day ()));case ResultTypeString :_cecd :=_d .ToLower (_gbc .ValueString );if !_bcg (_cecd ){_ ,_ ,_ ,_ ,_cbba ,_ggca :=_bgeb (_cecd );if _ggca .Type ==ResultTypeError {_ggca .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _ggca ;};if _cbba {return MakeNumberResult (0);};};_ ,_ ,_add ,_ ,_dbbc :=_feab (_cecd );if _dbbc .Type ==ResultTypeError {return _dbbc ;};return MakeNumberResult (float64 (_add ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};func init (){_gbfd =_ef .New (_ef .NewSource (_ge .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_bcbc ("\u0041\u0053\u0049\u004e",_eg .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_bcbc ("\u0041\u0053\u0049\u004e",_eg .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_bcbc ("\u0041\u0053\u0049\u004e",_eg .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_bcbc ("\u0041\u0043\u004f\u0054",func (_acdd float64 )float64 {return _eg .Pi /2-_eg .Atan (_acdd )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_bcbc ("\u0041\u0043\u004fT\u0048",func (_edgc float64 )float64 {return _eg .Atanh (1/_edgc )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_bcbc ("\u0041\u0053\u0049\u004e",_eg .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_bcbc ("\u0041\u0053\u0049N\u0048",_eg .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_bcbc ("\u0041\u0054\u0041\u004e",_eg .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_bcbc ("\u0041\u0054\u0041N\u0048",_eg .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_bcbc ("\u0043\u004f\u0053",_eg .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_bcbc ("\u0043\u004f\u0053\u0048",_eg .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_bbbbb ("\u0043\u004f\u0054",_eg .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_bbbbb ("\u0043\u004f\u0054\u0048",_eg .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_bbbbb ("\u0043\u0053\u0043",_eg .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_bbbbb ("\u0043\u0053\u0043",_eg .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_bcbc ("\u0045\u0058\u0050",_eg .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_bcbc ("\u004c\u004e",_eg .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_bcbc ("\u004c\u004f\u00471\u0030",_eg .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_bbbbb ("\u0053\u0045\u0043",_eg .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_bbbbb ("\u0053\u0045\u0043\u0048",_eg .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_bcbc ("\u0053\u0049\u004e",_eg .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_bcbc ("\u0053\u0049\u004e\u0048",_eg .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_bcbc ("\u0053\u0051\u0052\u0054",_eg .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_bcbc ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_bcef float64 )float64 {return _eg .Sqrt (_bcef *_eg .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_bcbc ("\u0054\u0041\u004e",_eg .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_bcbc ("\u0054\u0041\u004e\u0048",_eg .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_fbge :=MakeNumberResult (0);for _ ,_cfcce :=range args {_cfcce =_cfcce .AsNumber ();switch _cfcce .Type {case ResultTypeNumber :_fbge .ValueNumber +=_cfcce .ValueNumber *_cfcce .ValueNumber ;case ResultTypeList ,ResultTypeArray :_dega :=SumSquares (_cfcce .ListValues ());if _dega .Type !=ResultTypeNumber {return _dega ;};_fbge .ValueNumber +=_dega .ValueNumber ;case ResultTypeString :case ResultTypeError :return _cfcce ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_cfcce .Type ));};};return _fbge ;};func (_dfafe *Lexer )Next ()*node {_dfafe ._caade .Lock ();defer _dfafe ._caade .Unlock ();if len (_dfafe ._ddbe )> 0{_cfce :=_dfafe ._ddbe [0];_dfafe ._ddbe =_dfafe ._ddbe [1:];return _cfce ;};return _dfafe .nextRaw ();};

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;

// Number is a nubmer expression.
type Number struct{_debfb float64 };var _ggcac =map[string ]Function {};var _cagfg =[...]int {0};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_ceeda HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_cegc :=_ceeda .horizontalRangeReference ();if _dada ,_bdcb :=ev .GetFromCache (_cegc );_bdcb {return _dada ;};_ddgg ,_bfaa :=_acbgc (ctx ,_ceeda ._ebccge ,_ceeda ._fdega );_dbaa :=_dddfe (ctx ,ev ,_ddgg ,_bfaa );ev .SetCache (_cegc ,_dbaa );return _dbaa ;};

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_eaca ,_aagbe :=_ecbaf ("\u0046\u0049\u004e\u0044",args );if _aagbe .Type !=ResultTypeEmpty {return _aagbe ;};_eebgf :=_d .ToLower (_eaca ._cgcgf );_ggdbc :=_d .ToLower (_eaca ._gcfe );if _eebgf ==""{return MakeNumberResult (1.0);};_ebegf :=_eaca ._fcgaa -1;_fdcga :=1;_gdbcb :=0;for _egca :=range _ggdbc {if _egca !=0{_agfg :=1;if _egca -_gdbcb > 1{_agfg =2;};_fdcga +=_agfg ;};if _fdcga > _ebegf {_gfccgf :=_be .Index (_eebgf ,_ggdbc [_egca :]);if _gfccgf ==0{return MakeNumberResult (float64 (_fdcga ));};};_gdbcb =_egca ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_d .NewReader (s ));};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_efab ,_fdc :=_cbgfe (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _fdc .Type ==ResultTypeError {return _fdc ;};return MakeNumberResult (_acaa (_efab ._bcba ,_efab ._eag ,_efab ._addg ,_efab ._gfcf ));};func _dedag (_geed []Result ,_fcabb bool )(float64 ,float64 ){_acgab :=0.0;_abgec :=0.0;for _ ,_bcgg :=range _geed {switch _bcgg .Type {case ResultTypeNumber :if _fcabb ||!_bcgg .IsBoolean {_abgec +=_bcgg .ValueNumber ;_acgab ++;};case ResultTypeList ,ResultTypeArray :_gbaab ,_cgfg :=_dedag (_bcgg .ListValues (),_fcabb );_abgec +=_gbaab ;_acgab +=_cgfg ;case ResultTypeString :if _fcabb {_acgab ++;};case ResultTypeEmpty :};};return _abgec ,_acgab ;};func (_eeaab *yyParserImpl )Parse (yylex yyLexer )int {_cbgd :=_ge .Now ();var _bgbce int ;var _fcdfeb yySymType ;var _fbea []yySymType ;_ =_fbea ;_abfc :=_eeaab ._bedf [:];Nerrs :=0;Errflag :=0;_eaaf :=0;_eeaab ._gegc =-1;_dgcea :=-1;defer func (){_eaaf =-1;_eeaab ._gegc =-1;_dgcea =-1}();_cadc :=-1;goto _aaee ;_cfcgf :return 0;_dfef :return 1;_aaee :if _fbbb (_cbgd ){_da .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _dfef ;};if _aagg >=4{_b .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_ccgf (_dgcea ),_cggfd (_eaaf ));};_cadc ++;if _cadc >=len (_abfc ){_aege :=make ([]yySymType ,len (_abfc )*2);copy (_aege ,_abfc );_abfc =_aege ;};_abfc [_cadc ]=_fcdfeb ;_abfc [_cadc ]._abeca =_eaaf ;_abgg :if _fbbb (_cbgd ){_da .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _dfef ;};_bgbce =_gcca [_eaaf ];if _bgbce <=_dabaa {goto _ecgfa ;};if _eeaab ._gegc < 0{_eeaab ._gegc ,_dgcea =_dbcfe (yylex ,&_eeaab ._gacaa );};_bgbce +=_dgcea ;if _bgbce < 0||_bgbce >=_fcbde {goto _ecgfa ;};_bgbce =_daecf [_bgbce ];if _cdge [_bgbce ]==_dgcea {_eeaab ._gegc =-1;_dgcea =-1;_fcdfeb =_eeaab ._gacaa ;_eaaf =_bgbce ;if Errflag > 0{Errflag --;};goto _aaee ;};_ecgfa :if _fbbb (_cbgd ){_da .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _dfef ;};_bgbce =_gagg [_eaaf ];if _bgbce ==-2{if _eeaab ._gegc < 0{_eeaab ._gegc ,_dgcea =_dbcfe (yylex ,&_eeaab ._gacaa );};_deag :=0;for {if _ccdae [_deag +0]==-1&&_ccdae [_deag +1]==_eaaf {break ;};_deag +=2;};for _deag +=2;;_deag +=2{_bgbce =_ccdae [_deag +0];if _bgbce < 0||_bgbce ==_dgcea {break ;};};_bgbce =_ccdae [_deag +1];if _bgbce < 0{goto _cfcgf ;};};if _bgbce ==0{switch Errflag {case 0:yylex .Error (_adad (_eaaf ,_dgcea ));Nerrs ++;if _aagg >=1{_b .Printf ("\u0025\u0073",_cggfd (_eaaf ));_b .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_ccgf (_dgcea ));};fallthrough;case 1,2:Errflag =3;for _cadc >=0{_bgbce =_gcca [_abfc [_cadc ]._abeca ]+_afgb ;if _bgbce >=0&&_bgbce < _fcbde {_eaaf =_daecf [_bgbce ];if _cdge [_eaaf ]==_afgb {goto _aaee ;};};if _aagg >=2{_b .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_abfc [_cadc ]._abeca );};_cadc --;};goto _dfef ;case 3:if _aagg >=2{_b .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_ccgf (_dgcea ));};if _dgcea ==_bdgcd {goto _dfef ;};_eeaab ._gegc =-1;_dgcea =-1;goto _abgg ;};};if _aagg >=2{_b .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_bgbce ,_cggfd (_eaaf ));};_eddb :=_bgbce ;_baacd :=_cadc ;_ =_baacd ;_cadc -=_ffab [_bgbce ];if _cadc +1>=len (_abfc ){_fgffb :=make ([]yySymType ,len (_abfc )*2);copy (_fgffb ,_abfc );_abfc =_fgffb ;};_fcdfeb =_abfc [_cadc +1];_bgbce =_gbbaa [_bgbce ];_bffc :=_cfag [_bgbce ];_ecfdg :=_bffc +_abfc [_cadc ]._abeca +1;if _ecfdg >=_fcbde {_eaaf =_daecf [_bffc ];}else {_eaaf =_daecf [_ecfdg ];if _cdge [_eaaf ]!=-_bgbce {_eaaf =_daecf [_bffc ];};};switch _eddb {case 1:_fbea =_abfc [_baacd -1:_baacd +1];{yylex .(*plex )._adfg =_fcdfeb ._ebdgea ;};case 3:_fbea =_abfc [_baacd -2:_baacd +1];{_fcdfeb ._ebdgea =_fbea [2]._ebdgea ;};case 4:_fbea =_abfc [_baacd -4:_baacd +1];{};case 5:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewBool (_fbea [1]._cgfa ._bgfdb );};case 6:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewNumber (_fbea [1]._cgfa ._bgfdb );};case 7:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewString (_fbea [1]._cgfa ._bgfdb );};case 8:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewError (_fbea [1]._cgfa ._bgfdb );};case 9:_fbea =_abfc [_baacd -2:_baacd +1];{_fcdfeb ._ebdgea =_fbea [2]._ebdgea ;};case 10:_fbea =_abfc [_baacd -2:_baacd +1];{_fcdfeb ._ebdgea =NewNegate (_fbea [2]._ebdgea );};case 15:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =_fbea [2]._ebdgea ;};case 17:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewConstArrayExpr (_fbea [2]._daad );};case 18:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._daad =append (_fcdfeb ._daad ,_fbea [1]._dcge );};case 19:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._daad =append (_fbea [1]._daad ,_fbea [3]._dcge );};case 20:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._dcge =append (_fcdfeb ._dcge ,_fbea [1]._ebdgea );};case 21:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._dcge =append (_fbea [1]._dcge ,_fbea [3]._ebdgea );};case 23:_fbea =_abfc [_baacd -2:_baacd +1];{_fcdfeb ._ebdgea =NewPrefixExpr (_fbea [1]._ebdgea ,_fbea [2]._ebdgea );};case 25:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewSheetPrefixExpr (_fbea [1]._cgfa ._bgfdb );};case 26:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewCellRef (_fbea [1]._cgfa ._bgfdb );};case 27:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewRange (_fbea [1]._ebdgea ,_fbea [3]._ebdgea );};case 28:_fbea =_abfc [_baacd -4:_baacd +1];{_fcdfeb ._ebdgea =NewPrefixRangeExpr (_fbea [1]._ebdgea ,_fbea [2]._ebdgea ,_fbea [4]._ebdgea );};case 29:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewNamedRangeRef (_fbea [1]._cgfa ._bgfdb );};case 30:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewHorizontalRange (_fbea [1]._cgfa ._bgfdb );};case 31:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._ebdgea =NewVerticalRange (_fbea [1]._cgfa ._bgfdb );};case 32:_fbea =_abfc [_baacd -2:_baacd +1];{_fcdfeb ._ebdgea =NewPrefixHorizontalRange (_fbea [1]._ebdgea ,_fbea [2]._cgfa ._bgfdb );};case 33:_fbea =_abfc [_baacd -2:_baacd +1];{_fcdfeb ._ebdgea =NewPrefixVerticalRange (_fbea [1]._ebdgea ,_fbea [2]._cgfa ._bgfdb );};case 34:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypePlus ,_fbea [3]._ebdgea );};case 35:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeMinus ,_fbea [3]._ebdgea );};case 36:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeMult ,_fbea [3]._ebdgea );};case 37:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeDiv ,_fbea [3]._ebdgea );};case 38:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeExp ,_fbea [3]._ebdgea );};case 39:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeLT ,_fbea [3]._ebdgea );};case 40:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeGT ,_fbea [3]._ebdgea );};case 41:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeLEQ ,_fbea [3]._ebdgea );};case 42:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeGEQ ,_fbea [3]._ebdgea );};case 43:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeEQ ,_fbea [3]._ebdgea );};case 44:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeNE ,_fbea [3]._ebdgea );};case 45:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewBinaryExpr (_fbea [1]._ebdgea ,BinOpTypeConcat ,_fbea [3]._ebdgea );};case 47:_fbea =_abfc [_baacd -2:_baacd +1];{_fcdfeb ._ebdgea =NewFunction (_fbea [1]._cgfa ._bgfdb ,nil );};case 48:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._ebdgea =NewFunction (_fbea [1]._cgfa ._bgfdb ,_fbea [2]._dcge );};case 49:_fbea =_abfc [_baacd -1:_baacd +1];{_fcdfeb ._dcge =append (_fcdfeb ._dcge ,_fbea [1]._ebdgea );};case 50:_fbea =_abfc [_baacd -3:_baacd +1];{_fcdfeb ._dcge =append (_fbea [1]._dcge ,_fbea [3]._ebdgea );};case 53:_fbea =_abfc [_baacd -0:_baacd +1];{_fcdfeb ._ebdgea =NewEmptyExpr ();};};goto _aaee ;};const _gaeba =57365;

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_babc :=args [0].AsString ();if _babc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_babc .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_babc .ValueString [0]));};func _bba (_caab ,_fccc _ge .Time ,_gegf int )_ge .Time {_defg :=_ge .Date (_caab .Year (),_fccc .Month (),_fccc .Day (),0,0,0,0,_ge .UTC );if _defg .After (_caab ){_defg =_defg .AddDate (-1,0,0);};for !_defg .After (_caab ){_defg =_defg .AddDate (0,12/_gegf ,0);};return _defg ;};var _cdge =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};func _ggdf (_egcg ,_bbcab []string )[]string {for _ ,_bdcf :=range _bbcab {_egcg =append (_egcg ,_bdcf );};return _egcg ;};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_eedf (args ,_cccb ))};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_baca ,_debba ,_defge Expression };func _bbcbf (_aded []Result )[]rangeIndex {_cadeb :=[]rangeIndex {};_fgaa :=len (_aded );for _efcbe :=0;_efcbe < _fgaa -1;_efcbe +=2{_fagfa :=[]rangeIndex {};_geaaa :=_agfeg (_aded [_efcbe ]);_eefc :=_cfgd (_aded [_efcbe +1]);if _efcbe ==0{for _fdaee ,_gdae :=range _geaaa {for _fgbcc ,_dddeg :=range _gdae {if _efba (_dddeg ,_eefc ){_fagfa =append (_fagfa ,rangeIndex {_fdaee ,_fgbcc });};};};}else {for _ ,_cgbg :=range _cadeb {_gccec :=_geaaa [_cgbg ._gddd ][_cgbg ._ddaad ];if _efba (_gccec ,_eefc ){_fagfa =append (_fagfa ,_cgbg );};};};if len (_fagfa )==0{return []rangeIndex {};};_cadeb =_fagfa [:];};return _cadeb ;};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_eddgc Expression ;_fddaf ,_ccggd string ;};

// Update updates the horizontal range references after removing a row/column.
func (_aegc HorizontalRange )Update (q *_ag .UpdateQuery )Expression {return _aegc };

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ecgd :=args [0].AsNumber ();if _ecgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ebcfc :=args [1].AsNumber ();if _ebcfc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_eg .Pow (_ecgd .ValueNumber ,_ebcfc .ValueNumber ));};const (_ byte =iota ;_dfdge ;_beedf ;_efagc ;_gecc ;_cbddb ;);

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_afec PrefixVerticalRange )Update (q *_ag .UpdateQuery )Expression {if q .UpdateType ==_ag .UpdateActionRemoveColumn {_ccbe :=_afec ;_cbea :=_afec ._eddgc .String ();if _cbea ==q .SheetToUpdate {_dgdge :=q .ColumnIdx ;_ccbe ._fddaf =_ggf (_afec ._fddaf ,_dgdge );_ccbe ._ccggd =_ggf (_afec ._ccggd ,_dgdge );};return _ccbe ;};return _afec ;};

// Eval evaluates and returns a boolean.
func (_bee Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_bee ._ac )};var _cfag =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};func _cgbb (_abab string )string {_abab =_d .Replace (_abab ,"\u000a","\u005c\u006e",-1);_abab =_d .Replace (_abab ,"\u000d","\u005c\u0072",-1);_abab =_d .Replace (_abab ,"\u0009","\u005c\u0074",-1);return _abab ;};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_decc :=args [0].AsNumber ();if _decc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_cbbd :=float64 (1);if _decc .ValueNumber < 0{_cbbd =-1;};if len (args )> 1{_ffeg :=args [1].AsNumber ();if _ffeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbbd =_ffeg .ValueNumber ;};_egaa :=float64 (1);if len (args )> 2{_bdfde :=args [2].AsNumber ();if _bdfde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_egaa =_bdfde .ValueNumber ;};if len (args )==1{return MakeNumberResult (_eg .Ceil (_decc .ValueNumber ));};_cdbe :=_decc .ValueNumber ;_cdbe ,_dabc :=_eg .Modf (_cdbe /_cbbd );if _dabc !=0{if _decc .ValueNumber > 0{_cdbe ++;}else if _egaa < 0{_cdbe --;};};return MakeNumberResult (_cdbe *_cbbd );};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bfeg :=_ge .Now ();_ ,_gaff :=_bfeg .Zone ();_ccec :=_bed +float64 (_bfeg .Unix ()+int64 (_gaff ))/86400;return MakeNumberResult (_ccec );};const _bfffa =57362;

// Update updates the FunctionCall references after removing a row/column.
func (_afcd FunctionCall )Update (q *_ag .UpdateQuery )Expression {_feag :=[]Expression {};for _ ,_abbc :=range _afcd ._aaec {_gdafdd :=_abbc .Update (q );_feag =append (_feag ,_gdafdd );};return FunctionCall {_aecc :_afcd ._aecc ,_aaec :_feag };};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_dadd ,_decaga :=_ecbaf ("\u0046\u0049\u004e\u0044",args );if _decaga .Type !=ResultTypeEmpty {return _decaga ;};_dfgf :=_d .ToLower (_dadd ._cgcgf );if _dfgf ==""{return MakeNumberResult (1.0);};_egea :=_d .ToLower (_dadd ._gcfe );_eafd :=_dadd ._fcgaa ;_acaeg :=1;for _bfbgd :=range _egea {if _acaeg < _eafd {_acaeg ++;continue ;};_egab :=_be .Index (_dfgf ,_egea [_bfbgd :]);if _egab ==0{return MakeNumberResult (float64 (_acaeg ));};_acaeg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// String returns a string of a range.
func (_bdbbb Range )String ()string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_bdbbb ._gdcbe .String (),_bdbbb ._bgdg .String ());};

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_eaag :=_ffbca (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _eaag .Type !=ResultTypeEmpty {return _eaag ;};_ggcaa :=_bbcbf (args [1:]);_ebef :=_eg .MaxFloat64 ;_ffefg :=_agfeg (args [0]);for _ ,_dccfb :=range _ggcaa {_cdddc :=_ffefg [_dccfb ._gddd ][_dccfb ._ddaad ].ValueNumber ;if _ebef > _cdddc {_ebef =_cdddc ;};};if _ebef ==_eg .MaxFloat64 {_ebef =0;};return MakeNumberResult (float64 (_ebef ));};

// GetWidth returns 0 for the invalid reference context.
func (_cffa *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_geeb :=args [0].AsNumber ();_accb :=args [1].AsNumber ();if _geeb .Type !=ResultTypeNumber ||_accb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _accb .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_bdee ,_cceag :=_eg .Modf (_geeb .ValueNumber /_accb .ValueNumber );if _cceag < 0{_bdee --;};return MakeNumberResult (_geeb .ValueNumber -_accb .ValueNumber *_bdee );};func _fdfeb (_faabd ,_gabb Expression )(Expression ,Expression ,error ){_gbfda ,_dccbad :=_faabd .(CellRef );if !_dccbad {return nil ,nil ,_aa .New (_b .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_faabd .String ()));};_bcfaf ,_dccbad :=_gabb .(CellRef );if !_dccbad {return nil ,nil ,_aa .New (_b .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_gabb .String ()));};_bege ,_aceab :=_ege .ParseCellReference (_gbfda ._ffd );if _aceab !=nil {return nil ,nil ,_aceab ;};_aeee ,_fgdgb :=_ege .ParseCellReference (_bcfaf ._ffd );if _fgdgb !=nil {return nil ,nil ,_fgdgb ;};_egbce :=false ;if _bege .RowIdx > _aeee .RowIdx {_egbce =true ;_bege .RowIdx ,_aeee .RowIdx =_aeee .RowIdx ,_bege .RowIdx ;};if _bege .ColumnIdx > _aeee .ColumnIdx {_egbce =true ;_bege .ColumnIdx ,_aeee .ColumnIdx =_aeee .ColumnIdx ,_bege .ColumnIdx ;_bege .Column ,_aeee .Column =_aeee .Column ,_bege .Column ;};if _egbce {return NewCellRef (_bege .String ()),NewCellRef (_aeee .String ()),nil ;};return _faabd ,_gabb ,nil ;};func _febad (_bcgbf Reference ,_fcdac Context )bool {return _fcdac .Sheet (_bcgbf .Value )==InvalidReferenceContext ;};

// String returns a string representation of PrefixExpr.
func (_adegc PrefixExpr )String ()string {return _b .Sprintf ("\u0025\u0073\u0021%\u0073",_adegc ._ceeeg .String (),_adegc ._bcfd .String ());};const _beddd =57375;func (_fdfea *noCache )GetFromCache (key string )(Result ,bool ){return _fea ,false };func _ffbca (_dceb []Result ,_ddeb bool ,_fdfda string )Result {var _affa ,_gfag string ;if _ddeb {_affa ="\u0074\u0068\u0072e\u0065";_gfag ="\u006f\u0064\u0064";}else {_affa ="\u0074\u0077\u006f";_gfag ="\u0065\u0076\u0065\u006e";};_edef :=len (_dceb );if (_ddeb &&_edef < 3)||(!_ddeb &&_edef < 2){return MakeErrorResult (_fdfda +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_affa +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_edef /2*2==_edef )==_ddeb {return MakeErrorResult (_fdfda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_gfag +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_dcbe :=-1;_bbbg :=-1;for _eadab :=0;_eadab < _edef ;_eadab +=2{_aefbf :=_dceb [_eadab ];if _aefbf .Type !=ResultTypeArray &&_aefbf .Type !=ResultTypeList {return MakeErrorResult (_fdfda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_ffg :=_agfeg (_aefbf );if _bbbg ==-1{_bbbg =len (_ffg );_dcbe =len (_ffg [0]);}else if len (_ffg )!=_bbbg ||len (_ffg [0])!=_dcbe {return MakeErrorResult (_fdfda +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _ddeb &&_eadab ==0{_eadab --;};};return _fea ;};

// GetFormat returns an empty string for the invalid reference context.
func (_bdggb *ivr )GetFormat (cellRef string )string {return ""};type rmode byte ;func _feae (_aace ,_dcdb ,_cbgb ,_aegg ,_bgge float64 ,_bgcg int )float64 {_edd :=_bcab (_aace ,_cbgb ,_aegg ,_bgge ,_bgcg );var _caec float64 ;if _dcdb ==1{if _bgcg ==1{_caec =0;}else {_caec =-_aegg ;};}else {if _bgcg ==1{_caec =_eaef (_aace ,_dcdb -2,_edd ,_aegg ,1)-_edd ;}else {_caec =_eaef (_aace ,_dcdb -1,_edd ,_aegg ,0);};};return _caec *_aace ;};func _cggfd (_agbf int )string {if _agbf >=0&&_agbf < len (_fdggg ){if _fdggg [_agbf ]!=""{return _fdggg [_agbf ];};};return _b .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_agbf );};func _efegb (_cdddd []Result ,_eagac rmode )Result {if len (_cdddd )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_aead :=_cdddd [0].AsNumber ();if _aead .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbgdf :=_cdddd [1].AsNumber ();if _fbgdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbba :=_fbgdf .ValueNumber ;_gfgb :=_aead .ValueNumber ;_dfbdb :=1.0;if _dbba > 0{_dfbdb =_eg .Pow (1/10.0,_dbba );}else {_dfbdb =_eg .Pow (10.0,-_dbba );};_gfgb ,_dcdde :=_eg .Modf (_gfgb /_dfbdb );switch _eagac {case _gfaf :const _bebef =0.499999999;if _dcdde >=_bebef {_gfgb ++;}else if _dcdde <=-_bebef {_gfgb --;};case _dfae :case _cagbe :if _dcdde > 0{_gfgb ++;}else if _dcdde < 0{_gfgb --;};};return MakeNumberResult (_gfgb *_dfbdb );};func _cffd (_ffbag string ,_egge _ge .Time )(_ge .Time ,error ){_gcde ,_ ,_ffcf :=_ce .ParseFloat (_ffbag ,10,128,_ce .ToNearestEven );if _ffcf !=nil {return _ge .Time {},_ffcf ;};_dabgc :=new (_ce .Float );_dabgc .SetUint64 (uint64 (24*_ge .Hour ));_gcde .Mul (_gcde ,_dabgc );_dcfab ,_ :=_gcde .Uint64 ();_cfbf :=_egge .Add (_ge .Duration (_dcfab ));return _cfeg (_cfbf ),nil ;};

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ee :lhs ,_ca :rhs ,_dc :op };};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_dbfb :=_d .Split (v ,"\u003a");if len (_dbfb )!=2{return nil ;};_ccgfc ,_ :=_ae .Atoi (_dbfb [0]);_bdcg ,_ :=_ae .Atoi (_dbfb [1]);if _ccgfc > _bdcg {_ccgfc ,_bdcg =_bdcg ,_ccgfc ;};return PrefixHorizontalRange {_dffd :pfx ,_badg :_ccgfc ,_abdgc :_bdcg };};

// Reference returns an invalid reference for ConstArrayExpr.
func (_cdd ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ecabe :=args [0].AsString ();_bfbg :=args [1].AsString ();if _ecabe .Type !=ResultTypeString ||_bfbg .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_ecabe .ValueString ==_bfbg .ValueString );};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_geba :=_d .ToLower (args [0].ValueString );if !_bcgd (_geba ){_ ,_ ,_ ,_fbbd ,_fgga :=_feab (_geba );if _fgga .Type ==ResultTypeError {_fgga .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _fgga ;};if _fbbd {return MakeNumberResult (0);};};_gaec ,_edf ,_fcb ,_ebb ,_ ,_fcc :=_bgeb (_geba );if _fcc .Type ==ResultTypeError {return _fcc ;};_caeb :=_eada (float64 (_gaec ),float64 (_edf ),_fcb );if _ebb {_caeb +=0.5;}else if _caeb >=1{_caeb -=float64 (int (_caeb ));};return MakeNumberResult (_caeb );};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_caeg string };func (_gadd *evCache )SetCache (key string ,value Result ){_gadd ._ebf .Lock ();_gadd ._fbe [key ]=value ;_gadd ._ebf .Unlock ();};func _ffegc ()yyParser {return &yyParserImpl {}};func _ecbaf (_bbfe string ,_dfbdf []Result )(*parsedSearchObject ,Result ){_cbfccc :=len (_dfbdf );if _cbfccc !=2&&_cbfccc !=3{return nil ,MakeErrorResult (_bbfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdfbb :=_dfbdf [0];if _bdfbb .Type ==ResultTypeError {return nil ,_bdfbb ;};if _bdfbb .Type !=ResultTypeString &&_bdfbb .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_aabbf :=_dfbdf [1];if _aabbf .Type ==ResultTypeError {return nil ,_aabbf ;};if _aabbf .Type !=ResultTypeString &&_aabbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_gaced :=_aabbf .Value ();_acbg :=_bdfbb .Value ();_dcbcg :=1;if _cbfccc ==3&&_dfbdf [2].Type !=ResultTypeEmpty {_aega :=_dfbdf [2];if _aega .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_dcbcg =int (_aega .ValueNumber );if _dcbcg < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _dcbcg > len (_gaced ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_acbg ,_gaced ,_dcbcg },_fea ;};

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bfagf :=args [0].AsString ();if _bfagf .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_bcfac :=args [1].AsNumber ();if _bcfac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggcef :=_bfagf .ValueString ;if len (_ggcef )> 2&&(_d .HasPrefix (_ggcef ,"\u0030\u0078")||_d .HasPrefix (_ggcef ,"\u0030\u0058")){_ggcef =_ggcef [2:];};_cbde ,_bgedb :=_ae .ParseInt (_ggcef ,int (_bcfac .ValueNumber ),64);if _bgedb !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_cbde ));};

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_aefb :=ctx .GetEpoch ();_cbc ,_gcg :=_cffd (args [0].Value (),_aefb );if _gcg !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_cbc .Year ()));};func init (){_gfff ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_ceeeg Expression ;_bcfd Expression ;};

// String is a string expression.
type String struct{_cfbdb string };const _gfgc =57344;type xargs struct{_bfdfc []float64 ;_ddce []float64 ;};var _fdaf ,_bfge ,_edbc ,_abdac ,_dacga ,_agga *_bc .Regexp ;

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _deecf :=0;_deecf < len (args )-1;_deecf +=2{if args [_deecf ].ValueNumber ==1{return args [_deecf +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfcd :=args [0].ValueNumber ;if _bfcd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cfaa :=args [1].ValueNumber ;if _cfaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bffa :=args [2].ValueNumber ;if _bffa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_eg .Pow (_bffa /_cfaa ,1/_bfcd )-1);};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_cebg :=_ffbca (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _cebg .Type !=ResultTypeEmpty {return _cebg ;};_bega :=_bbcbf (args );return MakeNumberResult (float64 (len (_bega )));};func LexReader (r _c .Reader )chan *node {_fadd :=NewLexer ();go _fadd .lex (r );return _fadd ._bdff };

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gcagg :=args [0].AsNumber ();_aaea :=args [1].AsNumber ();if _gcagg .Type !=ResultTypeNumber ||_aaea .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_efeg :=_eg .Trunc (_gcagg .ValueNumber );_fefe :=_eg .Trunc (_aaea .ValueNumber );if _fefe > _efeg {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _fefe ==_efeg ||_fefe ==0{return MakeNumberResult (1);};_eadef :=float64 (1);for _ddec :=float64 (1);_ddec <=_fefe ;_ddec ++{_eadef *=(_efeg +1-_ddec )/_ddec ;};return MakeNumberResult (_eadef );};

// Error is called in the case of parsing error and saves an error to a plex.
func (_cafgd *plex )Error (s string ){_da .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_cafgd ._afca =s ;};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_eegfd .Lock ();defer _eegfd .Unlock ();if _gagf ,_afef :=_ggcac [name ];_afef {return _gagf ;};return nil ;};type rangeIndex struct{_gddd int ;_ddaad int ;};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};func _baga (_ceg []Result ,_bedga string )(float64 ,float64 ,Result ){if len (_ceg )!=2{return 0,0,MakeErrorResult (_bedga +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ceg [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bedga +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_facc :=_ceg [0].ValueNumber ;if _ceg [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_bedga +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bab :=float64 (int (_ceg [1].ValueNumber ));if _bab < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_bedga +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _facc ,_bab ,_fea ;};func _adec (_ecbf Result ,_dgac ,_fee string )(float64 ,Result ){var _febd float64 ;switch _ecbf .Type {case ResultTypeNumber :_febd =float64 (int (_ecbf .ValueNumber ));case ResultTypeString :_fgce :=DateValue ([]Result {_ecbf });if _fgce .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_dgac +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_fee );};_febd =_fgce .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_fee );};if _febd < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_dgac +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _febd ,_fea ;};

// Update updates references in the Negate after removing a row/column.
func (_geceg Negate )Update (q *_ag .UpdateQuery )Expression {return Negate {_aafc :_geceg ._aafc .Update (q )};};func _bb (_fd ,_cf [][]Result )bool {if len (_fd )!=len (_cf ){return false ;};for _dce :=range _fd {if len (_fd [_dce ])!=len (_cf [_dce ]){return false ;};};return true ;};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_dffb :=len (args );if _dffb !=4&&_dffb !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efdb ,_ebcc ,_baef :=_ega (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _baef .Type ==ResultTypeError {return _baef ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_adga :=args [2].ValueNumber ;if _adga <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_acea :=args [3].ValueNumber ;if _acea <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_bcdeg :=0;if _dffb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_bcdeg =int (args [4].ValueNumber );if !_ecgga (_bcdeg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_gcf ,_baef :=_aedb (_efdb ,_ebcc ,_bcdeg );if _baef .Type ==ResultTypeError {return _baef ;};return MakeNumberResult ((_acea -_adga )/_adga /_gcf );};

// SetLocked does nothing for the invalid reference context.
func (_fbaa *ivr )SetLocked (cellRef string ,locked bool ){};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;const _fdbe =57378;

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _c .Reader )Expression {_edcf :=&plex {_efae :LexReader (r )};_ffafc (_edcf );if _edcf ._afca !=""{return nil ;};return _edcf ._adfg ;};

// String returns a string representation of a horizontal range with prefix.
func (_abbfc PrefixHorizontalRange )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_abbfc ._dffd .String (),_abbfc ._badg ,_abbfc ._abdgc );};type durationArgs struct{_bagdg float64 ;_bdad float64 ;_dgec float64 ;_bbda float64 ;_ebcf float64 ;_cfa int ;};

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_efgd :=args [1].ValueNumber ;_cdaf :=args [0];var _geb float64 ;switch _cdaf .Type {case ResultTypeEmpty :_geb =0;case ResultTypeNumber :_geb =_cdaf .ValueNumber ;case ResultTypeString :_fgc :=DateValue ([]Result {args [0]});if _fgc .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_geb =_fgc .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_ccbd :=_fdg (_geb );_abb :=_ccbd .AddDate (0,int (_efgd +1),0);_bge ,_fec ,_ :=_abb .Date ();_gae :=_ced (_bge ,int (_fec ),0);if _gae < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _bge ==1900&&_fec ==3{_gae --;};return MakeNumberResult (_gae );};var (_aagg =0;_ffbbe =false ;);var _gbbaa =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func (_efa BinOpType )String ()string {if _efa >=BinOpType (len (_gd )-1){return _b .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_efa );};return _ccb [_gd [_efa ]:_gd [_efa +1]];};const _agfeb int =30;

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_dbfec ,_dbfcd :=_bafd ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _dbfcd .Type !=ResultTypeEmpty {return _dbfcd ;};_fcbdf :=_dbfec ._fcggb ;_becbb :=_dbfec ._cgfc ;_aecf :=_dbfec ._fcgff ;_gaceg :=_dbfec ._gdgc ;_fbeb :=len (_fcbdf );if _becbb > _fbeb {_becbb =_fbeb ;};_abgaf :=_becbb +_aecf ;if _abgaf > _fbeb {_abgaf =_fbeb ;};_edca :=_fcbdf [0:_becbb ]+_gaceg +_fcbdf [_abgaf :];return MakeStringResult (_edca );};const _dabaa =-1000;

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_fcd EmptyExpr )Update (q *_ag .UpdateQuery )Expression {return _fcd };const _caaa =57364;func _ddaa (_ggdg ,_gdeg []float64 ,_feged float64 )float64 {_dbgg :=_feged +1;_cdeb :=0.0;_bagf :=len (_ggdg );_aabc :=_gdeg [0];for _aedc :=1;_aedc < _bagf ;_aedc ++{_aggf :=(_gdeg [_aedc ]-_aabc )/365;_cdeb -=_aggf *_ggdg [_aedc ]/_eg .Pow (_dbgg ,_aggf +1);};return _cdeb ;};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaeac :=args [0].AsString ();if _gaeac .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_gaeac .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_gaeac .ValueString [0]));};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bcf :=_d .ToLower (args [0].ValueString );if !_bcg (_bcf ){_ ,_ ,_ ,_ ,_bbb ,_gba :=_bgeb (_bcf );if _gba .Type ==ResultTypeError {_gba .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _gba ;};if _bbb {return MakeNumberResult (0);};};_cgcd ,_eeb ,_abf ,_ ,_bce :=_feab (_bcf );if _bce .Type ==ResultTypeError {return _bce ;};return MakeNumberResult (_ced (_cgcd ,_eeb ,_abf ));};const _fcf =86400000000000;var _gfge []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};func _ecgga (_fdbc int )bool {return _fdbc >=0&&_fdbc <=4};

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_dbfgd :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_bffaa :=args [1].ValueNumber !=0;_gcgf :=_abec (args [2:],[]string {},_bffaa );return MakeStringResult (_d .Join (_gcgf ,_dbfgd ));};var _ddbag =[...]uint8 {0,20,37,60,78,96};func _dddfe (_beae Context ,_ddcf Evaluator ,_bbfgc ,_gedcc string )Result {_aeebe ,_decbe :=_ege .ParseCellReference (_bbfgc );if _decbe !=nil {return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bbfgc ,_decbe .Error ()));};_ffgd ,_afdb :=_aeebe .ColumnIdx ,_aeebe .RowIdx ;_beccd ,_dcff :=_ege .ParseCellReference (_gedcc );if _dcff !=nil {return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_gedcc ,_dcff .Error ()));};_cfcfc ,_bgefb :=_beccd .ColumnIdx ,_beccd .RowIdx ;_ccgge :=[][]Result {};for _fgfed :=_afdb ;_fgfed <=_bgefb ;_fgfed ++{_cfced :=[]Result {};for _eedg :=_ffgd ;_eedg <=_cfcfc ;_eedg ++{_gegfd :=_beae .Cell (_b .Sprintf ("\u0025\u0073\u0025\u0064",_ege .IndexToColumn (_eedg ),_fgfed ),_ddcf );_cfced =append (_cfced ,_gegfd );};_ccgge =append (_ccgge ,_cfced );};if len (_ccgge )==1{if len (_ccgge [0])==1{return _ccgge [0][0];};return MakeListResult (_ccgge [0]);};return MakeArrayResult (_ccgge );};

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ddbf :=args [0].AsString ();if _ddbf .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_d .ToUpper (_ddbf .ValueString ));};

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afbb :=args [0].AsNumber ();if _afbb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_eg .Pi /180.0*_afbb .ValueNumber );};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_aafc :e }};const _ccef =57357;func (_badcb *noCache )SetCache (key string ,value Result ){};type parsedSearchObject struct{_cgcgf string ;_gcfe string ;_fcgaa int ;};

// Negate is a negate expression like -A1.
type Negate struct{_aafc Expression };func _cd (_af Result )bool {if _af .Type ==ResultTypeString {return _af .ValueString =="";};return _af .ValueNumber ==0;};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebeecg :=args [0].AsNumber ();if _ebeecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _ebeecg .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_cfdcb :=float64 (1);_eebe :=_eg .Trunc (_ebeecg .ValueNumber );for _fdce :=_eebe ;_fdce > 1;_fdce -=2{_cfdcb *=_fdce ;};return MakeNumberResult (_cfdcb );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_gecd :=len (args );if _gecd !=5&&_gecd !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_edb ,_cdbg ,_dbccb :=_ega (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dbccb .Type ==ResultTypeError {return _dbccb ;};_abbf ,_dbccb :=_adec (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dbccb .Type ==ResultTypeError {return _dbccb ;};if _abbf >=_edb {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_eagbf :=args [3].ValueNumber ;if _eagbf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_bgca :=args [4].ValueNumber ;if _bgca <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_fecd :=0;if _gecd ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fecd =int (args [5].ValueNumber );if !_ecgga (_fecd ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_dfcga ,_dbccb :=_aedb (_abbf ,_cdbg ,_fecd );if _dbccb .Type ==ResultTypeError {return _dbccb ;};_cebb ,_dbccb :=_aedb (_abbf ,_edb ,_fecd );if _dbccb .Type ==ResultTypeError {return _dbccb ;};_edga ,_dbccb :=_aedb (_edb ,_cdbg ,_fecd );if _dbccb .Type ==ResultTypeError {return _dbccb ;};_cgdg :=1+_dfcga *_eagbf ;_cgdg /=_bgca /100+_cebb *_eagbf ;_cgdg --;_cgdg /=_edga ;return MakeNumberResult (_cgdg );};func _ggbed (_dfbd ,_cggg ,_aefba ,_fgab ,_fgcfc float64 )float64 {var _dddg float64 ;_ffbb :=_fgcfc /_aefba ;if _ffbb >=1{_ffbb =1;if _fgab ==1{_dddg =_dfbd ;}else {_dddg =0;};}else {_dddg =_dfbd *_eg .Pow (1-_ffbb ,_fgab -1);};_ddde :=_dfbd *_eg .Pow (1-_ffbb ,_fgab );var _aaaed float64 ;if _ddde < _cggg {_aaaed =_dddg -_cggg ;}else {_aaaed =_dddg -_ddde ;};if _aaaed < 0{_aaaed =0;};return _aaaed ;};func _cdabc (_efdcg Result ,_ccbcg ,_dcabg string )(float64 ,Result ){switch _efdcg .Type {case ResultTypeEmpty :return 0,_fea ;case ResultTypeNumber :return _efdcg .ValueNumber ,_fea ;case ResultTypeString :_befeg ,_gfec :=_ae .ParseFloat (_efdcg .ValueString ,64);if _gfec !=nil {return 0,MakeErrorResult (_dcabg +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_ccbcg );};return _befeg ,_fea ;default:return 0,MakeErrorResult (_ccbcg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_dcabg +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};func _dgfb (_gacd ,_ebbc Result ,_dedd ,_ggae bool )cmpResult {_gacd =_gacd .AsNumber ();_ebbc =_ebbc .AsNumber ();if _gacd .Type !=_ebbc .Type {return _dca ;};if _gacd .Type ==ResultTypeNumber {if _gacd .ValueNumber ==_ebbc .ValueNumber {return _deda ;};if _gacd .ValueNumber < _ebbc .ValueNumber {return _ecgf ;};return _cade ;};if _gacd .Type ==ResultTypeString {_dbacc :=_gacd .ValueString ;_abfa :=_ebbc .ValueString ;if !_dedd {_dbacc =_d .ToLower (_dbacc );_abfa =_d .ToLower (_abfa );};if _ggae {_cfeb :=_be .Match (_abfa ,_dbacc );if _cfeb {return _deda ;}else {return _cade ;};};return cmpResult (_d .Compare (_dbacc ,_abfa ));};if _gacd .Type ==ResultTypeEmpty {return _deda ;};if _gacd .Type ==ResultTypeList {if len (_gacd .ValueList )< len (_ebbc .ValueList ){return _ecgf ;};if len (_gacd .ValueList )> len (_ebbc .ValueList ){return _cade ;};for _ddb :=range _gacd .ValueList {_baac :=_dgfb (_gacd .ValueList [_ddb ],_ebbc .ValueList [_ddb ],_dedd ,_ggae );if _baac !=_deda {return _baac ;};};return _deda ;};if _gacd .Type ==ResultTypeList {if len (_gacd .ValueArray )< len (_ebbc .ValueArray ){return _ecgf ;};if len (_gacd .ValueArray )> len (_ebbc .ValueArray ){return _cade ;};for _adeg :=range _gacd .ValueArray {_gfbf :=_gacd .ValueArray [_adeg ];_dfga :=_gacd .ValueArray [_adeg ];if len (_gfbf )< len (_dfga ){return _ecgf ;};if len (_gfbf )> len (_dfga ){return _cade ;};for _cfae :=range _gfbf {_agff :=_dgfb (_gfbf [_cfae ],_dfga [_cfae ],_dedd ,_ggae );if _agff !=_deda {return _agff ;};};};return _deda ;};return _dca ;};

// HasFormula returns FALSE for the invalid reference context.
func (_gfgfe *ivr )HasFormula (cellRef string )bool {return false };

// Bool is a boolean expression.
type Bool struct{_ac bool };var _bdg =map[string ]*_bc .Regexp {};func (_fgbbc *ivr )SetOffset (col ,row uint32 ){};const _cabf =57346;

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_eadag string };func _bcab (_bgbg ,_accf ,_ffaa ,_bcfgc float64 ,_bebe int )float64 {var _fdgb float64 ;if _bgbg ==0{_fdgb =(_ffaa +_bcfgc )/_accf ;}else {_bcde :=_eg .Pow (1+_bgbg ,_accf );if _bebe ==1{_fdgb =(_bcfgc *_bgbg /(_bcde -1)+_ffaa *_bgbg /(1-1/_bcde ))/(1+_bgbg );}else {_fdgb =_bcfgc *_bgbg /(_bcde -1)+_ffaa *_bgbg /(1-1/_bcde );};};return -_fdgb ;};func _abec (_cfed []Result ,_bcacd []string ,_ebcbg bool )[]string {for _ ,_fcgffd :=range _cfed {switch _fcgffd .Type {case ResultTypeEmpty :if !_ebcbg {_bcacd =append (_bcacd ,"");};case ResultTypeString :if _fcgffd .ValueString !=""||!_ebcbg {_bcacd =append (_bcacd ,_fcgffd .ValueString );};case ResultTypeNumber :_bcacd =append (_bcacd ,_fcgffd .Value ());case ResultTypeList :_bcacd =_ggdf (_bcacd ,_abec (_fcgffd .ValueList ,[]string {},_ebcbg ));case ResultTypeArray :for _ ,_cacc :=range _fcgffd .ValueArray {_bcacd =_ggdf (_bcacd ,_abec (_cacc ,[]string {},_ebcbg ));};};};return _bcacd ;};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };func _cbbf (_fdff []string ,_cedee int )string {return _ae .Itoa (len (_fdff [len (_fdff )-1-_cedee ]))};

// String returns an empty string for Error.
func (_caf Error )String ()string {return ""};const _acgg =57363;func _fcbag (_gdfe Result )Result {if _gdfe .Type ==ResultTypeEmpty {return _gdfe ;};_efabf :=_gdfe .AsString ();if _efabf .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gdfe .IsBoolean {if _efabf .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _efabf .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_d .ToLower (_efabf .ValueString ));};};

// GetEpoch returns a null time object for the invalid reference context.
func (_adaaa *ivr )GetEpoch ()_ge .Time {return _ge .Time {}};func (_dfefb *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };const _ggbf int =30;

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dbfd :=args [0].AsNumber ();if _dbfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aaaeg :=0;if len (args )> 1{_gaffg :=args [1];if _gaffg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_aaaeg =int (_gaffg .ValueNumber );if _aaaeg < 0{_aaaeg =0;}else if _aaaeg > 4{_aaaeg =4;};};_ddecc :=_bafcb ;switch _aaaeg {case 1:_ddecc =_adba ;case 2:_ddecc =_eaga ;case 3:_ddecc =_ecfd ;case 4:_ddecc =_ebgfb ;};_afad :=_eg .Trunc (_dbfd .ValueNumber );_fgdc :=_eb .Buffer {};for _ ,_eebga :=range _ddecc {for _afad >=_eebga ._dgea {_fgdc .WriteString (_eebga ._bdgc );_afad -=_eebga ._dgea ;};};return MakeStringResult (_fgdc .String ());};type plex struct{_efae chan *node ;_adfg Expression ;_afca string ;};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_acb :=args [0].AsString ();if _acb .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_acb .ValueString ,ev );};type node struct{_bgfdc tokenType ;_bgfdb string ;};

// Reference returns a string reference value to a named range.
func (_ecfb NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_ecfb ._caeg };};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_befa :=len (args );if _befa < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _befa > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cgbf :=args [0];_decd :=args [1];if _decd .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_daeg :=args [2].AsNumber ();if _daeg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_febge :=false ;if _befa ==4&&args [3].Type !=ResultTypeEmpty {_gbbge :=args [3].AsNumber ();if _gbbge .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _gbbge .ValueNumber ==0{_febge =true ;};};_ggegf :=int (_daeg .ValueNumber )-1;_gbdf :=-1;_egdf :=false ;_eacd :for _fdae ,_cebd :=range _decd .ValueArray {if len (_cebd )==0{continue ;};_caff :=_cebd [0];switch _dgfb (_caff ,_cgbf ,false ,_febge ){case _ecgf :_gbdf =_fdae ;case _deda :_gbdf =_fdae ;_egdf =true ;break _eacd ;};};if _gbdf ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_gebb :=_decd .ValueArray [_gbdf ];if _ggegf < 0||_ggegf >=len (_gebb ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _egdf ||!_febge {return _gebb [_ggegf ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func (_fcbg *yyParserImpl )Lookahead ()int {return _fcbg ._gegc };

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_fbdae :=len (args );if _fbdae < 3||_fbdae > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cgee :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_ebde :=args [1].ValueNumber ;if _ebde !=float64 (int (_ebde )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gac :=args [2].ValueNumber ;_ccbdf :=0.0;if _fbdae >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccbdf =args [3].ValueNumber ;};_bcac :=0;if _fbdae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bcac =int (args [4].ValueNumber );if _bcac !=0{_bcac =1;};};return MakeNumberResult (_eaef (_cgee ,_ebde ,_gac ,_ccbdf ,_bcac ));};var _gcca =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};const _fdge =57371;type yyParserImpl struct{_gacaa yySymType ;_bedf [_gbagc ]yySymType ;_gegc int ;};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _dbee (args ,true )};func _ead (_ff BinOpType ,_bga [][]Result ,_aec Result )Result {_cc :=[][]Result {};for _cb :=range _bga {_dab :=_dgc (_ff ,_bga [_cb ],_aec );if _dab .Type ==ResultTypeError {return _dab ;};_cc =append (_cc ,_dab .ValueList );};return MakeArrayResult (_cc );};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_fdbf ,_efebb :=_dedag (args ,true );if _efebb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_fdbf /_efebb );};func (_ecff VerticalRange )verticalRangeReference ()string {return _b .Sprintf ("\u0025\u0073\u003a%\u0073",_ecff ._ceff ,_ecff ._bggc );};

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _accg (args ,false )};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_dbebb ,_gbgc :=_cbgfe (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _gbgc .Type ==ResultTypeError {return _gbgc ;};_eaad :=_fdg (_dbebb ._bcba );_bacg :=_fdg (_dbebb ._eag );_cab :=_dbebb ._addg ;_fcab :=_bba (_eaad ,_bacg ,_cab );_ebdf ,_dddc ,_eeca :=_fcab .Date ();return MakeNumberResult (_ced (_ebdf ,int (_dddc ),_eeca ));};var _dgef []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};type cumulArgs struct{_fceg float64 ;_fbf float64 ;_daac float64 ;_cbec float64 ;_adgde float64 ;_fded int ;};

// Reference returns an invalid reference for EmptyExpr.
func (_fbg EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };var _bbbb ,_caadg ,_dccb ,_gace ,_abgef ,_aadaa ,_agacg ,_ggce ,_gfgg ,_cdfed ,_gcgee ,_faacg ,_cbag ,_daffg ,_cffb *_bc .Regexp ;

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_fdccc PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_eeggd :=_fdccc ._dffd .Reference (ctx ,ev );switch _eeggd .Type {case ReferenceTypeSheet :if _febad (_eeggd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eeggd .Value ));};_ecca :=_fdccc .horizontalRangeReference (_eeggd .Value );if _begge ,_egdec :=ev .GetFromCache (_ecca );_egdec {return _begge ;};_ffbbg :=ctx .Sheet (_eeggd .Value );_gdee ,_bcgc :=_acbgc (_ffbbg ,_fdccc ._badg ,_fdccc ._abdgc );_eafa :=_dddfe (_ffbbg ,ev ,_gdee ,_bcgc );ev .SetCache (_ecca ,_eafa );return _eafa ;default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eeggd .Type ));};};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_gad ,_bbf :=_ae .ParseBool (v );if _bbf !=nil {_da .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_bbf );};return Bool {_ac :_gad };};

// LastColumn returns empty string for the invalid reference context.
func (_bfgg *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};func (_abcef PrefixVerticalRange )verticalRangeReference (_dfde string )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_dfde ,_abcef ._fddaf ,_abcef ._ccggd );};func _befd (_dfgg ,_agfa Result ,_cgeea string )(*xargs ,Result ){if _dfgg .Type !=ResultTypeList &&_dfgg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cgeea +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_ffca :=_agfeg (_dfgg );_bffg :=[]float64 {};for _ ,_dccg :=range _ffca {for _ ,_gdeb :=range _dccg {if _gdeb .Type ==ResultTypeNumber &&!_gdeb .IsBoolean {_bffg =append (_bffg ,_gdeb .ValueNumber );}else {return nil ,MakeErrorResult (_cgeea +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_cdbf :=len (_bffg );if len (_bffg )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _agfa .Type !=ResultTypeList &&_agfa .Type !=ResultTypeArray {return nil ,MakeErrorResult (_cgeea +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_bcad :=_agfeg (_agfa );_fcdg :=[]float64 {};_gcag :=0.0;for _ ,_gfdg :=range _bcad {for _ ,_agdbc :=range _gfdg {if _agdbc .Type ==ResultTypeNumber &&!_agdbc .IsBoolean {_gfac :=float64 (int (_agdbc .ValueNumber ));if _gfac < _gcag {return nil ,MakeErrorResultType (ErrorTypeNum ,_cgeea +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_fcdg =append (_fcdg ,_gfac );_gcag =_gfac ;}else {return nil ,MakeErrorResult (_cgeea +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_fcdg )!=_cdbf {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_bffg ,_fcdg },MakeEmptyResult ();};

// Update returns the same object as updating sheet references does not affect Error.
func (_bd Error )Update (q *_ag .UpdateQuery )Expression {return _bd };const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);func _gbcc (_bdfd int ,_faca _ge .Month ,_aada int )int64 {if _bdfd ==1900&&int (_faca )<=2{_aada --;};_bbc :=_ge .Date (_bdfd ,_faca ,_aada ,0,0,0,0,_ge .UTC );return _bbc .Unix ();};const _ccdag =57361;var _efgc =map[string ]FunctionComplex {};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_eedf (args ,_gfcc ))};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _ced (_efd ,_gbf ,_fcfe int )float64 {return float64 (_gbcc (_efd ,_ge .Month (_gbf ),_fcfe )/86400)+_bed ;};func _feab (_bede string )(int ,int ,int ,bool ,Result ){_egc :="";_gdc :=[]string {};for _addf ,_dcbb :=range _gaf {_gdc =_dcbb .FindStringSubmatch (_bede );if len (_gdc )> 1{_egc =_addf ;break ;};};if _egc ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_bdb :=false ;var _ecc ,_faff ,_eec int ;var _gfc error ;switch _egc {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_faff ,_gfc =_ae .Atoi (_gdc [1]);if _gfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_eec ,_gfc =_ae .Atoi (_gdc [3]);if _gfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_ecc ,_gfc =_ae .Atoi (_gdc [5]);if _gfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};if _ecc < 0||_ecc > 9999||(_ecc > 99&&_ecc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_ecc =_eef (_ecc );_bdb =_gdc [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_faff =_eab [_gdc [1]];_eec ,_gfc =_ae .Atoi (_gdc [14]);if _gfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_ecc ,_gfc =_ae .Atoi (_gdc [16]);if _gfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};if _ecc < 0||_ecc > 9999||(_ecc > 99&&_ecc < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_ecc =_eef (_ecc );_bdb =_gdc [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_gaa ,_gbaf :=_ae .Atoi (_gdc [1]);if _gbaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_gagc ,_gbaf :=_ae .Atoi (_gdc [3]);if _gbaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_fcg ,_gbaf :=_ae .Atoi (_gdc [5]);if _gbaf !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};if _gaa >=1900&&_gaa < 10000{_ecc =_gaa ;_faff =_gagc ;_eec =_fcg ;}else if _gaa > 0&&_gaa < 13{_faff =_gaa ;_eec =_gagc ;_ecc =_fcg ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_bdb =_gdc [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_ecc ,_gfc =_ae .Atoi (_gdc [16]);if _gfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_faff =_eab [_gdc [3]];_eec ,_gfc =_ae .Atoi (_gdc [1]);if _gfc !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};_bdb =_gdc [19]=="";};if !_dbc (_ecc ,_faff ,_eec ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_caa );};return _ecc ,_faff ,_eec ,_bdb ,_fea ;};type criteriaRegex struct{_aeeb byte ;_aede string ;};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_aaad :=len (args );if _aaad < 3||_aaad > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_aefg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebaf :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_cbbb :=args [2].ValueNumber ;_cdcd :=0.0;if _aaad >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cdcd =args [3].ValueNumber ;};_ecbc :=0.0;if _aaad ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ecbc =args [4].ValueNumber ;if _ecbc !=0{_ecbc =1;};};_ggcf :=_ebaf *(1+_aefg *_ecbc )-_cdcd *_aefg ;_bbgg :=(_cbbb *_aefg +_ebaf *(1+_aefg *_ecbc ));return MakeNumberResult (_eg .Log (_ggcf /_bbgg )/_eg .Log (1+_aefg ));};func _ffe (_eda string ,_beb *_ag .UpdateQuery )string {_cac ,_aeg :=_ege .ParseCellReference (_eda );if _aeg !=nil {return "\u0023\u0052\u0045F\u0021";};if _beb .UpdateType ==_ag .UpdateActionRemoveColumn {_dabb :=_beb .ColumnIdx ;_cce :=_cac .ColumnIdx ;if _cce < _dabb {return _eda ;}else if _cce ==_dabb {return "\u0023\u0052\u0045F\u0021";}else {return _cac .Update (_ag .UpdateActionRemoveColumn ).String ();};};return _eda ;};func _dbc (_gbfg ,_dbg ,_dgaa int )bool {if _dbg < 1||_dbg > 12{return false ;};if _dgaa < 1{return false ;};return _dgaa <=_bgg (_gbfg ,_dbg );};const (_gfaf rmode =iota ;_dfae ;_cagbe ;);func _bfbb (_cbfcc ,_cddd ,_fbdd ,_aadf ,_ddae ,_fecfd float64 )float64 {var _cded ,_ecfe float64 ;_ffba :=0.0;_fffg :=_eg .Ceil (_ddae );_abga :=_cbfcc -_cddd ;_fcgbg :=false ;_beaga :=0.0;for _cgge :=1.0;_cgge <=_fffg ;_cgge ++{if !_fcgbg {_cded =_ggbed (_cbfcc ,_cddd ,_fbdd ,_cgge ,_fecfd );_beaga =_abga /(_fbdd -_cgge +1);if _beaga > _cded {_ecfe =_beaga ;_fcgbg =true ;}else {_ecfe =_cded ;_abga -=_cded ;};}else {_ecfe =_beaga ;};if _cgge ==_fffg {_ecfe *=_ddae +1-_fffg ;};_ffba +=_ecfe ;};return _ffba ;};const _gcgdff ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";func _gbaef (_cabb [][]Result )float64 {if len (_cabb )==2{_feea :=_cabb [0][0].AsNumber ();_ggaa :=_cabb [0][1].AsNumber ();_ebgbd :=_cabb [1][0].AsNumber ();_dcbfa :=_cabb [1][1].AsNumber ();if _feea .Type !=ResultTypeNumber ||_ggaa .Type !=ResultTypeNumber ||_ebgbd .Type !=ResultTypeNumber ||_dcbfa .Type !=ResultTypeNumber {return _eg .NaN ();};return _feea .ValueNumber *_dcbfa .ValueNumber -_ebgbd .ValueNumber *_ggaa .ValueNumber ;};_aacbf :=float64 (0);_ddaed :=float64 (1);for _ebdge :=range _cabb {_aacbf +=_ddaed *_cabb [0][_ebdge ].ValueNumber *_gbaef (_fcgcb (_cabb ,_ebdge ));_ddaed *=-1;};return _aacbf ;};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_faac :=len (args );if (_faac !=2&&_faac !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ceda :=0;if _faac ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ceda =int (args [2].ValueNumber );if !_ecgga (_ceda ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ada :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_ggef :=args [1].ValueNumber ;_ebe ,_ecgg :=_aedb (_ada ,_ggef ,_ceda );if _ecgg .Type ==ResultTypeError {return _ecgg ;};return MakeNumberResult (_ebe );};

// Reference returns an invalid reference for Negate.
func (_dafagg Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_efcgb PrefixRangeExpr )Update (q *_ag .UpdateQuery )Expression {_bgeea :=_efcgb ;_aaebca :=_efcgb ._baca .String ();if _aaebca ==q .SheetToUpdate {_fdcge :=*q ;_fdcge .UpdateCurrentSheet =true ;_bgeea ._debba =_efcgb ._debba .Update (&_fdcge );_bgeea ._defge =_efcgb ._defge .Update (&_fdcge );};return _bgeea ;};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_cdde ,_adcea ,_cffde :=_fdccg (args );if _cffde .Type ==ResultTypeError {return _cffde ;};return MakeNumberResult (_ffef (_cdde )/_adcea );};

// String returns a string representation of a horizontal range.
func (_dfgae HorizontalRange )String ()string {return _dfgae .horizontalRangeReference ()};func _aebd (_egedf ,_dge _ge .Time ,_fdfd ,_efe int )_ge .Time {_ccca :=_dge ;_gfa :=_egedf .Year ()-_dge .Year ();_ccca =_ccca .AddDate (_gfa ,0,0);if _egedf .After (_ccca ){_ccca =_ccca .AddDate (1,0,0);};_badb :=-12/_fdfd ;for _ccca .After (_egedf ){_ccca =_ccca .AddDate (0,_badb ,0);};return _ccca ;};func _fbbb (_ebdc _ge .Time )bool {return _ge .Now ().Sub (_ebdc )>=_fbgbg };

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_abdg ,_egb :=_cbgfe (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _egb .Type ==ResultTypeError {return _egb ;};return MakeNumberResult (_dagg (_abdg ._bcba ,_abdg ._eag ,_abdg ._addg ,_abdg ._gfcf ));};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _efegb (args ,_dfae )};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_dbeea PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_eedff :=_dbeea ._baca .Reference (ctx ,ev );_dfcfa :=_dbeea ._debba .Reference (ctx ,ev );_adaee :=_dbeea ._defge .Reference (ctx ,ev );switch _eedff .Type {case ReferenceTypeSheet :if _febad (_eedff ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_eedff .Value ));};_deac :=_degc (_eedff ,_dfcfa ,_adaee );if _dfcfa .Type ==ReferenceTypeCell &&_adaee .Type ==ReferenceTypeCell {if _dcfaf ,_dacba :=ev .GetFromCache (_deac );_dacba {return _dcfaf ;}else {_fcggc :=_dddfe (ctx .Sheet (_eedff .Value ),ev ,_dfcfa .Value ,_adaee .Value );ev .SetCache (_deac ,_fcggc );return _fcggc ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_deac );default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_eedff .Type ));};};

// CellRef is a reference to a single cell
type CellRef struct{_ffd string };type noCache struct{};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaca :=args [0].Ref ;if _gaca .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_gaca .Value ));};func _dff (_faea []Result ,_addd string )(*cumulArgs ,Result ){if len (_faea )!=6{return nil ,MakeErrorResult (_addd +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _faea [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_addd +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_efcf :=_faea [0].ValueNumber ;if _efcf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _faea [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_addd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dfcf :=_faea [1].ValueNumber ;if _dfcf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _faea [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_addd +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfb :=_faea [2].ValueNumber ;if _egfb <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _faea [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_addd +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fcgf :=_faea [3].ValueNumber ;if _fcgf <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _faea [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_addd +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_efff :=_faea [4].ValueNumber ;if _efff <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _efff < _fcgf {return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _efff > _dfcf {return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_ebfgc :=int (_faea [5].ValueNumber );if _ebfgc !=0&&_ebfgc !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_addd +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_efcf ,_dfcf ,_egfb ,_fcgf ,_efff ,_ebfgc },_fea ;};func (_aabbb *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _accg (args ,true )};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cbbc :=args [0];switch _cbbc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_gbaa :=_fdg (_cbbc .ValueNumber );return MakeNumberResult (float64 (_gbaa .Minute ()));case ResultTypeString :_efb :=_d .ToLower (_cbbc .ValueString );if !_bcgd (_efb ){_ ,_ ,_ ,_agf ,_dbdc :=_feab (_efb );if _dbdc .Type ==ResultTypeError {_dbdc .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _dbdc ;};if _agf {return MakeNumberResult (0);};};_ ,_cdc ,_ ,_ ,_ ,_gbbb :=_bgeb (_efb );if _gbbb .Type ==ResultTypeError {return _gbbb ;};return MakeNumberResult (float64 (_cdc ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// Eval evaluates and returns the result of a sheet expression.
func (_ddeae SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};const _feg ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acge :=int (args [0].ValueNumber );return MakeBoolResult (_acge !=_acge /2*2);};func _bcgd (_bag string )bool {for _ ,_deef :=range _aad {_ecge :=_deef .FindStringSubmatch (_bag );if len (_ecge )> 1{return true ;};};return false ;};

// Reference returns an invalid reference for Number.
func (_cced Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_ggd :v }};

// Reference returns a string reference value to a range.
func (_ffbbd Range )Reference (ctx Context ,ev Evaluator )Reference {_daadd :=_ffbbd ._gdcbe .Reference (ctx ,ev );_aaeg :=_ffbbd ._bgdg .Reference (ctx ,ev );if _daadd .Type ==ReferenceTypeCell &&_aaeg .Type ==ReferenceTypeCell {return MakeRangeReference (_ebadc (_daadd ,_aaeg ));};return ReferenceInvalid ;};

// Update returns the same object as updating sheet references does not affect Number.
func (_cdfge Number )Update (q *_ag .UpdateQuery )Expression {return _cdfge };const _caa ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";var _ffab =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);func _eedf (_efde []Result ,_cafc countMode )float64 {_eabc :=0.0;for _ ,_afaa :=range _efde {switch _afaa .Type {case ResultTypeNumber :if _cafc ==_cccb ||(_cafc ==_gfcc &&!_afaa .IsBoolean ){_eabc ++;};case ResultTypeList ,ResultTypeArray :_eabc +=_eedf (_afaa .ListValues (),_cafc );case ResultTypeString :if _cafc ==_cccb {_eabc ++;};case ResultTypeEmpty :if _cafc ==_bdegf {_eabc ++;};};};return _eabc ;};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_effe PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_egfa :=_effe ._eddgc .Reference (ctx ,ev );switch _egfa .Type {case ReferenceTypeSheet :if _febad (_egfa ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_egfa .Value ));};_ccgfb :=_effe .verticalRangeReference (_egfa .Value );if _ggcaaa ,_cgde :=ev .GetFromCache (_ccgfb );_cgde {return _ggcaaa ;};_ffdab :=ctx .Sheet (_egfa .Value );_ebab ,_acdgc :=_fbab (_ffdab ,_effe ._fddaf ,_effe ._ccggd );_acbab :=_dddfe (_ffdab ,ev ,_ebab ,_acdgc );ev .SetCache (_ccgfb ,_acbab );return _acbab ;default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egfa .Type ));};};func _gfff (){_fdaf =_bc .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_bfge =_bc .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_abdac =_bc .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_edbc =_bc .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_agga =_bc .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_dacga =_bc .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};func _bgg (_adc ,_aef int )int {if _aef ==2&&_fde (_adc ){return 29;}else {return _bfe [_aef -1];};};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};func _dgc (_efc BinOpType ,_df []Result ,_fda Result )Result {_ga :=[]Result {};switch _fda .Type {case ResultTypeNumber :_fab :=_fda .ValueNumber ;for _db :=range _df {_ged :=_df [_db ].AsNumber ();if _ged .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _efc {case BinOpTypePlus :_ga =append (_ga ,MakeNumberResult (_ged .ValueNumber +_fab ));case BinOpTypeMinus :_ga =append (_ga ,MakeNumberResult (_ged .ValueNumber -_fab ));case BinOpTypeMult :_ga =append (_ga ,MakeNumberResult (_ged .ValueNumber *_fab ));case BinOpTypeDiv :if _fab ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ga =append (_ga ,MakeNumberResult (_ged .ValueNumber /_fab ));case BinOpTypeExp :_ga =append (_ga ,MakeNumberResult (_eg .Pow (_ged .ValueNumber ,_fab )));case BinOpTypeLT :_ga =append (_ga ,MakeBoolResult (_ged .ValueNumber < _fab ));case BinOpTypeGT :_ga =append (_ga ,MakeBoolResult (_ged .ValueNumber > _fab ));case BinOpTypeEQ :_ga =append (_ga ,MakeBoolResult (_ged .ValueNumber ==_fab ));case BinOpTypeLEQ :_ga =append (_ga ,MakeBoolResult (_ged .ValueNumber <=_fab ));case BinOpTypeGEQ :_ga =append (_ga ,MakeBoolResult (_ged .ValueNumber >=_fab ));case BinOpTypeNE :_ga =append (_ga ,MakeBoolResult (_ged .ValueNumber !=_fab ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_efc ));};};case ResultTypeString :_eaa :=_fda .ValueString ;for _faf :=range _df {_dec :=_df [_faf ].AsString ();if _dec .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _efc {case BinOpTypeLT :_ga =append (_ga ,MakeBoolResult (_dec .ValueString < _eaa ));case BinOpTypeGT :_ga =append (_ga ,MakeBoolResult (_dec .ValueString > _eaa ));case BinOpTypeEQ :_ga =append (_ga ,MakeBoolResult (_dec .ValueString ==_eaa ));case BinOpTypeLEQ :_ga =append (_ga ,MakeBoolResult (_dec .ValueString <=_eaa ));case BinOpTypeGEQ :_ga =append (_ga ,MakeBoolResult (_dec .ValueString >=_eaa ));case BinOpTypeNE :_ga =append (_ga ,MakeBoolResult (_dec .ValueString !=_eaa ));default:return MakeErrorResult (_b .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_efc ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_ga );};var _eadg []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfga :=args [0];if _gfga .Type !=ResultTypeArray &&_gfga .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gcdea :=_agfeg (_gfga );_aecbg :=args [2];if _aecbg .Type !=ResultTypeArray &&_aecbg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_feefb :=_agfeg (_aecbg );_caed :=_cfgd (args [1]);_fbef :=0.0;for _bbdgg ,_bbff :=range _gcdea {for _edebe ,_cdbc :=range _bbff {if _efba (_cdbc ,_caed ){_fbef +=_feefb [_bbdgg ][_edebe ].ValueNumber ;};};};return MakeNumberResult (_fbef );};type yySymType struct{_abeca int ;_cgfa *node ;_ebdgea Expression ;_dcge []Expression ;_daad [][]Expression ;};var _eab =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};func _eedd (_fcdgg []Result )(bool ,Result ){for _ ,_eaea :=range _fcdgg {if _eaea .Type ==ResultTypeError {return true ,_eaea ;};};return false ,MakeEmptyResult ();};

// IsBool returns false for the invalid reference context.
func (_agee *ivr )IsBool (cellRef string )bool {return false };

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_gadc ,_bfdfa :=_ecbaf ("\u0046\u0049\u004e\u0044",args );if _bfdfa .Type !=ResultTypeEmpty {return _bfdfa ;};_baagc :=_gadc ._cgcgf ;if _baagc ==""{return MakeNumberResult (1.0);};_aacfd :=_gadc ._gcfe ;_fddd :=_gadc ._fcgaa -1;_ecgec :=1;_eegf :=0;for _bdgb :=range _aacfd {if _bdgb !=0{_gegaeg :=1;if _bdgb -_eegf > 1{_gegaeg =2;};_ecgec +=_gegaeg ;};if _ecgec > _fddd {_cbcca :=_d .Index (_aacfd [_bdgb :],_baagc );if _cbcca ==0{return MakeNumberResult (float64 (_ecgec ));};};_eegf =_bdgb ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_fdbbe :=len (args );if _fdbbe !=4&&_fdbbe !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acca ,_cace ,_abg :=_ega (args [0],args [1],"\u0044\u0049\u0053\u0043");if _abg .Type ==ResultTypeError {return _abg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bfbe :=args [2].ValueNumber ;if _bfbe <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dccc :=args [3].ValueNumber ;if _dccc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbff :=0;if _fdbbe ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbff =int (args [4].ValueNumber );if !_ecgga (_fbff ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_cfcf ,_abg :=_aedb (_acca ,_cace ,_fbff );if _abg .Type ==ResultTypeError {return _abg ;};return MakeNumberResult ((_dccc -_bfbe )/_dccc /_cfcf );};const _adf ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";var _gbfd *_ef .Rand ;

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_acebc :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acebc =int (args [1].ValueNumber );if _acebc < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _acebc ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cccdf :=args [0].Value ();_aadaf :=len (_cccdf );if _acebc > _aadaf {return MakeStringResult (_cccdf );};return MakeStringResult (_cccdf [_aadaf -_acebc :_aadaf ]);};

// Eval evaluates a vertical range returning a list of results or an error.
func (_gaae VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_degg :=_gaae .verticalRangeReference ();if _ggbdg ,_ffae :=ev .GetFromCache (_degg );_ffae {return _ggbdg ;};_gafc ,_bfdfca :=_fbab (ctx ,_gaae ._ceff ,_gaae ._bggc );_ebadd :=_dddfe (ctx ,ev ,_gafc ,_bfdfca );ev .SetCache (_degg ,_ebadd );return _ebadd ;};func (_aeda *Lexer )lex (_acba _c .Reader ){_edbd ,_adaf ,_gdeff :=0,0,0;_adggd :=-1;_gaecaa ,_bbdee ,_efcgg :=0,0,0;_ =_efcgg ;_bbcbc :=1;_ =_bbcbc ;_eebc :=make ([]byte ,4096);_daebf :=false ;for !_daebf {_fdef :=0;if _gaecaa > 0{_fdef =_adaf -_gaecaa ;};_adaf =0;_fcede ,_bfaac :=_acba .Read (_eebc [_fdef :]);if _fcede ==0||_bfaac !=nil {_daebf =true ;};_gdeff =_fcede +_fdef ;if _gdeff < len (_eebc ){_adggd =_gdeff ;};{_edbd =_agfeb ;_gaecaa =0;_bbdee =0;_efcgg =0;};{var _gbgg int ;var _bceb uint ;if _adaf ==_gdeff {goto _fefag ;};if _edbd ==0{goto _gcfeb ;};_fgcef :_gbgg =int (_dgef [_edbd ]);_bceb =uint (_gfge [_gbgg ]);_gbgg ++;for ;_bceb > 0;_bceb --{_gbgg ++;switch _gfge [_gbgg -1]{case 2:_gaecaa =_adaf ;};};switch _edbd {case 30:switch _eebc [_adaf ]{case 34:goto _acggg ;case 35:goto _edfgg ;case 36:goto _fdgag ;case 38:goto _cdcec ;case 39:goto _acgeb ;case 40:goto _gbggf ;case 41:goto _cgccbg ;case 42:goto _beegc ;case 43:goto _eeeeg ;case 44:goto _abaa ;case 45:goto _dagb ;case 47:goto _gced ;case 58:goto _gacegf ;case 59:goto _bagda ;case 60:goto _fedfd ;case 61:goto _edfga ;case 62:goto _bgaf ;case 63:goto _afce ;case 70:goto _eedfc ;case 84:goto _bggg ;case 92:goto _bbgb ;case 94:goto _ceaa ;case 95:goto _dcbgb ;case 123:goto _dcdae ;case 125:goto _cgfb ;};switch {case _eebc [_adaf ]< 65:switch {case _eebc [_adaf ]> 37:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _beea ;};case _eebc [_adaf ]>=33:goto _afce ;};case _eebc [_adaf ]> 90:switch {case _eebc [_adaf ]> 93:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _ccdd ;};case _eebc [_adaf ]>=91:goto _afce ;};default:goto _efafe ;};goto _beaa ;case 1:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _dfbec ;case 123:goto _dfbec ;case 125:goto _dfbec ;};switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfbec ;};case _eebc [_adaf ]> 45:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _dfbec ;};case _eebc [_adaf ]>=58:goto _dfbec ;};default:goto _dfbec ;};goto _beaa ;case 0:goto _gcfeb ;case 2:if _eebc [_adaf ]==34{goto _bfagb ;};goto _acggg ;case 31:if _eebc [_adaf ]==34{goto _acggg ;};goto _cfdac ;case 3:switch _eebc [_adaf ]{case 78:goto _fbca ;case 82:goto _fbdcd ;};goto _afce ;case 4:switch _eebc [_adaf ]{case 47:goto _dgecf ;case 85:goto _gefcf ;};goto _afce ;case 5:if _eebc [_adaf ]==65{goto _febbb ;};goto _afce ;case 6:switch _eebc [_adaf ]{case 76:goto _aeece ;case 77:goto _dfdd ;};goto _afce ;case 7:if _eebc [_adaf ]==76{goto _dfdd ;};goto _afce ;case 8:if _eebc [_adaf ]==33{goto _febbb ;};goto _afce ;case 9:if _eebc [_adaf ]==69{goto _faeaa ;};goto _afce ;case 10:if _eebc [_adaf ]==70{goto _ebdd ;};goto _afce ;case 11:if _eebc [_adaf ]==33{goto _cafg ;};goto _afce ;case 12:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _afce ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=45{goto _afce ;};case _eebc [_adaf ]>=34:goto _afce ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]< 65:if 58<=_eebc [_adaf ]&&_eebc [_adaf ]<=63{goto _afce ;};case _eebc [_adaf ]> 90:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _afce ;};default:goto _feeg ;};default:goto _cfedg ;};goto _beaa ;case 13:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _afce ;case 58:goto _gcdgg ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=45{goto _afce ;};case _eebc [_adaf ]>=34:goto _afce ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _afce ;};case _eebc [_adaf ]>=59:goto _afce ;};default:goto _cfedg ;};goto _beaa ;case 14:if _eebc [_adaf ]==36{goto _bfbgc ;};if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _cdecc ;};goto _dfbec ;case 15:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _cdecc ;};goto _dfbec ;case 32:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _cdecc ;};goto _ddbaf ;case 16:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 47:goto _afce ;case 58:goto _cafa ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 45:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _dgbb ;};case _eebc [_adaf ]>=34:goto _afce ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]> 90:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _afce ;};case _eebc [_adaf ]>=65:goto _feeg ;};default:goto _afce ;};goto _beaa ;case 17:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _dfbec ;case 123:goto _dfbec ;case 125:goto _dfbec ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=45{goto _dfbec ;};case _eebc [_adaf ]>=34:goto _dfbec ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _dfbec ;};case _eebc [_adaf ]>=58:goto _dfbec ;};default:goto _dgbb ;};goto _beaa ;case 33:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _adgga ;case 123:goto _adgga ;case 125:goto _adgga ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=45{goto _adgga ;};case _eebc [_adaf ]>=34:goto _adgga ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _adgga ;};case _eebc [_adaf ]>=58:goto _adgga ;};default:goto _dgbb ;};goto _beaa ;case 18:if _eebc [_adaf ]==36{goto _adfff ;};if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _aeegde ;};goto _dfbec ;case 19:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _aeegde ;};goto _dfbec ;case 34:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _aeegde ;};goto _ceeb ;case 20:switch _eebc [_adaf ]{case 39:goto _afce ;case 42:goto _afce ;case 47:goto _afce ;case 58:goto _afce ;case 63:goto _afce ;};if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=93{goto _afce ;};goto _dabca ;case 21:switch _eebc [_adaf ]{case 39:goto _aefbgb ;case 42:goto _afce ;case 47:goto _afce ;case 58:goto _afce ;case 63:goto _afce ;};if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=93{goto _afce ;};goto _dabca ;case 22:if _eebc [_adaf ]==33{goto _bceaf ;};goto _afce ;case 35:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _bdffc ;case 58:goto _gcdgg ;case 101:goto _dacd ;case 123:goto _cege ;case 125:goto _cege ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=47{goto _cege ;};case _eebc [_adaf ]>=34:goto _cege ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _cege ;};case _eebc [_adaf ]>=59:goto _cege ;};default:goto _beea ;};goto _beaa ;case 36:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _cege ;case 101:goto _dacd ;case 123:goto _cege ;case 125:goto _cege ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=45{goto _cege ;};case _eebc [_adaf ]>=34:goto _cege ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _cege ;};case _eebc [_adaf ]>=58:goto _cege ;};default:goto _bdffc ;};goto _beaa ;case 23:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _bdcef ;case 123:goto _bdcef ;case 125:goto _bdcef ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=45{goto _bdcef ;};case _eebc [_adaf ]>=34:goto _bdcef ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _bdcef ;};case _eebc [_adaf ]>=58:goto _bdcef ;};default:goto _fecef ;};goto _beaa ;case 37:switch _eebc [_adaf ]{case 33:goto _eaee ;case 47:goto _cege ;case 123:goto _cege ;case 125:goto _cege ;};switch {case _eebc [_adaf ]< 48:switch {case _eebc [_adaf ]> 35:if 37<=_eebc [_adaf ]&&_eebc [_adaf ]<=45{goto _cege ;};case _eebc [_adaf ]>=34:goto _cege ;};case _eebc [_adaf ]> 57:switch {case _eebc [_adaf ]> 63:if 91<=_eebc [_adaf ]&&_eebc [_adaf ]<=94{goto _cege ;};case _eebc [_adaf ]>=58:goto _cege ;};default:goto _fecef ;};goto _beaa ;case 38:switch _eebc [_adaf ]{case 61:goto _agbd ;case 62:goto _fdbbc ;};goto _bdfcc ;case 39:if _eebc [_adaf ]==61{goto _dbcb ;};goto _caceb ;case 24:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _afce ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _afce ;};default:goto _afce ;};goto _beaa ;case 40:switch _eebc [_adaf ]{case 33:goto _eaee ;case 40:goto _bcded ;case 46:goto _agdbg ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _agdbg ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _agdbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 41:switch _eebc [_adaf ]{case 46:goto _gdfda ;case 92:goto _gdfda ;case 95:goto _gdfda ;};switch {case _eebc [_adaf ]< 65:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gdfda ;};case _eebc [_adaf ]> 90:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gdfda ;};default:goto _gdfda ;};goto _dfcc ;case 42:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 43:switch _eebc [_adaf ]{case 33:goto _eaee ;case 40:goto _bcded ;case 46:goto _agdbg ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _adgga ;case 125:goto _adgga ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _adgga ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};default:goto _adgga ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _agdbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _adgga ;};default:goto _adgga ;};goto _beaa ;case 44:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfbec ;case 125:goto _dfbec ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _dfbec ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfbec ;};default:goto _dfbec ;};goto _beaa ;case 25:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 65:goto _dgdeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _afce ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 66<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _afce ;};default:goto _afce ;};goto _beaa ;case 45:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 76:goto _efgbb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 46:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 83:goto _babda ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 47:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 69:goto _bcddd ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 26:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 79:goto _ddcc ;case 82:goto _gagdg ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _afce ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _afce ;};default:goto _afce ;};goto _beaa ;case 48:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 68:goto _fdbdc ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 49:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 79:goto _efcdb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 50:switch _eebc [_adaf ]{case 33:goto _eaee ;case 36:goto _bdeb ;case 40:goto _bcded ;case 46:goto _agdbg ;case 58:goto _cafa ;case 85:goto _babda ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 59:switch {case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _adgda ;};case _eebc [_adaf ]>=34:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _edbg ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 27:switch _eebc [_adaf ]{case 46:goto _gdfda ;case 92:goto _gdfda ;case 95:goto _gdfda ;};switch {case _eebc [_adaf ]< 65:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gdfda ;};case _eebc [_adaf ]> 90:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gdfda ;};default:goto _gdfda ;};goto _afce ;case 28:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 120:goto _efdcd ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _afce ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _afce ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _afce ;};default:goto _afce ;};goto _beaa ;case 51:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 108:goto _cgefd ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 52:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 102:goto _cbagd ;case 110:goto _ggea ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 53:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 110:goto _cabg ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 54:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gceg ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 55:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gacc ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gacc ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 56:switch _eebc [_adaf ]{case 33:goto _eaee ;case 40:goto _cggfc ;case 46:goto _gacc ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gacc ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gacc ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 57:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 109:goto _fdccgd ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 58:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _bdafg ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _dfcc ;case 125:goto _dfcc ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfcc ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfcc ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfcc ;};default:goto _dfcc ;};goto _beaa ;case 59:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeec ;case 123:goto _dfbec ;case 125:goto _dfbec ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _dfbec ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _dfbec ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeec ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _dfbec ;};default:goto _dfbec ;};goto _beaa ;case 29:switch _eebc [_adaf ]{case 33:goto _eaee ;case 46:goto _gddeb ;case 92:goto _gdfda ;case 95:goto _gddeb ;case 123:goto _afce ;case 125:goto _afce ;};switch {case _eebc [_adaf ]< 58:switch {case _eebc [_adaf ]< 37:if 34<=_eebc [_adaf ]&&_eebc [_adaf ]<=35{goto _afce ;};case _eebc [_adaf ]> 47:if 48<=_eebc [_adaf ]&&_eebc [_adaf ]<=57{goto _gddeb ;};default:goto _afce ;};case _eebc [_adaf ]> 63:switch {case _eebc [_adaf ]< 91:if 65<=_eebc [_adaf ]&&_eebc [_adaf ]<=90{goto _gddeb ;};case _eebc [_adaf ]> 94:if 97<=_eebc [_adaf ]&&_eebc [_adaf ]<=122{goto _gddeb ;};default:goto _afce ;};default:goto _afce ;};goto _beaa ;};_afce :_edbd =0;goto _dgeee ;_beaa :_edbd =1;goto _dgeee ;_acggg :_edbd =2;goto _dgeee ;_edfgg :_edbd =3;goto _dgeee ;_fbca :_edbd =4;goto _dgeee ;_dgecf :_edbd =5;goto _dgeee ;_gefcf :_edbd =6;goto _dgeee ;_aeece :_edbd =7;goto _dgeee ;_dfdd :_edbd =8;goto _dgeee ;_fbdcd :_edbd =9;goto _dgeee ;_faeaa :_edbd =10;goto _dgeee ;_ebdd :_edbd =11;goto _dgeee ;_fdgag :_edbd =12;goto _dgeee ;_cfedg :_edbd =13;goto _dgeee ;_gcdgg :_edbd =14;goto _dgeee ;_bfbgc :_edbd =15;goto _dgeee ;_feeg :_edbd =16;goto _dgeee ;_bdeb :_edbd =17;goto _dgeee ;_cafa :_edbd =18;goto _dgeee ;_adfff :_edbd =19;goto _dgeee ;_acgeb :_edbd =20;goto _dgeee ;_dabca :_edbd =21;goto _dgeee ;_aefbgb :_edbd =22;goto _dgeee ;_dacd :_edbd =23;goto _dgeee ;_efafe :_edbd =24;goto _dgeee ;_eedfc :_edbd =25;goto _dgeee ;_bggg :_edbd =26;goto _dgeee ;_bbgb :_edbd =27;goto _dgeee ;_dcbgb :_edbd =28;goto _dgeee ;_ccdd :_edbd =29;goto _dgeee ;_dfbec :_edbd =30;goto _ebec ;_eaee :_edbd =30;goto _cdgg ;_febbb :_edbd =30;goto _bgee ;_cafg :_edbd =30;goto _adge ;_bceaf :_edbd =30;goto _ebgac ;_bdcef :_edbd =30;goto _caded ;_bcded :_edbd =30;goto _ecbcfb ;_cdcec :_edbd =30;goto _fgfa ;_gbggf :_edbd =30;goto _bbgga ;_cgccbg :_edbd =30;goto _cbeg ;_beegc :_edbd =30;goto _dafc ;_eeeeg :_edbd =30;goto _fggcg ;_abaa :_edbd =30;goto _egfd ;_dagb :_edbd =30;goto _begb ;_gced :_edbd =30;goto _abfgg ;_gacegf :_edbd =30;goto _cbae ;_bagda :_edbd =30;goto _ccegc ;_edfga :_edbd =30;goto _ebgdg ;_ceaa :_edbd =30;goto _egbca ;_dcdae :_edbd =30;goto _bebec ;_cgfb :_edbd =30;goto _fbbbd ;_cfdac :_edbd =30;goto _aaaea ;_ddbaf :_edbd =30;goto _ffcc ;_adgga :_edbd =30;goto _bedb ;_ceeb :_edbd =30;goto _gaege ;_cege :_edbd =30;goto _aagff ;_bdfcc :_edbd =30;goto _dddaf ;_agbd :_edbd =30;goto _edgcea ;_fdbbc :_edbd =30;goto _agadd ;_caceb :_edbd =30;goto _gfeb ;_dbcb :_edbd =30;goto _bbbgd ;_dfcc :_edbd =30;goto _eafcf ;_cggfc :_edbd =30;goto _fcfg ;_bfagb :_edbd =31;goto _bbdga ;_cdecc :_edbd =32;goto _dgeee ;_dgbb :_edbd =33;goto _gaef ;_aeegde :_edbd =34;goto _dgeee ;_beea :_edbd =35;goto _fdfff ;_bdffc :_edbd =36;goto _fdfff ;_fecef :_edbd =37;goto _fdfff ;_fedfd :_edbd =38;goto _dgeee ;_bgaf :_edbd =39;goto _dgeee ;_agdbg :_edbd =40;goto _faccc ;_gdfda :_edbd =41;goto _dgeee ;_gddeb :_edbd =42;goto _faccc ;_adgda :_edbd =43;goto _gaef ;_edbg :_edbd =44;goto _faccc ;_bcddd :_edbd =44;goto _eadbae ;_efcdb :_edbd =44;goto _efcgc ;_dgdeb :_edbd =45;goto _faccc ;_efgbb :_edbd =46;goto _faccc ;_babda :_edbd =47;goto _faccc ;_ddcc :_edbd =48;goto _faccc ;_fdbdc :_edbd =49;goto _faccc ;_gagdg :_edbd =50;goto _faccc ;_efdcd :_edbd =51;goto _faccc ;_cgefd :_edbd =52;goto _faccc ;_cbagd :_edbd =53;goto _faccc ;_cabg :_edbd =54;goto _faccc ;_gceg :_edbd =55;goto _faccc ;_gacc :_edbd =56;goto _faccc ;_ggea :_edbd =57;goto _faccc ;_fdccgd :_edbd =58;goto _faccc ;_bdafg :_edbd =59;goto _faccc ;_gddeec :_edbd =59;goto _aadgf ;_bgee :_gbgg =3;goto _afaf ;_adge :_gbgg =5;goto _afaf ;_cdgg :_gbgg =7;goto _afaf ;_ebgac :_gbgg =9;goto _afaf ;_ecbcfb :_gbgg =11;goto _afaf ;_fcfg :_gbgg =13;goto _afaf ;_fgfa :_gbgg =15;goto _afaf ;_bebec :_gbgg =17;goto _afaf ;_fbbbd :_gbgg =19;goto _afaf ;_bbgga :_gbgg =21;goto _afaf ;_cbeg :_gbgg =23;goto _afaf ;_fggcg :_gbgg =25;goto _afaf ;_begb :_gbgg =27;goto _afaf ;_dafc :_gbgg =29;goto _afaf ;_abfgg :_gbgg =31;goto _afaf ;_egbca :_gbgg =33;goto _afaf ;_ebgdg :_gbgg =35;goto _afaf ;_edgcea :_gbgg =37;goto _afaf ;_bbbgd :_gbgg =39;goto _afaf ;_agadd :_gbgg =41;goto _afaf ;_cbae :_gbgg =43;goto _afaf ;_ccegc :_gbgg =45;goto _afaf ;_egfd :_gbgg =47;goto _afaf ;_aagff :_gbgg =49;goto _afaf ;_bedb :_gbgg =51;goto _afaf ;_ffcc :_gbgg =53;goto _afaf ;_gaege :_gbgg =55;goto _afaf ;_eafcf :_gbgg =57;goto _afaf ;_aaaea :_gbgg =59;goto _afaf ;_dddaf :_gbgg =61;goto _afaf ;_gfeb :_gbgg =63;goto _afaf ;_caded :_gbgg =65;goto _afaf ;_ebec :_gbgg =67;goto _afaf ;_eadbae :_gbgg =72;goto _afaf ;_fdfff :_gbgg =75;goto _afaf ;_gaef :_gbgg =78;goto _afaf ;_efcgc :_gbgg =81;goto _afaf ;_aadgf :_gbgg =84;goto _afaf ;_faccc :_gbgg =87;goto _afaf ;_bbdga :_gbgg =90;goto _afaf ;_afaf :_bceb =uint (_gfge [_gbgg ]);_gbgg ++;for ;_bceb > 0;_bceb --{_gbgg ++;switch _gfge [_gbgg -1]{case 3:_bbdee =_adaf +1;case 4:_efcgg =1;case 5:_efcgg =2;case 6:_efcgg =3;case 7:_efcgg =4;case 8:_efcgg =11;case 9:_efcgg =14;case 10:_efcgg =15;case 11:_bbdee =_adaf +1;{_aeda .emit (_begc ,_eebc [_gaecaa :_bbdee ]);};case 12:_bbdee =_adaf +1;{_aeda .emit (_dgbgg ,_eebc [_gaecaa :_bbdee ]);};case 13:_bbdee =_adaf +1;{_aeda .emit (_ccef ,_eebc [_gaecaa :_bbdee -1]);};case 14:_bbdee =_adaf +1;{_aeda .emit (_ccef ,_eebc [_gaecaa +1:_bbdee -2]);};case 15:_bbdee =_adaf +1;{_aeda .emit (_cdca ,_eebc [_gaecaa :_bbdee -1]);};case 16:_bbdee =_adaf +1;{_aeda .emit (_cdca ,_eebc [_gaecaa :_bbdee -1]);};case 17:_bbdee =_adaf +1;{_aeda .emit (_dfgfd ,_eebc [_gaecaa :_bbdee ]);};case 18:_bbdee =_adaf +1;{_aeda .emit (_egbc ,_eebc [_gaecaa :_bbdee ]);};case 19:_bbdee =_adaf +1;{_aeda .emit (_ccdag ,_eebc [_gaecaa :_bbdee ]);};case 20:_bbdee =_adaf +1;{_aeda .emit (_bfffa ,_eebc [_gaecaa :_bbdee ]);};case 21:_bbdee =_adaf +1;{_aeda .emit (_acgg ,_eebc [_gaecaa :_bbdee ]);};case 22:_bbdee =_adaf +1;{_aeda .emit (_caaa ,_eebc [_gaecaa :_bbdee ]);};case 23:_bbdee =_adaf +1;{_aeda .emit (_gaeba ,_eebc [_gaecaa :_bbdee ]);};case 24:_bbdee =_adaf +1;{_aeda .emit (_agbc ,_eebc [_gaecaa :_bbdee ]);};case 25:_bbdee =_adaf +1;{_aeda .emit (_dedde ,_eebc [_gaecaa :_bbdee ]);};case 26:_bbdee =_adaf +1;{_aeda .emit (_gebbg ,_eebc [_gaecaa :_bbdee ]);};case 27:_bbdee =_adaf +1;{_aeda .emit (_fdfac ,_eebc [_gaecaa :_bbdee ]);};case 28:_bbdee =_adaf +1;{_aeda .emit (_fbfbb ,_eebc [_gaecaa :_bbdee ]);};case 29:_bbdee =_adaf +1;{_aeda .emit (_fcgfc ,_eebc [_gaecaa :_bbdee ]);};case 30:_bbdee =_adaf +1;{_aeda .emit (_ebac ,_eebc [_gaecaa :_bbdee ]);};case 31:_bbdee =_adaf +1;{_aeda .emit (_beddd ,_eebc [_gaecaa :_bbdee ]);};case 32:_bbdee =_adaf +1;{_aeda .emit (_fdbe ,_eebc [_gaecaa :_bbdee ]);};case 33:_bbdee =_adaf +1;{_aeda .emit (_gfagf ,_eebc [_gaecaa :_bbdee ]);};case 34:_bbdee =_adaf ;_adaf --;{_aeda .emit (_acgd ,_eebc [_gaecaa :_bbdee ]);};case 35:_bbdee =_adaf ;_adaf --;{_aeda .emit (_afadg ,_eebc [_gaecaa :_bbdee ]);};case 36:_bbdee =_adaf ;_adaf --;{_aeda .emit (_cabf ,_eebc [_gaecaa :_bbdee ]);};case 37:_bbdee =_adaf ;_adaf --;{_aeda .emit (_dcded ,_eebc [_gaecaa :_bbdee ]);};case 38:_bbdee =_adaf ;_adaf --;{_aeda .emit (_bbcgc ,_eebc [_gaecaa :_bbdee ]);};case 39:_bbdee =_adaf ;_adaf --;{_aeda .emit (_ece ,_eebc [_gaecaa +1:_bbdee -1]);};case 40:_bbdee =_adaf ;_adaf --;{_aeda .emit (_fcfbb ,_eebc [_gaecaa :_bbdee ]);};case 41:_bbdee =_adaf ;_adaf --;{_aeda .emit (_fdge ,_eebc [_gaecaa :_bbdee ]);};case 42:_adaf =(_bbdee )-1;{_aeda .emit (_acgd ,_eebc [_gaecaa :_bbdee ]);};case 43:switch _efcgg {case 0:{_edbd =0;goto _dgeee ;};case 1:{_adaf =(_bbdee )-1;_aeda .emit (_fbdf ,_eebc [_gaecaa :_bbdee ]);};case 2:{_adaf =(_bbdee )-1;_aeda .emit (_acgd ,_eebc [_gaecaa :_bbdee ]);};case 3:{_adaf =(_bbdee )-1;_aeda .emit (_afadg ,_eebc [_gaecaa :_bbdee ]);};case 4:{_adaf =(_bbdee )-1;_aeda .emit (_facgg ,_eebc [_gaecaa :_bbdee ]);};case 11:{_adaf =(_bbdee )-1;_aeda .emit (_dbccbe ,_eebc [_gaecaa :_bbdee ]);};case 14:{_adaf =(_bbdee )-1;_aeda .emit (_bbcgc ,_eebc [_gaecaa :_bbdee ]);};case 15:{_adaf =(_bbdee )-1;_aeda .emit (_ece ,_eebc [_gaecaa +1:_bbdee -1]);};};};};goto _dgeee ;_dgeee :_gbgg =int (_eadg [_edbd ]);_bceb =uint (_gfge [_gbgg ]);_gbgg ++;for ;_bceb > 0;_bceb --{_gbgg ++;switch _gfge [_gbgg -1]{case 0:_gaecaa =0;case 1:_efcgg =0;};};if _edbd ==0{goto _gcfeb ;};if _adaf ++;_adaf !=_gdeff {goto _fgcef ;};_fefag :{};if _adaf ==_adggd {switch _edbd {case 1:goto _dfbec ;case 2:goto _dfbec ;case 31:goto _cfdac ;case 14:goto _dfbec ;case 15:goto _dfbec ;case 32:goto _ddbaf ;case 17:goto _dfbec ;case 33:goto _adgga ;case 18:goto _dfbec ;case 19:goto _dfbec ;case 34:goto _ceeb ;case 35:goto _cege ;case 36:goto _cege ;case 23:goto _bdcef ;case 37:goto _cege ;case 38:goto _bdfcc ;case 39:goto _caceb ;case 40:goto _dfcc ;case 41:goto _dfcc ;case 42:goto _dfcc ;case 43:goto _adgga ;case 44:goto _dfbec ;case 45:goto _dfcc ;case 46:goto _dfcc ;case 47:goto _dfcc ;case 48:goto _dfcc ;case 49:goto _dfcc ;case 50:goto _dfcc ;case 51:goto _dfcc ;case 52:goto _dfcc ;case 53:goto _dfcc ;case 54:goto _dfcc ;case 55:goto _dfcc ;case 56:goto _dfcc ;case 57:goto _dfcc ;case 58:goto _dfcc ;case 59:goto _dfbec ;};};_gcfeb :{};};if _gaecaa > 0{copy (_eebc [0:],_eebc [_gaecaa :]);};};_ =_adggd ;if _edbd ==_dbaag {_aeda .emit (_abdce ,nil );};close (_aeda ._bdff );};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};func _bcg (_bcb string )bool {for _ ,_eaeb :=range _cafd {_geg :=_eaeb .FindStringSubmatch (_bcb );if len (_geg )> 1{return true ;};};return false ;};var _bafcb =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _fafda =[...]int {1};func (_gccg ReferenceType )String ()string {if _gccg >=ReferenceType (len (_ddbag )-1){return _b .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_gccg );};return _agbcc [_ddbag [_gccg ]:_ddbag [_gccg +1]];};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};const _gcd =_adf +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_aecg :=args [0].AsNumber ();if _aecg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _bdea float64 ;_cdee :=args [1].AsNumber ();if _cdee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdea =_cdee .ValueNumber ;if _bdea < 0&&_aecg .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_ecbcf :=_aecg .ValueNumber ;_ecbcf ,_agab :=_eg .Modf (_ecbcf /_bdea );if _agab !=0{if _aecg .ValueNumber < 0&&_agab < 0{_ecbcf --;};};return MakeNumberResult (_ecbcf *_bdea );};

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_egd :=int (args [0].ValueNumber );if _egd < 0||_egd >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _egd <=1899{_egd +=1900;};_cfe :=_ge .Month (args [1].ValueNumber );_ffda :=int (args [2].ValueNumber );_fbed :=_gbcc (_egd ,_cfe ,_ffda );_abda :=_dcdg (_fdf ,_fbed )+1;if _abda < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_abda );};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_fgeg ,_dbbb ,_dbaf :=_ega (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _dbaf .Type ==ResultTypeError {return _dbaf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgfc :=_dbbb -_fgeg ;if _fgfc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_eeec :=args [2].ValueNumber ;if _eeec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fabbg :=(100-_eeec )/_eeec ;_dgeb :=360/_fgfc ;return MakeNumberResult (_fabbg *_dgeb );};func _degc (_bddf ,_gfdfe ,_dfeab Reference )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bddf .Value ,_gfdfe .Value ,_dfeab .Value );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_bafbd :=args [0].AsNumber ();_ceec :=args [1].AsNumber ();if _bafbd .Type ==ResultTypeNumber &&_ceec .Type ==ResultTypeNumber {_dbab :=_eg .Atan2 (_ceec .ValueNumber ,_bafbd .ValueNumber );if _dbab !=_dbab {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_dbab );};for _ ,_fbbed :=range []ResultType {_bafbd .Type ,_ceec .Type }{switch _fbbed {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _bafbd ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fbbed ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};func _bbbbb (_facfg string ,_cfcd func (_fgbb float64 )float64 )Function {return func (_agacf []Result )Result {if len (_agacf )!=1{return MakeErrorResult (_facfg +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cffdg :=_agacf [0].AsNumber ();switch _cffdg .Type {case ResultTypeNumber :_efge :=_cfcd (_cffdg .ValueNumber );if _eg .IsNaN (_efge ){return MakeErrorResult (_facfg +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _eg .IsInf (_efge ,0){return MakeErrorResult (_facfg +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _efge ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_facfg +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_efge );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_facfg +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _cffdg ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_facfg ,_cffdg .Type ));};};};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_afeg :=args [0].Ref ;if _afeg .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_cedc ,_ecgb :=_ege .ParseCellReference (_afeg .Value );if _ecgb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_afeg .Value );};return MakeNumberResult (float64 (_cedc .ColumnIdx +1));};const _dgb ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";

// Reference returns an invalid reference for Bool.
func (_gfb Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _eada (_ffbd ,_ceb ,_dbeb float64 )float64 {return (_ffbd *3600+_ceb *60+_dbeb )/86400};func (_dgbc *Lexer )nextRaw ()*node {for len (_dgbc ._gcgb )!=0{_ebaa :=<-_dgbc ._gcgb [len (_dgbc ._gcgb )-1];if _ebaa !=nil {return _ebaa ;};_dgbc ._gcgb =_dgbc ._gcgb [0:len (_dgbc ._gcgb )-1];};return <-_dgbc ._bdff ;};

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};const _cbg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";var _eaga =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Reference returns a string reference value to a range with prefix.
func (_bfbeg PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_cgdfd :=_bfbeg ._baca .Reference (ctx ,ev );_edfcg :=_bfbeg ._debba .Reference (ctx ,ev );_dbccf :=_bfbeg ._defge .Reference (ctx ,ev );if _cgdfd .Type ==ReferenceTypeSheet &&_edfcg .Type ==ReferenceTypeCell &&_dbccf .Type ==ReferenceTypeCell {return MakeRangeReference (_degc (_cgdfd ,_edfcg ,_dbccf ));};return ReferenceInvalid ;};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_defb :=len (args );if _defb !=3&&_defb !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdbff ,_dfba :=_adgdbe (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _dfba .Type ==ResultTypeError {return _dfba ;};_bgcbg ,_dfba :=_adgdbe (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _dfba .Type ==ResultTypeError {return _dfba ;};_dcccae ,_dfba :=_adgdbe (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _dfba .Type ==ResultTypeError {return _dfba ;};_gbdd :=0;if _defb ==3{return MakeStringResult (_d .Replace (_cdbff ,_bgcbg ,_dcccae ,-1));}else {_gcdeaa ,_cdcb :=_cdabc (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _cdcb .Type ==ResultTypeError {return _cdcb ;};_gbdd =int (_gcdeaa );if _gbdd < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_cfaed :=_cdbff ;_ddaac :=_gbdd ;_fbfa :=-1;_cbbcf :=len (_bgcbg );_dgfc :=0;for {_ddaac --;_gfddf :=_d .Index (_cfaed ,_bgcbg );if _gfddf ==-1{_fbfa =-1;break ;}else {_fbfa =_gfddf +_dgfc ;if _ddaac ==0{break ;};_cceaf :=_cbbcf +_gfddf ;_dgfc +=_cceaf ;_cfaed =_cfaed [_cceaf :];};};if _fbfa ==-1{return MakeStringResult (_cdbff );}else {_fdgg :=_cdbff [:_fbfa ];_bcefg :=_cdbff [_fbfa +_cbbcf :];return MakeStringResult (_fdgg +_dcccae +_bcefg );};};};

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_bggfg :=args [0].AsNumber ();if _bggfg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_fbgff ,_gffba :=_eg .Modf (_bggfg .ValueNumber );if _gffba < 0{_fbgff --;};return MakeNumberResult (_fbgff );};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_eg .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_dbce ,_eed :=_ebeec (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _eed .Type ==ResultTypeError {return _eed ;};_afac :=_dbce ._ccgb ;_gga :=_dbce ._dgfe ;_beaf :=_dbce ._eabd ;_edeb :=_dbce ._adab ;_gdfc :=_dbce ._caad ;_dgee :=_dbce ._faab ;_beag :=_dbce ._fge ;_fcbe ,_acff :=_aedb (_gga ,_beaf ,_beag );if _acff .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_aea :=_fcbe *_dgee *_afac ;if _gdfc ==0{return MakeNumberResult (_aea );};_bddc :=_afac *_dgee ;_fafd :=_afac -_edeb ;_dadb :=int ((_fafd -_aea )/_bddc );if _gdfc <=_dadb {return MakeNumberResult (_bddc );}else if _gdfc ==_dadb +1{return MakeNumberResult (_fafd -_bddc *float64 (_dadb )-_aea );}else {return MakeNumberResult (0);};};const _gbagc =16;

// Update returns the same object as updating sheet references does not affect named ranges.
func (_cdga NamedRangeRef )Update (q *_ag .UpdateQuery )Expression {return _cdga };

// String returns a string representation of SheetPrefixExpr.
func (_eadgf SheetPrefixExpr )String ()string {return _eadgf ._eadag };

// String returns a string representation for Bool.
func (_agg Bool )String ()string {if _agg ._ac {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fbd :=args [0].ValueNumber ;_dae :=args [1].ValueNumber ;if _dae < _fbd {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _dae ==_fbd {return MakeNumberResult (0);};_cdab :=_d .ToLower (args [2].ValueString );if _cdab =="\u0064"{return MakeNumberResult (_dae -_fbd );};_ecg :=_fdg (_fbd );_gbed :=_fdg (_dae );_efg ,_bfg ,_gfdd :=_ecg .Date ();_efcg ,_cfb ,_gfbe :=_gbed .Date ();_bea :=int (_bfg );_gfdb :=int (_cfb );var _ebc float64 ;switch _cdab {case "\u0079":_ebc =float64 (_efcg -_efg );if _gfdb < _bea ||(_gfdb ==_bea &&_gfbe < _gfdd ){_ebc --;};case "\u006d":_gabe :=_efcg -_efg ;_ggbg :=_gfdb -_bea ;if _gfbe < _gfdd {_ggbg --;};if _ggbg < 0{_gabe --;_ggbg +=12;};_ebc =float64 (_gabe *12+_ggbg );case "\u006d\u0064":_abdag :=_gfdb ;if _gfbe < _gfdd {_abdag --;};_ebc =float64 (int (_dae -_ced (_efcg ,_abdag ,_gfdd )));case "\u0079\u006d":_ebc =float64 (_gfdb -_bea );if _gfbe < _gfdd {_ebc --;};if _ebc < 0{_ebc +=12;};case "\u0079\u0064":_acf :=_efcg ;if _gfdb < _bea ||(_gfdb ==_bea &&_gfbe < _gfdd ){_acf --;};_ebc =float64 (int (_dae -_ced (_acf ,_bea ,_gfdd )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_ebc );};const _dbb ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_adf +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Eval evaluates and returns the result of a formula.
func (_ebd *defEval )Eval (ctx Context ,formula string )Result {_cec :=ParseString (formula );_ccc :=make (chan Result );go func (){if _cec ==nil {_ccc <-MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_ebd .checkLastEvalIsRef (ctx ,_cec );_ccc <-_cec .Eval (ctx ,_ebd );};}();select{case _dbe :=<-_ccc :return _dbe ;case <-_ge .After (_gbe ):_da .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_decae :=_ffbca (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _decae .Type !=ResultTypeEmpty {return _decae ;};_ceggc :=_bbcbf (args [1:]);_cacdb :=-_eg .MaxFloat64 ;_egbfg :=_agfeg (args [0]);for _ ,_bedd :=range _ceggc {_acdga :=_egbfg [_bedd ._gddd ][_bedd ._ddaad ].ValueNumber ;if _cacdb < _acdga {_cacdb =_acdga ;};};if _cacdb ==-_eg .MaxFloat64 {_cacdb =0;};return MakeNumberResult (float64 (_cacdb ));};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcaa :=0;_dcbc :=false ;for _ ,_bggd :=range args {switch _bggd .Type {case ResultTypeList ,ResultTypeArray :_dac :=Xor (_bggd .ListValues ());if _dac .Type ==ResultTypeError {return _dac ;};if _dac .ValueNumber !=0{_fcaa ++;};_dcbc =true ;case ResultTypeNumber :if _bggd .ValueNumber !=0{_fcaa ++;};_dcbc =true ;case ResultTypeString :case ResultTypeError :return _bggd ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_dcbc {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_fcaa %2!=0);};func _aeba (_cedf int )bool {return _cedf ==0||_cedf ==4};const _ccb ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};var _dcef =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// FunctionCall is a function call expression.
type FunctionCall struct{_aecc string ;_aaec []Expression ;};func _fbbf (_dfec string )*criteriaRegex {_geaa :=&criteriaRegex {};if _dfec ==""{return _geaa ;};if _cgdge :=_fdaf .FindStringSubmatch (_dfec );len (_cgdge )> 1{_geaa ._aeeb =_dfdge ;_geaa ._aede =_cgdge [1];}else if _gbcg :=_bfge .FindStringSubmatch (_dfec );len (_gbcg )> 1{_geaa ._aeeb =_dfdge ;_geaa ._aede =_gbcg [1];}else if _gcfd :=_agga .FindStringSubmatch (_dfec );len (_gcfd )> 1{_geaa ._aeeb =_beedf ;_geaa ._aede =_gcfd [1];}else if _egfc :=_dacga .FindStringSubmatch (_dfec );len (_egfc )> 1{_geaa ._aeeb =_efagc ;_geaa ._aede =_egfc [1];}else if _ffbge :=_abdac .FindStringSubmatch (_dfec );len (_ffbge )> 1{_geaa ._aeeb =_gecc ;_geaa ._aede =_ffbge [1];}else if _bdabd :=_edbc .FindStringSubmatch (_dfec );len (_bdabd )> 1{_geaa ._aeeb =_cbddb ;_geaa ._aede =_bdabd [1];};return _geaa ;};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);var _daecf =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_faa :=args [1].ValueNumber ;_ggfe :=args [0];var _gee float64 ;switch _ggfe .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_gee =_ggfe .ValueNumber ;case ResultTypeString :_bgb :=DateValue ([]Result {args [0]});if _bgb .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_gee =_bgb .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_cbd :=_fdg (_gee );_aeb :=_cbd .AddDate (0,int (_faa ),0);_daa ,_afc ,_affd :=_aeb .Date ();_eba :=_ced (_daa ,int (_afc ),_affd );if _eba < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_eba );};func (_cegcc PrefixHorizontalRange )horizontalRangeReference (_bcebf string )string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bcebf ,_cegcc ._badg ,_cegcc ._abdgc );};

// Update updates references in the VerticalRange after removing a row/column.
func (_fcdeg VerticalRange )Update (q *_ag .UpdateQuery )Expression {if q .UpdateType ==_ag .UpdateActionRemoveColumn {_cbbdc :=_fcdeg ;if q .UpdateCurrentSheet {_aaada :=q .ColumnIdx ;_cbbdc ._ceff =_ggf (_fcdeg ._ceff ,_aaada );_cbbdc ._bggc =_ggf (_fcdeg ._bggc ,_aaada );};return _cbbdc ;};return _fcdeg ;};

// Function is a standard function whose result only depends on its arguments.
type Function func (_gdbfd []Result )Result ;const _fdfac =57369;

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fgabf :=args [0].AsNumber ();if _fgabf .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eddf :=float64 (1);if _fgabf .ValueNumber < 0{_eddf =-1;};if len (args )> 1{_dddga :=args [1].AsNumber ();if _dddga .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_eddf =_dddga .ValueNumber ;};_fcdfe :=float64 (1);if len (args )> 2{_eecaa :=args [2].AsNumber ();if _eecaa .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fcdfe =_eecaa .ValueNumber ;};if len (args )==1{return MakeNumberResult (_eg .Floor (_fgabf .ValueNumber ));};_babd :=_fgabf .ValueNumber ;_babd ,_dfdbg :=_eg .Modf (_babd /_eddf );if _dfdbg !=0&&_fgabf .ValueNumber < 0&&_fcdfe > 0{_babd ++;};return MakeNumberResult (_babd *_eddf );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_cfccc :=_eb .Buffer {};for _ ,_cbdec :=range args {switch _cbdec .Type {case ResultTypeString :_cfccc .WriteString (_cbdec .ValueString );case ResultTypeNumber :var _adeae string ;if _cbdec .IsBoolean {if _cbdec .ValueNumber ==0{_adeae ="\u0046\u0041\u004cS\u0045";}else {_adeae ="\u0054\u0052\u0055\u0045";};}else {_adeae =_cbdec .AsString ().ValueString ;};_cfccc .WriteString (_adeae );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_cfccc .String ());};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fceb :=args [0];if _fceb .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggab :=len (_fceb .ValueArray );for _ ,_aabdc :=range _fceb .ValueArray {if len (_aabdc )!=_ggab {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_gbaef (_fceb .ValueArray ));};

// GetFilename returns an empty string for the invalid reference context.
func (_bfcab *ivr )GetFilename ()string {return ""};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_dgfd :=args [0].AsNumber ();if _dgfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_cdcf :=float64 (1);if _dgfd .ValueNumber < 0{_cdcf =-1;};if len (args )> 1{_acec :=args [1].AsNumber ();if _acec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cdcf =_acec .ValueNumber ;};if _cdcf < 0&&_dgfd .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_eg .Ceil (_dgfd .ValueNumber ));};_ggfef :=_dgfd .ValueNumber ;_ggfef ,_fafg :=_eg .Modf (_ggfef /_cdcf );if _fafg > 0{_ggfef ++;};return MakeNumberResult (_ggfef *_cdcf );};const _gddg ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func (_ccdaa *ivr )Sheet (name string )Context {return _ccdaa };

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_ded CellRef )Update (q *_ag .UpdateQuery )Expression {if q .UpdateCurrentSheet {_ded ._ffd =_ffe (_ded ._ffd ,q );};return _ded ;};func _febg (_bbfb Result ,_bccg *criteriaParsed )bool {if _bbfb .Type ==ResultTypeEmpty {return false ;};if _bccg ._gefa {return _bbfb .ValueNumber ==_bccg ._gfccg ;}else {_ecaa :=_d .ToLower (_bbfb .ValueString );return _bccg ._bceae ==_ecaa ||_be .Match (_bccg ._bceae ,_ecaa );};};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdccc :=args [0].ValueNumber ;if _cdccc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gegab :=args [1].ValueNumber ;if _gegab <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bacge :=args [2].ValueNumber ;if _bacge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_eg .Log10 (_bacge )-_eg .Log10 (_gegab ))/_eg .Log10 (1+_cdccc ));};

// Reference returns a string reference value to a horizontal range.
func (_bedac HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_bedac .horizontalRangeReference ()};};const _bdgcd =1;

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_ebfb :=[]string {};for _fecfa :=range _ggcac {_ebfb =append (_ebfb ,_fecfa );};for _geff :=range _efgc {_ebfb =append (_ebfb ,_geff );};_e .Strings (_ebfb );return _ebfb ;};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_caede ,_ggbd :=_ecbaf ("\u0046\u0049\u004e\u0044",args );if _ggbd .Type !=ResultTypeEmpty {return _ggbd ;};_gfae :=_caede ._cgcgf ;if _gfae ==""{return MakeNumberResult (1.0);};_cbcaag :=_caede ._gcfe ;_ccfe :=_caede ._fcgaa ;_agaf :=1;for _gegae :=range _cbcaag {if _agaf < _ccfe {_agaf ++;continue ;};_fbag :=_d .Index (_cbcaag [_gegae :],_gfae );if _fbag ==0{return MakeNumberResult (float64 (_agaf ));};_agaf ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_eg .Pi );};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fecc :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fgceg :=args [2].ValueNumber +1;if _fgceg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gefc :=_agfeg (args [0]);_aacea :=float64 (len (_gefc ));_bdbb ,_dfdf :=0.0,0.0;_cfcg ,_fade :=1.0,1.0;_abge ,_bdbd :=false ,false ;for _ ,_beacg :=range _gefc {for _ ,_gcc :=range _beacg {if _gcc .Type ==ResultTypeNumber &&!_gcc .IsBoolean {_ebca :=_gcc .ValueNumber ;if _ebca ==0{continue ;}else {if _ebca > 0{_abge =true ;_dfdf +=_gcc .ValueNumber *_fade ;}else {_bdbd =true ;_bdbb +=_gcc .ValueNumber *_cfcg ;};_cfcg /=_fecc ;_fade /=_fgceg ;};};};};if !_abge ||!_bdbd {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ggde :=-_dfdf /_bdbb ;_ggde *=_eg .Pow (_fgceg ,_aacea -1);_ggde =_eg .Pow (_ggde ,1/(_aacea -1));return MakeNumberResult (_ggde -1);};

// String returns a string representation of a vertical range with prefix.
func (_bagef PrefixVerticalRange )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_bagef ._eddgc .String (),_bagef ._fddaf ,_bagef ._ccggd );};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_fgfg :=_d .Split (v ,"\u003a");if len (_fgfg )!=2{return nil ;};_afdfe ,_ :=_ae .Atoi (_fgfg [0]);_cbbga ,_ :=_ae .Atoi (_fgfg [1]);if _afdfe > _cbbga {_afdfe ,_cbbga =_cbbga ,_afdfe ;};return HorizontalRange {_ebccge :_afdfe ,_fdega :_cbbga };};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_deade :=args [0].AsNumber ();if _deade .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gddb :=float64 (1);if _deade .ValueNumber < 0{_gddb =-1;};if len (args )> 1{_dbfg :=args [1].AsNumber ();if _dbfg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gddb =_eg .Abs (_dbfg .ValueNumber );};if len (args )==1{return MakeNumberResult (_eg .Ceil (_deade .ValueNumber ));};_bfgbb :=_deade .ValueNumber ;_bfgbb ,_bcbg :=_eg .Modf (_bfgbb /_gddb );if _bcbg !=0{if _deade .ValueNumber > 0{_bfgbb ++;};};return MakeNumberResult (_bfgbb *_gddb );};func (_fabaa ResultType )String ()string {if _fabaa >=ResultType (len (_addbc )-1){return _b .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_fabaa );};return _gcgdff [_addbc [_fabaa ]:_addbc [_fabaa +1]];};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_gfca ,_acdg :=_cbgfe (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _acdg .Type ==ResultTypeError {return _acdg ;};_edc :=_gfca ._addg ;_abba :=_gfca ._gfcf ;_gcgd ,_acdg :=_egdb (_gfca ._bcba ,_gfca ._eag ,_edc ,_abba );if _acdg .Type ==ResultTypeError {return _acdg ;};return MakeNumberResult (_gcgd );};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_gbfd .Float64 ());};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_dfdc :=args [0];switch _dfdc .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_ccfg :=0.0;_becf :=0.0;for _ ,_abdb :=range _dfdc .ValueString {_efbf :=0.0;switch _abdb {case 'I':_efbf =1;case 'V':_efbf =5;case 'X':_efbf =10;case 'L':_efbf =50;case 'C':_efbf =100;case 'D':_efbf =500;case 'M':_efbf =1000;};_ccfg +=_efbf ;switch {case _becf ==_efbf &&(_becf ==5||_becf ==50||_becf ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_becf ==_efbf :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _becf < _efbf {_ccfg -=2*_becf ;};_becf =_efbf ;};return MakeNumberResult (_ccfg );case ResultTypeError :return _dfdc ;default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dfdc .Type ));};};func _dgdee (_bgeba ,_cgcc ,_gbbc ,_efbe ,_cecaa ,_gabcb float64 ,_abe int )(float64 ,Result ){_dgdc :=int (_gabcb );_efbga :=_faba (_bgeba ,_cgcc ,_dgdc ,_abe );_fcgb :=_dagg (_bgeba ,_cgcc ,_dgdc ,_abe )/_efbga ;_fcad ,_aadb :=_egdb (_bgeba ,_cgcc ,_dgdc ,_abe );if _aadb .Type ==ResultTypeError {return 0,_aadb ;};_ecbfg :=_acaa (_bgeba ,_cgcc ,_dgdc ,_abe );_bebb :=_cecaa /_eg .Pow (1+_efbe /_gabcb ,_fcad -1+_fcgb );_bebb -=100*_gbbc /_gabcb *_ecbfg /_efbga ;_gceb :=100*_gbbc /_gabcb ;_ggeff :=1+_efbe /_gabcb ;for _cacab :=0.0;_cacab < _fcad ;_cacab ++{_bebb +=_gceb /_eg .Pow (_ggeff ,_cacab +_fcgb );};return _bebb ,MakeEmptyResult ();};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};func _deca (_dcdcb ,_gcb _ge .Time )bool {_ebbe :=_dcdcb .Unix ();_efce :=_gcb .Unix ();_ggdd :=_dcdcb .Year ();_dcbf :=_gbcc (_ggdd ,_ge .March ,1);if _fde (_ggdd )&&_ebbe < _dcbf &&_efce >=_dcbf {return true ;};var _fga =_gcb .Year ();var _debb =_gbcc (_fga ,_ge .March ,1);return (_fde (_fga )&&_efce >=_debb &&_ebbe < _debb );};type Expression interface{Eval (_ggc Context ,_dcd Evaluator )Result ;Reference (_cbb Context ,_fcdd Evaluator )Reference ;String ()string ;Update (_gag *_ag .UpdateQuery )Expression ;};

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_aecc :name ,_aaec :args };};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fbcc :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_fbcc *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_degd :=_agfeg (args [1]);for _ ,_cgeg :=range _degd {for _ ,_fag :=range _cgeg {if _fag .Type !=ResultTypeNumber ||_fag .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_fbcc *=1.0+_fag .ValueNumber ;};};return MakeNumberResult (_fbcc );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};func _cge (_bcaa ,_adce _ge .Time ,_cbcd int )float64 {if _bcaa .After (_adce ){_bcaa ,_adce =_adce ,_bcaa ;};_bafc :=0;_dgab ,_beac ,_agfc :=_bcaa .Date ();_fffa ,_agfd ,_aag :=_adce .Date ();_dccf ,_daef :=int (_beac ),int (_agfd );_cdcc ,_fffc :=_ebfa (_dgab ,_dccf ,_agfc ,_cbcd ),_ebfa (_fffa ,_daef ,_aag ,_cbcd );if !_aeba (_cbcd ){return _ced (_fffa ,_daef ,_fffc )-_ced (_dgab ,_dccf ,_cdcc );};if _cbcd ==0{if (_dccf ==2||_cdcc < 30)&&_aag ==31{_fffc =31;}else if _daef ==2&&_fffc ==_bgg (_fffa ,_daef ){_fffc =_bgg (_fffa ,2);};}else {if _dccf ==2&&_cdcc ==30{_cdcc =_bgg (_dgab ,2);};if _daef ==2&&_fffc ==30{_fffc =_bgg (_fffa ,2);};};if _dgab < _fffa ||(_dgab ==_fffa &&_dccf < _daef ){_bafc =30-_cdcc +1;_agfc =1;_cdcc =1;_cbe :=_ge .Date (_dgab ,_ge .Month (_dccf ),_agfc ,0,0,0,0,_ge .UTC ).AddDate (0,1,0);if _cbe .Year ()< _fffa {_bafc +=_fcfb (_cbe .Year (),int (_cbe .Month ()),12,_cbcd );_cbe =_cbe .AddDate (0,13-int (_cbe .Month ()),0);_bafc +=_eeaf (_cbe .Year (),_fffa -1,_cbcd );};_bafc +=_fcfb (_fffa ,int (_cbe .Month ()),_daef -1,_cbcd );_cbe =_cbe .AddDate (0,_daef -int (_cbe .Month ()),0);_dccf =_cbe .Day ();};_bafc +=_fffc -_cdcc ;if _bafc > 0{return float64 (_bafc );}else {return 0;};};func _cgd (_gafg ,_adgd int )int {switch _adgd {case 1:if _fde (_gafg ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};const _begc =57355;const _afadg =57358;const _gec ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";const _fcbde =187;func _fbab (_afcac Context ,_aacab ,_ffcg string )(string ,string ){_cafcc :=_aacab +"\u0031";_daggf :=_afcac .LastRow (_aacab );_ggdba :=_ffcg +_ae .Itoa (_daggf );return _cafcc ,_ggdba ;};func _accg (_abgbe []Result ,_gagcd bool )Result {var _dafa string ;if _gagcd {_dafa ="\u004c\u0041\u0052G\u0045";}else {_dafa ="\u0053\u004d\u0041L\u004c";};if len (_abgbe )!=2{return MakeErrorResult (_dafa +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eaadd :=_abgbe [0];var _edcg [][]Result ;switch _eaadd .Type {case ResultTypeArray :_edcg =_eaadd .ValueArray ;case ResultTypeList :_edcg =[][]Result {_eaadd .ValueList };default:return MakeErrorResult (_dafa +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_edcg )==0{return MakeErrorResult (_dafa +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _abgbe [1].Type !=ResultTypeNumber {return MakeErrorResult (_dafa +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_eagd :=_abgbe [1].ValueNumber ;if _eagd < 1{return MakeErrorResultType (ErrorTypeNum ,_dafa +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_acfb :=int (_eagd );if float64 (_acfb )!=_eagd {return MakeErrorResultType (ErrorTypeNum ,_dafa +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_ggbge :=[]float64 {};for _ ,_abad :=range _edcg {for _ ,_gffe :=range _abad {if _gffe .Type ==ResultTypeNumber {_ggbge =append (_ggbge ,_gffe .ValueNumber );};};};if _acfb > len (_ggbge ){return MakeErrorResultType (ErrorTypeNum ,_dafa +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_dbebg :=_dd .MergeSort (_ggbge );if _gagcd {return MakeNumberResult (_dbebg [len (_dbebg )-_acfb ]);}else {return MakeNumberResult (_dbebg [_acfb -1]);};};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dbfcf :=true ;for _ ,_fbdc :=range args {_fbdc =_fbdc .AsNumber ();switch _fbdc .Type {case ResultTypeList ,ResultTypeArray :_bdbdc :=And (_fbdc .ListValues ());if _bdbdc .Type ==ResultTypeError {return _bdbdc ;};if _bdbdc .ValueNumber ==0{_dbfcf =false ;};case ResultTypeNumber :if _fbdc .ValueNumber ==0{_dbfcf =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _fbdc ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_dbfcf );};const _dgccg ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Eval evaluates and returns a string.
func (_eeebc String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_eeebc ._cfbdb )};

// LastRow returns 0 for the invalid reference context.
func (_accgf *ivr )LastRow (colFrom string )int {return 0};type ri struct{_dgea float64 ;_bdgc string ;};func _cbgf (){_gaf ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_bc .MustCompile ("\u005e"+_gddg +_gbg );_gaf ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_bc .MustCompile ("\u005e"+_gcd +_gbg );_gaf ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_bc .MustCompile ("\u005e"+_ggb +_gbg );_gaf ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_bc .MustCompile ("\u005e"+_dbb +_gbg );_bdg ["\u0068\u0068"]=_bc .MustCompile (_cgbe +_cbg +"\u0024");_bdg ["\u0068\u0068\u003am\u006d"]=_bc .MustCompile (_cgbe +_gec +"\u0024");_bdg ["\u006d\u006d\u003as\u0073"]=_bc .MustCompile (_cgbe +_feg +"\u0024");_bdg ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_bc .MustCompile (_cgbe +_dgccg +"\u0024");_cafd =[]*_bc .Regexp {_bc .MustCompile ("\u005e"+_gddg +"\u0024"),_bc .MustCompile ("\u005e"+_gcd +"\u0024"),_bc .MustCompile ("\u005e"+_ggb +"\u0024"),_bc .MustCompile ("\u005e"+_dbb +"\u0024")};_aad =[]*_bc .Regexp {_bc .MustCompile ("\u005e"+_cbg +"\u0024"),_bc .MustCompile ("\u005e"+_gec +"\u0024"),_bc .MustCompile ("\u005e"+_feg +"\u0024"),_bc .MustCompile ("\u005e"+_dgccg +"\u0024")};};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_befb :=len (args );if _befb < 3||_befb > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dbac :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_beab :=args [1].ValueNumber ;if _beab ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_cccd :=args [2].ValueNumber ;_fagf :=0.0;if _befb >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fagf =args [3].ValueNumber ;};_cdfc :=0.0;if _befb ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cdfc =args [4].ValueNumber ;if _cdfc !=0{_cdfc =1;};};var _bff float64 ;if _dbac ==0{_bff =(_cccd +_fagf )/_beab ;}else {_ccce :=_eg .Pow (1+_dbac ,_beab );if _cdfc ==1{_bff =(_fagf *_dbac /(_ccce -1)+_cccd *_dbac /(1-1/_ccce ))/(1+_dbac );}else {_bff =_fagf *_dbac /(_ccce -1)+_cccd *_dbac /(1-1/_ccce );};};return MakeNumberResult (-_bff );};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_cca :=len (args );if _cca !=6&&_cca !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_cfaf ,_ecae ,_gfcfe :=_ega (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _gfcfe .Type ==ResultTypeError {return _gfcfe ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aaebc :=args [2].ValueNumber ;if _aaebc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_ddfb :=args [3].ValueNumber ;if _ddfb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgeg :=args [4].ValueNumber ;if _dgeg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_effgb :=args [5];if _effgb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgfe :=_effgb .ValueNumber ;if !_dcfd (_fgfe ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dgbg :=0;if _cca ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgbg =int (args [6].ValueNumber );if !_ecgga (_dgbg ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_dbef ,_gfcfe :=_dgdee (_cfaf ,_ecae ,_aaebc ,_ddfb ,_dgeg ,_fgfe ,_dgbg );if _gfcfe .Type ==ResultTypeError {return _gfcfe ;};return MakeNumberResult (_dbef );};const _dbaag int =0;const (_gfcc countMode =iota ;_cccb ;_bdegf ;);func _ebeec (_gfcfa []Result ,_ccdg string )(*amorArgs ,Result ){_afff :=len (_gfcfa );if _afff !=6&&_afff !=7{return nil ,MakeErrorResult (_ccdg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _gfcfa [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccdg +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_affca :=_gfcfa [0].ValueNumber ;if _affca < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccdg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_egcb ,_ebbf :=_adec (_gfcfa [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_ccdg );if _ebbf .Type ==ResultTypeError {return nil ,_ebbf ;};_bgbe ,_ebbf :=_adec (_gfcfa [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_ccdg );if _ebbf .Type ==ResultTypeError {return nil ,_ebbf ;};if _bgbe < _egcb {return nil ,MakeErrorResultType (ErrorTypeNum ,_ccdg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _gfcfa [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccdg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdaac :=_gfcfa [3].ValueNumber ;if _fdaac < 0||_fdaac > _affca {return nil ,MakeErrorResultType (ErrorTypeNum ,_ccdg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _gfcfa [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccdg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cagf :=int (_gfcfa [4].ValueNumber );if _cagf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccdg +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _gfcfa [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccdg +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fggf :=_gfcfa [5].ValueNumber ;if _fggf < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_ccdg +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_dcca :=0;if _afff ==7&&_gfcfa [6].Type !=ResultTypeEmpty {if _gfcfa [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ccdg +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcca =int (_gfcfa [6].ValueNumber );if !_ecgga (_dcca )||_dcca ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ccdg );};};return &amorArgs {_affca ,_egcb ,_bgbe ,_fdaac ,_cagf ,_fggf ,_dcca },_fea ;};func _fdccg (_efbfc []Result )(float64 ,float64 ,Result ){_adabd :=0.0;_cefg :=1.0;for _ ,_aceb :=range _efbfc {switch _aceb .Type {case ResultTypeNumber :_adabd +=_aceb .ValueNumber ;_cefg *=_ffef (_aceb .ValueNumber );case ResultTypeList ,ResultTypeArray :_gdde ,_bdfb ,_eefgf :=_fdccg (_aceb .ListValues ());_adabd +=_gdde ;_cefg *=_ffef (_bdfb );if _eefgf .Type ==ResultTypeError {return 0,0,_eefgf ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_aceb ;};};return _adabd ,_cefg ,_fea ;};var _aad =[]*_bc .Regexp {};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gffg :=args [0];switch _gffg .Type {case ResultTypeError :return _gffg ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_gffg .ValueNumber !=0);};if _gffg .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _debfa (args );case ResultTypeArray :return _degb (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// String returns a string representation of ConstArrayExpr.
func (_gbd ConstArrayExpr )String ()string {return ""};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};type couponArgs struct{_bcba float64 ;_eag float64 ;_addg int ;_gfcf int ;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_dfefa :=_d .Split (v ,"\u003a");if len (_dfefa )!=2{return nil ;};if _dfefa [0]> _dfefa [1]{_dfefa [0],_dfefa [1]=_dfefa [1],_dfefa [0];};return VerticalRange {_ceff :_dfefa [0],_bggc :_dfefa [1]};};var _fdf int64 =_gbcc (1900,_ge .January ,1);func (_dea *evCache )GetFromCache (key string )(Result ,bool ){_dea ._ebf .Lock ();_cgb ,_dfg :=_dea ._fbe [key ];_dea ._ebf .Unlock ();return _cgb ,_dfg ;};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_cafcb :=args [0].AsString ();if _cafcb .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_ddbac :=_eb .Buffer {};_agcd :=false ;for _ ,_fgeac :=range _cafcb .ValueString {if !_agcd &&_bf .IsLetter (_fgeac ){_ddbac .WriteRune (_bf .ToUpper (_fgeac ));}else {_ddbac .WriteRune (_bf .ToLower (_fgeac ));};_agcd =_bf .IsLetter (_fgeac );};return MakeStringResult (_ddbac .String ());};func _ebfa (_fgae ,_cged ,_aebe ,_abc int )int {if !_aeba (_abc ){return _aebe ;};_ebcb :=_aebe ;_afag :=_bgg (_fgae ,_cged );if _ebcb > 30||_aebe >=_afag ||_ebcb >=_afag {_ebcb =30;};return _ebcb ;};func _faae (_fbce []Result ,_gbdg bool )Result {_fgeb :="\u004d\u0041\u0058";if _gbdg {_fgeb ="\u004d\u0041\u0058\u0041";};if len (_fbce )==0{return MakeErrorResult (_fgeb +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbed :=-_eg .MaxFloat64 ;for _ ,_begd :=range _fbce {switch _begd .Type {case ResultTypeNumber :if (_gbdg ||!_begd .IsBoolean )&&_begd .ValueNumber > _bbed {_bbed =_begd .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_fdfc :=_faae (_begd .ListValues (),_gbdg );if _fdfc .ValueNumber > _bbed {_bbed =_fdfc .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_ggbedb :=0.0;if _gbdg {_ggbedb =_begd .AsNumber ().ValueNumber ;};if _ggbedb > _bbed {_bbed =_ggbedb ;};default:_da .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_fgeb +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_begd .Type );};};if _bbed ==-_eg .MaxFloat64 {_bbed =0;};return MakeNumberResult (_bbed );};func _adad (_babbe ,_feaf int )string {const TOKSTART =4;if !_ffbbe {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_affb :=range _gbbbf {if _affb ._ebdce ==_babbe &&_affb ._dgeae ==_feaf {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_affb ._fgcb ;};};_bbgd :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_ccgf (_feaf );_acgc :=make ([]int ,0,4);_fdda :=_gcca [_babbe ];for _aaacf :=TOKSTART ;_aaacf -1< len (_bdefe );_aaacf ++{if _ecdb :=_fdda +_aaacf ;_ecdb >=0&&_ecdb < _fcbde &&_cdge [_daecf [_ecdb ]]==_aaacf {if len (_acgc )==cap (_acgc ){return _bbgd ;};_acgc =append (_acgc ,_aaacf );};};if _gagg [_babbe ]==-2{_cecg :=0;for _ccdae [_cecg ]!=-1||_ccdae [_cecg +1]!=_babbe {_cecg +=2;};for _cecg +=2;_ccdae [_cecg ]>=0;_cecg +=2{_bbgf :=_ccdae [_cecg ];if _bbgf < TOKSTART ||_ccdae [_cecg +1]==0{continue ;};if len (_acgc )==cap (_acgc ){return _bbgd ;};_acgc =append (_acgc ,_bbgf );};if _ccdae [_cecg +1]!=0{return _bbgd ;};};for _bbcba ,_ebcad :=range _acgc {if _bbcba ==0{_bbgd +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_bbgd +="\u0020\u006f\u0072\u0020";};_bbgd +=_ccgf (_ebcad );};return _bbgd ;};const _gebbg =57368;func _ebad (){_bbbb =_bc .MustCompile ("\u005e\u0030\u002b\u0024");_dccb =_bc .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_gace =_bc .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_caadg =_bc .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_abgef =_bc .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_aadaa =_bc .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_agacg =_bc .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_gfgg =_bc .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_cdfed =_bc .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_gcgee =_bc .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_faacg =_bc .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_cbag =_bc .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_adgc +_adgc +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_adgc +_adgc +"\u0029\u002b\u0059+\u0024");_daffg =_bc .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_adgc +_adgc +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_adgc +_adgc +"\u0029\u002b\u0059+\u0024");_cffb =_bc .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_ggce =_bc .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};func NewLexer ()*Lexer {return &Lexer {_bdff :make (chan *node )}};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_gcgacc *ivr )GetLabelPrefix (cellRef string )string {return ""};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_gdcbe ,_bgdg Expression };var _fdggg =[...]string {};

// Reference returns an invalid reference for String.
func (_cbccgc String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_ceeeg :pfx ,_bcfd :exp }};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_bcdd ,_bgc ,_debbg :=_baga (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _debbg .Type ==ResultTypeError {return _debbg ;};if _bgc < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _bcdd ==0{return MakeNumberResult (0);};_cbdda :=_bcdd < 0;if _cbdda {_bcdd =-_bcdd ;};_ffbde :=args [0].Value ();_efbg :=_d .Split (_ffbde ,"\u002e");_cede :=float64 (int (_bcdd ));_fddc :=_efbg [1];_fbbc :=len (_fddc );_gdbff :=int (_eg .Log10 (_bgc ))+1;_addb :=float64 (_gdbff -_fbbc );_dgaba ,_fcef :=_ae .ParseFloat (_fddc ,64);if _fcef !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_dgaba *=_eg .Pow (10,_addb );_gcdd :=_cede +_dgaba /_bgc ;if _cbdda {_gcdd =-_gcdd ;};return MakeNumberResult (_gcdd );};const _ebac =57374;

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_eegfd .Lock ();defer _eegfd .Unlock ();if _ ,_bcage :=_efgc [name ];_bcage {_da .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_efgc [name ]=fn ;};func _dgafc (_adda Result )bool {_dfca :=_adda .Type ;return _dfca !=ResultTypeArray &&_dfca !=ResultTypeList ;};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_eedf (args ,_bdegf ));};func (_dgda Result )String ()string {return _dgda .Value ()};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_fdfa :=MakeNumberResult (0);for _ ,_bagb :=range args {_bagb =_bagb .AsNumber ();switch _bagb .Type {case ResultTypeNumber :_fdfa .ValueNumber +=_bagb .ValueNumber ;case ResultTypeList ,ResultTypeArray :_cgdga :=Sum (_bagb .ListValues ());if _cgdga .Type !=ResultTypeNumber {return _cgdga ;};_fdfa .ValueNumber +=_cgdga .ValueNumber ;case ResultTypeString :case ResultTypeError :return _bagb ;case ResultTypeEmpty :default:return MakeErrorResult (_b .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bagb .Type ));};};return _fdfa ;};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_bdce ,_eccgg ,_bgcc :=_baga (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _bgcc .Type ==ResultTypeError {return _bgcc ;};if _eccgg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _bdce ==0{return MakeNumberResult (0);};_abce :=_bdce < 0;if _abce {_bdce =-_bdce ;};_ccbf :=float64 (int (_bdce ));_agcc :=args [0].Value ();_gegb :=_d .Split (_agcc ,"\u002e");_bddd :=0.0;if len (_gegb )> 1{var _cbeb error ;_eade :=_gegb [1];_bddd ,_cbeb =_ae .ParseFloat (_eade ,64);if _cbeb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_eegg :=float64 (len (_eade ));_bddd /=_eg .Pow (10,_eegg );};_gbcb :=_bddd *_eccgg /_eg .Pow (10,float64 (int (_eg .Log10 (_eccgg )))+1)+_ccbf ;if _abce {_gbcb =-_gbcb ;};return MakeNumberResult (_gbcb );};

// Eval evaluates and returns an expression with prefix.
func (_eefb PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_bccc :=_eefb ._ceeeg .Reference (ctx ,ev );switch _bccc .Type {case ReferenceTypeSheet :if _febad (_bccc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_b .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_bccc .Value ));};_agbda :=ctx .Sheet (_bccc .Value );return _eefb ._bcfd .Eval (_agbda ,ev );default:return MakeErrorResult (_b .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_bccc .Type ));};};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_gfcb :=len (args );if _gfcb < 5||_gfcb > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eadf :=args [0].ValueNumber ;if _eadf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbbdf :=args [1].ValueNumber ;if _bbbdf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfcc :=args [2].ValueNumber ;if _cfcc ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _cfcc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_caea :=args [3].ValueNumber ;if _caea < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bbec :=args [4].ValueNumber ;if _caea > _bbec {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _bbec > _cfcc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_bcfa :=2.0;if _gfcb > 5{if args [5].Type ==ResultTypeEmpty {_bcfa =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcfa =args [5].ValueNumber ;if _bcfa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_dbcc :=false ;if _gfcb > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_dbcc =args [6].ValueNumber !=0;};_dgce :=0.0;_cedge :=_eg .Floor (_caea );_gfgf :=_eg .Ceil (_bbec );if _dbcc {for _bbdbb :=_cedge +1;_bbdbb <=_gfgf ;_bbdbb ++{_gfbec :=_ggbed (_eadf ,_bbbdf ,_cfcc ,_bbdbb ,_bcfa );if _bbdbb ==_cedge +1{_gfbec *=_eg .Min (_bbec ,_cedge +1)-_caea ;}else if _bbdbb ==_gfgf {_gfbec *=_bbec +1-_gfgf ;};_dgce +=_gfbec ;};}else {_efed :=_cfcc ;var _fbgb float64 ;if !_agdd (_caea ,_eg .Floor (_caea )){if _bcfa ==1{_debf :=_cfcc /2;if _caea > _debf ||_agdd (_caea ,_debf ){_fbgb =_caea -_debf ;_caea =_debf ;_bbec -=_fbgb ;_efed ++;};};};if _bcfa !=0{_eadf -=_bfbb (_eadf ,_bbbdf ,_cfcc ,_efed ,_caea ,_bcfa );};_dgce =_bfbb (_eadf ,_bbbdf ,_cfcc ,_cfcc -_caea ,_bbec -_caea ,_bcfa );};return MakeNumberResult (_dgce );};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_beadd :=args [0];_ggbcb :=args [1];if _ggbcb .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ceef :=args [2].AsNumber ();if _ceef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfdgd :=false ;if len (args )==4{_daec :=args [3].AsNumber ();if _daec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _daec .ValueNumber ==0{_gfdgd =true ;};};_abae :=-1;_dfgag :=false ;if len (_ggbcb .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_fcbd :=_ggbcb .ValueArray [0];_feef :for _gcce ,_baefb :=range _fcbd {switch _dgfb (_baefb ,_beadd ,false ,_gfdgd ){case _ecgf :_abae =_gcce ;case _deda :_abae =_gcce ;_dfgag =true ;break _feef ;};};if _abae ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_eecb :=int (_ceef .ValueNumber )-1;if _eecb < 0||_eecb > len (_ggbcb .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_fcbd =_ggbcb .ValueArray [_eecb ];if _abae < 0||_abae >=len (_fcbd ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _dfgag ||!_gfdgd {return _fcbd [_abae ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};var InvalidReferenceContext =&ivr {};func (_baeff node )String ()string {return _b .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_baeff ._bgfdc ,_cgbb (string (_baeff ._bgfdb )));};var _gbbbf =[...]struct{_ebdce int ;_dgeae int ;_fgcb string ;}{};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dcbde :=args [0].AsNumber ();if _dcbde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gedc :=args [1].AsNumber ();if _gedc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_gdafd :=int (_gedc .ValueNumber );if _gdafd < 0||_gdafd > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_bfgaa :=0;if len (args )> 2{_fcdf :=args [2].AsNumber ();if _fcdf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfgaa =int (_fcdf .ValueNumber );};_becd :=_ae .FormatInt (int64 (_dcbde .ValueNumber ),_gdafd );if len (_becd )< _bfgaa {_becd =_d .Repeat ("\u0030",_bfgaa -len (_becd ))+_becd ;};return MakeStringResult (_becd );};type tokenType int ;

// String returns a string representation of a range with prefix.
func (_gdgb PrefixRangeExpr )String ()string {return _b .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gdgb ._baca .String (),_gdgb ._debba .String (),_gdgb ._defge .String ());};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_bfca :=args [0];if _bfca .Type !=ResultTypeNumber &&_bfca .Type !=ResultTypeString &&_bfca .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_cfccd :=args [1].ValueString ;switch _bfca .Type {case ResultTypeNumber :return MakeStringResult (_cg .Number (_bfca .ValueNumber ,_cfccd ));case ResultTypeString :return MakeStringResult (_cg .String (_bfca .ValueString ,_cfccd ));case ResultTypeEmpty :return MakeStringResult (_cg .Number (0,_cfccd ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};func _ggf (_ffc string ,_beeg uint32 )string {_def :=_ege .ColumnToIndex (_ffc );if _def ==_beeg {return "\u0023\u0052\u0045F\u0021";}else if _def > _beeg {return _ege .IndexToColumn (_def -1);}else {return _ffc ;};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_eadag :s }};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_addc :=len (args );if _addc ==0||_addc > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_aeege :=_agfeg (args [0]);_dddb :=[]float64 {};for _ ,_dddag :=range _aeege {for _ ,_gea :=range _dddag {if _gea .Type ==ResultTypeNumber &&!_gea .IsBoolean {_dddb =append (_dddb ,_gea .ValueNumber );};};};_effg :=len (_dddb );if len (_dddb )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_eadba :=0.1;if _addc ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eadba =args [1].ValueNumber ;if _eadba <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_gdef :=[]float64 {};for _ebgd :=0;_ebgd < _effg ;_ebgd ++{if _ebgd ==0{_gdef =append (_gdef ,0);}else {_gdef =append (_gdef ,_gdef [_ebgd -1]+365);};};return _gfed (_dddb ,_gdef ,_eadba );};

// Reference returns an invalid reference for BinaryExpr.
func (_f BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _faae (args ,true )};func _degb (_bbdbc []Result )Result {_dddf :=_bbdbc [0].ValueArray ;if len (_bbdbc )==1{_fbgf :=[][]Result {};for _ ,_aade :=range _dddf {_fbgf =append (_fbgf ,_debfa ([]Result {MakeListResult (_aade )}).ValueList );};return MakeArrayResult (_fbgf );}else if len (_bbdbc )==2{_fadg :=len (_dddf );_bcea :=len (_dddf [0]);_dbca :=_dcda (_bbdbc [1],_fadg ,_bcea );_cffg :=len (_dbca );_efgab :=[][]Result {};var _cdgb []Result ;for _fabba ,_ebdfg :=range _dddf {if _fabba < _cffg {_cdgb =_dbca [_fabba ];}else {_cdgb =_cabce (MakeErrorResultType (ErrorTypeNA ,""),_bcea );};_efgab =append (_efgab ,_debfa ([]Result {MakeListResult (_ebdfg ),MakeListResult (_cdgb )}).ValueList );};return MakeArrayResult (_efgab );}else if len (_bbdbc )==3{_fbba :=len (_dddf );_bdac :=len (_dddf [0]);_fdbd :=_dcda (_bbdbc [1],_fbba ,_bdac );_gbag :=_dcda (_bbdbc [2],_fbba ,_bdac );_aeab :=len (_fdbd );_gdab :=len (_gbag );_fcff :=[][]Result {};var _dabab ,_ffad []Result ;for _cagbc ,_ebbaa :=range _dddf {if _cagbc < _aeab {_dabab =_fdbd [_cagbc ];}else {_dabab =_cabce (MakeErrorResultType (ErrorTypeNA ,""),_bdac );};if _cagbc < _gdab {_ffad =_gbag [_cagbc ];}else {_ffad =_cabce (MakeErrorResultType (ErrorTypeNA ,""),_bdac );};_fcff =append (_fcff ,_debfa ([]Result {MakeListResult (_ebbaa ),MakeListResult (_dabab ),MakeListResult (_ffad )}).ValueList );};return MakeArrayResult (_fcff );};return MakeErrorResultType (ErrorTypeValue ,"");};func _ega (_fdba ,_ffec Result ,_bgd string )(float64 ,float64 ,Result ){_dfc ,_ecdd :=_adec (_fdba ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_bgd );if _ecdd .Type ==ResultTypeError {return 0,0,_ecdd ;};_ceca ,_ecdd :=_adec (_ffec ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_bgd );if _ecdd .Type ==ResultTypeError {return 0,0,_ecdd ;};if _dfc >=_ceca {return 0,0,MakeErrorResultType (ErrorTypeNum ,_bgd +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _dfc ,_ceca ,_fea ;};func _ffafc (_afee yyLexer )int {return _ffegc ().Parse (_afee )};const _dedde =57367;

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_fgcbf ,_fdgd :=_ae .ParseFloat (v ,64);if _fdgd !=nil {_da .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_fdgd );};return Number {_debfb :_fgcbf };};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_afde Context ,formula string )Result ;SetCache (_aae string ,_dgcc Result );GetFromCache (_bbe string )(Result ,bool );LastEvalIsRef ()bool ;};