//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package formula provides formula parsing and evaluation. The lexer is
// implemented with a ragel grammar while the the parser is implemented with
// goyacc. The entire formula grammar is not implemented and not all functions
// are supported yet. For compatibility sake, upon failure to parse or execute a
// formula, unioffice leaves cached formula results blank allowing Excel to compute
// formulas upon load. This is similar to what most other Excel libraries do
// which leave all cached results blank instead of attempting to execute
// formulas.
//
// The unit tests for this package are unique in that we can take advantage of
// "cached" formula results that Excel/LibreOffice write to the sheet.  These
// are the computed results of a formula in string form.  By comparing these
// values to the value computed by the unioffice evaluation of the formula, adding
// a new test means just adding a new formula to one of the reference sheets
// with Excel. During the unit test, we evaluate the formula and compare it to
// the value that Excel computed.  If they're the same, the test passes.
package formula ;import (_fac "bytes";_f "errors";_d "fmt";_bdg "github.com/unidoc/unioffice/common/logger";_dcc "github.com/unidoc/unioffice/internal/mergesort";_a "github.com/unidoc/unioffice/internal/wildcard";_dc "github.com/unidoc/unioffice/spreadsheet/format";_bd "github.com/unidoc/unioffice/spreadsheet/reference";_eg "github.com/unidoc/unioffice/spreadsheet/update";_g "io";_bb "math";_e "math/big";_fb "math/rand";_eb "regexp";_bc "sort";_ea "strconv";_c "strings";_ff "sync";_fe "time";_fa "unicode";);var _deeg =[...]int {-1000,-7,-3,-1,27,18,22,23,-2,-8,-4,-9,20,-14,10,11,12,13,-5,-13,-6,-12,17,16,15,9,4,5,22,23,24,25,26,28,29,30,31,27,32,35,-1,18,27,-15,-17,-1,-1,-1,-1,33,-5,4,5,21,-16,-11,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,19,36,34,21,-5,33,21,34,19,-17,-1,-5,-10,-1};const _dfdgc =57374;

// NewEvaluator constructs a new defEval object which is the default formula evaluator.
func NewEvaluator ()Evaluator {_fgga :=&defEval {};_fgga .evCache =_ead ();return _fgga };func (_agg BinOpType )String ()string {if _agg >=BinOpType (len (_fbb )-1){return _d .Sprintf ("\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_agg );};return _cee [_fbb [_agg ]:_fbb [_agg +1]];};

// Syd implements the Excel SYD function.
func Syd (args []Result )Result {if len (args )!=4{return MakeErrorResult ("S\u0059\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072 \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbef :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dedc :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ebge :=args [2].ValueNumber ;if _ebge <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0059\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eggf :=args [3].ValueNumber ;if _eggf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070e\u0072i\u006fd\u0020t\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _eggf > _ebge {return MakeErrorResultType (ErrorTypeNum ,"\u0053\u0059\u0044\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065q\u0075\u0061\u006c\u0020\u006f\u0072\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068a\u006e \u006c\u0069\u0066\u0065");};_beba :=(_fbef -_dedc )*(_ebge -_eggf +1)*2;_bgfg :=_ebge *(_ebge +1);return MakeNumberResult (_beba /_bgfg );};func _cbfbe (_aacd Result ,_efdg ,_bgggf string )(float64 ,Result ){switch _aacd .Type {case ResultTypeEmpty :return 0,_dbc ;case ResultTypeNumber :return _aacd .ValueNumber ,_dbc ;case ResultTypeString :_cgge ,_aeaa :=_ea .ParseFloat (_aacd .ValueString ,64);if _aeaa !=nil {return 0,MakeErrorResult (_bgggf +"\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0066\u006f\u0072\u0020"+_efdg );};return _cgge ,_dbc ;default:return 0,MakeErrorResult (_efdg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_bgggf +"\u0020t\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0065\u006d\u0070\u0074\u0079");};};

// LookupFunction looks up and returns a standard function or nil.
func LookupFunction (name string )Function {_ddbcg .Lock ();defer _ddbcg .Unlock ();if _bdfg ,_abcff :=_dfbg [name ];_abcff {return _bdfg ;};return nil ;};

// Evaluator is the interface for a formula evaluator.  This is needed so we can
// pass it to the spreadsheet to let it evaluate formula cells before returning
// the results.
// NOTE: in order to implement Evaluator without cache embed noCache in it.
type Evaluator interface{Eval (_ccb Context ,formula string )Result ;SetCache (_gdgf string ,_fbf Result );GetFromCache (_def string )(Result ,bool );LastEvalIsRef ()bool ;};var _fdf =[]*_eb .Regexp {};const _debcf =57354;

// Round is an implementation of the Excel ROUND function that rounds a number
// to a specified number of digits.
func Round (args []Result )Result {return _bfcd (args ,_abdd )};

// LCM implements the Excel LCM() function which returns the least common
// multiple of a range of numbers.
func LCM (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbbga :=[]float64 {};for _ ,_eadcc :=range args {switch _eadcc .Type {case ResultTypeString :_bedb :=_eadcc .AsNumber ();if _bedb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0043M(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cbbga =append (_cbbga ,_bedb .ValueNumber );case ResultTypeList :_abbcd :=LCM (_eadcc .ValueList );if _abbcd .Type !=ResultTypeNumber {return _abbcd ;};_cbbga =append (_cbbga ,_abbcd .ValueNumber );case ResultTypeNumber :_cbbga =append (_cbbga ,_eadcc .ValueNumber );case ResultTypeEmpty :case ResultTypeError :return _eadcc ;};};if len (_cbbga )==0{return MakeErrorResult ("\u004cC\u004d\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u006e\u006fn\u002d\u0065m\u0070\u0074\u0079\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if _cbbga [0]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_cbbga )==1{return MakeNumberResult (_cbbga [0]);};_eceeg :=_cbbga [0];for _aabd :=1;_aabd < len (_cbbga );_aabd ++{if _cbbga [_aabd ]< 0{return MakeErrorResult ("\u004c\u0043M\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_eceeg =_cgeac (_eceeg ,_cbbga [_aabd ]);};return MakeNumberResult (_eceeg );};func _cdfa (_gfce string )bool {for _ ,_gadf :=range _fdf {_badb :=_gadf .FindStringSubmatch (_gfce );if len (_badb )> 1{return true ;};};return false ;};

// Sum is an implementation of the Excel SUM() function.
func Sum (args []Result )Result {_bcae :=MakeNumberResult (0);for _ ,_gbgae :=range args {_gbgae =_gbgae .AsNumber ();switch _gbgae .Type {case ResultTypeNumber :_bcae .ValueNumber +=_gbgae .ValueNumber ;case ResultTypeList ,ResultTypeArray :_egde :=Sum (_gbgae .ListValues ());if _egde .Type !=ResultTypeNumber {return _egde ;};_bcae .ValueNumber +=_egde .ValueNumber ;case ResultTypeString :case ResultTypeError :return _gbgae ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004d\u0028\u0029 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gbgae .Type ));};};return _bcae ;};

// Update returns the same object as updating sheet references does not affect named ranges.
func (_eedfb NamedRangeRef )Update (q *_eg .UpdateQuery )Expression {return _eedfb };

// Average implements the AVERAGE function. It differs slightly from Excel (and
// agrees with LibreOffice) in that boolean values are counted. As an example,
// AVERAGE of two cells containing TRUE & FALSE is 0.5 in LibreOffice and
// #DIV/0! in Excel. unioffice will return 0.5 in this case.
func Average (args []Result )Result {_cgcfg ,_bcgd :=_bgaa (args ,false );if _bcgd ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_cgcfg /_bcgd );};

// String returns a string representation of Number.
func (_affg Number )String ()string {return _ea .FormatFloat (_affg ._caag ,'f',-1,64)};

// Trim is an implementation of the Excel TRIM function that removes leading,
// trailing and consecutive spaces.
func Trim (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_bafba :=args [0].AsString ();if _bafba .Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0052\u0049\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_gaac :=_fac .Buffer {};_gfaac :=false ;_deeae :=false ;_fagc :=0;for _ ,_eccf :=range _bafba .ValueString {_cagbg :=_eccf ==' ';if _cagbg {if !_gfaac {continue ;};if !_deeae {_fagc ++;_gaac .WriteRune (_eccf );};}else {_fagc =0;_gfaac =true ;_gaac .WriteRune (_eccf );};_deeae =_cagbg ;};_gaac .Truncate (_gaac .Len ()-_fagc );return MakeStringResult (_gaac .String ());};var _acec =false ;

// FloorMath implements _xlfn.FLOOR.MATH which rounds numbers down to the
// nearest multiple of the second argument, toward or away from zero as
// specified by the third argument.
func FloorMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u002e\u004dA\u0054\u0048\u0028)\u0020\u0061\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cdce :=args [0].AsNumber ();if _cdce .Type !=ResultTypeNumber {return MakeErrorResult ("f\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fdaf :=float64 (1);if _cdce .ValueNumber < 0{_fdaf =-1;};if len (args )> 1{_edfce :=args [1].AsNumber ();if _edfce .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006den\u0074\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_fdaf =_edfce .ValueNumber ;};_cbgb :=float64 (1);if len (args )> 2{_gbgd :=args [2].AsNumber ();if _gbgd .Type !=ResultTypeNumber {return MakeErrorResult ("t\u0068\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020FL\u004f\u004f\u0052\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073t \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cbgb =_gbgd .ValueNumber ;};if len (args )==1{return MakeNumberResult (_bb .Floor (_cdce .ValueNumber ));};_dfdg :=_cdce .ValueNumber ;_dfdg ,_cgggc :=_bb .Modf (_dfdg /_fdaf );if _cgggc !=0&&_cdce .ValueNumber < 0&&_cbgb > 0{_dfdg ++;};return MakeNumberResult (_dfdg *_fdaf );};

// Price implements the Excel PRICE function.
func Price (args []Result )Result {_bdfa :=len (args );if _bdfa !=6&&_bdfa !=7{return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fegaa ,_dabf ,_eeb :=_cfaa (args [0],args [1],"\u0050\u0052\u0049C\u0045");if _eeb .Type ==ResultTypeError {return _eeb ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049CE\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ggde :=args [2].ValueNumber ;if _ggde < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u006eo\u0074\u0020\u0062\u0065\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0079\u0069\u0065\u006c\u0064\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_bdfe :=args [3].ValueNumber ;if _bdfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0079\u0069\u0065\u006c\u0064 \u0074\u006f\u0020\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064em\u0070\u0074\u0069\u006fn\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_aegdf :=args [4].ValueNumber ;if _aegdf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073 \u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egdb :=args [5];if _egdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_egeb :=_egdb .ValueNumber ;if !_fcga (_egeb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_ddae :=0;if _bdfa ==7&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ddae =int (args [6].ValueNumber );if !_adfb (_ddae ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069s\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049\u0043\u0045");};};_beeb ,_eeb :=_gfgg (_fegaa ,_dabf ,_ggde ,_bdfe ,_aegdf ,_egeb ,_ddae );if _eeb .Type ==ResultTypeError {return _eeb ;};return MakeNumberResult (_beeb );};func (_ggfd *ivr )Sheet (name string )Context {return _ggfd };var _abfc =[...]struct{_dbcde int ;_abcg int ;_eccca string ;}{};var _cbdc =[]ri {{1000,"\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// NewHorizontalRange constructs a new full rows range.
func NewHorizontalRange (v string )Expression {_acbg :=_c .Split (v ,"\u003a");if len (_acbg )!=2{return nil ;};_abegf ,_ :=_ea .Atoi (_acbg [0]);_fccdg ,_ :=_ea .Atoi (_acbg [1]);if _abegf > _fccdg {_abegf ,_fccdg =_fccdg ,_abegf ;};return HorizontalRange {_cfagc :_abegf ,_eeeb :_fccdg };};func _bgba (_dcaed Context ,_caaa ,_cfdcf int )(string ,string ){_abec :="\u0041"+_ea .Itoa (_caaa );_gdgeg :=_dcaed .LastColumn (_caaa ,_cfdcf );_bgdf :=_gdgeg +_ea .Itoa (_cfdcf );return _abec ,_bgdf ;};

// Proper is an implementation of the Excel PROPER function that returns a copy
// of the string with each word capitalized.
func Proper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_abab :=args [0].AsString ();if _abab .Type !=ResultTypeString {return MakeErrorResult ("P\u0052\u004f\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006eg \u0061\u0072\u0067u\u006de\u006e\u0074");};_cbff :=_fac .Buffer {};_ccafb :=false ;for _ ,_dedca :=range _abab .ValueString {if !_ccafb &&_fa .IsLetter (_dedca ){_cbff .WriteRune (_fa .ToUpper (_dedca ));}else {_cbff .WriteRune (_fa .ToLower (_dedca ));};_ccafb =_fa .IsLetter (_dedca );};return MakeStringResult (_cbff .String ());};

// Oddlprice implements the Excel ODDLPRICE function.
func Oddlprice (args []Result )Result {if len (args )!=8&&len (args )!=9{return MakeErrorResult ("\u004f\u0044\u0044L\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u006f\u0072\u0020\u006e\u0069\u006e\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_fdad ,_dcbf ,_aagg :=_cfaa (args [0],args [1],"\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _aagg .Type ==ResultTypeError {return _aagg ;};_bgfff ,_aagg :=_bbfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _aagg .Type ==ResultTypeError {return _aagg ;};if _bgfff >=_fdad {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};_abb :=args [3];if _abb .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_ddcbd :=_abb .ValueNumber ;if _ddcbd < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_bbda :=args [4];if _bbda .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0079i\u0065\u006c\u0064\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_fgaa :=_bbda .ValueNumber ;if _fgaa < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_dggfe :=args [5];if _dggfe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cP\u0052\u0049\u0043\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_cbd :=_dggfe .ValueNumber ;if _cbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_ccbf :=args [6];if _ccbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ceaa :=float64 (int (_ccbf .ValueNumber ));if !_fcga (_ceaa ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dfbf :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {_gdac :=args [7];if _gdac .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dfbf =int (_gdac .ValueNumber );if !_adfb (_dfbf ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0050\u0052\u0049C\u0045");};};_gdfac ,_aagg :=_gaa (_bgfff ,_dcbf ,_dfbf );if _aagg .Type ==ResultTypeError {return _aagg ;};_gdfac *=_ceaa ;_becd ,_aagg :=_gaa (_fdad ,_dcbf ,_dfbf );if _aagg .Type ==ResultTypeError {return _aagg ;};_becd *=_ceaa ;_dfefe ,_aagg :=_gaa (_bgfff ,_fdad ,_dfbf );if _aagg .Type ==ResultTypeError {return _aagg ;};_dfefe *=_ceaa ;_dgag :=_cbd +_gdfac *100*_ddcbd /_ceaa ;_dgag /=_becd *_fgaa /_ceaa +1;_dgag -=_dfefe *100*_ddcbd /_ceaa ;return MakeNumberResult (_dgag );};

// Update returns the same object as updating sheet references does not affect String.
func (_agda String )Update (q *_eg .UpdateQuery )Expression {return _agda };var _cag =[]ri {{1000,"\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Row implements the Excel ROW function.
func Row (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052O\u0057\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fggae :=args [0].Ref ;if _fggae .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0052\u004f\u0057\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 a\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065n\u0063\u0065");};_bfff ,_dcde :=_bd .ParseCellReference (_fggae .Value );if _dcde !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_fggae .Value );};return MakeNumberResult (float64 (_bfff .RowIdx ));};

// IsLeapYear is an implementation of the Excel ISLEAPYEAR() function.
func IsLeapYear (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_effc :=ctx .GetEpoch ();_gbbe ,_eabe :=_dcfc (args [0].Value (),_effc );if _eabe !=nil {return MakeErrorResult ("\u0049S\u004c\u0045A\u0050\u0059\u0045\u0041R\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073in\u0067\u006c\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cfdcd :=_gbbe .Year ();return MakeBoolResult (_aeef (_cfdcd ));};

// String returns a string representation of CellRef.
func (_afda CellRef )String ()string {return _afda ._bbgg };func _bgffg (_cgee Result )[]Result {_ebef :=_cgee .ValueList ;if _cgee .Type ==ResultTypeArray {_ebef =nil ;for _ ,_cfdf :=range _cgee .ValueArray {if len (_cfdf )> 0{_ebef =append (_ebef ,_cfdf [0]);}else {_ebef =append (_ebef ,_dbc );};};};return _ebef ;};

// Update returns the same object as updating sheet references does not affect EmptyExpr.
func (_gdc EmptyExpr )Update (q *_eg .UpdateQuery )Expression {return _gdc };func (_dffee VerticalRange )verticalRangeReference ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_dffee ._adacd ,_dffee ._badff );};

// Dollarde implements the Excel DOLLARDE function.
func Dollarde (args []Result )Result {_aad ,_fcgac ,_efadc :=_eaee (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045");if _efadc .Type ==ResultTypeError {return _efadc ;};if _fcgac < 1{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072a\u0063t\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u006f\u0072 \u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0031");};if _aad ==0{return MakeNumberResult (0);};_ggdf :=_aad < 0;if _ggdf {_aad =-_aad ;};_gege :=args [0].Value ();_gdfg :=_c .Split (_gege ,"\u002e");_ggdb :=float64 (int (_aad ));_gegcf :=_gdfg [1];_edbb :=len (_gegcf );_geace :=int (_bb .Log10 (_fcgac ))+1;_fdgg :=float64 (_geace -_edbb );_gdgd ,_aaegc :=_ea .ParseFloat (_gegcf ,64);if _aaegc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0044\u0045");};_gdgd *=_bb .Pow (10,_fdgg );_dfef :=_ggdb +_gdgd /_fcgac ;if _ggdf {_dfef =-_dfef ;};return MakeNumberResult (_dfef );};const (_dgeab cmpResult =0;_bcce cmpResult =-1;_degbe cmpResult =1;_caea cmpResult =2;);const _agga =57356;

// Reference returns an invalid reference for String.
func (_gcge String )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Cumprinc implements the Excel CUMPRINC function.
func Cumprinc (args []Result )Result {_ffcc ,_ebfb :=_ddgb (args ,"\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043");if _ebfb .Type ==ResultTypeError {return _ebfb ;};_dbad :=_ffcc ._efdf ;_dcfa :=_ffcc ._cdag ;_abf :=_ffcc ._dfad ;_beaf :=_ffcc ._dcca ;_fgef :=_ffcc ._gagge ;_gbdd :=_ffcc ._dfd ;_dgfe :=_fdcb (_dbad ,_dcfa ,_abf ,0,_gbdd );_bgd :=0.0;if _beaf ==1{if _gbdd ==0{_bgd =_dgfe +_abf *_dbad ;}else {_bgd =_dgfe ;};_beaf ++;};for _cbcb :=_beaf ;_cbcb <=_fgef ;_cbcb ++{if _gbdd ==1{_bgd +=_dgfe -(_ebdc (_dbad ,_cbcb -2,_dgfe ,_abf ,1)-_dgfe )*_dbad ;}else {_bgd +=_dgfe -_ebdc (_dbad ,_cbcb -1,_dgfe ,_abf ,0)*_dbad ;};};return MakeNumberResult (_bgd );};

// EmptyExpr is an empty expression.
type EmptyExpr struct{};func _beab (_afbef string ,_baef func (_cgeg float64 )float64 )Function {return func (_aabbc []Result )Result {if len (_aabbc )!=1{return MakeErrorResult (_afbef +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_dfdf :=_aabbc [0].AsNumber ();switch _dfdf .Type {case ResultTypeNumber :_cgga :=_baef (_dfdf .ValueNumber );if _bb .IsNaN (_cgga ){return MakeErrorResult (_afbef +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _bb .IsInf (_cgga ,0){return MakeErrorResult (_afbef +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};if _cgga ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,_afbef +"\u0020d\u0069v\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult (1/_cgga );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_afbef +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _dfdf ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_afbef ,_dfdf .Type ));};};};func _bbfd (_fegb Result ,_aef ,_cfb string )(float64 ,Result ){var _bgec float64 ;switch _fegb .Type {case ResultTypeNumber :_bgec =float64 (int (_fegb .ValueNumber ));case ResultTypeString :_fad :=DateValue ([]Result {_fegb });if _fad .Type ==ResultTypeError {return 0,MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020"+_aef +"\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020"+_cfb );};_bgec =_fad .ValueNumber ;default:return 0,MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020"+_cfb );};if _bgec < 0{return 0,MakeErrorResultType (ErrorTypeNum ,_aef +"\u0020\u0073\u0068ou\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};return _bgec ,_dbc ;};

// Number is a nubmer expression.
type Number struct{_caag float64 };const (ReferenceTypeInvalid ReferenceType =iota ;ReferenceTypeCell ;ReferenceTypeHorizontalRange ;ReferenceTypeVerticalRange ;ReferenceTypeNamedRange ;ReferenceTypeRange ;ReferenceTypeSheet ;);

// Odd is an implementation of the Excel ODD() that rounds a number to the
// nearest odd integer.
func Odd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("O\u0044\u0044\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_gecc :=args [0].AsNumber ();if _gecc .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eefdf :=_bb .Signbit (_gecc .ValueNumber );_badc ,_eafc :=_bb .Modf ((_gecc .ValueNumber -1)/2);_fdded :=_badc *2+1;if _eafc !=0{if !_eefdf {_fdded +=2;}else {_fdded -=2;};};return MakeNumberResult (_fdded );};func _feb (_ba BinOpType ,_bbb []Result ,_dca Result )Result {_abc :=[]Result {};switch _dca .Type {case ResultTypeNumber :_fgf :=_dca .ValueNumber ;for _cbb :=range _bbb {_ffb :=_bbb [_cbb ].AsNumber ();if _ffb .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ba {case BinOpTypePlus :_abc =append (_abc ,MakeNumberResult (_ffb .ValueNumber +_fgf ));case BinOpTypeMinus :_abc =append (_abc ,MakeNumberResult (_ffb .ValueNumber -_fgf ));case BinOpTypeMult :_abc =append (_abc ,MakeNumberResult (_ffb .ValueNumber *_fgf ));case BinOpTypeDiv :if _fgf ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_abc =append (_abc ,MakeNumberResult (_ffb .ValueNumber /_fgf ));case BinOpTypeExp :_abc =append (_abc ,MakeNumberResult (_bb .Pow (_ffb .ValueNumber ,_fgf )));case BinOpTypeLT :_abc =append (_abc ,MakeBoolResult (_ffb .ValueNumber < _fgf ));case BinOpTypeGT :_abc =append (_abc ,MakeBoolResult (_ffb .ValueNumber > _fgf ));case BinOpTypeEQ :_abc =append (_abc ,MakeBoolResult (_ffb .ValueNumber ==_fgf ));case BinOpTypeLEQ :_abc =append (_abc ,MakeBoolResult (_ffb .ValueNumber <=_fgf ));case BinOpTypeGEQ :_abc =append (_abc ,MakeBoolResult (_ffb .ValueNumber >=_fgf ));case BinOpTypeNE :_abc =append (_abc ,MakeBoolResult (_ffb .ValueNumber !=_fgf ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ba ));};};case ResultTypeString :_ddc :=_dca .ValueString ;for _ege :=range _bbb {_febf :=_bbb [_ege ].AsString ();if _febf .Type !=ResultTypeString {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ba {case BinOpTypeLT :_abc =append (_abc ,MakeBoolResult (_febf .ValueString < _ddc ));case BinOpTypeGT :_abc =append (_abc ,MakeBoolResult (_febf .ValueString > _ddc ));case BinOpTypeEQ :_abc =append (_abc ,MakeBoolResult (_febf .ValueString ==_ddc ));case BinOpTypeLEQ :_abc =append (_abc ,MakeBoolResult (_febf .ValueString <=_ddc ));case BinOpTypeGEQ :_abc =append (_abc ,MakeBoolResult (_febf .ValueString >=_ddc ));case BinOpTypeNE :_abc =append (_abc ,MakeBoolResult (_febf .ValueString !=_ddc ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ba ));};};default:return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069c\u0020\u0061\u006e\u0064\u0020\u006e\u006f\u006e-\u0073t\u0072\u0069\u006e\u0067\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069\u006e\u0061r\u0079\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0069\u006f\u006e");};return MakeListResult (_abc );};var _gfdcb =[...]int {0,-2,1,2,0,0,0,0,11,12,13,14,0,16,5,6,7,8,22,0,24,46,0,26,25,29,30,31,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,18,20,9,10,0,0,23,32,33,47,0,49,51,34,35,36,37,38,39,40,41,42,43,44,45,0,17,0,0,15,27,0,48,53,4,19,21,28,50,52};

// Effect implements the Excel EFFECT function.
func Effect (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0046F\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};_aebc :=args [0].ValueNumber ;if _aebc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0045\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u006f\u006d\u0069n\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0046\u0046\u0045\u0043\u0054 \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066 \u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_cgcf :=float64 (int (args [1].ValueNumber ));if _cgcf < 1{return MakeErrorResultType (ErrorTypeNum ,"E\u0046\u0046\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0063o\u006dp\u006f\u0075\u006e\u0064i\u006e\u0067 \u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult (_bb .Pow ((1+_aebc /_cgcf ),_cgcf )-1);};

// Count implements the COUNT function.
func Count (args []Result )Result {return MakeNumberResult (_edbfb (args ,_dcac ))};type yyParserImpl struct{_gacbg yySymType ;_adcc [_gbfcb ]yySymType ;_dddab int ;};

// Coupdaysnc implements the Excel COUPDAYSNC function.
func Coupdaysnc (args []Result )Result {_fdag ,_dbee :=_daef (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043");if _dbee .Type ==ResultTypeError {return _dbee ;};return MakeNumberResult (_abcc (_fdag ._cdfd ,_fdag ._cfea ,_fdag ._cca ,_fdag ._edab ));};const (ResultTypeUnknown ResultType =iota ;ResultTypeNumber ;ResultTypeString ;ResultTypeList ;ResultTypeArray ;ResultTypeError ;ResultTypeEmpty ;);

// String returns a string representation of SheetPrefixExpr.
func (_fada SheetPrefixExpr )String ()string {return _fada ._ccbcf };var _fbbd =map[string ]*_eb .Regexp {};func _aeeb (_gfbc ,_gfec float64 ,_gdba ,_fcfc int )(float64 ,Result ){_adbd ,_bbcb :=_adg (_gfbc ),_adg (_gfec );if _bbcb .After (_adbd ){_gbea :=_ggbf (_adbd ,_bbcb ,_gdba ,_fcfc );_fgfcg :=(_bbcb .Year ()-_gbea .Year ())*12+int (_bbcb .Month ())-int (_gbea .Month ());return float64 (_fgfcg *_gdba )/12.0,_dbc ;};return 0,MakeErrorResultType (ErrorTypeNum ,"\u0053\u0065t\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065");};func _cbbbf (_dba int )bool {return _dba ==0||_dba ==4};func _efgg (_aecag []Result )Result {_fedac :=_aecag [0].ValueArray ;if len (_aecag )==1{_gggf :=[][]Result {};for _ ,_effcd :=range _fedac {_gggf =append (_gggf ,_abdgg ([]Result {MakeListResult (_effcd )}).ValueList );};return MakeArrayResult (_gggf );}else if len (_aecag )==2{_adcag :=len (_fedac );_egbb :=len (_fedac [0]);_afcd :=_bfdf (_aecag [1],_adcag ,_egbb );_edge :=len (_afcd );_bdgaf :=[][]Result {};var _ccfgb []Result ;for _fcac ,_abbg :=range _fedac {if _fcac < _edge {_ccfgb =_afcd [_fcac ];}else {_ccfgb =_defc (MakeErrorResultType (ErrorTypeNA ,""),_egbb );};_bdgaf =append (_bdgaf ,_abdgg ([]Result {MakeListResult (_abbg ),MakeListResult (_ccfgb )}).ValueList );};return MakeArrayResult (_bdgaf );}else if len (_aecag )==3{_cegc :=len (_fedac );_dagf :=len (_fedac [0]);_becdf :=_bfdf (_aecag [1],_cegc ,_dagf );_eeca :=_bfdf (_aecag [2],_cegc ,_dagf );_cedad :=len (_becdf );_fecce :=len (_eeca );_ggaf :=[][]Result {};var _cgfb ,_babb []Result ;for _ebgf ,_geeaf :=range _fedac {if _ebgf < _cedad {_cgfb =_becdf [_ebgf ];}else {_cgfb =_defc (MakeErrorResultType (ErrorTypeNA ,""),_dagf );};if _ebgf < _fecce {_babb =_eeca [_ebgf ];}else {_babb =_defc (MakeErrorResultType (ErrorTypeNA ,""),_dagf );};_ggaf =append (_ggaf ,_abdgg ([]Result {MakeListResult (_geeaf ),MakeListResult (_cgfb ),MakeListResult (_babb )}).ValueList );};return MakeArrayResult (_ggaf );};return MakeErrorResultType (ErrorTypeValue ,"");};

// Eval evaluates and returns the result of a function call.
func (_ebga FunctionCall )Eval (ctx Context ,ev Evaluator )Result {_ceed :=LookupFunction (_ebga ._dbbbg );if _ceed !=nil {_ccgb :=make ([]Result ,len (_ebga ._dbgg ));for _dfda ,_dcaee :=range _ebga ._dbgg {_ccgb [_dfda ]=_dcaee .Eval (ctx ,ev );_ccgb [_dfda ].Ref =_dcaee .Reference (ctx ,ev );};if _ ,_gdcc :=_adedf [_ebga ._dbbbg ];!_gdcc {if _aeda ,_faecd :=_aaffb (_ccgb );_aeda {return _faecd ;};};return _ceed (_ccgb );};_eggff :=LookupFunctionComplex (_ebga ._dbbbg );if _eggff !=nil {_gbfc :=make ([]Result ,len (_ebga ._dbgg ));for _aafd ,_agdda :=range _ebga ._dbgg {_gbfc [_aafd ]=_agdda .Eval (ctx ,ev );_gbfc [_aafd ].Ref =_agdda .Reference (ctx ,ev );};if _ ,_afbgea :=_adedf [_ebga ._dbbbg ];!_afbgea {if _eggae ,_dbeac :=_aaffb (_gbfc );_eggae {return _dbeac ;};};return _eggff (ctx ,ev ,_gbfc );};return MakeErrorResult ("\u0075\u006e\u006b\u006e\u006f\u0077\u006e\u0020\u0066\u0075\u006e\u0063t\u0069\u006f\u006e\u0020"+_ebga ._dbbbg );};

// Accrintm implements the Excel ACCRINTM function.
func Accrintm (args []Result )Result {_cccc :=len (args );if _cccc !=4&&_cccc !=5{return MakeErrorResult ("A\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_cdab ,_cdef :=_bbfd (args [0],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cdef .Type ==ResultTypeError {return _cdef ;};_feeg ,_cdef :=_bbfd (args [1],"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065","\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d");if _cdef .Type ==ResultTypeError {return _cdef ;};if _cdab >=_feeg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0073\u0073\u0075\u0065\u0020d\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0065\u0061\u0072\u006c\u0069\u0065r\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065n\u0074 \u0064\u0061\u0074\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gdfd :=args [2].ValueNumber ;if _gdfd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061t\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054M\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bfdg :=args [3].ValueNumber ;if _bfdg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u0043C\u0052\u0049\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0061\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gegc :=0;if _cccc ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0041C\u0043\u0052I\u004e\u0054\u004d \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gegc =int (args [4].ValueNumber );if !_adfb (_gegc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0041\u0043\u0043R\u0049\u004e\u0054\u004d");};};_cdeb ,_cdef :=_gaa (_cdab ,_feeg ,_gegc );if _cdef .Type ==ResultTypeError {return _cdef ;};return MakeNumberResult (_bfdg *_gdfd *_cdeb );};

// Code is an implementation of the Excel CODE function that returns the first
// character of the string as a number.
func Code (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbbfc :=args [0].AsString ();if _fbbfc .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u0044\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};if len (_fbbfc .ValueString )==0{return MakeNumberResult (0);};return MakeNumberResult (float64 (_fbbfc .ValueString [0]));};func init (){_eea ();RegisterFunction ("\u0044\u0041\u0054\u0045",Date );RegisterFunction ("\u0044A\u0054\u0045\u0044\u0049\u0046",DateDif );RegisterFunction ("\u0044A\u0054\u0045\u0056\u0041\u004c\u0055E",DateValue );RegisterFunction ("\u0044\u0041\u0059",Day );RegisterFunction ("\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0041\u0059\u0053",Days );RegisterFunction ("\u0045\u0044\u0041T\u0045",Edate );RegisterFunction ("\u0045O\u004d\u004f\u004e\u0054\u0048",Eomonth );RegisterFunction ("\u004d\u0049\u004e\u0055\u0054\u0045",Minute );RegisterFunction ("\u004d\u004f\u004eT\u0048",Month );RegisterFunction ("\u004e\u004f\u0057",Now );RegisterFunction ("\u0054\u0049\u004d\u0045",Time );RegisterFunction ("\u0054I\u004d\u0045\u0056\u0041\u004c\u0055E",TimeValue );RegisterFunction ("\u0054\u004f\u0044A\u0059",Today );RegisterFunctionComplex ("\u0059\u0045\u0041\u0052",Year );RegisterFunction ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043",YearFrac );};

// PrefixRangeExpr is a range expression that when evaluated returns a list of Results from a given sheet like Sheet1!A1:B4 (all cells from A1 to B4 from a sheet 'Sheet1').
type PrefixRangeExpr struct{_baga ,_dfggb ,_caga Expression };

// Lower is an implementation of the Excel LOWER function that returns a lower
// case version of a string.
func Lower (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_caad :=args [0];switch _caad .Type {case ResultTypeError :return _caad ;case ResultTypeNumber ,ResultTypeString :return _fdbda (args [0]);case ResultTypeList :_fgdab :=_caad .ValueList ;_fagef :=[]Result {};for _ ,_gbgdc :=range _fgdab {_dbec :=_fdbda (_gbgdc );if _dbec .Type ==ResultTypeError {return _dbec ;};_fagef =append (_fagef ,_dbec );};return MakeListResult (_fagef );case ResultTypeArray :_dgdb :=_caad .ValueArray ;_dcaga :=[][]Result {};for _ ,_fdbef :=range _dgdb {_cbbf :=[]Result {};for _ ,_cgadg :=range _fdbef {_bfdad :=_fdbda (_cgadg );if _bfdad .Type ==ResultTypeError {return _bfdad ;};_cbbf =append (_cbbf ,_bfdad );};_dcaga =append (_dcaga ,_cbbf );};return MakeArrayResult (_dcaga );default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};};

// Sln implements the Excel SLN function.
func Sln (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0053\u004c\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gfaaf :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffgba :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfaeg :=args [2].ValueNumber ;if _cfaeg ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0053\u004c\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u007a\u0065\u0072\u006f");};return MakeNumberResult ((_gfaaf -_ffgba )/_cfaeg );};func _gffc (_fcfa ,_ccd int )int {switch _ccd {case 1:if _aeef (_fcfa ){return 366;}else {return 365;};case 3:return 365;default:return 360;};};const _cccbf int =30;func _abdgg (_gdfbb []Result )Result {_dfec :=_gdfbb [0].ValueList ;_deef :=len (_dfec );switch len (_gdfbb ){case 1:_ffcd :=[]Result {};for _ ,_abaed :=range _dfec {_ffcd =append (_ffcd ,MakeBoolResult (_abaed .ValueNumber !=0));};return MakeListResult (_ffcd );case 2:_badfg :=_gdfbb [1];switch _badfg .Type {case ResultTypeNumber ,ResultTypeString ,ResultTypeEmpty :_aedb :=[]Result {};for _ ,_gbge :=range _dfec {var _cadge Result ;if _gbge .ValueNumber ==0{_cadge =MakeBoolResult (false );}else {_cadge =_badfg ;};_aedb =append (_aedb ,_cadge );};return MakeListResult (_aedb );case ResultTypeList :_agac :=_defc (_badfg ,_deef );_ceabe :=[]Result {};for _bacb ,_ccccb :=range _dfec {var _caba Result ;if _ccccb .ValueNumber ==0{_caba =MakeBoolResult (false );}else {_caba =_agac [_bacb ];};_ceabe =append (_ceabe ,_caba );};return MakeListResult (_ceabe );case ResultTypeArray :_cgcfb :=_bfdf (_badfg ,len (_badfg .ValueArray ),_deef );_fbda :=[][]Result {};for _ ,_bbaa :=range _cgcfb {_gdcf :=[]Result {};for _gccc ,_adcbd :=range _dfec {var _fbdag Result ;if _adcbd .ValueNumber ==0{_fbdag =MakeBoolResult (false );}else {_fbdag =_bbaa [_gccc ];};_gdcf =append (_gdcf ,_fbdag );};_fbda =append (_fbda ,_gdcf );};return MakeArrayResult (_fbda );};case 3:_fcag :=_gdfbb [1];_bfef :=_gdfbb [2];_fafa :=_dgbba (_fcag );_ccda :=_dgbba (_bfef );if _fafa &&_ccda {_efccaf :=[]Result {};for _ ,_cedd :=range _dfec {var _cgfe Result ;if _cedd .ValueNumber ==0{_cgfe =_bfef ;}else {_cgfe =_fcag ;};_efccaf =append (_efccaf ,_cgfe );};return MakeListResult (_efccaf );};if _fcag .Type !=ResultTypeArray &&_bfef .Type !=ResultTypeArray {_bgcd :=_defc (_fcag ,_deef );_dbde :=_defc (_bfef ,_deef );_defa :=[]Result {};for _agacd ,_cbfa :=range _dfec {var _eged Result ;if _cbfa .ValueNumber ==0{_eged =_dbde [_agacd ];}else {_eged =_bgcd [_agacd ];};_defa =append (_defa ,_eged );};return MakeListResult (_defa );};_fbea ,_aefe :=len (_fcag .ValueArray ),len (_bfef .ValueArray );_eddb ,_ccgf :=_fbea ,_aefe ;if _aefe > _eddb {_eddb ,_ccgf =_ccgf ,_eddb ;};_fgdae :=_bfdf (_fcag ,_eddb ,_deef );_bbced :=_bfdf (_bfef ,_eddb ,_deef );_gagf :=[][]Result {};for _ebea :=0;_ebea < _eddb ;_ebea ++{_gbeg :=[]Result {};for _efce ,_afaag :=range _dfec {var _fcgcd Result ;if _afaag .ValueNumber ==0{if _ebea < _aefe {_fcgcd =_bbced [_ebea ][_efce ];}else {_fcgcd =MakeErrorResultType (ErrorTypeNA ,"");};}else {if _ebea < _fbea {_fcgcd =_fgdae [_ebea ][_efce ];}else {_fcgcd =MakeErrorResultType (ErrorTypeNA ,"");};};_gbeg =append (_gbeg ,_fcgcd );};_gagf =append (_gagf ,_gbeg );};return MakeArrayResult (_gagf );};return MakeErrorResult ("");};

// Nominal implements the Excel NOMINAL function.
func Nominal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("NO\u004d\u0049N\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u006f\u006d\u0069\u006e\u0061\u006c\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_aaag :=args [0].ValueNumber ;if _aaag <=0{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004fM\u0049\u004e\u0041\u004c\u0020r\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0065\u0066\u0066\u0065\u0063\u0074\u0020\u0069\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006e\u0064\u0069\u006e\u0067\u0020\u0070\u0065\u0072i\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074");};_dbga :=float64 (int (args [1].ValueNumber ));if _dbga < 1{return MakeErrorResultType (ErrorTypeNum ,"\u004e\u004f\u004d\u0049\u004e\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006eum\u0062e\u0072\u0020\u006f\u0066\u0020\u0063\u006f\u006d\u0070\u006f\u0075\u006ed\u0069\u006e\u0067\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065 \u0031\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065");};return MakeNumberResult ((_bb .Pow (_aaag +1,1/_dbga )-1)*_dbga );};func (_caddc *Lexer )Next ()*node {_caddc ._bafce .Lock ();defer _caddc ._bafce .Unlock ();if len (_caddc ._afcdb )> 0{_gbcfe :=_caddc ._afcdb [0];_caddc ._afcdb =_caddc ._afcdb [1:];return _gbcfe ;};return _caddc .nextRaw ();};

// ISEVEN is an implementation of the Excel ISEVEN() function.
func IsEven (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045VE\u004e\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0045\u0056\u0045\u004e \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdee :=int (args [0].ValueNumber );return MakeBoolResult (_bdee ==_bdee /2*2);};func _daef (_ggae []Result ,_ffgb string )(*couponArgs ,Result ){_fgfa :=len (_ggae );if _fgfa !=3&&_fgfa !=4{return nil ,MakeErrorResult (_ffgb +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066o\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_aaec ,_cdd ,_gec :=_cfaa (_ggae [0],_ggae [1],_ffgb );if _gec .Type ==ResultTypeError {return nil ,_gec ;};if _ggae [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgb +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acab :=_ggae [2].ValueNumber ;if !_fcga (_acab ){return nil ,MakeErrorResult ("\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0065q\u0075\u0065\u006e\u0063\u0079\u0020\u0066\u006f\u0072\u0020"+_ffgb );};_ggac :=0;if _fgfa ==4&&_ggae [3].Type !=ResultTypeEmpty {if _ggae [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_ffgb +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggac =int (_ggae [3].ValueNumber );if !_adfb (_ggac ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_ffgb );};};return &couponArgs {_aaec ,_cdd ,int (_acab ),_ggac },_dbc ;};const _fefc =57368;

// NewError constructs a new error expression from a string.
func NewError (v string )Expression {return Error {_eacb :v }};func _aadf (_aecea Context ,_bfdafg Evaluator ,_caac ,_agfgg string )Result {_efagf ,_fdgac :=_bd .ParseCellReference (_caac );if _fdgac !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_caac ,_fdgac .Error ()));};_fcdba ,_fcea :=_efagf .ColumnIdx ,_efagf .RowIdx ;_cdfc ,_cfaffd :=_bd .ParseCellReference (_agfgg );if _cfaffd !=nil {return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061bl\u0065\u0020\u0074\u006f\u0020\u0070\u0061\u0072\u0073e\u0020r\u0061n\u0067e\u0020\u0025\u0073\u003a\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_agfgg ,_cfaffd .Error ()));};_agdbb ,_decf :=_cdfc .ColumnIdx ,_cdfc .RowIdx ;_dccbd :=[][]Result {};for _dgagg :=_fcea ;_dgagg <=_decf ;_dgagg ++{_acgg :=[]Result {};for _eedd :=_fcdba ;_eedd <=_agdbb ;_eedd ++{_gbdc :=_aecea .Cell (_d .Sprintf ("\u0025\u0073\u0025\u0064",_bd .IndexToColumn (_eedd ),_dgagg ),_bfdafg );_acgg =append (_acgg ,_gbdc );};_dccbd =append (_dccbd ,_acgg );};if len (_dccbd )==1{if len (_dccbd [0])==1{return _dccbd [0][0];};return MakeListResult (_dccbd [0]);};return MakeArrayResult (_dccbd );};

// Yield implements the Excel YIELD function.
func Yield (args []Result )Result {_acf :=len (args );if _acf !=6&&_acf !=7{return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020o\u0072\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_caae ,_fdga ,_bcdg :=_cfaa (args [0],args [1],"\u0059\u0049\u0045L\u0044");if _bcdg .Type ==ResultTypeError {return _bcdg ;};_egcd :=args [2];if _egcd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045LD\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072a\u0074e\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bfdaf :=_egcd .ValueNumber ;if _bfdaf < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};_ecbd :=args [3];if _ecbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_beec :=_ecbd .ValueNumber ;if _beec <=0{return MakeErrorResultType (ErrorTypeNum ,"p\u0072\u0020\u0073\u0068ou\u006cd\u0020\u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065");};_gacf :=args [4];if _gacf .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_edcac :=_gacf .ValueNumber ;if _edcac < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};_gccb :=args [5];if _gccb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0066\u0072\u0065\u0071\u0075e\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_cabgb :=float64 (int (_gccb .ValueNumber ));if !_fcga (_cabgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_gbgb :=0;if _acf ==7&&args [6].Type !=ResultTypeEmpty {_efba :=args [6];if _efba .Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0062\u0061\u0073\u0069\u0073\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_gbgb =int (_efba .ValueNumber );if !_adfb (_gbgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063o\u0072\u0072\u0065\u0063t\u0020\u0062\u0061\u0073\u0069\u0073\u0020v\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045\u004c\u0044");};};_fbfg :=0.0;_edgd :=0.0;_gbca :=1.0;_ebbc ,_bcdg :=_gfgg (_caae ,_fdga ,_bfdaf ,_edgd ,_edcac ,_cabgb ,_gbgb );if _bcdg .Type ==ResultTypeError {return _bcdg ;};_eacff ,_bcdg :=_gfgg (_caae ,_fdga ,_bfdaf ,_gbca ,_edcac ,_cabgb ,_gbgb );if _bcdg .Type ==ResultTypeError {return _bcdg ;};_dfee :=(_gbca -_edgd )*0.5;for _aece :=0;_aece < 100&&_fbfg !=_beec ;_aece ++{_fbfg ,_bcdg =_gfgg (_caae ,_fdga ,_bfdaf ,_dfee ,_edcac ,_cabgb ,_gbgb );if _bcdg .Type ==ResultTypeError {return _bcdg ;};if _beec ==_ebbc {return MakeNumberResult (_edgd );}else if _beec ==_eacff {return MakeNumberResult (_gbca );}else if _beec ==_fbfg {return MakeNumberResult (_dfee );}else if _beec < _eacff {_gbca *=2.0;_eacff ,_bcdg =_gfgg (_caae ,_fdga ,_bfdaf ,_gbca ,_edcac ,_cabgb ,_gbgb );if _bcdg .Type ==ResultTypeError {return _bcdg ;};_dfee =(_gbca -_edgd )*0.5;}else {if _beec < _fbfg {_edgd =_dfee ;_ebbc =_fbfg ;}else {_gbca =_dfee ;_eacff =_fbfg ;};_dfee =_gbca -(_gbca -_edgd )*((_beec -_eacff )/(_ebbc -_eacff ));};};return MakeNumberResult (_dfee );};

// Yieldmat implements the Excel YIELDMAT function.
func Yieldmat (args []Result )Result {_fabda :=len (args );if _fabda !=5&&_fabda !=6{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_babdgf ,_dgeac ,_dcfg :=_cfaa (args [0],args [1],"\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dcfg .Type ==ResultTypeError {return _dcfg ;};_ceef ,_dcfg :=_bbfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054");if _dcfg .Type ==ResultTypeError {return _dcfg ;};if _ceef >=_babdgf {return MakeErrorResult ("\u0059\u0049\u0045\u004cD\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_aegcd :=args [3].ValueNumber ;if _aegcd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049\u0045\u004c\u0044M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_fcgf :=args [4].ValueNumber ;if _fcgf <=0{return MakeErrorResultType (ErrorTypeNum ,"Y\u0049\u0045\u004c\u0044\u004d\u0041T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};_acfc :=0;if _fabda ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059I\u0045\u004cD\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acfc =int (args [5].ValueNumber );if !_adfb (_acfc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0049\u0045L\u0044\u004d\u0041\u0054");};};_efde ,_dcfg :=_gaa (_ceef ,_dgeac ,_acfc );if _dcfg .Type ==ResultTypeError {return _dcfg ;};_eafg ,_dcfg :=_gaa (_ceef ,_babdgf ,_acfc );if _dcfg .Type ==ResultTypeError {return _dcfg ;};_fgcg ,_dcfg :=_gaa (_babdgf ,_dgeac ,_acfc );if _dcfg .Type ==ResultTypeError {return _dcfg ;};_adgff :=1+_efde *_aegcd ;_adgff /=_fcgf /100+_eafg *_aegcd ;_adgff --;_adgff /=_fgcg ;return MakeNumberResult (_adgff );};

// YearFrac is an implementation of the Excel YEARFRAC() function.
func YearFrac (args []Result )Result {_cfe :=len (args );if (_cfe !=2&&_cfe !=3)||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006f\u0072 \u0074\u0068\u0072\u0065\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bdga :=0;if _cfe ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("Y\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020ba\u0073\u0069\u0073\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o \u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bdga =int (args [2].ValueNumber );if !_adfb (_bdga ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0059\u0045\u0041R\u0046\u0052\u0041\u0043");};};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0061\u0072\u0074\u0020\u0064\u0061t\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dgfc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0046\u0052\u0041\u0043 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0065\u006ed\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbfd :=args [1].ValueNumber ;_fage ,_ddbb :=_gaa (_dgfc ,_fbfd ,_bdga );if _ddbb .Type ==ResultTypeError {return _ddbb ;};return MakeNumberResult (_fage );};

// Today is an implementation of the Excel TODAY() function.
func Today (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u0054\u004f\u0044A\u0059\u0020\u0064\u006fe\u0073\u006e\u0027\u0074\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afdb :=_fe .Now ();_ ,_bdcd :=_afdb .Zone ();_bce :=_abag (_cab ,_afdb .Unix ()+int64 (_bdcd ))+1;return MakeNumberResult (_bce );};func _cdde (_agca float64 )float64 {return float64 (int (_agca +0.5))};func _gcff (_fbgf int ,_fgfe _fe .Month ,_bcfd int )int64 {if _fbgf ==1900&&int (_fgfe )<=2{_bcfd --;};_aaba :=_fe .Date (_fbgf ,_fgfe ,_bcfd ,0,0,0,0,_fe .UTC );return _aaba .Unix ();};

// Update returns the same object as updating sheet references does not affect Error.
func (_ec Error )Update (q *_eg .UpdateQuery )Expression {return _ec };

// Update updates references in the PrefixVerticalRange after removing a row/column.
func (_afcf PrefixVerticalRange )Update (q *_eg .UpdateQuery )Expression {if q .UpdateType ==_eg .UpdateActionRemoveColumn {_efagc :=_afcf ;_edad :=_afcf ._bbdg .String ();if _edad ==q .SheetToUpdate {_eeebf :=q .ColumnIdx ;_efagc ._gggff =_bgfe (_afcf ._gggff ,_eeebf );_efagc ._gebf =_bgfe (_afcf ._gebf ,_eeebf );};return _efagc ;};return _afcf ;};

// Or is an implementation of the Excel OR() function and takes a variable
// number of arguments.
func Or (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004f\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dccgf :=false ;for _ ,_feaf :=range args {switch _feaf .Type {case ResultTypeList ,ResultTypeArray :_bcdga :=Or (_feaf .ListValues ());if _bcdga .Type ==ResultTypeError {return _bcdga ;};if _bcdga .ValueNumber !=0{_dccgf =true ;};case ResultTypeNumber :if _feaf .ValueNumber !=0{_dccgf =true ;};case ResultTypeString :return MakeErrorResult ("\u004f\u0052 \u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u006f\u0070\u0065\u0072\u0061\u0074\u0065\u0020\u006f\u006e\u0020\u0073\u0074\u0072in\u0067\u0073");case ResultTypeError :return _feaf ;default:return MakeErrorResult ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u004f\u0052");};};return MakeBoolResult (_dccgf );};

// Pricemat implements the Excel PRICEMAT function.
func Pricemat (args []Result )Result {_edga :=len (args );if _edga !=5&&_edga !=6{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0066\u0069v\u0065\u0020\u006f\u0072\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dbdfd ,_gef ,_efcca :=_cfaa (args [0],args [1],"\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _efcca .Type ==ResultTypeError {return _efcca ;};_fdce ,_efcca :=_bbfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054");if _efcca .Type ==ResultTypeError {return _efcca ;};if _fdce >=_dbdfd {return MakeErrorResult ("\u0050\u0052\u0049\u0043E\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u0062\u0065\u0066\u006fr\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u004d\u0041T\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dagd :=args [3].ValueNumber ;if _dagd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049\u0043\u0045M\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072a\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_aaff :=args [4].ValueNumber ;if _aaff < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u004d\u0041\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0079\u0069\u0065\u006c\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e \u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cdcf :=0;if _edga ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u004d\u0041\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdcf =int (args [5].ValueNumber );if !_adfb (_cdcf ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0050\u0052\u0049C\u0045\u004d\u0041\u0054");};};_gbbdf ,_efcca :=_gaa (_dbdfd ,_gef ,_cdcf );if _efcca .Type ==ResultTypeError {return _efcca ;};_cgea ,_efcca :=_gaa (_fdce ,_gef ,_cdcf );if _efcca .Type ==ResultTypeError {return _efcca ;};_beed ,_efcca :=_gaa (_fdce ,_dbdfd ,_cdcf );if _efcca .Type ==ResultTypeError {return _efcca ;};_aegba :=1+_cgea *_dagd ;_aed :=1+_gbbdf *_aaff ;return MakeNumberResult ((_aegba /_aed -_beed *_dagd )*100);};

// Value returns a string version of the result.
func (_daffe Result )Value ()string {switch _daffe .Type {case ResultTypeNumber :_acecf :=_ea .FormatFloat (_daffe .ValueNumber ,'f',-1,64);if len (_acecf )> 12{_edgdd :=12;for _caebg :=_edgdd ;_caebg > 0&&_acecf [_caebg ]=='0';_caebg --{_edgdd --;};_acecf =_acecf [0:_edgdd +1];};return _acecf ;case ResultTypeError :return _daffe .ValueString ;case ResultTypeString :return _daffe .ValueString ;case ResultTypeList :if len (_daffe .ValueList )==0{return "";};return _daffe .ValueList [0].Value ();case ResultTypeArray :if len (_daffe .ValueArray )==0||len (_daffe .ValueArray [0])==0{return "";};return _daffe .ValueArray [0][0].Value ();case ResultTypeEmpty :return "";default:return "\u0075\u006e\u0068\u0061nd\u006c\u0065\u0064\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0076\u0061\u006cu\u0065";};};func _abg (_gcf ,_fec int )int {if _fec ==2&&_aeef (_gcf ){return 29;}else {return _ccg [_fec -1];};};var _ccg =[]int {31,28,31,30,31,30,31,31,30,31,30,31};

// Coupdaybs implements the Excel COUPDAYBS function.
func Coupdaybs (args []Result )Result {_gdag ,_begg :=_daef (args ,"\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S");if _begg .Type ==ResultTypeError {return _begg ;};return MakeNumberResult (_accc (_gdag ._cdfd ,_gdag ._cfea ,_gdag ._cca ,_gdag ._edab ));};const _fee ="\u0028\u0028\u006a\u0061\u006e|\u006a\u0061\u006e\u0075\u0061\u0072\u0079\u0029\u007c\u0028\u0066\u0065\u0062\u007c\u0066\u0065\u0062\u0072\u0075a\u0072\u0079\u0029\u007c\u0028\u006da\u0072\u007c\u006da\u0072\u0063\u0068\u0029\u007c\u0028\u0061\u0070\u0072\u007c\u0061\u0070\u0072\u0069\u006c\u0029\u007c\u0028\u006d\u0061\u0079\u0029\u007c\u0028j\u0075\u006e\u007cj\u0075\u006e\u0065\u0029\u007c\u0028\u006a\u0075\u006c\u007c\u006a\u0075\u006c\u0079\u0029\u007c\u0028a\u0075\u0067\u007c\u0061\u0075\u0067\u0075\u0073t\u0029\u007c\u0028\u0073\u0065\u0070\u007c\u0073\u0065\u0070\u0074\u0065\u006d\u0062\u0065\u0072\u0029\u007c\u0028o\u0063\u0074\u007c\u006f\u0063\u0074\u006f\u0062\u0065\u0072\u0029\u007c\u0028\u006e\u006f\u0076\u007c\u006e\u006f\u0076\u0065\u006d\u0062e\u0072\u0029\u007c\u0028\u0064\u0065\u0063\u007c\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072\u0029\u0029";

// True is an implementation of the Excel TRUE() function.  It takes no
// arguments.
func True (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0054\u0052\u0055E \u0074\u0061\u006b\u0065\u0073\u0020\u006e\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (true );};func _aaffb (_fcgce []Result )(bool ,Result ){for _ ,_fefac :=range _fcgce {if _fefac .Type ==ResultTypeError {return true ,_fefac ;};};return false ,MakeEmptyResult ();};

// FloorPrecise is an implementation of the FlOOR.PRECISE function.
func FloorPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0046\u004cO\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0046L\u004f\u004fR\u002e\u0050\u0052\u0045C\u0049\u0053\u0045(\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020at\u0020\u006d\u006fs\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_acbf :=args [0].AsNumber ();if _acbf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052E\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fbbcc :=float64 (1);if _acbf .ValueNumber < 0{_fbbcc =-1;};if len (args )> 1{_gdebg :=args [1].AsNumber ();if _gdebg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006ed\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020F\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065r");};_fbbcc =_bb .Abs (_gdebg .ValueNumber );};if len (args )==1{return MakeNumberResult (_bb .Floor (_acbf .ValueNumber ));};_afgd :=_acbf .ValueNumber ;_afgd ,_bdce :=_bb .Modf (_afgd /_fbbcc );if _bdce !=0{if _acbf .ValueNumber < 0{_afgd --;};};return MakeNumberResult (_afgd *_fbbcc );};func _acbfe (_agad Result )*criteriaParsed {_caabe :=_agad .Type ==ResultTypeNumber ;_eacga :=_agad .ValueNumber ;_dcfag :=_c .ToLower (_agad .ValueString );_cfece :=_gcbff (_dcfag );return &criteriaParsed {_caabe ,_eacga ,_dcfag ,_cfece };};

// Multinomial implements the excel MULTINOMIAL function.
func Multinomial (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u004d\u0055\u004c\u0054\u0049\u004eO\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c\u0020i\u006e\u0070\u0075\u0074");};_dcfcf ,_dggd ,_ddfcd :=_decbg (args );if _ddfcd .Type ==ResultTypeError {return _ddfcd ;};return MakeNumberResult (_cacb (_dcfcf )/_dggd );};const _ecfbg =57344;func _dbf (_cf ,_ae [][]Result )bool {if len (_cf )!=len (_ae ){return false ;};for _cd :=range _cf {if len (_cf [_cd ])!=len (_ae [_cd ]){return false ;};};return true ;};

// ResultType is the type of the result
//go:generate stringer -type=ResultType
type ResultType byte ;func _ggbf (_dbed ,_bgca _fe .Time ,_efcae ,_cdb int )_fe .Time {_fagd :=_bgca ;_cefd :=_dbed .Year ()-_bgca .Year ();_fagd =_fagd .AddDate (_cefd ,0,0);if _dbed .After (_fagd ){_fagd =_fagd .AddDate (1,0,0);};_ccc :=-12/_efcae ;for _fagd .After (_dbed ){_fagd =_fagd .AddDate (0,_ccc ,0);};return _fagd ;};

// RandBetween is an implementation of the Excel RANDBETWEEN() function that returns a random
// integer in the range specified.
func RandBetween (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_eadfc :=args [0].AsNumber ();_bfcg :=args [1].AsNumber ();if _eadfc .Type !=ResultTypeNumber ||_bfcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052A\u004e\u0044B\u0045\u0054\u0057\u0045E\u004e\u0028\u0029 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020tw\u006f\u0020\u006eu\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};if _bfcg .ValueNumber < _eadfc .ValueNumber {return MakeErrorResult ("\u0052\u0041\u004e\u0044\u0042E\u0054\u0057\u0045\u0045\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0072\u0067\u0065r");};_eeefe :=int64 (_eadfc .ValueNumber );_befb :=int64 (_bfcg .ValueNumber );return MakeNumberResult (float64 (_fgag .Int63n (_befb -_eeefe +1)+_eeefe ));};

// MakeEmptyResult is ued when parsing an empty argument.
func MakeEmptyResult ()Result {return Result {Type :ResultTypeEmpty }};func _fgbb (_ccge float64 ,_acdeb *criteriaRegex )bool {_aefda ,_cabc :=_ea .ParseFloat (_acdeb ._abbf ,64);if _cabc !=nil {return false ;};switch _acdeb ._dfcc {case _fffd :return _ccge ==_aefda ;case _fdfad :return _ccge <=_aefda ;case _dcdd :return _ccge >=_aefda ;case _gdad :return _ccge < _aefda ;case _caed :return _ccge > _aefda ;};return false ;};const _dbefe =57364;const _bdcec int =30;func _abcgg (_dgef ,_adec Expression )(Expression ,Expression ,error ){_gcagb ,_edae :=_dgef .(CellRef );if !_edae {return nil ,nil ,_f .New (_d .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_dgef .String ()));};_defg ,_edae :=_adec .(CellRef );if !_edae {return nil ,nil ,_f .New (_d .Sprintf ("\u0049\u006e\u0063\u006frr\u0065\u0063\u0074\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020%\u0073",_adec .String ()));};_eggbb ,_ebbd :=_bd .ParseCellReference (_gcagb ._bbgg );if _ebbd !=nil {return nil ,nil ,_ebbd ;};_fcagf ,_dfbd :=_bd .ParseCellReference (_defg ._bbgg );if _dfbd !=nil {return nil ,nil ,_dfbd ;};_bgabe :=false ;if _eggbb .RowIdx > _fcagf .RowIdx {_bgabe =true ;_eggbb .RowIdx ,_fcagf .RowIdx =_fcagf .RowIdx ,_eggbb .RowIdx ;};if _eggbb .ColumnIdx > _fcagf .ColumnIdx {_bgabe =true ;_eggbb .ColumnIdx ,_fcagf .ColumnIdx =_fcagf .ColumnIdx ,_eggbb .ColumnIdx ;_eggbb .Column ,_fcagf .Column =_fcagf .Column ,_eggbb .Column ;};if _bgabe {return NewCellRef (_eggbb .String ()),NewCellRef (_fcagf .String ()),nil ;};return _dgef ,_adec ,nil ;};

// NewString constructs a new string expression.
func NewString (v string )Expression {v =_c .Replace (v ,"\u0022\u0022","\u0022",-1);return String {_eagbg :v };};

// Columns implements the Excel COLUMNS function.
func Columns (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004fL\u0055\u004d\u004e\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_egee :=args [0];if _egee .Type !=ResultTypeArray &&_egee .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u004c\u0055M\u004e\u0053\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_aebe :=_egee .ValueArray ;if len (_aebe )==0{return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004d\u004e\u0053\u0020r\u0065\u0071\u0075ir\u0065\u0073\u0020\u0061\u0072\u0072a\u0079\u0020\u0074\u006f\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020r\u006f\u0077");};return MakeNumberResult (float64 (len (_aebe [0])));};var _fgfc =map[string ]int {"\u006aa\u006e\u0075\u0061\u0072\u0079":1,"\u0066\u0065\u0062\u0072\u0075\u0061\u0072\u0079":2,"\u006d\u0061\u0072c\u0068":3,"\u0061\u0070\u0072i\u006c":4,"\u006d\u0061\u0079":5,"\u006a\u0075\u006e\u0065":6,"\u006a\u0075\u006c\u0079":7,"\u0061\u0075\u0067\u0075\u0073\u0074":8,"\u0073e\u0070\u0074\u0065\u006d\u0070\u0065r":9,"\u006fc\u0074\u006f\u0062\u0065\u0072":10,"\u006e\u006f\u0076\u0065\u006d\u0062\u0065\u0072":11,"\u0064\u0065\u0063\u0065\u006d\u0062\u0065\u0072":12,"\u006a\u0061\u006e":1,"\u0066\u0065\u0062":2,"\u006d\u0061\u0072":3,"\u0061\u0070\u0072":4,"\u006a\u0075\u006e":6,"\u006a\u0075\u006c":7,"\u0061\u0075\u0067":8,"\u0073\u0065\u0070":9,"\u006f\u0063\u0074":10,"\u006e\u006f\u0076":11,"\u0064\u0065\u0063":12};const _cgff ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002f\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Match implements the MATCH function.
func Match (args []Result )Result {_dfeb :=len (args );if _dfeb !=2&&_dfeb !=3{return MakeErrorResult ("\u004d\u0041T\u0043\u0048\u0020\u0072e\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020o\u0072\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fcggg :=1;if _dfeb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065q\u0075\u0069\u0072es\u0020\u0074\u0068\u0065\u0020\u0074h\u0069\u0072\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006db\u0065\u0072");};_dcced :=args [2].ValueNumber ;if _dcced ==-1||_dcced ==0{_fcggg =int (_dcced );};};_gaaf :=args [1];var _aaebe []Result ;switch _gaaf .Type {case ResultTypeList :_aaebe =_gaaf .ValueList ;case ResultTypeArray :_agdbe :=_gaaf .ValueArray ;for _ ,_eaef :=range _agdbe {if len (_eaef )!=1{return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_aaebe =append (_aaebe ,_eaef [0]);};default:return MakeErrorResult ("\u004d\u0041\u0054\u0043\u0048\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068e\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006f\u006e\u0065\u002dd\u0069\u006d\u0065\u006e\u0073\u0069o\u006e\u0061l\u0020\u0072a\u006eg\u0065");};_geeec :=_acbfe (args [0]);switch _fcggg {case 0:for _dgfda ,_efbe :=range _aaebe {if _dbccf (_efbe ,_geeec ){return MakeNumberResult (float64 (_dgfda +1));};};case -1:for _fdgfg :=0;_fdgfg < len (_aaebe );_fdgfg ++{if _dbccf (_aaebe [_fdgfg ],_geeec ){return MakeNumberResult (float64 (_fdgfg +1));};if _geeec ._deaa &&(_aaebe [_fdgfg ].ValueNumber < _geeec ._fgeb ){if _fdgfg ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_fdgfg ));};};case 1:for _gdgca :=0;_gdgca < len (_aaebe );_gdgca ++{if _dbccf (_aaebe [_gdgca ],_geeec ){return MakeNumberResult (float64 (_gdgca +1));};if _geeec ._deaa &&(_aaebe [_gdgca ].ValueNumber > _geeec ._fgeb ){if _gdgca ==0{return MakeErrorResultType (ErrorTypeNA ,"");};return MakeNumberResult (float64 (_gdgca ));};};};return MakeErrorResultType (ErrorTypeNA ,"");};func _ddgb (_bdgg []Result ,_adedc string )(*cumulArgs ,Result ){if len (_bdgg )!=6{return nil ,MakeErrorResult (_adedc +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _bdgg [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adedc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0072\u0061te \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ffab :=_bdgg [0].ValueNumber ;if _ffab <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bdgg [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adedc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_ffgbe :=_bdgg [1].ValueNumber ;if _ffgbe <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if _bdgg [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adedc +"\u0020r\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gfbd :=_bdgg [2].ValueNumber ;if _gfbd <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bdgg [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adedc +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0073\u0074\u0061r\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_gead :=_bdgg [3].ValueNumber ;if _gead <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073t\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069o\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _bdgg [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_adedc +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcee :=_bdgg [4].ValueNumber ;if _bcee <=0{return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if _bcee < _gead {return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0065\u006e\u0064\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0061\u0074\u0065\u0072\u0020o\u0072\u0020\u0065\u0071\u0075a\u006c\u0020\u0074\u006f\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064");};if _bcee > _ffgbe {return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074o\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0070\u0065\u0072io\u0064\u0073\u0020r\u0061n\u0067\u0065");};_acbc :=int (_bdgg [5].ValueNumber );if _acbc !=0&&_acbc !=1{return nil ,MakeErrorResultType (ErrorTypeNum ,_adedc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u00200\u0020o\u0072\u0020\u0031");};return &cumulArgs {_ffab ,_ffgbe ,_gfbd ,_gead ,_bcee ,_acbc },_dbc ;};const _dbd =_fee +"\u0020\u0028\u0028[0\u002d\u0039\u005d\u0029\u002b\u0029\u002c\u0020\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";

// Coupdays implements the Excel COUPDAYS function.
func Coupdays (args []Result )Result {_aea ,_ged :=_daef (args ,"\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053");if _ged .Type ==ResultTypeError {return _ged ;};return MakeNumberResult (_dabg (_aea ._cdfd ,_aea ._cfea ,_aea ._cca ,_aea ._edab ));};type criteriaParsed struct{_deaa bool ;_fgeb float64 ;_dcfcg string ;_fcgcc *criteriaRegex ;};

// Concat is an implementation of the Excel CONCAT() and deprecated CONCATENATE() function.
func Concat (args []Result )Result {_gdbec :=_fac .Buffer {};for _ ,_bbbfb :=range args {switch _bbbfb .Type {case ResultTypeString :_gdbec .WriteString (_bbbfb .ValueString );case ResultTypeNumber :var _edcge string ;if _bbbfb .IsBoolean {if _bbbfb .ValueNumber ==0{_edcge ="\u0046\u0041\u004cS\u0045";}else {_edcge ="\u0054\u0052\u0055\u0045";};}else {_edcge =_bbbfb .AsString ().ValueString ;};_gdbec .WriteString (_edcge );default:return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041T\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");};};return MakeStringResult (_gdbec .String ());};

// NewNamedRangeRef constructs a new named range reference.
func NewNamedRangeRef (v string )Expression {return NamedRangeRef {_gdbf :v }};func Unicode (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bffcd :=args [0].AsString ();if _bffcd .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004fD\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (_bffcd .ValueString )==0{return MakeErrorResult ("\u0055\u004e\u0049\u0043\u004f\u0044\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 \u0061\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f\u0020\u006c\u0065\u006e\u0067\u0074\u0068\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (_bffcd .ValueString [0]));};

// Rept is an implementation of the Excel REPT function that returns n copies of
// a string.
func Rept (args []Result )Result {if len (args )!=2{return MakeErrorResult ("R\u0045\u0050\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_gagd :=args [0].AsString ();if _gagd .Type !=ResultTypeString {return MakeErrorResult ("\u0050R\u004f\u0050E\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_edcec :=args [1].AsNumber ();if _edcec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052O\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};if _edcec .ValueNumber < 0{return MakeErrorResult ("\u0050\u0052\u004fP\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074o\u0020\u0062\u0065\u0020\u003e\u003d\u0020\u0030");};if _edcec .ValueNumber ==0{return MakeStringResult ("");};_edfd :=_fac .Buffer {};for _aefab :=0;_aefab < int (_edcec .ValueNumber );_aefab ++{_edfd .WriteString (_gagd .ValueString );};return MakeStringResult (_edfd .String ());};func _fdbda (_cfcg Result )Result {if _cfcg .Type ==ResultTypeEmpty {return _cfcg ;};_bfac :=_cfcg .AsString ();if _bfac .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u004f\u0057\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _cfcg .IsBoolean {if _bfac .ValueString =="\u0031"{return MakeStringResult ("\u0074\u0072\u0075\u0065");}else if _bfac .ValueString =="\u0030"{return MakeStringResult ("\u0066\u0061\u006cs\u0065");}else {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004c\u004fW\u0045\u0052");};}else {return MakeStringResult (_c .ToLower (_bfac .ValueString ));};};

// DateDif is an implementation of the Excel DATEDIF() function.
func DateDif (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeString {return MakeErrorResult ("\u0044\u0041\u0054\u0045\u0044I\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u006e\u0064\u0020\u006f\u006e\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_caa :=args [0].ValueNumber ;_edeb :=args [1].ValueNumber ;if _edeb < _caa {return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0068\u0065\u0020\u0073\u0074\u0061r\u0074\u0020\u0064a\u0074\u0065\u0020\u0069s\u0020\u0067\u0072\u0065\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0074\u0068\u0065\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074\u0065");};if _edeb ==_caa {return MakeNumberResult (0);};_fbec :=_c .ToLower (args [2].ValueString );if _fbec =="\u0064"{return MakeNumberResult (_edeb -_caa );};_faa :=_adg (_caa );_gbd :=_adg (_edeb );_efc ,_dgf ,_cce :=_faa .Date ();_aee ,_aebf ,_gdaf :=_gbd .Date ();_efca :=int (_dgf );_dae :=int (_aebf );var _bgff float64 ;switch _fbec {case "\u0079":_bgff =float64 (_aee -_efc );if _dae < _efca ||(_dae ==_efca &&_gdaf < _cce ){_bgff --;};case "\u006d":_bag :=_aee -_efc ;_efg :=_dae -_efca ;if _gdaf < _cce {_efg --;};if _efg < 0{_bag --;_efg +=12;};_bgff =float64 (_bag *12+_efg );case "\u006d\u0064":_dbfa :=_dae ;if _gdaf < _cce {_dbfa --;};_bgff =float64 (int (_edeb -_aaa (_aee ,_dbfa ,_cce )));case "\u0079\u006d":_bgff =float64 (_dae -_efca );if _gdaf < _cce {_bgff --;};if _bgff < 0{_bgff +=12;};case "\u0079\u0064":_gce :=_aee ;if _dae < _efca ||(_dae ==_efca &&_gdaf < _cce ){_gce --;};_bgff =float64 (int (_edeb -_aaa (_gce ,_efca ,_cce )));default:return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0069\u006e\u0074e\u0072\u0076\u0061\u006c\u0020\u0076\u0061\u006c\u0075\u0065");};return MakeNumberResult (_bgff );};

// Rows implements the Excel ROWS function.
func Rows (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0052\u004f\u0057\u0053\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};_gbfa :=args [0];if _gbfa .Type !=ResultTypeArray &&_gbfa .Type !=ResultTypeList {return MakeErrorResult ("\u0052\u004f\u0057S\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bfbe :=_gbfa .ValueArray ;if len (_bfbe )==0{return MakeErrorResult ("\u0052O\u0057\u0053 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0072r\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006ce\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};return MakeNumberResult (float64 (len (_bfbe )));};func _abcc (_cfag ,_dbgc float64 ,_cda ,_ddce int )float64 {_ccff :=_adg (_cfag );_dggc :=_adg (_dbgc );_febe :=_ggbb (_ccff ,_dggc ,_cda );return _cgac (_ccff ,_febe ,_ddce );};

// And is an implementation of the Excel AND() function.
func And (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0041\u004e\u0044 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_facb :=true ;for _ ,_fbgeg :=range args {_fbgeg =_fbgeg .AsNumber ();switch _fbgeg .Type {case ResultTypeList ,ResultTypeArray :_febc :=And (_fbgeg .ListValues ());if _febc .Type ==ResultTypeError {return _febc ;};if _febc .ValueNumber ==0{_facb =false ;};case ResultTypeNumber :if _fbgeg .ValueNumber ==0{_facb =false ;};case ResultTypeString :return MakeErrorResult ("\u0041\u004e\u0044\u0020\u0064\u006f\u0065\u0073\u006e\u0027t\u0020\u006f\u0070\u0065\u0072\u0061\u0074e\u0020\u006f\u006e\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0073");case ResultTypeError :return _fbgeg ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0041\u004e\u0044");};};return MakeBoolResult (_facb );};func init (){RegisterFunction ("\u0041\u0043\u0043\u0052\u0049\u004e\u0054\u004d",Accrintm );RegisterFunction ("\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C",Amordegrc );RegisterFunction ("\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043",Amorlinc );RegisterFunction ("\u0043O\u0055\u0050\u0044\u0041\u0059\u0042S",Coupdaybs );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053",Coupdays );RegisterFunction ("\u0043\u004f\u0055\u0050\u0044\u0041\u0059\u0053\u004e\u0043",Coupdaysnc );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0055\u004d",Coupnum );RegisterFunction ("\u0043O\u0055\u0050\u004e\u0043\u0044",Coupncd );RegisterFunction ("\u0043O\u0055\u0050\u0050\u0043\u0044",Couppcd );RegisterFunction ("\u0043U\u004d\u0049\u0050\u004d\u0054",Cumipmt );RegisterFunction ("\u0043\u0055\u004d\u0050\u0052\u0049\u004e\u0043",Cumprinc );RegisterFunction ("\u0044\u0042",Db );RegisterFunction ("\u0044\u0044\u0042",Ddb );RegisterFunction ("\u0044\u0049\u0053\u0043",Disc );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0044\u0045",Dollarde );RegisterFunction ("\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052",Dollarfr );RegisterFunction ("\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Duration );RegisterFunction ("\u0045\u0046\u0046\u0045\u0043\u0054",Effect );RegisterFunction ("\u0046\u0056",Fv );RegisterFunction ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045",Fvschedule );RegisterFunction ("\u0049N\u0054\u0052\u0041\u0054\u0045",Intrate );RegisterFunction ("\u0049\u0050\u004d\u0054",Ipmt );RegisterFunction ("\u0049\u0052\u0052",Irr );RegisterFunction ("\u0049\u0053\u0050M\u0054",Ispmt );RegisterFunction ("\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN",Mduration );RegisterFunction ("\u004d\u0049\u0052\u0052",Mirr );RegisterFunction ("\u004eO\u004d\u0049\u004e\u0041\u004c",Nominal );RegisterFunction ("\u004e\u0050\u0045\u0052",Nper );RegisterFunction ("\u004e\u0050\u0056",Npv );RegisterFunction ("\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E",Oddlprice );RegisterFunction ("\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD",Oddlyield );RegisterFunction ("\u0050D\u0055\u0052\u0041\u0054\u0049\u004fN",Pduration );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e",Pduration );RegisterFunction ("\u0050\u004d\u0054",Pmt );RegisterFunction ("\u0050\u0050\u004d\u0054",Ppmt );RegisterFunction ("\u0050\u0052\u0049C\u0045",Price );RegisterFunction ("\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C",Pricedisc );RegisterFunction ("\u0050\u0052\u0049\u0043\u0045\u004d\u0041\u0054",Pricemat );RegisterFunction ("\u0050\u0056",Pv );RegisterFunction ("\u0052\u0041\u0054\u0045",Rate );RegisterFunction ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044",Received );RegisterFunction ("\u0052\u0052\u0049",Rri );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0052\u0052I",Rri );RegisterFunction ("\u0053\u004c\u004e",Sln );RegisterFunction ("\u0053\u0059\u0044",Syd );RegisterFunction ("\u0054B\u0049\u004c\u004c\u0045\u0051",Tbilleq );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045",Tbillprice );RegisterFunction ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044",Tbillyield );RegisterFunction ("\u0056\u0044\u0042",Vdb );RegisterFunction ("\u0058\u0049\u0052\u0052",Xirr );RegisterFunction ("\u0058\u004e\u0050\u0056",Xnpv );RegisterFunction ("\u0059\u0049\u0045L\u0044",Yield );RegisterFunction ("\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C",Yielddisc );RegisterFunction ("\u0059\u0049\u0045\u004c\u0044\u004d\u0041\u0054",Yieldmat );};const _cdbg =57361;

// Upper is an implementation of the Excel UPPER function that returns a upper
// case version of a string.
func Upper (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dcbfc :=args [0].AsString ();if _dcbfc .Type !=ResultTypeString {return MakeErrorResult ("\u0055\u0050\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeStringResult (_c .ToUpper (_dcbfc .ValueString ));};

// ListValues converts an array to a list or returns a lists values. This is used
// for functions that can accept an array, but don't care about ordering to
// reuse the list function logic.
func (_dddba Result )ListValues ()[]Result {if _dddba .Type ==ResultTypeArray {_fdggd :=[]Result {};for _ ,_faba :=range _dddba .ValueArray {for _ ,_aefb :=range _faba {_fdggd =append (_fdggd ,_aefb );};};return _fdggd ;};if _dddba .Type ==ResultTypeList {return _dddba .ValueList ;};return nil ;};type parsedSearchObject struct{_fegbd string ;_cfeac string ;_dgcbc int ;};

// NewNegate constructs a new negate expression.
func NewNegate (e Expression )Expression {return Negate {_agcaf :e }};func _bfcd (_bbdb []Result ,_ccgcc rmode )Result {if len (_bbdb )!=2{return MakeErrorResult ("\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbfgd :=_bbdb [0].AsNumber ();if _bbfgd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_dbfee :=_bbdb [1].AsNumber ();if _dbfee .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccac :=_dbfee .ValueNumber ;_gdbg :=_bbfgd .ValueNumber ;_eacbc :=1.0;if _ccac > 0{_eacbc =_bb .Pow (1/10.0,_ccac );}else {_eacbc =_bb .Pow (10.0,-_ccac );};_gdbg ,_fdgaa :=_bb .Modf (_gdbg /_eacbc );switch _ccgcc {case _abdd :const _adfc =0.499999999;if _fdgaa >=_adfc {_gdbg ++;}else if _fdgaa <=-_adfc {_gdbg --;};case _gfga :case _ddbba :if _fdgaa > 0{_gdbg ++;}else if _fdgaa < 0{_gdbg --;};};return MakeNumberResult (_gdbg *_eacbc );};type cmpResult int8 ;func _abccc (_cbcg ,_adaa float64 )float64 {_cbcg =_bb .Trunc (_cbcg );_adaa =_bb .Trunc (_adaa );if _cbcg ==0{return _adaa ;};if _adaa ==0{return _cbcg ;};for _cbcg !=_adaa {if _cbcg > _adaa {_cbcg =_cbcg -_adaa ;}else {_adaa =_adaa -_cbcg ;};};return _cbcg ;};

// Median implements the MEDIAN function that returns the median of a range of
// values.
func Median (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004d\u0045D\u0049\u0041\u004e\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020l\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dgbcc :=_gbae (args );_bc .Float64s (_dgbcc );var _gagb float64 ;if len (_dgbcc )%2==0{_gagb =(_dgbcc [len (_dgbcc )/2-1]+_dgbcc [len (_dgbcc )/2])/2;}else {_gagb =_dgbcc [len (_dgbcc )/2];};return MakeNumberResult (_gagb );};

// Error is called in the case of parsing error and saves an error to a plex.
func (_defad *plex )Error (s string ){_bdg .Log .Debug ("\u0070a\u0072s\u0065\u0020\u0065\u0072\u0072\u006f\u0072\u003a\u0020\u0025\u0073",s );_defad ._ffged =s ;};

// ISFORMULA is an implementation of the Excel ISFORMULA() function.
func IsFormula (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053F\u004f\u0052\u004d\u0055L\u0041\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_beggd :=args [0].Ref ;if _beggd .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .HasFormula (_beggd .Value ));};

// Choose implements the Excel CHOOSE function.
func Choose (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u0048O\u004f\u0053\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_bfae :=args [0];if _bfae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043H\u004f\u004fS\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_efcd :=int (_bfae .ValueNumber );if _efcd < 1{return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u0061 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065");};if len (args )<=_efcd {return MakeErrorResult ("\u0049\u006e\u0064\u0065\u0078\u0020\u0073\u0068\u006f\u0075\u006cd\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073 \u006fr\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u0020\u0074\u0068\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0066\u0020\u0076\u0061\u006c\u0075\u0065\u0073");};return args [_efcd ];};func _cgac (_bagf ,_bfb _fe .Time ,_eae int )float64 {if _bagf .After (_bfb ){_bagf ,_bfb =_bfb ,_bagf ;};_ffca :=0;_feggc ,_fga ,_cafd :=_bagf .Date ();_ade ,_bdbc ,_ebe :=_bfb .Date ();_caeb ,_dcb :=int (_fga ),int (_bdbc );_bfda ,_cede :=_baea (_feggc ,_caeb ,_cafd ,_eae ),_baea (_ade ,_dcb ,_ebe ,_eae );if !_cbbbf (_eae ){return _aaa (_ade ,_dcb ,_cede )-_aaa (_feggc ,_caeb ,_bfda );};if _eae ==0{if (_caeb ==2||_bfda < 30)&&_ebe ==31{_cede =31;}else if _dcb ==2&&_cede ==_abg (_ade ,_dcb ){_cede =_abg (_ade ,2);};}else {if _caeb ==2&&_bfda ==30{_bfda =_abg (_feggc ,2);};if _dcb ==2&&_cede ==30{_cede =_abg (_ade ,2);};};if _feggc < _ade ||(_feggc ==_ade &&_caeb < _dcb ){_ffca =30-_bfda +1;_cafd =1;_bfda =1;_fbfdb :=_fe .Date (_feggc ,_fe .Month (_caeb ),_cafd ,0,0,0,0,_fe .UTC ).AddDate (0,1,0);if _fbfdb .Year ()< _ade {_ffca +=_bge (_fbfdb .Year (),int (_fbfdb .Month ()),12,_eae );_fbfdb =_fbfdb .AddDate (0,13-int (_fbfdb .Month ()),0);_ffca +=_fef (_fbfdb .Year (),_ade -1,_eae );};_ffca +=_bge (_ade ,int (_fbfdb .Month ()),_dcb -1,_eae );_fbfdb =_fbfdb .AddDate (0,_dcb -int (_fbfdb .Month ()),0);_caeb =_fbfdb .Day ();};_ffca +=_cede -_bfda ;if _ffca > 0{return float64 (_ffca );}else {return 0;};};

// String returns a string of a range.
func (_bgabb Range )String ()string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_bgabb ._gbda .String (),_bgabb ._ebcfd .String ());};type ivr struct{};

// Eval evaluates and returns the result of a Negate expression.
func (_agbe Negate )Eval (ctx Context ,ev Evaluator )Result {_acdd :=_agbe ._agcaf .Eval (ctx ,ev );if _acdd .Type ==ResultTypeNumber {return MakeNumberResult (-_acdd .ValueNumber );};return MakeErrorResult ("\u004e\u0045\u0047A\u0054\u0045\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};func MakeRangeReference (ref string )Reference {return Reference {Type :ReferenceTypeRange ,Value :ref }};

// Update updates the horizontal range references after removing a row/column.
func (_deagbd HorizontalRange )Update (q *_eg .UpdateQuery )Expression {return _deagbd };

// Int is an implementation of the Excel INT() function that rounds a number
// down to an integer.
func Int (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_cdfbc :=args [0].AsNumber ();if _cdfbc .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_gebb ,_ggfbc :=_bb .Modf (_cdfbc .ValueNumber );if _ggfbc < 0{_gebb --;};return MakeNumberResult (_gebb );};

// IfNA is an implementation of the Excel IFNA() function. It takes two arguments.
func IfNA (args []Result )Result {if len (args )!=2{return MakeErrorResult ("I\u0046\u004e\u0041\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};if args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041"{return args [1];};return args [0];};

// Not is an implementation of the Excel NOT() function and takes a single
// argument.
func Not (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004eO\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};switch args [0].Type {case ResultTypeError :return args [0];case ResultTypeString ,ResultTypeList :return MakeErrorResult ("\u004e\u004f\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074s\u0020\u0061\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeNumber :return MakeBoolResult (!(args [0].ValueNumber !=0));default:return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u004e\u004f\u0054\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020t\u0079\u0070\u0065");};};

// NewSheetPrefixExpr constructs a new prefix expression.
func NewSheetPrefixExpr (s string )Expression {return &SheetPrefixExpr {_ccbcf :s }};var _ceca =[...]uint8 {0,20,37,60,78,96};var _gcbb =[...]int {123,-1000,-1000,74,163,103,163,163,-1000,-1000,-1000,-1000,163,-1000,-1000,-1000,-1000,-1000,-12,106,-1000,-1000,143,-1000,-1000,-1000,-1000,-1000,163,163,163,163,163,163,163,163,163,163,163,163,74,163,163,6,-28,74,-15,-15,60,10,-14,-1000,-1000,-1000,7,-1000,74,-15,-15,-23,-23,-1000,-8,-8,-8,-8,-8,-8,-4,33,-1000,163,163,-1000,-1000,10,-1000,163,-1000,-28,74,-1000,-1000,74};

// Ispmt implements the Excel ISPMT function.
func Ispmt (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0049\u0053P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eagb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0070e\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ggbfb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069o\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgc :=args [2].ValueNumber ;if _fgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049S\u0050\u004d\u0054\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072i\u006f\u0064\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062er\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065s\u0065\u006e\u0074\u0020\u0076\u0061\u006cu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ebcg :=args [3].ValueNumber ;return MakeNumberResult (_ebcg *_eagb *(_ggbfb /_fgc -1));};func _gcebb (_cacc []string ,_befd int )string {return _ea .Itoa (len (_cacc [len (_cacc )-1-_befd ]))};

// GCD implements the Excel GCD() function which returns the greatest common
// divisor of a range of numbers.
func GCD (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0061t \u006c\u0065\u0061\u0073\u0074\u0020\u006fne\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bced :=[]float64 {};for _ ,_acfe :=range args {switch _acfe .Type {case ResultTypeString :_eebag :=_acfe .AsNumber ();if _eebag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0047\u0043D(\u0029\u0020\u006fn\u006c\u0079\u0020\u0061cce\u0070ts\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_bced =append (_bced ,_eebag .ValueNumber );case ResultTypeList ,ResultTypeArray :_acfb :=GCD (_acfe .ListValues ());if _acfb .Type !=ResultTypeNumber {return _acfb ;};_bced =append (_bced ,_acfb .ValueNumber );case ResultTypeNumber :_bced =append (_bced ,_acfe .ValueNumber );case ResultTypeError :return _acfe ;default:return MakeErrorResult (_d .Sprintf ("\u0047\u0043\u0044()\u0020\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072t\u0065d\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_acfe .Type ));};};if _bced [0]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (_bced )==1{return MakeNumberResult (_bced [0]);};_ceddd :=_bced [0];for _eacfg :=1;_eacfg < len (_bced );_eacfg ++{if _bced [_eacfg ]< 0{return MakeErrorResult ("\u0047\u0043D\u0028\u0029\u0020\u006fn\u006c\u0079 \u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ceddd =_abccc (_ceddd ,_bced [_eacfg ]);};return MakeNumberResult (_ceddd );};func (_gfe *defEval )checkLastEvalIsRef (_fege Context ,_cga Expression ){switch _cga .(type ){case FunctionCall :switch _cga .(FunctionCall )._dbbbg {case "\u0049\u0053\u0052E\u0046":for _ ,_adc :=range _cga .(FunctionCall )._dbgg {switch _adc .(type ){case CellRef ,Range ,HorizontalRange ,VerticalRange ,NamedRangeRef ,PrefixExpr ,PrefixRangeExpr ,PrefixHorizontalRange ,PrefixVerticalRange :_beb :=_adc .Eval (_fege ,_gfe );_gfe ._bdd =!(_beb .Type ==ResultTypeError &&_beb .ValueString =="\u0023\u004e\u0041\u004d\u0045\u003f");default:_gfe ._bdd =false ;};};};};};

// Char is an implementation of the Excel CHAR function that takes an integer in
// the range [0,255] and returns the corresponding ASCII character.
func Char (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_geef :=args [0].AsNumber ();if _geef .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_egbcd :=int (_geef .ValueNumber );if _egbcd < 0||_egbcd > 255{return MakeErrorResult ("\u0043H\u0041\u0052 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073 i\u006e\u0020\u0074h\u0065\u0020r\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u00325\u0035\u005d");};return MakeStringResult (_d .Sprintf ("\u0025\u0063",_egbcd ));};var _caadg =[...]int {45,3,44,32,18,40,72,46,47,30,31,32,39,48,28,29,30,31,32,75,39,49,32,56,50,70,23,39,76,57,58,59,60,61,62,63,64,65,66,67,68,77,71,69,54,43,13,19,21,55,82,11,78,9,74,28,29,30,31,32,37,33,34,35,36,38,1,20,39,10,2,8,0,80,79,0,0,0,83,0,81,73,28,29,30,31,32,37,33,34,35,36,38,0,0,39,28,29,30,31,32,37,33,34,35,36,38,26,27,39,51,52,25,14,15,16,17,0,24,23,22,41,23,12,0,6,7,26,27,0,42,0,25,14,15,16,17,0,24,23,22,5,0,12,0,6,7,26,27,0,4,0,25,14,15,16,17,0,24,23,22,41,0,12,53,6,7,26,27,0,0,0,25,14,15,16,17,0,24,23,22,41,0,12,0,6,7};

// Quotient is an implementation of the Excel QUOTIENT function that returns the
// integer portion of division.
func Quotient (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_feeb :=args [0].AsNumber ();_egaa :=args [1].AsNumber ();if _feeb .Type !=ResultTypeNumber ||_egaa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0051\u0055\u004f\u0054\u0049E\u004e\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _egaa .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0051U\u004f\u0054\u0049\u0045N\u0054\u0028\u0029\u0020\u0064i\u0076i\u0064e\u0020\u0062\u0079\u0020\u007a\u0065\u0072o");};return MakeNumberResult (_bb .Trunc (_feeb .ValueNumber /_egaa .ValueNumber ));};

// Vdb implements the Excel VDB function.
func Vdb (args []Result )Result {_gdfb :=len (args );if _gdfb < 5||_gdfb > 7{return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0066\u0069\u0076\u0065\u0020a\u006e\u0064\u0020\u0073\u0065v\u0065\u006e");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cffc :=args [0].ValueNumber ;if _cffc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgge :=args [1].ValueNumber ;if _fgge < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_acgb :=args [2].ValueNumber ;if _acgb ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _acgb < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("V\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074 p\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fabg :=args [3].ValueNumber ;if _fabg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074h\u0061n\u0020\u006f\u006e\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0065\u006e\u0064 \u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gaffg :=args [4].ValueNumber ;if _fabg > _gaffg {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020s\u0074\u0061\u0072\u0074\u0020\u0070\u0065r\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0056\u0044\u0042");};if _gaffg > _acgb {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0065\u006e\u0064\u0020\u0070e\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020V\u0044\u0042");};_eadc :=2.0;if _gdfb > 5{if args [5].Type ==ResultTypeEmpty {_eadc =0.0;}else {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eadc =args [5].ValueNumber ;if _eadc < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0056\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};};_fgda :=false ;if _gdfb > 6&&args [6].Type !=ResultTypeEmpty {if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u0056D\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020n\u006f\u005f\u0073\u0077\u0069\u0074\u0063\u0068\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fgda =args [6].ValueNumber !=0;};_gbbac :=0.0;_bedg :=_bb .Floor (_fabg );_dacdg :=_bb .Ceil (_gaffg );if _fgda {for _eacf :=_bedg +1;_eacf <=_dacdg ;_eacf ++{_abdca :=_gfbb (_cffc ,_fgge ,_acgb ,_eacf ,_eadc );if _eacf ==_bedg +1{_abdca *=_bb .Min (_gaffg ,_bedg +1)-_fabg ;}else if _eacf ==_dacdg {_abdca *=_gaffg +1-_dacdg ;};_gbbac +=_abdca ;};}else {_acgc :=_acgb ;var _bbcca float64 ;if !_gccff (_fabg ,_bb .Floor (_fabg )){if _eadc ==1{_dadda :=_acgb /2;if _fabg > _dadda ||_gccff (_fabg ,_dadda ){_bbcca =_fabg -_dadda ;_fabg =_dadda ;_gaffg -=_bbcca ;_acgc ++;};};};if _eadc !=0{_cffc -=_bcab (_cffc ,_fgge ,_acgb ,_acgc ,_fabg ,_eadc );};_gbbac =_bcab (_cffc ,_fgge ,_acgb ,_acgb -_fabg ,_gaffg -_fabg ,_eadc );};return MakeNumberResult (_gbbac );};

// Ddb implements the Excel DDB function.
func Ddb (args []Result )Result {_ffabf :=len (args );if _ffabf !=4&&_ffabf !=5{return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020c\u006f\u0073\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdgd :=args [0].ValueNumber ;if _bdgd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044B \u0072\u0065\u0071u\u0069\u0072\u0065\u0073 co\u0073t \u0074\u006f\u0020\u0062\u0065\u0020\u006eon\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eedg :=args [1].ValueNumber ;if _eedg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020l\u0069\u0066\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_efb :=args [2].ValueNumber ;if _efb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069f\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dadd :=args [3].ValueNumber ;if _dadd < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065");};if _dadd > _efb {return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072i\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0044\u0042");};_ceee :=2.0;if _ffabf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0044\u0042\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceee =args [4].ValueNumber ;if _ceee < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0061\u0063\u0074\u006f\u0072\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};};return MakeNumberResult (_gfbb (_bdgd ,_eedg ,_efb ,_dadd ,_ceee ));};

// Day is an implementation of the Excel DAY() function.
func Day (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044A\u0059\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_agc :=args [0];switch _agc .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_eag :=_adg (_agc .ValueNumber );return MakeNumberResult (float64 (_eag .Day ()));case ResultTypeString :_age :=_c .ToLower (_agc .ValueString );if !_accb (_age ){_ ,_ ,_ ,_ ,_ebf ,_fdg :=_cea (_age );if _fdg .Type ==ResultTypeError {_fdg .ErrorMessage ="I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073\u0020\u0066o\u0072 \u0044\u0041\u0059";return _fdg ;};if _ebf {return MakeNumberResult (0);};};_ ,_ ,_gbe ,_ ,_efa :=_aace (_age );if _efa .Type ==ResultTypeError {return _efa ;};return MakeNumberResult (float64 (_gbe ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0041\u0059");};};

// Eval evaluates and returns the result of the cell reference.
func (_cbe CellRef )Eval (ctx Context ,ev Evaluator )Result {return ctx .Cell (_cbe ._bbgg ,ev )};const _gaf ="\u0028\u0020\u0028"+_dgg +"\u007c"+_aae +"\u007c"+_fdfb +"\u007c"+_ccba +"\u0029\u0029\u003f\u0024";

// String returns a string representation of a range with prefix.
func (_gcac PrefixRangeExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_gcac ._baga .String (),_gcac ._dfggb .String (),_gcac ._caga .String ());};const _ggcf ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u002d\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";var _adedf =map[string ]bool {"\u0049F\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0046\u004e\u0041":true ,"\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041":true ,"\u0049\u0053\u0045R\u0052":true ,"\u0049S\u0045\u0052\u0052\u004f\u0052":true ,"\u0049\u0053\u004e\u0041":true ,"\u0049\u0053\u0052E\u0046":true };

// IfError is an implementation of the Excel IFERROR() function. It takes two arguments.
func IfError (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0049\u0046\u0045\u0052\u0052\u004f\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeError {if args [0].Type ==ResultTypeEmpty {return MakeNumberResult (0);};return args [0];};return args [1];};const _afed =2;

// ISTEXT is an implementation of the Excel ISTEXT() function.
func IsText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0054EX\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070t\u0073 \u0061 \u0073i\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeString );};

// Update returns the same object as updating sheet references does not affect ConstArrayExpr.
func (_cec ConstArrayExpr )Update (q *_eg .UpdateQuery )Expression {return _cec };func _ceac (_ebbab _fe .Time )bool {return _fe .Now ().Sub (_ebbab )>=_cabgbg };

// Result is the result of a formula or cell evaluation .
type Result struct{ValueNumber float64 ;ValueString string ;ValueList []Result ;ValueArray [][]Result ;IsBoolean bool ;ErrorMessage string ;Type ResultType ;Ref Reference ;};

// Tbilleq implements the Excel TBILLEQ function.
func Tbilleq (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gdcg ,_cfeb ,_gdece :=_cfaa (args [0],args [1],"\u0054B\u0049\u004c\u004c\u0045\u0051");if _gdece .Type ==ResultTypeError {return _gdece ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0064is\u0063\u006f\u0075\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fcbd :=_cfeb -_gdcg ;if _fcbd > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045\u0051\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020m\u006f\u0072e\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079\u0065\u0061r \u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074t\u006c\u0065\u006d\u0065\u006e\u0074");};_bcec :=args [2].ValueNumber ;if _bcec <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0045Q\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074 \u0074\u006f\u0020\u0062\u0065 p\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult ((365*_bcec )/(360-_bcec *_fcbd ));};var _afcg =[]ri {{1000,"\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{95,"\u0056\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};

// Parse parses an io.Reader to get an Expression. If expression is parsed with an error, nil is returned
func Parse (r _g .Reader )Expression {_gfde :=&plex {_afdcg :LexReader (r )};_dffgf (_gfde );if _gfde ._ffged !=""{return nil ;};return _gfde ._eabc ;};

// Radians is an implementation of the Excel function RADIANS() that converts
// degrees to radians.
func Radians (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0052\u0041\u0044I\u0041\u004e\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccbd :=args [0].AsNumber ();if _ccbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0044IA\u004e\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_bb .Pi /180.0*_ccbd .ValueNumber );};

// String is a string expression.
type String struct{_eagbg string };func _dabg (_fgd ,_dcce float64 ,_egf ,_addg int )float64 {_cef :=_adg (_fgd );_aded :=_adg (_dcce );if _addg ==1{_ebc :=_ggbf (_cef ,_aded ,_egf ,1);_gbba :=_ebc .AddDate (0,12/_egf ,0);return _cgac (_ebc ,_gbba ,_addg );};return float64 (_gffc (0,_addg ))/float64 (_egf );};

// GetFormat returns an empty string for the invalid reference context.
func (_dcbaa *ivr )GetFormat (cellRef string )string {return ""};

// Duration implements the Excel DURATION function.
func Duration (args []Result )Result {_ffge ,_bega :=_beff (args ,"\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e");if _bega .Type ==ResultTypeError {return _bega ;};_fccg :=_ffge ._eaag ;_aag :=_ffge ._ecc ;_fff :=_ffge ._gfgfg ;_aafa :=_ffge ._cgffd ;_cgacg :=_ffge ._cdcd ;_bec :=_ffge ._ddfa ;return _afba (_fccg ,_aag ,_fff ,_aafa ,_cgacg ,_bec );};

// ISNUMBER is an implementation of the Excel ISNUMBER() function.
func IsNumber (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053NU\u004d\u0042\u0045R\u0028\u0029\u0020\u0061cce\u0070ts\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeNumber );};const (ErrorTypeValue ErrorType =iota ;ErrorTypeNull ;ErrorTypeRef ;ErrorTypeName ;ErrorTypeNum ;ErrorTypeSpill ;ErrorTypeNA ;ErrorTypeDivideByZero ;);var _acgcg ,_eaada ,_eeeef ,_eafgg ,_fdcc ,_egcg ,_cdbeg ,_ceeg ,_dacb ,_ddcaa ,_ffaa ,_dgba ,_accf ,_bbce ,_gdafe *_eb .Regexp ;

// HorizontalRange is a range expression that when evaluated returns a list of Results from references like 1:4 (all cells from rows 1 to 4).
type HorizontalRange struct{_cfagc ,_eeeb int };

// SumProduct is an implementation of the Excel SUMPRODUCT() function.
func SumProduct (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044U\u0043\u0054\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_feedd :=args [0].Type ;for _ ,_cfgg :=range args {if _cfgg .Type !=_feedd {return MakeErrorResult ("\u0053\u0055M\u0050\u0052\u004f\u0044\u0055C\u0054\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0074\u0079\u0070\u0065");};};switch _feedd {case ResultTypeNumber :return Product (args );case ResultTypeList ,ResultTypeArray :_bafcb :=len (args [0].ListValues ());_ffbg :=make ([]float64 ,_bafcb );for _fecef :=range _ffbg {_ffbg [_fecef ]=1.0;};for _ ,_bbccf :=range args {if len (_bbccf .ListValues ())!=_bafcb {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069re\u0073 \u0061\u006c\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0074\u006f\u0020\u0068\u0061\u0076\u0065\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065 \u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006f\u006e");};for _fegd ,_bfbdb :=range _bbccf .ListValues (){_bfbdb =_bfbdb .AsNumber ();if _bfbdb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0055\u004d\u0050\u0052\u004fD\u0055\u0043\u0054\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006c\u006c\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020n\u0075m\u0065\u0072\u0069\u0063");};_ffbg [_fegd ]=_ffbg [_fegd ]*_bfbdb .ValueNumber ;};};_aaca :=0.0;for _ ,_aadc :=range _ffbg {_aaca +=_aadc ;};return MakeNumberResult (_aaca );};return MakeNumberResult (1.0);};

// Reference returns a string reference value to a cell.
func (_fc CellRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeCell ,Value :_fc ._bbgg };};var InvalidReferenceContext =&ivr {};func (_eaeee *noCache )SetCache (key string ,value Result ){};

// Counta implements the COUNTA function.
func Counta (args []Result )Result {return MakeNumberResult (_edbfb (args ,_bdcea ))};type rmode byte ;const _ffbgf =1;

// Reference returns a string reference value to a named range.
func (_abgf NamedRangeRef )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeNamedRange ,Value :_abgf ._gdbf };};

// Received implements the Excel RECEIVED function.
func Received (args []Result )Result {_dadf :=len (args );if _dadf !=4&&_dadf !=5{return MakeErrorResult ("R\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066o\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065 a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_aefg ,_bbfc ,_begd :=_cfaa (args [0],args [1],"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044");if _begd .Type ==ResultTypeError {return _begd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020i\u006e\u0076\u0065\u0073\u0074\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_baa :=args [2].ValueNumber ;if _baa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006ev\u0065\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0045\u0043\u0045\u0049\u0056\u0045\u0044 \u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0064\u0069s\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fgfb :=args [3].ValueNumber ;if _fgfb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0045\u0043\u0045I\u0056\u0045\u0044\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020p\u006f\u0073\u0069\u0074\u0069v\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geaed :=0;if _dadf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052E\u0043\u0045I\u0056\u0045\u0044 \u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_geaed =int (args [4].ValueNumber );if !_adfb (_geaed ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065c\u0074\u0020b\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u0052\u0045\u0043E\u0049\u0056\u0045\u0044");};};_febg ,_begd :=_gaa (_aefg ,_bbfc ,_geaed );if _begd .Type ==ResultTypeError {return _begd ;};return MakeNumberResult (_baa /(1-_fgfb *_febg ));};func _aefd (_fdfe Result ,_bdad *criteriaParsed )bool {_cdgcc :=_c .ToLower (_fdfe .ValueString );_bceae :=_bdad ._fcgcc ._dfcc ;_cacffe :=_bdad ._fcgcc ._abbf ;if _bceae ==_fffd {return _cdgcc ==_cacffe ||_a .Match (_cacffe ,_cdgcc );};if _fdfe .Type !=ResultTypeEmpty {if _cdgcc ==_bdad ._dcfcg ||_a .Match (_bdad ._dcfcg ,_cdgcc ){return true ;};if _ ,_cbcf :=_ea .ParseFloat (_cacffe ,64);_cbcf ==nil {return false ;};switch _bceae {case _fdfad :return _cdgcc <=_cacffe ;case _dcdd :return _cdgcc >=_cacffe ;case _gdad :return _cdgcc < _cacffe ;case _caed :return _cdgcc > _cacffe ;};};return false ;};var _abef []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};const _fdfc =57353;const _bcgg =-1000;type tokenType int ;

// Reference returns an invalid reference for Negate.
func (_ccde Negate )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Negate is a negate expression like -A1.
type Negate struct{_agcaf Expression };type yySymType struct{_agfg int ;_bebdc *node ;_gfag Expression ;_decgb []Expression ;_acfca [][]Expression ;};

// Munit is an implementation of the Excel MUNIT function that returns an
// identity matrix.
func Munit (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_adgaf :=args [0].AsNumber ();if _adgaf .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0055\u004eIT\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073 \u006fn\u0065 \u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069\u006e\u0070\u0075\u0074");};_affc :=int (_adgaf .ValueNumber );_gcced :=make ([][]Result ,0,_affc );for _deagb :=0;_deagb < _affc ;_deagb ++{_dagb :=make ([]Result ,_affc );for _cfgdf :=0;_cfgdf < _affc ;_cfgdf ++{if _deagb ==_cfgdf {_dagb [_cfgdf ]=MakeNumberResult (1.0);}else {_dagb [_cfgdf ]=MakeNumberResult (0.0);};};_gcced =append (_gcced ,_dagb );};return MakeArrayResult (_gcced );};

// Update makes a reference to point to one of the neighboring cells after removing a row/column with respect to the update type.
func (_ccf CellRef )Update (q *_eg .UpdateQuery )Expression {if q .UpdateCurrentSheet {_ccf ._bbgg =_bgc (_ccf ._bbgg ,q );};return _ccf ;};const _gdff int =0;type node struct{_eddba tokenType ;_bcbd string ;};var (_fgfea =0;_bccbc =false ;);func _adfb (_fggad int )bool {return _fggad >=0&&_fggad <=4};

// Update returns the same object as updating sheet references does not affect SheetPrefixExpr.
func (_gafeb SheetPrefixExpr )Update (q *_eg .UpdateQuery )Expression {return _gafeb };func _ead ()evCache {_bfd :=evCache {};_bfd ._adf =make (map[string ]Result );_bfd ._ffg =&_ff .Mutex {};return _bfd ;};func _edegf (_fecge string ,_bfgd func (_aafae float64 )float64 )Function {return func (_dfce []Result )Result {if len (_dfce )!=1{return MakeErrorResult (_fecge +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_gfaab :=_dfce [0].AsNumber ();switch _gfaab .Type {case ResultTypeNumber :_ecff :=_bfgd (_gfaab .ValueNumber );if _bb .IsNaN (_ecff ){return MakeErrorResult (_fecge +"\u0020\u0072\u0065\u0074\u0075\u0072\u006e\u0065\u0064\u0020\u004e\u0061\u004e");};if _bb .IsInf (_ecff ,0){return MakeErrorResult (_fecge +"\u0020r\u0065t\u0075\u0072\u006e\u0065\u0064 \u0069\u006ef\u0069\u006e\u0069\u0074\u0079");};return MakeNumberResult (_ecff );case ResultTypeList ,ResultTypeString :return MakeErrorResult (_fecge +"\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072i\u0063\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");case ResultTypeError :return _gfaab ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068a\u006e\u0064\u006c\u0065d\u0020\u0025\u0073\u0028\u0029\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_fecge ,_gfaab .Type ));};};};

// Reference returns an invalid reference for BinaryExpr.
func (_fab BinaryExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func init (){RegisterFunction ("\u0043\u0048\u004f\u004f\u0053\u0045",Choose );RegisterFunction ("\u0043\u004f\u004c\u0055\u004d\u004e",Column );RegisterFunction ("\u0043O\u004c\u0055\u004d\u004e\u0053",Columns );RegisterFunction ("\u0049\u004e\u0044E\u0058",Index );RegisterFunctionComplex ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054",Indirect );RegisterFunctionComplex ("\u004f\u0046\u0046\u0053\u0045\u0054",Offset );RegisterFunction ("\u004d\u0041\u0054C\u0048",Match );RegisterFunction ("\u0048L\u004f\u004f\u004b\u0055\u0050",HLookup );RegisterFunction ("\u004c\u0041\u0052G\u0045",Large );RegisterFunction ("\u004c\u004f\u004f\u004b\u0055\u0050",Lookup );RegisterFunction ("\u0052\u004f\u0057",Row );RegisterFunction ("\u0052\u004f\u0057\u0053",Rows );RegisterFunction ("\u0053\u004d\u0041L\u004c",Small );RegisterFunction ("\u0056L\u004f\u004f\u004b\u0055\u0050",VLookup );RegisterFunction ("\u0054R\u0041\u004e\u0053\u0050\u004f\u0053E",Transpose );};

// Reference returns a string reference value to a horizontal range.
func (_dgee HorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeHorizontalRange ,Value :_dgee .horizontalRangeReference ()};};

// Ceiling is an implementation of the CEILING function which
// returns the ceiling of a number.
func Ceiling (args []Result )Result {if len (args )==0{return MakeErrorResult ("C\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee \u0061\u0072\u0067u\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_agcf :=args [0].AsNumber ();if _agcf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066i\u0072\u0073t\u0020\u0061\u0072\u0067u\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049NG\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ddec :=float64 (1);if _agcf .ValueNumber < 0{_ddec =-1;};if len (args )> 1{_bdba :=args [1].AsNumber ();if _bdba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020t\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062e\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddec =_bdba .ValueNumber ;};if _ddec < 0&&_agcf .ValueNumber > 0{return MakeErrorResultType (ErrorTypeNum ,"\u006e\u0065\u0067\u0061\u0074\u0069v\u0065\u0020\u0073\u0069\u0067\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004cI\u004e\u0047\u0028\u0029\u0020\u0069\u006ev\u0061\u006c\u0069\u0064");};if len (args )==1{return MakeNumberResult (_bb .Ceil (_agcf .ValueNumber ));};_dfbbe :=_agcf .ValueNumber ;_dfbbe ,_cedg :=_bb .Modf (_dfbbe /_ddec );if _cedg > 0{_dfbbe ++;};return MakeNumberResult (_dfbbe *_ddec );};func _beebd (_fdeeb ,_dgbe int )string {const TOKSTART =4;if !_bccbc {return "\u0073\u0079\u006et\u0061\u0078\u0020\u0065\u0072\u0072\u006f\u0072";};for _ ,_beffe :=range _abfc {if _beffe ._dbcde ==_fdeeb &&_beffe ._abcg ==_dgbe {return "\u0073\u0079\u006e\u0074\u0061\u0078\u0020\u0065\u0072r\u006f\u0072\u003a\u0020"+_beffe ._eccca ;};};_ebda :="\u0073y\u006e\u0074\u0061\u0078 \u0065\u0072\u0072\u006f\u0072:\u0020u\u006ee\u0078\u0070\u0065\u0063\u0074\u0065\u0064 "+_bcedg (_dgbe );_aeeg :=make ([]int ,0,4);_bceege :=_gcbb [_fdeeb ];for _fedgg :=TOKSTART ;_fedgg -1< len (_cgca );_fedgg ++{if _agddc :=_bceege +_fedgg ;_agddc >=0&&_agddc < _cdacb &&_deeg [_caadg [_agddc ]]==_fedgg {if len (_aeeg )==cap (_aeeg ){return _ebda ;};_aeeg =append (_aeeg ,_fedgg );};};if _gfdcb [_fdeeb ]==-2{_daga :=0;for _gada [_daga ]!=-1||_gada [_daga +1]!=_fdeeb {_daga +=2;};for _daga +=2;_gada [_daga ]>=0;_daga +=2{_dddaba :=_gada [_daga ];if _dddaba < TOKSTART ||_gada [_daga +1]==0{continue ;};if len (_aeeg )==cap (_aeeg ){return _ebda ;};_aeeg =append (_aeeg ,_dddaba );};if _gada [_daga +1]!=0{return _ebda ;};};for _ccfd ,_edded :=range _aeeg {if _ccfd ==0{_ebda +="\u002c\u0020\u0065x\u0070\u0065\u0063\u0074\u0069\u006e\u0067\u0020";}else {_ebda +="\u0020\u006f\u0072\u0020";};_ebda +=_bcedg (_edded );};return _ebda ;};const _dffg =57349;func _dd (_ede BinOpType ,_feg [][]Result ,_cb Result )Result {_fg :=[][]Result {};for _bgf :=range _feg {_ag :=_feb (_ede ,_feg [_bgf ],_cb );if _ag .Type ==ResultTypeError {return _ag ;};_fg =append (_fg ,_ag .ValueList );};return MakeArrayResult (_fg );};type yyParser interface{Parse (yyLexer )int ;Lookahead ()int ;};func _gdb (_acce ,_dccg ,_bgcc int )bool {if _dccg < 1||_dccg > 12{return false ;};if _bgcc < 1{return false ;};return _bgcc <=_abg (_acce ,_dccg );};func _bfdf (_cgdg Result ,_bebef ,_fgac int )[][]Result {_fgba :=[][]Result {};switch _cgdg .Type {case ResultTypeArray :for _dbef ,_gacbf :=range _cgdg .ValueArray {if _dbef < _bebef {_fgba =append (_fgba ,_defc (MakeListResult (_gacbf ),_fgac ));}else {_fgba =append (_fgba ,_defc (MakeErrorResultType (ErrorTypeNA ,""),_fgac ));};};case ResultTypeList :_bedgc :=_defc (_cgdg ,_fgac );for _cgcda :=0;_cgcda < _bebef ;_cgcda ++{_fgba =append (_fgba ,_bedgc );};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _bfaeg :=0;_bfaeg < _bebef ;_bfaeg ++{_febca :=_defc (_cgdg ,_fgac );_fgba =append (_fgba ,_febca );};};return _fgba ;};const _cffa =57373;var _cab int64 =_gcff (1900,_fe .January ,1);

// Degrees is an implementation of the Excel function DEGREES() that converts
// radians to degrees.
func Degrees (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0044\u0045\u0047R\u0045\u0045\u0053\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_degbc :=args [0].AsNumber ();if _degbc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0047RE\u0045\u0053\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u006eu\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (180.0/_bb .Pi *_degbc .ValueNumber );};

// HasFormula returns FALSE for the invalid reference context.
func (_gbaac *ivr )HasFormula (cellRef string )bool {return false };

// Eval evaluates and returns the result of an error expression.
func (_cbf Error )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult (_cbf ._eacb )};

// Yielddisc implements the Excel YIELDDISC function.
func Yielddisc (args []Result )Result {_cced :=len (args );if _cced !=4&&_cced !=5{return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgabc ,_gdgda ,_fdgd :=_cfaa (args [0],args [1],"\u0059I\u0045\u004c\u0044\u0044\u0049\u0053C");if _fdgd .Type ==ResultTypeError {return _fdgd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044\u0044\u0049S\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_afdaa :=args [2].ValueNumber ;if _afdaa <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0049E\u004c\u0044\u0044\u0049\u0053C\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049\u0045\u004c\u0044D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_fgfg :=args [3].ValueNumber ;if _fgfg <=0{return MakeErrorResultType (ErrorTypeNum ,"YI\u0045\u004cD\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076e\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072g\u0075m\u0065\u006et");};_egcc :=0;if _cced ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0049E\u004c\u0044\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egcc =int (args [4].ValueNumber );if !_adfb (_egcc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0059I\u0045\u004cD\u0044\u0049\u0053\u0043");};};_cgcd ,_fdgd :=_gaa (_cgabc ,_gdgda ,_egcc );if _fdgd .Type ==ResultTypeError {return _fdgd ;};return MakeNumberResult ((_fgfg /_afdaa -1)/_cgcd );};type yyLexer interface{Lex (_abccg *yySymType )int ;Error (_cbfba string );};

// Db implements the Excel DB function.
func Db (args []Result )Result {_ecf :=len (args );if _ecf !=4&&_ecf !=5{return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0020\u006f\u0072 \u0066\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fgee :=args [0].ValueNumber ;if _fgee < 0{return MakeErrorResultType (ErrorTypeNum ,"D\u0042\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0063\u006fs\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_badf :=args [1].ValueNumber ;if _badf < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061\u0067\u0065\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u0020n\u0065\u0067a\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0069\u0066\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfc :=args [2].ValueNumber ;if _cfc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006c\u0069\u0066\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("D\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_ccgc :=args [3].ValueNumber ;if _ccgc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0042\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};if _ccgc -_cfc > 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};_eaff :=12.0;if _ecf ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0042\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_eaff =args [4].ValueNumber ;if _eaff < 1||_eaff > 12{return MakeErrorResultType (ErrorTypeNum ,"\u0044B\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u006do\u006e\u0074\u0068\u0020\u0074\u006f\u0020\u0062\u0065 i\u006e\u0020\u0072a\u006e\u0067e\u0020\u006f\u0066\u0020\u0031\u0020a\u006e\u0064 \u0031\u0032");};};if _eaff ==12&&_ccgc > _cfc {return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0066\u006f\u0072\u0020\u0044\u0042");};if _badf >=_fgee {return MakeNumberResult (0);};_fega :=1-_bb .Pow (_badf /_fgee ,1/_cfc );_fega =float64 (int (_fega *1000+0.5))/1000;_dga :=_fgee *_fega *_eaff /12;if _ccgc ==1{return MakeNumberResult (_dga );};_fagb :=_dga ;_cfed :=0.0;_bbge :=_cfc ;if _bbge > _ccgc {_bbge =_ccgc ;};for _gffcb :=2.0;_gffcb <=_bbge ;_gffcb ++{_cfed =(_fgee -_fagb )*_fega ;_fagb +=_cfed ;};if _ccgc > _cfc {return MakeNumberResult ((_fgee -_fagb )*_fega *(12-_eaff )/12);};return MakeNumberResult (_cfed );};func NewLexer ()*Lexer {return &Lexer {_ddbbc :make (chan *node )}};

// Max is an implementation of the Excel MAX() function.
func Max (args []Result )Result {return _ffce (args ,false )};

// Index implements the Excel INDEX function.
func Index (args []Result )Result {_agfe :=len (args );if _agfe < 2||_agfe > 3{return MakeErrorResult ("\u0049\u004e\u0044E\u0058\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u006f\u006d\u0020\u006f\u006e\u0065\u0020\u0074\u006f\u0020\u0074\u0068\u0072\u0065\u0065\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_caaf :=args [0];if _caaf .Type !=ResultTypeArray &&_caaf .Type !=ResultTypeList {return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gbgg :=args [1].AsNumber ();if _gbgg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0072\u006f\u0077\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_cbea :=int (_gbgg .ValueNumber )-1;_ebaa :=-1;if _agfe ==3&&args [2].Type !=ResultTypeEmpty {_eeeg :=args [2].AsNumber ();if _eeeg .Type !=ResultTypeNumber {return MakeErrorResult ("I\u004e\u0044\u0045\u0058\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u006e\u0075\u006d\u0065\u0072\u0069\u0063 \u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_ebaa =int (_eeeg .ValueNumber )-1;};if _cbea ==-1&&_ebaa ==-1{return MakeErrorResult ("\u0049\u004e\u0044EX\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0072o\u0077 \u006fr\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};var _gfed []Result ;if _caaf .Type ==ResultTypeArray {_ggfb :=_caaf .ValueArray ;if _cbea < -1||_cbea >=len (_ggfb ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _cbea ==-1{if _ebaa >=len (_ggfb [0]){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_eeba :=[][]Result {};for _ ,_bggc :=range _ggfb {_ggaea :=_bggc [_ebaa ];if _ggaea .Type ==ResultTypeEmpty {_ggaea =MakeNumberResult (0);};_eeba =append (_eeba ,[]Result {_ggaea });};return MakeArrayResult (_eeba );};_gfed =_ggfb [_cbea ];}else {_geda :=_caaf .ValueList ;if _cbea < -1||_cbea >=1{return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0072o\u0077\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _cbea ==-1{if _ebaa >=len (_geda ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};_beefb :=_geda [_ebaa ];if _beefb .Type ==ResultTypeEmpty {_beefb =MakeNumberResult (0);};return _beefb ;};_gfed =_geda ;};if _ebaa < -1||_ebaa > len (_gfed ){return MakeErrorResult ("\u0049\u004e\u0044\u0045\u0058\u0020\u0068\u0061\u0073\u0020\u0063o\u006c\u0020\u006f\u0075\u0074\u0020\u006f\u0066\u0020\u0072a\u006e\u0067\u0065");};if _ebaa ==-1{_gegaa :=[]Result {};for _ ,_afge :=range _gfed {if _afge .Type ==ResultTypeEmpty {_gegaa =append (_gegaa ,MakeNumberResult (0));}else {_gegaa =append (_gegaa ,_afge );};};return MakeArrayResult ([][]Result {_gegaa });};_dcgc :=_gfed [_ebaa ];if _dcgc .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _dcgc ;};

// NewPrefixVerticalRange constructs a new full columns range with prefix.
func NewPrefixVerticalRange (pfx Expression ,v string )Expression {_ffabg :=_c .Split (v ,"\u003a");if len (_ffabg )!=2{return nil ;};if _ffabg [0]> _ffabg [1]{_ffabg [0],_ffabg [1]=_ffabg [1],_ffabg [0];};return PrefixVerticalRange {_bbdg :pfx ,_gggff :_ffabg [0],_gebf :_ffabg [1]};};

// Amordegrc implements the Excel AMORDEGRC function.
func Amordegrc (args []Result )Result {_eggaa ,_ccfff :=_fdge (args ,"\u0041M\u004f\u0052\u0044\u0045\u0047\u0052C");if _ccfff .Type ==ResultTypeError {return _ccfff ;};_cge :=_eggaa ._cafa ;_cgc :=_eggaa ._fggfe ;_eacg :=_eggaa ._afeb ;_bgfed :=_eggaa ._ddbcf ;_aegd :=_eggaa ._fdfa ;_faga :=_eggaa ._gbcgf ;if _faga >=0.5{return MakeErrorResultType (ErrorTypeNum ,"\u0041\u004d\u004f\u0052\u0044\u0045\u0047R\u0043\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006c\u0065\u0073\u0073\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u002e\u0035");};_degg :=_eggaa ._fedg ;_dace :=1.0/_faga ;_cad :=2.5;if _dace < 3{_cad =1;}else if _dace < 5{_cad =1.5;}else if _dace <=6{_cad =2;};_faga *=_cad ;_cedc ,_cdee :=_gaa (_cgc ,_eacg ,_degg );if _cdee .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0066\u006f\u0072\u0020\u0041\u004d\u004f\u0052\u0044EG\u0052\u0043");};_afaf :=_cdde (_cedc *_faga *_cge );_cge -=_afaf ;_cfgf :=_cge -_bgfed ;for _adcbf :=0;_adcbf < _aegd ;_adcbf ++{_afaf =_cdde (_faga *_cge );_cfgf -=_afaf ;if _cfgf < 0{switch _aegd -_adcbf {case 0:case 1:return MakeNumberResult (_cdde (_cge *0.5));default:return MakeNumberResult (0);};};_cge -=_afaf ;};return MakeNumberResult (_afaf );};func init (){_aggb ();RegisterFunction ("\u004e\u0041",NA );RegisterFunction ("\u0049S\u0042\u004c\u0041\u004e\u004b",IsBlank );RegisterFunction ("\u0049\u0053\u0045R\u0052",IsErr );RegisterFunction ("\u0049S\u0045\u0052\u0052\u004f\u0052",IsError );RegisterFunction ("\u0049\u0053\u0045\u0056\u0045\u004e",IsEven );RegisterFunctionComplex ("\u005fx\u006cf\u006e\u002e\u0049\u0053\u0046\u004f\u0052\u004d\u0055\u004c\u0041",IsFormula );RegisterFunctionComplex ("\u004fR\u0047\u002e\u004f\u0050E\u004e\u004f\u0046\u0046\u0049C\u0045.\u0049S\u004c\u0045\u0041\u0050\u0059\u0045\u0041R",IsLeapYear );RegisterFunctionComplex ("\u0049S\u004c\u004f\u0047\u0049\u0043\u0041L",IsLogical );RegisterFunction ("\u0049\u0053\u004e\u0041",IsNA );RegisterFunction ("\u0049S\u004e\u004f\u004e\u0054\u0045\u0058T",IsNonText );RegisterFunction ("\u0049\u0053\u004e\u0055\u004d\u0042\u0045\u0052",IsNumber );RegisterFunction ("\u0049\u0053\u004fD\u0044",IsOdd );RegisterFunctionComplex ("\u0049\u0053\u0052E\u0046",IsRef );RegisterFunction ("\u0049\u0053\u0054\u0045\u0058\u0054",IsText );RegisterFunctionComplex ("\u0043\u0045\u004c\u004c",Cell );};const _cdfg =57367;

// Oddlyield implements the Excel ODDLYIELD function.
func Oddlyield (args []Result )Result {if len (args )!=7&&len (args )!=8{return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0076\u0065\u006e\u0020\u006f\u0072\u0020\u0065\u0069\u0067\u0068\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cgacb ,_fcfd ,_dfdbc :=_cfaa (args [0],args [1],"\u004fD\u0044\u004c\u0059\u0049\u0045\u004cD");if _dfdbc .Type ==ResultTypeError {return _dfdbc ;};_aafac ,_dfdbc :=_bbfd (args [2],"\u0069\u0073\u0073\u0075\u0065\u0020\u0064\u0061\u0074\u0065","\u004fD\u0044\u004c\u0050\u0052\u0049\u0043E");if _dfdbc .Type ==ResultTypeError {return _dfdbc ;};if _aafac >=_cgacb {return MakeErrorResultType (ErrorTypeNum ,"\u004c\u0061\u0073\u0074\u0020i\u006e\u0074\u0065\u0072\u0065\u0073\u0074\u0020\u0064\u0061\u0074\u0065\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0062\u0065\u0066\u006f\u0072\u0065\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074e");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020o\u0066\u0020\u0074\u0079\u0070e\u0020\u006eu\u006d\u0062\u0065\u0072");};_efeg :=args [3].ValueNumber ;if _efeg < 0{return MakeErrorResultType (ErrorTypeNum ,"R\u0061\u0074\u0065\u0020\u0073\u0068o\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u006e\u006fn\u0020\u006e\u0065g\u0061t\u0069\u0076\u0065");};if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("O\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u006ff \u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_cacff :=args [4].ValueNumber ;if _cacff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0073h\u006fu\u006c\u0064\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u004fD\u0044\u004cY\u0049\u0045\u004c\u0044 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_fefg :=args [5].ValueNumber ;if _fefg < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006cd\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065 \u006eo\u006e\u0020\u006e\u0065\u0067\u0061\u0074i\u0076\u0065");};if args [6].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0072\u0065\u0071\u0075\u0065\u006e\u0063\u0079\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_aeab :=float64 (int (args [6].ValueNumber ));if !_fcga (_aeab ){return MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_dgce :=0;if len (args )==8&&args [7].Type !=ResultTypeEmpty {if args [7].Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0044\u0044\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0062a\u0073\u0069\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006eu\u006d\u0062\u0065\u0072");};_dgce =int (args [7].ValueNumber );if !_adfb (_dgce ){return MakeErrorResultType (ErrorTypeNum ,"I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0062\u0061\u0073\u0069s\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020\u004f\u0044\u0044\u004c\u0059\u0049\u0045L\u0044");};};_bfeg ,_dfdbc :=_gaa (_aafac ,_fcfd ,_dgce );if _dfdbc .Type ==ResultTypeError {return _dfdbc ;};_bfeg *=_aeab ;_aeac ,_dfdbc :=_gaa (_cgacb ,_fcfd ,_dgce );if _dfdbc .Type ==ResultTypeError {return _dfdbc ;};_aeac *=_aeab ;_dffd ,_dfdbc :=_gaa (_aafac ,_cgacb ,_dgce );if _dfdbc .Type ==ResultTypeError {return _dfdbc ;};_dffd *=_aeab ;_ffcf :=_fefg +_bfeg *100*_efeg /_aeab ;_ffcf /=_cacff +_dffd *100*_efeg /_aeab ;_ffcf --;_ffcf *=_aeab /_aeac ;return MakeNumberResult (_ffcf );};

// Eval evaluates a range with prefix returning a list of results or an error.
func (_cgdca PrefixRangeExpr )Eval (ctx Context ,ev Evaluator )Result {_cege :=_cgdca ._baga .Reference (ctx ,ev );_cedda :=_cgdca ._dfggb .Reference (ctx ,ev );_faddc :=_cgdca ._caga .Reference (ctx ,ev );switch _cege .Type {case ReferenceTypeSheet :if _ccbdc (_cege ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_cege .Value ));};_cggfg :=_abddg (_cege ,_cedda ,_faddc );if _cedda .Type ==ReferenceTypeCell &&_faddc .Type ==ReferenceTypeCell {if _bgdfg ,_bfafa :=ev .GetFromCache (_cggfg );_bfafa {return _bgdfg ;}else {_baagb :=_aadf (ctx .Sheet (_cege .Value ),ev ,_cedda .Value ,_faddc .Value );ev .SetCache (_cggfg ,_baagb );return _baagb ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_cggfg );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_cege .Type ));};};func _egfgf (_bceb yyLexer ,_abcf *yySymType )(_aaad ,_becda int ){_becda =0;_aaad =_bceb .Lex (_abcf );if _aaad <=0{_becda =_ddfab [0];goto _fbfef ;};if _aaad < len (_ddfab ){_becda =_ddfab [_aaad ];goto _fbfef ;};if _aaad >=_ecfbg {if _aaad < _ecfbg +len (_cfbdde ){_becda =_cfbdde [_aaad -_ecfbg ];goto _fbfef ;};};for _gabbb :=0;_gabbb < len (_fggd );_gabbb +=2{_becda =_fggd [_gabbb +0];if _becda ==_aaad {_becda =_fggd [_gabbb +1];goto _fbfef ;};};_fbfef :if _becda ==0{_becda =_cfbdde [1];};if _fgfea >=3{_d .Printf ("l\u0065\u0078\u0020\u0025\u0073\u0028\u0025\u0064\u0029\u000a",_bcedg (_becda ),uint (_aaad ));};return _aaad ,_becda ;};

// String returns an empty string for Error.
func (_fafb Error )String ()string {return ""};

// Fact is an implementation of the excel FACT function which returns the
// factorial of a positive numeric input.
func Fact (args []Result )Result {if len (args )!=1{return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};_eebd :=args [0].AsNumber ();if _eebd .Type !=ResultTypeNumber {return MakeErrorResult ("F\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067u\u006de\u006e\u0074");};if _eebd .ValueNumber < 0{return MakeErrorResult ("\u0046\u0041\u0043\u0054\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006e\u006c\u0079\u0020\u0070\u006f\u0073\u0069t\u0069\u0076\u0065\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};return MakeNumberResult (_cacb (_eebd .ValueNumber ));};

// Combina is an implementation of the Excel COMBINA function whic returns the
// number of combinations with repetitions.
func Combina (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004dB\u0049\u004e\u0041\u0028)\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdcb :=args [0].AsNumber ();_feadf :=args [1].AsNumber ();if _gdcb .Type !=ResultTypeNumber ||_feadf .Type !=ResultTypeNumber {return MakeErrorResult ("\u0043\u004fMB\u0049\u004e\u0041(\u0029\u0020\u0072\u0065qui\u0072es\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dedcd :=_bb .Trunc (_gdcb .ValueNumber );_adaca :=_bb .Trunc (_feadf .ValueNumber );if _dedcd < _adaca {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0041\u0028\u0029\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0020\u003e\u0020\u006b");};if _dedcd ==0{return MakeNumberResult (0);};args [0]=MakeNumberResult (_dedcd +_adaca -1);args [1]=MakeNumberResult (_dedcd -1);return Combin (args );};

// Atan2 implements the Excel ATAN2 function.  It accepts two numeric arguments,
// and the arguments are (x,y), reversed from normal to match Excel's behaviour.
func Atan2 (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0041\u0054\u0041\u004e2\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_bffc :=args [0].AsNumber ();_bccc :=args [1].AsNumber ();if _bffc .Type ==ResultTypeNumber &&_bccc .Type ==ResultTypeNumber {_eebf :=_bb .Atan2 (_bccc .ValueNumber ,_bffc .ValueNumber );if _eebf !=_eebf {return MakeErrorResult ("\u0041T\u0041N\u0032\u0020\u0072\u0065\u0074u\u0072\u006ee\u0064\u0020\u004e\u0061\u004e");};return MakeNumberResult (_eebf );};for _ ,_effb :=range []ResultType {_bffc .Type ,_bccc .Type }{switch _effb {case ResultTypeList ,ResultTypeString :return MakeErrorResult ("\u0041\u0054\u0041\u004e\u0032\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");case ResultTypeError :return _bffc ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0054\u0041\u004e2\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_effb ));};};return MakeErrorResult ("u\u006e\u0068\u0061\u006e\u0064\u006ce\u0064\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0066o\u0072\u0020\u0041T\u0041N\u0032\u0028\u0029");};

// String returns a string representation of a horizontal range.
func (_gccg HorizontalRange )String ()string {return _gccg .horizontalRangeReference ()};

// MaxIfs implements the MAXIFS function.
func MaxIfs (args []Result )Result {_fgace :=_abafd (args ,true ,"\u004d\u0041\u0058\u0049\u0046\u0053");if _fgace .Type !=ResultTypeEmpty {return _fgace ;};_baagd :=_cfdg (args [1:]);_bbeca :=-_bb .MaxFloat64 ;_bbea :=_gbaa (args [0]);for _ ,_ffdee :=range _baagd {_efgd :=_bbea [_ffdee ._ggcaa ][_ffdee ._aeeee ].ValueNumber ;if _bbeca < _efgd {_bbeca =_efgd ;};};if _bbeca ==-_bb .MaxFloat64 {_bbeca =0;};return MakeNumberResult (float64 (_bbeca ));};

// Averagea implements the AVERAGEA function, AVERAGEA counts cells that contain
// text as a zero where AVERAGE ignores them entirely.
func Averagea (args []Result )Result {_gdbb ,_bgee :=_bgaa (args ,true );if _bgee ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0041\u0056\u0045\u0052AG\u0045\u0020\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079\u0020\u007a\u0065r\u006f");};return MakeNumberResult (_gdbb /_bgee );};var _agdc =[]ri {{1000,"\u004d"},{999,"\u0049\u004d"},{995,"\u0056\u004d"},{990,"\u0058\u004d"},{950,"\u004c\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{499,"\u0049\u0044"},{495,"\u0056\u0044"},{490,"\u0058\u0044"},{450,"\u004c\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{99,"\u0049\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{45,"\u0056\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};const _fafeb =57351;func LexReader (r _g .Reader )chan *node {_eccfb :=NewLexer ();go _eccfb .lex (r );return _eccfb ._ddbbc };func _bbgd (_fabd ,_bbeg []float64 ,_cfab float64 )float64 {_afcb :=_cfab +1;_abce :=0.0;_fcgg :=len (_fabd );_dbcf :=_bbeg [0];for _eefd :=1;_eefd < _fcgg ;_eefd ++{_gggd :=(_bbeg [_eefd ]-_dbcf )/365;_abce -=_gggd *_fabd [_eefd ]/_bb .Pow (_afcb ,_gggd +1);};return _abce ;};func _cgdfe (_abfe string ,_ecebb []Result )(*parsedSearchObject ,Result ){_ffec :=len (_ecebb );if _ffec !=2&&_ffec !=3{return nil ,MakeErrorResult (_abfe +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006fr\u0020t\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfbe :=_ecebb [0];if _cfbe .Type ==ResultTypeError {return nil ,_cfbe ;};if _cfbe .Type !=ResultTypeString &&_cfbe .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068e\u0020\u0066\u0069\u0072s\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020s\u0068\u006f\u0075\u006c\u0064\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_ebgea :=_ecebb [1];if _ebgea .Type ==ResultTypeError {return nil ,_ebgea ;};if _ebgea .Type !=ResultTypeString &&_ebgea .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("\u0054\u0068\u0065\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020a\u0020\u0073t\u0072\u0069\u006e\u0067");};_cafb :=_ebgea .Value ();_cbgbf :=_cfbe .Value ();_ddaed :=1;if _ffec ==3&&_ecebb [2].Type !=ResultTypeEmpty {_gagfg :=_ecebb [2];if _gagfg .Type !=ResultTypeNumber {return nil ,MakeErrorResult ("P\u006f\u0073\u0069\u0074\u0069\u006fn\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u0062e\u0020\u0061\u0020n\u0075m\u0062\u0065\u0072");};_ddaed =int (_gagfg .ValueNumber );if _ddaed < 1{return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};if _ddaed > len (_cafb ){return nil ,MakeErrorResultType (ErrorTypeValue ,"\u0050\u006f\u0073\u0069\u0074\u0069\u006f\u006e\u0020\u0073\u0068\u006f\u0075l\u0064\u0020\u0062\u0065\u0020\u0061 \u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074h\u0061\u006e\u0020\u0030");};};return &parsedSearchObject {_cbgbf ,_cafb ,_ddaed },_dbc ;};

// Time is an implementation of the Excel TIME() function.
func Time (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0049ME\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_agd :=args [0].ValueNumber ;_fggf :=args [1].ValueNumber ;_aeed :=args [2].ValueNumber ;_agf :=_feec (_agd ,_fggf ,_aeed );if _agf >=0{return MakeNumberResult (_agf );}else {return MakeErrorResultType (ErrorTypeNum ,"");};};

// Amorlinc implements the Excel AMORLINC function.
func Amorlinc (args []Result )Result {_ccag ,_dded :=_fdge (args ,"\u0041\u004d\u004f\u0052\u004c\u0049\u004e\u0043");if _dded .Type ==ResultTypeError {return _dded ;};_bcea :=_ccag ._cafa ;_bee :=_ccag ._fggfe ;_badd :=_ccag ._afeb ;_cecee :=_ccag ._ddbcf ;_edd :=_ccag ._fdfa ;_gdfa :=_ccag ._gbcgf ;_bca :=_ccag ._fedg ;_fdbc ,_bbbc :=_gaa (_bee ,_badd ,_bca );if _bbbc .Type ==ResultTypeError {return MakeErrorResult ("\u0069\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0064\u0061\u0074\u0065\u0073 \u0066o\u0072\u0020\u0041\u004d\u004f\u0052\u004cI\u004e\u0043");};_ega :=_fdbc *_gdfa *_bcea ;if _edd ==0{return MakeNumberResult (_ega );};_afbg :=_bcea *_gdfa ;_ceag :=_bcea -_cecee ;_cabb :=int ((_ceag -_ega )/_afbg );if _edd <=_cabb {return MakeNumberResult (_afbg );}else if _edd ==_cabb +1{return MakeNumberResult (_ceag -_afbg *float64 (_cabb )-_ega );}else {return MakeNumberResult (0);};};const _cabgbg =_fe .Millisecond *1000;

// Reference returns a string reference value to a vertical range.
func (_cefdg VerticalRange )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeVerticalRange ,Value :_cefdg .verticalRangeReference ()};};func _fdcb (_affa ,_eaca ,_cfeg ,_bgeb float64 ,_ggd int )float64 {var _fdde float64 ;if _affa ==0{_fdde =(_cfeg +_bgeb )/_eaca ;}else {_baee :=_bb .Pow (1+_affa ,_eaca );if _ggd ==1{_fdde =(_bgeb *_affa /(_baee -1)+_cfeg *_affa /(1-1/_baee ))/(1+_affa );}else {_fdde =_bgeb *_affa /(_baee -1)+_cfeg *_affa /(1-1/_baee );};};return -_fdde ;};func init (){RegisterFunction ("\u0041\u004e\u0044",And );RegisterFunction ("\u0046\u0041\u004cS\u0045",False );RegisterFunction ("\u0049\u0046",If );RegisterFunction ("\u0049F\u0045\u0052\u0052\u004f\u0052",IfError );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0049\u0046\u004e\u0041",IfNA );RegisterFunction ("\u0049\u0046\u0053",Ifs );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0049\u0046S",Ifs );RegisterFunction ("\u004e\u004f\u0054",Not );RegisterFunction ("\u004f\u0052",Or );RegisterFunction ("\u0054\u0052\u0055\u0045",True );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0058\u004fR",Xor );};

// Pmt implements the Excel PMT function.
func Pmt (args []Result )Result {_aeae :=len (args );if _aeae < 3||_aeae > 5{return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_dddc :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004dT\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecdf :=args [1].ValueNumber ;if _ecdf ==0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u006f\u00200");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fbeb :=args [2].ValueNumber ;_gega :=0.0;if _aeae >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("P\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gega =args [3].ValueNumber ;};_bdgae :=0.0;if _aeae ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0079\u0070\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bdgae =args [4].ValueNumber ;if _bdgae !=0{_bdgae =1;};};var _ggbe float64 ;if _dddc ==0{_ggbe =(_fbeb +_gega )/_ecdf ;}else {_gdbeaf :=_bb .Pow (1+_dddc ,_ecdf );if _bdgae ==1{_ggbe =(_gega *_dddc /(_gdbeaf -1)+_fbeb *_dddc /(1-1/_gdbeaf ))/(1+_dddc );}else {_ggbe =_gega *_dddc /(_gdbeaf -1)+_fbeb *_dddc /(1-1/_gdbeaf );};};return MakeNumberResult (-_ggbe );};

// String returns a string representation of a vertical range with prefix.
func (_egfd PrefixVerticalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_egfd ._bbdg .String (),_egfd ._gggff ,_egfd ._gebf );};

// IsNA is an implementation of the Excel ISNA() function.
func IsNA (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004e\u0041\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString =="\u0023\u004e\u002f\u0041");};

// ConstArrayExpr is a constant array expression.
type ConstArrayExpr struct{_gbc [][]Expression };

// FunctionComplex is a function whose result  depends on its arguments and the
// context that it's in.  As an example, INDIRECT is a complex function so that
// INDIRECT("A1") which returns the value of the "A1" cell in a sheet can use
// the context to reach into the sheet and pull out required values.
type FunctionComplex func (_aaceg Context ,_bffbc Evaluator ,_afece []Result )Result ;const _edgcf =57370;

// String returns a string representation for Negate.
func (_cbec Negate )String ()string {return "\u002d"+_cbec ._agcaf .String ()};

// Substitute is an implementation of the Excel SUBSTITUTE function.
func Substitute (args []Result )Result {_cgbg :=len (args );if _cgbg !=3&&_cgbg !=4{return MakeErrorResult ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054U\u0054\u0045\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_abfd ,_ffdc :=_bebg (args [0],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0074\u0065\u0078\u0074");if _ffdc .Type ==ResultTypeError {return _ffdc ;};_aadb ,_ffdc :=_bebg (args [1],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006f\u006c\u0064\u0020\u0074\u0065\u0078\u0074");if _ffdc .Type ==ResultTypeError {return _ffdc ;};_efbdd ,_ffdc :=_bebg (args [2],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u006e\u0065\u0077\u0020\u0074\u0065\u0078\u0074");if _ffdc .Type ==ResultTypeError {return _ffdc ;};_gdadc :=0;if _cgbg ==3{return MakeStringResult (_c .Replace (_abfd ,_aadb ,_efbdd ,-1));}else {_fdca ,_bbfgg :=_cbfbe (args [3],"\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045","\u0069\u006e\u0073t\u0061\u006e\u0063\u0065\u005f\u006e\u0075\u006d");if _bbfgg .Type ==ResultTypeError {return _bbfgg ;};_gdadc =int (_fdca );if _gdadc < 1{return MakeErrorResult ("\u0069\u006es\u0074\u0061\u006e\u0063e\u005f\u006eu\u006d\u0020\u0073\u0068\u006f\u0075\u006c\u0064 \u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e \u007a\u0065\u0072\u006f");};_deff :=_abfd ;_dcdg :=_gdadc ;_dedb :=-1;_afdea :=len (_aadb );_bfdfe :=0;for {_dcdg --;_cbfd :=_c .Index (_deff ,_aadb );if _cbfd ==-1{_dedb =-1;break ;}else {_dedb =_cbfd +_bfdfe ;if _dcdg ==0{break ;};_fbba :=_afdea +_cbfd ;_bfdfe +=_fbba ;_deff =_deff [_fbba :];};};if _dedb ==-1{return MakeStringResult (_abfd );}else {_gffed :=_abfd [:_dedb ];_ggddg :=_abfd [_dedb +_afdea :];return MakeStringResult (_gffed +_efbdd +_ggddg );};};};func _fef (_cba ,_bgfb ,_fece int )int {if _cba > _bgfb {return 0;};if _cbbbf (_fece ){return (_bgfb -_cba +1)*360;};_bebd :=0;for _deb :=_cba ;_deb <=_bgfb ;_deb ++{_cfa :=365;if _aeef (_deb ){_cfa =366;};_bebd +=_cfa ;};return _bebd ;};

// BinaryExpr is a binary expression.
type BinaryExpr struct{_ed ,_af Expression ;_afd BinOpType ;};func _bcedg (_bdaa int )string {if _bdaa >=1&&_bdaa -1< len (_cgca ){if _cgca [_bdaa -1]!=""{return _cgca [_bdaa -1];};};return _d .Sprintf ("\u0074\u006f\u006b\u002d\u0025\u0076",_bdaa );};

// String returns a string representation of ConstArrayExpr.
func (_ded ConstArrayExpr )String ()string {return ""};func (_bgce ReferenceType )String ()string {if _bgce >=ReferenceType (len (_ceca )-1){return _d .Sprintf ("\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_bgce );};return _eafgc [_ceca [_bgce ]:_ceca [_bgce +1]];};func _cfaa (_aeba ,_fdeb Result ,_ecee string )(float64 ,float64 ,Result ){_dcae ,_gdbe :=_bbfd (_aeba ,"\u0073e\u0074t\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065",_ecee );if _gdbe .Type ==ResultTypeError {return 0,0,_gdbe ;};_cffd ,_gdbe :=_bbfd (_fdeb ,"\u006d\u0061\u0074\u0075\u0072\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065",_ecee );if _gdbe .Type ==ResultTypeError {return 0,0,_gdbe ;};if _dcae >=_cffd {return 0,0,MakeErrorResultType (ErrorTypeNum ,_ecee +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020\u0064\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006cat\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074\u0020\u0064\u0061\u0074\u0065");};return _dcae ,_cffd ,_dbc ;};

// Now is an implementation of the Excel NOW() function.
func Now (args []Result )Result {if len (args )> 0{return MakeErrorResult ("\u004e\u004fW\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};_feea :=_fe .Now ();_ ,_dafc :=_feea .Zone ();_agcg :=_bbc +float64 (_feea .Unix ()+int64 (_dafc ))/86400;return MakeNumberResult (_agcg );};type xargs struct{_aeea []float64 ;_gccef []float64 ;};func init (){_fgag =_fb .New (_fb .NewSource (_fe .Now ().UnixNano ()));RegisterFunction ("\u0041\u0042\u0053",_edegf ("\u0041\u0053\u0049\u004e",_bb .Abs ));RegisterFunction ("\u0041\u0043\u004f\u0053",_edegf ("\u0041\u0053\u0049\u004e",_bb .Acos ));RegisterFunction ("\u0041\u0043\u004fS\u0048",_edegf ("\u0041\u0053\u0049\u004e",_bb .Acosh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054",_edegf ("\u0041\u0043\u004f\u0054",func (_gbdf float64 )float64 {return _bb .Pi /2-_bb .Atan (_gbdf )}));RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u0041\u0043\u004f\u0054\u0048",_edegf ("\u0041\u0043\u004fT\u0048",func (_debe float64 )float64 {return _bb .Atanh (1/_debe )}));RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0041\u0052\u0041\u0042\u0049\u0043",Arabic );RegisterFunction ("\u0041\u0053\u0049\u004e",_edegf ("\u0041\u0053\u0049\u004e",_bb .Asin ));RegisterFunction ("\u0041\u0053\u0049N\u0048",_edegf ("\u0041\u0053\u0049N\u0048",_bb .Asinh ));RegisterFunction ("\u0041\u0054\u0041\u004e",_edegf ("\u0041\u0054\u0041\u004e",_bb .Atan ));RegisterFunction ("\u0041\u0054\u0041N\u0048",_edegf ("\u0041\u0054\u0041N\u0048",_bb .Atanh ));RegisterFunction ("\u0041\u0054\u0041N\u0032",Atan2 );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0042\u0041\u0053\u0045",Base );RegisterFunction ("\u0043E\u0049\u004c\u0049\u004e\u0047",Ceiling );RegisterFunction ("\u005fx\u006cf\u006e\u002e\u0043\u0045\u0049L\u0049\u004eG\u002e\u004d\u0041\u0054\u0048",CeilingMath );RegisterFunction ("_\u0078\u006c\u0066\u006e.C\u0045I\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043\u0049\u0053\u0045",CeilingPrecise );RegisterFunction ("\u0043\u004f\u004d\u0042\u0049\u004e",Combin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u004d\u0042\u0049\u004e\u0041",Combina );RegisterFunction ("\u0043\u004f\u0053",_edegf ("\u0043\u004f\u0053",_bb .Cos ));RegisterFunction ("\u0043\u004f\u0053\u0048",_edegf ("\u0043\u004f\u0053\u0048",_bb .Cosh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u004fT",_beab ("\u0043\u004f\u0054",_bb .Tan ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u004f\u0054\u0048",_beab ("\u0043\u004f\u0054\u0048",_bb .Tanh ));RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0043\u0053C",_beab ("\u0043\u0053\u0043",_bb .Sin ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0043\u0053\u0043\u0048",_beab ("\u0043\u0053\u0043",_bb .Sinh ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0044\u0045\u0043\u0049\u004d\u0041\u004c",Decimal );RegisterFunction ("\u0044E\u0047\u0052\u0045\u0045\u0053",Degrees );RegisterFunction ("\u0045\u0056\u0045\u004e",Even );RegisterFunction ("\u0045\u0058\u0050",_edegf ("\u0045\u0058\u0050",_bb .Exp ));RegisterFunction ("\u0046\u0041\u0043\u0054",Fact );RegisterFunction ("\u0046\u0041\u0043\u0054\u0044\u004f\u0055\u0042\u004c\u0045",FactDouble );RegisterFunction ("\u0046\u004c\u004fO\u0052",Floor );RegisterFunction ("\u005f\u0078l\u0066\u006e\u002eF\u004c\u004f\u004f\u0052\u002e\u004d\u0041\u0054\u0048",FloorMath );RegisterFunction ("\u005f\u0078\u006c\u0066n.\u0046\u004c\u004f\u004f\u0052\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045",FloorPrecise );RegisterFunction ("\u0047\u0043\u0044",GCD );RegisterFunction ("\u0049\u004e\u0054",Int );RegisterFunction ("I\u0053\u004f\u002e\u0043\u0045\u0049\u004c\u0049\u004e\u0047",CeilingPrecise );RegisterFunction ("\u004c\u0043\u004d",LCM );RegisterFunction ("\u004c\u004e",_edegf ("\u004c\u004e",_bb .Log ));RegisterFunction ("\u004c\u004f\u0047",Log );RegisterFunction ("\u004c\u004f\u00471\u0030",_edegf ("\u004c\u004f\u00471\u0030",_bb .Log10 ));RegisterFunction ("\u004dD\u0045\u0054\u0045\u0052\u004d",MDeterm );RegisterFunction ("\u004d\u004f\u0044",Mod );RegisterFunction ("\u004d\u0052\u004f\u0055\u004e\u0044",Mround );RegisterFunction ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c",Multinomial );RegisterFunction ("_\u0078\u006c\u0066\u006e\u002e\u004d\u0055\u004e\u0049\u0054",Munit );RegisterFunction ("\u004f\u0044\u0044",Odd );RegisterFunction ("\u0050\u0049",Pi );RegisterFunction ("\u0050\u004f\u0057E\u0052",Power );RegisterFunction ("\u0050R\u004f\u0044\u0055\u0043\u0054",Product );RegisterFunction ("\u0051\u0055\u004f\u0054\u0049\u0045\u004e\u0054",Quotient );RegisterFunction ("\u0052A\u0044\u0049\u0041\u004e\u0053",Radians );RegisterFunction ("\u0052\u0041\u004e\u0044",Rand );RegisterFunction ("R\u0041\u004e\u0044\u0042\u0045\u0054\u0057\u0045\u0045\u004e",RandBetween );RegisterFunction ("\u0052\u004f\u004dA\u004e",Roman );RegisterFunction ("\u0052\u004f\u0055N\u0044",Round );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0044\u004f\u0057N",RoundDown );RegisterFunction ("\u0052O\u0055\u004e\u0044\u0055\u0050",RoundUp );RegisterFunction ("\u005fx\u006c\u0066\u006e\u002e\u0053\u0045C",_beab ("\u0053\u0045\u0043",_bb .Cos ));RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0053\u0045\u0043\u0048",_beab ("\u0053\u0045\u0043\u0048",_bb .Cosh ));RegisterFunction ("\u0053E\u0052\u0049\u0045\u0053\u0053\u0055M",SeriesSum );RegisterFunction ("\u0053\u0049\u0047\u004e",Sign );RegisterFunction ("\u0053\u0049\u004e",_edegf ("\u0053\u0049\u004e",_bb .Sin ));RegisterFunction ("\u0053\u0049\u004e\u0048",_edegf ("\u0053\u0049\u004e\u0048",_bb .Sinh ));RegisterFunction ("\u0053\u0051\u0052\u0054",_edegf ("\u0053\u0051\u0052\u0054",_bb .Sqrt ));RegisterFunction ("\u0053\u0051\u0052\u0054\u0050\u0049",_edegf ("\u0053\u0051\u0052\u0054\u0050\u0049",func (_efcce float64 )float64 {return _bb .Sqrt (_efcce *_bb .Pi )}));RegisterFunction ("\u0053\u0055\u004d",Sum );RegisterFunction ("\u0053\u0055\u004dI\u0046",SumIf );RegisterFunction ("\u0053\u0055\u004d\u0049\u0046\u0053",SumIfs );RegisterFunction ("\u0053\u0055\u004d\u0050\u0052\u004f\u0044\u0055\u0043\u0054",SumProduct );RegisterFunction ("\u0053\u0055\u004dS\u0051",SumSquares );RegisterFunction ("\u0054\u0041\u004e",_edegf ("\u0054\u0041\u004e",_bb .Tan ));RegisterFunction ("\u0054\u0041\u004e\u0048",_edegf ("\u0054\u0041\u004e\u0048",_bb .Tanh ));RegisterFunction ("\u0054\u0052\u0055N\u0043",Trunc );};

// PrefixVerticalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!AA:IJ (all cells from columns AA to IJ of sheet 'Sheet1').
type PrefixVerticalRange struct{_bbdg Expression ;_gggff ,_gebf string ;};func _aggb (){_acgcg =_eb .MustCompile ("\u005e\u0030\u002b\u0024");_eeeef =_eb .MustCompile ("\u005e\u0028\u0028\u0023|0\u0029\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c$\u0029");_eafgg =_eb .MustCompile ("\u005e\u0028\u0023\u007c\u0030\u007c\u002c\u0029\u002a\u005f\u005c\u0029\u003b");_eaada =_eb .MustCompile ("\u005e\u0030\u002b\u005c\u002e\u0028\u0030\u002b\u0029\u0024");_fdcc =_eb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0029+\u0028\u0023\u007c\u0030\u0029\u002b\u005c.\u0028\u0030\u002b\u0029\u002e\u002a\u0028\u003b\u007c\u0024\u0029");_egcg =_eb .MustCompile ("^\u0028\u005f\u007c\u002d\u007c\u0020)\u002b\u005c\u002a\u0020\u0023\u002b\u002c\u0023\u002b0\u005c\u002e\u00280\u002b)\u002e\u002a\u003b");_cdbeg =_eb .MustCompile ("\u005e\u0028\u0028\u0023\u007c\u0030)\u002b\u002c\u0029\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028(\u0023\u007c\u0030\u0029\u002b\u0029\u005f\\\u0029\u002e\u002a\u003b");_dacb =_eb .MustCompile ("\u005e\u0028\u0023\u007c0)\u002b\u005c\u002e\u0028\u0028\u0023\u007c\u0030\u0029\u002b\u0029\u0025\u0024");_ddcaa =_eb .MustCompile ("\u005c\u005b\u005c$\u005c\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b\u002c\u0028\u0023\u007c\u0030\u0029\u002b\u003b");_ffaa =_eb .MustCompile ("\u005c[\u005c\u0024\\\u0024\u002d\u002e+\u005c\u005d\u0028\u005c\u002a\u0020\u0029?\u0028\u0023\u007c\u0030\u0029\u002b,\u0028\u0023\u007c\u0030\u0029\u002b\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u002e\u002a\u003b");_dgba =_eb .MustCompile ("\u005e(\u0028\u0023|\u0030\u0029\u002b,\u0029\u002b\u0028\u0023\u007c\u0030\u0029+\u0028\u005c\u002e\u0028\u0028\u0023|\u0030\u007c\u002d\u0029\u002b\u0029\u0029\u003f\u002e\u002b\u005c[\u005c\u0024\u002e\u002b\u005c\u005d\u002e\u002a\u003b");_accf =_eb .MustCompile ("\u005e\u004d\u002b(\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dcga +_dcga +"\u0029\u002b\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u002c\u007c\u0022\u007c"+_dcga +_dcga +"\u0029\u002b\u0059+\u0024");_bbce =_eb .MustCompile ("\u005e\u0044\u002b\u0028\u002f\u007c\u0020\u007c\u005c\u002e\u007c\u0022\u007c"+_dcga +_dcga +"\u0029\u002b\u004d\u002b\u0028\u002f\u007c\u0020\u007c\\\u002e\u007c\u0022\u007c"+_dcga +_dcga +"\u0029\u002b\u0059+\u0024");_gdafe =_eb .MustCompile ("\u005e\u0028\u0023|\u0030\u0029\u002b\u005c.\u0028\u0028\u0023\u007c\u0030\u0029\u002a)\u0045\u005c\u002b\u0028\u0023\u007c\u0030\u0029\u002b\u0028\u003b\u007c\u0024\u0029");_ceeg =_eb .MustCompile ("\u005e.\u002a\u005f\u005c\u0029\u002e\u002a;");};const _agab =57369;func _cbad (_dgc ,_edbgb []float64 ,_bgcb float64 )Result {_eaaa :=false ;_bfdd :=false ;for _geea :=0;_geea < len (_dgc );_geea ++{if _dgc [_geea ]> 0{_eaaa =true ;};if _dgc [_geea ]< 0{_bfdd =true ;};};if !_eaaa ||!_bfdd {return MakeErrorResultType (ErrorTypeNum ,"");};_bgdc :=_bgcb ;_dcbd :=1e-10;_fdea :=0;_fdbb :=50;_egb :=false ;for {_abaf :=_egef (_dgc ,_edbgb ,_bgdc );_aaeb :=_bgdc -_abaf /_bbgd (_dgc ,_edbgb ,_bgdc );_feeac :=_bb .Abs (_aaeb -_bgdc );_bgdc =_aaeb ;_fdea ++;if _feeac <=_dcbd ||_bb .Abs (_abaf )<=_dcbd {break ;};if _fdea > _fdbb {_egb =true ;break ;};};if _egb ||_bb .IsNaN (_bgdc )||_bb .IsInf (_bgdc ,0){return MakeErrorResultType (ErrorTypeNum ,"");};return MakeNumberResult (_bgdc );};

// String returns an empty string for EmptyExpr.
func (_dgdg EmptyExpr )String ()string {return ""};

// FactDouble is an implementation of the excel FACTDOUBLE function which
// returns the double factorial of a positive numeric input.
func FactDouble (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_eeag :=args [0].AsNumber ();if _eeag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0041C\u0054\u0044\u004f\u0055\u0042\u004c\u0045\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _eeag .ValueNumber < 0{return MakeErrorResult ("\u0046A\u0043\u0054D\u004f\u0055\u0042\u004cE\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006f\u006ely\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_fcgb :=float64 (1);_cgabca :=_bb .Trunc (_eeag .ValueNumber );for _abcea :=_cgabca ;_abcea > 1;_abcea -=2{_fcgb *=_abcea ;};return MakeNumberResult (_fcgb );};func _gfgg (_aaef ,_afbgb ,_adgf ,_fcbgd ,_fcce ,_dcfe float64 ,_gbbb int )(float64 ,Result ){_faaa :=int (_dcfe );_dafa :=_dabg (_aaef ,_afbgb ,_faaa ,_gbbb );_cggd :=_abcc (_aaef ,_afbgb ,_faaa ,_gbbb )/_dafa ;_dbfe ,_fcgc :=_aeeb (_aaef ,_afbgb ,_faaa ,_gbbb );if _fcgc .Type ==ResultTypeError {return 0,_fcgc ;};_aga :=_accc (_aaef ,_afbgb ,_faaa ,_gbbb );_fgefd :=_fcce /_bb .Pow (1+_fcbgd /_dcfe ,_dbfe -1+_cggd );_fgefd -=100*_adgf /_dcfe *_aga /_dafa ;_dgea :=100*_adgf /_dcfe ;_bebdb :=1+_fcbgd /_dcfe ;for _ccce :=0.0;_ccce < _dbfe ;_ccce ++{_fgefd +=_dgea /_bb .Pow (_bebdb ,_ccce +_cggd );};return _fgefd ,MakeEmptyResult ();};

// Pduration implements the Excel PDURATION function.
func Pduration (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0050\u0044\u0055RA\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050D\u0055\u0052A\u0054\u0049\u004fN\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfdc :=args [0].ValueNumber ;if _cfdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020p\u006f\u0073i\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u0075\u0072\u0072\u0065\u006e\u0074\u0020\u0076\u0061l\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccfg :=args [1].ValueNumber ;if _ccfg <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0044\u0055\u0052\u0041\u0054\u0049\u004f\u004e\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 c\u0075\u0072\u0072\u0065n\u0074\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074o \u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066i\u0065\u0064\u0020\u0076\u0061lu\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bcbf :=args [2].ValueNumber ;if _bcbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0044\u0055\u0052\u0041\u0054I\u004f\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0070\u0065\u0063\u0069\u0066\u0069\u0065d\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070o\u0073i\u0074\u0069\u0076\u0065");};return MakeNumberResult ((_bb .Log10 (_bcbf )-_bb .Log10 (_ccfg ))/_bb .Log10 (1+_cfdc ));};

// Floor is an implementation of the FlOOR function.
func Floor (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bedd :=args [0].AsNumber ();if _bedd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};var _eeae float64 ;_dadcb :=args [1].AsNumber ();if _dadcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0046\u004c\u004f\u004f\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eeae =_dadcb .ValueNumber ;if _eeae < 0&&_bedd .ValueNumber >=0{return MakeErrorResultType (ErrorTypeNum ,"\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0046L\u004f\u004f\u0052");};_acad :=_bedd .ValueNumber ;_acad ,_cbdd :=_bb .Modf (_acad /_eeae );if _cbdd !=0{if _bedd .ValueNumber < 0&&_cbdd < 0{_acad --;};};return MakeNumberResult (_acad *_eeae );};

// CeilingPrecise is an implementation of the CEILING.PRECISE function which
// returns the ceiling of a number.
func CeilingPrecise (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002eP\u0052\u0045\u0043IS\u0045\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020o\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0043\u0045I\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u0061\u006c\u006c\u006f\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cccb :=args [0].AsNumber ();if _cccb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069r\u0073\u0074\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fccc :=float64 (1);if _cccb .ValueNumber < 0{_fccc =-1;};if len (args )> 1{_dbcg :=args [1].AsNumber ();if _dbcg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043E\u0049L\u0049\u004e\u0047\u002e\u0050\u0052\u0045\u0043\u0049\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_fccc =_bb .Abs (_dbcg .ValueNumber );};if len (args )==1{return MakeNumberResult (_bb .Ceil (_cccb .ValueNumber ));};_dffc :=_cccb .ValueNumber ;_dffc ,_ddbd :=_bb .Modf (_dffc /_fccc );if _ddbd !=0{if _cccb .ValueNumber > 0{_dffc ++;};};return MakeNumberResult (_dffc *_fccc );};func _baea (_eca ,_egga ,_ace ,_dad int )int {if !_cbbbf (_dad ){return _ace ;};_ddab :=_ace ;_edg :=_abg (_eca ,_egga );if _ddab > 30||_ace >=_edg ||_ddab >=_edg {_ddab =30;};return _ddab ;};type Expression interface{Eval (_dge Context ,_fda Evaluator )Result ;Reference (_egea Context ,_bbe Evaluator )Reference ;String ()string ;Update (_bae *_eg .UpdateQuery )Expression ;};

// MakeNumberResult constructs a number result.
func MakeNumberResult (v float64 )Result {if v ==_bb .Copysign (0,-1){v =0;};return Result {Type :ResultTypeNumber ,ValueNumber :v };};

// Reference returns an invalid reference for Number.
func (_ddabf Number )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// TextJoin is an implementation of the Excel TEXTJOIN function.
func TextJoin (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004aO\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074h\u0072\u0065\u0065\u0020\u006f\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054\u0045\u0058T\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0065\u006c\u0069\u006d\u0069\u0074\u0065\u0072\u0020\u0074\u006f\u0020\u0062\u0065 \u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_bcef :=args [0].ValueString ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065c\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0072 \u0062\u006f\u006f\u006c\u0065a\u006e");};_efbad :=args [1].ValueNumber !=0;_bccb :=_gfgc (args [2:],[]string {},_efbad );return MakeStringResult (_c .Join (_bccb ,_bcef ));};

// Disc implements the Excel DISC function.
func Disc (args []Result )Result {_gegge :=len (args );if _gegge !=4&&_gegge !=5{return MakeErrorResult ("\u0044\u0049SC\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s f\u006fur\u0020\u006f\u0072\u0020\u0066\u0069\u0076e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dfgb ,_ccdc ,_abcd :=_cfaa (args [0],args [1],"\u0044\u0049\u0053\u0043");if _abcd .Type ==ResultTypeError {return _abcd ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_fdgb :=args [2].ValueNumber ;if _fdgb <=0{return MakeErrorResultType (ErrorTypeNum ,"D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0070\u0072\u0020\u0074o \u0062\u0065\u0020\u0070o\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049S\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_adgd :=args [3].ValueNumber ;if _adgd <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0044\u0049\u0053\u0043\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0072e\u0064\u0065m\u0070\u0074\u0069\u006f\u006e\u0020t\u006f b\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgb :=0;if _gegge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0049\u0053\u0043\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgb =int (args [4].ValueNumber );if !_adfb (_bgb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0066\u006f\u0072 \u0044\u0049\u0053\u0043");};};_eaaf ,_abcd :=_gaa (_dfgb ,_ccdc ,_bgb );if _abcd .Type ==ResultTypeError {return _abcd ;};return MakeNumberResult ((_adgd -_fdgb )/_adgd /_eaaf );};

// Function is a standard function whose result only depends on its arguments.
type Function func (_cdba []Result )Result ;const _gdda =57355;const _agcd =57352;func _cfdg (_feegc []Result )[]rangeIndex {_gbbdg :=[]rangeIndex {};_ggbeb :=len (_feegc );for _aaea :=0;_aaea < _ggbeb -1;_aaea +=2{_cafe :=[]rangeIndex {};_cfdgd :=_gbaa (_feegc [_aaea ]);_bgcaa :=_acbfe (_feegc [_aaea +1]);if _aaea ==0{for _ecca ,_cbcc :=range _cfdgd {for _cgdf ,_dacc :=range _cbcc {if _cgcdg (_dacc ,_bgcaa ){_cafe =append (_cafe ,rangeIndex {_ecca ,_cgdf });};};};}else {for _ ,_efbg :=range _gbbdg {_fabf :=_cfdgd [_efbg ._ggcaa ][_efbg ._aeeee ];if _cgcdg (_fabf ,_bgcaa ){_cafe =append (_cafe ,_efbg );};};};if len (_cafe )==0{return []rangeIndex {};};_gbbdg =_cafe [:];};return _gbbdg ;};

// Rand is an implementation of the Excel RAND() function that returns random
// numbers in the range [0,1).
func Rand (args []Result )Result {if len (args )!=0{return MakeErrorResult ("R\u0041\u004e\u0044\u0028\u0029\u0020a\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u006e\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};return MakeNumberResult (_fgag .Float64 ());};func (_gdfdd PrefixVerticalRange )verticalRangeReference (_efab string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_efab ,_gdfdd ._gggff ,_gdfdd ._gebf );};

// T is an implementation of the Excel T function that returns whether the
// argument is text.
func T (args []Result )Result {if len (args )!=1{return MakeErrorResult ("T\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0020\u0073i\u006e\u0067\u006c\u0065\u0020\u0073\u0074r\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_agcgg :=args [0];if _agcgg .Type ==ResultTypeError ||_agcgg .Type ==ResultTypeString {return _agcgg ;};return _dbc ;};func _fbad (_eadf _fe .Time )_fe .Time {_eadf =_eadf .UTC ();return _fe .Date (_eadf .Year (),_eadf .Month (),_eadf .Day (),_eadf .Hour (),_eadf .Minute (),_eadf .Second (),_eadf .Nanosecond (),_fe .Local );};func _egef (_gcb ,_edde []float64 ,_bbac float64 )float64 {_bgea :=_bbac +1;_ggcee :=_gcb [0];_gbcb :=len (_gcb );_degb :=_edde [0];for _dfbb :=1;_dfbb < _gbcb ;_dfbb ++{_ggcee +=_gcb [_dfbb ]/_bb .Pow (_bgea ,(_edde [_dfbb ]-_degb )/365);};return _ggcee ;};func _abag (_fcff ,_gae int64 )float64 {return float64 (int (0.5+float64 ((_gae -_fcff )/86400)))};const (_abdd rmode =iota ;_gfga ;_ddbba ;);func _gffd (){_ffad =_eb .MustCompile ("\u005e\u0028\u005b\u0030\u002d\u0039\u005d\u002b\u0029\u0024");_cgaga =_eb .MustCompile ("\u005e=\u0028\u002e\u002a\u0029\u0024");_dfdd =_eb .MustCompile ("\u005e<\u0028\u002e\u002a\u0029\u0024");_afbf =_eb .MustCompile ("\u005e>\u0028\u002e\u002a\u0029\u0024");_cadd =_eb .MustCompile ("\u005e\u003c\u003d\u0028\u002e\u002a\u0029\u0024");_eabea =_eb .MustCompile ("\u005e\u003e\u003d\u0028\u002e\u002a\u0029\u0024");};

// NewPrefixHorizontalRange constructs a new full rows range with prefix.
func NewPrefixHorizontalRange (pfx Expression ,v string )Expression {_eabf :=_c .Split (v ,"\u003a");if len (_eabf )!=2{return nil ;};_eccb ,_ :=_ea .Atoi (_eabf [0]);_dcef ,_ :=_ea .Atoi (_eabf [1]);if _eccb > _dcef {_eccb ,_dcef =_dcef ,_eccb ;};return PrefixHorizontalRange {_bccca :pfx ,_gceg :_eccb ,_gfdd :_dcef };};

// MaxA is an implementation of the Excel MAXA() function.
func MaxA (args []Result )Result {return _ffce (args ,true )};

// Eval evaluates the binary expression using the context given.
func (_db BinaryExpr )Eval (ctx Context ,ev Evaluator )Result {_ga :=_db ._ed .Eval (ctx ,ev );if _ga .Type ==ResultTypeError {return _ga ;};_cg :=_db ._af .Eval (ctx ,ev );if _cg .Type ==ResultTypeError {return _cg ;};if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeArray {if !_dbf (_ga .ValueArray ,_cg .ValueArray ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _dg (_db ._afd ,_ga .ValueArray ,_cg .ValueArray );}else if _ga .Type ==ResultTypeList {if len (_ga .ValueList )!=len (_cg .ValueList ){return MakeErrorResult ("l\u0068\u0073\u002f\u0072\u0068\u0073 \u0073\u0068\u006f\u0075\u006c\u0064 \u0068\u0061\u0076\u0065\u0020\u0073\u0061m\u0065\u0020\u0064\u0069\u006d\u0065\u006e\u0073\u0069\u006fn\u0073");};return _cgf (_db ._afd ,_ga .ValueList ,_cg .ValueList );};}else if _ga .Type ==ResultTypeArray &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return _dd (_db ._afd ,_ga .ValueArray ,_cg );}else if _ga .Type ==ResultTypeList &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return _feb (_db ._afd ,_ga .ValueList ,_cg );};switch _db ._afd {case BinOpTypePlus :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeNumberResult (_ga .ValueNumber +_cg .ValueNumber );};};case BinOpTypeMinus :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeNumberResult (_ga .ValueNumber -_cg .ValueNumber );};};case BinOpTypeMult :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeNumberResult (_ga .ValueNumber *_cg .ValueNumber );};};case BinOpTypeDiv :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {if _cg .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0064\u0069\u0076\u0069\u0064\u0065\u0020\u0062\u0079 \u007a\u0065\u0072\u006f");};return MakeNumberResult (_ga .ValueNumber /_cg .ValueNumber );};};case BinOpTypeExp :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeNumberResult (_bb .Pow (_ga .ValueNumber ,_cg .ValueNumber ));};};case BinOpTypeLT :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeBoolResult (_ga .ValueNumber < _cg .ValueNumber );};if _ga .Type ==ResultTypeString {return MakeBoolResult (_ga .ValueString < _cg .ValueString );};if _ga .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _ga .Type ==ResultTypeString &&_cg .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _ga .Type ==ResultTypeNumber &&_cg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _ga .Type ==ResultTypeEmpty &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if (_ga .Type ==ResultTypeNumber ||_ga .Type ==ResultTypeString )&&_cg .Type ==ResultTypeEmpty {return MakeBoolResult (false );};case BinOpTypeGT :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeBoolResult (_ga .ValueNumber > _cg .ValueNumber );};if _ga .Type ==ResultTypeString {return MakeBoolResult (_ga .ValueString > _cg .ValueString );};if _ga .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if _ga .Type ==ResultTypeString &&_cg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _ga .Type ==ResultTypeNumber &&_cg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _ga .Type ==ResultTypeEmpty &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return MakeBoolResult (false );}else if (_ga .Type ==ResultTypeNumber ||_ga .Type ==ResultTypeString )&&_cg .Type ==ResultTypeEmpty {return MakeBoolResult (true );};case BinOpTypeEQ :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeBoolResult (_ga .ValueNumber ==_cg .ValueNumber );};if _ga .Type ==ResultTypeString {return MakeBoolResult (_ga .ValueString ==_cg .ValueString );};if _ga .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if (_ga .Type ==ResultTypeString &&_cg .Type ==ResultTypeNumber )||(_ga .Type ==ResultTypeNumber &&_cg .Type ==ResultTypeString ){return MakeBoolResult (false );}else if _ga .Type ==ResultTypeEmpty &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return MakeBoolResult (_cc (_cg ));}else if (_ga .Type ==ResultTypeNumber ||_ga .Type ==ResultTypeString )&&_cg .Type ==ResultTypeEmpty {return MakeBoolResult (_cc (_ga ));};case BinOpTypeNE :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeBoolResult (_ga .ValueNumber !=_cg .ValueNumber );};if _ga .Type ==ResultTypeString {return MakeBoolResult (_ga .ValueString !=_cg .ValueString );};if _ga .Type ==ResultTypeEmpty {return MakeBoolResult (false );};}else if (_ga .Type ==ResultTypeString &&_cg .Type ==ResultTypeNumber )||(_ga .Type ==ResultTypeNumber &&_cg .Type ==ResultTypeString ){return MakeBoolResult (true );}else if _ga .Type ==ResultTypeEmpty &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return MakeBoolResult (!_cc (_cg ));}else if (_ga .Type ==ResultTypeNumber ||_ga .Type ==ResultTypeString )&&_cg .Type ==ResultTypeEmpty {return MakeBoolResult (!_cc (_ga ));};case BinOpTypeLEQ :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeBoolResult (_ga .ValueNumber <=_cg .ValueNumber );};if _ga .Type ==ResultTypeString {return MakeBoolResult (_ga .ValueString <=_cg .ValueString );};if _ga .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _ga .Type ==ResultTypeString &&_cg .Type ==ResultTypeNumber {return MakeBoolResult (false );}else if _ga .Type ==ResultTypeNumber &&_cg .Type ==ResultTypeString {return MakeBoolResult (true );}else if _ga .Type ==ResultTypeEmpty &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return MakeBoolResult (_cc (_cg ));}else if (_ga .Type ==ResultTypeNumber ||_ga .Type ==ResultTypeString )&&_cg .Type ==ResultTypeEmpty {return MakeBoolResult (_cc (_ga ));};case BinOpTypeGEQ :if _ga .Type ==_cg .Type {if _ga .Type ==ResultTypeNumber {return MakeBoolResult (_ga .ValueNumber >=_cg .ValueNumber );};if _ga .Type ==ResultTypeString {return MakeBoolResult (_ga .ValueString >=_cg .ValueString );};if _ga .Type ==ResultTypeEmpty {return MakeBoolResult (true );};}else if _ga .Type ==ResultTypeString &&_cg .Type ==ResultTypeNumber {return MakeBoolResult (true );}else if _ga .Type ==ResultTypeNumber &&_cg .Type ==ResultTypeString {return MakeBoolResult (false );}else if _ga .Type ==ResultTypeEmpty &&(_cg .Type ==ResultTypeNumber ||_cg .Type ==ResultTypeString ){return MakeBoolResult (_cc (_cg ));}else if (_ga .Type ==ResultTypeNumber ||_ga .Type ==ResultTypeString )&&_cg .Type ==ResultTypeEmpty {return MakeBoolResult (_cc (_ga ));};case BinOpTypeConcat :return MakeStringResult (_ga .Value ()+_cg .Value ());};return MakeErrorResult ("u\u006e\u0073\u0075\u0070po\u0072t\u0065\u0064\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006f\u0070");};func (_ffda *ivr )SetOffset (col ,row uint32 ){};type plex struct{_afdcg chan *node ;_eabc Expression ;_ffged string ;};func _abafd (_ggaa []Result ,_ceec bool ,_bgffde string )Result {var _dbea ,_aefa string ;if _ceec {_dbea ="\u0074\u0068\u0072e\u0065";_aefa ="\u006f\u0064\u0064";}else {_dbea ="\u0074\u0077\u006f";_aefa ="\u0065\u0076\u0065\u006e";};_cfdd :=len (_ggaa );if (_ceec &&_cfdd < 3)||(!_ceec &&_cfdd < 2){return MakeErrorResult (_bgffde +"\u0020\u0072\u0065\u0071ui\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020"+_dbea +" \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};if (_cfdd /2*2==_cfdd )==_ceec {return MakeErrorResult (_bgffde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_aefa +" \u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020a\u0072\u0067\u0075\u006den\u0074\u0073");};_fgeaa :=-1;_bafa :=-1;for _gbcea :=0;_gbcea < _cfdd ;_gbcea +=2{_fbcd :=_ggaa [_gbcea ];if _fbcd .Type !=ResultTypeArray &&_fbcd .Type !=ResultTypeList {return MakeErrorResult (_bgffde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u006e\u0067\u0065\u0073\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u006c\u0069\u0073\u0074\u0020o\u0072\u0020a\u0072\u0072\u0061\u0079");};_deefa :=_gbaa (_fbcd );if _bafa ==-1{_bafa =len (_deefa );_fgeaa =len (_deefa [0]);}else if len (_deefa )!=_bafa ||len (_deefa [0])!=_fgeaa {return MakeErrorResult (_bgffde +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061l\u006c\u0020\u0072\u0061n\u0067\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0065\u0020\u0073\u0061\u006d\u0065\u0020\u0073\u0069\u007a\u0065");};if _ceec &&_gbcea ==0{_gbcea --;};};return _dbc ;};type durationArgs struct{_eaag float64 ;_ecc float64 ;_gfgfg float64 ;_cgffd float64 ;_cdcd float64 ;_ddfa int ;};const _adgdd =57375;func _bab (_babe ,_eed _fe .Time )bool {_gfbg :=_babe .Unix ();_aff :=_eed .Unix ();_gdea :=_babe .Year ();_acda :=_gcff (_gdea ,_fe .March ,1);if _aeef (_gdea )&&_gfbg < _acda &&_aff >=_acda {return true ;};var _ddf =_eed .Year ();var _aggc =_gcff (_ddf ,_fe .March ,1);return (_aeef (_ddf )&&_aff >=_aggc &&_gfbg < _aggc );};func _edbfb (_edaad []Result ,_ccaf countMode )float64 {_ecgf :=0.0;for _ ,_gdfc :=range _edaad {switch _gdfc .Type {case ResultTypeNumber :if _ccaf ==_bdcea ||(_ccaf ==_dcac &&!_gdfc .IsBoolean ){_ecgf ++;};case ResultTypeList ,ResultTypeArray :_ecgf +=_edbfb (_gdfc .ListValues (),_ccaf );case ResultTypeString :if _ccaf ==_bdcea {_ecgf ++;};case ResultTypeEmpty :if _ccaf ==_fbga {_ecgf ++;};};};return _ecgf ;};

// Arabic implements the Excel ARABIC function which parses roman numerals.  It
// accepts one numeric argument.
func Arabic (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0041\u0052\u0041\u0042I\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gdeb :=args [0];switch _gdeb .Type {case ResultTypeNumber ,ResultTypeList ,ResultTypeEmpty :return MakeErrorResult ("\u0041\u0052\u0041B\u0049\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");case ResultTypeString :_cdcdc :=0.0;_fagbe :=0.0;for _ ,_bcbc :=range _gdeb .ValueString {_geead :=0.0;switch _bcbc {case 'I':_geead =1;case 'V':_geead =5;case 'X':_geead =10;case 'L':_geead =50;case 'C':_geead =100;case 'D':_geead =500;case 'M':_geead =1000;};_cdcdc +=_geead ;switch {case _fagbe ==_geead &&(_fagbe ==5||_fagbe ==50||_fagbe ==500):return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");case 2*_fagbe ==_geead :return MakeErrorResult ("i\u006e\u0076\u0061\u006cid\u0020A\u0052\u0041\u0042\u0049\u0043 \u0066\u006f\u0072\u006d\u0061\u0074");};if _fagbe < _geead {_cdcdc -=2*_fagbe ;};_fagbe =_geead ;};return MakeNumberResult (_cdcdc );case ResultTypeError :return _gdeb ;default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068an\u0064\u006c\u0065\u0064\u0020\u0041\u0043\u004f\u0053H\u0028)\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_gdeb .Type ));};};func Sign (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0053\u0049\u0047\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eaec :=args [0].AsNumber ();if _eaec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0049\u0047N(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020a\u0020n\u0075m\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if _eaec .ValueNumber < 0{return MakeNumberResult (-1);}else if _eaec .ValueNumber > 0{return MakeNumberResult (1);};return MakeNumberResult (0);};

// Roman is an implementation of the Excel ROMAN function that convers numbers
// to roman numerals in one of 5 formats.
func Roman (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_eceac :=args [0].AsNumber ();if _eceac .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_faca :=0;if len (args )> 1{_debcb :=args [1];if _debcb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u004fM\u0041\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_faca =int (_debcb .ValueNumber );if _faca < 0{_faca =0;}else if _faca > 4{_faca =4;};};_dged :=_acge ;switch _faca {case 1:_dged =_afcg ;case 2:_dged =_cag ;case 3:_dged =_cbdc ;case 4:_dged =_agdc ;};_dacgc :=_bb .Trunc (_eceac .ValueNumber );_gaaea :=_fac .Buffer {};for _ ,_cggaf :=range _dged {for _dacgc >=_cggaf ._dcge {_gaaea .WriteString (_cggaf ._ggdfd );_dacgc -=_cggaf ._dcge ;};};return MakeStringResult (_gaaea .String ());};func _bbdbg ()yyParser {return &yyParserImpl {}};

// CeilingMath implements _xlfn.CEILING.MATH which rounds numbers to the nearest
// multiple of the second argument, toward or away from zero as specified by the
// third argument.
func CeilingMath (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073 \u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006ee\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if len (args )> 3{return MakeErrorResult ("\u0043E\u0049\u004cI\u004e\u0047\u002eM\u0041\u0054\u0048\u0028\u0029\u0020\u0061l\u006c\u006f\u0077\u0073\u0020\u0061t\u0020\u006d\u006f\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_dgcc :=args [0].AsNumber ();if _dgcc .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_edfc :=float64 (1);if _dgcc .ValueNumber < 0{_edfc =-1;};if len (args )> 1{_egeae :=args [1].AsNumber ();if _egeae .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0043\u0045\u0049\u004c\u0049\u004e\u0047.\u004d\u0041\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074 \u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_edfc =_egeae .ValueNumber ;};_fgdd :=float64 (1);if len (args )> 2{_eggg :=args [2].AsNumber ();if _eggg .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0043\u0045\u0049\u004c\u0049\u004e\u0047\u002e\u004dA\u0054\u0048\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061 \u006eu\u006d\u0062\u0065\u0072");};_fgdd =_eggg .ValueNumber ;};if len (args )==1{return MakeNumberResult (_bb .Ceil (_dgcc .ValueNumber ));};_aade :=_dgcc .ValueNumber ;_aade ,_efcg :=_bb .Modf (_aade /_edfc );if _efcg !=0{if _dgcc .ValueNumber > 0{_aade ++;}else if _fgdd < 0{_aade --;};};return MakeNumberResult (_aade *_edfc );};func _ebaf (_fcgag Context ,_cbcbf ,_gaegd string )(string ,string ){_adfgc :=_cbcbf +"\u0031";_cdcee :=_fcgag .LastRow (_cbcbf );_ddcac :=_gaegd +_ea .Itoa (_cdcee );return _adfgc ,_ddcac ;};const _ccaa =57377;

// Update updates the FunctionCall references after removing a row/column.
func (_gegeb FunctionCall )Update (q *_eg .UpdateQuery )Expression {_fcbf :=[]Expression {};for _ ,_afcgg :=range _gegeb ._dbgg {_fbgg :=_afcgg .Update (q );_fcbf =append (_fcbf ,_fbgg );};return FunctionCall {_dbbbg :_gegeb ._dbbbg ,_dbgg :_fcbf };};func (_ggcba node )String ()string {return _d .Sprintf ("\u007b%\u0073\u0020\u0025\u0073\u007d",_ggcba ._eddba ,_cbfc (string (_ggcba ._bcbd )));};type noCache struct{};var _ddgd =map[string ]FunctionComplex {};

// Eval evaluates and returns the result of a formula.
func (_cacg *defEval )Eval (ctx Context ,formula string )Result {_gfc :=ParseString (formula );_bda :=make (chan Result );go func (){if _gfc ==nil {_bda <-MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0061\u0062\u006c\u0065\u0020\u0074\u006f\u0020\u0070a\u0072\u0073\u0065\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0025\u0073",formula ));}else {_cacg .checkLastEvalIsRef (ctx ,_gfc );_bda <-_gfc .Eval (ctx ,_cacg );};}();select{case _ebac :=<-_bda :return _ebac ;case <-_fe .After (_dab ):_bdg .Log .Debug ("\u0055\u006e\u0069\u004ff\u0066\u0069\u0063\u0065\u0020\u0065\u0076\u0061\u006c\u0075a\u0074i\u006f\u006e\u0020\u0074\u0069\u006d\u0065o\u0075\u0074");return MakeNumberResult (0);};};type parsedReplaceObject struct{_cbdg string ;_cbdb int ;_ffeg int ;_baac string ;};

// String returns a string representation for Bool.
func (_faf Bool )String ()string {if _faf ._ac {return "\u0054\u0052\u0055\u0045";}else {return "\u0046\u0041\u004cS\u0045";};};const (_ byte =iota ;_fffd ;_fdfad ;_dcdd ;_gdad ;_caed ;);

// Eval evaluates and returns a boolean.
func (_gdd Bool )Eval (ctx Context ,ev Evaluator )Result {return MakeBoolResult (_gdd ._ac )};

// ErrorType is a formula evaluation error type.
type ErrorType byte ;

// Rate implements the Excel RATE function.
func Rate (args []Result )Result {_bagc :=len (args );if _bagc < 3||_bagc > 6{return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0074\u0068\u0072\u0065\u0065 \u0061\u006e\u0064\u0020\u0073i\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccgce :=args [0].ValueNumber ;if _ccgce !=float64 (int (_ccgce )){return MakeErrorResultType (ErrorTypeNum ,"R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072i\u006fd\u0073\u0020\u0074\u006f \u0062\u0065 \u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bed :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_eaaff :=args [2].ValueNumber ;_agfdc :=0.0;if _bagc >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_agfdc =args [3].ValueNumber ;};_fffa :=0.0;if _bagc >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_fffa =args [4].ValueNumber ;if _fffa !=0{_fffa =1;};};_fbc :=0.1;if _bagc >=6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0041\u0054\u0045\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbc =args [5].ValueNumber ;};_aacfd :=100;_fcfaf :=0;_cfec :=false ;_gcce :=1e-6;_befe :=_fbc ;for _fcfaf < _aacfd &&!_cfec {_ggcb :=_bb .Pow (_befe +1,_ccgce );_dgfb :=_bb .Pow (_befe +1,_ccgce -1);_bdbb :=_befe *_fffa +1;_bgfa :=_bed *(_ggcb -1);_bdca :=_agfdc +_ggcb *_eaaff +_bgfa *_bdbb /_befe ;_dbeee :=_ccgce *_dgfb *_eaaff -_bgfa *_bdbb /_bb .Pow (_befe ,2);_fgcd :=(_ccgce *_bed *_dgfb *_bdbb +_bgfa *_fffa )/_befe ;_ebab :=_bdca /(_dbeee +_fgcd );if _bb .Abs (_ebab )< _gcce {_cfec =true ;};_fcfaf ++;_befe -=_ebab ;};return MakeNumberResult (_befe );};func _fbagf (_eeab int )string {if _eeab >=0&&_eeab < len (_afcbdg ){if _afcbdg [_eeab ]!=""{return _afcbdg [_eeab ];};};return _d .Sprintf ("\u0073\u0074\u0061\u0074\u0065\u002d\u0025\u0076",_eeab );};

// Tbillprice implements the Excel TBILLPRICE function.
func Tbillprice (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0050\u0052I\u0043\u0045\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_ecda ,_bege ,_dfcg :=_cfaa (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045");if _dfcg .Type ==ResultTypeError {return _dfcg ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gdaeg :=_bege -_ecda ;if _gdaeg > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cP\u0052\u0049\u0043\u0045\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_gfbf :=args [2].ValueNumber ;if _gfbf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0050\u0052\u0049\u0043\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020d\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (100*(1-_gfbf *_gdaeg /360));};

// Indirect is an implementation of the Excel INDIRECT function that returns the
// contents of a cell.
func Indirect (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_fccd :=args [0].AsString ();if _fccd .Type !=ResultTypeString {return MakeErrorResult ("\u0049\u004e\u0044\u0049\u0052\u0045\u0043\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069r\u0073t\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};return ctx .Cell (_fccd .ValueString ,ev );};func _cgeac (_acbeb ,_dcfge float64 )float64 {_acbeb =_bb .Trunc (_acbeb );_dcfge =_bb .Trunc (_dcfge );if _acbeb ==0&&_dcfge ==0{return 0;};return _acbeb *_dcfge /_abccc (_acbeb ,_dcfge );};func (_agfbd *yyParserImpl )Lookahead ()int {return _agfbd ._dddab };const _gebg =57378;func init (){_gffd ();RegisterFunction ("\u0041V\u0045\u0052\u0041\u0047\u0045",Average );RegisterFunction ("\u0041\u0056\u0045\u0052\u0041\u0047\u0045\u0041",Averagea );RegisterFunction ("\u0043\u004f\u0055N\u0054",Count );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0041",Counta );RegisterFunction ("\u0043O\u0055\u004e\u0054\u0049\u0046",CountIf );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053",CountIfs );RegisterFunction ("\u0043\u004f\u0055\u004e\u0054\u0042\u004c\u0041\u004e\u004b",CountBlank );RegisterFunction ("\u004d\u0041\u0058",Max );RegisterFunction ("\u004d\u0041\u0058\u0041",MaxA );RegisterFunction ("\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0041\u0058\u0049\u0046\u0053",MaxIfs );RegisterFunction ("\u004d\u0045\u0044\u0049\u0041\u004e",Median );RegisterFunction ("\u004d\u0049\u004e",Min );RegisterFunction ("\u004d\u0049\u004e\u0041",MinA );RegisterFunction ("\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u004d\u0049\u004e\u0049\u0046\u0053",MinIfs );};func Trunc (args []Result )Result {if len (args )==0{return MakeErrorResult ("T\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0061t \u006c\u0065\u0061\u0073t\u0020\u006f\u006e\u0065\u0020\u006e\u0075\u006d\u0065ri\u0063\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_afafb :=args [0].AsNumber ();if _afafb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eece :=float64 (0);if len (args )> 1{_dcfd :=args [1].AsNumber ();if _dcfd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0054\u0052\u0055\u004e\u0043\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eece =_dcfd .ValueNumber ;};_dbfeb :=_afafb .ValueNumber ;_ecfd :=1.0;if _eece >=0{_ecfd =_bb .Pow (1/10.0,_eece );}else {return MakeNumberResult (0);};_dbfeb ,_cffbf :=_bb .Modf (_dbfeb /_ecfd );_agba :=0.99999;if _cffbf > _agba {_dbfeb ++;}else if _cffbf < -_agba {_dbfeb --;};_ =_cffbf ;return MakeNumberResult (_dbfeb *_ecfd );};const _acafc =57350;

// Eomonth is an implementation of the Excel EOMONTH() function.
func Eomonth (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u004f\u004d\u004f\u004e\u0054\u0048\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_dbfd :=args [1].ValueNumber ;_gbeb :=args [0];var _gad float64 ;switch _gbeb .Type {case ResultTypeEmpty :_gad =0;case ResultTypeNumber :_gad =_gbeb .ValueNumber ;case ResultTypeString :_eef :=DateValue ([]Result {args [0]});if _eef .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_gad =_eef .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};_eaf :=_adg (_gad );_efd :=_eaf .AddDate (0,int (_dbfd +1),0);_dde ,_ffa ,_ :=_efd .Date ();_gccf :=_aaa (_dde ,int (_ffa ),0);if _gccf < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0045\u004f\u004d\u004f\u004e\u0054\u0048");};if _dde ==1900&&_ffa ==3{_gccf --;};return MakeNumberResult (_gccf );};func (_cgfg Result )String ()string {return _cgfg .Value ()};

// GetEpoch returns a null time object for the invalid reference context.
func (_fggcc *ivr )GetEpoch ()_fe .Time {return _fe .Time {}};func _dgbba (_dbae Result )bool {_ecfb :=_dbae .Type ;return _ecfb !=ResultTypeArray &&_ecfb !=ResultTypeList ;};const _gbfd =57365;

// NewRange constructs a new range.
func NewRange (from ,to Expression )Expression {_gdfgf ,_cfda ,_aabbcc :=_abcgg (from ,to );if _aabbcc !=nil {_bdg .Log .Debug (_aabbcc .Error ());return NewError (_aabbcc .Error ());};return Range {_gbda :_gdfgf ,_ebcfd :_cfda };};const _gafba =57363;var _cfbdde =[...]int {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36};

// LastRow returns 0 for the invalid reference context.
func (_bfdga *ivr )LastRow (colFrom string )int {return 0};func _aeef (_fba int )bool {if _fba ==_fba /400*400{return true ;};if _fba ==_fba /100*100{return false ;};return _fba ==_fba /4*4;};func _eaee (_efcc []Result ,_fgab string )(float64 ,float64 ,Result ){if len (_efcc )!=2{return 0,0,MakeErrorResult (_fgab +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _efcc [0].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fgab +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0061\u006c\u0020\u0064\u006f\u006c\u006c\u0061\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fbfa :=_efcc [0].ValueNumber ;if _efcc [1].Type !=ResultTypeNumber {return 0,0,MakeErrorResult (_fgab +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_cfcd :=float64 (int (_efcc [1].ValueNumber ));if _cfcd < 0{return 0,0,MakeErrorResultType (ErrorTypeNum ,_fgab +"\u0020r\u0065\u0071u\u0069\u0072\u0065\u0073 \u0066\u0072\u0061c\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062e \u006e\u006f\u006e \u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020n\u0075\u006db\u0065\u0072");};return _fbfa ,_cfcd ,_dbc ;};func _beff (_abae []Result ,_eaad string )(*durationArgs ,Result ){_gagg :=len (_abae );if _gagg !=5&&_gagg !=6{return nil ,MakeErrorResult (_eaad +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0066\u0069\u0076\u0065\u0020\u006fr\u0020\u0073\u0069\u0078\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cece ,_gegg ,_fdbe :=_cfaa (_abae [0],_abae [1],_eaad );if _fdbe .Type ==ResultTypeError {return nil ,_fdbe ;};_dbbf :=_abae [2];if _dbbf .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaad +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fupo\u006e r\u0061\u0074\u0065\u0020\u006f\u0066\u0020ty\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_fecc :=_dbbf .ValueNumber ;if _fecc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0043\u006f\u0075po\u006e\u0020\u0072\u0061\u0074\u0065\u0020\u0073\u0068o\u0075l\u0064 \u006eo\u0074\u0020\u0062\u0065\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_cedeb :=_abae [3];if _cedeb .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaad +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0079\u0069\u0065\u006cd\u0020\u0072\u0061\u0074\u0065\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062e\u0072");};_afc :=_cedeb .ValueNumber ;if _afc < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0059\u0069\u0065\u006c\u0064\u0020r\u0061\u0074\u0065\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u006ft\u0020\u0062\u0065\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_dacg :=_abae [4];if _dacg .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaad +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0066\u0072\u0065\u0071u\u0065n\u0063y\u0020o\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ffcg :=float64 (int (_dacg .ValueNumber ));if !_fcga (_ffcg ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049n\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0066\u0072e\u0071u\u0065n\u0063\u0065\u0020\u0076\u0061\u006c\u0075e");};_eccd :=0;if _gagg ==6&&_abae [5].Type !=ResultTypeEmpty {_affe :=_abae [5];if _affe .Type !=ResultTypeNumber {return nil ,MakeErrorResult (_eaad +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u006f\u0066 \u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eccd =int (_affe .ValueNumber );if !_adfb (_eccd ){return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062a\u0073\u0069\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006f\u0072\u0020"+_eaad );};};return &durationArgs {_cece ,_gegg ,_fecc ,_afc ,_ffcg ,_eccd },_dbc ;};

// Coupncd implements the Excel COUPNCD function.
func Coupncd (args []Result )Result {_ddg ,_fdc :=_daef (args ,"\u0043O\u0055\u0050\u004e\u0043\u0044");if _fdc .Type ==ResultTypeError {return _fdc ;};_dacd :=_adg (_ddg ._cdfd );_agee :=_adg (_ddg ._cfea );_fbgc :=_ddg ._cca ;_fbbdf :=_ggbb (_dacd ,_agee ,_fbgc );_daeb ,_gbcg ,_fdfg :=_fbbdf .Date ();return MakeNumberResult (_aaa (_daeb ,int (_gbcg ),_fdfg ));};

// GetLocked returns FALSE for the invalid reference context.
func (_egdbd *ivr )GetLocked (cellRef string )bool {return false };

// Ppmt implements the Excel PPPMT function.
func Ppmt (args []Result )Result {_bdf :=len (args );if _bdf < 4||_bdf > 6{return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006ff\u0020\u0066\u006f\u0075\u0072\u0020a\u006e\u0064\u0020s\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_efdcb :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ecfe :=args [1].ValueNumber ;if _ecfe <=0{return MakeErrorResultType (ErrorTypeNum ,"P\u0050\u004d\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020p\u0065\u0072\u0069\u006f\u0064\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069v\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fgce :=args [2].ValueNumber ;if _fgce < _ecfe {return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u0074\u0020\u006c\u0065s\u0073\u0020\u0074\u0068\u0061\u006e \u0070\u0065\u0072i\u006f\u0064");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_dafg :=args [3].ValueNumber ;_gfbgd :=0.0;if _bdf >=5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_gfbgd =args [4].ValueNumber ;};_bgfcc :=0;if _bdf ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("P\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_bgfcc =int (args [5].ValueNumber );if _bgfcc !=0{_bgfcc =1;};};return MakeNumberResult (_fdcb (_efdcb ,_fgce ,_dafg ,_gfbgd ,_bgfcc )-_abdc (_efdcb ,_ecfe ,_fgce ,_dafg ,_gfbgd ,_bgfcc ));};func _gbae (_cbccc []Result )[]float64 {_bggg :=make ([]float64 ,0);for _ ,_ebfbc :=range _cbccc {if _ebfbc .Type ==ResultTypeEmpty {continue ;};_ebfbc =_ebfbc .AsNumber ();switch _ebfbc .Type {case ResultTypeNumber :if !_ebfbc .IsBoolean {_bggg =append (_bggg ,_ebfbc .ValueNumber );};case ResultTypeList ,ResultTypeArray :_bggg =append (_bggg ,_gbae (_ebfbc .ListValues ())...);case ResultTypeString :default:_bdg .Log .Debug ("\u0075\u006e\u0068\u0061\u006ed\u006c\u0065\u0064\u0020\u0065\u0078\u0074\u0072\u0061\u0063\u0074\u004e\u0075m\u0062\u0065\u0072\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ebfbc .Type );};};return _bggg ;};

// Reference returns an invalid reference for Error.
func (_cdf Error )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func (_gacc Result )AsString ()Result {switch _gacc .Type {case ResultTypeNumber :return MakeStringResult (_gacc .Value ());default:return _gacc ;};};

// MakeListResult constructs a list result.
func MakeListResult (list []Result )Result {return Result {Type :ResultTypeList ,ValueList :list }};func _cacb (_dgdd float64 )float64 {_dgcb :=float64 (1);for _fafbg :=float64 (2);_fafbg <=_dgdd ;_fafbg ++{_dgcb *=_fafbg ;};return _dgcb ;};func _aaa (_egg ,_ddca ,_acc int )float64 {return float64 (_gcff (_egg ,_fe .Month (_ddca ),_acc )/86400)+_bbc ;};const _gbfcb =16;

// MinIfs implements the MINIFS function.
func MinIfs (args []Result )Result {_adfd :=_abafd (args ,true ,"\u004d\u0049\u004e\u0049\u0046\u0053");if _adfd .Type !=ResultTypeEmpty {return _adfd ;};_cdgc :=_cfdg (args [1:]);_aeeeea :=_bb .MaxFloat64 ;_edcf :=_gbaa (args [0]);for _ ,_efcga :=range _cdgc {_dffe :=_edcf [_efcga ._ggcaa ][_efcga ._aeeee ].ValueNumber ;if _aeeeea > _dffe {_aeeeea =_dffe ;};};if _aeeeea ==_bb .MaxFloat64 {_aeeeea =0;};return MakeNumberResult (float64 (_aeeeea ));};func (_beecc *noCache )GetFromCache (key string )(Result ,bool ){return _dbc ,false };

// Year is an implementation of the Excel YEAR() function.
func Year (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0059\u0045\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ggb :=ctx .GetEpoch ();_cae ,_eeee :=_dcfc (args [0].Value (),_ggb );if _eeee !=nil {return MakeErrorResult ("\u0059\u0045AR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s a\u0020si\u006e\u0067\u006c\u0065\u0020\u0064\u0061te\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeNumberResult (float64 (_cae .Year ()));};

// NamedRangeRef is a reference to a named range.
type NamedRangeRef struct{_gdbf string };func (_cabba ResultType )String ()string {if _cabba >=ResultType (len (_dbgac )-1){return _d .Sprintf ("\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070e\u0028\u0025\u0064\u0029",_cabba );};return _gcedg [_dbgac [_cabba ]:_dbgac [_cabba +1]];};

// String returns a string representation of a vertical range.
func (_bdage VerticalRange )String ()string {return _bdage .verticalRangeReference ()};

// BinOpType is the binary operation operator type
//go:generate stringer -type=BinOpType
type BinOpType byte ;

// NA is an implementation of the Excel NA() function that just returns the #N/A! error.
func NA (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u004eA\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeErrorResultType (ErrorTypeNA ,"");};

// MakeStringResult constructs a string result.
func MakeStringResult (s string )Result {return Result {Type :ResultTypeString ,ValueString :s }};

// Coupnum implements the Excel COUPNUM function.
func Coupnum (args []Result )Result {_fdd ,_gdec :=_daef (args ,"\u0043O\u0055\u0050\u004e\u0055\u004d");if _gdec .Type ==ResultTypeError {return _gdec ;};_dafe :=_fdd ._cca ;_bcga :=_fdd ._edab ;_dcd ,_gdec :=_aeeb (_fdd ._cdfd ,_fdd ._cfea ,_dafe ,_bcga );if _gdec .Type ==ResultTypeError {return _gdec ;};return MakeNumberResult (_dcd );};func (_gbag HorizontalRange )horizontalRangeReference ()string {return _d .Sprintf ("\u0025\u0064\u003a%\u0064",_gbag ._cfagc ,_gbag ._eeeb );};func init (){RegisterFunction ("\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u0043\u004c\u0045A\u004e",Clean );RegisterFunction ("\u0043\u004f\u0044\u0045",Code );RegisterFunction ("C\u004f\u004e\u0043\u0041\u0054\u0045\u004e\u0041\u0054\u0045",Concat );RegisterFunction ("\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u005f\u0078\u006cf\u006e\u002e\u0043\u004f\u004e\u0043\u0041\u0054",Concat );RegisterFunction ("\u0045\u0058\u0041C\u0054",Exact );RegisterFunction ("\u0046\u0049\u004e\u0044",Find );RegisterFunctionComplex ("\u0046\u0049\u004eD\u0042",Findb );RegisterFunction ("\u004c\u0045\u0046\u0054",Left );RegisterFunction ("\u004c\u0045\u0046T\u0042",Left );RegisterFunction ("\u004c\u0045\u004e",Len );RegisterFunction ("\u004c\u0045\u004e\u0042",Len );RegisterFunction ("\u004c\u004f\u0057E\u0052",Lower );RegisterFunction ("\u004d\u0049\u0044",Mid );RegisterFunction ("\u0050\u0052\u004f\u0050\u0045\u0052",Proper );RegisterFunction ("\u0052E\u0050\u004c\u0041\u0043\u0045",Replace );RegisterFunction ("\u0052\u0045\u0050\u0054",Rept );RegisterFunction ("\u0052\u0049\u0047H\u0054",Right );RegisterFunction ("\u0052\u0049\u0047\u0048\u0054\u0042",Right );RegisterFunction ("\u0053\u0045\u0041\u0052\u0043\u0048",Search );RegisterFunctionComplex ("\u0053E\u0041\u0052\u0043\u0048\u0042",Searchb );RegisterFunction ("\u0053\u0055\u0042\u0053\u0054\u0049\u0054\u0055\u0054\u0045",Substitute );RegisterFunction ("\u0054",T );RegisterFunction ("\u0054\u0045\u0058\u0054",Text );RegisterFunction ("\u0054\u0045\u0058\u0054\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0054\u0045\u0058T\u004a\u004f\u0049\u004e",TextJoin );RegisterFunction ("\u0054\u0052\u0049\u004d",Trim );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u0048\u0041\u0052",Char );RegisterFunction ("\u005f\u0078\u006c\u0066\u006e\u002e\u0055\u004e\u0049\u0043\u004f\u0044\u0045",Unicode );RegisterFunction ("\u0055\u0050\u0050E\u0052",Upper );RegisterFunction ("\u0056\u0041\u004cU\u0045",Value );};

// Eval evaluates a vertical range returning a list of results or an error.
func (_gdef VerticalRange )Eval (ctx Context ,ev Evaluator )Result {_dcaa :=_gdef .verticalRangeReference ();if _dbedb ,_ecae :=ev .GetFromCache (_dcaa );_ecae {return _dbedb ;};_fcda ,_dgcg :=_ebaf (ctx ,_gdef ._adacd ,_gdef ._badff );_acgdf :=_aadf (ctx ,ev ,_fcda ,_dgcg );ev .SetCache (_dcaa ,_acgdf );return _acgdf ;};var _dbc Result =MakeEmptyResult ();

// False is an implementation of the Excel FALSE() function. It takes no
// arguments.
func False (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0046A\u004c\u0053\u0045\u0020\u0074\u0061\u006b\u0065\u0073\u0020\u006eo\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (false );};var _gada =[...]int {-1,1,1,-1,-2,0};const _cgd ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0044\u0041\u0054\u0045\u0056\u0041\u004c\u0055\u0045";

// NewPrefixExpr constructs an expression with prefix.
func NewPrefixExpr (pfx ,exp Expression )Expression {return &PrefixExpr {_aedc :pfx ,_fgfac :exp }};func (_adff *Lexer )emit (_adbf tokenType ,_gebc []byte ){if _acec {_d .Println ("\u0065\u006d\u0069\u0074",_adbf ,_cbfc (string (_gebc )));};_adff ._ddbbc <-&node {_adbf ,string (_gebc )};};

// Eval evaluates the binary expression using the context given.
func (_gb BinaryExpr )String ()string {_bf :="";switch _gb ._afd {case BinOpTypePlus :_bf ="\u002b";case BinOpTypeMinus :_bf ="\u002d";case BinOpTypeMult :_bf ="\u002a";case BinOpTypeDiv :_bf ="\u002f";case BinOpTypeExp :_bf ="\u005e";case BinOpTypeLT :_bf ="\u003c";case BinOpTypeGT :_bf ="\u003e";case BinOpTypeEQ :_bf ="\u003d";case BinOpTypeLEQ :_bf ="\u003c\u003d";case BinOpTypeGEQ :_bf ="\u003e\u003d";case BinOpTypeNE :_bf ="\u003c\u003e";case BinOpTypeConcat :_bf ="\u0026";};return _gb ._ed .String ()+_bf +_gb ._af .String ();};

// Eval evaluates and returns an expression with prefix.
func (_accbd PrefixExpr )Eval (ctx Context ,ev Evaluator )Result {_dgeag :=_accbd ._aedc .Reference (ctx ,ev );switch _dgeag .Type {case ReferenceTypeSheet :if _ccbdc (_dgeag ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_dgeag .Value ));};_becb :=ctx .Sheet (_dgeag .Value );return _accbd ._fgfac .Eval (_becb ,ev );default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_dgeag .Type ));};};var _gcc =[]*_eb .Regexp {};func _gdgb (_ggcd []Result ,_cbbd bool )Result {_adae :="\u004d\u0049\u004e";if _cbbd {_adae ="\u004d\u0049\u004e\u0041";};if len (_ggcd )==0{return MakeErrorResult (_adae +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ccfe :=_bb .MaxFloat64 ;for _ ,_ffac :=range _ggcd {switch _ffac .Type {case ResultTypeNumber :if (_cbbd ||!_ffac .IsBoolean )&&_ffac .ValueNumber < _ccfe {_ccfe =_ffac .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_acef :=_gdgb (_ffac .ListValues (),_cbbd );if _acef .ValueNumber < _ccfe {_ccfe =_acef .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_fggaf :=0.0;if _cbbd {_fggaf =_ffac .AsNumber ().ValueNumber ;};if _fggaf < _ccfe {_ccfe =_fggaf ;};default:_bdg .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_adae +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_ffac .Type );};};if _ccfe ==_bb .MaxFloat64 {_ccfe =0;};return MakeNumberResult (_ccfe );};

// Large implements the Excel LARGE function.
func Large (args []Result )Result {return _addea (args ,true )};

// Log implements the Excel LOG function which returns the log of a number. By
// default the result is base 10, however the second argument to the function
// can specify a different base.
func Log (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};if len (args )> 2{return MakeErrorResult ("L\u004f\u0047\u0028\u0029\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u006d\u0061\u0078i\u006d\u0075\u006d\u0020\u006f\u0066\u0020\u0074\u0077\u006f a\u0072\u0067\u0075m\u0065n\u0074\u0073");};_fdfga :=args [0].AsNumber ();if _fdfga .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 o\u006e\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_fcgcf :=10.0;if len (args )> 1{_cdca :=args [1].AsNumber ();if _cdca .Type !=ResultTypeNumber {return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061rg\u0075\u006d\u0065n\u0074\u0020t\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0065r\u0069\u0063");};_fcgcf =args [1].ValueNumber ;};if _fdfga .ValueNumber ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u006e\u006fn\u002d\u007ae\u0072\u006f");};if _fcgcf ==0{return MakeErrorResult ("\u004cO\u0047\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0073e\u0063\u006f\u006e\u0064\u0020\u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e\u0020\u006e\u006f\u006e\u002d\u007a\u0065\u0072\u006f");};return MakeNumberResult (_bb .Log (_fdfga .ValueNumber )/_bb .Log (_fcgcf ));};

// Update updates references in the PrefixRangeExpr after removing a row/column.
func (_gagdb PrefixRangeExpr )Update (q *_eg .UpdateQuery )Expression {_aeag :=_gagdb ;_eegfe :=_gagdb ._baga .String ();if _eegfe ==q .SheetToUpdate {_ffcce :=*q ;_ffcce .UpdateCurrentSheet =true ;_aeag ._dfggb =_gagdb ._dfggb .Update (&_ffcce );_aeag ._caga =_gagdb ._caga .Update (&_ffcce );};return _aeag ;};func _bgc (_dbg string ,_fgg *_eg .UpdateQuery )string {_cbeg ,_ggf :=_bd .ParseCellReference (_dbg );if _ggf !=nil {return "\u0023\u0052\u0045F\u0021";};if _fgg .UpdateType ==_eg .UpdateActionRemoveColumn {_add :=_fgg .ColumnIdx ;_edc :=_cbeg .ColumnIdx ;if _edc < _add {return _dbg ;}else if _edc ==_add {return "\u0023\u0052\u0045F\u0021";}else {return _cbeg .Update (_eg .UpdateActionRemoveColumn ).String ();};};return _dbg ;};

// Xor is an implementation of the Excel XOR() function and takes a variable
// number of arguments. It's odd to say the least.  If any argument is numeric,
// it returns true if the number of non-zero numeric arguments is odd and false
// otherwise.  If no argument is numeric, it returns an error.
func Xor (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0058\u004f\u0052 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061t\u0020l\u0065a\u0073t\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fadg :=0;_bage :=false ;for _ ,_dfffb :=range args {switch _dfffb .Type {case ResultTypeList ,ResultTypeArray :_abeg :=Xor (_dfffb .ListValues ());if _abeg .Type ==ResultTypeError {return _abeg ;};if _abeg .ValueNumber !=0{_fadg ++;};_bage =true ;case ResultTypeNumber :if _dfffb .ValueNumber !=0{_fadg ++;};_bage =true ;case ResultTypeString :case ResultTypeError :return _dfffb ;default:return MakeErrorResult ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0061\u0072\u0067u\u006de\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0058\u004f\u0052");};};if !_bage {return MakeErrorResult ("\u0058\u004f\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0069n\u0070\u0075\u0074");};return MakeBoolResult (_fadg %2!=0);};func _ffce (_cceab []Result ,_cdcea bool )Result {_acbebg :="\u004d\u0041\u0058";if _cdcea {_acbebg ="\u004d\u0041\u0058\u0041";};if len (_cceab )==0{return MakeErrorResult (_acbebg +"\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s\u0020\u0061\u0074\u0020\u006c\u0065\u0061s\u0074\u0020\u006f\u006e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceba :=-_bb .MaxFloat64 ;for _ ,_efeb :=range _cceab {switch _efeb .Type {case ResultTypeNumber :if (_cdcea ||!_efeb .IsBoolean )&&_efeb .ValueNumber > _ceba {_ceba =_efeb .ValueNumber ;};case ResultTypeList ,ResultTypeArray :_efbd :=_ffce (_efeb .ListValues (),_cdcea );if _efbd .ValueNumber > _ceba {_ceba =_efbd .ValueNumber ;};case ResultTypeEmpty :case ResultTypeString :_cagb :=0.0;if _cdcea {_cagb =_efeb .AsNumber ().ValueNumber ;};if _cagb > _ceba {_ceba =_cagb ;};default:_bdg .Log .Debug ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020"+_acbebg +"\u0028\u0029\u0020\u0061rg\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_efeb .Type );};};if _ceba ==-_bb .MaxFloat64 {_ceba =0;};return MakeNumberResult (_ceba );};

// SheetPrefixExpr is a reference to a sheet like Sheet1! (reference to sheet 'Sheet1').
type SheetPrefixExpr struct{_ccbcf string };

// RegisterFunctionComplex registers a standard function.
func RegisterFunctionComplex (name string ,fn FunctionComplex ){_ddbcg .Lock ();defer _ddbcg .Unlock ();if _ ,_dbgb :=_ddgd [name ];_dbgb {_bdg .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_ddgd [name ]=fn ;};

// Reference returns an invalid reference for FunctionCall.
func (_ffea FunctionCall )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Reference returns an invalid reference for Bool.
func (_da Bool )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Fv implements the Excel FV function.
func Fv (args []Result )Result {_ccec :=len (args );if _ccec < 3||_ccec > 5{return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_acg :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_acbeg :=args [1].ValueNumber ;if _acbeg !=float64 (int (_acbeg )){return MakeErrorResultType (ErrorTypeNum ,"\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cbcd :=args [2].ValueNumber ;_gedg :=0.0;if _ccec >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("F\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0070\u0072\u0065\u0073\u0065\u006et \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_gedg =args [3].ValueNumber ;};_dddb :=0;if _ccec ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dddb =int (args [4].ValueNumber );if _dddb !=0{_dddb =1;};};return MakeNumberResult (_ebdc (_acg ,_acbeg ,_cbcd ,_gedg ,_dddb ));};func (_cfbc PrefixHorizontalRange )horizontalRangeReference (_egbcb string )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_egbcb ,_cfbc ._gceg ,_cfbc ._gfdd );};

// Xnpv implements the Excel XNPV function.
func Xnpv (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0058\u004eP\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("X\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_dfff :=args [0].ValueNumber ;if _dfff <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0058\u004e\u0050\u0056\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006f\u0073i\u0074\u0069\u0076\u0065");};_fcfg ,_aagd :=_cegd (args [1],args [2],"\u0058\u004e\u0050\u0056");if _aagd .Type ==ResultTypeError {return _aagd ;};_gecd :=_fcfg ._aeea ;_gcae :=_fcfg ._gccef ;_fdcf :=0.0;_fbag :=_gcae [0];for _bde ,_gefd :=range _gecd {_fdcf +=_gefd /_bb .Pow (1+_dfff ,(_gcae [_bde ]-_fbag )/365);};return MakeNumberResult (_fdcf );};

// If is an implementation of the Excel IF() function. It takes one, two or
// three arguments.
func If (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0049\u0046\u0020re\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006ce\u0061s\u0074 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0049\u0046\u0020ac\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0074\u0020m\u006fs\u0074 \u0074h\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_beecd :=args [0];switch _beecd .Type {case ResultTypeError :return _beecd ;case ResultTypeNumber :if len (args )==1{return MakeBoolResult (_beecd .ValueNumber !=0);};if _beecd .ValueNumber !=0{return args [1];};if len (args )==3{return args [2];}else {return MakeBoolResult (false );};case ResultTypeList :return _abdgg (args );case ResultTypeArray :return _efgg (args );default:return MakeErrorResult ("\u0049F\u0020\u0069n\u0069\u0074\u0069\u0061l\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006d\u0075\u0073t \u0062\u0065\u0020n\u0075\u006de\u0072\u0069\u0063\u0020\u006f\u0072 \u0061\u0072r\u0061\u0079");};};

// HLookup implements the HLOOKUP function that returns a matching value from a
// row in an array.
func HLookup (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if len (args )> 4{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bdab :=args [0];_ceae :=args [1];if _ceae .Type !=ResultTypeArray {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_bbdad :=args [2].AsNumber ();if _bbdad .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_facd :=false ;if len (args )==4{_dcag :=args [3].AsNumber ();if _dcag .Type !=ResultTypeNumber {return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _dcag .ValueNumber ==0{_facd =true ;};};_aeca :=-1;_fcaf :=false ;if len (_ceae .ValueArray )==0{return MakeErrorResult ("\u0048\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u006f\u006e\u002d\u0065\u006d\u0070\u0074\u0079\u0020\u0061\u0072\u0072\u0061\u0079");};_fbcg :=_ceae .ValueArray [0];_afaa :for _aabb ,_gcgb :=range _fbcg {switch _fffb (_gcgb ,_bdab ,false ,_facd ){case _bcce :_aeca =_aabb ;case _dgeab :_aeca =_aabb ;_fcaf =true ;break _afaa ;};};if _aeca ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0048\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_edabc :=int (_bbdad .ValueNumber )-1;if _edabc < 0||_edabc > len (_ceae .ValueArray ){return MakeErrorResult ("\u0048L\u004f\u004f\u004b\u0055P\u0020\u0068\u0061\u0064\u0020i\u006ev\u0061l\u0069\u0064\u0020\u0069\u006e\u0064\u0065x");};_fbcg =_ceae .ValueArray [_edabc ];if _aeca < 0||_aeca >=len (_fbcg ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _fcaf ||!_facd {return _fbcg [_aeca ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};func (_dbfg *yyParserImpl )Parse (yylex yyLexer )int {_ddef :=_fe .Now ();var _fecd int ;var _beedd yySymType ;var _fcbb []yySymType ;_ =_fcbb ;_gdgg :=_dbfg ._adcc [:];Nerrs :=0;Errflag :=0;_aeeag :=0;_dbfg ._dddab =-1;_gegd :=-1;defer func (){_aeeag =-1;_dbfg ._dddab =-1;_gegd =-1}();_gedbg :=-1;goto _fffc ;_eada :return 0;_gabe :return 1;_fffc :if _ceac (_ddef ){_bdg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gabe ;};if _fgfea >=4{_d .Printf ("\u0063\u0068\u0061\u0072\u0020\u0025\u0076\u0020\u0069n\u0020\u0025\u0076\u000a",_bcedg (_gegd ),_fbagf (_aeeag ));};_gedbg ++;if _gedbg >=len (_gdgg ){_aebae :=make ([]yySymType ,len (_gdgg )*2);copy (_aebae ,_gdgg );_gdgg =_aebae ;};_gdgg [_gedbg ]=_beedd ;_gdgg [_gedbg ]._agfg =_aeeag ;_adfg :if _ceac (_ddef ){_bdg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gabe ;};_fecd =_gcbb [_aeeag ];if _fecd <=_bcgg {goto _bdag ;};if _dbfg ._dddab < 0{_dbfg ._dddab ,_gegd =_egfgf (yylex ,&_dbfg ._gacbg );};_fecd +=_gegd ;if _fecd < 0||_fecd >=_cdacb {goto _bdag ;};_fecd =_caadg [_fecd ];if _deeg [_fecd ]==_gegd {_dbfg ._dddab =-1;_gegd =-1;_beedd =_dbfg ._gacbg ;_aeeag =_fecd ;if Errflag > 0{Errflag --;};goto _fffc ;};_bdag :if _ceac (_ddef ){_bdg .Log .Error ("\u0050\u0061\u0072\u0073\u0065\u0020\u0074\u0069\u006d\u0065\u006f\u0075\u0074");goto _gabe ;};_fecd =_gfdcb [_aeeag ];if _fecd ==-2{if _dbfg ._dddab < 0{_dbfg ._dddab ,_gegd =_egfgf (yylex ,&_dbfg ._gacbg );};_bbdaa :=0;for {if _gada [_bbdaa +0]==-1&&_gada [_bbdaa +1]==_aeeag {break ;};_bbdaa +=2;};for _bbdaa +=2;;_bbdaa +=2{_fecd =_gada [_bbdaa +0];if _fecd < 0||_fecd ==_gegd {break ;};};_fecd =_gada [_bbdaa +1];if _fecd < 0{goto _eada ;};};if _fecd ==0{switch Errflag {case 0:yylex .Error (_beebd (_aeeag ,_gegd ));Nerrs ++;if _fgfea >=1{_d .Printf ("\u0025\u0073",_fbagf (_aeeag ));_d .Printf ("\u0020\u0073\u0061\u0077\u0020\u0025\u0073\u000a",_bcedg (_gegd ));};fallthrough;case 1,2:Errflag =3;for _gedbg >=0{_fecd =_gcbb [_gdgg [_gedbg ]._agfg ]+_afed ;if _fecd >=0&&_fecd < _cdacb {_aeeag =_caadg [_fecd ];if _deeg [_aeeag ]==_afed {goto _fffc ;};};if _fgfea >=2{_d .Printf ("\u0065\u0072r\u006f\u0072\u0020\u0072\u0065\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0070\u006f\u0070\u0073\u0020\u0073\u0074\u0061\u0074\u0065 %\u0064\u000a",_gdgg [_gedbg ]._agfg );};_gedbg --;};goto _gabe ;case 3:if _fgfea >=2{_d .Printf ("e\u0072\u0072\u006f\u0072\u0020\u0072e\u0063\u006f\u0076\u0065\u0072\u0079\u0020\u0064\u0069s\u0063\u0061\u0072d\u0073 \u0025\u0073\u000a",_bcedg (_gegd ));};if _gegd ==_ffbgf {goto _gabe ;};_dbfg ._dddab =-1;_gegd =-1;goto _adfg ;};};if _fgfea >=2{_d .Printf ("\u0072e\u0064u\u0063\u0065\u0020\u0025\u0076 \u0069\u006e:\u000a\u0009\u0025\u0076\u000a",_fecd ,_fbagf (_aeeag ));};_gagga :=_fecd ;_bfbf :=_gedbg ;_ =_bfbf ;_gedbg -=_gcdec [_fecd ];if _gedbg +1>=len (_gdgg ){_accfb :=make ([]yySymType ,len (_gdgg )*2);copy (_accfb ,_gdgg );_gdgg =_accfb ;};_beedd =_gdgg [_gedbg +1];_fecd =_ebagb [_fecd ];_cgfbe :=_bgcdc [_fecd ];_aaada :=_cgfbe +_gdgg [_gedbg ]._agfg +1;if _aaada >=_cdacb {_aeeag =_caadg [_cgfbe ];}else {_aeeag =_caadg [_aaada ];if _deeg [_aeeag ]!=-_fecd {_aeeag =_caadg [_cgfbe ];};};switch _gagga {case 1:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{yylex .(*plex )._eabc =_beedd ._gfag ;};case 3:_fcbb =_gdgg [_bfbf -2:_bfbf +1];{_beedd ._gfag =_fcbb [2]._gfag ;};case 4:_fcbb =_gdgg [_bfbf -4:_bfbf +1];{};case 5:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewBool (_fcbb [1]._bebdc ._bcbd );};case 6:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewNumber (_fcbb [1]._bebdc ._bcbd );};case 7:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewString (_fcbb [1]._bebdc ._bcbd );};case 8:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewError (_fcbb [1]._bebdc ._bcbd );};case 9:_fcbb =_gdgg [_bfbf -2:_bfbf +1];{_beedd ._gfag =_fcbb [2]._gfag ;};case 10:_fcbb =_gdgg [_bfbf -2:_bfbf +1];{_beedd ._gfag =NewNegate (_fcbb [2]._gfag );};case 15:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =_fcbb [2]._gfag ;};case 17:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewConstArrayExpr (_fcbb [2]._acfca );};case 18:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._acfca =append (_beedd ._acfca ,_fcbb [1]._decgb );};case 19:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._acfca =append (_fcbb [1]._acfca ,_fcbb [3]._decgb );};case 20:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._decgb =append (_beedd ._decgb ,_fcbb [1]._gfag );};case 21:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._decgb =append (_fcbb [1]._decgb ,_fcbb [3]._gfag );};case 23:_fcbb =_gdgg [_bfbf -2:_bfbf +1];{_beedd ._gfag =NewPrefixExpr (_fcbb [1]._gfag ,_fcbb [2]._gfag );};case 25:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewSheetPrefixExpr (_fcbb [1]._bebdc ._bcbd );};case 26:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewCellRef (_fcbb [1]._bebdc ._bcbd );};case 27:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewRange (_fcbb [1]._gfag ,_fcbb [3]._gfag );};case 28:_fcbb =_gdgg [_bfbf -4:_bfbf +1];{_beedd ._gfag =NewPrefixRangeExpr (_fcbb [1]._gfag ,_fcbb [2]._gfag ,_fcbb [4]._gfag );};case 29:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewNamedRangeRef (_fcbb [1]._bebdc ._bcbd );};case 30:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewHorizontalRange (_fcbb [1]._bebdc ._bcbd );};case 31:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._gfag =NewVerticalRange (_fcbb [1]._bebdc ._bcbd );};case 32:_fcbb =_gdgg [_bfbf -2:_bfbf +1];{_beedd ._gfag =NewPrefixHorizontalRange (_fcbb [1]._gfag ,_fcbb [2]._bebdc ._bcbd );};case 33:_fcbb =_gdgg [_bfbf -2:_bfbf +1];{_beedd ._gfag =NewPrefixVerticalRange (_fcbb [1]._gfag ,_fcbb [2]._bebdc ._bcbd );};case 34:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypePlus ,_fcbb [3]._gfag );};case 35:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeMinus ,_fcbb [3]._gfag );};case 36:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeMult ,_fcbb [3]._gfag );};case 37:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeDiv ,_fcbb [3]._gfag );};case 38:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeExp ,_fcbb [3]._gfag );};case 39:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeLT ,_fcbb [3]._gfag );};case 40:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeGT ,_fcbb [3]._gfag );};case 41:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeLEQ ,_fcbb [3]._gfag );};case 42:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeGEQ ,_fcbb [3]._gfag );};case 43:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeEQ ,_fcbb [3]._gfag );};case 44:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeNE ,_fcbb [3]._gfag );};case 45:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewBinaryExpr (_fcbb [1]._gfag ,BinOpTypeConcat ,_fcbb [3]._gfag );};case 47:_fcbb =_gdgg [_bfbf -2:_bfbf +1];{_beedd ._gfag =NewFunction (_fcbb [1]._bebdc ._bcbd ,nil );};case 48:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._gfag =NewFunction (_fcbb [1]._bebdc ._bcbd ,_fcbb [2]._decgb );};case 49:_fcbb =_gdgg [_bfbf -1:_bfbf +1];{_beedd ._decgb =append (_beedd ._decgb ,_fcbb [1]._gfag );};case 50:_fcbb =_gdgg [_bfbf -3:_bfbf +1];{_beedd ._decgb =append (_fcbb [1]._decgb ,_fcbb [3]._gfag );};case 53:_fcbb =_gdgg [_bfbf -0:_bfbf +1];{_beedd ._gfag =NewEmptyExpr ();};};goto _fffc ;};func _bebg (_agdcf Result ,_cfbeg ,_egae string )(string ,Result ){switch _agdcf .Type {case ResultTypeString ,ResultTypeNumber ,ResultTypeEmpty :return _agdcf .Value (),_dbc ;default:return "",MakeErrorResult (_cfbeg +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020"+_egae +"\u0020t\u006f\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006db\u0065r\u0020o\u0072\u0020\u0073\u0074\u0072\u0069\u006eg");};};

// ISERR is an implementation of the Excel ISERR() function.
func IsErr (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0045\u0052\u0052\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError &&args [0].ValueString !="\u0023\u004e\u002f\u0041");};

// String returns a string representation of FunctionCall expression.
func (_acee FunctionCall )String ()string {_egdbg :=_fac .Buffer {};_egdbg .WriteString (_acee ._dbbbg );_egdbg .WriteString ("\u0028");_bddcg :=len (_acee ._dbgg )-1;for _ababb ,_gbdb :=range _acee ._dbgg {_egdbg .WriteString (_gbdb .String ());if _ababb !=_bddcg {_egdbg .WriteString ("\u002c");};};_egdbg .WriteString ("\u0029");return _egdbg .String ();};

// Bool is a boolean expression.
type Bool struct{_ac bool };func (_dfffd *ivr )Cell (ref string ,ev Evaluator )Result {return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065");};

// Irr implements the Excel IRR function.
func Irr (args []Result )Result {_eccc :=len (args );if _eccc ==0||_eccc > 2{return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006e\u0065\u0020\u006f\u0072\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020v\u0061\u006c\u0075\u0065\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0061\u0072\u0072\u0061\u0079 \u0074\u0079\u0070\u0065");};_eeda :=_gbaa (args [0]);_cdea :=[]float64 {};for _ ,_dggf :=range _eeda {for _ ,_eeff :=range _dggf {if _eeff .Type ==ResultTypeNumber &&!_eeff .IsBoolean {_cdea =append (_cdea ,_eeff .ValueNumber );};};};_bddg :=len (_cdea );if len (_cdea )< 2{return MakeErrorResultType (ErrorTypeNum ,"");};_eadd :=0.1;if _eccc ==2&&args [1].Type !=ResultTypeEmpty {if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_eadd =args [1].ValueNumber ;if _eadd <=-1{return MakeErrorResult ("\u0049\u0052R\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020t\u006f\u0020\u0062\u0065\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068a\u006e\u0020\u002d\u0031");};};_abdb :=[]float64 {};for _bgfc :=0;_bgfc < _bddg ;_bgfc ++{if _bgfc ==0{_abdb =append (_abdb ,0);}else {_abdb =append (_abdb ,_abdb [_bgfc -1]+365);};};return _cbad (_cdea ,_abdb ,_eadd );};func _gfgc (_ceea []Result ,_ffgbg []string ,_faab bool )[]string {for _ ,_adab :=range _ceea {switch _adab .Type {case ResultTypeEmpty :if !_faab {_ffgbg =append (_ffgbg ,"");};case ResultTypeString :if _adab .ValueString !=""||!_faab {_ffgbg =append (_ffgbg ,_adab .ValueString );};case ResultTypeNumber :_ffgbg =append (_ffgbg ,_adab .Value ());case ResultTypeList :_ffgbg =_dece (_ffgbg ,_gfgc (_adab .ValueList ,[]string {},_faab ));case ResultTypeArray :for _ ,_dggdg :=range _adab .ValueArray {_ffgbg =_dece (_ffgbg ,_gfgc (_dggdg ,[]string {},_faab ));};};};return _ffgbg ;};

// Reference returns a string reference value to a range with prefix.
func (_dddd PrefixRangeExpr )Reference (ctx Context ,ev Evaluator )Reference {_adea :=_dddd ._baga .Reference (ctx ,ev );_bbee :=_dddd ._dfggb .Reference (ctx ,ev );_bdebc :=_dddd ._caga .Reference (ctx ,ev );if _adea .Type ==ReferenceTypeSheet &&_bbee .Type ==ReferenceTypeCell &&_bdebc .Type ==ReferenceTypeCell {return MakeRangeReference (_abddg (_adea ,_bbee ,_bdebc ));};return ReferenceInvalid ;};

// NewEmptyExpr constructs a new empty expression.
func NewEmptyExpr ()Expression {return EmptyExpr {}};

// Ifs is an implementation of the Excel IFS() function.
func Ifs (args []Result )Result {if len (args )< 2{return MakeErrorResult ("I\u0046\u0053\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061t\u0020\u006c\u0065\u0061\u0073\u0074\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};for _afdc :=0;_afdc < len (args )-1;_afdc +=2{if args [_afdc ].ValueNumber ==1{return args [_afdc +1];};};return MakeErrorResultType (ErrorTypeNA ,"");};

// CellRef is a reference to a single cell
type CellRef struct{_bbgg string };

// Eval evaluates and returns a string.
func (_acbaf String )Eval (ctx Context ,ev Evaluator )Result {return MakeStringResult (_acbaf ._eagbg )};

// Update updates references in the Negate after removing a row/column.
func (_ffaaa Negate )Update (q *_eg .UpdateQuery )Expression {return Negate {_agcaf :_ffaaa ._agcaf .Update (q )};};func _dbccf (_ddgba Result ,_efae *criteriaParsed )bool {if _ddgba .Type ==ResultTypeEmpty {return false ;};if _efae ._deaa {return _ddgba .ValueNumber ==_efae ._fgeb ;}else {_dgca :=_c .ToLower (_ddgba .ValueString );return _efae ._dcfcg ==_dgca ||_a .Match (_efae ._dcfcg ,_dgca );};};

// Eval evaluates and returns the result of a constant array expression.
func (_ee ConstArrayExpr )Eval (ctx Context ,ev Evaluator )Result {_fcd :=[][]Result {};for _ ,_be :=range _ee ._gbc {_bcf :=[]Result {};for _ ,_gfd :=range _be {_bcf =append (_bcf ,_gfd .Eval (ctx ,ev ));};_fcd =append (_fcd ,_bcf );};return MakeArrayResult (_fcd );};

// SumSquares is an implementation of the Excel SUMSQ() function.
func SumSquares (args []Result )Result {_bfdfc :=MakeNumberResult (0);for _ ,_eaeed :=range args {_eaeed =_eaeed .AsNumber ();switch _eaeed .Type {case ResultTypeNumber :_bfdfc .ValueNumber +=_eaeed .ValueNumber *_eaeed .ValueNumber ;case ResultTypeList ,ResultTypeArray :_afec :=SumSquares (_eaeed .ListValues ());if _afec .Type !=ResultTypeNumber {return _afec ;};_bfdfc .ValueNumber +=_afec .ValueNumber ;case ResultTypeString :case ResultTypeError :return _eaeed ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0068\u0061\u006e\u0064\u006c\u0065\u0064\u0020\u0053\u0055\u004dS\u0051\u0055\u0041\u0052\u0045\u0053(\u0029\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u0079p\u0065\u0020\u0025\u0073",_eaeed .Type ));};};return _bfdfc ;};func _edgc (_acbae [][]Result ,_ccdg int )[][]Result {_feeca :=[][]Result {};for _edbf :=range _acbae {if _edbf ==0{continue ;};_gab :=[]Result {};for _geec :=range _acbae {if _geec ==_ccdg {continue ;};_gab =append (_gab ,_acbae [_edbf ][_geec ]);};_feeca =append (_feeca ,_gab );};return _feeca ;};

// AsNumber attempts to intepret a string cell value as a number. Upon success,
// it returns a new number result, upon  failure it returns the original result.
// This is used as functions return strings that can then act like number (e.g.
// LEFT(1.2345,3) + LEFT(1.2345,3) = 2.4)
func (_fbgaf Result )AsNumber ()Result {if _fbgaf .Type ==ResultTypeString {_dbgeb ,_gafe :=_ea .ParseFloat (_fbgaf .ValueString ,64);if _gafe ==nil {return MakeNumberResult (_dbgeb );};};if _fbgaf .Type ==ResultTypeEmpty {return MakeNumberResult (0);};return _fbgaf ;};var _fggd =[...]int {0};const _gbcf =57358;func _gccff (_bbdc ,_fead float64 )bool {return _bb .Abs (_bbdc -_fead )< 1.0e-6};

// Update returns the same object as updating sheet references does not affect Bool.
func (_caf Bool )Update (q *_eg .UpdateQuery )Expression {return _caf };

// NewFunction constructs a new function call expression.
func NewFunction (name string ,args []Expression )Expression {return FunctionCall {_dbbbg :name ,_dbgg :args };};

// Update updates references in the PrefixHorizontalRange after removing a row/column.
func (_fcded PrefixHorizontalRange )Update (q *_eg .UpdateQuery )Expression {return _fcded };type rangeIndex struct{_ggcaa int ;_aeeee int ;};func _bgfe (_cbeb string ,_eaa uint32 )string {_dgd :=_bd .ColumnToIndex (_cbeb );if _dgd ==_eaa {return "\u0023\u0052\u0045F\u0021";}else if _dgd > _eaa {return _bd .IndexToColumn (_dgd -1);}else {return _cbeb ;};};func _bfc (_ebg int )int {if _ebg < 1900{if _ebg < 30{_ebg +=2000;}else {_ebg +=1900;};};return _ebg ;};

// Days is an implementation of the Excel DAYS() function.
func Days (args []Result )Result {if len (args )!=2{return MakeErrorResult ("D\u0041\u0059\u0053\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};var _bcg ,_dda float64 ;switch args [0].Type {case ResultTypeNumber :_dda =args [0].ValueNumber ;case ResultTypeString :_gde :=DateValue ([]Result {args [0]});if _gde .Type ==ResultTypeError {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0065\u006e\u0064\u0020\u0064\u0061\u0074e\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_dda =_gde .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};switch args [1].Type {case ResultTypeNumber :_bcg =args [1].ValueNumber ;if _bcg < 62&&_dda >=62{_bcg --;};case ResultTypeString :_ge :=DateValue ([]Result {args [1]});if _ge .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0073\u0074\u0061\u0072\u0074\u0020\u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u0020DA\u0059\u0053");};_bcg =_ge .ValueNumber ;default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020D\u0041\u0059\u0053");};_cbc :=float64 (int (_dda -_bcg ));return MakeNumberResult (_cbc );};var _gabd []byte =[]byte {0,1,2,1,11,1,12,1,13,1,14,1,15,1,16,1,17,1,18,1,19,1,20,1,21,1,22,1,23,1,24,1,25,1,26,1,27,1,28,1,29,1,30,1,31,1,32,1,33,1,34,1,35,1,36,1,37,1,38,1,39,1,40,1,41,1,42,1,43,2,0,1,2,3,4,2,3,5,2,3,6,2,3,7,2,3,8,2,3,9,2,3,10};

// FunctionCall is a function call expression.
type FunctionCall struct{_dbbbg string ;_dbgg []Expression ;};

// Reference returns a string reference value to an expression with prefix.
func (_ecec PrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {_efed :=_ecec ._aedc .Reference (ctx ,ev );_fcaca :=_ecec ._fgfac .Reference (ctx ,ev );if _efed .Type ==ReferenceTypeSheet &&_fcaca .Type ==ReferenceTypeCell {return Reference {Type :ReferenceTypeCell ,Value :_efed .Value +"\u0021"+_fcaca .Value };};return ReferenceInvalid ;};

// Range is a range expression that when evaluated returns a list of Results.
type Range struct{_gbda ,_ebcfd Expression };func _ccbdc (_dbgeg Reference ,_cfdcdf Context )bool {return _cfdcdf .Sheet (_dbgeg .Value )==InvalidReferenceContext ;};

// MakeArrayResult constructs an array result (matrix).
func MakeArrayResult (arr [][]Result )Result {return Result {Type :ResultTypeArray ,ValueArray :arr }};

// Decimal is an implementation of the Excel function DECIMAL() that parses a string
// in a given base and returns the numeric result.
func Decimal (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065s\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_bgdg :=args [0].AsString ();if _bgdg .Type !=ResultTypeString {return MakeErrorResult ("D\u0045\u0043\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0074\u0072\u0069\u006e\u0067\u0020\u0066\u0069\u0072\u0073t \u0061\u0072\u0067u\u006de\u006e\u0074");};_fdbd :=args [1].AsNumber ();if _fdbd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0045\u0043\u0049\u004dA\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdcbe :=_bgdg .ValueString ;if len (_fdcbe )> 2&&(_c .HasPrefix (_fdcbe ,"\u0030\u0078")||_c .HasPrefix (_fdcbe ,"\u0030\u0058")){_fdcbe =_fdcbe [2:];};_gfgb ,_gggc :=_ea .ParseInt (_fdcbe ,int (_fdbd .ValueNumber ),64);if _gggc !=nil {return MakeErrorResult ("\u0044\u0045C\u0049\u004d\u0041\u004c\u0028\u0029\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0069\u006e\u0020\u0063\u006f\u006e\u0076\u0065\u0072si\u006f\u006e");};return MakeNumberResult (float64 (_gfgb ));};var _afcbdg =[...]string {};

// GetLabelPrefix returns an empty string for the invalid reference context.
func (_aggf *ivr )GetLabelPrefix (cellRef string )string {return ""};const _cdacb =187;func _cgf (_ab BinOpType ,_gg ,_bg []Result )Result {_bcb :=[]Result {};for _bbg :=range _gg {_gd :=_gg [_bbg ].AsNumber ();_gag :=_bg [_bbg ].AsNumber ();if _gd .Type !=ResultTypeNumber ||_gag .Type !=ResultTypeNumber {return MakeErrorResult ("\u006e\u006f\u006e\u002d\u006e\u0075\u006e\u006d\u0065\u0072\u0069\u0063\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0069\u006e\u0020\u0062\u0069n\u0061\u0072\u0079\u0020\u006fp\u0065\u0072a\u0074\u0069\u006f\u006e");};switch _ab {case BinOpTypePlus :_bcb =append (_bcb ,MakeNumberResult (_gd .ValueNumber +_gag .ValueNumber ));case BinOpTypeMinus :_bcb =append (_bcb ,MakeNumberResult (_gd .ValueNumber -_gag .ValueNumber ));case BinOpTypeMult :_bcb =append (_bcb ,MakeNumberResult (_gd .ValueNumber *_gag .ValueNumber ));case BinOpTypeDiv :if _gag .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_bcb =append (_bcb ,MakeNumberResult (_gd .ValueNumber /_gag .ValueNumber ));case BinOpTypeExp :_bcb =append (_bcb ,MakeNumberResult (_bb .Pow (_gd .ValueNumber ,_gag .ValueNumber )));case BinOpTypeLT :_bcb =append (_bcb ,MakeBoolResult (_gd .ValueNumber < _gag .ValueNumber ));case BinOpTypeGT :_bcb =append (_bcb ,MakeBoolResult (_gd .ValueNumber > _gag .ValueNumber ));case BinOpTypeEQ :_bcb =append (_bcb ,MakeBoolResult (_gd .ValueNumber ==_gag .ValueNumber ));case BinOpTypeLEQ :_bcb =append (_bcb ,MakeBoolResult (_gd .ValueNumber <=_gag .ValueNumber ));case BinOpTypeGEQ :_bcb =append (_bcb ,MakeBoolResult (_gd .ValueNumber >=_gag .ValueNumber ));case BinOpTypeNE :_bcb =append (_bcb ,MakeBoolResult (_gd .ValueNumber !=_gag .ValueNumber ));default:return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006c\u0069\u0073\u0074\u0020\u0062\u0069\u006e\u0061\u0072\u0079\u0020\u006fp \u0025\u0073",_ab ));};};return MakeListResult (_bcb );};

// Eval evaluates a horizontal range returning a list of results or an error.
func (_bgeca HorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_gafgf :=_bgeca .horizontalRangeReference ();if _ebcf ,_gaeg :=ev .GetFromCache (_gafgf );_gaeg {return _ebcf ;};_fcbbf ,_fadb :=_bgba (ctx ,_bgeca ._cfagc ,_bgeca ._eeeb );_faeg :=_aadf (ctx ,ev ,_fcbbf ,_fadb );ev .SetCache (_gafgf ,_faeg );return _faeg ;};type couponArgs struct{_cdfd float64 ;_cfea float64 ;_cca int ;_edab int ;};type ri struct{_dcge float64 ;_ggdfd string ;};func _abdc (_bbfb ,_fedd ,_fggfea ,_deea ,_afcc float64 ,_edbg int )float64 {_gedb :=_fdcb (_bbfb ,_fggfea ,_deea ,_afcc ,_edbg );var _cdbe float64 ;if _fedd ==1{if _edbg ==1{_cdbe =0;}else {_cdbe =-_deea ;};}else {if _edbg ==1{_cdbe =_ebdc (_bbfb ,_fedd -2,_gedb ,_deea ,1)-_gedb ;}else {_cdbe =_ebdc (_bbfb ,_fedd -1,_gedb ,_deea ,0);};};return _cdbe *_bbfb ;};const _cee ="\u0042\u0069\u006e\u004f\u0070\u0054y\u0070\u0065\u0055\u006e\u006bn\u006fw\u006e\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0050\u006c\u0075\u0073\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u004d\u0069\u006e\u0075\u0073\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065M\u0075lt\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0044\u0069\u0076\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u0045\u0078\u0070\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065\u004c\u0054\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065G\u0054B\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0045\u0051\u0042\u0069nO\u0070\u0054\u0079\u0070\u0065\u004c\u0045\u0051\u0042i\u006eO\u0070\u0054\u0079\u0070\u0065\u0047\u0045\u0051\u0042\u0069\u006e\u004f\u0070\u0054\u0079\u0070\u0065N\u0045\u0042\u0069\u006eO\u0070\u0054\u0079\u0070\u0065\u0043\u006f\u006e\u0063\u0061\u0074";

// Right implements the Excel RIGHT(string,[n]) function which returns the
// rightmost n characters.
func Right (args []Result )Result {_bdabe :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0065\u0078\u0070\u0065c\u0074\u0065\u0064\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bdabe =int (args [1].ValueNumber );if _bdabe < 0{return MakeErrorResult ("R\u0049\u0047\u0048\u0054\u0020\u0065x\u0070\u0065\u0063\u0074\u0065\u0064 \u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d \u0030");};if _bdabe ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u0052\u0049\u0047HT\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u0052\u0049\u0047\u0048\u0054\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020c\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_cgcfgb :=args [0].Value ();_gdge :=len (_cgcfgb );if _bdabe > _gdge {return MakeStringResult (_cgcfgb );};return MakeStringResult (_cgcfgb [_gdge -_bdabe :_gdge ]);};

// Value is an implementation of the Excel VALUE function.
func Value (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0056\u0041\u004c\u0055\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020a\u0020s\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ffbgg :=args [0];if _ffbgg .Type ==ResultTypeNumber {return _ffbgg ;};if _ffbgg .Type ==ResultTypeString {_cbcgb ,_babf :=_ea .ParseFloat (_ffbgg .Value (),64);if _babf ==nil {return MakeNumberResult (_cbcgb );};};return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0056\u0041L\u0055\u0045");};

// Exact is an implementation of the Excel EXACT() which compares two strings.
func Exact (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cfgc :=args [0].AsString ();_gadfb :=args [1].AsString ();if _cfgc .Type !=ResultTypeString ||_gadfb .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u004f\u004e\u0043\u0041\u0054\u0045N\u0041\u0054\u0045(\u0029\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};return MakeBoolResult (_cfgc .ValueString ==_gadfb .ValueString );};

// Pricedisc implements the Excel PRICEDISC function.
func Pricedisc (args []Result )Result {_adac :=len (args );if _adac !=4&&_adac !=5{return MakeErrorResult ("\u0050\u0052\u0049\u0043\u0045D\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020f\u006f\u0075\u0072\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_ccab ,_cfaff ,_dbdf :=_cfaa (args [0],args [1],"\u0050R\u0049\u0043\u0045\u0044\u0049\u0053C");if _dbdf .Type ==ResultTypeError {return _dbdf ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_eegg :=args [2].ValueNumber ;if _eegg <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0052\u0049C\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0069\u0073\u0063\u006f\u0075\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u006ff\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006db\u0065\u0072");};_cgdc :=args [3].ValueNumber ;if _cgdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065mp\u0074\u0069\u006fn\u0020\u0074o\u0020\u0062\u0065\u0020\u0070\u006fs\u0069\u0074i\u0076\u0065");};_fbbc :=0;if _adac ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0052I\u0043\u0045\u0044\u0049\u0053\u0043\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fbbc =int (args [4].ValueNumber );if !_adfb (_fbbc ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u0066\u006f\u0072\u0020\u0050R\u0049\u0043E\u0044\u0049\u0053\u0043");};};_eggd ,_dbdf :=_gaa (_ccab ,_cfaff ,_fbbc );if _dbdf .Type ==ResultTypeError {return _dbdf ;};return MakeNumberResult (_cgdc *(1-_eegg *_eggd ));};

// Eval evaluates a horizontal range with prefix returning a list of results or an error.
func (_fadf PrefixHorizontalRange )Eval (ctx Context ,ev Evaluator )Result {_egagd :=_fadf ._bccca .Reference (ctx ,ev );switch _egagd .Type {case ReferenceTypeSheet :if _ccbdc (_egagd ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_egagd .Value ));};_fdgdf :=_fadf .horizontalRangeReference (_egagd .Value );if _ecba ,_aeaf :=ev .GetFromCache (_fdgdf );_aeaf {return _ecba ;};_ffcbd :=ctx .Sheet (_egagd .Value );_dafcd ,_aaebg :=_bgba (_ffcbd ,_fadf ._gceg ,_fadf ._gfdd );_ebefa :=_aadf (_ffcbd ,ev ,_dafcd ,_aaebg );ev .SetCache (_fdgdf ,_ebefa );return _ebefa ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_egagd .Type ));};};var ReferenceInvalid =Reference {Type :ReferenceTypeInvalid };

// LookupFunctionComplex looks up and returns a complex function or nil.
func LookupFunctionComplex (name string )FunctionComplex {_ddbcg .Lock ();defer _ddbcg .Unlock ();if _gfcb ,_fdbgf :=_ddgd [name ];_fdbgf {return _gfcb ;};return nil ;};

// Transpose implements the TRANSPOSE function that transposes a cell range.
func Transpose (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0054\u0052AN\u0053\u0050\u004fS\u0045\u0020\u0072\u0065qui\u0072es\u0020\u0061\u0020\u0073\u0069\u006e\u0067le\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [0].Type !=ResultTypeArray &&args [0].Type !=ResultTypeList {return MakeErrorResult ("T\u0052\u0041\u004e\u0053\u0050\u004fS\u0045\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0020\u0072a\u006e\u0067\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_geb :=args [0];if _geb .Type ==ResultTypeList {_bcdf :=[][]Result {};for _ ,_eabd :=range _geb .ValueList {_bcdf =append (_bcdf ,[]Result {_eabd });};return MakeArrayResult (_bcdf );};_gfbbd :=make ([][]Result ,len (_geb .ValueArray [0]));for _ ,_ebdf :=range _geb .ValueArray {for _ceaf ,_cbege :=range _ebdf {_gfbbd [_ceaf ]=append (_gfbbd [_ceaf ],_cbege );};};return MakeArrayResult (_gfbbd );};

// Cell is an implementation of the Excel CELL function that returns information
// about the formatting, location, or contents of a cell.
func Cell (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1&&len (args )!=2{return MakeErrorResult ("\u0043\u0045\u004cL \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gdgcd :=args [0].AsString ();if _gdgcd .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065 \u0073t\u0072\u0069\u006e\u0067");};_geeb :="\u0041\u0031";if len (args )==2{_effa :=args [1].Ref ;if _effa .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u0045\u004c\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064 \u0061r\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079p\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};_geeb =_effa .Value ;};switch _gdgcd .ValueString {case "\u0061d\u0064\u0072\u0065\u0073\u0073":_gafg ,_faec :=_bd .ParseCellReference (_geeb );if _faec !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_geeb );};_ebfba :="\u0024"+_gafg .Column +"\u0024"+_ea .Itoa (int (_gafg .RowIdx ));if _gafg .SheetName !=""{_ebfba =_gafg .SheetName +"\u0021"+_ebfba ;};return MakeStringResult (_ebfba );case "\u0063\u006f\u006c":_dagdb ,_ceb :=_bd .ParseCellReference (_geeb );if _ceb !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_geeb );};return MakeNumberResult (float64 (_dagdb .ColumnIdx +1));case "\u0063\u006f\u006co\u0072":_cfcf :=_c .Contains (ctx .GetFormat (_geeb ),"\u005b\u0052\u0045D\u005d");return MakeBoolResult (_cfcf );case "\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0073":return args [1];case "\u0066\u0069\u006c\u0065\u006e\u0061\u006d\u0065":return MakeStringResult (ctx .GetFilename ());case "\u0066\u006f\u0072\u006d\u0061\u0074":_dfbfe :="\u0047";_gfgfe :=ctx .GetFormat (_geeb );if _gfgfe =="\u0047e\u006e\u0065\u0072\u0061\u006c"||_acgcg .MatchString (_gfgfe ){_dfbfe ="\u0046\u0030";}else if _gfgfe =="\u0030\u0025"{_dfbfe ="\u0050\u0030";}else if _gfgfe =="\u004d\u004d\u004d\u0020\u0044\u0044"{_dfbfe ="\u0044\u0032";}else if _gfgfe =="\u004d\u004d\u002fY\u0059"{_dfbfe ="\u0044\u0033";}else if _gfgfe =="\u004d\u004d\u002f\u0044D/\u0059\u0059\u005c\u0020\u0048\u0048\u003a\u004d\u004d\u005c\u0020\u0041\u004d\u002fP\u004d"||_gfgfe =="M\u004d/\u0044\u0044\u002f\u0059\u0059\u0059\u0059\u005c \u0048\u0048\u003a\u004dM:\u0053\u0053"{_dfbfe ="\u0044\u0034";}else if _gfgfe =="\u004d\u004d\u005c\u002d\u0044\u0044"{_dfbfe ="\u0044\u0035";}else if _gfgfe =="\u0048H\u003aM\u004d\u003a\u0053\u0053\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dfbfe ="\u0044\u0036";}else if _gfgfe =="\u0048\u0048\u003aM\u004d\u005c\u0020\u0041\u004d\u002f\u0050\u004d"{_dfbfe ="\u0044\u0037";}else if _gfgfe =="\u0048\u0048\u003a\u004d\u004d\u003a\u0053\u0053"{_dfbfe ="\u0044\u0038";}else if _gfgfe =="\u0048\u0048\u003aM\u004d"{_dfbfe ="\u0044\u0039";}else if _eeeef .MatchString (_gfgfe ){_dfbfe ="\u002e\u0030";}else if _eafgg .MatchString (_gfgfe ){_dfbfe ="\u002e\u0030\u0028\u0029";}else if _ddcaa .MatchString (_gfgfe ){_dfbfe ="\u0043\u0030";}else if _accf .MatchString (_gfgfe )||_bbce .MatchString (_gfgfe ){_dfbfe ="\u0044\u0031";}else if _eedf :=_eaada .FindStringSubmatch (_gfgfe );len (_eedf )> 1{_dfbfe ="\u0046"+_ea .Itoa (len (_eedf [1]));}else if _deag :=_egcg .FindStringSubmatch (_gfgfe );len (_deag )> 1{_dfbfe ="\u002e"+_ea .Itoa (len (_deag [2]));}else if _cceaf :=_dacb .FindStringSubmatch (_gfgfe );len (_cceaf )> 1{_dfbfe ="\u0050"+_ea .Itoa (len (_cceaf [2]));}else if _efda :=_ffaa .FindStringSubmatch (_gfgfe );len (_efda )> 1{_dfbfe ="\u0043"+_gcebb (_efda ,1);}else if _cgb :=_dgba .FindStringSubmatch (_gfgfe );len (_cgb )> 1{_dfbfe ="\u0043"+_gcebb (_cgb ,1);}else if _dcda :=_cdbeg .FindStringSubmatch (_gfgfe );len (_dcda )> 1{_dfbfe ="\u002e"+_gcebb (_dcda ,1)+"\u0028\u0029";}else if _afbe :=_fdcc .FindStringSubmatch (_gfgfe );len (_afbe )> 1{_dfbfe ="\u002e"+_gcebb (_afbe ,1);}else if _edbgbb :=_gdafe .FindStringSubmatch (_gfgfe );len (_edbgbb )> 1{_dfbfe ="\u0053"+_gcebb (_edbgbb ,3);};if _dfbfe !="\u0047"&&_c .Contains (_gfgfe ,"\u005b\u0052\u0045D\u005d"){_dfbfe +="\u002d";};return MakeStringResult (_dfbfe );case "p\u0061\u0072\u0065\u006e\u0074\u0068\u0065\u0073\u0065\u0073":_abe :=ctx .GetFormat (_geeb );if _ceeg .MatchString (_abe ){return MakeNumberResult (1);}else {return MakeNumberResult (0);};case "\u0070\u0072\u0065\u0066\u0069\u0078":return MakeStringResult (ctx .GetLabelPrefix (_geeb ));case "\u0070r\u006f\u0074\u0065\u0063\u0074":_abfb :=0.0;if ctx .GetLocked (_geeb ){_abfb =1.0;};return MakeNumberResult (_abfb );case "\u0072\u006f\u0077":_baae ,_bbdd :=_bd .ParseCellReference (_geeb );if _bbdd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_geeb );};return MakeNumberResult (float64 (_baae .RowIdx ));case "\u0074\u0079\u0070\u0065":switch args [1].Type {case ResultTypeEmpty :return MakeStringResult ("\u0062");case ResultTypeString :return MakeStringResult ("\u006c");default:return MakeStringResult ("\u0076");};case "\u0077\u0069\u0064t\u0068":_afea ,_feed :=_bd .ParseCellReference (_geeb );if _feed !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_geeb );};if _afea .SheetName ==""{return MakeNumberResult (ctx .GetWidth (int (_afea .ColumnIdx )));}else {return MakeNumberResult (ctx .Sheet (_afea .SheetName ).GetWidth (int (_afea .ColumnIdx )));};};return MakeErrorResult ("\u0049\u006e\u0063or\u0072\u0065\u0063\u0074\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072g\u0075m\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0043\u0045\u004c\u004c\u003a\u0020"+_gdgcd .ValueString );};

// Clean is an implementation of the Excel CLEAN function that removes
// unprintable characters.
func Clean (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0043\u004c\u0045\u0041\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0061\u0020\u0073\u0069\u006eg\u006c\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_fbbf :=args [0].AsString ();if _fbbf .Type !=ResultTypeString {return MakeErrorResult ("\u0043\u0048\u0041\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0073t\u0072\u0069\u006e\u0067\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_dccb :=_fac .Buffer {};for _ ,_ebabb :=range _fbbf .ValueString {if _fa .IsPrint (_ebabb ){_dccb .WriteRune (_ebabb );};};return MakeStringResult (_dccb .String ());};

// Eval evaluates and returns a number.
func (_fbfag Number )Eval (ctx Context ,ev Evaluator )Result {return MakeNumberResult (_fbfag ._caag )};

// MakeBoolResult constructs a boolean result (internally a number).
func MakeBoolResult (b bool )Result {if b {return Result {Type :ResultTypeNumber ,ValueNumber :1,IsBoolean :true };};return Result {Type :ResultTypeNumber ,ValueNumber :0,IsBoolean :true };};const _fbgcc =57359;

// IsDBCS returns false for the invalid reference context.
func (_gbdg *ivr )IsDBCS ()bool {return false };

// NewBinaryExpr constructs a new binary expression with a given operator.
func NewBinaryExpr (lhs Expression ,op BinOpType ,rhs Expression )Expression {return BinaryExpr {_ed :lhs ,_af :rhs ,_afd :op };};func (_adgfe *plex )Lex (lval *yySymType )int {_bccbc =true ;_dcgcg :=<-_adgfe ._afdcg ;if _dcgcg !=nil {lval ._bebdc =_dcgcg ;return int (lval ._bebdc ._eddba );};return 0;};

// Reference returns an invalid reference for EmptyExpr.
func (_fge EmptyExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };

// Eval evaluates and returns the result of a sheet expression.
func (_dgfce SheetPrefixExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeErrorResult ("\u0073\u0068\u0065\u0065\u0074\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0073\u0068\u006f\u0075\u006c\u0064\u0020\u006e\u0065\u0076\u0065r\u0020\u0062\u0065\u0020\u0065v\u0061\u006cu\u0061\u0074\u0065\u0064");};

// VerticalRange is a range expression that when evaluated returns a list of Results from references like AA:IJ (all cells from columns AA to IJ).
type VerticalRange struct{_adacd ,_badff string };

// Couppcd implements the Excel COUPPCD function.
func Couppcd (args []Result )Result {_cgg ,_dabb :=_daef (args ,"\u0043O\u0055\u0050\u0050\u0043\u0044");if _dabb .Type ==ResultTypeError {return _dabb ;};_ddcb :=_adg (_cgg ._cdfd );_bacc :=_adg (_cgg ._cfea );_gaff :=_cgg ._cca ;_bfbb :=_cgg ._edab ;_egfc :=_ggbf (_ddcb ,_bacc ,_gaff ,_bfbb );_fegc ,_fed ,_eceb :=_egfc .Date ();return MakeNumberResult (_aaa (_fegc ,int (_fed ),_eceb ));};const _adaee =57360;const _cbcfg int =30;var _gcdec =[...]int {0,1,1,2,4,1,1,1,1,2,2,1,1,1,1,3,1,3,1,3,1,3,1,2,1,1,1,3,4,1,1,1,2,2,3,3,3,3,3,3,3,3,3,3,3,3,1,2,3,1,3,1,1,0};

// Find is an implementation of the Excel FIND().
func Find (args []Result )Result {_cggaa ,_ecdaf :=_cgdfe ("\u0046\u0049\u004e\u0044",args );if _ecdaf .Type !=ResultTypeEmpty {return _ecdaf ;};_ddee :=_cggaa ._fegbd ;if _ddee ==""{return MakeNumberResult (1.0);};_dagbg :=_cggaa ._cfeac ;_ggdd :=_cggaa ._dgcbc ;_fdfd :=1;for _cabaf :=range _dagbg {if _fdfd < _ggdd {_fdfd ++;continue ;};_ecbf :=_c .Index (_dagbg [_cabaf :],_ddee );if _ecbf ==0{return MakeNumberResult (float64 (_fdfd ));};_fdfd ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// Tbillyield implements the Excel TBILLYIELD function.
func Tbillyield (args []Result )Result {if len (args )!=3{return MakeErrorResult ("T\u0042\u0049\u004c\u004c\u0059\u0049E\u004c\u0044\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_dade ,_gcbc ,_ecea :=_cfaa (args [0],args [1],"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044");if _ecea .Type ==ResultTypeError {return _ecea ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020\u0064\u0069\u0073\u0063\u006f\u0075n\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cgfc :=_gcbc -_dade ;if _cgfc > 365{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004cY\u0049\u0045\u004c\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020m\u0061\u0074\u0075r\u0069\u0074\u0079\u0020t\u006f\u0020\u0062\u0065\u0020\u006eo\u0074\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u006f\u006e\u0065\u0020\u0079e\u0061\u0072\u0020\u0061\u0066\u0074\u0065\u0072\u0020\u0073\u0065\u0074\u0074\u006c\u0065\u006d\u0065\u006e\u0074");};_dbfdc :=args [2].ValueNumber ;if _dbfdc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0054\u0042\u0049\u004c\u004c\u0059\u0049\u0045\u004c\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020p\u0072 \u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_abdcb :=(100-_dbfdc )/_dbfdc ;_ceg :=360/_cgfc ;return MakeNumberResult (_abdcb *_ceg );};

// Error is an error expression.
type Error struct{_eacb string };var _dcga string =string ([]byte {92});func (_eefe *Lexer )lex (_eebfe _g .Reader ){_eacdf ,_gacaa ,_ccccc :=0,0,0;_cdeed :=-1;_gecb ,_cgafg ,_fdab :=0,0,0;_ =_fdab ;_fddca :=1;_ =_fddca ;_daccf :=make ([]byte ,4096);_bbcd :=false ;for !_bbcd {_bgfgf :=0;if _gecb > 0{_bgfgf =_gacaa -_gecb ;};_gacaa =0;_gage ,_ccecg :=_eebfe .Read (_daccf [_bgfgf :]);if _gage ==0||_ccecg !=nil {_bbcd =true ;};_ccccc =_gage +_bgfgf ;if _ccccc < len (_daccf ){_cdeed =_ccccc ;};{_eacdf =_bdcec ;_gecb =0;_cgafg =0;_fdab =0;};{var _gedac int ;var _dbge uint ;if _gacaa ==_ccccc {goto _daag ;};if _eacdf ==0{goto _acdag ;};_eggdd :_gedac =int (_gacbgc [_eacdf ]);_dbge =uint (_gabd [_gedac ]);_gedac ++;for ;_dbge > 0;_dbge --{_gedac ++;switch _gabd [_gedac -1]{case 2:_gecb =_gacaa ;};};switch _eacdf {case 30:switch _daccf [_gacaa ]{case 34:goto _face ;case 35:goto _gccd ;case 36:goto _cgcaf ;case 38:goto _bafae ;case 39:goto _abeb ;case 40:goto _bdbcf ;case 41:goto _dcec ;case 42:goto _ebbg ;case 43:goto _edfda ;case 44:goto _eddeda ;case 45:goto _bbccc ;case 47:goto _fcfe ;case 58:goto _ddadf ;case 59:goto _abgc ;case 60:goto _eecg ;case 61:goto _bede ;case 62:goto _cdcab ;case 63:goto _gdeda ;case 70:goto _bgecg ;case 84:goto _babeb ;case 92:goto _dcfda ;case 94:goto _gcdee ;case 95:goto _gaef ;case 123:goto _bbdca ;case 125:goto _ebcfg ;};switch {case _daccf [_gacaa ]< 65:switch {case _daccf [_gacaa ]> 37:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _bbfba ;};case _daccf [_gacaa ]>=33:goto _gdeda ;};case _daccf [_gacaa ]> 90:switch {case _daccf [_gacaa ]> 93:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _bfbdf ;};case _daccf [_gacaa ]>=91:goto _gdeda ;};default:goto _edgg ;};goto _caafe ;case 1:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _bagff ;case 123:goto _bagff ;case 125:goto _bagff ;};switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _bagff ;};case _daccf [_gacaa ]> 45:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _bagff ;};case _daccf [_gacaa ]>=58:goto _bagff ;};default:goto _bagff ;};goto _caafe ;case 0:goto _acdag ;case 2:if _daccf [_gacaa ]==34{goto _ggdg ;};goto _face ;case 31:if _daccf [_gacaa ]==34{goto _face ;};goto _agfdcg ;case 3:switch _daccf [_gacaa ]{case 78:goto _fffde ;case 82:goto _fcca ;};goto _gdeda ;case 4:switch _daccf [_gacaa ]{case 47:goto _dgfcc ;case 85:goto _eebad ;};goto _gdeda ;case 5:if _daccf [_gacaa ]==65{goto _cgfce ;};goto _gdeda ;case 6:switch _daccf [_gacaa ]{case 76:goto _fbce ;case 77:goto _eceg ;};goto _gdeda ;case 7:if _daccf [_gacaa ]==76{goto _eceg ;};goto _gdeda ;case 8:if _daccf [_gacaa ]==33{goto _cgfce ;};goto _gdeda ;case 9:if _daccf [_gacaa ]==69{goto _fcffa ;};goto _gdeda ;case 10:if _daccf [_gacaa ]==70{goto _aecb ;};goto _gdeda ;case 11:if _daccf [_gacaa ]==33{goto _dfeeg ;};goto _gdeda ;case 12:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _gdeda ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=45{goto _gdeda ;};case _daccf [_gacaa ]>=34:goto _gdeda ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]< 65:if 58<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=63{goto _gdeda ;};case _daccf [_gacaa ]> 90:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _gdeda ;};default:goto _facgd ;};default:goto _ddcg ;};goto _caafe ;case 13:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _gdeda ;case 58:goto _geefd ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=45{goto _gdeda ;};case _daccf [_gacaa ]>=34:goto _gdeda ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _gdeda ;};case _daccf [_gacaa ]>=59:goto _gdeda ;};default:goto _ddcg ;};goto _caafe ;case 14:if _daccf [_gacaa ]==36{goto _bbbb ;};if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _fagab ;};goto _bagff ;case 15:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _fagab ;};goto _bagff ;case 32:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _fagab ;};goto _dcgad ;case 16:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 47:goto _gdeda ;case 58:goto _bagg ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 45:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _bbba ;};case _daccf [_gacaa ]>=34:goto _gdeda ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]> 90:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _gdeda ;};case _daccf [_gacaa ]>=65:goto _facgd ;};default:goto _gdeda ;};goto _caafe ;case 17:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _bagff ;case 123:goto _bagff ;case 125:goto _bagff ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=45{goto _bagff ;};case _daccf [_gacaa ]>=34:goto _bagff ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _bagff ;};case _daccf [_gacaa ]>=58:goto _bagff ;};default:goto _bbba ;};goto _caafe ;case 33:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _acgd ;case 123:goto _acgd ;case 125:goto _acgd ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=45{goto _acgd ;};case _daccf [_gacaa ]>=34:goto _acgd ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _acgd ;};case _daccf [_gacaa ]>=58:goto _acgd ;};default:goto _bbba ;};goto _caafe ;case 18:if _daccf [_gacaa ]==36{goto _ddcgg ;};if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _fbadfd ;};goto _bagff ;case 19:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _fbadfd ;};goto _bagff ;case 34:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _fbadfd ;};goto _eede ;case 20:switch _daccf [_gacaa ]{case 39:goto _gdeda ;case 42:goto _gdeda ;case 47:goto _gdeda ;case 58:goto _gdeda ;case 63:goto _gdeda ;};if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=93{goto _gdeda ;};goto _abcgc ;case 21:switch _daccf [_gacaa ]{case 39:goto _fbbg ;case 42:goto _gdeda ;case 47:goto _gdeda ;case 58:goto _gdeda ;case 63:goto _gdeda ;};if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=93{goto _gdeda ;};goto _abcgc ;case 22:if _daccf [_gacaa ]==33{goto _eebdb ;};goto _gdeda ;case 35:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _gcdf ;case 58:goto _geefd ;case 101:goto _ebaed ;case 123:goto _cbbc ;case 125:goto _cbbc ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=47{goto _cbbc ;};case _daccf [_gacaa ]>=34:goto _cbbc ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _cbbc ;};case _daccf [_gacaa ]>=59:goto _cbbc ;};default:goto _bbfba ;};goto _caafe ;case 36:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _cbbc ;case 101:goto _ebaed ;case 123:goto _cbbc ;case 125:goto _cbbc ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=45{goto _cbbc ;};case _daccf [_gacaa ]>=34:goto _cbbc ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _cbbc ;};case _daccf [_gacaa ]>=58:goto _cbbc ;};default:goto _gcdf ;};goto _caafe ;case 23:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _fabc ;case 123:goto _fabc ;case 125:goto _fabc ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=45{goto _fabc ;};case _daccf [_gacaa ]>=34:goto _fabc ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _fabc ;};case _daccf [_gacaa ]>=58:goto _fabc ;};default:goto _dcgg ;};goto _caafe ;case 37:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 47:goto _cbbc ;case 123:goto _cbbc ;case 125:goto _cbbc ;};switch {case _daccf [_gacaa ]< 48:switch {case _daccf [_gacaa ]> 35:if 37<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=45{goto _cbbc ;};case _daccf [_gacaa ]>=34:goto _cbbc ;};case _daccf [_gacaa ]> 57:switch {case _daccf [_gacaa ]> 63:if 91<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=94{goto _cbbc ;};case _daccf [_gacaa ]>=58:goto _cbbc ;};default:goto _dcgg ;};goto _caafe ;case 38:switch _daccf [_gacaa ]{case 61:goto _gdga ;case 62:goto _gfge ;};goto _eecf ;case 39:if _daccf [_gacaa ]==61{goto _fbca ;};goto _fbadf ;case 24:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _gdeda ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _gdeda ;};default:goto _gdeda ;};goto _caafe ;case 40:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _fccf ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _fccf ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 41:switch _daccf [_gacaa ]{case 46:goto _bebb ;case 92:goto _bebb ;case 95:goto _bebb ;};switch {case _daccf [_gacaa ]< 65:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _bebb ;};case _daccf [_gacaa ]> 90:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _bebb ;};default:goto _bebb ;};goto _cfeeg ;case 42:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 43:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _acgd ;case 125:goto _acgd ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _acgd ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};default:goto _acgd ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _fccf ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _acgd ;};default:goto _acgd ;};goto _caafe ;case 44:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _bagff ;case 125:goto _bagff ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _bagff ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _bagff ;};default:goto _bagff ;};goto _caafe ;case 25:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 65:goto _agfed ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _gdeda ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 66<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _gdeda ;};default:goto _gdeda ;};goto _caafe ;case 45:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 76:goto _bfeeb ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 46:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 83:goto _bgffe ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 47:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 69:goto _acfg ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 26:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 79:goto _bcdaf ;case 82:goto _agdcd ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _gdeda ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _gdeda ;};default:goto _gdeda ;};goto _caafe ;case 48:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 68:goto _cdgd ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 49:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 79:goto _feee ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 50:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 36:goto _cdbf ;case 40:goto _cfbdf ;case 46:goto _fccf ;case 58:goto _bagg ;case 85:goto _bgffe ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 59:switch {case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _cgeaa ;};case _daccf [_gacaa ]>=34:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _cbge ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 27:switch _daccf [_gacaa ]{case 46:goto _bebb ;case 92:goto _bebb ;case 95:goto _bebb ;};switch {case _daccf [_gacaa ]< 65:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _bebb ;};case _daccf [_gacaa ]> 90:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _bebb ;};default:goto _bebb ;};goto _gdeda ;case 28:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eeed ;case 120:goto _cdagf ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _gdeda ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _gdeda ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _gdeda ;};default:goto _gdeda ;};goto _caafe ;case 51:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eeed ;case 108:goto _efccb ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 52:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eeed ;case 102:goto _bacg ;case 110:goto _gfbcc ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 53:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eeed ;case 110:goto _afgb ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 54:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _egdeg ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 55:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _aeaeg ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _aeaeg ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 56:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 40:goto _fggfeg ;case 46:goto _aeaeg ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _aeaeg ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _aeaeg ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 57:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eeed ;case 109:goto _aeff ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 58:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _gfegc ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _cfeeg ;case 125:goto _cfeeg ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _cfeeg ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _cfeeg ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _cfeeg ;};default:goto _cfeeg ;};goto _caafe ;case 59:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eagd ;case 123:goto _bagff ;case 125:goto _bagff ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _bagff ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _bagff ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eagd ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _bagff ;};default:goto _bagff ;};goto _caafe ;case 29:switch _daccf [_gacaa ]{case 33:goto _aggg ;case 46:goto _eeed ;case 92:goto _bebb ;case 95:goto _eeed ;case 123:goto _gdeda ;case 125:goto _gdeda ;};switch {case _daccf [_gacaa ]< 58:switch {case _daccf [_gacaa ]< 37:if 34<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=35{goto _gdeda ;};case _daccf [_gacaa ]> 47:if 48<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=57{goto _eeed ;};default:goto _gdeda ;};case _daccf [_gacaa ]> 63:switch {case _daccf [_gacaa ]< 91:if 65<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=90{goto _eeed ;};case _daccf [_gacaa ]> 94:if 97<=_daccf [_gacaa ]&&_daccf [_gacaa ]<=122{goto _eeed ;};default:goto _gdeda ;};default:goto _gdeda ;};goto _caafe ;};_gdeda :_eacdf =0;goto _gedab ;_caafe :_eacdf =1;goto _gedab ;_face :_eacdf =2;goto _gedab ;_gccd :_eacdf =3;goto _gedab ;_fffde :_eacdf =4;goto _gedab ;_dgfcc :_eacdf =5;goto _gedab ;_eebad :_eacdf =6;goto _gedab ;_fbce :_eacdf =7;goto _gedab ;_eceg :_eacdf =8;goto _gedab ;_fcca :_eacdf =9;goto _gedab ;_fcffa :_eacdf =10;goto _gedab ;_aecb :_eacdf =11;goto _gedab ;_cgcaf :_eacdf =12;goto _gedab ;_ddcg :_eacdf =13;goto _gedab ;_geefd :_eacdf =14;goto _gedab ;_bbbb :_eacdf =15;goto _gedab ;_facgd :_eacdf =16;goto _gedab ;_cdbf :_eacdf =17;goto _gedab ;_bagg :_eacdf =18;goto _gedab ;_ddcgg :_eacdf =19;goto _gedab ;_abeb :_eacdf =20;goto _gedab ;_abcgc :_eacdf =21;goto _gedab ;_fbbg :_eacdf =22;goto _gedab ;_ebaed :_eacdf =23;goto _gedab ;_edgg :_eacdf =24;goto _gedab ;_bgecg :_eacdf =25;goto _gedab ;_babeb :_eacdf =26;goto _gedab ;_dcfda :_eacdf =27;goto _gedab ;_gaef :_eacdf =28;goto _gedab ;_bfbdf :_eacdf =29;goto _gedab ;_bagff :_eacdf =30;goto _gfagb ;_aggg :_eacdf =30;goto _ageeg ;_cgfce :_eacdf =30;goto _fgabc ;_dfeeg :_eacdf =30;goto _bgdcc ;_eebdb :_eacdf =30;goto _fbbdfc ;_fabc :_eacdf =30;goto _cega ;_cfbdf :_eacdf =30;goto _agfga ;_bafae :_eacdf =30;goto _dbfc ;_bdbcf :_eacdf =30;goto _fbae ;_dcec :_eacdf =30;goto _gfab ;_ebbg :_eacdf =30;goto _ffcde ;_edfda :_eacdf =30;goto _gaee ;_eddeda :_eacdf =30;goto _aacbb ;_bbccc :_eacdf =30;goto _ggfff ;_fcfe :_eacdf =30;goto _adfcb ;_ddadf :_eacdf =30;goto _dccf ;_abgc :_eacdf =30;goto _fbgb ;_bede :_eacdf =30;goto _gdfge ;_gcdee :_eacdf =30;goto _edbad ;_bbdca :_eacdf =30;goto _daffc ;_ebcfg :_eacdf =30;goto _dbbc ;_agfdcg :_eacdf =30;goto _ggge ;_dcgad :_eacdf =30;goto _bdeb ;_acgd :_eacdf =30;goto _ffgbga ;_eede :_eacdf =30;goto _ddgc ;_cbbc :_eacdf =30;goto _cebf ;_eecf :_eacdf =30;goto _dcbe ;_gdga :_eacdf =30;goto _dfcd ;_gfge :_eacdf =30;goto _gggfa ;_fbadf :_eacdf =30;goto _fggee ;_fbca :_eacdf =30;goto _cbbe ;_cfeeg :_eacdf =30;goto _bagee ;_fggfeg :_eacdf =30;goto _agfdcc ;_ggdg :_eacdf =31;goto _aeeaea ;_fagab :_eacdf =32;goto _gedab ;_bbba :_eacdf =33;goto _eced ;_fbadfd :_eacdf =34;goto _gedab ;_bbfba :_eacdf =35;goto _aeeae ;_gcdf :_eacdf =36;goto _aeeae ;_dcgg :_eacdf =37;goto _aeeae ;_eecg :_eacdf =38;goto _gedab ;_cdcab :_eacdf =39;goto _gedab ;_fccf :_eacdf =40;goto _aeffg ;_bebb :_eacdf =41;goto _gedab ;_eeed :_eacdf =42;goto _aeffg ;_cgeaa :_eacdf =43;goto _eced ;_cbge :_eacdf =44;goto _aeffg ;_acfg :_eacdf =44;goto _dgae ;_feee :_eacdf =44;goto _gdacg ;_agfed :_eacdf =45;goto _aeffg ;_bfeeb :_eacdf =46;goto _aeffg ;_bgffe :_eacdf =47;goto _aeffg ;_bcdaf :_eacdf =48;goto _aeffg ;_cdgd :_eacdf =49;goto _aeffg ;_agdcd :_eacdf =50;goto _aeffg ;_cdagf :_eacdf =51;goto _aeffg ;_efccb :_eacdf =52;goto _aeffg ;_bacg :_eacdf =53;goto _aeffg ;_afgb :_eacdf =54;goto _aeffg ;_egdeg :_eacdf =55;goto _aeffg ;_aeaeg :_eacdf =56;goto _aeffg ;_gfbcc :_eacdf =57;goto _aeffg ;_aeff :_eacdf =58;goto _aeffg ;_gfegc :_eacdf =59;goto _aeffg ;_eagd :_eacdf =59;goto _ffecc ;_fgabc :_gedac =3;goto _bcbg ;_bgdcc :_gedac =5;goto _bcbg ;_ageeg :_gedac =7;goto _bcbg ;_fbbdfc :_gedac =9;goto _bcbg ;_agfga :_gedac =11;goto _bcbg ;_agfdcc :_gedac =13;goto _bcbg ;_dbfc :_gedac =15;goto _bcbg ;_daffc :_gedac =17;goto _bcbg ;_dbbc :_gedac =19;goto _bcbg ;_fbae :_gedac =21;goto _bcbg ;_gfab :_gedac =23;goto _bcbg ;_gaee :_gedac =25;goto _bcbg ;_ggfff :_gedac =27;goto _bcbg ;_ffcde :_gedac =29;goto _bcbg ;_adfcb :_gedac =31;goto _bcbg ;_edbad :_gedac =33;goto _bcbg ;_gdfge :_gedac =35;goto _bcbg ;_dfcd :_gedac =37;goto _bcbg ;_cbbe :_gedac =39;goto _bcbg ;_gggfa :_gedac =41;goto _bcbg ;_dccf :_gedac =43;goto _bcbg ;_fbgb :_gedac =45;goto _bcbg ;_aacbb :_gedac =47;goto _bcbg ;_cebf :_gedac =49;goto _bcbg ;_ffgbga :_gedac =51;goto _bcbg ;_bdeb :_gedac =53;goto _bcbg ;_ddgc :_gedac =55;goto _bcbg ;_bagee :_gedac =57;goto _bcbg ;_ggge :_gedac =59;goto _bcbg ;_dcbe :_gedac =61;goto _bcbg ;_fggee :_gedac =63;goto _bcbg ;_cega :_gedac =65;goto _bcbg ;_gfagb :_gedac =67;goto _bcbg ;_dgae :_gedac =72;goto _bcbg ;_aeeae :_gedac =75;goto _bcbg ;_eced :_gedac =78;goto _bcbg ;_gdacg :_gedac =81;goto _bcbg ;_ffecc :_gedac =84;goto _bcbg ;_aeffg :_gedac =87;goto _bcbg ;_aeeaea :_gedac =90;goto _bcbg ;_bcbg :_dbge =uint (_gabd [_gedac ]);_gedac ++;for ;_dbge > 0;_dbge --{_gedac ++;switch _gabd [_gedac -1]{case 3:_cgafg =_gacaa +1;case 4:_fdab =1;case 5:_fdab =2;case 6:_fdab =3;case 7:_fdab =4;case 8:_fdab =11;case 9:_fdab =14;case 10:_fdab =15;case 11:_cgafg =_gacaa +1;{_eefe .emit (_gdda ,_daccf [_gecb :_cgafg ]);};case 12:_cgafg =_gacaa +1;{_eefe .emit (_agga ,_daccf [_gecb :_cgafg ]);};case 13:_cgafg =_gacaa +1;{_eefe .emit (_gbab ,_daccf [_gecb :_cgafg -1]);};case 14:_cgafg =_gacaa +1;{_eefe .emit (_gbab ,_daccf [_gecb +1:_cgafg -2]);};case 15:_cgafg =_gacaa +1;{_eefe .emit (_fbgcc ,_daccf [_gecb :_cgafg -1]);};case 16:_cgafg =_gacaa +1;{_eefe .emit (_fbgcc ,_daccf [_gecb :_cgafg -1]);};case 17:_cgafg =_gacaa +1;{_eefe .emit (_ccaa ,_daccf [_gecb :_cgafg ]);};case 18:_cgafg =_gacaa +1;{_eefe .emit (_adaee ,_daccf [_gecb :_cgafg ]);};case 19:_cgafg =_gacaa +1;{_eefe .emit (_cdbg ,_daccf [_gecb :_cgafg ]);};case 20:_cgafg =_gacaa +1;{_eefe .emit (_eaffe ,_daccf [_gecb :_cgafg ]);};case 21:_cgafg =_gacaa +1;{_eefe .emit (_gafba ,_daccf [_gecb :_cgafg ]);};case 22:_cgafg =_gacaa +1;{_eefe .emit (_dbefe ,_daccf [_gecb :_cgafg ]);};case 23:_cgafg =_gacaa +1;{_eefe .emit (_gbfd ,_daccf [_gecb :_cgafg ]);};case 24:_cgafg =_gacaa +1;{_eefe .emit (_edcgd ,_daccf [_gecb :_cgafg ]);};case 25:_cgafg =_gacaa +1;{_eefe .emit (_cdfg ,_daccf [_gecb :_cgafg ]);};case 26:_cgafg =_gacaa +1;{_eefe .emit (_fefc ,_daccf [_gecb :_cgafg ]);};case 27:_cgafg =_gacaa +1;{_eefe .emit (_agab ,_daccf [_gecb :_cgafg ]);};case 28:_cgafg =_gacaa +1;{_eefe .emit (_ecbg ,_daccf [_gecb :_cgafg ]);};case 29:_cgafg =_gacaa +1;{_eefe .emit (_cffa ,_daccf [_gecb :_cgafg ]);};case 30:_cgafg =_gacaa +1;{_eefe .emit (_dfdgc ,_daccf [_gecb :_cgafg ]);};case 31:_cgafg =_gacaa +1;{_eefe .emit (_adgdd ,_daccf [_gecb :_cgafg ]);};case 32:_cgafg =_gacaa +1;{_eefe .emit (_gebg ,_daccf [_gecb :_cgafg ]);};case 33:_cgafg =_gacaa +1;{_eefe .emit (_dgddd ,_daccf [_gecb :_cgafg ]);};case 34:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_fdfc ,_daccf [_gecb :_cgafg ]);};case 35:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_gbcf ,_daccf [_gecb :_cgafg ]);};case 36:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_bgfaf ,_daccf [_gecb :_cgafg ]);};case 37:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_eedaa ,_daccf [_gecb :_cgafg ]);};case 38:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_fafeb ,_daccf [_gecb :_cgafg ]);};case 39:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_debcf ,_daccf [_gecb +1:_cgafg -1]);};case 40:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_edgcf ,_daccf [_gecb :_cgafg ]);};case 41:_cgafg =_gacaa ;_gacaa --;{_eefe .emit (_dafee ,_daccf [_gecb :_cgafg ]);};case 42:_gacaa =(_cgafg )-1;{_eefe .emit (_fdfc ,_daccf [_gecb :_cgafg ]);};case 43:switch _fdab {case 0:{_eacdf =0;goto _gedab ;};case 1:{_gacaa =(_cgafg )-1;_eefe .emit (_agcd ,_daccf [_gecb :_cgafg ]);};case 2:{_gacaa =(_cgafg )-1;_eefe .emit (_fdfc ,_daccf [_gecb :_cgafg ]);};case 3:{_gacaa =(_cgafg )-1;_eefe .emit (_gbcf ,_daccf [_gecb :_cgafg ]);};case 4:{_gacaa =(_cgafg )-1;_eefe .emit (_dffg ,_daccf [_gecb :_cgafg ]);};case 11:{_gacaa =(_cgafg )-1;_eefe .emit (_cfba ,_daccf [_gecb :_cgafg ]);};case 14:{_gacaa =(_cgafg )-1;_eefe .emit (_fafeb ,_daccf [_gecb :_cgafg ]);};case 15:{_gacaa =(_cgafg )-1;_eefe .emit (_debcf ,_daccf [_gecb +1:_cgafg -1]);};};};};goto _gedab ;_gedab :_gedac =int (_abef [_eacdf ]);_dbge =uint (_gabd [_gedac ]);_gedac ++;for ;_dbge > 0;_dbge --{_gedac ++;switch _gabd [_gedac -1]{case 0:_gecb =0;case 1:_fdab =0;};};if _eacdf ==0{goto _acdag ;};if _gacaa ++;_gacaa !=_ccccc {goto _eggdd ;};_daag :{};if _gacaa ==_cdeed {switch _eacdf {case 1:goto _bagff ;case 2:goto _bagff ;case 31:goto _agfdcg ;case 14:goto _bagff ;case 15:goto _bagff ;case 32:goto _dcgad ;case 17:goto _bagff ;case 33:goto _acgd ;case 18:goto _bagff ;case 19:goto _bagff ;case 34:goto _eede ;case 35:goto _cbbc ;case 36:goto _cbbc ;case 23:goto _fabc ;case 37:goto _cbbc ;case 38:goto _eecf ;case 39:goto _fbadf ;case 40:goto _cfeeg ;case 41:goto _cfeeg ;case 42:goto _cfeeg ;case 43:goto _acgd ;case 44:goto _bagff ;case 45:goto _cfeeg ;case 46:goto _cfeeg ;case 47:goto _cfeeg ;case 48:goto _cfeeg ;case 49:goto _cfeeg ;case 50:goto _cfeeg ;case 51:goto _cfeeg ;case 52:goto _cfeeg ;case 53:goto _cfeeg ;case 54:goto _cfeeg ;case 55:goto _cfeeg ;case 56:goto _cfeeg ;case 57:goto _cfeeg ;case 58:goto _cfeeg ;case 59:goto _bagff ;};};_acdag :{};};if _gecb > 0{copy (_daccf [0:],_daccf [_gecb :]);};};_ =_cdeed ;if _eacdf ==_gdff {_eefe .emit (_acafc ,nil );};close (_eefe ._ddbbc );};

// Power is an implementation of the Excel POWER function that raises a number
// to a power. It requires two numeric arguments.
func Power (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};_ceaeb :=args [0].AsNumber ();if _ceaeb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_bcbfb :=args [1].AsNumber ();if _bcbfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063\u006f\u006e\u0064\u0020a\u0072\u0067\u0075m\u0065\u006e\u0074\u0020t\u006f\u0020\u0050\u004f\u0057\u0045\u0052\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};return MakeNumberResult (_bb .Pow (_ceaeb .ValueNumber ,_bcbfb .ValueNumber ));};const _aae ="\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030-\u0039]\u0029\u002b\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";const _ccba ="\u0028\u0028\u005b\u0030\u002d\u0039]\u0029\u002b\u0029:\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b(\\\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u003f\u0029\u0028\u0020\u0028\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// IsLogical is an implementation of the Excel ISLOGICAL() function.
func IsLogical (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004c\u004f\u0047\u0049\u0043A\u004c\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cadg :=args [0].Ref ;if _cadg .Type !=ReferenceTypeCell {return MakeErrorResult ("I\u0053\u004c\u004f\u0047\u0049\u0043\u0041\u004c\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0065\u0020\u0066\u0069\u0072\u0073t\u0020a\u0072\u0067\u0075\u006de\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065");};return MakeBoolResult (ctx .Cell (_cadg .Value ,ev ).IsBoolean );};

// Base is an implementation of the Excel BASE function that returns a string
// form of an integer in a specified base and of a minimum length with padded
// zeros.
func Base (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u0042\u0041S\u0045\u0028\u0029\u0020a\u006c\u006co\u0077\u0073\u0020\u0061\u0074\u0020\u006d\u006fs\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_ebdfb :=args [0].AsNumber ();if _ebdfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ddbca :=args [1].AsNumber ();if _ddbca .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073\u0065\u0063o\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042\u0041\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065 \u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccbc :=int (_ddbca .ValueNumber );if _ccbc < 0||_ccbc > 36{return MakeErrorResult ("\u0072\u0061\u0064\u0069\u0078\u0020m\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0069\u006e\u0020\u0074\u0068\u0065 \u0072\u0061\u006e\u0067\u0065\u0020\u005b0\u002c\u0033\u0036\u005d");};_abbe :=0;if len (args )> 2{_ggba :=args [2].AsNumber ();if _ggba .Type !=ResultTypeNumber {return MakeErrorResult ("\u0074\u0068\u0069\u0072\u0064 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0042A\u0053\u0045\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_abbe =int (_ggba .ValueNumber );};_fgea :=_ea .FormatInt (int64 (_ebdfb .ValueNumber ),_ccbc );if len (_fgea )< _abbe {_fgea =_c .Repeat ("\u0030",_abbe -len (_fgea ))+_fgea ;};return MakeStringResult (_fgea );};

// Combin is an implementation of the Excel COMBINA function whic returns the
// number of combinations.
func Combin (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0043\u004f\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_ceeff :=args [0].AsNumber ();_gcag :=args [1].AsNumber ();if _ceeff .Type !=ResultTypeNumber ||_gcag .Type !=ResultTypeNumber {return MakeErrorResult ("C\u004f\u004d\u0042\u0049\u004e\u0028)\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065r\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_aadd :=_bb .Trunc (_ceeff .ValueNumber );_ceced :=_bb .Trunc (_gcag .ValueNumber );if _ceced > _aadd {return MakeErrorResult ("\u0043O\u004d\u0042\u0049\u004e\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006b\u0020\u003c\u003d\u0020\u006e");};if _ceced ==_aadd ||_ceced ==0{return MakeNumberResult (1);};_gfcdgf :=float64 (1);for _cbdf :=float64 (1);_cbdf <=_ceced ;_cbdf ++{_gfcdgf *=(_aadd +1-_cbdf )/_cbdf ;};return MakeNumberResult (_gfcdgf );};

// Edate is an implementation of the Excel EDATE() function.
func Edate (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0045\u0044\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077o\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dcgf :=args [1].ValueNumber ;_abca :=args [0];var _dbdb float64 ;switch _abca .Type {case ResultTypeEmpty :return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");case ResultTypeNumber :_dbdb =_abca .ValueNumber ;case ResultTypeString :_eda :=DateValue ([]Result {args [0]});if _eda .Type ==ResultTypeError {return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_dbdb =_eda .ValueNumber ;default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};_daba :=_adg (_dbdb );_fae :=_daba .AddDate (0,int (_dcgf ),0);_cdc ,_deg ,_aacf :=_fae .Date ();_dbbb :=_aaa (_cdc ,int (_deg ),_aacf );if _dbbb < 1{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0045\u0044A\u0054\u0045");};return MakeNumberResult (_dbbb );};

// ISBLANK is an implementation of the Excel ISBLANK() function.
func IsBlank (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0042\u004c\u0041\u004e\u004b(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeEmpty );};

// Column implements the Excel COLUMN function.
func Column (args []Result )Result {if len (args )< 1{return MakeErrorResult ("\u0043\u004f\u004c\u0055M\u004e\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_decb :=args [0].Ref ;if _decb .Type !=ReferenceTypeCell {return MakeErrorResult ("\u0043\u004f\u004c\u0055\u004dN\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063e");};_gfbe ,_adcd :=_bd .ParseCellReference (_decb .Value );if _adcd !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072re\u0063t\u0020\u0072\u0065\u0066\u0065r\u0065\u006e\u0063\u0065\u003a\u0020"+_decb .Value );};return MakeNumberResult (float64 (_gfbe .ColumnIdx +1));};const _dgg ="\u0028(\u005b0\u002d\u0039\u005d\u0029\u002b)\u0020\u0028a\u006d\u007c\u0070\u006d\u0029";const _ecbg =57372;func _bge (_afdab ,_accbc ,_cbgd ,_bba int )int {if _accbc > _cbgd {return 0;};if _cbbbf (_bba ){return (_cbgd -_accbc +1)*30;};_cfd :=0;for _dccc :=_accbc ;_dccc <=_cbgd ;_dccc ++{_cfd +=_abg (_afdab ,_dccc );};return _cfd ;};var _gbf =map[string ]*_eb .Regexp {};func _cbfc (_aagec string )string {_aagec =_c .Replace (_aagec ,"\u000a","\u005c\u006e",-1);_aagec =_c .Replace (_aagec ,"\u000d","\u005c\u0072",-1);_aagec =_c .Replace (_aagec ,"\u0009","\u005c\u0074",-1);return _aagec ;};func _defb (_daca string ,_ecgfc []Result )(*parsedReplaceObject ,Result ){if len (_ecgfc )!=4{return nil ,MakeErrorResult (_daca +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _ecgfc [0].Type !=ResultTypeString {return nil ,MakeErrorResult (_daca +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072s\u0074\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073t\u0072\u0069\u006e\u0067");};_befc :=_ecgfc [0].ValueString ;if _ecgfc [1].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_daca +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u006eu\u006db\u0065\u0072");};_gbbfe :=int (_ecgfc [1].ValueNumber )-1;if _ecgfc [2].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_daca +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0069r\u0064\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_dce :=int (_ecgfc [2].ValueNumber );if _ecgfc [3].Type !=ResultTypeString {return nil ,MakeErrorResult (_daca +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u006f\u0075\u0072\u0074\u0068\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062e \u0061\u0020\u0073t\u0072i\u006e\u0067");};_bdfbe :=_ecgfc [3].ValueString ;return &parsedReplaceObject {_befc ,_gbbfe ,_dce ,_bdfbe },_dbc ;};func _abddg (_cbag ,_gccfc ,_eeage Reference )string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0073\u003a\u0025\u0073",_cbag .Value ,_gccfc .Value ,_eeage .Value );};

// CountIf implements the COUNTIF function.
func CountIf (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0073");};_gcga :=args [0];if _gcga .Type !=ResultTypeArray &&_gcga .Type !=ResultTypeList {return MakeErrorResult ("\u0043O\u0055\u004eT\u0049\u0046\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0066\u0069\u0072\u0073\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020t\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_cggf :=_acbfe (args [1]);_gbbeb :=0;for _ ,_dbbd :=range _gbaa (_gcga ){for _ ,_efcef :=range _dbbd {if _cgcdg (_efcef ,_cggf ){_gbbeb ++;};};};return MakeNumberResult (float64 (_gbbeb ));};func _afba (_aaeg ,_cacf ,_dee ,_bea ,_bddc float64 ,_cgab int )Result {_dfe ,_fdgf :=_gaa (_aaeg ,_cacf ,_cgab );if _fdgf .Type ==ResultTypeError {return _fdgf ;};_adcb ,_babd :=_aeeb (_aaeg ,_cacf ,int (_bddc ),_cgab );if _babd .Type ==ResultTypeError {return _babd ;};_cbebe :=0.0;_gdeg :=0.0;_dee *=100/_bddc ;_bea /=_bddc ;_bea ++;_fca :=_dfe *_bddc -_adcb ;for _fbff :=1.0;_fbff < _adcb ;_fbff ++{_edgb :=_fbff +_fca ;_aacfg :=_dee /_bb .Pow (_bea ,_edgb );_gdeg +=_aacfg ;_cbebe +=_edgb *_aacfg ;};_bdgab :=(_dee +100)/_bb .Pow (_bea ,_adcb +_fca );_gdeg +=_bdgab ;_cbebe +=(_adcb +_fca )*_bdgab ;_cbebe /=_gdeg ;_cbebe /=_bddc ;return MakeNumberResult (_cbebe );};

// Len is an implementation of the Excel LEN function that returns length of a string
func Len (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_bgffa :=args [0].AsString ();if _bgffa .Type !=ResultTypeString {return MakeErrorResult ("\u004c\u0045N\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067l\u0065\u0020\u0073\u0074\u0072\u0069\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeNumberResult (float64 (len (_bgffa .ValueString )));};func _defc (_gfcdd Result ,_gfcg int )[]Result {_adga :=[]Result {};switch _gfcdd .Type {case ResultTypeList :_bgffd :=_gfcdd .ValueList ;_gded :=len (_bgffd );for _cbebb :=0;_cbebb < _gfcg ;_cbebb ++{if _cbebb < _gded {_adga =append (_adga ,_bgffd [_cbebb ]);}else {_adga =append (_adga ,MakeErrorResultType (ErrorTypeNA ,""));};};case ResultTypeNumber ,ResultTypeString ,ResultTypeError ,ResultTypeEmpty :for _cefb :=0;_cefb < _gfcg ;_cefb ++{_adga =append (_adga ,_gfcdd );};};return _adga ;};const _dafee =57371;const _ffc =86400000000000;func _adg (_bdc float64 )_fe .Time {_adb :=int64 ((_bdc -_bbc )*_ffc );return _fe .Unix (0,_adb ).UTC ()};

// DateValue is an implementation of the Excel DATEVALUE() function.
func DateValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0044A\u0054\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_bad :=_c .ToLower (args [0].ValueString );if !_accb (_bad ){_ ,_ ,_ ,_ ,_dcf ,_ebfd :=_cea (_bad );if _ebfd .Type ==ResultTypeError {_ebfd .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0044\u0041\u0054\u0045V\u0041\u004c\u0055\u0045";return _ebfd ;};if _dcf {return MakeNumberResult (0);};};_cbbg ,_aac ,_fcg ,_ ,_aeec :=_aace (_bad );if _aeec .Type ==ResultTypeError {return _aeec ;};return MakeNumberResult (_aaa (_cbbg ,_aac ,_fcg ));};const _dgddd =57376;var _bgcdc =[...]int {0,0,71,70,69,4,67,66,53,51,50,49,48,47,46,45,44,2};

// Mirr implements the Excel MIRR function.
func Mirr (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049R\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0073");};if args [0].Type !=ResultTypeList &&args [0].Type !=ResultTypeArray {return MakeErrorResult ("M\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006f\u0066\u0020ar\u0072\u0061\u0079 \u0074y\u0070\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0069\u006e\u0061\u006e\u0063e\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_aacb :=args [1].ValueNumber +1;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049\u0052\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0069\u006e\u0076\u0065\u0073\u0074\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bcac :=args [2].ValueNumber +1;if _bcac ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_ffccf :=_gbaa (args [0]);_acba :=float64 (len (_ffccf ));_dfdb ,_degd :=0.0,0.0;_fadd ,_gcfd :=1.0,1.0;_fdbg ,_bbfg :=false ,false ;for _ ,_daff :=range _ffccf {for _ ,_eefdb :=range _daff {if _eefdb .Type ==ResultTypeNumber &&!_eefdb .IsBoolean {_cedf :=_eefdb .ValueNumber ;if _cedf ==0{continue ;}else {if _cedf > 0{_fdbg =true ;_degd +=_eefdb .ValueNumber *_gcfd ;}else {_bbfg =true ;_dfdb +=_eefdb .ValueNumber *_fadd ;};_fadd /=_aacb ;_gcfd /=_bcac ;};};};};if !_fdbg ||!_bbfg {return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gdbea :=-_degd /_dfdb ;_gdbea *=_bb .Pow (_bcac ,_acba -1);_gdbea =_bb .Pow (_gdbea ,1/(_acba -1));return MakeNumberResult (_gdbea -1);};func _abgb (_egeab [][]Result )float64 {if len (_egeab )==2{_ggceg :=_egeab [0][0].AsNumber ();_fbgde :=_egeab [0][1].AsNumber ();_ffgg :=_egeab [1][0].AsNumber ();_ffcad :=_egeab [1][1].AsNumber ();if _ggceg .Type !=ResultTypeNumber ||_fbgde .Type !=ResultTypeNumber ||_ffgg .Type !=ResultTypeNumber ||_ffcad .Type !=ResultTypeNumber {return _bb .NaN ();};return _ggceg .ValueNumber *_ffcad .ValueNumber -_ffgg .ValueNumber *_fbgde .ValueNumber ;};_gdacf :=float64 (0);_accfe :=float64 (1);for _dada :=range _egeab {_gdacf +=_accfe *_egeab [0][_dada ].ValueNumber *_abgb (_edgc (_egeab ,_dada ));_accfe *=-1;};return _gdacf ;};

// Mod is an implementation of the Excel MOD function which returns the
// remainder after division. It requires two numeric argumnts.
func Mod (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_cbgc :=args [0].AsNumber ();_egff :=args [1].AsNumber ();if _cbgc .Type !=ResultTypeNumber ||_egff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u004fD(\u0029\u0020\u0072e\u0071\u0075\u0069\u0072es \u0074wo\u0020\u006e\u0075\u006d\u0065\u0072\u0069c \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};if _egff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"M\u004fD\u0028\u0029\u0020\u0064\u0069\u0076\u0069\u0064e\u0020\u0062\u0079\u0020ze\u0072\u006f");};_ebba ,_fbcgf :=_bb .Modf (_cbgc .ValueNumber /_egff .ValueNumber );if _fbcgf < 0{_ebba --;};return MakeNumberResult (_cbgc .ValueNumber -_egff .ValueNumber *_ebba );};func _gfbb (_bbcce ,_gcbfd ,_adegb ,_dbabc ,_baag float64 )float64 {var _bbbf float64 ;_bfee :=_baag /_adegb ;if _bfee >=1{_bfee =1;if _dbabc ==1{_bbbf =_bbcce ;}else {_bbbf =0;};}else {_bbbf =_bbcce *_bb .Pow (1-_bfee ,_dbabc -1);};_agcb :=_bbcce *_bb .Pow (1-_bfee ,_dbabc );var _fbgd float64 ;if _agcb < _gcbfd {_fbgd =_bbbf -_gcbfd ;}else {_fbgd =_bbbf -_agcb ;};if _fbgd < 0{_fbgd =0;};return _fbgd ;};var _ffad ,_cgaga ,_afbf ,_dfdd ,_eabea ,_cadd *_eb .Regexp ;func _ebdc (_cfee ,_ddfc ,_bcd ,_daebe float64 ,_agff int )float64 {var _fagf float64 ;if _cfee ==0{_fagf =_daebe +_bcd *_ddfc ;}else {_ebae :=_bb .Pow (1+_cfee ,_ddfc );if _agff ==1{_fagf =_daebe *_ebae +_bcd *(1+_cfee )*(_ebae -1)/_cfee ;}else {_fagf =_daebe *_ebae +_bcd *(_ebae -1)/_cfee ;};};return -_fagf ;};

// Eval evaluates and returns the result of the NamedRangeRef reference.
func (_fdabd NamedRangeRef )Eval (ctx Context ,ev Evaluator )Result {_bdeg :=ctx .NamedRange (_fdabd ._gdbf );_eeegc :=_bdeg .Value ;if _fbfgf ,_ggcfg :=ev .GetFromCache (_eeegc );_ggcfg {return _fbfgf ;};_febce :=_c .Split (_eeegc ,"\u0021");if len (_febce )!=2{return MakeErrorResult (_d .Sprintf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u006e\u0061\u006de\u0064 \u0072\u0061\u006e\u0067\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0025\u0073",_eeegc ));};_gffca :=ctx .Sheet (_febce [0]);_fbbdff :=_c .Split (_febce [1],"\u003a");switch len (_fbbdff ){case 1:_gefdg :=ev .Eval (_gffca ,_fbbdff [0]);ev .SetCache (_eeegc ,_gefdg );return _gefdg ;case 2:_cebe :=_aadf (_gffca ,ev ,_fbbdff [0],_fbbdff [1]);ev .SetCache (_eeegc ,_cebe );return _cebe ;};return MakeErrorResult (_d .Sprintf ("\u0075\u006es\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070e \u0025\u0073",_bdeg .Type ));};

// Update updates references in the BinaryExpr after removing a row/column.
func (_eba BinaryExpr )Update (q *_eg .UpdateQuery )Expression {_ggc :=_eba ;_ggc ._ed =_eba ._ed .Update (q );_ggc ._af =_eba ._af .Update (q );return _ggc ;};

// CountIfs implements the COUNTIFS function.
func CountIfs (args []Result )Result {_bdac :=_abafd (args ,false ,"\u0043\u004f\u0055\u004e\u0054\u0049\u0046\u0053");if _bdac .Type !=ResultTypeEmpty {return _bdac ;};_ecga :=_cfdg (args );return MakeNumberResult (float64 (len (_ecga )));};const _bgfaf =57346;func _addea (_dfge []Result ,_dbcb bool )Result {var _gge string ;if _dbcb {_gge ="\u004c\u0041\u0052G\u0045";}else {_gge ="\u0053\u004d\u0041L\u004c";};if len (_dfge )!=2{return MakeErrorResult (_gge +"\u0020\u0072\u0065qu\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_gfbfg :=_dfge [0];var _efdb [][]Result ;switch _gfbfg .Type {case ResultTypeArray :_efdb =_gfbfg .ValueArray ;case ResultTypeList :_efdb =[][]Result {_gfbfg .ValueList };default:return MakeErrorResult (_gge +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074 \u006f\u0066\u0020\u0074\u0079p\u0065\u0020a\u0072\u0072\u0061\u0079");};if len (_efdb )==0{return MakeErrorResult (_gge +"\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u006f\u0020c\u006f\u006e\u0074\u0061\u0069\u006e\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0031\u0020\u0072\u006f\u0077");};if _dfge [1].Type !=ResultTypeNumber {return MakeErrorResult (_gge +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074yp\u0065\u0020\u006eu\u006db\u0065\u0072");};_ggca :=_dfge [1].ValueNumber ;if _ggca < 1{return MakeErrorResultType (ErrorTypeNum ,_gge +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_gaec :=int (_ggca );if float64 (_gaec )!=_ggca {return MakeErrorResultType (ErrorTypeNum ,_gge +"\u0020\u0072e\u0071\u0075\u0069\u0072\u0065s\u0020\u0073\u0065\u0063\u006fn\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030");};_dcba :=[]float64 {};for _ ,_eedb :=range _efdb {for _ ,_afcbd :=range _eedb {if _afcbd .Type ==ResultTypeNumber {_dcba =append (_dcba ,_afcbd .ValueNumber );};};};if _gaec > len (_dcba ){return MakeErrorResultType (ErrorTypeNum ,_gge +" \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u006c\u0065s\u0073\u0020\u006f\u0072\u0020\u0065\u0071\u0075\u0061\u006c\u0020\u0074\u0068\u0061\u006e\u0020t\u0068\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072s\u0020\u0069\u006e\u0020t\u0068\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fgdc :=_dcc .MergeSort (_dcba );if _dbcb {return MakeNumberResult (_fgdc [len (_fgdc )-_gaec ]);}else {return MakeNumberResult (_fgdc [_gaec -1]);};};func _dece (_cead ,_fbbab []string )[]string {for _ ,_dfbbf :=range _fbbab {_cead =append (_cead ,_dfbbf );};return _cead ;};func _eea (){_gbf ["\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079"]=_eb .MustCompile ("\u005e"+_cgff +_gaf );_gbf ["\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y"]=_eb .MustCompile ("\u005e"+_dbd +_gaf );_gbf ["\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064"]=_eb .MustCompile ("\u005e"+_ggcf +_gaf );_gbf ["y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064"]=_eb .MustCompile ("\u005e"+_begb +_gaf );_fbbd ["\u0068\u0068"]=_eb .MustCompile (_ggcc +_dgg +"\u0024");_fbbd ["\u0068\u0068\u003am\u006d"]=_eb .MustCompile (_ggcc +_aae +"\u0024");_fbbd ["\u006d\u006d\u003as\u0073"]=_eb .MustCompile (_ggcc +_fdfb +"\u0024");_fbbd ["\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073"]=_eb .MustCompile (_ggcc +_ccba +"\u0024");_gcc =[]*_eb .Regexp {_eb .MustCompile ("\u005e"+_cgff +"\u0024"),_eb .MustCompile ("\u005e"+_dbd +"\u0024"),_eb .MustCompile ("\u005e"+_ggcf +"\u0024"),_eb .MustCompile ("\u005e"+_begb +"\u0024")};_fdf =[]*_eb .Regexp {_eb .MustCompile ("\u005e"+_dgg +"\u0024"),_eb .MustCompile ("\u005e"+_aae +"\u0024"),_eb .MustCompile ("\u005e"+_fdfb +"\u0024"),_eb .MustCompile ("\u005e"+_ccba +"\u0024")};};func _bgaa (_geab []Result ,_egbca bool )(float64 ,float64 ){_ddaeg :=0.0;_cgcg :=0.0;for _ ,_ebdce :=range _geab {switch _ebdce .Type {case ResultTypeNumber :if _egbca ||!_ebdce .IsBoolean {_cgcg +=_ebdce .ValueNumber ;_ddaeg ++;};case ResultTypeList ,ResultTypeArray :_dacbg ,_efaeb :=_bgaa (_ebdce .ListValues (),_egbca );_cgcg +=_dacbg ;_ddaeg +=_efaeb ;case ResultTypeString :if _egbca {_ddaeg ++;};case ResultTypeEmpty :};};return _cgcg ,_ddaeg ;};var _bbc float64 =25569.0;

// NewPrefixRangeExpr constructs a new range with prefix.
func NewPrefixRangeExpr (pfx ,from ,to Expression )Expression {_bfca ,_gaaaa ,_aebd :=_abcgg (from ,to );if _aebd !=nil {_bdg .Log .Debug (_aebd .Error ());return NewError (_aebd .Error ());};return PrefixRangeExpr {_baga :pfx ,_dfggb :_bfca ,_caga :_gaaaa };};

// Mduration implements the Excel MDURATION function.
func Mduration (args []Result )Result {_ddda ,_bcda :=_beff (args ,"\u004dD\u0055\u0052\u0041\u0054\u0049\u004fN");if _bcda .Type ==ResultTypeError {return _bcda ;};_bbag :=_ddda ._eaag ;_cgagd :=_ddda ._ecc ;_bfg :=_ddda ._gfgfg ;_eefb :=_ddda ._cgffd ;_dbfdd :=_ddda ._cdcd ;_adde :=_ddda ._ddfa ;_cabf :=_afba (_bbag ,_cgagd ,_bfg ,_eefb ,_dbfdd ,_adde );if _cabf .Type ==ResultTypeError {return _cabf ;};_dfba :=_cabf .ValueNumber /(1.0+_eefb /_dbfdd );return MakeNumberResult (_dfba );};

// MinA is an implementation of the Excel MINA() function.
func MinA (args []Result )Result {return _gdgb (args ,true )};

// CountBlank implements the COUNTBLANK function.
func CountBlank (args []Result )Result {if len (args )==0{return MakeErrorResult ("\u0043\u004f\u0055N\u0054\u0042\u004c\u0041N\u004b\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};return MakeNumberResult (_edbfb (args ,_fbga ));};

// String returns a string representation of a named range.
func (_gdebf NamedRangeRef )String ()string {return _gdebf ._gdbf };

// GetWidth returns 0 for the invalid reference context.
func (_gdee *ivr )GetWidth (colIdx int )float64 {return float64 (0)};

// ISNONTEXT is an implementation of the Excel ISNONTEXT() function.
func IsNonText (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053N\u004f\u004e\u0054\u0045X\u0054\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073 \u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (args [0].Type !=ResultTypeString );};

// RoundUp is an implementation of the Excel ROUNDUP function that rounds a number
// up to a specified number of digits.
func RoundUp (args []Result )Result {return _bfcd (args ,_ddbba )};

// Search is an implementation of the Excel SEARCH().
func Search (args []Result )Result {_ecbfc ,_fdee :=_cgdfe ("\u0046\u0049\u004e\u0044",args );if _fdee .Type !=ResultTypeEmpty {return _fdee ;};_ccad :=_c .ToLower (_ecbfc ._fegbd );if _ccad ==""{return MakeNumberResult (1.0);};_aecagb :=_c .ToLower (_ecbfc ._cfeac );_bceeg :=_ecbfc ._dgcbc ;_cccbg :=1;for _dagg :=range _aecagb {if _cccbg < _bceeg {_cccbg ++;continue ;};_cdbcg :=_a .Index (_ccad ,_aecagb [_dagg :]);if _cdbcg ==0{return MakeNumberResult (float64 (_cccbg ));};_cccbg ++;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func _decbg (_cfbdd []Result )(float64 ,float64 ,Result ){_afaff :=0.0;_edba :=1.0;for _ ,_beee :=range _cfbdd {switch _beee .Type {case ResultTypeNumber :_afaff +=_beee .ValueNumber ;_edba *=_cacb (_beee .ValueNumber );case ResultTypeList ,ResultTypeArray :_eecbb ,_agec ,_fbebc :=_decbg (_beee .ListValues ());_afaff +=_eecbb ;_edba *=_cacb (_agec );if _fbebc .Type ==ResultTypeError {return 0,0,_fbebc ;};case ResultTypeString :return 0,0,MakeErrorResult ("M\u0055\u004c\u0054\u0049\u004e\u004f\u004d\u0049\u0041\u004c\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063 a\u0072\u0067\u0075m\u0065n\u0074\u0073");case ResultTypeError :return 0,0,_beee ;};};return _afaff ,_edba ,_dbc ;};

// MakeErrorResultType makes an error result of a given type with a specified
// debug message
func MakeErrorResultType (t ErrorType ,msg string )Result {switch t {case ErrorTypeNull :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeValue :return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };case ErrorTypeRef :return Result {Type :ResultTypeError ,ValueString :"\u0023\u0052\u0045F\u0021",ErrorMessage :msg };case ErrorTypeName :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0041\u004d\u0045\u003f",ErrorMessage :msg };case ErrorTypeNum :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u0055M\u0021",ErrorMessage :msg };case ErrorTypeSpill :return Result {Type :ResultTypeError ,ValueString :"\u0023S\u0050\u0049\u004c\u004c\u0021",ErrorMessage :msg };case ErrorTypeNA :return Result {Type :ResultTypeError ,ValueString :"\u0023\u004e\u002f\u0041",ErrorMessage :msg };case ErrorTypeDivideByZero :return Result {Type :ResultTypeError ,ValueString :"\u0023D\u0049\u0056\u002f\u0030\u0021",ErrorMessage :msg };default:return Result {Type :ResultTypeError ,ValueString :"\u0023V\u0041\u004c\u0055\u0045\u0021",ErrorMessage :msg };};};const _fdfb ="\u0028\u0028\u005b0\u002d\u0039\u005d\u0029\u002b\u0029\u003a\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u005c\u002e\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u0028\u0020(\u0061\u006d\u007c\u0070\u006d\u0029\u0029\u003f";

// Context is a formula execution context.  Formula evaluation uses the context
// to retreive information from sheets.
type Context interface{

// Cell returns the result of evaluating a cell.
Cell (_gdg string ,_gbb Evaluator )Result ;

// Sheet returns an evaluation context for a given sheet name.  This is used
// when evaluating cells that pull data from other sheets (e.g. ='Sheet 2'!A1).
Sheet (_eac string )Context ;

// GetEpoch returns the time epoch of the context's Workbook.
GetEpoch ()_fe .Time ;

// GetFilename returns the full filename of the context's Workbook.
GetFilename ()string ;

// GetWidth returns a worksheet's column width.
GetWidth (_ef int )float64 ;

// GetFormat returns a cell's format.
GetFormat (_fcc string )string ;

// GetLabelPrefix returns cell's label prefix dependent on cell horizontal alignment.
GetLabelPrefix (_dedf string )string ;

// GetFormat returns if cell is protected.
GetLocked (_ced string )bool ;

// HasFormula returns if cell contains formula.
HasFormula (_fd string )bool ;

// IsBool returns if cell contains boolean value.
IsBool (_daf string )bool ;

// IsDBCS returns if workbook default language is among DBCS.
IsDBCS ()bool ;

// LastColumn returns the name of last column which contains data in range of context sheet's given rows.
LastColumn (_cac ,_acb int )string ;

// LastRow returns the name of last row which contains data in range of context sheet's given columns.
LastRow (_cbg string )int ;

// SetLocked returns sets cell's protected attribute.
SetLocked (_cde string ,_ffd bool );

// NamedRange returns a named range.
NamedRange (_dec string )Reference ;

// SetOffset is used so that the Context can evaluate cell references
// differently when they are not absolute (e.g. not like '$A$5').  See the
// shared formula support in Cell for usage.
SetOffset (_bbf ,_beg uint32 );};type countMode byte ;const _gbab =57357;

// Date is an implementation of the Excel DATE() function.
func Date (args []Result )Result {if len (args )!=3||args [0].Type !=ResultTypeNumber ||args [1].Type !=ResultTypeNumber ||args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0044\u0041TE\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0068re\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_gfeg :=int (args [0].ValueNumber );if _gfeg < 0||_gfeg >=10000{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");}else if _gfeg <=1899{_gfeg +=1900;};_dfb :=_fe .Month (args [1].ValueNumber );_aeb :=int (args [2].ValueNumber );_bac :=_gcff (_gfeg ,_dfb ,_aeb );_fbfe :=_abag (_cab ,_bac )+1;if _fbfe < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074 \u0064\u0061\u0074\u0065");};return MakeNumberResult (_fbfe );};var _dfbg =map[string ]Function {};

// Intrate implements the Excel INTRATE function.
func Intrate (args []Result )Result {_fbge :=len (args );if _fbge !=4&&_fbge !=5{return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0066\u006f\u0075r\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_efdc ,_cfaf ,_dbac :=_cfaa (args [0],args [1],"\u0049N\u0054\u0052\u0041\u0054\u0045");if _dbac .Type ==ResultTypeError {return _dbac ;};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076\u0065\u0073\u0074\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_gbce :=args [2].ValueNumber ;if _gbce <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0069\u006e\u0076e\u0073\u0074\u006d\u0065\u006e\u0074\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u004e\u0054\u0052\u0041\u0054E\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064\u0065\u006d\u0070\u0074\u0069\u006f\u006e \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_aabc :=args [3].ValueNumber ;if _aabc <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u004e\u0054\u0052\u0041\u0054\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0065\u0064e\u006d\u0070\u0074\u0069\u006f\u006e\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u0061r\u0067\u0075\u006de\u006e\u0074");};_cefdb :=0;if _fbge ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049N\u0054\u0052A\u0054\u0045\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0062\u0061\u0073\u0069\u0073\u0020to\u0020\u0062\u0065 \u006e\u0075m\u0062\u0065\u0072\u0020\u0061\u0072g\u0075\u006de\u006e\u0074");};_cefdb =int (args [4].ValueNumber );if !_adfb (_cefdb ){return MakeErrorResultType (ErrorTypeNum ,"\u0049\u006eco\u0072\u0072\u0065c\u0074\u0020\u0062\u0061sis\u0020ar\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020\u0049\u004e\u0054\u0052\u0041T\u0045");};};_ffaba ,_dbac :=_gaa (_efdc ,_cfaf ,_cefdb );if _dbac .Type ==ResultTypeError {return _dbac ;};return MakeNumberResult ((_aabc -_gbce )/_gbce /_ffaba );};const _eaffe =57362;type criteriaRegex struct{_dfcc byte ;_abbf string ;};func (_befcb *ivr )NamedRange (ref string )Reference {return ReferenceInvalid };

// Rri implements the Excel RRI function.
func Rri (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u0052\u0052\u0049\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052I\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006eu\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_acde :=args [0].ValueNumber ;if _acde <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u006f\u0066\u0020p\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0052\u0052\u0049\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073 p\u0072\u0065\u0073\u0065\u006e\u0074 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bffe :=args [1].ValueNumber ;if _bffe <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0052\u0052\u0049\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006et\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("R\u0052\u0049\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0075\u0074\u0075\u0072e \u0076\u0061\u006c\u0075e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075mb\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cfbd :=args [2].ValueNumber ;if _cfbd < 0{return MakeErrorResultType (ErrorTypeNum ,"\u0052R\u0049\u0020r\u0065\u0071\u0075\u0069r\u0065\u0073\u0020f\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006cue\u0020\u0074\u006f \u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065g\u0061\u0074i\u0076\u0065");};return MakeNumberResult (_bb .Pow (_cfbd /_bffe ,1/_acde )-1);};

// PrefixHorizontalRange is a range expression that when evaluated returns a list of Results from references like Sheet1!1:4 (all cells from rows 1 to 4 of sheet 'Sheet1').
type PrefixHorizontalRange struct{_bccca Expression ;_gceg ,_gfdd int ;};

// ISREF is an implementation of the Excel ISREF() function.
func IsRef (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u0052\u0045\u0046\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};return MakeBoolResult (ev .LastEvalIsRef ());};

// Reference returns a string reference value to a sheet.
func (_daae SheetPrefixExpr )Reference (ctx Context ,ev Evaluator )Reference {return Reference {Type :ReferenceTypeSheet ,Value :_daae ._ccbcf };};

// Nper implements the Excel NPER function.
func Nper (args []Result )Result {_ggga :=len (args );if _ggga < 3||_ggga > 5{return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067e\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u0020\u0035");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gaag :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065q\u0075\u0069\u0072e\u0073\u0020\u0070\u0061y\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_egfb :=args [1].ValueNumber ;if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_egc :=args [2].ValueNumber ;_fdbge :=0.0;if _ggga >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0045\u0052\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_fdbge =args [3].ValueNumber ;};_edeg :=0.0;if _ggga ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("N\u0050\u0045\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_edeg =args [4].ValueNumber ;if _edeg !=0{_edeg =1;};};_ecb :=_egfb *(1+_gaag *_edeg )-_fdbge *_gaag ;_dbeb :=(_egc *_gaag +_egfb *(1+_gaag *_edeg ));return MakeNumberResult (_bb .Log (_ecb /_dbeb )/_bb .Log (1+_gaag ));};

// RoundDown is an implementation of the Excel ROUNDDOWN function that rounds a number
// down to a specified number of digits.
func RoundDown (args []Result )Result {return _bfcd (args ,_gfga )};const _eedaa =57347;

// Searchb is an implementation of the Excel SEARCHB().
func Searchb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Search (args );};_bbgea ,_eafb :=_cgdfe ("\u0046\u0049\u004e\u0044",args );if _eafb .Type !=ResultTypeEmpty {return _eafb ;};_dagdf :=_c .ToLower (_bbgea ._fegbd );_bdcee :=_c .ToLower (_bbgea ._cfeac );if _dagdf ==""{return MakeNumberResult (1.0);};_egage :=_bbgea ._dgcbc -1;_cecb :=1;_faff :=0;for _dadg :=range _bdcee {if _dadg !=0{_dgagd :=1;if _dadg -_faff > 1{_dgagd =2;};_cecb +=_dgagd ;};if _cecb > _egage {_gffe :=_a .Index (_dagdf ,_bdcee [_dadg :]);if _gffe ==0{return MakeNumberResult (float64 (_cecb ));};};_faff =_dadg ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};

// VLookup implements the VLOOKUP function that returns a matching value from a
// column in an array.
func VLookup (args []Result )Result {_afad :=len (args );if _afad < 3{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004bU\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074 \u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _afad > 4{return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0061\u0074\u0020m\u006f\u0073\u0074\u0020\u0066\u006f\u0075\u0072\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_bbde :=args [0];_cbef :=args [1];if _cbef .Type !=ResultTypeArray {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_fcfb :=args [2].AsNumber ();if _fcfb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050 \u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_gcgg :=false ;if _afad ==4&&args [3].Type !=ResultTypeEmpty {_agb :=args [3].AsNumber ();if _agb .Type !=ResultTypeNumber {return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u006e\u0075\u006de\u0072\u0069\u0063\u0020\u006d\u0061\u0074\u0063\u0068\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if _agb .ValueNumber ==0{_gcgg =true ;};};_abdg :=int (_fcfb .ValueNumber )-1;_eaga :=-1;_eecb :=false ;_dcbc :for _bgdd ,_aafacd :=range _cbef .ValueArray {if len (_aafacd )==0{continue ;};_eaagb :=_aafacd [0];switch _fffb (_eaagb ,_bbde ,false ,_gcgg ){case _bcce :_eaga =_bgdd ;case _dgeab :_eaga =_bgdd ;_eecb =true ;break _dcbc ;};};if _eaga ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};_abdge :=_cbef .ValueArray [_eaga ];if _abdg < 0||_abdg >=len (_abdge ){return MakeErrorResult ("\u0056\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0068\u0061\u0073\u0020\u0069\u006e\u0076a\u006ci\u0064\u0020\u0063\u006f\u006c\u0075\u006d\u006e\u0020\u0069\u006e\u0064\u0065\u0078");};if _eecb ||!_gcgg {return _abdge [_abdg ];};return MakeErrorResultType (ErrorTypeNA ,"\u0056\u004c\u004fOK\u0055\u0050\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075\u006e\u0064");};

// Month is an implementation of the Excel MONTH() function.
func Month (args []Result )Result {if len (args )!=1{return MakeErrorResult ("M\u004f\u004e\u0054\u0048\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006f\u006ee\u0020\u0061\u0072g\u0075m\u0065\u006e\u0074");};_edb :=args [0];switch _edb .Type {case ResultTypeEmpty :return MakeNumberResult (1);case ResultTypeNumber :_gfdf :=_adg (_edb .ValueNumber );return MakeNumberResult (float64 (_gfdf .Month ()));case ResultTypeString :_gace :=_c .ToLower (_edb .ValueString );if !_accb (_gace ){_ ,_ ,_ ,_ ,_bcgca ,_aafe :=_cea (_gace );if _aafe .Type ==ResultTypeError {_aafe .ErrorMessage ="\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0066\u006f\u0072\u0020\u004dON\u0054\u0048";return _aafe ;};if _bcgca {return MakeNumberResult (1);};};_ ,_ddbc ,_ ,_ ,_dff :=_aace (_gace );if _dff .Type ==ResultTypeError {return _dff ;};return MakeNumberResult (float64 (_ddbc ));default:return MakeErrorResult ("\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u004d\u004fN\u0054\u0048");};};func _fffb (_ccecd ,_cggdd Result ,_fafe ,_gcfb bool )cmpResult {_ccecd =_ccecd .AsNumber ();_cggdd =_cggdd .AsNumber ();if _ccecd .Type !=_cggdd .Type {return _caea ;};if _ccecd .Type ==ResultTypeNumber {if _ccecd .ValueNumber ==_cggdd .ValueNumber {return _dgeab ;};if _ccecd .ValueNumber < _cggdd .ValueNumber {return _bcce ;};return _degbe ;};if _ccecd .Type ==ResultTypeString {_fecg :=_ccecd .ValueString ;_aaegf :=_cggdd .ValueString ;if !_fafe {_fecg =_c .ToLower (_fecg );_aaegf =_c .ToLower (_aaegf );};if _gcfb {_cdcfg :=_a .Match (_aaegf ,_fecg );if _cdcfg {return _dgeab ;}else {return _degbe ;};};return cmpResult (_c .Compare (_fecg ,_aaegf ));};if _ccecd .Type ==ResultTypeEmpty {return _dgeab ;};if _ccecd .Type ==ResultTypeList {if len (_ccecd .ValueList )< len (_cggdd .ValueList ){return _bcce ;};if len (_ccecd .ValueList )> len (_cggdd .ValueList ){return _degbe ;};for _adbdb :=range _ccecd .ValueList {_ddgbc :=_fffb (_ccecd .ValueList [_adbdb ],_cggdd .ValueList [_adbdb ],_fafe ,_gcfb );if _ddgbc !=_dgeab {return _ddgbc ;};};return _dgeab ;};if _ccecd .Type ==ResultTypeList {if len (_ccecd .ValueArray )< len (_cggdd .ValueArray ){return _bcce ;};if len (_ccecd .ValueArray )> len (_cggdd .ValueArray ){return _degbe ;};for _daaa :=range _ccecd .ValueArray {_dfbbd :=_ccecd .ValueArray [_daaa ];_acff :=_ccecd .ValueArray [_daaa ];if len (_dfbbd )< len (_acff ){return _bcce ;};if len (_dfbbd )> len (_acff ){return _degbe ;};for _dcbg :=range _dfbbd {_ebcga :=_fffb (_dfbbd [_dcbg ],_acff [_dcbg ],_fafe ,_gcfb );if _ebcga !=_dgeab {return _ebcga ;};};};return _dgeab ;};return _caea ;};func _dffgf (_gaca yyLexer )int {return _bbdbg ().Parse (_gaca )};

// Reference returns a string reference value to a vertical range with prefix.
func (_fadfd PrefixVerticalRange )Reference (ctx Context ,ev Evaluator )Reference {_ecbdg :=_fadfd ._bbdg .Reference (ctx ,ev );return Reference {Type :ReferenceTypeVerticalRange ,Value :_fadfd .verticalRangeReference (_ecbdg .Value )};};

// NewCellRef constructs a new cell reference.
func NewCellRef (v string )Expression {return CellRef {_bbgg :v }};

// Lookup implements the LOOKUP function that returns a matching value from a
// column, or from the same index in a second column.
func Lookup (args []Result )Result {if len (args )< 2{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074 \u0074\u0077\u006f\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074\u0073");};if len (args )> 3{return MakeErrorResult ("\u004c\u004f\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0061\u0074\u0020\u006do\u0073\u0074\u0020\u0074\u0068\u0072\u0065\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_dffa :=args [0];_dccaf :=args [1];if _dccaf .Type !=ResultTypeArray &&_dccaf .Type !=ResultTypeList {return MakeErrorResult ("\u0056\u004cO\u004f\u004b\u0055\u0050\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ceab :=_bgffg (_dccaf );_adgb :=-1;for _cgce ,_eegf :=range _ceab {if _fffb (_dffa ,_eegf ,false ,false )==_dgeab {_adgb =_cgce ;};};if _adgb ==-1{return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};_eggdb :=_ceab ;if len (args )==3{_eggdb =_bgffg (args [2]);};if _adgb < 0||_adgb >=len (_eggdb ){return MakeErrorResultType (ErrorTypeNA ,"\u004c\u004f\u004f\u004bUP\u0020\u006e\u006f\u0020\u0072\u0065\u0073\u0075\u006c\u0074\u0020\u0066\u006f\u0075n\u0064");};return _eggdb [_adgb ];};

// String returns a string representation of PrefixExpr.
func (_addd PrefixExpr )String ()string {return _d .Sprintf ("\u0025\u0073\u0021%\u0073",_addd ._aedc .String (),_addd ._fgfac .String ());};

// Reference returns a string reference value to a horizontal range with prefix.
func (_fce PrefixHorizontalRange )Reference (ctx Context ,ev Evaluator )Reference {_edac :=_fce ._bccca .Reference (ctx ,ev );return Reference {Type :ReferenceTypeHorizontalRange ,Value :_fce .horizontalRangeReference (_edac .Value )};};var _fbb =[...]uint8 {0,16,29,43,56,68,80,91,102,113,125,137,148,163};func _feec (_dbdd ,_cff ,_cfg float64 )float64 {return (_dbdd *3600+_cff *60+_cfg )/86400};var _acge =[]ri {{1000,"\u004d"},{900,"\u0043\u004d"},{500,"\u0044"},{400,"\u0043\u0044"},{100,"\u0043"},{90,"\u0058\u0043"},{50,"\u004c"},{40,"\u0058\u004c"},{10,"\u0058"},{9,"\u0049\u0058"},{5,"\u0056"},{4,"\u0049\u0056"},{1,"\u0049"}};var _dbgac =[...]uint8 {0,17,33,49,63,78,93,108};

// MDeterm is an implementation of the Excel MDETERM which finds the determinant
// of a matrix.
func MDeterm (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cedfg :=args [0];if _cedfg .Type !=ResultTypeArray {return MakeErrorResult ("\u004d\u0044\u0045T\u0045\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069\u006e\u0067\u006c\u0065\u0020\u0061\u0072\u0072\u0061\u0079 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fabb :=len (_cedfg .ValueArray );for _ ,_aggd :=range _cedfg .ValueArray {if len (_aggd )!=_fabb {return MakeErrorResult ("\u004d\u0044\u0045TE\u0052\u004d\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072e\u0073 \u0061 \u0073\u0071\u0075\u0061\u0072\u0065\u0020\u006d\u0061\u0074\u0072\u0069\u0078");};};return MakeNumberResult (_abgb (_cedfg .ValueArray ));};var _ddbcg _ff .Mutex ;func (_dadcc tokenType )String ()string {return _bcedg (int (_dadcc ))};

// Parse parses a string to get an Expression.
func ParseString (s string )Expression {if s ==""{return NewEmptyExpr ();};return Parse (_c .NewReader (s ));};

// LastColumn returns empty string for the invalid reference context.
func (_beeg *ivr )LastColumn (rowFrom ,rowTo int )string {return ""};

// Min is an implementation of the Excel MIN() function.
func Min (args []Result )Result {return _gdgb (args ,false )};

// Dollarfr implements the Excel DOLLARFR function.
func Dollarfr (args []Result )Result {_gbga ,_cgag ,_cccf :=_eaee (args ,"\u0044\u004f\u004c\u004c\u0041\u0052\u0046\u0052");if _cccf .Type ==ResultTypeError {return _cccf ;};if _cgag ==0{return MakeErrorResultType (ErrorTypeDivideByZero ,"\u0044\u004f\u004c\u004c\u0041R\u0046\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066r\u0061\u0063\u0074\u0069\u006f\u006e\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065");};if _gbga ==0{return MakeNumberResult (0);};_fefa :=_gbga < 0;if _fefa {_gbga =-_gbga ;};_gdae :=float64 (int (_gbga ));_gggg :=args [0].Value ();_babdg :=_c .Split (_gggg ,"\u002e");_gba :=0.0;if len (_babdg )> 1{var _cbcbc error ;_gadfd :=_babdg [1];_gba ,_cbcbc =_ea .ParseFloat (_gadfd ,64);if _cbcbc !=nil {return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0066\u0072\u0061\u0063\u0074\u0069\u006f\u006e\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006fr \u0044\u004f\u004cL\u0041R\u0046\u0052");};_adca :=float64 (len (_gadfd ));_gba /=_bb .Pow (10,_adca );};_ggce :=_gba *_cgag /_bb .Pow (10,float64 (int (_bb .Log10 (_cgag )))+1)+_gdae ;if _fefa {_ggce =-_ggce ;};return MakeNumberResult (_ggce );};type defEval struct{evCache ;_bdd bool ;};

// GetFilename returns an empty string for the invalid reference context.
func (_dffb *ivr )GetFilename ()string {return ""};

// SupportedFunctions returns a list of supported functions.
func SupportedFunctions ()[]string {_abgcd :=[]string {};for _cbae :=range _dfbg {_abgcd =append (_abgcd ,_cbae );};for _beffd :=range _ddgd {_abgcd =append (_abgcd ,_beffd );};_bc .Strings (_abgcd );return _abgcd ;};func _dcfc (_bdfb string ,_bdabd _fe .Time )(_fe .Time ,error ){_gffcc ,_ ,_adbe :=_e .ParseFloat (_bdfb ,10,128,_e .ToNearestEven );if _adbe !=nil {return _fe .Time {},_adbe ;};_ddeg :=new (_e .Float );_ddeg .SetUint64 (uint64 (24*_fe .Hour ));_gffcc .Mul (_gffcc ,_ddeg );_cded ,_ :=_gffcc .Uint64 ();_dgbf :=_bdabd .Add (_fe .Duration (_cded ));return _fbad (_dgbf ),nil ;};

// Replace is an implementation of the Excel REPLACE().
func Replace (args []Result )Result {_aegf ,_acgbd :=_defb ("\u0052E\u0050\u004c\u0041\u0043\u0045",args );if _acgbd .Type !=ResultTypeEmpty {return _acgbd ;};_ffcb :=_aegf ._cbdg ;_dfccg :=_aegf ._cbdb ;_gabb :=_aegf ._ffeg ;_fggb :=_aegf ._baac ;_fdgdb :=len (_ffcb );if _dfccg > _fdgdb {_dfccg =_fdgdb ;};_gdebe :=_dfccg +_gabb ;if _gdebe > _fdgdb {_gdebe =_fdgdb ;};_fgfcc :=_ffcb [0:_dfccg ]+_fggb +_ffcb [_gdebe :];return MakeStringResult (_fgfcc );};

// Eval evaluates a vertical range with prefix returning a list of results or an error.
func (_afce PrefixVerticalRange )Eval (ctx Context ,ev Evaluator )Result {_abbcdc :=_afce ._bbdg .Reference (ctx ,ev );switch _abbcdc .Type {case ReferenceTypeSheet :if _ccbdc (_abbcdc ,ctx ){return MakeErrorResultType (ErrorTypeName ,_d .Sprintf ("\u0053h\u0065e\u0074\u0020\u0025\u0073\u0020n\u006f\u0074 \u0066\u006f\u0075\u006e\u0064",_abbcdc .Value ));};_cecba :=_afce .verticalRangeReference (_abbcdc .Value );if _gcdb ,_bgfbb :=ev .GetFromCache (_cecba );_bgfbb {return _gcdb ;};_bbdea :=ctx .Sheet (_abbcdc .Value );_dadea ,_cgffe :=_ebaf (_bbdea ,_afce ._gggff ,_afce ._gebf );_bace :=_aadf (_bbdea ,ev ,_dadea ,_cgffe );ev .SetCache (_cecba ,_bace );return _bace ;default:return MakeErrorResult (_d .Sprintf ("\u006e\u006f\u0020\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0020\u0066\u006f\u0072\u0020r\u0065f\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u0074\u0079\u0070\u0065\u0020\u0025\u0073",_abbcdc .Type ));};};const (BinOpTypeUnknown BinOpType =iota ;BinOpTypePlus ;BinOpTypeMinus ;BinOpTypeMult ;BinOpTypeDiv ;BinOpTypeExp ;BinOpTypeLT ;BinOpTypeGT ;BinOpTypeEQ ;BinOpTypeLEQ ;BinOpTypeGEQ ;BinOpTypeNE ;BinOpTypeConcat ;);const _geac ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020\u0066\u006f\u0072\u0020\u0054\u0049\u004d\u0045\u0056\u0041\u004c\u0055\u0045";var _fgag *_fb .Rand ;

// ReferenceType is a type of reference
//go:generate stringer -type=ReferenceType
type ReferenceType byte ;func _accc (_fbd ,_bdaf float64 ,_ddcad ,_egec int )float64 {_efad :=_adg (_fbd );_dfg :=_adg (_bdaf );_ggg :=_ggbf (_efad ,_dfg ,_ddcad ,_egec );return _cgac (_ggg ,_efad ,_egec );};

// ISODD is an implementation of the Excel ISODD() function.
func IsOdd (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0028)\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0053\u004f\u0044\u0044\u0020\u0061\u0063\u0063\u0065\u0070\u0074\u0073\u0020\u0061 \u006eu\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bffb :=int (args [0].ValueNumber );return MakeBoolResult (_bffb !=_bffb /2*2);};

// Fvschedule implements the Excel FVSCHEDULE function.
func Fvschedule (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045D\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020t\u0077\u006f\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048E\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u0070\u0072\u0069\u006e\u0063\u0069\u0070\u0061\u006c\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_dfc :=args [0].ValueNumber ;switch args [1].Type {case ResultTypeNumber :return MakeNumberResult (_dfc *(args [1].ValueNumber +1));case ResultTypeList ,ResultTypeArray :_dgbb :=_gbaa (args [1]);for _ ,_beaa :=range _dgbb {for _ ,_bfbbd :=range _beaa {if _bfbbd .Type !=ResultTypeNumber ||_bfbbd .IsBoolean {return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075m\u0062\u0065\u0072\u0073");};_dfc *=1.0+_bfbbd .ValueNumber ;};};return MakeNumberResult (_dfc );default:return MakeErrorResult ("\u0046\u0056\u0053\u0043\u0048\u0045\u0044\u0055\u004c\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020s\u0063\u0068\u0065\u0064\u0075\u006c\u0065\u0020\u0074o\u0020\u0062\u0065\u0020\u006f\u0066\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006f\u0072\u0020\u0061\u0072\u0072a\u0079\u0020\u0074y\u0070\u0065");};};const _cfba =57348;

// Even is an implementation of the Excel EVEN() that rounds a number to the
// nearest even integer.
func Even (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u0045\u0056\u0045\u004e(\u0029\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_eeec :=args [0].AsNumber ();if _eeec .Type !=ResultTypeNumber {return MakeErrorResult ("\u0045\u0056\u0045N\u0028\u0029\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_dfdbf :=_bb .Signbit (_eeec .ValueNumber );_aebea ,_eedff :=_bb .Modf (_eeec .ValueNumber /2);_dgbc :=_aebea *2;if _eedff !=0{if !_dfdbf {_dgbc +=2;}else {_dgbc -=2;};};return MakeNumberResult (_dgbc );};func _gaa (_gaaa ,_baca float64 ,_gff int )(float64 ,Result ){_cfgd ,_cdg :=_adg (_gaaa ),_adg (_baca );_bbggd :=_cfgd .Unix ();_ccea :=_cdg .Unix ();if _bbggd ==_ccea {return 0,_dbc ;};_bdb ,_agdb ,_cabg :=_cfgd .Date ();_gdf ,_bcgb ,_aegb :=_cdg .Date ();_gca ,_aec :=int (_agdb ),int (_bcgb );var _dbcd ,_bafb float64 ;switch _gff {case 0:if _cabg ==31{_cabg --;};if _cabg ==30&&_aegb ==31{_aegb --;}else if _dgfd :=_aeef (_bdb );_gca ==2&&((_dgfd &&_cabg ==29)||(!_dgfd &&_cabg ==28)){_cabg =30;if _dag :=_aeef (_gdf );_aec ==2&&((_dag &&_aegb ==29)||(!_dag &&_aegb ==28)){_aegb =30;};};_dbcd =float64 ((_gdf -_bdb )*360+(_aec -_gca )*30+(_aegb -_cabg ));_bafb =360;case 1:_dbcd =_baca -_gaaa ;_gceb :=_bdb !=_gdf ;if _gceb &&(_gdf !=_bdb +1||_gca < _aec ||(_gca ==_aec &&_cabg < _aegb )){_bff :=0;for _dcgbf :=_bdb ;_dcgbf <=_gdf ;_dcgbf ++{_bff +=_gffc (_dcgbf ,1);};_bafb =float64 (_bff )/float64 (_gdf -_bdb +1);}else {if !_gceb &&_aeef (_bdb ){_bafb =366;}else {if _gceb &&((_aeef (_bdb )&&(_gca < 2||(_gca ==2&&_cabg <=29)))||(_aeef (_gdf )&&(_aec > 2||(_aec ==2&&_aegb ==29)))){_bafb =366;}else {_bafb =365;};};};case 2:_dbcd =_baca -_gaaa ;_bafb =360;case 3:_dbcd =_baca -_gaaa ;_bafb =365;case 4:if _cabg ==31{_cabg --;};if _aegb ==31{_aegb --;};_dbcd =float64 ((_gdf -_bdb )*360+(_aec -_gca )*30+(_aegb -_cabg ));_bafb =360;default:return 0,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006e\u0063\u006fr\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073 \u0066o\u0072\u0020\u0059\u0065\u0061\u0072\u0046r\u0061\u0063");};return _dbcd /_bafb ,_dbc ;};

// NewVerticalRange constructs a new full columns range.
func NewVerticalRange (v string )Expression {_fdcg :=_c .Split (v ,"\u003a");if len (_fdcg )!=2{return nil ;};if _fdcg [0]> _fdcg [1]{_fdcg [0],_fdcg [1]=_fdcg [1],_fdcg [0];};return VerticalRange {_adacd :_fdcg [0],_badff :_fdcg [1]};};const _begb ="(\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029\u002d"+_fee +"-\u0028\u0028\u005b\u0030\u002d\u0039\u005d\u0029\u002b\u0029";func _bcab (_ddge ,_ddgee ,_cddb ,_fged ,_egfg ,_efaa float64 )float64 {var _bbgc ,_eagc float64 ;_cbcbb :=0.0;_ceda :=_bb .Ceil (_egfg );_cggg :=_ddge -_ddgee ;_egab :=false ;_feda :=0.0;for _agge :=1.0;_agge <=_ceda ;_agge ++{if !_egab {_bbgc =_gfbb (_ddge ,_ddgee ,_cddb ,_agge ,_efaa );_feda =_cggg /(_cddb -_agge +1);if _feda > _bbgc {_eagc =_feda ;_egab =true ;}else {_eagc =_bbgc ;_cggg -=_bbgc ;};}else {_eagc =_feda ;};if _agge ==_ceda {_eagc *=_egfg +1-_ceda ;};_cbcbb +=_eagc ;};return _cbcbb ;};

// Mround is an implementation of the Excel MROUND function.  It is not a
// generic rounding function and has some oddities to match Excel's behavior.
func Mround (args []Result )Result {if len (args )!=2{return MakeErrorResult ("\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0077o\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fagfa :=args [0].AsNumber ();if _fagfa .Type !=ResultTypeNumber {return MakeErrorResult ("\u0066\u0069\u0072\u0073\u0074\u0020\u0061r\u0067\u0075\u006de\u006e\u0074\u0020\u0074o\u0020\u004d\u0052\u004f\u0055\u004e\u0044\u0028\u0029\u0020\u006d\u0075\u0073\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062\u0065\u0072");};_ccedb :=float64 (1);_gfbdd :=args [1].AsNumber ();if _gfbdd .Type !=ResultTypeNumber {return MakeErrorResult ("\u0073e\u0063\u006fn\u0064\u0020\u0061\u0072g\u0075\u006d\u0065n\u0074\u0020\u0074\u006f\u0020\u004d\u0052\u004f\u0055ND\u0028\u0029\u0020m\u0075\u0073t\u0020\u0062\u0065\u0020\u0061\u0020n\u0075\u006db\u0065\u0072");};_ccedb =_gfbdd .ValueNumber ;if _ccedb < 0&&_fagfa .ValueNumber > 0||_ccedb > 0&&_fagfa .ValueNumber < 0{return MakeErrorResult ("\u004d\u0052\u004fUN\u0044\u0028\u0029\u0020\u0061\u0072\u0067\u0075\u006de\u006et\u0020s\u0069g\u006e\u0073\u0020\u006d\u0075\u0073\u0074\u0020\u006d\u0061\u0074\u0063\u0068");};_bbgeb :=_fagfa .ValueNumber ;_bbgeb ,_ggeb :=_bb .Modf (_bbgeb /_ccedb );if _bb .Trunc (_ggeb +0.5)> 0{_bbgeb ++;};return MakeNumberResult (_bbgeb *_ccedb );};func _fdge (_abded []Result ,_dbdbc string )(*amorArgs ,Result ){_geee :=len (_abded );if _geee !=6&&_geee !=7{return nil ,MakeErrorResult (_dbdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0069\u0078\u0020\u006fr\u0020s\u0065\u0076\u0065\u006e\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if _abded [0].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbdbc +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0063\u006fst \u0074o \u0062\u0065\u0020\u006e\u0075\u006d\u0062er\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};_bfe :=_abded [0].ValueNumber ;if _bfe < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbdbc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0063\u006f\u0073\u0074\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u0020\u006e\u0065\u0067a\u0074\u0069\u0076\u0065");};_ebd ,_ecg :=_bbfd (_abded [1],"\u0064\u0061\u0074\u0065\u0020\u0070\u0075\u0072\u0063h\u0061\u0073\u0065\u0064",_dbdbc );if _ecg .Type ==ResultTypeError {return nil ,_ecg ;};_eaab ,_ecg :=_bbfd (_abded [2],"\u0066\u0069\u0072s\u0074\u0020\u0070\u0065\u0072\u0069\u006f\u0064",_dbdbc );if _ecg .Type ==ResultTypeError {return nil ,_ecg ;};if _eaab < _ebd {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073\u0074 \u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020l\u0061\u0074\u0065\u0072\u0020\u0074\u0068\u0061\u006e\u0020\u0064\u0061te\u0020\u0070\u0075\u0072\u0063\u0068\u0061\u0073\u0065\u0064");};if _abded [3].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006cv\u0061\u0067\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cccca :=_abded [3].ValueNumber ;if _cccca < 0||_cccca > _bfe {return nil ,MakeErrorResultType (ErrorTypeNum ,_dbdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0061\u006c\u0076\u0061g\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065e\u006e\u0020\u0030\u0020\u0061\u006e\u0064\u0020\u0074\u0068\u0065\u0020in\u0069\u0074\u0069\u0061\u006c\u0020\u0063\u006f\u0073\u0074");};if _abded [4].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbdbc +"\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_agfb :=int (_abded [4].ValueNumber );if _agfb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbdbc +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0070\u0065\u0072\u0069o\u0064\u0020\u0074\u006f\u0020\u0062\u0065 \u006e\u006f\u006e\u002d\u006e\u0065\u0067\u0061\u0074\u0069v\u0065");};if _abded [5].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbdbc +"\u0020\u0072\u0065\u0071\u0075\u0069r\u0065\u0073\u0020\u0064\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061\u0074\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_fgb :=_abded [5].ValueNumber ;if _fgb < 0{return nil ,MakeErrorResultType (ErrorTypeNum ,_dbdbc +"\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073 d\u0065\u0070\u0072\u0065\u0063\u0069\u0061\u0074\u0069\u006f\u006e\u0020\u0072\u0061t\u0065\u0020t\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065\u0020\u0074\u0068\u0061\u006e\u0020\u0030\u0020\u0061\u006e\u0064 \u006c\u0065ss\u0020\u0074\u0068a\u006e\u0020\u0030\u002e\u0035");};_aggcc :=0;if _geee ==7&&_abded [6].Type !=ResultTypeEmpty {if _abded [6].Type !=ResultTypeNumber {return nil ,MakeErrorResult (_dbdbc +"\u0020\u0072e\u0071\u0075\u0069\u0072e\u0073\u0020b\u0061\u0073\u0069\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_aggcc =int (_abded [6].ValueNumber );if !_adfb (_aggcc )||_aggcc ==2{return nil ,MakeErrorResultType (ErrorTypeNum ,"\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0062\u0061\u0073\u0069\u0073\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020fo\u0072\u0020"+_dbdbc );};};return &amorArgs {_bfe ,_ebd ,_eaab ,_cccca ,_agfb ,_fgb ,_aggcc },_dbc ;};func _cea (_defe string )(int ,int ,float64 ,bool ,bool ,Result ){_aeeda :="";_fdb :=[]string {};for _edca ,_dbcc :=range _fbbd {_fdb =_dbcc .FindStringSubmatch (_defe );if len (_fdb )> 1{_aeeda =_edca ;break ;};};if _aeeda ==""{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};_abde :=_fdb [1]=="";_fdb =_fdb [49:];_gfaa :=len (_fdb );_acbe :=_fdb [_gfaa -1];_aegc :=_acbe =="\u0061\u006d";_gbg :=_acbe =="\u0070\u006d";var _agef ,_egd int ;var _eff float64 ;var _fcde error ;switch _aeeda {case "\u0068\u0068":_agef ,_fcde =_ea .Atoi (_fdb [0]);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};_egd =0;_eff =0;case "\u0068\u0068\u003am\u006d":_agef ,_fcde =_ea .Atoi (_fdb [0]);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};_egd ,_fcde =_ea .Atoi (_fdb [2]);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};_eff =0;case "\u006d\u006d\u003as\u0073":_agef =0;_egd ,_fcde =_ea .Atoi (_fdb [0]);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};_eff ,_fcde =_ea .ParseFloat (_fdb [2],64);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};case "\u0068\u0068\u003a\u006d\u006d\u003a\u0073\u0073":_agef ,_fcde =_ea .Atoi (_fdb [0]);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};_egd ,_fcde =_ea .Atoi (_fdb [2]);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};_eff ,_fcde =_ea .ParseFloat (_fdb [4],64);if _fcde !=nil {return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};};if _egd >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};if _aegc ||_gbg {if _agef > 12||_eff >=60{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );}else if _agef ==12{_agef =0;};}else if _agef >=24||_eff >=10000{return 0,0,0,false ,false ,MakeErrorResultType (ErrorTypeValue ,_geac );};return _agef ,_egd ,_eff ,_gbg ,_abde ,_dbc ;};

// SetLocked does nothing for the invalid reference context.
func (_babg *ivr )SetLocked (cellRef string ,locked bool ){};func _ggbb (_fcbg ,_acaf _fe .Time ,_fcdb int )_fe .Time {_adef :=_fe .Date (_fcbg .Year (),_acaf .Month (),_acaf .Day (),0,0,0,0,_fe .UTC );if _adef .After (_fcbg ){_adef =_adef .AddDate (-1,0,0);};for !_adef .After (_fcbg ){_adef =_adef .AddDate (0,12/_fcdb ,0);};return _adef ;};type cumulArgs struct{_efdf float64 ;_cdag float64 ;_dfad float64 ;_dcca float64 ;_gagge float64 ;_dfd int ;};var _ebagb =[...]int {0,7,3,3,3,8,8,8,8,1,1,1,2,2,2,2,2,14,15,15,17,17,4,4,4,13,5,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,9,9,9,16,16,11,10,10};func _gbaa (_fdeba Result )[][]Result {switch _fdeba .Type {case ResultTypeArray :return _fdeba .ValueArray ;case ResultTypeList :return [][]Result {_fdeba .ValueList };default:return [][]Result {};};};

// Eval evaluates and returns the result of an empty expression.
func (_eeg EmptyExpr )Eval (ctx Context ,ev Evaluator )Result {return MakeEmptyResult ()};

// Reference returns a string reference value to a range.
func (_gced Range )Reference (ctx Context ,ev Evaluator )Reference {_dcded :=_gced ._gbda .Reference (ctx ,ev );_bdebf :=_gced ._ebcfd .Reference (ctx ,ev );if _dcded .Type ==ReferenceTypeCell &&_bdebf .Type ==ReferenceTypeCell {return MakeRangeReference (_geeg (_dcded ,_bdebf ));};return ReferenceInvalid ;};func _dg (_afb BinOpType ,_ad ,_ca [][]Result )Result {_fbg :=[][]Result {};for _aa :=range _ad {_afg :=_cgf (_afb ,_ad [_aa ],_ca [_aa ]);if _afg .Type ==ResultTypeError {return _afg ;};_fbg =append (_fbg ,_afg .ValueList );};return MakeArrayResult (_fbg );};

// Npv implements the Excel NPV function.
func Npv (args []Result )Result {_accd :=len (args );if _accd < 2{return MakeErrorResult ("\u004e\u0050\u0056 r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074w\u006f \u006fr\u0020m\u006f\u0072\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u004e\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020r\u0061\u0074\u0065\u0020\u0074\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067u\u006d\u0065\u006e\u0074");};_cfae :=args [0].ValueNumber ;if _cfae ==-1{return MakeErrorResultType (ErrorTypeDivideByZero ,"");};_gfdc :=[]float64 {};for _ ,_bgab :=range args [1:]{switch _bgab .Type {case ResultTypeNumber :_gfdc =append (_gfdc ,_bgab .ValueNumber );case ResultTypeArray ,ResultTypeList :_dadc :=_gbaa (_bgab );for _ ,_bbcc :=range _dadc {for _ ,_gadc :=range _bbcc {if _gadc .Type ==ResultTypeNumber &&!_gadc .IsBoolean {_gfdc =append (_gfdc ,_gadc .ValueNumber );};};};};};_afdf :=0.0;for _gcbf ,_bdcf :=range _gfdc {_afdf +=_bdcf /_bb .Pow (1+_cfae ,float64 (_gcbf )+1);};return MakeNumberResult (_afdf );};var _gacbgc []byte =[]byte {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};func _aace (_gfg string )(int ,int ,int ,bool ,Result ){_bcgc :="";_baeb :=[]string {};for _bacf ,_ddb :=range _gbf {_baeb =_ddb .FindStringSubmatch (_gfg );if len (_baeb )> 1{_bcgc =_bacf ;break ;};};if _bcgc ==""{return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_dbe :=false ;var _aba ,_cbbb ,_edf int ;var _bfa error ;switch _bcgc {case "\u006d\u006d\u002f\u0064\u0064\u002f\u0079\u0079":_cbbb ,_bfa =_ea .Atoi (_baeb [1]);if _bfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_edf ,_bfa =_ea .Atoi (_baeb [3]);if _bfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_aba ,_bfa =_ea .Atoi (_baeb [5]);if _bfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};if _aba < 0||_aba > 9999||(_aba > 99&&_aba < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_aba =_bfc (_aba );_dbe =_baeb [8]=="";case "\u006dm\u0020\u0064\u0064\u002c\u0020\u0079y":_cbbb =_fgfc [_baeb [1]];_edf ,_bfa =_ea .Atoi (_baeb [14]);if _bfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_aba ,_bfa =_ea .Atoi (_baeb [16]);if _bfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};if _aba < 0||_aba > 9999||(_aba > 99&&_aba < 1900){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_aba =_bfc (_aba );_dbe =_baeb [19]=="";case "\u0079\u0079\u002d\u006d\u006d\u002d\u0064\u0064":_fcf ,_ggfe :=_ea .Atoi (_baeb [1]);if _ggfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_ggfc ,_ggfe :=_ea .Atoi (_baeb [3]);if _ggfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_gea ,_ggfe :=_ea .Atoi (_baeb [5]);if _ggfe !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};if _fcf >=1900&&_fcf < 10000{_aba =_fcf ;_cbbb =_ggfc ;_edf =_gea ;}else if _fcf > 0&&_fcf < 13{_cbbb =_fcf ;_edf =_ggfc ;_aba =_gea ;}else {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_dbe =_baeb [8]=="";case "y\u0079\u002d\u006d\u006d\u0053\u0074\u0072\u002d\u0064\u0064":_aba ,_bfa =_ea .Atoi (_baeb [16]);if _bfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_cbbb =_fgfc [_baeb [3]];_edf ,_bfa =_ea .Atoi (_baeb [1]);if _bfa !=nil {return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};_dbe =_baeb [19]=="";};if !_gdb (_aba ,_cbbb ,_edf ){return 0,0,0,false ,MakeErrorResultType (ErrorTypeValue ,_cgd );};return _aba ,_cbbb ,_edf ,_dbe ,_dbc ;};

// Product is an implementation of the Excel PRODUCT() function.
func Product (args []Result )Result {_badg :=1.0;for _ ,_dgddf :=range args {_dgddf =_dgddf .AsNumber ();switch _dgddf .Type {case ResultTypeNumber :_badg *=_dgddf .ValueNumber ;case ResultTypeList ,ResultTypeArray :_debc :=Product (_dgddf .ListValues ());if _debc .Type !=ResultTypeNumber {return _debc ;};_badg *=_debc .ValueNumber ;case ResultTypeString :case ResultTypeError :return _dgddf ;case ResultTypeEmpty :default:return MakeErrorResult (_d .Sprintf ("\u0075\u006eha\u006e\u0064\u006ce\u0064\u0020\u0050\u0052ODU\u0043T(\u0029\u0020\u0061\u0072\u0067\u0075\u006den\u0074\u0020\u0074\u0079\u0070\u0065\u0020%\u0073",_dgddf .Type ));};};return MakeNumberResult (_badg );};

// Pi is an implementation of the Excel Pi() function that just returns the Pi
// constant.
func Pi (args []Result )Result {if len (args )!=0{return MakeErrorResult ("\u0050I\u0028\u0029\u0020\u0061c\u0063\u0065\u0070\u0074\u0073 \u006eo\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s");};return MakeNumberResult (_bb .Pi );};func _accb (_dfa string )bool {for _ ,_cgad :=range _gcc {_aeg :=_cgad .FindStringSubmatch (_dfa );if len (_aeg )> 1{return true ;};};return false ;};

// NewBool constructs a new boolean expression.
func NewBool (v string )Expression {_fegg ,_gf :=_ea .ParseBool (v );if _gf !=nil {_bdg .Log .Debug ("\u0065\u0072\u0072\u006f\u0072\u0020p\u0061\u0072\u0073\u0069\u006e\u0067\u0020\u0066\u006f\u0072\u006d\u0075\u006ca\u0020\u0062\u006f\u006f\u006c\u0020\u0025s\u003a\u0020\u0025\u0076",v ,_gf );};return Bool {_ac :_fegg };};const _eafgc ="\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0049\u006e\u0076\u0061\u006c\u0069\u0064\u0052\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054\u0079\u0070\u0065\u0043\u0065\u006c\u006c\u0052\u0065\u0066\u0065r\u0065\u006ec\u0065\u0054\u0079\u0070e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065R\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0054y\u0070\u0065\u0052\u0061\u006e\u0067\u0065\u0052\u0065\u0066e\u0072\u0065\u006ec\u0065\u0054\u0079\u0070\u0065\u0053\u0068e\u0065\u0074";

// Small implements the Excel SMALL function.
func Small (args []Result )Result {return _addea (args ,false )};func _gcbff (_gbac string )*criteriaRegex {_badbb :=&criteriaRegex {};if _gbac ==""{return _badbb ;};if _decg :=_ffad .FindStringSubmatch (_gbac );len (_decg )> 1{_badbb ._dfcc =_fffd ;_badbb ._abbf =_decg [1];}else if _eeffb :=_cgaga .FindStringSubmatch (_gbac );len (_eeffb )> 1{_badbb ._dfcc =_fffd ;_badbb ._abbf =_eeffb [1];}else if _gbed :=_cadd .FindStringSubmatch (_gbac );len (_gbed )> 1{_badbb ._dfcc =_fdfad ;_badbb ._abbf =_gbed [1];}else if _facge :=_eabea .FindStringSubmatch (_gbac );len (_facge )> 1{_badbb ._dfcc =_dcdd ;_badbb ._abbf =_facge [1];}else if _bbecc :=_dfdd .FindStringSubmatch (_gbac );len (_bbecc )> 1{_badbb ._dfcc =_gdad ;_badbb ._abbf =_bbecc [1];}else if _ecgc :=_afbf .FindStringSubmatch (_gbac );len (_ecgc )> 1{_badbb ._dfcc =_caed ;_badbb ._abbf =_ecgc [1];};return _badbb ;};

// ISERROR is an implementation of the Excel ISERROR() function.
func IsError (args []Result )Result {if len (args )!=1{return MakeErrorResult ("I\u0053\u0045\u0052\u0052\u004f\u0052(\u0029\u0020\u0061\u0063\u0063\u0065p\u0074\u0073\u0020\u0061\u0020\u0073\u0069n\u0067\u006c\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074");};return MakeBoolResult (args [0].Type ==ResultTypeError );};

// Ipmt implements the Excel IPMT function.
func Ipmt (args []Result )Result {_ebb :=len (args );if _ebb < 4||_ebb > 6{return MakeErrorResult ("\u0049P\u004d\u0054\u0020\u0072\u0065\u0071\u0075ir\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006f\u0066\u0020\u0061r\u0067\u0075m\u0065\u006e\u0074s\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065n\u0020\u0066ou\u0072\u0020\u0061n\u0064\u0020\u0073\u0069\u0078");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gcd :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004dT\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_bgaf :=args [1].ValueNumber ;if _bgaf <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0065\u0072\u0069\u006fd\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072 \u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_debb :=args [2].ValueNumber ;if _debb <=0{return MakeErrorResultType (ErrorTypeNum ,"\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062er\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f \u0062\u0065\u0020\u0070\u006f\u0073\u0069\u0074\u0069\u0076\u0065\u0020\u006e\u0075\u006d\u0062\u0065r\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0072\u0065\u0073\u0065\u006e\u0074\u0020\u0076\u0061\u006c\u0075\u0065 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061r\u0067u\u006d\u0065\u006e\u0074");};_bcbb :=args [3].ValueNumber ;_bfbd :=0.0;if _ebb > 4&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0049\u0050\u004d\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065s \u0066\u0075\u0074\u0075\u0072\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006db\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bfbd =args [4].ValueNumber ;};_gafb :=0;if _ebb ==6&&args [5].Type !=ResultTypeEmpty {if args [5].Type !=ResultTypeNumber {return MakeErrorResult ("I\u0050\u004d\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020t\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065r \u0061\u0072\u0067u\u006de\u006e\u0074");};_gafb =int (args [5].ValueNumber );if _gafb !=0{_gafb =1;};};return MakeNumberResult (_abdc (_gcd ,_bgaf ,_debb ,_bcbb ,_bfbd ,_gafb ));};

// SeriesSum implements the Excel SERIESSUM function.
func SeriesSum (args []Result )Result {if len (args )!=4{return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053\u0053\u0055\u004d\u0028\u0029\u0020\u0072\u0065\u0071u\u0069r\u0065\u0073\u0020\u0034\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_cabfd :=args [0].AsNumber ();_dedd :=args [1].AsNumber ();_bfde :=args [2].AsNumber ();_dgcf :=args [3].ListValues ();if _cabfd .Type !=ResultTypeNumber ||_dedd .Type !=ResultTypeNumber ||_bfde .Type !=ResultTypeNumber {return MakeErrorResult ("\u0053\u0045\u0052\u0049\u0045\u0053S\u0055\u004d\u0028)\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0069\u0072\u0073t\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063");};_egbc :=float64 (0);for _fdged ,_dfgg :=range _dgcf {_egbc +=_dfgg .ValueNumber *_bb .Pow (_cabfd .ValueNumber ,_dedd .ValueNumber +float64 (_fdged )*_bfde .ValueNumber );};return MakeNumberResult (_egbc );};

// Xirr implements the Excel XIRR function.
func Xirr (args []Result )Result {_dbfdb :=len (args );if _dbfdb !=2&&_dbfdb !=3{return MakeErrorResult ("\u0058\u0049RR\u0020\u0072\u0065q\u0075\u0069\u0072\u0065s t\u0077o \u006f\u0072\u0020\u0074\u0068\u0072\u0065e \u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0073");};_acae ,_eggb :=_cegd (args [0],args [1],"\u0058\u0049\u0052\u0052");if _eggb .Type ==ResultTypeError {return _eggb ;};_ffde :=_acae ._aeea ;_afbge :=_acae ._gccef ;_fdff :=0.1;if _dbfdb ==3&&args [2].Type !=ResultTypeEmpty {if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_fdff =args [2].ValueNumber ;if _fdff <=-1{return MakeErrorResult ("\u0058\u0049\u0052\u0052\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0067\u0075\u0065\u0073\u0073\u0020\u0074\u006f\u0020\u0062e\u0020\u006d\u006f\u0072\u0065 \u0074\u0068a\u006e\u0020\u002d\u0031");};};return _cbad (_ffde ,_afbge ,_fdff );};func _cegd (_ggfg ,_cffb Result ,_eec string )(*xargs ,Result ){if _ggfg .Type !=ResultTypeList &&_ggfg .Type !=ResultTypeArray {return nil ,MakeErrorResult (_eec +"\u0020\u0072eq\u0075\u0069\u0072e\u0073\u0020\u0076\u0061lue\u0073 t\u006f\u0020\u0062\u0065\u0020\u006f\u0066 a\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_deed :=_gbaa (_ggfg );_cadb :=[]float64 {};for _ ,_bgdcd :=range _deed {for _ ,_ggbfg :=range _bgdcd {if _ggbfg .Type ==ResultTypeNumber &&!_ggbfg .IsBoolean {_cadb =append (_cadb ,_ggbfg .ValueNumber );}else {return nil ,MakeErrorResult (_eec +"\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0076\u0061\u006c\u0075\u0065\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006dbe\u0072\u0073");};};};_gcea :=len (_cadb );if len (_cadb )< 2{return nil ,MakeErrorResultType (ErrorTypeNum ,"");};if _cffb .Type !=ResultTypeList &&_cffb .Type !=ResultTypeArray {return nil ,MakeErrorResult (_eec +" \u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0064\u0061\u0074\u0065s\u0020\u0074\u006f\u0020\u0062\u0065\u0020o\u0066\u0020\u0061\u0072\u0072\u0061\u0079\u0020\u0074\u0079p\u0065");};_adede :=_gbaa (_cffb );_ggfcf :=[]float64 {};_dgfdf :=0.0;for _ ,_gbbg :=range _adede {for _ ,_abfg :=range _gbbg {if _abfg .Type ==ResultTypeNumber &&!_abfg .IsBoolean {_gfcd :=float64 (int (_abfg .ValueNumber ));if _gfcd < _dgfdf {return nil ,MakeErrorResultType (ErrorTypeNum ,_eec +" \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020\u0074\u006f\u0020b\u0065\u0020\u0069\u006e\u0020\u0061\u0073\u0063\u0065\u006edi\u006e\u0067\u0020o\u0072d\u0065\u0072");};_ggfcf =append (_ggfcf ,_gfcd );_dgfdf =_gfcd ;}else {return nil ,MakeErrorResult (_eec +"\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0064\u0061\u0074\u0065\u0073\u0020t\u006f \u0062\u0065\u0020\u006e\u0075\u006d\u0062e\u0072\u0073");};};};if len (_ggfcf )!=_gcea {return nil ,MakeErrorResultType (ErrorTypeNum ,"");};return &xargs {_cadb ,_ggfcf },MakeEmptyResult ();};

// SumIf implements the SUMIF function.
func SumIf (args []Result )Result {if len (args )< 3{return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072\u0065\u0071\u0075i\u0072\u0065\u0073\u0020\u0074\u0068\u0072e\u0065\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};_befg :=args [0];if _befg .Type !=ResultTypeArray &&_befg .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004d\u0049\u0046\u0020\u0072e\u0071\u0075\u0069r\u0065\u0073\u0020\u0066i\u0072\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074\u0079\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_gcde :=_gbaa (_befg );_bcfc :=args [2];if _bcfc .Type !=ResultTypeArray &&_bcfc .Type !=ResultTypeList {return MakeErrorResult ("\u0053\u0055\u004dI\u0046\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006c\u0061\u0073\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u006f\u0066\u0020\u0074y\u0070\u0065\u0020\u0061\u0072\u0072\u0061\u0079");};_ffe :=_gbaa (_bcfc );_bgafe :=_acbfe (args [1]);_dcfgg :=0.0;for _edce ,_cafc :=range _gcde {for _dfggc ,_fgbad :=range _cafc {if _cgcdg (_fgbad ,_bgafe ){_dcfgg +=_ffe [_edce ][_dfggc ].ValueNumber ;};};};return MakeNumberResult (_dcfgg );};

// PrefixExpr is an expression containing reference to another sheet like Sheet1!A1 (the value of the cell A1 from sheet 'Sheet1').
type PrefixExpr struct{_aedc Expression ;_fgfac Expression ;};

// IsBool returns false for the invalid reference context.
func (_ecab *ivr )IsBool (cellRef string )bool {return false };func (_ddd *evCache )SetCache (key string ,value Result ){_ddd ._ffg .Lock ();_ddd ._adf [key ]=value ;_ddd ._ffg .Unlock ();};func _geeg (_bggf ,_ecgcd Reference )string {return _d .Sprintf ("\u0025\u0073\u003a%\u0073",_bggf .Value ,_ecgcd .Value );};

// String returns a string representation of String.
func (_fbgfg String )String ()string {return "\u0022"+_fbgfg ._eagbg +"\u0022"};type evCache struct{_adf map[string ]Result ;_ffg *_ff .Mutex ;};

// Cumipmt implements the Excel CUMIPMT function.
func Cumipmt (args []Result )Result {_faef ,_fegga :=_ddgb (args ,"\u0043U\u004d\u0049\u0050\u004d\u0054");if _fegga .Type ==ResultTypeError {return _fegga ;};_beef :=_faef ._efdf ;_fdage :=_faef ._cdag ;_ecd :=_faef ._dfad ;_agfd :=_faef ._dcca ;_acac :=_faef ._gagge ;_cecf :=_faef ._dfd ;_gbbd :=_fdcb (_beef ,_fdage ,_ecd ,0,_cecf );_dbab :=0.0;if _agfd ==1{if _cecf ==0{_dbab =-_ecd ;_agfd ++;};};for _bceg :=_agfd ;_bceg <=_acac ;_bceg ++{if _cecf ==1{_dbab +=_ebdc (_beef ,_bceg -2,_gbbd ,_ecd ,1)-_gbbd ;}else {_dbab +=_ebdc (_beef ,_bceg -1,_gbbd ,_ecd ,0);};};_dbab *=_beef ;return MakeNumberResult (_dbab );};

// Reference returns an invalid reference for ConstArrayExpr.
func (_de ConstArrayExpr )Reference (ctx Context ,ev Evaluator )Reference {return ReferenceInvalid };func _fcga (_daa float64 )bool {return _daa ==1||_daa ==2||_daa ==4};const _ggcc ="\u005e\u0028\u0028"+_cgff +"\u007c"+_dbd +"\u007c"+_ggcf +"\u007c"+_begb +"\u0029\u0020\u0029\u003f";

// MakeErrorResult constructs a #VALUE! error with a given extra error message.
// The error message is for debugging formula evaluation only and is not stored
// in the sheet.
func MakeErrorResult (msg string )Result {return MakeErrorResultType (ErrorTypeValue ,msg )};

// Update updates references in the VerticalRange after removing a row/column.
func (_ffabgg VerticalRange )Update (q *_eg .UpdateQuery )Expression {if q .UpdateType ==_eg .UpdateActionRemoveColumn {_acbac :=_ffabgg ;if q .UpdateCurrentSheet {_aega :=q .ColumnIdx ;_acbac ._adacd =_bgfe (_ffabgg ._adacd ,_aega );_acbac ._badff =_bgfe (_ffabgg ._badff ,_aega );};return _acbac ;};return _ffabgg ;};

// Text is an implementation of the Excel TEXT function.
func Text (args []Result )Result {if len (args )!=2{return MakeErrorResult ("T\u0045\u0058\u0054\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0077\u006f \u0061\u0072\u0067u\u006de\u006e\u0074\u0073");};_ebag :=args [0];if _ebag .Type !=ResultTypeNumber &&_ebag .Type !=ResultTypeString &&_ebag .Type !=ResultTypeEmpty {return MakeErrorResult ("\u0054\u0045\u0058\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0066\u0069\u0072\u0073\u0074\u0020a\u0072g\u0075\u006d\u0065\u006e\u0074\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006e\u0075\u006d\u0062e\u0072\u0020\u006f\u0072\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};if args [1].Type !=ResultTypeString {return MakeErrorResult ("\u0054E\u0058\u0054 \u0072\u0065\u0071\u0075i\u0072\u0065\u0073 \u0073\u0065\u0063\u006f\u006e\u0064\u0020\u0061\u0072gu\u006d\u0065\u006et\u0020\u0074o\u0020\u0062\u0065\u0020\u0061\u0020s\u0074\u0072i\u006e\u0067");};_fddc :=args [1].ValueString ;switch _ebag .Type {case ResultTypeNumber :return MakeStringResult (_dc .Number (_ebag .ValueNumber ,_fddc ));case ResultTypeString :return MakeStringResult (_dc .String (_ebag .ValueString ,_fddc ));case ResultTypeEmpty :return MakeStringResult (_dc .Number (0,_fddc ));case ResultTypeArray ,ResultTypeList :return MakeErrorResultType (ErrorTypeSpill ,"\u0054\u0045X\u0054\u0020\u0064\u006f\u0065\u0073\u006e\u0027\u0074\u0020\u0077\u006f\u0072\u006b\u0020\u0077\u0069\u0074\u0068\u0020\u0061\u0072ra\u0079\u0073");default:return MakeErrorResult ("I\u006e\u0063\u006f\u0072\u0072\u0065c\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et\u0020\u0066\u006fr\u0020T\u0045\u0058\u0054");};};const (_dcac countMode =iota ;_bdcea ;_fbga ;);func (_ebcfe *Lexer )nextRaw ()*node {for len (_ebcfe ._ddfd )!=0{_fbgeb :=<-_ebcfe ._ddfd [len (_ebcfe ._ddfd )-1];if _fbgeb !=nil {return _fbgeb ;};_ebcfe ._ddfd =_ebcfe ._ddfd [0:len (_ebcfe ._ddfd )-1];};return <-_ebcfe ._ddbbc ;};

// Offset is an implementation of the Excel OFFSET function.
func Offset (ctx Context ,ev Evaluator ,args []Result )Result {if len (args )!=3&&len (args )!=5{return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072e\u0073\u0020\u0074\u0068\u0072\u0065e\u0020\u006f\u0072\u0020\u0066\u0069\u0076\u0065\u0020\u0061\u0072\u0067\u0075m\u0065\u006e\u0074\u0073");};_fggc :=args [0].Ref ;for _fggc .Type ==ReferenceTypeNamedRange {_fggc =ctx .NamedRange (_fggc .Value );};_gefa :="";switch _fggc .Type {case ReferenceTypeCell :_gefa =_fggc .Value ;case ReferenceTypeRange :_gcbcd :=_c .Split (_fggc .Value ,"\u003a");if len (_gcbcd )==2{_gefa =_gcbcd [0];};default:return MakeErrorResult (_d .Sprintf ("\u0049\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u0069\u006e\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029: \u0025\u0073",_fggc .Type ));};_ddceg ,_bbec :=_bd .ParseCellReference (_gefa );if _bbec !=nil {return MakeErrorResult (_d .Sprintf ("\u0070\u0061\u0072s\u0065\u0020\u006f\u0072i\u0067\u0069\u006e\u0020\u0065\u0072\u0072o\u0072\u0020\u004f\u0046\u0046\u0053\u0045\u0054\u0028\u0029\u003a\u0020\u0025\u0073",_bbec .Error ()));};_caab ,_cabe ,_feff :=_ddceg .Column ,_ddceg .RowIdx ,_ddceg .SheetName ;_dcff :=args [1].AsNumber ();if _dcff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0072\u006f\u0077\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};_beafe :=args [2].AsNumber ();if _beafe .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046SE\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065s\u0020n\u0075m\u0065r\u0069\u0063\u0020\u0063\u006f\u006c\u0020\u006f\u0066\u0066\u0073\u0065\u0074");};var _aafed ,_ggff Result ;if len (args )==3{_aafed =MakeNumberResult (1);_ggff =MakeNumberResult (1);}else {_aafed =args [3].AsNumber ();if _aafed .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046\u0046\u0053\u0045\u0054\u0020\u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u006e\u0075m\u0065\u0072\u0069\u0063\u0020\u0068\u0065\u0069\u0067\u0068\u0074");};if _aafed .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};_ggff =args [4].AsNumber ();if _ggff .Type !=ResultTypeNumber {return MakeErrorResult ("\u004f\u0046F\u0053\u0045\u0054\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0065\u0072\u0069\u0063\u0020\u0077id\u0074\u0068");};if _ggff .ValueNumber ==0{return MakeErrorResultType (ErrorTypeRef ,"");};};_bcad :=_bd .ColumnToIndex (_caab );_gfcdg :=_cabe +uint32 (_dcff .ValueNumber );_bfdc :=_bcad +uint32 (_beafe .ValueNumber );_cegdc :=_gfcdg +uint32 (_aafed .ValueNumber );_gaffb :=_bfdc +uint32 (_ggff .ValueNumber );if _aafed .ValueNumber > 0{_cegdc --;}else {_cegdc ++;_gfcdg ,_cegdc =_cegdc ,_gfcdg ;};if _ggff .ValueNumber > 0{_gaffb --;}else {_gaffb ++;_bfdc ,_gaffb =_gaffb ,_bfdc ;};_gbbc :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_bd .IndexToColumn (_bfdc ),_gfcdg );_bdge :=_d .Sprintf ("\u0025\u0073\u0025\u0064",_bd .IndexToColumn (_gaffb ),_cegdc );if _feff ==""{return _aadf (ctx ,ev ,_gbbc ,_bdge );}else {return _aadf (ctx .Sheet (_feff ),ev ,_gbbc ,_bdge );};};

// Update updates references in the PrefixExpr after removing a row/column.
func (_ccfa PrefixExpr )Update (q *_eg .UpdateQuery )Expression {_aebg :=_ccfa ;_dfbaf :=_ccfa ._aedc .String ();if _dfbaf ==q .SheetToUpdate {_aaddg :=*q ;_aaddg .UpdateCurrentSheet =true ;_aebg ._fgfac =_ccfa ._fgfac .Update (&_aaddg );};return _aebg ;};

// Left implements the Excel LEFT(string,[n]) function which returns the
// leftmost n characters.
func Left (args []Result )Result {_eadfa :=1;switch len (args ){case 1:case 2:if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004c\u0045F\u0054\u0020\u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075me\u006e\u0074");};_eadfa =int (args [1].ValueNumber );if _eadfa < 0{return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020n\u0075m\u0062e\u0072 \u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u003e\u003d\u0020\u0030");};if _eadfa ==0{return MakeStringResult ("");};default:return MakeErrorResult ("\u004c\u0045\u0046T \u0065\u0078\u0070\u0065\u0063\u0074\u0065\u0064\u0020o\u006ee\u0020o\u0072 \u0074\u0077\u006f\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073");};if args [0].Type ==ResultTypeList {return MakeErrorResult ("\u004c\u0045\u0046T\u0020\u0063\u0061\u006e'\u0074\u0020\u0062\u0065\u0020\u0063\u0061l\u006c\u0065\u0064\u0020\u006f\u006e\u0020\u0061\u0020\u0072\u0061\u006e\u0067\u0065");};_gfcda :=args [0].Value ();if _eadfa > len (_gfcda ){return MakeStringResult (_gfcda );};return MakeStringResult (_gfcda [0:_eadfa ]);};func _cgcdg (_ddad Result ,_gfgaf *criteriaParsed )bool {if _ddad .IsBoolean {return false ;};_dbede :=_ddad .Type ;if _gfgaf ._deaa {return _dbede ==ResultTypeNumber &&_ddad .ValueNumber ==_gfgaf ._fgeb ;}else if _dbede ==ResultTypeNumber {return _fgbb (_ddad .ValueNumber ,_gfgaf ._fcgcc );};return _aefd (_ddad ,_gfgaf );};

// Findb is an implementation of the Excel FINDB().
func Findb (ctx Context ,ev Evaluator ,args []Result )Result {if !ctx .IsDBCS (){return Find (args );};_gbef ,_eacd :=_cgdfe ("\u0046\u0049\u004e\u0044",args );if _eacd .Type !=ResultTypeEmpty {return _eacd ;};_cdbc :=_gbef ._fegbd ;if _cdbc ==""{return MakeNumberResult (1.0);};_ebabe :=_gbef ._cfeac ;_eacbb :=_gbef ._dgcbc -1;_gbbf :=1;_gcdc :=0;for _bfaf :=range _ebabe {if _bfaf !=0{_bgebg :=1;if _bfaf -_gcdc > 1{_bgebg =2;};_gbbf +=_bgebg ;};if _gbbf > _eacbb {_adgg :=_c .Index (_ebabe [_bfaf :],_cdbc );if _adgg ==0{return MakeNumberResult (float64 (_gbbf ));};};_gcdc =_bfaf ;};return MakeErrorResultType (ErrorTypeValue ,"\u004eo\u0074\u0020\u0066\u006f\u0075\u006ed");};func (_gacb *evCache )GetFromCache (key string )(Result ,bool ){_gacb ._ffg .Lock ();_aaf ,_cgaf :=_gacb ._adf [key ];_gacb ._ffg .Unlock ();return _aaf ,_cgaf ;};

// Pv implements the Excel PV function.
func Pv (args []Result )Result {_egead :=len (args );if _egead < 3||_egead > 5{return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020\u0069\u006e\u0020\u0072\u0061\u006e\u0067\u0065\u0020\u006f\u0066\u0020\u0033\u0020\u0061\u006e\u0064\u00205");};if args [0].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0072\u0061\u0074\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_edea :=args [0].ValueNumber ;if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020o\u0066\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006et");};_abbc :=args [1].ValueNumber ;if _abbc !=float64 (int (_abbc )){return MakeErrorResultType (ErrorTypeNum ,"\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u006ff\u0020\u0070\u0065\u0072\u0069\u006f\u0064\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0069\u006e\u0074\u0065\u0067\u0065\u0072\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020a\u0072\u0067\u0075\u006d\u0065n\u0074");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065q\u0075\u0069\u0072\u0065\u0073\u0020\u0070\u0061\u0079\u006d\u0065\u006e\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cdac :=args [2].ValueNumber ;_cecd :=0.0;if _egead >=4&&args [3].Type !=ResultTypeEmpty {if args [3].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056 \u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0066\u0075\u0074\u0075\u0072\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u0075\u006d\u0062\u0065\u0072\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074");};_cecd =args [3].ValueNumber ;};_ecdd :=0.0;if _egead ==5&&args [4].Type !=ResultTypeEmpty {if args [4].Type !=ResultTypeNumber {return MakeErrorResult ("\u0050\u0056\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0079\u0070\u0065\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006eu\u006d\u0062\u0065\u0072\u0020a\u0072\u0067u\u006d\u0065\u006e\u0074");};_ecdd =args [4].ValueNumber ;if _ecdd !=0{_ecdd =1;};};if _edea ==0{return MakeNumberResult (-_cdac *_abbc -_cecd );}else {return MakeNumberResult ((((1-_bb .Pow (1+_edea ,_abbc ))/_edea )*_cdac *(1+_edea *_ecdd )-_cecd )/_bb .Pow (1+_edea ,_abbc ));};};const _dab =_fe .Second *1;type amorArgs struct{_cafa float64 ;_fggfe float64 ;_afeb float64 ;_ddbcf float64 ;_fdfa int ;_gbcgf float64 ;_fedg int ;};

// SumIfs implements the SUMIFS function.
func SumIfs (args []Result )Result {_cfecg :=_abafd (args ,true ,"\u0053\u0055\u004d\u0049\u0046\u0053");if _cfecg .Type !=ResultTypeEmpty {return _cfecg ;};_egce :=_cfdg (args [1:]);_dgec :=0.0;_bgbb :=_gbaa (args [0]);for _ ,_baff :=range _egce {_dgec +=_bgbb [_baff ._ggcaa ][_baff ._aeeee ].ValueNumber ;};return MakeNumberResult (float64 (_dgec ));};

// Eval evaluates a range returning a list of results or an error.
func (_dbacf Range )Eval (ctx Context ,ev Evaluator )Result {_bcebe :=_dbacf ._gbda .Reference (ctx ,ev );_fcbe :=_dbacf ._ebcfd .Reference (ctx ,ev );_babed :=_geeg (_bcebe ,_fcbe );if _bcebe .Type ==ReferenceTypeCell &&_fcbe .Type ==ReferenceTypeCell {if _cfde ,_fabcf :=ev .GetFromCache (_babed );_fabcf {return _cfde ;}else {_dcdc :=_aadf (ctx ,ev ,_bcebe .Value ,_fcbe .Value );ev .SetCache (_babed ,_dcdc );return _dcdc ;};};return MakeErrorResult ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0072a\u006e\u0067\u0065\u0020"+_babed );};

// String returns a string representation of a horizontal range with prefix.
func (_bgdfc PrefixHorizontalRange )String ()string {return _d .Sprintf ("\u0025\u0073\u0021\u0025\u0064\u003a\u0025\u0064",_bgdfc ._bccca .String (),_bgdfc ._gceg ,_bgdfc ._gfdd );};type Reference struct{Type ReferenceType ;Value string ;};

// NewConstArrayExpr constructs a new constant array expression with a given data.
func NewConstArrayExpr (data [][]Expression )Expression {return &ConstArrayExpr {_gbc :data }};func _cc (_ce Result )bool {if _ce .Type ==ResultTypeString {return _ce .ValueString =="";};return _ce .ValueNumber ==0;};

// NewNumber constructs a new number expression.
func NewNumber (v string )Expression {_deaaa ,_ddeed :=_ea .ParseFloat (v ,64);if _ddeed !=nil {_bdg .Log .Debug ("e\u0072\u0072\u006f\u0072\u0020\u0070a\u0072\u0073\u0069\u006e\u0067\u0020f\u006f\u0072\u006d\u0075\u006c\u0061\u0020n\u0075\u006d\u0062\u0065\u0072\u0020\u0025\u0073\u003a\u0020%\u0076",v ,_ddeed );};return Number {_caag :_deaaa };};

// LastEvalIsRef returns if last evaluation with the evaluator was a reference.
func (_gac *defEval )LastEvalIsRef ()bool {return _gac ._bdd };

//go:generate ragel -G2 -Z lexer.rl
//go:generate goimports -w lexer.go
type Lexer struct{_ddbbc chan *node ;_bafce _ff .Mutex ;_ddfd []chan *node ;_afcdb []*node ;};

// TimeValue is an implementation of the Excel TIMEVALUE() function.
func TimeValue (args []Result )Result {if len (args )!=1||args [0].Type !=ResultTypeString {return MakeErrorResult ("\u0054I\u004d\u0045V\u0041\u004c\u0055\u0045 \u0072\u0065\u0071u\u0069\u0072\u0065\u0073\u0020\u0061\u0020\u0073\u0069ng\u006c\u0065\u0020s\u0074\u0072i\u006e\u0067\u0020\u0061\u0072\u0067u\u006d\u0065n\u0074\u0073");};_gfa :=_c .ToLower (args [0].ValueString );if !_cdfa (_gfa ){_ ,_ ,_ ,_addc ,_edcg :=_aace (_gfa );if _edcg .Type ==ResultTypeError {_edcg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072e\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0073\u0020f\u006f\u0072\u0020\u0054\u0049\u004d\u0045V\u0041\u004c\u0055\u0045";return _edcg ;};if _addc {return MakeNumberResult (0);};};_bebe ,_eeef ,_fea ,_gee ,_ ,_bbd :=_cea (_gfa );if _bbd .Type ==ResultTypeError {return _bbd ;};_cbfb :=_feec (float64 (_bebe ),float64 (_eeef ),_fea );if _gee {_cbfb +=0.5;}else if _cbfb >=1{_cbfb -=float64 (int (_cbfb ));};return MakeNumberResult (_cbfb );};var _cgca =[...]string {"\u0024\u0065\u006e\u0064","\u0065\u0072\u0072o\u0072","\u0024\u0075\u006e\u006b","t\u006fk\u0065\u006e\u0048\u006f\u0072\u0069\u007a\u006fn\u0074\u0061\u006c\u0052an\u0067\u0065","\u0074o\u006be\u006e\u0056\u0065\u0072\u0074i\u0063\u0061l\u0052\u0061\u006e\u0067\u0065","\u0074\u006f\u006b\u0065\u006e\u0052\u0065\u0073\u0065\u0072\u0076\u0065d\u004e\u0061\u006d\u0065","\u0074\u006f\u006be\u006e\u0044\u0044\u0045\u0043\u0061\u006c\u006c","\u0074\u006f\u006b\u0065\u006e\u004c\u0065\u0078\u0045\u0072\u0072\u006f\u0072","\u0074o\u006be\u006e\u004e\u0061\u006d\u0065\u0064\u0052\u0061\u006e\u0067\u0065","\u0074o\u006b\u0065\u006e\u0042\u006f\u006fl","t\u006f\u006b\u0065\u006e\u004e\u0075\u006d\u0062\u0065\u0072","t\u006f\u006b\u0065\u006e\u0053\u0074\u0072\u0069\u006e\u0067","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072","\u0074\u006f\u006b\u0065\u006e\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0066","\u0074\u006f\u006b\u0065\u006e\u0053\u0068\u0065\u0065\u0074","\u0074o\u006b\u0065\u006e\u0043\u0065\u006cl","t\u006fk\u0065\u006e\u0046\u0075\u006e\u0063\u0074\u0069o\u006e\u0042\u0075\u0069lt\u0069\u006e","t\u006f\u006b\u0065\u006e\u004c\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u0052\u0042\u0072\u0061\u0063\u0065","t\u006f\u006b\u0065\u006e\u004c\u0050\u0061\u0072\u0065\u006e","t\u006f\u006b\u0065\u006e\u0052\u0050\u0061\u0072\u0065\u006e","\u0074o\u006b\u0065\u006e\u0050\u006c\u0075s","\u0074\u006f\u006b\u0065\u006e\u004d\u0069\u006e\u0075\u0073","\u0074o\u006b\u0065\u006e\u004d\u0075\u006ct","\u0074\u006f\u006b\u0065\u006e\u0044\u0069\u0076","\u0074\u006f\u006b\u0065\u006e\u0045\u0078\u0070","\u0074o\u006b\u0065\u006e\u0045\u0051","\u0074o\u006b\u0065\u006e\u004c\u0054","\u0074o\u006b\u0065\u006e\u0047\u0054","\u0074\u006f\u006b\u0065\u006e\u004c\u0045\u0051","\u0074\u006f\u006b\u0065\u006e\u0047\u0045\u0051","\u0074o\u006b\u0065\u006e\u004e\u0045","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006c\u006f\u006e","\u0074\u006f\u006b\u0065\u006e\u0043\u006f\u006d\u006d\u0061","\u0074\u006f\u006b\u0065\u006e\u0041\u006d\u0070\u0065r\u0073\u0061\u006e\u0064","\u0074o\u006b\u0065\u006e\u0053\u0065\u006di"};

// Minute is an implementation of the Excel MINUTE() function.
func Minute (args []Result )Result {if len (args )!=1{return MakeErrorResult ("\u004d\u0049\u004e\u0055T\u0045\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073 \u006fn\u0065\u0020\u0061\u0072\u0067\u0075\u006de\u006e\u0074");};_bdda :=args [0];switch _bdda .Type {case ResultTypeEmpty :return MakeNumberResult (0);case ResultTypeNumber :_aeee :=_adg (_bdda .ValueNumber );return MakeNumberResult (float64 (_aeee .Minute ()));case ResultTypeString :_geg :=_c .ToLower (_bdda .ValueString );if !_cdfa (_geg ){_ ,_ ,_ ,_gfb ,_bgfeg :=_aace (_geg );if _bgfeg .Type ==ResultTypeError {_bgfeg .ErrorMessage ="\u0049\u006e\u0063\u006f\u0072\u0072\u0065\u0063\u0074\u0020a\u0072\u0067\u0075\u006d\u0065\u006e\u0074s\u0020\u0066\u006f\u0072\u0020\u004d\u0049\u004e\u0055\u0054\u0045";return _bgfeg ;};if _gfb {return MakeNumberResult (0);};};_ ,_efe ,_ ,_ ,_ ,_bbgb :=_cea (_geg );if _bbgb .Type ==ResultTypeError {return _bbgb ;};return MakeNumberResult (float64 (_efe ));default:return MakeErrorResult ("\u0049\u006ec\u006f\u0072\u0072\u0065\u0063\u0074\u0020\u0061\u0072\u0067\u0075\u006d\u0065\u006e\u0074\u0020\u0066\u006f\u0072\u0020\u004d\u0049NU\u0054\u0045");};};

// Update updates references in the Range after removing a row/column.
func (_fggdb Range )Update (q *_eg .UpdateQuery )Expression {_gfaf :=_fggdb ;if q .UpdateCurrentSheet {_gfaf ._gbda =_fggdb ._gbda .Update (q );_gfaf ._ebcfd =_fggdb ._ebcfd .Update (q );};return _gfaf ;};const _edcgd =57366;

// Mid is an implementation of the Excel MID function that returns a copy
// of the string with each word capitalized.
func Mid (args []Result )Result {if len (args )!=3{return MakeErrorResult ("\u004d\u0049\u0044\u0020r\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0068r\u0065e\u0020\u0061\u0072\u0067\u0075\u006d\u0065n\u0074\u0073");};_cdeg :=args [0];if _cdeg .Type ==ResultTypeError {return _cdeg ;};if _cdeg .Type !=ResultTypeString &&_cdeg .Type !=ResultTypeNumber &&_cdeg .Type !=ResultTypeEmpty {return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0074\u0065x\u0074 \u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u0073\u0074\u0072\u0069\u006e\u0067");};_fbbfe :=args [0].Value ();if args [1].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_bedgcc :=int (args [1].ValueNumber );if _bedgcc < 1{return MakeErrorResult ("M\u0049\u0044\u0020\u0072\u0065\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u0073\u0074\u0061\u0072\u0074\u005fn\u0075\u006d\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006dor\u0065\u0020\u0074h\u0061n\u0020\u0030");};if args [2].Type !=ResultTypeNumber {return MakeErrorResult ("\u004d\u0049D\u0020\u0072\u0065\u0071u\u0069\u0072e\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u0061\u0020\u006eu\u006d\u0062\u0065\u0072");};_gcdg :=int (args [2].ValueNumber );if _gcdg < 0{return MakeErrorResult ("\u004d\u0049\u0044\u0020\u0072e\u0071\u0075\u0069\u0072\u0065\u0073\u0020\u006e\u0075\u006d\u005f\u0063\u0068a\u0072\u0073\u0020\u0074\u006f\u0020\u0062\u0065\u0020\u006e\u006f\u006e\u0020\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065");};_febed :=len (_fbbfe );if _bedgcc > _febed {return MakeStringResult ("");};_bedgcc --;_cecg :=_bedgcc +_gcdg ;if _cecg > _febed {return MakeStringResult (_fbbfe [_bedgcc :]);}else {return MakeStringResult (_fbbfe [_bedgcc :_cecg ]);};};

// Update returns the same object as updating sheet references does not affect Number.
func (_effg Number )Update (q *_eg .UpdateQuery )Expression {return _effg };const _gcedg ="\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065U\u006e\u006b\u006e\u006f\u0077\u006e\u0052\u0065\u0073u\u006c\u0074\u0054y\u0070\u0065\u004e\u0075\u006d\u0062\u0065\u0072\u0052\u0065s\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0053\u0074\u0072\u0069\u006e\u0067\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0073\u0074\u0052\u0065\u0073\u0075lt\u0054\u0079p\u0065\u0041r\u0072\u0061\u0079\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u0072\u0072\u006f\u0072\u0052\u0065\u0073\u0075\u006c\u0074\u0054\u0079\u0070\u0065\u0045\u006d\u0070\u0074\u0079";var _ddfab =[...]int {1};

// RegisterFunction registers a standard function.
func RegisterFunction (name string ,fn Function ){_ddbcg .Lock ();defer _ddbcg .Unlock ();if _ ,_caede :=_dfbg [name ];_caede {_bdg .Log .Debug ("\u0064\u0075p\u006c\u0069\u0063\u0061t\u0065\u0020r\u0065\u0067\u0069\u0073\u0074\u0072\u0061\u0074i\u006f\u006e\u0020\u006f\u0066\u0020\u0066\u0075\u006e\u0063\u0074\u0069o\u006e\u0020\u0025\u0073",name );};_dfbg [name ]=fn ;};