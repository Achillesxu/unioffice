//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference ;import (_a "errors";_c "fmt";_df "github.com/unidoc/unioffice/spreadsheet/update";_ee "regexp";_d "strconv";_f "strings";);

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_cfg *CellReference )Update (updateType _df .UpdateAction )*CellReference {switch updateType {case _df .UpdateActionRemoveColumn :_cgb :=_cfg ;_cgb .ColumnIdx =_cfg .ColumnIdx -1;_cgb .Column =IndexToColumn (_cgb .ColumnIdx );return _cgb ;default:return _cfg ;};};

// String returns a string representation of CellReference.
func (_ed CellReference )String ()string {_g :=make ([]byte ,0,4);if _ed .AbsoluteColumn {_g =append (_g ,'$');};_g =append (_g ,_ed .Column ...);if _ed .AbsoluteRow {_g =append (_g ,'$');};_g =_d .AppendInt (_g ,int64 (_ed .RowIdx ),10);return string (_g );};

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn (col uint32 )string {var _gg [64+1]byte ;_fb :=len (_gg );_fa :=col ;const _cfc =26;for _fa >=_cfc {_fb --;_dg :=_fa /_cfc ;_gg [_fb ]=byte ('A'+uint (_fa -_dg *_cfc ));_fa =_dg -1;};_fb --;_gg [_fb ]=byte ('A'+uint (_fa ));return string (_gg [_fb :]);};

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct{ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;SheetName string ;};var _fg =_ee .MustCompile ("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024");

// String returns a string representation of ColumnReference.
func (_eed ColumnReference )String ()string {_ab :=make ([]byte ,0,4);if _eed .AbsoluteColumn {_ab =append (_ab ,'$');};_ab =append (_ab ,_eed .Column ...);return string (_ab );};

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct{RowIdx uint32 ;ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;AbsoluteRow bool ;SheetName string ;};

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference (s string )(ColumnReference ,error ){s =_f .TrimSpace (s );if len (s )< 1{return ColumnReference {},_a .New ("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072");};_cd :=ColumnReference {};_ad ,_ac ,_b :=_ffe (s );if _b !=nil {return ColumnReference {},_b ;};if _ad !=""{_cd .SheetName =_ad ;};if _ac [0]=='$'{_cd .AbsoluteColumn =true ;_ac =_ac [1:];};if !_fg .MatchString (_ac ){return ColumnReference {},_a .New ("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a");};_cd .Column =_ac ;_cd .ColumnIdx =ColumnToIndex (_cd .Column );return _cd ,nil ;};

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference (s string )(_edg ,_fc CellReference ,_aa error ){_ged ,_aab ,_aa :=_ffe (s );if _aa !=nil {return CellReference {},CellReference {},_aa ;};_fbf :=_f .Split (_aab ,"\u003a");if len (_fbf )!=2{return CellReference {},CellReference {},_a .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _ged !=""{_fbf [0]=_ged +"\u0021"+_fbf [0];_fbf [1]=_ged +"\u0021"+_fbf [1];};_feg ,_aa :=ParseCellReference (_fbf [0]);if _aa !=nil {return CellReference {},CellReference {},_aa ;};_dcd ,_aa :=ParseCellReference (_fbf [1]);if _aa !=nil {return CellReference {},CellReference {},_aa ;};return _feg ,_dcd ,nil ;};

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference (s string )(CellReference ,error ){s =_f .TrimSpace (s );if len (s )< 2{return CellReference {},_a .New ("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073");};_ff :=CellReference {};_dc ,_cg ,_gc :=_ffe (s );if _gc !=nil {return CellReference {},_gc ;};if _dc !=""{_ff .SheetName =_dc ;};if s [0]=='$'{_ff .AbsoluteColumn =true ;_cg =_cg [1:];};_cf :=-1;_ge :for _ef :=0;_ef < len (_cg );_ef ++{switch {case _cg [_ef ]>='0'&&_cg [_ef ]<='9'||_cg [_ef ]=='$':_cf =_ef ;break _ge ;};};switch _cf {case 0:return CellReference {},_c .Errorf ("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073",_cg );case -1:return CellReference {},_c .Errorf ("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073",_cg );};_ff .Column =_cg [0:_cf ];if _cg [_cf ]=='$'{_ff .AbsoluteRow =true ;_cf ++;};_ff .ColumnIdx =ColumnToIndex (_ff .Column );_ga ,_gc :=_d .ParseUint (_cg [_cf :],10,32);if _gc !=nil {return CellReference {},_c .Errorf ("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073",_gc );};_ff .RowIdx =uint32 (_ga );return _ff ,nil ;};

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex (col string )uint32 {col =_f .ToUpper (col );_ca :=uint32 (0);for _ ,_cfd :=range col {_ca *=26;_ca +=uint32 (_cfd -'A'+1);};return _ca -1;};

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_fe *ColumnReference )Update (updateType _df .UpdateAction )*ColumnReference {switch updateType {case _df .UpdateActionRemoveColumn :_eb :=_fe ;_eb .ColumnIdx =_fe .ColumnIdx -1;_eb .Column =IndexToColumn (_eb .ColumnIdx );return _eb ;default:return _fe ;};};func _ffe (_ba string )(string ,string ,error ){_bae :="";_dcc :=_f .LastIndex (_ba ,"\u0021");if _dcc > -1{_bae =_ba [:_dcc ];_ba =_ba [_dcc +1:];if _bae ==""{return "","",_a .New ("\u0049n\u0076a\u006c\u0069\u0064\u0020\u0073h\u0065\u0065t\u0020\u006e\u0061\u006d\u0065");};};return _bae ,_ba ,nil ;};

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference (s string )(_cfa ,_dd ColumnReference ,_af error ){_ace :="";_baeg :=_f .Split (s ,"\u0021");if len (_baeg )==2{_ace =_baeg [0];s =_baeg [1];};_bfb :=_f .Split (s ,"\u003a");if len (_bfb )!=2{return ColumnReference {},ColumnReference {},_a .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _ace !=""{_bfb [0]=_ace +"\u0021"+_bfb [0];_bfb [1]=_ace +"\u0021"+_bfb [1];};_fgb ,_af :=ParseColumnReference (_bfb [0]);if _af !=nil {return ColumnReference {},ColumnReference {},_af ;};_aaf ,_af :=ParseColumnReference (_bfb [1]);if _af !=nil {return ColumnReference {},ColumnReference {},_af ;};return _fgb ,_aaf ,nil ;};