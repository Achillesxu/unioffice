//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference ;import (_b "errors";_e "fmt";_f "github.com/unidoc/unioffice/spreadsheet/update";_cc "regexp";_d "strconv";_bb "strings";);

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference (s string )(CellReference ,error ){s =_bb .TrimSpace (s );if len (s )< 2{return CellReference {},_b .New ("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073");};_ed :=CellReference {};_ec ,_cb ,_bd :=_bce (s );if _bd !=nil {return CellReference {},_bd ;};if _ec !=""{_ed .SheetName =_ec ;};if s [0]=='$'{_ed .AbsoluteColumn =true ;_cb =_cb [1:];};_cd :=-1;_dd :for _a :=0;_a < len (_cb );_a ++{switch {case _cb [_a ]>='0'&&_cb [_a ]<='9'||_cb [_a ]=='$':_cd =_a ;break _dd ;};};switch _cd {case 0:return CellReference {},_e .Errorf ("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073",_cb );case -1:return CellReference {},_e .Errorf ("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073",_cb );};_ed .Column =_cb [0:_cd ];if _cb [_cd ]=='$'{_ed .AbsoluteRow =true ;_cd ++;};_ed .ColumnIdx =ColumnToIndex (_ed .Column );_cg ,_bd :=_d .ParseUint (_cb [_cd :],10,32);if _bd !=nil {return CellReference {},_e .Errorf ("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073",_bd );};if _cg ==0{return CellReference {},_e .Errorf ("\u0065\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0072\u006f\u0077\u003a \u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0030");};_ed .RowIdx =uint32 (_cg );return _ed ,nil ;};

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct{RowIdx uint32 ;ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;AbsoluteRow bool ;SheetName string ;};

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct{ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;SheetName string ;};

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference (s string )(ColumnReference ,error ){s =_bb .TrimSpace (s );if len (s )< 1{return ColumnReference {},_b .New ("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072");};_de :=ColumnReference {};_ece ,_eb ,_df :=_bce (s );if _df !=nil {return ColumnReference {},_df ;};if _ece !=""{_de .SheetName =_ece ;};if _eb [0]=='$'{_de .AbsoluteColumn =true ;_eb =_eb [1:];};if !_bbg .MatchString (_eb ){return ColumnReference {},_b .New ("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a");};_de .Column =_eb ;_de .ColumnIdx =ColumnToIndex (_de .Column );return _de ,nil ;};

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference (s string )(_fcb ,_eaf ColumnReference ,_ca error ){_bde :="";_dbd :=_bb .Split (s ,"\u0021");if len (_dbd )==2{_bde =_dbd [0];s =_dbd [1];};_ad :=_bb .Split (s ,"\u003a");if len (_ad )!=2{return ColumnReference {},ColumnReference {},_b .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _bde !=""{_ad [0]=_bde +"\u0021"+_ad [0];_ad [1]=_bde +"\u0021"+_ad [1];};_fg ,_ca :=ParseColumnReference (_ad [0]);if _ca !=nil {return ColumnReference {},ColumnReference {},_ca ;};_ddd ,_ca :=ParseColumnReference (_ad [1]);if _ca !=nil {return ColumnReference {},ColumnReference {},_ca ;};return _fg ,_ddd ,nil ;};

// String returns a string representation of CellReference.
func (_ea CellReference )String ()string {_bc :=make ([]byte ,0,4);if _ea .AbsoluteColumn {_bc =append (_bc ,'$');};_bc =append (_bc ,_ea .Column ...);if _ea .AbsoluteRow {_bc =append (_bc ,'$');};_bc =_d .AppendInt (_bc ,int64 (_ea .RowIdx ),10);return string (_bc );};

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex (col string )uint32 {col =_bb .ToUpper (col );_ef :=uint32 (0);for _ ,_fd :=range col {_ef *=26;_ef +=uint32 (_fd -'A'+1);};return _ef -1;};

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_eae *ColumnReference )Update (updateType _f .UpdateAction )*ColumnReference {switch updateType {case _f .UpdateActionRemoveColumn :_eba :=_eae ;_eba .ColumnIdx =_eae .ColumnIdx -1;_eba .Column =IndexToColumn (_eba .ColumnIdx );return _eba ;default:return _eae ;};};func _bce (_gd string )(string ,string ,error ){_ebg :="";_be :=_bb .LastIndex (_gd ,"\u0021");if _be > -1{_ebg =_gd [:_be ];_gd =_gd [_be +1:];if _ebg ==""{return "","",_b .New ("\u0049n\u0076a\u006c\u0069\u0064\u0020\u0073h\u0065\u0065t\u0020\u006e\u0061\u006d\u0065");};};return _ebg ,_gd ,nil ;};

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_bdc *CellReference )Update (updateType _f .UpdateAction )*CellReference {switch updateType {case _f .UpdateActionRemoveColumn :_cbe :=_bdc ;_cbe .ColumnIdx =_bdc .ColumnIdx -1;_cbe .Column =IndexToColumn (_cbe .ColumnIdx );return _cbe ;default:return _bdc ;};};

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference (s string )(_cgf ,_ab CellReference ,_fc error ){_dea ,_cdd ,_fc :=_bce (s );if _fc !=nil {return CellReference {},CellReference {},_fc ;};_fe :=_bb .Split (_cdd ,"\u003a");if len (_fe )!=2{return CellReference {},CellReference {},_b .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _dea !=""{_fe [0]=_dea +"\u0021"+_fe [0];_fe [1]=_dea +"\u0021"+_fe [1];};_ga ,_fc :=ParseCellReference (_fe [0]);if _fc !=nil {return CellReference {},CellReference {},_fc ;};_gdb ,_fc :=ParseCellReference (_fe [1]);if _fc !=nil {return CellReference {},CellReference {},_fc ;};return _ga ,_gdb ,nil ;};

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn (col uint32 )string {var _bcb [64+1]byte ;_ce :=len (_bcb );_bg :=col ;const _cde =26;for _bg >=_cde {_ce --;_db :=_bg /_cde ;_bcb [_ce ]=byte ('A'+uint (_bg -_db *_cde ));_bg =_db -1;};_ce --;_bcb [_ce ]=byte ('A'+uint (_bg ));return string (_bcb [_ce :]);};

// String returns a string representation of ColumnReference.
func (_dc ColumnReference )String ()string {_g :=make ([]byte ,0,4);if _dc .AbsoluteColumn {_g =append (_g ,'$');};_g =append (_g ,_dc .Column ...);return string (_g );};var _bbg =_cc .MustCompile ("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024");