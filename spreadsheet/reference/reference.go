//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

package reference ;import (_g "errors";_be "fmt";_gf "github.com/unidoc/unioffice/spreadsheet/update";_d "regexp";_e "strconv";_b "strings";);

// String returns a string representation of CellReference.
func (_dc CellReference )String ()string {_gb :=make ([]byte ,0,4);if _dc .AbsoluteColumn {_gb =append (_gb ,'$');};_gb =append (_gb ,_dc .Column ...);if _dc .AbsoluteRow {_gb =append (_gb ,'$');};_gb =_e .AppendInt (_gb ,int64 (_dc .RowIdx ),10);return string (_gb );};var _ffa =_d .MustCompile ("^\u005b\u0061\u002d\u007aA-\u005a]\u0028\u005b\u0061\u002d\u007aA\u002d\u005a\u005d\u003f\u0029\u0024");

// ParseColumnReference parses a column reference of the form 'Sheet1!A' and splits it
// into sheet name and column segments.
func ParseColumnReference (s string )(ColumnReference ,error ){s =_b .TrimSpace (s );if len (s )< 1{return ColumnReference {},_g .New ("\u0063\u006f\u006c\u0075\u006d\u006e \u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075\u0073\u0074\u0020\u0068\u0061\u0076\u0065\u0020a\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u006f\u006e\u0065\u0020\u0063\u0068a\u0072a\u0063\u0074\u0065\u0072");};_df :=ColumnReference {};_dcf ,_fe ,_cdg :=_fg (s );if _cdg !=nil {return ColumnReference {},_cdg ;};if _dcf !=""{_df .SheetName =_dcf ;};if _fe [0]=='$'{_df .AbsoluteColumn =true ;_fe =_fe [1:];};if !_ffa .MatchString (_fe ){return ColumnReference {},_g .New ("\u0063\u006f\u006c\u0075\u006dn\u0020\u0072\u0065\u0066\u0065\u0072\u0065\u006e\u0063\u0065\u0020\u006d\u0075s\u0074\u0020\u0062\u0065\u0020\u0062\u0065\u0074\u0077\u0065\u0065\u006e\u0020\u0041\u0020\u0061\u006e\u0064\u0020\u005a\u005a");};_df .Column =_fe ;_df .ColumnIdx =ColumnToIndex (_df .Column );return _df ,nil ;};

// ParseColumnRangeReference splits a range reference of the form "A:B" into its
// components.
func ParseColumnRangeReference (s string )(_bg ,_bgc ColumnReference ,_fgc error ){_ead :="";_ed :=_b .Split (s ,"\u0021");if len (_ed )==2{_ead =_ed [0];s =_ed [1];};_cc :=_b .Split (s ,"\u003a");if len (_cc )!=2{return ColumnReference {},ColumnReference {},_g .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _ead !=""{_cc [0]=_ead +"\u0021"+_cc [0];_cc [1]=_ead +"\u0021"+_cc [1];};_gedc ,_fgc :=ParseColumnReference (_cc [0]);if _fgc !=nil {return ColumnReference {},ColumnReference {},_fgc ;};_ga ,_fgc :=ParseColumnReference (_cc [1]);if _fgc !=nil {return ColumnReference {},ColumnReference {},_fgc ;};return _gedc ,_ga ,nil ;};

// CellReference is a parsed reference to a cell.  Input is of the form 'A1',
// '$C$2', etc.
type CellReference struct{RowIdx uint32 ;ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;AbsoluteRow bool ;SheetName string ;};

// ColumnToIndex maps a column to a zero based index (e.g. A = 0, B = 1, AA = 26)
func ColumnToIndex (col string )uint32 {col =_b .ToUpper (col );_bb :=uint32 (0);for _ ,_cgf :=range col {_bb *=26;_bb +=uint32 (_cgf -'A'+1);};return _bb -1;};

// ParseRangeReference splits a range reference of the form "A1:B5" into its
// components.
func ParseRangeReference (s string )(_ae ,_bbb CellReference ,_afd error ){_de ,_ea ,_afd :=_fg (s );if _afd !=nil {return CellReference {},CellReference {},_afd ;};_ged :=_b .Split (_ea ,"\u003a");if len (_ged )!=2{return CellReference {},CellReference {},_g .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0072\u0061\u006eg\u0065\u0020\u0066\u006frm\u0061\u0074");};if _de !=""{_ged [0]=_de +"\u0021"+_ged [0];_ged [1]=_de +"\u0021"+_ged [1];};_gbd ,_afd :=ParseCellReference (_ged [0]);if _afd !=nil {return CellReference {},CellReference {},_afd ;};_ffaa ,_afd :=ParseCellReference (_ged [1]);if _afd !=nil {return CellReference {},CellReference {},_afd ;};return _gbd ,_ffaa ,nil ;};

// ParseCellReference parses a cell reference of the form 'A10' and splits it
// into column/row segments.
func ParseCellReference (s string )(CellReference ,error ){s =_b .TrimSpace (s );if len (s )< 2{return CellReference {},_g .New ("\u0063\u0065\u006c\u006c\u0020\u0072\u0065\u0066e\u0072\u0065\u006ece\u0020\u006d\u0075\u0073\u0074\u0020h\u0061\u0076\u0065\u0020\u0061\u0074\u0020\u006c\u0065\u0061\u0073\u0074\u0020\u0074\u0077o\u0020\u0063\u0068\u0061\u0072\u0061\u0063\u0074e\u0072\u0073");};_cd :=CellReference {};_gfg ,_bf ,_cg :=_fg (s );if _cg !=nil {return CellReference {},_cg ;};if _gfg !=""{_cd .SheetName =_gfg ;};if s [0]=='$'{_cd .AbsoluteColumn =true ;_bf =_bf [1:];};_a :=-1;_f :for _bd :=0;_bd < len (_bf );_bd ++{switch {case _bf [_bd ]>='0'&&_bf [_bd ]<='9'||_bf [_bd ]=='$':_a =_bd ;break _f ;};};switch _a {case 0:return CellReference {},_be .Errorf ("\u006e\u006f\u0020\u006cet\u0074\u0065\u0072\u0020\u0070\u0072\u0065\u0066\u0069\u0078\u0020\u0069\u006e\u0020%\u0073",_bf );case -1:return CellReference {},_be .Errorf ("\u006eo\u0020d\u0069\u0067\u0069\u0074\u0073\u0020\u0069\u006e\u0020\u0025\u0073",_bf );};_cd .Column =_bf [0:_a ];if _bf [_a ]=='$'{_cd .AbsoluteRow =true ;_a ++;};_cd .ColumnIdx =ColumnToIndex (_cd .Column );_ff ,_cg :=_e .ParseUint (_bf [_a :],10,32);if _cg !=nil {return CellReference {},_be .Errorf ("e\u0072\u0072\u006f\u0072 p\u0061r\u0073\u0069\u006e\u0067\u0020r\u006f\u0077\u003a\u0020\u0025\u0073",_cg );};if _ff ==0{return CellReference {},_be .Errorf ("\u0065\u0072\u0072\u006f\u0072\u0020\u0070\u0061\u0072\u0073i\u006e\u0067\u0020\u0072\u006f\u0077\u003a \u0063\u0061\u006e\u006e\u006f\u0074\u0020\u0062\u0065\u0020\u0030");};_cd .RowIdx =uint32 (_ff );return _cd ,nil ;};func _fg (_ec string )(string ,string ,error ){_db :="";_agg :=_b .LastIndex (_ec ,"\u0021");if _agg > -1{_db =_ec [:_agg ];_ec =_ec [_agg +1:];if _db ==""{return "","",_g .New ("\u0049n\u0076a\u006c\u0069\u0064\u0020\u0073h\u0065\u0065t\u0020\u006e\u0061\u006d\u0065");};};return _db ,_ec ,nil ;};

// Update updates reference to point one of the neighboring cells with respect to the update type after removing a row/column.
func (_bdb *CellReference )Update (updateType _gf .UpdateAction )*CellReference {switch updateType {case _gf .UpdateActionRemoveColumn :_aa :=_bdb ;_aa .ColumnIdx =_bdb .ColumnIdx -1;_aa .Column =IndexToColumn (_aa .ColumnIdx );return _aa ;default:return _bdb ;};};

// String returns a string representation of ColumnReference.
func (_dcb ColumnReference )String ()string {_ca :=make ([]byte ,0,4);if _dcb .AbsoluteColumn {_ca =append (_ca ,'$');};_ca =append (_ca ,_dcb .Column ...);return string (_ca );};

// Update updates reference to point one of the neighboring columns with respect to the update type after removing a row/column.
func (_ag *ColumnReference )Update (updateType _gf .UpdateAction )*ColumnReference {switch updateType {case _gf .UpdateActionRemoveColumn :_ge :=_ag ;_ge .ColumnIdx =_ag .ColumnIdx -1;_ge .Column =IndexToColumn (_ge .ColumnIdx );return _ge ;default:return _ag ;};};

// ColumnReference is a parsed reference to a column.  Input is of the form 'A',
// '$C', etc.
type ColumnReference struct{ColumnIdx uint32 ;Column string ;AbsoluteColumn bool ;SheetName string ;};

// IndexToColumn maps a column number to a column name (e.g. 0 = A, 1 = B, 26 = AA)
func IndexToColumn (col uint32 )string {var _bc [64+1]byte ;_ba :=len (_bc );_cb :=col ;const _af =26;for _cb >=_af {_ba --;_eb :=_cb /_af ;_bc [_ba ]=byte ('A'+uint (_cb -_eb *_af ));_cb =_eb -1;};_ba --;_bc [_ba ]=byte ('A'+uint (_cb ));return string (_bc [_ba :]);};