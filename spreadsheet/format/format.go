//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_g "bytes";_e "fmt";_agf "github.com/unidoc/unioffice/common/logger";_d "io";_df "math";_ag "strconv";_f "strings";_c "time";);var _ce =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_bb :=Parse (f );if len (_bb )==1{return _cefe (v ,_bb [0],false );}else if len (_bb )> 1&&v < 0{return _cefe (v ,_bb [1],true );}else if len (_bb )> 2&&v ==0{return _cefe (v ,_bb [2],false );};return _cefe (v ,_bb [0],false );};const _abc int =0;

// AddToken adds a format token to the format.
func (_agb *Format )AddToken (t FmtType ,l []byte ){if _agb ._ecb {_agb ._ecb =false ;return ;};switch t {case FmtTypeDecimal :_agb ._af =true ;case FmtTypeUnderscore :_agb ._ecb =true ;case FmtTypeText :_agb .Whole =append (_agb .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_agb .Whole =append (_agb .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_agb ._gb =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_dd :=range l {if _agb .IsExponential {_agb .Exponent =append (_agb .Exponent ,Token {Type :t ,Literal :_dd });}else if !_agb ._af {_agb .Whole =append (_agb .Whole ,Token {Type :t ,Literal :_dd });}else {_agb .Fractional =append (_agb .Fractional ,Token {Type :t ,Literal :_dd });};};case FmtTypeDigitOptThousands :_agb ._gd =true ;case FmtTypeFraction :_fa :=_f .Split (string (l ),"\u002f");if len (_fa )==2{_agb ._ee =true ;_agb ._fc ,_ =_ag .ParseInt (_fa [1],10,64);for _ ,_eee :=range _fa [1]{if _eee =='?'||_eee =='0'{_agb ._eg ++;};};};default:_agf .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};type Lexer struct{_bdca Format ;_gfe []Format ;};func _dda (_ac []byte )[]byte {for _db :=0;_db < len (_ac )/2;_db ++{_bbfg :=len (_ac )-1-_db ;_ac [_db ],_ac [_bbfg ]=_ac [_bbfg ],_ac [_db ];};return _ac ;};const _ec =1e11;const _bcc int =0;

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;func _cag (_bda _c .Time ,_dfb float64 ,_fgb string )[]byte {_cfa :=[]byte {};_aef :=0;for _de :=0;_de < len (_fgb );_de ++{var _efb string ;if _fgb [_de ]==':'{_efb =string (_fgb [_aef :_de ]);_aef =_de +1;}else if _de ==len (_fgb )-1{_efb =string (_fgb [_aef :_de +1]);}else {continue ;};switch _efb {case "\u0064":_cfa =_bda .AppendFormat (_cfa ,"\u0032");case "\u0068":_cfa =_bda .AppendFormat (_cfa ,"\u0033");case "\u0068\u0068":_cfa =_bda .AppendFormat (_cfa ,"\u0031\u0035");case "\u006d":_cfa =_bda .AppendFormat (_cfa ,"\u0034");case "\u006d\u006d":_cfa =_bda .AppendFormat (_cfa ,"\u0030\u0034");case "\u0073":_cfa =_bda .Round (_c .Second ).AppendFormat (_cfa ,"\u0035");case "\u0073\u002e\u0030":_cfa =_bda .Round (_c .Second /10).AppendFormat (_cfa ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_cfa =_bda .Round (_c .Second /100).AppendFormat (_cfa ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_cfa =_bda .Round (_c .Second /1000).AppendFormat (_cfa ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_cfa =_bda .Round (_c .Second ).AppendFormat (_cfa ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_cfa =_bda .Round (_c .Second /10).AppendFormat (_cfa ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_cfa =_bda .Round (_c .Second /100).AppendFormat (_cfa ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_cfa =_bda .Round (_c .Second /1000).AppendFormat (_cfa ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_cfa =_bda .AppendFormat (_cfa ,"\u0050\u004d");case "\u005b\u0068\u005d":_cfa =_ag .AppendInt (_cfa ,int64 (_dfb *24),10);case "\u005b\u006d\u005d":_cfa =_ag .AppendInt (_cfa ,int64 (_dfb *24*60),10);case "\u005b\u0073\u005d":_cfa =_ag .AppendInt (_cfa ,int64 (_dfb *24*60*60),10);case "":default:_agf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_efb );};if _fgb [_de ]==':'{_cfa =append (_cfa ,':');};};return _cfa ;};func (_cb FmtType )String ()string {if _cb >=FmtType (len (_ce )-1){return _e .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cb );};return _dg [_ce [_cb ]:_ce [_cb +1]];};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ecf :=Parse (f );var _ca Format ;if len (_ecf )==1{_ca =_ecf [0];}else if len (_ecf )==4{_ca =_ecf [3];};_agd :=false ;for _ ,_ge :=range _ca .Whole {if _ge .Type ==FmtTypeText {_agd =true ;};};if !_agd {return v ;};_bf :=_g .Buffer {};for _ ,_eb :=range _ca .Whole {switch _eb .Type {case FmtTypeLiteral :_bf .WriteByte (_eb .Literal );case FmtTypeText :_bf .WriteString (v );};};return _bf .String ();};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_fb ,_ :=_ag .ParseFloat (v ,64);return Number (_fb ,f );};return String (v ,f );};const _bed int =34;func Parse (s string )[]Format {_gcg :=Lexer {};_gcg .Lex (_f .NewReader (s ));_gcg ._gfe =append (_gcg ._gfe ,_gcg ._bdca );return _gcg ._gfe ;};func (_ggeec *Lexer )nextFmt (){_ggeec ._gfe =append (_ggeec ._gfe ,_ggeec ._bdca );_ggeec ._bdca =Format {};};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_ee bool ;_gb bool ;_dgd bool ;_gd bool ;_ecb bool ;_af bool ;_fc int64 ;_eg int ;};const _cedc int =0;func _egf (_afd _c .Time ,_gafd string )[]byte {_aec :=[]byte {};_fgd :=0;for _fcd :=0;_fcd < len (_gafd );_fcd ++{var _beg string ;if _gafd [_fcd ]=='/'{_beg =string (_gafd [_fgd :_fcd ]);_fgd =_fcd +1;}else if _fcd ==len (_gafd )-1{_beg =string (_gafd [_fgd :_fcd +1]);}else {continue ;};switch _beg {case "\u0079\u0079":_aec =_afd .AppendFormat (_aec ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_aec =_afd .AppendFormat (_aec ,"\u0032\u0030\u0030\u0036");case "\u006d":_aec =_afd .AppendFormat (_aec ,"\u0031");case "\u006d\u006d":_aec =_afd .AppendFormat (_aec ,"\u0030\u0031");case "\u006d\u006d\u006d":_aec =_afd .AppendFormat (_aec ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_aec =_afd .AppendFormat (_aec ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _afd .Month (){case _c .January ,_c .July ,_c .June :_aec =append (_aec ,'J');case _c .February :_aec =append (_aec ,'M');case _c .March ,_c .May :_aec =append (_aec ,'M');case _c .April ,_c .August :_aec =append (_aec ,'A');case _c .September :_aec =append (_aec ,'S');case _c .October :_aec =append (_aec ,'O');case _c .November :_aec =append (_aec ,'N');case _c .December :_aec =append (_aec ,'D');};case "\u0064":_aec =_afd .AppendFormat (_aec ,"\u0032");case "\u0064\u0064":_aec =_afd .AppendFormat (_aec ,"\u0030\u0032");case "\u0064\u0064\u0064":_aec =_afd .AppendFormat (_aec ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_aec =_afd .AppendFormat (_aec ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_agf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_beg );};if _gafd [_fcd ]=='/'{_aec =append (_aec ,'/');};};return _aec ;};func _gdf (_ff int64 )int64 {if _ff < 0{return -_ff ;};return _ff ;};const _dg ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";const _bbd int =34;const _gg =1e-10;func _aa (_cgb []byte )[]byte {_gda :=len (_cgb );_bdf :=false ;_cfcd :=false ;for _bef :=len (_cgb )-1;_bef >=0;_bef --{if _cgb [_bef ]=='0'&&!_cfcd &&!_bdf {_gda =_bef ;}else if _cgb [_bef ]=='.'{_bdf =true ;}else {_cfcd =true ;};};if _bdf &&_cfcd {if _cgb [_gda -1]=='.'{_gda --;};return _cgb [0:_gda ];};return _cgb ;};func IsNumber (data string )(_ccgb bool ){_fadc ,_ebf ,_fbec :=0,0,len (data );_geg :=len (data );_gcc ,_fba ,_cde :=0,0,0;_ =_fba ;_ =_cde ;_ =_gcc ;{_fadc =_cedc ;_gcc =0;_fba =0;_cde =0;};{if _ebf ==_fbec {goto _cggd ;};switch _fadc {case 0:goto _dbb ;case 1:goto _cbe ;case 2:goto _agbf ;case 3:goto _aae ;case 4:goto _efa ;case 5:goto _eggd ;case 6:goto _beb ;case 7:goto _fe ;};goto _adf ;_cec :_fba =_ebf ;_ebf --;{_ccgb =false ;};goto _gega ;_gfad :_fba =_ebf ;_ebf --;{_ccgb =_fba ==len (data );};goto _gega ;_fcga :_fba =_ebf ;_ebf --;{_ccgb =_fba ==len (data );};goto _gega ;_bga :switch _cde {case 2:{_ebf =(_fba )-1;_ccgb =_fba ==len (data );};case 3:{_ebf =(_fba )-1;_ccgb =false ;};};goto _gega ;_gega :_gcc =0;if _ebf ++;_ebf ==_fbec {goto _aead ;};_dbb :_gcc =_ebf ;switch data [_ebf ]{case 43:goto _ecbg ;case 45:goto _ecbg ;};if 48<=data [_ebf ]&&data [_ebf ]<=57{goto _fab ;};goto _ggee ;_ggee :if _ebf ++;_ebf ==_fbec {goto _gea ;};_cbe :goto _ggee ;_ecbg :if _ebf ++;_ebf ==_fbec {goto _deg ;};_agbf :if 48<=data [_ebf ]&&data [_ebf ]<=57{goto _fab ;};goto _ggee ;_fab :if _ebf ++;_ebf ==_fbec {goto _eaa ;};_aae :if data [_ebf ]==46{goto _ebfg ;};if 48<=data [_ebf ]&&data [_ebf ]<=57{goto _fab ;};goto _ggee ;_ebfg :if _ebf ++;_ebf ==_fbec {goto _aeg ;};_efa :if 48<=data [_ebf ]&&data [_ebf ]<=57{goto _gegc ;};goto _ggee ;_gegc :if _ebf ++;_ebf ==_fbec {goto _cefg ;};_eggd :if data [_ebf ]==69{goto _cgg ;};if 48<=data [_ebf ]&&data [_ebf ]<=57{goto _gegc ;};goto _ggee ;_cgg :if _ebf ++;_ebf ==_fbec {goto _abca ;};_beb :switch data [_ebf ]{case 43:goto _adc ;case 45:goto _adc ;};goto _ggee ;_adc :_fba =_ebf +1;_cde =3;goto _aabf ;_gage :_fba =_ebf +1;_cde =2;goto _aabf ;_aabf :if _ebf ++;_ebf ==_fbec {goto _dcca ;};_fe :if 48<=data [_ebf ]&&data [_ebf ]<=57{goto _gage ;};goto _ggee ;_adf :_aead :_fadc =0;goto _cggd ;_gea :_fadc =1;goto _cggd ;_deg :_fadc =2;goto _cggd ;_eaa :_fadc =3;goto _cggd ;_aeg :_fadc =4;goto _cggd ;_cefg :_fadc =5;goto _cggd ;_abca :_fadc =6;goto _cggd ;_dcca :_fadc =7;goto _cggd ;_cggd :{};if _ebf ==_geg {switch _fadc {case 1:goto _cec ;case 2:goto _cec ;case 3:goto _gfad ;case 4:goto _cec ;case 5:goto _fcga ;case 6:goto _cec ;case 7:goto _bga ;};};};if _fadc ==_fabe {return false ;};return ;};func (_dcd *Lexer )Lex (r _d .Reader ){_baa ,_dfde ,_fcf :=0,0,0;_dab :=-1;_cdb ,_cff ,_eff :=0,0,0;_ =_cff ;_ =_eff ;_ecfb :=1;_ =_ecfb ;_bec :=make ([]byte ,4096);_fgg :=false ;for !_fgg {_abd :=0;if _cdb > 0{_abd =_dfde -_cdb ;};_dfde =0;_efd ,_acf :=r .Read (_bec [_abd :]);if _efd ==0||_acf !=nil {_fgg =true ;};_fcf =_efd +_abd ;if _fcf < len (_bec ){_dab =_fcf ;};{_baa =_ddc ;_cdb =0;_cff =0;_eff =0;};{if _dfde ==_fcf {goto _geggg ;};switch _baa {case 34:goto _bdfd ;case 35:goto _cgf ;case 0:goto _ddaa ;case 36:goto _ggf ;case 37:goto _dfcg ;case 1:goto _fbg ;case 2:goto _acaf ;case 38:goto _dbda ;case 3:goto _bfed ;case 4:goto _bgcb ;case 39:goto _befg ;case 5:goto _bece ;case 6:goto _fbaa ;case 7:goto _acff ;case 8:goto _gga ;case 40:goto _egbc ;case 9:goto _effb ;case 41:goto _daa ;case 10:goto _gegg ;case 42:goto _ddg ;case 11:goto _gad ;case 43:goto _gee ;case 44:goto _ebfe ;case 45:goto _cgfc ;case 12:goto _fec ;case 46:goto _cbb ;case 13:goto _dafd ;case 14:goto _abdb ;case 15:goto _daaa ;case 16:goto _eab ;case 47:goto _bdfc ;case 17:goto _ggaa ;case 48:goto _dbgd ;case 18:goto _befb ;case 19:goto _gdag ;case 20:goto _abg ;case 49:goto _dacg ;case 50:goto _dee ;case 21:goto _fcc ;case 22:goto _cafb ;case 23:goto _adge ;case 24:goto _fbb ;case 25:goto _ddda ;case 51:goto _edb ;case 26:goto _gdfb ;case 52:goto _faae ;case 53:goto _cgfa ;case 54:goto _eed ;case 55:goto _aece ;case 56:goto _ggfe ;case 57:goto _bebb ;case 27:goto _agae ;case 28:goto _bea ;case 29:goto _gfb ;case 30:goto _fcca ;case 31:goto _bad ;case 58:goto _gbbd ;case 32:goto _aceb ;case 59:goto _eeeg ;case 33:goto _aaba ;case 60:goto _bgba ;case 61:goto _bccf ;case 62:goto _ebc ;};goto _cfce ;_fac :switch _eff {case 2:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeDigit ,nil );};case 3:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_dfde =(_cff )-1;};case 8:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypePercent ,nil );};case 13:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeFraction ,_bec [_cdb :_cff ]);};case 14:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeDate ,_bec [_cdb :_cff ]);};case 15:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeTime ,_bec [_cdb :_cff ]);};case 16:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeTime ,_bec [_cdb :_cff ]);};case 18:{_dfde =(_cff )-1;};case 20:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeLiteral ,_bec [_cdb :_cff ]);};case 21:{_dfde =(_cff )-1;_dcd ._bdca .AddToken (FmtTypeLiteral ,_bec [_cdb +1:_cff -1]);};};goto _ecbe ;_agfd :_dfde =(_cff )-1;{_dcd ._bdca .AddToken (FmtTypeFraction ,_bec [_cdb :_cff ]);};goto _ecbe ;_fbf :_dfde =(_cff )-1;{_dcd ._bdca .AddToken (FmtTypeDigitOpt ,nil );};goto _ecbe ;_gbb :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeDigitOptThousands ,nil );};goto _ecbe ;_aca :_dfde =(_cff )-1;{_dcd ._bdca .AddToken (FmtTypePercent ,nil );};goto _ecbe ;_egaf :_dfde =(_cff )-1;{_dcd ._bdca .AddToken (FmtTypeDate ,_bec [_cdb :_cff ]);};goto _ecbe ;_bfgd :_dfde =(_cff )-1;{_dcd ._bdca .AddToken (FmtTypeDigit ,nil );};goto _ecbe ;_gae :_dfde =(_cff )-1;{_dcd ._bdca .AddToken (FmtTypeTime ,_bec [_cdb :_cff ]);};goto _ecbe ;_acd :_dfde =(_cff )-1;{_dcd ._bdca .AddToken (FmtTypeLiteral ,_bec [_cdb :_cff ]);};goto _ecbe ;_cecc :_cff =_dfde +1;{_dcd ._bdca ._dgd =true ;};goto _ecbe ;_effa :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeLiteral ,_bec [_cdb :_cff ]);};goto _ecbe ;_bbc :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeDollar ,nil );};goto _ecbe ;_aac :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeComma ,nil );};goto _ecbe ;_fbd :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeDecimal ,nil );};goto _ecbe ;_eeg :_cff =_dfde +1;{_dcd .nextFmt ();};goto _ecbe ;_bbe :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeText ,nil );};goto _ecbe ;_eegg :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeUnderscore ,nil );};goto _ecbe ;_edc :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypeLiteral ,_bec [_cdb :_cff ]);};goto _ecbe ;_fbfe :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypeLiteral ,_bec [_cdb +1:_cff -1]);};goto _ecbe ;_gbf :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypeDigitOpt ,nil );};goto _ecbe ;_afb :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypeFraction ,_bec [_cdb :_cff ]);};goto _ecbe ;_ded :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypePercent ,nil );};goto _ecbe ;_dbe :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypeDate ,_bec [_cdb :_cff ]);};goto _ecbe ;_gbd :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypeDigit ,nil );};goto _ecbe ;_bcf :_cff =_dfde ;_dfde --;{_dcd ._bdca .AddToken (FmtTypeTime ,_bec [_cdb :_cff ]);};goto _ecbe ;_cgge :_cff =_dfde ;_dfde --;{};goto _ecbe ;_dcb :_cff =_dfde +1;{_dcd ._bdca .IsExponential =true ;};goto _ecbe ;_dag :_cff =_dfde +1;{_dcd ._bdca .AddToken (FmtTypeLiteral ,_bec [_cdb +1:_cff ]);};goto _ecbe ;_ecbe :_cdb =0;if _dfde ++;_dfde ==_fcf {goto _bab ;};_bdfd :_cdb =_dfde ;switch _bec [_dfde ]{case 34:goto _ada ;case 35:goto _bcb ;case 36:goto _bbc ;case 37:goto _ddd ;case 44:goto _aac ;case 46:goto _fbd ;case 47:goto _eagg ;case 48:goto _gce ;case 58:goto _dea ;case 59:goto _eeg ;case 63:goto _fgbd ;case 64:goto _bbe ;case 65:goto _gff ;case 69:goto _eda ;case 71:goto _efab ;case 91:goto _aabfc ;case 92:goto _fee ;case 95:goto _eegg ;case 100:goto _eagg ;case 104:goto _dea ;case 109:goto _adcg ;case 115:goto _ege ;case 121:goto _fea ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _efc ;};goto _effa ;_ada :_cff =_dfde +1;_eff =20;goto _bgf ;_bgf :if _dfde ++;_dfde ==_fcf {goto _ebec ;};_cgf :if _bec [_dfde ]==34{goto _bcfg ;};goto _aaa ;_aaa :if _dfde ++;_dfde ==_fcf {goto _acdf ;};_ddaa :if _bec [_dfde ]==34{goto _bcfg ;};goto _aaa ;_bcfg :_cff =_dfde +1;_eff =21;goto _gbbg ;_gbbg :if _dfde ++;_dfde ==_fcf {goto _acad ;};_ggf :if _bec [_dfde ]==34{goto _aaa ;};goto _fbfe ;_bcb :_cff =_dfde +1;_eff =3;goto _bfc ;_bfc :if _dfde ++;_dfde ==_fcf {goto _adaa ;};_dfcg :switch _bec [_dfde ]{case 35:goto _bba ;case 37:goto _bba ;case 44:goto _edd ;case 47:goto _bgfa ;case 48:goto _bba ;case 63:goto _bba ;};goto _gbf ;_bba :if _dfde ++;_dfde ==_fcf {goto _gcca ;};_fbg :switch _bec [_dfde ]{case 35:goto _bba ;case 37:goto _bba ;case 47:goto _bgfa ;case 48:goto _bba ;case 63:goto _bba ;};goto _fac ;_bgfa :if _dfde ++;_dfde ==_fcf {goto _dge ;};_acaf :switch _bec [_dfde ]{case 35:goto _bccb ;case 37:goto _acee ;case 48:goto _dba ;case 63:goto _bccb ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cggb ;};goto _fac ;_bccb :_cff =_dfde +1;goto _abb ;_abb :if _dfde ++;_dfde ==_fcf {goto _ecfe ;};_dbda :switch _bec [_dfde ]{case 35:goto _bccb ;case 37:goto _bccb ;case 44:goto _bccb ;case 46:goto _bccb ;case 48:goto _bccb ;case 63:goto _bccb ;case 65:goto _bgb ;};goto _afb ;_bgb :if _dfde ++;_dfde ==_fcf {goto _ceaf ;};_bfed :switch _bec [_dfde ]{case 47:goto _gec ;case 77:goto _caf ;};goto _agfd ;_gec :if _dfde ++;_dfde ==_fcf {goto _cead ;};_bgcb :if _bec [_dfde ]==80{goto _cfe ;};goto _agfd ;_cfe :_cff =_dfde +1;goto _eafc ;_eafc :if _dfde ++;_dfde ==_fcf {goto _gbdg ;};_befg :if _bec [_dfde ]==65{goto _bgb ;};goto _afb ;_caf :if _dfde ++;_dfde ==_fcf {goto _edde ;};_bece :if _bec [_dfde ]==47{goto _cgbg ;};goto _agfd ;_cgbg :if _dfde ++;_dfde ==_fcf {goto _dbad ;};_fbaa :if _bec [_dfde ]==80{goto _cfac ;};goto _agfd ;_cfac :if _dfde ++;_dfde ==_fcf {goto _ecfg ;};_acff :if _bec [_dfde ]==77{goto _cfe ;};goto _agfd ;_acee :if _dfde ++;_dfde ==_fcf {goto _cdf ;};_gga :switch _bec [_dfde ]{case 35:goto _bcg ;case 37:goto _dbeg ;case 63:goto _bcg ;};if 48<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cabd ;};goto _fac ;_bcg :_cff =_dfde +1;goto _cdbg ;_cdbg :if _dfde ++;_dfde ==_fcf {goto _beda ;};_egbc :switch _bec [_dfde ]{case 35:goto _bccb ;case 37:goto _agc ;case 44:goto _bccb ;case 46:goto _bccb ;case 48:goto _bccb ;case 63:goto _bccb ;case 65:goto _bgb ;};goto _afb ;_agc :if _dfde ++;_dfde ==_fcf {goto _bde ;};_effb :switch _bec [_dfde ]{case 35:goto _cfgb ;case 44:goto _cfgb ;case 46:goto _cfgb ;case 48:goto _cfgb ;case 63:goto _cfgb ;};goto _agfd ;_cfgb :_cff =_dfde +1;goto _dfdc ;_dfdc :if _dfde ++;_dfde ==_fcf {goto _fdab ;};_daa :switch _bec [_dfde ]{case 35:goto _cfgb ;case 44:goto _cfgb ;case 46:goto _cfgb ;case 48:goto _cfgb ;case 63:goto _cfgb ;case 65:goto _bgb ;};goto _afb ;_dbeg :if _dfde ++;_dfde ==_fcf {goto _dae ;};_gegg :if _bec [_dfde ]==37{goto _dbeg ;};if 48<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cabd ;};goto _fac ;_cabd :_cff =_dfde +1;_eff =13;goto _ffb ;_ffb :if _dfde ++;_dfde ==_fcf {goto _ggfd ;};_ddg :switch _bec [_dfde ]{case 35:goto _bccb ;case 37:goto _feg ;case 44:goto _bccb ;case 46:goto _bccb ;case 48:goto _fbab ;case 63:goto _bccb ;case 65:goto _bgb ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cabd ;};goto _afb ;_feg :if _dfde ++;_dfde ==_fcf {goto _dccb ;};_gad :switch _bec [_dfde ]{case 35:goto _cfgb ;case 37:goto _dbeg ;case 44:goto _cfgb ;case 46:goto _cfgb ;case 63:goto _cfgb ;};if 48<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cabd ;};goto _agfd ;_fbab :_cff =_dfde +1;goto _cce ;_cce :if _dfde ++;_dfde ==_fcf {goto _dagc ;};_gee :switch _bec [_dfde ]{case 35:goto _bccb ;case 37:goto _fbab ;case 44:goto _bccb ;case 46:goto _bccb ;case 48:goto _fbab ;case 63:goto _bccb ;case 65:goto _bgb ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cabd ;};goto _afb ;_dba :_cff =_dfde +1;goto _fgbb ;_fgbb :if _dfde ++;_dfde ==_fcf {goto _gcad ;};_ebfe :switch _bec [_dfde ]{case 35:goto _bccb ;case 37:goto _fbab ;case 44:goto _bccb ;case 46:goto _bccb ;case 48:goto _dba ;case 63:goto _bccb ;case 65:goto _bgb ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cggb ;};goto _afb ;_cggb :_cff =_dfde +1;goto _dffc ;_dffc :if _dfde ++;_dfde ==_fcf {goto _bfcd ;};_cgfc :switch _bec [_dfde ]{case 35:goto _bccb ;case 37:goto _cabd ;case 44:goto _bccb ;case 46:goto _bccb ;case 48:goto _dba ;case 63:goto _bccb ;case 65:goto _bgb ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cggb ;};goto _afb ;_edd :if _dfde ++;_dfde ==_fcf {goto _cdfd ;};_fec :if _bec [_dfde ]==35{goto _gbb ;};goto _fbf ;_ddd :_cff =_dfde +1;_eff =8;goto _aecf ;_aecf :if _dfde ++;_dfde ==_fcf {goto _bbdf ;};_cbb :switch _bec [_dfde ]{case 35:goto _fd ;case 37:goto _ceda ;case 48:goto _bgd ;case 63:goto _fd ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cfcf ;};goto _ded ;_fd :if _dfde ++;_dfde ==_fcf {goto _bcbf ;};_dafd :switch _bec [_dfde ]{case 35:goto _fd ;case 47:goto _bgfa ;case 48:goto _fd ;case 63:goto _fd ;};goto _aca ;_ceda :if _dfde ++;_dfde ==_fcf {goto _ggg ;};_abdb :if _bec [_dfde ]==37{goto _ceda ;};if 48<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cfcf ;};goto _fac ;_cfcf :if _dfde ++;_dfde ==_fcf {goto _fae ;};_daaa :switch _bec [_dfde ]{case 37:goto _ceda ;case 47:goto _bgfa ;};if 48<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cfcf ;};goto _fac ;_bgd :if _dfde ++;_dfde ==_fcf {goto _acg ;};_eab :switch _bec [_dfde ]{case 35:goto _fd ;case 37:goto _ceda ;case 47:goto _bgfa ;case 48:goto _bgd ;case 63:goto _fd ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cfcf ;};goto _aca ;_eagg :_cff =_dfde +1;goto _dce ;_dce :if _dfde ++;_dfde ==_fcf {goto _afdf ;};_bdfc :switch _bec [_dfde ]{case 47:goto _eagg ;case 100:goto _eagg ;case 109:goto _eagg ;case 121:goto _agfe ;};goto _dbe ;_agfe :if _dfde ++;_dfde ==_fcf {goto _geb ;};_ggaa :if _bec [_dfde ]==121{goto _eagg ;};goto _egaf ;_gce :_cff =_dfde +1;_eff =2;goto _efdb ;_efdb :if _dfde ++;_dfde ==_fcf {goto _ffd ;};_dbgd :switch _bec [_dfde ]{case 35:goto _bba ;case 37:goto _cga ;case 47:goto _bgfa ;case 48:goto _dafe ;case 63:goto _bba ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _deb ;};goto _gbd ;_cga :if _dfde ++;_dfde ==_fcf {goto _bbg ;};_befb :switch _bec [_dfde ]{case 35:goto _bba ;case 37:goto _cga ;case 47:goto _bgfa ;case 48:goto _cga ;case 63:goto _bba ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _cfcf ;};goto _bfgd ;_dafe :if _dfde ++;_dfde ==_fcf {goto _gaa ;};_gdag :switch _bec [_dfde ]{case 35:goto _bba ;case 37:goto _cga ;case 47:goto _bgfa ;case 48:goto _dafe ;case 63:goto _bba ;};if 49<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _deb ;};goto _bfgd ;_deb :if _dfde ++;_dfde ==_fcf {goto _abbg ;};_abg :switch _bec [_dfde ]{case 37:goto _cfcf ;case 47:goto _bgfa ;};if 48<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _deb ;};goto _fac ;_efc :_cff =_dfde +1;_eff =20;goto _fff ;_fff :if _dfde ++;_dfde ==_fcf {goto _dabe ;};_dacg :switch _bec [_dfde ]{case 37:goto _cfcf ;case 47:goto _bgfa ;};if 48<=_bec [_dfde ]&&_bec [_dfde ]<=57{goto _deb ;};goto _edc ;_dea :_cff =_dfde +1;_eff =15;goto _cbc ;_cbc :if _dfde ++;_dfde ==_fcf {goto _ggad ;};_dee :switch _bec [_dfde ]{case 58:goto _dea ;case 65:goto _fegc ;case 104:goto _dea ;case 109:goto _dea ;case 115:goto _ege ;};goto _bcf ;_fegc :if _dfde ++;_dfde ==_fcf {goto _cfccf ;};_fcc :switch _bec [_dfde ]{case 47:goto _adb ;case 77:goto _bcca ;};goto _fac ;_adb :if _dfde ++;_dfde ==_fcf {goto _bca ;};_cafb :if _bec [_dfde ]==80{goto _dea ;};goto _fac ;_bcca :if _dfde ++;_dfde ==_fcf {goto _gdc ;};_adge :if _bec [_dfde ]==47{goto _aege ;};goto _fac ;_aege :if _dfde ++;_dfde ==_fcf {goto _ddff ;};_fbb :if _bec [_dfde ]==80{goto _fgbf ;};goto _fac ;_fgbf :if _dfde ++;_dfde ==_fcf {goto _aaed ;};_ddda :if _bec [_dfde ]==77{goto _dea ;};goto _fac ;_ege :_cff =_dfde +1;_eff =15;goto _ddfg ;_ddfg :if _dfde ++;_dfde ==_fcf {goto _gbfb ;};_edb :switch _bec [_dfde ]{case 46:goto _bae ;case 58:goto _dea ;case 65:goto _fegc ;case 104:goto _dea ;case 109:goto _dea ;case 115:goto _ege ;};goto _bcf ;_bae :if _dfde ++;_dfde ==_fcf {goto _babg ;};_gdfb :if _bec [_dfde ]==48{goto _faa ;};goto _gae ;_faa :_cff =_dfde +1;_eff =15;goto _bfaf ;_bfaf :if _dfde ++;_dfde ==_fcf {goto _bcd ;};_faae :switch _bec [_dfde ]{case 48:goto _cfcc ;case 58:goto _dea ;case 65:goto _fegc ;case 104:goto _dea ;case 109:goto _dea ;case 115:goto _ege ;};goto _bcf ;_cfcc :_cff =_dfde +1;_eff =15;goto _gdfe ;_gdfe :if _dfde ++;_dfde ==_fcf {goto _ggaf ;};_cgfa :switch _bec [_dfde ]{case 48:goto _dea ;case 58:goto _dea ;case 65:goto _fegc ;case 104:goto _dea ;case 109:goto _dea ;case 115:goto _ege ;};goto _bcf ;_fgbd :_cff =_dfde +1;_eff =5;goto _bgff ;_bgff :if _dfde ++;_dfde ==_fcf {goto _caeb ;};_eed :switch _bec [_dfde ]{case 35:goto _bba ;case 37:goto _bba ;case 47:goto _bgfa ;case 48:goto _bba ;case 63:goto _bba ;};goto _cgge ;_gff :_cff =_dfde +1;_eff =20;goto _cfcg ;_cfcg :if _dfde ++;_dfde ==_fcf {goto _afc ;};_aece :switch _bec [_dfde ]{case 47:goto _adb ;case 77:goto _bcca ;};goto _edc ;_eda :if _dfde ++;_dfde ==_fcf {goto _bgdc ;};_ggfe :switch _bec [_dfde ]{case 43:goto _dcb ;case 45:goto _dcb ;};goto _edc ;_efab :_cff =_dfde +1;goto _cgbc ;_cgbc :if _dfde ++;_dfde ==_fcf {goto _fbfee ;};_bebb :if _bec [_dfde ]==101{goto _bce ;};goto _edc ;_bce :if _dfde ++;_dfde ==_fcf {goto _gcce ;};_agae :if _bec [_dfde ]==110{goto _fed ;};goto _acd ;_fed :if _dfde ++;_dfde ==_fcf {goto _gac ;};_bea :if _bec [_dfde ]==101{goto _ebac ;};goto _acd ;_ebac :if _dfde ++;_dfde ==_fcf {goto _fgde ;};_gfb :if _bec [_dfde ]==114{goto _eeec ;};goto _acd ;_eeec :if _dfde ++;_dfde ==_fcf {goto _bege ;};_fcca :if _bec [_dfde ]==97{goto _acc ;};goto _acd ;_acc :if _dfde ++;_dfde ==_fcf {goto _gbac ;};_bad :if _bec [_dfde ]==108{goto _cecc ;};goto _acd ;_aabfc :_cff =_dfde +1;_eff =20;goto _cea ;_cea :if _dfde ++;_dfde ==_fcf {goto _bag ;};_gbbd :switch _bec [_dfde ]{case 104:goto _dbege ;case 109:goto _dbege ;case 115:goto _dbege ;};goto _fda ;_fda :if _dfde ++;_dfde ==_fcf {goto _fabf ;};_aceb :if _bec [_dfde ]==93{goto _fbeg ;};goto _fda ;_fbeg :_cff =_dfde +1;_eff =18;goto _ecc ;_fggd :_cff =_dfde +1;_eff =16;goto _ecc ;_ecc :if _dfde ++;_dfde ==_fcf {goto _fgdg ;};_eeeg :if _bec [_dfde ]==93{goto _fbeg ;};goto _fda ;_dbege :if _dfde ++;_dfde ==_fcf {goto _faf ;};_aaba :if _bec [_dfde ]==93{goto _fggd ;};goto _fda ;_fee :if _dfde ++;_dfde ==_fcf {goto _dde ;};_bgba :goto _dag ;_adcg :_cff =_dfde +1;_eff =14;goto _edda ;_edda :if _dfde ++;_dfde ==_fcf {goto _faba ;};_bccf :switch _bec [_dfde ]{case 47:goto _eagg ;case 58:goto _dea ;case 65:goto _fegc ;case 100:goto _eagg ;case 104:goto _dea ;case 109:goto _adcg ;case 115:goto _ege ;case 121:goto _agfe ;};goto _dbe ;_fea :if _dfde ++;_dfde ==_fcf {goto _fccc ;};_ebc :if _bec [_dfde ]==121{goto _eagg ;};goto _edc ;_cfce :_bab :_baa =34;goto _geggg ;_ebec :_baa =35;goto _geggg ;_acdf :_baa =0;goto _geggg ;_acad :_baa =36;goto _geggg ;_adaa :_baa =37;goto _geggg ;_gcca :_baa =1;goto _geggg ;_dge :_baa =2;goto _geggg ;_ecfe :_baa =38;goto _geggg ;_ceaf :_baa =3;goto _geggg ;_cead :_baa =4;goto _geggg ;_gbdg :_baa =39;goto _geggg ;_edde :_baa =5;goto _geggg ;_dbad :_baa =6;goto _geggg ;_ecfg :_baa =7;goto _geggg ;_cdf :_baa =8;goto _geggg ;_beda :_baa =40;goto _geggg ;_bde :_baa =9;goto _geggg ;_fdab :_baa =41;goto _geggg ;_dae :_baa =10;goto _geggg ;_ggfd :_baa =42;goto _geggg ;_dccb :_baa =11;goto _geggg ;_dagc :_baa =43;goto _geggg ;_gcad :_baa =44;goto _geggg ;_bfcd :_baa =45;goto _geggg ;_cdfd :_baa =12;goto _geggg ;_bbdf :_baa =46;goto _geggg ;_bcbf :_baa =13;goto _geggg ;_ggg :_baa =14;goto _geggg ;_fae :_baa =15;goto _geggg ;_acg :_baa =16;goto _geggg ;_afdf :_baa =47;goto _geggg ;_geb :_baa =17;goto _geggg ;_ffd :_baa =48;goto _geggg ;_bbg :_baa =18;goto _geggg ;_gaa :_baa =19;goto _geggg ;_abbg :_baa =20;goto _geggg ;_dabe :_baa =49;goto _geggg ;_ggad :_baa =50;goto _geggg ;_cfccf :_baa =21;goto _geggg ;_bca :_baa =22;goto _geggg ;_gdc :_baa =23;goto _geggg ;_ddff :_baa =24;goto _geggg ;_aaed :_baa =25;goto _geggg ;_gbfb :_baa =51;goto _geggg ;_babg :_baa =26;goto _geggg ;_bcd :_baa =52;goto _geggg ;_ggaf :_baa =53;goto _geggg ;_caeb :_baa =54;goto _geggg ;_afc :_baa =55;goto _geggg ;_bgdc :_baa =56;goto _geggg ;_fbfee :_baa =57;goto _geggg ;_gcce :_baa =27;goto _geggg ;_gac :_baa =28;goto _geggg ;_fgde :_baa =29;goto _geggg ;_bege :_baa =30;goto _geggg ;_gbac :_baa =31;goto _geggg ;_bag :_baa =58;goto _geggg ;_fabf :_baa =32;goto _geggg ;_fgdg :_baa =59;goto _geggg ;_faf :_baa =33;goto _geggg ;_dde :_baa =60;goto _geggg ;_faba :_baa =61;goto _geggg ;_fccc :_baa =62;goto _geggg ;_geggg :{};if _dfde ==_dab {switch _baa {case 35:goto _edc ;case 0:goto _fac ;case 36:goto _fbfe ;case 37:goto _gbf ;case 1:goto _fac ;case 2:goto _fac ;case 38:goto _afb ;case 3:goto _agfd ;case 4:goto _agfd ;case 39:goto _afb ;case 5:goto _agfd ;case 6:goto _agfd ;case 7:goto _agfd ;case 8:goto _fac ;case 40:goto _afb ;case 9:goto _agfd ;case 41:goto _afb ;case 10:goto _fac ;case 42:goto _afb ;case 11:goto _agfd ;case 43:goto _afb ;case 44:goto _afb ;case 45:goto _afb ;case 12:goto _fbf ;case 46:goto _ded ;case 13:goto _aca ;case 14:goto _fac ;case 15:goto _fac ;case 16:goto _aca ;case 47:goto _dbe ;case 17:goto _egaf ;case 48:goto _gbd ;case 18:goto _bfgd ;case 19:goto _bfgd ;case 20:goto _fac ;case 49:goto _edc ;case 50:goto _bcf ;case 21:goto _fac ;case 22:goto _fac ;case 23:goto _fac ;case 24:goto _fac ;case 25:goto _fac ;case 51:goto _bcf ;case 26:goto _gae ;case 52:goto _bcf ;case 53:goto _bcf ;case 54:goto _cgge ;case 55:goto _edc ;case 56:goto _edc ;case 57:goto _edc ;case 27:goto _acd ;case 28:goto _acd ;case 29:goto _acd ;case 30:goto _acd ;case 31:goto _acd ;case 58:goto _edc ;case 32:goto _fac ;case 59:goto _fac ;case 33:goto _acd ;case 60:goto _edc ;case 61:goto _dbe ;case 62:goto _edc ;};};};if _cdb > 0{copy (_bec [0:],_bec [_cdb :]);};};_ =_dab ;if _baa ==_fabe {_agf .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func _fge (_bgc float64 )string {_cba :=_ag .FormatFloat (_bgc ,'E',-1,64);_aeb :=_ag .FormatFloat (_bgc ,'E',5,64);if len (_cba )< len (_aeb ){return _ag .FormatFloat (_bgc ,'E',2,64);};return _aeb ;};const _fad int =-1;func _cefe (_eca float64 ,_ga Format ,_gc bool )string {if _ga ._dgd {return NumberGeneric (_eca );};_ega :=make ([]byte ,0,20);_ggd :=_df .Signbit (_eca );_fbe :=_df .Abs (_eca );_gdb :=int64 (0);_ae :=int64 (0);if _ga .IsExponential {for _fbe >=10{_ae ++;_fbe /=10;};for _fbe < 1{_ae --;_fbe *=10;};}else if _ga ._gb {_fbe *=100;}else if _ga ._ee {if _ga ._fc ==0{_cc :=_df .Pow (10,float64 (_ga ._eg ));_ace ,_eba :=1.0,1.0;_ =_ace ;for _cca :=1.0;_cca < _cc ;_cca ++{_ ,_gde :=_df .Modf (_fbe *float64 (_cca ));if _gde < _eba {_eba =_gde ;_ace =_cca ;if _gde ==0{break ;};};};_ga ._fc =int64 (_ace );};_gdb =int64 (_fbe *float64 (_ga ._fc )+0.5);if len (_ga .Whole )> 0&&_gdb > _ga ._fc {_gdb =int64 (_fbe *float64 (_ga ._fc ))%_ga ._fc ;_fbe -=float64 (_gdb )/float64 (_ga ._fc );}else {_fbe -=float64 (_gdb )/float64 (_ga ._fc );if _df .Abs (_fbe )< 1{_gf :=true ;for _ ,_gfa :=range _ga .Whole {if _gfa .Type ==FmtTypeDigitOpt {continue ;};if _gfa .Type ==FmtTypeLiteral &&_gfa .Literal ==' '{continue ;};_gf =false ;};if _gf {_ga .Whole =nil ;};};};};_fg :=1;for _ ,_bfe :=range _ga .Fractional {if _bfe .Type ==FmtTypeDigit ||_bfe .Type ==FmtTypeDigitOpt {_fg ++;};};_fbe +=5*_df .Pow10 (-_fg );_dff ,_bfb :=_df .Modf (_fbe );_ega =append (_ega ,_cf (_dff ,_eca ,_ga )...);_ega =append (_ega ,_ecd (_bfb ,_eca ,_ga )...);_ega =append (_ega ,_gaf (_ae ,_ga )...);if _ga ._ee {_ega =_ag .AppendInt (_ega ,_gdb ,10);_ega =append (_ega ,'/');_ega =_ag .AppendInt (_ega ,_ga ._fc ,10);};if !_gc &&_ggd {return "\u002d"+string (_ega );};return string (_ega );};func _edba (_aaf _c .Time )_c .Time {_aaf =_aaf .UTC ();return _c .Date (_aaf .Year (),_aaf .Month (),_aaf .Day (),_aaf .Hour (),_aaf .Minute (),_aaf .Second (),_aaf .Nanosecond (),_c .Local );};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _cdg (_ebe []byte )[]byte {for _cfg :=len (_ebe )-1;_cfg > 0;_cfg --{if _ebe [_cfg ]=='9'+1{_ebe [_cfg ]='0';if _ebe [_cfg -1]=='.'{_cfg --;};_ebe [_cfg -1]++;};};if _ebe [0]=='9'+1{_ebe [0]='0';copy (_ebe [1:],_ebe [0:]);_ebe [0]='1';};return _ebe ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _df .Abs (v )>=_ec ||_df .Abs (v )<=_gg &&v !=0{return _fge (v );};_eag :=make ([]byte ,0,15);_eag =_ag .AppendFloat (_eag ,v ,'f',-1,64);if len (_eag )> 11{_aga :=_eag [11]-'0';if _aga >=5&&_aga <=9{_eag [10]++;_eag =_eag [0:11];_eag =_cdg (_eag );};_eag =_eag [0:11];}else if len (_eag )==11{if _eag [len (_eag )-1]=='9'{_eag [len (_eag )-1]++;_eag =_cdg (_eag );};};_eag =_aa (_eag );return string (_eag );};const _fabe int =-1;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);const _ddc int =34;func _cf (_aea ,_ef float64 ,_ed Format )[]byte {if len (_ed .Whole )==0{return nil ;};_ced :=_c .Date (1899,12,30,0,0,0,0,_c .UTC );_cd :=_ced .Add (_c .Duration (_ef *float64 (24*_c .Hour )));_cd =_edba (_cd );_ceb :=_ag .AppendFloat (nil ,_aea ,'f',-1,64);_dfd :=make ([]byte ,0,len (_ceb ));_fcg :=0;_ecg :=1;_aeag :for _be :=len (_ed .Whole )-1;_be >=0;_be --{_aee :=len (_ceb )-1-_fcg ;_dbd :=_ed .Whole [_be ];switch _dbd .Type {case FmtTypeDigit :if _aee >=0{_dfd =append (_dfd ,_ceb [_aee ]);_fcg ++;_ecg =_be ;}else {_dfd =append (_dfd ,'0');};case FmtTypeDigitOpt :if _aee >=0{_dfd =append (_dfd ,_ceb [_aee ]);_fcg ++;_ecg =_be ;}else {for _ccg :=_be ;_ccg >=0;_ccg --{_eaf :=_ed .Whole [_ccg ];if _eaf .Type ==FmtTypeLiteral {_dfd =append (_dfd ,_eaf .Literal );};};break _aeag ;};case FmtTypeDollar :for _da :=_fcg ;_da < len (_ceb );_da ++{_dfd =append (_dfd ,_ceb [len (_ceb )-1-_da ]);_fcg ++;};_dfd =append (_dfd ,'$');case FmtTypeComma :if !_ed ._gd {_dfd =append (_dfd ,',');};case FmtTypeLiteral :_dfd =append (_dfd ,_dbd .Literal );case FmtTypeDate :_dfd =append (_dfd ,_dda (_egf (_cd ,_dbd .DateTime ))...);case FmtTypeTime :_dfd =append (_dfd ,_dda (_cag (_cd ,_ef ,_dbd .DateTime ))...);default:_agf .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_dbd );};};_cbf :=_dda (_dfd );if _fcg < len (_ceb )&&(_fcg !=0||_ed ._af ){_bd :=len (_ceb )-_fcg ;_bc :=make ([]byte ,len (_cbf )+_bd );copy (_bc ,_cbf [0:_ecg ]);copy (_bc [_ecg :],_ceb [0:]);copy (_bc [_ecg +_bd :],_cbf [_ecg :]);_cbf =_bc ;};if _ed ._gd {_bfa :=_g .Buffer {};_cfb :=0;for _dbc :=len (_cbf )-1;_dbc >=0;_dbc --{if !(_cbf [_dbc ]>='0'&&_cbf [_dbc ]<='9'){_cfb ++;}else {break ;};};for _dfe :=0;_dfe < len (_cbf );_dfe ++{_ccaf :=(len (_cbf )-_dfe -_cfb );if _ccaf %3==0&&_ccaf !=0&&_dfe !=0{_bfa .WriteByte (',');};_bfa .WriteByte (_cbf [_dfe ]);};_cbf =_bfa .Bytes ();};return _cbf ;};func _ecd (_adg ,_ab float64 ,_gge Format )[]byte {if len (_gge .Fractional )==0{return nil ;};_egg :=_ag .AppendFloat (nil ,_adg ,'f',-1,64);if len (_egg )> 2{_egg =_egg [2:];}else {_egg =nil ;};_bfg :=make ([]byte ,0,len (_egg ));_bfg =append (_bfg ,'.');_gag :=0;_dc :for _daf :=0;_daf < len (_gge .Fractional );_daf ++{_dbg :=_daf ;_egb :=_gge .Fractional [_daf ];switch _egb .Type {case FmtTypeDigit :if _dbg < len (_egg ){_bfg =append (_bfg ,_egg [_dbg ]);_gag ++;}else {_bfg =append (_bfg ,'0');};case FmtTypeDigitOpt :if _dbg >=0{_bfg =append (_bfg ,_egg [_dbg ]);_gag ++;}else {break _dc ;};case FmtTypeLiteral :_bfg =append (_bfg ,_egb .Literal );default:_agf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_egb );};};return _bfg ;};func _gaf (_aeee int64 ,_dcc Format )[]byte {if !_dcc .IsExponential ||len (_dcc .Exponent )==0{return nil ;};_cg :=_ag .AppendInt (nil ,_gdf (_aeee ),10);_dac :=make ([]byte ,0,len (_cg )+2);_dac =append (_dac ,'E');if _aeee >=0{_dac =append (_dac ,'+');}else {_dac =append (_dac ,'-');_aeee *=-1;};_bg :=0;_dfc :for _bee :=len (_dcc .Exponent )-1;_bee >=0;_bee --{_cfc :=len (_cg )-1-_bg ;_fbc :=_dcc .Exponent [_bee ];switch _fbc .Type {case FmtTypeDigit :if _cfc >=0{_dac =append (_dac ,_cg [_cfc ]);_bg ++;}else {_dac =append (_dac ,'0');};case FmtTypeDigitOpt :if _cfc >=0{_dac =append (_dac ,_cg [_cfc ]);_bg ++;}else {for _ba :=_bee ;_ba >=0;_ba --{_bdc :=_dcc .Exponent [_ba ];if _bdc .Type ==FmtTypeLiteral {_dac =append (_dac ,_bdc .Literal );};};break _dfc ;};case FmtTypeLiteral :_dac =append (_dac ,_fbc .Literal );default:_agf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_fbc );};};if _bg < len (_cg ){_dac =append (_dac ,_cg [len (_cg )-_bg -1:_bg -1]...);};_dda (_dac [2:]);return _dac ;};