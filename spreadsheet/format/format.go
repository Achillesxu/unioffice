//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_d "bytes";_ca "fmt";_e "github.com/unidoc/unioffice/common/logger";_a "io";_cb "math";_b "strconv";_gg "strings";_g "time";);var _ga =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};const _bab int =34;const _cd =1e11;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _cb .Abs (v )>=_cd ||_cb .Abs (v )<=_dg &&v !=0{return _acd (v );};_ffc :=make ([]byte ,0,15);_ffc =_b .AppendFloat (_ffc ,v ,'f',-1,64);if len (_ffc )> 11{_bbdf :=_ffc [11]-'0';if _bbdf >=5&&_bbdf <=9{_ffc [10]++;_ffc =_ffc [0:11];_ffc =_ddcf (_ffc );};_ffc =_ffc [0:11];}else if len (_ffc )==11{if _ffc [len (_ffc )-1]=='9'{_ffc [len (_ffc )-1]++;_ffc =_ddcf (_ffc );};};_ffc =_beff (_ffc );return string (_ffc );};const _fcb int =0;func IsNumber (data string )(_gaac bool ){_bgeb ,_dbc ,_adg :=0,0,len (data );_ebbf :=len (data );_gcd ,_adc ,_egeg :=0,0,0;_ =_adc ;_ =_egeg ;_ =_gcd ;{_bgeb =_fcb ;_gcd =0;_adc =0;_egeg =0;};{if _dbc ==_adg {goto _cab ;};switch _bgeb {case 0:goto _dce ;case 1:goto _gee ;case 2:goto _cgg ;case 3:goto _bgab ;case 4:goto _adb ;case 5:goto _gfb ;case 6:goto _ddcd ;case 7:goto _ace ;};goto _acf ;_gba :_adc =_dbc ;_dbc --;{_gaac =false ;};goto _dcfb ;_bad :_adc =_dbc ;_dbc --;{_gaac =_adc ==len (data );};goto _dcfb ;_ebg :_adc =_dbc ;_dbc --;{_gaac =_adc ==len (data );};goto _dcfb ;_dec :switch _egeg {case 2:{_dbc =(_adc )-1;_gaac =_adc ==len (data );};case 3:{_dbc =(_adc )-1;_gaac =false ;};};goto _dcfb ;_dcfb :_gcd =0;if _dbc ++;_dbc ==_adg {goto _ggag ;};_dce :_gcd =_dbc ;switch data [_dbc ]{case 43:goto _caa ;case 45:goto _caa ;};if 48<=data [_dbc ]&&data [_dbc ]<=57{goto _dcd ;};goto _cfe ;_cfe :if _dbc ++;_dbc ==_adg {goto _aag ;};_gee :goto _cfe ;_caa :if _dbc ++;_dbc ==_adg {goto _ebbg ;};_cgg :if 48<=data [_dbc ]&&data [_dbc ]<=57{goto _dcd ;};goto _cfe ;_dcd :if _dbc ++;_dbc ==_adg {goto _fec ;};_bgab :if data [_dbc ]==46{goto _dee ;};if 48<=data [_dbc ]&&data [_dbc ]<=57{goto _dcd ;};goto _cfe ;_dee :if _dbc ++;_dbc ==_adg {goto _dbe ;};_adb :if 48<=data [_dbc ]&&data [_dbc ]<=57{goto _efb ;};goto _cfe ;_efb :if _dbc ++;_dbc ==_adg {goto _fag ;};_gfb :if data [_dbc ]==69{goto _gfaa ;};if 48<=data [_dbc ]&&data [_dbc ]<=57{goto _efb ;};goto _cfe ;_gfaa :if _dbc ++;_dbc ==_adg {goto _agfg ;};_ddcd :switch data [_dbc ]{case 43:goto _fce ;case 45:goto _fce ;};goto _cfe ;_fce :_adc =_dbc +1;_egeg =3;goto _ebgd ;_ggda :_adc =_dbc +1;_egeg =2;goto _ebgd ;_ebgd :if _dbc ++;_dbc ==_adg {goto _bbdfg ;};_ace :if 48<=data [_dbc ]&&data [_dbc ]<=57{goto _ggda ;};goto _cfe ;_acf :_ggag :_bgeb =0;goto _cab ;_aag :_bgeb =1;goto _cab ;_ebbg :_bgeb =2;goto _cab ;_fec :_bgeb =3;goto _cab ;_dbe :_bgeb =4;goto _cab ;_fag :_bgeb =5;goto _cab ;_agfg :_bgeb =6;goto _cab ;_bbdfg :_bgeb =7;goto _cab ;_cab :{};if _dbc ==_ebbf {switch _bgeb {case 1:goto _gba ;case 2:goto _gba ;case 3:goto _bad ;case 4:goto _gba ;case 5:goto _ebg ;case 6:goto _gba ;case 7:goto _dec ;};};};if _bgeb ==_fba {return false ;};return ;};const _eb ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";func _eg (_bcg float64 ,_cdf Format ,_gfd bool )string {if _cdf ._f {return NumberGeneric (_bcg );};_ba :=make ([]byte ,0,20);_fe :=_cb .Signbit (_bcg );_bd :=_cb .Abs (_bcg );_bga :=int64 (0);_dd :=int64 (0);if _cdf .IsExponential {for _bd >=10{_dd ++;_bd /=10;};for _bd < 1{_dd --;_bd *=10;};}else if _cdf ._be {_bd *=100;}else if _cdf ._de {if _cdf ._db ==0{_ddf :=_cb .Pow (10,float64 (_cdf ._gad ));_cg ,_cca :=1.0,1.0;_ =_cg ;for _fg :=1.0;_fg < _ddf ;_fg ++{_ ,_ag :=_cb .Modf (_bd *float64 (_fg ));if _ag < _cca {_cca =_ag ;_cg =_fg ;if _ag ==0{break ;};};};_cdf ._db =int64 (_cg );};_bga =int64 (_bd *float64 (_cdf ._db )+0.5);if len (_cdf .Whole )> 0&&_bga > _cdf ._db {_bga =int64 (_bd *float64 (_cdf ._db ))%_cdf ._db ;_bd -=float64 (_bga )/float64 (_cdf ._db );}else {_bd -=float64 (_bga )/float64 (_cdf ._db );if _cb .Abs (_bd )< 1{_ada :=true ;for _ ,_ddc :=range _cdf .Whole {if _ddc .Type ==FmtTypeDigitOpt {continue ;};if _ddc .Type ==FmtTypeLiteral &&_ddc .Literal ==' '{continue ;};_ada =false ;};if _ada {_cdf .Whole =nil ;};};};};_fc :=1;for _ ,_acb :=range _cdf .Fractional {if _acb .Type ==FmtTypeDigit ||_acb .Type ==FmtTypeDigitOpt {_fc ++;};};_bd +=5*_cb .Pow10 (-_fc );_gc ,_gcg :=_cb .Modf (_bd );_ba =append (_ba ,_bbd (_gc ,_bcg ,_cdf )...);_ba =append (_ba ,_cfa (_gcg ,_bcg ,_cdf )...);_ba =append (_ba ,_bce (_dd ,_cdf )...);if _cdf ._de {_ba =_b .AppendInt (_ba ,_bga ,10);_ba =append (_ba ,'/');_ba =_b .AppendInt (_ba ,_cdf ._db ,10);};if !_gfd &&_fe {return "\u002d"+string (_ba );};return string (_ba );};

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;func _fbcd (_fcc _g .Time ,_gge string )[]byte {_bfg :=[]byte {};_cfd :=0;for _cgb :=0;_cgb < len (_gge );_cgb ++{var _afde string ;if _gge [_cgb ]=='/'{_afde =string (_gge [_cfd :_cgb ]);_cfd =_cgb +1;}else if _cgb ==len (_gge )-1{_afde =string (_gge [_cfd :_cgb +1]);}else {continue ;};switch _afde {case "\u0079\u0079":_bfg =_fcc .AppendFormat (_bfg ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_bfg =_fcc .AppendFormat (_bfg ,"\u0032\u0030\u0030\u0036");case "\u006d":_bfg =_fcc .AppendFormat (_bfg ,"\u0031");case "\u006d\u006d":_bfg =_fcc .AppendFormat (_bfg ,"\u0030\u0031");case "\u006d\u006d\u006d":_bfg =_fcc .AppendFormat (_bfg ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_bfg =_fcc .AppendFormat (_bfg ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _fcc .Month (){case _g .January ,_g .July ,_g .June :_bfg =append (_bfg ,'J');case _g .February :_bfg =append (_bfg ,'M');case _g .March ,_g .May :_bfg =append (_bfg ,'M');case _g .April ,_g .August :_bfg =append (_bfg ,'A');case _g .September :_bfg =append (_bfg ,'S');case _g .October :_bfg =append (_bfg ,'O');case _g .November :_bfg =append (_bfg ,'N');case _g .December :_bfg =append (_bfg ,'D');};case "\u0064":_bfg =_fcc .AppendFormat (_bfg ,"\u0032");case "\u0064\u0064":_bfg =_fcc .AppendFormat (_bfg ,"\u0030\u0032");case "\u0064\u0064\u0064":_bfg =_fcc .AppendFormat (_bfg ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_bfg =_fcc .AppendFormat (_bfg ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_e .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_afde );};if _gge [_cgb ]=='/'{_bfg =append (_bfg ,'/');};};return _bfg ;};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);func _afb (_gcf int64 )int64 {if _gcf < 0{return -_gcf ;};return _gcf ;};func _ddcf (_gd []byte )[]byte {for _bbb :=len (_gd )-1;_bbb > 0;_bbb --{if _gd [_bbb ]=='9'+1{_gd [_bbb ]='0';if _gd [_bbb -1]=='.'{_bbb --;};_gd [_bbb -1]++;};};if _gd [0]=='9'+1{_gd [0]='0';copy (_gd [1:],_gd [0:]);_gd [0]='1';};return _gd ;};const _dg =1e-10;func _ed (_bgc []byte )[]byte {for _ef :=0;_ef < len (_bgc )/2;_ef ++{_bb :=len (_bgc )-1-_ef ;_bgc [_ef ],_bgc [_bb ]=_bgc [_bb ],_bgc [_ef ];};return _bgc ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_de bool ;_be bool ;_f bool ;_ad bool ;_ee bool ;_ggd bool ;_db int64 ;_gad int ;};const _fba int =-1;const _eee int =0;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_ge ,_ :=_b .ParseFloat (v ,64);return Number (_ge ,f );};return String (v ,f );};

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};type Lexer struct{_fcbf Format ;_gfc []Format ;};func _bbd (_cbd ,_ec float64 ,_agf Format )[]byte {if len (_agf .Whole )==0{return nil ;};_df :=_g .Date (1899,12,30,0,0,0,0,_g .UTC );_af :=_df .Add (_g .Duration (_ec *float64 (24*_g .Hour )));_af =_aceg (_af );_ce :=_b .AppendFloat (nil ,_cbd ,'f',-1,64);_geg :=make ([]byte ,0,len (_ce ));_gagg :=0;_ae :=1;_cad :for _eec :=len (_agf .Whole )-1;_eec >=0;_eec --{_bag :=len (_ce )-1-_gagg ;_dab :=_agf .Whole [_eec ];switch _dab .Type {case FmtTypeDigit :if _bag >=0{_geg =append (_geg ,_ce [_bag ]);_gagg ++;_ae =_eec ;}else {_geg =append (_geg ,'0');};case FmtTypeDigitOpt :if _bag >=0{_geg =append (_geg ,_ce [_bag ]);_gagg ++;_ae =_eec ;}else {for _ega :=_eec ;_ega >=0;_ega --{_fb :=_agf .Whole [_ega ];if _fb .Type ==FmtTypeLiteral {_geg =append (_geg ,_fb .Literal );};};break _cad ;};case FmtTypeDollar :for _gfa :=_gagg ;_gfa < len (_ce );_gfa ++{_geg =append (_geg ,_ce [len (_ce )-1-_gfa ]);_gagg ++;};_geg =append (_geg ,'$');case FmtTypeComma :if !_agf ._ad {_geg =append (_geg ,',');};case FmtTypeLiteral :_geg =append (_geg ,_dab .Literal );case FmtTypeDate :_geg =append (_geg ,_ed (_fbcd (_af ,_dab .DateTime ))...);case FmtTypeTime :_geg =append (_geg ,_ed (_fcf (_af ,_ec ,_dab .DateTime ))...);default:_e .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_dab );};};_fbc :=_ed (_geg );if _gagg < len (_ce )&&(_gagg !=0||_agf ._ggd ){_gab :=len (_ce )-_gagg ;_bdf :=make ([]byte ,len (_fbc )+_gab );copy (_bdf ,_fbc [0:_ae ]);copy (_bdf [_ae :],_ce [0:]);copy (_bdf [_ae +_gab :],_fbc [_ae :]);_fbc =_bdf ;};if _agf ._ad {_ff :=_d .Buffer {};_acg :=0;for _eba :=len (_fbc )-1;_eba >=0;_eba --{if !(_fbc [_eba ]>='0'&&_fbc [_eba ]<='9'){_acg ++;}else {break ;};};for _aef :=0;_aef < len (_fbc );_aef ++{_gb :=(len (_fbc )-_aef -_acg );if _gb %3==0&&_gb !=0&&_aef !=0{_ff .WriteByte (',');};_ff .WriteByte (_fbc [_aef ]);};_fbc =_ff .Bytes ();};return _fbc ;};func (_gce *Lexer )nextFmt (){_gce ._gfc =append (_gce ._gfc ,_gce ._fcbf );_gce ._fcbf =Format {}};func _bce (_aa int64 ,_egad Format )[]byte {if !_egad .IsExponential ||len (_egad .Exponent )==0{return nil ;};_fab :=_b .AppendInt (nil ,_afb (_aa ),10);_bgag :=make ([]byte ,0,len (_fab )+2);_bgag =append (_bgag ,'E');if _aa >=0{_bgag =append (_bgag ,'+');}else {_bgag =append (_bgag ,'-');_aa *=-1;};_aab :=0;_eag :for _ceg :=len (_egad .Exponent )-1;_ceg >=0;_ceg --{_bge :=len (_fab )-1-_aab ;_bf :=_egad .Exponent [_ceg ];switch _bf .Type {case FmtTypeDigit :if _bge >=0{_bgag =append (_bgag ,_fab [_bge ]);_aab ++;}else {_bgag =append (_bgag ,'0');};case FmtTypeDigitOpt :if _bge >=0{_bgag =append (_bgag ,_fab [_bge ]);_aab ++;}else {for _cba :=_ceg ;_cba >=0;_cba --{_bdb :=_egad .Exponent [_cba ];if _bdb .Type ==FmtTypeLiteral {_bgag =append (_bgag ,_bdb .Literal );};};break _eag ;};case FmtTypeLiteral :_bgag =append (_bgag ,_bf .Literal );default:_e .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_bf );};};if _aab < len (_fab ){_bgag =append (_bgag ,_fab [len (_fab )-_aab -1:_aab -1]...);};_ed (_bgag [2:]);return _bgag ;};const _ccg int =0;func (_feb *Lexer )Lex (r _a .Reader ){_dfe ,_fgg ,_abg :=0,0,0;_fed :=-1;_ddg ,_bbg ,_gfg :=0,0,0;_ =_bbg ;_ =_gfg ;_dad :=1;_ =_dad ;_eff :=make ([]byte ,4096);_deg :=false ;for !_deg {_bfd :=0;if _ddg > 0{_bfd =_fgg -_ddg ;};_fgg =0;_ceb ,_ebd :=r .Read (_eff [_bfd :]);if _ceb ==0||_ebd !=nil {_deg =true ;};_abg =_ceb +_bfd ;if _abg < len (_eff ){_fed =_abg ;};{_dfe =_bab ;_ddg =0;_bbg =0;_gfg =0;};{if _fgg ==_abg {goto _bacg ;};switch _dfe {case 34:goto _cge ;case 35:goto _gada ;case 0:goto _cfg ;case 36:goto _cedb ;case 37:goto _cdgd ;case 1:goto _bbgb ;case 2:goto _gcge ;case 38:goto _eea ;case 3:goto _bafd ;case 4:goto _cada ;case 39:goto _dde ;case 5:goto _gfce ;case 6:goto _cbb ;case 7:goto _beed ;case 8:goto _afbe ;case 40:goto _fcff ;case 9:goto _afdd ;case 41:goto _fda ;case 10:goto _bff ;case 42:goto _aabd ;case 11:goto _aabb ;case 43:goto _aegc ;case 44:goto _aaf ;case 45:goto _ead ;case 12:goto _dcdg ;case 46:goto _fedc ;case 13:goto _eecf ;case 14:goto _cgd ;case 15:goto _debe ;case 16:goto _efd ;case 47:goto _gef ;case 17:goto _dbb ;case 48:goto _eecb ;case 18:goto _fbea ;case 19:goto _ccb ;case 20:goto _debb ;case 49:goto _feda ;case 50:goto _bfdc ;case 21:goto _cac ;case 22:goto _fgb ;case 23:goto _adgg ;case 24:goto _fbcc ;case 25:goto _cbg ;case 51:goto _ffce ;case 26:goto _abcd ;case 52:goto _dabg ;case 53:goto _efg ;case 54:goto _cfbb ;case 55:goto _ddd ;case 56:goto _cbc ;case 57:goto _abf ;case 27:goto _ccbg ;case 28:goto _fcg ;case 29:goto _edb ;case 30:goto _dcg ;case 31:goto _aaga ;case 58:goto _cgea ;case 32:goto _dca ;case 59:goto _dgf ;case 33:goto _bgb ;case 60:goto _bac ;case 61:goto _fdac ;case 62:goto _fdg ;};goto _dcaa ;_aegg :switch _gfg {case 2:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeDigit ,nil );};case 3:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_fgg =(_bbg )-1;};case 8:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypePercent ,nil );};case 13:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeFraction ,_eff [_ddg :_bbg ]);};case 14:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeDate ,_eff [_ddg :_bbg ]);};case 15:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeTime ,_eff [_ddg :_bbg ]);};case 16:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeTime ,_eff [_ddg :_bbg ]);};case 18:{_fgg =(_bbg )-1;};case 20:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeLiteral ,_eff [_ddg :_bbg ]);};case 21:{_fgg =(_bbg )-1;_feb ._fcbf .AddToken (FmtTypeLiteral ,_eff [_ddg +1:_bbg -1]);};};goto _gac ;_fedf :_fgg =(_bbg )-1;{_feb ._fcbf .AddToken (FmtTypeFraction ,_eff [_ddg :_bbg ]);};goto _gac ;_gcfe :_fgg =(_bbg )-1;{_feb ._fcbf .AddToken (FmtTypeDigitOpt ,nil );};goto _gac ;_ddgg :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeDigitOptThousands ,nil );};goto _gac ;_bbbf :_fgg =(_bbg )-1;{_feb ._fcbf .AddToken (FmtTypePercent ,nil );};goto _gac ;_aced :_fgg =(_bbg )-1;{_feb ._fcbf .AddToken (FmtTypeDate ,_eff [_ddg :_bbg ]);};goto _gac ;_dfc :_fgg =(_bbg )-1;{_feb ._fcbf .AddToken (FmtTypeDigit ,nil );};goto _gac ;_aba :_fgg =(_bbg )-1;{_feb ._fcbf .AddToken (FmtTypeTime ,_eff [_ddg :_bbg ]);};goto _gac ;_fcac :_fgg =(_bbg )-1;{_feb ._fcbf .AddToken (FmtTypeLiteral ,_eff [_ddg :_bbg ]);};goto _gac ;_dgc :_bbg =_fgg +1;{_feb ._fcbf ._f =true ;};goto _gac ;_bee :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeLiteral ,_eff [_ddg :_bbg ]);};goto _gac ;_ged :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeDollar ,nil );};goto _gac ;_dbcc :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeComma ,nil );};goto _gac ;_cgfg :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeDecimal ,nil );};goto _gac ;_cef :_bbg =_fgg +1;{_feb .nextFmt ();};goto _gac ;_geed :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeText ,nil );};goto _gac ;_fgd :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeUnderscore ,nil );};goto _gac ;_bcf :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypeLiteral ,_eff [_ddg :_bbg ]);};goto _gac ;_fbcf :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypeLiteral ,_eff [_ddg +1:_bbg -1]);};goto _gac ;_cfc :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypeDigitOpt ,nil );};goto _gac ;_aea :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypeFraction ,_eff [_ddg :_bbg ]);};goto _gac ;_efbe :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypePercent ,nil );};goto _gac ;_eeg :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypeDate ,_eff [_ddg :_bbg ]);};goto _gac ;_baf :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypeDigit ,nil );};goto _gac ;_ebbfg :_bbg =_fgg ;_fgg --;{_feb ._fcbf .AddToken (FmtTypeTime ,_eff [_ddg :_bbg ]);};goto _gac ;_ced :_bbg =_fgg ;_fgg --;{};goto _gac ;_cfb :_bbg =_fgg +1;{_feb ._fcbf .IsExponential =true ;};goto _gac ;_cdg :_bbg =_fgg +1;{_feb ._fcbf .AddToken (FmtTypeLiteral ,_eff [_ddg +1:_bbg ]);};goto _gac ;_gac :_ddg =0;if _fgg ++;_fgg ==_abg {goto _cfae ;};_cge :_ddg =_fgg ;switch _eff [_fgg ]{case 34:goto _cdac ;case 35:goto _ccgg ;case 36:goto _ged ;case 37:goto _fde ;case 44:goto _dbcc ;case 46:goto _cgfg ;case 47:goto _dfa ;case 48:goto _bde ;case 58:goto _cfbf ;case 59:goto _cef ;case 63:goto _cdad ;case 64:goto _geed ;case 65:goto _afbef ;case 69:goto _cea ;case 71:goto _acge ;case 91:goto _cbbe ;case 92:goto _bec ;case 95:goto _fgd ;case 100:goto _dfa ;case 104:goto _cfbf ;case 109:goto _bcff ;case 115:goto _eegg ;case 121:goto _bdeg ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _ddeg ;};goto _bee ;_cdac :_bbg =_fgg +1;_gfg =20;goto _fd ;_fd :if _fgg ++;_fgg ==_abg {goto _adcg ;};_gada :if _eff [_fgg ]==34{goto _dgb ;};goto _gdf ;_gdf :if _fgg ++;_fgg ==_abg {goto _beg ;};_cfg :if _eff [_fgg ]==34{goto _dgb ;};goto _gdf ;_dgb :_bbg =_fgg +1;_gfg =21;goto _eac ;_eac :if _fgg ++;_fgg ==_abg {goto _aafe ;};_cedb :if _eff [_fgg ]==34{goto _gdf ;};goto _fbcf ;_ccgg :_bbg =_fgg +1;_gfg =3;goto _dabf ;_dabf :if _fgg ++;_fgg ==_abg {goto _fcd ;};_cdgd :switch _eff [_fgg ]{case 35:goto _fga ;case 37:goto _fga ;case 44:goto _egf ;case 47:goto _cdc ;case 48:goto _fga ;case 63:goto _fga ;};goto _cfc ;_fga :if _fgg ++;_fgg ==_abg {goto _fgde ;};_bbgb :switch _eff [_fgg ]{case 35:goto _fga ;case 37:goto _fga ;case 47:goto _cdc ;case 48:goto _fga ;case 63:goto _fga ;};goto _aegg ;_cdc :if _fgg ++;_fgg ==_abg {goto _bbge ;};_gcge :switch _eff [_fgg ]{case 35:goto _gbbb ;case 37:goto _dcea ;case 48:goto _cfeb ;case 63:goto _gbbb ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fcfa ;};goto _aegg ;_gbbb :_bbg =_fgg +1;goto _febg ;_febg :if _fgg ++;_fgg ==_abg {goto _bfde ;};_eea :switch _eff [_fgg ]{case 35:goto _gbbb ;case 37:goto _gbbb ;case 44:goto _gbbb ;case 46:goto _gbbb ;case 48:goto _gbbb ;case 63:goto _gbbb ;case 65:goto _fcbb ;};goto _aea ;_fcbb :if _fgg ++;_fgg ==_abg {goto _ggced ;};_bafd :switch _eff [_fgg ]{case 47:goto _dba ;case 77:goto _acdf ;};goto _fedf ;_dba :if _fgg ++;_fgg ==_abg {goto _bfbd ;};_cada :if _eff [_fgg ]==80{goto _faad ;};goto _fedf ;_faad :_bbg =_fgg +1;goto _ffcd ;_ffcd :if _fgg ++;_fgg ==_abg {goto _deeb ;};_dde :if _eff [_fgg ]==65{goto _fcbb ;};goto _aea ;_acdf :if _fgg ++;_fgg ==_abg {goto _gafe ;};_gfce :if _eff [_fgg ]==47{goto _cec ;};goto _fedf ;_cec :if _fgg ++;_fgg ==_abg {goto _gdea ;};_cbb :if _eff [_fgg ]==80{goto _agd ;};goto _fedf ;_agd :if _fgg ++;_fgg ==_abg {goto _gfgb ;};_beed :if _eff [_fgg ]==77{goto _faad ;};goto _fedf ;_dcea :if _fgg ++;_fgg ==_abg {goto _cfbbd ;};_afbe :switch _eff [_fgg ]{case 35:goto _bfac ;case 37:goto _cbda ;case 63:goto _bfac ;};if 48<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _gdc ;};goto _aegg ;_bfac :_bbg =_fgg +1;goto _cgc ;_cgc :if _fgg ++;_fgg ==_abg {goto _aad ;};_fcff :switch _eff [_fgg ]{case 35:goto _gbbb ;case 37:goto _efbd ;case 44:goto _gbbb ;case 46:goto _gbbb ;case 48:goto _gbbb ;case 63:goto _gbbb ;case 65:goto _fcbb ;};goto _aea ;_efbd :if _fgg ++;_fgg ==_abg {goto _bdec ;};_afdd :switch _eff [_fgg ]{case 35:goto _aeb ;case 44:goto _aeb ;case 46:goto _aeb ;case 48:goto _aeb ;case 63:goto _aeb ;};goto _fedf ;_aeb :_bbg =_fgg +1;goto _gfe ;_gfe :if _fgg ++;_fgg ==_abg {goto _dga ;};_fda :switch _eff [_fgg ]{case 35:goto _aeb ;case 44:goto _aeb ;case 46:goto _aeb ;case 48:goto _aeb ;case 63:goto _aeb ;case 65:goto _fcbb ;};goto _aea ;_cbda :if _fgg ++;_fgg ==_abg {goto _fdaf ;};_bff :if _eff [_fgg ]==37{goto _cbda ;};if 48<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _gdc ;};goto _aegg ;_gdc :_bbg =_fgg +1;_gfg =13;goto _fbe ;_fbe :if _fgg ++;_fgg ==_abg {goto _dfg ;};_aabd :switch _eff [_fgg ]{case 35:goto _gbbb ;case 37:goto _ggce ;case 44:goto _gbbb ;case 46:goto _gbbb ;case 48:goto _egagg ;case 63:goto _gbbb ;case 65:goto _fcbb ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _gdc ;};goto _aea ;_ggce :if _fgg ++;_fgg ==_abg {goto _aga ;};_aabb :switch _eff [_fgg ]{case 35:goto _aeb ;case 37:goto _cbda ;case 44:goto _aeb ;case 46:goto _aeb ;case 63:goto _aeb ;};if 48<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _gdc ;};goto _fedf ;_egagg :_bbg =_fgg +1;goto _dff ;_dff :if _fgg ++;_fgg ==_abg {goto _cee ;};_aegc :switch _eff [_fgg ]{case 35:goto _gbbb ;case 37:goto _egagg ;case 44:goto _gbbb ;case 46:goto _gbbb ;case 48:goto _egagg ;case 63:goto _gbbb ;case 65:goto _fcbb ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _gdc ;};goto _aea ;_cfeb :_bbg =_fgg +1;goto _fdag ;_fdag :if _fgg ++;_fgg ==_abg {goto _eade ;};_aaf :switch _eff [_fgg ]{case 35:goto _gbbb ;case 37:goto _egagg ;case 44:goto _gbbb ;case 46:goto _gbbb ;case 48:goto _cfeb ;case 63:goto _gbbb ;case 65:goto _fcbb ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fcfa ;};goto _aea ;_fcfa :_bbg =_fgg +1;goto _fdf ;_fdf :if _fgg ++;_fgg ==_abg {goto _cfgc ;};_ead :switch _eff [_fgg ]{case 35:goto _gbbb ;case 37:goto _gdc ;case 44:goto _gbbb ;case 46:goto _gbbb ;case 48:goto _cfeb ;case 63:goto _gbbb ;case 65:goto _fcbb ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fcfa ;};goto _aea ;_egf :if _fgg ++;_fgg ==_abg {goto _edfg ;};_dcdg :if _eff [_fgg ]==35{goto _ddgg ;};goto _gcfe ;_fde :_bbg =_fgg +1;_gfg =8;goto _bfb ;_bfb :if _fgg ++;_fgg ==_abg {goto _eeed ;};_fedc :switch _eff [_fgg ]{case 35:goto _agc ;case 37:goto _eda ;case 48:goto _gdab ;case 63:goto _agc ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdc ;};goto _efbe ;_agc :if _fgg ++;_fgg ==_abg {goto _gbbc ;};_eecf :switch _eff [_fgg ]{case 35:goto _agc ;case 47:goto _cdc ;case 48:goto _agc ;case 63:goto _agc ;};goto _bbbf ;_eda :if _fgg ++;_fgg ==_abg {goto _ffcdb ;};_cgd :if _eff [_fgg ]==37{goto _eda ;};if 48<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdc ;};goto _aegg ;_fdc :if _fgg ++;_fgg ==_abg {goto _cfga ;};_debe :switch _eff [_fgg ]{case 37:goto _eda ;case 47:goto _cdc ;};if 48<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdc ;};goto _aegg ;_gdab :if _fgg ++;_fgg ==_abg {goto _aabfb ;};_efd :switch _eff [_fgg ]{case 35:goto _agc ;case 37:goto _eda ;case 47:goto _cdc ;case 48:goto _gdab ;case 63:goto _agc ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdc ;};goto _bbbf ;_dfa :_bbg =_fgg +1;goto _abb ;_abb :if _fgg ++;_fgg ==_abg {goto _ccba ;};_gef :switch _eff [_fgg ]{case 47:goto _dfa ;case 100:goto _dfa ;case 109:goto _dfa ;case 121:goto _fcfb ;};goto _eeg ;_fcfb :if _fgg ++;_fgg ==_abg {goto _fcbg ;};_dbb :if _eff [_fgg ]==121{goto _dfa ;};goto _aced ;_bde :_bbg =_fgg +1;_gfg =2;goto _cdd ;_cdd :if _fgg ++;_fgg ==_abg {goto _deca ;};_eecb :switch _eff [_fgg ]{case 35:goto _fga ;case 37:goto _abc ;case 47:goto _cdc ;case 48:goto _eagd ;case 63:goto _fga ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdff ;};goto _baf ;_abc :if _fgg ++;_fgg ==_abg {goto _efgc ;};_fbea :switch _eff [_fgg ]{case 35:goto _fga ;case 37:goto _abc ;case 47:goto _cdc ;case 48:goto _abc ;case 63:goto _fga ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdc ;};goto _dfc ;_eagd :if _fgg ++;_fgg ==_abg {goto _dfeb ;};_ccb :switch _eff [_fgg ]{case 35:goto _fga ;case 37:goto _abc ;case 47:goto _cdc ;case 48:goto _eagd ;case 63:goto _fga ;};if 49<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdff ;};goto _dfc ;_fdff :if _fgg ++;_fgg ==_abg {goto _bcc ;};_debb :switch _eff [_fgg ]{case 37:goto _fdc ;case 47:goto _cdc ;};if 48<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdff ;};goto _aegg ;_ddeg :_bbg =_fgg +1;_gfg =20;goto _bcgg ;_bcgg :if _fgg ++;_fgg ==_abg {goto _afga ;};_feda :switch _eff [_fgg ]{case 37:goto _fdc ;case 47:goto _cdc ;};if 48<=_eff [_fgg ]&&_eff [_fgg ]<=57{goto _fdff ;};goto _bcf ;_cfbf :_bbg =_fgg +1;_gfg =15;goto _aac ;_aac :if _fgg ++;_fgg ==_abg {goto _eeea ;};_bfdc :switch _eff [_fgg ]{case 58:goto _cfbf ;case 65:goto _edf ;case 104:goto _cfbf ;case 109:goto _cfbf ;case 115:goto _eegg ;};goto _ebbfg ;_edf :if _fgg ++;_fgg ==_abg {goto _aabfa ;};_cac :switch _eff [_fgg ]{case 47:goto _gacd ;case 77:goto _febd ;};goto _aegg ;_gacd :if _fgg ++;_fgg ==_abg {goto _befc ;};_fgb :if _eff [_fgg ]==80{goto _cfbf ;};goto _aegg ;_febd :if _fgg ++;_fgg ==_abg {goto _aee ;};_adgg :if _eff [_fgg ]==47{goto _bcd ;};goto _aegg ;_bcd :if _fgg ++;_fgg ==_abg {goto _ccf ;};_fbcc :if _eff [_fgg ]==80{goto _aagb ;};goto _aegg ;_aagb :if _fgg ++;_fgg ==_abg {goto _bfc ;};_cbg :if _eff [_fgg ]==77{goto _cfbf ;};goto _aegg ;_eegg :_bbg =_fgg +1;_gfg =15;goto _acee ;_acee :if _fgg ++;_fgg ==_abg {goto _dgcg ;};_ffce :switch _eff [_fgg ]{case 46:goto _feg ;case 58:goto _cfbf ;case 65:goto _edf ;case 104:goto _cfbf ;case 109:goto _cfbf ;case 115:goto _eegg ;};goto _ebbfg ;_feg :if _fgg ++;_fgg ==_abg {goto _eggb ;};_abcd :if _eff [_fgg ]==48{goto _fbce ;};goto _aba ;_fbce :_bbg =_fgg +1;_gfg =15;goto _gaf ;_gaf :if _fgg ++;_fgg ==_abg {goto _fdb ;};_dabg :switch _eff [_fgg ]{case 48:goto _decg ;case 58:goto _cfbf ;case 65:goto _edf ;case 104:goto _cfbf ;case 109:goto _cfbf ;case 115:goto _eegg ;};goto _ebbfg ;_decg :_bbg =_fgg +1;_gfg =15;goto _gdfb ;_gdfb :if _fgg ++;_fgg ==_abg {goto _edd ;};_efg :switch _eff [_fgg ]{case 48:goto _cfbf ;case 58:goto _cfbf ;case 65:goto _edf ;case 104:goto _cfbf ;case 109:goto _cfbf ;case 115:goto _eegg ;};goto _ebbfg ;_cdad :_bbg =_fgg +1;_gfg =5;goto _abgg ;_abgg :if _fgg ++;_fgg ==_abg {goto _ebf ;};_cfbb :switch _eff [_fgg ]{case 35:goto _fga ;case 37:goto _fga ;case 47:goto _cdc ;case 48:goto _fga ;case 63:goto _fga ;};goto _ced ;_afbef :_bbg =_fgg +1;_gfg =20;goto _aec ;_aec :if _fgg ++;_fgg ==_abg {goto _gagc ;};_ddd :switch _eff [_fgg ]{case 47:goto _gacd ;case 77:goto _febd ;};goto _bcf ;_cea :if _fgg ++;_fgg ==_abg {goto _cbab ;};_cbc :switch _eff [_fgg ]{case 43:goto _cfb ;case 45:goto _cfb ;};goto _bcf ;_acge :_bbg =_fgg +1;goto _gfge ;_gfge :if _fgg ++;_fgg ==_abg {goto _edg ;};_abf :if _eff [_fgg ]==101{goto _cafb ;};goto _bcf ;_cafb :if _fgg ++;_fgg ==_abg {goto _gca ;};_ccbg :if _eff [_fgg ]==110{goto _aabf ;};goto _fcac ;_aabf :if _fgg ++;_fgg ==_abg {goto _add ;};_fcg :if _eff [_fgg ]==101{goto _gde ;};goto _fcac ;_gde :if _fgg ++;_fgg ==_abg {goto _fdad ;};_edb :if _eff [_fgg ]==114{goto _fdea ;};goto _fcac ;_fdea :if _fgg ++;_fgg ==_abg {goto _agcd ;};_dcg :if _eff [_fgg ]==97{goto _eecg ;};goto _fcac ;_eecg :if _fgg ++;_fgg ==_abg {goto _bcef ;};_aaga :if _eff [_fgg ]==108{goto _dgc ;};goto _fcac ;_cbbe :_bbg =_fgg +1;_gfg =20;goto _eef ;_eef :if _fgg ++;_fgg ==_abg {goto _ffg ;};_cgea :switch _eff [_fgg ]{case 104:goto _efbb ;case 109:goto _efbb ;case 115:goto _efbb ;};goto _eab ;_eab :if _fgg ++;_fgg ==_abg {goto _gfda ;};_dca :if _eff [_fgg ]==93{goto _bgebb ;};goto _eab ;_bgebb :_bbg =_fgg +1;_gfg =18;goto _fcea ;_badg :_bbg =_fgg +1;_gfg =16;goto _fcea ;_fcea :if _fgg ++;_fgg ==_abg {goto _gae ;};_dgf :if _eff [_fgg ]==93{goto _bgebb ;};goto _eab ;_efbb :if _fgg ++;_fgg ==_abg {goto _gcad ;};_bgb :if _eff [_fgg ]==93{goto _badg ;};goto _eab ;_bec :if _fgg ++;_fgg ==_abg {goto _aae ;};_bac :goto _cdg ;_bcff :_bbg =_fgg +1;_gfg =14;goto _eegd ;_eegd :if _fgg ++;_fgg ==_abg {goto _bcgf ;};_fdac :switch _eff [_fgg ]{case 47:goto _dfa ;case 58:goto _cfbf ;case 65:goto _edf ;case 100:goto _dfa ;case 104:goto _cfbf ;case 109:goto _bcff ;case 115:goto _eegg ;case 121:goto _fcfb ;};goto _eeg ;_bdeg :if _fgg ++;_fgg ==_abg {goto _fdffg ;};_fdg :if _eff [_fgg ]==121{goto _dfa ;};goto _bcf ;_dcaa :_cfae :_dfe =34;goto _bacg ;_adcg :_dfe =35;goto _bacg ;_beg :_dfe =0;goto _bacg ;_aafe :_dfe =36;goto _bacg ;_fcd :_dfe =37;goto _bacg ;_fgde :_dfe =1;goto _bacg ;_bbge :_dfe =2;goto _bacg ;_bfde :_dfe =38;goto _bacg ;_ggced :_dfe =3;goto _bacg ;_bfbd :_dfe =4;goto _bacg ;_deeb :_dfe =39;goto _bacg ;_gafe :_dfe =5;goto _bacg ;_gdea :_dfe =6;goto _bacg ;_gfgb :_dfe =7;goto _bacg ;_cfbbd :_dfe =8;goto _bacg ;_aad :_dfe =40;goto _bacg ;_bdec :_dfe =9;goto _bacg ;_dga :_dfe =41;goto _bacg ;_fdaf :_dfe =10;goto _bacg ;_dfg :_dfe =42;goto _bacg ;_aga :_dfe =11;goto _bacg ;_cee :_dfe =43;goto _bacg ;_eade :_dfe =44;goto _bacg ;_cfgc :_dfe =45;goto _bacg ;_edfg :_dfe =12;goto _bacg ;_eeed :_dfe =46;goto _bacg ;_gbbc :_dfe =13;goto _bacg ;_ffcdb :_dfe =14;goto _bacg ;_cfga :_dfe =15;goto _bacg ;_aabfb :_dfe =16;goto _bacg ;_ccba :_dfe =47;goto _bacg ;_fcbg :_dfe =17;goto _bacg ;_deca :_dfe =48;goto _bacg ;_efgc :_dfe =18;goto _bacg ;_dfeb :_dfe =19;goto _bacg ;_bcc :_dfe =20;goto _bacg ;_afga :_dfe =49;goto _bacg ;_eeea :_dfe =50;goto _bacg ;_aabfa :_dfe =21;goto _bacg ;_befc :_dfe =22;goto _bacg ;_aee :_dfe =23;goto _bacg ;_ccf :_dfe =24;goto _bacg ;_bfc :_dfe =25;goto _bacg ;_dgcg :_dfe =51;goto _bacg ;_eggb :_dfe =26;goto _bacg ;_fdb :_dfe =52;goto _bacg ;_edd :_dfe =53;goto _bacg ;_ebf :_dfe =54;goto _bacg ;_gagc :_dfe =55;goto _bacg ;_cbab :_dfe =56;goto _bacg ;_edg :_dfe =57;goto _bacg ;_gca :_dfe =27;goto _bacg ;_add :_dfe =28;goto _bacg ;_fdad :_dfe =29;goto _bacg ;_agcd :_dfe =30;goto _bacg ;_bcef :_dfe =31;goto _bacg ;_ffg :_dfe =58;goto _bacg ;_gfda :_dfe =32;goto _bacg ;_gae :_dfe =59;goto _bacg ;_gcad :_dfe =33;goto _bacg ;_aae :_dfe =60;goto _bacg ;_bcgf :_dfe =61;goto _bacg ;_fdffg :_dfe =62;goto _bacg ;_bacg :{};if _fgg ==_fed {switch _dfe {case 35:goto _bcf ;case 0:goto _aegg ;case 36:goto _fbcf ;case 37:goto _cfc ;case 1:goto _aegg ;case 2:goto _aegg ;case 38:goto _aea ;case 3:goto _fedf ;case 4:goto _fedf ;case 39:goto _aea ;case 5:goto _fedf ;case 6:goto _fedf ;case 7:goto _fedf ;case 8:goto _aegg ;case 40:goto _aea ;case 9:goto _fedf ;case 41:goto _aea ;case 10:goto _aegg ;case 42:goto _aea ;case 11:goto _fedf ;case 43:goto _aea ;case 44:goto _aea ;case 45:goto _aea ;case 12:goto _gcfe ;case 46:goto _efbe ;case 13:goto _bbbf ;case 14:goto _aegg ;case 15:goto _aegg ;case 16:goto _bbbf ;case 47:goto _eeg ;case 17:goto _aced ;case 48:goto _baf ;case 18:goto _dfc ;case 19:goto _dfc ;case 20:goto _aegg ;case 49:goto _bcf ;case 50:goto _ebbfg ;case 21:goto _aegg ;case 22:goto _aegg ;case 23:goto _aegg ;case 24:goto _aegg ;case 25:goto _aegg ;case 51:goto _ebbfg ;case 26:goto _aba ;case 52:goto _ebbfg ;case 53:goto _ebbfg ;case 54:goto _ced ;case 55:goto _bcf ;case 56:goto _bcf ;case 57:goto _bcf ;case 27:goto _fcac ;case 28:goto _fcac ;case 29:goto _fcac ;case 30:goto _fcac ;case 31:goto _fcac ;case 58:goto _bcf ;case 32:goto _aegg ;case 59:goto _aegg ;case 33:goto _fcac ;case 60:goto _bcf ;case 61:goto _eeg ;case 62:goto _bcf ;};};};if _ddg > 0{copy (_eff [0:],_eff [_ddg :]);};};_ =_fed ;if _dfe ==_fba {_e .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};const _gda int =-1;func (_cf FmtType )String ()string {if _cf >=FmtType (len (_ga )-1){return _ca .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_cf );};return _eb [_ga [_cf ]:_ga [_cf +1]];};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_dcf :=Parse (f );if len (_dcf )==1{return _eg (v ,_dcf [0],false );}else if len (_dcf )> 1&&v < 0{return _eg (v ,_dcf [1],true );}else if len (_dcf )> 2&&v ==0{return _eg (v ,_dcf [2],false );};return _eg (v ,_dcf [0],false );};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ea :=Parse (f );var _ggab Format ;if len (_ea )==1{_ggab =_ea [0];}else if len (_ea )==4{_ggab =_ea [3];};_cc :=false ;for _ ,_bed :=range _ggab .Whole {if _bed .Type ==FmtTypeText {_cc =true ;};};if !_cc {return v ;};_ggc :=_d .Buffer {};for _ ,_gf :=range _ggab .Whole {switch _gf .Type {case FmtTypeLiteral :_ggc .WriteByte (_gf .Literal );case FmtTypeText :_ggc .WriteString (v );};};return _ggc .String ();};const _cgf int =34;const _aefb int =34;func Parse (s string )[]Format {_gbb :=Lexer {};_gbb .Lex (_gg .NewReader (s ));_gbb ._gfc =append (_gbb ._gfc ,_gbb ._fcbf );return _gbb ._gfc ;};func _beff (_egag []byte )[]byte {_befd :=len (_egag );_gec :=false ;_gff :=false ;for _afd :=len (_egag )-1;_afd >=0;_afd --{if _egag [_afd ]=='0'&&!_gff &&!_gec {_befd =_afd ;}else if _egag [_afd ]=='.'{_gec =true ;}else {_gff =true ;};};if _gec &&_gff {if _egag [_befd -1]=='.'{_befd --;};return _egag [0:_befd ];};return _egag ;};func _cfa (_egg ,_cag float64 ,_afg Format )[]byte {if len (_afg .Fractional )==0{return nil ;};_ege :=_b .AppendFloat (nil ,_egg ,'f',-1,64);if len (_ege )> 2{_ege =_ege [2:];}else {_ege =nil ;};_fa :=make ([]byte ,0,len (_ege ));_fa =append (_fa ,'.');_gbc :=0;_agb :for _dgd :=0;_dgd < len (_afg .Fractional );_dgd ++{_dabc :=_dgd ;_aeg :=_afg .Fractional [_dgd ];switch _aeg .Type {case FmtTypeDigit :if _dabc < len (_ege ){_fa =append (_fa ,_ege [_dabc ]);_gbc ++;}else {_fa =append (_fa ,'0');};case FmtTypeDigitOpt :if _dabc >=0{_fa =append (_fa ,_ege [_dabc ]);_gbc ++;}else {break _agb ;};case FmtTypeLiteral :_fa =append (_fa ,_aeg .Literal );default:_e .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_aeg );};};return _fa ;};func _fcf (_cbf _g .Time ,_gbg float64 ,_cfde string )[]byte {_fca :=[]byte {};_caf :=0;for _bfa :=0;_bfa < len (_cfde );_bfa ++{var _faa string ;if _cfde [_bfa ]==':'{_faa =string (_cfde [_caf :_bfa ]);_caf =_bfa +1;}else if _bfa ==len (_cfde )-1{_faa =string (_cfde [_caf :_bfa +1]);}else {continue ;};switch _faa {case "\u0064":_fca =_cbf .AppendFormat (_fca ,"\u0032");case "\u0068":_fca =_cbf .AppendFormat (_fca ,"\u0033");case "\u0068\u0068":_fca =_cbf .AppendFormat (_fca ,"\u0031\u0035");case "\u006d":_fca =_cbf .AppendFormat (_fca ,"\u0034");case "\u006d\u006d":_fca =_cbf .AppendFormat (_fca ,"\u0030\u0034");case "\u0073":_fca =_cbf .Round (_g .Second ).AppendFormat (_fca ,"\u0035");case "\u0073\u002e\u0030":_fca =_cbf .Round (_g .Second /10).AppendFormat (_fca ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_fca =_cbf .Round (_g .Second /100).AppendFormat (_fca ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_fca =_cbf .Round (_g .Second /1000).AppendFormat (_fca ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_fca =_cbf .Round (_g .Second ).AppendFormat (_fca ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_fca =_cbf .Round (_g .Second /10).AppendFormat (_fca ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_fca =_cbf .Round (_g .Second /100).AppendFormat (_fca ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_fca =_cbf .Round (_g .Second /1000).AppendFormat (_fca ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_fca =_cbf .AppendFormat (_fca ,"\u0050\u004d");case "\u005b\u0068\u005d":_fca =_b .AppendInt (_fca ,int64 (_gbg *24),10);case "\u005b\u006d\u005d":_fca =_b .AppendInt (_fca ,int64 (_gbg *24*60),10);case "\u005b\u0073\u005d":_fca =_b .AppendInt (_fca ,int64 (_gbg *24*60*60),10);case "":default:_e .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_faa );};if _cfde [_bfa ]==':'{_fca =append (_fca ,':');};};return _fca ;};func _aceg (_ecad _g .Time )_g .Time {_ecad =_ecad .UTC ();return _g .Date (_ecad .Year (),_ecad .Month (),_ecad .Day (),_ecad .Hour (),_ecad .Minute (),_ecad .Second (),_ecad .Nanosecond (),_g .Local );};

// AddToken adds a format token to the format.
func (_da *Format )AddToken (t FmtType ,l []byte ){if _da ._ee {_da ._ee =false ;return ;};switch t {case FmtTypeDecimal :_da ._ggd =true ;case FmtTypeUnderscore :_da ._ee =true ;case FmtTypeText :_da .Whole =append (_da .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_da .Whole =append (_da .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_da ._be =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_ebb :=range l {if _da .IsExponential {_da .Exponent =append (_da .Exponent ,Token {Type :t ,Literal :_ebb });}else if !_da ._ggd {_da .Whole =append (_da .Whole ,Token {Type :t ,Literal :_ebb });}else {_da .Fractional =append (_da .Fractional ,Token {Type :t ,Literal :_ebb });};};case FmtTypeDigitOptThousands :_da ._ad =true ;case FmtTypeFraction :_gaa :=_gg .Split (string (l ),"\u002f");if len (_gaa )==2{_da ._de =true ;_da ._db ,_ =_b .ParseInt (_gaa [1],10,64);for _ ,_ac :=range _gaa [1]{if _ac =='?'||_ac =='0'{_da ._gad ++;};};};default:_e .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};func _acd (_cda float64 )string {_cae :=_b .FormatFloat (_cda ,'E',-1,64);_bef :=_b .FormatFloat (_cda ,'E',5,64);if len (_cae )< len (_bef ){return _b .FormatFloat (_cda ,'E',2,64);};return _bef ;};