//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_g "bytes";_e "fmt";_a "github.com/unidoc/unioffice/common/logger";_c "io";_d "math";_fg "strconv";_cd "strings";_fc "time";);func _efg (_gdg float64 ,_gce Format ,_gb bool )string {if _gce ._fff {return NumberGeneric (_gdg );};
_dd :=make ([]byte ,0,20);_ad :=_d .Signbit (_gdg );_bg :=_d .Abs (_gdg );_eb :=int64 (0);_da :=int64 (0);if _gce .IsExponential {for _bg >=10{_da ++;_bg /=10;};for _bg < 1{_da --;_bg *=10;};}else if _gce ._fb {_bg *=100;}else if _gce ._de {if _gce ._fd ==0{_ddc :=_d .Pow (10,float64 (_gce ._fe ));
_cg ,_ceg :=1.0,1.0;_ =_cg ;for _ebe :=1.0;_ebe < _ddc ;_ebe ++{_ ,_ffe :=_d .Modf (_bg *float64 (_ebe ));if _ffe < _ceg {_ceg =_ffe ;_cg =_ebe ;if _ffe ==0{break ;};};};_gce ._fd =int64 (_cg );};_eb =int64 (_bg *float64 (_gce ._fd )+0.5);if len (_gce .Whole )> 0&&_eb > _gce ._fd {_eb =int64 (_bg *float64 (_gce ._fd ))%_gce ._fd ;
_bg -=float64 (_eb )/float64 (_gce ._fd );}else {_bg -=float64 (_eb )/float64 (_gce ._fd );if _d .Abs (_bg )< 1{_dad :=true ;for _ ,_fea :=range _gce .Whole {if _fea .Type ==FmtTypeDigitOpt {continue ;};if _fea .Type ==FmtTypeLiteral &&_fea .Literal ==' '{continue ;
};_dad =false ;};if _dad {_gce .Whole =nil ;};};};};_bd :=1;for _ ,_af :=range _gce .Fractional {if _af .Type ==FmtTypeDigit ||_af .Type ==FmtTypeDigitOpt {_bd ++;};};_bg +=5*_d .Pow10 (-_bd );_bdd ,_adb :=_d .Modf (_bg );_dd =append (_dd ,_df (_bdd ,_gdg ,_gce )...);
_dd =append (_dd ,_bfa (_adb ,_gdg ,_gce )...);_dd =append (_dd ,_db (_da ,_gce )...);if _gce ._de {_dd =_fg .AppendInt (_dd ,_eb ,10);_dd =append (_dd ,'/');_dd =_fg .AppendInt (_dd ,_gce ._fd ,10);};if !_gb &&_ad {return "\u002d"+string (_dd );};return string (_dd );
};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);func _cb (_cae []byte )[]byte {for _gcd :=len (_cae )-1;
_gcd > 0;_gcd --{if _cae [_gcd ]=='9'+1{_cae [_gcd ]='0';if _cae [_gcd -1]=='.'{_gcd --;};_cae [_gcd -1]++;};};if _cae [0]=='9'+1{_cae [0]='0';copy (_cae [1:],_cae [0:]);_cae [0]='1';};return _cae ;};func (_dbc *Lexer )Lex (r _c .Reader ){_bge ,_efe ,_cbf :=0,0,0;
_ead :=-1;_bgf ,_cbfb ,_dddc :=0,0,0;_ =_cbfb ;_ =_dddc ;_fbd :=1;_ =_fbd ;_eeaa :=make ([]byte ,4096);_ffd :=false ;for !_ffd {_dge :=0;if _bgf > 0{_dge =_efe -_bgf ;};_efe =0;_fggd ,_cdda :=r .Read (_eeaa [_dge :]);if _fggd ==0||_cdda !=nil {_ffd =true ;
};_cbf =_fggd +_dge ;if _cbf < len (_eeaa ){_ead =_cbf ;};{_bge =_gafd ;_bgf =0;_cbfb =0;_dddc =0;};{if _efe ==_cbf {goto _cff ;};switch _bge {case 34:goto _cedda ;case 35:goto _dda ;case 0:goto _dgad ;case 36:goto _fef ;case 37:goto _egga ;case 1:goto _dec ;
case 2:goto _bfb ;case 38:goto _ac ;case 3:goto _gdgf ;case 4:goto _ecb ;case 39:goto _afg ;case 5:goto _dde ;case 6:goto _fdf ;case 7:goto _egf ;case 8:goto _def ;case 40:goto _gef ;case 9:goto _gacd ;case 41:goto _bgca ;case 10:goto _dfaf ;case 42:goto _adgfd ;
case 11:goto _gfe ;case 43:goto _daad ;case 44:goto _ddda ;case 45:goto _dfg ;case 12:goto _deff ;case 46:goto _ged ;case 13:goto _ecg ;case 14:goto _bga ;case 15:goto _acd ;case 16:goto _febca ;case 47:goto _eceb ;case 17:goto _bda ;case 48:goto _fdab ;
case 18:goto _fga ;case 19:goto _egcf ;case 20:goto _aead ;case 49:goto _efd ;case 50:goto _gacde ;case 21:goto _fbfc ;case 22:goto _eec ;case 23:goto _dgc ;case 24:goto _dee ;case 25:goto _bfdd ;case 51:goto _dddcf ;case 26:goto _geaag ;case 52:goto _eaac ;
case 53:goto _ege ;case 54:goto _ecef ;case 55:goto _afc ;case 56:goto _efa ;case 57:goto _abdf ;case 27:goto _ecc ;case 28:goto _adeb ;case 29:goto _dbg ;case 30:goto _bgdf ;case 31:goto _bgec ;case 58:goto _ceaa ;case 32:goto _gbe ;case 59:goto _ddg ;
case 33:goto _fag ;case 60:goto _egbd ;case 61:goto _gaca ;case 62:goto _baff ;};goto _fefe ;_bdc :switch _dddc {case 2:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeDigit ,nil );};case 3:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeDigitOpt ,nil );
};case 5:{_efe =(_cbfb )-1;};case 8:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypePercent ,nil );};case 13:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeFraction ,_eeaa [_bgf :_cbfb ]);};case 14:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeDate ,_eeaa [_bgf :_cbfb ]);
};case 15:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeTime ,_eeaa [_bgf :_cbfb ]);};case 16:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeTime ,_eeaa [_bgf :_cbfb ]);};case 18:{_efe =(_cbfb )-1;};case 20:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeLiteral ,_eeaa [_bgf :_cbfb ]);
};case 21:{_efe =(_cbfb )-1;_dbc ._gfab .AddToken (FmtTypeLiteral ,_eeaa [_bgf +1:_cbfb -1]);};};goto _gcfa ;_bgd :_efe =(_cbfb )-1;{_dbc ._gfab .AddToken (FmtTypeFraction ,_eeaa [_bgf :_cbfb ]);};goto _gcfa ;_ebcb :_efe =(_cbfb )-1;{_dbc ._gfab .AddToken (FmtTypeDigitOpt ,nil );
};goto _gcfa ;_agaa :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeDigitOptThousands ,nil );};goto _gcfa ;_eede :_efe =(_cbfb )-1;{_dbc ._gfab .AddToken (FmtTypePercent ,nil );};goto _gcfa ;_bafg :_efe =(_cbfb )-1;{_dbc ._gfab .AddToken (FmtTypeDate ,_eeaa [_bgf :_cbfb ]);
};goto _gcfa ;_aff :_efe =(_cbfb )-1;{_dbc ._gfab .AddToken (FmtTypeDigit ,nil );};goto _gcfa ;_ggd :_efe =(_cbfb )-1;{_dbc ._gfab .AddToken (FmtTypeTime ,_eeaa [_bgf :_cbfb ]);};goto _gcfa ;_bbe :_efe =(_cbfb )-1;{_dbc ._gfab .AddToken (FmtTypeLiteral ,_eeaa [_bgf :_cbfb ]);
};goto _gcfa ;_cbg :_cbfb =_efe +1;{_dbc ._gfab ._fff =true ;};goto _gcfa ;_gacf :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeLiteral ,_eeaa [_bgf :_cbfb ]);};goto _gcfa ;_beb :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeDollar ,nil );};goto _gcfa ;
_fbdb :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeComma ,nil );};goto _gcfa ;_febc :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeDecimal ,nil );};goto _gcfa ;_fdd :_cbfb =_efe +1;{_dbc .nextFmt ();};goto _gcfa ;_aggf :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeText ,nil );
};goto _gcfa ;_aefg :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeUnderscore ,nil );};goto _gcfa ;_geg :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypeLiteral ,_eeaa [_bgf :_cbfb ]);};goto _gcfa ;_gcda :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypeLiteral ,_eeaa [_bgf +1:_cbfb -1]);
};goto _gcfa ;_gfg :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypeDigitOpt ,nil );};goto _gcfa ;_ccb :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypeFraction ,_eeaa [_bgf :_cbfb ]);};goto _gcfa ;_bdf :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypePercent ,nil );
};goto _gcfa ;_cfg :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypeDate ,_eeaa [_bgf :_cbfb ]);};goto _gcfa ;_debe :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypeDigit ,nil );};goto _gcfa ;_dfa :_cbfb =_efe ;_efe --;{_dbc ._gfab .AddToken (FmtTypeTime ,_eeaa [_bgf :_cbfb ]);
};goto _gcfa ;_gcb :_cbfb =_efe ;_efe --;{};goto _gcfa ;_abb :_cbfb =_efe +1;{_dbc ._gfab .IsExponential =true ;};goto _gcfa ;_eca :_cbfb =_efe +1;{_dbc ._gfab .AddToken (FmtTypeLiteral ,_eeaa [_bgf +1:_cbfb ]);};goto _gcfa ;_gcfa :_bgf =0;if _efe ++;_efe ==_cbf {goto _ggeb ;
};_cedda :_bgf =_efe ;switch _eeaa [_efe ]{case 34:goto _fced ;case 35:goto _gfd ;case 36:goto _beb ;case 37:goto _bfeef ;case 44:goto _fbdb ;case 46:goto _febc ;case 47:goto _cdde ;case 48:goto _bagf ;case 58:goto _fabf ;case 59:goto _fdd ;case 63:goto _gff ;
case 64:goto _aggf ;case 65:goto _gbgfb ;case 69:goto _ggbg ;case 71:goto _eba ;case 91:goto _dbfg ;case 92:goto _eeaf ;case 95:goto _aefg ;case 100:goto _cdde ;case 104:goto _fabf ;case 109:goto _egad ;case 115:goto _bccc ;case 121:goto _daca ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _fgc ;
};goto _gacf ;_fced :_cbfb =_efe +1;_dddc =20;goto _cefc ;_cefc :if _efe ++;_efe ==_cbf {goto _fca ;};_dda :if _eeaa [_efe ]==34{goto _fdb ;};goto _caa ;_caa :if _efe ++;_efe ==_cbf {goto _bagfg ;};_dgad :if _eeaa [_efe ]==34{goto _fdb ;};goto _caa ;_fdb :_cbfb =_efe +1;
_dddc =21;goto _dae ;_dae :if _efe ++;_efe ==_cbf {goto _bdb ;};_fef :if _eeaa [_efe ]==34{goto _caa ;};goto _gcda ;_gfd :_cbfb =_efe +1;_dddc =3;goto _egcd ;_egcd :if _efe ++;_efe ==_cbf {goto _gdcfc ;};_egga :switch _eeaa [_efe ]{case 35:goto _gdc ;case 37:goto _gdc ;
case 44:goto _fcgf ;case 47:goto _dcgc ;case 48:goto _gdc ;case 63:goto _gdc ;};goto _gfg ;_gdc :if _efe ++;_efe ==_cbf {goto _cag ;};_dec :switch _eeaa [_efe ]{case 35:goto _gdc ;case 37:goto _gdc ;case 47:goto _dcgc ;case 48:goto _gdc ;case 63:goto _gdc ;
};goto _bdc ;_dcgc :if _efe ++;_efe ==_cbf {goto _abbf ;};_bfb :switch _eeaa [_efe ]{case 35:goto _cfa ;case 37:goto _gadc ;case 48:goto _cfc ;case 63:goto _cfa ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _bee ;};goto _bdc ;_cfa :_cbfb =_efe +1;goto _fed ;
_fed :if _efe ++;_efe ==_cbf {goto _eda ;};_ac :switch _eeaa [_efe ]{case 35:goto _cfa ;case 37:goto _cfa ;case 44:goto _cfa ;case 46:goto _cfa ;case 48:goto _cfa ;case 63:goto _cfa ;case 65:goto _dggc ;};goto _ccb ;_dggc :if _efe ++;_efe ==_cbf {goto _ffb ;
};_gdgf :switch _eeaa [_efe ]{case 47:goto _cefa ;case 77:goto _fbdg ;};goto _bgd ;_cefa :if _efe ++;_efe ==_cbf {goto _ggc ;};_ecb :if _eeaa [_efe ]==80{goto _bdcc ;};goto _bgd ;_bdcc :_cbfb =_efe +1;goto _egca ;_egca :if _efe ++;_efe ==_cbf {goto _dfgg ;
};_afg :if _eeaa [_efe ]==65{goto _dggc ;};goto _ccb ;_fbdg :if _efe ++;_efe ==_cbf {goto _acgg ;};_dde :if _eeaa [_efe ]==47{goto _dcgd ;};goto _bgd ;_dcgd :if _efe ++;_efe ==_cbf {goto _deeb ;};_fdf :if _eeaa [_efe ]==80{goto _cfe ;};goto _bgd ;_cfe :if _efe ++;
_efe ==_cbf {goto _efac ;};_egf :if _eeaa [_efe ]==77{goto _bdcc ;};goto _bgd ;_gadc :if _efe ++;_efe ==_cbf {goto _fcb ;};_def :switch _eeaa [_efe ]{case 35:goto _ecea ;case 37:goto _bagb ;case 63:goto _ecea ;};if 48<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _fab ;
};goto _bdc ;_ecea :_cbfb =_efe +1;goto _caca ;_caca :if _efe ++;_efe ==_cbf {goto _fbbb ;};_gef :switch _eeaa [_efe ]{case 35:goto _cfa ;case 37:goto _eeed ;case 44:goto _cfa ;case 46:goto _cfa ;case 48:goto _cfa ;case 63:goto _cfa ;case 65:goto _dggc ;
};goto _ccb ;_eeed :if _efe ++;_efe ==_cbf {goto _dgeg ;};_gacd :switch _eeaa [_efe ]{case 35:goto _bfg ;case 44:goto _bfg ;case 46:goto _bfg ;case 48:goto _bfg ;case 63:goto _bfg ;};goto _bgd ;_bfg :_cbfb =_efe +1;goto _fda ;_fda :if _efe ++;_efe ==_cbf {goto _bgcf ;
};_bgca :switch _eeaa [_efe ]{case 35:goto _bfg ;case 44:goto _bfg ;case 46:goto _bfg ;case 48:goto _bfg ;case 63:goto _bfg ;case 65:goto _dggc ;};goto _ccb ;_bagb :if _efe ++;_efe ==_cbf {goto _dcc ;};_dfaf :if _eeaa [_efe ]==37{goto _bagb ;};if 48<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _fab ;
};goto _bdc ;_fab :_cbfb =_efe +1;_dddc =13;goto _fdfd ;_fdfd :if _efe ++;_efe ==_cbf {goto _ebgc ;};_adgfd :switch _eeaa [_efe ]{case 35:goto _cfa ;case 37:goto _dac ;case 44:goto _cfa ;case 46:goto _cfa ;case 48:goto _feee ;case 63:goto _cfa ;case 65:goto _dggc ;
};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _fab ;};goto _ccb ;_dac :if _efe ++;_efe ==_cbf {goto _agd ;};_gfe :switch _eeaa [_efe ]{case 35:goto _bfg ;case 37:goto _bagb ;case 44:goto _bfg ;case 46:goto _bfg ;case 63:goto _bfg ;};if 48<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _fab ;
};goto _bgd ;_feee :_cbfb =_efe +1;goto _bec ;_bec :if _efe ++;_efe ==_cbf {goto _eceff ;};_daad :switch _eeaa [_efe ]{case 35:goto _cfa ;case 37:goto _feee ;case 44:goto _cfa ;case 46:goto _cfa ;case 48:goto _feee ;case 63:goto _cfa ;case 65:goto _dggc ;
};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _fab ;};goto _ccb ;_cfc :_cbfb =_efe +1;goto _gba ;_gba :if _efe ++;_efe ==_cbf {goto _caea ;};_ddda :switch _eeaa [_efe ]{case 35:goto _cfa ;case 37:goto _feee ;case 44:goto _cfa ;case 46:goto _cfa ;case 48:goto _cfc ;
case 63:goto _cfa ;case 65:goto _dggc ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _bee ;};goto _ccb ;_bee :_cbfb =_efe +1;goto _bddd ;_bddd :if _efe ++;_efe ==_cbf {goto _feae ;};_dfg :switch _eeaa [_efe ]{case 35:goto _cfa ;case 37:goto _fab ;case 44:goto _cfa ;
case 46:goto _cfa ;case 48:goto _cfc ;case 63:goto _cfa ;case 65:goto _dggc ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _bee ;};goto _ccb ;_fcgf :if _efe ++;_efe ==_cbf {goto _gfac ;};_deff :if _eeaa [_efe ]==35{goto _agaa ;};goto _ebcb ;_bfeef :_cbfb =_efe +1;
_dddc =8;goto _defe ;_defe :if _efe ++;_efe ==_cbf {goto _gffb ;};_ged :switch _eeaa [_efe ]{case 35:goto _ecab ;case 37:goto _aaff ;case 48:goto _eff ;case 63:goto _ecab ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _beg ;};goto _bdf ;_ecab :if _efe ++;
_efe ==_cbf {goto _fbe ;};_ecg :switch _eeaa [_efe ]{case 35:goto _ecab ;case 47:goto _dcgc ;case 48:goto _ecab ;case 63:goto _ecab ;};goto _eede ;_aaff :if _efe ++;_efe ==_cbf {goto _dbcf ;};_bga :if _eeaa [_efe ]==37{goto _aaff ;};if 48<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _beg ;
};goto _bdc ;_beg :if _efe ++;_efe ==_cbf {goto _gag ;};_acd :switch _eeaa [_efe ]{case 37:goto _aaff ;case 47:goto _dcgc ;};if 48<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _beg ;};goto _bdc ;_eff :if _efe ++;_efe ==_cbf {goto _fde ;};_febca :switch _eeaa [_efe ]{case 35:goto _ecab ;
case 37:goto _aaff ;case 47:goto _dcgc ;case 48:goto _eff ;case 63:goto _ecab ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _beg ;};goto _eede ;_cdde :_cbfb =_efe +1;goto _aaedf ;_aaedf :if _efe ++;_efe ==_cbf {goto _acae ;};_eceb :switch _eeaa [_efe ]{case 47:goto _cdde ;
case 100:goto _cdde ;case 109:goto _cdde ;case 121:goto _dca ;};goto _cfg ;_dca :if _efe ++;_efe ==_cbf {goto _agdc ;};_bda :if _eeaa [_efe ]==121{goto _cdde ;};goto _bafg ;_bagf :_cbfb =_efe +1;_dddc =2;goto _aeb ;_aeb :if _efe ++;_efe ==_cbf {goto _bgde ;
};_fdab :switch _eeaa [_efe ]{case 35:goto _gdc ;case 37:goto _eeac ;case 47:goto _dcgc ;case 48:goto _ace ;case 63:goto _gdc ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _cbfc ;};goto _debe ;_eeac :if _efe ++;_efe ==_cbf {goto _bccb ;};_fga :switch _eeaa [_efe ]{case 35:goto _gdc ;
case 37:goto _eeac ;case 47:goto _dcgc ;case 48:goto _eeac ;case 63:goto _gdc ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _beg ;};goto _aff ;_ace :if _efe ++;_efe ==_cbf {goto _daf ;};_egcf :switch _eeaa [_efe ]{case 35:goto _gdc ;case 37:goto _eeac ;
case 47:goto _dcgc ;case 48:goto _ace ;case 63:goto _gdc ;};if 49<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _cbfc ;};goto _aff ;_cbfc :if _efe ++;_efe ==_cbf {goto _ccgg ;};_aead :switch _eeaa [_efe ]{case 37:goto _beg ;case 47:goto _dcgc ;};if 48<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _cbfc ;
};goto _bdc ;_fgc :_cbfb =_efe +1;_dddc =20;goto _bbed ;_bbed :if _efe ++;_efe ==_cbf {goto _fcca ;};_efd :switch _eeaa [_efe ]{case 37:goto _beg ;case 47:goto _dcgc ;};if 48<=_eeaa [_efe ]&&_eeaa [_efe ]<=57{goto _cbfc ;};goto _geg ;_fabf :_cbfb =_efe +1;
_dddc =15;goto _dfe ;_dfe :if _efe ++;_efe ==_cbf {goto _cdb ;};_gacde :switch _eeaa [_efe ]{case 58:goto _fabf ;case 65:goto _aca ;case 104:goto _fabf ;case 109:goto _fabf ;case 115:goto _bccc ;};goto _dfa ;_aca :if _efe ++;_efe ==_cbf {goto _cda ;};_fbfc :switch _eeaa [_efe ]{case 47:goto _ega ;
case 77:goto _fggf ;};goto _bdc ;_ega :if _efe ++;_efe ==_cbf {goto _egcg ;};_eec :if _eeaa [_efe ]==80{goto _fabf ;};goto _bdc ;_fggf :if _efe ++;_efe ==_cbf {goto _dgf ;};_dgc :if _eeaa [_efe ]==47{goto _egba ;};goto _bdc ;_egba :if _efe ++;_efe ==_cbf {goto _bfgd ;
};_dee :if _eeaa [_efe ]==80{goto _affd ;};goto _bdc ;_affd :if _efe ++;_efe ==_cbf {goto _ggcc ;};_bfdd :if _eeaa [_efe ]==77{goto _fabf ;};goto _bdc ;_bccc :_cbfb =_efe +1;_dddc =15;goto _cfcb ;_cfcb :if _efe ++;_efe ==_cbf {goto _dcaa ;};_dddcf :switch _eeaa [_efe ]{case 46:goto _cfd ;
case 58:goto _fabf ;case 65:goto _aca ;case 104:goto _fabf ;case 109:goto _fabf ;case 115:goto _bccc ;};goto _dfa ;_cfd :if _efe ++;_efe ==_cbf {goto _dcac ;};_geaag :if _eeaa [_efe ]==48{goto _gec ;};goto _ggd ;_gec :_cbfb =_efe +1;_dddc =15;goto _ebf ;
_ebf :if _efe ++;_efe ==_cbf {goto _bgcg ;};_eaac :switch _eeaa [_efe ]{case 48:goto _egbc ;case 58:goto _fabf ;case 65:goto _aca ;case 104:goto _fabf ;case 109:goto _fabf ;case 115:goto _bccc ;};goto _dfa ;_egbc :_cbfb =_efe +1;_dddc =15;goto _acg ;_acg :if _efe ++;
_efe ==_cbf {goto _ecag ;};_ege :switch _eeaa [_efe ]{case 48:goto _fabf ;case 58:goto _fabf ;case 65:goto _aca ;case 104:goto _fabf ;case 109:goto _fabf ;case 115:goto _bccc ;};goto _dfa ;_gff :_cbfb =_efe +1;_dddc =5;goto _cgga ;_cgga :if _efe ++;_efe ==_cbf {goto _ebfg ;
};_ecef :switch _eeaa [_efe ]{case 35:goto _gdc ;case 37:goto _gdc ;case 47:goto _dcgc ;case 48:goto _gdc ;case 63:goto _gdc ;};goto _gcb ;_gbgfb :_cbfb =_efe +1;_dddc =20;goto _fccf ;_fccf :if _efe ++;_efe ==_cbf {goto _dacb ;};_afc :switch _eeaa [_efe ]{case 47:goto _ega ;
case 77:goto _fggf ;};goto _geg ;_ggbg :if _efe ++;_efe ==_cbf {goto _bff ;};_efa :switch _eeaa [_efe ]{case 43:goto _abb ;case 45:goto _abb ;};goto _geg ;_eba :_cbfb =_efe +1;goto _effe ;_effe :if _efe ++;_efe ==_cbf {goto _eac ;};_abdf :if _eeaa [_efe ]==101{goto _dcdb ;
};goto _geg ;_dcdb :if _efe ++;_efe ==_cbf {goto _fdbd ;};_ecc :if _eeaa [_efe ]==110{goto _gdcf ;};goto _bbe ;_gdcf :if _efe ++;_efe ==_cbf {goto _bgfg ;};_adeb :if _eeaa [_efe ]==101{goto _bafgc ;};goto _bbe ;_bafgc :if _efe ++;_efe ==_cbf {goto _abef ;
};_dbg :if _eeaa [_efe ]==114{goto _fdg ;};goto _bbe ;_fdg :if _efe ++;_efe ==_cbf {goto _dbge ;};_bgdf :if _eeaa [_efe ]==97{goto _gcc ;};goto _bbe ;_gcc :if _efe ++;_efe ==_cbf {goto _gcce ;};_bgec :if _eeaa [_efe ]==108{goto _cbg ;};goto _bbe ;_dbfg :_cbfb =_efe +1;
_dddc =20;goto _gfef ;_gfef :if _efe ++;_efe ==_cbf {goto _gbgc ;};_ceaa :switch _eeaa [_efe ]{case 104:goto _bed ;case 109:goto _bed ;case 115:goto _bed ;};goto _befb ;_befb :if _efe ++;_efe ==_cbf {goto _efc ;};_gbe :if _eeaa [_efe ]==93{goto _egag ;
};goto _befb ;_egag :_cbfb =_efe +1;_dddc =18;goto _aafc ;_gedg :_cbfb =_efe +1;_dddc =16;goto _aafc ;_aafc :if _efe ++;_efe ==_cbf {goto _cec ;};_ddg :if _eeaa [_efe ]==93{goto _egag ;};goto _befb ;_bed :if _efe ++;_efe ==_cbf {goto _ebad ;};_fag :if _eeaa [_efe ]==93{goto _gedg ;
};goto _befb ;_eeaf :if _efe ++;_efe ==_cbf {goto _ebb ;};_egbd :goto _eca ;_egad :_cbfb =_efe +1;_dddc =14;goto _abdg ;_abdg :if _efe ++;_efe ==_cbf {goto _befe ;};_gaca :switch _eeaa [_efe ]{case 47:goto _cdde ;case 58:goto _fabf ;case 65:goto _aca ;
case 100:goto _cdde ;case 104:goto _fabf ;case 109:goto _egad ;case 115:goto _bccc ;case 121:goto _dca ;};goto _cfg ;_daca :if _efe ++;_efe ==_cbf {goto _decg ;};_baff :if _eeaa [_efe ]==121{goto _cdde ;};goto _geg ;_fefe :_ggeb :_bge =34;goto _cff ;_fca :_bge =35;
goto _cff ;_bagfg :_bge =0;goto _cff ;_bdb :_bge =36;goto _cff ;_gdcfc :_bge =37;goto _cff ;_cag :_bge =1;goto _cff ;_abbf :_bge =2;goto _cff ;_eda :_bge =38;goto _cff ;_ffb :_bge =3;goto _cff ;_ggc :_bge =4;goto _cff ;_dfgg :_bge =39;goto _cff ;_acgg :_bge =5;
goto _cff ;_deeb :_bge =6;goto _cff ;_efac :_bge =7;goto _cff ;_fcb :_bge =8;goto _cff ;_fbbb :_bge =40;goto _cff ;_dgeg :_bge =9;goto _cff ;_bgcf :_bge =41;goto _cff ;_dcc :_bge =10;goto _cff ;_ebgc :_bge =42;goto _cff ;_agd :_bge =11;goto _cff ;_eceff :_bge =43;
goto _cff ;_caea :_bge =44;goto _cff ;_feae :_bge =45;goto _cff ;_gfac :_bge =12;goto _cff ;_gffb :_bge =46;goto _cff ;_fbe :_bge =13;goto _cff ;_dbcf :_bge =14;goto _cff ;_gag :_bge =15;goto _cff ;_fde :_bge =16;goto _cff ;_acae :_bge =47;goto _cff ;_agdc :_bge =17;
goto _cff ;_bgde :_bge =48;goto _cff ;_bccb :_bge =18;goto _cff ;_daf :_bge =19;goto _cff ;_ccgg :_bge =20;goto _cff ;_fcca :_bge =49;goto _cff ;_cdb :_bge =50;goto _cff ;_cda :_bge =21;goto _cff ;_egcg :_bge =22;goto _cff ;_dgf :_bge =23;goto _cff ;_bfgd :_bge =24;
goto _cff ;_ggcc :_bge =25;goto _cff ;_dcaa :_bge =51;goto _cff ;_dcac :_bge =26;goto _cff ;_bgcg :_bge =52;goto _cff ;_ecag :_bge =53;goto _cff ;_ebfg :_bge =54;goto _cff ;_dacb :_bge =55;goto _cff ;_bff :_bge =56;goto _cff ;_eac :_bge =57;goto _cff ;
_fdbd :_bge =27;goto _cff ;_bgfg :_bge =28;goto _cff ;_abef :_bge =29;goto _cff ;_dbge :_bge =30;goto _cff ;_gcce :_bge =31;goto _cff ;_gbgc :_bge =58;goto _cff ;_efc :_bge =32;goto _cff ;_cec :_bge =59;goto _cff ;_ebad :_bge =33;goto _cff ;_ebb :_bge =60;
goto _cff ;_befe :_bge =61;goto _cff ;_decg :_bge =62;goto _cff ;_cff :{};if _efe ==_ead {switch _bge {case 35:goto _geg ;case 0:goto _bdc ;case 36:goto _gcda ;case 37:goto _gfg ;case 1:goto _bdc ;case 2:goto _bdc ;case 38:goto _ccb ;case 3:goto _bgd ;
case 4:goto _bgd ;case 39:goto _ccb ;case 5:goto _bgd ;case 6:goto _bgd ;case 7:goto _bgd ;case 8:goto _bdc ;case 40:goto _ccb ;case 9:goto _bgd ;case 41:goto _ccb ;case 10:goto _bdc ;case 42:goto _ccb ;case 11:goto _bgd ;case 43:goto _ccb ;case 44:goto _ccb ;
case 45:goto _ccb ;case 12:goto _ebcb ;case 46:goto _bdf ;case 13:goto _eede ;case 14:goto _bdc ;case 15:goto _bdc ;case 16:goto _eede ;case 47:goto _cfg ;case 17:goto _bafg ;case 48:goto _debe ;case 18:goto _aff ;case 19:goto _aff ;case 20:goto _bdc ;
case 49:goto _geg ;case 50:goto _dfa ;case 21:goto _bdc ;case 22:goto _bdc ;case 23:goto _bdc ;case 24:goto _bdc ;case 25:goto _bdc ;case 51:goto _dfa ;case 26:goto _ggd ;case 52:goto _dfa ;case 53:goto _dfa ;case 54:goto _gcb ;case 55:goto _geg ;case 56:goto _geg ;
case 57:goto _geg ;case 27:goto _bbe ;case 28:goto _bbe ;case 29:goto _bbe ;case 30:goto _bbe ;case 31:goto _bbe ;case 58:goto _geg ;case 32:goto _bdc ;case 59:goto _bdc ;case 33:goto _bbe ;case 60:goto _geg ;case 61:goto _cfg ;case 62:goto _geg ;};};};
if _bgf > 0{copy (_eeaa [0:],_eeaa [_bgf :]);};};_ =_ead ;if _bge ==_aee {_a .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func _gebe (_gda int64 )int64 {if _gda < 0{return -_gda ;};return _gda ;
};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_gd :=Parse (f );if len (_gd )==1{return _efg (v ,_gd [0],false );}else if len (_gd )> 1&&v < 0{return _efg (v ,_gd [1],true );
}else if len (_gd )> 2&&v ==0{return _efg (v ,_gd [2],false );};return _efg (v ,_gd [0],false );};const _ca ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";


// AddToken adds a format token to the format.
func (_b *Format )AddToken (t FmtType ,l []byte ){if _b ._dc {_b ._dc =false ;return ;};switch t {case FmtTypeDecimal :_b ._cce =true ;case FmtTypeUnderscore :_b ._dc =true ;case FmtTypeText :_b .Whole =append (_b .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_b .Whole =append (_b .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_b ._fb =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_edc :=range l {if _b .IsExponential {_b .Exponent =append (_b .Exponent ,Token {Type :t ,Literal :_edc });
}else if !_b ._cce {_b .Whole =append (_b .Whole ,Token {Type :t ,Literal :_edc });}else {_b .Fractional =append (_b .Fractional ,Token {Type :t ,Literal :_edc });};};case FmtTypeDigitOptThousands :_b ._cdf =true ;case FmtTypeFraction :_gg :=_cd .Split (string (l ),"\u002f");
if len (_gg )==2{_b ._de =true ;_b ._fd ,_ =_fg .ParseInt (_gg [1],10,64);for _ ,_aa :=range _gg [1]{if _aa =='?'||_aa =='0'{_b ._fe ++;};};};default:_a .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};func (_eg FmtType )String ()string {if _eg >=FmtType (len (_ed )-1){return _e .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_eg );};return _ca [_ed [_eg ]:_ed [_eg +1]];};func _db (_cgf int64 ,_aag Format )[]byte {if !_aag .IsExponential ||len (_aag .Exponent )==0{return nil ;
};_geeg :=_fg .AppendInt (nil ,_gebe (_cgf ),10);_dga :=make ([]byte ,0,len (_geeg )+2);_dga =append (_dga ,'E');if _cgf >=0{_dga =append (_dga ,'+');}else {_dga =append (_dga ,'-');_cgf *=-1;};_cef :=0;_bgc :for _baa :=len (_aag .Exponent )-1;_baa >=0;
_baa --{_be :=len (_geeg )-1-_cef ;_cdd :=_aag .Exponent [_baa ];switch _cdd .Type {case FmtTypeDigit :if _be >=0{_dga =append (_dga ,_geeg [_be ]);_cef ++;}else {_dga =append (_dga ,'0');};case FmtTypeDigitOpt :if _be >=0{_dga =append (_dga ,_geeg [_be ]);
_cef ++;}else {for _dff :=_baa ;_dff >=0;_dff --{_bfd :=_aag .Exponent [_dff ];if _bfd .Type ==FmtTypeLiteral {_dga =append (_dga ,_bfd .Literal );};};break _bgc ;};case FmtTypeLiteral :_dga =append (_dga ,_cdd .Literal );default:_a .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_cdd );
};};if _cef < len (_geeg ){_dga =append (_dga ,_geeg [len (_geeg )-_cef -1:_cef -1]...);};_aae (_dga [2:]);return _dga ;};const _gdac int =34;

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_de bool ;_fb bool ;_fff bool ;_cdf bool ;_dc bool ;_cce bool ;_fd int64 ;_fe int ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _d .Abs (v )>=_cc ||_d .Abs (v )<=_ff &&v !=0{return _ec (v );};_fcd :=make ([]byte ,0,15);_fcd =_fg .AppendFloat (_fcd ,v ,'f',-1,64);if len (_fcd )> 11{_bcc :=_fcd [11]-'0';if _bcc >=5&&_bcc <=9{_fcd [10]++;_fcd =_fcd [0:11];
_fcd =_cb (_fcd );};_fcd =_fcd [0:11];}else if len (_fcd )==11{if _fcd [len (_fcd )-1]=='9'{_fcd [len (_fcd )-1]++;_fcd =_cb (_fcd );};};_fcd =_cea (_fcd );return string (_fcd );};func IsNumber (data string )(_dade bool ){_fee ,_dgg ,_gdd :=0,0,len (data );
_eeg :=len (data );_cbc ,_eee ,_faae :=0,0,0;_ =_eee ;_ =_faae ;_ =_cbc ;{_fee =_dcb ;_cbc =0;_eee =0;_faae =0;};{if _dgg ==_gdd {goto _aec ;};switch _fee {case 0:goto _efb ;case 1:goto _dggg ;case 2:goto _gge ;case 3:goto _dcd ;case 4:goto _ddd ;case 5:goto _gcf ;
case 6:goto _cga ;case 7:goto _cac ;};goto _cedd ;_cabc :_eee =_dgg ;_dgg --;{_dade =false ;};goto _egc ;_adgf :_eee =_dgg ;_dgg --;{_dade =_eee ==len (data );};goto _egc ;_cggb :_eee =_dgg ;_dgg --;{_dade =_eee ==len (data );};goto _egc ;_efgc :switch _faae {case 2:{_dgg =(_eee )-1;
_dade =_eee ==len (data );};case 3:{_dgg =(_eee )-1;_dade =false ;};};goto _egc ;_egc :_cbc =0;if _dgg ++;_dgg ==_gdd {goto _dbb ;};_efb :_cbc =_dgg ;switch data [_dgg ]{case 43:goto _febd ;case 45:goto _febd ;};if 48<=data [_dgg ]&&data [_dgg ]<=57{goto _cbb ;
};goto _aba ;_aba :if _dgg ++;_dgg ==_gdd {goto _gfa ;};_dggg :goto _aba ;_febd :if _dgg ++;_dgg ==_gdd {goto _bfdc ;};_gge :if 48<=data [_dgg ]&&data [_dgg ]<=57{goto _cbb ;};goto _aba ;_cbb :if _dgg ++;_dgg ==_gdd {goto _abag ;};_dcd :if data [_dgg ]==46{goto _gdf ;
};if 48<=data [_dgg ]&&data [_dgg ]<=57{goto _cbb ;};goto _aba ;_gdf :if _dgg ++;_dgg ==_gdd {goto _fcc ;};_ddd :if 48<=data [_dgg ]&&data [_dgg ]<=57{goto _gcdc ;};goto _aba ;_gcdc :if _dgg ++;_dgg ==_gdd {goto _afd ;};_gcf :if data [_dgg ]==69{goto _gaff ;
};if 48<=data [_dgg ]&&data [_dgg ]<=57{goto _gcdc ;};goto _aba ;_gaff :if _dgg ++;_dgg ==_gdd {goto _gad ;};_cga :switch data [_dgg ]{case 43:goto _ced ;case 45:goto _ced ;};goto _aba ;_ced :_eee =_dgg +1;_faae =3;goto _deg ;_bag :_eee =_dgg +1;_faae =2;
goto _deg ;_deg :if _dgg ++;_dgg ==_gdd {goto _cdc ;};_cac :if 48<=data [_dgg ]&&data [_dgg ]<=57{goto _bag ;};goto _aba ;_cedd :_dbb :_fee =0;goto _aec ;_gfa :_fee =1;goto _aec ;_bfdc :_fee =2;goto _aec ;_abag :_fee =3;goto _aec ;_fcc :_fee =4;goto _aec ;
_afd :_fee =5;goto _aec ;_gad :_fee =6;goto _aec ;_cdc :_fee =7;goto _aec ;_aec :{};if _dgg ==_eeg {switch _fee {case 1:goto _cabc ;case 2:goto _cabc ;case 3:goto _adgf ;case 4:goto _cabc ;case 5:goto _cggb ;case 6:goto _cabc ;case 7:goto _efgc ;};};};
if _fee ==_aee {return false ;};return ;};var _ed =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};const _ff =1e-10;const _eea int =0;func (_ebef *Lexer )nextFmt (){_ebef ._dddd =append (_ebef ._dddd ,_ebef ._gfab );_ebef ._gfab =Format {}};
func _df (_bgg ,_ee float64 ,_gea Format )[]byte {if len (_gea .Whole )==0{return nil ;};_geb :=_fc .Date (1899,12,30,0,0,0,0,_fc .UTC );_gee :=_geb .Add (_fc .Duration (_ee *float64 (24*_fc .Hour )));_gee =_cfec (_gee );_faa :=_fg .AppendFloat (nil ,_bgg ,'f',-1,64);
_ag :=make ([]byte ,0,len (_faa ));_ccg :=0;_fcg :=1;_deb :for _dfd :=len (_gea .Whole )-1;_dfd >=0;_dfd --{_ea :=len (_faa )-1-_ccg ;_bf :=_gea .Whole [_dfd ];switch _bf .Type {case FmtTypeDigit :if _ea >=0{_ag =append (_ag ,_faa [_ea ]);_ccg ++;_fcg =_dfd ;
}else {_ag =append (_ag ,'0');};case FmtTypeDigitOpt :if _ea >=0{_ag =append (_ag ,_faa [_ea ]);_ccg ++;_fcg =_dfd ;}else {for _eaf :=_dfd ;_eaf >=0;_eaf --{_dg :=_gea .Whole [_eaf ];if _dg .Type ==FmtTypeLiteral {_ag =append (_ag ,_dg .Literal );};};break _deb ;
};case FmtTypeDollar :for _eafd :=_ccg ;_eafd < len (_faa );_eafd ++{_ag =append (_ag ,_faa [len (_faa )-1-_eafd ]);_ccg ++;};_ag =append (_ag ,'$');case FmtTypeComma :if !_gea ._cdf {_ag =append (_ag ,',');};case FmtTypeLiteral :_ag =append (_ag ,_bf .Literal );
case FmtTypeDate :_ag =append (_ag ,_aae (_cgg (_gee ,_bf .DateTime ))...);case FmtTypeTime :_ag =append (_ag ,_aae (_fffd (_gee ,_ee ,_bf .DateTime ))...);default:_a .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_bf );
};};_abda :=_aae (_ag );if _ccg < len (_faa )&&(_ccg !=0||_gea ._cce ){_ccd :=len (_faa )-_ccg ;_bc :=make ([]byte ,len (_abda )+_ccd );copy (_bc ,_abda [0:_fcg ]);copy (_bc [_fcg :],_faa [0:]);copy (_bc [_fcg +_ccd :],_abda [_fcg :]);_abda =_bc ;};if _gea ._cdf {_ebc :=_g .Buffer {};
_ga :=0;for _adg :=len (_abda )-1;_adg >=0;_adg --{if !(_abda [_adg ]>='0'&&_abda [_adg ]<='9'){_ga ++;}else {break ;};};for _gac :=0;_gac < len (_abda );_gac ++{_gbg :=(len (_abda )-_gac -_ga );if _gbg %3==0&&_gbg !=0&&_gac !=0{_ebc .WriteByte (',');};
_ebc .WriteByte (_abda [_gac ]);};_abda =_ebc .Bytes ();};return _abda ;};func _cfec (_ffdc _fc .Time )_fc .Time {_ffdc =_ffdc .UTC ();return _fc .Date (_ffdc .Year (),_ffdc .Month (),_ffdc .Day (),_ffdc .Hour (),_ffdc .Minute (),_ffdc .Second (),_ffdc .Nanosecond (),_fc .Local );
};func Parse (s string )[]Format {_geaa :=Lexer {};_geaa .Lex (_cd .NewReader (s ));_geaa ._dddd =append (_geaa ._dddd ,_geaa ._gfab );return _geaa ._dddd ;};const _daa int =-1;const _cc =1e11;

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;const _dcb int =0;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ba :=Parse (f );var _ef Format ;if len (_ba )==1{_ef =_ba [0];}else if len (_ba )==4{_ef =_ba [3];};_baf :=false ;for _ ,_abd :=range _ef .Whole {if _abd .Type ==FmtTypeText {_baf =true ;};};if !_baf {return v ;
};_ae :=_g .Buffer {};for _ ,_abfe :=range _ef .Whole {switch _abfe .Type {case FmtTypeLiteral :_ae .WriteByte (_abfe .Literal );case FmtTypeText :_ae .WriteString (v );};};return _ae .String ();};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_gc ,_ :=_fg .ParseFloat (v ,64);return Number (_gc ,f );};return String (v ,f );};const _ebg int =34;

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};const _gafd int =34;func _bfa (_cab ,_dada float64 ,_ade Format )[]byte {if len (_ade .Fractional )==0{return nil ;};_aaf :=_fg .AppendFloat (nil ,_cab ,'f',-1,64);if len (_aaf )> 2{_aaf =_aaf [2:];
}else {_aaf =nil ;};_fbf :=make ([]byte ,0,len (_aaf ));_fbf =append (_fbf ,'.');_eab :=0;_gebc :for _dcg :=0;_dcg < len (_ade .Fractional );_dcg ++{_cee :=_dcg ;_aef :=_ade .Fractional [_dcg ];switch _aef .Type {case FmtTypeDigit :if _cee < len (_aaf ){_fbf =append (_fbf ,_aaf [_cee ]);
_eab ++;}else {_fbf =append (_fbf ,'0');};case FmtTypeDigitOpt :if _cee >=0{_fbf =append (_fbf ,_aaf [_cee ]);_eab ++;}else {break _gebc ;};case FmtTypeLiteral :_fbf =append (_fbf ,_aef .Literal );default:_a .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_aef );
};};return _fbf ;};type Lexer struct{_gfab Format ;_dddd []Format ;};func _cea (_eed []byte )[]byte {_aga :=len (_eed );_egg :=false ;_gaf :=false ;for _dfb :=len (_eed )-1;_dfb >=0;_dfb --{if _eed [_dfb ]=='0'&&!_gaf &&!_egg {_aga =_dfb ;}else if _eed [_dfb ]=='.'{_egg =true ;
}else {_gaf =true ;};};if _egg &&_gaf {if _eed [_aga -1]=='.'{_aga --;};return _eed [0:_aga ];};return _eed ;};const _aee int =-1;func _fffd (_fgg _fc .Time ,_ggg float64 ,_ggb string )[]byte {_ccf :=[]byte {};_eaa :=0;for _fbb :=0;_fbb < len (_ggb );_fbb ++{var _bef string ;
if _ggb [_fbb ]==':'{_bef =string (_ggb [_eaa :_fbb ]);_eaa =_fbb +1;}else if _fbb ==len (_ggb )-1{_bef =string (_ggb [_eaa :_fbb +1]);}else {continue ;};switch _bef {case "\u0064":_ccf =_fgg .AppendFormat (_ccf ,"\u0032");case "\u0068":_ccf =_fgg .AppendFormat (_ccf ,"\u0033");
case "\u0068\u0068":_ccf =_fgg .AppendFormat (_ccf ,"\u0031\u0035");case "\u006d":_ccf =_fgg .AppendFormat (_ccf ,"\u0034");case "\u006d\u006d":_ccf =_fgg .AppendFormat (_ccf ,"\u0030\u0034");case "\u0073":_ccf =_fgg .Round (_fc .Second ).AppendFormat (_ccf ,"\u0035");
case "\u0073\u002e\u0030":_ccf =_fgg .Round (_fc .Second /10).AppendFormat (_ccf ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_ccf =_fgg .Round (_fc .Second /100).AppendFormat (_ccf ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_ccf =_fgg .Round (_fc .Second /1000).AppendFormat (_ccf ,"\u0035\u002e\u00300\u0030");
case "\u0073\u0073":_ccf =_fgg .Round (_fc .Second ).AppendFormat (_ccf ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_ccf =_fgg .Round (_fc .Second /10).AppendFormat (_ccf ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_ccf =_fgg .Round (_fc .Second /100).AppendFormat (_ccf ,"\u0030\u0035\u002e0\u0030");
case "\u0073\u0073\u002e\u0030\u0030\u0030":_ccf =_fgg .Round (_fc .Second /1000).AppendFormat (_ccf ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_ccf =_fgg .AppendFormat (_ccf ,"\u0050\u004d");case "\u005b\u0068\u005d":_ccf =_fg .AppendInt (_ccf ,int64 (_ggg *24),10);
case "\u005b\u006d\u005d":_ccf =_fg .AppendInt (_ccf ,int64 (_ggg *24*60),10);case "\u005b\u0073\u005d":_ccf =_fg .AppendInt (_ccf ,int64 (_ggg *24*60*60),10);case "":default:_a .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_bef );
};if _ggb [_fbb ]==':'{_ccf =append (_ccf ,':');};};return _ccf ;};func _ec (_fce float64 )string {_gbgf :=_fg .FormatFloat (_fce ,'E',-1,64);_bfe :=_fg .FormatFloat (_fce ,'E',5,64);if len (_gbgf )< len (_bfe ){return _fg .FormatFloat (_fce ,'E',2,64);
};return _bfe ;};const _bbd int =0;func _cgg (_fcgc _fc .Time ,_dbf string )[]byte {_bfee :=[]byte {};_bb :=0;for _cf :=0;_cf < len (_dbf );_cf ++{var _aea string ;if _dbf [_cf ]=='/'{_aea =string (_dbf [_bb :_cf ]);_bb =_cf +1;}else if _cf ==len (_dbf )-1{_aea =string (_dbf [_bb :_cf +1]);
}else {continue ;};switch _aea {case "\u0079\u0079":_bfee =_fcgc .AppendFormat (_bfee ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_bfee =_fcgc .AppendFormat (_bfee ,"\u0032\u0030\u0030\u0036");case "\u006d":_bfee =_fcgc .AppendFormat (_bfee ,"\u0031");
case "\u006d\u006d":_bfee =_fcgc .AppendFormat (_bfee ,"\u0030\u0031");case "\u006d\u006d\u006d":_bfee =_fcgc .AppendFormat (_bfee ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_bfee =_fcgc .AppendFormat (_bfee ,"\u004aa\u006e\u0075\u0061\u0072\u0079");
case "\u006d\u006d\u006dm\u006d":switch _fcgc .Month (){case _fc .January ,_fc .July ,_fc .June :_bfee =append (_bfee ,'J');case _fc .February :_bfee =append (_bfee ,'M');case _fc .March ,_fc .May :_bfee =append (_bfee ,'M');case _fc .April ,_fc .August :_bfee =append (_bfee ,'A');
case _fc .September :_bfee =append (_bfee ,'S');case _fc .October :_bfee =append (_bfee ,'O');case _fc .November :_bfee =append (_bfee ,'N');case _fc .December :_bfee =append (_bfee ,'D');};case "\u0064":_bfee =_fcgc .AppendFormat (_bfee ,"\u0032");case "\u0064\u0064":_bfee =_fcgc .AppendFormat (_bfee ,"\u0030\u0032");
case "\u0064\u0064\u0064":_bfee =_fcgc .AppendFormat (_bfee ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_bfee =_fcgc .AppendFormat (_bfee ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_a .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_aea );
};if _dbf [_cf ]=='/'{_bfee =append (_bfee ,'/');};};return _bfee ;};func _aae (_abe []byte )[]byte {for _ge :=0;_ge < len (_abe )/2;_ge ++{_feb :=len (_abe )-1-_ge ;_abe [_ge ],_abe [_feb ]=_abe [_feb ],_abe [_ge ];};return _abe ;};