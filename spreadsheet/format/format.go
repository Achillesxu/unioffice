//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_d "bytes";_bb "fmt";_aa "github.com/unidoc/unioffice/common/logger";_bd "io";_c "math";_e "strconv";_f "strings";_a "time";);

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _ced (_ccb []byte )[]byte {for _efe :=0;_efe < len (_ccb )/2;_efe ++{_adc :=len (_ccb )-1-_efe ;_ccb [_efe ],_ccb [_adc ]=_ccb [_adc ],_ccb [_efe ];};return _ccb ;};func (_ee FmtType )String ()string {if _ee >=FmtType (len (_ea )-1){return _bb .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_ee );
};return _ec [_ea [_ee ]:_ea [_ee +1]];};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_dc :=Parse (f );if len (_dc )==1{return _fa (v ,_dc [0],false );}else if len (_dc )> 1&&v < 0{return _fa (v ,_dc [1],true );
}else if len (_dc )> 2&&v ==0{return _fa (v ,_dc [2],false );};return _fa (v ,_dc [0],false );};func _egg (_bff ,_dac float64 ,_aga Format )[]byte {if len (_aga .Fractional )==0{return nil ;};_ccbg :=_e .AppendFloat (nil ,_bff ,'f',-1,64);if len (_ccbg )> 2{_ccbg =_ccbg [2:];
}else {_ccbg =nil ;};_gcg :=make ([]byte ,0,len (_ccbg ));_gcg =append (_gcg ,'.');_efc :=0;_egc :for _eddf :=0;_eddf < len (_aga .Fractional );_eddf ++{_fdf :=_eddf ;_dad :=_aga .Fractional [_eddf ];switch _dad .Type {case FmtTypeDigit :if _fdf < len (_ccbg ){_gcg =append (_gcg ,_ccbg [_fdf ]);
_efc ++;}else {_gcg =append (_gcg ,'0');};case FmtTypeDigitOpt :if _fdf >=0{_gcg =append (_gcg ,_ccbg [_fdf ]);_efc ++;}else {break _egc ;};case FmtTypeLiteral :_gcg =append (_gcg ,_dad .Literal );default:_aa .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_dad );
};};return _gcg ;};const _bg =1e11;const _ggf int =34;const _ec ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";
func _bfcf (_fff _a .Time ,_abg string )[]byte {_dfc :=[]byte {};_afa :=0;for _bdf :=0;_bdf < len (_abg );_bdf ++{var _fafe string ;if _abg [_bdf ]=='/'{_fafe =string (_abg [_afa :_bdf ]);_afa =_bdf +1;}else if _bdf ==len (_abg )-1{_fafe =string (_abg [_afa :_bdf +1]);
}else {continue ;};switch _fafe {case "\u0079\u0079":_dfc =_fff .AppendFormat (_dfc ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_dfc =_fff .AppendFormat (_dfc ,"\u0032\u0030\u0030\u0036");case "\u006d":_dfc =_fff .AppendFormat (_dfc ,"\u0031");case "\u006d\u006d":_dfc =_fff .AppendFormat (_dfc ,"\u0030\u0031");
case "\u006d\u006d\u006d":_dfc =_fff .AppendFormat (_dfc ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_dfc =_fff .AppendFormat (_dfc ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _fff .Month (){case _a .January ,_a .July ,_a .June :_dfc =append (_dfc ,'J');
case _a .February :_dfc =append (_dfc ,'M');case _a .March ,_a .May :_dfc =append (_dfc ,'M');case _a .April ,_a .August :_dfc =append (_dfc ,'A');case _a .September :_dfc =append (_dfc ,'S');case _a .October :_dfc =append (_dfc ,'O');case _a .November :_dfc =append (_dfc ,'N');
case _a .December :_dfc =append (_dfc ,'D');};case "\u0064":_dfc =_fff .AppendFormat (_dfc ,"\u0032");case "\u0064\u0064":_dfc =_fff .AppendFormat (_dfc ,"\u0030\u0032");case "\u0064\u0064\u0064":_dfc =_fff .AppendFormat (_dfc ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_dfc =_fff .AppendFormat (_dfc ,"\u004d\u006f\u006e\u0064\u0061\u0079");
default:_aa .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_fafe );};if _abg [_bdf ]=='/'{_dfc =append (_dfc ,'/');};};return _dfc ;};const _aaa int =-1;
func _gac (_eac ,_cca float64 ,_df Format )[]byte {if len (_df .Whole )==0{return nil ;};_ab :=_a .Date (1899,12,30,0,0,0,0,_a .UTC );_fe :=_ab .Add (_a .Duration (_cca *float64 (24*_a .Hour )));_fe =_beb (_fe );_dcf :=_e .AppendFloat (nil ,_eac ,'f',-1,64);
_ega :=make ([]byte ,0,len (_dcf ));_ed :=0;_ccf :=1;_fcd :for _cg :=len (_df .Whole )-1;_cg >=0;_cg --{_gd :=len (_dcf )-1-_ed ;_egb :=_df .Whole [_cg ];switch _egb .Type {case FmtTypeDigit :if _gd >=0{_ega =append (_ega ,_dcf [_gd ]);_ed ++;_ccf =_cg ;
}else {_ega =append (_ega ,'0');};case FmtTypeDigitOpt :if _gd >=0{_ega =append (_ega ,_dcf [_gd ]);_ed ++;_ccf =_cg ;}else {for _ecd :=_cg ;_ecd >=0;_ecd --{_fag :=_df .Whole [_ecd ];if _fag .Type ==FmtTypeLiteral {_ega =append (_ega ,_fag .Literal );
};};break _fcd ;};case FmtTypeDollar :for _edd :=_ed ;_edd < len (_dcf );_edd ++{_ega =append (_ega ,_dcf [len (_dcf )-1-_edd ]);_ed ++;};_ega =append (_ega ,'$');case FmtTypeComma :if !_df ._de {_ega =append (_ega ,',');};case FmtTypeLiteral :_ega =append (_ega ,_egb .Literal );
case FmtTypeDate :_ega =append (_ega ,_ced (_bfcf (_fe ,_egb .DateTime ))...);case FmtTypeTime :_ega =append (_ega ,_ced (_abf (_fe ,_cca ,_egb .DateTime ))...);default:_aa .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_egb );
};};_gec :=_ced (_ega );if _ed < len (_dcf )&&(_ed !=0||_df ._ge ){_dcg :=len (_dcf )-_ed ;_ffe :=make ([]byte ,len (_gec )+_dcg );copy (_ffe ,_gec [0:_ccf ]);copy (_ffe [_ccf :],_dcf [0:]);copy (_ffe [_ccf +_dcg :],_gec [_ccf :]);_gec =_ffe ;};if _df ._de {_aae :=_d .Buffer {};
_bad :=0;for _gge :=len (_gec )-1;_gge >=0;_gge --{if !(_gec [_gge ]>='0'&&_gec [_gge ]<='9'){_bad ++;}else {break ;};};for _add :=0;_add < len (_gec );_add ++{_ag :=(len (_gec )-_add -_bad );if _ag %3==0&&_ag !=0&&_add !=0{_aae .WriteByte (',');};_aae .WriteByte (_gec [_add ]);
};_gec =_aae .Bytes ();};return _gec ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_g bool ;_fd bool ;_ce bool ;_de bool ;_ba bool ;_ge bool ;_af int64 ;_ga int ;};func (_dgg *Lexer )Lex (r _bd .Reader ){_fdff ,_ggbd ,_agc :=0,0,0;_cf :=-1;_db ,_dgda ,_egf :=0,0,0;
_ =_dgda ;_ =_egf ;_fda :=1;_ =_fda ;_bacf :=make ([]byte ,4096);_geb :=false ;for !_geb {_gbc :=0;if _db > 0{_gbc =_ggbd -_db ;};_ggbd =0;_dcd ,_dga :=r .Read (_bacf [_gbc :]);if _dcd ==0||_dga !=nil {_geb =true ;};_agc =_dcd +_gbc ;if _agc < len (_bacf ){_cf =_agc ;
};{_fdff =_ggf ;_db =0;_dgda =0;_egf =0;};{if _ggbd ==_agc {goto _bge ;};switch _fdff {case 34:goto _dcgc ;case 35:goto _fbf ;case 0:goto _bfe ;case 36:goto _abfg ;case 37:goto _gbg ;case 1:goto _efcg ;case 2:goto _gfa ;case 38:goto _aaef ;case 3:goto _ddbb ;
case 4:goto _def ;case 39:goto _bba ;case 5:goto _aee ;case 6:goto _dfg ;case 7:goto _eeac ;case 8:goto _fge ;case 40:goto _ggc ;case 9:goto _gecf ;case 41:goto _eda ;case 10:goto _bea ;case 42:goto _cccee ;case 11:goto _ffb ;case 43:goto _ddfd ;case 44:goto _dca ;
case 45:goto _bef ;case 12:goto _acbg ;case 46:goto _bfa ;case 13:goto _cbe ;case 14:goto _abc ;case 15:goto _ggad ;case 16:goto _ecba ;case 47:goto _fef ;case 17:goto _agdf ;case 48:goto _edec ;case 18:goto _gbb ;case 19:goto _agcb ;case 20:goto _cedg ;
case 49:goto _eagf ;case 50:goto _dgde ;case 21:goto _efb ;case 22:goto _dfa ;case 23:goto _abca ;case 24:goto _ccde ;case 25:goto _aab ;case 51:goto _bbe ;case 26:goto _fecf ;case 52:goto _aaaa ;case 53:goto _fdfg ;case 54:goto _cfd ;case 55:goto _cgfe ;
case 56:goto _dea ;case 57:goto _cfg ;case 27:goto _ecdc ;case 28:goto _dadf ;case 29:goto _fceac ;case 30:goto _fgbc ;case 31:goto _ceba ;case 58:goto _abad ;case 32:goto _fada ;case 59:goto _aeg ;case 33:goto _fffc ;case 60:goto _fbb ;case 61:goto _eeeg ;
case 62:goto _bddd ;};goto _bfgd ;_cfc :switch _egf {case 2:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeDigit ,nil );};case 3:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_ggbd =(_dgda )-1;};case 8:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypePercent ,nil );
};case 13:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeFraction ,_bacf [_db :_dgda ]);};case 14:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeDate ,_bacf [_db :_dgda ]);};case 15:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeTime ,_bacf [_db :_dgda ]);
};case 16:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeTime ,_bacf [_db :_dgda ]);};case 18:{_ggbd =(_dgda )-1;};case 20:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeLiteral ,_bacf [_db :_dgda ]);};case 21:{_ggbd =(_dgda )-1;_dgg ._ecc .AddToken (FmtTypeLiteral ,_bacf [_db +1:_dgda -1]);
};};goto _gbe ;_ecb :_ggbd =(_dgda )-1;{_dgg ._ecc .AddToken (FmtTypeFraction ,_bacf [_db :_dgda ]);};goto _gbe ;_dgfg :_ggbd =(_dgda )-1;{_dgg ._ecc .AddToken (FmtTypeDigitOpt ,nil );};goto _gbe ;_acfg :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeDigitOptThousands ,nil );
};goto _gbe ;_adg :_ggbd =(_dgda )-1;{_dgg ._ecc .AddToken (FmtTypePercent ,nil );};goto _gbe ;_affe :_ggbd =(_dgda )-1;{_dgg ._ecc .AddToken (FmtTypeDate ,_bacf [_db :_dgda ]);};goto _gbe ;_adb :_ggbd =(_dgda )-1;{_dgg ._ecc .AddToken (FmtTypeDigit ,nil );
};goto _gbe ;_ded :_ggbd =(_dgda )-1;{_dgg ._ecc .AddToken (FmtTypeTime ,_bacf [_db :_dgda ]);};goto _gbe ;_bgf :_ggbd =(_dgda )-1;{_dgg ._ecc .AddToken (FmtTypeLiteral ,_bacf [_db :_dgda ]);};goto _gbe ;_afb :_dgda =_ggbd +1;{_dgg ._ecc ._ce =true ;};
goto _gbe ;_deb :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeLiteral ,_bacf [_db :_dgda ]);};goto _gbe ;_ace :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeDollar ,nil );};goto _gbe ;_aeb :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeComma ,nil );};
goto _gbe ;_edb :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeDecimal ,nil );};goto _gbe ;_gdcef :_dgda =_ggbd +1;{_dgg .nextFmt ();};goto _gbe ;_dedf :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeText ,nil );};goto _gbe ;_ggg :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeUnderscore ,nil );
};goto _gbe ;_egd :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypeLiteral ,_bacf [_db :_dgda ]);};goto _gbe ;_dae :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypeLiteral ,_bacf [_db +1:_dgda -1]);};goto _gbe ;_agde :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypeDigitOpt ,nil );
};goto _gbe ;_ggac :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypeFraction ,_bacf [_db :_dgda ]);};goto _gbe ;_fca :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypePercent ,nil );};goto _gbe ;_dge :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypeDate ,_bacf [_db :_dgda ]);
};goto _gbe ;_ffdb :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypeDigit ,nil );};goto _gbe ;_be :_dgda =_ggbd ;_ggbd --;{_dgg ._ecc .AddToken (FmtTypeTime ,_bacf [_db :_dgda ]);};goto _gbe ;_gcga :_dgda =_ggbd ;_ggbd --;{};goto _gbe ;_eee :_dgda =_ggbd +1;
{_dgg ._ecc .IsExponential =true ;};goto _gbe ;_fceg :_dgda =_ggbd +1;{_dgg ._ecc .AddToken (FmtTypeLiteral ,_bacf [_db +1:_dgda ]);};goto _gbe ;_gbe :_db =0;if _ggbd ++;_ggbd ==_agc {goto _adga ;};_dcgc :_db =_ggbd ;switch _bacf [_ggbd ]{case 34:goto _fdcg ;
case 35:goto _feg ;case 36:goto _ace ;case 37:goto _cea ;case 44:goto _aeb ;case 46:goto _edb ;case 47:goto _cdgb ;case 48:goto _bbc ;case 58:goto _dacd ;case 59:goto _gdcef ;case 63:goto _gbce ;case 64:goto _dedf ;case 65:goto _ffde ;case 69:goto _fafc ;
case 71:goto _acce ;case 91:goto _egbc ;case 92:goto _gaad ;case 95:goto _ggg ;case 100:goto _cdgb ;case 104:goto _dacd ;case 109:goto _eegcc ;case 115:goto _cde ;case 121:goto _babc ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _age ;};goto _deb ;
_fdcg :_dgda =_ggbd +1;_egf =20;goto _fbg ;_fbg :if _ggbd ++;_ggbd ==_agc {goto _agfd ;};_fbf :if _bacf [_ggbd ]==34{goto _ccce ;};goto _cge ;_cge :if _ggbd ++;_ggbd ==_agc {goto _fcbe ;};_bfe :if _bacf [_ggbd ]==34{goto _ccce ;};goto _cge ;_ccce :_dgda =_ggbd +1;
_egf =21;goto _ddf ;_ddf :if _ggbd ++;_ggbd ==_agc {goto _geg ;};_abfg :if _bacf [_ggbd ]==34{goto _cge ;};goto _dae ;_feg :_dgda =_ggbd +1;_egf =3;goto _acg ;_acg :if _ggbd ++;_ggbd ==_agc {goto _cdec ;};_gbg :switch _bacf [_ggbd ]{case 35:goto _cef ;
case 37:goto _cef ;case 44:goto _fbgf ;case 47:goto _bbg ;case 48:goto _cef ;case 63:goto _cef ;};goto _agde ;_cef :if _ggbd ++;_ggbd ==_agc {goto _gbfe ;};_efcg :switch _bacf [_ggbd ]{case 35:goto _cef ;case 37:goto _cef ;case 47:goto _bbg ;case 48:goto _cef ;
case 63:goto _cef ;};goto _cfc ;_bbg :if _ggbd ++;_ggbd ==_agc {goto _fdce ;};_gfa :switch _bacf [_ggbd ]{case 35:goto _eag ;case 37:goto _bab ;case 48:goto _ffef ;case 63:goto _eag ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _aaeg ;};goto _cfc ;
_eag :_dgda =_ggbd +1;goto _dde ;_dde :if _ggbd ++;_ggbd ==_agc {goto _abb ;};_aaef :switch _bacf [_ggbd ]{case 35:goto _eag ;case 37:goto _eag ;case 44:goto _eag ;case 46:goto _eag ;case 48:goto _eag ;case 63:goto _eag ;case 65:goto _ggab ;};goto _ggac ;
_ggab :if _ggbd ++;_ggbd ==_agc {goto _cdga ;};_ddbb :switch _bacf [_ggbd ]{case 47:goto _afc ;case 77:goto _abe ;};goto _ecb ;_afc :if _ggbd ++;_ggbd ==_agc {goto _fbag ;};_def :if _bacf [_ggbd ]==80{goto _dfe ;};goto _ecb ;_dfe :_dgda =_ggbd +1;goto _cbg ;
_cbg :if _ggbd ++;_ggbd ==_agc {goto _edf ;};_bba :if _bacf [_ggbd ]==65{goto _ggab ;};goto _ggac ;_abe :if _ggbd ++;_ggbd ==_agc {goto _cda ;};_aee :if _bacf [_ggbd ]==47{goto _fcb ;};goto _ecb ;_fcb :if _ggbd ++;_ggbd ==_agc {goto _fgd ;};_dfg :if _bacf [_ggbd ]==80{goto _dgfgf ;
};goto _ecb ;_dgfgf :if _ggbd ++;_ggbd ==_agc {goto _acbc ;};_eeac :if _bacf [_ggbd ]==77{goto _dfe ;};goto _ecb ;_bab :if _ggbd ++;_ggbd ==_agc {goto _ebg ;};_fge :switch _bacf [_ggbd ]{case 35:goto _adcdf ;case 37:goto _bfgg ;case 63:goto _adcdf ;};if 48<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ede ;
};goto _cfc ;_adcdf :_dgda =_ggbd +1;goto _ggee ;_ggee :if _ggbd ++;_ggbd ==_agc {goto _agg ;};_ggc :switch _bacf [_ggbd ]{case 35:goto _eag ;case 37:goto _fac ;case 44:goto _eag ;case 46:goto _eag ;case 48:goto _eag ;case 63:goto _eag ;case 65:goto _ggab ;
};goto _ggac ;_fac :if _ggbd ++;_ggbd ==_agc {goto _baf ;};_gecf :switch _bacf [_ggbd ]{case 35:goto _fdcgc ;case 44:goto _fdcgc ;case 46:goto _fdcgc ;case 48:goto _fdcgc ;case 63:goto _fdcgc ;};goto _ecb ;_fdcgc :_dgda =_ggbd +1;goto _bddc ;_bddc :if _ggbd ++;
_ggbd ==_agc {goto _egdc ;};_eda :switch _bacf [_ggbd ]{case 35:goto _fdcgc ;case 44:goto _fdcgc ;case 46:goto _fdcgc ;case 48:goto _fdcgc ;case 63:goto _fdcgc ;case 65:goto _ggab ;};goto _ggac ;_bfgg :if _ggbd ++;_ggbd ==_agc {goto _ggce ;};_bea :if _bacf [_ggbd ]==37{goto _bfgg ;
};if 48<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ede ;};goto _cfc ;_ede :_dgda =_ggbd +1;_egf =13;goto _cba ;_cba :if _ggbd ++;_ggbd ==_agc {goto _eeae ;};_cccee :switch _bacf [_ggbd ]{case 35:goto _eag ;case 37:goto _ddc ;case 44:goto _eag ;case 46:goto _eag ;
case 48:goto _bed ;case 63:goto _eag ;case 65:goto _ggab ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ede ;};goto _ggac ;_ddc :if _ggbd ++;_ggbd ==_agc {goto _bde ;};_ffb :switch _bacf [_ggbd ]{case 35:goto _fdcgc ;case 37:goto _bfgg ;case 44:goto _fdcgc ;
case 46:goto _fdcgc ;case 63:goto _fdcgc ;};if 48<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ede ;};goto _ecb ;_bed :_dgda =_ggbd +1;goto _fec ;_fec :if _ggbd ++;_ggbd ==_agc {goto _eadc ;};_ddfd :switch _bacf [_ggbd ]{case 35:goto _eag ;case 37:goto _bed ;
case 44:goto _eag ;case 46:goto _eag ;case 48:goto _bed ;case 63:goto _eag ;case 65:goto _ggab ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ede ;};goto _ggac ;_ffef :_dgda =_ggbd +1;goto _dgc ;_dgc :if _ggbd ++;_ggbd ==_agc {goto _eeaa ;};_dca :switch _bacf [_ggbd ]{case 35:goto _eag ;
case 37:goto _bed ;case 44:goto _eag ;case 46:goto _eag ;case 48:goto _ffef ;case 63:goto _eag ;case 65:goto _ggab ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _aaeg ;};goto _ggac ;_aaeg :_dgda =_ggbd +1;goto _cbab ;_cbab :if _ggbd ++;_ggbd ==_agc {goto _gfd ;
};_bef :switch _bacf [_ggbd ]{case 35:goto _eag ;case 37:goto _ede ;case 44:goto _eag ;case 46:goto _eag ;case 48:goto _ffef ;case 63:goto _eag ;case 65:goto _ggab ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _aaeg ;};goto _ggac ;_fbgf :if _ggbd ++;
_ggbd ==_agc {goto _fgeb ;};_acbg :if _bacf [_ggbd ]==35{goto _acfg ;};goto _dgfg ;_cea :_dgda =_ggbd +1;_egf =8;goto _dgfge ;_dgfge :if _ggbd ++;_ggbd ==_agc {goto _eba ;};_bfa :switch _bacf [_ggbd ]{case 35:goto _agf ;case 37:goto _afga ;case 48:goto _fffg ;
case 63:goto _agf ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _fafg ;};goto _fca ;_agf :if _ggbd ++;_ggbd ==_agc {goto _eeee ;};_cbe :switch _bacf [_ggbd ]{case 35:goto _agf ;case 47:goto _bbg ;case 48:goto _agf ;case 63:goto _agf ;};goto _adg ;_afga :if _ggbd ++;
_ggbd ==_agc {goto _cbb ;};_abc :if _bacf [_ggbd ]==37{goto _afga ;};if 48<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _fafg ;};goto _cfc ;_fafg :if _ggbd ++;_ggbd ==_agc {goto _cga ;};_ggad :switch _bacf [_ggbd ]{case 37:goto _afga ;case 47:goto _bbg ;};
if 48<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _fafg ;};goto _cfc ;_fffg :if _ggbd ++;_ggbd ==_agc {goto _dbg ;};_ecba :switch _bacf [_ggbd ]{case 35:goto _agf ;case 37:goto _afga ;case 47:goto _bbg ;case 48:goto _fffg ;case 63:goto _agf ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _fafg ;
};goto _adg ;_cdgb :_dgda =_ggbd +1;goto _aba ;_aba :if _ggbd ++;_ggbd ==_agc {goto _gfg ;};_fef :switch _bacf [_ggbd ]{case 47:goto _cdgb ;case 100:goto _cdgb ;case 109:goto _cdgb ;case 121:goto _fcea ;};goto _dge ;_fcea :if _ggbd ++;_ggbd ==_agc {goto _fgf ;
};_agdf :if _bacf [_ggbd ]==121{goto _cdgb ;};goto _affe ;_bbc :_dgda =_ggbd +1;_egf =2;goto _fabf ;_fabf :if _ggbd ++;_ggbd ==_agc {goto _fbc ;};_edec :switch _bacf [_ggbd ]{case 35:goto _cef ;case 37:goto _cccef ;case 47:goto _bbg ;case 48:goto _caf ;
case 63:goto _cef ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ccd ;};goto _ffdb ;_cccef :if _ggbd ++;_ggbd ==_agc {goto _gee ;};_gbb :switch _bacf [_ggbd ]{case 35:goto _cef ;case 37:goto _cccef ;case 47:goto _bbg ;case 48:goto _cccef ;case 63:goto _cef ;
};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _fafg ;};goto _adb ;_caf :if _ggbd ++;_ggbd ==_agc {goto _bdg ;};_agcb :switch _bacf [_ggbd ]{case 35:goto _cef ;case 37:goto _cccef ;case 47:goto _bbg ;case 48:goto _caf ;case 63:goto _cef ;};if 49<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ccd ;
};goto _adb ;_ccd :if _ggbd ++;_ggbd ==_agc {goto _fadb ;};_cedg :switch _bacf [_ggbd ]{case 37:goto _fafg ;case 47:goto _bbg ;};if 48<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ccd ;};goto _cfc ;_age :_dgda =_ggbd +1;_egf =20;goto _fbaa ;_fbaa :if _ggbd ++;
_ggbd ==_agc {goto _bdb ;};_eagf :switch _bacf [_ggbd ]{case 37:goto _fafg ;case 47:goto _bbg ;};if 48<=_bacf [_ggbd ]&&_bacf [_ggbd ]<=57{goto _ccd ;};goto _egd ;_dacd :_dgda =_ggbd +1;_egf =15;goto _ecbag ;_ecbag :if _ggbd ++;_ggbd ==_agc {goto _addg ;
};_dgde :switch _bacf [_ggbd ]{case 58:goto _dacd ;case 65:goto _bfef ;case 104:goto _dacd ;case 109:goto _dacd ;case 115:goto _cde ;};goto _be ;_bfef :if _ggbd ++;_ggbd ==_agc {goto _acfe ;};_efb :switch _bacf [_ggbd ]{case 47:goto _ggbg ;case 77:goto _bbd ;
};goto _cfc ;_ggbg :if _ggbd ++;_ggbd ==_agc {goto _eaed ;};_dfa :if _bacf [_ggbd ]==80{goto _dacd ;};goto _cfc ;_bbd :if _ggbd ++;_ggbd ==_agc {goto _fgg ;};_abca :if _bacf [_ggbd ]==47{goto _cgf ;};goto _cfc ;_cgf :if _ggbd ++;_ggbd ==_agc {goto _ggfe ;
};_ccde :if _bacf [_ggbd ]==80{goto _geae ;};goto _cfc ;_geae :if _ggbd ++;_ggbd ==_agc {goto _cdf ;};_aab :if _bacf [_ggbd ]==77{goto _dacd ;};goto _cfc ;_cde :_dgda =_ggbd +1;_egf =15;goto _cedb ;_cedb :if _ggbd ++;_ggbd ==_agc {goto _ddfb ;};_bbe :switch _bacf [_ggbd ]{case 46:goto _fcf ;
case 58:goto _dacd ;case 65:goto _bfef ;case 104:goto _dacd ;case 109:goto _dacd ;case 115:goto _cde ;};goto _be ;_fcf :if _ggbd ++;_ggbd ==_agc {goto _cbac ;};_fecf :if _bacf [_ggbd ]==48{goto _afef ;};goto _ded ;_afef :_dgda =_ggbd +1;_egf =15;goto _cagc ;
_cagc :if _ggbd ++;_ggbd ==_agc {goto _ddbc ;};_aaaa :switch _bacf [_ggbd ]{case 48:goto _fceb ;case 58:goto _dacd ;case 65:goto _bfef ;case 104:goto _dacd ;case 109:goto _dacd ;case 115:goto _cde ;};goto _be ;_fceb :_dgda =_ggbd +1;_egf =15;goto _fad ;
_fad :if _ggbd ++;_ggbd ==_agc {goto _fgee ;};_fdfg :switch _bacf [_ggbd ]{case 48:goto _dacd ;case 58:goto _dacd ;case 65:goto _bfef ;case 104:goto _dacd ;case 109:goto _dacd ;case 115:goto _cde ;};goto _be ;_gbce :_dgda =_ggbd +1;_egf =5;goto _eacc ;
_eacc :if _ggbd ++;_ggbd ==_agc {goto _bgbb ;};_cfd :switch _bacf [_ggbd ]{case 35:goto _cef ;case 37:goto _cef ;case 47:goto _bbg ;case 48:goto _cef ;case 63:goto _cef ;};goto _gcga ;_ffde :_dgda =_ggbd +1;_egf =20;goto _bbf ;_bbf :if _ggbd ++;_ggbd ==_agc {goto _eeec ;
};_cgfe :switch _bacf [_ggbd ]{case 47:goto _ggbg ;case 77:goto _bbd ;};goto _egd ;_fafc :if _ggbd ++;_ggbd ==_agc {goto _gebd ;};_dea :switch _bacf [_ggbd ]{case 43:goto _eee ;case 45:goto _eee ;};goto _egd ;_acce :_dgda =_ggbd +1;goto _fee ;_fee :if _ggbd ++;
_ggbd ==_agc {goto _bgbba ;};_cfg :if _bacf [_ggbd ]==101{goto _fgaf ;};goto _egd ;_fgaf :if _ggbd ++;_ggbd ==_agc {goto _bec ;};_ecdc :if _bacf [_ggbd ]==110{goto _bee ;};goto _bgf ;_bee :if _ggbd ++;_ggbd ==_agc {goto _ggfg ;};_dadf :if _bacf [_ggbd ]==101{goto _agea ;
};goto _bgf ;_agea :if _ggbd ++;_ggbd ==_agc {goto _dgaa ;};_fceac :if _bacf [_ggbd ]==114{goto _dedb ;};goto _bgf ;_dedb :if _ggbd ++;_ggbd ==_agc {goto _bfgc ;};_fgbc :if _bacf [_ggbd ]==97{goto _gbfa ;};goto _bgf ;_gbfa :if _ggbd ++;_ggbd ==_agc {goto _ffed ;
};_ceba :if _bacf [_ggbd ]==108{goto _afb ;};goto _bgf ;_egbc :_dgda =_ggbd +1;_egf =20;goto _gbfd ;_gbfd :if _ggbd ++;_ggbd ==_agc {goto _afae ;};_abad :switch _bacf [_ggbd ]{case 104:goto _cafc ;case 109:goto _cafc ;case 115:goto _cafc ;};goto _gggc ;
_gggc :if _ggbd ++;_ggbd ==_agc {goto _bbge ;};_fada :if _bacf [_ggbd ]==93{goto _fece ;};goto _gggc ;_fece :_dgda =_ggbd +1;_egf =18;goto _eabg ;_ggd :_dgda =_ggbd +1;_egf =16;goto _eabg ;_eabg :if _ggbd ++;_ggbd ==_agc {goto _bafg ;};_aeg :if _bacf [_ggbd ]==93{goto _fece ;
};goto _gggc ;_cafc :if _ggbd ++;_ggbd ==_agc {goto _eaa ;};_fffc :if _bacf [_ggbd ]==93{goto _ggd ;};goto _gggc ;_gaad :if _ggbd ++;_ggbd ==_agc {goto _gebg ;};_fbb :goto _fceg ;_eegcc :_dgda =_ggbd +1;_egf =14;goto _dcfa ;_dcfa :if _ggbd ++;_ggbd ==_agc {goto _fbe ;
};_eeeg :switch _bacf [_ggbd ]{case 47:goto _cdgb ;case 58:goto _dacd ;case 65:goto _bfef ;case 100:goto _cdgb ;case 104:goto _dacd ;case 109:goto _eegcc ;case 115:goto _cde ;case 121:goto _fcea ;};goto _dge ;_babc :if _ggbd ++;_ggbd ==_agc {goto _fdg ;
};_bddd :if _bacf [_ggbd ]==121{goto _cdgb ;};goto _egd ;_bfgd :_adga :_fdff =34;goto _bge ;_agfd :_fdff =35;goto _bge ;_fcbe :_fdff =0;goto _bge ;_geg :_fdff =36;goto _bge ;_cdec :_fdff =37;goto _bge ;_gbfe :_fdff =1;goto _bge ;_fdce :_fdff =2;goto _bge ;
_abb :_fdff =38;goto _bge ;_cdga :_fdff =3;goto _bge ;_fbag :_fdff =4;goto _bge ;_edf :_fdff =39;goto _bge ;_cda :_fdff =5;goto _bge ;_fgd :_fdff =6;goto _bge ;_acbc :_fdff =7;goto _bge ;_ebg :_fdff =8;goto _bge ;_agg :_fdff =40;goto _bge ;_baf :_fdff =9;
goto _bge ;_egdc :_fdff =41;goto _bge ;_ggce :_fdff =10;goto _bge ;_eeae :_fdff =42;goto _bge ;_bde :_fdff =11;goto _bge ;_eadc :_fdff =43;goto _bge ;_eeaa :_fdff =44;goto _bge ;_gfd :_fdff =45;goto _bge ;_fgeb :_fdff =12;goto _bge ;_eba :_fdff =46;goto _bge ;
_eeee :_fdff =13;goto _bge ;_cbb :_fdff =14;goto _bge ;_cga :_fdff =15;goto _bge ;_dbg :_fdff =16;goto _bge ;_gfg :_fdff =47;goto _bge ;_fgf :_fdff =17;goto _bge ;_fbc :_fdff =48;goto _bge ;_gee :_fdff =18;goto _bge ;_bdg :_fdff =19;goto _bge ;_fadb :_fdff =20;
goto _bge ;_bdb :_fdff =49;goto _bge ;_addg :_fdff =50;goto _bge ;_acfe :_fdff =21;goto _bge ;_eaed :_fdff =22;goto _bge ;_fgg :_fdff =23;goto _bge ;_ggfe :_fdff =24;goto _bge ;_cdf :_fdff =25;goto _bge ;_ddfb :_fdff =51;goto _bge ;_cbac :_fdff =26;goto _bge ;
_ddbc :_fdff =52;goto _bge ;_fgee :_fdff =53;goto _bge ;_bgbb :_fdff =54;goto _bge ;_eeec :_fdff =55;goto _bge ;_gebd :_fdff =56;goto _bge ;_bgbba :_fdff =57;goto _bge ;_bec :_fdff =27;goto _bge ;_ggfg :_fdff =28;goto _bge ;_dgaa :_fdff =29;goto _bge ;
_bfgc :_fdff =30;goto _bge ;_ffed :_fdff =31;goto _bge ;_afae :_fdff =58;goto _bge ;_bbge :_fdff =32;goto _bge ;_bafg :_fdff =59;goto _bge ;_eaa :_fdff =33;goto _bge ;_gebg :_fdff =60;goto _bge ;_fbe :_fdff =61;goto _bge ;_fdg :_fdff =62;goto _bge ;_bge :{};
if _ggbd ==_cf {switch _fdff {case 35:goto _egd ;case 0:goto _cfc ;case 36:goto _dae ;case 37:goto _agde ;case 1:goto _cfc ;case 2:goto _cfc ;case 38:goto _ggac ;case 3:goto _ecb ;case 4:goto _ecb ;case 39:goto _ggac ;case 5:goto _ecb ;case 6:goto _ecb ;
case 7:goto _ecb ;case 8:goto _cfc ;case 40:goto _ggac ;case 9:goto _ecb ;case 41:goto _ggac ;case 10:goto _cfc ;case 42:goto _ggac ;case 11:goto _ecb ;case 43:goto _ggac ;case 44:goto _ggac ;case 45:goto _ggac ;case 12:goto _dgfg ;case 46:goto _fca ;case 13:goto _adg ;
case 14:goto _cfc ;case 15:goto _cfc ;case 16:goto _adg ;case 47:goto _dge ;case 17:goto _affe ;case 48:goto _ffdb ;case 18:goto _adb ;case 19:goto _adb ;case 20:goto _cfc ;case 49:goto _egd ;case 50:goto _be ;case 21:goto _cfc ;case 22:goto _cfc ;case 23:goto _cfc ;
case 24:goto _cfc ;case 25:goto _cfc ;case 51:goto _be ;case 26:goto _ded ;case 52:goto _be ;case 53:goto _be ;case 54:goto _gcga ;case 55:goto _egd ;case 56:goto _egd ;case 57:goto _egd ;case 27:goto _bgf ;case 28:goto _bgf ;case 29:goto _bgf ;case 30:goto _bgf ;
case 31:goto _bgf ;case 58:goto _egd ;case 32:goto _cfc ;case 59:goto _cfc ;case 33:goto _bgf ;case 60:goto _egd ;case 61:goto _dge ;case 62:goto _egd ;};};};if _db > 0{copy (_bacf [0:],_bacf [_db :]);};};_ =_cf ;if _fdff ==_aecb {_aa .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");
};};func _eedd (_ece []byte )[]byte {_fce :=len (_ece );_ffd :=false ;_fgaa :=false ;for _fba :=len (_ece )-1;_fba >=0;_fba --{if _ece [_fba ]=='0'&&!_fgaa &&!_ffd {_fce =_fba ;}else if _ece [_fba ]=='.'{_ffd =true ;}else {_fgaa =true ;};};if _ffd &&_fgaa {if _ece [_fce -1]=='.'{_fce --;
};return _ece [0:_fce ];};return _ece ;};const _ggb int =0;func _beb (_cccg _a .Time )_a .Time {_cccg =_cccg .UTC ();return _a .Date (_cccg .Year (),_cccg .Month (),_cccg .Day (),_cccg .Hour (),_cccg .Minute (),_cccg .Second (),_cccg .Nanosecond (),_a .Local );
};

// FmtType is the type of a format token.
//
//go:generate stringer -type=FmtType
type FmtType byte ;func Parse (s string )[]Format {_bdd :=Lexer {};_bdd .Lex (_f .NewReader (s ));_bdd ._egac =append (_bdd ._egac ,_bdd ._ecc );return _bdd ._egac ;};func _agd (_eefe []byte )[]byte {for _dd :=len (_eefe )-1;_dd > 0;_dd --{if _eefe [_dd ]=='9'+1{_eefe [_dd ]='0';
if _eefe [_dd -1]=='.'{_dd --;};_eefe [_dd -1]++;};};if _eefe [0]=='9'+1{_eefe [0]='0';copy (_eefe [1:],_eefe [0:]);_eefe [0]='1';};return _eefe ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _c .Abs (v )>=_bg ||_c .Abs (v )<=_ad &&v !=0{return _aaee (v );};_fde :=make ([]byte ,0,15);_fde =_e .AppendFloat (_fde ,v ,'f',-1,64);if len (_fde )> 11{_ebde :=_fde [11]-'0';if _ebde >=5&&_ebde <=9{_fde [10]++;
_fde =_fde [0:11];_fde =_agd (_fde );};_fde =_fde [0:11];}else if len (_fde )==11{if _fde [len (_fde )-1]=='9'{_fde [len (_fde )-1]++;_fde =_agd (_fde );};};_fde =_eedd (_fde );return string (_fde );};const _gdce int =34;func (_ddd *Lexer )nextFmt (){_ddd ._egac =append (_ddd ._egac ,_ddd ._ecc );
_ddd ._ecc =Format {}};

// AddToken adds a format token to the format.
func (_gc *Format )AddToken (t FmtType ,l []byte ){if _gc ._ba {_gc ._ba =false ;return ;};switch t {case FmtTypeDecimal :_gc ._ge =true ;case FmtTypeUnderscore :_gc ._ba =true ;case FmtTypeText :_gc .Whole =append (_gc .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_gc .Whole =append (_gc .Whole ,Token {Type :t ,DateTime :string (l )});
case FmtTypePercent :_gc ._fd =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_eaf :=range l {if _gc .IsExponential {_gc .Exponent =append (_gc .Exponent ,Token {Type :t ,Literal :_eaf });
}else if !_gc ._ge {_gc .Whole =append (_gc .Whole ,Token {Type :t ,Literal :_eaf });}else {_gc .Fractional =append (_gc .Fractional ,Token {Type :t ,Literal :_eaf });};};case FmtTypeDigitOptThousands :_gc ._de =true ;case FmtTypeFraction :_ef :=_f .Split (string (l ),"\u002f");
if len (_ef )==2{_gc ._g =true ;_gc ._af ,_ =_e .ParseInt (_ef [1],10,64);for _ ,_fb :=range _ef [1]{if _fb =='?'||_fb =='0'{_gc ._ga ++;};};};default:_aa .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );
};};const _ad =1e-10;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);


// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_ca :=Parse (f );var _eab Format ;if len (_ca )==1{_eab =_ca [0];}else if len (_ca )==4{_eab =_ca [3];};_gf :=false ;for _ ,_dcc :=range _eab .Whole {if _dcc .Type ==FmtTypeText {_gf =true ;};};if !_gf {return v ;
};_bgb :=_d .Buffer {};for _ ,_ff :=range _eab .Whole {switch _ff .Type {case FmtTypeLiteral :_bgb .WriteByte (_ff .Literal );case FmtTypeText :_bgb .WriteString (v );};};return _bgb .String ();};func IsNumber (data string )(_aec bool ){_abd ,_gaab ,_ade :=0,0,len (data );
_cdgd :=len (data );_ceb ,_dgf ,_eca :=0,0,0;_ =_dgf ;_ =_eca ;_ =_ceb ;{_abd =_aefa ;_ceb =0;_dgf =0;_eca =0;};{if _gaab ==_ade {goto _eegc ;};switch _abd {case 0:goto _fffdb ;case 1:goto _gfe ;case 2:goto _gcb ;case 3:goto _cce ;case 4:goto _dgb ;case 5:goto _bca ;
case 6:goto _feb ;case 7:goto _gbf ;};goto _abgc ;_aag :_dgf =_gaab ;_gaab --;{_aec =false ;};goto _ddb ;_aecc :_dgf =_gaab ;_gaab --;{_aec =_dgf ==len (data );};goto _ddb ;_fffd :_dgf =_gaab ;_gaab --;{_aec =_dgf ==len (data );};goto _ddb ;_cdb :switch _eca {case 2:{_gaab =(_dgf )-1;
_aec =_dgf ==len (data );};case 3:{_gaab =(_dgf )-1;_aec =false ;};};goto _ddb ;_ddb :_ceb =0;if _gaab ++;_gaab ==_ade {goto _eea ;};_fffdb :_ceb =_gaab ;switch data [_gaab ]{case 43:goto _bdc ;case 45:goto _bdc ;};if 48<=data [_gaab ]&&data [_gaab ]<=57{goto _aefb ;
};goto _aca ;_aca :if _gaab ++;_gaab ==_ade {goto _cbd ;};_gfe :goto _aca ;_bdc :if _gaab ++;_gaab ==_ade {goto _edc ;};_gcb :if 48<=data [_gaab ]&&data [_gaab ]<=57{goto _aefb ;};goto _aca ;_aefb :if _gaab ++;_gaab ==_ade {goto _fdc ;};_cce :if data [_gaab ]==46{goto _dce ;
};if 48<=data [_gaab ]&&data [_gaab ]<=57{goto _aefb ;};goto _aca ;_dce :if _gaab ++;_gaab ==_ade {goto _afg ;};_dgb :if 48<=data [_gaab ]&&data [_gaab ]<=57{goto _acf ;};goto _aca ;_acf :if _gaab ++;_gaab ==_ade {goto _dgfd ;};_bca :if data [_gaab ]==69{goto _acc ;
};if 48<=data [_gaab ]&&data [_gaab ]<=57{goto _acf ;};goto _aca ;_acc :if _gaab ++;_gaab ==_ade {goto _ggag ;};_feb :switch data [_gaab ]{case 43:goto _adcd ;case 45:goto _adcd ;};goto _aca ;_adcd :_dgf =_gaab +1;_eca =3;goto _fgb ;_ead :_dgf =_gaab +1;
_eca =2;goto _fgb ;_fgb :if _gaab ++;_gaab ==_ade {goto _ecg ;};_gbf :if 48<=data [_gaab ]&&data [_gaab ]<=57{goto _ead ;};goto _aca ;_abgc :_eea :_abd =0;goto _eegc ;_cbd :_abd =1;goto _eegc ;_edc :_abd =2;goto _eegc ;_fdc :_abd =3;goto _eegc ;_afg :_abd =4;
goto _eegc ;_dgfd :_abd =5;goto _eegc ;_ggag :_abd =6;goto _eegc ;_ecg :_abd =7;goto _eegc ;_eegc :{};if _gaab ==_cdgd {switch _abd {case 1:goto _aag ;case 2:goto _aag ;case 3:goto _aecc ;case 4:goto _aag ;case 5:goto _fffd ;case 6:goto _aag ;case 7:goto _cdb ;
};};};if _abd ==_aecb {return false ;};return ;};func _abf (_dfd _a .Time ,_cdg float64 ,_gga string )[]byte {_acb :=[]byte {};_fcee :=0;for _gdc :=0;_gdc < len (_gga );_gdc ++{var _bfg string ;if _gga [_gdc ]==':'{_bfg =string (_gga [_fcee :_gdc ]);_fcee =_gdc +1;
}else if _gdc ==len (_gga )-1{_bfg =string (_gga [_fcee :_gdc +1]);}else {continue ;};switch _bfg {case "\u0064":_acb =_dfd .AppendFormat (_acb ,"\u0032");case "\u0068":_acb =_dfd .AppendFormat (_acb ,"\u0033");case "\u0068\u0068":_acb =_dfd .AppendFormat (_acb ,"\u0031\u0035");
case "\u006d":_acb =_dfd .AppendFormat (_acb ,"\u0034");case "\u006d\u006d":_acb =_dfd .AppendFormat (_acb ,"\u0030\u0034");case "\u0073":_acb =_dfd .Round (_a .Second ).AppendFormat (_acb ,"\u0035");case "\u0073\u002e\u0030":_acb =_dfd .Round (_a .Second /10).AppendFormat (_acb ,"\u0035\u002e\u0030");
case "\u0073\u002e\u0030\u0030":_acb =_dfd .Round (_a .Second /100).AppendFormat (_acb ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_acb =_dfd .Round (_a .Second /1000).AppendFormat (_acb ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_acb =_dfd .Round (_a .Second ).AppendFormat (_acb ,"\u0030\u0035");
case "\u0073\u0073\u002e\u0030":_acb =_dfd .Round (_a .Second /10).AppendFormat (_acb ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_acb =_dfd .Round (_a .Second /100).AppendFormat (_acb ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_acb =_dfd .Round (_a .Second /1000).AppendFormat (_acb ,"\u0030\u0035\u002e\u0030\u0030\u0030");
case "\u0041\u004d\u002fP\u004d":_acb =_dfd .AppendFormat (_acb ,"\u0050\u004d");case "\u005b\u0068\u005d":_acb =_e .AppendInt (_acb ,int64 (_cdg *24),10);case "\u005b\u006d\u005d":_acb =_e .AppendInt (_acb ,int64 (_cdg *24*60),10);case "\u005b\u0073\u005d":_acb =_e .AppendInt (_acb ,int64 (_cdg *24*60*60),10);
case "":default:_aa .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_bfg );};if _gga [_gdc ]==':'{_acb =append (_acb ,':');};};return _acb ;
};func _aaee (_eed float64 )string {_aef :=_e .FormatFloat (_eed ,'E',-1,64);_dacc :=_e .FormatFloat (_eed ,'E',5,64);if len (_aef )< len (_dacc ){return _e .FormatFloat (_eed ,'E',2,64);};return _dacc ;};var _ea =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};
const _geaf int =34;const _aecb int =-1;const _aefa int =0;type Lexer struct{_ecc Format ;_egac []Format ;};func _bfc (_bag int64 )int64 {if _bag < 0{return -_bag ;};return _bag ;};func _agab (_aff int64 ,_cb Format )[]byte {if !_cb .IsExponential ||len (_cb .Exponent )==0{return nil ;
};_bcd :=_e .AppendInt (nil ,_bfc (_aff ),10);_ebd :=make ([]byte ,0,len (_bcd )+2);_ebd =append (_ebd ,'E');if _aff >=0{_ebd =append (_ebd ,'+');}else {_ebd =append (_ebd ,'-');_aff *=-1;};_afe :=0;_fga :for _faf :=len (_cb .Exponent )-1;_faf >=0;_faf --{_gdf :=len (_bcd )-1-_afe ;
_fafd :=_cb .Exponent [_faf ];switch _fafd .Type {case FmtTypeDigit :if _gdf >=0{_ebd =append (_ebd ,_bcd [_gdf ]);_afe ++;}else {_ebd =append (_ebd ,'0');};case FmtTypeDigitOpt :if _gdf >=0{_ebd =append (_ebd ,_bcd [_gdf ]);_afe ++;}else {for _ccbe :=_faf ;
_ccbe >=0;_ccbe --{_cag :=_cb .Exponent [_ccbe ];if _cag .Type ==FmtTypeLiteral {_ebd =append (_ebd ,_cag .Literal );};};break _fga ;};case FmtTypeLiteral :_ebd =append (_ebd ,_fafd .Literal );default:_aa .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_fafd );
};};if _afe < len (_bcd ){_ebd =append (_ebd ,_bcd [len (_bcd )-_afe -1:_afe -1]...);};_ced (_ebd [2:]);return _ebd ;};const _eeg int =0;

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_eae ,_ :=_e .ParseFloat (v ,64);return Number (_eae ,f );};return String (v ,f );};func _fa (_ac float64 ,_dg Format ,_fc bool )string {if _dg ._ce {return NumberGeneric (_ac );};_bf :=make ([]byte ,0,20);
_ged :=_c .Signbit (_ac );_cac :=_c .Abs (_ac );_aea :=int64 (0);_eef :=int64 (0);if _dg .IsExponential {for _cac >=10{_eef ++;_cac /=10;};for _cac < 1{_eef --;_cac *=10;};}else if _dg ._fd {_cac *=100;}else if _dg ._g {if _dg ._af ==0{_eg :=_c .Pow (10,float64 (_dg ._ga ));
_gg ,_gb :=1.0,1.0;_ =_gg ;for _cd :=1.0;_cd < _eg ;_cd ++{_ ,_eabe :=_c .Modf (_cac *float64 (_cd ));if _eabe < _gb {_gb =_eabe ;_gg =_cd ;if _eabe ==0{break ;};};};_dg ._af =int64 (_gg );};_aea =int64 (_cac *float64 (_dg ._af )+0.5);if len (_dg .Whole )> 0&&_aea > _dg ._af {_aea =int64 (_cac *float64 (_dg ._af ))%_dg ._af ;
_cac -=float64 (_aea )/float64 (_dg ._af );}else {_cac -=float64 (_aea )/float64 (_dg ._af );if _c .Abs (_cac )< 1{_eb :=true ;for _ ,_gag :=range _dg .Whole {if _gag .Type ==FmtTypeDigitOpt {continue ;};if _gag .Type ==FmtTypeLiteral &&_gag .Literal ==' '{continue ;
};_eb =false ;};if _eb {_dg .Whole =nil ;};};};};_cab :=1;for _ ,_dgd :=range _dg .Fractional {if _dgd .Type ==FmtTypeDigit ||_dgd .Type ==FmtTypeDigitOpt {_cab ++;};};_cac +=5*_c .Pow10 (-_cab );_da ,_gea :=_c .Modf (_cac );_bf =append (_bf ,_gac (_da ,_ac ,_dg )...);
_bf =append (_bf ,_egg (_gea ,_ac ,_dg )...);_bf =append (_bf ,_agab (_eef ,_dg )...);if _dg ._g {_bf =_e .AppendInt (_bf ,_aea ,10);_bf =append (_bf ,'/');_bf =_e .AppendInt (_bf ,_dg ._af ,10);};if !_fc &&_ged {return "\u002d"+string (_bf );};return string (_bf );
};