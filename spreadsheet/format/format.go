//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_ff "bytes";_da "fmt";_gf "github.com/unidoc/unioffice/common/logger";_f "io";_g "math";_c "strconv";_ee "strings";_e "time";);func _dd (_eef int64 ,_fba Format )[]byte {if !_fba .IsExponential ||len (_fba .Exponent )==0{return nil ;};_dcc :=_c .AppendInt (nil ,_ebc (_eef ),10);_cff :=make ([]byte ,0,len (_dcc )+2);_cff =append (_cff ,'E');if _eef >=0{_cff =append (_cff ,'+');}else {_cff =append (_cff ,'-');_eef *=-1;};_gec :=0;_ba :for _cac :=len (_fba .Exponent )-1;_cac >=0;_cac --{_ggb :=len (_dcc )-1-_gec ;_cec :=_fba .Exponent [_cac ];switch _cec .Type {case FmtTypeDigit :if _ggb >=0{_cff =append (_cff ,_dcc [_ggb ]);_gec ++;}else {_cff =append (_cff ,'0');};case FmtTypeDigitOpt :if _ggb >=0{_cff =append (_cff ,_dcc [_ggb ]);_gec ++;}else {for _eac :=_cac ;_eac >=0;_eac --{_geb :=_fba .Exponent [_eac ];if _geb .Type ==FmtTypeLiteral {_cff =append (_cff ,_geb .Literal );};};break _ba ;};case FmtTypeLiteral :_cff =append (_cff ,_cec .Literal );default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_cec );};};if _gec < len (_dcc ){_cff =append (_cff ,_dcc [len (_dcc )-_gec -1:_gec -1]...);};_ag (_cff [2:]);return _cff ;};func _feda (_abc _e .Time )_e .Time {_abc =_abc .UTC ();return _e .Date (_abc .Year (),_abc .Month (),_abc .Day (),_abc .Hour (),_abc .Minute (),_abc .Second (),_abc .Nanosecond (),_e .Local );};const _ggef int =0;func _eag (_gga []byte )[]byte {for _fca :=len (_gga )-1;_fca > 0;_fca --{if _gga [_fca ]=='9'+1{_gga [_fca ]='0';if _gga [_fca -1]=='.'{_fca --;};_gga [_fca -1]++;};};if _gga [0]=='9'+1{_gga [0]='0';copy (_gga [1:],_gga [0:]);_gga [0]='1';};return _gga ;};func _ag (_ca []byte )[]byte {for _gb :=0;_gb < len (_ca )/2;_gb ++{_bd :=len (_ca )-1-_gb ;_ca [_gb ],_ca [_bd ]=_ca [_bd ],_ca [_gb ];};return _ca ;};func _cbd (_fdg ,_gge float64 ,_fb Format )[]byte {if len (_fb .Fractional )==0{return nil ;};_bda :=_c .AppendFloat (nil ,_fdg ,'f',-1,64);if len (_bda )> 2{_bda =_bda [2:];}else {_bda =nil ;};_bdg :=make ([]byte ,0,len (_bda ));_bdg =append (_bdg ,'.');_eeab :=0;_aff :for _gba :=0;_gba < len (_fb .Fractional );_gba ++{_bbe :=_gba ;_dab :=_fb .Fractional [_gba ];switch _dab .Type {case FmtTypeDigit :if _bbe < len (_bda ){_bdg =append (_bdg ,_bda [_bbe ]);_eeab ++;}else {_bdg =append (_bdg ,'0');};case FmtTypeDigitOpt :if _bbe >=0{_bdg =append (_bdg ,_bda [_bbe ]);_eeab ++;}else {break _aff ;};case FmtTypeLiteral :_bdg =append (_bdg ,_dab .Literal );default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_dab );};};return _bdg ;};func (_aca *Lexer )nextFmt (){_aca ._bead =append (_aca ._bead ,_aca ._bdf );_aca ._bdf =Format {}};const _cf =1e-10;func _abe (_ggf _e .Time ,_bee float64 ,_eaa string )[]byte {_adf :=[]byte {};_dbe :=0;for _ace :=0;_ace < len (_eaa );_ace ++{var _aag string ;if _eaa [_ace ]==':'{_aag =string (_eaa [_dbe :_ace ]);_dbe =_ace +1;}else if _ace ==len (_eaa )-1{_aag =string (_eaa [_dbe :_ace +1]);}else {continue ;};switch _aag {case "\u0064":_adf =_ggf .AppendFormat (_adf ,"\u0032");case "\u0068":_adf =_ggf .AppendFormat (_adf ,"\u0033");case "\u0068\u0068":_adf =_ggf .AppendFormat (_adf ,"\u0031\u0035");case "\u006d":_adf =_ggf .AppendFormat (_adf ,"\u0034");case "\u006d\u006d":_adf =_ggf .AppendFormat (_adf ,"\u0030\u0034");case "\u0073":_adf =_ggf .Round (_e .Second ).AppendFormat (_adf ,"\u0035");case "\u0073\u002e\u0030":_adf =_ggf .Round (_e .Second /10).AppendFormat (_adf ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_adf =_ggf .Round (_e .Second /100).AppendFormat (_adf ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_adf =_ggf .Round (_e .Second /1000).AppendFormat (_adf ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_adf =_ggf .Round (_e .Second ).AppendFormat (_adf ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_adf =_ggf .Round (_e .Second /10).AppendFormat (_adf ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_adf =_ggf .Round (_e .Second /100).AppendFormat (_adf ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_adf =_ggf .Round (_e .Second /1000).AppendFormat (_adf ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_adf =_ggf .AppendFormat (_adf ,"\u0050\u004d");case "\u005b\u0068\u005d":_adf =_c .AppendInt (_adf ,int64 (_bee *24),10);case "\u005b\u006d\u005d":_adf =_c .AppendInt (_adf ,int64 (_bee *24*60),10);case "\u005b\u0073\u005d":_adf =_c .AppendInt (_adf ,int64 (_bee *24*60*60),10);case "":default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_aag );};if _eaa [_ace ]==':'{_adf =append (_adf ,':');};};return _adf ;};func _ab (_ecd float64 )string {_ddb :=_c .FormatFloat (_ecd ,'E',-1,64);_bab :=_c .FormatFloat (_ecd ,'E',5,64);if len (_ddb )< len (_bab ){return _c .FormatFloat (_ecd ,'E',2,64);};return _bab ;};const _faf int =34;func IsNumber (data string )(_bfb bool ){_ecda ,_fdc ,_bdc :=0,0,len (data );_afe :=len (data );_fdcc ,_eee ,_ddee :=0,0,0;_ =_eee ;_ =_ddee ;_ =_fdcc ;{_ecda =_eacc ;_fdcc =0;_eee =0;_ddee =0;};{if _fdc ==_bdc {goto _acg ;};switch _ecda {case 0:goto _cfd ;case 1:goto _dfac ;case 2:goto _gfc ;case 3:goto _ggc ;case 4:goto _gaf ;case 5:goto _ecb ;case 6:goto _gfagd ;case 7:goto _fag ;};goto _gcc ;_gde :_eee =_fdc ;_fdc --;{_bfb =false ;};goto _adg ;_gged :_eee =_fdc ;_fdc --;{_bfb =_eee ==len (data );};goto _adg ;_aad :_eee =_fdc ;_fdc --;{_bfb =_eee ==len (data );};goto _adg ;_dbga :switch _ddee {case 2:{_fdc =(_eee )-1;_bfb =_eee ==len (data );};case 3:{_fdc =(_eee )-1;_bfb =false ;};};goto _adg ;_adg :_fdcc =0;if _fdc ++;_fdc ==_bdc {goto _age ;};_cfd :_fdcc =_fdc ;switch data [_fdc ]{case 43:goto _cg ;case 45:goto _cg ;};if 48<=data [_fdc ]&&data [_fdc ]<=57{goto _cab ;};goto _dac ;_dac :if _fdc ++;_fdc ==_bdc {goto _fda ;};_dfac :goto _dac ;_cg :if _fdc ++;_fdc ==_bdc {goto _dcce ;};_gfc :if 48<=data [_fdc ]&&data [_fdc ]<=57{goto _cab ;};goto _dac ;_cab :if _fdc ++;_fdc ==_bdc {goto _cfae ;};_ggc :if data [_fdc ]==46{goto _gbb ;};if 48<=data [_fdc ]&&data [_fdc ]<=57{goto _cab ;};goto _dac ;_gbb :if _fdc ++;_fdc ==_bdc {goto _cdc ;};_gaf :if 48<=data [_fdc ]&&data [_fdc ]<=57{goto _gbad ;};goto _dac ;_gbad :if _fdc ++;_fdc ==_bdc {goto _dfag ;};_ecb :if data [_fdc ]==69{goto _cafd ;};if 48<=data [_fdc ]&&data [_fdc ]<=57{goto _gbad ;};goto _dac ;_cafd :if _fdc ++;_fdc ==_bdc {goto _fge ;};_gfagd :switch data [_fdc ]{case 43:goto _acc ;case 45:goto _acc ;};goto _dac ;_acc :_eee =_fdc +1;_ddee =3;goto _aec ;_ed :_eee =_fdc +1;_ddee =2;goto _aec ;_aec :if _fdc ++;_fdc ==_bdc {goto _gcfe ;};_fag :if 48<=data [_fdc ]&&data [_fdc ]<=57{goto _ed ;};goto _dac ;_gcc :_age :_ecda =0;goto _acg ;_fda :_ecda =1;goto _acg ;_dcce :_ecda =2;goto _acg ;_cfae :_ecda =3;goto _acg ;_cdc :_ecda =4;goto _acg ;_dfag :_ecda =5;goto _acg ;_fge :_ecda =6;goto _acg ;_gcfe :_ecda =7;goto _acg ;_acg :{};if _fdc ==_afe {switch _ecda {case 1:goto _gde ;case 2:goto _gde ;case 3:goto _gged ;case 4:goto _gde ;case 5:goto _aad ;case 6:goto _gde ;case 7:goto _dbga ;};};};if _ecda ==_afd {return false ;};return ;};const _gfaf int =34;func _ef (_ecc _e .Time ,_abd string )[]byte {_dfe :=[]byte {};_affg :=0;for _dgg :=0;_dgg < len (_abd );_dgg ++{var _aabf string ;if _abd [_dgg ]=='/'{_aabf =string (_abd [_affg :_dgg ]);_affg =_dgg +1;}else if _dgg ==len (_abd )-1{_aabf =string (_abd [_affg :_dgg +1]);}else {continue ;};switch _aabf {case "\u0079\u0079":_dfe =_ecc .AppendFormat (_dfe ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_dfe =_ecc .AppendFormat (_dfe ,"\u0032\u0030\u0030\u0036");case "\u006d":_dfe =_ecc .AppendFormat (_dfe ,"\u0031");case "\u006d\u006d":_dfe =_ecc .AppendFormat (_dfe ,"\u0030\u0031");case "\u006d\u006d\u006d":_dfe =_ecc .AppendFormat (_dfe ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_dfe =_ecc .AppendFormat (_dfe ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _ecc .Month (){case _e .January ,_e .July ,_e .June :_dfe =append (_dfe ,'J');case _e .February :_dfe =append (_dfe ,'M');case _e .March ,_e .May :_dfe =append (_dfe ,'M');case _e .April ,_e .August :_dfe =append (_dfe ,'A');case _e .September :_dfe =append (_dfe ,'S');case _e .October :_dfe =append (_dfe ,'O');case _e .November :_dfe =append (_dfe ,'N');case _e .December :_dfe =append (_dfe ,'D');};case "\u0064":_dfe =_ecc .AppendFormat (_dfe ,"\u0032");case "\u0064\u0064":_dfe =_ecc .AppendFormat (_dfe ,"\u0030\u0032");case "\u0064\u0064\u0064":_dfe =_ecc .AppendFormat (_dfe ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_dfe =_ecc .AppendFormat (_dfe ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_aabf );};if _abd [_dgg ]=='/'{_dfe =append (_dfe ,'/');};};return _dfe ;};func _ebc (_caa int64 )int64 {if _caa < 0{return -_caa ;};return _caa ;};func (_bbf *Lexer )Lex (r _f .Reader ){_aged ,_bgg ,_eaag :=0,0,0;_ggbb :=-1;_cadb ,_gbe ,_caaa :=0,0,0;_ =_gbe ;_ =_caaa ;_dccb :=1;_ =_dccb ;_fbb :=make ([]byte ,4096);_gea :=false ;for !_gea {_bfa :=0;if _cadb > 0{_bfa =_bgg -_cadb ;};_bgg =0;_faaf ,_cda :=r .Read (_fbb [_bfa :]);if _faaf ==0||_cda !=nil {_gea =true ;};_eaag =_faaf +_bfa ;if _eaag < len (_fbb ){_ggbb =_eaag ;};{_aged =_gfaf ;_cadb =0;_gbe =0;_caaa =0;};{if _bgg ==_eaag {goto _afc ;};switch _aged {case 34:goto _cce ;case 35:goto _fadb ;case 0:goto _debf ;case 36:goto _cced ;case 37:goto _bbb ;case 1:goto _eaba ;case 2:goto _gafe ;case 38:goto _bbcf ;case 3:goto _gcg ;case 4:goto _eda ;case 39:goto _ede ;case 5:goto _dggc ;case 6:goto _cea ;case 7:goto _fgg ;case 8:goto _gccc ;case 40:goto _gaa ;case 9:goto _fddf ;case 41:goto _fed ;case 10:goto _fdaf ;case 42:goto _cgc ;case 11:goto _bae ;case 43:goto _cgce ;case 44:goto _cdg ;case 45:goto _fcb ;case 12:goto _cga ;case 46:goto _ggfd ;case 13:goto _fadd ;case 14:goto _abed ;case 15:goto _fcf ;case 16:goto _abbf ;case 47:goto _caac ;case 17:goto _agdg ;case 48:goto _beb ;case 18:goto _gegb ;case 19:goto _adaa ;case 20:goto _gdga ;case 49:goto _bdeb ;case 50:goto _dfaa ;case 21:goto _aga ;case 22:goto _dccg ;case 23:goto _cfc ;case 24:goto _bbdc ;case 25:goto _gaef ;case 51:goto _dcea ;case 26:goto _baec ;case 52:goto _gddb ;case 53:goto _feg ;case 54:goto _dfad ;case 55:goto _dgb ;case 56:goto _cbb ;case 57:goto _aaed ;case 27:goto _afa ;case 28:goto _ebb ;case 29:goto _bdfc ;case 30:goto _fdcd ;case 31:goto _gbcf ;case 58:goto _abag ;case 32:goto _fdf ;case 59:goto _ggg ;case 33:goto _eba ;case 60:goto _fbd ;case 61:goto _cafc ;case 62:goto _beae ;};goto _dfg ;_abb :switch _caaa {case 2:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeDigit ,nil );};case 3:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_bgg =(_gbe )-1;};case 8:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypePercent ,nil );};case 13:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeFraction ,_fbb [_cadb :_gbe ]);};case 14:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeDate ,_fbb [_cadb :_gbe ]);};case 15:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeTime ,_fbb [_cadb :_gbe ]);};case 16:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeTime ,_fbb [_cadb :_gbe ]);};case 18:{_bgg =(_gbe )-1;};case 20:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeLiteral ,_fbb [_cadb :_gbe ]);};case 21:{_bgg =(_gbe )-1;_bbf ._bdf .AddToken (FmtTypeLiteral ,_fbb [_cadb +1:_gbe -1]);};};goto _ccff ;_cgb :_bgg =(_gbe )-1;{_bbf ._bdf .AddToken (FmtTypeFraction ,_fbb [_cadb :_gbe ]);};goto _ccff ;_ccf :_bgg =(_gbe )-1;{_bbf ._bdf .AddToken (FmtTypeDigitOpt ,nil );};goto _ccff ;_bgb :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeDigitOptThousands ,nil );};goto _ccff ;_cabb :_bgg =(_gbe )-1;{_bbf ._bdf .AddToken (FmtTypePercent ,nil );};goto _ccff ;_agdf :_bgg =(_gbe )-1;{_bbf ._bdf .AddToken (FmtTypeDate ,_fbb [_cadb :_gbe ]);};goto _ccff ;_bc :_bgg =(_gbe )-1;{_bbf ._bdf .AddToken (FmtTypeDigit ,nil );};goto _ccff ;_cfdb :_bgg =(_gbe )-1;{_bbf ._bdf .AddToken (FmtTypeTime ,_fbb [_cadb :_gbe ]);};goto _ccff ;_ecbg :_bgg =(_gbe )-1;{_bbf ._bdf .AddToken (FmtTypeLiteral ,_fbb [_cadb :_gbe ]);};goto _ccff ;_geg :_gbe =_bgg +1;{_bbf ._bdf ._b =true ;};goto _ccff ;_adc :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeLiteral ,_fbb [_cadb :_gbe ]);};goto _ccff ;_gafc :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeDollar ,nil );};goto _ccff ;_agg :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeComma ,nil );};goto _ccff ;_affa :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeDecimal ,nil );};goto _ccff ;_cbad :_gbe =_bgg +1;{_bbf .nextFmt ();};goto _ccff ;_fbac :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeText ,nil );};goto _ccff ;_ecca :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeUnderscore ,nil );};goto _ccff ;_gdae :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypeLiteral ,_fbb [_cadb :_gbe ]);};goto _ccff ;_fab :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypeLiteral ,_fbb [_cadb +1:_gbe -1]);};goto _ccff ;_deb :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypeDigitOpt ,nil );};goto _ccff ;_aed :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypeFraction ,_fbb [_cadb :_gbe ]);};goto _ccff ;_eefb :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypePercent ,nil );};goto _ccff ;_dae :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypeDate ,_fbb [_cadb :_gbe ]);};goto _ccff ;_dabd :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypeDigit ,nil );};goto _ccff ;_fada :_gbe =_bgg ;_bgg --;{_bbf ._bdf .AddToken (FmtTypeTime ,_fbb [_cadb :_gbe ]);};goto _ccff ;_eab :_gbe =_bgg ;_bgg --;{};goto _ccff ;_gfe :_gbe =_bgg +1;{_bbf ._bdf .IsExponential =true ;};goto _ccff ;_gae :_gbe =_bgg +1;{_bbf ._bdf .AddToken (FmtTypeLiteral ,_fbb [_cadb +1:_gbe ]);};goto _ccff ;_ccff :_cadb =0;if _bgg ++;_bgg ==_eaag {goto _bfbg ;};_cce :_cadb =_bgg ;switch _fbb [_bgg ]{case 34:goto _dee ;case 35:goto _bgd ;case 36:goto _gafc ;case 37:goto _agde ;case 44:goto _agg ;case 46:goto _affa ;case 47:goto _gbc ;case 48:goto _eafa ;case 58:goto _ebd ;case 59:goto _cbad ;case 63:goto _gbcc ;case 64:goto _fbac ;case 65:goto _bfbf ;case 69:goto _cgba ;case 71:goto _fac ;case 91:goto _ddbc ;case 92:goto _adcfb ;case 95:goto _ecca ;case 100:goto _gbc ;case 104:goto _ebd ;case 109:goto _faad ;case 115:goto _edaef ;case 121:goto _abf ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _eeb ;};goto _adc ;_dee :_gbe =_bgg +1;_caaa =20;goto _acce ;_acce :if _bgg ++;_bgg ==_eaag {goto _acbf ;};_fadb :if _fbb [_bgg ]==34{goto _fae ;};goto _dgc ;_dgc :if _bgg ++;_bgg ==_eaag {goto _degf ;};_debf :if _fbb [_bgg ]==34{goto _fae ;};goto _dgc ;_fae :_gbe =_bgg +1;_caaa =21;goto _bgf ;_bgf :if _bgg ++;_bgg ==_eaag {goto _eagd ;};_cced :if _fbb [_bgg ]==34{goto _dgc ;};goto _fab ;_bgd :_gbe =_bgg +1;_caaa =3;goto _dbb ;_dbb :if _bgg ++;_bgg ==_eaag {goto _ggea ;};_bbb :switch _fbb [_bgg ]{case 35:goto _add ;case 37:goto _add ;case 44:goto _cacb ;case 47:goto _bdaa ;case 48:goto _add ;case 63:goto _add ;};goto _deb ;_add :if _bgg ++;_bgg ==_eaag {goto _bbba ;};_eaba :switch _fbb [_bgg ]{case 35:goto _add ;case 37:goto _add ;case 47:goto _bdaa ;case 48:goto _add ;case 63:goto _add ;};goto _abb ;_bdaa :if _bgg ++;_bgg ==_eaag {goto _gef ;};_gafe :switch _fbb [_bgg ]{case 35:goto _bcg ;case 37:goto _ddeee ;case 48:goto _edae ;case 63:goto _bcg ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _gce ;};goto _abb ;_bcg :_gbe =_bgg +1;goto _bbd ;_bbd :if _bgg ++;_bgg ==_eaag {goto _dca ;};_bbcf :switch _fbb [_bgg ]{case 35:goto _bcg ;case 37:goto _bcg ;case 44:goto _bcg ;case 46:goto _bcg ;case 48:goto _bcg ;case 63:goto _bcg ;case 65:goto _dbf ;};goto _aed ;_dbf :if _bgg ++;_bgg ==_eaag {goto _abba ;};_gcg :switch _fbb [_bgg ]{case 47:goto _efd ;case 77:goto _fcg ;};goto _cgb ;_efd :if _bgg ++;_bgg ==_eaag {goto _fbf ;};_eda :if _fbb [_bgg ]==80{goto _fdd ;};goto _cgb ;_fdd :_gbe =_bgg +1;goto _agb ;_agb :if _bgg ++;_bgg ==_eaag {goto _bgce ;};_ede :if _fbb [_bgg ]==65{goto _dbf ;};goto _aed ;_fcg :if _bgg ++;_bgg ==_eaag {goto _degff ;};_dggc :if _fbb [_bgg ]==47{goto _bcc ;};goto _cgb ;_bcc :if _bgg ++;_bgg ==_eaag {goto _bgdd ;};_cea :if _fbb [_bgg ]==80{goto _dea ;};goto _cgb ;_dea :if _bgg ++;_bgg ==_eaag {goto _bacf ;};_fgg :if _fbb [_bgg ]==77{goto _fdd ;};goto _cgb ;_ddeee :if _bgg ++;_bgg ==_eaag {goto _fegc ;};_gccc :switch _fbb [_bgg ]{case 35:goto _fcac ;case 37:goto _bdgg ;case 63:goto _fcac ;};if 48<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _edf ;};goto _abb ;_fcac :_gbe =_bgg +1;goto _eagg ;_eagg :if _bgg ++;_bgg ==_eaag {goto _eae ;};_gaa :switch _fbb [_bgg ]{case 35:goto _bcg ;case 37:goto _dgga ;case 44:goto _bcg ;case 46:goto _bcg ;case 48:goto _bcg ;case 63:goto _bcg ;case 65:goto _dbf ;};goto _aed ;_dgga :if _bgg ++;_bgg ==_eaag {goto _bcgg ;};_fddf :switch _fbb [_bgg ]{case 35:goto _adgf ;case 44:goto _adgf ;case 46:goto _adgf ;case 48:goto _adgf ;case 63:goto _adgf ;};goto _cgb ;_adgf :_gbe =_bgg +1;goto _dfd ;_dfd :if _bgg ++;_bgg ==_eaag {goto _eabd ;};_fed :switch _fbb [_bgg ]{case 35:goto _adgf ;case 44:goto _adgf ;case 46:goto _adgf ;case 48:goto _adgf ;case 63:goto _adgf ;case 65:goto _dbf ;};goto _aed ;_bdgg :if _bgg ++;_bgg ==_eaag {goto _agc ;};_fdaf :if _fbb [_bgg ]==37{goto _bdgg ;};if 48<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _edf ;};goto _abb ;_edf :_gbe =_bgg +1;_caaa =13;goto _bbcb ;_bbcb :if _bgg ++;_bgg ==_eaag {goto _gdef ;};_cgc :switch _fbb [_bgg ]{case 35:goto _bcg ;case 37:goto _daaf ;case 44:goto _bcg ;case 46:goto _bcg ;case 48:goto _ccad ;case 63:goto _bcg ;case 65:goto _dbf ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _edf ;};goto _aed ;_daaf :if _bgg ++;_bgg ==_eaag {goto _ded ;};_bae :switch _fbb [_bgg ]{case 35:goto _adgf ;case 37:goto _bdgg ;case 44:goto _adgf ;case 46:goto _adgf ;case 63:goto _adgf ;};if 48<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _edf ;};goto _cgb ;_ccad :_gbe =_bgg +1;goto _efa ;_efa :if _bgg ++;_bgg ==_eaag {goto _gaag ;};_cgce :switch _fbb [_bgg ]{case 35:goto _bcg ;case 37:goto _ccad ;case 44:goto _bcg ;case 46:goto _bcg ;case 48:goto _ccad ;case 63:goto _bcg ;case 65:goto _dbf ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _edf ;};goto _aed ;_edae :_gbe =_bgg +1;goto _gcgd ;_gcgd :if _bgg ++;_bgg ==_eaag {goto _ged ;};_cdg :switch _fbb [_bgg ]{case 35:goto _bcg ;case 37:goto _ccad ;case 44:goto _bcg ;case 46:goto _bcg ;case 48:goto _edae ;case 63:goto _bcg ;case 65:goto _dbf ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _gce ;};goto _aed ;_gce :_gbe =_bgg +1;goto _aae ;_aae :if _bgg ++;_bgg ==_eaag {goto _eead ;};_fcb :switch _fbb [_bgg ]{case 35:goto _bcg ;case 37:goto _edf ;case 44:goto _bcg ;case 46:goto _bcg ;case 48:goto _edae ;case 63:goto _bcg ;case 65:goto _dbf ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _gce ;};goto _aed ;_cacb :if _bgg ++;_bgg ==_eaag {goto _agea ;};_cga :if _fbb [_bgg ]==35{goto _bgb ;};goto _ccf ;_agde :_gbe =_bgg +1;_caaa =8;goto _feb ;_feb :if _bgg ++;_bgg ==_eaag {goto _cega ;};_ggfd :switch _fbb [_bgg ]{case 35:goto _aedg ;case 37:goto _ccec ;case 48:goto _bgbb ;case 63:goto _aedg ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _acef ;};goto _eefb ;_aedg :if _bgg ++;_bgg ==_eaag {goto _dbad ;};_fadd :switch _fbb [_bgg ]{case 35:goto _aedg ;case 47:goto _bdaa ;case 48:goto _aedg ;case 63:goto _aedg ;};goto _cabb ;_ccec :if _bgg ++;_bgg ==_eaag {goto _dcd ;};_abed :if _fbb [_bgg ]==37{goto _ccec ;};if 48<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _acef ;};goto _abb ;_acef :if _bgg ++;_bgg ==_eaag {goto _bgdf ;};_fcf :switch _fbb [_bgg ]{case 37:goto _ccec ;case 47:goto _bdaa ;};if 48<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _acef ;};goto _abb ;_bgbb :if _bgg ++;_bgg ==_eaag {goto _fedg ;};_abbf :switch _fbb [_bgg ]{case 35:goto _aedg ;case 37:goto _ccec ;case 47:goto _bdaa ;case 48:goto _bgbb ;case 63:goto _aedg ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _acef ;};goto _cabb ;_gbc :_gbe =_bgg +1;goto _deg ;_deg :if _bgg ++;_bgg ==_eaag {goto _acd ;};_caac :switch _fbb [_bgg ]{case 47:goto _gbc ;case 100:goto _gbc ;case 109:goto _gbc ;case 121:goto _fged ;};goto _dae ;_fged :if _bgg ++;_bgg ==_eaag {goto _fdgd ;};_agdg :if _fbb [_bgg ]==121{goto _gbc ;};goto _agdf ;_eafa :_gbe =_bgg +1;_caaa =2;goto _adcf ;_adcf :if _bgg ++;_bgg ==_eaag {goto _beeb ;};_beb :switch _fbb [_bgg ]{case 35:goto _add ;case 37:goto _egc ;case 47:goto _bdaa ;case 48:goto _bdeg ;case 63:goto _add ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _gbag ;};goto _dabd ;_egc :if _bgg ++;_bgg ==_eaag {goto _dge ;};_gegb :switch _fbb [_bgg ]{case 35:goto _add ;case 37:goto _egc ;case 47:goto _bdaa ;case 48:goto _egc ;case 63:goto _add ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _acef ;};goto _bc ;_bdeg :if _bgg ++;_bgg ==_eaag {goto _feeb ;};_adaa :switch _fbb [_bgg ]{case 35:goto _add ;case 37:goto _egc ;case 47:goto _bdaa ;case 48:goto _bdeg ;case 63:goto _add ;};if 49<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _gbag ;};goto _bc ;_gbag :if _bgg ++;_bgg ==_eaag {goto _dbbe ;};_gdga :switch _fbb [_bgg ]{case 37:goto _acef ;case 47:goto _bdaa ;};if 48<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _gbag ;};goto _abb ;_eeb :_gbe =_bgg +1;_caaa =20;goto _gdde ;_gdde :if _bgg ++;_bgg ==_eaag {goto _acac ;};_bdeb :switch _fbb [_bgg ]{case 37:goto _acef ;case 47:goto _bdaa ;};if 48<=_fbb [_bgg ]&&_fbb [_bgg ]<=57{goto _gbag ;};goto _gdae ;_ebd :_gbe =_bgg +1;_caaa =15;goto _gbca ;_gbca :if _bgg ++;_bgg ==_eaag {goto _dfcd ;};_dfaa :switch _fbb [_bgg ]{case 58:goto _ebd ;case 65:goto _fea ;case 104:goto _ebd ;case 109:goto _ebd ;case 115:goto _edaef ;};goto _fada ;_fea :if _bgg ++;_bgg ==_eaag {goto _ebaf ;};_aga :switch _fbb [_bgg ]{case 47:goto _bgfg ;case 77:goto _ggcb ;};goto _abb ;_bgfg :if _bgg ++;_bgg ==_eaag {goto _bdge ;};_dccg :if _fbb [_bgg ]==80{goto _ebd ;};goto _abb ;_ggcb :if _bgg ++;_bgg ==_eaag {goto _eced ;};_cfc :if _fbb [_bgg ]==47{goto _bge ;};goto _abb ;_bge :if _bgg ++;_bgg ==_eaag {goto _fadbg ;};_bbdc :if _fbb [_bgg ]==80{goto _fcde ;};goto _abb ;_fcde :if _bgg ++;_bgg ==_eaag {goto _dcg ;};_gaef :if _fbb [_bgg ]==77{goto _ebd ;};goto _abb ;_edaef :_gbe =_bgg +1;_caaa =15;goto _aba ;_aba :if _bgg ++;_bgg ==_eaag {goto _egcf ;};_dcea :switch _fbb [_bgg ]{case 46:goto _dbc ;case 58:goto _ebd ;case 65:goto _fea ;case 104:goto _ebd ;case 109:goto _ebd ;case 115:goto _edaef ;};goto _fada ;_dbc :if _bgg ++;_bgg ==_eaag {goto _ccfa ;};_baec :if _fbb [_bgg ]==48{goto _aee ;};goto _cfdb ;_aee :_gbe =_bgg +1;_caaa =15;goto _cfdbd ;_cfdbd :if _bgg ++;_bgg ==_eaag {goto _fdeb ;};_gddb :switch _fbb [_bgg ]{case 48:goto _beea ;case 58:goto _ebd ;case 65:goto _fea ;case 104:goto _ebd ;case 109:goto _ebd ;case 115:goto _edaef ;};goto _fada ;_beea :_gbe =_bgg +1;_caaa =15;goto _efc ;_efc :if _bgg ++;_bgg ==_eaag {goto _eeec ;};_feg :switch _fbb [_bgg ]{case 48:goto _ebd ;case 58:goto _ebd ;case 65:goto _fea ;case 104:goto _ebd ;case 109:goto _ebd ;case 115:goto _edaef ;};goto _fada ;_gbcc :_gbe =_bgg +1;_caaa =5;goto _cbf ;_cbf :if _bgg ++;_bgg ==_eaag {goto _bdgc ;};_dfad :switch _fbb [_bgg ]{case 35:goto _add ;case 37:goto _add ;case 47:goto _bdaa ;case 48:goto _add ;case 63:goto _add ;};goto _eab ;_bfbf :_gbe =_bgg +1;_caaa =20;goto _bbcg ;_bbcg :if _bgg ++;_bgg ==_eaag {goto _ggbd ;};_dgb :switch _fbb [_bgg ]{case 47:goto _bgfg ;case 77:goto _ggcb ;};goto _gdae ;_cgba :if _bgg ++;_bgg ==_eaag {goto _fbg ;};_cbb :switch _fbb [_bgg ]{case 43:goto _gfe ;case 45:goto _gfe ;};goto _gdae ;_fac :_gbe =_bgg +1;goto _bgc ;_bgc :if _bgg ++;_bgg ==_eaag {goto _faae ;};_aaed :if _fbb [_bgg ]==101{goto _ffda ;};goto _gdae ;_ffda :if _bgg ++;_bgg ==_eaag {goto _cfe ;};_afa :if _fbb [_bgg ]==110{goto _bdb ;};goto _ecbg ;_bdb :if _bgg ++;_bgg ==_eaag {goto _bgcd ;};_ebb :if _fbb [_bgg ]==101{goto _ceg ;};goto _ecbg ;_ceg :if _bgg ++;_bgg ==_eaag {goto _aede ;};_bdfc :if _fbb [_bgg ]==114{goto _bbca ;};goto _ecbg ;_bbca :if _bgg ++;_bgg ==_eaag {goto _cfea ;};_fdcd :if _fbb [_bgg ]==97{goto _cgg ;};goto _ecbg ;_cgg :if _bgg ++;_bgg ==_eaag {goto _cde ;};_gbcf :if _fbb [_bgg ]==108{goto _geg ;};goto _ecbg ;_ddbc :_gbe =_bgg +1;_caaa =20;goto _bbg ;_bbg :if _bgg ++;_bgg ==_eaag {goto _adaf ;};_abag :switch _fbb [_bgg ]{case 104:goto _ggcd ;case 109:goto _ggcd ;case 115:goto _ggcd ;};goto _aeb ;_aeb :if _bgg ++;_bgg ==_eaag {goto _gded ;};_fdf :if _fbb [_bgg ]==93{goto _fdef ;};goto _aeb ;_fdef :_gbe =_bgg +1;_caaa =18;goto _gaad ;_cfce :_gbe =_bgg +1;_caaa =16;goto _gaad ;_gaad :if _bgg ++;_bgg ==_eaag {goto _agded ;};_ggg :if _fbb [_bgg ]==93{goto _fdef ;};goto _aeb ;_ggcd :if _bgg ++;_bgg ==_eaag {goto _dgcf ;};_eba :if _fbb [_bgg ]==93{goto _cfce ;};goto _aeb ;_adcfb :if _bgg ++;_bgg ==_eaag {goto _dcag ;};_fbd :goto _gae ;_faad :_gbe =_bgg +1;_caaa =14;goto _baeb ;_baeb :if _bgg ++;_bgg ==_eaag {goto _cbe ;};_cafc :switch _fbb [_bgg ]{case 47:goto _gbc ;case 58:goto _ebd ;case 65:goto _fea ;case 100:goto _gbc ;case 104:goto _ebd ;case 109:goto _faad ;case 115:goto _edaef ;case 121:goto _fged ;};goto _dae ;_abf :if _bgg ++;_bgg ==_eaag {goto _adfd ;};_beae :if _fbb [_bgg ]==121{goto _gbc ;};goto _gdae ;_dfg :_bfbg :_aged =34;goto _afc ;_acbf :_aged =35;goto _afc ;_degf :_aged =0;goto _afc ;_eagd :_aged =36;goto _afc ;_ggea :_aged =37;goto _afc ;_bbba :_aged =1;goto _afc ;_gef :_aged =2;goto _afc ;_dca :_aged =38;goto _afc ;_abba :_aged =3;goto _afc ;_fbf :_aged =4;goto _afc ;_bgce :_aged =39;goto _afc ;_degff :_aged =5;goto _afc ;_bgdd :_aged =6;goto _afc ;_bacf :_aged =7;goto _afc ;_fegc :_aged =8;goto _afc ;_eae :_aged =40;goto _afc ;_bcgg :_aged =9;goto _afc ;_eabd :_aged =41;goto _afc ;_agc :_aged =10;goto _afc ;_gdef :_aged =42;goto _afc ;_ded :_aged =11;goto _afc ;_gaag :_aged =43;goto _afc ;_ged :_aged =44;goto _afc ;_eead :_aged =45;goto _afc ;_agea :_aged =12;goto _afc ;_cega :_aged =46;goto _afc ;_dbad :_aged =13;goto _afc ;_dcd :_aged =14;goto _afc ;_bgdf :_aged =15;goto _afc ;_fedg :_aged =16;goto _afc ;_acd :_aged =47;goto _afc ;_fdgd :_aged =17;goto _afc ;_beeb :_aged =48;goto _afc ;_dge :_aged =18;goto _afc ;_feeb :_aged =19;goto _afc ;_dbbe :_aged =20;goto _afc ;_acac :_aged =49;goto _afc ;_dfcd :_aged =50;goto _afc ;_ebaf :_aged =21;goto _afc ;_bdge :_aged =22;goto _afc ;_eced :_aged =23;goto _afc ;_fadbg :_aged =24;goto _afc ;_dcg :_aged =25;goto _afc ;_egcf :_aged =51;goto _afc ;_ccfa :_aged =26;goto _afc ;_fdeb :_aged =52;goto _afc ;_eeec :_aged =53;goto _afc ;_bdgc :_aged =54;goto _afc ;_ggbd :_aged =55;goto _afc ;_fbg :_aged =56;goto _afc ;_faae :_aged =57;goto _afc ;_cfe :_aged =27;goto _afc ;_bgcd :_aged =28;goto _afc ;_aede :_aged =29;goto _afc ;_cfea :_aged =30;goto _afc ;_cde :_aged =31;goto _afc ;_adaf :_aged =58;goto _afc ;_gded :_aged =32;goto _afc ;_agded :_aged =59;goto _afc ;_dgcf :_aged =33;goto _afc ;_dcag :_aged =60;goto _afc ;_cbe :_aged =61;goto _afc ;_adfd :_aged =62;goto _afc ;_afc :{};if _bgg ==_ggbb {switch _aged {case 35:goto _gdae ;case 0:goto _abb ;case 36:goto _fab ;case 37:goto _deb ;case 1:goto _abb ;case 2:goto _abb ;case 38:goto _aed ;case 3:goto _cgb ;case 4:goto _cgb ;case 39:goto _aed ;case 5:goto _cgb ;case 6:goto _cgb ;case 7:goto _cgb ;case 8:goto _abb ;case 40:goto _aed ;case 9:goto _cgb ;case 41:goto _aed ;case 10:goto _abb ;case 42:goto _aed ;case 11:goto _cgb ;case 43:goto _aed ;case 44:goto _aed ;case 45:goto _aed ;case 12:goto _ccf ;case 46:goto _eefb ;case 13:goto _cabb ;case 14:goto _abb ;case 15:goto _abb ;case 16:goto _cabb ;case 47:goto _dae ;case 17:goto _agdf ;case 48:goto _dabd ;case 18:goto _bc ;case 19:goto _bc ;case 20:goto _abb ;case 49:goto _gdae ;case 50:goto _fada ;case 21:goto _abb ;case 22:goto _abb ;case 23:goto _abb ;case 24:goto _abb ;case 25:goto _abb ;case 51:goto _fada ;case 26:goto _cfdb ;case 52:goto _fada ;case 53:goto _fada ;case 54:goto _eab ;case 55:goto _gdae ;case 56:goto _gdae ;case 57:goto _gdae ;case 27:goto _ecbg ;case 28:goto _ecbg ;case 29:goto _ecbg ;case 30:goto _ecbg ;case 31:goto _ecbg ;case 58:goto _gdae ;case 32:goto _abb ;case 59:goto _abb ;case 33:goto _ecbg ;case 60:goto _gdae ;case 61:goto _dae ;case 62:goto _gdae ;};};};if _cadb > 0{copy (_fbb [0:],_fbb [_cadb :]);};};_ =_ggbb ;if _aged ==_afd {_gf .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};type Lexer struct{_bdf Format ;_bead []Format ;};

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;func _fgbf (_cba []byte )[]byte {_cfa :=len (_cba );_bde :=false ;_bac :=false ;for _fce :=len (_cba )-1;_fce >=0;_fce --{if _cba [_fce ]=='0'&&!_bac &&!_bde {_cfa =_fce ;}else if _cba [_fce ]=='.'{_bde =true ;}else {_bac =true ;};};if _bde &&_bac {if _cba [_cfa -1]=='.'{_cfa --;};return _cba [0:_cfa ];};return _cba ;};const _dc ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";func _fgb (_ce float64 ,_ec Format ,_gdg bool )string {if _ec ._b {return NumberGeneric (_ce );};_bfg :=make ([]byte ,0,20);_df :=_g .Signbit (_ce );_dfa :=_g .Abs (_ce );_gfg :=int64 (0);_fa :=int64 (0);if _ec .IsExponential {for _dfa >=10{_fa ++;_dfa /=10;};for _dfa < 1{_fa --;_dfa *=10;};}else if _ec ._eaf {_dfa *=100;}else if _ec ._gd {if _ec ._eea ==0{_ecg :=_g .Pow (10,float64 (_ec ._cfb ));_gfa ,_dfab :=1.0,1.0;_ =_gfa ;for _bec :=1.0;_bec < _ecg ;_bec ++{_ ,_fdec :=_g .Modf (_dfa *float64 (_bec ));if _fdec < _dfab {_dfab =_fdec ;_gfa =_bec ;if _fdec ==0{break ;};};};_ec ._eea =int64 (_gfa );};_gfg =int64 (_dfa *float64 (_ec ._eea )+0.5);if len (_ec .Whole )> 0&&_gfg > _ec ._eea {_gfg =int64 (_dfa *float64 (_ec ._eea ))%_ec ._eea ;_dfa -=float64 (_gfg )/float64 (_ec ._eea );}else {_dfa -=float64 (_gfg )/float64 (_ec ._eea );if _g .Abs (_dfa )< 1{_caf :=true ;for _ ,_bea :=range _ec .Whole {if _bea .Type ==FmtTypeDigitOpt {continue ;};if _bea .Type ==FmtTypeLiteral &&_bea .Literal ==' '{continue ;};_caf =false ;};if _caf {_ec .Whole =nil ;};};};};_ccg :=1;for _ ,_dfc :=range _ec .Fractional {if _dfc .Type ==FmtTypeDigit ||_dfc .Type ==FmtTypeDigitOpt {_ccg ++;};};_dfa +=5*_g .Pow10 (-_ccg );_cad ,_gdd :=_g .Modf (_dfa );_bfg =append (_bfg ,_cadf (_cad ,_ce ,_ec )...);_bfg =append (_bfg ,_cbd (_gdd ,_ce ,_ec )...);_bfg =append (_bfg ,_dd (_fa ,_ec )...);if _ec ._gd {_bfg =_c .AppendInt (_bfg ,_gfg ,10);_bfg =append (_bfg ,'/');_bfg =_c .AppendInt (_bfg ,_ec ._eea ,10);};if !_gdg &&_df {return "\u002d"+string (_bfg );};return string (_bfg );};const _gab int =0;

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func Parse (s string )[]Format {_ccd :=Lexer {};_ccd .Lex (_ee .NewReader (s ));_ccd ._bead =append (_ccd ._bead ,_ccd ._bdf );return _ccd ._bead ;};const _dbg int =-1;const _faa int =34;

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_cca :=Parse (f );var _bb Format ;if len (_cca )==1{_bb =_cca [0];}else if len (_cca )==4{_bb =_cca [3];};_bg :=false ;for _ ,_ae :=range _bb .Whole {if _ae .Type ==FmtTypeText {_bg =true ;};};if !_bg {return v ;};_ga :=_ff .Buffer {};for _ ,_ac :=range _bb .Whole {switch _ac .Type {case FmtTypeLiteral :_ga .WriteByte (_ac .Literal );case FmtTypeText :_ga .WriteString (v );};};return _ga .String ();};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_ccb :=Parse (f );if len (_ccb )==1{return _fgb (v ,_ccb [0],false );}else if len (_ccb )> 1&&v < 0{return _fgb (v ,_ccb [1],true );}else if len (_ccb )> 2&&v ==0{return _fgb (v ,_ccb [2],false );};return _fgb (v ,_ccb [0],false );};const _fd =1e11;func _cadf (_fcd ,_af float64 ,_ada Format )[]byte {if len (_ada .Whole )==0{return nil ;};_gc :=_e .Date (1899,12,30,0,0,0,0,_e .UTC );_gcf :=_gc .Add (_e .Duration (_af *float64 (24*_e .Hour )));_gcf =_feda (_gcf );_aa :=_c .AppendFloat (nil ,_fcd ,'f',-1,64);_gfag :=make ([]byte ,0,len (_aa ));_gg :=0;_de :=1;_eed :for _acb :=len (_ada .Whole )-1;_acb >=0;_acb --{_fec :=len (_aa )-1-_gg ;_eb :=_ada .Whole [_acb ];switch _eb .Type {case FmtTypeDigit :if _fec >=0{_gfag =append (_gfag ,_aa [_fec ]);_gg ++;_de =_acb ;}else {_gfag =append (_gfag ,'0');};case FmtTypeDigitOpt :if _fec >=0{_gfag =append (_gfag ,_aa [_fec ]);_gg ++;_de =_acb ;}else {for _dba :=_acb ;_dba >=0;_dba --{_dfb :=_ada .Whole [_dba ];if _dfb .Type ==FmtTypeLiteral {_gfag =append (_gfag ,_dfb .Literal );};};break _eed ;};case FmtTypeDollar :for _aeg :=_gg ;_aeg < len (_aa );_aeg ++{_gfag =append (_gfag ,_aa [len (_aa )-1-_aeg ]);_gg ++;};_gfag =append (_gfag ,'$');case FmtTypeComma :if !_ada ._be {_gfag =append (_gfag ,',');};case FmtTypeLiteral :_gfag =append (_gfag ,_eb .Literal );case FmtTypeDate :_gfag =append (_gfag ,_ag (_ef (_gcf ,_eb .DateTime ))...);case FmtTypeTime :_gfag =append (_gfag ,_ag (_abe (_gcf ,_af ,_eb .DateTime ))...);default:_gf .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_eb );};};_eg :=_ag (_gfag );if _gg < len (_aa )&&(_gg !=0||_ada ._fe ){_aab :=len (_aa )-_gg ;_ece :=make ([]byte ,len (_eg )+_aab );copy (_ece ,_eg [0:_de ]);copy (_ece [_de :],_aa [0:]);copy (_ece [_de +_aab :],_eg [_de :]);_eg =_ece ;};if _ada ._be {_agd :=_ff .Buffer {};_fad :=0;for _gdb :=len (_eg )-1;_gdb >=0;_gdb --{if !(_eg [_gdb ]>='0'&&_eg [_gdb ]<='9'){_fad ++;}else {break ;};};for _ge :=0;_ge < len (_eg );_ge ++{_bbc :=(len (_eg )-_ge -_fad );if _bbc %3==0&&_bbc !=0&&_ge !=0{_agd .WriteByte (',');};_agd .WriteByte (_eg [_ge ]);};_eg =_agd .Bytes ();};return _eg ;};

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _g .Abs (v )>=_fd ||_g .Abs (v )<=_cf &&v !=0{return _ab (v );};_dde :=make ([]byte ,0,15);_dde =_c .AppendFloat (_dde ,v ,'f',-1,64);if len (_dde )> 11{_cd :=_dde [11]-'0';if _cd >=5&&_cd <=9{_dde [10]++;_dde =_dde [0:11];_dde =_eag (_dde );};_dde =_dde [0:11];}else if len (_dde )==11{if _dde [len (_dde )-1]=='9'{_dde [len (_dde )-1]++;_dde =_eag (_dde );};};_dde =_fgbf (_dde );return string (_dde );};

// AddToken adds a format token to the format.
func (_fde *Format )AddToken (t FmtType ,l []byte ){if _fde ._fg {_fde ._fg =false ;return ;};switch t {case FmtTypeDecimal :_fde ._fe =true ;case FmtTypeUnderscore :_fde ._fg =true ;case FmtTypeText :_fde .Whole =append (_fde .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_fde .Whole =append (_fde .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_fde ._eaf =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_gff :=range l {if _fde .IsExponential {_fde .Exponent =append (_fde .Exponent ,Token {Type :t ,Literal :_gff });}else if !_fde ._fe {_fde .Whole =append (_fde .Whole ,Token {Type :t ,Literal :_gff });}else {_fde .Fractional =append (_fde .Fractional ,Token {Type :t ,Literal :_gff });};};case FmtTypeDigitOptThousands :_fde ._be =true ;case FmtTypeFraction :_gda :=_ee .Split (string (l ),"\u002f");if len (_gda )==2{_fde ._gd =true ;_fde ._eea ,_ =_c .ParseInt (_gda [1],10,64);for _ ,_cb :=range _gda [1]{if _cb =='?'||_cb =='0'{_fde ._cfb ++;};};};default:_gf .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_fc ,_ :=_c .ParseFloat (v ,64);return Number (_fc ,f );};return String (v ,f );};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_gd bool ;_eaf bool ;_b bool ;_be bool ;_fg bool ;_fe bool ;_eea int64 ;_cfb int ;};var _ea =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};const _eacc int =0;const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);func (_dg FmtType )String ()string {if _dg >=FmtType (len (_ea )-1){return _da .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_dg );};return _dc [_ea [_dg ]:_ea [_dg +1]];};const _afd int =-1;