//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package format provides support for parsing and evaluating
// spreadsheetml/Excel number formats.
//
// Internally spreadsheets store numbers and dates values as a text
// representation of a floating point number (e.g. 1.2345).  This number is then
// displayed in Excel or another spreadsheet viewer differently depending on the
// number fornat of the cell style applied to the cell.
//
// As an example, the same value of 1.2345 can be displayed as:
// - "1" with format "0"
// - "1.2" with format "0.0"
// - "1.23" with format "0.00"
// - "1.235" with format "0.000"
// - "123%" with format "0%"
// - "1 23/100" with fornat "0 0/100"
// - "1.23E+00" with format "0.00E+00"
// - "29:37:41s" with format `[h]:mm:ss"s"`
package format ;import (_e "bytes";_g "fmt";_ef "github.com/unidoc/unioffice/common/logger";_b "io";_bg "math";_a "strconv";_c "strings";_gb "time";);const _dae int =-1;

// FmtType is the type of a format token.
//go:generate stringer -type=FmtType
type FmtType byte ;func _bbc (_bbb []byte )[]byte {for _cfc :=len (_bbb )-1;_cfc > 0;_cfc --{if _bbb [_cfc ]=='9'+1{_bbb [_cfc ]='0';if _bbb [_cfc -1]=='.'{_cfc --;};_bbb [_cfc -1]++;};};if _bbb [0]=='9'+1{_bbb [0]='0';copy (_bbb [1:],_bbb [0:]);_bbb [0]='1';};return _bbb ;};func _feb (_gegc _gb .Time ,_afdg float64 ,_adea string )[]byte {_def :=[]byte {};_fcb :=0;for _afc :=0;_afc < len (_adea );_afc ++{var _acc string ;if _adea [_afc ]==':'{_acc =string (_adea [_fcb :_afc ]);_fcb =_afc +1;}else if _afc ==len (_adea )-1{_acc =string (_adea [_fcb :_afc +1]);}else {continue ;};switch _acc {case "\u0064":_def =_gegc .AppendFormat (_def ,"\u0032");case "\u0068":_def =_gegc .AppendFormat (_def ,"\u0033");case "\u0068\u0068":_def =_gegc .AppendFormat (_def ,"\u0031\u0035");case "\u006d":_def =_gegc .AppendFormat (_def ,"\u0034");case "\u006d\u006d":_def =_gegc .AppendFormat (_def ,"\u0030\u0034");case "\u0073":_def =_gegc .Round (_gb .Second ).AppendFormat (_def ,"\u0035");case "\u0073\u002e\u0030":_def =_gegc .Round (_gb .Second /10).AppendFormat (_def ,"\u0035\u002e\u0030");case "\u0073\u002e\u0030\u0030":_def =_gegc .Round (_gb .Second /100).AppendFormat (_def ,"\u0035\u002e\u0030\u0030");case "\u0073\u002e\u00300\u0030":_def =_gegc .Round (_gb .Second /1000).AppendFormat (_def ,"\u0035\u002e\u00300\u0030");case "\u0073\u0073":_def =_gegc .Round (_gb .Second ).AppendFormat (_def ,"\u0030\u0035");case "\u0073\u0073\u002e\u0030":_def =_gegc .Round (_gb .Second /10).AppendFormat (_def ,"\u0030\u0035\u002e\u0030");case "\u0073\u0073\u002e0\u0030":_def =_gegc .Round (_gb .Second /100).AppendFormat (_def ,"\u0030\u0035\u002e0\u0030");case "\u0073\u0073\u002e\u0030\u0030\u0030":_def =_gegc .Round (_gb .Second /1000).AppendFormat (_def ,"\u0030\u0035\u002e\u0030\u0030\u0030");case "\u0041\u004d\u002fP\u004d":_def =_gegc .AppendFormat (_def ,"\u0050\u004d");case "\u005b\u0068\u005d":_def =_a .AppendInt (_def ,int64 (_afdg *24),10);case "\u005b\u006d\u005d":_def =_a .AppendInt (_def ,int64 (_afdg *24*60),10);case "\u005b\u0073\u005d":_def =_a .AppendInt (_def ,int64 (_afdg *24*60*60),10);case "":default:_ef .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0069\u006d\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_acc );};if _adea [_afc ]==':'{_def =append (_def ,':');};};return _def ;};const (FmtTypeLiteral FmtType =iota ;FmtTypeDigit ;FmtTypeDigitOpt ;FmtTypeComma ;FmtTypeDecimal ;FmtTypePercent ;FmtTypeDollar ;FmtTypeDigitOptThousands ;FmtTypeUnderscore ;FmtTypeDate ;FmtTypeTime ;FmtTypeFraction ;FmtTypeText ;);const _efbf int =-1;var _ga =[...]uint8 {0,14,26,41,53,67,81,94,118,135,146,157,172,183};func (_aagc *Lexer )nextFmt (){_aagc ._adbb =append (_aagc ._adbb ,_aagc ._ecce );_aagc ._ecce =Format {}};func _bada (_bba ,_fcf float64 ,_fab Format )[]byte {if len (_fab .Fractional )==0{return nil ;};_bcbd :=_a .AppendFloat (nil ,_bba ,'f',-1,64);if len (_bcbd )> 2{_bcbd =_bcbd [2:];}else {_bcbd =nil ;};_fb :=make ([]byte ,0,len (_bcbd ));_fb =append (_fb ,'.');_bga :=0;_da :for _daf :=0;_daf < len (_fab .Fractional );_daf ++{_fcd :=_daf ;_fdd :=_fab .Fractional [_daf ];switch _fdd .Type {case FmtTypeDigit :if _fcd < len (_bcbd ){_fb =append (_fb ,_bcbd [_fcd ]);_bga ++;}else {_fb =append (_fb ,'0');};case FmtTypeDigitOpt :if _fcd >=0{_fb =append (_fb ,_bcbd [_fcd ]);_bga ++;}else {break _da ;};case FmtTypeLiteral :_fb =append (_fb ,_fdd .Literal );default:_ef .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070o\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020f\u0072\u0061\u0063\u0074\u0069\u006f\u006ea\u006c\u0020\u0025\u0076",_fdd );};};return _fb ;};const _bgd =1e-10;

// Token is a format token in the Excel format string.
type Token struct{Type FmtType ;Literal byte ;DateTime string ;};func _fbf (_edbc _gb .Time )_gb .Time {_edbc =_edbc .UTC ();return _gb .Date (_edbc .Year (),_edbc .Month (),_edbc .Day (),_edbc .Hour (),_edbc .Minute (),_edbc .Second (),_edbc .Nanosecond (),_gb .Local );};func _ab (_be []byte )[]byte {for _dd :=0;_dd < len (_be )/2;_dd ++{_ffe :=len (_be )-1-_dd ;_be [_dd ],_be [_ffe ]=_be [_ffe ],_be [_dd ];};return _be ;};const _aggg int =34;

// NumberGeneric formats the number with the generic format which attemps to
// mimic Excel's general formatting.
func NumberGeneric (v float64 )string {if _bg .Abs (v )>=_ff ||_bg .Abs (v )<=_bgd &&v !=0{return _ega (v );};_dgg :=make ([]byte ,0,15);_dgg =_a .AppendFloat (_dgg ,v ,'f',-1,64);if len (_dgg )> 11{_eab :=_dgg [11]-'0';if _eab >=5&&_eab <=9{_dgg [10]++;_dgg =_dgg [0:11];_dgg =_bbc (_dgg );};_dgg =_dgg [0:11];}else if len (_dgg )==11{if _dgg [len (_dgg )-1]=='9'{_dgg [len (_dgg )-1]++;_dgg =_bbc (_dgg );};};_dgg =_gbga (_dgg );return string (_dgg );};func _gbga (_ffg []byte )[]byte {_gbba :=len (_ffg );_gf :=false ;_ddg :=false ;for _aeg :=len (_ffg )-1;_aeg >=0;_aeg --{if _ffg [_aeg ]=='0'&&!_ddg &&!_gf {_gbba =_aeg ;}else if _ffg [_aeg ]=='.'{_gf =true ;}else {_ddg =true ;};};if _gf &&_ddg {if _ffg [_gbba -1]=='.'{_gbba --;};return _ffg [0:_gbba ];};return _ffg ;};func IsNumber (data string )(_gbe bool ){_dafg ,_bee ,_fga :=0,0,len (data );_ffb :=len (data );_gae ,_caa ,_acfc :=0,0,0;_ =_caa ;_ =_acfc ;_ =_gae ;{_dafg =_cfb ;_gae =0;_caa =0;_acfc =0;};{if _bee ==_fga {goto _dbbb ;};switch _dafg {case 0:goto _eba ;case 1:goto _bbaa ;case 2:goto _ebg ;case 3:goto _agb ;case 4:goto _fde ;case 5:goto _bbac ;case 6:goto _fbb ;case 7:goto _dac ;};goto _ddc ;_aca :_caa =_bee ;_bee --;{_gbe =false ;};goto _abac ;_dfe :_caa =_bee ;_bee --;{_gbe =_caa ==len (data );};goto _abac ;_eaf :_caa =_bee ;_bee --;{_gbe =_caa ==len (data );};goto _abac ;_caag :switch _acfc {case 2:{_bee =(_caa )-1;_gbe =_caa ==len (data );};case 3:{_bee =(_caa )-1;_gbe =false ;};};goto _abac ;_abac :_gae =0;if _bee ++;_bee ==_fga {goto _dfg ;};_eba :_gae =_bee ;switch data [_bee ]{case 43:goto _aecf ;case 45:goto _aecf ;};if 48<=data [_bee ]&&data [_bee ]<=57{goto _aag ;};goto _cb ;_cb :if _bee ++;_bee ==_fga {goto _ccf ;};_bbaa :goto _cb ;_aecf :if _bee ++;_bee ==_fga {goto _cagg ;};_ebg :if 48<=data [_bee ]&&data [_bee ]<=57{goto _aag ;};goto _cb ;_aag :if _bee ++;_bee ==_fga {goto _bfdd ;};_agb :if data [_bee ]==46{goto _dba ;};if 48<=data [_bee ]&&data [_bee ]<=57{goto _aag ;};goto _cb ;_dba :if _bee ++;_bee ==_fga {goto _ddd ;};_fde :if 48<=data [_bee ]&&data [_bee ]<=57{goto _edf ;};goto _cb ;_edf :if _bee ++;_bee ==_fga {goto _bca ;};_bbac :if data [_bee ]==69{goto _dbbd ;};if 48<=data [_bee ]&&data [_bee ]<=57{goto _edf ;};goto _cb ;_dbbd :if _bee ++;_bee ==_fga {goto _cbf ;};_fbb :switch data [_bee ]{case 43:goto _egag ;case 45:goto _egag ;};goto _cb ;_egag :_caa =_bee +1;_acfc =3;goto _dde ;_fdc :_caa =_bee +1;_acfc =2;goto _dde ;_dde :if _bee ++;_bee ==_fga {goto _ccg ;};_dac :if 48<=data [_bee ]&&data [_bee ]<=57{goto _fdc ;};goto _cb ;_ddc :_dfg :_dafg =0;goto _dbbb ;_ccf :_dafg =1;goto _dbbb ;_cagg :_dafg =2;goto _dbbb ;_bfdd :_dafg =3;goto _dbbb ;_ddd :_dafg =4;goto _dbbb ;_bca :_dafg =5;goto _dbbb ;_cbf :_dafg =6;goto _dbbb ;_ccg :_dafg =7;goto _dbbb ;_dbbb :{};if _bee ==_ffb {switch _dafg {case 1:goto _aca ;case 2:goto _aca ;case 3:goto _dfe ;case 4:goto _aca ;case 5:goto _eaf ;case 6:goto _aca ;case 7:goto _caag ;};};};if _dafg ==_efbf {return false ;};return ;};const _ddgf int =0;func _ag (_faf float64 ,_eb Format ,_cc bool )string {if _eb ._ac {return NumberGeneric (_faf );};_ded :=make ([]byte ,0,20);_ade :=_bg .Signbit (_faf );_cce :=_bg .Abs (_faf );_cgf :=int64 (0);_gg :=int64 (0);if _eb .IsExponential {for _cce >=10{_gg ++;_cce /=10;};for _cce < 1{_gg --;_cce *=10;};}else if _eb ._bb {_cce *=100;}else if _eb ._cag {if _eb ._acg ==0{_ecc :=_bg .Pow (10,float64 (_eb ._eg ));_bae ,_gbb :=1.0,1.0;_ =_bae ;for _ce :=1.0;_ce < _ecc ;_ce ++{_ ,_aa :=_bg .Modf (_cce *float64 (_ce ));if _aa < _gbb {_gbb =_aa ;_bae =_ce ;if _aa ==0{break ;};};};_eb ._acg =int64 (_bae );};_cgf =int64 (_cce *float64 (_eb ._acg )+0.5);if len (_eb .Whole )> 0&&_cgf > _eb ._acg {_cgf =int64 (_cce *float64 (_eb ._acg ))%_eb ._acg ;_cce -=float64 (_cgf )/float64 (_eb ._acg );}else {_cce -=float64 (_cgf )/float64 (_eb ._acg );if _bg .Abs (_cce )< 1{_afd :=true ;for _ ,_aba :=range _eb .Whole {if _aba .Type ==FmtTypeDigitOpt {continue ;};if _aba .Type ==FmtTypeLiteral &&_aba .Literal ==' '{continue ;};_afd =false ;};if _afd {_eb .Whole =nil ;};};};};_adf :=1;for _ ,_abf :=range _eb .Fractional {if _abf .Type ==FmtTypeDigit ||_abf .Type ==FmtTypeDigitOpt {_adf ++;};};_cce +=5*_bg .Pow10 (-_adf );_cgfa ,_ge :=_bg .Modf (_cce );_ded =append (_ded ,_cfa (_cgfa ,_faf ,_eb )...);_ded =append (_ded ,_bada (_ge ,_faf ,_eb )...);_ded =append (_ded ,_geg (_gg ,_eb )...);if _eb ._cag {_ded =_a .AppendInt (_ded ,_cgf ,10);_ded =append (_ded ,'/');_ded =_a .AppendInt (_ded ,_eb ._acg ,10);};if !_cc &&_ade {return "\u002d"+string (_ded );};return string (_ded );};

// AddToken adds a format token to the format.
func (_acf *Format )AddToken (t FmtType ,l []byte ){if _acf ._ba {_acf ._ba =false ;return ;};switch t {case FmtTypeDecimal :_acf ._ae =true ;case FmtTypeUnderscore :_acf ._ba =true ;case FmtTypeText :_acf .Whole =append (_acf .Whole ,Token {Type :t });case FmtTypeDate ,FmtTypeTime :_acf .Whole =append (_acf .Whole ,Token {Type :t ,DateTime :string (l )});case FmtTypePercent :_acf ._bb =true ;t =FmtTypeLiteral ;l =[]byte {'%'};fallthrough;case FmtTypeDigitOpt :fallthrough;case FmtTypeLiteral ,FmtTypeDigit ,FmtTypeDollar ,FmtTypeComma :if l ==nil {l =[]byte {0};};for _ ,_ad :=range l {if _acf .IsExponential {_acf .Exponent =append (_acf .Exponent ,Token {Type :t ,Literal :_ad });}else if !_acf ._ae {_acf .Whole =append (_acf .Whole ,Token {Type :t ,Literal :_ad });}else {_acf .Fractional =append (_acf .Fractional ,Token {Type :t ,Literal :_ad });};};case FmtTypeDigitOptThousands :_acf ._d =true ;case FmtTypeFraction :_bd :=_c .Split (string (l ),"\u002f");if len (_bd )==2{_acf ._cag =true ;_acf ._acg ,_ =_a .ParseInt (_bd [1],10,64);for _ ,_de :=range _bd [1]{if _de =='?'||_de =='0'{_acf ._eg ++;};};};default:_ef .Log .Debug ("\u0075\u006e\u0073u\u0070\u0070\u006f\u0072t\u0065\u0064\u0020\u0070\u0068\u0020\u0074y\u0070\u0065\u0020\u0069\u006e\u0020\u0070\u0061\u0072\u0073\u0065\u0020\u0025\u0076",t );};};

// Value formats a value as a number or string depending on  if it appears to be
// a number or string.
func Value (v string ,f string )string {if IsNumber (v ){_fd ,_ :=_a .ParseFloat (v ,64);return Number (_fd ,f );};return String (v ,f );};func _geg (_bgf int64 ,_df Format )[]byte {if !_df .IsExponential ||len (_df .Exponent )==0{return nil ;};_bcf :=_a .AppendInt (nil ,_agc (_bgf ),10);_cca :=make ([]byte ,0,len (_bcf )+2);_cca =append (_cca ,'E');if _bgf >=0{_cca =append (_cca ,'+');}else {_cca =append (_cca ,'-');_bgf *=-1;};_adce :=0;_agg :for _adb :=len (_df .Exponent )-1;_adb >=0;_adb --{_afa :=len (_bcf )-1-_adce ;_dga :=_df .Exponent [_adb ];switch _dga .Type {case FmtTypeDigit :if _afa >=0{_cca =append (_cca ,_bcf [_afa ]);_adce ++;}else {_cca =append (_cca ,'0');};case FmtTypeDigitOpt :if _afa >=0{_cca =append (_cca ,_bcf [_afa ]);_adce ++;}else {for _aec :=_adb ;_aec >=0;_aec --{_gda :=_df .Exponent [_aec ];if _gda .Type ==FmtTypeLiteral {_cca =append (_cca ,_gda .Literal );};};break _agg ;};case FmtTypeLiteral :_cca =append (_cca ,_dga .Literal );default:_ef .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0074\u0079\u0070\u0065\u0020\u0069\u006e\u0020\u0065\u0078p\u0020\u0025\u0076",_dga );};};if _adce < len (_bcf ){_cca =append (_cca ,_bcf [len (_bcf )-_adce -1:_adce -1]...);};_ab (_cca [2:]);return _cca ;};func _agc (_gcb int64 )int64 {if _gcb < 0{return -_gcb ;};return _gcb ;};const _ca ="\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u004c\u0069\u0074\u0065\u0072a\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0069\u0067\u0069\u0074\u0046\u006d\u0074\u0054y\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0043o\u006d\u006d\u0061\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0044\u0065\u0063\u0069\u006da\u006c\u0046\u006d\u0074\u0054\u0079\u0070\u0065Pe\u0072\u0063e\u006e\u0074\u0046\u006d\u0074\u0054\u0079\u0070e\u0044\u006f\u006c\u006c\u0061\u0072\u0046\u006d\u0074Ty\u0070\u0065\u0044i\u0067\u0069\u0074\u004f\u0070\u0074\u0054\u0068\u006f\u0075\u0073\u0061n\u0064\u0073\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0055n\u0064\u0065\u0072\u0073c\u006f\u0072\u0065\u0046\u006d\u0074T\u0079\u0070\u0065\u0044\u0061\u0074\u0065\u0046\u006d\u0074\u0054y\u0070e\u0054\u0069\u006d\u0065\u0046\u006d\u0074\u0054\u0079\u0070\u0065\u0046\u0072\u0061\u0063t\u0069\u006f\u006e\u0046\u006dt\u0054\u0079\u0070\u0065\u0054e\u0078\u0074";const _fec int =0;const _ff =1e11;const _cfb int =0;const _bec int =34;func _fcdb (_bff _gb .Time ,_fce string )[]byte {_gfb :=[]byte {};_ed :=0;for _gaa :=0;_gaa < len (_fce );_gaa ++{var _dbb string ;if _fce [_gaa ]=='/'{_dbb =string (_fce [_ed :_gaa ]);_ed =_gaa +1;}else if _gaa ==len (_fce )-1{_dbb =string (_fce [_ed :_gaa +1]);}else {continue ;};switch _dbb {case "\u0079\u0079":_gfb =_bff .AppendFormat (_gfb ,"\u0030\u0036");case "\u0079\u0079\u0079\u0079":_gfb =_bff .AppendFormat (_gfb ,"\u0032\u0030\u0030\u0036");case "\u006d":_gfb =_bff .AppendFormat (_gfb ,"\u0031");case "\u006d\u006d":_gfb =_bff .AppendFormat (_gfb ,"\u0030\u0031");case "\u006d\u006d\u006d":_gfb =_bff .AppendFormat (_gfb ,"\u004a\u0061\u006e");case "\u006d\u006d\u006d\u006d":_gfb =_bff .AppendFormat (_gfb ,"\u004aa\u006e\u0075\u0061\u0072\u0079");case "\u006d\u006d\u006dm\u006d":switch _bff .Month (){case _gb .January ,_gb .July ,_gb .June :_gfb =append (_gfb ,'J');case _gb .February :_gfb =append (_gfb ,'M');case _gb .March ,_gb .May :_gfb =append (_gfb ,'M');case _gb .April ,_gb .August :_gfb =append (_gfb ,'A');case _gb .September :_gfb =append (_gfb ,'S');case _gb .October :_gfb =append (_gfb ,'O');case _gb .November :_gfb =append (_gfb ,'N');case _gb .December :_gfb =append (_gfb ,'D');};case "\u0064":_gfb =_bff .AppendFormat (_gfb ,"\u0032");case "\u0064\u0064":_gfb =_bff .AppendFormat (_gfb ,"\u0030\u0032");case "\u0064\u0064\u0064":_gfb =_bff .AppendFormat (_gfb ,"\u004d\u006f\u006e");case "\u0064\u0064\u0064\u0064":_gfb =_bff .AppendFormat (_gfb ,"\u004d\u006f\u006e\u0064\u0061\u0079");default:_ef .Log .Debug ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064 \u0064\u0061\u0074\u0065\u0020\u0066\u006f\u0072\u006d\u0061t\u0020\u0025\u0073",_dbb );};if _fce [_gaa ]=='/'{_gfb =append (_gfb ,'/');};};return _gfb ;};type Lexer struct{_ecce Format ;_adbb []Format ;};func _ega (_afb float64 )string {_bgc :=_a .FormatFloat (_afb ,'E',-1,64);_bccg :=_a .FormatFloat (_afb ,'E',5,64);if len (_bgc )< len (_bccg ){return _a .FormatFloat (_afb ,'E',2,64);};return _bccg ;};

// Format is a parsed number format.
type Format struct{Whole []Token ;Fractional []Token ;Exponent []Token ;IsExponential bool ;_cag bool ;_bb bool ;_ac bool ;_d bool ;_ba bool ;_ae bool ;_acg int64 ;_eg int ;};func (_dea *Lexer )Lex (r _b .Reader ){_dab ,_aage ,_egb :=0,0,0;_bea :=-1;_gdg ,_daef ,_gef :=0,0,0;_ =_daef ;_ =_gef ;_dc :=1;_ =_dc ;_efbfc :=make ([]byte ,4096);_eff :=false ;for !_eff {_gdb :=0;if _gdg > 0{_gdb =_aage -_gdg ;};_aage =0;_cef ,_gbc :=r .Read (_efbfc [_gdb :]);if _cef ==0||_gbc !=nil {_eff =true ;};_egb =_cef +_gdb ;if _egb < len (_efbfc ){_bea =_egb ;};{_dab =_aggg ;_gdg =0;_daef =0;_gef =0;};{if _aage ==_egb {goto _gbce ;};switch _dab {case 34:goto _gab ;case 35:goto _aed ;case 0:goto _fdf ;case 36:goto _ebc ;case 37:goto _geb ;case 1:goto _fafc ;case 2:goto _fdff ;case 38:goto _cae ;case 3:goto _fbd ;case 4:goto _ceg ;case 39:goto _dee ;case 5:goto _gafa ;case 6:goto _cegc ;case 7:goto _gbac ;case 8:goto _dfbg ;case 40:goto _ecg ;case 9:goto _aac ;case 41:goto _fcfe ;case 10:goto _bdg ;case 42:goto _eccb ;case 11:goto _dgd ;case 43:goto _abc ;case 44:goto _bgaf ;case 45:goto _acd ;case 12:goto _ffa ;case 46:goto _ddca ;case 13:goto _agd ;case 14:goto _dag ;case 15:goto _gdf ;case 16:goto _adac ;case 47:goto _gafb ;case 17:goto _dgb ;case 48:goto _gdbb ;case 18:goto _gde ;case 19:goto _gec ;case 20:goto _cbda ;case 49:goto _gca ;case 50:goto _bbca ;case 21:goto _cgc ;case 22:goto _faa ;case 23:goto _ace ;case 24:goto _cdb ;case 25:goto _eef ;case 51:goto _abde ;case 26:goto _dbf ;case 52:goto _aggb ;case 53:goto _aea ;case 54:goto _cga ;case 55:goto _eafg ;case 56:goto _gdd ;case 57:goto _aega ;case 27:goto _cgcb ;case 28:goto _eda ;case 29:goto _dggg ;case 30:goto _gaec ;case 31:goto _faff ;case 58:goto _eagf ;case 32:goto _fcff ;case 59:goto _efg ;case 33:goto _fcfc ;case 60:goto _cdcb ;case 61:goto _fafb ;case 62:goto _dff ;};goto _cda ;_fbc :switch _gef {case 2:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeDigit ,nil );};case 3:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeDigitOpt ,nil );};case 5:{_aage =(_daef )-1;};case 8:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypePercent ,nil );};case 13:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeFraction ,_efbfc [_gdg :_daef ]);};case 14:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeDate ,_efbfc [_gdg :_daef ]);};case 15:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeTime ,_efbfc [_gdg :_daef ]);};case 16:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeTime ,_efbfc [_gdg :_daef ]);};case 18:{_aage =(_daef )-1;};case 20:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeLiteral ,_efbfc [_gdg :_daef ]);};case 21:{_aage =(_daef )-1;_dea ._ecce .AddToken (FmtTypeLiteral ,_efbfc [_gdg +1:_daef -1]);};};goto _afg ;_gdgc :_aage =(_daef )-1;{_dea ._ecce .AddToken (FmtTypeFraction ,_efbfc [_gdg :_daef ]);};goto _afg ;_aee :_aage =(_daef )-1;{_dea ._ecce .AddToken (FmtTypeDigitOpt ,nil );};goto _afg ;_dfb :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeDigitOptThousands ,nil );};goto _afg ;_ggd :_aage =(_daef )-1;{_dea ._ecce .AddToken (FmtTypePercent ,nil );};goto _afg ;_dedf :_aage =(_daef )-1;{_dea ._ecce .AddToken (FmtTypeDate ,_efbfc [_gdg :_daef ]);};goto _afg ;_afbf :_aage =(_daef )-1;{_dea ._ecce .AddToken (FmtTypeDigit ,nil );};goto _afg ;_ged :_aage =(_daef )-1;{_dea ._ecce .AddToken (FmtTypeTime ,_efbfc [_gdg :_daef ]);};goto _afg ;_ede :_aage =(_daef )-1;{_dea ._ecce .AddToken (FmtTypeLiteral ,_efbfc [_gdg :_daef ]);};goto _afg ;_aece :_daef =_aage +1;{_dea ._ecce ._ac =true ;};goto _afg ;_egc :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeLiteral ,_efbfc [_gdg :_daef ]);};goto _afg ;_ccc :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeDollar ,nil );};goto _afg ;_abgc :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeComma ,nil );};goto _afg ;_cge :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeDecimal ,nil );};goto _afg ;_dad :_daef =_aage +1;{_dea .nextFmt ();};goto _afg ;_ada :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeText ,nil );};goto _afg ;_edc :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeUnderscore ,nil );};goto _afg ;_ffd :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypeLiteral ,_efbfc [_gdg :_daef ]);};goto _afg ;_eac :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypeLiteral ,_efbfc [_gdg +1:_daef -1]);};goto _afg ;_gbf :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypeDigitOpt ,nil );};goto _afg ;_ebaf :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypeFraction ,_efbfc [_gdg :_daef ]);};goto _afg ;_edb :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypePercent ,nil );};goto _afg ;_cbd :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypeDate ,_efbfc [_gdg :_daef ]);};goto _afg ;_aae :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypeDigit ,nil );};goto _afg ;_cfag :_daef =_aage ;_aage --;{_dea ._ecce .AddToken (FmtTypeTime ,_efbfc [_gdg :_daef ]);};goto _afg ;_gaf :_daef =_aage ;_aage --;{};goto _afg ;_ecb :_daef =_aage +1;{_dea ._ecce .IsExponential =true ;};goto _afg ;_gacf :_daef =_aage +1;{_dea ._ecce .AddToken (FmtTypeLiteral ,_efbfc [_gdg +1:_daef ]);};goto _afg ;_afg :_gdg =0;if _aage ++;_aage ==_egb {goto _ebfd ;};_gab :_gdg =_aage ;switch _efbfc [_aage ]{case 34:goto _ddcf ;case 35:goto _beb ;case 36:goto _ccc ;case 37:goto _fgb ;case 44:goto _abgc ;case 46:goto _cge ;case 47:goto _afga ;case 48:goto _bffb ;case 58:goto _ebcb ;case 59:goto _dad ;case 63:goto _gce ;case 64:goto _ada ;case 65:goto _bfa ;case 69:goto _cde ;case 71:goto _cfg ;case 91:goto _defc ;case 92:goto _dcb ;case 95:goto _edc ;case 100:goto _afga ;case 104:goto _ebcb ;case 109:goto _bed ;case 115:goto _fad ;case 121:goto _cagd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _ggf ;};goto _egc ;_ddcf :_daef =_aage +1;_gef =20;goto _cccg ;_cccg :if _aage ++;_aage ==_egb {goto _edbd ;};_aed :if _efbfc [_aage ]==34{goto _dafgc ;};goto _ffc ;_ffc :if _aage ++;_aage ==_egb {goto _eace ;};_fdf :if _efbfc [_aage ]==34{goto _dafgc ;};goto _ffc ;_dafgc :_daef =_aage +1;_gef =21;goto _fba ;_fba :if _aage ++;_aage ==_egb {goto _gee ;};_ebc :if _efbfc [_aage ]==34{goto _ffc ;};goto _eac ;_beb :_daef =_aage +1;_gef =3;goto _bcfg ;_bcfg :if _aage ++;_aage ==_egb {goto _deafe ;};_geb :switch _efbfc [_aage ]{case 35:goto _fdcd ;case 37:goto _fdcd ;case 44:goto _dcfe ;case 47:goto _gba ;case 48:goto _fdcd ;case 63:goto _fdcd ;};goto _gbf ;_fdcd :if _aage ++;_aage ==_egb {goto _baag ;};_fafc :switch _efbfc [_aage ]{case 35:goto _fdcd ;case 37:goto _fdcd ;case 47:goto _gba ;case 48:goto _fdcd ;case 63:goto _fdcd ;};goto _fbc ;_gba :if _aage ++;_aage ==_egb {goto _dgae ;};_fdff :switch _efbfc [_aage ]{case 35:goto _ee ;case 37:goto _cfbc ;case 48:goto _beac ;case 63:goto _ee ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _eaa ;};goto _fbc ;_ee :_daef =_aage +1;goto _baac ;_baac :if _aage ++;_aage ==_egb {goto _aggf ;};_cae :switch _efbfc [_aage ]{case 35:goto _ee ;case 37:goto _ee ;case 44:goto _ee ;case 46:goto _ee ;case 48:goto _ee ;case 63:goto _ee ;case 65:goto _cfbd ;};goto _ebaf ;_cfbd :if _aage ++;_aage ==_egb {goto _gcc ;};_fbd :switch _efbfc [_aage ]{case 47:goto _ebf ;case 77:goto _efbd ;};goto _gdgc ;_ebf :if _aage ++;_aage ==_egb {goto _agf ;};_ceg :if _efbfc [_aage ]==80{goto _gcd ;};goto _gdgc ;_gcd :_daef =_aage +1;goto _aab ;_aab :if _aage ++;_aage ==_egb {goto _aedc ;};_dee :if _efbfc [_aage ]==65{goto _cfbd ;};goto _ebaf ;_efbd :if _aage ++;_aage ==_egb {goto _efa ;};_gafa :if _efbfc [_aage ]==47{goto _afge ;};goto _gdgc ;_afge :if _aage ++;_aage ==_egb {goto _efcf ;};_cegc :if _efbfc [_aage ]==80{goto _aabe ;};goto _gdgc ;_aabe :if _aage ++;_aage ==_egb {goto _dec ;};_gbac :if _efbfc [_aage ]==77{goto _gcd ;};goto _gdgc ;_cfbc :if _aage ++;_aage ==_egb {goto _eagdb ;};_dfbg :switch _efbfc [_aage ]{case 35:goto _cdf ;case 37:goto _abfc ;case 63:goto _cdf ;};if 48<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _aace ;};goto _fbc ;_cdf :_daef =_aage +1;goto _fbde ;_fbde :if _aage ++;_aage ==_egb {goto _bgdg ;};_ecg :switch _efbfc [_aage ]{case 35:goto _ee ;case 37:goto _deaf ;case 44:goto _ee ;case 46:goto _ee ;case 48:goto _ee ;case 63:goto _ee ;case 65:goto _cfbd ;};goto _ebaf ;_deaf :if _aage ++;_aage ==_egb {goto _abfg ;};_aac :switch _efbfc [_aage ]{case 35:goto _ccad ;case 44:goto _ccad ;case 46:goto _ccad ;case 48:goto _ccad ;case 63:goto _ccad ;};goto _gdgc ;_ccad :_daef =_aage +1;goto _efc ;_efc :if _aage ++;_aage ==_egb {goto _bbg ;};_fcfe :switch _efbfc [_aage ]{case 35:goto _ccad ;case 44:goto _ccad ;case 46:goto _ccad ;case 48:goto _ccad ;case 63:goto _ccad ;case 65:goto _cfbd ;};goto _ebaf ;_abfc :if _aage ++;_aage ==_egb {goto _gabf ;};_bdg :if _efbfc [_aage ]==37{goto _abfc ;};if 48<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _aace ;};goto _fbc ;_aace :_daef =_aage +1;_gef =13;goto _ccac ;_ccac :if _aage ++;_aage ==_egb {goto _bdf ;};_eccb :switch _efbfc [_aage ]{case 35:goto _ee ;case 37:goto _cdfb ;case 44:goto _ee ;case 46:goto _ee ;case 48:goto _afgd ;case 63:goto _ee ;case 65:goto _cfbd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _aace ;};goto _ebaf ;_cdfb :if _aage ++;_aage ==_egb {goto _deae ;};_dgd :switch _efbfc [_aage ]{case 35:goto _ccad ;case 37:goto _abfc ;case 44:goto _ccad ;case 46:goto _ccad ;case 63:goto _ccad ;};if 48<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _aace ;};goto _gdgc ;_afgd :_daef =_aage +1;goto _daa ;_daa :if _aage ++;_aage ==_egb {goto _accb ;};_abc :switch _efbfc [_aage ]{case 35:goto _ee ;case 37:goto _afgd ;case 44:goto _ee ;case 46:goto _ee ;case 48:goto _afgd ;case 63:goto _ee ;case 65:goto _cfbd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _aace ;};goto _ebaf ;_beac :_daef =_aage +1;goto _dcf ;_dcf :if _aage ++;_aage ==_egb {goto _bcfd ;};_bgaf :switch _efbfc [_aage ]{case 35:goto _ee ;case 37:goto _afgd ;case 44:goto _ee ;case 46:goto _ee ;case 48:goto _beac ;case 63:goto _ee ;case 65:goto _cfbd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _eaa ;};goto _ebaf ;_eaa :_daef =_aage +1;goto _dce ;_dce :if _aage ++;_aage ==_egb {goto _cea ;};_acd :switch _efbfc [_aage ]{case 35:goto _ee ;case 37:goto _aace ;case 44:goto _ee ;case 46:goto _ee ;case 48:goto _beac ;case 63:goto _ee ;case 65:goto _cfbd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _eaa ;};goto _ebaf ;_dcfe :if _aage ++;_aage ==_egb {goto _fff ;};_ffa :if _efbfc [_aage ]==35{goto _dfb ;};goto _aee ;_fgb :_daef =_aage +1;_gef =8;goto _fgad ;_fgad :if _aage ++;_aage ==_egb {goto _bgdge ;};_ddca :switch _efbfc [_aage ]{case 35:goto _cff ;case 37:goto _ebe ;case 48:goto _febg ;case 63:goto _cff ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _dbc ;};goto _edb ;_cff :if _aage ++;_aage ==_egb {goto _defca ;};_agd :switch _efbfc [_aage ]{case 35:goto _cff ;case 47:goto _gba ;case 48:goto _cff ;case 63:goto _cff ;};goto _ggd ;_ebe :if _aage ++;_aage ==_egb {goto _debe ;};_dag :if _efbfc [_aage ]==37{goto _ebe ;};if 48<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _dbc ;};goto _fbc ;_dbc :if _aage ++;_aage ==_egb {goto _eccf ;};_gdf :switch _efbfc [_aage ]{case 37:goto _ebe ;case 47:goto _gba ;};if 48<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _dbc ;};goto _fbc ;_febg :if _aage ++;_aage ==_egb {goto _cgab ;};_adac :switch _efbfc [_aage ]{case 35:goto _cff ;case 37:goto _ebe ;case 47:goto _gba ;case 48:goto _febg ;case 63:goto _cff ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _dbc ;};goto _ggd ;_afga :_daef =_aage +1;goto _bgff ;_bgff :if _aage ++;_aage ==_egb {goto _bbfd ;};_gafb :switch _efbfc [_aage ]{case 47:goto _afga ;case 100:goto _afga ;case 109:goto _afga ;case 121:goto _debc ;};goto _cbd ;_debc :if _aage ++;_aage ==_egb {goto _ebfg ;};_dgb :if _efbfc [_aage ]==121{goto _afga ;};goto _dedf ;_bffb :_daef =_aage +1;_gef =2;goto _bgcb ;_bgcb :if _aage ++;_aage ==_egb {goto _caac ;};_gdbb :switch _efbfc [_aage ]{case 35:goto _fdcd ;case 37:goto _ccaf ;case 47:goto _gba ;case 48:goto _adgc ;case 63:goto _fdcd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _efcc ;};goto _aae ;_ccaf :if _aage ++;_aage ==_egb {goto _fgc ;};_gde :switch _efbfc [_aage ]{case 35:goto _fdcd ;case 37:goto _ccaf ;case 47:goto _gba ;case 48:goto _ccaf ;case 63:goto _fdcd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _dbc ;};goto _afbf ;_adgc :if _aage ++;_aage ==_egb {goto _bbd ;};_gec :switch _efbfc [_aage ]{case 35:goto _fdcd ;case 37:goto _ccaf ;case 47:goto _gba ;case 48:goto _adgc ;case 63:goto _fdcd ;};if 49<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _efcc ;};goto _afbf ;_efcc :if _aage ++;_aage ==_egb {goto _fabc ;};_cbda :switch _efbfc [_aage ]{case 37:goto _dbc ;case 47:goto _gba ;};if 48<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _efcc ;};goto _fbc ;_ggf :_daef =_aage +1;_gef =20;goto _dgab ;_dgab :if _aage ++;_aage ==_egb {goto _beeb ;};_gca :switch _efbfc [_aage ]{case 37:goto _dbc ;case 47:goto _gba ;};if 48<=_efbfc [_aage ]&&_efbfc [_aage ]<=57{goto _efcc ;};goto _ffd ;_ebcb :_daef =_aage +1;_gef =15;goto _cdc ;_cdc :if _aage ++;_aage ==_egb {goto _bebb ;};_bbca :switch _efbfc [_aage ]{case 58:goto _ebcb ;case 65:goto _fgbb ;case 104:goto _ebcb ;case 109:goto _ebcb ;case 115:goto _fad ;};goto _cfag ;_fgbb :if _aage ++;_aage ==_egb {goto _deeb ;};_cgc :switch _efbfc [_aage ]{case 47:goto _adcc ;case 77:goto _daed ;};goto _fbc ;_adcc :if _aage ++;_aage ==_egb {goto _ffgb ;};_faa :if _efbfc [_aage ]==80{goto _ebcb ;};goto _fbc ;_daed :if _aage ++;_aage ==_egb {goto _fgd ;};_ace :if _efbfc [_aage ]==47{goto _abff ;};goto _fbc ;_abff :if _aage ++;_aage ==_egb {goto _gdbe ;};_cdb :if _efbfc [_aage ]==80{goto _cgd ;};goto _fbc ;_cgd :if _aage ++;_aage ==_egb {goto _fag ;};_eef :if _efbfc [_aage ]==77{goto _ebcb ;};goto _fbc ;_fad :_daef =_aage +1;_gef =15;goto _ccda ;_ccda :if _aage ++;_aage ==_egb {goto _aecd ;};_abde :switch _efbfc [_aage ]{case 46:goto _ddb ;case 58:goto _ebcb ;case 65:goto _fgbb ;case 104:goto _ebcb ;case 109:goto _ebcb ;case 115:goto _fad ;};goto _cfag ;_ddb :if _aage ++;_aage ==_egb {goto _adbbe ;};_dbf :if _efbfc [_aage ]==48{goto _bfdc ;};goto _ged ;_bfdc :_daef =_aage +1;_gef =15;goto _cefg ;_cefg :if _aage ++;_aage ==_egb {goto _dagd ;};_aggb :switch _efbfc [_aage ]{case 48:goto _add ;case 58:goto _ebcb ;case 65:goto _fgbb ;case 104:goto _ebcb ;case 109:goto _ebcb ;case 115:goto _fad ;};goto _cfag ;_add :_daef =_aage +1;_gef =15;goto _efbdd ;_efbdd :if _aage ++;_aage ==_egb {goto _fca ;};_aea :switch _efbfc [_aage ]{case 48:goto _ebcb ;case 58:goto _ebcb ;case 65:goto _fgbb ;case 104:goto _ebcb ;case 109:goto _ebcb ;case 115:goto _fad ;};goto _cfag ;_gce :_daef =_aage +1;_gef =5;goto _bbf ;_bbf :if _aage ++;_aage ==_egb {goto _ced ;};_cga :switch _efbfc [_aage ]{case 35:goto _fdcd ;case 37:goto _fdcd ;case 47:goto _gba ;case 48:goto _fdcd ;case 63:goto _fdcd ;};goto _gaf ;_bfa :_daef =_aage +1;_gef =20;goto _cged ;_cged :if _aage ++;_aage ==_egb {goto _bgb ;};_eafg :switch _efbfc [_aage ]{case 47:goto _adcc ;case 77:goto _daed ;};goto _ffd ;_cde :if _aage ++;_aage ==_egb {goto _fcaf ;};_gdd :switch _efbfc [_aage ]{case 43:goto _ecb ;case 45:goto _ecb ;};goto _ffd ;_cfg :_daef =_aage +1;goto _cfgf ;_cfgf :if _aage ++;_aage ==_egb {goto _fbdc ;};_aega :if _efbfc [_aage ]==101{goto _eabc ;};goto _ffd ;_eabc :if _aage ++;_aage ==_egb {goto _daag ;};_cgcb :if _efbfc [_aage ]==110{goto _ffbc ;};goto _ede ;_ffbc :if _aage ++;_aage ==_egb {goto _agdg ;};_eda :if _efbfc [_aage ]==101{goto _dafgb ;};goto _ede ;_dafgb :if _aage ++;_aage ==_egb {goto _aeaa ;};_dggg :if _efbfc [_aage ]==114{goto _dgdb ;};goto _ede ;_dgdb :if _aage ++;_aage ==_egb {goto _ffgbg ;};_gaec :if _efbfc [_aage ]==97{goto _faca ;};goto _ede ;_faca :if _aage ++;_aage ==_egb {goto _cbg ;};_faff :if _efbfc [_aage ]==108{goto _aece ;};goto _ede ;_defc :_daef =_aage +1;_gef =20;goto _edbb ;_edbb :if _aage ++;_aage ==_egb {goto _bac ;};_eagf :switch _efbfc [_aage ]{case 104:goto _eagd ;case 109:goto _eagd ;case 115:goto _eagd ;};goto _acdc ;_acdc :if _aage ++;_aage ==_egb {goto _gbgaa ;};_fcff :if _efbfc [_aage ]==93{goto _gecb ;};goto _acdc ;_gecb :_daef =_aage +1;_gef =18;goto _baad ;_dgdd :_daef =_aage +1;_gef =16;goto _baad ;_baad :if _aage ++;_aage ==_egb {goto _baf ;};_efg :if _efbfc [_aage ]==93{goto _gecb ;};goto _acdc ;_eagd :if _aage ++;_aage ==_egb {goto _bdfa ;};_fcfc :if _efbfc [_aage ]==93{goto _dgdd ;};goto _acdc ;_dcb :if _aage ++;_aage ==_egb {goto _fceb ;};_cdcb :goto _gacf ;_bed :_daef =_aage +1;_gef =14;goto _ddcb ;_ddcb :if _aage ++;_aage ==_egb {goto _gdff ;};_fafb :switch _efbfc [_aage ]{case 47:goto _afga ;case 58:goto _ebcb ;case 65:goto _fgbb ;case 100:goto _afga ;case 104:goto _ebcb ;case 109:goto _bed ;case 115:goto _fad ;case 121:goto _debc ;};goto _cbd ;_cagd :if _aage ++;_aage ==_egb {goto _aeee ;};_dff :if _efbfc [_aage ]==121{goto _afga ;};goto _ffd ;_cda :_ebfd :_dab =34;goto _gbce ;_edbd :_dab =35;goto _gbce ;_eace :_dab =0;goto _gbce ;_gee :_dab =36;goto _gbce ;_deafe :_dab =37;goto _gbce ;_baag :_dab =1;goto _gbce ;_dgae :_dab =2;goto _gbce ;_aggf :_dab =38;goto _gbce ;_gcc :_dab =3;goto _gbce ;_agf :_dab =4;goto _gbce ;_aedc :_dab =39;goto _gbce ;_efa :_dab =5;goto _gbce ;_efcf :_dab =6;goto _gbce ;_dec :_dab =7;goto _gbce ;_eagdb :_dab =8;goto _gbce ;_bgdg :_dab =40;goto _gbce ;_abfg :_dab =9;goto _gbce ;_bbg :_dab =41;goto _gbce ;_gabf :_dab =10;goto _gbce ;_bdf :_dab =42;goto _gbce ;_deae :_dab =11;goto _gbce ;_accb :_dab =43;goto _gbce ;_bcfd :_dab =44;goto _gbce ;_cea :_dab =45;goto _gbce ;_fff :_dab =12;goto _gbce ;_bgdge :_dab =46;goto _gbce ;_defca :_dab =13;goto _gbce ;_debe :_dab =14;goto _gbce ;_eccf :_dab =15;goto _gbce ;_cgab :_dab =16;goto _gbce ;_bbfd :_dab =47;goto _gbce ;_ebfg :_dab =17;goto _gbce ;_caac :_dab =48;goto _gbce ;_fgc :_dab =18;goto _gbce ;_bbd :_dab =19;goto _gbce ;_fabc :_dab =20;goto _gbce ;_beeb :_dab =49;goto _gbce ;_bebb :_dab =50;goto _gbce ;_deeb :_dab =21;goto _gbce ;_ffgb :_dab =22;goto _gbce ;_fgd :_dab =23;goto _gbce ;_gdbe :_dab =24;goto _gbce ;_fag :_dab =25;goto _gbce ;_aecd :_dab =51;goto _gbce ;_adbbe :_dab =26;goto _gbce ;_dagd :_dab =52;goto _gbce ;_fca :_dab =53;goto _gbce ;_ced :_dab =54;goto _gbce ;_bgb :_dab =55;goto _gbce ;_fcaf :_dab =56;goto _gbce ;_fbdc :_dab =57;goto _gbce ;_daag :_dab =27;goto _gbce ;_agdg :_dab =28;goto _gbce ;_aeaa :_dab =29;goto _gbce ;_ffgbg :_dab =30;goto _gbce ;_cbg :_dab =31;goto _gbce ;_bac :_dab =58;goto _gbce ;_gbgaa :_dab =32;goto _gbce ;_baf :_dab =59;goto _gbce ;_bdfa :_dab =33;goto _gbce ;_fceb :_dab =60;goto _gbce ;_gdff :_dab =61;goto _gbce ;_aeee :_dab =62;goto _gbce ;_gbce :{};if _aage ==_bea {switch _dab {case 35:goto _ffd ;case 0:goto _fbc ;case 36:goto _eac ;case 37:goto _gbf ;case 1:goto _fbc ;case 2:goto _fbc ;case 38:goto _ebaf ;case 3:goto _gdgc ;case 4:goto _gdgc ;case 39:goto _ebaf ;case 5:goto _gdgc ;case 6:goto _gdgc ;case 7:goto _gdgc ;case 8:goto _fbc ;case 40:goto _ebaf ;case 9:goto _gdgc ;case 41:goto _ebaf ;case 10:goto _fbc ;case 42:goto _ebaf ;case 11:goto _gdgc ;case 43:goto _ebaf ;case 44:goto _ebaf ;case 45:goto _ebaf ;case 12:goto _aee ;case 46:goto _edb ;case 13:goto _ggd ;case 14:goto _fbc ;case 15:goto _fbc ;case 16:goto _ggd ;case 47:goto _cbd ;case 17:goto _dedf ;case 48:goto _aae ;case 18:goto _afbf ;case 19:goto _afbf ;case 20:goto _fbc ;case 49:goto _ffd ;case 50:goto _cfag ;case 21:goto _fbc ;case 22:goto _fbc ;case 23:goto _fbc ;case 24:goto _fbc ;case 25:goto _fbc ;case 51:goto _cfag ;case 26:goto _ged ;case 52:goto _cfag ;case 53:goto _cfag ;case 54:goto _gaf ;case 55:goto _ffd ;case 56:goto _ffd ;case 57:goto _ffd ;case 27:goto _ede ;case 28:goto _ede ;case 29:goto _ede ;case 30:goto _ede ;case 31:goto _ede ;case 58:goto _ffd ;case 32:goto _fbc ;case 59:goto _fbc ;case 33:goto _ede ;case 60:goto _ffd ;case 61:goto _cbd ;case 62:goto _ffd ;};};};if _gdg > 0{copy (_efbfc [0:],_efbfc [_gdg :]);};};_ =_bea ;if _dab ==_efbf {_ef .Log .Debug ("\u0066o\u0072m\u0061\u0074\u0020\u0070\u0061r\u0073\u0065 \u0065\u0072\u0072\u006f\u0072");};};func _cfa (_ege ,_adg float64 ,_gbg Format )[]byte {if len (_gbg .Whole )==0{return nil ;};_gd :=_gb .Date (1899,12,30,0,0,0,0,_gb .UTC );_bdc :=_gd .Add (_gb .Duration (_adg *float64 (24*_gb .Hour )));_bdc =_fbf (_bdc );_adc :=_a .AppendFloat (nil ,_ege ,'f',-1,64);_dbd :=make ([]byte ,0,len (_adc ));_ccd :=0;_affb :=1;_bef :for _eca :=len (_gbg .Whole )-1;_eca >=0;_eca --{_fe :=len (_adc )-1-_ccd ;_cee :=_gbg .Whole [_eca ];switch _cee .Type {case FmtTypeDigit :if _fe >=0{_dbd =append (_dbd ,_adc [_fe ]);_ccd ++;_affb =_eca ;}else {_dbd =append (_dbd ,'0');};case FmtTypeDigitOpt :if _fe >=0{_dbd =append (_dbd ,_adc [_fe ]);_ccd ++;_affb =_eca ;}else {for _gcg :=_eca ;_gcg >=0;_gcg --{_cd :=_gbg .Whole [_gcg ];if _cd .Type ==FmtTypeLiteral {_dbd =append (_dbd ,_cd .Literal );};};break _bef ;};case FmtTypeDollar :for _cac :=_ccd ;_cac < len (_adc );_cac ++{_dbd =append (_dbd ,_adc [len (_adc )-1-_cac ]);_ccd ++;};_dbd =append (_dbd ,'$');case FmtTypeComma :if !_gbg ._d {_dbd =append (_dbd ,',');};case FmtTypeLiteral :_dbd =append (_dbd ,_cee .Literal );case FmtTypeDate :_dbd =append (_dbd ,_ab (_fcdb (_bdc ,_cee .DateTime ))...);case FmtTypeTime :_dbd =append (_dbd ,_ab (_feb (_bdc ,_adg ,_cee .DateTime ))...);default:_ef .Log .Debug ("\u0075\u006e\u0073\u0075p\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0074\u0079\u0070e\u0020i\u006e\u0020\u0077\u0068\u006f\u006c\u0065 \u0025\u0076",_cee );};};_abg :=_ab (_dbd );if _ccd < len (_adc )&&(_ccd !=0||_gbg ._ae ){_efb :=len (_adc )-_ccd ;_bf :=make ([]byte ,len (_abg )+_efb );copy (_bf ,_abg [0:_affb ]);copy (_bf [_affb :],_adc [0:]);copy (_bf [_affb +_efb :],_abg [_affb :]);_abg =_bf ;};if _gbg ._d {_fc :=_e .Buffer {};_efba :=0;for _ea :=len (_abg )-1;_ea >=0;_ea --{if !(_abg [_ea ]>='0'&&_abg [_ea ]<='9'){_efba ++;}else {break ;};};for _bcc :=0;_bcc < len (_abg );_bcc ++{_fac :=(len (_abg )-_bcc -_efba );if _fac %3==0&&_fac !=0&&_bcc !=0{_fc .WriteByte (',');};_fc .WriteByte (_abg [_bcc ]);};_abg =_fc .Bytes ();};return _abg ;};

// Number is used to format a number with a format string.  If the format
// string is empty, then General number formatting is used which attempts to mimic
// Excel's general formatting.
func Number (v float64 ,f string )string {if f ==""||f =="\u0047e\u006e\u0065\u0072\u0061\u006c"||f =="\u0040"{return NumberGeneric (v );};_dg :=Parse (f );if len (_dg )==1{return _ag (v ,_dg [0],false );}else if len (_dg )> 1&&v < 0{return _ag (v ,_dg [1],true );}else if len (_dg )> 2&&v ==0{return _ag (v ,_dg [2],false );};return _ag (v ,_dg [0],false );};const _ffge int =34;func (_bc FmtType )String ()string {if _bc >=FmtType (len (_ga )-1){return _g .Sprintf ("F\u006d\u0074\u0054\u0079\u0070\u0065\u0028\u0025\u0064\u0029",_bc );};return _ca [_ga [_bc ]:_ga [_bc +1]];};

// String returns the string formatted according to the type.  In format strings
// this is the fourth item, where '@' is used as a placeholder for text.
func String (v string ,f string )string {_bad :=Parse (f );var _ec Format ;if len (_bad )==1{_ec =_bad [0];}else if len (_bad )==4{_ec =_bad [3];};_gad :=false ;for _ ,_cg :=range _ec .Whole {if _cg .Type ==FmtTypeText {_gad =true ;};};if !_gad {return v ;};_db :=_e .Buffer {};for _ ,_deb :=range _ec .Whole {switch _deb .Type {case FmtTypeLiteral :_db .WriteByte (_deb .Literal );case FmtTypeText :_db .WriteString (v );};};return _db .String ();};func Parse (s string )[]Format {_feg :=Lexer {};_feg .Lex (_c .NewReader (s ));_feg ._adbb =append (_feg ._adbb ,_feg ._ecce );return _feg ._adbb ;};